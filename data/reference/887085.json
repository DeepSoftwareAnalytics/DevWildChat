[
    {
        "link": "https://stackoverflow.com/questions/10435407/proxy-with-express-js",
        "document": "To avoid same-domain AJAX issues, I want my node.js web server to forward all requests from URL to another server, for example , and return to user the same thing that this remote server returned, transparently.\n\nAll other URLs (beside ) are to be served directly, no proxying.\n\nHow do I achieve this with node.js + express.js? Can you give a simple code example?\n\nSo far I found this https://github.com/http-party/node-http-proxy , but reading the documentation there didn't make me any wiser. I ended up with\n\nbut nothing is returned to the original web server (or to the end user), so no luck."
    },
    {
        "link": "https://dev.to/saikumar2121/utilizing-http-proxy-middleware-for-efficient-api-integration-and-development-5ddj",
        "document": "The HTTP-proxy-middleware package is a popular and versatile middleware for Node.js applications that enables the efficient management and manipulation of HTTP requests to an external server. This tool is particularly useful in development environments where a local client needs to communicate with an external API without running into issues like CORS (Cross-Origin Resource Sharing). Letâ€™s explore why it's beneficial to use http-proxy-middleware and how to implement it with sample code snippets.\n\nWhy Use http-proxy-middleware?\n\n Simplifying Development: By routing API requests through a proxy server that runs on your local development server, http-proxy-middleware simplifies the process of integrating external APIs. This means developers can work as if the external API is hosted locally, which speeds up development and testing.\n\n Handling CORS Issues: CORS policies can restrict how resources on a web page can be requested from another domain. http-proxy-middleware can help bypass these restrictions during development by making it appear that all requests originate from the same domain.\n\n Enhanced Security: Proxy servers can also add an additional layer of security by limiting direct exposure of external APIs to the client. You can add authentication or other security measures on the proxy server without modifying the client or the backend.\n\n Load Balancing: This middleware can be configured to distribute incoming requests across multiple servers, balancing the load and improving the resilience and availability of applications.\n\n How to Use http-proxy-middleware?\n\n To use http-proxy-middleware, you first need to install it via npm:\n\n\n\nThen, integrate it into your Node.js application. Hereâ€™s a simple example using Express.js:\n\n\n\nIn this example:\n\nAll requests to /api on our local server are proxied to https://external-api.example.com.\n\n The changeOrigin option modifies the origin of the host header to the target URL, which is essential for handling CORS issues.\n\n The pathRewrite option removes the /api path segment, ensuring that the proxied requests match the paths expected by the external API.\n\n Conclusion\n\n http-proxy-middleware is an essential tool for modern web development. By handling cross-domain issues, enhancing security, and simplifying API requests, it allows developers to focus more on developing their applications rather than dealing with infrastructure challenges. The middlewareâ€™s flexibility and ease of integration into existing Node.js applications make it an invaluable resource for any developer looking to enhance their web development capabilities."
    },
    {
        "link": "https://github.com/chimurai/http-proxy-middleware",
        "document": "Node.js proxying made simple. Configure proxy middleware with ease for connect, express, next.js and many more.\n\nThis page is showing documentation for version v3.x.x (release notes)\n\nSee MIGRATION.md for details on how to migrate from v2.x.x to v3.x.x\n\nIf you're looking for older documentation. Go to:\n\nðŸ’¡ Tip: Set the option to for name-based virtual hosted sites.\n\nAll options can be used, along with some extra options.\n\nAn example with server.\n\nIf you want to use the server's parameter to match requests. Use option to further include/exclude requests which you want to proxy.\n\nNarrow down which requests should be proxied. The used for filtering is the pathname. In Express, this is the relative to the mount-point of the proxy.\nâ€¢ \nâ€¢ - matches any path, all requests will be proxied when is not configured.\nâ€¢ For fine-grained control you can use wildcard matching. Glob pattern matching is done by micromatch. Visit micromatch or glob for more globbing examples.\nâ€¢ matches any path, all requests will be proxied.\nâ€¢ matches any path which ends with\nâ€¢ matches requests ending with in the path of Note: In multiple path matching, you cannot use string paths and wildcard paths together.\nâ€¢ For full control you can provide a custom function to determine which requests should be proxied or not.\n\nRewrite target's url path. Object-keys will be used as RegExp to match paths.\n\nIf you're not satisfied with the pre-configured plugins, you can eject them by configuring .\n\nNOTE: register your own error handlers to prevent server from crashing.\n\nConfigure a logger to output information from http-proxy-middleware: ie. , , , , , etc...\n\nOnly , , are used internally for compatibility across different loggers.\n\nIf you use , make sure to enable interpolation: https://github.com/winstonjs/winston#string-interpolation\n\nSee also logger recipes (recipes/logger.md) for more details.\n\nSubscribe to http-proxy events with the option:\nâ€¢ : 'Something went wrong. And we are reporting a custom error message.'\nâ€¢ // listen for messages coming FROM the target here\n\nThe following options are provided by the underlying http-proxy library.\nâ€¢ option.target: url string to be parsed with the url module\nâ€¢ option.forward: url string to be parsed with the url module\nâ€¢ option.agent: object to be passed to http(s).request (see Node's https agent and http agent objects)\nâ€¢ option.ssl: object to be passed to https.createServer()\nâ€¢ option.ws: true/false: if you want to proxy websockets\nâ€¢ option.secure: true/false, if you want to verify the SSL Certs\nâ€¢ option.toProxy: true/false, passes the absolute URL as the (useful for proxying to proxies)\nâ€¢ option.prependPath: true/false, Default: true - specify whether you want to prepend the target's path to the proxy path\nâ€¢ option.ignorePath: true/false, Default: false - specify whether you want to ignore the proxy path of the incoming request (note: you will have to append / manually if required).\nâ€¢ option.changeOrigin: true/false, Default: false - changes the origin of the host header to the target URL\nâ€¢ option.preserveHeaderKeyCase: true/false, Default: false - specify whether you want to keep letter case of response header key\nâ€¢ option.autoRewrite: rewrites the location host/port on (301/302/307/308) redirects based on requested host/port. Default: false.\nâ€¢ option.protocolRewrite: rewrites the location protocol on (301/302/307/308) redirects to 'http' or 'https'. Default: null.\nâ€¢ \nâ€¢ String: new domain, for example . To remove the domain, use .\nâ€¢ Object: mapping of domains to new domains, use to match all domains.\n\n For example keep one domain unchanged, rewrite one domain and remove other domains:\nâ€¢ \nâ€¢ String: new path, for example . To remove the path, use . To set path to root use .\nâ€¢ Object: mapping of paths to new paths, use to match all paths. For example, to keep one path unchanged, rewrite one path and remove other paths:\nâ€¢ option.proxyTimeout: timeout (in millis) when proxy receives no response from target\nâ€¢ option.followRedirects: true/false, Default: false - specify whether you want to follow redirects\nâ€¢ option.selfHandleResponse true/false, if set to true, none of the webOutgoing passes are called and it's your responsibility to appropriately return the response by listening and acting on the event\nâ€¢ option.buffer: stream of data to send as the request body. Maybe you have some middleware that consumes the request stream before proxying it on e.g. If you read the body of a request into a field called 'req.rawbody' you could restream this field in the buffer option:\n\nIn the previous WebSocket examples, http-proxy-middleware relies on a initial http request in order to listen to the http event. If you need to proxy WebSockets without the initial http request, you can subscribe to the server's http event manually.\n\nIntercept requests from downstream by defining in .\n\nCurrently the only pre-provided request interceptor is , which is used to fix proxied POST requests when is applied before this middleware.\n\nIntercept responses from upstream with . (Make sure to set )\n\nResponses which are compressed with , and will be decompressed automatically. The response will be returned as (docs) which you can manipulate.\n\nWith , response manipulation is not limited to text responses (html/css/js, etc...); image manipulation will be possible too. (example)\n\nCheck out interception recipes for more examples.\n\nNode.js 17+ no longer prefers IPv4 over IPv6 for DNS lookups. E.g. It's not guaranteed that will be resolved to â€“ it might just as well be (or some other IP address).\n\nIf your target server only accepts IPv4 connections, trying to proxy to will fail if resolved to (IPv6).\nâ€¢ Change the target server to (also) accept IPv6 connections.\nâ€¢ Add this flag when running : . (Not recommended.)\n\nSee project for more options.\n\nView and play around with working examples.\n\nView the recipes for common use cases.\n\nis compatible with the following servers:\n\nSample implementations can be found in the server recipes."
    },
    {
        "link": "https://dzone.com/articles/how-to-build-a-nodejs-api-proxy-using-http-proxy-m",
        "document": "A proxy is something that acts on behalf of something else. Your best friend giving your attendance in the boring lecture you bunked during college is a real-life example of proxying.\n\nWhen it comes to API development, a proxy is an interface between the client and the API server. The job of the interface is to proxy incoming requests to the real server.\n\nBut why might you need an API proxy in the first place?\nâ€¢ It could be possible that the real API server is external to your organization and unstable. A proxy can provide a more stable interface to the client\nâ€¢ The response from the API server might not be compatible with the clientâ€™s expectations and you want to modify the response in some form (for example, converting XML to JSON).\nâ€¢ The real API server may be a temporary arrangement and you donâ€™t want the clients to get impacted by any future changes\n\nThere are several uses of API proxy depending on the situation.\n\nIn this post, you will learn how to build a Node.js API Proxy using the http-proxy-middleware package. Just to make things clear, API Proxy is different from a Forward Proxy.\n\nFirst, you need to initialize the project by executing the below command in a project directory:\n\nThis will generate a basic file with meta-data information about the project such as , , and .\n\nNext, install a couple of packages for developing the Node.js API proxy.\nâ€¢ is a minimalistic web framework you can use to build API endpoints.\nâ€¢ is a simple Node.js package to create an API proxy\n\nAfter the package installation, define a start command for the project within the file. You can use this command to start the application.\n\nYour projectâ€™s should look similar to the below example.\n\nThe example application will proxy incoming requests to an API hosted elsewhere. For demonstration purposes, I recommend using the fake APIs hosted at JSONPlaceholder.\n\nSee the below illustration:\n\nCheck the below code from the file that contains the logic for proxying requests.\n\nLetâ€™s understand each step in the above program:\n\nStep 1: The first segment of the code contains the import statements for and .\n\nStep 2: The next statement creates an application instance using the call to function followed by declaring a few important constants such as , and .\n\nStep 3: Implement an endpoint to describe the role of the application. This endpoint has nothing to do with proxying requests and provides a way to test our application.\n\nStep 4: Next, declare an object . This is a configuration object for our API proxy. It contains a few important properties\nâ€¢ - It defines the target host where you want to proxy requests. In our case, this is the\nâ€¢ - This is set to true since we are proxying to a different origin.\nâ€¢ - This is a very important property where you define the rules for rewriting the path. For example, the expression [ ]: '/posts' routes all incoming requests direct at to just . In other words, this will remove the prefix from the path.\n\nStep 5: After declaring the configuration object, create the proxy object by calling function with the object as input.\n\nStep 6: Next, create a request handler for the path and pass the proxy object as handler for the incoming request.\n\nStep 7: At the very end, start the Node.js API Proxy server to listen on the port and host already declared earlier.\n\nYou can start the application using the command .\n\nMessages about the proxy setup indicate that the proxy is configured properly. If you visit the URL in the browser, you will get the response from the JSONPlaceholder APIs as below:\n\nThis means that the Node.js API Proxy is doing its job by proxying requests to the mock APIs hosted by JSONPlaceholder.\n\nThe uses the path for proxying requests. For example, in the request , the section is the actual path.\n\nAccording to the official documentation of the http-proxy-middleware package, there are various ways in which the context matching for the path takes place:\nâ€¢ \nâ€¢ matches all paths. This means all requests will be proxied.\nâ€¢ \nâ€¢ can be used to match multiple paths to a particular proxy configuration\nâ€¢ \nâ€¢ For more fine grained control, you can also use wildcards to match paths.\nâ€¢ matches any path and all requests are proxied.\nâ€¢ matches any path which ends with .\nâ€¢ matches requests ending with within the overall path .\nâ€¢ None For even greater control, you can also provide a custom function to match the path for the API Proxy. See below example:\n\nIn the above example, only GET requests to the path are proxied.\n\nWith this post, you have built a very simple version of the Node.js API proxy. You can extend it further based on specific requirements.\n\nThe is a simple but powerful library to build a Node.js API Proxy server. The library provides several configurable properties to handle the proxy functionalities. However, there are many more options that you can leverage for your needs.\n\nThe code for this demo is available on GitHub.\n\nIf you found the post useful, consider sharing it with friends and colleagues. In case of any queries, write them in the comments section below."
    },
    {
        "link": "https://npmjs.com/package/http-proxy-middleware",
        "document": "Node.js proxying made simple. Configure proxy middleware with ease for connect, express, next.js and many more.\n\nThis page is showing documentation for version v3.x.x (release notes)\n\nSee MIGRATION.md for details on how to migrate from v2.x.x to v3.x.x\n\nIf you're looking for older documentation. Go to:\n\nðŸ’¡ Tip: Set the option to for name-based virtual hosted sites.\n\nAll options can be used, along with some extra options.\n\nAn example with server.\n\nIf you want to use the server's parameter to match requests. Use option to further include/exclude requests which you want to proxy.\n\nNarrow down which requests should be proxied. The used for filtering is the pathname. In Express, this is the relative to the mount-point of the proxy.\nâ€¢ \nâ€¢ - matches any path, all requests will be proxied when is not configured.\nâ€¢ For fine-grained control you can use wildcard matching. Glob pattern matching is done by micromatch. Visit micromatch or glob for more globbing examples.\nâ€¢ matches any path, all requests will be proxied.\nâ€¢ matches any path which ends with\nâ€¢ matches requests ending with in the path of Note: In multiple path matching, you cannot use string paths and wildcard paths together.\nâ€¢ For full control you can provide a custom function to determine which requests should be proxied or not.\n\nRewrite target's url path. Object-keys will be used as RegExp to match paths.\n\nIf you're not satisfied with the pre-configured plugins, you can eject them by configuring .\n\nNOTE: register your own error handlers to prevent server from crashing.\n\nConfigure a logger to output information from http-proxy-middleware: ie. , , , , , etc...\n\nOnly , , are used internally for compatibility across different loggers.\n\nIf you use , make sure to enable interpolation: https://github.com/winstonjs/winston#string-interpolation\n\nSee also logger recipes (recipes/logger.md) for more details.\n\nSubscribe to http-proxy events with the option:\nâ€¢ : 'Something went wrong. And we are reporting a custom error message.'\nâ€¢ // listen for messages coming FROM the target here\n\nThe following options are provided by the underlying http-proxy library.\nâ€¢ option.target: url string to be parsed with the url module\nâ€¢ option.forward: url string to be parsed with the url module\nâ€¢ option.agent: object to be passed to http(s).request (see Node's https agent and http agent objects)\nâ€¢ option.ssl: object to be passed to https.createServer()\nâ€¢ option.ws: true/false: if you want to proxy websockets\nâ€¢ option.secure: true/false, if you want to verify the SSL Certs\nâ€¢ option.toProxy: true/false, passes the absolute URL as the (useful for proxying to proxies)\nâ€¢ option.prependPath: true/false, Default: true - specify whether you want to prepend the target's path to the proxy path\nâ€¢ option.ignorePath: true/false, Default: false - specify whether you want to ignore the proxy path of the incoming request (note: you will have to append / manually if required).\nâ€¢ option.changeOrigin: true/false, Default: false - changes the origin of the host header to the target URL\nâ€¢ option.preserveHeaderKeyCase: true/false, Default: false - specify whether you want to keep letter case of response header key\nâ€¢ option.autoRewrite: rewrites the location host/port on (301/302/307/308) redirects based on requested host/port. Default: false.\nâ€¢ option.protocolRewrite: rewrites the location protocol on (301/302/307/308) redirects to 'http' or 'https'. Default: null.\nâ€¢ \nâ€¢ String: new domain, for example . To remove the domain, use .\nâ€¢ Object: mapping of domains to new domains, use to match all domains.\n\n For example keep one domain unchanged, rewrite one domain and remove other domains:\nâ€¢ \nâ€¢ String: new path, for example . To remove the path, use . To set path to root use .\nâ€¢ Object: mapping of paths to new paths, use to match all paths. For example, to keep one path unchanged, rewrite one path and remove other paths:\nâ€¢ option.proxyTimeout: timeout (in millis) when proxy receives no response from target\nâ€¢ option.followRedirects: true/false, Default: false - specify whether you want to follow redirects\nâ€¢ option.selfHandleResponse true/false, if set to true, none of the webOutgoing passes are called and it's your responsibility to appropriately return the response by listening and acting on the event\nâ€¢ option.buffer: stream of data to send as the request body. Maybe you have some middleware that consumes the request stream before proxying it on e.g. If you read the body of a request into a field called 'req.rawbody' you could restream this field in the buffer option:\n\nIn the previous WebSocket examples, http-proxy-middleware relies on a initial http request in order to listen to the http event. If you need to proxy WebSockets without the initial http request, you can subscribe to the server's http event manually.\n\nIntercept requests from downstream by defining in .\n\nCurrently the only pre-provided request interceptor is , which is used to fix proxied POST requests when is applied before this middleware.\n\nIntercept responses from upstream with . (Make sure to set )\n\nResponses which are compressed with , and will be decompressed automatically. The response will be returned as (docs) which you can manipulate.\n\nWith , response manipulation is not limited to text responses (html/css/js, etc...); image manipulation will be possible too. (example)\n\nCheck out interception recipes for more examples.\n\nNode.js 17+ no longer prefers IPv4 over IPv6 for DNS lookups. E.g. It's not guaranteed that will be resolved to â€“ it might just as well be (or some other IP address).\n\nIf your target server only accepts IPv4 connections, trying to proxy to will fail if resolved to (IPv6).\nâ€¢ Change the target server to (also) accept IPv6 connections.\nâ€¢ Add this flag when running : . (Not recommended.)\n\nSee project for more options.\n\nView and play around with working examples.\n\nView the recipes for common use cases.\n\nis compatible with the following servers:\n\nSample implementations can be found in the server recipes."
    },
    {
        "link": "https://github.com/javascript-obfuscator/javascript-obfuscator",
        "document": "Huge thanks to all supporters!\n\nJavaScript Obfuscator is a powerful free obfuscator for JavaScript, containing a variety of features which provide protection for your source code.\n\nThe example of obfuscated code: github.com\n\nIt is not recommended to obfuscate vendor scripts and polyfills, since the obfuscated code is 15-80% slower (depends on options) and the files are significantly larger.\n\nInstall the package with Yarn or NPM and add it to your or :\n\nReturns object which contains two public methods:\nâ€¢ - if option is enabled - returns with source map or an empty string if option is set as ;\nâ€¢ - returns object with identifier names cache if option is enabled, overwise.\n\nCalling for object will return with obfuscated code.\n\nMethod takes two parameters, and â€“ the source code and the options respectively:\n\nFor available options, see options.\n\nAccepts that is a map which keys are identifiers of source codes and values are source codes:\n\nReturns a map object which keys are identifiers of source codes and values are objects.\n\nReturns an options object for the passed options preset name.\n\nIf the destination path is not specified with the option, the obfuscated file will be saved into the input file directory, with name.\n\nObfuscation of all files under input directory. If this directory contains already obfuscated files with postfix - these files will ignored.\n\nObfuscated files will saved into the input directory under name.\n\nYou can disable and enable obfuscation for specific parts of the code by adding following comments:\n\nConditional comments affect only direct transformations of AST-tree nodes. All child transformations still will be applied to the AST-tree nodes.\nâ€¢ Obfuscation of the variable's name at its declaration is called direct transformation;\nâ€¢ Obfuscation of the variable's name beyond its declaration is called child transformation.\n\nKind of variables of inserted nodes will auto-detected, based on most prevailing kind of variables of source code.\n\nDuring obfuscation of the different files, the same names can be generated for the global identifiers between these files. To prevent this set the unique prefix for all global identifiers for each obfuscated file with option.\n\nWhen using CLI this prefix will be added automatically.\n\nFollowing options are available for the JS Obfuscator:\n\nName of JS/JSON config file which contains obfuscator options. These will be overridden by options passed directly to CLI\n\nEnables code control flow flattening. Control flow flattening is a structure transformation of the source code that hinders program comprehension.\n\nThe probability that the transformation will be applied to any given node.\n\nThis setting is especially useful for large code size because large amounts of control flow transformations can slow down your code and increase code size.\n\nWith this option, random blocks of dead code will be added to the obfuscated code.\n\nAllows to set percentage of nodes that will affected by .\n\nCan freeze your browser if you open the Developer Tools.\n\nThis option makes it almost impossible to use the function of the Developer Tools (both on WebKit-based and Mozilla Firefox).\n\nIf set, an interval in milliseconds is used to force the debug mode on the Console tab, making it harder to use other features of the Developer Tools. Works if is enabled. Recommended value is between and milliseconds.\n\nDisables the use of , , , , , and by replacing them with empty functions. This makes the use of the debugger harder.\n\nAllows to run the obfuscated source code only on specific domains and/or sub-domains. This makes really hard for someone to just copy and paste your source code and run it elsewhere.\n\nIf the source code isn't run on the domains specified by this option, the browser will be redirected to a passed to the option URL.\n\nIt's possible to lock your code to more than one domain or sub-domain. For instance, to lock it so the code only runs on www.example.com add . To make it work on the root domain including any sub-domains ( , ), use .\n\nAllows the browser to be redirected to a passed URL if the source code isn't run on the domains specified by\n\nA file names or globs which indicates files to exclude from obfuscation.\n\nEnables force transformation of string literals, which being matched by passed RegExp patterns.\n\nThe option has a priority over option but hasn't a priority over .\n\nThe main goal for this option is the ability to use the same identifier names during obfuscation of multiple sources/files.\n\nCurrently the two types of the identifiers are supported:\nâ€¢ Global identifiers:\nâ€¢ All global identifiers will be written to the cache;\nâ€¢ All matched undeclared global identifiers will be replaced by the values from the cache.\nâ€¢ Property identifiers, only when option is enabled:\nâ€¢ All property identifiers will be written to the cache;\nâ€¢ All matched property identifiers will be replaced by the values from the cache.\n\nIf a value is passed, completely disables the cache.\n\nIf an empty object ( ) is passed, enables the writing identifier names to the cache-object ( type). This cache-object will be accessed through the method call of object.\n\nThe resulting cache-object can be next used as option value for using these names during obfuscation of all matched identifier names of next sources.\n\nCLI has a different option that allows defining a path to the existing file that will be used to read and write identifier names cache.\n\nIf a path to the empty file will be passed - identifier names cache will be written to that file.\n\nThis file with existing cache can be used again as option value for using these names during obfuscation of all matched identifier names of the next files.\nâ€¢ : same as but with shuffled alphabet\n\nSets identifiers dictionary for : option. Each identifier from the dictionary will be used in a few variants with a different casing of each character. Thus, the number of identifiers in the dictionary should depend on the identifiers amount at original source code.\n\nUse this option when you want to obfuscate multiple files. This option helps to avoid conflicts between global identifiers of these files. Prefix should be different for every file.\n\nPrevents obfuscation of imports. Could be helpful in some cases when for some reason runtime environment requires these imports with static strings only.\n\nAllows to set name of the input file with source code. This name will be used internally for source map generation. Required when using NodeJS API and option has value`.\n\nEnables logging of the information to the console.\n\nAll addition options will be merged with selected options preset.\n\nEnables obfuscation of global variable and function names with declaration.\n\nEnables renaming of property names. All built-in DOM properties and properties in core JavaScript classes will be ignored.\n\nTo switch between and modes of this option use option.\n\nTo set format of renamed property names use option.\n\nTo control which properties will be renamed use option.\nâ€¢ - default behaviour after release. Trying to rename properties in a more safe way to prevent runtime errors. With this mode some properties will be excluded from renaming.\nâ€¢ - default behaviour before release. Renames properties in an unsafe way without any restrictions.\n\nIf one file is using properties from other file, use option to keep the same property names between these files.\n\nDisables obfuscation and generation of identifiers, which being matched by passed RegExp patterns.\n\nDisables transformation of string literals, which being matched by passed RegExp patterns.\n\nThis option sets seed for random generator. This is useful for creating repeatable results.\n\nIf seed is - random generator will work without seed.\n\nThis option makes the output code resilient against formatting and variable renaming. If one tries to use a JavaScript beautifier on the obfuscated code, the code won't work anymore, making it harder to understand and modify it.\n\nSource maps can be useful to help you debug your obfuscated JavaScript source code. If you want or need to debug in production, you can upload the separate source map file to a secret location and then point your browser there.\n\nSets base url to the source map import url when .\n\nSets file name for output source map when .\nâ€¢ - add source map at the end of each .js files;\nâ€¢ - generates corresponding '.map' file with source map. In case you run obfuscator through CLI - adds link to source map file to the end of file with obfuscated code .\n\nAllows to control and fields of the source map:\nâ€¢ - adds field with a valid source description, does not add field. When using NodeJS API it's required to define option that will be used as field value.\n\nSplits literal strings into chunks with length of option value.\n\nRemoves string literals and place them in a special array. For instance, the string in will be replaced with something like\n\nEnables the transformation of calls to the . All arguments of these calls may be extracted to a different object depending on value. So it makes it even harder to automatically find calls to the string array.\n\nYou can use this setting to adjust the probability (from 0 to 1) that calls to the string array will be transformed.\n\nThis option can slow down your script.\n\nEncode all string literals of the using or and inserts a special code that used to decode it back at runtime.\n\nEach value will be encoded by the randomly picked encoding from the passed list. This makes possible to use multiple encodings.\nâ€¢ ( ): encodes value using . About 30-50% slower than , but harder to get initial values. It's recommended to disable option when using encoding to prevent very large size of obfuscated code.\n\nFor example with the following option values some value won't be encoded, and some values will be encoded with and encoding:\n\nAllows to control the type of string array call indexes.\n\nEach call index will be transformed by the randomly picked type from the passed list. This makes possible to use multiple types.\n\nBefore release transformed all string array call indexes with type. This makes some manual deobfuscation slightly harder but it allows easy detection of these calls by automatic deobfuscators.\n\nThe new type approaches to make harder auto-detect of string array call patterns in the code.\n\nMore types will be added in the future.\n\nShift the array by a fixed and random (generated at the code obfuscation) places. This makes it harder to match the order of the removed strings to their original place.\n\nSets the count of wrappers for the inside each root or function scope. The actual count of wrappers inside each scope is limited by a count of nodes within this scope.\n\nAllows to control the maximum number of string array wrappers parameters. Default and minimum value is . Recommended value between and .\n\nAllows to select a type of the wrappers that are appending by the option.\nâ€¢ : appends variable wrappers at the top of each scope. Fast performance.\nâ€¢ : appends function wrappers at random positions inside each scope. Slower performance than with but provides more strict obfuscation.\n\nHighly recommended to use wrappers for higher obfuscation when a performance loss doesn't have a high impact on an obfuscated application.\n\nExample of the option value:\n\nYou can use this setting to adjust the probability (from 0 to 1) that a string literal will be inserted into the .\n\nThis setting is especially useful for large code size because it repeatedly calls to the and can slow down your code.\n\nAllows to set target environment for obfuscated code.\n\nCurrently output code for and targets is identical, but some browser-specific options are not allowed to use with target. Output code for target is not using .\n\nAllows to enable/disable string conversion to unicode escape sequence.\n\nUnicode escape sequence increases code size greatly and strings easily can be reverted to their original view. Recommended to enable this option only for small source code.\n\nThe performance will be much slower than without obfuscation\n\nThe performance will be slower than without obfuscation\n\nThe performance will be at a relatively normal level\n\nThe README on the master branch might not match that of the latest stable release.\n\nTry to run command or install it globally with\n\nobfuscation works correctly only in environments that support values. See ESTree spec\n\nTry option, if it still doesn't work, just disable this option.\n\nSupport us with a monthly donation and help us continue our activities. [Become a backer]\n\nBecome a sponsor and get your logo on our README on Github with a link to your site.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\nâ€¢ Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nâ€¢ Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
    },
    {
        "link": "https://github.com/javascript-obfuscator/javascript-obfuscator/blob/master/README.md",
        "document": "Huge thanks to all supporters!\n\nJavaScript Obfuscator is a powerful free obfuscator for JavaScript, containing a variety of features which provide protection for your source code.\n\nThe example of obfuscated code: github.com\n\nIt is not recommended to obfuscate vendor scripts and polyfills, since the obfuscated code is 15-80% slower (depends on options) and the files are significantly larger.\n\nInstall the package with Yarn or NPM and add it to your or :\n\nReturns object which contains two public methods:\nâ€¢ - if option is enabled - returns with source map or an empty string if option is set as ;\nâ€¢ - returns object with identifier names cache if option is enabled, overwise.\n\nCalling for object will return with obfuscated code.\n\nMethod takes two parameters, and â€“ the source code and the options respectively:\n\nFor available options, see options.\n\nAccepts that is a map which keys are identifiers of source codes and values are source codes:\n\nReturns a map object which keys are identifiers of source codes and values are objects.\n\nReturns an options object for the passed options preset name.\n\nIf the destination path is not specified with the option, the obfuscated file will be saved into the input file directory, with name.\n\nObfuscation of all files under input directory. If this directory contains already obfuscated files with postfix - these files will ignored.\n\nObfuscated files will saved into the input directory under name.\n\nYou can disable and enable obfuscation for specific parts of the code by adding following comments:\n\nConditional comments affect only direct transformations of AST-tree nodes. All child transformations still will be applied to the AST-tree nodes.\nâ€¢ Obfuscation of the variable's name at its declaration is called direct transformation;\nâ€¢ Obfuscation of the variable's name beyond its declaration is called child transformation.\n\nKind of variables of inserted nodes will auto-detected, based on most prevailing kind of variables of source code.\n\nDuring obfuscation of the different files, the same names can be generated for the global identifiers between these files. To prevent this set the unique prefix for all global identifiers for each obfuscated file with option.\n\nWhen using CLI this prefix will be added automatically.\n\nFollowing options are available for the JS Obfuscator:\n\nName of JS/JSON config file which contains obfuscator options. These will be overridden by options passed directly to CLI\n\nEnables code control flow flattening. Control flow flattening is a structure transformation of the source code that hinders program comprehension.\n\nThe probability that the transformation will be applied to any given node.\n\nThis setting is especially useful for large code size because large amounts of control flow transformations can slow down your code and increase code size.\n\nWith this option, random blocks of dead code will be added to the obfuscated code.\n\nAllows to set percentage of nodes that will affected by .\n\nCan freeze your browser if you open the Developer Tools.\n\nThis option makes it almost impossible to use the function of the Developer Tools (both on WebKit-based and Mozilla Firefox).\n\nIf set, an interval in milliseconds is used to force the debug mode on the Console tab, making it harder to use other features of the Developer Tools. Works if is enabled. Recommended value is between and milliseconds.\n\nDisables the use of , , , , , and by replacing them with empty functions. This makes the use of the debugger harder.\n\nAllows to run the obfuscated source code only on specific domains and/or sub-domains. This makes really hard for someone to just copy and paste your source code and run it elsewhere.\n\nIf the source code isn't run on the domains specified by this option, the browser will be redirected to a passed to the option URL.\n\nIt's possible to lock your code to more than one domain or sub-domain. For instance, to lock it so the code only runs on www.example.com add . To make it work on the root domain including any sub-domains ( , ), use .\n\nAllows the browser to be redirected to a passed URL if the source code isn't run on the domains specified by\n\nA file names or globs which indicates files to exclude from obfuscation.\n\nEnables force transformation of string literals, which being matched by passed RegExp patterns.\n\nThe option has a priority over option but hasn't a priority over .\n\nThe main goal for this option is the ability to use the same identifier names during obfuscation of multiple sources/files.\n\nCurrently the two types of the identifiers are supported:\nâ€¢ Global identifiers:\nâ€¢ All global identifiers will be written to the cache;\nâ€¢ All matched undeclared global identifiers will be replaced by the values from the cache.\nâ€¢ Property identifiers, only when option is enabled:\nâ€¢ All property identifiers will be written to the cache;\nâ€¢ All matched property identifiers will be replaced by the values from the cache.\n\nIf a value is passed, completely disables the cache.\n\nIf an empty object ( ) is passed, enables the writing identifier names to the cache-object ( type). This cache-object will be accessed through the method call of object.\n\nThe resulting cache-object can be next used as option value for using these names during obfuscation of all matched identifier names of next sources.\n\nCLI has a different option that allows defining a path to the existing file that will be used to read and write identifier names cache.\n\nIf a path to the empty file will be passed - identifier names cache will be written to that file.\n\nThis file with existing cache can be used again as option value for using these names during obfuscation of all matched identifier names of the next files.\nâ€¢ : same as but with shuffled alphabet\n\nSets identifiers dictionary for : option. Each identifier from the dictionary will be used in a few variants with a different casing of each character. Thus, the number of identifiers in the dictionary should depend on the identifiers amount at original source code.\n\nUse this option when you want to obfuscate multiple files. This option helps to avoid conflicts between global identifiers of these files. Prefix should be different for every file.\n\nPrevents obfuscation of imports. Could be helpful in some cases when for some reason runtime environment requires these imports with static strings only.\n\nAllows to set name of the input file with source code. This name will be used internally for source map generation. Required when using NodeJS API and option has value`.\n\nEnables logging of the information to the console.\n\nAll addition options will be merged with selected options preset.\n\nEnables obfuscation of global variable and function names with declaration.\n\nEnables renaming of property names. All built-in DOM properties and properties in core JavaScript classes will be ignored.\n\nTo switch between and modes of this option use option.\n\nTo set format of renamed property names use option.\n\nTo control which properties will be renamed use option.\nâ€¢ - default behaviour after release. Trying to rename properties in a more safe way to prevent runtime errors. With this mode some properties will be excluded from renaming.\nâ€¢ - default behaviour before release. Renames properties in an unsafe way without any restrictions.\n\nIf one file is using properties from other file, use option to keep the same property names between these files.\n\nDisables obfuscation and generation of identifiers, which being matched by passed RegExp patterns.\n\nDisables transformation of string literals, which being matched by passed RegExp patterns.\n\nThis option sets seed for random generator. This is useful for creating repeatable results.\n\nIf seed is - random generator will work without seed.\n\nThis option makes the output code resilient against formatting and variable renaming. If one tries to use a JavaScript beautifier on the obfuscated code, the code won't work anymore, making it harder to understand and modify it.\n\nSource maps can be useful to help you debug your obfuscated JavaScript source code. If you want or need to debug in production, you can upload the separate source map file to a secret location and then point your browser there.\n\nSets base url to the source map import url when .\n\nSets file name for output source map when .\nâ€¢ - add source map at the end of each .js files;\nâ€¢ - generates corresponding '.map' file with source map. In case you run obfuscator through CLI - adds link to source map file to the end of file with obfuscated code .\n\nAllows to control and fields of the source map:\nâ€¢ - adds field with a valid source description, does not add field. When using NodeJS API it's required to define option that will be used as field value.\n\nSplits literal strings into chunks with length of option value.\n\nRemoves string literals and place them in a special array. For instance, the string in will be replaced with something like\n\nEnables the transformation of calls to the . All arguments of these calls may be extracted to a different object depending on value. So it makes it even harder to automatically find calls to the string array.\n\nYou can use this setting to adjust the probability (from 0 to 1) that calls to the string array will be transformed.\n\nThis option can slow down your script.\n\nEncode all string literals of the using or and inserts a special code that used to decode it back at runtime.\n\nEach value will be encoded by the randomly picked encoding from the passed list. This makes possible to use multiple encodings.\nâ€¢ ( ): encodes value using . About 30-50% slower than , but harder to get initial values. It's recommended to disable option when using encoding to prevent very large size of obfuscated code.\n\nFor example with the following option values some value won't be encoded, and some values will be encoded with and encoding:\n\nAllows to control the type of string array call indexes.\n\nEach call index will be transformed by the randomly picked type from the passed list. This makes possible to use multiple types.\n\nBefore release transformed all string array call indexes with type. This makes some manual deobfuscation slightly harder but it allows easy detection of these calls by automatic deobfuscators.\n\nThe new type approaches to make harder auto-detect of string array call patterns in the code.\n\nMore types will be added in the future.\n\nShift the array by a fixed and random (generated at the code obfuscation) places. This makes it harder to match the order of the removed strings to their original place.\n\nSets the count of wrappers for the inside each root or function scope. The actual count of wrappers inside each scope is limited by a count of nodes within this scope.\n\nAllows to control the maximum number of string array wrappers parameters. Default and minimum value is . Recommended value between and .\n\nAllows to select a type of the wrappers that are appending by the option.\nâ€¢ : appends variable wrappers at the top of each scope. Fast performance.\nâ€¢ : appends function wrappers at random positions inside each scope. Slower performance than with but provides more strict obfuscation.\n\nHighly recommended to use wrappers for higher obfuscation when a performance loss doesn't have a high impact on an obfuscated application.\n\nExample of the option value:\n\nYou can use this setting to adjust the probability (from 0 to 1) that a string literal will be inserted into the .\n\nThis setting is especially useful for large code size because it repeatedly calls to the and can slow down your code.\n\nAllows to set target environment for obfuscated code.\n\nCurrently output code for and targets is identical, but some browser-specific options are not allowed to use with target. Output code for target is not using .\n\nAllows to enable/disable string conversion to unicode escape sequence.\n\nUnicode escape sequence increases code size greatly and strings easily can be reverted to their original view. Recommended to enable this option only for small source code.\n\nThe performance will be much slower than without obfuscation\n\nThe performance will be slower than without obfuscation\n\nThe performance will be at a relatively normal level\n\nThe README on the master branch might not match that of the latest stable release.\n\nTry to run command or install it globally with\n\nobfuscation works correctly only in environments that support values. See ESTree spec\n\nTry option, if it still doesn't work, just disable this option.\n\nSupport us with a monthly donation and help us continue our activities. [Become a backer]\n\nBecome a sponsor and get your logo on our README on Github with a link to your site.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\nâ€¢ Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nâ€¢ Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
    },
    {
        "link": "https://github.com/javascript-obfuscator",
        "document": "To see all available qualifiers, see our documentation .\n\nSaved searches Use saved searches to filter your results more quickly\n\nWe read every piece of feedback, and take your input very seriously.\n\nYou signed in with another tab or window. Reload to refresh your session.\n\nYou signed out in another tab or window. Reload to refresh your session.\n\nYou switched accounts on another tab or window. Reload to refresh your session."
    },
    {
        "link": "https://github.com/vasist/javascript-obfuscator-1",
        "document": "JavaScript obfuscator is a powerful free obfuscator for JavaScript and Node.js with a wide number of features which provides protection for your source code.\nâ€¢ has no limits or restrictions\nâ€¢ runs on your local machine - does not send data to a server;\n\nNOTE! the README on the master branch might not match that of the latest stable release!\n\nIf this project helps you, you can support it:\n\nIt is not recommended to obfuscate vendor scripts and polyfills, since the obfuscated code is 15-80% slower (depends on options) and the files are significantly larger.\n\nInstall the package with Yarn or NPM and add it to your :\n\nHere's an example of how to use it:\n\nReturns object which contains two public methods:\nâ€¢ - if option is enabled - returns with source map or an empty string if option is set as .\n\nCalling for object will return with obfuscated code.\n\nMethod takes two parameters, and â€“ the source code and the opitons respectively:\n\nFor available options see options.\n\nIf the destination path is not specified with the option, obfuscated code will saved into the input file directory with name like\n\nFollowing options are available for the JS Obfuscator:\n\nName of JS/JSON config file which contains obfuscator options. These will be overridden by options passed directly to CLI\n\nEnables code control flow flattening. Control flow flattening is a structure transformation of the source code that hinders program comprehension.\n\nThe probability that the transformation will be applied to the node.\n\nThis setting is especially useful for large code size because large amounts of control flow transformations can slow down your code and increase code size.\n\nWith this option random blocks of dead code will add to the obfuscated code.\n\nAllows to set percentage of nodes that will affected by .\n\nCan freeze your browser if you open the Developer Tools.\n\nThis option makes it almost impossible to use the tab of the Developer Tools (both on WebKit-based and Mozilla Firefox).\nâ€¢ WebKit-based: blocks the site window, but you still can navigate through Developer Tools panel.\nâ€¢ Firefox: does not block the site window, but still won't let you use DevTools.\n\nIf checked, an interval is used to force the debug mode on the Console tab, making it harder to use other features of the Developer Tools. Works if is enabled.\n\nDisables the use of , , , , , and by replacing them with empty functions. This makes the use of the debugger harder.\n\nLocks the obfuscated source code so it only runs on specific domains and/or sub-domains. This makes really hard for someone just copy and paste your source code and run elsewhere.\n\nIt's possible to lock your code to more than one domain or sub-domain. For instance, to lock it so the code only runs on www.example.com add , to make it work on any sub-domain from example.com, use .\n\nEnables logging of the information to the console.\n\nEnables obfuscation of global variable and function names with declaration.\n\nDisables the obfuscation of variables names, function names and function parameters that match the Regular Expression used.\n\nShift the array by a fixed and random (generated at the code obfuscation) places. This makes it harder to match the order of the removed strings to their original place.\n\nThis option is recommended if your original source code isn't small, as the helper function can attract attention.\n\nThis option sets seed for random generator. This is useful for creating repeatable results.\n\nIf seed is - random generator will work without seed.\n\nThis option makes the output code resilient against formatting and variable renaming. If one tries to use a JavaScript beautifier on the obfuscated code, the code won't work anymore, making it harder to understand and modify it.\n\nSource maps can be useful to help you debug your obfuscated JavaScript source code. If you want or need to debug in production, you can upload the separate source map file to a secret location and then point your browser there.\n\nSets base url to the source map import url when .\n\nSets file name for output source map when .\nâ€¢ - emit a single file with source maps instead of having a separate file;\nâ€¢ - generates corresponding '.map' file with source map. In case you run obfuscator through CLI - adds link to source map file to the end of file with obfuscated code .\n\nRemoves string literals and place them in a special array. For instance, the string in will be replaced with something like\n\nThis option can slightly slow down your script.\n\nEncode all string literals of the using or and inserts a special code that used to decode it back at runtime.\nâ€¢ ( ): encode values using . About 30-50% slower than , but more harder to get initial values. It is recommended to disable option with encoding to prevent very large size of obfuscated code.\n\nYou can use this setting to adjust the probability (from 0 to 1) that a string literal will be inserted into the .\n\nThis setting is especially useful for large code size because it repeatedly calls to the and can slow down your code.\n\nAllows to enable/disable string conversion to unicode escape sequence.\n\nUnicode escape sequence increases code size greatly and strings easily can be reverted to their original view. Recommended to enable this option only for small source code.\n\nPerformance will 50-100% slower than without obfuscation\n\nPerformance will 30-35% slower than without obfuscation\n\nPerformance will slightly slower than without obfuscation\n\nSupport us with a monthly donation and help us continue our activities. [Become a backer]\n\nBecome a sponsor and get your logo on our README on Github with a link to your site. [Become a sponsor]\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\nâ€¢ Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nâ€¢ Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
    },
    {
        "link": "https://npmjs.com/package/javascript-obfuscator",
        "document": "Huge thanks to all supporters!\n\nJavaScript Obfuscator is a powerful free obfuscator for JavaScript, containing a variety of features which provide protection for your source code.\n\nThe example of obfuscated code: github.com\n\nIt is not recommended to obfuscate vendor scripts and polyfills, since the obfuscated code is 15-80% slower (depends on options) and the files are significantly larger.\n\nInstall the package with Yarn or NPM and add it to your or :\n\nReturns object which contains two public methods:\nâ€¢ - if option is enabled - returns with source map or an empty string if option is set as ;\nâ€¢ - returns object with identifier names cache if option is enabled, overwise.\n\nCalling for object will return with obfuscated code.\n\nMethod takes two parameters, and â€“ the source code and the options respectively:\n\nFor available options, see options.\n\nAccepts that is a map which keys are identifiers of source codes and values are source codes:\n\nReturns a map object which keys are identifiers of source codes and values are objects.\n\nReturns an options object for the passed options preset name.\n\nIf the destination path is not specified with the option, the obfuscated file will be saved into the input file directory, with name.\n\nObfuscation of all files under input directory. If this directory contains already obfuscated files with postfix - these files will ignored.\n\nObfuscated files will saved into the input directory under name.\n\nYou can disable and enable obfuscation for specific parts of the code by adding following comments:\n\nConditional comments affect only direct transformations of AST-tree nodes. All child transformations still will be applied to the AST-tree nodes.\nâ€¢ Obfuscation of the variable's name at its declaration is called direct transformation;\nâ€¢ Obfuscation of the variable's name beyond its declaration is called child transformation.\n\nKind of variables of inserted nodes will auto-detected, based on most prevailing kind of variables of source code.\n\nDuring obfuscation of the different files, the same names can be generated for the global identifiers between these files. To prevent this set the unique prefix for all global identifiers for each obfuscated file with option.\n\nWhen using CLI this prefix will be added automatically.\n\nFollowing options are available for the JS Obfuscator:\n\nName of JS/JSON config file which contains obfuscator options. These will be overridden by options passed directly to CLI\n\nEnables code control flow flattening. Control flow flattening is a structure transformation of the source code that hinders program comprehension.\n\nThe probability that the transformation will be applied to any given node.\n\nThis setting is especially useful for large code size because large amounts of control flow transformations can slow down your code and increase code size.\n\nWith this option, random blocks of dead code will be added to the obfuscated code.\n\nAllows to set percentage of nodes that will affected by .\n\nCan freeze your browser if you open the Developer Tools.\n\nThis option makes it almost impossible to use the function of the Developer Tools (both on WebKit-based and Mozilla Firefox).\n\nIf set, an interval in milliseconds is used to force the debug mode on the Console tab, making it harder to use other features of the Developer Tools. Works if is enabled. Recommended value is between and milliseconds.\n\nDisables the use of , , , , , and by replacing them with empty functions. This makes the use of the debugger harder.\n\nAllows to run the obfuscated source code only on specific domains and/or sub-domains. This makes really hard for someone to just copy and paste your source code and run it elsewhere.\n\nIf the source code isn't run on the domains specified by this option, the browser will be redirected to a passed to the option URL.\n\nIt's possible to lock your code to more than one domain or sub-domain. For instance, to lock it so the code only runs on www.example.com add . To make it work on the root domain including any sub-domains ( , ), use .\n\nAllows the browser to be redirected to a passed URL if the source code isn't run on the domains specified by\n\nA file names or globs which indicates files to exclude from obfuscation.\n\nEnables force transformation of string literals, which being matched by passed RegExp patterns.\n\nThe option has a priority over option but hasn't a priority over .\n\nThe main goal for this option is the ability to use the same identifier names during obfuscation of multiple sources/files.\n\nCurrently the two types of the identifiers are supported:\nâ€¢ Global identifiers:\nâ€¢ All global identifiers will be written to the cache;\nâ€¢ All matched undeclared global identifiers will be replaced by the values from the cache.\nâ€¢ Property identifiers, only when option is enabled:\nâ€¢ All property identifiers will be written to the cache;\nâ€¢ All matched property identifiers will be replaced by the values from the cache.\n\nIf a value is passed, completely disables the cache.\n\nIf an empty object ( ) is passed, enables the writing identifier names to the cache-object ( type). This cache-object will be accessed through the method call of object.\n\nThe resulting cache-object can be next used as option value for using these names during obfuscation of all matched identifier names of next sources.\n\nCLI has a different option that allows defining a path to the existing file that will be used to read and write identifier names cache.\n\nIf a path to the empty file will be passed - identifier names cache will be written to that file.\n\nThis file with existing cache can be used again as option value for using these names during obfuscation of all matched identifier names of the next files.\nâ€¢ : same as but with shuffled alphabet\n\nSets identifiers dictionary for : option. Each identifier from the dictionary will be used in a few variants with a different casing of each character. Thus, the number of identifiers in the dictionary should depend on the identifiers amount at original source code.\n\nUse this option when you want to obfuscate multiple files. This option helps to avoid conflicts between global identifiers of these files. Prefix should be different for every file.\n\nPrevents obfuscation of imports. Could be helpful in some cases when for some reason runtime environment requires these imports with static strings only.\n\nAllows to set name of the input file with source code. This name will be used internally for source map generation. Required when using NodeJS API and option has value`.\n\nEnables logging of the information to the console.\n\nAll addition options will be merged with selected options preset.\n\nEnables obfuscation of global variable and function names with declaration.\n\nEnables renaming of property names. All built-in DOM properties and properties in core JavaScript classes will be ignored.\n\nTo switch between and modes of this option use option.\n\nTo set format of renamed property names use option.\n\nTo control which properties will be renamed use option.\nâ€¢ - default behaviour after release. Trying to rename properties in a more safe way to prevent runtime errors. With this mode some properties will be excluded from renaming.\nâ€¢ - default behaviour before release. Renames properties in an unsafe way without any restrictions.\n\nIf one file is using properties from other file, use option to keep the same property names between these files.\n\nDisables obfuscation and generation of identifiers, which being matched by passed RegExp patterns.\n\nDisables transformation of string literals, which being matched by passed RegExp patterns.\n\nThis option sets seed for random generator. This is useful for creating repeatable results.\n\nIf seed is - random generator will work without seed.\n\nThis option makes the output code resilient against formatting and variable renaming. If one tries to use a JavaScript beautifier on the obfuscated code, the code won't work anymore, making it harder to understand and modify it.\n\nSource maps can be useful to help you debug your obfuscated JavaScript source code. If you want or need to debug in production, you can upload the separate source map file to a secret location and then point your browser there.\n\nSets base url to the source map import url when .\n\nSets file name for output source map when .\nâ€¢ - add source map at the end of each .js files;\nâ€¢ - generates corresponding '.map' file with source map. In case you run obfuscator through CLI - adds link to source map file to the end of file with obfuscated code .\n\nAllows to control and fields of the source map:\nâ€¢ - adds field with a valid source description, does not add field. When using NodeJS API it's required to define option that will be used as field value.\n\nSplits literal strings into chunks with length of option value.\n\nRemoves string literals and place them in a special array. For instance, the string in will be replaced with something like\n\nEnables the transformation of calls to the . All arguments of these calls may be extracted to a different object depending on value. So it makes it even harder to automatically find calls to the string array.\n\nYou can use this setting to adjust the probability (from 0 to 1) that calls to the string array will be transformed.\n\nThis option can slow down your script.\n\nEncode all string literals of the using or and inserts a special code that used to decode it back at runtime.\n\nEach value will be encoded by the randomly picked encoding from the passed list. This makes possible to use multiple encodings.\nâ€¢ ( ): encodes value using . About 30-50% slower than , but harder to get initial values. It's recommended to disable option when using encoding to prevent very large size of obfuscated code.\n\nFor example with the following option values some value won't be encoded, and some values will be encoded with and encoding:\n\nAllows to control the type of string array call indexes.\n\nEach call index will be transformed by the randomly picked type from the passed list. This makes possible to use multiple types.\n\nBefore release transformed all string array call indexes with type. This makes some manual deobfuscation slightly harder but it allows easy detection of these calls by automatic deobfuscators.\n\nThe new type approaches to make harder auto-detect of string array call patterns in the code.\n\nMore types will be added in the future.\n\nShift the array by a fixed and random (generated at the code obfuscation) places. This makes it harder to match the order of the removed strings to their original place.\n\nSets the count of wrappers for the inside each root or function scope. The actual count of wrappers inside each scope is limited by a count of nodes within this scope.\n\nAllows to control the maximum number of string array wrappers parameters. Default and minimum value is . Recommended value between and .\n\nAllows to select a type of the wrappers that are appending by the option.\nâ€¢ : appends variable wrappers at the top of each scope. Fast performance.\nâ€¢ : appends function wrappers at random positions inside each scope. Slower performance than with but provides more strict obfuscation.\n\nHighly recommended to use wrappers for higher obfuscation when a performance loss doesn't have a high impact on an obfuscated application.\n\nExample of the option value:\n\nYou can use this setting to adjust the probability (from 0 to 1) that a string literal will be inserted into the .\n\nThis setting is especially useful for large code size because it repeatedly calls to the and can slow down your code.\n\nAllows to set target environment for obfuscated code.\n\nCurrently output code for and targets is identical, but some browser-specific options are not allowed to use with target. Output code for target is not using .\n\nAllows to enable/disable string conversion to unicode escape sequence.\n\nUnicode escape sequence increases code size greatly and strings easily can be reverted to their original view. Recommended to enable this option only for small source code.\n\nThe performance will be much slower than without obfuscation\n\nThe performance will be slower than without obfuscation\n\nThe performance will be at a relatively normal level\n\nThe README on the master branch might not match that of the latest stable release.\n\nTry to run command or install it globally with\n\nobfuscation works correctly only in environments that support values. See ESTree spec\n\nTry option, if it still doesn't work, just disable this option.\n\nSupport us with a monthly donation and help us continue our activities. [Become a backer]\n\nBecome a sponsor and get your logo on our README on Github with a link to your site.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\nâ€¢ Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nâ€¢ Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
    }
]