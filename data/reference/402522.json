[
    {
        "link": "https://ai-scripting.docsforadobe.dev",
        "document": "If you're not sure where to start, take a look at What is Scripting for the concepts of scripting in AI, or Changelog for updates to the scripting API over time.\n\nThis endeavour is primarily community-supported & run; contributors are welcome and encouraged to suggest fixes, adjustments, notes/warnings, and anything else that may help the project.\n\nFor specific information on how to contribute & best practices, see the Documentation Contribution Guide.\n\nThis project exists for educational purposes only."
    },
    {
        "link": "https://helpx.adobe.com/illustrator/using/automation-scripts.html",
        "document": ""
    },
    {
        "link": "https://community.adobe.com/t5/illustrator-discussions/using-extendscript-javascript-to-open-a-new-file-from-an-illustrator-ait-file/td-p/12316166",
        "document": "The same way you open any file.\n\n1. Get the path to the file (below is an example of a path to a template on my PC to show the notation).\n\n2. Create a new file (using the new File() constructor).\n\n3. Open the file (using the app function open())."
    },
    {
        "link": "https://github.com/rjduran/adobe-scripting",
        "document": "This guide walks through the process of getting started writing scripts in Javascript for use in Adobe Illustrator CC.\n\nThis tutorial was written using Adobe Illustrator CC (2017) running on macOS (10.12).\n\nThere are two ways to write scripts for Adobe Illustrator: 1) Use the ExtendScript Toolkit.app or 2) Use a text editor and custom workflow (ie. Atom). Both workflows are described below.\n\nRecommendation: If you are new to scripting or coding in general, I suggest starting with the standard Extendscript Toolkit.app to get familiar with the language, syntax, and DOM before moving onto a different editor and workflow (ie. Atom or VSCode).\n\nPro Tip: As you become experienced you may find that its beneficial to use both IDEs at times since (in my opinion) Atom (or VSCode) is much nicer to look at / use and ExtendScript Toolkit has a built in Data Browser for learning the API and a JavaScript Console for debugging.\n• Launch Adobe CC and look for \"Extendscript Toolkit CC\" in the list of available applications. If it isn't shown in the list goto Preferences > Creative Cloud > Check \"Show Older Apps\" to reveal it in the list of available applications. If needed, the direct download link can be found here.\n• After installing the toolkit you should see a folder called \"Adobe ExtendScript Toolkit CC\" under Applications. Locate the folder and launch \"ExtendScript Toolkit.app\".\n• Set the Target application to \"Adobe Illustrator CC 2017\". If Illustrator is not open, open it and click the small broken red \"chain link\" icon in the scripting application to change it green and connect to Illustrator. If Illustrator closes the chain link icon will change back to a broken red link.\n• (Optional) The default settings are much to small for a Macbook Pro with Retina Screen on the highest resolution setting. Change the font to 'Consolas' or 'Monaco' and font size to '16'.\n\nAt this point you are ready to write scripts! Keep reading for alternative workflows with Atom or VSCode text editors. Both are free and open source and provide many built in features and packages to customize your workflow.\n• Add a new global command to the process-palette.json file by going to the package setup options and adding the following.\n• An action name of \"run-current-script\"\n• A keystroke of \"cmd-ctrl-r\" (You can set this to anything you want)\n• A shell command of osascript -e 'tell application \"Adobe Illustrator\"' -e 'activate' -e 'do javascript \"#include '{fileAbsPath}'\"' -e 'end tell'\n• Load a new .jsx file and run it via \"cmd + ctrl + r\" or by right clicking on the file in the sidebar and choosing \"Run With\" > Run Current Script.\n• Make sure Adobe Illustrator is open and you should see the results when running the script.\n\nAs of September 2018, I have shifted the workflow to using Adobe Script Runner. Good news! There is a version for both Atom and VSCode (keep reading). It essentially replaces the Process Palette workflow above (Yay!). Which means it works with any kind of file/folder path including spaces or not. By default, it contains a key command setup for After Effects so you will need to do the following to setup a key command for Illustrator.\n• Open up Atom > Keymap. The file keymap.cson will open in the editor.\n• Add the following key binding for Adobe Illustrator. This one replaces the default AE keybinding. If you want to keep it, just use a different keybinding.\n• Now you can run scripts with the specified key command as before. If you don't have Illustrator open it will automatically launch it.\n• Install Adobe Script Runner and ExtendScript Syntax Highlighting. This second extension will ensure syntax highlighting and that you don't get unnecessary errors when running a .jsx file.\n• Load a new .jsx file and run it via \"cmd + shift + p\" and selecting Adobe Illustrator. Similarily you could run other Adobe applications the same way.\n• If you would like to customize the key command to be the same as Atom or different than the default, follow the remaining steps.\n• Search for adobeScriptRunner.ai and add a new key command to this by editing the keybindings.json file or clicking on the pencil next to the item. Add the following keybinding for Adobe Illustrator:\n• Run using the new key command and you should see the results in Illustrator.\n\nThis guide is written with the intention of providing an entry point into learning how to write scripts for use in Adobe Illustrator CC. It assumes some experience with programming fundamentals and JavaScript. If you are familiar with a programming language such as python, C/C++, or Java it should be fairly straightforward to follow along.\n\nThe content is oriented towards visual design and writing code that results in visual and graphical elements. If you are familiar with creative coding IDE's such as Processing or OpenFrameworks, it should feel familiar in the iterative \"write - run ... repeat\" workflow, meaning you write some code, run it, see the result in Illustrator, and repeat the process. To facilitate this kind of workflow I recommend using Atom IDE as opposed to the ExtendScript Toolkit Application.\n\nThere are several official Adobe documents that act as good references for learning scripting. I suggest reading through them in the following order to grasp fundamental concepts and to learn which references are relevant to the task at hand.\n\nA searchable and more accessible HTML Version of the Document Object Model can be found here Adobe Illustrator Type Library. For older versions check\n\nIf you are interested in a more modern approach to working with the documentation and have some experience working with Node.js, check out the Documentation for the ExtendScript API by Yearbook. It's a great alternative for building your own searchable reference documentation from the ExtendScript API.\n\nIn general, you want to Setup Atom (one time) and make a new Illustrator document. It is possible to generate new documents using the function. We will cover more of this method later.\n• Setup Atom to be your primary editor. Trust me, it just works better.\n• Open Up Illustrator\n• Create an Illustrator file with mm as the default units.\n• Open Up Atom\n• Make a new file called \"script.jsx\" in your scripts folder. This and other scripts will be used for writing code and running from within Atom via the process-palette package you setup previously.\n\nAt this point you should have an empty document in Illustrator with 1 empty layer and a project folder to store scripts in.\n\nThe most basic scripts consist of drawing paths (and shapes) on layers within a document. To do this there needs to be a reference to an active document and at least one layer within the document. The code below provides a boilerplate to get a reference to the active document and the first (and only) layer in the document.\n\nAny code entered in a script following these references will have access to the or objects.\n\nPreprocessor directives are a way to include external scripts. At a basic level, the first line of a script might have a directive as show below. This directive includes any code written in the file lib.js, bringing it into my script. Why use this? Over time your code might get complex, making it hard to read. Using additional files will allow you to modularize, simplify, reuse, and streamline your code. To learn more about their use look at the JavaScript Tools Guide (pdf) located under Applications/ExtendScript Toolkit CC/SDK.\n\nFor the moment we won't worry about preprocessor directives. We will make use of them later in the guide.\n\nThis example will insert the text \"Hello World\" at the position (0,0) in the artboard. The position that an object is inserted into the artboard is dependent on the artboard coordinates. When you make a new document using the Illustrator New Document window, the artboard will default to a position of (0,0). This is not always the case when generating an artboard using a script. We will explore why this is next.\n• Create an Illustrator file with mm as the default units. Set the document size to 100 mm x 100 mm and RGB Color. As mentioned previously, its really nice to be able to see the grid while learning about positioning and inserting objects to the artboard. Setup the grid by going to Preferences > Guides & Grid > Gridline every: 1 mm, Subdivisions: 1.\n• Create a script called hello-world.jsx and insert the following code. // create new text frame and add it to the layer\n• Run the code using Process Palette to see the result in Illustrator. The text was placed in the top left corner at (0,0).\n\nThe function - This is similar to in Processing or in standard JavaScript and is really useful for debugging. The only caveat is it only works in the ExtendScript Toolkit IDE and will print to the JavaScript Console within the IDE. I have not found a solution for printing debug messages to the console in Atom yet. To make use of it, you can have the ExtendScript Toolkit open next to Atom.\n\nData Browser - This window within the ExtendScript Toolkit IDE is shows the namespace and all the objects, variables, and methods available. It is only available within the ExtendScript Toolkit IDE and only updates when running a script. In general the typical use case involves a document and/or layer so I usually start off inspecting an active document using the following script. In many cases, it's probably much easier to reference a documentation system such as Documentation for the ExtendScript API by Yearbook.\n\nThis section describes the examples contained in the folder. The best way to learn the API is to work through these examples starting from the top.\n\nThis example assumes there is an active document open in Illustrator. It gets a reference to the document, the first layer in the document, then adds a textFrameItem to the textFrames collection. A reference to the textFrameItem added is then positioned at 0,0 and given the contents of \"Hello World\".\n\nAssuming the document was created from the new file menu, it will have an origin of the top left, meaning both the world coordinates and artboard coordinates will align. As such, the text should be drawn in the top left corner.\n\nThis example creates a new document with a width of 100 pt and height of 100 pt and adds a pointTextItem to the textFrames collection. Points are the default unit in Illustrator.\n\nThis example is the same as the previous but shows how to change the colorspace of the file from the default CMYK to RGB.\n\nThis example creates a new document with a width of 100 pt and height of 100 pt and adds a pointTextItem to the textFrames collection. Before adding the text object we shift the ruler origin for the document such that the origin is in the top left. This is different from when we create a document using the standard new file menu. In two previous examples, you may notice the location of the text inserted is at or near the bottom of the artboard. This is because when generating a new document with a script, Illustrator will default to the bottom left as the origin instead of the top left.\n\nThis example makes use of the DocumentPreset() function to setup a new document. This allows you to customize things like the document title, width, height, and colorspace. It also allows you to make use of built in Illustrator presets for documents (which I rarely find myself using).\n\nThis example builds on the previous one and includes a scaling factor to change the document units from Points to Millimeters. I find the easiest way to deal with unit conversion is to just multiply or divide by the scaling factor. In this case its so we just declare a global variable called to reference as needed. The document units are also specified in the as Millimeters.\n\nThis example covers the basics of drawing and styling primitive shapes such as rectangles, rounded rectangles, ellipses, lines, and closed paths. It also introduces a preprocessor directive to include some helper functions for working with color.\n\nThis example covers how to programmatically save files in a different formats and for different versions of Illustrator. It creates a directory called \"test\" and saves out the following file types: AI, PDF, EPS, JPG, PNG, and SVG. Helper functions for each file type can be found in the /lib/files.js file.\n\nThis example demonstrates a way to simplify the document creation process. It makes it easy to define a width, height, and units for a new document in one line. Helper functions can be found in the /lib/doc.js file.\n\nThis example demonstrates how to include a single \"library\" file called main.js using the #include preprocessor directive. main.js in turn includes other js files.\n\nThis example demonstrates how to work with layers. It creates a document, several layers, then adds primitives to the layers. It proceeds to manipulate layer names, colors, and layer state (locked / unlocked).\n• Tutorials\n• Use AppleScript to perform batch actions in Illustrator\n• ExtendScript References And Links - Useful resources for scripting\n• Documentation for the ExtendScript API by Yearbook - Great alternative for building your own reference documentation from the ExtendScript API.\n• JavaScript Tools Guide (Online) - A great reference on other topics such as UI Tools, Interapplication Communication, etc\n• osascript\n• Run AppleScript from the Command Line in Mac OS X with osascript\n\nIf you find this tutorial useful in your work, please consider donating via PayPal. I'd love to put more time and energy into developing acessible content such as this. Thx for reading! 🙂"
    },
    {
        "link": "https://community.adobe.com/t5/illustrator-discussions/how-do-i-go-about-learning-how-to-write-scripts-for-illustrator/td-p/11623196",
        "document": "As someone who started not on a programmer path, Illustrator scripting is how I got into a much broader range of technologies from 9 years ago. My first 'real' job was intense and I had to learn scripting to save my poor arm from the typing needed in daily tasks as a production art person.\n\nBack then, resources were more limited and scripting capabilities were more limited than in later versions of Illustrator. However, the software was seemingly more stable and you used to be able to create scripts that would last a long time before some new Adobe change broke them. Also, as others have pointed out, javascript is the cross-platform easiest-to-learn language the general skills of which can be carried over into web design and other Adobe apps. The thing with \"ExtendScript\", Adobe's javascript is that it's following a really old version of javascript that doesn't have all the same features as the javascript they use in web design. So back in the day, the difference of ExtendScript and the latest javascript kind they ran in browsers was kind-of small compared to what it is now. Additionally some front-end UI design frameworks started to make their own syntax on top of javascript and even encroached on Adobe's ExtendScript file extension of \".jsx\" which to us means an Adobe javascript document but a React.js document for a web designer.\n\nSo thing brings me to the next point of the code editor because previously we had Adobe's trusty ESTK (ExtendScript Tool Kit) to rely on, and it had syntax checking for exactly that archaic ES3 style of javascript Adobe uses. But as pointed out by others, this will be going away in some OSs soon and all the rest - eventually. So now we have VSCode editor with an \"ESTK\" Plugin that is used to sort of replicate the old ESTK in a new code editor. And this new code editor probably has some settings to change the syntax for just .jsx extensions in just certain foldres - but I have been too lazy to investigate. Basically, with new complex stuff there's a new learning curve compared to just using the old ESTK if you are still able to.\n\nI'm going on doing some form of scripting for 10 years, and it took probably 5 years to be proficient. This being said, math-oriented stuff I don't do myself as much as I can and I just ask others for advice to implement a common stackoverflow answer to my needs. The first month or two of learning were especially frustrating because I originally began without watching any javascript videos and trying to create my ideal script for that time by pasting snippets from the forum. Using a Head-First javascript book, I slowly also learned some of the basics to make some rudimentary edits to the online snippets and produced some basic results. While in the short-term this was highly exhillarating, I found that I had authored something doomed to fail. Therefore there came a point when I knew that it was in my best interest to tear my work down and start completely over using my experience. After the first month I discovered the Lynda.com tutorials for javascript and it helped a lot because the videos were short and dealing with a specific subject at a time. All the while I needed to be aware of the Adobe vs modern browser javascript differences.\n\nMy advice for beginners in Adobe scripting is to keep watching the web-javascript tutorials but also to go to their local half-price books (if there's some in your country or the equivalent thereof) and also try to locate ancient tutorials for really old browser javascript. Those will still have browser features you can't use, but they will have syntax more similar to the Adobe ExtendScript one. Additionally any google search or stack-overflow search for Adobe ExtendScript will yield applicable results - but early on you should get the sense for what the difference between the javascript versions is. To make work inside VSCode faster, learn JSDoc which will help your VSCode have intellisense and auto-complete your code as you type it. While this is not available in ESTK, you can still have JSDoc comments in your old-style files and ESTK will work normally while VSCode will give the extra benefit of auto-completion, but in all cases the comments will help to document your work.\n\nThen, after mastering basic scripting you can expand into using TypeScript which is a way to super-charge your work by making javascript act more like a back-end object-oriented language and creating CEP extensions which can use browser javascript and Node.js server-side javascript in addition to ExtendScript javascript.\n\nAlso, while my work touches on any number of diverse software technologies I am hardly a master of all and find myself relying on others for help, new users who ask better questions and give better answers and also google basic questions that I should already have known!"
    },
    {
        "link": "https://medium.com/@jtnimoy/illustrator-scripting-tutorial-d626297b1df7",
        "document": "I’m going to show you how to create a new document, work with existing documents, make shapes, text, and placed images. I will also show you how to manipulate preexisting objects in a layout. The tutorial assumes you are familiar with basic concepts of object oriented language and the basics of Processing. Naturally, it helps to know the Javascript language, and the basics of Adobe Illustrator. If you are new to the Javascript language (even if you know Java from Processing), here is a nice JS tutorial: http://www.codecademy.com/en/tracks/javascript\n\nBeginning with Illustrator CC, the scripting is not bundled so please download and install it now. It can be found in the Adobe Creative Cloud system menu in the Apps tab. Otherwise, you can find the link here: https://creative.adobe.com/products/estk\n\nYou will see a new folder called /Applications/Adobe ExtendScript Toolkit CC … so now you can run the app called “ExtendScript Toolkit”. Please do so now.\n\nYou will see a cute little scripting app pop up, but it won’t be aimed at Illustrator by default. Tell it to control Illustrator by selecting “Adobe Illustrator CC ####” (which ever version you prefer) from the top-left menu.\n\nIf Illustrator is not yet running, you will get this popup:"
    },
    {
        "link": "https://stackoverflow.com/questions/54891335/adobe-illustrator-scripting-change-color-of-selection",
        "document": "I'm trying to set the colour of my current selection in Illustrator using a .jsx script.\n\nI can't find documentation on changing styles on (selected) objects. I have read most documentation out there, but I can't seem to find such a \"simple\" thing anywhere. Here is the code I've come up with:\n\nWhen I run it, nothing happens sadly."
    },
    {
        "link": "https://helpx.adobe.com/illustrator/using/automation-scripts.html",
        "document": ""
    },
    {
        "link": "https://metadesignsolutions.com/how-to-automate-adobe-illustrator-with-javascript-scripting-jsx-examples",
        "document": "Adobe Illustrator is a powerful tool used by designers, artists, and businesses for vector graphics and digital artwork. However, repetitive tasks like resizing objects, applying styles, exporting files, and batch processing can slow down productivity. This is where JavaScript scripting (JSX) in Adobe Illustrator comes in.\n\nBy using Illustrator scripting, you can automate workflows, speed up design processes, and improve efficiency. Similarly, Adobe InDesign scripting allows users to automate repetitive layout tasks, ensuring consistency and saving valuable time. This guide will walk you through how to automate Adobe Illustrator using JavaScript (ExtendScript), with real-world examples, best practices, and why businesses hire Illustrator plugin developers to create custom automation solutions.\n\nAutomation using JavaScript (JSX) in Illustrator allows designers to focus on creativity instead of repetitive manual work. Here’s why automation is valuable:\n\n✅ Saves Time – Reduce hours of repetitive work by automating tasks.\n\n✅ Eliminates Errors – Standardize processes and minimize human mistakes.\n\n✅ Increases Productivity – Let scripts handle repetitive tasks so you can work faster.\n\n✅ Customizable Workflows – Tailor automation to fit specific business needs.\n\n✅ Batch Processing – Apply changes to multiple files simultaneously.\n\n✅ Integration with Other Tools – Connect Illustrator with APIs, databases, or CMS systems.\n\nAccording to a 2023 design industry report, businesses using Illustrator automation reported a 40% increase in productivity.\n\nTo begin Illustrator scripting, you need:\n\n2. Creating Your First Illustrator Script (Hello World)\n\nLet’s start with a simple script that displays an alert in Illustrator.\n\n1️⃣ Open Notepad++, VS Code, or ExtendScript Toolkit.\n\n2️⃣ Type the following code:"
    },
    {
        "link": "https://ai-scripting.docsforadobe.dev/scriptingJavascript/creatingPathsShapes.html",
        "document": ""
    }
]