[
    {
        "link": "https://discussions.unity.com/t/tutorial-classic-2d-snake-in-c/487077",
        "document": ""
    },
    {
        "link": "https://medium.com/@carol.reed.597/how-to-create-a-snake-game-in-minutes-using-unity-fb340bb4b5b",
        "document": "Unity, renowned for its capabilities in Android game development, offers developers a seamless way to transform their gaming concepts into reality. Among the classic games that serve as an ideal starting point for beginners is the timeless Snake game.\n\nIn this step-by-step tutorial, we will guide you through the process of crafting a basic Snake game using Unity, while focusing on Android game development. By adhering to these simple steps, you’ll be able to create your very own playable Snake game within a matter of minutes.\n\nBefore plunging into game development, ensure that Unity is installed on your computer. You can conveniently download Unity Hub from the official Unity website and set up a new project tailored for Android game development.\n• Generate a fresh scene by right-clicking in the Project window, selecting Create > Scene.\n• Establish the camera: Within the Hierarchy window, right-click, opt for Camera to spawn a new camera GameObject. Adjust its position (e.g., Z = -10) and dimensions to fit your envisioned game view.\n• Construct a GameObject for the Snake’s head: Right-click within the Hierarchy window, select Create Empty, and rename it as “SnakeHead”. Append a Sprite Renderer component and select a fitting sprite for the snake’s head.\n• Develop a prefab for the Snake’s body segment: Create an empty GameObject named “SnakeBody”. Attach a Sprite Renderer component and designate a sprite for the body segment. Transform this GameObject into a prefab by dragging it into the Assets folder.\n• Affix a script to the SnakeHead GameObject to oversee its movement. Formulate a C# script entitled “SnakeMovement”.\n• Open the script and integrate the subsequent code:\n\n3. Fasten the “SnakeMovement” script to the “SnakeHead” GameObject.\n• Construct a new GameObject named “Food” to serve as the snake’s sustenance. Attach a Sprite Renderer component and choose an appropriate sprite.\n• Create a C# script titled “FoodManager” and inject the following code:\n\n3. Attach the “FoodManager” script to an empty GameObject within the Hierarchy.\n• Enhance the “SnakeMovement” script to monitor the snake’s tail segments:\n\n2. Attach the “SnakeMovement” script to the “SnakeHead” GameObject.\n\n3. Assign the “SnakeBody” prefab to the “bodyPrefab” field within the “SnakeMovement” script.\n• Enhance the “SnakeMovement” script to manage collisions with food:\n\n2. Attach a Box Collider 2D component to the “SnakeHead” GameObject and activate its Is Trigger property.\n• Forge a UI canvas and insert a Text element to showcase the game over message.\n• Produce a C# script named “GameManager” and include the ensuing code:\n\n3. Affix the “GameManager” script to an empty GameObject within the Hiera rchy.\n\n4. Designate the Text element to the “gameOverText” field inside the “GameManager” script.\n\n5. Enhance the “SnakeMovement” script to activate the game over condition:\n\nCongratulations! You have masterfully crafted a rudimentary Snake game through Unity, tailored for Android game development. This tutorial imparts the fundamental mechanics of the game, laying the foundation for you to expand and customize it further with supplementary features like score tracking, level design, and novel gameplay elements. Unity’s user-centric interface and potent capabilities render it an exceptional ally, catering to both fledgling and seasoned game developers in their pursuit to breathe life into innovative concepts. Embark on your coding journey and revel in the fruits of your labor with the freshly minted Snake game in your arsenal!"
    },
    {
        "link": "https://discussions.unity.com/t/making-a-puzzle-game-like-snakebird/810174",
        "document": ""
    },
    {
        "link": "https://discussions.unity.com/t/what-do-i-need-to-have-ready-before-i-start-developing-my-2d-game/871825",
        "document": ""
    },
    {
        "link": "https://reddit.com/r/learnprogramming/comments/10uzmpd/i_feel_like_i_wont_be_able_to_make_a_basic_snake",
        "document": "I feel like I won't be able to make a basic snake game even if I am given 1 year for it.\n\nSorry, this post was deleted by the person who originally posted it.\n\nArchived post. New comments cannot be posted and votes cannot be cast."
    },
    {
        "link": "https://unity.com/how-to/naming-and-code-style-tips-c-scripting-unity",
        "document": ""
    },
    {
        "link": "https://particularreality.substack.com/p/coding-conventions-and-unity-best",
        "document": "The code for the first 16 days of \"game-jammy\" prototyping is not something to show to the world, but in the upcoming entries, where I'll start doing things properly (at least, at the best of my capabilities, and for my taste), I'll be sharing some snippet here and there.\n\nHopefully it will be useful to somebody, and to make it more useful I decided that I should write a post about the coding conventions that I'm using for the project.\n\nThere's no ultimately better coding convention, or everybody would use it and shut up, while instead there's plenty of debate and strong opinions. There are many conventions which are appropriate for different languages, contexts and domains, and some cosmetic differences that don't really matter and are just a matter of personal taste.\n\nAt least, the thing pretty much everybody agrees on is that it is useful to stick to a specific set of coding conventions for a project, especially one involving multiple developers. Which set gets chosen doesn't matter that much at the end of the day.\n\nI'm solo programming, so I don't need to make anybody else happy or convince them to use the style I prefer. And I definitely don't want to convince you, even if I'm going to provide my rationale about the style I use.\n\nMoreover, I'm going to discuss things specifically related to Unity, which go beyond C# coding style.\n\nTo me, programming is about conveying meaningful information to both the compiler and the reader of the code (including \"future me\").\n\nIt's also about organizing and structuring thoughts, building and composing abstractions in sensible, effective ways.\n\nAnd sometimes, is forgetting about all that and writing instead code that runs fast, thinking about the characteristics of the hardware is going to execute it.\n\nOn a lucky day, one manages to write code that does all these things at the same time. Mostly, is a continuous balancing act between these different angles. It never gets boring!\n\nI try to convey meaning through code in any way I can: naming, spacing/indentation, custom data types, selection and ordering of parameters etc.\n\nAs it often happens, if you try to find a generic solution that works in every possible context, things get complicated (and cumbersome).\n\nSo, I decide instead to keep it simple and focus on the specific context for the project:\n\nThis tells us three important things:\n• None 3D game development: we're going to deal with vectors, matrices and quaternions on a daily basis: these are core types of the domain we're working in.\n• None C#: some of our conventions will be related to intrinsic characteristics of that language, and we might check its standard coding conventions\n• None Unity: we're going to interface our code with the Unity APIs, so we might to want it to fit nicely with their style - or we might, for a twist, use different conventions so that we can easily distinguish between Unity API calls and our own\n\nWhen I write code in other languages and for other contexts, I follow different conventions. And nothing is set in stone: these rules should be a useful tool, not a burden. Of course, that changes when working with a team: in that case, it's more important to be consistent to not confuse colleagues.\n\nCode should be well readable and speak for itself. Comments should be a fall back option for cases when, for some reason, it's not possible to write obvious, self-explanatory code.\n\nSo, I try to avoid writing comments. Every time you are about to write a comment, you should check if you can instead spend that time to refactor the code so that it wouldn't need it (for example, renaming some parameters, or wrapping related values into a struct).\n\nMy position is that comments for obvious code not only don't increase quality, they decrease it. They add noise: text that takes space on your screen and that you end up reading, but that doesn't give you any new useful information.\n\nThere's an exception I make. If I'm writing a library that must be used by third parties, especially if source code won't be shared, it's mandatory to provide detailed documentation to end users.\n\nIn that case, adding documentation comments to automatically generate documentation is the lesser evil. It still feels very stupid to document obvious things, but providing a library with an API that is not fully documented feels too lame.\n\nThis is what I consider the silliest part of coding conventions, the one that matters less.\n\nAnyway, I have my preferences:\n• None\n• None esthetical preference, with the bonus advantage of having extra lines of code on-screen\n• None\n• None esthetical preference, with the bonus advantage that makes insertion of further statements safer\n• None sometimes, I misbehave and put on a single line a very simple conditional statement without braces, like\n• None I indent pressing , but have my IDE configured to use 4 spaces per indentation level\n• None wasting bytes using four characters and not one doesn't bother me at all (it's a problem from another era), while I think there's a concrete advantage in having consistent indentation when opening files with different editors that could visualize TABs differently\n• None I usually never go past 100 columns and prefer to stay under 80. For this project, I'm going to limit myself to 79 columns, because that's where the code in the Substack code block wraps when viewed in the browser.\n• None having an \"old school\" columns limit helps me to keep things more readable: parameters for non trivial calls go on multiple lines, and no superfluous indentation levels are used to not waste horizontal space\n• None additionally, this setup allows me to have three files opened side by side on the 21:9 monitor I normally use (and at a text size that should not make me go blind)\n\nNaming things properly is probably the most critical thing in making the code readable.\n\nI use a simplified and customized variant of the Hungarian notation.\n\nStill here? Some developers run away as soon as they read \"Hungarian notation\", usually screaming \"WHAT ARE YOU DOING, IT'S NOT THE NINETIES, THE IDE HIGHLIGHTS THINGS\".\n\nOh, whatever. I find it very useful.\n\nAdditionally, you're not always using an IDE when reading code. For example, here reading this devlog, you don't get advanced syntax highlighting or code navigation.\n\nActually, unfortunately, you don't even get basic syntax highlighting (come on, Substack!)\n\nLet's see a small code snippet and discuss some details.\n\nI use the the ` ` prefix for member variables, and the ` ` for static ones.\n\nConsequently, if there's no ` ` or ` ` prefix in a variable name, it means it's local. You instantly know the scope and lifetime of a variable.\n\nMoreover, you can consistently name constructor parameters, without having to mess with ` `.\n\nAfter the underscore, or at the beginning of a local variable name, there's a letter indicating roughly the data type.\n\nWhy roughly? Some more hardcore variants of the Hungarian notation specific exactly each specific type in the variable name, using an abbreviated form (e.g. ` ` for long pointer to a zero-terminated string).\n\nI prefer instead to use a single letter, identifying \"groups\" of types:\n\nWhy I don't distinguish between ` ` and ` `, or between ` ` and ` `?\n\nWhile writing an expression, 99% of the times it's useful to instantly know if something is an integer or a floating point, because it can change the result of the expression (integer division vs floating point division). It's often not so critical, instead, to know about the range of values supported by each variables: one should think about that when defining it, and occasionally revise it if needed.\n\nIf there's no letter, it means that is a custom type using value semantics (so, a ` ` of some kind). So, you might tell me that vectors and quaternions should go into this category, but they're so frequently used and important that I decided to treat them as first class citizens and have specific letters for them.\n\nYou might also argue that strings in C# are reference types and so should use ` `, but they're also somewhat \"special\" and deserve a letter of their own. Moreover, I'm more focused on semantics than representation, and C# strings equality operators are defined to compare the values they contain and not the references (as you get by default with custom reference types).\n\nSo, we have a ` ` or ` ` prefix, or no prefix. Then, a letter which directly improves the deduction of the semantics attached to a variable (how is it compared, how is it passed, what happens if you do logical or arithmetical operations on it?). Camel-case for the rest of the variable name.\n\nSometimes, I also use suffixes, but I'm not particularly strict nor consistent about it: it's about if I feel it's useful in that context. Some examples:\n\nFor ` ` and ` ` definitions used like constants (but that because of their type cannot be declared as ` `) I use upper case names, using the underscore as divider.\n\nFor names of namespaces, classes, structs, interfaces and enumerations I use PascalCase. I use an additional capital letter prefix following this scheme:\n\nSo, no prefix letter for namespaces, structs and classes.\n\nType names are usually singular. An exception is when using a flags enumeration, which can represent multiple values packed together and so should be plural.\n\nI always use the ` ` suffix for classes extending ` `.\n\nI use camelCase for method names. Yes, I know that Unity uses PascalCase, but seeing the two mixed up doesn't bother me. Actually, it helps me to instantly distinguish calls to method I defined.\n\nI do not use C# properties. I don't like having any computation hidden behind the syntax normally associated with simply accessing a field (a basic, usually constant time operation).\n\nI use C# events and not ` `. I follow the common convention of using a verb related to the moment the event is raised, and of always using a companion \"On\" method to raise it in a controlled way. Short snippet:\n\nI often use ` ` / ` ` and rarely define custom delegate types.\n\nI continuously iterate in trying to find better and better structure for not only code, but scenes. That said, I came to pretty strong conclusions about some core principles that I stick to as I have experienced that they help me keep things manageable.\n\nThe typical \"first steps\" Unity tutorials, as soon as you have two scripts on different nodes and you need to put them in communication, tell you to add a public field to link them together via inspector.\n\nBasically, if you have ` ` on ` ` and ` ` on ` `, and you want to call from ` ` a public method ` ` defined in ` `, they tell you to do this:\n\nThe ` ` definition in ` ` is shown in the inspector of ` ` as a field into which you can drag any node with ` ` attached to it. That action basically puts in the scene data some information that Unity, at runtime, will deserialize and use to fill in the ` ` variable with a reference to the ` ` instance on ` `.\n\nSo, one can start linking nodes between any linked corner of the scenes and have each one call methods on others.\n\nIt might sound fine and it can work for a very simple demo or for the scope of a tutorial, but it's a recipe for disaster.\n\nThe problem is that there is no enforcement of any structure on what node refers to what other node. You might end up linking together components from nodes in totally different subtrees of the scene hierarchy. And if you want to make things worse, you just have to do it at runtime, using methods like ` ` or ` `.\n\nIf you want to make your project completely unmanageable, you just have to add to the mix the use of unity events , defining via inspector what method gets called when a certain event occurs.\n\nIf you had any hope to figure out how something worked, by following references and calls in the code, now you lost it, because there's nothing to see or find in the C# side of things: good luck untangling the mess by checking the settings of each node through the inspector.\n\nOk, I think I have described the worst thing I've encountered when dealing with third parties projects and tutorials.\n\nThis is a good moment as any to remember that the value that a system provides to an user is given by both what it enables them to do (flexibility, power) but also by what it prevents them to do.\n\nUnity gives you plenty of flexibility, but doesn't prevent you making a total mess of your project, and actually, unfortunately, sometimes encourages you to do it while attempting to \"make things simple\" (see: events wiring via inspector).\n\nThat said, something that gives you power and flexibility can still be very useful if you restrict yourself and use discipline to keep things manageable.\n\nSo, how do I keep things manageable in Unity?\n\nFirst, I make a very controlled usage of ` `.\n\nThe data and logic of projects stays handled in \"normal\" C# classes and structs, structured like I would do in any other engine.\n\nA script extending ` ` attached to a node is, for me, something that enables me to interact with that node, its components, or (with some limits) its subtree. If, for example, I have a cube object with a rigid body and a renderer, and I need to manipulate these components, I create a ` ` script and attach it to the cube.\n\nIn that ` `, I access the ` ` or ` ` components, and expose method to indirectly manipulate them. For example, I might do:\n\nIn other parts of the code, I will have a reference to the `CubeBhv` on the node, and will call ` `, but I will never directly access the ` ` or the ` `: ` ` is my unique interface to the manipulation of that ` `, and abstracts the low level details about what components are accessed in doing so.\n\nAlso, note that I never use `public` fields for references to components. They should only be accessible from inside the behaviour itself. The correct way to make them editable through the inspector is marking the field with the `SerializeField` attribute.\n\nThis principle of isolating the access to components can be extended to a whole hierarchy of nodes. Let's see an example hierarchy:\n\nIf B refers to C, and A refers to B, it's all fine. If A manipulates a component of C, it must do it indirectly, using B. Bypassing B and directly linking A to C is prohibited.\n\nIf there is no link between A and X, instead, it's fine for A to link directly to Y.\n\nLinking between nodes in different subtrees (let's see, from B to Y) is prohibited.\n\nIf we need to model an interaction between nodes in different subtrees, their interaction should be handled by a common ancestor. In this example, only A would be able to have B and Y interact with each other.\n\nBy following this strict hierarchical organization, one avoids bad surprises. If something unexpected happens on a component of a node, there's a very limited subset of scripts that could be responsible.\n\nAlso, it's a type of organization that scales pretty easily.\n\nOne can instantiate a prefab and only access it through a single script attached to its root node. That script will deal with the prefab subtree, and every time things get too complicated for a single script, you can break down into more manageable parts by adding more child nodes/behaviours.\n\nThe same kind of approach can also be used with secondary scenes loaded additively, with a few quirks.\n\nThat said, there is in practice some space for \"global\" things accessed ignoring this organization, for example by using singletons. Singletons are considered an enemy of clean code architecture, and for very good reasons.\n\nHowever, especially considering some of the Unity quirks, there are practical reasons to use a singleton here and there.\n\nIt's not like there are no better options, but they are usually more complicated and so they must be worth the increase in complexity.\n\nFor example, let's consider some debug materials that I use all the time. I can add this ` ` script on a node, and link there the materials via inspector.\n\nThen, to assign the red debug material, I can easily do:\n\nIn the 16 days PoC, I went for the easy road and used (and abused) singletons, creating a bunch of \"manager\" classes that I could have working together as needed.\n\nIt was simple enough that I could pull it off, but now that we start doing things properly we're going to steer away from this simple approach. and progressively improve upon it.\n\nThat said, I refuse any dogma and encourage everybody to do the same.\n\nSometimes, even a singleton can be ok, like a ` ` statement. Just be careful to the velociraptors.\n\nThe use of events and event handlers is a very common approach that is valuable because it allows to design and develop decoupled subsystems.\n\nA subsystem A listens for events from subsystem B, does its thing when an event occurs, and then maybe sends some events itself.\n\nCompared to a method call from B to A, there's the great advantage that A and B don't have to know much of each other. They only, to put it simply, send and receive messages according to some known description.\n\nThis is good, but it comes at a price. Not knowing much of each other often means being unable to inquire about the state of each other, and it often happens that the actions one system must do when an event occurs are not only determined by the data carried by the event itself, but from other factors. So it can happen that one is forced to build a state based on the influx of events, and sometimes replicate logic and state that are already present elsewhere. With the possibility of introducing subtle mistakes.\n\nOther problems often surface. For example, the order in which the event handlers are called can often change the behaviour of the system, and that order is not explicit in the code. Debugging also becomes harder.\n\nIf you take a reasonably complicated system, you get to a point where all kinds of events can occur at any time and in any order, and things can become unmanageable.\n\nSo, shall we ban event based programming? Of course not, but we should only use it when it's really needed and it's critical to obtain a reusable, loosely coupled subsystem.\n\nMore often than not, it's very possible to manage things in a more robust, simple and also efficient manner if one manages to use other approaches.\n\nThere's always time to make things more complicated and decoupled later if the need arise, but it's better to try and keep things simple first.\n\nSimple like what? Well, subsystem A changes a shared state. B reads it and does it thing, maybe changing another piece of shared state that A will read in the next frame.\n\nAlso, a bit of polling, paired with dirty flags or with lastUpdated timestamps can help in keeping things simple and faster than you might imagine (profile, always profile!).\n\nThis would require an article by itself and this post is already too long.\n\nSo, I will just say, in the context of Unity: I do not use coroutines at all. Instead, I use the ` ` through ` ` when it makes sense. Which is: almost never.\n\nIt's fine to use ` ` for things like background loading of resources, or network calls to a REST API. Having tasks and futures is definitely much better than chaining a bunch of callbacks which themselves do non blocking API calls (callbacks bring problems similar to those described discussing event based programming).\n\nBut the moment you use an asynchronous call in gameplay code, you're asking for troubles, because basic things like pausing the game become a mess.\n\nEvery time I tried doing it, I ended up regretting it and switching to a FSM based approach.\n\nIf you are using an API or a third party component that offers you asynchronous operations, and you want or need to hide that from the rest of your system, you can (and often, should) implement a FSM that wraps those calls and only exposes what's needed.\n\nThe idea of the \"game loop\" where there's a simulated game world, with a state that can be affected by user input, and a renderer that produces a frame based on that state, is particularly well suited to an implementation involving FSMs.\n\nSo, who's up for a t-shirt saying \"When in doubt, use a FSM\"?\n\nIs that it?\n\nI realize that I might have forgot about important things, and that at some point I might change my mind about those that I didn’t forget. I might update this “special” post in the future.\n\nAnyway, that’s it for now, and next week you’re going to get the first post about the first week of “post PoC” development: that’s enough rambling, there’s a game to be made!"
    },
    {
        "link": "https://codemaker2016.medium.com/coding-standards-for-unity3d-c-scripting-aaf3c345c035",
        "document": "Coding standards are a set of rules, techniques, and best practices to create more readable, efficient, and consistent code with minimal errors. They offer a uniform format by which software engineers can build consistent and highly optimized code. Coding best practices and standards may vary depending on the industry, product, platform, and users. The standards required for coding software for educational purposes will differ from those used for sports. It is easier for programmers to write faultless code thereby adhering to industry-specific standards resulting in satisfied end-users and meeting business requirements.\n\nAs a programmer, it is very important to follow proper coding standards and write codes that are easily understandable. There are a very few guidelines available for safeguarding coding standards in Unity and C#. Here are some of the coding standards that I adopted for development in my coding journey.\n\nAlways follow the coding standards mentioned by the Unity and C# team.\n\nSimilar files should be grouped in the specified root folders:\n• Fonts — Fonts used in the game\n\nKeep Pascal Case format for file names except for images:\n\nStandardized unique script names makes it easier for the user to find and predict the purpose and use case of the script. Follow these naming rules so that we can approximately know what the script is for by simply reading the filenames:\n• XxxManager — Use only ONE instance in the scene for master scripts\n\nPlayerController, BossController, BackgroundControler\n• XxxDatabase — for a database which contains a list of data rows\n\nWeaponDatabase, CardDatabase\n\nThe major difference between a Manager and a Controller is in the object creation. The manager script should be a singleton or static which involves multiple objects, while the Controller script controls the object and may have multiple instances. For example, there are multiple BoundaryController scripts in the scene, and each script controls each boundary.\n\nFollow the same conventions that we have discussed for scripts. Proper variable naming enables the user to predict the type of the variable without reading through the entire code:\n• Use camelCase, as a noun or in a form of an adjective.\n\nhasFinished, currentLocation, isStarted\n• Use underscore as a prefix for private and protected variables.\n\n_itemIndex, _controller, _serialNo\n• Use capital letters and PREFS_XXXX for PlayerPref keys.\n\nPREFS_USER_SCORE\n• Use xxxComponent for all other components.\n\neyesSpriteRenderer / eyesSR, runAnim, attackAC, victoryAC\n• Use xxxxList for List and xxxxDict for Dictionary\n\nnameList, userList\n• Unity use prefix _ for private/protected variables, and s_ for static variables.\n• Use PascalCase — start all new words with an uppercase\n\nBonus, EndScene, MoveToLeft\n• Member Properties\n\nIf a function has no input, use member property in PascalCase\n\n \n\nto\n\n\n\nFollow a consistent order while declaring variables and functions to save our time while inspecting for a specific variable or a function in the code:\n\nYou can group variables and functions as sections in a large script.\n• Single line comments should include at least one (preferred one) space after the slashes.\n\n // This is a single line comment with a space at the start\n• TODO comments should include 2 spaces after the colon following the TODO text.\n• Avoid a space after the slashes for temporarily commenting to differentiate over normal comments.\n\n\n\nThanks for reading this article.\n\nIf you enjoyed this article, please click on the clap button 👏 and share to help others find it!\n\nIf you are interested in further exploring, here are some resources I found helpful along the way:"
    },
    {
        "link": "https://avangarde-software.com/unity-coding-guidelines-basic-best-practices",
        "document": "Have you ever wondered how a company organizes its code? Look no further, because here lie all your answers ( probably not quite all your answers, but at least you’ll take a look at how we do it and maybe learn from it ). This is by no means a full comprehensive guide or a “this is the only way to do it” type of guide, it’s more like an internal guideline that we use to stay organized and to be able to easily pass code from one person to another. This is our way of doing it and you are not required to follow these, unless you are an Avangarde Software employee, in which case it’s mandatory.\n\nEach style of writing code is personal and it feels like a customization option in a video game. Each person might do it differently to express themselves in a certain way (all the way from clean, organized, easily readable to messy but gets the job done). Nevertheless, one rule is a must for everyone and it will be the first topic of our discussion :\n\nThere are primarily two types of consistency you should be concerned with : individual and collective consistency.\n\nIndividual consistency refers to your own set of rules that you use when you write code. It is important to use the same set of rules every time because it helps you read and understand your own code better, in case you ever need to come back to it at a later date. It also speeds up the process of writing code if you do it in the same way every time.\n\nCollective consistency refers to when you need to write code in groups (2 or more people). Look at it like a common language between the members of the same team / company. It helps a lot when you can easily read and understand others code like it’s your own. In some cases it’s OK to use your own preferred style where you know others won’t interfere, but make sure you use the common styles in zones where you know others will work on. It’s considered rude to rewrite others code while they work on it without their permission, it’s better to just ask them to refactor or redo the code you consider unfit.\n\nWith this out of the way, let’s look at some examples of coding guidelines we like to use in different situations.\n\nHere is a basic set of rules for writing code that we use and is consistent within our company. This way, when we read others code, we don’t have to first translate it from their way or writing code to our way and only after that start understand what the in the world they tried to achieve there. Basically, it makes life easier, don’t you like it when it’s easy ? We will mostly use C# standards since we use C# in Unity ( don’t use JavaScript/UnityScript, please ^_^ ). This means we will almost never use hyphens ( – ) or underscores ( _ ).\n• \n• Bad : private string _name; public string name { get { return _name; } set { _name = value; } }\n• Good : private string name; public string Name { get { return name; } set { name = value; } }\n• Add On prefix to events and actions\n• Always use access level modifiers. Do not omit them. If you don’t write any access modifier, the compiler will assume it’s private, but that doesn’t mean you shouldn’t write the keyword private.\n• Remember that we talked about consistency? Well, when everything that needs to be public is marked with its appropriate access modifier (public), then everything that should be private should also be marked as private. This brings us straight to the following topic.\n• Use single declaration per line. It helps with keeping everything clear.\n• Declare only one class / interface per source file, with the exception of internal classes. You may end up with more files, but it’s clear and you can easily find what you are searching for.\n\nKeeping everything spaced out properly will not only increase the speed at which you’re reading the code, but also increase readability and helps with clear understanding of code logic. When we are talking about spacing, multiple cases can arise.\n\nUnity comes with Visual Studio Community edition and the standard used in Visual Studio is generally good enough, so you won’t have to do a lot here. After you open a project with Visual Studio, go to Edit -> Advanced -> View White Spaces, this will help you visualize spacing. One space is marked with a dot and tabs are marked with an arrow. By default, Visual Studio will treat tabs as 4 spaces. You can change this option to treat tabs as actual tabs and change the length of tabs, but the default value of 4 is what we’re looking for. Some people prefer using only spaces, others will maybe use tools that automatically analyze the code and require for you to use tabs. This is again a personal preference, so as long as the code looks clean and correctly indented you should be good to go.\n\nUse Vertical Spacing to organize code within a class. Keep one blank line between methods to better visualize the structure of the class and keep a blank line inside methods to separate functionality (for example : a method that creates an object should have its creation part and initialization part separated). If you have many logical parts inside the same method, you might consider refactoring and creating multiple methods, each doing its own job.\n\nThis is a topic that many people have different opinions on. As much as we would like to do it our own way, the C# convention states : all braces get their own line.\n\nThe “case” statements should be indented from the switch statement like this:\n\nAlso, always use braces. Yes, the compiler will work if you only have 1 line of code, but then again, we’re talking about improving code readability and this one helps a lot.\n\nGenerally, when people discuss about OOP (Object Oriented Programming) principles, public fields are not something recommended.\n\nThese can create a lot of problems due to their access level. Since code from outside of the class can access this, you can easily make the mistake of modifying certain parts from who knows where and then it will be hard to debug if a problem arises. On the other hand, Unity team recommends using public fields in their documentation since they are automatically serialized and displayed in the inspector. This is more of a preference, as long as you are careful when writing code, the fact that some fields are public shouldn’t be a problem. The proper OOP way of doing this would be to make everything private. If you need something to be accessed from another class, make a property with a get and a set method.\n\nThis method requires a private field and it creates a public property available from other portions of your code. Inside these get and set methods, you can write additional code that is called when this property is read or wrote. By removing one of these methods, you can either make certain properties read-only or write-only. Also you can set one of them as private if you want ( for example ) to be able to access a property from outside, but change its value only from inside.\n\nThere is another type of property and it’s called auto-implemented property. Creating a proeprty in this way it makes it behave exactly like a field.\n\nHowever, if you need something private to be displayed in the Inspector, there is a way of doing it and it’s by using the [SerializeField] attribute\n\nThis attribute can serialize private fields but it cannot serialize properties or static fields.\n• Put all your code in a namespace. This avoids code clashes among your own libraries and third-party code. But don’t rely on namespaces to avoid clashes with important classes. Even if you use different namespaces, don’t use “Object” or “Action” or “Event” as class names.\n• Use assertions. Assertions are useful to test invariants in code and help flush out logic bugs. Assertions are available in the Unity.Assertions.Assert class. They all test some condition, and write an error message in the console if the condition is not met.\n• DO NOT use strings for anything other than displayed text. In particular, do not use strings for identifying objects or prefabs. There are exceptions (there are still a few things that can only be accessed by name in Unity). In such cases, define those strings as constants in files such as AnimationNames or AudioModuleNames.\n• DO NOT use Invoke and SendMessage. These methods of MonoBehaviour call other methods by name. Methods called by name are hard to track in code (you cannot find “Usages”, and SendMessage has a wide scope that is even harder to track). Use Coroutines instead.\n• DO NOT let spawned objects clutter your hierarchy when the game runs. Set their parents to a scene object to make it easier to find stuff when the game is running. You could use an empty game object as their parent.\n• If you have a lot of text, put it in a file. Don’t put it in fields for editing in the inspector. Make it easy to change without having to open the Unity editor, and especially without having to save the scene.\n\nNow it’s time to list some of the things that are specific to Unity and help boost either application performance or code readability. For further information you can either check the documentation of the methods, the references list or try them for yourself and see the benefits.\n• DO NOT use . As much as you can, develop your project without the use of this method as it’s very slow. If you really need to use it, try using it in methods that are called when necessary ( for example Start() for initialization or maybe in an event that you define, but NEVER in Update() )\n• DO NOT use in Update. It’s very inefficient to use it in this manner. Cache the components you want to access in private properties and use them like that.\n• Avoid using public index-coupled arrays. For instance, do not define an array of weapons, an array of bullets, and an array of particles, so that your code looks like this: The problem for this is not so much in the code, but rather setting it up in the inspector without making mistakes. Rather, define a class that encapsulates the three variables, and make an array of that: The code looks neater, but most importantly, it is harder to make mistakes in setting up the data in the inspector.\n• Avoid using arrays for structure other than sequences. For example, a player may have three types of attacks. Each uses the current weapon, but generates different bullets and different behaviour.You may be tempted to dump the three bullets in an array, and then use this kind of logic: Enums can make things look better in code… …but not in the inspector. It’s better to use separate variables so that the names help show which content to put in. Use a class to make it neat.\n• Use singletons for convenience. Singletons are useful for managers, such as or .\n• Avoid using singletons for unique instances of prefabs that are not managers (such as the Player). Not adhering to this principle complicates inheritance hierarchies, and makes certain types of changes harder. Rather keep references to these in your GameManager\n• Define static properties and methods for public variables and methods that are used often from outside the class. This allows you to write GameManager.Player instead of GameManager.Instance.player."
    },
    {
        "link": "https://reddit.com/r/gamedev/comments/3a1k33/top_10_unity_best_practices_naming_conventions",
        "document": "I wrote a little article outlining a few best practices I've picked up over time, regarding naming conventions.\n• Use descriptive names: It’s obvious, but it’s also the most important. Instead of using BallA and BallB, use BouncyBall and MetalBall. Instead of Button1 and Button2, use PauseButton, ExitButton. Serious game development means putting several months into a single project, which means you can count on yourself to forget what you were thinking when you wrote a script 4 months ago. Do yourself a favor and write your code as if a complete stranger is going to read it in the future.\n• Use proper parenting: Although not a naming convention, your lightBulb object should almost always be a child of your Lamp object. Hierarchies should always follow common sense. Always avoid grouping together unrelated objects. The hierarchy you come up with now, your future self must also be able to come up with independently.\n• Use CamelCase: Why? Because ThisIsEasierToRead than thislongabomination. As a bonus, most modern code completion tools have explicit support for camel cases. Which means that you can quickly call MyAwesomeFunction() by typing ‘maf’ in the editor (The characters in upper case).\n• Avoid abbreviations: I know it’s tempting to name SmallGun And BigGun as ‘sg’ and ‘bg’ because “Yeah, sure I’ll change it in the future, I just want to test one little thing quickly”. Before you know it, you’re in the middle of a complicated spiderweb of dependencies and finding objects in code using the same abbreviations you used to name them ‘temporarily’. Soon, it’s no longer worth the effort and you say to yourself that it’s okay because you know what those objects are so you don’t need to go through the trouble of refactoring a million things. All this to save 3 seconds which it would have taken you to type in a proper name.\n• Prefix Underscores to highlight items: Earlier, using underscores as the first character of an identifier meant that it will come up as the first item in the sorted list. Even though we can now sort our game objects arbitrarily in the hierarchy view, it’s still a good idea to highlight certain unique objects that are of greater importance or are used very frequently. For example, _SetupManager to set up initial conditions in your scene, _ScoreManager that keeps track of score change events from multiple sources. These objects will probably be used most often so it’s a good idea to give them a distinct and visible name.\n\nNot to make the post a giant wall of text, check out the complete post at my little blog :)"
    },
    {
        "link": "https://docs.unity3d.com/Manual/UIToolkits.html",
        "document": "Unity provides three UI(User Interface) Allows a user to interact with your application. Unity currently supports three UI systems. More info\n\nSee in Glossary systems that you can use to create user interfaces (UI) for the Unity Editor and applications made in the Unity Editor:\n\nThis page provides an overview of each.\n\nUI Toolkit is the newest UI system in Unity. It’s designed to optimize performance across platforms, and is based on standard web technologies. You can use UI Toolkit to create extensions for the Unity Editor, and to create runtime UI for games and applications.\n• A retained-mode UI system that contains the core features and functionality required to create user interfaces.\n• UI Asset types inspired by standard web formats such as HTML, XML, and CSS. Use them to structure and style UI.\n• Tools and resources for learning to use UI Toolkit, and for creating and debugging your interfaces.\n\nUnity intends for UI Toolkit to become the recommended UI system for new UI development projects, but it is still missing some features found in Unity UI (uGUI) and IMGUI.\n\nThe Unity User Interface (Unity UI) package (also called uGUI) is an older, GameObject-based UI system that you can use to develop runtime UI for games and applications. In Unity UI, you use components and the Game view to arrange, position, and style the user interface. It supports advanced rendering and text features.\n\nSee the Unity UI package documentation for the manual and API reference.\n\nImmediate Mode Graphical User Interface (IMGUI) is a code-driven UI Toolkit that uses the function, and scriptsA piece of code that allows you to create your own Components, trigger game events, modify Component properties over time and respond to user input in any way you like. More info\n\nSee in Glossary that implement it, to draw and manage user interfaces. You can use IMGUI to create custom InspectorsA Unity window that displays information about the currently selected GameObject, asset or project settings, allowing you to inspect and edit the values. More info\n\nSee in Glossary for script components, extensions for the Unity Editor, and in-game debugging displays. It is not recommended for building runtime UI.\n\nUnity intends for UI Toolkit to become the recommended UI system for new UI development projects, but it is still missing some features found in Unity UI (uGUI) and IMGUI. These older systems are better in certain use cases, and are required to support legacy projects.\n\nYour choice of UI system for a given project depends on the kind of UI you plan to develop, and the features you need support for.\n\nFor a comparison of the available UI systems, see the Comparison of UI systems in Unity."
    },
    {
        "link": "https://discussions.unity.com/t/tutorial-create-an-in-game-inventory-ui-with-ui-toolkit/827339",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/76471255/how-do-i-add-a-game-over-screen-to-my-unity-game",
        "document": "Create a canvas in the editor containing the \"Game Over\" text and button and hide it initially. Then from your Score script, use the UnityEngine.UI namespace and create an instance of the canvas by declaring a [Serializefield] Canvas variable and dragging the canvas object from the hierarchy in the editor. Write a line to set the visibility of the GameOver canvas to true in the loss condition before the restarting Coroutine.\n\nIt is preferable to stop the ability of the user to move the character or interact with the game while the \"Game Over\" canvas is active, thus I recommend sending a message to the interaction script calling a function that stops that. This can be done by having a boolean that is true by default as a condition for interaction and having a function to set it to true or false.\n\nThis way I believe there would be no need for a GameManager script."
    },
    {
        "link": "https://medium.com/@Brian_David/unity-ui-implementing-a-dynamic-scoring-system-for-games-54c95ecaa2f2",
        "document": "Creating a dynamic user interface (UI) in Unity improves the gaming experience by giving players real-time feedback on their performance. One crucial element of any game UI is the scoring system. Setting up a scoring system in Unity using Text, and making sure the UI scales across different devices will all be explained. Learn to create a UI Canvas, manage score updates, and optimize script communication. By the end of reading this article, you’ll have an understanding of how to create a fully functional scoring system that improves your game’s UI.\n\nCreating a User Interface in Unity is extremely easy. It is possible to develop a User Interface in one day. Elements of the UI include a main menu, health bar, energy/stamina bar, mini-map, ammo count, score, objectives/missions, inventory.\n\nRight now, to create a User interface that keeps track of the score based on how many enemies have been destroyed, several things need to be done.\n\nRight-click in the Hierarchy View and within the dialog box, select UI and select Text.\n\nLook back into the Hierarchy View, a game object named Canvas and a child game object called Text have now been created. The Canvas contains everything that makes up the User Interface. The text Element can be moved to any position within the Canvas. There is also a third game object that has been created named Event System. The Event System allows the User to hover over buttons and slider menus in order to interact with the User Interface.\n• Brighten the color of the text by going to the Inspector underneath the text property Color and we can adjust it.\n• Next, set the font size to 20.\n\nNext, position it in the top right corner within the User Interface. \n\nWhen positioning UI Elements, Anchors specify the location in the UI that is possible to Anchor the UI text to. Within the Inspector, the component Rect Transform provides Anchor Presets. Click on the square and multiple options appear. Select the “top right” and then in the position X, Y and Z set to . Now, it will be snapped to the top corner. Next, drag the Text box to the desired position. Adjust the width or height. The Text box will always stay anchored to the top right corner.\n\nWhen I shrink down my screen, the position of the text remains fixed but the scale of the font does not and scale must change appropriately according to the device the application is being used on. The text’s font size must also scale to the screen size. Any application that will be deployed across platforms and on different screen devices needs to communicate with the Canvas to scale text based on the screen size and not maintain a constant pixel size. To do this,\n• Click on the game object Canvas in the Hierarchy View. Within the Canvas component the Render mode is set to, Screen Space overlay, That means that the UI is always going to be over the main camera.\n• In the Canvas Scaler, the UI scale mode is set to Constant Pixel Size. Change this option to “Scale With Screen Size”.\n\nThat is going to keep the text proportionate to whatever screen resolution we put the application on. Always use “Scale With Screen Size” when creating Canvases.\n\nSelect game object Canvas. Change the Score Text where it says “New Text” let’s change it to be “Score:” and then display a score value. This will be updated constantly through the game.\n\nNext, create a UI Manager (Script) to create a behavior that will interact based on the user experience.\n\nSimilar to the Spawn Manager, the UI Manager could be an empty game object. It is essentially a (Script) attached to a game object with behaviors, i.e., methods, that update the UI when events occur during game play.\n\nThere are 2 options to create a UI Manager. Option 1: Attach the Script to an Empty game object. Option 2: Attach the Script to the Canvas.\n\nI will choose Option 2: Attach the Script to the Canvas.\n• Right-click on the Scripts folder, Create, C# (Script).\n• With the game object Canvas selected in the Hierarchy View, drag the UIManager (Script) into the Inspector and add it as a component to the Canvas.\n• Left-click on the (Script) to open up Visual Studio.\n\nA player’s score is an integer data type. Score belongs to the Player.\n• Within the Player (Script) type then the variable . The variable is going to keep track of each time an Enemy is destroyed.\n• Within the Enemy (Script) and find the method , where , above where the Enemy destroys itself, write a pseudocode statement, .\n\nOnce again, Script Communication is required between the Enemy and the Player but instead of directly accessing the variable within the Player (Script), it’s best practice for us to create a custom method for the Enemy (Script) to communicate with the Player (Script).\n• Within the Player (Script) write out the pseudocode statement\n\nAfter communicating to the Player add integer of 10 needs to be added to the , the Player now needs to communicate to the UI manager to do exactly that.\n• Write in pseudocode // communicate with UI to update the score.\n• Now go into the UI manager (Script).\n\nTo access the score we’re going to need to access the text component. As was done in previous tutorials we can call that component, i.e., reference data type, Text and then after that we need to assign the text component to a variable.\n\nWhen working with UI in Unity we need access to the code library. At the top of our (Script),:\n• At the top of the class, write out the pseudocode reference data type .\n• Within the statement write pseudocode, so that we can cache it and use it later.\n\nWithin the top of our class, where we create the reference data, type ,\n\nWithin the UI manager there is now a reference to the . Drag the game object Score Text into the empty slot.\n\nNow there’s a reference to the game object Score Text. With the reference set, in the UI manager (Script) within the method type, .\n\nGo back to the Unity editor. Run the game. When it starts the score is now set to the integer that is set within the UI manager (Script).\n\nThe Player (Script) must communicate to the UI manager and it’s method to every time an Enemy is Destroyed.\n• Name the new custom method public void\n• Within the code block type, to add 10 points in the variable.\n\nUsing the is an expensive operation when used frequently. Try and cache it within . If we shoot 50 enemies at once the reference variable and get component will be called 50 times at once. When we Instantiate an Enemy the best option is to give it a reference to the Player.\n\nWithin the Enemy (Script) at the top of the class, type, and then within type\n\nNow it will only be called one time and it will be cached so it can also be used freely throughout the program versus every time the Laser hits the Enemy.\n\nTo use it, check if the Player is alive using a if statement. , which means it’s still exists, then access the method. Now, it should automatically add 10 to our score.\n\nIf we wanted to randomize the value based on the Enemy, it can’t be done because the integer has been hard coded in the number of points as points. The answer to this problem is to modify the custom method so that it can be more dynamic in expressing the events during gameplay.\n\nThe Enemy could decide how many points the Player gets and make it a random value between 5 and 10. If the Enemy is going to call the method in the Player (Script), add the parameter and the score will be updated based on how many points the Enemy sends through. Within the Enemy (Script) where the method is called we need to define a parameter and pass in how many points. Whatever number of points we pass in it will be stored in the Player (Scripts) method within the local variable named . This variable can use the method to create a more dynamic point system.\n\nThe next part is to update the UI. Again, create a reference variable for the component we want and find the component and then cache it. Type .\n\nWithin the method, cache the . to handle any errors and make sure the component is found correctly, create an null check,\n\nNow that there is a reference to the UI manager, call it from the Player (Script).\n\nWithin UIManager (Script), again create, a method (int playerScore) { scoreText.text = _score and then append the Players _score.ToString(); }\n\nGo back into Unity and run the game. Now we have a fully functional score system.\n\nLearning how to create a responsive and dynamic scoring system in Unity consists of setting up a UI Canvas, anchoring and scaling text, developing a UI Manager, and optimizing script communication. This scoring system not only enhances the visual feedback for players but also ensures a game’s UI is adaptable to various screen sizes. I’ll continue exploring and experimenting with Unity’s powerful UI tools to create more immersive and engaging game interfaces. If you have found any of this information helpful, clap, follow, and/or subscribe!"
    },
    {
        "link": "https://docs.unity3d.com/6000.0/Documentation/Manual/UIE-Runtime-Panel-Settings.html",
        "document": "The following tables describe the Panel Settings asset properties:\n\nApply a default TSS file to every UI \n\n (User Interface) Allows a user to interact with your application. Unity currently supports three UI systems. More info Document that the panel renders. Set the UITK Text Settings asset for this panel. If this asset isn’t set, UI Toolkit automatically creates one with the default settings. Set the render texture \n\n A special type of Texture that is created and updated at runtime. To use them, first create a new Render Texture and designate one of your Cameras to render into it. Then you can use the Render Texture in a Material just like a regular Texture. More info for the panel.\n\n\n\nFor a 3D game, display UI on 3D geometry in the scene. Set the display for the panel. Only set this if the target texture isn’t set, as the target texture takes precedence over the target display. Set the order that the UI System draws panels in if the Scene \n\n A Scene contains the environments and menus of your game. Think of each unique Scene file as a unique level. In each Scene, you place your environments, obstacles, and decorations, essentially designing and building your game in pieces. More info uses more than one panel. Panels with higher Sort Order values are drawn on top of panels with lower values. Set how the panel’s UI scales when the screen size changes. Display different properties depending on the Scale Mode setting. Specify the settings that the dynamic atlas system uses. This property has the following options:\n• Min Atlas Size: Set the minimum size (width/height) of the atlas texture, in pixels.\n• Max Atlas Size: Set the maximum size (width/height) of the atlas texture, in pixels.\n• Max Sub Texture Size: Set the maximum size (width/height) of a texture that can be added to the atlas.\n• Active Filters: Set the filters that the dynamic atlas system uses to exclude textures from the texture atlas. Set how the panel clears before rendering. Choose from the following options:\n• Clear Color: Set whether the panel clears the color buffer before rendering.\n• Clear Color Value: Set the color that the panel uses to clear the color buffer.\n• Clear Depth Stencil: Set whether the panel clears the depth stencil before rendering.\n• Buffer Management: Set how the panel manages its buffers.\n• Vertex budget: Set the approximate number of vertices the panel uses. This helps initialize vertex buffers with the right size which can reduce draw calls. A value of uses the default value for UI rendering.\n\nThe following tables describe the parameters for each scale mode:\n\nSet elements to stay the same size, in pixelsThe smallest unit in a computer image. Pixel size depends on your screen resolution. Pixel lighting is calculated at every screen pixel. More info\n\nSee in Glossary, regardless of screen size.\n\nSet elements stay the same physical size regardless of screen size and resolution.|\n\nSet elements to grow or shrink depending on the screen size.\n\nYou can apply more than one filter at a time. The following table describes each active filter.\n• FAQ for input and event systems with UI Toolkit"
    }
]