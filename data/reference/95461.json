[
    {
        "link": "https://pytube.io/en/latest/user/playlist.html",
        "document": "This guide will walk you through the basics of working with pytube Playlists.\n\nUsing pytube to interact with playlists is very simple. Begin by importing the Playlist class:\n\nNow let’s create a playlist object. You can do this by initializing the object with a playlist URL:\n\nOr you can create one from a video link in a playlist:\n\nNow, we have a object called that we can do some work with."
    },
    {
        "link": "https://pytube.io",
        "document": "pytube is a lightweight, Pythonic, dependency-free, library (and command-line utility) for downloading YouTube Videos."
    },
    {
        "link": "https://github.com/pytube/pytube",
        "document": "Have ideas for how pytube can be improved? Feel free to open an issue or a pull request!\n\npytube is a genuine, lightweight, dependency-free Python library (and command-line utility) for downloading YouTube videos.\n\nDetailed documentation about the usage of the library can be found at pytube.io. This is recommended for most cases. If you want to hastily download a single video, the quick start guide below might be what you're looking for.\n\nYouTube is the most popular video-sharing platform in the world and as a hacker, you may encounter a situation where you want to script something to download videos. For this, I present to you: pytube.\n\npytube is a lightweight library written in Python. It has no third-party dependencies and aims to be highly reliable.\n\npytube also makes pipelining easy, allowing you to specify callback functions for different download events, such as or .\n\nFurthermore, pytube includes a command-line utility, allowing you to download videos right from the terminal.\n\nThis guide covers the most basic usage of the library. For more detailed information, please refer to pytube.io.\n\nPytube requires an installation of Python 3.6 or greater, as well as pip. (Pip is typically bundled with Python installations.)\n\nTo install from PyPI with pip:\n\nSometimes, the PyPI release becomes slightly outdated. To install from the source with pip:\n\nTo download a video using the library in a script, you'll need to import the YouTube class from the library and pass an argument of the video URL. From there, you can access the streams and download them.\n\nUsing the CLI is remarkably straightforward as well. To download a video at the highest progressive quality, you can use the following command:\n\nYou can also do the same for a playlist:"
    },
    {
        "link": "https://stackoverflow.com/questions/54710982/using-pytube-to-download-playlist-from-youtube",
        "document": "I am looking to download a YouTube playlist using the PyTube library. Currently, I am able to download a single video at a time. I cannot download more than one video at once.\n\nCurrently, my implimentation is\n\nThis results in the following output\n\nAnd the YouTube file is downloaded. When I try this with a playlist link (An example) only the first video is downloaded. There is no error outputted.\n\nI would like to be able to download an entire playlist without re-prompting the user."
    },
    {
        "link": "https://pypi.org/project/pytube",
        "document": "A required part of this site couldn’t load. This may be due to a browser extension, network issues, or browser settings. Please check your connection, disable any ad blockers, or try using a different browser."
    },
    {
        "link": "https://pytube.io/en/latest/user/streams.html",
        "document": "The next section will explore the various options available for working with media streams, but before we can dive in, we need to review a new-ish streaming technique adopted by YouTube. It assumes that you have already created a YouTube object in your code called “yt”. Begin by running the following to list all streams: You may notice that some streams listed have both a video codec and audio codec, while others have just video or just audio, this is a result of YouTube supporting a streaming technique called Dynamic Adaptive Streaming over HTTP (DASH). In the context of pytube, the implications are for the highest quality streams; you now need to download both the audio and video tracks and then post-process them with software like FFmpeg to merge them. The legacy streams that contain the audio and video in a single file (referred to as “progressive download”) are still available, but only for resolutions 720p and below.\n\nPytube has built-in functionality to filter the streams available in a YouTube object with the .filter() method. You can pass it a number of different keyword arguments, so let’s review some of the different options you’re most likely to use. For a complete list of available properties to filter on, you can view the API documentation here: . As mentioned before, progressive streams have the video and audio in a single file, but typically do not provide the highest quality media; meanwhile, adaptive streams split the video and audio tracks but can provide much higher quality. Pytube makes it easy to filter based on the type of stream that you’re interested. For example, you can filter to only progressive streams with the following: Conversely, if you only want to see the DASH streams (also referred to as “adaptive”) you can do: To query the streams that contain only the audio track: To query only streams in the MP4 format:\n\nAfter you’ve selected the you’re interested, you’re ready to interact with it. At this point, you can query information about the stream, such as its filesize, whether the stream is adaptive, and more. You can also use the download method to save the file: The download method has a number of different useful arguments, which are documented in the API reference here: ."
    },
    {
        "link": "https://stackoverflow.com/questions/49204113/download-audio-from-youtube-using-pytube",
        "document": "I'm using pytube and Python 3.5 to download videos from YouTube but I need to convert the videos to audio with an .avi extension.\n\nHere is my code that I'm currently working with:\n\nIn the code above I can download a video.\n\nMy question is: How can I directly download the audio of a video on YouTube with an extension of ?\n\nCan YouTube Data API help me download exclusively the audio?"
    },
    {
        "link": "https://stackoverflow.com/questions/58778492/pytube-to-download-filtered-video-and-audio-together",
        "document": "I am using the simplest possible code to download bunch of youtube videos:\n\nBut \"strangely\" videos don't have the sound. When I remove filter sound is there, why? I've looked online, but couldn't find any example that shows how to do it, maybe you can help?"
    },
    {
        "link": "https://pytube.io/en/stable/user/streams.html",
        "document": "The next section will explore the various options available for working with media streams, but before we can dive in, we need to review a new-ish streaming technique adopted by YouTube. It assumes that you have already created a YouTube object in your code called “yt”. Begin by running the following to list all streams: You may notice that some streams listed have both a video codec and audio codec, while others have just video or just audio, this is a result of YouTube supporting a streaming technique called Dynamic Adaptive Streaming over HTTP (DASH). In the context of pytube, the implications are for the highest quality streams; you now need to download both the audio and video tracks and then post-process them with software like FFmpeg to merge them. The legacy streams that contain the audio and video in a single file (referred to as “progressive download”) are still available, but only for resolutions 720p and below.\n\nPytube has built-in functionality to filter the streams available in a YouTube object with the .filter() method. You can pass it a number of different keyword arguments, so let’s review some of the different options you’re most likely to use. For a complete list of available properties to filter on, you can view the API documentation here: . As mentioned before, progressive streams have the video and audio in a single file, but typically do not provide the highest quality media; meanwhile, adaptive streams split the video and audio tracks but can provide much higher quality. Pytube makes it easy to filter based on the type of stream that you’re interested. For example, you can filter to only progressive streams with the following: Conversely, if you only want to see the DASH streams (also referred to as “adaptive”) you can do: To query the streams that contain only the audio track: To query only streams in the MP4 format:\n\nAfter you’ve selected the you’re interested, you’re ready to interact with it. At this point, you can query information about the stream, such as its filesize, whether the stream is adaptive, and more. You can also use the download method to save the file: The download method has a number of different useful arguments, which are documented in the API reference here: ."
    },
    {
        "link": "https://geeksforgeeks.org/pytube-python-library-download-youtube-videos",
        "document": "YouTube is very popular video sharing website. Downloading a video from YouTube is a tough job. Downloading the Downloader and get the video using that or go to any other website which fetches the video and saves on your computer. Using Python, this task is very easy. Few lines of code will download the video from YouTube for you. For this, there a python library named as ‘pytube’. pytube is a lightweight, dependency-free Python library which is used for downloading videos from the web.\n\npytube is not the native library. You need to install it before using it. Installation is easy when you have pip. In the Terminal or Command Prompt, type the following command to install pytube.\n\nIn case you don’t have pip, install it as an external library.\n\npytube library makes the video downloading very easy. Create the object of the YouTube module by passing the link as the parameter. Then, get the appropriate extension and resolution of the video. You can set the name of the file as your convenience, in another case original name will be kept. After that, download the file using the download function which has one parameter which is the location where to download the file.\n\nDownloading a file takes some time as a very large amount of data is being downloaded from the web. Depending on the speed of the connection, time taken to execute the program varies. In case you wish to download the number of files, go with the next case.\n\nThe basic task of downloading the multiple videos is same as downloading a single video. We can use a for loop for downloading the video.\n\nIn this, we have used a for loop for downloading multiple files as shown. One can use file handling for keeping the all the links in a file which needs to be downloaded.\n\nUsing file handling, we can open the file which has the group of links in it. Traversing every link of a text file and applying the very basic video downloading program is done here. Here, we have a text file named as “links_file.txt” which has all the links which need to be downloaded.\n• None Make sure you are connected to the internet to download the videos. Otherwise it will raise an error.\n• None Don’t use the set_filename() function in any loop. In this case, only one video will be downloaded.\n• None You can modify the names everytime using another array of names.\n• None Connection Interruption in between will also raise an error and video will not be downloaded in that case."
    }
]