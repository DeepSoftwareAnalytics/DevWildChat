[
    {
        "link": "https://pygame.org/docs/ref/display.html",
        "document": "This module offers control over the pygame display. Pygame has a single display Surface that is either contained in a window or runs full screen. Once you create the display you treat it as a regular Surface. Changes are not immediately visible onscreen; you must choose one of the two flipping functions to update the actual display.\n\nThe origin of the display, where x = 0 and y = 0, is the top left of the screen. Both axes increase positively towards the bottom right of the screen.\n\nThe pygame display can actually be initialized in one of several modes. By default, the display is a basic software driven framebuffer. You can request special modules like automatic scaling or OpenGL support. These are controlled by flags passed to .\n\nPygame can only have a single display active at any time. Creating a new one with will close the previous display. To detect the number and size of attached screens, you can use and then select appropriate window size and display index to pass to .\n\nFor backward compatibility allows precise control over the pixel format or display resolutions. This used to be necessary with old graphics cards and CRT screens, but is usually not needed any more. Use the functions , , and to query detailed information about the display.\n\nOnce the display Surface is created, the functions from this module affect the single existing display. The Surface becomes invalid if the module is uninitialized. If a new display mode is set, the existing Surface will automatically switch to operate on the new display.\n\nWhen the display mode is set, several events are placed on the pygame event queue. is sent when the user has requested the program to shut down. The window will receive events as the display gains and loses input focus. If the display is set with the flag, events will be sent when the user adjusts the window dimensions. Hardware displays that draw direct to the screen will get events when portions of the window must be redrawn.\n\nA new windowevent API was introduced in pygame 2.0.1. Check event module docs for more information on that\n\nSome display environments have an option for automatically stretching all windows. When this option is enabled, this automatic stretching distorts the appearance of the pygame window. In the pygame examples directory, there is example code (prevent_display_stretching.py) which shows how to disable this automatic stretching of the pygame display on Microsoft Windows (Vista or newer required).\n\nThis function will create a display Surface. The arguments passed in are requests for a display type. The actual created display will be the best possible match supported by the system. Note that calling this function implicitly initializes , if it was not initialized before. The size argument is a pair of numbers representing the width and height. The flags argument is a collection of additional options. The depth argument represents the number of bits to use for color. The Surface that gets returned can be drawn to like a regular Surface but changes will eventually be seen on the monitor. If no size is passed or is set to and pygame uses version 1.2.10 or above, the created Surface will have the same size as the current screen resolution. If only the width or height are set to , the Surface will have the same width or height as the screen resolution. Using a version prior to 1.2.10 will raise an exception. It is usually best to not pass the depth argument. It will default to the best and fastest color depth for the system. If your game requires a specific color format you can control the depth with this argument. Pygame will emulate an unavailable color depth which can be slow. When requesting fullscreen display modes, sometimes an exact match for the requested size cannot be made. In these situations pygame will select the closest compatible match. The returned surface will still always match the requested size. On high resolution displays(4k, 1080p) and tiny graphics games (640x480) show up very small so that they are unplayable. SCALED scales up the window for you. The game thinks it's a 640x480 window, but really it can be bigger. Mouse events are scaled for you, so your game doesn't need to do it. Note that SCALED is considered an experimental API and may change in future releases. The flags argument controls which type of display you want. There are several to choose from, and you can even combine multiple types using the bitwise or operator, (the pipe \"|\" character). Here are the display flags you will want to choose from: New in pygame 2.0.0: , and By setting the parameter to , it is possible to get a display with vertical sync, but you are not guaranteed to get one. The request only works at all for calls to with the or flags set, and is still not guaranteed even with one of those set. What you get depends on the hardware and driver configuration of the system pygame is running on. Here is an example usage of a call to that may give you a display with vsync: Vsync behaviour is considered experimental, and may change in future releases. The display index means the default display is used. If no display index argument is provided, the default display can be overridden with an environment variable. Changed in pygame 2.1.3: pygame now ensures that subsequent calls to this function clears the window to black. On older versions, this was an implementation detail on the major platforms this function was tested with."
    },
    {
        "link": "https://geeksforgeeks.org/pygame-event-handling",
        "document": "An event is an action that is performed by the user in order to get the desired result. For instance, if a user clicks a button then it is known as a click event. Now, all the events that are performed by the user are inserted into a queue known as an event queue. Since it is a queue, it follows the First In First Out rule i.e. element inserted first will come out first. In this case, when an event is created it is added to the back of the queue and when the event is processed then it comes out from the front. Every element in this queue is associated with an attribute which is nothing but an integer that represents what type of event it is. Let us learn a few important attributes of the common event types.\n\nOwing to the fact that you have understood what an event in pygame is now let us dive deep into this topic. It is essential to know that the processing of an event must be done within the main function. This is because if in case if it is done, then there is a chance of having an input lag which can result in a poor user experience. The processing is done using pygame.event.get(). This is a function that will return the list of events that can be processed one after another.\n\nAs mentioned above, an event is an action conducted by the user. So let us wonder, what actions can be performed on the keyboard? The simple answer is either pressing the key or releasing it. Pressing the key is known as KEYDOWN and releasing it is known as KEYUP. The attribute associated with these events is known as the key of type integer. Its use is to represent the key of the keyboard. The common keys are represented by a pre-defined integer constant which is a capital K. This K is followed by an underscore and then the name of the key is written. For example K_s, K_F7.\n\nThe fact of the matter is that capital letters do not have an integer constant. The solution to this problem is something known as a modifier also known as a mod which is the modifier such as for shift, alt, ctrl, etc. that are being pressed simultaneously as the key. The integer value of mod is stored in something known as KMOD_ which is followed by the name of the key. For example KMOD_RSHIFT, KMOD_CTRL, etc. Let us revise the concepts that we have learned in the keyboard event topic with the help of a small code.\n\nLet us now understand the different types of mouse events. The first two are MOUSEBUTTONDOWN and MOUSEBUTTONUP which are similar to KEYDOWN and KEYUP except for the fact that here we are using a mouse. In addition to them, there is another mouse event known as MOUSEMOTION. Let us understand all 3 mouse events in detail.\n\ni) MOUSEBUTTONDOWN: The MOUSEBUTTONDOWN event occurs when the user presses the mouse button. It has a couple of attributes which are as follows :\n• button: It is an integer that represents the button that has been pressed. The left button of the mouse is represented by 1, for mouse-wheel the integer is 2, and integer 3 is when the right button of the mouse is pressed.\n• pos: It is the absolute position of the mouse (x, y) when the user presses the mouse button.\n\nii) MOUSEBUTTONUP: The MOUSEBUTTONUP event occurs when the user releases the mouse button. It has the same button and pos attributes that the MOUSEBUTTONDOWN has which have been mentioned above.\n\niii) MOUSEMOTION: This event occurs when the user moves his mouse in the display window. It has the attributes buttons, pos, and rel.\n• buttons: It is a tuple that represents whether the mouse buttons (left, mouse-wheel, right) are pressed or not.\n• pos: It is the absolute position (x, y) of the cursor in pixels.\n• rel: It represents the relative position to the previous position (rel_x, rel_y) in pixels.\n\nLet us revise the values for every mouse button attribute with the help of the following table:\n\nLet us revise the concepts that we have learned in the mouse event topic with the help of a small code.\n\nLet us now have a look at a couple of pygame programs related to event handling.\n\nThe following program will check whether we have pressed the left key or the right key and display output accordingly.\n\nThe following program will check whether we are moving the mouse or pressing the mouse button or releasing it and display output accordingly."
    },
    {
        "link": "https://reddit.com/r/pygame/comments/rhv2zy/how_does_one_handle_a_large_number_of_things_that",
        "document": "Is there a way to do this without just having a big long list of if else statements under"
    },
    {
        "link": "https://stackoverflow.com/questions/58794093/why-does-pygame-display-update-not-work-if-an-input-is-directly-followed-after",
        "document": "Call after and before :\n\nAt some OS, respectively doesn't update the display directly. It just invalidates the display and notifies the system to update the display. Actually the display is updated when the events are handled.\n\n The events are either handled by either or (Which is used in event loops, but would do the job as well). Note this instruction do not only handle the IO or user events, they handle a bunch of internal events too, which are required to run run the system.\n\nNot all implementations on all OS behave the same. At some OS it is sufficient to call , that is the reason that not everyone at every system can reproduce the issue. But in this case it is never wrong to call ."
    },
    {
        "link": "https://pygame.org/docs/tut/newbieguide.html",
        "document": "The most important thing is to feel confident using python. Learning something as potentially complicated as graphics programming will be a real chore if you're also unfamiliar with the language you're using. Write a few sizable non-graphical programs in python -- parse some text files, write a guessing game or a journal-entry program or something. Get comfortable with string and list manipulation -- know how to split, slice and combine strings and lists. Know how works -- try writing a program that is spread across several source files. Write your own functions, and practice manipulating numbers and characters; know how to convert between the two. Get to the point where the syntax for using lists and dictionaries is second-nature -- you don't want to have to run to the documentation every time you need to slice a list or sort a set of keys. Get comfortable using file paths -- this will come in handy later when you start loading assets and creating save files. Resist the temptation to ask for direct help online when you run into trouble. Instead, fire up the interpreter and play with the problem for a few hours, or use print statements and debugging tools to find out what's going wrong in your code. Get into the habit of looking things up in the official Python documentation, and Googling error messages to figure out what they mean.\n\nPete Shinners' wrapper may have cool alpha effects and fast blitting speeds, but I have to admit my favorite part of pygame is the lowly class. A rect is simply a rectangle -- defined only by the position of its top left corner, its width, and its height. Many pygame functions take rects as arguments, and they also take 'rectstyles', a sequence that has the same values as a rect. So if I need a rectangle that defines the area between 10, 20 and 40, 50, I can do any of the following: For example, suppose I'd like to get a list of all the sprites that contain a point (x, y) -- maybe the player clicked there, or maybe that's the current location of a bullet. It's simple if each sprite has a .rect member -- I just do: Rects have no other relation to surfaces or graphics functions, other than the fact that you can use them as arguments. You can also use them in places that have nothing to do with graphics, but still need to be defined as rectangles. Every project I discover a few new places to use rects where I never thought I'd need them.\n\nThe second method uses the SDL event queue. This queue is a list of events -- events are added to the list as they're detected, and they're deleted from the queue as they're read off. In the queue system, however, each keypress arrives in the queue as a completely separate event, so you'd need to remember that the key was down, and hadn't come up yet, while checking for the key. A little more complicated. The lesson is: choose the system that meets your requirements. If you don't have much going on in your loop -- say you're just sitting in a loop, waiting for input, use or another state function; the latency will be lower. On the other hand, if every keypress is crucial, but latency isn't as important -- say your user is typing something in an editbox, use the event queue. Some key presses may be slightly late, but at least you'll get them all."
    },
    {
        "link": "https://developer.spotify.com/documentation/web-api",
        "document": "This is where the magic begins! The following steps will help you to get started with your journey towards creating some awesome music apps using the API:\n• Log into the dashboard using your Spotify account.\n• Create an app and select \"Web API\" for the question asking which APIs are you planning to use. Once you have created your app, you will have access to the app credentials. These will be required for API authorization to obtain an access token.\n• Use the access token in your API requests.\n\nYou can follow the Getting started tutorial to learn how to make your first Web API call.\n\nThe documentation is organized as follows:\n• Tutorials, which serve as an introduction to important topics when using Web API\n• How-Tos, step-by-step guides that cover practical tasks or use cases\n\nThe Spotify Web API provides a wide range of functionality for developers, including:\n• Retrieve data from your favourite artist, album or show.\n• Control and interact with the playback, play and resume, seek to a position or retrieve your queue.\n• Manage your personal library, by creating a new playlist and adding your favourite tracks to it.\n\nAnd much more! You can find a complete list of available endpoints in the API Reference.\n\nWe've provided a step-by-step how-to that will guide you through the creation of a web app to display your Spotify profile data.\n\nIf you have any questions or run into any issues while using the Spotify Web API, you can find help in the Spotify Developer Community. Here, you can connect and get help from other developers.\n\nBy using Spotify Web API, you accept the Spotify Developer Terms of Service."
    },
    {
        "link": "https://developer.spotify.com/documentation/web-api/tutorials/getting-started",
        "document": "This tutorial will help you to make your first Web API call by retriving an artist's metadata. The steps to do so are the following:\n• Create an app, if you haven't done so.\n• Use the access token to request the artist data.\n\nHere we go, let's rock & roll!\n• This tutorial assumes you have a Spotify account (free or premium).\n• We will use to make API calls. You can install it from here our using the package manager of your choice.\n\nLogin to the Spotify Developer Dashboard. If necessary, read the latest Developer Terms of Service to complete your account set up.\n\nAn app provides the Client ID and Client Secret needed to request an access token by implementing any of the authorization flows.\n\nTo create an app, go to your Dashboard, click on the Create an app button and enter the following information:\n• App Description: This is my first Spotify app\n• Redirect URI: You won't need this parameter in this example, so let's use .\n\nFinally, check the Developer Terms of Service checkbox and tap on the Create button.\n\nThe access token is a string which contains the credentials and permissions that can be used to access a given resource (e.g artists, albums or tracks) or user's data (e.g your profile or your playlists).\n\nIn order to request the access token you need to get your Client_ID and Client Secret:\n• Go to the Dashboard\n• Click on the name of the app you have just created ( )\n\nThe Client ID can be found here. The Client Secret can be found behind the View client secret link.\n\nFor this example, we will use the Get Artist endpoint to request information about an artist. According to the API Reference, the endpoint needs the Spotify ID of the artist.\n\nAn easy way to get the Spotify ID of an artist is using the Spotify Desktop App:\n• Click on the three dots icon from the artist profile\n• Select Share > Copy link to artist. The Spotify ID is the value that comes right after the URI.\n\nIf everything goes well, the API will return the following JSON response:\n\nCongratulations! You made your first API call to the Spotify Web API.\n• The Spotify Web API provides different endpoints depending on the data we want to access. The API calls must include the header along with a valid access token.\n• This tutorial makes use of the client credentials grant type to retrieve the access token. That works fine in scenarios where you control the API call to Spotify, for example where your backend is connecting to the Web API. It will not work in cases where your app will connect on behalf of a specific user, for example when getting private playlist or profile data.\n• The tutorial used the Spotify Desktop App to retrieve the Spotify ID of the artist. The ID can also be retrieved using the Search endpoint. An interesting exercise would be to extend the example with a new API call to the endpoint. Do you accept the challenge?\n• The authorization guide provides detailed information about which authorization flow suits you best. Make sure you read it first!\n• You can continue your journey by reading the API calls guide which describes in detail the Web API request and responses.\n• Finally, if you are looking for a more practical documentation, you can follow the Display your Spotify Profile Data in a Web App how-to which implements a step-by-step web application using authorization code flow to request the access token."
    },
    {
        "link": "https://medium.com/@anusha.kuppahally/spotify-api-project-using-python-5fbcab921f5e",
        "document": "Spotify’s API is rich with data, allowing for public access to a variety of information related to any song or artist on the platform. Other features like Spotify’s recommendation algorithm and search engine can also be accessed. This can be easily done through Spotipy, a Python package that makes it easy to extract data.\n\nI wanted to get familiar with data extraction from an API and decided to use Spotify’s API because of its large range of available data. For my project, I wanted to create an application that allows an end user to input an artist of their choice and receive an email report that contains information about the artist, recommendations, and data analysis related to the artist’s discography.\n\nI thought this could help users learn more about artists they listen to and access even more music they might like. Check out my code here: https://github.com/anushakuppahally/spotify-api-project.\n\nTo get started with my project, I first created a Spotify for Developers account to get access to a client ID and client secret key. These are both needed to access the Spotify API. Once I logged in with my Spotify credentials, I navigated to the dashboard and then clicked on ‘Create an App’. Then, it’s possible to access the necessary credentials.\n\nI created a Sendgrid account to send the email reports. Then, navigating to settings, I clicked on ‘API Keys’ and then ‘Create API Key’. I configured the account’s email address and obtained an API key to use.\n\nI placed the credentials for the Spotify API and Sendgrid in a .env file, and I created a .gitignore file for security as I was using Github for version control.\n\nAfter this, I decided to set up my requirements.txt file with the libraries I would need for my project, related to data querying, analysis, and visualization.\n\nBefore starting on my actual app, I wanted to finalize my set up. I integrated my app with Code Climate to assess my code quality. Then, I created a .codeclimate.yml file in my root directory to help provide automated code quality checks.\n\nThen, for organization, I created an app folder and a tests folder in my root directory, where the code for my app and its associated tests would be located in the appropriate folder. I created .conftest.py in my root directory to help my tests find the app code.\n\nI created a python-app.yml file under .github/workflows to help with continuous integration, or automated testing whenever I pushed changes.\n\nFinally, I created a README.md file to explain how my project works and a LICENSE.md file.\n\nAfter setting up, I imported my credentials to access the Spotify API.\n\nI decided to set up my functions under one class for simplicity. I structured my app to allow for user input for the artist, so once the user inputted the artist, I used Spotify’s search engine to find the artist associated with the input. I then asked the user to verify that the result of the search was correct.\n\nOnce verified, the functions used the artist’s URI, or Uniform Resource Identifier, to return the requested results. I used the artist’s URI to find the artist’s albums, top 5 tracks, song recommendations, and artist recommendations.\n\nThen, I used the artist’s URI to find the track IDs for each song under each album by that artist. I then used a separate function to loop through each album and create a dataframe of the tracks and their characteristics from the Spotify API, such as acousticness, length, popularity, etc.\n\nFrom there, I wanted to do some basic data analysis. I wanted to find the variables most and least correlated with popularity for an artist and create scatterplots based on those variables. This is an example of what the scatterplots look like, with a case where loudness was most correlated and acousticness was least correlated with popularity."
    },
    {
        "link": "https://developer.spotify.com/documentation/web-api/reference/get-an-artist",
        "document": "Please keep in mind that metadata, cover art and artist images must be accompanied by a link back to the applicable artist, album, track, or playlist on the Spotify Service. You must also attribute content from Spotify with the logo."
    },
    {
        "link": "https://spotipy.readthedocs.io",
        "document": "All methods require user authorization. You will need to register your app at My Dashboard to get the credentials necessary to make authorized calls (a client id and client secret).\n• None Authorization Code flow This method is suitable for long-running applications which the user logs into once. It provides an access token that can be refreshed. Requires you to add a redirect URI to your application at My Dashboard. See Redirect URI for more details.\n• None Client Credentials flow This method makes it possible to authenticate your requests to the Spotify Web API and to obtain a higher rate limit than you would with the Authorization Code flow. For guidance on setting your app credentials watch this video tutorial or follow the Spotipy Tutorial for Beginners. For a longer tutorial with examples included, refer to this video playlist.\n\nThis flow is suitable for long-running applications in which the user grants permission only once. It provides an access token that can be refreshed. Since the token exchange involves sending your secret key, perform this on a secure location, like a backend service, and not from a client such as a browser or from a mobile app. To support the Client Authorization Code Flow Spotipy provides a class SpotifyOAuth that can be used to authenticate requests like so: or if you are reluctant to immortalize your app credentials in your source code, you can set environment variables like so (use instead of on Windows): See Using Scopes for information about scopes. The Authorization Code Flow needs you to add a redirect URI to your application at My Dashboard (navigate to your application and then [Edit Settings]). The argument or environment variable must match the redirect URI added to your application in your Dashboard. The redirect URI can be any valid URI (it does not need to be accessible) such as or . If you choose an -scheme URL, and it’s for , AND it specifies a port, then spotipy will instantiate a server on the indicated response to receive the access token from the response at the end of the oauth flow [see the code](https://github.com/plamere/spotipy/blob/master/spotipy/oauth2.py#L483-L490).\n\nThe Client Credentials flow is used in server-to-server authentication. Only endpoints that do not access user information can be accessed. The advantage here in comparison with requests to the Web API made without an access token, is that a higher rate limit is applied. As opposed to the Authorization Code Flow, you will not need to set , which means you will never be redirected to the sign in page in your browser: To support the Client Credentials Flow Spotipy provides a class SpotifyClientCredentials that can be used to authenticate requests like so:\n\nTokens are refreshed automatically and stored by default in the project main folder. As this might not suit everyone’s needs, spotipy provides a way to create customized cache handlers. The custom cache handler would need to be a class that inherits from the base cache handler . The default cache handler is a good example. An instance of that new class can then be passed as a parameter when creating , or . The following handlers are available and defined in the URL above. Feel free to contribute new cache handlers to the repo.\n\nHere is an example of using Spotipy to list the names of all the albums released by the artist ‘Birdy’: Here’s another example showing how to get 30 second samples and cover art for the top 10 tracks for Led Zeppelin: Finally, here’s an example that will get the URL for an artist image given the artist’s name: There are many more examples of how to use Spotipy in the spotipy-examples repository on GitHub.\n\nA simple and thin Python library for the Spotify Web API\n• None requests_session – A Requests session object or a truthy value to create one. A falsy value disables sessions. It should generally be a good idea to keep sessions enabled for performance reasons (connection pooling).\n• None requests_timeout – Tell Requests to stop waiting for a response after a given number of seconds\n• None status_forcelist – Tell requests what type of status codes retries should occur on\n• None retries – Total number of retries to allow\n• None status_retries – Number of times to retry on bad status codes\n• None backoff_factor – A backoff factor to apply between attempts after the second try See urllib3 https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html\n• None language – The language parameter advertises what language the user prefers to see. See ISO-639-1 language code: https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes Adds a song to the end of a user’s queue If device A is currently playing music, and you try to add to the queue and pass in the id for device B, you will get a ‘Player command failed: Restriction violated’ error I therefore recommend leaving device_id as None so that the active device is targeted\n• None device_id – the id of a Spotify device. If None, then the active device is used. returns a single album given the album’s ID, URIs or URL Get Spotify catalog information about an album’s tracks\n• None limit - the number of items to return\n• None offset - the index of the first item to return returns a list of albums given the album IDs, URIs, or URLs returns a single artist given the artist’s ID, URI or URL Get Spotify catalog information about an artist’s albums\n• None include_groups - the types of items to return. One or more of ‘album’, ‘single’, ‘appears_on’, ‘compilation’. If multiple types are desired, pass in a comma separated string; e.g., ‘album,single’.\n• None country - limit the response to one particular country.\n• None limit - the number of albums to return\n• None offset - the index of the first album to return Get Spotify catalog information about artists similar to an identified artist. Similarity is based on analysis of the Spotify community’s listening history. Get Spotify catalog information about an artist’s top 10 tracks by country.\n• None country - limit the response to one particular country. returns a list of artists given the artist IDs, URIs, or URLs Get audio analysis for a track based upon its Spotify ID Parameters: Get audio features for one or multiple tracks based upon their Spotify IDs Parameters: Get the list of markets where Spotify is available. Returns a list of the countries in which Spotify is available, identified by their ISO 3166-1 alpha-2 country code with additional country codes for special territories.\n• None locale - The desired language, consisting of an ISO 639-1 alpha-2 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore.\n• None limit - The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50\n• None offset - The index of the first item to return. Default: 0 (the first object). Use with limit to get the next set of items.\n• None category_id - The Spotify category ID for the category.\n• None locale - The desired language, consisting of an ISO 639-1 alpha-2 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. Get a list of playlists for a specific Spotify category\n• None category_id - The Spotify category ID for the category.\n• None limit - The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50\n• None offset - The index of the first item to return. Default: 0 (the first object). Use with limit to get the next set of items. Get detailed profile information about the current user. An alias for the ‘me’ method. Add the current authenticated user as a follower of a playlist.\n• None playlist_id - the id of the playlist Gets a list of the artists followed by the current authorized user\n• None limit - the number of artists to return\n• None after - the last artist ID retrieved from the previous Check if the current user is following certain artists Check if the current user is following certain users Get information about the current users currently playing track. Get current user playlists without required getting his profile Parameters:\n• None limit - the number of items to return\n• None offset - the index of the first item to return\n• None limit - the number of entities to return\n• None after - unix timestamp in milliseconds. Returns all items after (but not including) this cursor position. Cannot be used if before is specified.\n• None before - unix timestamp in milliseconds. Returns all items before (but not including) this cursor position. Cannot be used if after is specified Gets a list of the albums saved in the current authorized user’s “Your Music” library\n• None limit - the number of albums to return (MAX_LIMIT=50)\n• None offset - the index of the first album to return Add one or more albums to the current user’s “Your Music” library. Parameters: Check if one or more albums is already saved in the current Spotify user’s “Your Music” library. Remove one or more albums from the current user’s “Your Music” library. Gets a list of the episodes saved in the current authorized user’s “Your Music” library\n• None limit - the number of episodes to return\n• None offset - the index of the first episode to return Add one or more episodes to the current user’s “Your Music” library. Check if one or more episodes is already saved in the current Spotify user’s “Your Music” library. Remove one or more episodes from the current user’s “Your Music” library. Gets a list of the shows saved in the current authorized user’s “Your Music” library\n• None limit - the number of shows to return\n• None offset - the index of the first show to return Add one or more albums to the current user’s “Your Music” library. Parameters: Check if one or more shows is already saved in the current Spotify user’s “Your Music” library. Remove one or more shows from the current user’s “Your Music” library. Gets a list of the tracks saved in the current authorized user’s “Your Music” library\n• None limit - the number of tracks to return\n• None offset - the index of the first track to return Add one or more tracks to the current user’s “Your Music” library. Check if one or more tracks is already saved in the current Spotify user’s “Your Music” library. Remove one or more tracks from the current user’s “Your Music” library.\n• None limit - the number of entities to return (max 50)\n• None offset - the index of the first entity to return\n• None time_range - Over what time frame are the affinities computed Valid-values: short_term, medium_term, long_term\n• None limit - the number of entities to return\n• None offset - the index of the first entity to return\n• None time_range - Over what time frame are the affinities computed Valid-values: short_term, medium_term, long_term\n• None playlist_id - the id of the playlist Get a list of user’s available devices. returns a single episode given the episode’s ID, URIs or URL\n• None The episode must be available in the given market. If user-based authorization is in use, the user’s country takes precedence. If neither market nor user country are provided, the content is considered unavailable for the client. returns a list of episodes given the episode IDs, URIs, or URLs\n• None Only episodes available in the given market will be returned. If user-based authorization is in use, the user’s country takes precedence. If neither market nor user country are provided, the content is considered unavailable for the client.\n• None locale - The desired language, consisting of a lowercase ISO 639-1 alpha-2 language code and an uppercase ISO 3166-1 alpha-2 country code, joined by an underscore.\n• None timestamp - A timestamp in ISO 8601 format: yyyy-MM-ddTHH:mm:ss. Use this parameter to specify the user’s local time to get results tailored for that specific date and time in the day\n• None limit - The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50\n• None offset - The index of the first item to return. Default: 0 (the first object). Use with limit to get the next set of items. Get Spotify catalog information for a single audiobook identified by its unique Spotify ID. Parameters: - id - the Spotify ID for the audiobook - market - an ISO 3166-1 alpha-2 country code. Get Spotify catalog information about an audiobook’s chapters. Parameters: - id - the Spotify ID for the audiobook - market - an ISO 3166-1 alpha-2 country code. - limit - the maximum number of items to return - offset - the index of the first item to return Get Spotify catalog information for multiple audiobooks based on their Spotify IDs. Parameters: - ids - a list of Spotify IDs for the audiobooks - market - an ISO 3166-1 alpha-2 country code. Get detailed profile information about the current user. An alias for the ‘current_user’ method. Get a list of new album releases featured in Spotify\n• None limit - The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50\n• None offset - The index of the first item to return. Default: 0 (the first object). Use with limit to get the next set of items. returns the next result given a paged result\n• None playlist - the id of the playlist\n• None market - An ISO 3166-1 alpha-2 country code or the\n• None playlist_id - the id of the playlist\n• None position - the position to add the tracks\n• None playlist_id - the id of the playlist\n• None name - optional name of the playlist Check to see if the given users are following the given playlist\n• None playlist_id - the id of the playlist\n• None user_ids - the ids of the users that you want to check to see if they follow the playlist. Maximum: 5 ids. Get full details of the tracks and episodes of a playlist.\n• None limit - the maximum number of tracks to return\n• None offset - the index of the first track to return Removes all occurrences of the given tracks/episodes from the given playlist\n• None playlist_id - the id of the playlist\n• None items - list of track/episode ids to remove from the playlist Removes all occurrences of the given tracks from the given playlist\n• None playlist_id - the id of the playlist\n• None items - an array of objects containing Spotify URIs of the tracks/episodes to remove with their current positions in the playlist. For example:\n• None playlist_id - the id of the playlist\n• None range_start - the position of the first track to be reordered\n• None range_length - optional the number of tracks to be reordered\n• None insert_before - the position where the tracks should be\n• None playlist_id - the id of the playlist Get full details of the tracks of a playlist.\n• None limit - the maximum number of tracks to return\n• None offset - the index of the first track to return Replace the image used to represent a specific playlist\n• None playlist_id - the id of the playlist Get a list of recommended tracks for one to five seeds. (at least one of , and are needed)\n• None seed_genres - a list of genre names. Available genres for recommendations can be found by calling recommendation_genre_seeds\n• None all results will be playable in this country.\n• None limit - The maximum number of items to return. Default: 20.\n• None attributes listed in the documentation, these values provide filters and targeting on results.\n• None q - the search query (see how to write a query in the\n• None limit - the number of items to return (min = 1, default = 10, max = 50). The limit is applied within each type, not on the total response.\n• None offset - the index of the first item to return\n• None type - the types of items to return. One or more of ‘artist’, ‘album’, ‘track’, ‘playlist’, ‘show’, and ‘episode’. If multiple types are desired, pass in a comma separated string; e.g., ‘track,album,episode’.\n• None market - An ISO 3166-1 alpha-2 country code or the string\n• None q - the search query (see how to write a query in the\n• None limit - the number of items to return (min = 1, default = 10, max = 50). If a search is to be done on multiple markets, then this limit is applied to each market. (e.g. search US, CA, MX each with a limit of 10). If multiple types are specified, this applies to each type.\n• None offset - the index of the first item to return\n• None type - the types of items to return. One or more of ‘artist’, ‘album’, ‘track’, ‘playlist’, ‘show’, or ‘episode’. If multiple types are desired, pass in a comma separated string.\n• None markets - A list of ISO 3166-1 alpha-2 country codes. Search all country markets by default.\n• None total - the total number of results to return across multiple markets and types.\n• None position_ms - position in milliseconds to seek to returns a single show given the show’s ID, URIs or URL\n• None The show must be available in the given market. If user-based authorization is in use, the user’s country takes precedence. If neither market nor user country are provided, the content is considered unavailable for the client.\n• None limit - the number of items to return\n• None offset - the index of the first item to return\n• None Only episodes available in the given market will be returned. If user-based authorization is in use, the user’s country takes precedence. If neither market nor user country are provided, the content is considered unavailable for the client. returns a list of shows given the show IDs, URIs, or URLs\n• None Only shows available in the given market will be returned. If user-based authorization is in use, the user’s country takes precedence. If neither market nor user country are provided, the content is considered unavailable for the client. Provide a to start playback of an album, artist, or playlist. Provide a list to start playback of one or more tracks. Provide as {“position”: <int>} or {“uri”: “<track uri>”} to start playback at a particular offset.\n• None offset - offset into context by index or track\n• None position_ms - (optional) indicates from what position to start playback. Must be a positive number. Passing in a position that is greater than the length of the track will cause the player to start playing the next song. returns a single track given the track’s ID, URI or URL returns a list of tracks given a list of track IDs, URIs, or URLs Transfer playback to another device. Note that the API accepts a list of device ids, but only actually supports one. Follow one or more artists Parameters: Follow one or more users Parameters: This function is no longer in use, please use the recommended function in the warning!\n• None user - the id of the user\n• None playlist_id - the id of the playlist\n• None position - the position to add the episodes This function is no longer in use, please use the recommended function in the warning!\n• None user - the id of the user\n• None playlist_id - the id of the playlist\n• None position - the position to add the tracks This function is no longer in use, please use the recommended function in the warning!\n• None user - the id of the user\n• None playlist_id - the id of the playlist\n• None name - optional name of the playlist\n• None user - the id of the user\n• None name - the name of the playlist\n• None description - the description of the playlist This function is no longer in use, please use the recommended function in the warning! Add the current authenticated user as a follower of a playlist.\n• None playlist_owner_id - the user id of the playlist owner\n• None playlist_id - the id of the playlist This function is no longer in use, please use the recommended function in the warning! Check to see if the given users are following the given playlist\n• None playlist_owner_id - the user id of the playlist owner\n• None playlist_id - the id of the playlist\n• None user_ids - the ids of the users that you want to check to see if they follow the playlist. Maximum: 5 ids. This function is no longer in use, please use the recommended function in the warning! Removes all occurrences of the given tracks from the given playlist\n• None user - the id of the user\n• None playlist_id - the id of the playlist\n• None tracks - the list of track ids to remove from the playlist This function is no longer in use, please use the recommended function in the warning! Removes all occurrences of the given tracks from the given playlist\n• None user - the id of the user\n• None playlist_id - the id of the playlist\n• None tracks - an array of objects containing Spotify URIs of the tracks to remove with their current positions in the playlist. For example: This function is no longer in use, please use the recommended function in the warning!\n• None user - the id of the user\n• None playlist_id - the id of the playlist\n• None range_start - the position of the first track to be reordered\n• None range_length - optional the number of tracks to be reordered\n• None insert_before - the position where the tracks should be This function is no longer in use, please use the recommended function in the warning! Replace all tracks in a playlist for a user\n• None user - the id of the user\n• None playlist_id - the id of the playlist\n• None tracks - the list of track ids to add to the playlist This function is no longer in use, please use the recommended function in the warning!\n• None user - the id of the user\n• None name - the name of the playlist\n• None limit - the number of items to return\n• None offset - the index of the first item to return Unfollow one or more artists Parameters: Unfollow one or more users Parameters:\n\nThe Client Credentials flow is used in server-to-server authentication. Only endpoints that do not access user information can be accessed. This means that endpoints that require authorization scopes cannot be accessed. The advantage, however, of this authorization flow is that it does not require any user interaction You can either provide a client_id and client_secret to the constructor or set SPOTIPY_CLIENT_ID and SPOTIPY_CLIENT_SECRET environment variables\n• None client_id: Must be supplied or set as environment variable\n• None client_secret: Must be supplied or set as environment variable\n• None proxies: Optional, proxy for the requests library to route through\n• None requests_timeout: Optional, tell Requests to stop waiting for a response after\n• None cache_handler: An instance of the class to handle getting and saving cached authorization tokens. Optional, will otherwise use . (takes precedence over and ) If a valid access token is in memory, returns it Else fetches a new token and returns it as a token_info dictionary, otherwise it will be returned as a string. This auth manager enables user and non-user endpoints with only a client secret, redirect uri, and username. The user will need to copy and paste a URI from the browser every hour. The OAuth standard no longer recommends the Implicit Grant Flow for client-side code. Spotify has implemented the OAuth-suggested PKCE extension that removes the need for a client secret in the Authentication Code flow. Use the SpotifyPKCE auth manager instead of SpotifyImplicitGrant. SpotifyPKCE contains all the functionality of SpotifyImplicitGrant, plus automatic response retrieval and refreshable tokens. Only a few replacements need to be made: The security concern in the Implicit Grant flow is that the token is returned in the URL and can be intercepted through the browser. A request with an authorization code and proof of origin could not be easily intercepted without a compromised network.\n• None client_id: Must be supplied or set as environment variable\n• None redirect_uri: Must be supplied or set as environment variable\n• None state: May be supplied, no verification is performed\n• None scope: Optional, either a list of scopes or comma separated string of scopes.\n• None cache_handler: An instance of the class to handle getting and saving cached authorization tokens. May be supplied, will otherwise use . (takes precedence over and )\n• None cache_path: (deprecated) May be supplied, will otherwise be generated\n• None username: (deprecated) May be supplied or set as environment variable Gets Auth Token from cache (preferred) or user interaction\n• None state: May be given, overrides (without changing) self.state Gets a new auth token with user interaction Gets the URL to use to authorize this app Parse the response code in the given response url\n• None client_id: Must be supplied or set as environment variable\n• None client_secret: Must be supplied or set as environment variable\n• None redirect_uri: Must be supplied or set as environment variable\n• None scope: Optional, either a list of scopes or comma separated string of scopes.\n• None cache_path: (deprecated) Optional, will otherwise be generated\n• None proxies: Optional, proxy for the requests library to route through\n• None requests_timeout: Optional, tell Requests to stop waiting for a response after\n• None open_browser: Optional, whether the web browser should be opened to\n• None cache_handler: An instance of the class to handle getting and saving cached authorization tokens. Optional, will otherwise use . (takes precedence over and ) Gets the access token for the app given the code\n• None as a token_info dictionary, otherwise it will be returned as a string. Gets the URL to use to authorize this app Parse the response code in the given response url This auth manager enables user and non-user endpoints with only a client ID, redirect URI, and username. When the app requests an access token for the first time, the user is prompted to authorize the new client app. After authorizing the app, the client app is then given both access and refresh tokens. This is the preferred way of authorizing a mobile/desktop client.\n• None client_id: Must be supplied or set as environment variable\n• None redirect_uri: Must be supplied or set as environment variable\n• None scope: Optional, either a list of scopes or comma separated string of scopes.\n• None cache_path: (deprecated) Optional, will otherwise be generated\n• None proxies: Optional, proxy for the requests library to route through\n• None requests_timeout: Optional, tell Requests to stop waiting for a response after\n• None open_browser: Optional, whether the web browser should be opened to\n• None cache_handler: An instance of the class to handle getting and saving cached authorization tokens. Optional, will otherwise use . (takes precedence over and ) Gets the access token for the app If the code is not given and no cached token is used, an authentication window will be shown to the user to get a new code. Gets the URL to use to authorize this app Parse the response code in the given response url The state sent and state received were different\n\nIf you are a developer with Python experience, and you would like to contribute to Spotipy, please be sure to follow the guidelines listed below: export SPOTIPY_CLIENT_ID=client_id_here export SPOTIPY_CLIENT_SECRET=client_secret_here export SPOTIPY_CLIENT_USERNAME=client_username_here # This is actually an id not spotify display name export SPOTIPY_REDIRECT_URI=http://127.0.0.1:8080 # Make url is set in app you created to get your ID and SECRET To make sure if the import lists are stored correctly::: // Add your changes here and then delete this line\n• None Create github release https://github.com/plamere/spotipy/releases with the changelog content for the version and a short name that describes the main addition\n• None Build the documentation again to ensure it’s on the latest version Don’t forget to add a short description of your change in the CHANGELOG!"
    },
    {
        "link": "https://stackoverflow.com/questions/18139093/base64-authentication-python",
        "document": "I'm following an API and I need to use a Base64 authentication of my User Id and password.\n\nit then shows the example\n\nIt then proceeds to say:\n\nHow do I write this into a Python API request?"
    },
    {
        "link": "https://stackoverflow.com/questions/53622829/python-encode-base64-to-basic-connect-to-an-api",
        "document": "I'm trying to connect to an API and I've to encode64 the username and password. The 'Authorisation' value should look like this: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ\n\nWhen I try to connect I get an error: 'Unauthorized: Bad credentials'. The support says that my credentials are ok, but they are slow to respond to solve my issue.\n\nI suspect the encoding part of the code, but I'm not sure. Could you please take a look at my code and tell me what could be wrong with it?\n\nThe direct link to the section about authentication in the documentation : http://developer.outbrain.com/home-page/amplify-api/documentation/#/reference/authentications/via-api"
    },
    {
        "link": "https://developer.genesys.cloud/authorization/platform-auth/base-64-encoding",
        "document": ""
    },
    {
        "link": "https://yaklin.ca/2021/03/10/base64-encoding-http-basic-auth.html",
        "document": "I have been exploring the Cisco DNA Center REST API as part of studying for the Cisco Certified DevNet Associate certification exam. Today while reading through the official certification guide it talked about how authorization into the API required that your credentials be passed as a base64 encoded string, but it didn’t indicate how to accomplish this.\n\nFor those that aren’t familiar with Cisco’s DevNet Sandboxes, Cisco provides free access to read-only always-on and reservation based sandbox environments. These environments permit a developer access to a wide variety of technologies that Cisco customers deploy, including ACI, ISE, FirePower FMC, Viptela vManage, StealthWatch, Umbrella, Webex Meetings, and many more. The one that I’m currently exploring is the Cisco DNA Center REST API. This article is going to briefly explain base64 encoding and how to use it for authorization with REST API’s, specifically Cisco DNA Center. If you wanted to follow along, open up the Always-On sandbox for Cisco DNA Center AO 2.1.2.5.\n\nThere are quite a few articles out there, but the one that I found on Stack Abuse explained it quite well and simply enough. I encourage you to read the article to gain a better understand. The main highlights on base64:\n• There are 64 characters represented in total (26 Uppercase, 26 Lowercase, 10 numbers, and + and / characters)\n• Important: base64 is not an encryption algorithm as it can be easily reversed, so should not be used for security purposes\n\nI have talked briefly about HTTP Basic Auth in my guide to the Cisco NFVIS API. It is an authentication scheme that includes your username and password in an HTTP ‘Authentication’ header. It is very important that when using Basic Auth that you use HTTPS, as the credentials are not encrypted in the HTTP headers. Security is dependent on HTTPS/TLS.\n\nBase64 encoding for authentication with a REST API will take on a few different forms, depending on the REST API so check the documentation. The Cisco DNA Center REST API documentation indicates that the usernamd and password should be represented as a string that is colon separated before being encoded as base64. In the case of Cisco’s DevNet sandbox for DNA Center, that means the username and password would be:\n\nSo how can you use this to authorize yourself against the DNA Center REST API? See the following steps using Pythons Request module.\n\nFirst lets import the base64 module and convert our username and password into a base64 encoded byte string.\n\nYou can see above that we can create a byte string using the function on our auth_str object. We need to do this because the base64.b64encode() function requires a bytes-like object. We then create an auth_b64 byte string which is now our username and password encoded the way the REST API will require it. If you are using another tool like cURL or Postman to test REST API’s, you can take this string and set it in your HTTP headers. The rest of this article focuses on using it with Pythons Request module.\n\nTo authenticate with the DNA Center REST API we need to send a POST request to with an Authorization and Content-Type HTTP header, and if we successfully authenticate we will be returned an API token which we can use in subsequent API requests.\n\nIn the above commands we imported the Requests package and set our HTTP headers with an Authorization header and Content-Type header that specifies we want to have data returned in JSON format. Not that for the Authorization header we actually need to perform a on the byte string we previously created so that it is represented as a Python string object. This ensures that the REST API likes the data we send it. Finally, we send an HTTP POST request to the AUTH_URL and add our headers to the request. If you successfully authenticated you will see a response status code of 200/OK.\n\nThe data that the REST API returns to us is actually a JSON response containing the authorization token we can use in subsequent API requests:\n\nThis response token is actually a JSON Web Token (JWT) and if you plug it into the debugger at jwt.io you can see some additional details. The benefits of using a token for authorization subsequent API calls are:\n• They are stateless, meaning the server receiving the request can validate them immediately as they are signed with a public key\n• They have an expiration date/time\n• They can be revoked by the server if they are compromised\n• They are signed, so they can’t be tampered with\n\nA quicker way of using HTTP Basic Auth with Requests\n\nThe above example of importing the base64 module and converting the username/password was used to demonstrate base64 encoded strings for HTTP Basic Auth. The good news is the Python Requests module includes a shortcut for you by importing requests.auth.HTTPBasicAuth. This makes it far simpler to use as demonstrated in this example.\n\nWhile I haven’t use HTTP Basic Auth with Ansible’s URI module, it appears to support this authentication mechanism by providing the url_password and url_username parameters. You potentially need to set the force_basic_auth parameter to True if the REST API you’re working with doesn’t send an HTTP 401 status code on an initial request.\n\nAnd with that I’m hoping you have gained a better understanding of base64 encoding and HTTP Basic Auth with REST API’s!"
    },
    {
        "link": "https://topquadrant.com/doc/8.2/quick_start_guides/edg_apis_getting_started/edg_authentication_apis/index.html",
        "document": "Accessing EDG APIs with different types of authentication\n\nIn this section we will demonstrate how to call EDG Web APIs using Python for three different forms of authentication supported by EDG. For it, you will require a basic understanding of Python. For each example, we provide Python code to execute the EDG Web Service “exportRDFFile”. For more on using the exportRDFFile via Swagger and cURL, see Downloading an asset collection as RDF.\n\nBasic authentication relies on a Base64 encoded header whose value consists of the word followed by a space followed by the Base64 encoded . This is better suited for service-only access because the only way a user can log out is to shut down their browser. The URL with header information can be submitted with authentication information. Here’s an example using Python to access the EDG exportRDFFile Web Service. \"Make a GET request to a specified URL with credentials.\" To run the service use the following command - When it prompts, enter your password. For example, running on an EDG instance locally with basic authentication, e.g. username admin, use the following command: . Then when prompted type in your password. On succesfully executing the script, it should print the kennedy_family ttl to the terminal/command window. For secure access, web services should use HTTPS encryption.\n\nAccess using Form-based authentication, while not recommended, is possible using cookies generated by the server. The method we give here, using the following Python script, is to request an HTTP cookie that can be used in subsequent requests. The python script expects the same arguments as for basic auth, i.e. username, host, the asset collection name and the format. The inputs for these would be the same as for basic auth, except for host, which if you are running EDG studio locally with form based authentication would be . You enter your password again when you receive a prompt.\n• None The main function specifies the required arguments, and then proceeds to create a session to handle the cookies. Next it executes the login function using this session.\n• None The login function takes the host URL and performs an initial request to obtain a cookie from the server.\n• None The login script then performs a second request to login, now making use of the username and password as parameters.\n• None On successful login, the python script uses the session to run subsequent http request. In this example we once again call the EDG exportRDFFile web service. # Check if the request was successful # Perform the second POST request with cookies # Perform the third POST request with cookies to complete the login # Check if the login was successful \"Make requests with login to a specified URL.\" # Now you can use the session for subsequent requests # Perform the GET request using success cookies Use the following command to execute the script . Then again, type in your password. On successfully executing the script, it should print the kennedy_family ttl to the terminal/command window. For secure access, web services should use HTTPS encryption.\n\nThe following piece of Python script provides a means for calling the exportRDFFile when using OAuth authentication. The code takes the following parameters; host, the asset collection name and the format. The authentication server, client id and scope could also be potentially passed in as parameters. Here, we hard code them. We also prompt the use for their client secret. Again, this could be passed as a parameter. The code is broken into a main function and login function. The login function prompts the user for their client secret. This is then used to generate the “access_token”, which is returned by the function. The main function then takes the three parameters, provides hard coded auth_server_url and client_id. Here we assemble the API URL from the parameters we pass in, but you can replace this with any API URL. The code then generates the access token hourly, prompting each time for the client secret. On successful execution, it will write the response data to the terminal/command line. Sample API client using OAuth 2 client credentials flow. It will will repeat an API call every hour and generate a new token as needed. 2. If access token is expired, use the client_secret to get a new one Authenticates the client and generates a new access token. \"Make requests with login to a specified URL.\" # Copy your authorization server URL and paste it here # Copy your client ID and paste it here # Copy your EDG API URL and paste it here # Copy your initial access_token you got from the authorization server and paste it here # Run the API call once per hour # Need to use client_secret to get a new token # Use the new access token # Do something useful with the response. (Your biz logic goes here) Use the following command to execute the script"
    }
]