[
    {
        "link": "https://gnu.org/software/bash/manual/bashref.html",
        "document": "This text is a brief description of the features that are present in the Bash shell (version 5.2, 19 September 2022). The Bash home page is http://www.gnu.org/software/bash/.\n\nThis is Edition 5.2, last updated 19 September 2022, of , for , Version 5.2.\n\nBash contains features that appear in other popular shells, and some features that only appear in Bash. Some of the shells that Bash has borrowed concepts from are the Bourne Shell ( ), the Korn Shell ( ), and the C-shell ( and its successor, ). The following menu breaks the features up into categories, noting which features were inspired by other shells and which are specific to Bash.\n\nThis manual is meant as a brief introduction to features found in Bash. The Bash manual page should be used as the definitive reference on shell behavior.\n\nNext: Indexes, Previous: Major Differences From The Bourne Shell, Up: Bash Features [Contents][Index] Copyright © 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc. http://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n• PREAMBLE The purpose of this License is to make a manual, textbook, or other functional and useful document free in the sense of freedom: to assure everyone the effective freedom to copy and redistribute it, with or without modifying it, either commercially or noncommercially. Secondarily, this License preserves for the author and publisher a way to get credit for their work, while not being considered responsible for modifications made by others. This License is a kind of “copyleft”, which means that derivative works of the document must themselves be free in the same sense. It complements the GNU General Public License, which is a copyleft license designed for free software. We have designed this License in order to use it for manuals for free software, because free software needs free documentation: a free program should come with manuals providing the same freedoms that the software does. But this License is not limited to software manuals; it can be used for any textual work, regardless of subject matter or whether it is published as a printed book. We recommend this License principally for works whose purpose is instruction or reference.\n• APPLICABILITY AND DEFINITIONS This License applies to any manual or other work, in any medium, that contains a notice placed by the copyright holder saying it can be distributed under the terms of this License. Such a notice grants a world-wide, royalty-free license, unlimited in duration, to use that work under the conditions stated herein. The “Document”, below, refers to any such manual or work. Any member of the public is a licensee, and is addressed as “you”. You accept the license if you copy, modify or distribute the work in a way requiring permission under copyright law. A “Modified Version” of the Document means any work containing the Document or a portion of it, either copied verbatim, or with modifications and/or translated into another language. A “Secondary Section” is a named appendix or a front-matter section of the Document that deals exclusively with the relationship of the publishers or authors of the Document to the Document’s overall subject (or to related matters) and contains nothing that could fall directly within that overall subject. (Thus, if the Document is in part a textbook of mathematics, a Secondary Section may not explain any mathematics.) The relationship could be a matter of historical connection with the subject or with related matters, or of legal, commercial, philosophical, ethical or political position regarding them. The “Invariant Sections” are certain Secondary Sections whose titles are designated, as being those of Invariant Sections, in the notice that says that the Document is released under this License. If a section does not fit the above definition of Secondary then it is not allowed to be designated as Invariant. The Document may contain zero Invariant Sections. If the Document does not identify any Invariant Sections then there are none. The “Cover Texts” are certain short passages of text that are listed, as Front-Cover Texts or Back-Cover Texts, in the notice that says that the Document is released under this License. A Front-Cover Text may be at most 5 words, and a Back-Cover Text may be at most 25 words. A “Transparent” copy of the Document means a machine-readable copy, represented in a format whose specification is available to the general public, that is suitable for revising the document straightforwardly with generic text editors or (for images composed of pixels) generic paint programs or (for drawings) some widely available drawing editor, and that is suitable for input to text formatters or for automatic translation to a variety of formats suitable for input to text formatters. A copy made in an otherwise Transparent file format whose markup, or absence of markup, has been arranged to thwart or discourage subsequent modification by readers is not Transparent. An image format is not Transparent if used for any substantial amount of text. A copy that is not “Transparent” is called “Opaque”. Examples of suitable formats for Transparent copies include plain ASCII without markup, Texinfo input format, LaTeX input format, or using a publicly available , and standard-conforming simple , PostScript or designed for human modification. Examples of transparent image formats include , and . Opaque formats include proprietary formats that can be read and edited only by proprietary word processors, or for which the and/or processing tools are not generally available, and the machine-generated , PostScript or produced by some word processors for output purposes only. The “Title Page” means, for a printed book, the title page itself, plus such following pages as are needed to hold, legibly, the material this License requires to appear in the title page. For works in formats which do not have any title page as such, “Title Page” means the text near the most prominent appearance of the work’s title, preceding the beginning of the body of the text. The “publisher” means any person or entity that distributes copies of the Document to the public. A section “Entitled XYZ” means a named subunit of the Document whose title either is precisely XYZ or contains XYZ in parentheses following text that translates XYZ in another language. (Here XYZ stands for a specific section name mentioned below, such as “Acknowledgements”, “Dedications”, “Endorsements”, or “History”.) To “Preserve the Title” of such a section when you modify the Document means that it remains a section “Entitled XYZ” according to this definition. The Document may include Warranty Disclaimers next to the notice which states that this License applies to the Document. These Warranty Disclaimers are considered to be included by reference in this License, but only as regards disclaiming warranties: any other implication that these Warranty Disclaimers may have is void and has no effect on the meaning of this License.\n• VERBATIM COPYING You may copy and distribute the Document in any medium, either commercially or noncommercially, provided that this License, the copyright notices, and the license notice saying this License applies to the Document are reproduced in all copies, and that you add no other conditions whatsoever to those of this License. You may not use technical measures to obstruct or control the reading or further copying of the copies you make or distribute. However, you may accept compensation in exchange for copies. If you distribute a large enough number of copies you must also follow the conditions in section 3. You may also lend copies, under the same conditions stated above, and you may publicly display copies.\n• COPYING IN QUANTITY If you publish printed copies (or copies in media that commonly have printed covers) of the Document, numbering more than 100, and the Document’s license notice requires Cover Texts, you must enclose the copies in covers that carry, clearly and legibly, all these Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on the back cover. Both covers must also clearly and legibly identify you as the publisher of these copies. The front cover must present the full title with all words of the title equally prominent and visible. You may add other material on the covers in addition. Copying with changes limited to the covers, as long as they preserve the title of the Document and satisfy these conditions, can be treated as verbatim copying in other respects. If the required texts for either cover are too voluminous to fit legibly, you should put the first ones listed (as many as fit reasonably) on the actual cover, and continue the rest onto adjacent pages. If you publish or distribute Opaque copies of the Document numbering more than 100, you must either include a machine-readable Transparent copy along with each Opaque copy, or state in or with each Opaque copy a computer-network location from which the general network-using public has access to download using public-standard network protocols a complete Transparent copy of the Document, free of added material. If you use the latter option, you must take reasonably prudent steps, when you begin distribution of Opaque copies in quantity, to ensure that this Transparent copy will remain thus accessible at the stated location until at least one year after the last time you distribute an Opaque copy (directly or through your agents or retailers) of that edition to the public. It is requested, but not required, that you contact the authors of the Document well before redistributing any large number of copies, to give them a chance to provide you with an updated version of the Document.\n• MODIFICATIONS You may copy and distribute a Modified Version of the Document under the conditions of sections 2 and 3 above, provided that you release the Modified Version under precisely this License, with the Modified Version filling the role of the Document, thus licensing distribution and modification of the Modified Version to whoever possesses a copy of it. In addition, you must do these things in the Modified Version:\n• Use in the Title Page (and on the covers, if any) a title distinct from that of the Document, and from those of previous versions (which should, if there were any, be listed in the History section of the Document). You may use the same title as a previous version if the original publisher of that version gives permission.\n• List on the Title Page, as authors, one or more persons or entities responsible for authorship of the modifications in the Modified Version, together with at least five of the principal authors of the Document (all of its principal authors, if it has fewer than five), unless they release you from this requirement.\n• State on the Title page the name of the publisher of the Modified Version, as the publisher.\n• Preserve all the copyright notices of the Document.\n• Add an appropriate copyright notice for your modifications adjacent to the other copyright notices.\n• Include, immediately after the copyright notices, a license notice giving the public permission to use the Modified Version under the terms of this License, in the form shown in the Addendum below.\n• Preserve in that license notice the full lists of Invariant Sections and required Cover Texts given in the Document’s license notice.\n• Include an unaltered copy of this License.\n• Preserve the section Entitled “History”, Preserve its Title, and add to it an item stating at least the title, year, new authors, and publisher of the Modified Version as given on the Title Page. If there is no section Entitled “History” in the Document, create one stating the title, year, authors, and publisher of the Document as given on its Title Page, then add an item describing the Modified Version as stated in the previous sentence.\n• Preserve the network location, if any, given in the Document for public access to a Transparent copy of the Document, and likewise the network locations given in the Document for previous versions it was based on. These may be placed in the “History” section. You may omit a network location for a work that was published at least four years before the Document itself, or if the original publisher of the version it refers to gives permission.\n• For any section Entitled “Acknowledgements” or “Dedications”, Preserve the Title of the section, and preserve in the section all the substance and tone of each of the contributor acknowledgements and/or dedications given therein.\n• Preserve all the Invariant Sections of the Document, unaltered in their text and in their titles. Section numbers or the equivalent are not considered part of the section titles.\n• Delete any section Entitled “Endorsements”. Such a section may not be included in the Modified Version.\n• Do not retitle any existing section to be Entitled “Endorsements” or to conflict in title with any Invariant Section. If the Modified Version includes new front-matter sections or appendices that qualify as Secondary Sections and contain no material copied from the Document, you may at your option designate some or all of these sections as invariant. To do this, add their titles to the list of Invariant Sections in the Modified Version’s license notice. These titles must be distinct from any other section titles. You may add a section Entitled “Endorsements”, provided it contains nothing but endorsements of your Modified Version by various parties—for example, statements of peer review or that the text has been approved by an organization as the authoritative definition of a standard. You may add a passage of up to five words as a Front-Cover Text, and a passage of up to 25 words as a Back-Cover Text, to the end of the list of Cover Texts in the Modified Version. Only one passage of Front-Cover Text and one of Back-Cover Text may be added by (or through arrangements made by) any one entity. If the Document already includes a cover text for the same cover, previously added by you or by arrangement made by the same entity you are acting on behalf of, you may not add another; but you may replace the old one, on explicit permission from the previous publisher that added the old one. The author(s) and publisher(s) of the Document do not by this License give permission to use their names for publicity for or to assert or imply endorsement of any Modified Version.\n• COMBINING DOCUMENTS You may combine the Document with other documents released under this License, under the terms defined in section 4 above for modified versions, provided that you include in the combination all of the Invariant Sections of all of the original documents, unmodified, and list them all as Invariant Sections of your combined work in its license notice, and that you preserve all their Warranty Disclaimers. The combined work need only contain one copy of this License, and multiple identical Invariant Sections may be replaced with a single copy. If there are multiple Invariant Sections with the same name but different contents, make the title of each such section unique by adding at the end of it, in parentheses, the name of the original author or publisher of that section if known, or else a unique number. Make the same adjustment to the section titles in the list of Invariant Sections in the license notice of the combined work. In the combination, you must combine any sections Entitled “History” in the various original documents, forming one section Entitled “History”; likewise combine any sections Entitled “Acknowledgements”, and any sections Entitled “Dedications”. You must delete all sections Entitled “Endorsements.”\n• COLLECTIONS OF DOCUMENTS You may make a collection consisting of the Document and other documents released under this License, and replace the individual copies of this License in the various documents with a single copy that is included in the collection, provided that you follow the rules of this License for verbatim copying of each of the documents in all other respects. You may extract a single document from such a collection, and distribute it individually under this License, provided you insert a copy of this License into the extracted document, and follow this License in all other respects regarding verbatim copying of that document.\n• AGGREGATION WITH INDEPENDENT WORKS A compilation of the Document or its derivatives with other separate and independent documents or works, in or on a volume of a storage or distribution medium, is called an “aggregate” if the copyright resulting from the compilation is not used to limit the legal rights of the compilation’s users beyond what the individual works permit. When the Document is included in an aggregate, this License does not apply to the other works in the aggregate which are not themselves derivative works of the Document. If the Cover Text requirement of section 3 is applicable to these copies of the Document, then if the Document is less than one half of the entire aggregate, the Document’s Cover Texts may be placed on covers that bracket the Document within the aggregate, or the electronic equivalent of covers if the Document is in electronic form. Otherwise they must appear on printed covers that bracket the whole aggregate.\n• TRANSLATION Translation is considered a kind of modification, so you may distribute translations of the Document under the terms of section 4. Replacing Invariant Sections with translations requires special permission from their copyright holders, but you may include translations of some or all Invariant Sections in addition to the original versions of these Invariant Sections. You may include a translation of this License, and all the license notices in the Document, and any Warranty Disclaimers, provided that you also include the original English version of this License and the original versions of those notices and disclaimers. In case of a disagreement between the translation and the original version of this License or a notice or disclaimer, the original version will prevail. If a section in the Document is Entitled “Acknowledgements”, “Dedications”, or “History”, the requirement (section 4) to Preserve its Title (section 1) will typically require changing the actual title.\n• TERMINATION You may not copy, modify, sublicense, or distribute the Document except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, or distribute it is void, and will automatically terminate your rights under this License. However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, receipt of a copy of some or all of the same material does not give you any rights to use it.\n• FUTURE REVISIONS OF THIS LICENSE The Free Software Foundation may publish new, revised versions of the GNU Free Documentation License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. See http://www.gnu.org/copyleft/. Each version of the License is given a distinguishing version number. If the Document specifies that a particular numbered version of this License “or any later version” applies to it, you have the option of following the terms and conditions either of that specified version or of any later version that has been published (not as a draft) by the Free Software Foundation. If the Document does not specify a version number of this License, you may choose any version ever published (not as a draft) by the Free Software Foundation. If the Document specifies that a proxy can decide which future versions of this License can be used, that proxy’s public statement of acceptance of a version permanently authorizes you to choose that version for the Document.\n• RELICENSING “Massive Multiauthor Collaboration Site” (or “MMC Site”) means any World Wide Web server that publishes copyrightable works and also provides prominent facilities for anybody to edit those works. A public wiki that anybody can edit is an example of such a server. A “Massive Multiauthor Collaboration” (or “MMC”) contained in the site means any set of copyrightable works thus published on the MMC site. “CC-BY-SA” means the Creative Commons Attribution-Share Alike 3.0 license published by Creative Commons Corporation, a not-for-profit corporation with a principal place of business in San Francisco, California, as well as future copyleft versions of that license published by that same organization. “Incorporate” means to publish or republish a Document, in whole or in part, as part of another Document. An MMC is “eligible for relicensing” if it is licensed under this License, and if all works that were first published under this License somewhere other than this MMC, and subsequently incorporated in whole or in part into the MMC, (1) had no cover texts or invariant sections, and (2) were thus incorporated prior to November 1, 2008. The operator of an MMC Site may republish an MMC contained in the site under CC-BY-SA on the same site at any time before August 1, 2009, provided the MMC is eligible for relicensing. ADDENDUM: How to use this License for your documents To use this License in a document you have written, include a copy of the License in the document and put the following copyright and license notices just after the title page: Copyright (C) . Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled ``GNU Free Documentation License''. If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts, replace the “with…Texts.” line with this: with the Invariant Sections being , with the Front-Cover Texts being , and with the Back-Cover Texts being . If you have Invariant Sections without Cover Texts, or some other combination of the three, merge those two alternatives to suit the situation. If your document contains nontrivial examples of program code, we recommend releasing these examples in parallel under your choice of free software license, such as the GNU General Public License, to permit their use in free software."
    },
    {
        "link": "https://freecodecamp.org/news/shell-scripting-crash-course-how-to-write-bash-scripts-in-linux",
        "document": "Shell scripting is an important part of process automation in Linux. Scripting helps you write a sequence of commands in a file and then execute them.\n\nThis saves you time because you don't have to write certain commands again and again. You can perform daily tasks efficiently and even schedule them for automatic execution.\n\nYou can also set certain scripts to execute on startup such as showing a particular message on launching a new session or setting certain environment variables.\n\nThe applications and uses of scripting are numerous, so let's dive in.\n\nIn this article, you will learn:\n• What is a bash script and how do you identify it?\n• How to create your first bash script and execute it.\n• How to see a system's scheduled scripts.\n• How to automate scripts by scheduling via cron jobs.\n\nThe best way to learn is by practicing. I highly encourage you to follow along using Replit. You can access a running Linux shell within minutes.\n\nThe Linux command line is provided by a program called the shell. Over the years, the shell program has evolved to cater to various options.\n\nDifferent users can be configured to use different shells. But most users prefer to stick with the current default shell. The default shell for many Linux distros is the GNU Bourne-Again Shell (bash). Bash is succeeded by Bourne shell ( ).\n\nWhen you first launch the shell, it uses a startup script located in the or file which allows you to customize the behavior of the shell.\n\nWhen a shell is used interactively, it displays a when it is waiting for a command from the user. This is called the shell prompt.\n\nIf shell is running as root, the prompt is changed to . The superuser shell prompt looks like this:\n\nBash is very powerful as it can simplify certain operations that are hard to accomplish efficiently with a GUI. Remember that most servers do not have a GUI, and it is best to learn to use the powers of a command line interface (CLI).\n\nA bash script is a series of commands written in a file. These are read and executed by the bash program. The program executes line by line.\n\nFor example, you can navigate to a certain path, create a folder and spawn a process inside it using the command line.\n\nYou can do the same sequence of steps by saving the commands in a bash script and running it. You can run the script any number of times.\n\nHow Do You Identify a Bash Script?\n\nBy naming conventions, bash scripts end with a . However, bash scripts can run perfectly fine without the extension.\n\nScripts are also identified with a . Shebang is a combination of and followed the the bash shell path. This is the first line of the script. Shebang tells the shell to execute it via bash shell. Shebang is simply an absolute path to the bash interpreter.\n\nBelow is an example of the shebang statement.\n\nThe path of the bash program can vary. We will see later how to identify it.\n\nScripts have execution rights for the user executing them.\n\nAn execution right is represented by . In the example below, my user has the (read, write, execute) rights for the file\n\nExecutable scripts appear in a different colour from rest of the files and folders.\n\nIn my case, the scripts with execution rights appear as green.\n\nHow to Create Your First Bash Script\n\nFind the path to your bash shell.\n\nIn my case, the path is and I will include this in the shebang.\n\nWe will \"hello world\" to the console.\n\nOur script will look something like this:\n\nEdit the file using a text editor of your choice and add the above lines in it.\n\nModify the file permissions and allow execution of the script by using the command below:\n\nmodifies the existing rights of a file for a particular user. We are adding to user .\n\nYou can run the script in the following ways:\n\nJust like any other programming language, bash scripting follows a set of rules to create programs understandable by the computer. In this section, we will study the syntax of bash scripting.\n\nWe can define a variable by using the syntax . To get the value of the variable, add before the variable.\n\nTux is also the name of the Linux mascot, the penguin.\n\nBelow are the operators supported by bash for mathematical calculations:\n\nNote the spaces, these are part of the syntax\n\nNumerical expressions can also be calculated and stored in a variable using the syntax below:\n\nLet's try an example.\n\nFractions are not correctly calculated using the above methods and truncated.\n\nFor decimal calculations, we can use command to get the output to a particular number of decimal places. (Bash Calculator) is a command line calculator that supports calculation up to a certain number of decimal points.\n\nWhere defines the number of decimal places required in the output.\n\nSometimes you'll need to gather user input and perform relevant operations.\n\nIn bash, we can take user input using the command.\n\nTo prompt the user with a custom message, use the flag.\n\nComparison is used to check if statements evaluate to or . We can use the below shown operators to compare two statements:\n\nLet's compare two numbers and find their relationship:\n\nConditions are expressions that evaluate to a boolean expression ( or ). To check conditions, we can use , , and nested conditionals.\n\nThe structure of conditional statements is as follows:\n\nTo create meaningful comparisons, we can use AND and OR as well.\n\nThe below statement translates to: If is greater than 40 and is less than 6.\n\nExample: Let's find the triangle type by reading the lengths of its sides.\n\nFor loops allow you to execute statements a specific number of times.\n\nIn the example below, the loop will iterate 5 times.\n\nWe can loop through strings as well.\n\nWhile loops check for a condition and loop until the condition remains . We need to provide a counter statement that increments the counter to control loop execution.\n\nIn the example below, is the counter statement that increments the value of .\n\nSuppose we have a file as shown below:\n\nWe can read the file line by line and print the output on the screen.\n\nHow to execute commands with back ticks\n\nIf you need to include the output of a complex command in your script, you can write the statement inside back ticks.\n\nExample: Suppose we want to get the output of a list of mountpoints with in their name. We can craft a statement like this: .\n\nTo include it in the bash script, we can enclose it in back ticks.\n\nHow to get arguments for scripts from the command line\n\nIt is possible to give arguments to the script on execution.\n\nrepresents the position of the parameters, starting from one.\n\nRun it like this:\n\nHow to Automate Scripts by Scheduling via cron Jobs\n\nCron is a job scheduling utility present in Unix like systems. You can schedule jobs to execute daily, weekly, monthly or in a specific time of the day. Automation in Linux heavily relies on cron jobs.\n\nBelow is the syntax to schedule crons:\n\nBelow are some examples of scheduling cron jobs.\n\nYou can learn about cron in detail in this blog post.\n\nHow to Check Existing Scripts in a System\n\nlists the already scheduled scripts for a particular user.\n\nThe command helps to locate files based on certain patterns. As most of the scripts end with , we can use the find script like this:\n• represents the current directory. You can change the path accordingly.\n• indicates that the file type we are looking for is a text based file.\n• tells to match all files ending with .\n\nIf you are interested to read about the find command in detail, check my other post.\n\nIn this tutorial we learned the basics of shell scripting. We looked into examples and syntax which can help us write meaningful programs.\n\nWhat’s your favorite thing you learned from this tutorial? Let me know on Twitter!\n\nYou can read my other posts here."
    },
    {
        "link": "https://gnu.org/s/bash/manual/bash.html",
        "document": "This text is a brief description of the features that are present in the Bash shell (version 5.2, 19 September 2022). The Bash home page is http://www.gnu.org/software/bash/.\n\nThis is Edition 5.2, last updated 19 September 2022, of , for , Version 5.2.\n\nBash contains features that appear in other popular shells, and some features that only appear in Bash. Some of the shells that Bash has borrowed concepts from are the Bourne Shell ( ), the Korn Shell ( ), and the C-shell ( and its successor, ). The following menu breaks the features up into categories, noting which features were inspired by other shells and which are specific to Bash.\n\nThis manual is meant as a brief introduction to features found in Bash. The Bash manual page should be used as the definitive reference on shell behavior.\n\nNext: Indexes, Previous: Major Differences From The Bourne Shell, Up: Bash Features [Contents][Index] Copyright © 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc. http://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n• PREAMBLE The purpose of this License is to make a manual, textbook, or other functional and useful document free in the sense of freedom: to assure everyone the effective freedom to copy and redistribute it, with or without modifying it, either commercially or noncommercially. Secondarily, this License preserves for the author and publisher a way to get credit for their work, while not being considered responsible for modifications made by others. This License is a kind of “copyleft”, which means that derivative works of the document must themselves be free in the same sense. It complements the GNU General Public License, which is a copyleft license designed for free software. We have designed this License in order to use it for manuals for free software, because free software needs free documentation: a free program should come with manuals providing the same freedoms that the software does. But this License is not limited to software manuals; it can be used for any textual work, regardless of subject matter or whether it is published as a printed book. We recommend this License principally for works whose purpose is instruction or reference.\n• APPLICABILITY AND DEFINITIONS This License applies to any manual or other work, in any medium, that contains a notice placed by the copyright holder saying it can be distributed under the terms of this License. Such a notice grants a world-wide, royalty-free license, unlimited in duration, to use that work under the conditions stated herein. The “Document”, below, refers to any such manual or work. Any member of the public is a licensee, and is addressed as “you”. You accept the license if you copy, modify or distribute the work in a way requiring permission under copyright law. A “Modified Version” of the Document means any work containing the Document or a portion of it, either copied verbatim, or with modifications and/or translated into another language. A “Secondary Section” is a named appendix or a front-matter section of the Document that deals exclusively with the relationship of the publishers or authors of the Document to the Document’s overall subject (or to related matters) and contains nothing that could fall directly within that overall subject. (Thus, if the Document is in part a textbook of mathematics, a Secondary Section may not explain any mathematics.) The relationship could be a matter of historical connection with the subject or with related matters, or of legal, commercial, philosophical, ethical or political position regarding them. The “Invariant Sections” are certain Secondary Sections whose titles are designated, as being those of Invariant Sections, in the notice that says that the Document is released under this License. If a section does not fit the above definition of Secondary then it is not allowed to be designated as Invariant. The Document may contain zero Invariant Sections. If the Document does not identify any Invariant Sections then there are none. The “Cover Texts” are certain short passages of text that are listed, as Front-Cover Texts or Back-Cover Texts, in the notice that says that the Document is released under this License. A Front-Cover Text may be at most 5 words, and a Back-Cover Text may be at most 25 words. A “Transparent” copy of the Document means a machine-readable copy, represented in a format whose specification is available to the general public, that is suitable for revising the document straightforwardly with generic text editors or (for images composed of pixels) generic paint programs or (for drawings) some widely available drawing editor, and that is suitable for input to text formatters or for automatic translation to a variety of formats suitable for input to text formatters. A copy made in an otherwise Transparent file format whose markup, or absence of markup, has been arranged to thwart or discourage subsequent modification by readers is not Transparent. An image format is not Transparent if used for any substantial amount of text. A copy that is not “Transparent” is called “Opaque”. Examples of suitable formats for Transparent copies include plain ASCII without markup, Texinfo input format, LaTeX input format, or using a publicly available , and standard-conforming simple , PostScript or designed for human modification. Examples of transparent image formats include , and . Opaque formats include proprietary formats that can be read and edited only by proprietary word processors, or for which the and/or processing tools are not generally available, and the machine-generated , PostScript or produced by some word processors for output purposes only. The “Title Page” means, for a printed book, the title page itself, plus such following pages as are needed to hold, legibly, the material this License requires to appear in the title page. For works in formats which do not have any title page as such, “Title Page” means the text near the most prominent appearance of the work’s title, preceding the beginning of the body of the text. The “publisher” means any person or entity that distributes copies of the Document to the public. A section “Entitled XYZ” means a named subunit of the Document whose title either is precisely XYZ or contains XYZ in parentheses following text that translates XYZ in another language. (Here XYZ stands for a specific section name mentioned below, such as “Acknowledgements”, “Dedications”, “Endorsements”, or “History”.) To “Preserve the Title” of such a section when you modify the Document means that it remains a section “Entitled XYZ” according to this definition. The Document may include Warranty Disclaimers next to the notice which states that this License applies to the Document. These Warranty Disclaimers are considered to be included by reference in this License, but only as regards disclaiming warranties: any other implication that these Warranty Disclaimers may have is void and has no effect on the meaning of this License.\n• VERBATIM COPYING You may copy and distribute the Document in any medium, either commercially or noncommercially, provided that this License, the copyright notices, and the license notice saying this License applies to the Document are reproduced in all copies, and that you add no other conditions whatsoever to those of this License. You may not use technical measures to obstruct or control the reading or further copying of the copies you make or distribute. However, you may accept compensation in exchange for copies. If you distribute a large enough number of copies you must also follow the conditions in section 3. You may also lend copies, under the same conditions stated above, and you may publicly display copies.\n• COPYING IN QUANTITY If you publish printed copies (or copies in media that commonly have printed covers) of the Document, numbering more than 100, and the Document’s license notice requires Cover Texts, you must enclose the copies in covers that carry, clearly and legibly, all these Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on the back cover. Both covers must also clearly and legibly identify you as the publisher of these copies. The front cover must present the full title with all words of the title equally prominent and visible. You may add other material on the covers in addition. Copying with changes limited to the covers, as long as they preserve the title of the Document and satisfy these conditions, can be treated as verbatim copying in other respects. If the required texts for either cover are too voluminous to fit legibly, you should put the first ones listed (as many as fit reasonably) on the actual cover, and continue the rest onto adjacent pages. If you publish or distribute Opaque copies of the Document numbering more than 100, you must either include a machine-readable Transparent copy along with each Opaque copy, or state in or with each Opaque copy a computer-network location from which the general network-using public has access to download using public-standard network protocols a complete Transparent copy of the Document, free of added material. If you use the latter option, you must take reasonably prudent steps, when you begin distribution of Opaque copies in quantity, to ensure that this Transparent copy will remain thus accessible at the stated location until at least one year after the last time you distribute an Opaque copy (directly or through your agents or retailers) of that edition to the public. It is requested, but not required, that you contact the authors of the Document well before redistributing any large number of copies, to give them a chance to provide you with an updated version of the Document.\n• MODIFICATIONS You may copy and distribute a Modified Version of the Document under the conditions of sections 2 and 3 above, provided that you release the Modified Version under precisely this License, with the Modified Version filling the role of the Document, thus licensing distribution and modification of the Modified Version to whoever possesses a copy of it. In addition, you must do these things in the Modified Version:\n• Use in the Title Page (and on the covers, if any) a title distinct from that of the Document, and from those of previous versions (which should, if there were any, be listed in the History section of the Document). You may use the same title as a previous version if the original publisher of that version gives permission.\n• List on the Title Page, as authors, one or more persons or entities responsible for authorship of the modifications in the Modified Version, together with at least five of the principal authors of the Document (all of its principal authors, if it has fewer than five), unless they release you from this requirement.\n• State on the Title page the name of the publisher of the Modified Version, as the publisher.\n• Preserve all the copyright notices of the Document.\n• Add an appropriate copyright notice for your modifications adjacent to the other copyright notices.\n• Include, immediately after the copyright notices, a license notice giving the public permission to use the Modified Version under the terms of this License, in the form shown in the Addendum below.\n• Preserve in that license notice the full lists of Invariant Sections and required Cover Texts given in the Document’s license notice.\n• Include an unaltered copy of this License.\n• Preserve the section Entitled “History”, Preserve its Title, and add to it an item stating at least the title, year, new authors, and publisher of the Modified Version as given on the Title Page. If there is no section Entitled “History” in the Document, create one stating the title, year, authors, and publisher of the Document as given on its Title Page, then add an item describing the Modified Version as stated in the previous sentence.\n• Preserve the network location, if any, given in the Document for public access to a Transparent copy of the Document, and likewise the network locations given in the Document for previous versions it was based on. These may be placed in the “History” section. You may omit a network location for a work that was published at least four years before the Document itself, or if the original publisher of the version it refers to gives permission.\n• For any section Entitled “Acknowledgements” or “Dedications”, Preserve the Title of the section, and preserve in the section all the substance and tone of each of the contributor acknowledgements and/or dedications given therein.\n• Preserve all the Invariant Sections of the Document, unaltered in their text and in their titles. Section numbers or the equivalent are not considered part of the section titles.\n• Delete any section Entitled “Endorsements”. Such a section may not be included in the Modified Version.\n• Do not retitle any existing section to be Entitled “Endorsements” or to conflict in title with any Invariant Section. If the Modified Version includes new front-matter sections or appendices that qualify as Secondary Sections and contain no material copied from the Document, you may at your option designate some or all of these sections as invariant. To do this, add their titles to the list of Invariant Sections in the Modified Version’s license notice. These titles must be distinct from any other section titles. You may add a section Entitled “Endorsements”, provided it contains nothing but endorsements of your Modified Version by various parties—for example, statements of peer review or that the text has been approved by an organization as the authoritative definition of a standard. You may add a passage of up to five words as a Front-Cover Text, and a passage of up to 25 words as a Back-Cover Text, to the end of the list of Cover Texts in the Modified Version. Only one passage of Front-Cover Text and one of Back-Cover Text may be added by (or through arrangements made by) any one entity. If the Document already includes a cover text for the same cover, previously added by you or by arrangement made by the same entity you are acting on behalf of, you may not add another; but you may replace the old one, on explicit permission from the previous publisher that added the old one. The author(s) and publisher(s) of the Document do not by this License give permission to use their names for publicity for or to assert or imply endorsement of any Modified Version.\n• COMBINING DOCUMENTS You may combine the Document with other documents released under this License, under the terms defined in section 4 above for modified versions, provided that you include in the combination all of the Invariant Sections of all of the original documents, unmodified, and list them all as Invariant Sections of your combined work in its license notice, and that you preserve all their Warranty Disclaimers. The combined work need only contain one copy of this License, and multiple identical Invariant Sections may be replaced with a single copy. If there are multiple Invariant Sections with the same name but different contents, make the title of each such section unique by adding at the end of it, in parentheses, the name of the original author or publisher of that section if known, or else a unique number. Make the same adjustment to the section titles in the list of Invariant Sections in the license notice of the combined work. In the combination, you must combine any sections Entitled “History” in the various original documents, forming one section Entitled “History”; likewise combine any sections Entitled “Acknowledgements”, and any sections Entitled “Dedications”. You must delete all sections Entitled “Endorsements.”\n• COLLECTIONS OF DOCUMENTS You may make a collection consisting of the Document and other documents released under this License, and replace the individual copies of this License in the various documents with a single copy that is included in the collection, provided that you follow the rules of this License for verbatim copying of each of the documents in all other respects. You may extract a single document from such a collection, and distribute it individually under this License, provided you insert a copy of this License into the extracted document, and follow this License in all other respects regarding verbatim copying of that document.\n• AGGREGATION WITH INDEPENDENT WORKS A compilation of the Document or its derivatives with other separate and independent documents or works, in or on a volume of a storage or distribution medium, is called an “aggregate” if the copyright resulting from the compilation is not used to limit the legal rights of the compilation’s users beyond what the individual works permit. When the Document is included in an aggregate, this License does not apply to the other works in the aggregate which are not themselves derivative works of the Document. If the Cover Text requirement of section 3 is applicable to these copies of the Document, then if the Document is less than one half of the entire aggregate, the Document’s Cover Texts may be placed on covers that bracket the Document within the aggregate, or the electronic equivalent of covers if the Document is in electronic form. Otherwise they must appear on printed covers that bracket the whole aggregate.\n• TRANSLATION Translation is considered a kind of modification, so you may distribute translations of the Document under the terms of section 4. Replacing Invariant Sections with translations requires special permission from their copyright holders, but you may include translations of some or all Invariant Sections in addition to the original versions of these Invariant Sections. You may include a translation of this License, and all the license notices in the Document, and any Warranty Disclaimers, provided that you also include the original English version of this License and the original versions of those notices and disclaimers. In case of a disagreement between the translation and the original version of this License or a notice or disclaimer, the original version will prevail. If a section in the Document is Entitled “Acknowledgements”, “Dedications”, or “History”, the requirement (section 4) to Preserve its Title (section 1) will typically require changing the actual title.\n• TERMINATION You may not copy, modify, sublicense, or distribute the Document except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, or distribute it is void, and will automatically terminate your rights under this License. However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, receipt of a copy of some or all of the same material does not give you any rights to use it.\n• FUTURE REVISIONS OF THIS LICENSE The Free Software Foundation may publish new, revised versions of the GNU Free Documentation License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. See http://www.gnu.org/copyleft/. Each version of the License is given a distinguishing version number. If the Document specifies that a particular numbered version of this License “or any later version” applies to it, you have the option of following the terms and conditions either of that specified version or of any later version that has been published (not as a draft) by the Free Software Foundation. If the Document does not specify a version number of this License, you may choose any version ever published (not as a draft) by the Free Software Foundation. If the Document specifies that a proxy can decide which future versions of this License can be used, that proxy’s public statement of acceptance of a version permanently authorizes you to choose that version for the Document.\n• RELICENSING “Massive Multiauthor Collaboration Site” (or “MMC Site”) means any World Wide Web server that publishes copyrightable works and also provides prominent facilities for anybody to edit those works. A public wiki that anybody can edit is an example of such a server. A “Massive Multiauthor Collaboration” (or “MMC”) contained in the site means any set of copyrightable works thus published on the MMC site. “CC-BY-SA” means the Creative Commons Attribution-Share Alike 3.0 license published by Creative Commons Corporation, a not-for-profit corporation with a principal place of business in San Francisco, California, as well as future copyleft versions of that license published by that same organization. “Incorporate” means to publish or republish a Document, in whole or in part, as part of another Document. An MMC is “eligible for relicensing” if it is licensed under this License, and if all works that were first published under this License somewhere other than this MMC, and subsequently incorporated in whole or in part into the MMC, (1) had no cover texts or invariant sections, and (2) were thus incorporated prior to November 1, 2008. The operator of an MMC Site may republish an MMC contained in the site under CC-BY-SA on the same site at any time before August 1, 2009, provided the MMC is eligible for relicensing. ADDENDUM: How to use this License for your documents To use this License in a document you have written, include a copy of the License in the document and put the following copyright and license notices just after the title page: Copyright (C) . Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled ``GNU Free Documentation License''. If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts, replace the “with…Texts.” line with this: with the Invariant Sections being , with the Front-Cover Texts being , and with the Back-Cover Texts being . If you have Invariant Sections without Cover Texts, or some other combination of the three, merge those two alternatives to suit the situation. If your document contains nontrivial examples of program code, we recommend releasing these examples in parallel under your choice of free software license, such as the GNU General Public License, to permit their use in free software."
    },
    {
        "link": "https://freecodecamp.org/news/bash-scripting-tutorial-linux-shell-script-and-command-line-for-beginners",
        "document": "In Linux, process automation relies heavily on shell scripting. This involves creating a file containing a series of commands that can be executed together.\n\nIn this article, we'll start with the basics of bash scripting which includes variables, commands, inputs/ outputs, and debugging. We'll also see examples of each along the way.\n• How to Get Started with Bash Scripting\n• How to Run Bash Commands from the Command Line\n• How to Create and Execute Bash Scripts\n• How to Schedule Scripts using cron\n• How to Debug and Troubleshoot Bash Scripts\n• Resources for learning more about Bash scripting\n\nTo follow along with this tutorial, you should have the following accesses:\n• A running version of Linux with access to the command line.\n\nIf you do not have Linux installed or you are just starting out, you can easily access the Linux command line through Replit. Replit is a browser-based IDE where you can access the bash shell in a few minutes.\n\nYou can also install Linux on top of your Windows system using WSL (Windows Subsystem for Linux). Here is a tutorial for that.\n\nA bash script is a file containing a sequence of commands that are executed by the bash program line by line. It allows you to perform a series of actions, such as navigating to a specific directory, creating a folder, and launching a process using the command line.\n\nBy saving these commands in a script, you can repeat the same sequence of steps multiple times and execute them by running the script.\n\nBash scripting is a powerful and versatile tool for automating system administration tasks, managing system resources, and performing other routine tasks in Unix/Linux systems. Some advantages of shell scripting are:\n• Automation: Shell scripts allow you to automate repetitive tasks and processes, saving time and reducing the risk of errors that can occur with manual execution.\n• Portability: Shell scripts can be run on various platforms and operating systems, including Unix, Linux, macOS, and even Windows through the use of emulators or virtual machines.\n• Flexibility: Shell scripts are highly customizable and can be easily modified to suit specific requirements. They can also be combined with other programming languages or utilities to create more powerful scripts.\n• Accessibility: Shell scripts are easy to write and don't require any special tools or software. They can be edited using any text editor, and most operating systems have a built-in shell interpreter.\n• Integration: Shell scripts can be integrated with other tools and applications, such as databases, web servers, and cloud services, allowing for more complex automation and system management tasks.\n• Debugging: Shell scripts are easy to debug, and most shells have built-in debugging and error-reporting tools that can help identify and fix issues quickly.\n\nThe terms \"shell\" and \"bash\" are used interchangeably. But there is a subtle difference between the two.\n\nThe term \"shell\" refers to a program that provides a command-line interface for interacting with an operating system. Bash (Bourne-Again SHell) is one of the most commonly used Unix/Linux shells and is the default shell in many Linux distributions.\n\nA shell or command-line interface looks like this:\n\nThe shell accepts commands from the user and displays the output\n\nIn the above output, is the shell prompt. When a shell is used interactively, it displays a when it is waiting for a command from the user.\n\nIf the shell is running as root (a user with administrative rights), the prompt is changed to . The superuser shell prompt looks like this:\n\nAlthough Bash is a type of shell, there are other shells available as well, such as Korn shell (ksh), C shell (csh), and Z shell (zsh). Each shell has its own syntax and set of features, but they all share the common purpose of providing a command-line interface for interacting with the operating system.\n\nYou can determine your shell type using the command:\n\nHere is the output for me:\n\nIn summary, while \"shell\" is a broad term that refers to any program that provides a command-line interface, \"Bash\" is a specific type of shell that is widely used in Unix/Linux systems.\n\nNote: In this tutorial, we will be using the \"bash\" shell.\n\nHow to Get Started with Bash Scripting\n\nAs mentioned earlier, the shell prompt looks something like this:\n\nYou can enter any command after the sign and see the output on the terminal.\n\nLet's discuss a few basic bash commands and see their outputs. Make sure to follow along :)\n• : Lists the contents of the current directory.\n• : Prints a string of text, or value of a variable to the terminal.\n\nYou can always refer to a commands manual with the command.\n\nFor example, the manual for looks something like this:\n\nYou can see options for a command in detail using\n\nHow to Create and Execute Bash scripts\n\nBy naming convention, bash scripts end with . However, bash scripts can run perfectly fine without the extension.\n\nBash scripts start with a . Shebang is a combination of and followed by the bash shell path. This is the first line of the script. Shebang tells the shell to execute it via bash shell. Shebang is simply an absolute path to the bash interpreter.\n\nBelow is an example of the shebang statement.\n\nYou can find your bash shell path (which may vary from the above) using the command:\n\nOur first script prompts the user to enter a path. In return, its contents will be listed.\n\nCreate a file named using the command. You can use any editor of your choice.\n\nAdd the following commands in your file and save it:\n\nLet's take a deeper look at the script line by line. I am displaying the same script again, but this time with line numbers.\n• Line #1: The shebang ( ) points toward the bash shell path.\n• Line #2: The command is displaying the current date and time on the terminal. Note that the is in backticks.\n• Line #4: We want the user to enter a valid path.\n• Line #5: The command reads the input and stores it in the variable .\n• line #8: The command takes the variable with the stored path and displays the current files and folders.\n\nTo make the script executable, assign execution rights to your user using this command:\n• modifies the ownership of a file for the current user : .\n• adds the execution rights to the current user. This means that the user who is the owner can now run the script.\n• is the file we wish to run.\n\nYou can run the script using any of the mentioned methods:\n\nLet's see it running in action 🚀\n\nComments start with a in bash scripting. This means that any line that begins with a is a comment and will be ignored by the interpreter.\n\nComments are very helpful in documenting the code, and it is a good practice to add them to help others understand the code.\n\nThese are examples of comments:\n\nVariables let you store data. You can use variables to read, access, and manipulate data throughout your script.\n\nThere are no data types in Bash. In Bash, a variable is capable of storing numeric values, individual characters, or strings of characters.\n\nIn Bash, you can use and set the variable values in the following ways:\n• Assign the value based on the output obtained from a program or command, using command substitution. Note that is required to access an existing variable's value.\n\nTo access the variable value, append to the variable name.\n\nIn Bash scripting, the following are the variable naming conventions:\n• Variable names should start with a letter or an underscore ( ).\n• Variable names can contain letters, numbers, and underscores ( ).\n• Variable names should not contain spaces or special characters.\n• Use descriptive names that reflect the purpose of the variable.\n• Avoid using reserved keywords, such as , , , , and so on as variable names.\n\nHere are some examples of valid variable names in Bash:\n\nAnd here are some examples of invalid variable names:\n\nFollowing these naming conventions helps make Bash scripts more readable and easier to maintain.\n\nIn this section, we'll discuss some methods to provide input to our scripts.\n• Reading the user input and storing it in a variable\n\nWe can read the user input using the command.\n\nThis code reads each line from a file named and prints it to the terminal. We'll study while loops later in this article.\n\nIn a bash script or function, denotes the initial argument passed, denotes the second argument passed, and so forth.\n\nThis script takes a name as a command-line argument and prints a personalized greeting.\n\nWe have supplied as our argument to the script.\n\nHere we'll discuss some methods to receive output from the scripts.\n\nThis prints the text \"Hello, World!\" to the terminal.\n\nThis writes the text \"This is some text.\" to a file named . Note that the operator overwrites a file if it already has some content.\n\nThis appends the text \"More text.\" to the end of the file .\n\nThis lists the files in the current directory and writes the output to a file named . You can redirect output of any command to a file this way.\n\nHere is a list of some of the most commonly used bash commands:\n• : Change the directory to a different location.\n• : List the contents of the current directory.\n• : Concatenate and print the contents of a file.\n• : Change the permissions of a file or directory.\n• : Display the amount of disk space available.\n\nExpressions that produce a boolean result, either true or false, are called conditions. There are several ways to evaluate conditions, including , , , and nested conditionals.\n\nWe can use logical operators such as AND and OR to make comparisons that have more significance.\n\nLet's see an example of a Bash script that uses , , and statements to determine if a user-inputted number is positive, negative, or zero:\n\nThe script first prompts the user to enter a number. Then, it uses an statement to check if the number is greater than 0. If it is, the script outputs that the number is positive. If the number is not greater than 0, the script moves on to the next statement, which is an statement. Here, the script checks if the number is less than 0. If it is, the script outputs that the number is negative. Finally, if the number is neither greater than 0 nor less than 0, the script uses an statement to output that the number is zero.\n\nSeeing it in action 🚀\n\nWhile loops check for a condition and loop until the condition remains . We need to provide a counter statement that increments the counter to control loop execution.\n\nIn the example below, is the counter statement that increments the value of . The loop will run exactly 10 times.\n\nThe loop, just like the loop, allows you to execute statements a specific number of times. Each loop differs in its syntax and usage.\n\nIn the example below, the loop will iterate 5 times.\n\nIn Bash, case statements are used to compare a given value against a list of patterns and execute a block of code based on the first pattern that matches. The syntax for a case statement in Bash is as follows:\n\nHere, \"expression\" is the value that we want to compare, and \"pattern1\", \"pattern2\", \"pattern3\", and so on are the patterns that we want to compare it against.\n\nThe double semicolon \";;\" separates each block of code to execute for each pattern. The asterisk \"*\" represents the default case, which executes if none of the specified patterns match the expression.\n\nLet's see an example.\n\nIn this example, since the value of \"fruit\" is \"apple\", the first pattern matches, and the block of code that echoes \"This is a red fruit.\" is executed. If the value of \"fruit\" were instead \"banana\", the second pattern would match and the block of code that echoes \"This is a yellow fruit.\" would execute, and so on. If the value of \"fruit\" does not match any of the specified patterns, the default case is executed, which echoes \"Unknown fruit.\"\n\nHow to Schedule Scripts using cron\n\nCron is a powerful utility for job scheduling that is available in Unix-like operating systems. By configuring cron, you can set up automated jobs to run on a daily, weekly, monthly, or specific time basis. The automation capabilities provided by cron play a crucial role in Linux system administration.\n\nBelow is the syntax to schedule crons:\n\nHere, the s represent minute(s) hour(s) day(s) month(s) weekday(s), respectively.\n\nBelow are some examples of scheduling cron jobs.\n\nThe utility is used to add and edit the cron jobs.\n\nlists the already scheduled scripts for a particular user.\n\nYou can add and edit the cron through .\n\nYou can read more about corn jobs in my other article here.\n\nHow to Debug and Troubleshoot Bash Scripts\n\nDebugging and troubleshooting are essential skills for any Bash scripter. While Bash scripts can be incredibly powerful, they can also be prone to errors and unexpected behavior. In this section, we will discuss some tips and techniques for debugging and troubleshooting Bash scripts.\n\nOne of the most useful techniques for debugging Bash scripts is to set the option at the beginning of the script. This option enables debugging mode, which causes Bash to print each command that it executes to the terminal, preceded by a sign. This can be incredibly helpful in identifying where errors are occurring in your script.\n\nWhen Bash encounters an error, it sets an exit code that indicates the nature of the error. You can check the exit code of the most recent command using the variable. A value of indicates success, while any other value indicates an error.\n\nAnother useful technique for debugging Bash scripts is to insert statements throughout your code. This can help you identify where errors are occurring and what values are being passed to variables.\n\nIf you want your script to exit immediately when any command in the script fails, you can use the option. This option will cause Bash to exit with an error if any command in the script fails, making it easier to identify and fix errors in your script.\n\nWe can troubleshoot crons using the log files. Logs are maintained for all the scheduled jobs. You can check and verify in logs if a specific job ran as intended or not.\n\nFor Ubuntu/Debian, you can find logs at:\n\nThe location varies for other distributions.\n\nA cron job log file can look like this:\n\nIn this article, we started with how to access the terminal and then ran some basic bash commands. We also studied what a bash shell is. We briefly looked at branching the code using loops and conditionals. Finally, we discussed automating the scripts using cron followed by some troubleshooting techniques.\n\nResources for learning more about Bash scripting\n\nIf you want to dig deeper into the world of bash scripting, I would suggest you have a look at this 6-hour course on Linux at freeCodeCamp.\n\nWhat’s your favorite thing you learned from this tutorial? You can also connect with me on any of these platforms. 📧�\n\nSee you in the next tutorial, happy coding 😁"
    },
    {
        "link": "https://devdocs.io/bash",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/44222883/run-a-shell-script-and-immediately-background-it-however-keep-the-ability-to-in",
        "document": "How can I run a shell script and immediately background it, however keep the ability to inspect its output any time by tailing .\n\nIt would be nice if I can foreground the process too later.\n\nIt would be really cool if you can also show me how to \"send\" the backgrounded process in to a GNU screen that may or may not have been initialized."
    },
    {
        "link": "https://stackoverflow.com/questions/59062588/how-to-run-the-a-shell-script-as-background-process-and-move-on-with-next-script",
        "document": "I have below scripts ready with me -\n\nExecute and do not wait for its completion or failure i.e., let the script run in background As soon as is triggered the very next second execute the .\n\nkeeps on waiting for completion of .\n\nLike I have lot of scripts to be run one after another but they should never wait for completion of"
    },
    {
        "link": "https://digitalocean.com/community/tutorials/how-to-use-bash-s-job-control-to-manage-foreground-and-background-processes",
        "document": "In a previous tutorial, we discussed how the , , and commands can be used to control processes on your system. This guide highlights how , the Linux system, and your terminal come together to offer process and job control.\n\nThis article will focus on managing foreground and background processes and will demonstrate how to leverage your shell’s job control functions to gain more flexibility in how you run commands.\n\nTo follow along with this guide, you will need access to a computer running the shell interface. is the default shell on many Linux-based operating systems, and it is available on many Unix-like operating systems, including macOS. Note that this tutorial was validated using a Linux virtual private server running Ubuntu 20.04.\n\nIf you plan to use a remote server to follow this guide, we encourage you to first complete our Initial Server Setup guide. Doing so will set you up with a secure server environment — including a non-root user with privileges and a firewall configured with UFW — which you can use to build your Linux skills.\n\nMost processes that you start on a Linux machine will run in the foreground. The command will begin execution, blocking use of the shell for the duration of the process. The process may allow user interaction or may just run through a procedure and then exit. Any output will be displayed in the terminal window by default. We’ll discuss the basic way to manage foreground processes in the following subsections.\n\nBy default, processes are started in the foreground. This means that until the program exits or changes state, you will not be able to interact with the shell.\n\nSome foreground commands exit very quickly and return you to a shell prompt almost immediately. For instance, the following command will print to the terminal and then return you to your command prompt:\n\nOther foreground commands take longer to execute, blocking shell access for their duration. This might be because the command is performing a more extensive operation or because it is configured to run until it is explicitly stopped or until it receives other user input.\n\nA command that runs indefinitely is the utility. After starting, it will continue to run and update its display until the user terminates the process:\n\nYou can quit by pressing , but some other processes don’t have a dedicated quit function. To stop those, you’ll have to use another method.\n\nSuppose you start a simple loop on the command line. As an example, the following command will start a loop that prints every ten seconds. This loop will continue forever, until explicitly terminated:\n\nUnlike , loops like this have no “quit” key. You will have to stop the process by sending it a signal. In Linux, the kernel can send signals to running processes as a request that they exit or change states. Linux terminals are usually configured to send the “SIGINT” signal (short for “signal interrupt”) to current foreground process when the user presses the key combination. The SIGINT signal tells the program that the user has requested termination using the keyboard.\n\nTo stop the loop you’ve started, hold the key and press the key:\n\nThe loop will exit, returning control to the shell.\n\nThe SIGINT signal sent by the combination is one of many signals that can be sent to programs. Most signals do not have keyboard combinations associated with them and must instead be sent using the command, which will be covered later on in this guide.\n\nAs mentioned previously, foreground process will block access to the shell for the duration of their execution. What if you start a process in the foreground, but then realize that you need access to the terminal?\n\nAnother signal that you can send is the “SIGTSTP” signal. SIGTSTP is short for “signal terminal stop”, and is usually represented as signal number 20. When you press , your terminal registers a “suspend” command, which then sends the SIGTSTP signal to the foreground process. Essentially, this will pause the execution of the command and return control to the terminal.\n\nTo illustrate, use to connect to every 5 seconds. The following command precedes the command with , which will allow you to bypass any shell aliases that artificially set a maximum count on the command:\n\nInstead of terminating the command with , press instead. Doing so will return output like this:\n\nThe command has been temporarily stopped, giving you access to a shell prompt again. You can use the process tool to show this:\n\nThis output indicates that the process is still listed, but that the “STAT” column has a “T” in it. Per the man page, this means that a job that has been “stopped by [a] job control signal”.\n\nThis guide will outline how to change process states in greater depth, but for now you can resume execution of the command in the foreground again by typing:\n\nOnce the process has resumed, terminate it with :\n\nThe main alternative to running a process in the foreground is to allow it to execute in the background. A background process is associated with the specific terminal that started it, but does not block access to the shell. Instead, it executes in the background, leaving the user able to interact with the system while the command runs.\n\nBecause of the way that a foreground process interacts with its terminal, there can be only a single foreground process for every terminal window. Because background processes return control to the shell immediately without waiting for the process to complete, many background processes can run at the same time.\n\nYou can start a background process by appending an ampersand character ( ) to the end of your commands. This tells the shell not to wait for the process to complete, but instead to begin execution and to immediately return the user to a prompt. The output of the command will still display in the terminal (unless redirected), but you can type additional commands as the background process continues.\n\nFor instance, you can start the same process from the previous section in the background by typing:\n\nThe job control system will return output like this:\n\nYou’ll then receive the normal output from the command:\n\nHowever, you can also type commands at the same time. The background process’s output will be mixed among the input and output of your foreground processes, but it will not interfere with the execution of the foreground processes.\n\nTo list all stopped or backgrounded processes, you can use the command:\n\nIf you still have the previous command running in the background, the command’s output will be similar to this:\n\nThis indicates that you currently have a single background process running. The represents the command’s job spec or job number. You can reference this with other job and process control commands, like , , and by preceding the job number with a percentage sign. In this case, you’d reference this job as .\n\nYou can stop the current background process in a few ways. The most straightforward way is to use the command with the associated job number. For instance, you can kill your running background process by typing:\n\nDepending on how your terminal is configured, either immediately or the next time you hit , the job termination status will appear in your output:\n\nIf you check the command again, there won’t be any current jobs.\n\nNow that you know how to start and stop processes in the background, you can learn about changing their state.\n\nThis guide already outlined one way to change a process’s state: stopping or suspending a process with . When processes are in this stopped state, you can move a foreground process to the background or vice versa.\n\nIf you forget to end a command with when you start it, you can still move the process to the background.\n\nThe first step is to stop the process with again. Once the process is stopped, you can use the command to start it again in the background:\n\nYou will receive the job status line again, this time with the ampersand appended:\n\nBy default, the command operates on the most recently-stopped process. If you’ve stopped multiple processes in a row without starting them again, you can reference a specific process by its job number to move the correct process to the background.\n\nNote that not all commands can be backgrounded. Some processes will automatically terminate if they detect that they have been started with their standard input and output directly connected to an active terminal.\n\nYou can also move background processes to the foreground by typing :\n\nThis operates on your most recently backgrounded process (indicated by the in the command’s output). It immediately suspends the process and puts it into the foreground. To specify a different job, use its job number:\n\nOnce a job is in the foreground, you can kill it with , let it complete, or suspend and move it to the background again.\n\nWhether a process is in the background or in the foreground, it is rather tightly tied with the terminal instance that started it. When a terminal closes, it typically sends a SIGHUP signal to all of the processes (foreground, background, or stopped) that are tied to the terminal. This signals for the processes to terminate because their controlling terminal will shortly be unavailable.\n\nThere may be times, though, when you want to close a terminal but keep the background processes running. There are a number of ways of accomplishing this. One of the more flexible ways is to use a terminal multiplexer like or . Another solution is to use a utility that provides the detach functionality of and , like .\n\nHowever, this isn’t always an option. Sometimes these programs aren’t available or you’ve already started the process you need to continue running. Sometimes these could even be overkill for what you need to accomplish.\n\nIf you know when starting the process that you will want to close the terminal before the process completes, you can start it using the command. This makes the started process immune to the SIGHUP signal. It will continue running when the terminal closes and will be reassigned as a child of the init system:\n\nThis will return a line like the following, indicating that the output of the command will be written to a file called :\n\nThis file will be placed in your current working directory if writeable, but otherwise it will be placed in your home directory. This is to ensure that output is not lost if the terminal window is closed.\n\nIf you close the terminal window and open another one, the process will still be running. You will not find it in the output of the command because each terminal instance maintains its own independent job queue. Closing the terminal will cause the job to be destroyed even though the process is still running.\n\nTo kill the process, you’ll have to find its process ID (or “PID”). You can do that with the command (there is also a command, but this two-part method ensures that you are only killing the intended process). Use and the flag to search for the executable:\n\nYou can then kill the process by referencing the returned PID, which is the number in the first column:\n\nYou may wish to remove the file if you don’t need it anymore.\n\nThe command is helpful, but only if you know you will need it at the time you start the process. The job control system provides other methods of achieving similar results with the built-in command.\n\nThe command, in its default configuration, removes a job from the jobs queue of a terminal. This means that it can no longer be managed using the job control mechanisms discussed previously in this guide, like , , , . Instead, the job will immediately be removed from the list in the output and no longer associated with the terminal.\n\nThe command is called by specifying a job number. For instance, to immediately disown job 2, you could type:\n\nThis leaves the process in a state not unlike that of a process after the controlling terminal has been closed. The exception is that any output will be lost when the controlling terminal closes if it is not being redirected to a file.\n\nUsually, you don’t want to remove the process completely from job control if you aren’t immediately closing your terminal window. You can pass the flag to the process instead in order to mark the process to ignore SIGHUP signals, but to otherwise continue on as a regular job:\n\nIn this state, you could use normal job control mechanisms to continue controlling the process until closing the terminal. Upon closing the terminal, you will, once again, be stuck with a process with nowhere to output if you didn’t redirect to a file when starting it.\n\nTo work around that, you can try to redirect the output of your process after it is already running. This is outside the scope of this guide, but this post provides an explanation of how you could do that.\n\nhas another way of avoiding the SIGHUP problem for child processes. The shell option controls whether will send its child processes the SIGHUP signal when it exits.\n\nDespite the aforementioned caveats, the option is perhaps one of the easiest to manage. You can determine whether this feature is on or off by typing:\n\nTo turn it on, type:\n\nNow, if you exit your session by typing , your processes will all continue to run:\n\nThis has the same caveats about program output as the last option, so make sure you have redirected your processes’ output prior to closing your terminal if this is important.\n\nLearning job control and how to manage foreground and background processes will give you greater flexibility when running programs on the command line. Instead of having to open up many terminal windows or SSH sessions, you can often get by with stopping processes early or moving them to the background as needed."
    },
    {
        "link": "https://reddit.com/r/bash/comments/llmk58/background_processes_in_shell",
        "document": "Hi everyone, I was working on a CSH script in which I had to run multiple python script in the background and wait for them to get executed and then return from the main script. Since the working of bash and CSH is almost similar, I believe the background process working will also be similar. I was using : And at the end. That is working for me.\n\nNow what I am interested in is, how do child processes/background processes work. Are they assigned to a separate cpu of the machine like it does using multiprocessing module in python or does it work like a multithreaded job or if their is some other working. Can someone please help me with the above."
    },
    {
        "link": "https://copyconstruct.medium.com/bash-job-control-4a36da3e4aa7",
        "document": "Job Control is one of the more advanced features of Bash, and one, until recently, I hadn’t taken time to learn properly. My general philosophy with scripting has been Python when I can, Bash when I must, to the point where for years I never wrote any Bash.\n\nTaking the time to learn Bash better has always given rise to mixed feelings in me — if something is complicated enough that it can’t be done in rudimentary Bash, then it probably shouldn’t be done in Bash to begin with. What’s the point of investing time in learning the advanced features of something that’s best avoided altogether?\n\nHowever, Bash is unsettlingly pragmatic. More often than not, I’ve found myself in situations where I’ve realized that it’d just be easier and faster to do something in Bash than in Python. So I decided to become conversant with the parts of Bash I’m not terribly familiar with — job control being one of them.\n\nI expect most folks to be aware of foreground and background processes, but it doesn’t hurt to revisit the topic.\n\nIn Bash, a is a sequence of one or more separated by one of the or . Each command in a is executed in its own subshell, which is a separate process from the shell process. These processes are, by default, started in the foreground, meaning once these processes begin execution, the user can’t interact with the shell until the process completes or changes state.\n\nIt’s also possible to run a process in the background. Background processes don’t restrict access to the shell but execute in the background. They return control to the shell immediately upon start. Any command can be started in the background by appending an to it.\n\nIn the example above, the function is started in the background. The script exits immediately, while the function executes in the background.\n\nBuiltins like , and operate on both and . However, a isn’t quite the same as a .\n\nA is something that’s tracked by the shell. The shell maintains a table of currently executing background processes and processes that have been suspended.\n\nIf I suspend a running emacs process with , and then type on the terminal (the option to the builtin prints the of the job), I will see:\n\nHowever, if I open a new shell and type , I wouldn't see emacs being listed as a suspended job. This is because the new shell isn’t tracking the suspended emacs process. However, the new shell is still aware of the process , since a process is tracked by the operating system and not the shell from which it was launched.\n\nA can be thought of as a job identifier or job number.\n\nAs mentioned previously, a is purely a shell-level construct. The shell tracks all suspended and background processes. The is simply an identifier used by the shell to track the suspended or backgrounded process.\n\nIn the above example:\n\nis the . The is used by the job control builtins to operate on jobs. To refer to a in the shell, it needs to be prefixed with a .\n\nJob control can be enabled using the builtin.\n\n, and are three job control commands that work purely on jobs.\n\nHowever, the can also be used with process control commands like , , and .\n\nUsed to resume a suspended job in the background.\n\nIf no is provided, the currently running job is used. Trying to use this with an invalid results in an error.\n\nUsed to resume a in the foreground, making it the current job.\n\nThe command lists all such jobs tracked by the current shell.\n\nWere you to run the script above, you’d see the background jobs listed amidst the output of function .\n\nworks on both and . When job control is enabled, the command can be used to remove jobs from the job table of the shell.\n\nThe option is used when we don’t want the job removed from the shell’s table but we wish to turn off being sent to the job by the shell when the shell that launched it receives one.\n\nThe option without a will remove all the jobs from the table, whereas the option will only remove currently running jobs.\n\nUsed to suspend the shell. The shell’s parent process can resume it with a signal.\n\n, like , works on both processes and jobs. Job control mode needs to be enabled for to work with jobs.\n\ntells the shell to wait until the subprocess specified by the or the exits. The return code is that of the last command the shell waited for. When a is provided, the shell will wait until all the processes in the job exit.\n\nThe above script, unlike its predecessor, waits for the function to complete before it exits.\n\nInvoking without any arguments causes the shell to wait for all currently active child processes. The following are the arguments accepts:\n\n: waits for a single job to terminate and returns its exit status.\n\n: In the job control mode, will return when the job changes state. The option causes to wait for each or to terminate before returning.\n\nIf neither nor specifies an active child process of the shell, the return status is 127.\n\n, like , works on both processes and jobs. The job control mode needs to be enabled for to work with jobs.\n\nThe builtin sends a signal to the process specified by the or . works with the following options:\n\n: is either a case-insensitive signal name such as (with or without the prefix) OR a signal number.\n\n: is a signal number ( will send a to the job with the 1)\n\nIf and are not present, is used.\n\nIn the above example, we start two background jobs. We then proceed to kill one with an (line 16), and another with a (line 18).\n\nSetting causes the status of terminated background jobs to be reported immediately, rather than before printing the next primary prompt.\n\nThe shell prints a warning message when one tries to exit a shell that has suspended jobs, until a second exit is attempted at which point the shell actually exits without further ado. If the option is enabled, the shell lists each job and its status the first time one tries to exit the shell.\n\ncan be enabled with the builtin.\n\nSo far we’ve only referrred to jobs with a , where is the jobspec. There exist other ways to refer to jobs:\n\n— “current” job (last foreground job stopped or last background job started)\n\n — “current” job (last foreground job stopped or last background job started)\n\n — current job\n\n — previous job\n\nA can also be referred to using a prefix of the name used to start it, or using a substring that appears in its command line. If the prefix or substring matches more than one , Bash reports an error.\n\n— Invokes a job beginning with string foo\n\n — Invokes a job contains within it string foo\n\nFor example, C-z can be used to suspend emacs. To bring back the suspended emacs process, will do the trick.\n\nIn long running scripts, it’s useful to be able to start jobs in the background and be able to control when and how they terminate.\n\nWhether a script of even this modest level of complexity should be written in Bash as opposed to a real programming language like Go or Python is a matter of opinion. However, it’s also odds on that such a script might be a few lines of Bash as opposed to tens of lines in Go or Python. Furthermore, if this happens to be a script that needs to run in an environment that’s not one’s laptop, shipping a Go binary or setting up a Python environment along with all the dependencies might be non-trivial. Bash is worth learning, not least since it’s more ubiquitous than any other language."
    }
]