[
    {
        "link": "https://digitalocean.com/community/tutorials/java-httpurlconnection-example-java-http-request-get-post",
        "document": "The class from package can be used to send a Java HTTP Request programmatically. In this article, you will learn how to use in a Java program to send and requests and then print the response.\n\nFor this example, you should have completed the Spring MVC Tutorial because it has URLs for and HTTP methods.\n\nThe HTML of the login page contains the following form:\n\nYou can construct a request to:\n\nThis will serve as the basis for the example.\n\nHere are the steps for sending Java HTTP requests using class:\n• Create a object from the or URL String.\n• Call the method on the URL object that returns an instance of .\n• Set the request method in instance (default value is ).\n• Call method on instance to set request header values (such as , , etc).\n• We can call to get the response HTTP code. This way, we know if the request was processed successfully or if there was any HTTP error message thrown.\n• For , use and to read the response and process it accordingly.\n• For , before the code handles the response, it needs to get the from the instance and write parameters into it.\n\nHere is an example program that uses to send Java and requests:\n\nCompile and run the code. It will produce the following output:\n\nCompare this output to the browser HTTP response.\n\nIf you have to send and requests over HTTPS protocol, then you need to use instead of . will handle the SSL handshake and encryption.\n\nIn this article, you learned how to use in a Java program to send and requests and then print the response.\n\nContinue your learning with more Java tutorials."
    },
    {
        "link": "https://baeldung.com/httpurlconnection-post",
        "document": "In this tutorial, we’ll demonstrate how to make a JSON POST request using HttpURLConnection.\n\nLet’s create a URL object with a target URI string that accepts the JSON data via HTTP POST method:\n\nFrom the above URL object, we can invoke the openConnection method to get the HttpURLConnection object.\n\nWe can’t instantiate HttpURLConnection directly, as it’s an abstract class:\n\nTo send a POST request, we’ll have to set the request method property to POST:\n\nSet the “content-type” request header to “application/json” to send the request content in JSON form. This parameter has to be set to send the request body in JSON format.\n\nFailing to do so, the server returns HTTP status code “400-bad request”:\n\nSet the “Accept” request header to “application/json” to read the response in the desired format:\n\n2.6. Ensure the Connection Will Be Used to Send Content\n\nTo send request content, let’s enable the URLConnection object’s doOutput property to true.\n\nOtherwise, we won’t be able to write content to the connection output stream:\n\nWe would need to write it:\n\nGet the input stream to read the response content. Remember to use try-with-resources to close the response stream automatically.\n\nRead through the whole response content, and print the final response string:\n\nIf the response is in JSON format, use any third-party JSON parsers such as Jackson library, Gson, or org.json to parse the response.\n\nIn this article, we learned how to make a POST request with JSON content body using HttpURLConnection."
    },
    {
        "link": "https://stackoverflow.com/questions/26940410/using-httpurlconnection-to-post-in-java",
        "document": "I've read lots and tried lots relating to HTTP POSTS using HttpURLConnection and almost everything I come across has a similar structure which starts with these 3 lines:\n\nWhen I try this I always get a \"Connection Already Established\" exception when calling setRequestMethod, which makes perfect sense as I'm clearly calling openConnection before setting the request type. Although reading the docs openConnection doesn't actually open the connection in theory.\n\nThere are several posts about this problem on SO such as this and this. I don't understand however why every piece of advice about how to write this code has these 3 lines in this order.\n\nI'm guessing this code must work in most instances as someone must have tested it, so why doesn't this code work for me? How should I be writing this code?\n\nI am aware these are other libraries I can use out there, I'm just wondering why this doesn't work."
    },
    {
        "link": "https://stackoverflow.com/questions/4205980/java-sending-http-parameters-via-post-method-easily",
        "document": "I am successfully using this code to send requests with some parameters via method: Now, I may need to send the parameters (i.e. param1, param2, param3) via method because they are very long. I was thinking to add an extra parameter to that method (i.e. String httpMethod). How can I change the code above as little as possible to be able to send paramters either via or ? would have done the trick, but the parameters are still sent via GET method. Has got any method that would help? Is there any helpful Java construct? Any help would be very much appreciated."
    },
    {
        "link": "https://geeksforgeeks.org/how-to-use-httpurlconnection-for-sending-http-post-requests-in-java",
        "document": "How to use HttpURLConnection for sending HTTP POST requests in Java?\n\nHttpURLConnection is a Java class that allows us to send HTTP requests and receive responses from servers. It is a powerful tool for communicating with common web servers used in Java development, including Android.\n\nHere is an overview of its main features.\n• None HTTP requests can be sent using several methods such as GET, POST, PUT, and DELETE.\n• None Getting an HTTP response: Get the content, subject, and status code of the response.\n\nIn this article, we focus on sending an HTTP POST using HttpURLConnection to send data and get a response from the server.\n\nHere is an API example that we have used to test Java code. It just takes data and returns it. Now let's see how to call API using HttpURLConnection in Java. To use HttpURLConnection, we need a working API that can return a response.\n• None First, we need to set the API URL and establish a connection between the program and the API.\n• None After successfully establishing the connection, we then call the API passing in the necessary input it needs.\n• None After obtaining the response, we check if the API ran successfully by checking the responseCode.\n• None If the responseCode is HTTP_OK (200), then we know that the API ran successfully without any errors.\n\nHere is the Java Code for using HttpURLConnection to send \"POST\" Requests:\n\n// JSON String which will be sent to the API. // Making an object to point to the API URL // attempts to establish a connection to the URL represented by the obj. // Set request method and enable writing to the connection // connection.getOutputStream() purpose is to obtain an output stream for sending data to the server. // HTTP_OK or 200 response code generally means that the server ran successfully without any errors // connection.getInputStream() purpose is to obtain an input stream for reading the server's response. // Adds every line to response till the end of file. // If any error occurs during api call it will go into catch block\n\nBelow we can see the output video of testing the API in POSTMAN tool:\n• None The code configures the target URL and JSON String to be passed to the API Call. It then uses HttpURLConnection to create a connection object to the URL.\n• None This sets the request method to \"POST\" and provides input for the connection. It also changes the Content-Type header to \"application/json\" to specify the data type.\n• None The code uses connection.getOutputStream() to get an output stream and write data using DataOutputStream. It then flows the stream to ensure that the data is sent over the connection.\n• None Attempt to read a response from the server using connection.getInputStream(). It reads the response line by line and creates a response string.\n• None Once we get the response successfully, we print it in the console.\n\nHttpURLConnection Methods used in the code:\n\nInherited from URLConnection class, its purpose is to create a new connection object targeting a specific URL provided by the user. This method is used to set the request type (GET, POST, PUT etc) Enables or disables the request body for the connection. Sets the type of the request header field. Returns an output stream that writes into the connection. Returns the responseCode from the server's response. Returns an input stream object for reading the response from the server. closes the connection to the server."
    },
    {
        "link": "https://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html",
        "document": "A URLConnection with support for HTTP-specific features. See the spec for details.\n\nEach HttpURLConnection instance is used to make a single request but the underlying network connection to the HTTP server may be transparently shared by other instances. Calling the close() methods on the InputStream or OutputStream of an HttpURLConnection after a request may free network resources associated with this instance but has no effect on any shared persistent connection. Calling the disconnect() method may close the underlying socket if a persistent connection is otherwise idle at that time.\n\nThe HTTP protocol handler has a few settings that can be accessed through System Properties. This covers Proxy settings as well as various other settings.\n\nIf a security manager is installed, and if a method is called which results in an attempt to open a connection, the caller must possess either:-\n• a \"connect\" to the host/port combination of the destination URL or\n\nIf automatic redirection is enabled, and this request is redirected to another destination, then the caller must also have permission to connect to the redirected host/URL."
    },
    {
        "link": "https://docs.oracle.com/javase/8/docs/api/index.html?java/net/HttpURLConnection.html",
        "document": "JavaScript is disabled on your browser.\n\nThis document is designed to be viewed using the frames feature. If you see this message, you are using a non-frame-capable web client. Link to Non-frame version."
    },
    {
        "link": "https://geeksforgeeks.org/java-net-httpurlconnection-class-java",
        "document": "HttpURLConnection class is an abstract class directly extending from URLConnection class. It includes all the functionality of its parent class with additional HTTP-specific features. HttpsURLConnection is another class that is used for the more secured HTTPS protocol.\n\nIt is one of the popular choices among Java developers for interacting with web servers and the android developing team has officially suggested using it wherever possible. Later we will be illustrating a simple implementation of an interactive application that uses Microsoft emotion API to retrieve the emotion scores from an image using methods of HttpURLConnection class.\n• HttpURLConnection(URL u): Constructs the httpurlconnection to specified URL\n\nMethods (Other than in URLConnection class)\n\nIllustration: The whole process can be understood in a nutshell as follows:\n\nConnecting to the server of Microsoft emotion API using the below URL\n\nSetting the properties and methods for firing the request: In this step, we set the methods and properties of our request object. First, we set the method as a request method to be invoked as POST. We also set the User-Agent property to ensure that our request is not blocked by the server because of an unexpected response type which otherwise would work fine on any web browser.\n\nFiring the http get request: After we have created the URL and have created a HttpURLConnection object, we have to actually fire a request. It can explicitly be done by connect() method. It is rather implicitly done whenever we try to use any response message such as getOutputStream() etc.\n\nWriting to Server: Once we obtain the outputstream to the server we upload our image to the server for processing.\n\nReading the response from the server: After obtaining an inputstream, we use the bufferedreader to output the results from the server.\n\nOutput Explanation: To test this program, one should provide the number of images to process and then provide the URL of the images. You can leave the content length property unset as the server would handle it automatically, but if you know the length, modify it each time accordingly. In the given source code, as the content length is set to 83 bytes, a URL of that size should be used."
    },
    {
        "link": "https://developer.android.com/reference/java/net/HttpURLConnection",
        "document": "A URLConnection with support for HTTP-specific features. See the spec for details.\n\nUses of this class follow a pattern:\n• Obtain a new by calling and casting the result to .\n• Prepare the request. The primary property of a request is its URI. Request headers may also include metadata such as credentials, preferred content types, and session cookies.\n• Optionally upload a request body. Instances must be configured with if they include a request body. Transmit data by writing to the stream returned by .\n• Read the response. Response headers typically include metadata such as the response body's content type and length, modified dates and session cookies. The response body may be read from the stream returned by . If the response has no body, that method returns an empty stream.\n• Disconnect. Once the response body has been read, the should be closed by calling . Disconnecting releases the resources held by a connection so they may be closed or reused.\n\nFor example, to retrieve the webpage at :\n\nCallingon a URL with the \"https\" scheme will return an, which allows for overriding the defaultand. An application-suppliedcreated from ancan provide a customfor verifying certificate chains and a customfor supplying client certificates. Seefor more details.will follow up to five HTTP redirects. It will follow redirects from one origin server to another. This implementation doesn't follow redirects from HTTPS to HTTP or vice versa.\n\nIf the HTTP response indicates that an error occurred, will throw an . Use to read the error response. The headers can be read in the normal way using ,\n\nTo upload data to a web server, configure the connection for output using\n\nFor best performance, you should call either when the body length is known in advance, or when it is not. Otherwise will be forced to buffer the complete request body in memory before it is transmitted, wasting (and possibly exhausting) heap and increasing latency.\n\nFor example, to perform an upload:\n\nThe input and output streams returned by this class are. Most callers should wrap the returned streams withor. Callers that do only bulk reads or writes may omit buffering.\n\nWhen transferring large amounts of data to or from a server, use streams to limit how much data is in memory at once. Unless you need the entire body to be in memory at once, process it as a stream (rather than storing the complete body as a single byte array or string).\n\nTo reduce latency, this class may reuse the same underlying for multiple request/response pairs. As a result, HTTP connections may be held open longer than necessary. Calls to may return the socket to a pool of connected sockets.\n\nBy default, this implementation of requests that servers use gzip compression and it automatically decompresses the data for callers of . The Content-Encoding and Content-Length response headers are cleared in this case. Gzip compression can be disabled by setting the acceptable encodings in the request header:\n\nSetting the Accept-Encoding request header explicitly disables automatic decompression and leaves the response headers intact; callers must handle decompression as needed, according to the Content-Encoding header of the response.\n\nreturns the number of bytes transmitted and cannot be used to predict how many bytes can be read from for compressed streams. Instead, read that stream until it is exhausted, i.e. when returns -1.\n\nSome Wi-Fi networks block Internet access until the user clicks through a sign-on page. Such sign-on pages are typically presented by using HTTP redirects. You can useto test if your connection has been unexpectedly redirected. This check is not valid untilthe response headers have been received, which you can trigger by callingor. For example, to check that a response was not redirected to an unexpected host:supports HTTP basic authentication . Useto set the VM-wide authentication handler:Unless paired with HTTPS, this isa secure mechanism for user authentication. In particular, the username, password, request and response are all transmitted over the network without encryption.To establish and maintain a potentially long-lived session between client and server,includes an extensible cookie manager. Enable VM-wide cookie management usingandBy default,accepts cookies from the origin server only. Two other policies are included:and. Implementto define a custom policy.\n\nThe default keeps all accepted cookies in memory. It will forget these cookies when the VM exits. Implement to define a custom cookie store.\n\nIn addition to the cookies set by HTTP responses, you may set cookies programmatically. To be included in HTTP request headers, cookies must have the domain and path properties set.\n\nBy default, new instances of work only with servers that support RFC 2965 cookies. Many web servers support only the older specification, RFC 2109. For compatibility with the most web servers, set the cookie version to 0.\n\nFor example, to receive in French:\n\nuses the method by default. It will use if has been called. Other HTTP methods ( , , , and ) can be used with .\n\nBy default, this class will connect directly to the origin server . It can also connect via anorproxy. To use a proxy, usewhen creating the connection.\n\nThis class includes transparent support for IPv6. For hosts with both IPv4 and IPv6 addresses, it will attempt to connect to each of a host's addresses until a connection is established.\n\nAndroid 4.0 (Ice Cream Sandwich, API level 15) includes a response cache. Seefor instructions on enabling HTTP caching in your application.Prior to Android 2.2 (Froyo), this class had some frustrating bugs. In particular, callingon a readablecould poison the connection pool . Work around this by disabling connection pooling:\n\nEach instance of may be used for one request/response pair. Instances of this class are not thread safe.\n\nIndicates that other requests to the server are unlikely in the near future. Returns the error stream if the connection failed but the server sent useful data nonetheless. Returns a indicating whether or not HTTP redirects (3xx) should be automatically followed. Returns the value for the th header field. Returns the value of the named field parsed as date. Returns the key for the th header field. Returns the value of this 's field. Returns a object representing the permission necessary to connect to the destination host and port. Gets the status code from an HTTP response message. Gets the HTTP response message, if any, returned along with the response code from a server. This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is not known in advance. This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is known in advance. This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is known in advance. Sets whether HTTP redirects (requests with response code 3xx) should be automatically followed by this class. Sets whether HTTP redirects (requests with response code 3xx) should be automatically followed by this instance. Set the method for the URL request, one of: are legal, subject to protocol restrictions. Indicates if the connection is going through a proxy.\n\nOpens a communications link to the resource referenced by this URL, if such a connection has not already been established. Returns the value of the field for this object. Retrieves the contents of this URL connection. Retrieves the contents of this URL connection. Returns the value of the header field. Returns the value of the header field. Returns the value of the header field as a long. Returns the value of the header field. Returns the value of the header field. Returns the default value of the field. This method was deprecated in API level 15. The instance specific getRequestProperty method should be used after an appropriate instance of URLConnection is obtained. Returns the default value of a 's flag. Returns the value of this 's flag. Returns the value of this 's flag. Returns the value of the header field. Returns the value of the named header field. Returns the value for the th header field. Returns the value of the named field parsed as date. Returns the value of the named field parsed as a number. Returns the key for the th header field. Returns the value of the named field parsed as a number. Returns an unmodifiable Map of the header fields. Returns the value of this object's field. Returns an input stream that reads from this open connection. Returns the value of the header field. Returns an output stream that writes to this connection. Returns a permission object representing the permission necessary to make the connection represented by this object. Returns an unmodifiable Map of general request properties for this connection. Returns the value of the named general request property for this connection. Returns the value of this 's field. Returns the value of this 's field. Tries to determine the content type of an object, based on the specified \"file\" component of a URL. Tries to determine the type of an input stream based on the characters at the beginning of the input stream. Set the value of the field of this . Sets a specified timeout value, in milliseconds, to be used when opening a communications link to the resource referenced by this URLConnection. Sets the of an application. Sets the default value of the field for all future objects to the specified value. This method was deprecated in API level 15. The instance specific setRequestProperty method should be used after an appropriate instance of URLConnection is obtained. Invoking this method will have no effect. Sets the default value of the field to the specified value. Sets the value of the field for this to the specified value. Sets the value of the field for this to the specified value. Sets the value of the field of this to the specified value. Sets the read timeout to a specified timeout, in milliseconds. Sets the value of the field of this to the specified value. Creates and returns a copy of this object. Indicates whether some other object is \"equal to\" this one. Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. Returns the runtime class of this . Returns a hash code value for the object. Wakes up a single thread that is waiting on this object's monitor. Wakes up all threads that are waiting on this object's monitor. Causes the current thread to wait until it is awakened, typically by being notified or interrupted, or until a certain amount of real time has elapsed. Causes the current thread to wait until it is awakened, typically by being notified or interrupted, or until a certain amount of real time has elapsed. Causes the current thread to wait until it is awakened, typically by being notified or interrupted."
    },
    {
        "link": "https://digitalocean.com/community/tutorials/java-httpurlconnection-example-java-http-request-get-post",
        "document": "The class from package can be used to send a Java HTTP Request programmatically. In this article, you will learn how to use in a Java program to send and requests and then print the response.\n\nFor this example, you should have completed the Spring MVC Tutorial because it has URLs for and HTTP methods.\n\nThe HTML of the login page contains the following form:\n\nYou can construct a request to:\n\nThis will serve as the basis for the example.\n\nHere are the steps for sending Java HTTP requests using class:\n• Create a object from the or URL String.\n• Call the method on the URL object that returns an instance of .\n• Set the request method in instance (default value is ).\n• Call method on instance to set request header values (such as , , etc).\n• We can call to get the response HTTP code. This way, we know if the request was processed successfully or if there was any HTTP error message thrown.\n• For , use and to read the response and process it accordingly.\n• For , before the code handles the response, it needs to get the from the instance and write parameters into it.\n\nHere is an example program that uses to send Java and requests:\n\nCompile and run the code. It will produce the following output:\n\nCompare this output to the browser HTTP response.\n\nIf you have to send and requests over HTTPS protocol, then you need to use instead of . will handle the SSL handshake and encryption.\n\nIn this article, you learned how to use in a Java program to send and requests and then print the response.\n\nContinue your learning with more Java tutorials."
    }
]