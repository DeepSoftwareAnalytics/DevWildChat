[
    {
        "link": "https://npmjs.com/package/xlsx",
        "document": "The SheetJS Community Edition offers battle-tested open-source solutions for extracting useful data from almost any complex spreadsheet and generating new spreadsheets that will work with legacy and modern software alike.\n\nSheetJS Pro offers solutions beyond data processing: Edit complex templates with ease; let out your inner Picasso with styling; make custom sheets with images/graphs/PivotTables; evaluate formula expressions and port calculations to web apps; automate common spreadsheet tasks, and much more!\n\nThe complete browser standalone build is saved to and can be directly added to a page with a tag:\n\nThe ECMAScript Module build is saved to and can be directly added to a page with a tag using :\n\nThe npm package also exposes the module with the parameter, supported in Angular and other projects:\n\ncan be imported in Deno. It is available from :\n\nThe module also ships with for use with :\n\nis an ExtendScript build for Photoshop and InDesign that is included in the package. It can be directly referenced with a directive:\n\nMost scenarios involving spreadsheets and data can be broken into 5 parts:\n• Acquire Data: Data may be stored anywhere: local or remote files, databases, HTML TABLE, or even generated programmatically in the web browser.\n• Extract Data: For spreadsheet files, this involves parsing raw bytes to read the cell data. For general JS data, this involves reshaping the data.\n• Process Data: From generating summary statistics to cleaning data records, this step is the heart of the problem.\n• Package Data: This can involve making a new spreadsheet or serializing with or writing XML or simply flattening data for UI tools.\n• Release Data: Spreadsheet files can be uploaded to a server or written locally. Data can be presented to users in an HTML TABLE or data grid.\n\nA common problem involves generating a valid spreadsheet export from data stored in an HTML table. In this example, an HTML TABLE on the page will be scraped, a row will be added to the bottom with the date of the report, and a new file will be generated and downloaded locally. takes care of packaging the data and attempting a local download:\n\nThis library tries to simplify steps 2 and 4 with functions to extract useful data from spreadsheet files ( / ) and generate new spreadsheet files from data ( / ). Additional utility functions like work with other common data sources like HTML tables.\n\nThis documentation and various demo projects cover a number of common scenarios and approaches for steps 1 and 5.\n\n\"Utility Functions\" details utility functions for translating JSON Arrays and other common JS structures into worksheet objects.\n\nData processing should fit in any workflow\n\nThe library does not impose a separate lifecycle. It fits nicely in websites and apps built using any framework. The plain JS data objects play nice with Web Workers and future APIs.\n\nThe \"Common Spreadsheet Format\" is a simple object representation of the core concepts of a workbook. The various functions in the library provide low-level tools for working with the object.\n\nFor friendly JS processing, there are utility functions for converting parts of a worksheet to/from an Array of Arrays. The following example combines powerful JS Array methods with a network request library to download data, select the information we want and create a workbook file:\n\nThe parser covers a wide gamut of common spreadsheet file formats to ensure that \"HTML-saved-as-XLS\" files work as well as actual XLS or XLSX files.\n\nThe writer supports a number of common output formats for broad compatibility with the data ecosystem.\n\nTo the greatest extent possible, data processing code should not have to worry about the specific file formats involved.\n\nOther examples are included in the showcase.\n\nhttps://sheetjs.com/demos/modify.html shows a complete example of reading, modifying, and writing files.\n\nhttps://github.com/SheetJS/sheetjs/blob/HEAD/bin/xlsx.njs is the command-line tool included with node installations, reading spreadsheet files and exporting the contents in various formats.\n\nThe method can extract data from spreadsheet bytes stored in a JS string, \"binary string\", NodeJS buffer or typed array ( or ).\n\nThe method attempts to read a spreadsheet file at the supplied path. Browsers generally do not allow reading files in this way (it is deemed a security risk), and attempts to read files in this way will throw an error.\n\nThe second argument is optional. \"Parsing Options\" covers the supported properties and behaviors.\n\nHere are a few common scenarios (click on each subtitle to see the code):\n\nMore detailed examples are covered in the included demos\n\nJSON and JS data tend to represent single worksheets. This section will use a few utility functions to generate workbooks.\n\nThe utility function creates an empty workbook with no worksheets.\n\nSpreadsheet software generally require at least one worksheet and enforce the requirement in the user interface. This library enforces the requirement at write time, throwing errors if an empty workbook is passed to write functions.\n\nCreate a worksheet from an array of arrays of JS values\n\nThe utility function walks an \"array of arrays\" in row-major order, generating a worksheet object. The following snippet generates a sheet with cell set to the string , cell set to , etc:\n\n\"Array of Arrays Input\" describes the function and the optional argument in more detail.\n\nCreate a worksheet from an array of JS objects\n\nThe utility function walks an array of JS objects in order, generating a worksheet object. By default, it will generate a header row and one row per object in the array. The optional argument has settings to control the column order and header output.\n\n\"Array of Objects Input\" describes the function and the optional argument in more detail.\n\n\"Zen of SheetJS\" contains a detailed example \"Get Data from a JSON Endpoint and Generate a Workbook\"\n\nis an interactive data grid for previewing and modifying structured data in the web browser. The demo includes a sample script with the function for converting from x-spreadsheet data object to a workbook. https://oss.sheetjs.com/sheetjs/x-spreadsheet is a live demo.\n\nCreate a worksheet by scraping an HTML TABLE in the page\n\nThe utility function takes a DOM TABLE element and iterates through the rows to generate a worksheet. The argument is optional. \"HTML Table Input\" describes the function in more detail.\n\nCreate a workbook by scraping an HTML TABLE in the page\n\nThe utility function follows the same logic as . After generating a worksheet, it creates a blank workbook and appends the spreadsheet.\n\nThe options argument supports the same options as , with the addition of a property to control the worksheet name. If the property is missing or no options are specified, the default name is used.\n\nHere are a few common scenarios (click on each subtitle to see the code):\n\nThe \"Common Spreadsheet Format\" is a simple object representation of the core concepts of a workbook. The utility functions work with the object representation and are intended to handle common use cases.\n\nThe utility function appends a worksheet to the workbook. The third argument specifies the desired worksheet name. Multiple worksheets can be added to a workbook by calling the function multiple times. If the worksheet name is already used in the workbook, it will throw an error.\n\nAppend a Worksheet to a Workbook and find a unique name\n\nIf the fourth argument is , the function will start with the specified worksheet name. If the sheet name exists in the workbook, a new worksheet name will be chosen by finding the name stem and incrementing the counter:\n\nThe property of the workbook object is a list of the worksheet names in \"tab order\". API functions will look at this array.\n\nThe property of the workbook object is an object whose keys are names and whose values are worksheet objects. By reassigning to a property of the object, the worksheet object can be changed without disrupting the rest of the worksheet structure.\n\nThe utility function modifies cell values in a worksheet. The first argument is the worksheet object. The second argument is an array of arrays of values. The key of the third argument controls where cells will be written. The following snippet sets and :\n\n\"Array of Arrays Input\" describes the function and the optional argument in more detail.\n\nThe \"Common Spreadsheet Format\" section describes the object structures in greater detail.\n\nThe method attempts to package data from the workbook into a file in memory. By default, XLSX files are generated, but that can be controlled with the property of the argument. Based on the option, the data can be stored as a \"binary string\", JS string, or Buffer.\n\nThe second argument is required. \"Writing Options\" covers the supported properties and behaviors.\n\nThe method packages the data and attempts to save the new file. The export file format is determined by the extension of ( signals XLSX export, signals XLSB export, etc).\n\nThe method uses platform-specific APIs to initiate the file save. In NodeJS, can create a file. In the web browser, a download is attempted using the HTML5 attribute, with fallbacks for IE.\n\nGenerate and attempt to save an XLSX file\n\nThe method embeds a number of different export functions. This is great for developer experience but not amenable to tree shaking using the current developer tools. When only XLSX exports are needed, this method avoids referencing the other export functions.\n\nThe second argument is optional. \"Writing Options\" covers the supported properties and behaviors.\n\nThe included demos cover mobile apps and other special deployments.\n\nThe streaming write functions are available in the object. They take the same arguments as the normal write functions but return a NodeJS Readable Stream.\n• is the streaming version of .\n• is the streaming version of .\n• is the streaming version of .\n\nJSON and JS data tend to represent single worksheets. The utility functions in this section work with single worksheets.\n\nThe \"Common Spreadsheet Format\" section describes the object structure in more detail. is an ordered list of the worksheet names. is an object whose keys are sheet names and whose values are worksheet objects.\n\nThe \"first worksheet\" is stored at .\n\nCreate an array of JS objects from a worksheet\n\nCreate an array of arrays of JS values from a worksheet\n\nThe utility function walks a workbook in row-major order, generating an array of objects. The second argument controls a number of export decisions including the type of values (JS values or formatted text). The \"JSON\" section describes the argument in more detail.\n\nBy default, scans the first row and uses the values as headers. With the option, the function exports an array of arrays of values.\n\nis an interactive data grid for previewing and modifying structured data in the web browser. The demo includes a sample script with the function for converting from a workbook to x-spreadsheet data object. https://oss.sheetjs.com/sheetjs/x-spreadsheet is a live demo.\n\nThe utility function generates HTML code based on the worksheet data. Each cell in the worksheet is mapped to a element. Merged cells in the worksheet are serialized by setting and attributes.\n\nThe utility function generates HTML code that can be added to any DOM element by setting the :\n\nCombining with , constructing a site from a workbook is straightforward:\n\nThis snapshot is designed to replicate the \"CSV UTF8 ( )\" output type. \"Delimiter-Separated Output\" describes the function and the optional argument in more detail.\n\nThis snapshot is designed to replicate the \"UTF16 Text ( )\" output type. \"Delimiter-Separated Output\" describes the function and the optional argument in more detail.\n\nThis snapshot generates an array of entries representing the embedded formulae. Array formulae are rendered in the form while plain cells are rendered in the form . String literals are prefixed with an apostrophe , consistent with Excel's formula bar display.\n\n\"Formulae Output\" describes the function in more detail.\n\nis the exposed variable in the browser and the exported node variable\n\nis the version of the library (added by the build script).\n\nis an embedded version of the format library.\n\nParse options are described in the Parsing Options section.\n\nattempts to write to . In browser-based environments, it will attempt to force a client-side download.\n\nattempts to write to . If is omitted, the writer will use the third argument as the callback.\n\nWrite options are described in the Writing Options section.\n\nUtilities are available in the object and are described in the Utility Functions section:\n• converts an array of arrays of JS data to a worksheet.\n• converts an array of JS objects to a worksheet.\n• adds an array of arrays of JS data to an existing worksheet.\n• adds an array of JS objects to an existing worksheet.\n• converts a worksheet object to an array of JSON objects.\n• generates a list of the formulae (with value fallbacks).\n• generates the text value for a cell (using number formats).\n\nCell address objects are stored as where and are 0-indexed column and row numbers, respectively. For example, the cell address is represented by the object .\n\nCell range objects are stored as where is the first cell and is the last cell in the range. The ranges are inclusive. For example, the range is represented by the object . Utility functions perform a row-major order walk traversal of a sheet range:\n\nCell objects are plain JS objects with keys and values following the convention:\n\nBuilt-in export utilities (such as the CSV exporter) will use the text if it is available. To change a value, be sure to delete (or set it to ) before attempting to export. The utilities will regenerate the text from the number format ( ) and the raw value if possible.\n\nThe actual array formula is stored in the field of the first cell in the array range. Other cells in the range will omit the field.\n\nThe raw value is stored in the value property, interpreted based on the type property. This separation allows for representation of numbers as well as numeric text. There are 6 valid cell types:\n\nType is the Number type. This includes all forms of data that Excel stores as numbers, such as dates/times and Boolean fields. Excel exclusively uses data that can be fit in an IEEE754 floating point number, just like JS Number, so the field holds the raw number. The field holds formatted text. Dates are stored as numbers by default and converted with .\n\nType is the Date type, generated only when the option is passed. Since JSON does not have a natural Date type, parsers are generally expected to store ISO 8601 Date strings like you would get from . On the other hand, writers and exporters should be able to handle date strings and JS Date objects. Note that Excel disregards timezone modifiers and treats all dates in the local timezone. The library does not correct for this error.\n\nType is the String type. Values are explicitly stored as text. Excel will interpret these cells as \"number stored as text\". Generated Excel files automatically suppress that class of error, but other formats may elicit errors.\n\nType represents blank stub cells. They are generated in cases where cells have no assigned value but hold comments or other metadata. They are ignored by the core library data processing utility functions. By default these cells are not generated; the parser option must be set to .\n\nEach key that does not start with maps to a cell (using notation)\n\nreturns the cell object for the specified address.\n\nSpecial sheet keys (accessible as , each starting with ):\n• : A-1 based range representing the sheet range. Functions that work with sheets should use this parameter to determine the range. Cells that are assigned outside of the range are not processed. In particular, when writing a sheet by hand, cells outside of the range are not included Functions that handle sheets should test for the presence of field. If the is omitted or is not a valid range, functions are free to treat the sheet as empty or attempt to guess the range. The standard utilities that ship with this library treat sheets as empty (for example, the CSV output is empty string). When reading a worksheet with the property set, the ref parameter will use the restricted range. The original range is set at\n• : Object representing the page margins. The default values follow Excel's \"normal\" preset. Excel also has a \"wide\" and a \"narrow\" preset but they are stored as raw measurements. The main properties are listed below:\n\nIn addition to the base sheet keys, worksheets also add:\n• : array of column properties objects. Column widths are actually stored in files in a normalized manner, measured in terms of the \"Maximum Digit Width\" (the largest width of the rendered digits 0-9, in pixels). When parsed, the column objects store the pixel width in the field, character width in the field, and the maximum digit width in the field.\n• : array of row properties objects as explained later in the docs. Each row object encodes properties including row height and visibility.\n• : array of range objects corresponding to the merged cells in the worksheet. Plain text formats do not support merge cells. CSV export will write all cells in the merge range if they exist, so be sure that only the first cell (upper-left) in the range is set.\n• : configure how outlines should behave. Options default to the default settings in Excel 2019:\n• : object of write sheet protection properties. The key specifies the password for formats that support password-protected sheets (XLSX/XLSB/XLS). The writer uses the XOR obfuscation method. The following keys control the sheet protection -- set to to enable a feature when sheet is locked or set to to disable a feature:\n\nChartsheets are represented as standard sheets. They are distinguished with the property set to .\n\nThe underlying data and refer to the cached data in the chartsheet. The first row of the chartsheet is the underlying header.\n\nMacrosheets are represented as standard sheets. They are distinguished with the property set to .\n\nDialogsheets are represented as standard sheets. They are distinguished with the property set to .\n\nis an ordered list of the sheets in the workbook\n\nis an object storing the standard properties. stores custom properties. Since the XLS standard properties deviate from the XLSX standard, XLS parsing stores core properties in both places.\n\nThe various file formats use different internal names for file properties. The workbook object normalizes the names:\n\nFor example, to set the workbook title property:\n\nCustom properties are added in the workbook object:\n\nWriters will process the key of the options object:\n\nis an array of defined name objects which have the keys:\n\nExcel allows two sheet-scoped defined names to share the same name. However, a sheet-scoped name cannot collide with a workbook-scope name. Workbook writers may not enforce this constraint.\n\nis an array of workbook view objects which have the keys:\n\nEven for basic features like date storage, the official Excel formats store the same content in different ways. The parsers are expected to convert from the underlying file format representation to the Common Spreadsheet Format. Writers are expected to convert from CSF back to the underlying file format.\n\nThe A1-style formula string is stored in the field. Even though different file formats store the formulae in different ways, the formats are translated. Even though some formats store formulae with a leading equal sign, CSF formulae do not start with .\n\nFor simple formulae, the key of the desired cell can be set to the actual formula text. This worksheet represents , , and :\n\nUtilities like will accept cell objects in lieu of values:\n\nCells with formula entries but no value will be serialized in a way that Excel and other spreadsheet tools will recognize. This library will not automatically compute formula results! For example, the following worksheet will include the function but the result will not be available in JavaScript:\n\nIf the actual results are needed in JS, SheetJS Pro offers a formula calculator component for evaluating expressions, updating values and dependent cells, and refreshing entire workbooks.\n\nArray formulae are stored in the top-left cell of the array block. All cells of an array formula have a field corresponding to the range. A single-cell formula can be distinguished from a plain formula by the presence of field.\n\nFor example, setting the cell to the array formula :\n\nFor a multi-cell array formula, every cell has the same array range but only the first cell specifies the formula. Consider :\n\nUtilities and writers are expected to check for the presence of a field and ignore any possible formula element in cells other than the starting cell. They are not expected to perform validation of the formulae!\n\nReleased in 2020, Dynamic Array Formulae are supported in the XLSX/XLSM and XLSB file formats. They are represented like normal array formulae but have special cell metadata indicating that the formula should be allowed to adjust the range.\n\nAn array formula can be marked as dynamic by setting the cell's property to true. The range is expected but can be the set to the current cell:\n\nSheetJS operates at the file level. Excel stores formula expressions using the English (United States) function names. For non-English users, Excel uses a localized set of function names.\n\nFor example, when the computer language and region is set to French (France), Excel interprets as if is the function. However, in the actual file, Excel stores .\n\nFunctions introduced in newer versions of Excel are prefixed with when stored in files. When writing formula expressions using these functions, the prefix is required for maximal compatibility:\n\nWhen reading a file, the option preserves the prefixes.\n\nRow and Column properties are not extracted by default when reading from a file and are not persisted by default when writing to a file. The option must be passed to the relevant read or write function.\n\nThe array in each worksheet, if present, is a collection of objects which have the following properties:\n\nThe array in each worksheet, if present, is a collection of objects which have the following properties:\n\nThe Excel UI displays the base outline level as and the max level as . Following JS conventions, SheetJS uses 0-indexed outline levels wherein the base outline level is and the max level is .\n\nThe formatted text for each cell is produced from and format. If the format is not specified, the Excel format is used. The format can either be specified as a string or as an index into the format table. Parsers are expected to populate with the number format table. Writers are expected to serialize the table.\n\nCustom tools should ensure that the local table has each used format string somewhere in the table. Excel convention mandates that the custom formats start at index 164. The following example creates a custom format from scratch:\n\nThe rules are slightly different from how Excel displays custom number formats. In particular, literal characters must be wrapped in double quotes or preceded by a backslash. For more info, see the Excel documentation article or ECMA-376 18.8.31 (Number Formats)\n\nFormat 14 ( ) is localized by Excel: even though the file specifies that number format, it will be drawn differently based on system settings. It makes sense when the producer and consumer of files are in the same locale, but that is not always the case over the Internet. To get around this ambiguity, parse functions accept the option to override the interpretation of that specific format string.\n\nHyperlinks are stored in the key of cell objects. The field of the hyperlink object is the target of the link, including the URI fragment. Tooltips are stored in the field and are displayed when you move your mouse over the text.\n\nFor example, the following snippet creates a link from cell to https://sheetjs.com with the tip :\n\nNote that Excel does not automatically style hyperlinks -- they will generally be displayed as normal text.\n\nHTTP / HTTPS links can be used directly:\n\nLinks to absolute paths should use the URI scheme:\n\nLinks to relative paths can be specified without a scheme:\n\nRelative Paths have undefined behavior in the SpreadsheetML 2003 format. Excel 2019 will treat a parent mark as two levels up.\n\nLinks where the target is a cell or range or defined name in the same workbook (\"Internal Links\") are marked with a leading hash character:\n\nCell comments are objects stored in the array of cell objects. The actual contents of the comment are split into blocks based on the comment author. The field of each comment object is the author of the comment and the field is the plain text representation.\n\nFor example, the following snippet appends a cell comment into cell :\n\nNote: XLSB enforces a 54 character limit on the Author name. Names longer than 54 characters may cause issues with other formats.\n\nTo mark a comment as normally hidden, set the property:\n\nIntroduced in Excel 365, threaded comments are plain text comment snippets with author metadata and parent references. They are supported in XLSX and XLSB.\n\nTo mark a comment as threaded, each comment part must have a true property:\n\nThere is no Active Directory or Office 365 metadata associated with authors in a thread.\n\nExcel enables hiding sheets in the lower tab bar. The sheet data is stored in the file but the UI does not readily make it available. Standard hidden sheets are revealed in the \"Unhide\" menu. Excel also has \"very hidden\" sheets which cannot be revealed in the menu. It is only accessible in the VB Editor!\n\nThe visibility setting is stored in the property of sheet props array.\n\nVBA Macros are stored in a special data blob that is exposed in the property of the workbook object when the option is . They are supported in , , and formats. The supported format writers automatically insert the data blobs if it is present in the workbook and associate with the worksheet names.\n\nThe exported and functions accept an options argument:\n• Even if is false, formatted text will be generated and saved to\n• In some cases, sheets may be parsed even if is false.\n• Excel aggressively tries to interpret values from CSV and other plain text. This leads to surprising behavior! The option suppresses value parsing.\n• and combine to give both sets of information\n• will be an empty object if is false\n• behavior depends on file type:\n• array (paths in the ZIP) for ZIP-based formats\n• hash (mapping paths to objects representing the files) for ZIP\n• rows will be generated when looking at the JSON object output (since the header row is counted as a row when parsing the data)\n• By default all worksheets are parsed. restricts based on input type:\n• number: zero-based index of worksheet to parse ( is first worksheet)\n• string: name of worksheet to parse (case insensitive)\n• array of numbers and strings to select multiple worksheets.\n• merely exposes the raw VBA CFB object. It does not parse the data. XLSM and XLSB store the VBA CFB object in . BIFF8 XLS mixes the VBA entries alongside the core Workbook entry, so the library generates a new XLSB-compatible blob from the XLS CFB container.\n• is applied to BIFF2 - BIFF5 files without records and to CSV files without BOM in . BIFF8 XLS always defaults to 1200.\n• Currently only XOR encryption is supported. Unsupported error will be thrown for files employing other encryption methods.\n• Newer Excel functions are serialized with the prefix, hidden from the user. SheetJS will strip normally. The option preserves them.\n• WTF is mainly for development. By default, the parser will suppress read errors on single worksheets, allowing you to read from the worksheets that do parse properly. Setting forces those errors to be thrown.\n\nStrings can be interpreted in multiple ways. The parameter for tells the library how to parse the data argument:\n\nThe exported and functions accept an options argument:\n• is slower and more memory intensive, but has better compatibility with older versions of iOS Numbers\n• The raw data is the only thing guaranteed to be saved. Features not described in this README may not be serialized.\n• only applies to XLSX output and is not guaranteed to work with third-party readers. Excel itself does not usually write cells with type so non-Excel tools may ignore the data or error in the presence of dates.\n• is an object mirroring the workbook field. See the table from the Workbook File Properties section.\n• if specified, the string from will be saved as the primary theme for XLSX/XLSB/XLSM files (to in the ZIP)\n• Due to a bug in the program, some features like \"Text to Columns\" will crash Excel on worksheets where error conditions are ignored. The writer will mark files to ignore the error by default. Set to to suppress.\n• Due to the size of the data, the NUMBERS data is not included by default. The included and scripts include the data.\n\nFor broad compatibility with third-party tools, this library supports many output formats. The specific file type is controlled with option:\n• only applies to formats with ZIP containers.\n• Formats that only support a single sheet require a option specifying the worksheet. If the string is empty, the first worksheet is used.\n• will automatically guess the output file format based on the file extension if is not specified. It will choose the first format in the aforementioned table that matches the extension.\n\nThe argument for mirrors the argument for :\n• For compatibility with Excel, output will always include the UTF-8 byte order mark.\n\nThe functions accept a worksheet and an optional options object.\n\nThe functions accept a data object and an optional options object.\n\nThe examples are based on the following worksheet:\n\ntakes an array of arrays of JS values and returns a worksheet resembling the input data. Numbers, Booleans and Strings are stored as the corresponding styles. Dates are stored as date or numbers. Array holes and explicit values are skipped. values may be stubbed. All other values are stored as strings. The function takes an options argument:\n\ntakes an array of arrays of JS values and updates an existing worksheet object. It follows the same process as and accepts an options argument:\n\nis expected to be one of:\n\ntakes an array of objects and returns a worksheet with automatically-generated \"headers\" based on the keys of the objects. The default column order is determined by the first appearance of the field using . The function accepts an options argument:\n• All fields from each row will be written. If is an array and it does not contain a particular field, the key will be appended to the array.\n• Cell types are deduced from the type of each value. For example, a object will generate a Date cell, while a string will generate a Text cell.\n• Null values will be skipped by default. If is true, an error cell corresponding to will be written to the worksheet.\n\ntakes an array of objects and updates an existing worksheet object. It follows the same process as and accepts an options argument:\n\nis expected to be one of:\n\ntakes a table DOM element and returns a worksheet resembling the input table. Numbers are parsed. All other data will be stored as strings.\n\ntakes a table DOM element and updates an existing worksheet object. It follows the same process as and accepts an options argument:\n\nis expected to be one of:\n\ngenerates an array of commands that represent how a person would enter data into an application. Each entry is of the form . String literals are prefixed with a in accordance with Excel.\n\nAs an alternative to the CSV type, also produces CSV output. The function takes an options argument:\n• will remove trailing commas from each line under default\n• must be set to to skip blank lines.\n• Fields containing the record or field separator will automatically be wrapped in double quotes; forces all cells to be wrapped in quotes.\n• with type will always prepend the UTF-8 byte-order mark for Excel compatibility. returns a JS string and omits the mark. Using with type will also skip the mark.\n\nThe output type uses the tab character as the field separator. If the library is available (included in full distribution but not core), the output will be encoded in and the BOM will be prepended.\n\ntakes the same arguments as .\n\nAs an alternative to the HTML type, also produces HTML output. The function takes an options argument:\n\ngenerates different types of JS objects. The function takes an options argument:\n• only affects cells which have a format code ( ) field or a formatted text ( ) field.\n• If is specified, the first row is considered a data row; if is not specified, the first row is the header row and not considered data.\n• When is not specified, the conversion will automatically disambiguate header entries by affixing and a count starting at . For example, if three columns have header the output fields are , ,\n• values are returned when is true but are skipped when false.\n• If is not specified, null and undefined values are skipped normally. If specified, all null and undefined points will be filled with\n• When is , the default is to generate blank rows. must be set to to skip blank rows.\n• When is not , the default is to skip blank rows. must be true to generate blank rows\n\nis expected to be one of:\n\nis expected to be one of:\n• If header is not , the row object will contain the non-enumerable property that represents the row of the sheet corresponding to the entry.\n• If header is an array, the keys will not be disambiguated. This can lead to unexpected results if the array values are not unique!\n\nDespite the library name , it supports numerous spreadsheet file formats:\n\nFeatures not supported by a given file format will not be written. Formats with range limits will be silently truncated:\n\nExcel 2003 SpreadsheetML range limits are governed by the version of Excel and are not enforced by the writer.\n\nXLSX and XLSM files are ZIP containers containing a series of XML files in accordance with the Open Packaging Conventions (OPC). The XLSM format, almost identical to XLSX, is used for files containing macros. The format is standardized in ECMA-376 and later in ISO/IEC 29500. Excel does not follow the specification, and there are additional documents discussing how Excel deviates from the specification. BIFF 2/3 XLS are single-sheet streams of binary records. Excel 4 introduced the concept of a workbook ( files) but also had single-sheet format. The structure is largely similar to the Lotus 1-2-3 file formats. BIFF5/8/12 extended the format in various ways but largely stuck to the same record format. There is no official specification for any of these formats. Excel 95 can write files in these formats, so record lengths and fields were determined by writing in all of the supported formats and comparing files. Excel 2016 can generate BIFF5 files, enabling a full suite of file tests starting from XLSX or BIFF2. BIFF8 exclusively uses the Compound File Binary container format, splitting some content into streams within the file. At its core, it still uses an extended version of the binary record format from older versions of BIFF. The specification covers the basics of the file format, and other specifications expand on serialization of features like properties. Predating XLSX, SpreadsheetML files are simple XML files. There is no official and comprehensive specification, although MS has released documentation on the format. Since Excel 2016 can generate SpreadsheetML files, mapping features is pretty straightforward. Introduced in parallel with XLSX, the XLSB format combines the BIFF architecture with the content separation and ZIP container of XLSX. For the most part nodes in an XLSX sub-file can be mapped to XLSB records in a corresponding sub-file. The specification covers the basics of the file format, and other specifications expand on serialization of features like properties. Excel CSV deviates from RFC4180 in a number of important ways. The generated CSV files should generally work in Excel although they may not work in RFC4180 compatible readers. The parser should generally understand Excel CSV. The writer proactively generates cells for formulae if values are unavailable. Excel TXT uses tab as the delimiter and code page 1200. Like in Excel, files starting with are treated as Symbolic Link files. Unlike Excel, if the file does not have a valid SYLK header, it will be proactively reinterpreted as CSV. There are some files with semicolon delimiter that align with a valid SYLK file. For the broadest compatibility, all cells with the value of are automatically wrapped in double-quotes. Support for other formats is generally far behind XLS/XLSB/XLSX support, due in part to a lack of publicly available documentation. Test files were produced in the respective apps and compared to their XLS exports to determine structure. The main focus is data extraction. The Lotus formats consist of binary records similar to the BIFF structure. Lotus did release a specification decades ago covering the original WK1 format. Other features were deduced by producing files and comparing to Excel support. Generated WK1 worksheets are compatible with Lotus 1-2-3 R2 and Excel 5.0. Generated WK3 workbooks are compatible with Lotus 1-2-3 R9 and Excel 5.0. The Quattro Pro formats use binary records in the same way as BIFF and Lotus. Some of the newer formats (namely WB3 and QPW) use a CFB enclosure just like BIFF8 XLS. All versions of Works were limited to a single worksheet. Works for DOS 1.x - 3.x and Works for Windows 2.x extends the Lotus WKS format with additional record types. Works for Windows 3.x - 5.x uses the same format and WKS extension. The BOF record has type Works for Windows 6.x - 9.x use the XLR format. XLR is nearly identical to BIFF8 XLS: it uses the CFB container with a Workbook stream. Works 9 saves the exact Workbook stream for the XLR and the 97-2003 XLS export. Works 6 XLS includes two empty worksheets but the main worksheet has an identical encoding. XLR also includes a stream similar to Lotus FM3/FMT files. iWork 2013 (Numbers 3.0 / Pages 5.0 / Keynote 6.0) switched from a proprietary XML-based format to the current file format based on the iWork Archive (IWA). This format has been used up through the current release (Numbers 11.2). The parser focuses on extracting raw data from tables. Numbers technically supports multiple tables in a logical worksheet, including custom titles. This parser will generate one worksheet per Numbers table. The writer currently exports a small range from the first worksheet. ODS is an XML-in-ZIP format akin to XLSX while FODS is an XML format akin to SpreadsheetML. Both are detailed in the OASIS standard, but tools like LO/OO add undocumented extensions. The parsers and writers do not implement the full standard, instead focusing on parts necessary to extract and store raw data. UOS is a very similar format, and it comes in 2 varieties corresponding to ODS and FODS respectively. For the most part, the difference between the formats is in the names of tags and attributes. Many older formats supported only one worksheet: DBF is really a typed table format: each column can only hold one data type and each record omits type information. The parser generates a header row and inserts records starting at the second row of the worksheet. The writer makes files compatible with Visual FoxPro extensions. Multi-file extensions like external memos and tables are currently unsupported, limited by the general ability to read arbitrary files in the web browser. The reader understands DBF Level 7 extensions like DATETIME. There is no real documentation. All knowledge was gathered by saving files in various versions of Excel to deduce the meaning of fields. Notes:\n• Plain formulae are stored in the RC form. There is no real documentation, and in fact Excel treats PRN as an output-only file format. Nevertheless we can guess the column widths and reverse-engineer the original layout. Excel's 240 character width limitation is not enforced. There is no unified definition. Visicalc DIF differs from Lotus DIF, and both differ from Excel DIF. Where ambiguous, the parser/writer follows the expected behavior from Excel. In particular, Excel extends DIF in incompatible ways:\n• Since Excel automatically converts numbers-as-strings to numbers, numeric string constants are converted to formulae:\n• DIF technically expects numeric cells to hold the raw numeric data, but Excel permits formatted numbers (including dates)\n• DIF technically has no support for formulae, but Excel will automatically convert plain formulae. Array formulae are not preserved. Excel HTML worksheets include special metadata encoded in styles. For example, is a localized string containing the number format. Despite the metadata the output is valid HTML, although it does accept bare symbols. The writer adds type metadata to the TD elements via the tag. The parser looks for those tags and overrides the default interpretation. For example, text like will be parsed as numbers but will be parsed as text. Excel RTF worksheets are stored in clipboard when copying cells or ranges from a worksheet. The supported codes are a subset of the Word RTF support. Ethercalc is an open source web spreadsheet powered by a record format reminiscent of SYLK wrapped in a MIME multi-part message.\n\nTest files are housed in another repo.\n\nRunning will refresh the submodule and get the files. Note that this requires , , and other commands that may not be available. If fails, please download the latest version of the test files snapshot from the repo\n\nDue to the precarious nature of the Open Specifications Promise, it is very important to ensure code is cleanroom. Contribution Notes\n\nAfter cloning the repo, running will display a list of commands.\n\nPlease consult the attached LICENSE file for details. All rights not explicitly granted by the Apache 2.0 License are reserved by the Original Author."
    },
    {
        "link": "https://docs.sheetjs.com/docs/demos/extensions/excelapi",
        "document": "SheetJS is a JavaScript library for reading and writing data from spreadsheets.\n\nOffice 2016 introduced a JavaScript API for interacting with the application. It offers solutions for custom functions as well as task panes.\n\nExcel currently does not provide support for working with Apple Numbers files and some legacy file formats. SheetJS fills the gap.\n\nIn the \"Complete Demo\", we'll create a new custom function which tries to fetch an external spreadsheet and insert the data into the worksheet.\n\nThe SheetJS NodeJS module can be imported from scripts in an Excel Custom Functions project.\n\nThe helper function can generate arrays of arrays of values based on the worksheet data. Excel custom functions transparently treat arrays of arrays as Dynamic Arrays.\n\nThis example fetches a file using the API, parses the binary data using the SheetJS 1 method and returns data from the first worksheet.\n• Clear the functions cache. For the tested version of Excel for Windows:\n• Delete the folder (if it exists) and empty Recycle Bin.\n\nThe generator will ask a few questions:\n• \"What do you want to name your add-in?\": \"SheetJSImport\"\n\nThe generator will create the project and install dependencies.\n\nIf prompted to , type and press Enter.\n\nIf prompted to install \"Developer CA for Microsoft Office Add-ins\" certificate, select \"Yes\"\n\nIf Windows Firewall prompts to allow Node.js on private networks, select \"Yes\" A new terminal window running NodeJS will be created. Keep the window open.\n\nA new Excel window with the loaded add-in will launch.\n• In , search for . There will be an XML element with name . Change the attribute to :\n• Close the Excel window and the terminal window. Do not save the XLSX file.\n• In the terminal window, start the development process again:\n• Install the SheetJS library in the project\n• Replace with the following:\n• Close the terminal window and the Excel window. Do not save the Excel file.\n• In a new terminal window, start the development process again:\n• In the new Excel window, enter the formula in cell . You should see something similar to the following screenshot:\n\nThis indicates that the SheetJS library has been loaded.\n• Add the following code snippet to and save:\n• Close the terminal window and the Excel window (do not save the Excel file).\n• In a new terminal window, start the development process again:\n• Enter the text in cell . Enter the formula in cell and press Enter.\n\nExcel should pull in the data and generate a dynamic array. The worksheet should match the screenshot at the top of this page."
    },
    {
        "link": "https://stackoverflow.com/questions/58963273/js-library-to-create-formatted-xlsx-spreadsheets",
        "document": "I'm currently creating generic spreadsheets in JS using https://www.npmjs.com/package/xlsx . This works fine to generate just a generic spreadsheet to display my data. However, I wanna add a few features.\n\nhttps://i.sstatic.net/3qBc7.jpg is an example of what I want to achieve. It was created using Apache POI, which is only available for Java.\n\nThe features I want in that screenshot are\n• The ability to add a picture (seen as a logo in the top-left)\n• Ability to change font-color (as seen in the Title in the center)\n• Ability to center-align text (as seen with the SubTitles in the center)\n• Ability to make fields sortable (As seen with the arrow buttons per each column)\n\nSeems like SheetJS can provide some of this functionality through their premium version. https://dzone.com/articles/5-popular-standalone-javascript-spreadhsheet-libra is a list of other libraries I looked into. However, that list seems more of emulating a spreadsheet with native JS objects as opposed to creating an .xlsx file. Also, most of them require paid licenses.\n\nAnybody have experience with creating my 4 requirements with a free JS solution? I'm building on Meteor JS btw.\n\nIf not, are there any other workarounds to achieving this? I.e. Having the app just output a .csv, but then creating a generic excel \"template\" file which will do all the formatting with the csv? Or, delegating to some other program/script to generate the XLSX and downloading the output file."
    },
    {
        "link": "https://docs.sheetjs.com/docs/api",
        "document": "This section lists the functions defined in the library.\n\nUsing the \"Standalone\" scripts, is added to the or other object.\n\nUsing the \"NodeJS\" module, the variable refers to the CommonJS export:\n\nUsing a framework, the variable refers to the glob import:\n\nParse options are described in the Parsing Options section.\n\nattempts to write the workbook in XLSX format.\n\nattempts to write to . In browser-based environments, it will attempt to force a client-side download.\n\nattempts to write to . If is omitted, the writer will use the third argument as the callback.\n\nWrite options are described in the Writing Options section.\n\nUtilities are available in the object.\n\nThe methods are covered in dedicated pages:\n• converts an array of arrays of JS data to a worksheet.\n• converts an array of JS objects to a worksheet.\n• adds an array of arrays of JS data to an existing worksheet.\n• adds an array of JS objects to an existing worksheet.\n• converts a worksheet object to an array of JSON objects.\n• adds data from a DOM TABLE element to an existing worksheet.\n• generates a list of formulae or cell value assignments.\n• generates the text value for a cell (using number formats).\n\ncontains a set of streaming write functions for NodeJS streams:\n\nStream methods are described in the \"Stream Export\" section.\n\nDue to broad inconsistencies in ESM implementations, the build does not import any dependencies. Instead, they must be manually passed to the library:\n\nsets the internal instance. This provides support for different languages in XLS or text parsing.\n\nset instance (using and ). This provides NodeJS ESM support for and .\n\nsupplies a NodeJS constructor. This provides NodeJS ESM support for the streaming operations.\n\nESM helper functions are described in the \"NodeJS\" Installation section\n\nis the version of the library.\n\nis an embedded version of the format library.\n\nis an embedded version of the container library."
    },
    {
        "link": "https://github.com/Appsilon/js-xlsx/blob/master/README.md",
        "document": "Parser and writer for Excel 2007+ (XLSX/XLSM/XLSB) files and parser for ODS. Pure-JS cleanroom implementation from the Office Open XML spec, [MS-XLSB], ODF specifications and related documents.\n\nCDNjs automatically pulls the latest version and makes all versions available at http://cdnjs.com/libraries/xlsx\n\nThe nodejs version automatically requires modules for additional features. Some of these modules are rather large in size and are only needed in special circumstances, so they do not ship with the core. For browser use, they must be included directly:\n\nAn appropriate version for each dependency is included in the dist/ directory.\n\nThe complete single-file version is generated at\n\nSince xlsx.js uses ES5 functions like , older browsers require Polyfills. This repo and the gh-pages branch include a shim\n\nTo use the shim, add the shim before the script tag that loads xlsx.js:\n\nFor parsing, the first step is to read the file. This involves acquiring the data and feeding it into the library. Here are a few common scenarios:\n• ajax (for a more complete example that works in older browsers, check the demo at http://oss.sheetjs.com/js-xlsx/ajax.html):\n\nThis example walks through every cell of every sheet and dumps the values:\n\nNote that older versions of IE does not support HTML5 File API, so the base64 mode is provided for testing. On OSX you can get the base64 encoding with:\n\nThe nodejs version installs a binary which can read XLSX/XLSM/XLSB files and output the contents in various formats. The source is available at in the bin directory.\n\nSome helper functions in generate different views of the sheets:\n\nFor writing, the first step is to generate output data. The helper functions and will produce the data in various formats suitable for dissemination. The second step is to actual share the data with the end point. Assuming is a workbook object:\n• http://git.io/WEK88Q writing an array of arrays in nodejs\n\nis the exposed variable in the browser and the exported nodejs variable\n\nis the version of the library (added by the build script).\n\nis an embedded version of the format library.\n\nUtilities are available in the object:\n• converts a workbook object to an array of JSON objects.\n• generates a list of the formulae (with value fallbacks)\n• generates the text value for a cell (using number formats)\n\nCell address objects are stored as where and are 0-indexed column and row numbers, respectively. For example, the cell address is represented by the object .\n\nCell range objects are stored as where is the first cell and is the last cell in the range. The ranges are inclusive. For example, the range is represented by the object . Utils use the following pattern to walk each of the cells in a range:\n\nBuilt-in export utilities (such as the CSV exporter) will use the text if it is available. To change a value, be sure to delete (or set it to ) before attempting to export. The utilities will regenerate the text from the number format ( ) and the raw value if possible.\n\nThe raw value is stored in the field, interpreted based on the field.\n\nType is the Boolean type. is interpreted according to JS truth tables\n\nType is the Error type. holds the number and holds the common name:\n\nType is the Number type. This includes all forms of data that Excel stores as numbers, such as dates/times and Boolean fields. Excel exclusively uses data that can be fit in an IEEE754 floating point number, just like JS Number, so the field holds the raw number. The field holds formatted text.\n\nType is the Date type, generated only when the option is passed. Since JSON does not have a natural Date type, parsers are generally expected to store ISO 8601 Date strings like you would get from . On the other hand, writers and exporters should be able to handle date strings and JS Date objects. Note that Excel disregards the timezone modifier and treats all dates in the local timezone. js-xlsx does not correct for this error.\n\nType is the String type. should be explicitly stored as a string to avoid possible confusion.\n\nEach key that does not start with maps to a cell (using notation)\n\nreturns the cell object for the specified address.\n\nSpecial worksheet keys (accessible as , each starting with ):\n• : A-1 based range representing the worksheet range. Functions that work with sheets should use this parameter to determine the range. Cells that are assigned outside of the range are not processed. In particular, when writing a worksheet by hand, be sure to update the range. For a longer discussion, see http://git.io/KIaNKQ Functions that handle worksheets should test for the presence of field. If the is omitted or is not a valid range, functions are free to treat the sheet as empty or attempt to guess the range. The standard utilities that ship with this library treat sheets as empty (for example, the CSV output is an empty string). When reading a worksheet with the property set, the ref parameter will use the restricted range. The original range is set at\n• : array of column properties objects. Column widths are actually stored in files in a normalized manner, measured in terms of the \"Maximum Digit Width\" (the largest width of the rendered digits 0-9, in pixels). When parsed, the column objects store the pixel width in the field, character width in the field, and the maximum digit width in the field.\n• : array of range objects corresponding to the merged cells in the worksheet. Plaintext utilities are unaware of merge cells. CSV export will write all cells in the merge range if they exist, so be sure that only the first cell (upper-left) in the range is set.\n\nis an ordered list of the sheets in the workbook\n\nis an object storing the standard properties. stores custom properties.\n\nThe exported and functions accept an options argument:\n• Even if is false, formatted text will be generated and saved to\n• In some cases, sheets may be parsed even if is false.\n• and combine to give both sets of information\n• will be an empty object if is falsy\n• adds a array (paths in the ZIP) and a hash (whose keys are paths and values are objects representing the files)\n• rows will be generated when looking at the JSON object output (since the header row is counted as a row when parsing the data)\n• merely exposes the raw vba object. It does not parse the data.\n• currently does not convert numerical dates to JS dates.\n\nThe defaults are enumerated in bits/84_defaults.js\n\nThe exported and functions accept an options argument:\n• is slower and more memory intensive, but has better compatibility with older versions of iOS Numbers\n• is stubbed and far from complete\n• The raw data is the only thing guaranteed to be saved. Formulae, formatting, and other niceties may not be serialized (pending CSF standardization)\n• only applies to XLSX output and is not guaranteed to work with third-party readers. Excel itself does not usually write cells with type so non-Excel tools may ignore the data or blow up in the presence of dates.\n\nTest files are housed in another repo.\n\nRunning will refresh the submodule and get the files.\n\nwill run the nodejs-based tests. To run the in-browser tests, clone the oss.sheetjs.com repo and replace the xlsx.js file (then fire up the browser and go to ):\n\nDue to the precarious nature of the Open Specifications Promise, it is very important to ensure code is cleanroom. Consult CONTRIBUTING.md\n\nThe xlsx.js file is constructed from the files in the subdirectory. The build script (run ) will concatenate the individual bits to produce the script. Before submitting a contribution, ensure that running make will produce the xlsx.js file exactly. The simplest way to test is to move the script:\n\nTo produce the dist files, run . The dist files are updated in each version release and should not be committed between versions.\n\nXLS is available in js-xls.\n\nPlease consult the attached LICENSE file for details. All rights not explicitly granted by the Apache 2.0 license are reserved by the Original Author.\n\nIt is the opinion of the Original Author that this code conforms to the terms of the Microsoft Open Specifications Promise, falling under the same terms as OpenOffice (which is governed by the Apache License v2). Given the vagaries of the promise, the Original Author makes no legal claim that in fact end users are protected from future actions. It is highly recommended that, for commercial uses, you consult a lawyer before proceeding."
    },
    {
        "link": "https://stackoverflow.com/questions/37498713/how-to-export-an-html-table-as-a-xlsx-file",
        "document": "I have a question about exporting an HTML table as an xlsx file. I did some work and now I can export it as an xls, but I need to export it as an xlsx.\n\nHere is my jsFiddle: https://jsfiddle.net/272406sv/1/\n\nHere is my HTML:\n\nHere is my JavaScript code:"
    },
    {
        "link": "https://stackoverflow.com/questions/24636956/how-do-i-export-multiple-html-tables-to-excel",
        "document": "Here is a better solution that supports exporting table in the latest Excel format i.e. xlsx . The accepted solution would fail in case the total number of rows being exported exceeds 3407 on Chrome.\n\nAn example from the link above: http://jsfiddle.net/6ckj281f/"
    },
    {
        "link": "https://equitem.blog/2024/09/11/export-html-table-to-excel-with-colours-using-xlsx-js-style-library",
        "document": "Export HTML tables to Excel is not a big deal with today’s libraries. The library is the most used library to export Excels and library is used to export the Excel with styles. Basically, we can generate a worksheet from data as ‘Array of Arrays’ or ‘Array of Objects.\n\nIf we have already have a HTML table with the data, this table can be directly exported to an Excel using library and library is used to add basic styling options.\n\nTo export the table with colors using the library, you need to define the styles (like background colors) explicitly when creating the worksheet, as does not automatically pick up styles from HTML tables.\n\nHere’s the way to include cell styles.\n\nHere’s a step-by-step guide to export HTML tables to Excel file while applying custom styles using the library.\n• takes the RGB value for the color you want to set.\n• You can also customise font and other properties using the property.\n\nWhen the table is generated dynamically and cell colours are not static…\n\nIn such cases, you will need to retrieve the styles from the HTML table and apply them to the corresponding cells in the Excel file. Here’s how you can modify your code to capture the styles from the HTML table and apply them when exporting:\n• Iterate through the HTML table cells to extract the background color.\n• Apply the extracted color to the corresponding Excel cell using the library.\n• The is used to get the styles of each table cell.\n• The function converts the or format to a hex format, which is required by the library.\n• After extracting the colours, the property of the worksheet cell is set with the corresponding hex colour.\n• To ensure the styles are applied even to cells without values, it will be needed to handle cells regardless of their content. To acheive this ensure that every cell is assigned a default value. This prevents Excel from skipping styling for cells with no values.\n\nThis should allow you to export the dynamically generated table with the same colours as displayed in the HTML.\n• Create a Test Table: Include both populated and empty cells in your table to ensure all cells are styled as expected.\n• Inspect the Result: Open the generated Excel file to verify that all cells, including those without values, display the correct colors.\n\nShare the article with your friends"
    },
    {
        "link": "https://github.com/linways/table-to-excel",
        "document": "Export HTML table to valid excel file effortlessly. This library uses exceljs/exceljs under the hood to create the excel.\n\n (Initial version of this library was using protobi/js-xlsx, it can be found here)\n\nCreate your HTML table as normal.\n\n To export content of table run:\n\nCheck this pen for working example.\n\nCell types can be set using the following data attributes:\n\n=\" \" 2500 =\" \" 05-23-2018 <!-- for setting a cell type as boolean. String \"true/false\" will be accepted as Boolean--> =\" \" true <!-- for setting a cell type as boolean using integer. 0 will be false and any non zero value will be true --> =\" \" 0 =\" \" Google\n\nAll styles are set using attributes on tags. There are 5 types of attributes: , , , and which corresponds to five top-level attributes , , , and .\n\nTo exclude a cell or a row from the exported excel add to the corresponding or .\n\n Example:\n\nColumn width's can be set by specifying in the tag. accepts comma separated column widths specified in character count . will set width of first coulmn as width of 10 charaters and second column as 20 characters wide.\n\n Example:\n\nRow Height can be set by specifying in the tag.\n\n Example:\n\nMigration Guide for migrating from V0.2.1 to V1.0.0\n• Option to set style and color for all borders\n• String \"true/false\" will be accepted as Boolean"
    },
    {
        "link": "https://ajinkyap.hashnode.dev/guide-to-exporting-html-tables-to-excel-in-react-with-exceljs",
        "document": ""
    }
]