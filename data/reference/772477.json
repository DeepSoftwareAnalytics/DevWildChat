[
    {
        "link": "https://highlightjs.org",
        "document": "highlight.js can be used in different ways such using CDNs, hosting the bundle yourself, as a Vue plug-in, as ES6 modules, with Node.js, and web workers.\n\nSee our README on GitHub for more details.\n\nHighlight.js can be used with Node on the server. The first step is to install the package from npm:\n\nNow, it's possible to use the library using either or . By default, when you import the main package, all 192 languages will be loaded automatically.\n\nHowever, importing all our languages will increase the size of your bundle. If you only need a few languages, you can import them individually:\n\nAnd finally, regardless of how you imported the library, you can highlight code with the or functions:\n\nFor more details, see the \"Importing the Library\" section of our README."
    },
    {
        "link": "https://highlightjs.readthedocs.io/en/latest/readme.html",
        "document": "Highlight.js is a syntax highlighter written in JavaScript. It works in the browser as well as on the server. It can work with pretty much any markup, doesn’t depend on any other frameworks, and has automatic language detection.\n\nThe bare minimum for using highlight.js on a web page is linking to the library along with one of the themes and calling : This will find and highlight code inside of tags; it tries to detect the language automatically. If automatic detection doesn’t work for you, or you simply prefer to be explicit, you can specify the language manually by using the attribute: To apply the Highlight.js styling to plaintext without actually highlighting it, use the language: To skip highlighting of a code block completely, use the class: The bare minimum to auto-detect the language and highlight some code. // load the library and ALL languages To load only a “common” subset of popular languages: To highlight code with a specific language, use : See Importing the Library for more examples of vs usage, etc. For more information about the result object returned by or refer to the api docs.\n\nIf you need a bit more control over the initialization of Highlight.js, you can use the and functions. This allows you to better control what to highlight and when. For example, here’s the rough equivalent of calling but doing the work manually instead: Please refer to the documentation for options. We strongly recommend wrapping for code blocks. It’s quite semantic and “just works” out of the box with zero fiddling. It is possible to use other HTML elements (or combos), but you may need to pay special attention to preserving linebreaks. Let’s say your markup for code blocks uses divs: // first, find all the div.code blocks Without using a tag that preserves linebreaks (like ) you’ll need some additional CSS to help preserve them. You could also pre and post-process line breaks with a plug-in, but we recommend using CSS. See highlightjs/vue-plugin for a simple Vue plugin that works great with Highlight.js. An example of in action: <!-- or literal code works as well --> You can run highlighting inside a web worker to avoid freezing the browser window while dealing with very big chunks of code.\n\nFirst, you’ll likely be installing the library via or – see Getting the Library. Requiring the top-level library will load all languages: For a smaller footprint, load our common subset of languages (the same set used for our default web build). For the smallest footprint, load only the languages you need: Note: You can also import directly from fully static URLs, such as our very own pre-built ES6 Module CDN resources. See Fetch via CDN for specific examples. The default import will register all languages: It is more efficient to import only the library and register the languages you need: If your build tool processes CSS imports, you can also import the theme directly as a module:\n\nYou can get highlight.js as a hosted, or custom-build, browser script or as a server module. Right out of the box the browser script supports both AMD and CommonJS, so if you wish you can use RequireJS or Browserify without having to build from source. The server module also works perfectly fine with Browserify, but there is the option to use a build specific to browsers rather than something meant for a server. Do not link to GitHub directly. The library is not supposed to work straight from the source, it requires building. If none of the pre-packaged options work for you refer to the building documentation. On Almond. You need to use the optimizer to give the module a name. For example: A prebuilt version of Highlight.js bundled with many common languages is hosted by several popular CDNs. When using Highlight.js via CDN you can use Subresource Integrity for additional security. For details see DIGESTS.md. <!-- and it's easy to individually load additional languages --> // and it's easy to individually load additional languages <!-- and it's easy to individually load additional languages --> // and it's easy to individually load additional languages <!-- and it's easy to individually load additional languages --> // and it's easy to individually load & register additional languages Note: The CDN-hosted package doesn’t bundle every language. It would be very large. You can find our list of “common” languages that we bundle by default on our download page. You can also download and self-host the same assets we serve up via our own CDNs. We publish those builds to the cdn-release GitHub repository. You can easily pull individual files off the CDN endpoints with , etc; if say you only needed and a single CSS file. There is also an npm package @highlightjs/cdn-assets if pulling the assets in via or would be easier for your build process. The download page can quickly generate a custom single-file minified bundle including only the languages you desire. Note: Building from source can produce slightly smaller builds than the website download. Our NPM package including all supported languages can be installed with NPM or Yarn: Alternatively, you can build the NPM package from source. The current source code is always available on GitHub. See our building documentation for more information."
    },
    {
        "link": "https://github.com/highlightjs/highlight.js",
        "document": "Highlight.js is a syntax highlighter written in JavaScript. It works in the browser as well as on the server. It can work with pretty much any markup, doesn’t depend on any other frameworks, and has automatic language detection.\n\nAs always, major releases do contain breaking changes which may require action from users. Please read VERSION_11_UPGRADE.md for a detailed summary of breaking changes and any actions you may need to take.\n\nPlease see SECURITY.md for long-term support information.\n\nThe bare minimum for using highlight.js on a web page is linking to the library along with one of the themes and calling :\n\nThis will find and highlight code inside of tags; it tries to detect the language automatically. If automatic detection doesn’t work for you, or you simply prefer to be explicit, you can specify the language manually by using the attribute:\n\nTo apply the Highlight.js styling to plaintext without actually highlighting it, use the language:\n\nTo skip highlighting of a code block completely, use the class:\n\nThe bare minimum to auto-detect the language and highlight some code.\n\nTo load only a \"common\" subset of popular languages:\n\nTo highlight code with a specific language, use :\n\nSee Importing the Library for more examples of vs usage, etc. For more information about the result object returned by or refer to the api docs.\n\nHighlight.js supports over 180 languages in the core library. There are also 3rd party language definitions available to support even more languages. You can find the full list of supported languages in SUPPORTED_LANGUAGES.md.\n\nIf you need a bit more control over the initialization of Highlight.js, you can use the and functions. This allows you to better control what to highlight and when.\n\nFor example, here’s the rough equivalent of calling but doing the work manually instead:\n\nPlease refer to the documentation for options.\n\nWe strongly recommend wrapping for code blocks. It's quite semantic and \"just works\" out of the box with zero fiddling. It is possible to use other HTML elements (or combos), but you may need to pay special attention to preserving linebreaks.\n\nLet's say your markup for code blocks uses divs:\n\nWithout using a tag that preserves linebreaks (like ) you'll need some additional CSS to help preserve them. You could also pre and post-process line breaks with a plug-in, but we recommend using CSS.\n\nSee highlightjs/vue-plugin for a simple Vue plugin that works great with Highlight.js.\n\nAn example of in action:\n\nYou can run highlighting inside a web worker to avoid freezing the browser window while dealing with very big chunks of code.\n\nFirst, you'll likely be installing the library via or -- see Getting the Library.\n\nRequiring the top-level library will load all languages:\n\nFor a smaller footprint, load our common subset of languages (the same set used for our default web build).\n\nFor the smallest footprint, load only the languages you need:\n\nThe default import will register all languages:\n\nIt is more efficient to import only the library and register the languages you need:\n\nIf your build tool processes CSS imports, you can also import the theme directly as a module:\n\nNote: For now you'll want to install package instead of . See Download prebuilt CDN assets\n\nTo import the library and register only those languages that you need:\n\nTo import the library and register all languages:\n\nNote: The path to these files will vary depending on where you have installed/copied them within your project or site. The above path is only an example.\n\nYou can also use to import in similar way as Node:\n\nUse the above code in your HTML. After that, your JavaScript can import using the named key from your , for example in this case:\n\nNote: You can also import directly from fully static URLs, such as our very own pre-built ES6 Module CDN resources. See Fetch via CDN for specific examples.\n\nYou can get highlight.js as a hosted, or custom-build, browser script or as a server module. Right out of the box the browser script supports both AMD and CommonJS, so if you wish you can use RequireJS or Browserify without having to build from source. The server module also works perfectly fine with Browserify, but there is the option to use a build specific to browsers rather than something meant for a server.\n\nDo not link to GitHub directly. The library is not supposed to work straight from the source, it requires building. If none of the pre-packaged options work for you refer to the building documentation.\n\nOn Almond. You need to use the optimizer to give the module a name. For example:\n\nA prebuilt version of Highlight.js bundled with many common languages is hosted by several popular CDNs. When using Highlight.js via CDN you can use Subresource Integrity for additional security. For details see DIGESTS.md.\n\nNote: The CDN-hosted package doesn't bundle every language. It would be very large. You can find our list of \"common\" languages that we bundle by default on our download page.\n\nYou can also download and self-host the same assets we serve up via our own CDNs. We publish those builds to the cdn-release GitHub repository. You can easily pull individual files off the CDN endpoints with , etc; if say you only needed and a single CSS file.\n\nThere is also an npm package @highlightjs/cdn-assets if pulling the assets in via or would be easier for your build process.\n\nThe download page can quickly generate a custom single-file minified bundle including only the languages you desire.\n\nNote: Building from source can produce slightly smaller builds than the website download.\n\nOur NPM package including all supported languages can be installed with NPM or Yarn:\n\nThere is also another npm package @highlightjs/cdn-assets that contains prebuilt CDN assets including ES6 Modules that can be imported in browser:\n\nAlternatively, you can build the NPM package from source.\n\nThe current source code is always available on GitHub.\n\nSee our building documentation for more information.\n\nHighlight.js works on all modern browsers and currently supported Node.js versions. You'll need the following software to contribute to the core library:\n\nHighlight.js is released under the BSD License. See our LICENSE file for details.\n\nThe official website for the library is https://highlightjs.org/.\n\nFurther in-depth documentation for the API and other topics is at http://highlightjs.readthedocs.io/.\n\nA list of the Core Team and contributors can be found in the CONTRIBUTORS.md file."
    },
    {
        "link": "https://highlightjs.readthedocs.io",
        "document": ""
    },
    {
        "link": "https://npmjs.com/package/highlight.js",
        "document": "Highlight.js is a syntax highlighter written in JavaScript. It works in the browser as well as on the server. It can work with pretty much any markup, doesn’t depend on any other frameworks, and has automatic language detection.\n\nAs always, major releases do contain breaking changes which may require action from users. Please read VERSION_11_UPGRADE.md for a detailed summary of breaking changes and any actions you may need to take.\n\nPlease see SECURITY.md for long-term support information.\n\nThe bare minimum for using highlight.js on a web page is linking to the library along with one of the themes and calling :\n\nThis will find and highlight code inside of tags; it tries to detect the language automatically. If automatic detection doesn’t work for you, or you simply prefer to be explicit, you can specify the language manually by using the attribute:\n\nTo apply the Highlight.js styling to plaintext without actually highlighting it, use the language:\n\nTo skip highlighting of a code block completely, use the class:\n\nThe bare minimum to auto-detect the language and highlight some code.\n\nTo load only a \"common\" subset of popular languages:\n\nTo highlight code with a specific language, use :\n\nSee Importing the Library for more examples of vs usage, etc. For more information about the result object returned by or refer to the api docs.\n\nHighlight.js supports over 180 languages in the core library. There are also 3rd party language definitions available to support even more languages. You can find the full list of supported languages in SUPPORTED_LANGUAGES.md.\n\nIf you need a bit more control over the initialization of Highlight.js, you can use the and functions. This allows you to better control what to highlight and when.\n\nFor example, here’s the rough equivalent of calling but doing the work manually instead:\n\nPlease refer to the documentation for options.\n\nWe strongly recommend wrapping for code blocks. It's quite semantic and \"just works\" out of the box with zero fiddling. It is possible to use other HTML elements (or combos), but you may need to pay special attention to preserving linebreaks.\n\nLet's say your markup for code blocks uses divs:\n\nWithout using a tag that preserves linebreaks (like ) you'll need some additional CSS to help preserve them. You could also pre and post-process line breaks with a plug-in, but we recommend using CSS.\n\nSee highlightjs/vue-plugin for a simple Vue plugin that works great with Highlight.js.\n\nAn example of in action:\n\nYou can run highlighting inside a web worker to avoid freezing the browser window while dealing with very big chunks of code.\n\nFirst, you'll likely be installing the library via or -- see Getting the Library.\n\nRequiring the top-level library will load all languages:\n\nFor a smaller footprint, load our common subset of languages (the same set used for our default web build).\n\nFor the smallest footprint, load only the languages you need:\n\nThe default import will register all languages:\n\nIt is more efficient to import only the library and register the languages you need:\n\nIf your build tool processes CSS imports, you can also import the theme directly as a module:\n\nNote: For now you'll want to install package instead of . See Download prebuilt CDN assets\n\nTo import the library and register only those languages that you need:\n\nTo import the library and register all languages:\n\nNote: The path to these files will vary depending on where you have installed/copied them within your project or site. The above path is only an example.\n\nYou can also use to import in similar way as Node:\n\nUse the above code in your HTML. After that, your JavaScript can import using the named key from your , for example in this case:\n\nNote: You can also import directly from fully static URLs, such as our very own pre-built ES6 Module CDN resources. See Fetch via CDN for specific examples.\n\nYou can get highlight.js as a hosted, or custom-build, browser script or as a server module. Right out of the box the browser script supports both AMD and CommonJS, so if you wish you can use RequireJS or Browserify without having to build from source. The server module also works perfectly fine with Browserify, but there is the option to use a build specific to browsers rather than something meant for a server.\n\nDo not link to GitHub directly. The library is not supposed to work straight from the source, it requires building. If none of the pre-packaged options work for you refer to the building documentation.\n\nOn Almond. You need to use the optimizer to give the module a name. For example:\n\nA prebuilt version of Highlight.js bundled with many common languages is hosted by several popular CDNs. When using Highlight.js via CDN you can use Subresource Integrity for additional security. For details see DIGESTS.md.\n\nNote: The CDN-hosted package doesn't bundle every language. It would be very large. You can find our list of \"common\" languages that we bundle by default on our download page.\n\nYou can also download and self-host the same assets we serve up via our own CDNs. We publish those builds to the cdn-release GitHub repository. You can easily pull individual files off the CDN endpoints with , etc; if say you only needed and a single CSS file.\n\nThere is also an npm package @highlightjs/cdn-assets if pulling the assets in via or would be easier for your build process.\n\nThe download page can quickly generate a custom single-file minified bundle including only the languages you desire.\n\nNote: Building from source can produce slightly smaller builds than the website download.\n\nOur NPM package including all supported languages can be installed with NPM or Yarn:\n\nThere is also another npm package @highlightjs/cdn-assets that contains prebuilt CDN assets including ES6 Modules that can be imported in browser:\n\nAlternatively, you can build the NPM package from source.\n\nThe current source code is always available on GitHub.\n\nSee our building documentation for more information.\n\nHighlight.js works on all modern browsers and currently supported Node.js versions. You'll need the following software to contribute to the core library:\n\nHighlight.js is released under the BSD License. See our LICENSE file for details.\n\nThe official website for the library is https://highlightjs.org/.\n\nFurther in-depth documentation for the API and other topics is at http://highlightjs.readthedocs.io/.\n\nA list of the Core Team and contributors can be found in the CONTRIBUTORS.md file."
    },
    {
        "link": "https://daltoncraighead.com/code-snippets/use-highlight-js-to-properly-style-code",
        "document": "Highlight.js allows you to have custom styled and properly formatted code on your website.\n\n<!--This code calls on the Highlight.js library, and styles the <code> embed. Paste this into an HTML embed at the header of your website. You can find other themes to style your embed at https://highlightjs.org/--> <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.10/styles/atom-one-dark.min.css\" integrity=\"sha256-GA29iW/iYj9FcuQQktvW45pRzHvZeFfgeFvA4tGVjpM=\" crossorigin=\"anonymous\" /> <style> code { padding: 15px 30px 30px 30px !Important; margin: 0px !Important; width: 100%; border-radius: 16px; } .w-embed:after, .w-embed:before { display: none !important; } </style> <!--This is for the code boxes. Paste this into an HTML embed in the footer of your website.--> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.10/highlight.min.js\" integrity=\"sha256-1zu+3BnLYV9LdiY85uXMzii3bdrkelyp37e0ZyTAQh0=\" crossorigin=\"anonymous\"></script> <script> document.addEventListener('DOMContentLoaded', (event) => { document.querySelectorAll('pre code').forEach((block) => { hljs.highlightBlock(block); }); }); </script>\n\nWant your code to look similar to the code you see here on this page? Let me introduce you to Highlight.js.\n\nHighlight.js is a JavaScript library with the sole purpose of making code look better on websites. It supports more languages than you'd likely ever need, and has hundreds of different styles and colors to choose from.\n\nHow to use this code in Webflow:\n\nThere's a few steps to setting up Highlight.js on your website.\n• Copy the code you see above and paste it into an HTML embed at the top of your website navigator in Webflow.\n• Next you'll need to read the comments I've made in the code. There's a portion of this code that needs to be copied and pasted in a separate HTML embed at the footer of your website. Once you've copied those particular scripts to and pasted them in the footer embed, you can remove them from the header embed.\n• After that, you'll need to create a third HTML embed that has the actual code you want to show off on your webpage, so create that embed where ever you need it on the page.\n• Paste the code you want to show off inside the HTML embed you just created.\n• If your code includes HTML tags in it (like <script>, <link>, <style> etc...) you'll need to use the HTML equivalents as a substitute so the code doesn't actually activate. For example: the \"<\" and \">\" need to be replaced with \"<\" and \">\" respectively, giving you this: \" <script> \".\n• You'll want to surround the code in two different tags, the <pre> and <code> tags. The order would look like this:\n\n<pre>\n\n <code>\n\n The code you want to display goes here\n\n </code>\n\n</pre>\n• Finally, you'll want to make sure you add the class 'highlight' and 'pre-shadow' to your <pre> tag. You'll also want to add a class to your <code> tag. The code tag class depends on what language you're showing off. If you're using CSS, then add the class of 'css'. If you're using JavaScript, write 'js'. If you're using more than one language in your code, give it all the classes for those languages. It should look something like this:\n\n<pre class=\"highlight pre-shadow\">\n\n <code class=\"css\">\n\n The code you want to display goes here\n\n </code>\n\n</pre>\n• Save and publish to see the result.\n\nIf you're having trouble implementing Highlight.js, I've left links to some helpful resources below with more in-depth explanations.\n\nFind out each language's class name for the <code> tag here.\n\nDemo all of the different styles here.\n\nHere's the GitHub link to all the styles you can choose from.\n\nThis is a Webflow Cloneable where someone implemented Highlight.js."
    },
    {
        "link": "https://discuss.write.as/t/how-to-change-your-code-syntax-highlighting-colors/2283",
        "document": "Write.as currently uses under the hood for code syntax highlighting but they use a particular theme called , which, as the name suggests, is a light theme.\n\nNow, as a professional developer, I never use light themes since it strains my eyes after some time. Knowing my target audience (developers) would think the same, I figured I should change it.\n\nHere’s the thing, has custom CSS themes which you can find here. It’s a big list but for my site, I wanted to use the theme (which is what I used to use in VSCode). So you do a quick search and find the appropriate CSS file.\n\nNow here’s the catch, you cannot modify Write.as’ HTML so you cannot add the code the CDN is giving you. What you can do is add custom CSS so you can go straight to the file in your browser and it will look something like this:\n\nRight now the code is minified and we’ll need to prettify it first, so copy and paste the code and pass it through here. You’ll get a nice chunk of readable CSS code. Go and paste that on the Custom CSS section in your blog.\n\nYou’ll notice that it doesn’t work, the styles are not being applied. The problem? Write.as’ theme has a higher CSS specificity than our CSS code so you’ll have to go through each CSS rule and add at the end. It’ll end up looking something like this:\n\nNow save, refresh, and viola, you have a new code syntax highlighting theme .\n\nImportant note: the new theme will only be visible on your blog, not in an anonymous post. Something to keep in mind."
    },
    {
        "link": "https://medium.com/@hizacharylee/simplify-syntax-highlighting-with-highlight-js-b65af3bdc509",
        "document": "highlight.js is a popular and powerful syntax highlighting library for the web, which automatically detects the language of code snippets and applies appropriate styles to make them more readable. It supports more than 180 languages and comes with a variety of themes to match your website’s design.\n\nThe first step in using highlight.js is to install it in your project. You can do this in several ways:\n\nCDN: Include the following script and CSS tags in the head of your HTML document:\n\nThen, import it into your JavaScript file:\n\nAfter installing highlight.js, you can start using it by applying it to code blocks in your HTML. First, wrap your code blocks with the tags, and add a class to the tag, where is the language you want to highlight. For example:\n\nNext, add the following JavaScript code to initialize highlight.js:\n\nThis code waits for the DOM to be loaded and then iterates over all blocks, applying syntax highlighting.\n\nhighlight.js comes with a variety of built-in themes that you can choose from. To use a different theme, simply replace the default CSS file with the one corresponding to the theme you want. For example, to use the Github Dark theme, replace the default CSS link with the following:\n\nOr, if you’re using npm:\n\nA list of available themes can be found in the highlight.js GitHub repository.\n\nIf you want to create your own custom theme, you can do so by writing your own CSS file and linking to it in your HTML document. The key to creating a custom theme is understanding the CSS classes used by highlight.js. Here is a basic example:\n\nBy default, highlight.js attempts to automatically detect the language of your code snippets. While this can be convenient, it can also lead to incorrect language detection and slower performance. To improve accuracy and performance, you can disable autodetection and specify the language explicitly.\n\nHowever, if you still want to use autodetection, you can optimize the process by limiting the languages that highlight.js checks against. To do this, create a custom build of highlight.js that only includes the languages you need. Visit the highlight.js custom package builder and select the languages you want to include in your build. This will generate a custom script and CSS file that you can use in your project.\n\nhighlight.js supports plugins that extend its functionality. Some popular plugins include:\n• Copy to clipboard: Adds a “Copy to clipboard” button to code blocks.\n\nTo use a plugin, include its script and CSS files in your project, and follow the plugin’s documentation for initialization and usage.\n\nSome languages have specific settings or features that you can enable to improve syntax highlighting. For example, in JavaScript, you can enable the “es.next” option to support modern ECMAScript features:\n\nCheck the highlight.js documentation and GitHub issues for language-specific tips and discussions.\n\nTo use highlight.js in a React application, you can create a custom component that wraps the tags and applies syntax highlighting. The create a new component:\n\nNow you can use the component in your React app:\n\nTo use highlight.js in a Vue application, you can create a custom component. The create a new component:\n\nNow you can use the component in your Vue app:\n\nIf you encounter any issues while using highlight.js, consider the following troubleshooting steps:\n• Ensure that you have properly installed highlight.js and included the necessary script and CSS files.\n• Check that your tags have the correct class and that your code is wrapped correctly.\n• Verify that your custom theme or plugin files are properly linked and configured.\n• Review the highlight.js documentation and GitHub issues for any known issues or solutions related to your specific language or use case.\n\nThanks for reading. If you like such stories and want to support me, please consider becoming a Medium member. It costs $5 per month and gives unlimited access to Medium content. I’ll get a little commission if you sign up via my link."
    },
    {
        "link": "https://meta.discourse.org/t/change-highlight-js-styles/44671",
        "document": "JavaScript syntax highlighter with language auto-detection and zero dependencies. - highlightjs/highlight.js"
    },
    {
        "link": "https://samia.rbind.io/post/syntax-highlighting-in-html",
        "document": ""
    }
]