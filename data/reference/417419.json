[
    {
        "link": "https://llego.dev/posts/matplotlib-financial-data-visualization",
        "document": "Visualization plays a crucial role in analyzing and making sense of complex financial data. Python’s Matplotlib library offers a versatile toolkit for creating informative plots and charts to extract insights from financial time series datasets. This comprehensive guide examines key Matplotlib plotting tools and techniques to build interactive visualizations for finance and trading applications.\n\nMatplotlib is Python’s most popular 2D plotting library and the foundation for many advanced data visualization libraries like Seaborn and Plotly. It provides a MATLAB-style interface for creating publication-quality figures and supports a wide range of graphical capabilities like line plots, bar charts, histograms, scatter plots, animations, and geographical maps. Matplotlib can generate visualizations in many output formats and integrate tightly with NumPy, Pandas, and other Python scientific computing stacks.\n\nThis how-to guide will cover the following key topics:\n\nMatplotlib features a procedural interface named pyplot modeled after MATLAB’s plotting functions. It provides a state-based interface for creating figures, axes, plotting functions, and configuring visual aesthetics.\n• Figure: Overall container for the visualization. You can have multiple independent figures per script.\n• Axes: Area where the actual plot is rendered, allowing multiple plots per figure.\n• Artist: Visual primitives like Lines, Text, Rectangles that are added to compose the final plot.\n\nHere is a simple example to create a matplotlib figure and axes:\n\nMatplotlib provides a stateful object-oriented API and a MATLAB-style procedural interface named pyplot to accomplish these tasks:\n\nIn most cases, the pyplot interface provides a simpler way to plot and customize visuals without directly instantiating figure/axis objects. But the OO-API offers more control and customization for advanced use cases.\n\nMatplotlib provides extensive control over visual styling and customization of every plot element. Here are some common ways to customize the look and feel of matplotlib plots:\n\nColors: Accept a wide range of color specifications like RGB or hex codes, html color names.\n\nSee the full matplotlib customization guide for more details on styling plots.\n\nTime-series data is commonplace in financial analysis, tracking metrics such as stock prices, exchange rates, and interest rates over time. Spotting trends and understanding seasonality in this type of data is key. Tools like Matplotlib, coupled with libraries like Pandas and Seaborn, can significantly aid in enhancing these visualizations.\n\nMatplotlib provides intuitive methods to plot time-series data, accepting datetime data types on the x-axis for ease of use.\n\nHere’s how you can create a simple time-series plot in Matplotlib:\n\nThe key steps involve passing datetime data for x-axis values, using the function instead of the regular function, and formatting the datetime ticks and labels using and .\n\nIntegrating with Pandas, a powerful data manipulation and analysis tool, enhances these visualizations. For instance, when tracking a stock’s closing prices over several days, you can leverage Pandas’ plotting capabilities with minimal lines of code. We will demonstrate this using a hypothetical time series of closing stock prices for a company ‘LLEGO’ over 10 days.\n\nThis line plot displays the closing price trend over time for ‘LLEGO’ stocks in blue. The x-axis dates are automatically rotated for better readability.\n\nTo further improve aesthetics and apply attractive styles, you can integrate with Seaborn, a statistical data visualization library based on Matplotlib. Seaborn’s function, for instance, can create a sleek time-series plot:\n\nIn the code above, Seaborn’s function is used to create a clean and aesthetically pleasing time-series plot. We also benefit from Seaborn’s enhanced color palettes and style settings, which can be customized to make the visualization more impactful. The use of Seaborn is practical when creating more complex graphs, as it tends to require less code than Matplotlib.\n\nThanks to the synergistic interplay between Matplotlib, Pandas, and Seaborn, visualizing time-series financial data becomes not only accessible but also deeply customizable and aesthetically pleasing.\n\nTime series data, a sequence of data points recorded over consistent time intervals, is fundamental to financial data analysis. Variables like stock prices, exchange rates, and interest rates are commonly tracked as time-series data. Python libraries like matplotlib, pandas, and seaborn offer powerful tools for visualizing these trends in time series data.\n\nIn this guide, we’ll explore how to create time series visualizations using matplotlib, pandas, and seaborn with real-life market data for Apple Inc. (“AAPL”), obtained from Yahoo Finance.\n\nMatplotlib is a core Python library for creating static, animated, and interactive visualizations. Here’s how to visualize Apple’s stock price data as a time series using matplotlib:\n\nThe plot displays the closing price for AAPL over time.\n\nPandas not only excels at data manipulation, but it is also convenient for creating visualizations. You can plot the same data using pandas:\n\nThis line plot shows the AAPL closing price over time.\n\nSeaborn is another powerful Python library for enhanced data visualization, especially for statistical graphics. Seaborn extends the capabilities of matplotlib and integrates well with pandas. Let’s create a similar time-series plot using seaborn:\n\nThis code uses seaborn to plot a line chart of Apple’s closing stock prices from the years 2020-2021.\n\nThese visualizations provide a clear representation of Apple’s stock price movements over time, demonstrating the power of Python’s capabilities for financial data visualization.\n\nCandlestick charts are specialized visualizations used in finance. They depict the open, high, low, and close prices of a financial instrument, such as a stock, over a particular time period. They are instrumental for traders and financial analysts, offering a rich source of information at a glance.\n\nIn older versions of Matplotlib, the creation of candlestick charts was managed with the module. However, since the deprecation of this module in Matplotlib v3.0.0, the package (a spin-off from Matplotlib) has taken over to handle this type of plot.\n\nBelow is an example of creating a candlestick chart using :\n\nThe color representation in the candlestick chart is as follows:\n• A green candle is displayed if the closing price is higher than the opening price.\n• A red candle is shown if the closing price is lower than the opening price.\n• The wick illustrates the range from low to high prices.\n\nThe package offers various customization options – including color, width, and transparency. It even allows handling date formatting on the x-axis.\n\nCandlestick charts are not only visually appealing but also encode a substantial amount of information within a compact space. They are thus considered indispensable tools for financial analysts and traders.\n\nCreating a candlestick chart with real-life data offers a more practical understanding of its utility in finance. For this purpose, we’ll use the Yahoo Finance data for a particular stock and create the candlestick chart using the package.\n\nIn this example, we will fetch the historical data for Apple Inc. (“AAPL”) for the year 2021:\n\nRunning this script would download the historical market data for Apple Inc. from Yahoo Finance and then draw a candlestick chart for it. The chart uses the Yahoo-style in mplfinance, which presents green/red bars (candles) to illustrate whether the closing price was higher/lower than the opening price for a given day. The wicks on the bars represent the highest and lowest trading price for each day.\n\nPractical usage of the candlestick chart like this can help investors make informed decisions about buying and selling stocks. It provides important information about the open, close, high, and low price for each trading interval. Hence, it can shed light on potential trends in the stock’s price and offer valuable insights that are not immediately apparent in numerical data.\n\nVolume information can offer valuable insights into the supply-demand dynamics and trading volume patterns.\n\nVolume bars can be overlaid into price charts for a better visual perspective. Here is revised code to overlay a volume plot:\n\nThis generates a composite chart with price as a line plot on the top part and volume bars at the bottom part. The two axes are aligned and share the x-axis. Besides this, other types of price/volume overlay views are possible, for example, adding the volume line plot overlaid on the price plot itself.\n\nMarket data provides insight into financial trends and trading volume patterns. In particular, volume information is critical because it reflects the intensity of trading and the consensus among traders about price levels.\n\nThe following Python code uses the package to download Yahoo Finance data for Apple Inc. (“AAPL”). It then overlays volume data below a line chart of the daily closing prices to create a more comprehensive view of the stock’s performance.\n\nThis script generates a composite chart with a line plot of Apple’s daily closing prices in 2021 on the upper portion and corresponding trading volumes as a bar chart on the lower portion. The two charts share the X-axis, representing time. This visualization can help identify periods when trading volumes spiked or dipped and how these corresponded with changes in the stock price.\n\nBy providing both price and volume, we create a plot that offers a richer perspective on market dynamics. This is valuable for investors or traders who are investigating potential correlations and seeking to understand the stock’s activity throughout the year.\n\nHeatmaps are two-dimensional graphical representations where individual values are represented as colors. This makes heatmaps exceptionally effective for visualizing correlations across multiple datasets.\n\nMatplotlib’s function from the module provides an efficient way to generate heatmaps.\n\nBelow is an example code to depict a heatmap for a correlation matrix of stock returns:\n\nThis script generates a 10x10 correlation matrix depicted as a heatmap, with individual cell values annotated.\n\nHeatmaps excel at revealing correlations, patterns, and outliers in complex multidimensional data, making them particularly useful for visualizing stock correlations, portfolio risk, macroeconomic data, and more. The color-coding offers an instant visual summary of information, highlighting areas of interest and sharpening the visual acuity of data analytics.\n\nHeatmaps are a valuable tool in data visualization, providing an immediate, intuitive way to represent complex datasets. The color gradation allows for the identification of patterns, trends, and disparities.\n\nA particularly insightful application of heatmaps is in the financial sector, where they can be used to visualize the correlation between different stocks. This is a crucial aspect of investment portfolio diversification as investing in stocks with high correlations could aggravate risk.\n\nIn the example detailed below, we use real stock data from Yahoo Finance to depict a correlation heatmap. The stocks chosen for this exercise are Apple (AAPL), Microsoft (MSFT), Google (GOOGL), Amazon (AMZN), and Netflix (NFLX).\n\nThis Python script downloads the adjusted closing prices for the five selected tech companies from Yahoo Finance. It calculates the daily return percentage change, applies a logarithmic function to normalize both positive and negative variances, and subsequently computes a correlation matrix. Finally, it generates a heatmap using the Seaborn library, which offers an enhanced interface to Matplotlib for the creation of aesthetically pleasing statistical plots.\n\nThe resulting heatmap reveals the level of correlation between each pair of stocks. Lighter cells denote a higher positive correlation, whereas darker cells represent either a low correlation or a negative correlation (where one stock’s value increases as the other decreases).\n\nThis form of visualization proves particularly valuable for diversification in portfolio management. It enables investors to strategically select investments that aren’t strongly correlated, thereby lowering risk. In addition, heatmaps provide a quick visual summary of potential market trends influencing the selected group of stocks.\n\nThree-dimensional plots offer an effective way to visualize financial models, where the representation of multi-variable data becomes crucial. Matplotlib’s toolkit enables the creation of a variety of 3D plots, including scatter, line, surface, and wireframe plots.\n\nIn the example below, a 3D surface plot visualizes a financial model. Here, a parabolic surface is created to illustrate the concept:\n\nThis script results in a 3D surface plot displaying the parabolic function over the (x, y) domain.\n\n3D surface plots, such as the one shown above, can play an important role in quantitative finance and economics. These are particularly useful when visualizing multi-variable models and financial surfaces. Overlaying heatmap projections can add another layer of depth, enabling a more nuanced understanding of patterns and relationships in the data.\n\nAnimations offer a dynamic way to visualize time-series data, bringing the trends and anomalies over time to life. Matplotlib has inherent support for animations and interactive charts.\n\nThe code snippet below demonstrates how to create an animated time series plot:\n\nThis code continuously updates the data points, simulating a real-time streaming of data with an animated line chart. This sort of “live” visualization can be extremely useful for observing real-time data trends such as stock price movements.\n\nMoreover, Matplotlib supports interactive chart features like zooming and panning. For a more enhanced interactivity including tooltips, other packages such as or can be utilized.\n\nThese interactive visualizations significantly bolster the process of financial data analysis and exploration by letting users manipulate the view to focus on specific details.\n\nLet’s walk through some real-world examples of leveraging Matplotlib’s API for financial analytics and trading strategies:\n\nBacktesting trading strategies: Use Matplotlib’s versatile plotting API to analyze backtest results and generate insightful plots like equity curves, drawdowns, rolling returns etc. These visualizations are invaluable for quantifying and improving strategy performance.\n\nAlgorithmic trading dashboard: Create live updating plots and metrics that serve as visual indicators for algorithmic trading systems. For example, integrate interactive candlestick charts linked to market data feeds using Matplotlib’s animation module.\n\nPortfolio optimization: Plot efficient frontiers and overlay optimized portfolios to visualize portfolio risks and returns for different asset allocations using Matplotlib’s 3D plotting tools. Heatmaps of asset correlations are also useful.\n\nEconomic research: Matplotlib’s statistical plotting features like hist, boxplot and distplot are useful for visualizing economic indicators and gaining insights from macroeconomic data.\n\nFinancial modelling: Use line plots, 3D surfaces and wireframes to visually interpret results from financial models implemented in Python.\n\nMatplotlib offers extensive capabilities for crafting effective, publication-quality visualizations tailored for financial analysis use cases. Mastering Matplotlib is essential for using Python for trading, quantitative finance, fintech and financial data science.\n\nThe key strengths of Matplotlib are its flexible object-oriented architecture, simple but powerful plotting API, and rich customization options enabling full control over all visual aspects. Matplotlib integrates seamlessly with Python’s leading data analysis libraries like NumPy, Pandas, SciPy making it easy to go from data to insight using Python.\n\nThis guide provided an overview of core plotting tools like time series visualizations, customized candlestick charts, heatmaps and animations that are indispensable for financial analysts. Matplotlib enables Python developers to create interactive dashboards, backtesting environments and data-driven financial applications that combine quantitative rigor with visual insights."
    },
    {
        "link": "https://geeksforgeeks.org/data-visualization-using-matplotlib",
        "document": "Matplotlib is a powerful and widely-used Python library for creating static, animated and interactive data visualizations. In this article, we will provide a guide on Matplotlib and how to use it for data visualization with practical implementation.\n\nMatplotlib offers a wide variety of plots such as line charts, bar charts, scatter plot and histograms making it versatile for different data analysis tasks. The library is built on top of NumPy making it efficient for handling large datasets. It provides a lot of flexibility in code.\n\nWe will use the pip command to install this module. If you do not have pip installed then refer to the article, Download and install pip Latest Version.\n\nTo install Matplotlib type the below command in the terminal.\n\nIf you are using Jupyter Notebook, you can install it within a notebook cell by using:\n\nMatplotlib provides a module called pyplot which offers a MATLAB-like interface for creating plots and charts. It simplifies the process of generating various types of visualizations by providing a collection of functions that handle common plotting tasks.\n\nMatplotlib supports a variety of plots including line charts, bar charts, histograms, scatter plots, etc. Let’s understand them with implementation using pyplot.\n\nLine chart is one of the basic plots and can be created using the plot() function. It is used to represent a relationship between two data X and Y on a different axis.\n\nA bar chart is a graph that represents the category of data with rectangular bars with lengths and heights that is proportional to the values which they represent. The bar plots can be plotted horizontally or vertically. A bar chart describes the comparisons between the different categories. It can be created using the bar() method.\n\nIn the below example we will use the tips dataset. Tips database is the record of the tip given by the customers in a restaurant for two and a half months in the early 1990s. It contains 6 columns as total_bill, tip, sex, smoker, day, time, size.\n\nA histogram is basically used to represent data provided in a form of some groups. It is a type of bar plot where the X-axis represents the bin ranges while the Y-axis gives information about frequency. The hist() function is used to compute and create histogram of x.\n\nScatter plots are used to observe relationships between variables. The scatter() method in the matplotlib library is used to draw a scatter plot.\n\nPie chart is a circular chart used to display only one series of data. The area of slices of the pie represents the percentage of the parts of the data. The slices of pie are called wedges. It can be created using the pie() method.\n\nA Box Plot is also known as a Whisker Plot and is a standardized way of displaying the distribution of data based on a five-number summary: minimum, first quartile (Q1), median (Q2), third quartile (Q3) and maximum. It can also show outliers.Let’s see an example of how to create a Box Plot using Matplotlib in Python:\n• and : Customize the appearance of the boxes and median lines respectively.\n\nThe box shows the interquartile range (IQR) the line inside the box shows the median and the “whiskers” extend to the minimum and maximum values within 1.5 * IQR from the first and third quartiles. Any points outside this range are considered outliers and are plotted as individual points.\n\nA Heatmap is a data visualization technique that represents data in a matrix form where individual values are represented as colors. Heatmaps are particularly useful for visualizing the magnitude of multiple features in a two-dimensional surface and identifying patterns, correlations and concentrations. Let’s see an example of how to create a Heatmap using Matplotlib in Python:\n• None : Displays the data as an image (heatmap). The argument specifies the color map used for the heatmap.\n• None : Ensures that each data point is shown as a block of color without smoothing.\n\nThe color bar on the side provides a scale to interpret the colors with darker colors representing lower values and lighter colors representing higher values. This type of plot is often used in fields like data analysis, bioinformatics and finance to visualize data correlations and distributions across a matrix.\n\nMatplotlib allows extensive customization and styling of plots including changing colors, adding labels and modifying plot styles.\n\nLet’s apply the customization techniques we’ve learned to the basic plots we created earlier. This will involve enhancing each plot with titles, axis labels, limits, tick labels, and legends to make them more informative and visually appealing.\n\nLet’s see how to customize the line chart. We will be using the following properties:\n• color: Changing the color of the line\n• linewidth: Customizing the width of the line\n• marker: For changing the style of actual plotted point\n• markersize: For changing the size of the markers\n• linestyle: For defining the style of the plotted line\n\nTo make bar charts more informative and visually appealing various customization options are available. Customization that is available for the Bar Chart are:\n• edgecolor: Color of edges of the bar\n\nThe lines in between the bars refer to the different values in the Y-axis of the particular value of the X-axis.\n\nTo make histogram plots more effective and tailored to your data, you can apply various customizations:\n• alpha: blending value, between 0 (transparent) and 1 (opaque)\n\nScatter plots are versatile tools for visualizing relationships between two variables. Customizations that are available for the scatter plot are to enhance their clarity and effectiveness:\n• s: marker size (can be scalar or array of size equal to size of x or y)\n• c: color of sequence of colors for markers\n• alpha: blending value, between 0 (transparent) and 1 (opaque)\n\nPie charts are a great way to visualize proportions and parts of a whole. To make your pie charts more effective and visually appealing, consider the following customization techniques:\n• explode: Moving the wedges of the plot\n• autopct: Label the wedge with their numerical value.\n• color: Attribute is used to provide color to the wedges.\n• shadow: Used to create shadow of wedge.\n\nBefore moving any further with Matplotlib let’s discuss some important classes that will be used further in the tutorial. These classes are:\n\nConsider the figure class as the overall window or page on which everything is drawn. It is a top-level container that contains one or more axes. A figure can be created using the figure() method.\n\nAxes class is the most basic and flexible unit for creating sub-plots. A given figure may contain many axes, but a given axes can only be present in one figure. The axes() function creates the axes object.\n\nJust like pyplot class, axes class also provides methods for adding titles, legends, limits, labels, etc. Let’s see a few of them –\n• None ax.set_title() is used to add title.\n• None To set the limits we use ax.set_xlim(), ax.set_ylim()\n• None ax.set_xticklabels(), ax.set_yticklabels() are used to tick labels.\n• None To add legend we use ax.legend()\n\nWe have learned about the basic components of a graph that can be added so that it can convey more information. One method can be by calling the plot function again and again with a different set of values as shown in the above example. Now let’s see how to plot multiple graphs using some functions and also how to plot subplots.\n\nThe add_axes() method method allows you to manually add axes to a figure in Matplotlib. It takes a list of four values to specify the position and size of the axes.\n\nsubplot() method adds a plot to a specified grid position within the current figure. It takes three arguments: the number of rows, columns, and the plot index. Now Let’s understand it with the help of example:\n\nThe subplot2grid() creates axes object at a specified location inside a grid and also helps in spanning the axes object across multiple rows or columns. In simpler words, this function is used to create multiple charts within the same figure.\n\nFor saving a plot in a file on storage disk, savefig() method is used. A file can be saved in many formats like .png, .jpg, .pdf, etc.\n\nIn this guide, we have explored the fundamentals of Matplotlib, from installation to advanced plotting techniques. By mastering these concepts, Whether you are working with simple line charts or complex heatmaps you can create and customize a wide range of visualizations to effectively communicate data insights.\n\nWhat is the difference between and in Matplotlib?\n\nCan Matplotlib be used for interactive visualizations?\n\nWhat are some advanced customization options available in Matplotlib?\n\nHow do I handle large datasets with Matplotlib?"
    },
    {
        "link": "https://blog.bytescrum.com/how-to-create-a-personal-finance-tracker-with-python",
        "document": "Managing personal finances is more than just tracking income and expenses. As your financial situation grows more complex, you may need a more sophisticated tool to keep track of investments, budgets, savings goals, and financial forecasting. In this blog, we’ll walk through building an advanced personal finance tracker using Python. This script will not only track your transactions but also provide insights into your spending patterns, help you set and achieve savings goals, and even predict your future financial status.\n• None Using and for interactive visualizations.\n\nIn addition to and , we’ll use for interactive charts and for financial forecasting.\n\nTo accommodate more complex financial data, we'll extend our DataFrame to include columns for tracking budgets, savings goals, and investments.\n\nWe'll create a DataFrame that tracks not only transactions but also the current balance, budget, savings goals, and investment performance.\n\nAllow users to set budgets for various categories and track their spending against these budgets.\n\nAutomatically track progress toward savings goals and visualize them.\n\nTrack the performance of your investments, including stocks, bonds, and other assets.\n\nUse to create interactive plots of your investment performance.\n\nUse time series analysis to predict future income, expenses, and overall financial health.\n\nEnhance the script by adding a CLI that makes it easier to interact with your finance tracker.\n\nBy implementing this tracker, you can gain deeper insights into your finances, set and achieve financial goals, and plan for the future with confidence. As you continue to develop this tool, consider integrating it with online financial services, adding machine learning models for more accurate predictions, or even creating a web or mobile app version."
    },
    {
        "link": "https://ourcodingclub.github.io/tutorials/pandas-python-intro",
        "document": "Create plots and manipulate data with Pandas and Matplotlib\n\nWelcome to this tutorial about data analysis with Python and the Pandas library. If you did the Introduction to Python tutorial, you’ll rememember we briefly looked at the package as a way of quickly loading a file to extract some data. This tutorial looks at and the plotting package in some more depth.\n• Learn how to access data from a Pandas DataFrame\n• Learn how to filter data in a Pandas DataFrame\n• Learn how to read and sort data from a file\n• Understand the basics of the Matplotlib plotting package\n• Learn how to bring together other packages to enhance your plots\n• Learn how to further customise the appearance of Matplotlib plots\n• Be inspired to experiment further with Matplotlib!\n\nis a package commonly used to deal with data analysis. It simplifies the loading of data from external sources such as text files and databases, as well as providing ways of analysing and manipulating data once it is loaded into your computer. The features provided in automate and simplify a lot of the common tasks that would take many lines of code to write in the basic Python langauge.\n\nIf you have used R’s dataframes before, or the package in Python, you may find some similarities in the Python package. But if not, don’t worry because this tutorial doesn’t assume any knowledge of NumPy or R, only basic-level Python.\n\nPandas is a hugely popular, and still growing, Python library used across a range of disciplines from environmental and climate science, through to social science, linguistics, biology, as well as a number of applications in industry such as data analytics, financial trading, and many others. In the Introduction to Python tutorial we had a look at how Python had grown rapidly in terms of users over the last decade or so, based on traffic to the StackOverflow question and answer site. A similar graph has been produced showing the growth of Pandas compared to some other Python software libraries! (Based on StackOverflow question views per month).\n\nThese graphs of course should be taken with a pinch of salt, as there is no agreed way of absolutely determing programming langauge and library popularity, but they are interesting to think about nonetheless.\n\nPandas is best suited for structured, labelled data, in other words, tabular data, that has headings associated with each column of data. The official Pandas website describes Pandas’ data-handling strengths as:\n• Tabular data with heterogeneously-typed columns, as in an SQL table or Excel spreadsheet.\n• Arbitrary matrix data (homogeneously typed or heterogeneous) with row and column labels.\n• Any other form of observational / statistical data sets. The data actually need not be labelled at all to be placed into a data structure.\n\nSome other important points to note about Pandas are:\n• Pandas is fast. Python sometimes gets a bad rap for being a bit slow compared to ‘compiled’ languages such as C and Fortran. But deep down in the internals of Pandas, it is actually written in C, and so processing large datasets is no problem for Pandas.\n• Pandas is a dependency of another library called , making it an important part of the statistical computing ecosystem in Python.\n\nYou can read more about the Pandas package at the Pandas project website.\n\nHere we briefly discuss the different ways you can folow this tutorial. There are lots of different ways to run Python programs, and I don’t want to prescribe any one way as being the ‘best’. Users of RStudio and Matlab may find that the Spyder programming environment most closely matches the feel of RStudio and Matlab, with a window for editing scripts and an ‘interactive’ mode that can be used along side. For a more minimalist approach, you may prefer to write their scripts/programs in a text editor such as Notepadd++ (Windows), vim, emacs, or other popular editors. (But do not use Windows Notepad!). Personally this is how I like to work with Python as it frees you from the distractions of an IDE like Spyder, and reduces the number of problems that can arise from the Spyder program being set-up incorrectly.\n\nFinally there is IPython, which lets you type in Python commands line-by-line, similar to Matlab and and RStudio, or an R console session.\n\nSome more information on the three methods is described below:\n\nIf you are attending the workshop ‘live’ on-site at Edinburgh University, the easiest way is to use the Spyder IDE (Integrated Development Environment) which is installed on the GeoSciences computers. It can also be installed on your laptop relatively easily. It is included in the Anconda Python distibution which can be downloaded here. Be sure to download the Python 3 version!\n\nThe basics of Spyder were covered in the Introduction to Python tutorial.\n\nText Editor with the Linux/Mac Terminal or Command-line\n\nYou can follow this tutorial by writing scripts saved as files and then running the script from the terminal or command line with the command. e.g.\n\nIPython is an ‘interactive’ Python interpreter. It lets you type in Python commands line-by-line, and then immediately execute them. It’s a very useful way of quickly testing and exploring Python commands, because you don’t have to interact directly with the command line or run the entire script. Spyder has an IPython console built in to it (on the right hand panel), or it can be started in Linux/Mac from the command line by running:\n\nNote for interactive (IPython) users: If you are following this tutorial with IPython, you do not need to use print functions to get IPython to display variables or other Python objects. IPython will automatically print out variable simply when you type in the variable name and press enter. So for example:\n\nIPython users: When you see a print function used in this tutorial, e.g. , you can omit it and simply type the variable name (e.g. ) and press .\n\nOn Windows you will find IPython in the start menu if it has been installed.\n\nAll the examples in this tutorial assume you have installed the Python library , either through installing a scientific Python distribution such as Anaconda, or by installing it using a package-manager, such as or . To use any of the features of Pandas, you will need to have an statement at the top of your script like so:\n\nBy convention, the module is almost always imported this way as . Every time we use a feature thereafter, we can shorten what we type by just typing , such as .\n\nIf you are running Python interactively, such as in IPython, you will need to type in the same import statement at the start of each interactive session.\n\nTry the following to see which version of Pandas you are running:\n\nReminder for IPython users: You do not need the function wrapped around the variable here. Just type and press . Remember this every time you see a function for the remainder of this tutorial.\n\nRun the script and note the output. My script prints , but you may be on a slighty newer/older version of Pandas, which is OK for this introductory tutorial.\n\nThis short tutorial is mainly based around working with the basic Pandas commands and data structures, but we also use some data about Scottish mountains, provided in the form of a file ( ).\n\nThe original data came from a series of databases about the mountains of Scotland, which if you are interested further can be found here: [http://www.haroldstreet.org.uk/other/excel-csv-files/].\n\nAs a side note, and some interesting trivia, the dataset we are using was originally compiled in 1891 by Sir Hugh Munro. He compiled a list of all the mountains in Scotland above 3000 feet (914m if you prefer the metric system). The table has been revised since with more accurate heights and coordinates.\n\nPandas has two core data structures used to store data: The Series and the DataFrame.\n\nThe series is a one-dimensional array-like structure designed to hold a single array (or ‘column’) of data and an associated array of data labels, called an index. We can create a series to experiment with by simply passing a list of data, let’s use numbers in this example:\n\nThe output should be:\n\nNote that printing out our Series object prints out the values and the index numbers. If we just wanted the values, we can add to our script the following line:\n\nWhich in addition will print:\n\nFor a lot of applications, a plain old Series is probably not a lot of use, but it is the core component of the Pandas workhorse, the DataFrame, so it’s useful to know about.\n\nThe DataFrame represents tabular data, a bit like a spreadsheet. DataFrames are organised into colums (each of which is a Series), and each column can store a single data-type, such as floating point numbers, strings, boolean values etc. DataFrames can be indexed by either their row or column names. (They are similar in many ways to R’s .)\n\nWe can create a DataFrame in Pandas from a Python dictionary, or by loading in a text file containing tabular data. First we are going to look at how to create one from a dictionary.\n\nDictionaries are a core Python data structure that contain a set of pairs. If you imagine having a written language dictionary, say for English-Hungarian, and you wanted to know the Hungarian word for “spaceship”, you would look-up the English word (the dictionary in Python) and the dictionary would give you the Hungarian translation (the dictionary in Python). So the “key-value pair” would be .\n\nTo construct a dictionary in Python, the syntax we would write is:\n\nWe could then look-up items in our dictionary with this syntax:\n\nDictionaries can have multiple entries (multiple key-value pairs), and these are separated with a comma:\n\nThe in dictionaries are not limited to single strings or words. Values can be any Python object such as numbers, lists, tuples, or even other dictionaries:\n\nLooking up a Scottish mountain using its name as the key would then give us the height, latitude and longitude as the value returned.\n\nEnclosed in a print function, i.e. , this would print out:\n\nIf we didn’t have any real data to play with from an external file, we could manually create a DataFrame from a Python dictionary. Using the dictionary above, we can load it into a Pandas DataFrame with this syntax:\n\nNote: You will sometimes see used as shorthand convention for a DataFrame object in many Pandas examples, such as in the official Pandas documentation and on StackOverflow. (I have used for readability here.)\n\nTry creating a Python script that converts a Python dictionary into a Pandas DataFrame, then print the DataFrame to screen. You can use the example or experiment with your own.\n\nAnd the output should look like this:\n\nNow, this is not necessarily the most logical order to store data. It would probably make more sense for the columns to be categories or types of data, rather than the names of each hill. You may remember from previous workshops that the data is currently in wide format, but we want it in long format. To do this, we need to think about how to structure our dictionary. Pandas works best with dictionaries when the dictionary keys refer to column names or headers. Here’s a better dictionary to use:\n\nWe’ve made the dictionary keys into category-like names, and then these are followed by a list of corresponding data values. Pandas will be able to read this better. Replace the dictionary in your script above and run it again. Now you should get the following output:\n\nThis is a more useful layout for our DataFrame. The column names are ordered alphabetically by default (left to right), but we can specify the order using the keyword. (Another way would be to use an data structure, but that’s not covered in this tutorial…)\n\nIn your original script, replace the line where you create the DataFrame with the following:\n\nRun the modified script. You should now get output that looks like this:\n\nNote how the dictionary keys have become column headers running along the top, and as with the Series, an index number has been automatically generated. The columns are also in the order we specified.\n\n4. Learn how to access data from a Pandas DataFrame\n\nPandas DataFrames have many useful methods that can be used to inspect the data and manipulate it. We are going to have a look at just a few of them.\n\nIf our DataFrame was huge, we would not want to print all of it to screen, instead we could have a look at the first items with the method, which takes the number of rows you want to view as its argument.\n\nIf we added this to the end of our script and ran it again, it would print:\n\nWe could also look at the last rows with the method:\n\nWhich would give us:\n\nOur columns in the object are individual Series of data. We can access them by referring to the column name e.g. . Have a go at adding these extra statements to your script, and check that you get the same output:\n\nNote that Pandas DataFrames are accessed primarily by columns. In a sense the row is less important to a DataFrame. For example, what do you think would happen using the following code?\n\nOuch! That’s a lot of error messages… The columns cannot be accessed by their index number in this way, you must use the column name. You may have thought that this might return the row index instead, but we have to use a different method to get the row:\n\nGives you the row at position zero. (The “first” row in normal speech). This contains all the information about Ben Nevis:\n\nThe method gives us access to the DataFrame in more traditional ‘matrix’ style notation, i.e. notation. So if we wanted to get the height of Ben Nevis specifically, we could do:\n\nWhich would give us .\n\nA way to remeber this is that is short for “integer location”. But a more Pandas-style approach would be to do:\n\nWhich would also give us .\n\nIn other words, we are saying to our Pandas DataFrame “get me the Series, and give me the zero-th item in that Series”. Remember Python uses zero-indexing (starts counting items from zero). Pandas is the same in this regard.\n\nAn even quicker way to access our columns (less typing) is to treat the names as if they were attributes of our DataFrame, like this:\n\nExperiment with modifying your script (or interactively if using IPython) to access different elements of your DataFrame\n\n5. Learn how to filter data in a Pandas DataFrame\n\nWe can also apply conditions to the data we are inspecting, such as to filter our data.\n\nThis returns a new Series of True/False values though. To actually filter the data, we need to use this Series to mask our original DataFrame:\n\nLearn how to append data to an existing DataFrame\n\nWe can also append data to the DataFrame. This is done using the following syntax:\n\nUsing the original script, try adding this line to the end of the script to append the Regions data and then printing the DataFrame again. If you are following the tutorial by building up a script as you go along, it should now look like this:\n\nRun the script again, the output should now be:\n\n6. Learn how to read data from a file using Pandas\n\nSo far we have only created data in Python itself, but Pandas has built in tools for reading data from a variety of external data formats, including Excel spreadsheets, raw text and files. It can also interface with databases such as MySQL, but we are not going to cover databases in this tutorial.\n\nWe’ve provided the file in this Github repository. The file contains all the mountains above 3000 feet (about 914 metres) in Scotland. We can load this easily into a DataFrame with the function.\n\nIf you are writing a complete script to follow the tutorial, create a new file and enter:\n\nRun the script, and you should get the following output:\n\nWe’ve used the function to give us only the first 10 items in the DataFrame, and avoid printing all 282 hills out to screen…\n\nIt looks like this table contains the hills in alphabetical order. It would be nice to see them in order of height. We can sort the DataFrame using the method. You can add the following lines to your script:\n\nRun the script with these extra lines, and have a look at the output:\n\nWe now have our hills sorted by height. Note how we’ve used the argument to specify that we want to sort by height, and then the argument to get the heights sorted in descending order, from highest to lowest.\n\n7. Understand the basics of the Matplotlib plotting package\n\nis a Python package used for data plotting and visualisation. It is a useful complement to Pandas, and like Pandas, is a very feature-rich library which can produce a large variety of plots, charts, maps, and other visualisations. It would be impossible to cover the entirety of Matplotlib in one tutorial, so this section is really to give you a flavour of the capabilities of Matplotlib, and to cover some of the basics, as well as a couple of more interesting ‘advanced’ features.\n\nIf you have a bit of basic Python knowledge already, the common route to learning Matplotib is to find examples of plots similar to ones you are trying to create and walk through them, trying to reproduce them with your own data perhaps. A great starting point is the Matplotlib gallery of examples. I recommend this because in practice it is difficult to cover each and every plot type, as the needs of scientists differ considerably depending on the type of data they are working with or the message they are trying to convey in their visualisation. You might also find it useful to refer to the Matplotlib official documentation as you go along.\n\nLike Pandas, Matplotlib has a few conventions that you will see in the examples, and in resources on other websites such as StackOverflow. Typically, if we are going to work on some plotting, we would import like this:\n\nAnd thereafter, we could access the most commonly used features of Matplotlib with as shorthand. Note that this statement is at the submodule level. We are not importing the full module, but a subset of it called . Pyplot contains the most useful features of Matplotlib with an interface that makes interactive-style plotting easier. Submodule imports have the form and you will see them used in other Python libraries too sometimes.\n\nWe’re going to use the Scottish hill data from the Pandas section of the tutorial, so if you need to set this up again, the script should look like this to begin with:\n\nLet’s have a look at the relationship between two varibles in our Scottish hills data. Suppose I have a hypothesis that the height of Scottish hill increases with latitude northwards. Were going to plot height against latitude. To save typing later on, we can extract the Series for “Height” and “Latitude” by assigning each to a new variable, and , respectively.\n\nAppend the following to the script above:\n\nThen we can plot them as a scatter chart by adding:\n\nTo make Python show the chart, we need to either save the figure, or show it in Spyder. To do this from the script add:\n\nYour script should look like this now:\n\nRun the script and have a look at the figure. It should look something like this:\n\nIPython users: the figure should render automatically after calling .\n\n8. Learn how to bring together other Python libraries with Matplotlib\n\nNow we are going to do some basic statistics so we can plot a line of linear regression on our chart. I’m a software engineer, not a statistician, so this will be pretty basic…\n\nLet’s plot a linear regression through the data. Python has a library called that contains a lot of statistics routines. We can import it by adding to the top of our script:\n\nThen at the bottom of our script, we are going to get statistics for the linear regression by using a function called by adding the following line. Don’t worry, we will go through below how all of this works. These are the lines you need to add to the end of your script:\n\nLet’s pause and recap what we’ve done here before plotting the regression.\n• We used an statement with a slightly different format here: . This is a handy way of importing just a single function from a Python module. In this case we only want to use the function in SciPy’s submodule, so we can just import it without anything else using that syntax.\n• Next we are assigning the results of to variable called .\n• The function is slightly different to the functions we’ve seen so far, because it returns an object with multiple values. In fact it returns the , , , , and (standard error). We can get hold of each of these values by using the dot notation: e.g. , for example, much in the same way we can access our DataFrame attributes with .\n• For ease of typing later, we’ve assigned the to a variable , and to a variable .\n\nThe equation for the straight line that describes linear regression is , where is the slope and is the intercept.\n\nTherefore, we can then plot the line of linear regression by adding the following line:\n\nThat’s a lot of new Python, so let’s review what the final script should look like:\n\nHopefully, you will have a figure that should look similar to this:\n\nI will leave it as an exercise for the reader to determine if they think this is a good fit or statistically significant…\n\n9. Learn how to customise Matplotlib plots further\n\nMatplotlib figures are highly customisable, and there are so many options it is usually best to consult the documentation first. In addition, the Matplotlib official pyplot tutorial is quite useful. To get started on Matplotlib plot customisation, here is an extended version of the above which sets the font sizes, axes lables, linewidths, and marker types:\n\nAgain, the best way to learn the features of Matplotlib is by example, so try to modify your script above with some of the extra arguments added below, such as , , , etc. Have a go at adding your own values, and producing nicer looking plots. Here’s my example to start you off:\n\nIt will produce a figure that looks like this:\n\nThe best way to learn Matplotlib I believe is to learn from examples. I’m going to leave you with two examples that use an extra Python package called , unfortunately, Cartopy is not installed (yet) on the University of Edinburgh’s lab computers, so you will have to try this at home or on your own laptops later. We won’t go through this step-by-step in the tutorial, it is more of an example of how you could take things further in your own time.\n\nThe easiest way to install Cartopy on your own computer is with the package manager conda which you can access by typing into a terminal:\n\nThis is only a short example, so don’t worry if you can’t install it right now, just try to follow the code and have look at the final figure.\n\nFinally, there is one more bonus Matplotlib example plot I would like to share, create by PhD student James Warner at Exeter University. It shows precipitable water in the atmopshere over the year 2017, projected over the globe. He has even created an animation of it which can be viewed on his Twitter account. This was all done using Python and some other Python libraries, including Matplotlib, Numpy, Cartopy, and a few others. It would take a long time to explain all of it, but hopefully it is some inspiration of the cool things you can do in Python with data visualisation.\n\nThe Python code for this is actually not too complicated and he has shared it here.\n\nIf you are feeling ambitious, try reproducing the images!\n\nIn this tutorial we have covered the various ways in which we can use Pandas, Matplotlib, and a few other Python libraries to start doing data analysis.\n• Understood what the Pandas library does\n• Understood the basic Pandas data structures and how to manipulate them.\n• Understood the basics of the Matplotlib plotting package\n• Learnt how to bring use additional packages to enhance your plots"
    },
    {
        "link": "https://medium.com/towards-data-science/5-visualization-libraries-for-python-7705527bcf99",
        "document": "Visualization is key to data communication. Whether you are trying to get something across to your boss, your client or your peers, a well-constructed chart or graph can often make your point more clearly than a table of numbers.\n\nThere are an awful lot of charting libraries for Python but I am going to take a quick look at just 5 of my favorites.\n\nMatplotlib is the grandaddy of Python visualization libraries and is the basis for all of the ones I consider. But Matplotlib can be a little unwieldy and the other libraries have been built on top of it in order simplify things.\n\nEach of the libraries have their strengths: Matplotlib is flexible and powerful, Pandas plotting is simple, Seaborn is good for statistical charting, Plotnine implements R’s ggplot and the Grammar of Graphics while MplFinance is specifically aimed at financial data.\n\nI hope to give you a flavor of each of them.\n\nBut first we need some data to plot.\n\nGapminder is an organization dedicated to dispelling public misconceptions about…"
    },
    {
        "link": "https://create.microsoft.com/en-us/learn/articles/organize-and-track-expenses-excel",
        "document": "How to organize and track your expenses using Excel\n\nAs a small business owner, keeping track of expenses is crucial. Today I'm going to share with you my tips on how to organize and track your expenses using Excel. Starting from a template helps save me so much time, and I can pick a custom design that looks nice and works for my needs. Microsoft Excel has lots of free, customizable budget templates available to pick from, so you're certain to find one that works for you.\n\nLet's open the Excel expense template that I got from the Microsoft Create and dive into a few ways to customize it for my small business.\n\nUse pivot tables to analyze your expenses\n\nThis Excel expense template helps me keep track of all my expenses in one place. Every time I make a purchase, I enter it into the sheet right away! This Excel expense tracker helps me stay organized and ensures that I don't forget any expenses. I use a pivot table to analyze all my expenses easily. A pivot table is a powerful tool that lets you summarize and analyze large amounts of data. To create one, select Insert > Pivot table.\n\nUse categories to organize your expenses\n\nI organize everything in my Excel expense tracker by month, then by category and cost, and add the numbers of actuals and budget.\n\nYou can change the design of the Excel expense tracker in the pivot table tab. Now, I can see all my expenses structured by month and by category with a delightful yellow background.\n\nSlicing and filtering your way to better budgeting\n\nNext, I’ll use my favorite tool, slicers. I use slicers to filter the data for better analysis and find that category and month are the most useful for me.\n\nNow you can filter your data easily. For example, if I want to see expenses only for email marketing, I just click on it and the data is filtered automatically. It's like having x-ray vision for my expenses!\n\nTracking expenses in Excel may sound like a chore, but it's really fun and satisfying. It helps me stay on top of my finances and make informed business decisions. I hope my Excel tips will help you with your own business too. Microsoft Excel offers tons of free, customizable templates for your business - covering everything from financial managment to"
    },
    {
        "link": "https://daloopa.com/blog/key-steps-for-financial-analysis-in-excel",
        "document": "Financial analysis is essential for making informed business decisions, and Excel is one of the most powerful tools to help us do this efficiently. With a few key techniques, we can use Excel to convert raw data into actionable insights your colleagues might actually appreciate.\n\nAs with any, learning the basics, or at least brushing up on them, can save you time and prevent silly mistakes from squandering your precious time. Read on for a crash course on the fundamental concepts behind financial analysis. And for anyone entering the field, all these formulas and ratios should be facile to the point of boredom before you begin expanding your skills. Even though you can leverage AI for financial analysis in excel you still might find yourself hampered by weak skills with the basics.\n\nTrash in, trash out. Any good analysis hinges on accurate data, preferably delivered faster than your competition.\n\nBefore diving into the advanced techniques, it’s essential to set the stage by organizing your data effectively. This involves collecting and consolidating financial statements, historical data, and any relevant information into a structured Excel workbook. Create separate sheets for different datasets such as the income statement, balance sheet, and cash flow statement to ensure clarity and ease of access.\n• Collect Data: Obtain the necessary financial statements, including the income statement, balance sheet, and cash flow statement. Ensure you have data for multiple periods (e.g., past three to five years). You can also leverage a variety of excel add-ins or our dynamic financial data in order to streamline this process and lay the groundwork for dynamic models‍.\n• Sources: Gather data from reliable sources such as company reports, financial databases, and regulatory filings. Verify the accuracy of the data by cross-referencing multiple sources if possible. You can also leverage a variety of excel add-ins for financial data that connect to paid and/or proprietary data sources that could be useful.\n\nStep 2: Normalize & organize your data and financial statements\n\nAfter getting the right data for your model, the next essential is ensuring that all your data types are exactly what you think they are. Issues here can lead to time wasted late on in your work.\n• Create Separate Sheets: Set up different sheets in Excel for the income statement, balance sheet, and cash flow statement. This helps maintain clarity and organization.\n• Input Data: Enter the collected financial data into the respective sheets. Ensure accuracy and consistency in data entry by double-checking figures and using consistent units (e.g., thousands or millions).\n• Standardize Format: Use a consistent format for dates, numbers, and text to maintain clarity. Use proper cell formatting to distinguish between different types of data (e.g., currency, percentages).\n• Leverage Macros and VBA (Visual Basic for Applications) – Macros and VBA automate repetitive tasks and complex calculations, enhancing efficiency. Record macros for simple tasks and write VBA scripts for more complex automation.\n\nEnsuring traceability helps maintain transparency in your analysis, making it easier to audit and verify the calculations. This is particularly important in collaborative environments where multiple stakeholders review the analysis.\n• Use Cell References: Instead of hardcoding numbers, use cell references to link related data. This allows for automatic updates and ensures data integrity. For example, link the total revenue in your summary sheet to the revenue figure in your income statement sheet.\n• Trace Precedents and Dependents: Use Excel’s trace precedents and dependents features to track how data flows through your formulas. This helps in understanding and troubleshooting complex models.\n\nWhile it may feel minor, clearly attributable data is what drives compelling and defensible conclusions.\n\nStep 4: Calculate key financial ratios & compare them to targets and industry benchmarks\n\nWhile the “math” is fundamental to conducting any financial analysis, it is truly just one piece of the overall puzzle that coalesces into a strategic perspective. The brass tacks of any financial analysis should already be well within your skill set but if you need to hone your skills before joining a new role or brush up the resources below can help:\n• Commonly Used Excel Formulas: While integrations, VBA, and ease of use make excel a powerful tool, the basic formulas are still essential knowledge. Depending on your background you may already be comfortable with these formulas. But for anyone starting out, or brushing up, memorizing these can help you dissect models, and develop your own tailored models more efficiently.\n• Commonly Used Ratios: After using industry reports, financial databases, and competitor analysis to gather benchmark data most theses rely on some core relative ratios. By comparing these ratios to industry standards and target performance teams can quickly understand and project company performance. An intimate understanding of these fundamentals will serve you throughout your career. Most, but not all models will rely on a core set of financial ratios.\n• Common Analysis & Valuation Techniques in Financial Models: At the heart of financial models are the actual valuation and analysis techniques that tend to be the destination for all the data we gather. Six of the most common types are listed here and should all be familiar to you.\n• There’s no reasonable way to cover all the potential applications of the above skills but if you’d like some samples of how all these various techniques can be applied in action you can review the resources below:\n• Watch how data sheets on DKNG can help an analyst discover KPIs and spark novel ideas.\n• Watch two analysts leverage the same platform to either quickly gain insights on Amazon’s Q1 ‘24 earnings or generate a deep peer analysis in just a few minutes.\n• Learn how any analyst can dominate earning seasons and never miss a Friday happy hour again with data feeds that update their models in seconds.\n\nIn a world of mediocre models, understanding the true drivers of variance and developing models that relay non-consensus conclusions accurately and with great data is a real differentiator. As we’ve covered previously when discussing how to build great financial models , models should be oriented towards the true drivers of any given business. A great analyst focuses their efforts on what truly matters since our ultimate “goal is to derive a non-consensus outcome for the security, and to be right!”\n\nDeveloping models that capture all the tough granularity relays thoroughness and care, but this often leads to highlighting the right drivers. Training your mind to identify and analyze the main drivers of variances against the previous year’s data, and understanding these drivers provides valuable insights into which areas of the business are performing well and which need improvement. Use this analysis to inform better planning and forecasting decisions.\n\nSupporting sheets provide the necessary detail to back up your analysis and conclusions. They help create a narrative that explains how the numbers were derived and what they mean for the business. In short you should always be ready to defend your work.\n• Detailed Calculations: Maintain sheets with detailed calculations that support your analysis. This includes breakdowns of revenues, expenses, and other key financial items.\n• Assumptions and Inputs: Create a sheet to document all assumptions and inputs used in your analysis. This ensures transparency and makes it easier to update the model as new information becomes available.\n• Scenario Analysis: Develop scenarios (e.g., best case, worst case) to demonstrate how different assumptions impact the results. Use these scenarios to provide a range of possible outcomes and their implications.\n\nVisualization helps in effectively communicating your findings to stakeholders. Making complex data more accessible and facilitating better decision-making in less time.\n• Pivot tables are your new best friend\n\n‍\n• Pivot Tables are powerful tools for data exploration and analysis and you’ll be using them daily. They enable you to drill down into the details and extract meaningful insights from complex datasets.\n• Create Pivot Tables: Use Pivot Tables to summarize and analyze large datasets efficiently. Pivot Tables allow you to quickly reorganize and explore your data.\n• Group Data: Group data by various dimensions such as time periods, departments, or product lines to uncover insights. This helps in identifying trends and patterns that may not be immediately apparent.\n• Calculated Fields: Add calculated fields within Pivot Tables for additional metrics. This allows for more sophisticated analysis and reporting.\n• Charts and graphs: Use Excel’s charting tools to create visual representations of your data. Visuals make it easier to understand and communicate the results of your analysis.\n\n‍\n• The classics still work:\n• Line charts: Track changes over time for metrics like revenue and net income. Line charts are useful for showing trends and patterns.\n• Bar charts: Compare different categories or segments. Bar charts are effective for highlighting differences between groups.\n• Pie charts: Show proportions of different expense categories. Pie charts provide a clear visual of how different components contribute to the whole.\n\n‍\n• Waterfall charts: Illustrate the cumulative effect of sequential positive and negative values. Waterfall charts are useful for showing how different factors impact a particular metric.\n\n‍\n• Bridge charts, similar to Waterfall Charts, are used to present changes in financials over time, showing how each component affects the total change.\n\n‍\n• Heat maps visualize data to show the magnitude of values, using color gradients to represent different ranges, making it easy to identify patterns and outliers.\n\n‍\n• Tornado charts Tornado Charts visualize the sensitivity of an outcome to changes in input variables. They help identify which variables have the most significant impact on the model.\n• Conditional Formatting: Apply conditional formatting to highlight key data points and trends. Use color coding to make important information stand out.\n• Dashboards & Reporting: Develop a dashboard to present key metrics and visualizations in a single view. Dashboards provide a high-level overview of the company’s financial performance.\n\nWondering how to do financial analysis in Excel faster?\n\nDaloopa can help you streamline your current approach with our AI. Mastering Excel is essential for evaluating a company’s performance, creating financial forecasts, or building valuation models, as it can transform complex data sets into clear and understandable outputs. However, it is important to become proficient with the fundamental formulas and ratios to the point of ease before tackling serious modeling work. Even with the aid of AI for financial analysis, struggling with the basics can hinder your analysis."
    },
    {
        "link": "https://media.mit.edu/files/docs/account/Chart%20of%20Accounts%20List%20Excel%20Organize%20and%20Track%20Your%20Finances%20Efficiently.html",
        "document": ""
    },
    {
        "link": "https://create.microsoft.com/en-us/learn/articles/tracking-monthly-expenses-excel",
        "document": "If budgeting and expenses stress you out – I got you! There are tons of monthly expense Excel templates and other Excel templates available on Microsoft Create. Choose one that catches your eye, I really liked this monthly family budget template to start with. It not only tracks my monthly expenses and income, but it also creates a fun Cash Flow chart so we can easily see the cash coming in and the cash going out.\n\nHere are a few ways I’d suggest customizing this spreadsheet to make tracking your money even easier.\n\nOn the Monthly Income tab, I like to add in additional rows of income streams by clicking on a row label and then using the keyboard shortcut Ctrl + Shift + Plus (on a PC) or Option + Shift + Return (on a Mac). That way we can keep our income streams organized in the Excel expense tracker.\n\nUse a chart to make expenses easier to track\n\nOn the Monthly Expenses tab, I also like to see a breakdown of my expenses in chart form. To do this, I highlight the monthly expenses list plus the actual list, select Insert, then select a chart option to find a nice way to visualize my data. I’ll pick a bar chart to use here. I also like to sort using the \"Actual\" column to rearrange my chart, and then switch up the title too.\n\nI hope you found these Excel expense tracking tips helpful. You can check out more free expense tracker templates on Microsoft Create."
    },
    {
        "link": "https://incharge.org/financial-literacy/budgeting-saving/how-to-use-excel-for-budgeting",
        "document": "Creating a proper budget is fundamental to good financial health. Indeed, it’s the most valuable lesson anyone can learn. Most Americans — 53% — agree with this, according to a survey by the financial services company Empower.\n\nIf you’re with the majority (and you should be), the question becomes how best to go about it. For experts, there’s a one-word answer: Excel.\n\nYes, we’re talking spreadsheets. And in the spreadsheet world, Excel is the gold standard. Developed and constantly refined by Microsoft, Excel is a component of the Office product group. Excel’s primary application is formatting, organizing, and calculating data.\n\n“The main advantage of Excel is its versatility and uses,” says Andrew Priobrazhenskyi, a shopping and savings expert at DiscountReactor and a longtime Excel user. “Build custom reports, schedule calculations, and get alerts before your budget is consumed. It can track years of financial data without ever getting cluttered as it processes copious amounts of data with ease.\n\n“Also, cloud syncing allows you to get your budget on the go and have it ready and waiting whenever you need it.”\n\nIn the world of organizing, there’s almost nothing a spreadsheet can’t do. Once you get the hang of it, you may begin spreadsheeting everything, from household responsibilities to weekly work/school schedules to vacation plans to bucket list priorities to Christmas preparations.\n\nFor now, let’s get the budgeting portion right.\n\nDespite robust competition (Google Sheets leaps to mind), Excel remains the budgeting go-to tool because of its accessibility, flexibility, a wide range of functionalities, and support from Microsoft.\n\nAnd it can change your life.\n\n“We use Excel spreadsheets in our home,” says Erica Sandberg, a consumer finance expert for CardRates.com. “My husband and I created a budget many years ago, and it’s interesting to see how our spending and savings have evolved. It has definitely helped us gain and maintain a clear perspective about where we are financially. I’m naturally more of a paper-and-pen person, but this program is better when there are two or more people involved in the decision-making process.”\n\nSetting Up Your Excel Spreadsheet for Budgeting\n\nYour commitment to using Excel to organize and pilot your personal, family, or business budget is a commendable first step. Now, don’t let the organizational component send you scurrying back to legal pads, sticky notes and No. 2 pencils. Getting your spreadsheet operational is easier than it looks.\n\nExcel spreadsheets operate through a series of logically interconnected columns, rows and pages (sheets, in Microsoft lingo). And the result can be exquisite.\n\n“If you haven’t used Excel spreadsheets before,” Sandberg says, “you may experience a short learning curve. For many people, it is not intuitive. There is no reason to worry, though. You won’t be doing anything terribly complicated, just adding your income, then a list of your expenses in one column and what costs in the corresponding column. The program does all the heavy mathematical lifting for you.”\n\nYou can decide how all these components are designed, tagged and linked, or you can make things simpler by choosing among the several customizable Excel personal budget templates (some of which are downright snazzy).\n\nTodd Stearn, founder of The Money Manual, endorses the Excel template method. “That’s part of the ease of getting started,” he says. “Excel, you don’t have to figure out for yourself how to get started setting up your budget. You can just download a free personal budget template from the Microsoft Office website. You can get some good budgeting tips there, too.”\n\nBegin by opening Excel and navigating to the “File” tab. Select “New” to shop among the available templates.\n\nOnce you settle on a template that suits your situation, needs and — this is not insignificant — your eye, click “Create.” You have begun.\n\nYour journey continues with the assigning of categories, accounts, goals and even icons to your spreadsheet.\n\nAmong the headers you may want to consider are date, expenses, cost, income, balance, and notes. Make your headers stand out by putting them in bold, italics … or bold italics!\n\nIf you choose a template, let it guide you through the process of setting up your budget, keeping in mind that the purpose of the exercise is to make your financial tracking efficient, clearly laid out, and easy to use.\n\nThe two largest general topics for any budget involve income and expenses. Money coming in. Money going out.\n\nBegin with income. Here’s where you figure out whether your chosen template is right for your situation. If you are a full-time employee with regular hours and no other sources of income, almost any template will satisfy.\n\nHowever, if your income is more complicated, or you are budgeting for a business, make certain the template can accommodate your circumstances. Perhaps you’re a sole proprietor, an entrepreneur, a contractor, or in sales. Does your job often involve overtime? Your income may fluctuate. The same applies if you’re a freelancer or involved in a side hustle. Make certain you’re able to track your projected income and your actual income.\n\nThat’s not all. Do you rely on interest or dividend income? Do you receive payments such as alimony or child support? Your template should support the recording of every category of income.\n\nIf you’re going with a traditional Excel spreadsheet, list your sources of income (under the header Income) in Column A. Customarily, users assign a name — Budget 2024 — to the cell occupying Column A, Row 1. Below that, usually Column A, Row 3 (Row 2 usually gets months of the year), go your categories. Examples include salary, bonuses, freelance, side hustle, dividends, interest, and child support. Give each source its own row.\n\nIn the row below the last Income category, assign a row called “Total.” This will come in handy later.\n\nMove on to expenses. Again, templates anticipate a wide variety of expense topics; they also allow for customizing.\n\nIf you’re using a standard Excel spreadsheet, drop down a few rows from your final Income entry, add an Expenses header, and then list the bills you pay. Give each expense its own row.\n\nAgain, when you have completed your list of expenses, assign a row called “Total.”\n\nKeep in mind, that expenses vary from household to household. But almost all will have entries for housing (mortgage or rent), various utilities (water and sewer, electricity, gas), groceries, mobile phone, a clothing allowance, household maintenance, and entertainment.\n\nRemember your extras. For instance, rather than lumping them all into “entertainment,” you may want to give your leisure subscriptions — games, streaming services, movies — rows of their own, to distinguish them from visits to the multiplex, sports bar, concerts, theater or Top Golf. The same can apply to hobbies, recreation, club and gym memberships, continuing education, and so on.\n\nEating out can be a separate row. Piano or martial arts lessons for the kids, too. Shop at two or more grocery stores? Give each its own row.\n\nSimilarly, it may be useful for business owners budgeting with Excel to establish rows for inventory, payroll, contracted services, and employee benefits (which also can be broken down into individual components).\n\nNo matter how granular you’d like to go with your personal or business accounting, Excel is there with another row.\n\nOnce you have a working list of income sources and expenses, it’s almost time to begin filling in the individual cells (the little rectangles to the right of your categories).\n\nFirst, though, for all you do-it-yourselfers, name the columns, beginning with Column B. Typically, these get the names of the months; also typically, you begin with January in Row 2, Column B. Type “Jan,” then click the lower right corner of the cell and drag it across to Cell M2. Excel does the work of adding the other 11 months.\n\nNext, drop down to Income and enter the projected figure for each category for each month.\n\nRepeat the process for your projected expenses.\n\nKey points to keep in mind: Income and expenses tend to change over time. Be sure to stay on top of these fluctuations so your budget projections remain as accurate as possible. If you’re still on the grid, you may find your power usage changes with the seasons; a $250 bill from the electric company in April could be closer to $500 in July. Splurge spending, on clothes or dining out, for instance, can have a significant impact on your bottom line.\n\nBudgeting success, whether on Excel or a legal pad, requires maintaining current, consistent, and accurate figures.\n\nIt pays to be a little cold-blooded about the process, says Roger Silk, Ph.D., CEO of Sterling Foundation Management and author, with daughter Katherine Silk, of The Investor’s Dilemma Decoded: Recognize Misinformation, Filter the Noise, and Reach Your Goals (Wiley; April 2, 2024).\n\n“Three important tips are: 1) get started, and 2) be prompt and 3) get paper receipts,” Dr. Silk says. “Record your expenses the same day — for example, every evening. It should only take you a few minutes.\n\n“I like paper receipts because they provide an automatic checklist. If you get a paper receipt each time you spend money, put it in your pocket, you can then go through them at the end of the day. If you forget to track your expenses in Excel, it can be difficult to remember them weeks later. (This is especially a problem if you use cash and lose your receipts.)\n\n“By consistently tracking my expenses, I can see on my monthly Excel spreadsheets how much money I’ve spent each month. I can then use that number, subtracted by my earnings, to ensure that I’m meeting my savings goal.”\n\nWhile you’re inputting all this financial data, keep in mind Excel allows users to format cells. Want a cell, or a column of cells, to reflect monetary values (dollars and cents, generally)? Excel allows you to achieve the look in a variety of ways.\n\nThe most straightforward method involves the following steps:\n• Highlight the column you want to change by clicking on its letter at the top of the spreadsheet.\n• Right click anywhere within the highlighted column to reveal a list of functions.\n• Left click on “Format Cells” to reveal your formatting options.\n• From there you can choose whether to show dollar signs, how many decimal places you want to display, and how you want negative numbers to appear.\n\nSimilar formatting opportunities exist for dates, time, percentages, accounting, and more. The steps are similar, involving highlighting, right clicking, choosing your preference, left clicking, and so on.\n\nSo far, your budgeting experience with Excel may seem like little more than a digitally gussied-up version of the ledger Bob Cratchit kept for Ebenezer Scrooge in 1843. That’s fair. Where your budgeting zooms from 19th-century ink-stained drudgery to clean-as-a-whistle cutting-edge financial wizardry is through the application of various Excel functions.\n\n“Creating detailed budgets, tracking spending and setting financial goals, has changed how I handle money and make decisions with it,” says attorney and personal finance adviser Erika Kullberg, creator of the widely followed Erika.com.\n\n“If I could offer one piece of advice, it would be to start small. Work with basic income and expenditure tracking and learn the most basic functions of the software. Gradually, start experimenting with more advanced features as you get more comfortable with it.”\n\nWe begin with the SUM function, the one you’ll use most. SUM enables the adding and subtracting of numbers, numbers within cells or a combination of the two. Using SUM, you are able to total your income and expenses.\n\nAgain, templates offered free by Microsoft and other software developers do most of the heavy lifting for you. Totaling a column is as simple as clicking the Total row and choosing the function you want to work with. In most templates, SUM will be the default function; you’ll see the total change as you input the pertinent financial figures.\n\nClick in the total box on your template and you’ll see other functions pop up as well, among them average, count, max, min, var and an option for even more functions.\n\nFor those working from a blank Excel spreadsheet, giving commands to functions involves typing a formula into the field with which you’re working, or in the formula tab at the top of the spreadsheet.\n\nClick on your blank Total cell. Type =SUM and, voila, the column will be added for you. Want to leave out one of the rows? Choose the formula tab above the spreadsheet (with fx in the rectangular box), choose SUM, and then input the figures you want to add.\n\nOther functions you may find useful include AVERAGE (spending at the grocery store, for instance, or income when your job involves bonuses, overtime, or commissions), SUMIFS (for isolating or grouping certain expenses or income streams), COUNTIFS (for tracking numbers, such as total number of bills in a month, or total number of paychecks in a quarter), MIN, MAX, and DAYS (to your next paycheck, for example).\n\nSoon, by using and becoming increasingly comfortable with these functions, you’ll be precisely tracking every part of your financial life, the first step toward becoming a superior money manager.\n\nExcel provides for “conditional formatting,” which allows the user to highlight important data with positive or negative differences. Select the cells in the column of interest, then go to the “Conditional Formatting” menu in the toolbar (a square with pale red bars on the top and bottom). You can apply gradients, highlights, and even (by choosing Icon Sets) icons such as arrows and shapes. Use them individually, or in combination.\n\nEstablishing a budget, and then remaining within the realistic guardrails you set, is a critical first step in your new financial life: You have committed to living within your means, rather than simply winging it, hoping for the best, and scrambling when the money runs out before the end of the month. Good on you. Peace of mind is at hand.\n\nBut you can do better. Rather than simply making certain ends meet each month, your budget — especially one managed with the capabilities of Excel — can be the vehicle that guides your financial goals.\n\nThe nature of your financial ambitions doesn’t matter. What does matter is they’re yours, and they can be achieved through effective budgeting wrapped in patience.\n\nFor an effective launch, apply the SMART strategy (it’s not just for work projects) to your financial goals. That is, make your goals specific, measurable, achievable, relevant, and time-bound.\n\nYour oldest is 8, for example, with dreams of becoming an engineer. Your SMART goal: Establish a $40,000 college fund (specific) by investing $235 per month (measurable). Your budget will tell you whether the spare money is available, and where to make changes if it’s not (achievable). Your offspring’s well-being is plainly relevant, and the deadline is clearly time-bound: 10 years.\n\nYou can apply SMART goal strategies to everything financial, from upgrading your housing situation to planning a fantasy vacation to paying off debt and beyond.\n\nExcel can help track your progress toward each and every SMART financial goal, short-, medium- and long-term. Simply establish a row and column for each goal and make certain to keep them updated. Use the functions and conditional formatting discussed above to see whether you’re progressing satisfactorily.\n\nPersonal finances — or small businesses, for that matter — resist stagnation. Change happens. Rather than merely rolling with these variables, proper budgeting can help you recognize trouble spots as well as opportunities. This is the beginning of the analysis.\n\nThe lavish selection of charting and graphing tools included with Excel can help you analyze, in a visually appealing way, the ever-shifting landscape in your financial plan. Simply plug in the pertinent numbers and Excel performs the work.\n\n“Excel … excels … in data visualization,” Kullberg says. “By drawing charts or graphs you can show a visual representation of your budget and better show and share with family members where the money goes, how you’re holding up against your budget, where the problem areas are, and how they evolve over time. This kind of information is harder to attain with paper records.”\n\nLike SMART planning, data-driven decision-making isn’t just for work anymore, especially with a numbers-cruncher like Excel at hand. You’ll soon be making choices about finances based on hard, true data. Watch what happens to those bar graphs or pie charts when you factor in an unexpected raise or bonus at work, there’s an unanticipated repair bill, or junior gets an opportunity to study abroad.\n\nExcel’s real-time analysis will reveal whether you’re consistently overspending in one expense category or another, allowing you to proactively reduce that expense. Your graphs and charts also will show where you’re succeeding: debt paid down, investments on the rise, goals looking good, and so on.\n\nThis all hinges on prioritizing regular budget reviews and accounting for needed adjustments, keeping your financial strategy on course. Excel makes the process easier.\n\nTips and Tricks for Effective Budgeting in Excel\n\nExcel includes a vast array of functional tools, far more than those we discussed earlier. As you become comfortable with the essentials, consider browsing Excel’s “Lookup and Reference” dropdown menu. Among those you may find useful are Index, Match, and XLookup. Excel experts use those features to locate specific information in large tables of data.\n\nExcel provides an abundance of useful shortcuts, too many to list here. Among these are:\n• Create a chart of the selected data in new worksheet (F11)\n• Create a chart of the selected data in current worksheet (ALT+F11)\n\nThat’s only scratching the surface. Not that it’s necessary to learn or use any of the Excel shortcuts. The essential functions discussed above are more than sufficient for effective budgeting.\n\nSpeaking of which, your budget is only as good, or as accurate, as your input. Excel, just like Cratchit’s pen-scratched ledger book, is no better than the accuracy and timeliness of the figures entered.\n\nYour commitment must include tracking that is persistent and precise; sticking to realistic goals; providing for an emergency fund; proper planning; being realistic about debt; neglecting savings; budgeting for taxes; making adjustments as necessary; and setting aside at least a little bit of money for fun.\n\nWe should mention, also, that while Excel comes equipped with virtually everything you could possibly want for effective, efficient budgeting — and Microsoft keeps adding handy new features, such as the right-click search tool — third-party developer enhancements are not to be overlooked.\n\nAI comes to Excel via GTP, Ajelix, Sheet+, ExcelBot, and GTPExcel. There’s also a built-in Excel Formula Bot. Among their uses: analyze data more easily, insert data from a picture, collaborate, generate formulas, and more. Many Excel-compatible AI programs are free for individual users.\n\nAmong other third-party add-in offerings: templates (Vertex42, ClickUp, Spreadsheet), charts (Bubbles), accounting help (Checkbook Assistant), debt tracking (Loan Assistant).\n\nMoney management may be a complicated business, but it’s one you ignore at your peril. Creating and maintaining a personal budget with Excel is among the best ways to untangle the complications.\n\nThe process of setting up your personal, family, or small business budget with Excel, then customizing the results according to your needs, positions you to understand your finances, master your spending, and achieve your goals.\n\nYour best future is waiting. Start your Excel budget adventure today."
    }
]