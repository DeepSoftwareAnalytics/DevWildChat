[
    {
        "link": "https://stackoverflow.com/questions/48546962/building-a-responsive-slider-with-flex-css-and-javascript",
        "document": "I'm trying to build a responsive flex slider. I have a container that is the flex and the items inside are to be centered vertically & horizontally. It's supposed to show 1 item at a time while the rest of the items are offscreen. currently it's showing all items at the same time. How do I show 1 item at a time. I can't seem to get there. If i could figure out how to show 1 main item & the rest off screen, i think i could figure the rest out. Any help is greatly appreciated. Here's the link to what i'm working on:\n\nUPDATE here's my code for trying to animate the slide:"
    },
    {
        "link": "https://w3schools.com/css/css3_flexbox_responsive.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://stackoverflow.com/questions/40559629/how-to-make-a-horizontal-scrolling-carousel-using-flexbox",
        "document": "Make a horizontal scrolling carousel just like Google (see picture)\n\nI've never used flexbox before. My hunch is I need to set and .\n\nAny ideas on what other CSS properties I need to use? I'd really appreciate it."
    },
    {
        "link": "https://blog.logrocket.com/responsive-image-gallery-css-flexbox",
        "document": "Editor’s note: This article was last updated by Rahul Chhodde on 19 June 2024 to incorporate practices for optimizing the display of responsive CSS image galleries using properties like and . It also now includes live CodePen demos of the responsive galleries created.\n\nGalleries are an effective way to display collections of high-quality images. In web projects, developers create galleries to display images in a grid-like fashion so that users can easily browse them.\n\nThere are many ways to create such grid layouts with CSS alone. In this tutorial, we will cover how to use CSS flexbox to create responsive image galleries that look good on all devices. We will demonstrate the effectiveness of different flexbox properties through practical projects. Each project uses CSS custom properties to manage reusable values, incorporates media queries to add screen-specific CSS, and utilizes CSS flexbox properties to lay out the galleries.\n\nA basic understanding of CSS is required to follow along with this tutorial.\n\nThe CSS Flexible Box Layout Module was designed to create one-dimensional layouts, either arranged as rows or columns at a time. It’s a CSS interface that provides access to properties that allow you to align and justify flex items inside flex containers.\n\nIn addition, flexbox can wrap items onto multiple lines to achieve a grid-like structure, which we will look at shortly.\n\nWhen a flexbox container wraps its items, it treats every line as a separate flex line. It also allows you to justify these items based on their size and the available space on the flex line they are placed on. We will take a closer look at the wrapping and arrangement of flex items in the next section.\n\nLet’s start by determining the structure of our image gallery. Our image gallery should be a flex container with multiple cells or items, each containing images. We can wrap each of these images inside a figure element that carries an optional element serving as the caption for the associated image:\n\nspecifying the width and height attributes of the images is a good practice that prevents cumulative layout shifts (CLS) issues and thus improves the score of a webpage. If you are unsure about what values to provide to these attributes, simply add the original image dimensions and the browser engine will take care of the spacing and aspect ratios for each image.\n\nInstead of using the or elements to represent the gallery or gallery items, we used simple elements to ensure we can easily extend this structure to something larger in the future, such as a lighthouse component.\n\nNow, if we populate this structure with images, all the media will appear stacked on top of each other as no CSS styles have been applied to the structure yet.\n\nImplementing a reset is important to provide a baseline for our project and normalize different elements to behave the same way on every browser. I‘ve tried to keep the reset as minimal as possible, but you may choose the one that best suits your needs:\n\nThis reset sets for every element on the page to to keep the size of the elements unaffected by padding and border values. It also keeps our images from bleeding out of their parent elements. Alternatively, we may also add styles for a page container that wraps everything that is displayed on our page within itself.\n\nAs you may have noticed, we are managing some settings with CSS custom properties for easy customizability and maintenance.\n\nWe are now all set to apply flexbox properties and start building our image gallery. We will progressively enhance our galleries by first building basic functionalities and then adding features as the application grows.\n\nAs planned, the element will contain all the items with images, so it should be the flex container in this case. We’ll start by giving the a flex display and add more flexbox properties like and :\n\nLet’s take a closer look at the other CSS properties we applied to the flex container:\n• The property ensures that flex items will wrap onto another line\n• The property sets a gap between rows and columns; in this case, it’s set to\n\nAdditionally, you may add the property to align the items to the center or the end of the flexbox axis.\n\nNote that, by default, the direction or main axis of a flexbox container is “row,” which is why all the flex items immediately line up horizontally.\n\nBecause this is a gallery of fixed-height items, we can use the CSS property to maintain the relationship between the width and height of each image. Let’s also use the property and make the images fit within the available area as a cover, preventing them from appearing stretched out. Doing so will also avoid the need to add the property to the gallery item and hide its overflow:\n\nAdditionally, you may use properties like to add styles to the images to suit your design needs.\n\nNext, we should specify a new custom property that governs the number of items per row in our gallery. Because we are building the gallery from smaller screen sizes to larger ones, we should set this number to for now:\n\nAlso, we have to formulate what width (or ) we are going to give each of our items to fit perfectly considering the number of items per row and also the gap between the items.\n\nIf we manage to calculate the total space covered by the gaps between the items, we can find out the net space available for the items to occupy by subtracting that net gap amount from the available space in the container. Given that the container’s total space is 100%, this is how we’d calculate the space:\n\nis the total space covered by gaps, is the gap width, and is the number of items per row. Now that we have the net space available for the items, we can divide this value by the number of items to calculate the space covered by each item ( ):\n\nLet’s implement this logic to provide a to each gallery item, which sets the initial size of the flex items. We plan to create a gallery with fixed-width items, therefore, each item should be prevented from shrinking or growing automatically.\n\nKeeping that in mind, we can now use the function to provide the calculated , and also set and values to 0 with the shorthand property, as shown in the code snippet below:\n\nAlso, we are using the and elements to contain the images and their captions. To ensure the layout doesn’t break, we should remove the usual extra margin that the element carries around it. We’ll also style the a bit:\n\nWe can now set up some media queries for larger screen sizes. Using the CSS custom properties, we only have to specify the appropriate items per row inside the media query blocks, and the rest of the logic for calculating the new for each item will be handled automatically:\n\nPiecing it all together, we now have a functional and responsive image grid, i.e., a gallery, that also supports simple captions:\n\nSee the Pen \n\n Simple Flexbox Grid with captions by Rahul (@_rahul)\n\n on CodePen.\n\nWe already have a simple setup for the captions associated with the images, which are handled by the element, as discussed above. We can further enhance these captions and set them to appear only on hover.\n\nWe will cover two variations of captions: transitioning from a simple appearance to a more funky and stylish one.\n\nOur goal is to make the captions free-flowing inside the gallery items. This can be achieved by using absolute positioning for the .\n\nTo ensure that the free-flowing items do not disrupt the layout, the gallery items need to be relatively positioned to specify boundaries for the captions they carry.\n\nBecause the captions are no longer staying outside the gallery items and will float over the image instead, let’s also move the property from the image to the gallery item. To maintain the visual appeal of the decorations like , it’s important to prevent the gallery item contents from overflowing their parent element by setting the property to :\n\nThe captions appearing over the images should be clear and legible. To achieve that, let’s set a dark background to them with a bit of opaqueness and a brighter text color:\n\nThe caption is supposed to appear when the associated gallery item is hovered over. We should start with zero opacity for the initial state and transition it to 100% on hover, making the caption appear with a subtle fade-in transition:\n\nThe rest of the settings add alignment and size to the caption and are pretty straightforward to deal with, but you may also customize their behavior if needed:\n\nSee the Pen \n\n Simple Flexbox Grid with classic captions by Rahul (@_rahul)\n\n on CodePen.\n\nTurning the classic captions into overlay ones requires spanning them all across the available space within the gallery items and aligning the caption contest to the absolute center:\n\nIn the CSS code above, we set the property to 0, which is a shortcut to set the , , , and positional properties to zero. This causes the target element to take up the full width and height of its container.\n\nThen, we used flexbox to align the content of the caption to the absolute center. We also removed the extra top margin from the caption, as we want it to occupy the entire area provided by the item.\n\nTo make the hover transition slightly more interactive, we used the transformation property along with . Finally, we adjusted the hover state to scale the caption to 100% as shown below:\n\nNow, let’s save and test our project to ensure it works as expected:\n\nSee the Pen \n\n Simple Flexbox Grid with overlay captions by Rahul (@_rahul)\n\n on CodePen.\n\nThe second example is more like a horizontal masonry and involves creating an image gallery that arranges its items automatically on the horizontal axis while respecting the aspect ratios of the images.\n\nIn the previous example, we fixed the aspect ratio of each image using the property, which won’t be very useful in this particular example. Instead, the images with different dimensions in the markup will help demonstrate how the aspect ratio of the images is maintained and how a horizontal masonry-like grid is created.\n\nNote that the markup for this example project is the same as that for the first project. The only things that change for this example are the CSS styles, where we got rid of the formula from the previous example for , as we no longer want items with equal width. Because the number of items per row will be flexible, we do not need to maintain a custom property for it, and hence, no media queries are required in this example.\n\nHere, we let the items flow freely with and properties to emulate a horizontal, masonry-like effect. We have also defined a fixed height in pixels to ensure each item maintains the same height, or else the grid won’t make any sense:\n\nIn the CSS code above, the value in the declaration matches , thus making flex items use their natural content size (in this case, image size). They can now grow and shrink if necessary.\n\nNow that the gallery items have filled the available space, we have again encountered the last row alignment issue with flexbox. In this case, the two items in the last row will grow to fill space equivalent to three columns.\n\nTo remedy this behavior, we should use the pseudo-element on the gallery element and apply with a higher value. This will make the pseudo-element occupy the extra space and ensure that there is no space left for the last few items in the last row to span:\n\nYou can play with the value further to determine an output that suits our layout. This brings us to the end of the second project, which can be seen below:\n\nSee the Pen \n\n Flexbox Grid with classic captions (Horizontal masonry) by Rahul (@_rahul)\n\n on CodePen.\n\nAlso, check out the overlay caption variant of the same.\n\nIn the previous demo, we learned how to create a responsive image gallery layout that maintains image aspect ratios without using media queries. However, using flexbox with media queries allows us to achieve a specific layout while still maintaining image aspect ratios with a few tweaks.\n\nTo demonstrate this, we will create another responsive gallery that follows a vertical masonry pattern to layout items and also maintains the aspect ratios of the images involved.\n\nInterestingly, we don’t have to change the markup at all in this project. The whole layout will be managed by CSS styles, but we have to explicitly specify the height of the grid to maintain the masonry layout.\n\nCalculating the height of the gallery in this case is a tricky process, which involves summing up the individual heights of all the gallery items, and then dividing it by the total number of items to obtain the average height of each masonry column, which is ultimately the height of the gallery.\n\nThis doesn’t seem doable in CSS and takes a good amount of guesswork:\n\nIn the code above, instead of setting the , , or properties, we have used the property to set the width of the gallery items. Again, we are ignoring the property so that the items can size up using the original image size.\n\nWe’ll then specify the different items per row, as we did in the first example project. Here’s what the outcome should look somewhat like below (a live demo of the same can be seen here):\n\nThis isn’t the ideal solution for creating a vertical masonry layout, as it has several limitations. These include adjusting the height based on the total height of all the gallery items, ensuring optimal performance across different screen sizes, and setting the order to explicitly keep the items aligned from left to right instead of top to bottom.\n\nIf you still want to use flexbox to create this type of layout, you should consider using FlexMasonry, an open source JavaScript project that uses a similar pattern with flexbox properties we used above to create an ordered, left-to-right masonry with a vertical flow:\n\nIt not only takes care of the height of the gallery and width of the gallery items but also specifies the right order for each item using the flexbox property.\n\nAdding , or the space between the items of this masonry, will require us to add some padding to the grid items, which can be done as shown below:\n\nOur JavaScript and flexbox-powered gallery looks much better and more usable now. Use the demo below to see it in action, and try resizing the browser window to check out its adaptability to the screen:\n\nSee the Pen \n\n Vertical Masonry w/ Flexbox by Rahul (@_rahul)\n\n on CodePen.\n\nThe caption styles remain untouched and work perfectly with this setup as well. Here are the demos showing the classic captions and overlay captions.\n\nIn this tutorial, we used CSS flexbox to create three responsive image galleries that look amazing on all devices. We also learned how to implement some fallbacks and workarounds for masonry layouts.\n\nCSS flexbox has the simplicity to wrap, align, and justify items in a container and create quick layouts as we covered above. However, it is not the best fit for advanced-level grid layouts, such as masonry grids and those that require more granular control over the item flow, alignments, and other customization aspects. For such cases, the use of CSS grid or dedicated industry-standard solutions is recommended.\n\nIf you have questions or contributions, share your thoughts in the comments section. And if you enjoyed reading this tutorial, share it around the web!"
    },
    {
        "link": "https://css-tricks.com/css-only-carousel",
        "document": "It’s kind of amazing how far HTML and CSS will take you when building a carousel/slideshow.\n• Setting some boxes in a horizontal row with CSS Flexbox is easy.\n• Showing only one box at a time with and making it swipable with is easy.\n• You can make the “slides” line up nicely with .\n• A couple of is all you need to make navigation for it, which you can make all nice and smooth with .\n\nChristian Schaefer has taken it a little further with next and previous buttons, plus an auto-play feature that stops playing once interaction starts.\n\nJavaScript-powered slideshows (e.g. with Flickty) can be real nice, too. There is just something neat about getting it done with so little code.\n\nAnd speaking of how far we can get with HTML and CSS, here are a few related takes on image carousels and galleries.\n• How To Build an Infinite Scroll Image Gallery with React and CSS Grid (DigitalOcean)\n• Carousels Don’t Have to Be Complicated (Chris Coyier)"
    },
    {
        "link": "https://css-tricks.com/adaptive-photo-layout-with-flexbox",
        "document": "Let’s take a look at a super lightweight way to create a horizontal masonry effect for a set of arbitrarily-sized photos. Throw any set of photos at it, and they will line up edge-to-edge with no gaps anywhere.\n\nThe solution is not only lightweight but also quite simple. We’ll be using an unordered list of images and just 17 lines of CSS, with the heavy lifters being and .\n\nI have two hobbies: documenting my life with photos, and figuring out interesting ways to combine CSS properties, both old and new.\n\nA couple of weeks ago, I attended XOXO and shot a ton of photos which I narrowed down to a nice little set of 39. Wanting to own my content, I’ve spent the past couple of years thinking about putting together a simple photo blog, but was never able to nail the layout I had in mind: a simple masonry layout where photos fill out rows while respecting their aspect ratio (think Photos.app on iOS, Google Photos, Flickr…).\n\nI did some research to see if there were any lightweight, non-JavaScript options, but couldn’t find anything suiting my needs. Facing some delayed flights, I started playing around with some code, limiting myself to keep things as simple as possible (because that’s my definition of fun).\n\nSince I’m basically creating a list of images, I opted for an unordered list:\n\nThen came a string of lightbulb moments:\n• Flexbox is great for filling up rows by determining cell width based on cell content.\n• This meant the images (landscape or portrait) all needed to have the same height.\n• I could use to make sure the images filled the cells.\n\nIn theory, this sounded like a solid plan, and it got me a result I was about 90% happy with.\n\nNote: seemed like the best initial approach for desktop browsers, showing two full rows of photos at a reasonable size, and hinting at more below. This also allowed more photos per line, which dramatically improves the aspect ratios.\n\nThe only issue I ran into is that flexbox really wants to fill all the lines, and it did some silly things to the aspect ratios of the photos on the last row. This is probably my least favorite bit of this layout, but I had to add an empty element at the end of the list.\n\nCombined with this bit of CSS:\n\nNote: There’s no science in using “10” here. In all my testing, this delivered the best results.\n\nSee the Pen \n\n Adaptive Photo Layout by Tim Van Damme (@maxvoltar)\n\n on CodePen.\n\nThere are some considerations to keep in mind when working in different viewport orientations.\n\nIf your viewport is taller than it is wide, this approach limits the amount of photos per line thus messing up their aspect ratios. To solve this, you can make the photo rows less tall with this simple media query:\n\nTo help with small devices in landscape, increasing the height of photos helps to see them as large as possible:\n\nMost phones aren’t wide enough to allow flexbox to properly do its job without miniaturizing the photos, so here I opted to not try to fit multiple photos per line. Still, it’s worth setting a maximum height here so you’ll at least have a hint at the next photo in the list.\n\nThere we have it!\n\nThis approach doesn’t fully respect the aspect ratios of photos (but it’s close) and occasionally leads to some weird results, but I absolutely love the simplicity and flexibility of it all. Want to have your gallery scroll horizontally instead of vertically? A couple of tweaks will allow you to do this. Are there 1,000 photos in the gallery or just one? It’ll all look good. Unclear about aspect ratios? Flexbox is your best friend. Take another look at the demo if you haven’t yet, and let me know what you think!\n\nDepending on the size of these photos, a page like this can grow to multiple megabytes real quick. On the blog I’m working on, I’ve added to help with this. With that attribute in place on the images, it only loads photos once you approach them while scrolling. It’s supported just in Chrome for now, but you could roll your own more supported technique."
    },
    {
        "link": "https://blog.logrocket.com/responsive-image-gallery-css-flexbox",
        "document": "Editor’s note: This article was last updated by Rahul Chhodde on 19 June 2024 to incorporate practices for optimizing the display of responsive CSS image galleries using properties like and . It also now includes live CodePen demos of the responsive galleries created.\n\nGalleries are an effective way to display collections of high-quality images. In web projects, developers create galleries to display images in a grid-like fashion so that users can easily browse them.\n\nThere are many ways to create such grid layouts with CSS alone. In this tutorial, we will cover how to use CSS flexbox to create responsive image galleries that look good on all devices. We will demonstrate the effectiveness of different flexbox properties through practical projects. Each project uses CSS custom properties to manage reusable values, incorporates media queries to add screen-specific CSS, and utilizes CSS flexbox properties to lay out the galleries.\n\nA basic understanding of CSS is required to follow along with this tutorial.\n\nThe CSS Flexible Box Layout Module was designed to create one-dimensional layouts, either arranged as rows or columns at a time. It’s a CSS interface that provides access to properties that allow you to align and justify flex items inside flex containers.\n\nIn addition, flexbox can wrap items onto multiple lines to achieve a grid-like structure, which we will look at shortly.\n\nWhen a flexbox container wraps its items, it treats every line as a separate flex line. It also allows you to justify these items based on their size and the available space on the flex line they are placed on. We will take a closer look at the wrapping and arrangement of flex items in the next section.\n\nLet’s start by determining the structure of our image gallery. Our image gallery should be a flex container with multiple cells or items, each containing images. We can wrap each of these images inside a figure element that carries an optional element serving as the caption for the associated image:\n\nspecifying the width and height attributes of the images is a good practice that prevents cumulative layout shifts (CLS) issues and thus improves the score of a webpage. If you are unsure about what values to provide to these attributes, simply add the original image dimensions and the browser engine will take care of the spacing and aspect ratios for each image.\n\nInstead of using the or elements to represent the gallery or gallery items, we used simple elements to ensure we can easily extend this structure to something larger in the future, such as a lighthouse component.\n\nNow, if we populate this structure with images, all the media will appear stacked on top of each other as no CSS styles have been applied to the structure yet.\n\nImplementing a reset is important to provide a baseline for our project and normalize different elements to behave the same way on every browser. I‘ve tried to keep the reset as minimal as possible, but you may choose the one that best suits your needs:\n\nThis reset sets for every element on the page to to keep the size of the elements unaffected by padding and border values. It also keeps our images from bleeding out of their parent elements. Alternatively, we may also add styles for a page container that wraps everything that is displayed on our page within itself.\n\nAs you may have noticed, we are managing some settings with CSS custom properties for easy customizability and maintenance.\n\nWe are now all set to apply flexbox properties and start building our image gallery. We will progressively enhance our galleries by first building basic functionalities and then adding features as the application grows.\n\nAs planned, the element will contain all the items with images, so it should be the flex container in this case. We’ll start by giving the a flex display and add more flexbox properties like and :\n\nLet’s take a closer look at the other CSS properties we applied to the flex container:\n• The property ensures that flex items will wrap onto another line\n• The property sets a gap between rows and columns; in this case, it’s set to\n\nAdditionally, you may add the property to align the items to the center or the end of the flexbox axis.\n\nNote that, by default, the direction or main axis of a flexbox container is “row,” which is why all the flex items immediately line up horizontally.\n\nBecause this is a gallery of fixed-height items, we can use the CSS property to maintain the relationship between the width and height of each image. Let’s also use the property and make the images fit within the available area as a cover, preventing them from appearing stretched out. Doing so will also avoid the need to add the property to the gallery item and hide its overflow:\n\nAdditionally, you may use properties like to add styles to the images to suit your design needs.\n\nNext, we should specify a new custom property that governs the number of items per row in our gallery. Because we are building the gallery from smaller screen sizes to larger ones, we should set this number to for now:\n\nAlso, we have to formulate what width (or ) we are going to give each of our items to fit perfectly considering the number of items per row and also the gap between the items.\n\nIf we manage to calculate the total space covered by the gaps between the items, we can find out the net space available for the items to occupy by subtracting that net gap amount from the available space in the container. Given that the container’s total space is 100%, this is how we’d calculate the space:\n\nis the total space covered by gaps, is the gap width, and is the number of items per row. Now that we have the net space available for the items, we can divide this value by the number of items to calculate the space covered by each item ( ):\n\nLet’s implement this logic to provide a to each gallery item, which sets the initial size of the flex items. We plan to create a gallery with fixed-width items, therefore, each item should be prevented from shrinking or growing automatically.\n\nKeeping that in mind, we can now use the function to provide the calculated , and also set and values to 0 with the shorthand property, as shown in the code snippet below:\n\nAlso, we are using the and elements to contain the images and their captions. To ensure the layout doesn’t break, we should remove the usual extra margin that the element carries around it. We’ll also style the a bit:\n\nWe can now set up some media queries for larger screen sizes. Using the CSS custom properties, we only have to specify the appropriate items per row inside the media query blocks, and the rest of the logic for calculating the new for each item will be handled automatically:\n\nPiecing it all together, we now have a functional and responsive image grid, i.e., a gallery, that also supports simple captions:\n\nSee the Pen \n\n Simple Flexbox Grid with captions by Rahul (@_rahul)\n\n on CodePen.\n\nWe already have a simple setup for the captions associated with the images, which are handled by the element, as discussed above. We can further enhance these captions and set them to appear only on hover.\n\nWe will cover two variations of captions: transitioning from a simple appearance to a more funky and stylish one.\n\nOur goal is to make the captions free-flowing inside the gallery items. This can be achieved by using absolute positioning for the .\n\nTo ensure that the free-flowing items do not disrupt the layout, the gallery items need to be relatively positioned to specify boundaries for the captions they carry.\n\nBecause the captions are no longer staying outside the gallery items and will float over the image instead, let’s also move the property from the image to the gallery item. To maintain the visual appeal of the decorations like , it’s important to prevent the gallery item contents from overflowing their parent element by setting the property to :\n\nThe captions appearing over the images should be clear and legible. To achieve that, let’s set a dark background to them with a bit of opaqueness and a brighter text color:\n\nThe caption is supposed to appear when the associated gallery item is hovered over. We should start with zero opacity for the initial state and transition it to 100% on hover, making the caption appear with a subtle fade-in transition:\n\nThe rest of the settings add alignment and size to the caption and are pretty straightforward to deal with, but you may also customize their behavior if needed:\n\nSee the Pen \n\n Simple Flexbox Grid with classic captions by Rahul (@_rahul)\n\n on CodePen.\n\nTurning the classic captions into overlay ones requires spanning them all across the available space within the gallery items and aligning the caption contest to the absolute center:\n\nIn the CSS code above, we set the property to 0, which is a shortcut to set the , , , and positional properties to zero. This causes the target element to take up the full width and height of its container.\n\nThen, we used flexbox to align the content of the caption to the absolute center. We also removed the extra top margin from the caption, as we want it to occupy the entire area provided by the item.\n\nTo make the hover transition slightly more interactive, we used the transformation property along with . Finally, we adjusted the hover state to scale the caption to 100% as shown below:\n\nNow, let’s save and test our project to ensure it works as expected:\n\nSee the Pen \n\n Simple Flexbox Grid with overlay captions by Rahul (@_rahul)\n\n on CodePen.\n\nThe second example is more like a horizontal masonry and involves creating an image gallery that arranges its items automatically on the horizontal axis while respecting the aspect ratios of the images.\n\nIn the previous example, we fixed the aspect ratio of each image using the property, which won’t be very useful in this particular example. Instead, the images with different dimensions in the markup will help demonstrate how the aspect ratio of the images is maintained and how a horizontal masonry-like grid is created.\n\nNote that the markup for this example project is the same as that for the first project. The only things that change for this example are the CSS styles, where we got rid of the formula from the previous example for , as we no longer want items with equal width. Because the number of items per row will be flexible, we do not need to maintain a custom property for it, and hence, no media queries are required in this example.\n\nHere, we let the items flow freely with and properties to emulate a horizontal, masonry-like effect. We have also defined a fixed height in pixels to ensure each item maintains the same height, or else the grid won’t make any sense:\n\nIn the CSS code above, the value in the declaration matches , thus making flex items use their natural content size (in this case, image size). They can now grow and shrink if necessary.\n\nNow that the gallery items have filled the available space, we have again encountered the last row alignment issue with flexbox. In this case, the two items in the last row will grow to fill space equivalent to three columns.\n\nTo remedy this behavior, we should use the pseudo-element on the gallery element and apply with a higher value. This will make the pseudo-element occupy the extra space and ensure that there is no space left for the last few items in the last row to span:\n\nYou can play with the value further to determine an output that suits our layout. This brings us to the end of the second project, which can be seen below:\n\nSee the Pen \n\n Flexbox Grid with classic captions (Horizontal masonry) by Rahul (@_rahul)\n\n on CodePen.\n\nAlso, check out the overlay caption variant of the same.\n\nIn the previous demo, we learned how to create a responsive image gallery layout that maintains image aspect ratios without using media queries. However, using flexbox with media queries allows us to achieve a specific layout while still maintaining image aspect ratios with a few tweaks.\n\nTo demonstrate this, we will create another responsive gallery that follows a vertical masonry pattern to layout items and also maintains the aspect ratios of the images involved.\n\nInterestingly, we don’t have to change the markup at all in this project. The whole layout will be managed by CSS styles, but we have to explicitly specify the height of the grid to maintain the masonry layout.\n\nCalculating the height of the gallery in this case is a tricky process, which involves summing up the individual heights of all the gallery items, and then dividing it by the total number of items to obtain the average height of each masonry column, which is ultimately the height of the gallery.\n\nThis doesn’t seem doable in CSS and takes a good amount of guesswork:\n\nIn the code above, instead of setting the , , or properties, we have used the property to set the width of the gallery items. Again, we are ignoring the property so that the items can size up using the original image size.\n\nWe’ll then specify the different items per row, as we did in the first example project. Here’s what the outcome should look somewhat like below (a live demo of the same can be seen here):\n\nThis isn’t the ideal solution for creating a vertical masonry layout, as it has several limitations. These include adjusting the height based on the total height of all the gallery items, ensuring optimal performance across different screen sizes, and setting the order to explicitly keep the items aligned from left to right instead of top to bottom.\n\nIf you still want to use flexbox to create this type of layout, you should consider using FlexMasonry, an open source JavaScript project that uses a similar pattern with flexbox properties we used above to create an ordered, left-to-right masonry with a vertical flow:\n\nIt not only takes care of the height of the gallery and width of the gallery items but also specifies the right order for each item using the flexbox property.\n\nAdding , or the space between the items of this masonry, will require us to add some padding to the grid items, which can be done as shown below:\n\nOur JavaScript and flexbox-powered gallery looks much better and more usable now. Use the demo below to see it in action, and try resizing the browser window to check out its adaptability to the screen:\n\nSee the Pen \n\n Vertical Masonry w/ Flexbox by Rahul (@_rahul)\n\n on CodePen.\n\nThe caption styles remain untouched and work perfectly with this setup as well. Here are the demos showing the classic captions and overlay captions.\n\nIn this tutorial, we used CSS flexbox to create three responsive image galleries that look amazing on all devices. We also learned how to implement some fallbacks and workarounds for masonry layouts.\n\nCSS flexbox has the simplicity to wrap, align, and justify items in a container and create quick layouts as we covered above. However, it is not the best fit for advanced-level grid layouts, such as masonry grids and those that require more granular control over the item flow, alignments, and other customization aspects. For such cases, the use of CSS grid or dedicated industry-standard solutions is recommended.\n\nIf you have questions or contributions, share your thoughts in the comments section. And if you enjoyed reading this tutorial, share it around the web!"
    },
    {
        "link": "https://reddit.com/r/css/comments/ln4j8r/how_do_i_achieve_an_image_gallery_style_grid",
        "document": "I'm currently working on a portfolio website for my girlfriend and I'm really stuck on how to order things.\n\nI want to achieve the way image gallery effect that this person has on their portfolio:\n\nBut I can't for the life of me figure out how they do it.\n\nHere's my current process that I'm trying:\n• Create a div for each image pulled from the API and put them in to a \"image-container\" div\n• Use display: flex on the container to get all of the images to lay out in a grid fashion.\n\nBut my current result ends up looking like this.\n\nIs there any way I could get the images to auto-order themselves so they fit in the most logical way? I'm not sure if that's beyond Flexbox's capabilities. Here's my current CSS applied to the container, the image class, and the sub-classes for each image size.\n\nDoes anyone know how I could solve this problem? I've been looking everywhere and I can't find any solid information about how to do this whole auto-ordering of images."
    },
    {
        "link": "https://css-tricks.com/snippets/css/a-guide-to-flexbox",
        "document": "The (Flexible Box) module (a W3C Candidate Recommendation as of October 2017) aims at providing a more efficient way to lay out, align and distribute space among items in a container, even when their size is unknown and/or dynamic (thus the word “flex”). The main idea behind the flex layout is to give the container the ability to alter its items’ width/height (and order) to best fill the available space (mostly to accommodate to all kind of display devices and screen sizes). A flex container expands items to fill available free space or shrinks them to prevent overflow. Most importantly, the flexbox layout is direction-agnostic as opposed to the regular layouts (block which is vertically-based and inline which is horizontally-based). While those work well for pages, they lack flexibility (no pun intended) to support large or complex applications (especially when it comes to orientation changing, resizing, stretching, shrinking, etc.). Note: Flexbox layout is most appropriate to the components of an application, and small-scale layouts, while the Grid layout is intended for larger scale layouts.\n\nSince flexbox is a whole module and not a single property, it involves a lot of things including its whole set of properties. Some of them are meant to be set on the container (parent element, known as “flex container”) whereas the others are meant to be set on the children (said “flex items”). If “regular” layout is based on both block and inline flow directions, the flex layout is based on “flex-flow directions”. Please have a look at this figure from the specification, explaining the main idea behind the flex layout. Items will be laid out following either the (from to ) or the cross axis (from to ).\n• main axis – The main axis of a flex container is the primary axis along which flex items are laid out. Beware, it is not necessarily horizontal; it depends on the property (see below).\n• main-start | main-end – The flex items are placed within the container starting from main-start and going to main-end.\n• main size – A flex item’s width or height, whichever is in the main dimension, is the item’s main size. The flex item’s main size property is either the ‘width’ or ‘height’ property, whichever is in the main dimension.\n• cross axis – The axis perpendicular to the main axis is called the cross axis. Its direction depends on the main axis direction.\n• cross-start | cross-end – Flex lines are filled with items and placed into the container starting on the cross-start side of the flex container and going toward the cross-end side.\n• cross size – The width or height of a flex item, whichever is in the cross dimension, is the item’s cross size. The cross size property is whichever of ‘width’ or ‘height’ that is in the cross dimension.\n\nThis defines a flex container; inline or block depending on the given value. It enables a flex context for all its direct children. Note that CSS columns have no effect on a flex container. \n\nThis establishes the main-axis, thus defining the direction flex items are placed in the flex container. Flexbox is (aside from optional wrapping) a single-direction layout concept. Think of flex items as primarily laying out either in horizontal rows or vertical columns.\n• (default): left to right in ; right to left in\n• : right to left in ; left to right in\n• : same as but top to bottom\n• : same as but bottom to top By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property.\n• (default): all flex items will be on one line\n• : flex items will wrap onto multiple lines, from top to bottom.\n• : flex items will wrap onto multiple lines from bottom to top. There are some visual demos of here. This is a shorthand for the and properties, which together define the flex container’s main and cross axes. The default value is . \n\nThis defines the alignment along the main axis. It helps distribute extra free space leftover when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size. It also exerts some control over the alignment of items when they overflow the line.\n• (default): items are packed toward the start of the flex-direction.\n• : items are packed toward the end of the flex-direction.\n• : items are packed toward the start of the direction.\n• : items are packed toward the end of the direction.\n• : items are packed toward left edge of the container, unless that doesn’t make sense with the , then it behaves like .\n• : items are packed toward right edge of the container, unless that doesn’t make sense with the , then it behaves like .\n• : items are centered along the line\n• : items are evenly distributed in the line; first item is on the start line, last item on the end line\n• : items are evenly distributed in the line with equal space around them. Note that visually the spaces aren’t equal, since all the items have equal space on both sides. The first item will have one unit of space against the container edge, but two units of space between the next item because that next item has its own spacing that applies.\n• : items are distributed so that the spacing between any two items (and the space to the edges) is equal. Note that that browser support for these values is nuanced. For example, never got support from some versions of Edge, and start/end/left/right aren’t in Chrome yet. MDN has detailed charts. The safest values are , , and . There are also two additional keywords you can pair with these values: and . Using ensures that however you do this type of positioning, you can’t push an element such that it renders off-screen (e.g. off the top) in such a way the content can’t be scrolled too (called “data loss”). \n\nThis defines the default behavior for how flex items are laid out along the cross axis on the current line. Think of it as the version for the cross-axis (perpendicular to the main-axis).\n• / / : items are placed at the start of the cross axis. The difference between these is subtle, and is about respecting the rules or the rules.\n• / / : items are placed at the end of the cross axis. The difference again is subtle and is about respecting rules vs. rules.\n• : items are centered in the cross-axis\n• : items are aligned such as their baselines align The and modifier keywords can be used in conjunction with all the rest of these keywords (although note browser support), and deal with helping you prevent aligning elements such that the content becomes inaccessible. \n\nThis aligns a flex container’s lines within when there is extra space in the cross-axis, similar to how aligns individual items within the main-axis. Note: This property only takes effect on multi-line flexible containers, where is set to either or ). A single-line flexible container (i.e. where is set to its default value, ) will not reflect .\n• (default): items are packed in their default position as if no value was set.\n• / : items packed to the start of the container. The (more supported) honors the while honors the direction.\n• / : items packed to the end of the container. The (more support) honors the while end honors the direction.\n• : items evenly distributed; the first line is at the start of the container while the last one is at the end\n• : items evenly distributed with equal space around each line\n• : items are evenly distributed with equal space around them\n• : lines stretch to take up the remaining space The and modifier keywords can be used in conjunction with all the rest of these keywords (although note browser support), and deal with helping you prevent aligning elements such that the content becomes inaccessible. The property explicitly controls the space between flex items. It applies that spacing only between items not on the outer edges. The behavior could be thought of as a minimum gutter, as if the gutter is bigger somehow (because of something like ) then the gap will only take effect if that space would end up smaller. It is not exclusively for flexbox, works in grid and multi-column layout as well. \n\nBy default, flex items are laid out in the source order. However, the property controls the order in which they appear in the flex container. Items with the same revert to source order. \n\nThis defines the ability for a flex item to grow if necessary. It accepts a unitless value that serves as a proportion. It dictates what amount of the available space inside the flex container the item should take up. If all items have set to , the remaining space in the container will be distributed equally to all children. If one of the children has a value of , that child would take up twice as much of the space as either one of the others (or it will try, at least). This defines the ability for a flex item to shrink if necessary. This defines the default size of an element before the remaining space is distributed. It can be a length (e.g. 20%, 5rem, etc.) or a keyword. The keyword means “look at my width or height property” (which was temporarily done by the keyword until deprecated). The keyword means “size it based on the item’s content” – this keyword isn’t well supported yet, so it’s hard to test and harder to know what its brethren , , and do. If set to , the extra space around content isn’t factored in. If set to , the extra space is distributed based on its value. See this graphic. This is the shorthand for and combined. The second and third parameters ( and ) are optional. The default is , but if you set it with a single number value, like , that changes the to 0%, so it’s like setting . It is recommended that you use this shorthand property rather than set the individual properties. The shorthand sets the other values intelligently. \n\nThis allows the default alignment (or the one specified by ) to be overridden for individual flex items. Please see the explanation to understand the available values. Note that , and have no effect on a flex item.\n\nFlexbox requires some vendor prefixing to support the most browsers possible. It doesn’t just include prepending properties with the vendor prefix, but there are actually entirely different property and value names. This is because the Flexbox spec has changed over time, creating an “old”, “tweener”, and “new” versions. Perhaps the best way to handle this is to write in the new (and final) syntax and run your CSS through Autoprefixer, which handles the fallbacks very well. Alternatively, here’s a Sass to help with some of the prefixing, which also gives you an idea of what kind of things need to be done:\n\nLet’s start with a very very simple example, solving an almost daily problem: perfect centering. It couldn’t be any simpler if you use flexbox. .parent { display: flex; height: 300px; /* Or whatever */ } .child { width: 100px; /* Or whatever */ height: 100px; /* Or whatever */ margin: auto; /* Magic! */ } This relies on the fact a margin set to in a flex container absorb extra space. So setting a margin of will make the item perfectly centered in both axes. Now let’s use some more properties. Consider a list of 6 items, all with fixed dimensions, but can be auto-sized. We want them to be evenly distributed on the horizontal axis so that when we resize the browser, everything scales nicely, and without media queries. .flex-container { /* We first create a flex layout context */ display: flex; /* Then we define the flow direction and if we allow the items to wrap * Remember this is the same as: * flex-direction: row; * flex-wrap: wrap; */ flex-flow: row wrap; /* Then we define how is distributed the remaining space */ justify-content: space-around; } Done. Everything else is just some styling concern. Below is a pen featuring this example. Be sure to go to CodePen and try resizing your windows to see what happens. Let’s try something else. Imagine we have a right-aligned navigation element on the very top of our website, but we want it to be centered on medium-sized screens and single-columned on small devices. Easy enough. /* Large */ .navigation { display: flex; flex-flow: row wrap; /* This aligns items to the end line on main-axis */ justify-content: flex-end; } /* Medium screens */ @media all and (max-width: 800px) { .navigation { /* When on medium sized screens, we center it by evenly distributing empty space around items */ justify-content: space-around; } } /* Small screens */ @media all and (max-width: 500px) { .navigation { /* On small screens, we are no longer using row direction but column */ flex-direction: column; } } Let’s try something even better by playing with flex items flexibility! What about a mobile-first 3-columns layout with full-width header and footer. And independent from source order. .wrapper { display: flex; flex-flow: row wrap; } /* We tell all items to be 100% width, via flex-basis */ .wrapper > * { flex: 1 100%; } /* We rely on source order for mobile-first approach * in this case: * 1. header * 2. article * 3. aside 1 * 4. aside 2 * 5. footer */ /* Medium screens */ @media all and (min-width: 600px) { /* We tell both sidebars to share a row */ .aside { flex: 1 auto; } } /* Large screens */ @media all and (min-width: 800px) { /* We invert order of first sidebar and main * And tell the main element to take twice as much width as the other two sidebars */ .main { flex: 3 0px; } .aside-1 { order: 1; } .main { order: 2; } .aside-2 { order: 3; } .footer { order: 4; } }"
    },
    {
        "link": "https://stackoverflow.com/questions/54866158/how-can-i-create-slider-layout-with-css-flex-boxes",
        "document": "I'm trying to create a Slider Layout with flex boxes, like this photo :\n\nHere I've big photo at right side and thumbnail items on the left. I want to align left side and thumbnails wrapper with big photo height. But unfortunately It's not possible only with flex boxes and I should check big photo height with JavaScript and align left side with that.\n\nFor example check this code:\n\nIn sample code I've not image and I handled this issue with 450px height in CSS.\n\nSo how can I align the left side with out JS and only with CSS? I want to use mode to show all items in this height. Consider it, didn't work for this issue."
    }
]