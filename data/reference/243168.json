[
    {
        "link": "https://forum.qt.io/topic/149562/sqlcipher-as-replacement-for-qsqlite",
        "document": "Hi, I'm trying to following this tutorial to embed SQLCipher to QSQLITE plugin, here are what I've done:\n\nI download Qt 6.2.2 Source and SQLCipher source, and then I copy sqlite3.c and sqlite3.h and go to replace those 2 matching files.\n\nThen I go to and edit the CMakeLists.txt file in the field DEFINES, I add 2 following defines as stated in the SQLCipher static build step: SQLITE_HAS_CODEC and SQLITE_TEMP_STORE=2, and I run configure then build as normal.\n\nSo, here are my questions, as I do above, does it actually build QSQLITE with SQLCipher supported?\n\nIf not, so what I can do to embed SQLCipher into Qt6 as a static plugin (mine Qt6 built with -static as well), as I read on the SQLCipher static build step, we must include OpenSSL include and library folder?"
    },
    {
        "link": "https://github.com/manfredipist/qsqlcipher-qt6",
        "document": "This branch builds against the Qt version 6.4.1. To build for previous versions choose from the releases the one that matches the system's Qt version.\n\nSee https://github.com/sijk/qt5-sqlcipher to build up to Qt 5.5.x\n\nSee https://github.com/sjemens/qsqlcipher-qt5 to build up to Qt 5.15.x\n\nThe sources for this plugin are based on the sqlite plugin from qt/qtbase\n\nThis plugin is using the SQLCipher for the encryption of database files. SQLCipher is included in the 3rdparty folder, but there is also the option to use the system's library. The required libraries are found by pkg-config. If pkg-config is not available you should edit the qsqlcipher.pro and set the INCLUDEPATH and LIBS variables.\n\nBy default, the cryptography backend is provided by libtomcrypt, also included in the 3rdparty folder. There will also be an option to choose some other backend.\n\ngit clone https://github.com/sjemens/qsqlcipher-qt6.git qsqlcipher-qt6 mkdir -p build build qmake ../qsqlcipher.pro CONFIG+=system-sqlcipher Or if the sqlcipher library was not built with the ENABLE_COLUMN_METADATA macro defined, disable it also for qsqlcipher. Replace the above qmake command with make make install\n\nNote: To check if the sqlcipher library was compiled with ENABLE_COLUMN_METADATA use PRAGMA compile_options;\n\ngit clone https://github.com/sjemens/qsqlcipher-qt6.git qsqlcipher-qt6 mkdir -p build build qmake CONFIG+= ../qsqlcipher.pro make ./tests/qsqlcipher_test in windows (MSYS2-mingw) both the debug and release versions should have been built by default so we will check both of them ./tests/debug/qsqlcihper_test ./tests/release/qsqlcihper_test Unless you also want to install the tests change to qsqlcipher sudo make install\n\nTip: A quick way to find if the tested plugin is the newly built and not the one in 'QT_INSTALL_PLUGINS' is to define the QT_DEBUG_PLUGINS and check the loaded library path.\n\nFor this plugin see LICENSE (LGPLV3)"
    },
    {
        "link": "https://stackoverflow.com/questions/29196087/how-to-build-the-qt-sql-driver-plugin-qsqlcipher-for-sqlite-db-with-sqlcipher",
        "document": "When delivering a Qt-program do not forget the Qt-libraries, the platforms-libraries, SQL-driver-plugin 'qsqlcipher.dll' and the OpenSSL-library 'libeay32.dll'. Example for the test program above:\n\nCaution: The test program contains the key:\n\nThis key string in the binary file of the test program can easiliy be read using a hex-editor, which is, to my opinion, a lack in security:\n\nFor approaches how to solve this problem, ask the search engine of your own choice. ;-)\n\n E.g. search for: hide string in executable"
    },
    {
        "link": "https://groups.google.com/g/sqlcipher/c/_YsnY-euEpE",
        "document": "Either email addresses are anonymous for this group or you need the view member email addresses permission to view the original message\n\nIf you look in the source directory where you built SQLCipher, do you see the sqlite3.dll file present there? I don't remember if the DLL is moved via the install make target, or if it is just present in the source directory. If the latter, you can just copy and move it\n\n\n\n. It doesn't look like you had errors during the make dll step, so I suspect it's present there.\n\nThe advice that Mathijs has provided is also sound. While we don't use QT ourselves, we have successfully compiled in the SQLcipher amalgamation with our projects for iPhone, MacOS, a C#/.NET provider, and also for a Java JDBC lib. If you can't get the DLL you are welcome\n\nFinally, as an aside, we are planning to start distributing an \"official\" Win32 DDL and EXE for SQLCipher, since this seems to be a place where lots of folks struggle. There will be a nominal charge for the binary version download, but it may people save a lot of time. I'll keep the list up to date on developments. Let me know what you all think."
    },
    {
        "link": "https://forum.qt.io/topic/37817/using-sqlcipher-in-place-of-sqlite",
        "document": "I would like to use encrypted SQLite databases with Qt.\n\n The company I work for, has been using SQLCipher with C++ Builder XE3 for almost two years (they bought a license). In this context it's pretty easy cause there's only a sqlite3.dll file to load.\n\nWe're switching from C++ Builder to Qt.\n\n With Qt I can access SQLite database with the sqlite3 driver compiled with Qt. I tried it, it works and it's pretty easy to use.\n\nAccording to the documentation it is possible to link with my own sqlite library (\"How to Build the QSQLITE Plugin\":http://qt-project.org/doc/qt-5.0/qtsql/sql-driver.html#qsqlite).\n\nWhen we bought a SQLCipher licence we got a zip file which contains the following file:\n\nI tried to recompile the SQLite driver for Qt but it failed.\n\n Here the step I followed:\n\nBut it failed with the error : \"ld.exe: cannot find -lsqlite3\"\n\nDo you think it's due to the sqlite3.lib file which might be sqlite3.a ?\n\n In this case I will have to recompile sqlcipher with mingw-32.\n\nI've seen those articles but I wanted to only link a specifc lib without recompiling SQLCipher.\n\n \"Building QSQLITE driver with AES-256 encryption support\":http://www.qtcentre.org/wiki/index.php?title=Building_QSQLITE_driver_with_AES-256_encryption_support\n\nDoes anyone have an idea ?"
    },
    {
        "link": "https://stackoverflow.com/questions/22423280/is-it-possible-to-use-qsqldatabase-along-sqlcipher",
        "document": "I want to use an encrypted SQLite database in Qt. Is it possible to connect to database by and use SQLCipher to encrypt or decrypt the database? for instance regularly i connect to SQLite database file like this:\n\nI want to know is it possible to use the SQLCipher API to decrypt the database and use the Qt database module to connect and manipulate the database?"
    },
    {
        "link": "https://stackoverflow.com/questions/22574664/how-to-integrate-sqlcipher-with-qt5",
        "document": "I don't think a driver for SQLCipher exists in Qt. You'll only get the default drivers, which include SQLite.\n\nI know two options: you use sqlcipher with its C API like a normal library, link to your app and you're done. Or you create the driver yourself. Creating that driver should be pretty simple as it should be almost identical to the one for sqlite, being the API almost identical. Simply linking the sqlite driver to sqlcipher instead of sqlite should be enough.\n\nI found this online that should help you. But there are probably also other useful resources. That seems to simply re-use the sqlite plugin, linking to sqlcipher."
    },
    {
        "link": "https://forum.qt.io/topic/144017/qt-sql-driver-plugin-for-sqlcipher-for-qt-5",
        "document": "I have SQLite database in my qt app and i want to enctypt it. The one free solution is to use SQLCipher plugin for this purpose. I have found this plugin on github and i have successfully built it with MSYS2 MinGW64 following these instructions:\n\nWhat hava i to do next to use this plugin like this:\n\nI'm doing it in Windows 10 and in QT 5.15.2\n\n Help pls."
    },
    {
        "link": "https://doc.qt.io/qt-6/sql-programming.html",
        "document": "This overview assumes that you have at least a basic knowledge of SQL. You should be able to understand simple , , , and statements. Although the QSqlTableModel class provides an interface to database browsing and editing that does not require a knowledge of SQL, a basic understanding of SQL is highly recommended. A standard text covering SQL databases is An Introduction to Database Systems (7th Ed.) by C. J. Date, ISBN 0201385902.\n\nThe SQL classes are divided into three layers:\n\nThis comprises the classes QSqlDriver, QSqlDriverCreator, QSqlDriverCreatorBase, QSqlDriverPlugin, and QSqlResult.\n\nThis layer provides the low-level bridge between the specific databases and the SQL API layer. See SQL Database Drivers for more information.\n\nThese classes provide access to databases. Connections are made using the QSqlDatabase class. Database interaction is achieved by using the QSqlQuery class. In addition to QSqlDatabase and QSqlQuery, the SQL API layer is supported by QSqlError, QSqlField, QSqlIndex, and QSqlRecord.\n\nThese classes link the data from a database to data-aware widgets. They include QSqlQueryModel, QSqlTableModel, and QSqlRelationalTableModel. These classes are designed to work with Qt's model/view framework.\n\nNote that a QCoreApplication object must be instantiated before using any of these classes."
    },
    {
        "link": "https://cengizhanvarli.medium.com/qt-sql-operations-b9031dfc1a20",
        "document": "Database using is indispensable in many projects. As you know, there are many types of SQL databases. For example, using SQLite for small hardware is quite common. I’ve used sqlite for most of my professional life. You can find many driver software on the internet to manage SQLite DB transactions. But there are some dependencies. The driver software you use may depend on the software language and operating system. When the operating system of the project changes or the programming language changes, you should change the driver you use and refactor your software accordingly.\n\nAs you know, dependicies in software is what we hate the most. QT provides us cross-platform. In other words, we can easily use the projects we developed using the QT framework in environments such as Windows, Android and Linux. By using Qt’s SQL structure, we can use all SQL-based databases safely, regardless of the operating system.\n\nYes, It is excellent.\n\nQT SQL refers to the SQL related classes in the Qt framework, which provide a set of APIs for database integration. These classes allow you to interact with various SQL databases, such as SQLite, MySQL, PostgreSQL, and others, using a consistent API. QT SQL provides classes like QSqlDatabase for managing database connections, QSqlQuery for executing SQL queries, and QSqlTableModel for working with database tables in a model-view architecture.\n\nQSqlDatabase is a class in the Qt framework that represents a connection to a SQL database. It provides functionality to establish, maintain, and manage connections to various SQL database servers.\n\nYou can use QSqlDatabase to:\n• Access the properties of the connected database.\n\nHere’s a basic example of using QSqlDatabase to connect to a SQLite database:\n\nIn this example, we create a QSqlDatabase object and set its driver to SQLite (“QSQLITE”). We then set the name of the SQLite database file (mydatabase.db), and attempt to open the database using db.open() . If opening the database fails, we output an error message using qDebug() and db.lastError().text().\n\nQSqlQuery is a class in the Qt framework that allows you to execute SQL queries on a database connected using QSqlDatabase. It provides methods for executing queries, retrieving results, and managing the query’s state.\n\nHere’s a basic example of using QSqlQuery to execute a simple SELECT query and iterate over the results:\n\nThe code then establishes a connection to an SQLite database file named “mydatabase.db”. If the connection is successful, it creates a table named “person” with columns for an ID (integer primary key) and a name (text). Two records, “Cengizhan” and “Burak”, are inserted into the “person” table using INSERT statements. The code then executes a SELECT query to retrieve all records from the \"person\" table and prints them to the console. Finally, the database connection is closed.\n\nQSqlField is a class in the Qt framework that represents a field in a database table. It is used in conjunction with QSqlRecord to represent a record in a database result set. QSqlField provides functionality to get and set the properties of a field, such as its name, value, type, and size.\n\nQSqlField is commonly used when working with database queries and result sets in Qt applications to interact with individual fields in a database table.\n\nIn this example, we first create a database connection to a SQLite database file named “example.db”. Then, we execute a query to select all rows from the “employees” table. For each row returned by the query, we iterate over the fields in the record and print the field name and value. Finally, we close the database connection.\n\nHow can you use same DB in different thread at same time ? How can you ensure thread safety?\n\nIf you want to access the same db from different threads, it is possible to run the db in different threads by cloning it as follows.\n\n_myDb is an existing variable of type QSqlDataBase. It represents a DB Path.\n\nThis function takes a QSqlDatabase reference db and a QStringList of queries. It creates a QSqlQuery object query with the provided database connection. It iterates over the list of queries and executes each query using query.exec().\n\nThis function defines a lambda threadLambda that takes tableIdStart and threadName as arguments.\n\nInside threadLambda, it creates a new database connection cloneDB by cloning _myDb with the given threadName. It then connects to the database and generates a list of insert queries (qryList) using QStringLiteral. Next, it calls execQuery to execute the queries on the cloned database.\n\nFinally, it disconnects from the database.\n\nQtConcurrent::run is used to run threadLambda in two separate threads (future1 and future2) with different parameters.\n\nSince the threads clone the currently open db and perform operations on it, two threads can work in the same db at the same time without any problems."
    }
]