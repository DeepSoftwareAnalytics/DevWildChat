[
    {
        "link": "https://w3schools.com/sql/sql_groupby.asp",
        "document": "The statement groups rows that have the same values into summary rows, like \"find the number of customers in each country\".\n\nThe statement is often used with aggregate functions ( , , , , ) to group the result-set by one or more columns.\n\nBelow is a selection from the \"Customers\" table in the Northwind sample database:\n\nThe following SQL statement lists the number of customers in each country:\n\nThe following SQL statement lists the number of customers in each country, sorted high to low:\n\nBelow is a selection from the \"Orders\" table in the Northwind sample database:\n\nAnd a selection from the \"Shippers\" table:\n\nGROUP BY With JOIN Example\n\nThe following SQL statement lists the number of orders sent by each shipper:\n\nSELECT Shippers.ShipperName, COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders\n\nLEFT JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID\n\n GROUP BY ShipperName; Try it Yourself »"
    },
    {
        "link": "https://sqlshack.com/an-overview-of-the-sql-group-by-clause",
        "document": "This article briefly explains the SQL group by clause, when it should be used, and what we should consider when using it.\n\nSide Note: All code examples in this article are made using SQL Server 2019 and Stack Overflow 2010 database.\n\nWhat is “Grouping” in SQL, and why is it needed?\n\nConsider that we are analyzing the Stack overflow QA website database. This database contains several tables that store information about the website users, posted questions, answers, comments, and awarded badges.\n\nFor example, let’s take the “Posts” table. This table contains all information about different types of posts on the QA website; questions, answers, wiki, moderators’ nominations… If we are looking to count the number of each type of post, using a simple SELECT statement can return the number of rows of a single type by using the COUNT() function besides filtering the result using the WHERE clause:\n\nFigure 1 – Calculating the number of rows for one post’s type\n\nIf we try to add the PostTypeId column before the COUNT(*), the SQL command will not be executed and will throw the following exception to notify the user that aggregation is required to perform this operation:\n\nColumn ‘StackOverflow2010.dbo.Posts.PostTypeId’ is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause.\n\nThe SQL GROUP BY clause arranges similar data stored within one or several columns into groups, where an aggregate function is applied to produce summaries. For example, calculating the number of posts for each user.\n\nFigure 2 – Calculating the number of each type of post\n\nBefore explaining the SQL GROUP BY clause and when we should use it, we need to know how is the SQL query executed by the database engine. Once asking to execute a SQL command, the database engine parses the different parts of it in the following order:\n\nAs defined in the Microsoft official documentation, a SELECT – GROUP BY command is a SELECT statement clause that divides the query result into groups of rows, usually to perform one or more aggregations on each group. The SELECT statement returns one row per group”.\n\nThe syntax of the GROUP BY clause is as follows:\n\nA SQL GROUP BY clause can be used to perform aggregations over each group or even to remove duplicated rows based on the grouping expression. For example, assume that we need to extract all the distinct locations of the Stack Overflow users. We can simply add the DISTINCT keyword after the SELECT term.\n\nOr, we can use a SELECT – GROUP BY command to achieve the same thing:\n\nIt is worth mentioning that both queries have the same execution plan.\n\nNow, we can add an aggregation function in the SELECT clause to perform it per each group.\n\nAs shown in the image below, all NULL values are considered equal and collected into a single group.\n\nFigure 4 – Adding an aggregate function to the SELECT – GROUP BY command\n\nChecking the command execution plan, we can see that after aggregating the data within groups, a scalar function is applied per each group.\n\nThe simplest way to use the SQL GROUP BY clause is to select the columns needed for the grouping operation. All columns specified in the SELECT clause – except the aggregation functions – should be specified in the GROUP BY clause. For example, if we execute the following query:\n\nThe following exception is thrown:\n\nColumn ‘StackOverflow2010.dbo.Users.Id’ is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause.\n\nAnother thing worth mentioning is that column aliases cannot be used in the SQL GROUP BY clause since it is computed before the SELECT clause by the SQL engine.\n\nWe can also use user-defined scalar functions alongside the columns specified in the SELECT and GROUP BY clauses. For example, we created the following function to get whether a question has an answer or not:\n\nThe following query can be executed successfully.\n\nAnother way to group the result is by using column expressions. For example, if we are looking to group the columns based on a specific computation such as a mathematical expression or a CASE WHEN expression, we can simply use it similar to a single column. For example, assume that we want to count the number of questions being solved and the number of open issues on the Stack Overflow website. Noting that the Posts table only contains a column named AccetpedAnswerId that contains the identifier of the answer.\n\nWe cannot use the WHERE clause in this operation to filter the query result based on the group aggregated function result since the database engine executes the WHERE clause before applying the aggregate function. This is why the HAVING clause was found.\n\nThe HAVING clause can only be used with a SQL GROUP BY clause. For example, we need to get the locations mentioned in more than 1000 and less than 10000 user profiles.\n\nFigure 8 – Using the HAVING keyword to filter the result of a grouping operation\n\nTo explain the ROLLUP, CUBE, and GROUPING SETS options, we create a view from the Posts and Users tables with the following structure:\n\nLet’s assume that we want to generate a report showing the number of posts in each year, quarter, and month, for each post’s type. The result should be as the following:\n\nThe SQL GROUP BY ROLLUP lets us create the combinations that exist in the data in addition to rolling up within the hierarchical order we define in the ROLLUP statement. For example, let us try the following query:\n\nAs shown in the image below, the result includes three levels of aggregations:\n• The number of posts per month\n• The number of posts per quarter\n• The number of posts per year\n\nFigure 9 – Using the ROLLUP statement to apply aggregation on different hierarchical levels\n\nNow, let’s assume that we are asked to generate a report that shows the number of posts per user location, the post type, or both.\n\nTHE SQL GROUP BY CUBE statement produces every possible combination between the columns mentioned in the CUBE statement. For example, let’s try the following command:\n\nAs shown in the image below, the results contain three groups:\n• The number of posts per location\n• The number of posts per type\n• The number of posts per location and type\n\nFigure 10 – Using the GROUP BY CUBE statement\n\nSometimes we will be asked to only generate a report for only some specific combination of columns and expressions. In this case, using the CUBE or ROLLUP may be inefficient and time-consuming.\n\nFor this reason, we can use the GROUPING SETS statement, where we should define each combination explicitly. For example, we only want to generate a report showing the number of posts per location, per type, and the total number of posts.\n\nAs shown in the image below, the first five rows show the number of posts for each type, the 6th row shows the total number of posts, and the rest shows the number of posts per location.\n\nThis article briefly explained the SQL GROUP BY clause and how to use it to perform aggregate functions on the data. We also demonstrated the options available, such as grouping over a set of columns, expressions, and user-defined functions. In addition, we explained how to use the HAVING keyword for filtering and the ROLLUP, CUBE, and GROUPING SETS options for reporting purposes.\n\nTo learn more about the SQL GROUP BY function, you can refer to the following articles previously published on SQL Shack:"
    },
    {
        "link": "https://sisense.com/blog/everything-about-group-by",
        "document": "A brief tutorial Group by is one of the most frequently used SQL clauses. It allows you to collapse a field into its distinct values. This clause is most often used with aggregations to show one value per grouped field…\n\nGroup by is one of the most frequently used SQL clauses. It allows you to collapse a field into its distinct values. This clause is most often used with aggregations to show one value per grouped field or combination of fields.\n\nConsider the following table:\n\nWe can use an SQL group by and aggregates to collect multiple types of information. For example, an SQL group by can quickly tell us the number of countries on each continent.\n\nKeep in mind when using SQL GROUP BY:\n• Group by X means put all those with the same value for X in the same row.\n• Group by X, Y put all those with the same values for both X and Y in the same row.\n\nMore interesting things about SQL GROUP BY\n\n1. Aggregations can be filtered using the HAVING clause\n\nYou will quickly discover that the where clause cannot be used on an aggregation. For instance:\n\nwill not work, and will throw an error. This is because the where statement is evaluated before any aggregations take place. The alternate having is placed after the group by and allows you to filter the returned data by an aggregated column.\n\nUsing having, you can return the aggregate filtered results!\n\n2. You can often GROUP BY column number\n\nIn many databases, you can group by column number as well as column name. Our first query could have been written:\n\nand returned the same results. This is called ordinal notation and its use is debated. It predates column based notation and was SQL standard until the 1980s.\n• It is less explicit, which can reduce legibility for some users.\n• It can be more brittle. A query select statement can have a column name changed and continue to run, producing an unexpected result.\n\nOn the other hand, it has a few benefits.\n• SQL coders tend toward a consistent pattern of selecting dimensions first and aggregates second. This makes reading SQL more predictable.\n• It is easier to maintain on large queries. When writing long ETL statements, I have had group by statements that were many, many lines long. I found this difficult to maintain.\n• Some databases allow using an aliased column in the group by. This allows a long case statement to be grouped without repeating the full statement in the group by clause. Using ordinal positions can be cleaner and prevent you from unintentionally grouping by an alias that matches a column name in the underlying data. For example, the following query will return the correct values:\n\nBut this will not, and will segment by the base table’s currency field while accepting the new alias column labels:\n\nThis is ‘expected’ behavior, but remain vigilant.\n\nA common practice is to use ordinal positions for ad hoc work and column names for production code. This will ensure you are being completely explicit for future users who need to change your code.\n\nThere is one case where you can take an aggregation without using a group by. When you are aggregating the full table there is an implied SQL group by. This is known as the in SQL standards documentation.\n\n4. GROUP BY treats Null as groupable value, and that is strange.\n\nWhen your data set contains multiple null values, group by will treat them as a single value and aggregate for the set.\n\nThis does not conform to the standard use of null, which is never equal to anything including itself.\n\nFrom the SQL standards guidelines in SQL:2008\n\n“Although the null value is neither equal to any other value nor not equal to any other value — it is unknown whether or not it is equal to any given value — in some contexts, multiple null values are treated together; for example, the treats all null values together.”\n\n5. MySQL allows you to GROUP BY without specifying all your non-aggregate columns\n\nIn MySQL, unless you change some database settings, you can run queries like only a subset of the select dimensions grouped, and still get results. As an example, in MySQL this will return an answer, populating the state column with a randomly chosen value from those available.\n\nThat’s all for today! Group by is a commonly used keyword, but hopefully you now have a clearer understanding of some of its more nuanced uses."
    },
    {
        "link": "https://w3schools.com/sql/sql_Groupby.asp",
        "document": "The statement groups rows that have the same values into summary rows, like \"find the number of customers in each country\".\n\nThe statement is often used with aggregate functions ( , , , , ) to group the result-set by one or more columns.\n\nBelow is a selection from the \"Customers\" table in the Northwind sample database:\n\nThe following SQL statement lists the number of customers in each country:\n\nThe following SQL statement lists the number of customers in each country, sorted high to low:\n\nBelow is a selection from the \"Orders\" table in the Northwind sample database:\n\nAnd a selection from the \"Shippers\" table:\n\nGROUP BY With JOIN Example\n\nThe following SQL statement lists the number of orders sent by each shipper:\n\nSELECT Shippers.ShipperName, COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders\n\nLEFT JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID\n\n GROUP BY ShipperName; Try it Yourself »"
    },
    {
        "link": "https://medium.com/learning-sql/optimising-group-by-queries-in-sql-server-96a11e7d0cd2",
        "document": "Some of the slowest queries I’ve ever experienced have been caused by an inappropriate .\n\nThe queries were working exactly as expected, and successfully passed all code reviews and tests, but as soon as they were executed against large datasets, they were seen to run really slowly, and put the database server under a huge amount of pressure.\n\nFortunately, once you know what to look for, the issue with can be easily avoided, and there are simple solutions to fix existing issues.\n\nLet’s start by reproducing the problem so that we can measure the improvements we make.\n\nI’ll be using a copy of the 2013 Stack Overflow database, running on SQL Server 2019 (Developer Edition). The screenshots will be taken from SQL Sentry Plan Explorer. Don’t worry if you don’t have this set up on your machine — I’ll make sure all schemas are included throughout the article.\n\nWe’ll be using 3 tables here: , and :\n\nSo, in this structure, a post has a single type, and potentially multiple links which relate to other posts.\n\nWe’ll also add a couple of indexes to get us started:\n\nSay we want to write a query to list the latest 100 posts, but for posts that are questions, also return the latest of its related posts.\n\nWe could write this like this:\n\nIn this query we’re starting from , and joining onto to get the type of the post. We’re then using a to get the post links, and then another to get the related post itself. In the statement, we’re returning the columns we want, but for the column, we’re checking that the is ‘Question’, and if it is, then getting the value of . Finally, we’re grouping by the columns that aren’t being aggregated, then ordering based on .\n\nPhew. A lot going on. Let’s give it a run, and see what happens.\n\nSo that returns the correct data, but it took over 1 minute to run. Let’s have a look at the execution plan to see what’s going on:\n\nSo we’re reading 17 million rows from , and 1.4 million rows from . That doesn’t sounds very good.\n\nLet’s see if we can make this quicker.\n\nOnly GROUP BY what we need to\n\nLooking at the query, we’re using a to allow us to use the statement for the latest date. This also handily prevents duplicate rows being returned for the same post.\n\nHowever, SQL struggles to use indexes efficiently when is used like this. It should be pretty easy for SQL to work out what the latest 100 posts (ordering by ), but instead it’s reading millions of rows to do it.\n\nThis is a common problem with using inappropriately. is most useful when dealing with aggregations (e.g., , , , etc.), and SQL can optimise that really well. But if data is just being ‘passed-through’ the grouping, then SQL has fewer options when it comes to optimising it.\n\nAbstract out the aggregation into a CTE\n\nThis is where a well-designed Common Table Expression (CTE) can be really helpful.\n\nIf we move the aggregation of the latest date out into a CTE, and make sure the CTE returns the data in the right granularity (i.e., only 1 row per post, without duplicates), then we can avoid having to group on columns that don’t really need to be aggregated.\n\nThe body of the CTE would need to return unique values, and the latest date for each. We can achieve this by using the and tables, and grouping only on the value:\n\nTherefore, if we create a CTE that contains this query, we can onto that, and remove the need for the on , and in the outer query:\n\nLet’s give that a run, and see how the execution plan looks:\n\nThis now completes in 2 milliseconds. And the plan looks really nice and tidy.\n\nIf we take a closer look at the latest execution plan, we can see why SQL is now able to execute this really quickly.\n\nThe first part of the plan is finding the relevant rows in . Because we have an index on , SQL can scan this index and find the latest 100 rows.\n\nNow that it’s got those 100 rows, it can perform a join against the aggregation in the CTE:\n\nIt’s using the index on to find the matching links (and, in our case, only 2 of the 100 rows have links), then the can be found for the related posts via the Clustered Index Seek.\n\nSQL is only able to generate and use such an efficient plan because we’re not forcing it to do extra work. The main issue we had was that we were including in the . If we look at the original execution plan, before we rewrote the query, we can see the same Index Scan on , but this time it’s scanning the entire index, and returning all 17 million rows in that table:\n\nSQL then had no option but to read all the links for all these posts, resulting in an Index Scan of 1.4 million rows on :\n\nFinally, once SQL had all the data for all rows, it could perform the grouping, and only then would it have a value that it could sort by:\n\nSo, the key difference that we made by rewriting our query is that we’re now not including the in any grouping, so SQL is able to find the relevant rows without having to process everything.\n\nUsing on columns that don’t need to be aggregated can really hamper performance, and can result in substantially higher reads.\n\nA good rule of thumb is if you find yourself using on anything other than a logical primary key, try and abstract that aggregation into something else, such as a CTE, view or sub-query. You’ll find that your queries and faster, and there’ll be much less pressure on your database server."
    },
    {
        "link": "https://dev.mysql.com/doc/en/date-and-time-functions.html",
        "document": "\n• None These functions perform date arithmetic. The argument specifies the starting date or datetime value. is an expression specifying the interval value to be added or subtracted from the starting date. is evaluated as a string; it may start with a for negative intervals. is a keyword indicating the units in which the expression should be interpreted. For more information about temporal interval syntax, including a full list of specifiers, the expected form of the argument for each value, and rules for operand interpretation in temporal arithmetic, see Temporal Intervals. The return value depends on the arguments:\n• None If is , the function returns .\n• None if the argument is a value and your calculations involve only , , and parts (that is, no time parts).\n• None if the argument is a value and the calculations involve only , , and parts (that is, no date parts).\n• None if the first argument is a (or ) value, or if the first argument is a and the value uses , , or , or if the first argument is of type and the value uses , , or .\n• None If the first argument is a dynamic parameter (for example, of a prepared statement), its resolved type is if the second argument is an interval that contains some combination of , , or values only; otherwise, its type is . To ensure that the result is , you can use to convert the first argument to . When adding a interval to a or value, and the resulting date includes a day that does not exist in the given month, the day is adjusted to the last day of the month, as shown here: mysql> SELECT DATE_ADD('2024-03-30', INTERVAL 1 MONTH) AS d1, > DATE_ADD('2024-03-31', INTERVAL 1 MONTH) AS d2; +------------+------------+ | d1 | d2 | +------------+------------+ | 2024-04-30 | 2024-04-30 | +------------+------------+ 1 row in set (0.00 sec)\n• None Formats the value according to the string. If either argument is , the function returns . The specifiers shown in the following table may be used in the string. The character is required before format specifier characters. The specifiers apply to other functions as well: , , . Day of the month with English suffix ( , , , , …) Time, 12-hour ( followed by or ) Week ( .. ), where Sunday is the first day of the week; mode 0 Week ( .. ), where Monday is the first day of the week; mode 1 Week ( .. ), where Sunday is the first day of the week; mode 2; used with Week ( .. ), where Monday is the first day of the week; mode 3; used with Year for the week where Sunday is the first day of the week, numeric, four digits; used with Year for the week, where Monday is the first day of the week, numeric, four digits; used with , for any not listed above Ranges for the month and day specifiers begin with zero due to the fact that MySQL permits the storing of incomplete dates such as . The language used for day and month names and abbreviations is controlled by the value of the system variable (Section 12.16, “MySQL Server Locale Support”). For the , , , and specifiers, see the description of the function for information about the mode values. The mode affects how week numbering occurs. returns a string with a character set and collation given by and so that it can return month and weekday names containing non-ASCII characters.\n• None Returns a representation of as a datetime or character string value. The value returned is expressed using the session time zone. (Clients can set the session time zone as described in Section 7.1.15, “MySQL Server Time Zone Support”.) is an internal timestamp value representing seconds since UTC, such as produced by the function. If is omitted, this function returns a value. If or is , this function returns . If is an integer, the fractional seconds precision of the is zero. When is a decimal value, the fractional seconds precision of the is the same as the precision of the decimal value, up to a maximum of 6. When is a floating point number, the fractional seconds precision of the datetime is 6. On 32-bit platforms, the maximum useful value for is 2147483647.999999, which returns UTC. On 64-bit platforms, the effective maximum is 32536771199.999999, which returns UTC. Regardless of platform or version, a greater value for than the effective maximum returns . is used to format the result in the same way as the format string used for the function. If is supplied, the value returned is a . If you use and to convert between values in a non-UTC time zone and Unix timestamp values, the conversion is lossy because the mapping is not one-to-one in both directions. For details, see the description of the function.\n• None Returns the current date and time as a value in or format, depending on whether the function is used in string or numeric context. The value is expressed in the session time zone. If the argument is given to specify a fractional seconds precision from 0 to 6, the return value includes a fractional seconds part of that many digits. returns a constant time that indicates the time at which the statement began to execute. (Within a stored function or trigger, returns the time at which the function or triggering statement began to execute.) This differs from the behavior for , which returns the exact time at which it executes. mysql> SELECT NOW(), SLEEP(2), NOW(); +---------------------+----------+---------------------+ | NOW() | SLEEP(2) | NOW() | +---------------------+----------+---------------------+ | 2006-04-12 13:47:36 | 0 | 2006-04-12 13:47:36 | +---------------------+----------+---------------------+ mysql> SELECT SYSDATE(), SLEEP(2), SYSDATE(); +---------------------+----------+---------------------+ | SYSDATE() | SLEEP(2) | SYSDATE() | +---------------------+----------+---------------------+ | 2006-04-12 13:47:44 | 0 | 2006-04-12 13:47:46 | +---------------------+----------+---------------------+ In addition, the statement affects the value returned by but not by . This means that timestamp settings in the binary log have no effect on invocations of . Setting the timestamp to a nonzero value causes each subsequent invocation of to return that value. Setting the timestamp to zero cancels this effect so that once again returns the current date and time. See the description for for additional information about the differences between the two functions.\n• None This is the inverse of the function. It takes a string and a format string . returns a value if the format string contains both date and time parts, or a or value if the string contains only date or time parts. If or is , the function returns . If the date, time, or datetime value extracted from cannot be parsed according to the rules followed by the server, returns and produces a warning. The server scans attempting to match to it. The format string can contain literal characters and format specifiers beginning with . Literal characters in must match literally in . Format specifiers in must match a date or time part in . For the specifiers that can be used in , see the function description. Scanning starts at the beginning of and fails if is found not to match. Extra characters at the end of are ignored. Unspecified date or time parts have a value of 0, so incompletely specified values in produce a result with some or all parts set to 0: Range checking on the parts of date values is as described in Section 13.2.2, “The DATE, DATETIME, and TIMESTAMP Types”. This means, for example, that “zero” dates or dates with part values of 0 are permitted unless the SQL mode is set to disallow such values. If the SQL mode is enabled, zero dates are disallowed. In that case, returns and generates a warning: In some previous versions of MySQL, it was possible to pass an invalid date string such as to this function. In MySQL 8.4, performs complete range checking and raises an error if the date after conversion would be invalid. You cannot use format to convert a year-week string to a date because the combination of a year and week does not uniquely identify a year and month if the week crosses a month boundary. To convert a year-week to a date, you should also specify the weekday: You should also be aware that, for dates and the date portions of datetime values, checks (only) the individual year, month, and day of month values for validity. More precisely, this means that the year is checked to be sure that it is in the range 0-9999 inclusive, the month is checked to ensure that it is in the range 1-12 inclusive, and the day of month is checked to make sure that it is in the range 1-31 inclusive, but the server does not check the values in combination. For example, returns . Enabling or disabling the server SQL mode has no effect on this behavior. See Section 13.2.2, “The DATE, DATETIME, and TIMESTAMP Types”, for more information.\n• None Returns the current date and time as a value in or format, depending on whether the function is used in string or numeric context. If the argument is given to specify a fractional seconds precision from 0 to 6, the return value includes a fractional seconds part of that many digits. returns the time at which it executes. This differs from the behavior for , which returns a constant time that indicates the time at which the statement began to execute. (Within a stored function or trigger, returns the time at which the function or triggering statement began to execute.) mysql> SELECT NOW(), SLEEP(2), NOW(); +---------------------+----------+---------------------+ | NOW() | SLEEP(2) | NOW() | +---------------------+----------+---------------------+ | 2006-04-12 13:47:36 | 0 | 2006-04-12 13:47:36 | +---------------------+----------+---------------------+ mysql> SELECT SYSDATE(), SLEEP(2), SYSDATE(); +---------------------+----------+---------------------+ | SYSDATE() | SLEEP(2) | SYSDATE() | +---------------------+----------+---------------------+ | 2006-04-12 13:47:44 | 0 | 2006-04-12 13:47:46 | +---------------------+----------+---------------------+ In addition, the statement affects the value returned by but not by . This means that timestamp settings in the binary log have no effect on invocations of . Because can return different values even within the same statement, and is not affected by , it is nondeterministic and therefore unsafe for replication if statement-based binary logging is used. If that is a problem, you can use row-based logging. Alternatively, you can use the option to cause to be an alias for . This works if the option is used on both the replication source server and the replica. The nondeterministic nature of also means that indexes cannot be used for evaluating expressions that refer to it.\n• None If is called with no argument, it returns a Unix timestamp representing seconds since UTC. If is called with a argument, it returns the value of the argument as seconds since UTC. The server interprets as a value in the session time zone and converts it to an internal Unix timestamp value in UTC. (Clients can set the session time zone as described in Section 7.1.15, “MySQL Server Time Zone Support”.) The argument may be a , , or string, or a number in , , , or format. If the argument includes a time part, it may optionally include a fractional seconds part. The return value is an integer if no argument is given or the argument does not include a fractional seconds part, or if an argument is given that includes a fractional seconds part. When the argument is a column, returns the internal timestamp value directly, with no implicit “string-to-Unix-timestamp” conversion. The valid range of argument values is the same as for the data type: UTC to UTC for 32-bit platforms; for MySQL running on 64-bit platforms, the valid range of argument values for is UTC to UTC (corresponding to 32536771199.999999 seconds). Regardless of MySQL version or platform architecture, if you pass an out-of-range date to , it returns . If is , it returns . If you use and to convert between values in a non-UTC time zone and Unix timestamp values, the conversion is lossy because the mapping is not one-to-one in both directions. For example, due to conventions for local time zone changes such as Daylight Saving Time (DST), it is possible for to map two values that are distinct in a non-UTC time zone to the same Unix timestamp value. maps that value back to only one of the original values. Here is an example, using values that are distinct in the time zone: To use named time zones such as or , the time zone tables must be properly set up. For instructions, see Section 7.1.15, “MySQL Server Time Zone Support”. If you want to subtract columns, you might want to cast them to signed integers. See Section 14.10, “Cast Functions and Operators”.\n• None This function returns the week number for . The two-argument form of enables you to specify whether the week starts on Sunday or Monday and whether the return value should be in the range from to or from to . If the argument is omitted, the value of the system variable is used. See Section 7.1.8, “Server System Variables”. For a date value, the function returns . The following table describes how the argument works. Week 1 is the first week … with a Sunday in this year with 4 or more days this year with a Sunday in this year with 4 or more days this year with 4 or more days this year with a Monday in this year with 4 or more days this year with a Monday in this year For values with a meaning of “with 4 or more days this year,” weeks are numbered according to ISO 8601:1988:\n• None If the week containing January 1 has 4 or more days in the new year, it is week 1.\n• None Otherwise, it is the last week of the previous year, and the next week is week 1. If a date falls in the last week of the previous year, MySQL returns if you do not use , , , or as the optional argument: One might argue that should return because the given date actually occurs in the 52nd week of 1999. returns instead so that the return value is “the week number in the given year.” This makes use of the function reliable when combined with other functions that extract a date part from a date. If you prefer a result evaluated with respect to the year that contains the first day of the week for the given date, use , , , or as the optional argument."
    },
    {
        "link": "https://stackoverflow.com/questions/16657202/filter-by-datetime-mysql-formatting",
        "document": "I have a Mysql Table that is used for a log file on the that table there is a field called 'log_date' And it stores the date in the following format( %Y-%m-%d %H:%i.%s ).On the DB the dates look like something this 2013-20-05 00:00.00. Lets say today's date is 2013-20-05 And I have log files from 2013-01-01 to present day. If I run a query like this:\n\nThis is returning every row in the DB including rows that are greater than 2013-05-05 00:00.00\n\nAnd if I reverse the < (less then) to a > (greater then) with a query that looks like this:\n\nThen it returns ZERO rows. I think the time stamp is what is causing the problem I have worked with the date format before but not the DateTime format. Why is this happening?"
    },
    {
        "link": "https://stackoverflow.com/questions/6273361/mysql-query-to-select-records-with-a-particular-date",
        "document": "so right now I'm storing a the date of each search done on my site like this\n\nnow I'd like to execute a query to select all values where the date is equal to whatever, but only the year / month and day are taken into account, so it would be like\n\nbut it shouldn't take into account the exact time (hour minute seconds), is there any way to do this?"
    },
    {
        "link": "https://freecodecamp.org/news/mysql-date-functions",
        "document": "SQL is a programming language we use to interact with relational databases. SQL databases contain tables, which contain rows of data. These tables can contain a wide range of data types.\n\nIn this article, you'll learn how MySQL functions help make date management very easy.\n\nThese functions help perform various tasks. Some perform simple tasks like adding days to dates, finding how many days are between two dates, or even more complicated tasks like how to tell how far into a year a date is by number of days.\n\nBefore proceeding, keep in mind that this article was written on . So your results on running the queries here might be slightly different based on when you read it.\n\nThis function returns today's date in the format 'YYYY-MM-DD'. It is one of the simplest MySQL functions to use. It takes no arguments at all.\n\nThis function has synonymous functions that work just the way it does: and will return the exact same result as .\n\nThis functions performs additions, or subtractions, on date values. It takes an interval that can be in days, or months, or even years. This interval can be positive or negative. The function takes this format:\n\nHere, the refers to the base date value to be added to or subtracted from. And the is a constant keyword that has to come before the that is used to set the value of the increment in numbers. Finally, you have the unit, which can be , , , or even . The can also be a smaller value like or even . Check the MySQL docs for more possible values.\n\nThis functions works exactly the same as the and you can use them interchangeably.\n\nUsing ADDDATE, you can find the date of 45 days from today like this:\n\nTo get the date of the day 7 months and 3 weeks ago, use the ADDDATE like this:\n\nHere, we called the ADDDATE function twice. First, to get the date of 7 months ago. Then, we called it again to get the date of 3 weeks before that time.\n\nA common use case of ADDDATE in real life applications is to get data values to be used in a WHERE clause as a range.\n\nFor example, if you had an table with a field that stores their resumption date. To see all employees that resumed in the past year (where > the date of a year ago), use ADDDATE like this:\n\nAnother common case would be when you have to filter by a time range. In a table with a field, to fetch all songs released in the last three weeks except for the ones released this week, use ADDDATE like this:\n\nThis function returns the number of days between two dates. It takes in the two dates to be subtracted. Let's use to find the number of days between today and .\n\nRearranging the dates and calling the function again results in a difference in the response:\n\nYou can use this function with the function to get the absolute value and not have issues with the negative sign or value.\n\nThis is very useful when you have to return data with respect to time. For example, in many blogs, you see a part that says something like 'Posted 7 days ago'. You can use the DATEDIFF` to get this value easily.\n\nThis function lets you present your data anyhow you want it. This is a very useful function. It takes in the date to be formatted, and also a string representing the desired format. The function takes this format:\n\nThe format string can be of any length and each character in it defines a specific format and must be prefixed by the percentage symbol, . For example, given the date , you can present this as like so:\n\nHere, we passed in the format string . But, what does this truly mean? Here's a few things to note:\n• The provided format string, , is exactly the same shape as the result, . This means you can shape the result anyhow you like – even the space characters matter. Every character in the format string is returned as part of the result, except it is prefixed using the percentage sign, then it is read as a format character. For example, rewriting the format string to '45 days from today is %a, %D day of %M, %Y' will result in 45 days from today is Fri, 10th day of March, 2023 .\n• The used results in the abbreviated weekday name, Fri.\n• The returned the day of the month with English suffix, 10th.\n• The returned the name of the month, March.\n\nThere are many more characters that you can use in the format string, and you can find them here.\n\nHow to Use the and Functions in SQL\n\nWhile these functions aren't limited or specific to date data type, they are very useful when working with dates. You can use the MAX to find the latest record in a table. You can use the MIN to find the oldest record in a table.\n\nIn a table of , with a field storing their date of birth, you can find the oldest employee using the MAX function like this:\n\nOr alternatively, like this:\n\nYou could get the youngest employee using the MIN function:\n\nI hope you now understand the MySQL date functions we discussed here, their variations and arguments, and when to use them so you can write better queries. You can find more of these functions here.\n\nIf you have any questions or relevant advice, please get in touch with me to share them.\n\nTo read more of my articles or follow my work, you can connect with me on LinkedIn, Twitter, and Github. It’s quick, it’s easy, and it’s free!"
    },
    {
        "link": "https://w3schools.com/mysql/mysql_dates.asp",
        "document": "The most difficult part when working with dates is to be sure that the format of the date you are trying to insert, matches the format of the date column in the database.\n\nAs long as your data contains only the date portion, your queries will work as expected. However, if a time portion is involved, it gets more complicated.\n\nMySQL comes with the following data types for storing a date or a date/time value in the database:\n\nNote: The date data type are set for a column when you create a new table in your database!\n\nLook at the following table:\n\nNow we want to select the records with an OrderDate of \"2008-11-11\" from the table above.\n\nWe use the following statement:\n\nThe result-set will look like this:\n\nNow, assume that the \"Orders\" table looks like this (notice the added time-component in the \"OrderDate\" column):\n\nIf we use the same statement as above:\n\nwe will get no result! This is because the query is looking only for dates with no time portion.\n\nTip: To keep your queries simple and easy to maintain, do not use time-components in your dates, unless you have to!"
    }
]