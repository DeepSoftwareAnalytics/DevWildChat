[
    {
        "link": "https://learn.microsoft.com/en-us/sharepoint/dev/sp-add-ins/working-with-lists-and-list-items-with-rest",
        "document": "Working with lists and list items with REST\n\nThis topic assumes that you're already familiar with the topics Get to know the SharePoint REST service and Complete basic operations using SharePoint REST endpoints. It doesn't provide code snippets.\n\nThe following example shows how to retrieve a specific list if you know its GUID.\n\nThe following example shows how to retrieve a specific list if you know its title.\n\nThe following XML shows an example of the list properties that are returned when you request the XML content type.\n\nWorking with lists by using REST\n\nThe following example shows how to create a list.\n\nThe following example shows how to update a list by using the MERGE method.\n\nThe following example shows how to create a custom field for a list.\n\nThe following example shows how to delete a list.\n\nWhen referring to a lookup column inside a list using REST API, use the display name of the lookup column instead of the internal name.\n\nWorking with list items by using REST\n\nThe following example shows how to retrieve all of a list's items.\n\nThe following example shows how to retrieve a specific list item.\n\nThe following XML shows an example of the list item properties that are returned when you request the XML content type.\n\nRetrieves information about the list and its data. Using this API you can retrieve list items in case they use complex fields such as lookups or managed metadata.\n\nFollowing properties can be added as query string parameters to manipulate the returned data.\n\nRetrieve items from the specified folder\n\nThe following example shows how to create a list item.\n\nThe following example shows how to create a list item in a folder.\n\nThe property contains the list of properties that have been set when creating the list item.\n\nThe following example shows how to update a list item.\n\nThe following example shows how to delete a list item.\n\nUsing ETag values to determine document and list item versioning\n\nThe SharePoint REST service, which follows the OData standard, uses Header ETags of SharePoint lists and list items. To check on an item's version when you perform a PUT, MERGE, or DELETE request, specify an ETag in the If-Match HTTP request header.\n\nIf the ETag you specify in your request doesn't match the ETag of the document or list item on the server, the REST service returns a 412 exception, per the OData specification.\n• To force an overwrite of the item regardless of version, set the ETag value to \"*\".\n• If you do not specify an ETag, SharePoint overwrites the item regardless of version.\n\nWithin SharePoint, ETags apply only to SharePoint lists and list items.\n• Get to know the SharePoint REST service\n• SharePoint: Perform basic data access operations on files and folders by using REST"
    },
    {
        "link": "https://learn.microsoft.com/en-us/sharepoint/dev/sp-add-ins/complete-basic-operations-using-sharepoint-rest-endpoints",
        "document": "You can perform basic create, read, update, and delete (CRUD) operations by using the Representational State Transfer (REST) interface provided by SharePoint. The REST interface exposes all the SharePoint entities and operations that are available in the other SharePoint client APIs. One advantage of using REST is that you don't have to add references to any SharePoint libraries or client assemblies. Instead, you make HTTP requests to the appropriate endpoints to retrieve or update SharePoint entities, such as webs, lists, and list items.\n\nFor an introduction to the SharePoint REST interface and its architecture, see Get to know the SharePoint REST service.\n\nFor information about how to work with core SharePoint entities, see Working with lists and list items with REST and Working with folders and files with REST.\n\nFor a sample that shows you how to do many of these operations in the context of an ASP.NET web application written in C#, see SharePoint-Add-in-REST-OData-BasicDataOperations.\n\nFor information about the sets of APIs available on the SharePoint platform, see Choose the right API set in SharePoint.\n\nFor information about how to use the other client APIs, see:\n• Complete basic operations using JavaScript library code in SharePoint- Complete basic operations using SharePoint client library code\n\nThe endpoints in the SharePoint REST service correspond to the types and members in the SharePoint client object models. By using HTTP requests, you can use these REST endpoints to perform typical CRUD (Create, Read, Update, and Delete) operations against SharePoint entities, such as lists and sites.\n\nTypically, endpoints that represent Read operations map to HTTP GET commands, endpoints that represent create operations map to HTTP POST commands, and endpoints that represent update or insert operations map to HTTP PUT commands.\n\nIn SharePoint, use POST to create entities such as lists and sites. The SharePoint REST service supports sending POST commands that include object definitions to endpoints that represent collections. For example, you could send a POST command that included a new list object definition in ATOM to the following URL, to create a SharePoint list:\n\nFor POST operations, any properties that are not required are set to their default values. If you attempt to set a read-only property as part of a POST operation, the service returns an exception.\n\nUse PUT and MERGE operations to update existing SharePoint objects. Any service endpoint that represents an object property set operation supports both PUT requests and MERGE requests. For MERGE requests, setting properties is optional; any properties that you do not explicitly set retain their current property. For PUT commands, however, any properties you do not explicitly set are set to their default properties. In addition, if you do not specify all required properties in object updates when using HTTP PUT commands, the REST service returns an exception.\n\nUse the HTTP DELETE command against the specific endpoint URL to delete the SharePoint object represented by that endpoint. In the case of recyclable objects, such as lists, files, and list items, this results in a Recycle operation.\n\nTo use the REST capabilities that are built into SharePoint, you construct a RESTful HTTP request, using the OData standard, which corresponds to the client object model API you want to use. Each SharePoint entity is exposed at an endpoint on the SharePoint site that you are targeting, and its metadata is represented in either XML or JSON format. You can make the HTTP requests in any language, including but not limited to JavaScript and C#.\n\nTo read information from a REST endpoint, you must know both the URL of the endpoint and the OData representation of the SharePoint entity that is exposed at that endpoint. For example, to retrieve all the lists in a specific SharePoint site, you would make a GET request to . You can navigate to this URL in your browser and see the XML that gets returned. When you make the request in code, you can specify whether to receive the OData representation of the lists in XML or JSON.\n\nThe following C# code demonstrates how to make this GET request that returns a JSON representation of all of a site's lists by using JQuery. It also assumes that you have a valid OAuth access token that is stored in the accessToken variable. You do not need the access token if you make this call from inside an add-in web, as you would in a SharePoint-hosted add-in. Note that you cannot obtain an access token from code that is running on a browser client. You must obtain the access token from code that is running on a server.\n\nFor more information about how you can obtain an access token, see Context Token OAuth flow for SharePoint Add-ins and Authorization Code OAuth flow for SharePoint Add-ins.\n\nThis request would look a little different if you are writing your add-in in JavaScript while using the SharePoint cross-domain library. In this case, you don't need to provide an access token.\n\nThe following code demonstrates how this request would look if you are using the cross-domain library and want to receive the OData representation of the lists as XML instead of JSON. (Because Atom is the default response format, you don't have to include an Accept header.) For more information about using the cross-domain library, see Access SharePoint data from add-ins using the cross-domain library.\n\nThe code in the following example shows you how to request a JSON representation of all of the lists in a site by using C#. It assumes that you have an OAuth access token that you are storing in the variable.\n\nGetting properties that aren't returned with the resource\n\nMany property values are returned when you retrieve a resource, but for some properties, you have to send a GET request directly to the property endpoint. This is typical of properties that represent SharePoint entities.\n\nThe following example shows how to get a property by appending the property name to the resource endpoint. The example gets the value of the Author property from a File resource.\n\nTo get the results in JSON format, include an Accept header set to .\n\nWriting data by using the REST interface\n\nYou can create and update SharePoint entities by constructing RESTful HTTP requests to the appropriate endpoints, just as you do when you're reading data. One key difference, however, is that you use a POST request. When you're updating entities, you also pass a PUT or MERGE HTTP request method by adding one of those terms to the headers of your request as the value of the X-HTTP-Method key. The MERGE method updates only the properties of the entity that you specify, while the PUT method replaces the existing entity with a new one that you supply in the body of the POST. Use the DELETE method to delete the entity. When you create or update an entity, you must provide an OData representation of the entity that you want to create or change in the body of your HTTP request.\n\nAnother important consideration when creating, updating, and deleting SharePoint entities is that if you aren't using OAuth to authorize your requests, these operations require the server's request form digest value as the value of the X-RequestDigest header. You can retrieve this value by making a POST request with an empty body to and extracting the value of the node in the XML that the contextinfo endpoint returns. The following example shows an HTTP request to the contextinfo endpoint in C#.\n\nIf you're using the authentication and authorization flow described in Authorization and authentication of SharePoint Add-ins, you don't need to include the request digest in your requests.\n\nIf you're using the JavaScript cross-domain library, SP.RequestExecutor handles getting and sending the form digest value for you.\n\nIf you're creating a SharePoint-hosted SharePoint Add-in, you don't have to make a separate HTTP request to retrieve the form digest value. Instead, you can retrieve the value in JavaScript code from the SharePoint page (if the page uses the default master page), as shown in the following example, which uses JQuery and creates a list.\n\nThe following example shows how to update the list that is created in the previous example. The example changes the title of the list, uses JQuery, and assumes that you are doing this operation in a SharePoint-hosted add-in.\n\nThe value of the IF-MATCH key in the request headers is where you specify the etag value of a list or list item. This particular value applies only to lists and list items, and is intended to help you avoid concurrency problems when you update those entities. The previous example uses an asterisk (*) for this value, and you can use that value whenever you don't have any reason to worry about concurrency issues. Otherwise, you should obtain the etag value or a list or list item by performing a GET request that retrieves the entity. The response headers of the resulting HTTP response pass the etag as the value of the ETag key. This value is also included in the entity metadata.\n\nThe following example shows the opening tag for the XML node that contains the list information. The m:etag property contains the etag value.\n\nThe following example shows how to create a site in JavaScript.\n\nBuilding and sending an HTTP request may vary according to language, library, and add-in type, so you often need to change one or more request components when you're translating a request from one environment to another. For example, jQuery AJAX requests use data and type parameters to specify the request body and type, but cross-domain library requests use body and method parameters to specify those values.\n\nThe following sections describe other common differences across environments.\n\nThe way you get and send the form digest value depends on the add-in\n\nWhen you send a POST request, the request must include the form digest value in the X-RequestDigest header. However, the way you get and send the value differs by add-in:\n• None In SharePoint-hosted add-ins, you can just pass the following header:\n• None In cloud-hosted add-ins that use OAuth, first retrieve the form digest value by sending a request to the contextinfo endpoint, and then add it to requests, as shown in Writing data by using the REST interface.\n• None In cloud-hosted add-ins that use the JavaScript cross-domain library, you don't need to specify the form digest value. By default, SP.RequestExecutor automatically handles this for you. (It also handles the content-length value.)\n\nAdd-ins that use OAuth must pass access tokens in requests\n\nCloud-hosted add-ins use either OAuth or the cross-domain library to authorize access to SharePoint data. Add-in components with code that runs on a remote web server must use OAuth to authorize access to SharePoint data. In this case, you need to include an Authorization header to send the access token. For an example that adds an authorization header to an HTTPWebRequest object, see Reading data with the SharePoint REST interface.\n\nTo learn more about OAuth access tokens and how to get them, see Context Token OAuth flow for SharePoint Add-ins and Authorization Code OAuth flow for SharePoint Add-ins.\n\nEndpoint URIs in cross-domain requests use SP.AppContextSite to change the context\n\nRequests are sent to the resource endpoint that's specified in the url property of the request. Endpoint URIs use the following format:\n\nCross-domain library requests use this format when they access data on the add-in web, which is the default context for cross-domain library requests. But to access data on the host web or on another site collection, the requests need to initialize the host web or other site collection as the context. To do this, they use the SP.AppContextSite endpoint in the URI, as shown in Table 1. The example URIs in Table 1 use the @target alias to send the target URL in the query string because the URL contains a special character (':').\n\nTable 1. Using the SP.AppContextSite endpoint to change the context of the request\n\nSharePoint Add-ins can get the add-in web URL and host web URL from the query string of the add-in page, as shown in the following code example. The example also shows how to reference the cross-domain library, which is defined in the SP.RequestExecutor.js file on the host web. The example assumes that your add-in launches from SharePoint. For guidance about setting your SharePoint context correctly when your add-in does not launch from SharePoint, see Authorization Code OAuth flow for SharePoint Add-ins.\n\nTable 2 shows properties that are commonly used in HTTP requests for the SharePoint REST service.\n\nTable 2. When to use REST request properties in HTTP requests\n\nThe SharePoint Online (and on-premises SharePoint 2016 and later) REST service supports combining multiple requests into a single call to the service by using the OData query option. For details and links to code samples, see Make batch requests with the REST APIs.\n• Get to know the SharePoint REST service\n• Set custom permissions on a list by using the REST interface"
    },
    {
        "link": "https://learn.microsoft.com/en-us/sharepoint/dev/declarative-customization/column-formatting",
        "document": "You can use column formatting to customize how fields in SharePoint lists and libraries are displayed. To do this, you construct a JSON object that describes the elements that are displayed when a field is included in a list view, and the styles to be applied to those elements. The column formatting doesn't change the data in the list item or file; it only changes how it’s displayed to users who browse the list. Anyone who can create and manage views in a list can use column formatting to configure how view fields are displayed.\n\nFor example, a list with the fields Title, Effort, Assigned To, and Status with no customizations applied might look like this:\n\nA list with the appearance of the Effort, Assigned To, and Status fields customized via column formatting might look like this:\n\nHow is column formatting different than the Field Customizer?\n\nBoth column formatting and SharePoint Framework Field Customizer extensions enable you to customize how fields in SharePoint lists are displayed. The Field Customizer is more powerful because you can use it to write any code that you want to control how a field is displayed.\n\nColumn formatting is more easily and broadly applied. However, it's less flexible, because it doesn't allow for custom code; it only allows for certain predefined elements and attributes.\n\nThe following table compares column formatting and the Field Customizer.\n\nIf you can accomplish your scenario by using column formatting, it’s typically quicker and easier to do that than to use a Field Customizer. Anyone who can create and manage views in a list can use column formatting to create and publish customizations. Use a Field Customizer for more advanced scenarios that column formatting doesn't support.\n\nTo open the column formatting pane, open the drop-down menu under a column. Under Column Settings, choose Format this column.\n\nIf no one has used column formatting on the column you selected, the pane will look like the following.\n\nA field with no formatting specified uses the default rendering. To format a column, enter the column formatting JSON in the box.\n\nTo preview the formatting, select Preview. To commit your changes, select Save. When you save, anyone who views the list will see the customization that you applied.\n\nThe easiest way to use column formatting is to start from an example and edit it to apply to your specific field. The following sections contain examples that you can copy, paste, and edit for your scenarios. There are also several samples available in the SharePoint/sp-dev-column-formatting repository.\n\nThe simplest column formatting is one that places the value of the field inside a element. This example works for number, text, choice, and date fields:\n\nSome field types require a bit of extra work to retrieve their values. Person fields are represented in the system as objects, and a person’s display name is contained within that object’s title property. This is the same example, modified to work with the person field:\n\nLookup fields are also represented as objects; the display text is stored in the lookupValue property. This example works with a lookup field:\n\nYou can use column formatting to apply styles, classes, and icons to fields, depending on the value inside those fields.\n\nThe following image shows an example of conditional formatting applied to a number range.\n\nThis example uses an Excel-style conditional expression ( ) to apply a class ( ) to the parent element when the value in the current field is less than or equal to 70. This causes the field to be highlighted when the value is less than or equal to 70, and appear normally if it's greater than 70.\n\nConditional formatting based on the value in a text or choice field (advanced)\n\nThe following image shows an example of conditional formatting applied to a text or choice field:\n\nYou can apply conditional formatting to text or choice fields that might contain a fixed set of values. The following example applies different classes depending on whether the value of the field is Done, In Review, Has Issues, or another value. This example applies a CSS class ( ) to the based on the field's value. It then outputs a element with an attribute. This attribute automatically applies another CSS class to that that shows an Fluent UI icon inside that element. Finally, another element is output that contains the value inside the field.\n\nThis pattern is useful when you want different values to map to different levels of urgency or severity. You can start from this example and edit it to specify your own field values and the styles and icons that should map to those values.\n\nBecause dates are often used to track deadlines and key project timelines, a common scenario is to apply formatting based on the value in a date/time field. To apply formatting based on the value in a date/time field, apply the following patterns.\n\nThe following image shows a field with conditional date formatting applied:\n\nThis example colors the current field red when the value inside an item's DueDate is before the current date/time. Unlike some of the previous examples, this example applies formatting to one field by looking at the value inside another field. Note that is referenced using the syntax. FieldName is assumed to be the internal name of the field. This example also takes advantage of a special value that can be used in date/time fields - , which resolves to the current date/time, evaluated when the user loads the list view.\n\nTo compare the value of a date/time field against a date that's not , follow the pattern in the following example. The following example colors the current field red if the due date was <= tomorrow. This is accomplished using date math. You can add milliseconds to any date and the result will be a new date. For example, to add a day to a date, you'd add (24*60*60*1000 = 86,400,000).\n\nThis example demonstrates an alternate syntax to express a conditional expression, using the ternary ( ) operator inside an abstract syntax tree.\n\nHere's the same sample from above, using the Excel-style expression syntax:\n\nTo compare a date/time field value against another date constant, use the method to convert a string to a date. The following example colors the current field red if the value in the DueDate field is before 3/22/2017.\n\nHere's the same sample from above, using the Excel-style expression syntax:\n\nYou can use column formatting to provide hyperlinks that go to other webpages, or start custom functionality. This functionality is limited to static links that can be parameterized with values from fields in the list. You can't use column formatting to output links to protocols other than , , or .\n\nprotocol only allows digits, special characters and visual separators.\n\nThis example shows how to turn a text field that contains stock ticker symbols into a hyperlink that targets the Yahoo Finance real-time quotes page for that stock ticker. The example uses a operator that appends the current field value to the static hyperlink http://finance.yahoo.com/quote/. You can extend this pattern to any scenario in which you want users to view contextual information related to an item, or you want to start a business process on the current item, as long as the information or process can be accessed via a hyperlink parameterized with values from the list item.\n\nThe following image shows action buttons added to a field.\n\nYou can use column formatting to render quick action links next to fields. The following example, intended for a person field, renders two elements inside the parent element:\n• A element that contains the person’s display name.\n• An element that opens a mailto: link that creates an email with a subject and body populated dynamically via item metadata. The element is styled using the , , and Fluent UI classes to make it look like a clickable email icon.\n\nUse column formatting to combine conditional and arithmetical operations to achieve basic data visualizations.\n\nThe following image shows a number column formatted as a data bar.\n\nThis example applies and styles to create a data bar visualization of , which is a number field. The bars are sized differently for different values based on the way the attribute is set - it's set to when the value is greater than 20, and otherwise. To fit this example to your number column, you can adjust the boundary condition ( ) to match the maximum anticipated value inside the field, and change the equation to specify how much the bar should grow depending on the value inside the field.\n\nThe following image shows a list with trending up/trending down icons added:\n\nThis example relies on two number fields, and , for which the values can be compared. It shows the appropriate trending icon next to the field, depending on that field's value compared to the value in . is used when 's value is higher; is used when 's value is lower.\n\nHere's the same sample from above, using the Excel-style expression syntax:\n\nYou can use column formatting to apply styles to each member of a multi-value field of type Person, Lookup and Choice.\n\nThe following image shows an example of multi-value field formatting applied to a Person field.\n\nThis example uses the operator to detect the number of members of the field, and used operator to concatenate the email addresses of all members. This example hides the button when no member is found, and takes care of plurals in the text.\n\nThe following image shows an example of constructing a simple sentence from the values of a multi-value Lookup field.\n\nThis example uses operator and to identify the last member of the field, and attribute to duplicate HTML elements.\n\nThe following image shows an example of building a list of users with pictures, email addresses and a simple counter for the number of members at the top.\n\nThis example uses operator to control the margins all rows but the first one, and attribute to build the list of members.\n\nThe following are currently not supported:\n\nYou can use the following predefined classes for several common scenarios.\n\nIn addition to the classes listed above, the classes (such as the theme color, typography, grid system, etc.) defined by the Fluent UI can be used. For details, see the Fluent UI website.\n\nYou can use predefined icons from Fluent UI. For details, see the Fluent UI website.\n\nCreating custom column formatting JSON from scratch is simple if user understands the schema, Monaco Editor is integrated in the formatting pane with pre-filled JSON column schema reference to help creation of column formatting, Monaco editor has validation and autocomplete to help in crafting right JSON. User can start adding JSON after the first line that defines the schema location."
    },
    {
        "link": "https://paitgroup.com/blog/configuring-the-layout-of-sharepoint-forms",
        "document": ""
    },
    {
        "link": "https://michelcarlo.com/2022/05/19/sharepoint-custom-view-and-edit-buttons-using-list-formatting",
        "document": "If you need to add custom buttons as below to open SharePoint Online forms from list items (with the same behaviour as if you opened them using the out-of-the-box options), you can add them easily by using list formatting JSON, as below:\n\nThe main point here is to add a customRowAction element to a JSON template. This row action will allow you to call several list item out-of-the-box actions from the custom button/HTML element. For the edit button (launches a list form in edit mode) you can use the ‘edit action, and for the view one (launches a list form in display only mode) you can use the defaultClick action.\n\nTo use those buttons you need simply to add a ‘dummy’ column to your SharePoint list/view to work as a placeholder for the buttons (I normally use a calculated column so it never appear in forms), and then you can reuse the below as JSON template for the columns, for each button:\n\nWhen clicking the buttons, the list view form will be opened:"
    },
    {
        "link": "https://support.microsoft.com/en-us/office/create-a-flow-for-a-list-or-library-a9c3e03b-0654-46af-a254-20252e580d01",
        "document": "Use Power Automate to set up workflows for lists and libraries in Microsoft Lists , SharePoint, and OneDrive for work or school. Power Automate helps you automate common tasks among SharePoint, other Microsoft 365 services, and third-party services.\n• Navigate to a list or library in Microsoft Lists, SharePoint, or to your OneDrive for work or school.\n• For SharePoint, the option to create a flow is only available for site members who can add and edit items. The option is always available for OneDrive for work or school in the browser.\n• Power Automate can connect with SharePoint Server through an on-premises data gateway. Power Automate does not appear in SharePoint Server.\n• At the top of the list, select Integrate > Power Automate > Create a flow.\n• Select a flow template from the right-hand panel. Some commonly used flows appear. Get started with common scenarios, such as sending a customized email when a new item is added to the library. Use these templates as a starting point to create your own flows. Or, choose Show more > Complete a custom action for the selected item to create a flow from scratch. After selecting a template, complete the remaining steps in the Power Automate site.\n• The following steps happen in the Power Automate designer. The first screen to appear, is to show all apps used by this flow. Make sure the flow is connected to all apps with a green checkmark. For Microsoft 365 services, such as SharePoint and Outlook, connections are created automatically. If not, select Sign in to connect.\n• For third-party services, to sign in to each service, select the link provided.\n• Select Continue to the next step.\n• Depending on the template you selected, you will see a flow already being created. Add any necessary information, or change the default values provided for the template in the designer. For example, to modify the automated email content, under Send Email,select Edit. The options for the Send Email action include changes to how the email appears to displaying additional fields from the SharePoint item.\n• When you are done with editing, select Save on the top right of the designer to save your flow.\n\n7. After the flow is created, select Done.\n\nTo learn how to edit an existing flow in a list, see Edit a flow for a list. To learn how to delete a flow in a list, see Delete a flow from a list.\n\nIf the default behavior is set to the classic experience, Power Automate does not appear in the command bar of your list or library. If the new experience is available, to enable it for your list or library, navigate to List Settings, and then select Advanced Settings. For more info, see Switch the default experience for lists or document libraries from new or classic.\n\nFor more info about lists, see What is a list in Microsoft 365? For more info about Power Automate, see Get started with Power Automate."
    },
    {
        "link": "https://powerplatformer.com/how-to-trigger-power-automate-flow-with-sharepoint-list-button-using-json",
        "document": "Understanding JSON and Its Role in Microsoft 365 JSON, or JavaScript Object Notation, is a lightweight data-interchange format that is easy for humans to read and write and for machines to parse and generate. It is based on a subset of JavaScript but is considered a language-independent format, being used in many programming environments outside JavaScript. JSON plays a significant role in the digital ecosystem, particularly within Microsoft 365, where it serves as a backbone for configuring, customizing, and automating various aspects of the platform. Integrating Power Automate with SharePoint lists can significantly enhance your workflow automation capabilities. One powerful feature is triggering a flow directly from a SharePoint list using a custom button created with JSON formatting. This tutorial will guide you through the entire process, from setting up your Power Automate flow to customizing your SharePoint list with a JSON-formatted button.\n\nFirst, you'll need to set up a flow in Power Automate that performs the desired action when triggered.\n• Log in to Power Automate and select Create from the left navigation panel.\n• Choose your flow trigger type and define the trigger as usual.\n• Add the actions that your flow should perform after being triggered. After setting up your flow, you need to find the flow ID, which will be used by the SharePoint list button to trigger the flow. First, save your flow and navigate to the flow details.\n\n\n\nReplace <FLOW_ID> with the ID of your flow. You can find your flow's ID in by using the method layed out in step 2. You've now successfully integrated a custom button into your SharePoint list to trigger a Power Automate flow, all with just a bit of JSON magic! This process not only streamlines workflows but also enhances the user interface, making it easier for users to interact with SharePoint lists and automate tasks. Remember, the above JSON is a basic template. SharePoint and Power Automate offer extensive customization options, allowing you to tailor the button and the flow to your specific needs. Experiment with different JSON properties and Power Automate actions to fully leverage the power of SharePoint list integrations."
    },
    {
        "link": "https://reddit.com/r/MicrosoftFlow/comments/xd38f0/what_are_some_great_examples_of_power_automate",
        "document": "A place to discuss, share, and problem solve all things Microsoft Power Automate formerly Microsoft Flow related. Be sure to check out the links in the sidebar, be respectful, and let's all go with the Flow!"
    },
    {
        "link": "https://learn.microsoft.com/en-us/power-automate/data-operations",
        "document": "In this article, you learn about some common data operations in Power Automate, such as compose, join, select, filter arrays, create tables, and parse JSON. Use these operations to manipulate data when you create flows.\n• A tool to send HTTP POST requests with a JSON array to your flow.\n\nUse the Data Operation - Compose action to save yourself from having to enter the same data multiple times as you're designing a cloud flow. In this example, you need to enter an array of digits— —several times while you design your flow. You can use the compose action to save the array, as described in the following procedure.\n• Search for compose, and then select the Compose - Data Operation action.\n• None In the Inputs box, enter the array that you want to reference later.\n\nWhen you need to access the contents of the compose action, do so by following these steps.\n• None Add an action, such as Join - Data Operation.\n• None Select the control to which you'd like to add the contents you saved in the compose action. The Add dynamic content from the apps and connectors used in this flow screen opens.\n• None On the Dynamic content tab, in the Compose section, select Outputs.\n\nUse the Data Operation - Join action to delimit an array with the separator of your choice. For example, your flow receives a web request that includes the following array of email addresses: . However, your email program requires addresses to be formatted in a single string, separated with semicolons. You use the Data Operation - Join action to change the comma delimiter (,) to a semicolon (;) by following these steps:\n• None Add a new action, search for Join, and then select Data Operation - Join.\n• None In the From box, enter the array, and in the Join with box, enter a semicolon (;).\n• None Save your flow, and then run it.\n• None After your flow runs, the output of the Data Operation – Join action will be a string with the addresses joined by semicolons, as shown in the following screenshot.\n\nUse the Data Operation – Select action to transform the shape of objects in an array. For example, you can add, remove, or rename elements in each object in an array.\n\nIn this example, data enters your flow via a web request in this format:\n\nYou want to reshape the incoming data by renaming to and to , and adding a new member named that combines and (separated with a space).\n\nTo do this:\n• None Add the When an HTTP request is received trigger to your flow.\n• None In the box that appears, paste a sample of your source data array, and then select Done.\n• None Add the Data Operation – Select action, and then configure it as shown in the following screenshot. > The output from the select action is an array that contains the newly shaped objects. You can then use this array in any other action, such as the compose action discussed earlier.\n\nUse the Filter array - Data Operation action to reduce the number of objects in an array to a subset that matches the criteria you provide.\n\nIn this example, you use the filter array action on this array:\n\nThis example creates a new array that contains only objects in which is set to .\n• None Find, and then add, the Filter array action to your flow.\n• None Configure the filter array action as shown in the following screenshot.\n• None Save, and then run your flow.\n\nUse the Create CSV table - Data Operation action to change a JSON array input into a comma-separated value (CSV) table. You can keep the headers visible in the CSV output. In this example, you convert the following array into a CSV table:\n• None Find, add, and then configure the Create CSV table - Data Operation action to resemble the following image. The Body token in this image comes from a When a HTTP request is received action; however, you can get the input for the Create CSV table action from the output of any previous action in your flow, or you can enter it directly in the From box.\n• None Save, and then run your flow. When your flow runs, the Create CSV table action displays the output shown in the following screenshot.\n\nUse the Create HTML table - Data Operation action to change a JSON array input into an HTML table. You can keep the headers visible in the HTML output.\n\nTo do this, follow the steps in the previous Use the create CSV table action section for creating a CSV table. Use the Create HTML table - Data Operation action instead of Create CSV table.\n• Training: Use Dataverse triggers and actions in Power Automate (module)"
    },
    {
        "link": "https://m365princess.com/blogs/2021-02-08-how-to-use-parse-json-action-in-power-automate",
        "document": "How to add a simple preview in libraries in SharePoint\n\n#M365Hack - How to add a simple preview in a library in SharePoint After my last #M365Hack where I showed you how you can create a Dynamic preview for documents in SharePoint a few people reached out …"
    }
]