[
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a",
        "document": "This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015 . * Some parts of this feature may have varying levels of support.\n\nThe HTML element (or anchor element), with its attribute, creates a hyperlink to web pages, files, email addresses, locations in the same page, or anything else a URL can address. Content within each should indicate the link's destination. If the attribute is present, pressing the enter key while focused on the element will activate it.\n\nSpecifies that you want the browser to send an header. On the server-side this is used to trigger sending an header in the response, to register a navigation-based attribution source. The browser stores the source data associated with the navigation-based attribution source (as provided in the response header) when the user clicks the link. See the Attribution Reporting API for more details. There are two versions of this attribute that you can set:\n• Boolean, i.e. just the name. This specifies that you want the header sent to the same server as the attribute points to. This is fine when you are handling the attribution source registration on the same server.\n• Value containing one or more URLs, for example: This is useful in cases where the requested resource is not on a server you control, or you just want to handle registering the attribution source on a different server. In this case, you can specify one or more URLs as the value of . When the resource request occurs, the header will be sent to the URL(s) specified in in addition to the resource origin. These URLs can then respond with the to complete registration. Note: Specifying multiple URLs means that multiple attribution sources can be registered on the same feature. You might for example have different campaigns that you are trying to measure the success of, which involve generating different reports on different data. elements cannot be used as attribution triggers, only sources. Causes the browser to treat the linked URL as a download. Can be used with or without a value:\n• Without a value, the browser will suggest a filename/extension, generated from various sources:\n• The final segment in the URL path\n• The media type (from the header, the start of a URL, or for a URL)\n• : defining a value suggests it as the filename. and characters are converted to underscores ( ). Filesystems may forbid other characters in filenames, so browsers will adjust the suggested name if necessary.\n• only works for same-origin URLs, or the and schemes.\n• How browsers treat downloads varies by browser, user settings, and other factors. The user may be prompted before a download starts, or the file may be saved automatically, or it may open automatically, either in an external application or in the browser itself.\n• If the header has different information from the attribute, resulting behavior may differ:\n• If the header specifies a , it takes priority over a filename specified in the attribute.\n• If the header specifies a disposition of , Chrome and Firefox prioritize the attribute and treat it as a download. Old Firefox versions (before 82) prioritize the header and will display the content inline. The URL that the hyperlink points to. Links are not restricted to HTTP-based URLs — they can use any URL scheme supported by browsers:\n• While web browsers may not support other URL schemes, websites can with Moreover other URL features can locate specific parts of the resource, including: Hints at the human language of the linked URL. No built-in functionality. Allowed values are the same as the global attribute. A space-separated list of URLs. When the link is followed, the browser will send requests with the body to the URLs. Typically for tracking. How much of the referrer to send when following the link.\n• : The header will not be sent.\n• : The header will not be sent to origins without TLS (HTTPS).\n• : The sent referrer will be limited to the origin of the referring page: its scheme, host, and port.\n• : The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path.\n• : A referrer will be sent for same origin, but cross-origin requests will contain no referrer information.\n• : Only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don't send it to a less secure destination (HTTPS→HTTP).\n• (default): Send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP).\n• : The referrer will include the origin and the path (but not the fragment, password, or username). This value is unsafe, because it leaks origins and paths from TLS-protected resources to insecure origins. The relationship of the linked URL as space-separated link types. Where to display the linked URL, as the name for a browsing context (a tab, window, or ). The following keywords have special meanings for where to load the URL:\n• : Usually a new tab, but users can configure browsers to open a new window instead.\n• : The parent browsing context of the current one. If no parent, behaves as .\n• : The topmost browsing context. To be specific, this means the \"highest\" context that's an ancestor of the current one. If no ancestors, behaves as .\n• : Allows embedded fenced frames to navigate the top-level frame (i.e. traversing beyond the root of the fenced frame, unlike other reserved destinations). Note that the navigation will still succeed if this is used outside of a fenced frame context, but it will not act like a reserved keyword. Note: Setting on elements implicitly provides the same behavior as setting which does not set . Hints at the linked URL's format with a MIME type. No built-in functionality.\n\nThe content inside a link should indicate where the link goes, even out of context. A sadly common mistake is to only link the words \"click here\" or \"here\": <p>Learn more about our products <a href=\"/products\">here</a>.</p> Luckily, this is an easy fix, and it's actually shorter than the inaccessible version! Assistive software has shortcuts to list all links on a page. However, strong link text benefits all users — the \"list all links\" shortcut emulates how sighted users quickly scan pages.\n\nAnchor elements are often abused as fake buttons by setting their to or to prevent the page from refreshing, then listening for their events. These bogus values cause unexpected behavior when copying/dragging links, opening links in a new tab/window, bookmarking, or when JavaScript is loading, errors, or is disabled. They also convey incorrect semantics to assistive technologies, like screen readers. Use a instead. In general, you should only use a hyperlink for navigation to a real URL.\n\nA skip link is a link placed as early as possible in content that points to the beginning of the page's main content. Usually, CSS hides a skip link offscreen until focused. <body> <a href=\"#content\" class=\"skip-link\">Skip to main content</a> <header>…</header> <!-- The skip link jumps to here --> <main id=\"content\"></main> </body> Skip links let keyboard users bypass content repeated throughout multiple pages, such as header navigation. Skip links are especially useful for people who navigate with the aid of assistive technology such as switch control, voice command, or mouth sticks/head wands, where the act of moving through repetitive links can be laborious."
    },
    {
        "link": "https://w3.org/TR/html401/struct/links.html",
        "document": "HTML offers many of the conventional publishing idioms for rich text and structured documents, but what separates it from most other markup languages is its features for hypertext and interactive documents. This section introduces the link (or hyperlink, or Web link), the basic hypertext construct. A link is a connection from one Web resource to another. Although a simple concept, the link has been one of the primary forces driving the success of the Web.\n\nA has two ends -- called -- and a direction. The link starts at the \"source\" anchor and points to the \"destination\" anchor, which may be any Web resource (e.g., an image, a video clip, a sound bite, a program, an HTML document, an element within an HTML document, etc.).\n\nThe default behavior associated with a link is the retrieval of another Web resource. This behavior is commonly and implicitly obtained by selecting the link (e.g., by clicking, through keyboard input, etc.).\n\nBy activating these links (by clicking with the mouse, through keyboard input, voice commands, etc.), users may visit these resources. Note that the attribute in each source anchor specifies the address of the destination anchor with a URI.\n\nThe destination anchor of a link may be an element within an HTML document. The destination anchor must be given an anchor name and any URI addressing this anchor must include the name as its fragment identifier.\n\nDestination anchors in HTML documents may be specified either by the element (naming it with the attribute), or by any other element (naming with the attribute).\n\nBy far the most common use of a link is to retrieve another Web resource, as illustrated in the previous examples. However, authors may insert links in their documents that express other relationships between resources than simply \"activate this link to visit that related resource\". Links that express other types of relationships have one or more link types specified in their source anchor.\n\nThe roles of a link defined by or are specified via the and attributes.\n\nAlthough several HTML elements and attributes create links to other resources (e.g., the element, the element, etc.), this chapter discusses links and anchors created by the and elements. The element may only appear in the head of a document. The element may only appear in the body.\n\nWhen the element's attribute is set, the element defines a source anchor for a link that may be activated by the user to retrieve a Web resource. The source anchor is the location of the instance and the destination anchor is the Web resource.\n\nThe retrieved resource may be handled by the user agent in several ways: by opening a new HTML document in the same user agent window, opening a new HTML document in a different window, starting a new program to handle the resource, etc. Since the element has content (text, images, etc.), user agents may render this content in such a way as to indicate the presence of a link (e.g., by underlining the content).\n\nWhen the or attributes of the element are set, the element defines an anchor that may be the destination of other links.\n\nAuthors may set the and attributes simultaneously in the same instance.\n\nThe element defines a relationship between the current document and another resource. Although has no content, the relationships it defines may be rendered by some user agents.\n\nThe attribute may be set for both and to add information about the nature of a link. This information may be spoken by a user agent, rendered as a tool tip, cause a change in cursor image, etc.\n\nSince links may point to documents encoded with different character encodings, the and elements support the attribute. This attribute allows authors to advise user agents about the encoding of data at the other end of the link.\n\nThe attribute provides user agents with information about the language of a resource at the end of a link, just as the attribute provides information about the language of an element's content or attribute values.\n\nArmed with this additional knowledge, user agents should be able to avoid presenting \"garbage\" to the user. Instead, they may either locate resources necessary for the correct presentation of the document or, if they cannot locate the resources, they should at least warn the user that the document will be unreadable and explain the cause.\n• The element's content defines the position of the anchor.\n• The attribute names the anchor so that it may be the destination of zero or more links (see also anchors with ).\n• The attribute makes this anchor the source anchor of exactly one link.\n\nAuthors may also create an element that specifies no anchors, i.e., that doesn't specify , , or . Values for these attributes may be set at a later time through scripts.\n\nAn anchor name is the value of either the or attribute when used in the context of anchors. Anchor names must observe the following rules:\n• Anchor names must be unique within a document. Anchor names that differ only in case may not appear in the same document.\n• Comparisons between fragment identifiers and anchor names must be done by exact (case-sensitive) match.\n\nAnchor names should be restricted to ASCII characters. Please consult the appendix for more information about non-ASCII characters in URI attribute values.\n\nLinks and anchors defined by the element must not be nested; an element must not contain any other elements.\n\nSince the DTD defines the element to be empty, elements may not be nested either.\n\nThe attribute may be used to create an anchor at the start tag of any element (including the element).\n\nThe and attributes share the same name space. This means that they cannot both define an anchor with the same name in the same document. It is permissible to use both attributes to specify an element's unique identifier for the following elements: , , , , , , and . When both attributes are used on a single element, their values must be identical.\n\nBecause of its specification in the HTML DTD, the attribute may contain character references. Thus, the value is a valid attribute value, as is . The attribute, on the other hand, may not contain character references.\n\nA reference to an unavailable or unidentifiable resource is an error. Although user agents may vary in how they handle such an error, we recommend the following behavior:\n• If a user agent cannot locate a linked resource, it should alert the user.\n• If a user agent cannot identify the type of a linked resource, it should still attempt to process it. It should alert the user and may allow the user to intervene and identify the document type.\n\nThis element defines a link. Unlike , it may only appear in the section of a document, although it may appear any number of times. Although has no content, it conveys relationship information that may be rendered by user agents in a variety of ways (e.g., a tool-bar with a drop-down menu of links).\n\nThe and attributes play complementary roles -- the attribute specifies a forward link and the attribute specifies a reverse link.\n\nConsider two documents A and B.\n\nHas exactly the same meaning as:\n\nBoth attributes may be specified simultaneously.\n\nWhen the element links an external style sheet to a document, the attribute specifies the style sheet language and the attribute specifies the intended rendering medium or media. User agents may save time by retrieving from the network only those style sheets that apply to the current device.\n\nMedia types are further discussed in the section on style sheets.\n\nAuthors may use the element to provide a variety of information to search engines, including:\n• Links to alternate versions of a document, written in another human language.\n• Links to alternate versions of a document, designed for different media, for instance a version especially suited for printing.\n• Links to the starting page of a collection of documents.\n\nThe examples below illustrate how language information, media types, and link types may be combined to improve document handling by search engines.\n\nFurther information is given in the notes in the appendix on helping search engines index your Web site.\n\nIn HTML, links and references to external images, applets, form-processing programs, style sheets, etc. are always specified by a URI. Relative URIs are resolved according to a base URI, which may come from a variety of sources. The element allows authors to specify a document's base URI explicitly.\n\nWhen present, the element must appear in the section of an HTML document, before any element that refers to an external source. The path information specified by the element only affects URIs in the document where the element appears.\n\nUser agents must calculate the base URI for resolving relative URIs according to [RFC1808], section 3. The following describes how [RFC1808] applies specifically to HTML.\n\nUser agents must calculate the base URI according to the following precedences (highest priority to lowest):\n• The base URI is set by the element.\n• The base URI is given by meta data discovered during a protocol interaction, such as an HTTP header (see [RFC2616]).\n• By default, the base URI is that of the current document. Not all HTML documents have a base URI (e.g., a valid HTML document may appear in an email and may not be designated by a URI). Such HTML documents are considered erroneous if they contain relative URIs and rely on a default base URI.\n\nAdditionally, the and elements define attributes that take precedence over the value set by the element. Please consult the definitions of these elements for more information about URI issues specific to them."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element",
        "document": "This page lists all the HTML elements, which are created using tags. They are grouped by function to help you find what you have in mind easily. An alphabetical list of all elements is provided in the sidebar on every element's page as well as this one. Note: For more information about the basics of HTML elements and attributes, see Anatomy of an HTML element.\n\nUse HTML text content elements to organize blocks or sections of content placed between the opening and closing tags. Important for accessibility and SEO, these elements identify the purpose or structure of that content. Indicates that the enclosed text is an extended quotation. Usually, this is rendered visually by indentation. A URL for the source of the quotation may be given using the attribute, while a text representation of the source can be given using the element. Provides the description, definition, or value for the preceding term ( ) in a description list ( ). The generic container for flow content. It has no effect on the content or layout until styled in some way using CSS (e.g., styling is directly applied to it, or some kind of layout model like flexbox is applied to its parent element). Represents a description list. The element encloses a list of groups of terms (specified using the element) and descriptions (provided by elements). Common uses for this element are to implement a glossary or to display metadata (a list of key-value pairs). Specifies a term in a description or definition list, and as such must be used inside a element. It is usually followed by a element; however, multiple elements in a row indicate several terms that are all defined by the immediate next element. Represents a caption or legend describing the rest of the contents of its parent element. Represents self-contained content, potentially with an optional caption, which is specified using the element. The figure, its caption, and its contents are referenced as a single unit. Represents a thematic break between paragraph-level elements: for example, a change of scene in a story, or a shift of topic within a section. Represents an item in a list. It must be contained in a parent element: an ordered list ( ), an unordered list ( ), or a menu ( ). In menus and unordered lists, list items are usually displayed using bullet points. In ordered lists, they are usually displayed with an ascending counter on the left, such as a number or letter. A semantic alternative to , but treated by browsers (and exposed through the accessibility tree) as no different than . It represents an unordered list of items (which are represented by elements). Represents an ordered list of items — typically rendered as a numbered list. Represents a paragraph. Paragraphs are usually represented in visual media as blocks of text separated from adjacent blocks by blank lines and/or first-line indentation, but HTML paragraphs can be any structural grouping of related content, such as images or form fields. Represents preformatted text which is to be presented exactly as written in the HTML file. The text is typically rendered using a non-proportional, or monospaced, font. Whitespace inside this element is displayed as written. Represents an unordered list of items, typically rendered as a bulleted list.\n\nUse the HTML inline text semantic to define the meaning, structure, or style of a word, line, or any arbitrary piece of text. Together with its attribute, creates a hyperlink to web pages, files, email addresses, locations within the current page, or anything else a URL can address. Used to draw the reader's attention to the element's contents, which are not otherwise granted special importance. This was formerly known as the Boldface element, and most browsers still draw the text in boldface. However, you should not use for styling text or granting importance. If you wish to create boldface text, you should use the CSS property. If you wish to indicate an element is of special importance, you should use the element. Tells the browser's bidirectional algorithm to treat the text it contains in isolation from its surrounding text. It's particularly useful when a website dynamically inserts some text and doesn't know the directionality of the text being inserted. Overrides the current directionality of text, so that the text within is rendered in a different direction. Produces a line break in text (carriage-return). It is useful for writing a poem or an address, where the division of lines is significant. Used to mark up the title of a cited creative work. The reference may be in an abbreviated form according to context-appropriate conventions related to citation metadata. Displays its contents styled in a fashion intended to indicate that the text is a short fragment of computer code. By default, the content text is displayed using the user agent's default monospace font. Links a given piece of content with a machine-readable translation. If the content is time- or date-related, the element must be used. Used to indicate the term being defined within the context of a definition phrase or sentence. The ancestor element, the / pairing, or the nearest section ancestor of the element, is considered to be the definition of the term. Marks text that has stress emphasis. The element can be nested, with each nesting level indicating a greater degree of emphasis. Represents a range of text that is set off from the normal text for some reason, such as idiomatic text, technical terms, and taxonomical designations, among others. Historically, these have been presented using italicized type, which is the original source of the naming of this element. Represents a span of inline text denoting textual user input from a keyboard, voice input, or any other text entry device. By convention, the user agent defaults to rendering the contents of a element using its default monospace font, although this is not mandated by the HTML standard. Represents text which is marked or highlighted for reference or notation purposes due to the marked passage's relevance in the enclosing context. Indicates that the enclosed text is a short inline quotation. Most modern browsers implement this by surrounding the text in quotation marks. This element is intended for short quotations that don't require paragraph breaks; for long quotations use the element. Used to provide fall-back parentheses for browsers that do not support the display of ruby annotations using the element. One element should enclose each of the opening and closing parentheses that wrap the element that contains the annotation's text. Specifies the ruby text component of a ruby annotation, which is used to provide pronunciation, translation, or transliteration information for East Asian typography. The element must always be contained within a element. Represents small annotations that are rendered above, below, or next to base text, usually used for showing the pronunciation of East Asian characters. It can also be used for annotating other kinds of text, but this usage is less common. Renders text with a strikethrough, or a line through it. Use the element to represent things that are no longer relevant or no longer accurate. However, is not appropriate when indicating document edits; for that, use the and elements, as appropriate. Used to enclose inline text which represents sample (or quoted) output from a computer program. Its contents are typically rendered using the browser's default monospaced font (such as Courier or Lucida Console). Represents side-comments and small print, like copyright and legal text, independent of its styled presentation. By default, it renders text within it one font size smaller, such as from to . A generic inline container for phrasing content, which does not inherently represent anything. It can be used to group elements for styling purposes (using the or attributes), or because they share attribute values, such as . It should be used only when no other semantic element is appropriate. is very much like a div element, but div is a block-level element whereas a is an inline-level element. Indicates that its contents have strong importance, seriousness, or urgency. Browsers typically render the contents in bold type. Specifies inline text which should be displayed as subscript for solely typographical reasons. Subscripts are typically rendered with a lowered baseline using smaller text. Specifies inline text which is to be displayed as superscript for solely typographical reasons. Superscripts are usually rendered with a raised baseline using smaller text. Represents a specific period in time. It may include the attribute to translate dates into machine-readable format, allowing for better search engine results or custom features such as reminders. Represents a span of inline text which should be rendered in a way that indicates that it has a non-textual annotation. This is rendered by default as a single solid underline but may be altered using CSS. Represents the name of a variable in a mathematical expression or a programming context. It's typically presented using an italicized version of the current typeface, although that behavior is browser-dependent. Represents a word break opportunity—a position within text where the browser may optionally break a line, though its line-breaking rules would not otherwise create a break at that location.\n\nWarning: These are old HTML elements that are deprecated and should not be used. You should never use them in new projects, and you should replace them in old projects as soon as you can. They are listed here for completeness only. Allows authors to clearly indicate a sequence of characters that compose an acronym or abbreviation for a word. Renders the enclosed text at a font size one level larger than the surrounding text ( becomes , for example). The size is capped at the browser's maximum permitted font size. Displays its block-level or inline contents centered horizontally within its containing element. An obsolete part of the Web Components suite of technologies—was used inside of Shadow DOM as an insertion point, and wasn't meant to be used in ordinary HTML. It has now been replaced by the element, which creates a point in the DOM at which a shadow DOM can be inserted. Consider using instead. Container for a directory of files and/or folders, potentially with styles and icons applied by the user agent. Do not use this obsolete element; instead, you should use the element for lists, including lists of files. Defines the font size, color and face for its content. Defines a particular area in which another HTML document can be displayed. A frame should be used within a . Used to contain elements. An ancient and poorly supported precursor to the element. It should not be used. Used to insert a scrolling area of text. You can control what happens when the text reaches the edges of its content area using its attributes. Represents a command that a user is able to invoke through a popup menu. This includes context menus, as well as menus that might be attached to a menu button. Prevents the text it contains from automatically wrapping across multiple lines, potentially resulting in the user having to scroll horizontally to see the entire width of the text. An obsolete, non-standard way to provide alternative, or \"fallback\", content for browsers that do not support the embed element or do not support the type of embedded content an author wishes to use. This element was deprecated in HTML 4.01 and above in favor of placing fallback content between the opening and closing tags of an element. Provides content to be presented in browsers that don't support (or have disabled support for) the element. Although most commonly-used browsers support frames, there are exceptions, including certain special-use browsers including some mobile browsers, as well as text-mode browsers. Renders everything following the start tag as raw text, ignoring any following HTML. There is no closing tag, since everything after it is considered raw text. Used to delimit the base text component of a ruby annotation, i.e. the text that is being annotated. One element should wrap each separate atomic segment of the base text. Embraces semantic annotations of characters presented in a ruby of elements used inside of element. elements can have both pronunciation ( ) and semantic ( ) annotations. An obsolete part of the Web Components technology suite that was intended to be used as a shadow DOM insertion point. You might have used it if you have created multiple shadow roots under a shadow host. Consider using instead. Creates inline text which is presented using the user agent default monospace font face. This element was created for the purpose of rendering text as it would be displayed on a fixed-width display such as a teletype, text-only screen, or line printer. Renders text between the start and end tags without interpreting the HTML in between and using a monospaced font. The HTML2 specification recommended that it should be rendered wide enough to allow 80 characters per line."
    },
    {
        "link": "https://w3schools.com/html/html_links.asp",
        "document": "Links are found in nearly all web pages. Links allow users to click their way from page to page.\n\nYou can click on a link and jump to another document.\n\nWhen you move the mouse over a link, the mouse arrow will turn into a little hand.\n\nThe HTML tag defines a hyperlink. It has the following syntax:\n\nThe most important attribute of the element is the attribute, which indicates the link's destination.\n\nThe link text is the part that will be visible to the reader.\n\nClicking on the link text, will send the reader to the specified URL address.\n\nBy default, links will appear as follows in all browsers:\n• An unvisited link is underlined and blue\n• An active link is underlined and red\n\nBy default, the linked page will be displayed in the current browser window. To change this, you must specify another target for the link.\n\nThe attribute specifies where to open the linked document.\n\nThe attribute can have one of the following values:\n• - Default. Opens the document in the same window/tab as it was clicked\n• - Opens the document in a new window or tab\n• - Opens the document in the parent frame\n• - Opens the document in the full body of the window\n\nBoth examples above are using an absolute URL (a full web address) in the attribute.\n\nA local link (a link to a page within the same website) is specified with a relative URL (without the \"https://www\" part):\n\nHTML Links - Use an Image as a Link\n\nTo use an image as a link, just put the tag inside the tag:\n\nUse inside the attribute to create a link that opens the user's email program (to let them send a new email):\n\nTo use an HTML button as a link, you have to add some JavaScript code.\n\nJavaScript allows you to specify what happens at certain events, such as a click of a button:\n\nThe attribute specifies extra information about an element. The information is most often shown as a tooltip text when the mouse moves over the element.\n\nMore on Absolute URLs and Relative URLs\n• Use the element to define a link\n• Use the attribute to define the link address\n• Use the attribute to define where to open the linked document\n• Use the element (inside ) to use an image as a link\n• Use the scheme inside the attribute to create a link that opens the user's email program"
    },
    {
        "link": "https://html.spec.whatwg.org",
        "document": "\n• Introduction\n• Where does this specification fit?\n• Structure of this specification\n• How to read this specification\n• A quick introduction to HTML\n• Common pitfalls to avoid when using the scripting APIs\n• How to catch mistakes when writing HTML: validators and conformance checkers\n• Conformance requirements for authors\n• Restrictions on content models and on attribute values\n• Common infrastructure\n• Safe passing of structured data\n• Performing serialization and transferring from other specifications\n• Semantics, structure, and APIs of HTML documents\n• Elements\n• Requirements related to ARIA and to platform accessibility APIs\n• The elements of HTML\n• Document metadata\n• The element\n• Providing users with a means to follow hyperlinks created using the element\n• Embedded content\n• Images\n• Processing model\n• The list of available images\n• Requirements for providing text to act as an alternative for images\n• A link or button containing nothing but the image\n• A phrase or paragraph with an alternative graphical representation: charts, diagrams, graphs, maps, illustrations\n• A short phrase or label with an alternative graphical representation: icons, logos\n• Text that has been rendered to a graphic for typographical effect\n• A graphical representation of some of the surrounding text\n• A group of images that form a single larger picture with no links\n• A group of images that form a single larger picture with links\n• An image not intended for the user\n• An image in an email or private document intended for a specific person who is known to be able to view images\n• Media elements\n• Timed text tracks\n• Guidelines for exposing cues in various formats as text track cues\n• Event handlers for objects of the text track APIs\n• Best practices for authors using media elements\n• Best practices for implementers of media elements\n• Forms\n• Introduction\n• The difference between the field type, the autofill field name, and the input modality\n• Form submission\n• Converting an entry list to a list of name-value pairs\n• Interactive elements\n• Commands\n• Using the element to define a command\n• Using the element to define a command\n• Using the element to define a command\n• Using the element to define a command\n• Using the attribute on a element to define a command\n• Using the attribute to define a command on other elements\n• Scripting\n• The element\n• Interaction of elements with XSLT and XPath\n• Loading web pages\n• Document lifecycle\n• Loading a document for inline content that doesn't have a DOM\n• Web application APIs\n• Scripting\n• Event loops\n• Dealing with the event loop from other specifications\n• Communication\n• Channel messaging\n• Introduction\n• Ports as the basis of an object-capability model on the web\n• Ports as the basis of abstracting out service implementations\n• The HTML syntax\n• Writing HTML documents\n• Elements\n• Restrictions on the contents of raw text and escapable raw text elements\n• Parsing HTML documents\n• Tree construction\n• Parsing elements that contain only text\n• The rules for parsing tokens in HTML content\n• The \"in select in table\" insertion mode\n• The \"after after body\" insertion mode\n• The \"after after frameset\" insertion mode\n• The rules for parsing tokens in foreign content\n• Coercing an HTML DOM into an infoset\n• An introduction to error handling and strange cases in the parser\n• Scripts that modify the page as it is being parsed\n• The execution of scripts that are moving across multiple documents\n• Rendering\n• Widgets\n• The element as a color well\n• The element as a checkbox and radio button widgets\n\nWhere does this specification fit?\n\nThis specification defines a big part of the web platform, in lots of detail. Its place in the web platform specification stack relative to other specifications can be best summed up as follows:\n\nIn more length: the term \"HTML5\" is widely used as a buzzword to refer to modern web technologies, many of which (though by no means all) are developed at the WHATWG. This document is one such; others are available from the WHATWG Standards overview.\n\nHTML is the World Wide Web's core markup language. Originally, HTML was primarily designed as a language for semantically describing scientific documents. Its general design, however, has enabled it to be adapted, over the subsequent years, to describe a number of other types of documents and even applications.\n\nThis specification is intended for authors of documents and scripts that use the features defined in this specification, implementers of tools that operate on pages that use the features defined in this specification, and individuals wishing to establish the correctness of documents or implementations with respect to the requirements of this specification.\n\nThis document is probably not suited to readers who do not already have at least a passing familiarity with web technologies, as in places it sacrifices clarity for precision, and brevity for completeness. More approachable tutorials and authoring guides can provide a gentler introduction to the topic.\n\nIn particular, familiarity with the basics of DOM is necessary for a complete understanding of some of the more technical parts of this specification. An understanding of Web IDL, HTTP, XML, Unicode, character encodings, JavaScript, and CSS will also be helpful in places but is not essential.\n\nThis specification is limited to providing a semantic-level markup language and associated semantic-level scripting APIs for authoring accessible pages on the web ranging from static documents to dynamic applications.\n\nThe scope of this specification does not include providing mechanisms for media-specific customization of presentation (although default rendering rules for web browsers are included at the end of this specification, and several mechanisms for hooking into CSS are provided as part of the language).\n\nThe scope of this specification is not to describe an entire operating system. In particular, hardware configuration software, image manipulation tools, and applications that users would be expected to use with high-end workstations on a daily basis are out of scope. In terms of applications, this specification is targeted specifically at applications that would be expected to be used by users on an occasional basis, or regularly but from disparate locations, with low CPU requirements. Examples of such applications include online purchasing systems, searching systems, games (especially multiplayer online games), public telephone books or address books, communications software (email clients, instant messaging clients, discussion software), document editing software, etc.\n\nFor its first five years (1990-1995), HTML went through a number of revisions and experienced a number of extensions, primarily hosted first at CERN, and then at the IETF.\n\nWith the creation of the W3C, HTML's development changed venue again. A first abortive attempt at extending HTML in 1995 known as HTML 3.0 then made way to a more pragmatic approach known as HTML 3.2, which was completed in 1997. HTML4 quickly followed later that same year.\n\nThe following year, the W3C membership decided to stop evolving HTML and instead begin work on an XML-based equivalent, called XHTML. This effort started with a reformulation of HTML4 in XML, known as XHTML 1.0, which added no new features except the new serialization, and which was completed in 2000. After XHTML 1.0, the W3C's focus turned to making it easier for other working groups to extend XHTML, under the banner of XHTML Modularization. In parallel with this, the W3C also worked on a new language that was not compatible with the earlier HTML and XHTML languages, calling it XHTML2.\n\nAround the time that HTML's evolution was stopped in 1998, parts of the API for HTML developed by browser vendors were specified and published under the name DOM Level 1 (in 1998) and DOM Level 2 Core and DOM Level 2 HTML (starting in 2000 and culminating in 2003). These efforts then petered out, with some DOM Level 3 specifications published in 2004 but the working group being closed before all the Level 3 drafts were completed.\n\nIn 2003, the publication of XForms, a technology which was positioned as the next generation of web forms, sparked a renewed interest in evolving HTML itself, rather than finding replacements for it. This interest was borne from the realization that XML's deployment as a web technology was limited to entirely new technologies (like RSS and later Atom), rather than as a replacement for existing deployed technologies (like HTML).\n\nA proof of concept to show that it was possible to extend HTML4's forms to provide many of the features that XForms 1.0 introduced, without requiring browsers to implement rendering engines that were incompatible with existing HTML web pages, was the first result of this renewed interest. At this early stage, while the draft was already publicly available, and input was already being solicited from all sources, the specification was only under Opera Software's copyright.\n\nThe idea that HTML's evolution should be reopened was tested at a W3C workshop in 2004, where some of the principles that underlie the HTML5 work (described below), as well as the aforementioned early draft proposal covering just forms-related features, were presented to the W3C jointly by Mozilla and Opera. The proposal was rejected on the grounds that the proposal conflicted with the previously chosen direction for the web's evolution; the W3C staff and membership voted to continue developing XML-based replacements instead.\n\nShortly thereafter, Apple, Mozilla, and Opera jointly announced their intent to continue working on the effort under the umbrella of a new venue called the WHATWG. A public mailing list was created, and the draft was moved to the WHATWG site. The copyright was subsequently amended to be jointly owned by all three vendors, and to allow reuse of the specification.\n\nThe WHATWG was based on several core principles, in particular that technologies need to be backwards compatible, that specifications and implementations need to match even if this means changing the specification rather than the implementations, and that specifications need to be detailed enough that implementations can achieve complete interoperability without reverse-engineering each other.\n\nThe latter requirement in particular required that the scope of the HTML5 specification include what had previously been specified in three separate documents: HTML4, XHTML1, and DOM2 HTML. It also meant including significantly more detail than had previously been considered the norm.\n\nIn 2006, the W3C indicated an interest to participate in the development of HTML5 after all, and in 2007 formed a working group chartered to work with the WHATWG on the development of the HTML5 specification. Apple, Mozilla, and Opera allowed the W3C to publish the specification under the W3C copyright, while keeping a version with the less restrictive license on the WHATWG site.\n\nFor a number of years, both groups then worked together. In 2011, however, the groups came to the conclusion that they had different goals: the W3C wanted to publish a \"finished\" version of \"HTML5\", while the WHATWG wanted to continue working on a Living Standard for HTML, continuously maintaining the specification rather than freezing it in a state with known problems, and adding new features as needed to evolve the platform.\n\nIn 2019, the WHATWG and W3C signed an agreement to collaborate on a single version of HTML going forward: this document.\n\nIt must be admitted that many aspects of HTML appear at first glance to be nonsensical and inconsistent.\n\nHTML, its supporting DOM APIs, as well as many of its supporting technologies, have been developed over a period of several decades by a wide array of people with different priorities who, in many cases, did not know of each other's existence.\n\nFeatures have thus arisen from many sources, and have not always been designed in especially consistent ways. Furthermore, because of the unique characteristics of the web, implementation bugs have often become de-facto, and now de-jure, standards, as content is often unintentionally written in ways that rely on them before they can be fixed.\n\nDespite all this, efforts have been made to adhere to certain design goals. These are described in the next few subsections.\n\nTo avoid exposing web authors to the complexities of multithreading, the HTML and DOM APIs are designed such that no script can ever detect the simultaneous execution of other scripts. Even with workers, the intent is that the behavior of implementations can be thought of as completely serializing the execution of all scripts in all globals.\n\nThe exception to this general design principle is the JavaScript class. Using objects, it can in fact be observed that scripts in other agents are executing simultaneously. Furthermore, due to the JavaScript memory model, there are situations which not only are un-representable via serialized script execution, but also un-representable via serialized statement execution among those scripts.\n\nHTML has a wide array of extensibility mechanisms that can be used for adding semantics in a safe manner:\n• None Authors can use the attribute to extend elements, effectively creating their own elements, while using the most applicable existing \"real\" HTML element, so that browsers and other tools that don't know of the extension can still support it somewhat well. This is the tack used by microformats, for example.\n• None Authors can include data for inline client-side scripts or server-side site-wide scripts to process using the attributes. These are guaranteed to never be touched by browsers, and allow scripts to include data on HTML elements that scripts can then look for and process.\n• None Authors can use the mechanism to include page-wide metadata.\n• None Authors can use the mechanism to annotate links with specific meanings by registering extensions to the predefined set of link types. This is also used by microformats.\n• None Authors can embed raw data using the mechanism with a custom type, for further handling by inline or server-side scripts.\n• None Authors can extend APIs using the JavaScript prototyping mechanism. This is widely used by script libraries, for instance.\n• None Authors can use the microdata feature (the and attributes) to embed nested name-value pairs of data to be shared with other applications and sites.\n• None Authors can define, share, and use custom elements to extend the vocabulary of HTML. The requirements of valid custom element names ensure forward compatibility (since no elements will be added to HTML, SVG, or MathML with hyphen-containing local names in the future).\n\nThis specification defines an abstract language for describing documents and applications, and some APIs for interacting with in-memory representations of resources that use this language.\n\nThe in-memory representation is known as \"DOM HTML\", or \"the DOM\" for short.\n\nThere are various concrete syntaxes that can be used to transmit resources that use this abstract language, two of which are defined in this specification.\n\nThe first such concrete syntax is the HTML syntax. This is the format suggested for most authors. It is compatible with most legacy web browsers. If a document is transmitted with the MIME type, then it will be processed as an HTML document by web browsers. This specification defines the latest HTML syntax, known simply as \"HTML\".\n\nThe second concrete syntax is XML. When a document is transmitted with an XML MIME type, such as , then it is treated as an XML document by web browsers, to be parsed by an XML processor. Authors are reminded that the processing for XML and HTML differs; in particular, even minor syntax errors will prevent a document labeled as XML from being rendered fully, whereas they would be ignored in the HTML syntax.\n\nThe XML syntax for HTML was formerly referred to as \"XHTML\", but this specification does not use that term (among other reasons, because no such term is used for the HTML syntaxes of MathML and SVG).\n\nThe DOM, the HTML syntax, and the XML syntax cannot all represent the same content. For example, namespaces cannot be represented using the HTML syntax, but they are supported in the DOM and in the XML syntax. Similarly, documents that use the feature can be represented using the HTML syntax, but cannot be represented with the DOM or in the XML syntax. Comments that contain the string \" \" can only be represented in the DOM, not in the HTML and XML syntaxes.\n\nThis specification is divided into the following major sections:\n\nThere are also some appendices, listing obsolete features and IANA considerations, and several indices.\n\nHow to read this specification\n\nThis specification should be read like all other specifications. First, it should be read cover-to-cover, multiple times. Then, it should be read backwards at least once. Then it should be read by picking random sections from the contents list and following all the cross-references.\n\nAs described in the conformance requirements section below, this specification describes conformance criteria for a variety of conformance classes. In particular, there are conformance requirements that apply to producers, for example authors and the documents they create, and there are conformance requirements that apply to consumers, for example web browsers. They can be distinguished by what they are requiring: a requirement on a producer states what is allowed, while a requirement on a consumer states how software is to act.\n\nRequirements on producers have no bearing whatsoever on consumers.\n\nThis is a definition, requirement, or explanation.\n\nThis is an example.\n\nThis is an open issue.\n\nThe defining instance of a term is marked up like . Uses of that term are marked up like this or like this.\n\nThe defining instance of an element, attribute, or API is marked up like . References to that element, attribute, or API are marked up like .\n\nOther code fragments are marked up .\n\nVariables are marked up like .\n\nIn an algorithm, steps in synchronous sections are marked with ⌛.\n\nIn some cases, requirements are given in the form of lists with conditions and corresponding requirements. In such cases, the requirements that apply to a condition are always the first set of requirements that follow the condition, even in the case of there being multiple sets of conditions for those requirements. Such cases are presented as follows:\n\nA basic HTML document looks like this:\n\nHTML documents consist of a tree of elements and text. Each element is denoted in the source by a start tag, such as \" \", and an end tag, such as \" \". (Certain start tags and end tags can in certain cases be omitted and are implied by other tags.)\n\nTags have to be nested such that elements are all completely within each other, without overlapping:\n\nThis specification defines a set of elements that can be used in HTML, along with rules about the ways in which the elements can be nested.\n\nElements can have attributes, which control how the elements work. In the example below, there is a hyperlink, formed using the element and its attribute:\n\nAttributes are placed inside the start tag, and consist of a name and a value, separated by an \" \" character. The attribute value can remain unquoted if it doesn't contain ASCII whitespace or any of or . Otherwise, it has to be quoted using either single or double quotes. The value, along with the \" \" character, can be omitted altogether if the value is the empty string.\n\nHTML user agents (e.g., web browsers) then parse this markup, turning it into a DOM (Document Object Model) tree. A DOM tree is an in-memory representation of a document.\n\nDOM trees contain several kinds of nodes, in particular a node, nodes, nodes, nodes, and in some cases nodes.\n\nThe markup snippet at the top of this section would be turned into the following DOM tree:\n\nThe document element of this tree is the element, which is the element always found in that position in HTML documents. It contains two elements, and , as well as a node between them.\n\nThere are many more nodes in the DOM tree than one would initially expect, because the source contains a number of spaces (represented here by \"␣\") and line breaks (\"⏎\") that all end up as nodes in the DOM. However, for historical reasons not all of the spaces and line breaks in the original markup appear in the DOM. In particular, all the whitespace before start tag ends up being dropped silently, and all the whitespace after the end tag ends up placed at the end of the .\n\nThe element contains a element, which itself contains a node with the text \"Sample page\". Similarly, the element contains an element, a element, and a comment.\n\nThis DOM tree can be manipulated from scripts in the page. Scripts (typically in JavaScript) are small programs that can be embedded using the element or using event handler content attributes. For example, here is a form with a script that sets the value of the form's element to say \"Hello World\":\n\nEach element in the DOM tree is represented by an object, and these objects have APIs so that they can be manipulated. For instance, a link (e.g. the element in the tree above) can have its \" \" attribute changed in several ways:\n\nSince DOM trees are used as the way to represent HTML documents when they are processed and presented by implementations (especially interactive implementations like web browsers), this specification is mostly phrased in terms of DOM trees, instead of the markup described above.\n\nHTML documents represent a media-independent description of interactive content. HTML documents might be rendered to a screen, or through a speech synthesizer, or on a braille display. To influence exactly how such rendering takes place, authors can use a styling language such as CSS.\n\nIn the following example, the page has been made yellow-on-blue using CSS.\n\nFor more details on how to use HTML, authors are encouraged to consult tutorials and guides. Some of the examples included in this specification might also be of use, but the novice author is cautioned that this specification, by necessity, defines the language with a level of detail that might be difficult to understand at first.\n\nWhen HTML is used to create interactive sites, care needs to be taken to avoid introducing vulnerabilities through which attackers can compromise the integrity of the site itself or of the site's users.\n\nA comprehensive study of this matter is beyond the scope of this document, and authors are strongly encouraged to study the matter in more detail. However, this section attempts to provide a quick introduction to some common pitfalls in HTML application development.\n\nThe security model of the web is based on the concept of \"origins\", and correspondingly many of the potential attacks on the web involve cross-origin actions. [ORIGIN]\n\nCommon pitfalls to avoid when using the scripting APIs\n\nScripts in HTML have \"run-to-completion\" semantics, meaning that the browser will generally run the script uninterrupted before doing anything else, such as firing further events or continuing to parse the document.\n\nOn the other hand, parsing of HTML files happens incrementally, meaning that the parser can pause at any point to let scripts run. This is generally a good thing, but it does mean that authors need to be careful to avoid hooking event handlers after the events could have possibly fired.\n\nThere are two techniques for doing this reliably: use event handler content attributes, or create the element and add the event handlers in the same script. The latter is safe because, as mentioned earlier, scripts are run to completion before further events can fire.\n\nHow to catch mistakes when writing HTML: validators and conformance checkers\n\nAuthors are encouraged to make use of conformance checkers (also known as validators) to catch common mistakes. The WHATWG maintains a list of such tools at: https://whatwg.org/validator/\n\nUnlike previous versions of the HTML specification, this specification defines in some detail the required processing for invalid documents as well as valid documents.\n\nHowever, even though the processing of invalid content is in most cases well-defined, conformance requirements for documents are still important: in practice, interoperability (the situation in which all implementations process particular content in a reliable and identical or equivalent way) is not the only goal of document conformance requirements. This section details some of the more common reasons for still distinguishing between a conforming document and one with errors.\n\nThe majority of presentational features from previous versions of HTML are no longer allowed. Presentational markup in general has been found to have a number of problems:\n\nFor those reasons, presentational markup has been removed from HTML in this version. This change should not come as a surprise; HTML4 deprecated presentational markup many years ago and provided a mode (HTML4 Transitional) to help authors move away from presentational markup; later, XHTML 1.1 went further and obsoleted those features altogether.\n\nThe only remaining presentational markup features in HTML are the attribute and the element. Use of the attribute is somewhat discouraged in production environments, but it can be useful for rapid prototyping (where its rules can be directly moved into a separate style sheet later) and for providing specific styles in unusual cases where a separate style sheet would be inconvenient. Similarly, the element can be useful in syndication or for page-specific styles, but in general an external style sheet is likely to be more convenient when the styles apply to multiple pages.\n\nIt is also worth noting that some elements that were previously presentational have been redefined in this specification to be media-independent: , , , , , and .\n\nThe syntax of HTML is constrained to avoid a wide variety of problems.\n\nSome authors find it helpful to be in the practice of always quoting all attributes and always including all optional tags, preferring the consistency derived from such custom over the minor benefits of terseness afforded by making use of the flexibility of the HTML syntax. To aid such authors, conformance checkers can provide modes of operation wherein such conventions are enforced.\n\nRestrictions on content models and on attribute values\n\nBeyond the syntax of the language, this specification also places restrictions on how elements and attributes can be specified. These restrictions are present for similar reasons:\n\nThe following documents might be of interest to readers of this specification.\n\nThis specification refers to both HTML and XML attributes and IDL attributes, often in the same context. When it is not clear which is being referred to, they are referred to as for HTML and XML attributes, and for those defined on IDL interfaces. Similarly, the term \"properties\" is used for both JavaScript object properties and CSS properties. When these are ambiguous they are qualified as and respectively.\n\nGenerally, when the specification states that a feature applies to the HTML syntax or the XML syntax, it also includes the other. When a feature specifically only applies to one of the two languages, it is called out by explicitly stating that it does not apply to the other format, as in \"for HTML, ... (this does not apply to XML)\".\n\nThis specification uses the term to refer to any use of HTML, ranging from short static documents to long essays or reports with rich multimedia, as well as to fully-fledged interactive applications. The term is used to refer both to objects and their descendant DOM trees, and to serialized byte streams using the HTML syntax or the XML syntax, depending on context.\n\nIn the context of the DOM structures, the terms HTML document and XML document are used as defined in , and refer specifically to two different modes that objects can find themselves in. [DOM] (Such uses are always hyperlinked to their definition.)\n\nIn the context of byte streams, the term HTML document refers to resources labeled as , and the term XML document refers to resources labeled with an XML MIME type.\n\nFor simplicity, terms such as , , and might sometimes be used when referring to the way a document is rendered to the user. These terms are not meant to imply a visual medium; they must be considered to apply to other media in equivalent ways.\n\nTo run steps means those steps are to be run, one after another, at the same time as other logic in the standard (e.g., at the same time as the event loop). This standard does not define the precise mechanism by which this is achieved, be it time-sharing cooperative multitasking, fibers, threads, processes, using different hyperthreads, cores, CPUs, machines, etc. By contrast, an operation that is to run must interrupt the currently running task, run itself, and then resume the previously running task.\n\nFor guidance on writing specifications that leverage parallelism, see Dealing with the event loop from other specifications.\n\nTo avoid race conditions between different in parallel algorithms that operate on the same data, a parallel queue can be used.\n\nA represents a queue of algorithm steps that must be run in series.\n\nTo to a parallel queue, enqueue the algorithm steps to the parallel queue's algorithm queue.\n\nTo , run the following steps:\n• None Let be a new parallel queue.\n• Run the following steps in parallel:\n• \n• None Let be the result of dequeueing from 's algorithm queue.\n• None If is not nothing, then run .\n• None Assert: running did not throw an exception, as steps running in parallel are not allowed to throw. Implementations are not expected to implement this as a continuously running loop. Algorithms in standards are to be easy to understand and are not necessarily great for battery life or performance.\n\nSteps running in parallel can themselves run other steps in in parallel. E.g., inside a parallel queue it can be useful to run a series of steps in parallel with the queue.\n\nThe specification uses the term when referring to whether a user agent has an implementation capable of decoding the semantics of an external resource. A format or type is said to be supported if the implementation can process an external resource of that format or type without critical aspects of the resource being ignored. Whether a specific resource is supported can depend on what features of the resource's format are in use.\n\nFor example, a PNG image would be considered to be in a supported format if its pixel data could be decoded and rendered, even if, unbeknownst to the implementation, the image also contained animation data.\n\nAn MPEG-4 video file would not be considered to be in a supported format if the compression format used was not supported, even if the implementation could determine the dimensions of the movie from the file's metadata.\n\nWhat some specifications, in particular the HTTP specifications, refer to as a representation is referred to in this specification as a . [HTTP]\n\nA resource's are those that the resource needs to have available to be correctly processed. Which resources are considered critical or not is defined by the specification that defines the resource's format.\n\nFor CSS style sheets, we tentatively define here that their critical subresources are other style sheets imported via rules, including those indirectly imported by other imported style sheets.\n\nThis definition is not fully interoperable; furthermore, some user agents seem to count resources like background images or web fonts as critical subresources. Ideally, the CSS Working Group would define this; see w3c/csswg-drafts issue #1088 to track progress on that front.\n\nTo ease migration from HTML to XML, user agents conforming to this specification will place elements in HTML in the namespace, at least for the purposes of the DOM and CSS. The term \" \" refers to any element in that namespace, even in XML documents.\n\nExcept where otherwise stated, all elements defined or mentioned in this specification are in the HTML namespace (\" \"), and all attributes defined or mentioned in this specification have no namespace.\n\nThe term is used to refer to the set of elements that have a given local name and namespace. For example, elements are elements with the element type , meaning they have the local name \" \" and (implicitly as defined above) the HTML namespace.\n\nAttribute names are said to be if they match the production defined in XML and they contain no U+003A COLON characters (:). [XML]\n\nWhen it is stated that some element or attribute is , or treated as some other value, or handled as if it was something else, this refers only to the processing of the node after it is in the DOM. A user agent must not mutate the DOM in such situations.\n\nA content attribute is said to value only if its new value is different than its previous value; setting an attribute to a value it already has does not change it.\n\nThe term , when used for an attribute value, node, or string, means that the length of the text is zero (i.e., not even containing controls or U+0020 SPACE).\n\nAn HTML element can have specific , , , and all defined for the element's local name.\n\nThe insertion steps for the HTML Standard, given , are defined as the following:\n• None If is an element whose namespace is the HTML namespace, and this standard defines HTML element insertion steps for 's local name, then run the corresponding HTML element insertion steps given .\n• If is a form-associated element or the ancestor of a form-associated element, then:\n• None If the form-associated element's parser inserted flag is set, then return.\n• None Reset the form owner of the form-associated element.\n• None If is an that is not on the stack of open elements of an HTML parser, then process internal resource links given 's node document.\n\nThe post-connection steps for the HTML Standard, given , are defined as the following:\n• None If is an element whose namespace is the HTML namespace, and this standard defines HTML element post-connection steps for 's local name, then run the corresponding HTML element post-connection steps given .\n\nThe removing steps for the HTML Standard, given and , are defined as the following:\n• If 's focused area is , then set 's focused area to 's viewport, and set 's relevant global object's navigation API's focus changed during ongoing navigation to false. This does not perform the unfocusing steps, focusing steps, or , and thus no or events are fired.\n• None If is an element whose namespace is the HTML namespace, and this standard defines HTML element removing steps for 's local name, then run the corresponding HTML element removing steps given and .\n• If is a form-associated element or the ancestor of a form-associated element, then:\n• None If the form-associated element has a form owner and the form-associated element and its form owner are no longer in the same tree, then reset the form owner of the form-associated element.\n• None If 's attribute is not in the no popover state, then run the hide popover algorithm given , false, false, and false.\n\nThe moving steps for the HTML Standard, given , are defined as the following:\n• None If is an element whose namespace is the HTML namespace, and this standard defines HTML element moving steps for 's local name, then run the corresponding HTML element moving steps given .\n• If is a form-associated element or the ancestor of a form-associated element, then:\n• None If the form-associated element has a form owner and the form-associated element and its form owner are no longer in the same tree, then reset the form owner of the form-associated element.\n\nA when the insertion steps are invoked with it as the argument and it is now in a document tree. Analogously, a when the removing steps are invoked with it as the argument and it is now no longer in a document tree.\n\nA node when the insertion steps are invoked with it as the argument and it is now connected. Analogously, a node when the removing steps are invoked with it as the argument and it is now no longer connected.\n\nA node is when it is connected and its shadow-including root's browsing context is non-null. A node when the insertion steps are invoked with it as the argument and it is now browsing-context connected. A node either when the removing steps are invoked with it as the argument and it is now no longer browsing-context connected, or when its shadow-including root's browsing context becomes null.\n\nThe construction \"a object\", where is actually an interface, is sometimes used instead of the more accurate \"an object implementing the interface \".\n\nAn IDL attribute is said to be when its value is being retrieved (e.g. by author script), and is said to be when a new value is assigned to it.\n\nIf a DOM object is said to be , then the attributes and methods on that object must operate on the actual underlying data, not a snapshot of the data.\n\nThe term refers to an implementation-defined set of content handlers used by the user agent that can take part in the user agent's rendering of a object, but that neither act as child navigables of the nor introduce any objects to the 's DOM.\n\nTypically such content handlers are provided by third parties, though a user agent can also designate built-in content handlers as plugins.\n\nA user agent must not consider the types and as having a registered plugin.\n\nOne example of a plugin would be a PDF viewer that is instantiated in a navigable when the user navigates to a PDF file. This would count as a plugin regardless of whether the party that implemented the PDF viewer component was the same as that which implemented the user agent itself. However, a PDF viewer application that launches separate from the user agent (as opposed to using the same interface) is not a plugin by this definition.\n\nThis specification does not define a mechanism for interacting with plugins, as it is expected to be user-agent- and platform-specific. Some UAs might opt to support a plugin mechanism such as the Netscape Plugin API; others might use remote content converters or have built-in support for certain types. Indeed, this specification doesn't require user agents to support plugins at all. [NPAPI]\n\nBrowsers should take extreme care when interacting with external content intended for plugins. When third-party software is run with the same privileges as the user agent itself, vulnerabilities in the third-party software become as dangerous as those in the user agent.\n\nSince different users having different sets of plugins provides a tracking vector that increases the chances of users being uniquely identified, user agents are encouraged to support the exact same set of plugins for each user.\n\nA , or just encoding where that is not ambiguous, is a defined way to convert between byte streams and Unicode strings, as defined in . An encoding has an and one or more , referred to as the encoding's name and labels in the Encoding standard. [ENCODING]\n\nThis specification describes the conformance criteria for user agents (relevant to implementers) and documents (relevant to authors and authoring tool implementers).\n\nare those that comply with all the conformance criteria for documents. For readability, some of these conformance requirements are phrased as conformance requirements on authors; such requirements are implicitly requirements on documents: by definition, all documents are assumed to have had an author. (In some cases, that author may itself be a user agent — such user agents are subject to additional rules, as explained below.)\n\nFor example, if a requirement states that \"authors must not use the element\", it would imply that documents are not allowed to contain elements named .\n\nThere is no implied relationship between document conformance requirements and implementation conformance requirements. User agents are not free to handle non-conformant documents as they please; the processing model described in this specification applies to implementations regardless of the conformity of the input documents.\n\nUser agents fall into several (overlapping) categories with different conformance requirements.\n\nFor compatibility with existing content and prior specifications, this specification describes two authoring formats: one based on XML, and one using a custom format inspired by SGML (referred to as the HTML syntax). Implementations must support at least one of these two formats, although supporting both is encouraged.\n\nSome conformance requirements are phrased as requirements on elements, attributes, methods or objects. Such requirements fall into two categories: those describing content model restrictions, and those describing implementation behavior. Those in the former category are requirements on documents and authoring tools. Those in the second category are requirements on user agents. Similarly, some conformance requirements are phrased as requirements on authors; such requirements are to be interpreted as conformance requirements on the documents that authors produce. (In other words, this specification does not distinguish between conformance criteria on authors and conformance criteria on documents.)\n\nVendor-specific proprietary user agent extensions to this specification are strongly discouraged. Documents must not use such extensions, as doing so reduces interoperability and fragments the user base, allowing only users of specific user agents to access the content in question.\n\nAll extensions must be defined so that the use of extensions neither contradicts nor causes the non-conformance of functionality defined in the specification.\n\nWhen vendor-neutral extensions to this specification are needed, either this specification can be updated accordingly, or an extension specification can be written that overrides the requirements in this specification. When someone applying this specification to their activities decides that they will recognize the requirements of such an extension specification, it becomes an for the purposes of conformance requirements in this specification.\n\nSomeone could write a specification that defines any arbitrary byte stream as conforming, and then claim that their random junk is conforming. However, that does not mean that their random junk actually is conforming for everyone's purposes: if someone else decides that that specification does not apply to their work, then they can quite legitimately say that the aforementioned random junk is just that, junk, and not conforming at all. As far as conformance goes, what matters in a particular community is what that community agrees is applicable.\n\nUser agents must treat elements and attributes that they do not understand as semantically neutral; leaving them in the DOM (for DOM processors), and styling them according to CSS (for CSS processors), but not inferring any meaning from them.\n\nWhen support for a feature is disabled (e.g. as an emergency measure to mitigate a security problem, or to aid in development, or for performance reasons), user agents must act as if they had no support for the feature whatsoever, and as if the feature was not mentioned in this specification. For example, if a particular feature is accessed via an attribute in a Web IDL interface, the attribute itself would be omitted from the objects that implement that interface — leaving the attribute on the object but making it return null or throw an exception is insufficient.\n\nImplementations of XPath 1.0 that operate on HTML documents parsed or created in the manners described in this specification (e.g. as part of the API) must act as if the following edit was applied to the XPath 1.0 specification.\n\nThen, insert in its place the following:\n\nThis change is a willful violation of the XPath 1.0 specification, motivated by desire to have implementations be compatible with legacy content while still supporting the changes that this specification introduces to HTML regarding which namespace is used for HTML elements. [XPATH10]\n\nXSLT 1.0 processors outputting to a DOM when the output method is \"html\" (either explicitly or via the defaulting rule in XSLT 1.0) are affected as follows:\n\nIf the transformation program outputs an element in no namespace, the processor must, prior to constructing the corresponding DOM element node, change the namespace of the element to the HTML namespace, ASCII-lowercase the element's local name, and ASCII-lowercase the names of any non-namespaced attributes on the element.\n\nThis requirement is a willful violation of the XSLT 1.0 specification, required because this specification changes the namespaces and case-sensitivity rules of HTML in a manner that would otherwise be incompatible with DOM-based XSLT transformations. (Processors that serialize the output are unaffected.) [XSLT10]\n\nThis specification does not specify precisely how XSLT processing interacts with the HTML parser infrastructure (for example, whether an XSLT processor acts as if it puts any elements into a stack of open elements). However, XSLT processors must stop parsing if they successfully complete, and must first to \" \" and then to \" \" if they are aborted.\n\nThis specification does not specify how XSLT interacts with the navigation algorithm, how it fits in with the event loop, nor how error pages are to be handled (e.g. whether XSLT errors are to replace an incremental XSLT output, or are rendered inline, etc.).\n\nThere are also additional non-normative comments regarding the interaction of XSLT and HTML in the element section, and of XSLT, XPath, and HTML in the element section.\n\nThis document defines the following policy-controlled features:\n• \" \", which has a default allowlist of .\n• \" \", which has a default allowlist of .\n• \" \", which has a default allowlist of .\n\nThere are various places in HTML that accept particular data types, such as dates or numbers. This section describes what the conformance criteria for content in those formats is, and how to parse them.\n\nImplementers are strongly urged to carefully examine any third-party libraries they might consider using to implement the parsing of syntaxes described below. For example, date libraries are likely to implement error handling behavior that differs from what is required in this specification, since error-handling behavior is often not defined in specifications that describe date syntaxes similar to those used in this specification, and thus implementations tend to vary greatly in how they handle errors.\n\nSome of the micro-parsers described below follow the pattern of having an variable that holds the string being parsed, and having a variable pointing at the next character to parse in .\n\nA number of attributes are . The presence of a boolean attribute on an element represents the true value, and the absence of the attribute represents the false value.\n\nIf the attribute is present, its value must either be the empty string or a value that is an ASCII case-insensitive match for the attribute's canonical name, with no leading or trailing whitespace.\n\nThe values \"true\" and \"false\" are not allowed on boolean attributes. To represent a false value, the attribute has to be omitted altogether.\n\nSome attributes, called , take on a finite set of states. The state for such an attribute is derived by combining the attribute's value, a set of keyword/state mappings given in the specification of each attribute, and two possible special states that can also be given in the specification of the attribute. These special states are the and the .\n\nMultiple keywords can map to the same state.\n\nThe empty string can be a valid keyword. Note that the missing value default applies only when the attribute is missing, not when it is present with an empty string value.\n\nTo determine the state of an attribute, use the following steps:\n• If the attribute is not specified:\n• None If the attribute has a missing value default state defined, then return that missing value default state.\n• None If the attribute's value is an ASCII case-insensitive match for one of the keywords defined for the attribute, then return the state represented by that keyword.\n• None If the attribute has an invalid value default state defined, then return that invalid value default state.\n\nFor authoring conformance purposes, if an enumerated attribute is specified, the attribute's value must be an ASCII case-insensitive match for one of the conforming keywords for that attribute, with no leading or trailing whitespace.\n\nFor reflection purposes, states which have any keywords mapping to them are said to have a . This is determined as follows:\n• None If there is only one keyword mapping to the given state, then it is that keyword.\n• None If there is only one conforming keyword mapping to the given state, then it is that conforming keyword.\n• None Otherwise, the canonical keyword for the state will be explicitly given in the specification for the attribute.\n\nA string is a if it consists of one or more ASCII digits, optionally prefixed with a U+002D HYPHEN-MINUS character (-).\n\nA valid integer without a U+002D HYPHEN-MINUS (-) prefix represents the number that is represented in base ten by that string of digits. A valid integer with a U+002D HYPHEN-MINUS (-) prefix represents the number represented in base ten by the string of digits that follows the U+002D HYPHEN-MINUS, subtracted from zero.\n\nThe are as given in the following algorithm. When invoked, the steps must be followed in the order given, aborting at the first step that returns a value. This algorithm will return either an integer or an error.\n• None Let be the string being parsed.\n• None Let be a pointer into , initially pointing at the start of the string.\n• None Let have the value \"positive\".\n• None If is past the end of , return an error.\n• If the character indicated by (the first character) is a U+002D HYPHEN-MINUS character (-):\n• Advance to the next character.\n• If is past the end of , return an error. Otherwise, if the character indicated by (the first character) is a U+002B PLUS SIGN character (+):\n• Advance to the next character. (The \" \" is ignored, but it is not conforming.)\n• If is past the end of , return an error.\n• None If the character indicated by is not an ASCII digit, then return an error.\n• None Collect a sequence of code points that are ASCII digits from given , and interpret the resulting sequence as a base-ten integer. Let be that integer.\n• None If is \"positive\", return , otherwise return the result of subtracting from zero.\n\nA string is a if it consists of one or more ASCII digits.\n\nA valid non-negative integer represents the number that is represented in base ten by that string of digits.\n\nThe are as given in the following algorithm. When invoked, the steps must be followed in the order given, aborting at the first step that returns a value. This algorithm will return either zero, a positive integer, or an error.\n• None Let be the string being parsed.\n• None Let be the result of parsing using the rules for parsing integers.\n• None If is an error, return an error.\n• None If is less than zero, return an error.\n\nA string is a if it consists of:\n• One or both of the following, in the given order:\n• None A series of one or more ASCII digits.\n• Both of the following, in the given order:\n• None A series of one or more ASCII digits.\n• \n• None A series of one or more ASCII digits.\n\nA valid floating-point number represents the number obtained by multiplying the significand by ten raised to the power of the exponent, where the significand is the first number, interpreted as base ten (including the decimal point and the number after the decimal point, if any, and interpreting the significand as a negative number if the whole string starts with a U+002D HYPHEN-MINUS character (-) and the number is not zero), and where the exponent is the number after the E, if any (interpreted as a negative number if there is a U+002D HYPHEN-MINUS character (-) between the E and the number and the number is not zero, or else ignoring a U+002B PLUS SIGN character (+) between the E and the number if there is one). If there is no E, then the exponent is treated as zero.\n\nThe Infinity and Not-a-Number (NaN) values are not valid floating-point numbers.\n\nThe valid floating-point number concept is typically only used to restrict what is allowed for authors, while the user agent requirements use the rules for parsing floating-point number values below (e.g., the attribute of the element). However, in some cases the user agent requirements include checking if a string is a valid floating-point number (e.g., the value sanitization algorithm for the Number state of the element, or the parse a srcset attribute algorithm).\n\nThe best representation of the number as a floating-point number is the string obtained from running ToString( ). The abstract operation ToString is not uniquely determined. When there are multiple possible strings that could be obtained from ToString for a particular value, the user agent must always return the same string for that value (though it may differ from the value used by other user agents).\n\nThe are as given in the following algorithm. This algorithm must be aborted at the first step that returns something. This algorithm will return either a number or an error.\n• None Let be the string being parsed.\n• None Let be a pointer into , initially pointing at the start of the string.\n• None Let have the value 1.\n• None Let have the value 1.\n• None Let have the value 1.\n• None If is past the end of , return an error.\n• If the character indicated by is a U+002D HYPHEN-MINUS character (-):\n• Advance to the next character.\n• If is past the end of , return an error. Otherwise, if the character indicated by (the first character) is a U+002B PLUS SIGN character (+):\n• Advance to the next character. (The \" \" is ignored, but it is not conforming.)\n• If is past the end of , return an error.\n• None If the character indicated by is a U+002E FULL STOP (.), and that is not the last character in , and the character after the character indicated by is an ASCII digit, then set to zero and jump to the step labeled fraction.\n• None If the character indicated by is not an ASCII digit, then return an error.\n• None Collect a sequence of code points that are ASCII digits from given , and interpret the resulting sequence as a base-ten integer. Multiply by that integer.\n• If is past the end of , jump to the step labeled conversion.\n• None Fraction: If the character indicated by is a U+002E FULL STOP (.), run these substeps:\n• None Advance to the next character.\n• None If is past the end of , or if the character indicated by is not an ASCII digit, U+0065 LATIN SMALL LETTER E (e), or U+0045 LATIN CAPITAL LETTER E (E), then jump to the step labeled conversion.\n• None If the character indicated by is a U+0065 LATIN SMALL LETTER E character (e) or a U+0045 LATIN CAPITAL LETTER E character (E), skip the remainder of these substeps.\n• Add the value of the character indicated by , interpreted as a base-ten digit (0..9) and divided by , to .\n• None Advance to the next character.\n• None If is past the end of , then jump to the step labeled conversion.\n• None If the character indicated by is an ASCII digit, jump back to the step labeled fraction loop in these substeps.\n• None If the character indicated by is U+0065 (e) or a U+0045 (E), then:\n• None Advance to the next character.\n• None If is past the end of , then jump to the step labeled conversion.\n• If the character indicated by is a U+002D HYPHEN-MINUS character (-):\n• Advance to the next character.\n• None If is past the end of , then jump to the step labeled conversion. Otherwise, if the character indicated by is a U+002B PLUS SIGN character (+):\n• Advance to the next character.\n• None If is past the end of , then jump to the step labeled conversion.\n• None If the character indicated by is not an ASCII digit, then jump to the step labeled conversion.\n• None Collect a sequence of code points that are ASCII digits from given , and interpret the resulting sequence as a base-ten integer. Multiply by that integer.\n• None Multiply by ten raised to the th power.\n• None Conversion: Let be the set of finite IEEE 754 double-precision floating-point values except −0, but with two special values added: 21024 and −21024.\n• None Let be the number in that is closest to , selecting the number with an even significand if there are two equally close values. (The two special values 21024 and −21024 are considered to have even significands for this purpose.)\n• None If is 21024 or −21024, return an error.\n\nThe are as given in the following algorithm. When invoked, the steps must be followed in the order given, aborting at the first step that returns a value. This algorithm will return either a number greater than or equal to 0.0, or failure; if a number is returned, then it is further categorized as either a percentage or a length.\n• None Let be the string being parsed.\n• None Let be a position variable for , initially pointing at the start of .\n• None If is past the end of or the code point at within is not an ASCII digit, then return failure.\n• None Collect a sequence of code points that are ASCII digits from given , and interpret the resulting sequence as a base-ten integer. Let be that number.\n• None If is past the end of , then return as a length.\n• If the code point at within is U+002E (.), then:\n• None If is past the end of or the code point at within is not an ASCII digit, then return the current dimension value with , , and .\n• None Let have the value 1.\n• \n• None Add the value of the code point at within , interpreted as a base-ten digit (0..9) and divided by , to .\n• None If is past the end of , then return as a length.\n• None If the code point at within is not an ASCII digit, then break.\n• None Return the current dimension value with , , and .\n\nThe , given , , and , is determined as follows:\n• None If is past the end of , then return as a length.\n• None If the code point at within is U+0025 (%), then return as a percentage.\n\nThe are as given in the following algorithm. When invoked, the steps must be followed in the order given, aborting at the first step that returns a value. This algorithm will return either a number greater than 0.0, or an error; if a number is returned, then it is further categorized as either a percentage or a length.\n• None Let be the string being parsed.\n• None Let be the result of parsing using the rules for parsing dimension values.\n• None If is an error, return an error.\n• None If is zero, return an error.\n• None If is a percentage, return as a percentage.\n\nA is a number of valid floating-point numbers separated by U+002C COMMA characters, with no other characters (e.g. no ASCII whitespace). In addition, there might be restrictions on the number of floating-point numbers that can be given, or on the range of values allowed.\n\nThe are as follows:\n• None Let be the string being parsed.\n• None Let be a pointer into , initially pointing at the start of the string.\n• None Let be an initially empty list of floating-point numbers. This list will be the result of this algorithm.\n• None Collect a sequence of code points that are ASCII whitespace, U+002C COMMA, or U+003B SEMICOLON characters from given . This skips past any leading delimiters.\n• None While is not past the end of :\n• None Collect a sequence of code points that are not ASCII whitespace, U+002C COMMA, U+003B SEMICOLON, ASCII digits, U+002E FULL STOP, or U+002D HYPHEN-MINUS characters from given . This skips past leading garbage.\n• None Collect a sequence of code points that are not ASCII whitespace, U+002C COMMA, or U+003B SEMICOLON characters from given , and let be the result.\n• None Let be the result of parsing using the rules for parsing floating-point number values.\n• None If is an error, set to zero.\n• None Collect a sequence of code points that are ASCII whitespace, U+002C COMMA, or U+003B SEMICOLON characters from given . This skips past the delimiter.\n\nThe are as follows. These rules return a list of zero or more pairs consisting of a number and a unit, the unit being one of percentage, relative, and absolute.\n• None Let be the string being parsed.\n• None If the last character in is a U+002C COMMA character (,), then remove that character from .\n• None Split the string on commas. Let be the resulting list of tokens.\n• None Let be an empty list of number/unit pairs.\n• For each token in , run the following substeps:\n• None Let be the token.\n• None Let be a pointer into , initially pointing at the start of the string.\n• None Let be the number 0.\n• None If is past the end of , set to relative and jump to the last substep.\n• None If the character at is an ASCII digit, collect a sequence of code points that are ASCII digits from given , interpret the resulting sequence as an integer in base ten, and increment by that integer.\n• If the character at is U+002E (.), then:\n• None Collect a sequence of code points consisting of ASCII whitespace and ASCII digits from given . Let be the resulting sequence.\n• If is not the empty string, then:\n• None Let be the number of characters in (after the spaces were removed).\n• None Let be the result of interpreting as a base-ten integer, and then dividing that number by 10 .\n• If the character at is a U+0025 PERCENT SIGN character (%), then set to percentage. Otherwise, if the character at is a U+002A ASTERISK character (*), then set to relative.\n• None Add an entry to consisting of the number given by and the unit given by .\n\nIn the algorithms below, the number of days in month of year is: 31 if is 1, 3, 5, 7, 8, 10, or 12; 30 if is 4, 6, 9, or 11; 29 if is 2 and is a number divisible by 400, or if is a number divisible by 4 but not by 100; and 28 otherwise. This takes into account leap years in the Gregorian calendar. [GREGORIAN]\n\nWhen are used in the date and time syntaxes defined in this section, they express numbers in base ten.\n\nWhile the formats described here are intended to be subsets of the corresponding ISO8601 formats, this specification defines parsing rules in much more detail than ISO8601. Implementers are therefore encouraged to carefully examine any date parsing libraries before using them to implement the parsing rules described below; ISO8601 libraries might not parse dates and times in exactly the same manner. [ISO8601]\n\nWhere this specification refers to the , it means the modern Gregorian calendar, extrapolated backwards to year 1. A date in the , sometimes explicitly referred to as a , is one that is described using that calendar even if that calendar was not in use at the time (or place) in question. [GREGORIAN]\n\nThe use of the Gregorian calendar as the wire format in this specification is an arbitrary choice resulting from the cultural biases of those involved in the decision. See also the section discussing date, time, and number formats in forms (for authors), implementation notes regarding localization of form controls, and the element.\n\nA consists of a specific with no time-zone information and no date information beyond a year and a month. [GREGORIAN]\n\nA string is a representing a year and month if it consists of the following components in the given order:\n• Four or more ASCII digits, representing , where > 0\n• Two ASCII digits, representing the month , in the range 1 ≤ ≤ 12\n\nThe rules to are as follows. This will return either a year and month, or nothing. If at any point the algorithm says that it \"fails\", this means that it is aborted at that point and returns nothing.\n• None Let be the string being parsed.\n• None Let be a pointer into , initially pointing at the start of the string.\n• None Parse a month component to obtain and . If this returns nothing, then fail.\n• None If is not beyond the end of , then fail.\n\nThe rules to , given an string and a , are as follows. This will return either a year and a month, or nothing. If at any point the algorithm says that it \"fails\", this means that it is aborted at that point and returns nothing.\n• None Collect a sequence of code points that are ASCII digits from given . If the collected sequence is not at least four characters long, then fail. Otherwise, interpret the resulting sequence as a base-ten integer. Let that number be the .\n• None If is not a number greater than zero, then fail.\n• None If is beyond the end of or if the character at is not a U+002D HYPHEN-MINUS character, then fail. Otherwise, move forwards one character.\n• None Collect a sequence of code points that are ASCII digits from given . If the collected sequence is not exactly two characters long, then fail. Otherwise, interpret the resulting sequence as a base-ten integer. Let that number be the .\n• None If is not a number in the range 1 ≤ ≤ 12, then fail.\n\nA consists of a specific with no time-zone information, consisting of a year, a month, and a day. [GREGORIAN]\n\nA string is a representing a year , month , and day if it consists of the following components in the given order:\n• Two , representing , in the range 1 ≤ ≤ where is the\n\nThe rules to are as follows. This will return either a date, or nothing. If at any point the algorithm says that it \"fails\", this means that it is aborted at that point and returns nothing.\n• None Let be the string being parsed.\n• None Let be a pointer into , initially pointing at the start of the string.\n• None to obtain , , and . If this returns nothing, then fail.\n• None If is not beyond the end of , then fail.\n• None Let be the date with year , month , and day .\n\nThe rules to , given an string and a , are as follows. This will return either a year, a month, and a day, or nothing. If at any point the algorithm says that it \"fails\", this means that it is aborted at that point and returns nothing.\n• None to obtain and . If this returns nothing, then fail.\n• None Let be the .\n• None If is beyond the end of or if the character at is not a U+002D HYPHEN-MINUS character, then fail. Otherwise, move forwards one character.\n• None that are from given . If the collected sequence is not exactly two characters long, then fail. Otherwise, interpret the resulting sequence as a base-ten integer. Let that number be the .\n• None If is not a number in the range 1 ≤ ≤ , then fail.\n\nA consists of a Gregorian month and a day within that month, but with no associated year. [GREGORIAN]\n\nA string is a representing a month and a day if it consists of the following components in the given order:\n• Two , representing the month , in the range 1 ≤ ≤ 12\n• Two , representing , in the range 1 ≤ ≤ where is the in the month and any arbitrary leap year (e.g. 4 or 2000)\n\nIn other words, if the is \" \", meaning February, then the day can be 29, as if the year was a leap year.\n\nThe rules to are as follows. This will return either a month and a day, or nothing. If at any point the algorithm says that it \"fails\", this means that it is aborted at that point and returns nothing.\n• None Let be the string being parsed.\n• None Let be a pointer into , initially pointing at the start of the string.\n• None to obtain and . If this returns nothing, then fail.\n• None If is not beyond the end of , then fail.\n\nThe rules to , given an string and a , are as follows. This will return either a month and a day, or nothing. If at any point the algorithm says that it \"fails\", this means that it is aborted at that point and returns nothing.\n• None that are U+002D HYPHEN-MINUS characters (-) from given . If the collected sequence is not exactly zero or two characters long, then fail.\n• None that are from given . If the collected sequence is not exactly two characters long, then fail. Otherwise, interpret the resulting sequence as a base-ten integer. Let that number be the .\n• None If is not a number in the range 1 ≤ ≤ 12, then fail.\n• None Let be the in month of any arbitrary leap year (e.g. 4 or 2000).\n• None If is beyond the end of or if the character at is not a U+002D HYPHEN-MINUS character, then fail. Otherwise, move forwards one character.\n• None that are from given . If the collected sequence is not exactly two characters long, then fail. Otherwise, interpret the resulting sequence as a base-ten integer. Let that number be the .\n• None If is not a number in the range 1 ≤ ≤ , then fail.\n\nA consists of a specific time with no time-zone information, consisting of an hour, a minute, a second, and a fraction of a second.\n\nA string is a representing an hour , a minute , and a second if it consists of the following components in the given order:\n• Two ASCII digits, representing , in the range 0 ≤ ≤ 23\n• Two ASCII digits, representing , in the range 0 ≤ ≤ 59\n• If is nonzero, or optionally if is zero:\n• Two ASCII digits, representing the integer part of , in the range 0 ≤ ≤ 59\n• If is not an integer, or optionally if is an integer:\n• One, two, or three ASCII digits, representing the fractional part of\n\nThe component cannot be 60 or 61; leap seconds cannot be represented.\n\nThe rules to are as follows. This will return either a time, or nothing. If at any point the algorithm says that it \"fails\", this means that it is aborted at that point and returns nothing.\n• None Let be the string being parsed.\n• None Let be a pointer into , initially pointing at the start of the string.\n• None Parse a time component to obtain , , and . If this returns nothing, then fail.\n• None If is not beyond the end of , then fail.\n• None Let be the time with hour , minute , and second .\n\nThe rules to , given an string and a , are as follows. This will return either an hour, a minute, and a second, or nothing. If at any point the algorithm says that it \"fails\", this means that it is aborted at that point and returns nothing.\n• None Collect a sequence of code points that are ASCII digits from given . If the collected sequence is not exactly two characters long, then fail. Otherwise, interpret the resulting sequence as a base-ten integer. Let that number be the .\n• If is not a number in the range 0 ≤ ≤ 23, then fail.\n• None If is beyond the end of or if the character at is not a U+003A COLON character, then fail. Otherwise, move forwards one character.\n• None Collect a sequence of code points that are ASCII digits from given . If the collected sequence is not exactly two characters long, then fail. Otherwise, interpret the resulting sequence as a base-ten integer. Let that number be the .\n• If is not a number in the range 0 ≤ ≤ 59, then fail.\n• If is not beyond the end of and the character at is U+003A (:), then:\n• None Advance to the next character in .\n• None If is beyond the end of , or at the last character in , or if the next two characters in starting at are not both ASCII digits, then fail.\n• None Collect a sequence of code points that are either ASCII digits or U+002E FULL STOP characters from given . If the collected sequence is three characters long, or if it is longer than three characters long and the third character is not a U+002E FULL STOP character, or if it has more than one U+002E FULL STOP character, then fail. Otherwise, interpret the resulting sequence as a base-ten number (possibly with a fractional part). Set to that number.\n• None If is not a number in the range 0 ≤ < 60, then fail.\n\nA consists of a specific , consisting of a year, a month, and a day, and a time, consisting of an hour, a minute, a second, and a fraction of a second, but expressed without a time zone. [GREGORIAN]\n\nA string is a representing a date and time if it consists of the following components in the given order:\n\nA string is a representing a date and time if it consists of the following components in the given order:\n• A representing the time, expressed as the shortest possible string for the given time (e.g. omitting the seconds component entirely if the given time is zero seconds past the minute)\n\nThe rules to are as follows. This will return either a date and time, or nothing. If at any point the algorithm says that it \"fails\", this means that it is aborted at that point and returns nothing.\n• None Let be the string being parsed.\n• None Let be a pointer into , initially pointing at the start of the string.\n• None to obtain , , and . If this returns nothing, then fail.\n• None If is beyond the end of or if the character at is neither a U+0054 LATIN CAPITAL LETTER T character (T) nor a U+0020 SPACE character, then fail. Otherwise, move forwards one character.\n• None to obtain , , and . If this returns nothing, then fail.\n• None If is not beyond the end of , then fail.\n• None Let be the date with year , month , and day .\n• None Let be the time with hour , minute , and second .\n\nA consists of a signed number of hours and minutes.\n\nA string is a representing a time-zone offset if it consists of either:\n• None A U+005A LATIN CAPITAL LETTER Z character (Z), allowed only if the time zone is UTC\n• Or, the following components, in the given order:\n• Either a U+002B PLUS SIGN character (+) or, if the time-zone offset is not zero, a U+002D HYPHEN-MINUS character (-), representing the sign of the time-zone offset\n• Two ASCII digits, representing the hours component of the time-zone offset, in the range 0 ≤ ≤ 23\n• Two ASCII digits, representing the minutes component of the time-zone offset, in the range 0 ≤ ≤ 59\n\nThis format allows for time-zone offsets from -23:59 to +23:59. Right now, in practice, the range of offsets of actual time zones is -12:00 to +14:00, and the minutes component of offsets of actual time zones is always either 00, 30, or 45. There is no guarantee that this will remain so forever, however, since time zones are used as political footballs and are thus subject to very whimsical policy decisions.\n\nSee also the usage notes and examples in the section below for details on using time-zone offsets with historical times that predate the formation of formal time zones.\n\nThe rules to are as follows. This will return either a time-zone offset, or nothing. If at any point the algorithm says that it \"fails\", this means that it is aborted at that point and returns nothing.\n• None Let be the string being parsed.\n• None Let be a pointer into , initially pointing at the start of the string.\n• None Parse a time-zone offset component to obtain and . If this returns nothing, then fail.\n• None If is not beyond the end of , then fail.\n• None Return the time-zone offset that is hours and minutes from UTC.\n\nThe rules to , given an string and a , are as follows. This will return either time-zone hours and time-zone minutes, or nothing. If at any point the algorithm says that it \"fails\", this means that it is aborted at that point and returns nothing.\n• If the character at is a U+005A LATIN CAPITAL LETTER Z character (Z), then:\n• None Advance to the next character in . Otherwise, if the character at is either a U+002B PLUS SIGN (+) or a U+002D HYPHEN-MINUS (-), then:\n• None If the character at is a U+002B PLUS SIGN (+), let be \"positive\". Otherwise, it's a U+002D HYPHEN-MINUS (-); let be \"negative\".\n• None Advance to the next character in .\n• None Collect a sequence of code points that are ASCII digits from given . Let be the collected sequence.\n• If is exactly two characters long, then:\n• None Interpret as a base-ten integer. Let that number be the .\n• None If is beyond the end of or if the character at is not a U+003A COLON character, then fail. Otherwise, move forwards one character.\n• None Collect a sequence of code points that are ASCII digits from given . If the collected sequence is not exactly two characters long, then fail. Otherwise, interpret the resulting sequence as a base-ten integer. Let that number be the . If is exactly four characters long, then:\n• None Interpret the first two characters of as a base-ten integer. Let that number be the .\n• None Interpret the last two characters of as a base-ten integer. Let that number be the .\n• If is not a number in the range 0 ≤ ≤ 23, then fail.\n• If is \"negative\", then negate .\n• If is not a number in the range 0 ≤ ≤ 59, then fail.\n• If is \"negative\", then negate .\n\nA consists of a specific , consisting of a year, a month, and a day, and a time, consisting of an hour, a minute, a second, and a fraction of a second, expressed with a time-zone offset, consisting of a signed number of hours and minutes. [GREGORIAN]\n\nA string is a representing a date, time, and a time-zone offset if it consists of the following components in the given order:\n\nTimes in dates before the formation of UTC in the mid-twentieth century must be expressed and interpreted in terms of UT1 (contemporary Earth solar time at the 0° longitude), not UTC (the approximation of UT1 that ticks in SI seconds). Time before the formation of time zones must be expressed and interpreted as UT1 times with explicit time zones that approximate the contemporary difference between the appropriate local time and the time observed at the location of Greenwich, London.\n\nThe rules to are as follows. This will return either a time in UTC, with associated time-zone offset information for round-tripping or display purposes, or nothing. If at any point the algorithm says that it \"fails\", this means that it is aborted at that point and returns nothing.\n• None Let be the string being parsed.\n• None Let be a pointer into , initially pointing at the start of the string.\n• None to obtain , , and . If this returns nothing, then fail.\n• None If is beyond the end of or if the character at is neither a U+0054 LATIN CAPITAL LETTER T character (T) nor a U+0020 SPACE character, then fail. Otherwise, move forwards one character.\n• None to obtain , , and . If this returns nothing, then fail.\n• None If is beyond the end of , then fail.\n• None to obtain and . If this returns nothing, then fail.\n• None If is not beyond the end of , then fail.\n• None Let be the moment in time at year , month , day , hours , minute , second , subtracting hours and minutes. That moment in time is a moment in the UTC time zone.\n• None Let be hours and minutes from UTC.\n\nA consists of a week-year number and a week number representing a seven-day period starting on a Monday. Each week-year in this calendaring system has either 52 or 53 such seven-day periods, as defined below. The seven-day period starting on the Gregorian date Monday December 29th 1969 (1969-12-29) is defined as week number 1 in week-year 1970. Consecutive weeks are numbered sequentially. The week before the number 1 week in a week-year is the last week in the previous week-year, and vice versa. [GREGORIAN]\n\nA week-year with a number has 53 weeks if it corresponds to either a year in the proleptic Gregorian calendar that has a Thursday as its first day (January 1st), or a year in the proleptic Gregorian calendar that has a Wednesday as its first day (January 1st) and where is a number divisible by 400, or a number divisible by 4 but not by 100. All other week-years have 52 weeks.\n\nThe week number of the last day of a week-year with 53 weeks is 53; the week number of the last day of a week-year with 52 weeks is 52.\n\nThe week-year number of a particular day can be different than the number of the year that contains that day in the proleptic Gregorian calendar. The first week in a week-year is the week that contains the first Thursday of the Gregorian year .\n\nFor modern purposes, a week as defined here is equivalent to ISO weeks as defined in ISO 8601. [ISO8601]\n\nA string is a representing a week-year and week if it consists of the following components in the given order:\n• Four or more ASCII digits, representing , where > 0\n• Two ASCII digits, representing the week , in the range 1 ≤ ≤ , where is the week number of the last day of week-year\n\nThe rules to are as follows. This will return either a week-year number and week number, or nothing. If at any point the algorithm says that it \"fails\", this means that it is aborted at that point and returns nothing.\n• None Let be the string being parsed.\n• None Let be a pointer into , initially pointing at the start of the string.\n• None Collect a sequence of code points that are ASCII digits from given . If the collected sequence is not at least four characters long, then fail. Otherwise, interpret the resulting sequence as a base-ten integer. Let that number be the .\n• None If is not a number greater than zero, then fail.\n• None If is beyond the end of or if the character at is not a U+002D HYPHEN-MINUS character, then fail. Otherwise, move forwards one character.\n• None If is beyond the end of or if the character at is not a U+0057 LATIN CAPITAL LETTER W character (W), then fail. Otherwise, move forwards one character.\n• None Collect a sequence of code points that are ASCII digits from given . If the collected sequence is not exactly two characters long, then fail. Otherwise, interpret the resulting sequence as a base-ten integer. Let that number be the .\n• None Let be the week number of the last day of year .\n• None If is not a number in the range 1 ≤ ≤ , then fail.\n• None If is not beyond the end of , then fail.\n• None Return the week-year number and the week number .\n\nSince months and seconds are not comparable (a month is not a precise number of seconds, but is instead a period whose exact length depends on the precise day from which it is measured) a duration as defined in this specification cannot include months (or years, which are equivalent to twelve months). Only durations that describe a specific number of seconds can be described.\n\nA string is a representing a duration if it consists of either of the following:\n• A literal U+0050 LATIN CAPITAL LETTER P character followed by one or more of the following subcomponents, in the order given, where the number of days, hours, minutes, and seconds corresponds to the same number of seconds as in :\n• None One or more ASCII digits followed by a U+0044 LATIN CAPITAL LETTER D character, representing a number of days.\n• A U+0054 LATIN CAPITAL LETTER T character followed by one or more of the following subcomponents, in the order given:\n• None One or more ASCII digits followed by a U+0048 LATIN CAPITAL LETTER H character, representing a number of hours.\n• None One or more ASCII digits followed by a U+004D LATIN CAPITAL LETTER M character, representing a number of minutes.\n• \n• None One or more ASCII digits, representing a number of seconds.\n• None Optionally, a U+002E FULL STOP character (.) followed by one, two, or three ASCII digits, representing a fraction of a second. This, as with a number of other date- and time-related microsyntaxes defined in this specification, is based on one of the formats defined in ISO 8601. [ISO8601]\n• One or more duration time components, each with a different duration time component scale, in any order; the sum of the represented seconds being equal to the number of seconds in . A is a string consisting of the following components:\n• None Zero or more ASCII whitespace.\n• None One or more ASCII digits, representing a number of time units, scaled by the duration time component scale specified (see below) to represent a number of seconds.\n• None If the duration time component scale specified is 1 (i.e. the units are seconds), then, optionally, a U+002E FULL STOP character (.) followed by one, two, or three ASCII digits, representing a fraction of a second.\n• None Zero or more ASCII whitespace.\n• One of the following characters, representing the of the time unit used in the numeric part of the duration time component:\n• None Zero or more ASCII whitespace. This is not based on any of the formats in ISO 8601. It is intended to be a more human-readable alternative to the ISO 8601 duration format.\n\nThe rules to are as follows. This will return either a duration or nothing. If at any point the algorithm says that it \"fails\", this means that it is aborted at that point and returns nothing.\n• None Let be the string being parsed.\n• None Let be a pointer into , initially pointing at the start of the string.\n• None Let , , and all be zero.\n• This flag's other value is months. It is used to disambiguate the \"M\" unit in ISO8601 durations, which use the same unit for months and minutes. Months are not allowed, but are parsed for future compatibility and to avoid misinterpreting ISO8601 durations that would be valid in other contexts.\n• None If is past the end of , then fail.\n• None If the character in pointed to by is a U+0050 LATIN CAPITAL LETTER P character, then advance to the next character, set to months, and skip ASCII whitespace within given .\n• \n• None Let be undefined. It will be assigned one of the following values: years, months, weeks, days, hours, minutes, and seconds.\n• None Let be undefined. It is used to process characters from the .\n• None If is past the end of , then break.\n• None If the character in pointed to by is a U+0054 LATIN CAPITAL LETTER T character, then advance to the next character, set to minutes, skip ASCII whitespace within given , and continue.\n• None Set to the character in pointed to by .\n• If is a U+002E FULL STOP character (.), then let equal zero. (Do not advance . That is taken care of below.) Otherwise, if is an ASCII digit, then collect a sequence of code points that are ASCII digits from given , interpret the resulting sequence as a base-ten integer, and let be that number. Otherwise, is not part of a number; fail.\n• None If is past the end of , then fail.\n• None Set to the character in pointed to by , and this time advance to the next character. (If was a U+002E FULL STOP character (.) before, it will still be that character this time.)\n• If is U+002E (.), then:\n• None Collect a sequence of code points that are ASCII digits from given . Let be the resulting sequence.\n• None If is the empty string, then fail.\n• None Let be the number of characters in .\n• None Let be the result of interpreting as a base-ten integer, and then dividing that number by 10 .\n• None If is past the end of , then fail.\n• None Set to the character in pointed to by , and advance to the next character.\n• None If is neither a U+0053 LATIN CAPITAL LETTER S character nor a U+0073 LATIN SMALL LETTER S character, then fail.\n• None If is ASCII whitespace, then skip ASCII whitespace within given , set to the character in pointed to by , and advance to the next character.\n• If is a U+0059 LATIN CAPITAL LETTER Y character, or a U+0079 LATIN SMALL LETTER Y character, set to years and set to months. If is a U+004D LATIN CAPITAL LETTER M character or a U+006D LATIN SMALL LETTER M character, and is months, then set to months. If is a U+0057 LATIN CAPITAL LETTER W character or a U+0077 LATIN SMALL LETTER W character, set to weeks and set to minutes. If is a U+0044 LATIN CAPITAL LETTER D character or a U+0064 LATIN SMALL LETTER D character, set to days and set to minutes. If is a U+0048 LATIN CAPITAL LETTER H character or a U+0068 LATIN SMALL LETTER H character, set to hours and set to minutes. If is a U+004D LATIN CAPITAL LETTER M character or a U+006D LATIN SMALL LETTER M character, and is minutes, then set to minutes. If is a U+0053 LATIN CAPITAL LETTER S character or a U+0073 LATIN SMALL LETTER S character, set to seconds and set to minutes. Otherwise, if is none of the above characters, then fail.\n• None If is years, multiply by 12 and set to months.\n• If is months, add the product of and to .\n• None If is weeks, multiply by 7 and set to days.\n• None If is days, multiply by 24 and set to hours.\n• None If is hours, multiply by 60 and set to minutes.\n• None If is minutes, multiply by 60 and set to seconds.\n• None Forcibly, is now seconds. Add the product of and to .\n• None If is zero, fail.\n• None If is not zero, fail.\n\nA string is a if it is also one of the following:\n\nThe rules to are as follows. The algorithm will return either a , a time, a , or nothing. If at any point the algorithm says that it \"fails\", this means that it is aborted at that point and returns nothing.\n• None Let be the string being parsed.\n• None Let be a pointer into , initially pointing at the start of the string.\n• None Set to the same position as .\n• None Set the and flags to true.\n• None to obtain , , and . If this fails, then set the flag to false.\n• If is true, and is not beyond the end of , and the character at is either a U+0054 LATIN CAPITAL LETTER T character (T) or a U+0020 SPACE character, then advance to the next character in . Otherwise, if is true, and either is beyond the end of or the character at is neither a U+0054 LATIN CAPITAL LETTER T character (T) nor a U+0020 SPACE character, then set to false. Otherwise, if is false, set back to the same position as .\n• None If the flag is true, then parse a time component to obtain , , and . If this returns nothing, then fail.\n• None If the and flags are both true, but is beyond the end of , then fail.\n• None If the and flags are both true, parse a time-zone offset component to obtain and . If this returns nothing, then fail.\n• None If is not beyond the end of , then fail.\n• If the flag is true and the flag is false, then let be the date with year , month , and day , and return . Otherwise, if the flag is true and the flag is false, then let be the time with hour , minute , and second , and return . Otherwise, let be the moment in time at year , month , day , hours , minute , second , subtracting hours and minutes, that moment in time being a moment in the UTC time zone; let be hours and minutes from UTC; and return and .\n\nSome obsolete legacy attributes parse colors using the , given a string . They will return either a CSS color or failure.\n• None If is the empty string, then return failure.\n• None If is an ASCII case-insensitive match for \" \", then return failure.\n• If is an ASCII case-insensitive match for one of the named colors, then return the CSS color corresponding to that keyword. [CSSCOLOR]\n• If 's code point length is four, and the first character in is U+0023 (#), and the last three characters of are all ASCII hex digits, then:\n• None Interpret the second character of as a hexadecimal digit; let the red component of be the resulting number multiplied by 17.\n• None Interpret the third character of as a hexadecimal digit; let the green component of be the resulting number multiplied by 17.\n• None Interpret the fourth character of as a hexadecimal digit; let the blue component of be the resulting number multiplied by 17.\n• None Replace any code points greater than U+FFFF in (i.e., any characters that are not in the basic multilingual plane) with \" \".\n• None If 's code point length is greater than 128, truncate , leaving only the first 128 characters.\n• None If the first character in is U+0023 (#), then remove it.\n• None Replace any character in that is not an ASCII hex digit with U+0030 (0).\n• None While 's code point length is zero or not a multiple of three, append U+0030 (0) to .\n• None Split into three strings of equal code point length, to obtain three components. Let be the code point length that all of those components have (one third the code point length of ).\n• None If is greater than 8, then remove the leading -8 characters in each component, and let be 8.\n• None While is greater than two and the first character in each component is U+0030 (0), remove that character and reduce by one.\n• None If is still greater than two, truncate each component, leaving only the first two characters in each.\n• None Interpret the first component as a hexadecimal number; let the red component of be the resulting number.\n• None Interpret the second component as a hexadecimal number; let the green component of be the resulting number.\n• None Interpret the third component as a hexadecimal number; let the blue component of be the resulting number.\n\nA is a string containing zero or more words (known as tokens) separated by one or more ASCII whitespace, where words consist of any string of one or more characters, none of which are ASCII whitespace.\n\nA string containing a set of space-separated tokens may have leading or trailing ASCII whitespace.\n\nAn is a set of space-separated tokens where none of the tokens are duplicated.\n\nAn is a set of space-separated tokens where none of the tokens are duplicated but where the order of the tokens is meaningful.\n\nSets of space-separated tokens sometimes have a defined set of allowed values. When a set of allowed values is defined, the tokens must all be from that list of allowed values; other values are non-conforming. If no such set of allowed values is provided, then all values are conforming.\n\nHow tokens in a set of space-separated tokens are to be compared (e.g. case-sensitively or not) is defined on a per-set basis.\n\nA is a string containing zero or more tokens each separated from the next by a single U+002C COMMA character (,), where tokens consist of any string of zero or more characters, neither beginning nor ending with ASCII whitespace, nor containing any U+002C COMMA characters (,), and optionally surrounded by ASCII whitespace.\n\nFor instance, the string \" \" consists of four tokens: \"a\", \"b\", the empty string, and \"d d\". Leading and trailing whitespace around each token doesn't count as part of the token, and the empty string can be a token.\n\nSets of comma-separated tokens sometimes have further restrictions on what consists a valid token. When such restrictions are defined, the tokens must all fit within those restrictions; other values are non-conforming. If no such restrictions are specified, then all values are conforming.\n\nA to an element of type is a string consisting of a U+0023 NUMBER SIGN character (#) followed by a string which exactly matches the value of the attribute of an element with type in the same tree.\n\nThe to an element of type , given a context node , are as follows:\n• None If the string being parsed does not contain a U+0023 NUMBER SIGN character, or if the first such character in the string is the last character in the string, then return null.\n• None Let be the string from the character immediately after the first U+0023 NUMBER SIGN character in the string being parsed up to the end of that string.\n• Return the first element of type in 's tree, in tree order, that has an or attribute whose value is , or null if there is no such element. Although attributes are accounted for when parsing, they are not used in determining whether a value is a valid hash-name reference. That is, a hash-name reference that refers to an element based on is a conformance error (unless that element also has a attribute with the same value).\n\nA string is a if it matches the production of . [MQ]\n\nA string of the user if it is the empty string, a string consisting of only ASCII whitespace, or is a media query list that matches the user's environment according to the definitions given in . [MQ]\n\nA is a value that is serializable, comparable by value, and never exposed to script.\n\nTo create a , return a unique internal value that has never previously been returned by this algorithm.\n\nA string is a if it is a valid URL string but it is not the empty string.\n\nA string is a if, after stripping leading and trailing ASCII whitespace from it, it is a valid URL string.\n\nA string is a if, after stripping leading and trailing ASCII whitespace from it, it is a valid non-empty URL.\n\nThis specification defines the URL as a reserved, though unresolvable, URL, for use in DOCTYPEs in HTML documents when needed for compatibility with XML tools. [ABOUT]\n\nThis specification defines the URL as a reserved, though unresolvable, URL, that is used as an identifier for kinds of media tracks. [ABOUT]\n\nThis specification defines the URL as a reserved, though unresolvable, URL, that is used as the URL of documents. [ABOUT]\n\nThe of a object is the URL record obtained by running these steps:\n• If is an document, then:\n• None If 's URL matches and 's about base URL is non-null, then return 's about base URL.\n\nThe of a object is the URL record obtained by running these steps:\n• None If there is no element that has an attribute in the , then return the 's fallback base URL.\n• None Otherwise, return the frozen base URL of the first element in the that has an attribute, in tree order.\n\nA URL if its scheme is \" \", its path contains a single string \" \", its username and password are the empty string, and its host is null.\n\nSuch a URL's query and fragment can be non-null. For example, the URL record created by parsing \" \" matches .\n\nA URL if its scheme is \" \", its path contains a single string \" \", its query is null, its username and password are the empty string, and its host is null.\n\nThe reason that matches ensures that the URL's query is null is because it is not possible to create an document whose URL has a non-null query, unlike s whose URL matches . In other words, the set of all URLs that match only vary in their fragment.\n\nParsing a URL is the process of taking a string and obtaining the URL record that it represents. While this process is defined in , the HTML standard defines several wrappers to abstract base URLs and encodings. [URL]\n\nMost new APIs are to use parse a URL. Older APIs and HTML elements might have reason to use encoding-parse a URL. When a custom base URL is needed or no base URL is desired, the URL parser can of course be used directly as well.\n\nTo , given a string , relative to a object or environment settings object , run these steps. They return failure or a URL.\n• None Let be 's base URL, if is a object; otherwise 's API base URL.\n• None Return the result of applying the URL parser to , with .\n\nTo , given a string , relative to a object or environment settings object , run these steps. They return failure or a URL.\n• None If is a object, then set to 's character encoding.\n• None Otherwise, if 's relevant global object is a object, set to 's relevant global object's associated 's character encoding.\n• None Let be 's base URL, if is a object; otherwise 's API base URL.\n• None Return the result of applying the URL parser to , with and .\n\nTo , given a string , relative to a object or environment settings object , run these steps. They return failure or a string.\n• None Let be the result of encoding-parsing a URL given , relative to .\n• None If is failure, then return failure.\n• None Return the result of applying the URL serializer to .\n\nWhen a document's document base URL changes, all elements in that document are affected by a base URL change.\n\nThe following are base URL change steps, which run when an element is affected by a base URL change (as defined by ):\n\nA response whose type is \" \", \" \", or \" \" is . [FETCH]\n\nA response whose type is \" \" or \" \" is .\n\nA response's is its internal response if it has one, and the response itself otherwise.\n\nTo , given a , , , and an optional same-origin fallback flag, run these steps:\n• None Let be \" \" if is No CORS, and \" \" otherwise.\n• None If same-origin fallback flag is set and is \" \", set to \" \".\n• None If is Anonymous, set to \" \".\n• None Return a new request whose URL is , destination is , mode is , credentials mode is , and whose use-URL-credentials flag is set.\n\nThe of a resource must be obtained and interpreted in a manner consistent with the requirements of . [MIMESNIFF]\n\nThe of a resource must be found in a manner consistent with the requirements given in . [MIMESNIFF]\n\nThe , the rules for distinguishing if a resource is text or binary , and the are also defined in . These rules return a MIME type as their result. [MIMESNIFF]\n\nIt is imperative that the rules in be followed exactly. When a user agent uses different heuristics for content type detection than the server expects, security problems can occur. For more details, see . [MIMESNIFF]\n\nThe , given a string , is as follows. It returns either a character encoding or nothing.\n• None Let be a pointer into , initially pointing at the start of the string.\n• None Loop: Find the first seven characters in after that are an ASCII case-insensitive match for the word \" \". If no such match is found, return nothing.\n• None Skip any ASCII whitespace that immediately follow the word \" \" (there might not be any).\n• None If the next character is not a U+003D EQUALS SIGN (=), then move to point just before that next character, and jump back to the step labeled loop.\n• None Skip any ASCII whitespace that immediately follow the equals sign (there might not be any).\n• Process the next character as follows: If it is a U+0022 QUOTATION MARK character (\") and there is a later U+0022 QUOTATION MARK character (\") in If it is a U+0027 APOSTROPHE character (') and there is a later U+0027 APOSTROPHE character (') in Return the result of getting an encoding from the substring that is between this character and the next earliest occurrence of this character. If it is an unmatched U+0022 QUOTATION MARK character (\") If it is an unmatched U+0027 APOSTROPHE character (') If there is no next character Return the result of getting an encoding from the substring that consists of this character up to but not including the first ASCII whitespace or U+003B SEMICOLON character (;), or the end of , whichever comes first.\n\nThis algorithm is distinct from those in the HTTP specifications (for example, HTTP doesn't allow the use of single quotes and requires supporting a backslash-escape mechanism that is not supported by this algorithm). While the algorithm is used in contexts that, historically, were related to HTTP, the syntax as supported by implementations diverged some time ago. [HTTP]\n\nA is an enumerated attribute with the following keywords and states:\n\nThe attribute's missing value default is the state, and its invalid value default is the Anonymous state. For the purposes of reflection, the canonical keyword for the Anonymous state is the keyword.\n\nThe majority of fetches governed by CORS settings attributes will be done via the create a potential-CORS request algorithm.\n\nFor more modern features, where the request's mode is always \" \", certain CORS settings attributes have been repurposed to have a slightly different meaning, wherein they only impact the request's credentials mode. To perform this translation, we define the for a given CORS settings attribute to be determined by switching on the attribute's state:\n\nA is an enumerated attribute. Each referrer policy, including the empty string, is a keyword for this attribute, mapping to a state of the same name.\n\nThe attribute's missing value default and invalid value default are both the empty string state.\n\nThe impact of these states on the processing model of various fetches is defined in more detail throughout this specification, in , and in . [FETCH] [REFERRERPOLICY]\n\nA content attribute represents a cryptographic nonce (\"number used once\") which can be used by to determine whether or not a given fetch will be allowed to proceed. The value is text. [CSP]\n\nElements that have a content attribute ensure that the cryptographic nonce is only exposed to script (and not to side-channels like CSS attribute selectors) by taking the value from the content attribute, moving it into an internal slot named , exposing it to script via the interface mixin, and setting the content attribute to the empty string. Unless otherwise specified, the slot's value is the empty string.\n\nThe IDL attribute must, on getting, return the value of this element's [[CryptographicNonce]]; and on setting, set this element's [[CryptographicNonce]] to the given value.\n\nThe following attribute change steps are used for the content attribute:\n• None If does not include , then return.\n• None If is not or is not null, then return.\n• None If is null, then set 's [[CryptographicNonce]] to the empty string.\n\nWhenever an element including becomes browsing-context connected, the user agent must execute the following steps on the :\n• If contains a header-delivered Content Security Policy, and has a content attribute whose value is not the empty string, then:\n• None Set an attribute value for using \" \" and the empty string. If 's [[CryptographicNonce]] were not restored it would be the empty string at this point.\n\nThe cloning steps for elements that include given , , and are to set 's [[CryptographicNonce]] to 's [[CryptographicNonce]].\n\nA is an enumerated attribute with the following keywords and states:\n\nThe attribute directs the user agent to fetch a resource immediately or to defer fetching until some conditions associated with the element are met, according to the attribute's current state.\n\nThe attribute's missing value default and invalid value default are both the Eager state.\n\nThe , given an element , are as follows:\n• If scripting is disabled for , then return false. This is an anti-tracking measure, because if a user agent supported lazy loading when scripting is disabled, it would still be possible for a site to track a user's approximate scroll position throughout a session, by strategically placing images in a page's markup such that a server can track how many images are requested and when.\n• None If 's lazy loading attribute is in the Lazy state, then return true.\n\nEach and element has associated , initially null.\n\nFor and elements that will lazy load, these steps are run from the lazy load intersection observer's callback or when their lazy loading attribute is set to the Eager state. This causes the element to continue loading.\n\nEach has a , initially set to null but can be set to an instance.\n• If 's lazy load intersection observer is null, set it to a new instance, initialized as follows: The intention is to use the original value of the constructor. However, we're forced to use the JavaScript-exposed constructor in this specification, until exposes low-level hooks for use in specifications. See bug w3c/IntersectionObserver#464 which tracks this. [INTERSECTIONOBSERVER]\n• The is these steps, with arguments and :\n• For each in using a method of iteration which does not trigger developer-modifiable array accessors or iteration hooks:\n• None If . is true, then set to . 's lazy load resumption steps.\n• None If is null, then return. The intention is to use the original value of the and getters. See w3c/IntersectionObserver#464. [INTERSECTIONOBSERVER]\n• The is an dictionary with the following dictionary members: «[ \" \" → lazy load scroll margin ]» This allows for fetching the image during scrolling, when it does not yet — but is about to — intersect the viewport. The lazy load scroll margin suggestions imply dynamic changes to the value, but the API does not support changing the scroll margin. See issue w3c/IntersectionObserver#428.\n• Call 's lazy load intersection observer's method with as the argument. The intention is to use the original value of the method. See w3c/IntersectionObserver#464. [INTERSECTIONOBSERVER]\n• Call 's lazy load intersection observer's method with as the argument. The intention is to use the original value of the method. See w3c/IntersectionObserver#464. [INTERSECTIONOBSERVER]\n\nThe is an implementation-defined value, but with the following suggestions to consider:\n• None Set a minimum value that most often results in the resources being loaded before they intersect the viewport under normal usage patterns for the given device.\n• None The typical scrolling speed: increase the value for devices with faster typical scrolling speeds.\n• None The current scrolling speed or momentum: the UA can attempt to predict where the scrolling will likely stop, and adjust the value accordingly.\n• None The network quality: increase the value for slow or high-latency connections.\n• None User preferences can influence the value.\n\nIt is important for privacy that the lazy load scroll margin not leak additional information. For example, the typical scrolling speed on the current device could be imprecise so as to not introduce a new fingerprinting vector.\n\nA explicitly indicates that certain operations should be blocked on the fetching of an external resource. The operations that can be blocked are represented by , which are strings listed by the following table:\n\nIn the future, there might be more possible blocking tokens.\n\nA blocking attribute must have a value that is an unordered set of unique space-separated tokens, each of which are possible blocking tokens. The supported tokens of a blocking attribute are the possible blocking tokens. Any element can have at most one blocking attribute.\n\nThe for an element are the result of the following steps:\n• None Let be the value of 's blocking attribute, or the empty string if no such attribute exists.\n• None Let be the result of splitting on ASCII whitespace.\n• None Return a set containing the elements of that are possible blocking tokens.\n\nAn element is if its blocking tokens set contains \" \", or if it is , which will be defined at the individual elements. By default, an element is not implicitly potentially render-blocking.\n\nA is an enumerated attribute with the following keywords and states:\n\nThe attribute's missing value default and invalid value default are both the auto state.\n\nThe building blocks for reflecting are as follows:\n• None A is an element or object. It is typically clear from context and typically identical to the interface of the reflected IDL attribute. It is always identical to that interface when it is an object.\n• None A is a string. When the reflected target is an element, it represents the local name of a content attribute whose namespace is null. When the reflected target is an object, it represents a key of the reflected target's target element's internal content attribute map.\n\nA reflected IDL attribute can be defined to a reflected content attribute name of a reflected target. In general this means that the IDL attribute getter returns the current value of the content attribute, and the setter changes the value of the content attribute to the given value.\n\nIf the reflected target is an element, then the reflected IDL attribute can additionally declare to . This means that the interface also has a reflected IDL attribute, with the same identifier, and that reflected IDL attribute reflects the same reflected content attribute name.\n\nThe IDL attribute must reflect the content attribute and support .\n\nReflected targets have these associated algorithms:\n\nFor a reflected target that is an element , these are defined as follows:\n\nFor a reflected target that is an object , they are defined as follows:\n\nThis results in somewhat redundant data structures for objects as their target element's internal content attribute map cannot be directly manipulated and as such reflection is only happening in a single direction. This approach was nevertheless chosen to make it less error-prone to define IDL attributes that are shared between reflected targets and benefit from common API semantics.\n\nIDL attributes of type or that reflect enumerated content attributes can be limited to only known values . Per the processing models below, those will cause the getters for such IDL attributes to only return keywords for those enumerated attributes, or the empty string or null.\n\nIf a reflected IDL attribute has the type :\n• \n• None Let be the result of running this's get the element.\n• None Let be the result of running this's get the content attribute.\n• None Let be the attribute definition of 's content attribute whose namespace is null and local name is the reflected content attribute name.\n• If indicates it is an enumerated attribute and the reflected IDL attribute is defined to be limited to only known values:\n• None If does not correspond to any state of (e.g., it is null and there is no missing value default), or if it is in a state of with no associated keyword value, then return the empty string.\n• None Return the canonical keyword for the state of that corresponds to.\n• None If is null, then return the empty string.\n• None The setter steps are to run this's set the content attribute with the given value.\n\nIf a reflected IDL attribute has the type :\n• \n• None Let be the result of running this's get the element.\n• None Let be the result of running this's get the content attribute.\n• None Let be the attribute definition of 's content attribute whose namespace is null and local name is the reflected content attribute name.\n• If indicates it is an enumerated attribute:\n• None Assert: the reflected IDL attribute is limited to only known values.\n• None If corresponds to a state of with no associated keyword value, then return null.\n• None Return the canonical keyword for the state of that corresponds to.\n• \n• None If the given value is null, then run this's delete the content attribute.\n• None Otherwise, run this's set the content attribute with the given value.\n\nIf a reflected IDL attribute has the type :\n• \n• None Let be the result of running this's get the element.\n• None Let be the result of running this's get the content attribute.\n• None Let be the attribute definition of 's content attribute whose namespace is null and local name is the reflected content attribute name.\n• If indicates it contains a URL:\n• None If is null, then return the empty string.\n• None Let be the result of encoding-parsing-and-serializing a URL given , relative to 's node document.\n• None If is not failure, then return .\n• None The setter steps are to run this's set the content attribute with the given value.\n\nIf a reflected IDL attribute has the type :\n• \n• None Let be the result of running this's get the content attribute.\n• None If is null, then return false.\n• \n• None If the given value is false, then run this's delete the content attribute.\n• None If the given value is true, then run this's set the content attribute with the empty string.\n\nThis corresponds to the rules for boolean content attributes.\n\nIf a reflected IDL attribute has the type , optionally and optionally with a :\n• \n• None Let be the result of running this's get the content attribute.\n• If is not null:\n• None Let be the result of integer parsing if the reflected IDL attribute is not limited to only non-negative numbers; otherwise the result of non-negative integer parsing .\n• None If is not an error and is within the range, then return .\n• None If the reflected IDL attribute has a default value, then return .\n• None If the reflected IDL attribute is limited to only non-negative numbers, then return −1.\n• \n• None If the reflected IDL attribute is limited to only non-negative numbers and the given value is negative, then throw an \" \" .\n• None Run this's set the content attribute with the given value converted to the shortest possible string representing the number as a valid integer.\n\nIf a reflected IDL attribute has the type , optionally , limited to only positive numbers with fallback , or [ , ], and optionally with a default value :\n• \n• None Let be the result of running this's get the content attribute.\n• None If the reflected IDL attribute is limited to only positive numbers or limited to only positive numbers with fallback, then set to 1.\n• None If the reflected IDL attribute is clamped to the range, then set to .\n• None Let be 2147483647 if the reflected IDL attribute is not clamped to the range; otherwise .\n• If is not null:\n• None Let be the result of non-negative integer parsing .\n• None If is not an error and is in the range to , inclusive, then return .\n• If is not an error and the reflected IDL attribute is clamped to the range:\n• None If is less than , then return .\n• None If the reflected IDL attribute has a default value, then return .\n• \n• None If the reflected IDL attribute is limited to only positive numbers and the given value is 0, then throw an \" \" .\n• None If the reflected IDL attribute is limited to only positive numbers or limited to only positive numbers with fallback, then set to 1.\n• None If the reflected IDL attribute has a default value, then set to .\n• None If the given value is in the range to 2147483647, inclusive, then set to it.\n• None Run this's set the content attribute with converted to the shortest possible string representing the number as a valid non-negative integer. Clamped to the range has no effect on the setter steps.\n\nIf a reflected IDL attribute has the type , optionally limited to only positive numbers and optionally with a default value :\n• \n• None Let be the result of running this's get the content attribute.\n• If is not null:\n• None Let be the result of floating-point number parsing .\n• None If is not an error and is greater than 0, then return .\n• None If is not an error and the reflected IDL attribute is not limited to only positive numbers, then return .\n• None If the reflected IDL attribute has a default value, then return .\n• \n• None If the reflected IDL attribute is limited to only positive numbers and the given value is not greater than 0, then return.\n• None Run this's set the content attribute with the given value, converted to the best representation of the number as a floating-point number.\n\nThe values Infinity and Not-a-Number (NaN) values throw an exception on setting, as defined in . [WEBIDL]\n\nIf a reflected IDL attribute has the type , then its getter steps are to return a object whose associated element is this and associated attribute's local name is the reflected content attribute name. Specification authors cannot use support for IDL attributes of this type.\n\nIf a reflected IDL attribute has the type , where is either or an interface that inherits from , then with being the reflected content attribute name:\n• None Its reflected target has an , which is a weak reference to an element or null. It is initially null.\n• Its reflected target has a get the -associated element algorithm, that runs these steps:\n• None Let be the result of running 's get the element.\n• None Let be the result of running 's get the content attribute.\n• If 's explicitly set -element is not null:\n• None If 's explicitly set -element is a descendant of any of 's shadow-including ancestors, then return 's explicitly set -element.\n• Otherwise, if is not null, return the first element , in tree order, that meets the following criteria:\n• None 's root is the same as 's root; If no such element exists, then return null.\n• None The getter steps are to return the result of running this's get the -associated element.\n• \n• If the given value is null, then:\n• None Run this's set the content attribute with the empty string.\n• None Set this's explicitly set -element to a weak reference to the given value.\n• For element reflected targets only: the following attribute change steps, given , , , , and , are used to synchronize between the content attribute and the IDL attribute:\n• None If is not or is not null, then return.\n\nReflected IDL attributes of this type are strongly encouraged to have their identifier end in \" \" for consistency.\n\nIf a reflected IDL attribute has the type , where is either or an interface that inherits from , then with being the reflected content attribute name:\n• None Its reflected target has an , which is either a list of weak references to elements or null. It is initially null.\n• None Its reflected target has a , which is a list of elements. It is initially « ».\n• None Its reflected target has a , which is a . It is initially null.\n• Its reflected target has a get the -associated elements algorithm, which runs these steps:\n• None Let be an empty list.\n• None Let be the result of running 's get the element.\n• If 's explicitly set -elements is not null:\n• For each in 's explicitly set -elements:\n• None If is not a descendant of any of 's shadow-including ancestors, then continue.\n• \n• None Let be the result of running 's get the content attribute.\n• None If is null, then return null.\n• None Let be , split on ASCII whitespace.\n• For each of :\n• Let be the first element, in tree order, that meets the following criteria:\n• None 's root is the same as 's root; If no such element exists, then continue.\n• \n• None Let be the result of running this's get the -associated elements.\n• None If the contents of is equal to the contents of this's cached -associated elements, then return this's cached -associated elements object.\n• None Let be , converted to a . This extra caching layer is necessary to preserve the invariant that .\n• \n• If the given value is null:\n• None Run this's set the content attribute with the empty string.\n• None Let be an empty list.\n• For each in the given value:\n• For element reflected targets only: the following attribute change steps, given , , , , and , are used to synchronize between the content attribute and the IDL attribute:\n• None If is not or is not null, then return.\n\nReflected IDL attributes of this type are strongly encouraged to have their identifier end in \" \" for consistency.\n\nReflection is primarily about improving web developer ergonomics by giving them typed access to content attributes through reflected IDL attributes. The ultimate source of truth, which the web platform builds upon, is the content attributes themselves. That is, specification authors must not use the reflected IDL attribute getter or setter steps, but instead must use the content attribute presence and value. (Or an abstraction on top, such as the state of an enumerated attribute.)\n\nTwo important exceptions to this are reflected IDL attributes whose type is one of the following:\n• None , where is either or an interface that inherits from\n• None , where is either or an interface that inherits from\n\nFor those, specification authors must use the reflected target's get the -associated element and get the -associated elements, respectively. The content attribute presence and value must not be used as they cannot be fully synchronized with the reflected IDL attribute.\n\nA reflected target's explicitly set -element, explicitly set -elements, cached -associated elements, and cached -associated elements object are to be treated as internal implementation details and not to be built upon.\n\nThe and interfaces are collections derived from the interface. The interface is a collection, but is not so derived.\n\nThe interface is used for the legacy attribute. It operates similarly to ; the main differences are that it allows a staggering variety of different (ab)uses of its methods to all end up returning something, and that it can be called as a function as an alternative to property access.\n\nAll objects are rooted at a and have a filter that matches all elements, so the elements represented by the collection of an object consist of all the descendant elements of the root .\n\nObjects that implement the interface are legacy platform objects with an additional [[Call]] internal method described in the section below. They also have an [[IsHTMLDDA]] internal slot.\n\nThe object's supported property indices are as defined for objects.\n\nThe supported property names consist of the non-empty values of all the attributes of all the elements represented by the collection, and the non-empty values of all the attributes of all the \"all\"-named elements represented by the collection, in tree order, ignoring later duplicates, with the of an element preceding its if it contributes both, they differ from each other, and neither is the duplicate of an earlier entry.\n\nThe getter steps are to return the number of nodes represented by the collection.\n\nThe indexed property getter must return the result of getting the \"all\"-indexed element from this given the passed index.\n\nThe method steps are to return the result of getting the \"all\"-named element(s) from this given .\n• None If was not provided, return null.\n• None Return the result of getting the \"all\"-indexed or named element(s) from this, given .\n\nThe following elements are : , , , , , , , , , , , , , and\n\nTo from an given an index , return the th element in , or null if there is no such th element.\n\nTo from an given a name , perform the following steps:\n• None If is the empty string, return null.\n• Let be an object rooted at the same as , whose filter matches only elements that are either:\n• None \"all\"-named elements with a attribute equal to , or,\n• None elements with an ID equal to .\n• None If there is exactly one element in , then return that element.\n• None Otherwise, if is empty, return null.\n\nTo get the \"all\"-indexed or named element(s) from an given :\n• None If , converted to a JavaScript String value, is an array index property name, return the result of getting the \"all\"-indexed element from given the number represented by .\n• None Return the result of getting the \"all\"-named element(s) from given .\n• None If 's size is zero, or if [0] is undefined, return null.\n• None Let be the result of converting [0] to a .\n• None Let be the result of getting the \"all\"-indexed or named element(s) from this given .\n• None Return the result of converting to an ECMAScript value.\n\nThe is ignored, and thus code such as will still search for elements. ( does not exist, since does not inherit from .)\n\nThe interface is used for collections of listed elements in elements.\n\nThe object's supported property indices are as defined for objects.\n\nThe supported property names consist of the non-empty values of all the and attributes of all the elements represented by the collection, in tree order, ignoring later duplicates, with the of an element preceding its if it contributes both, they differ from each other, and neither is the duplicate of an earlier entry.\n\nThe method must act according to the following algorithm:\n• If is the empty string, return null and stop the algorithm.\n• If, at the time the method is called, there is exactly one node in the collection that has either an attribute or a attribute equal to , then return that node and stop the algorithm.\n• Otherwise, if there are no nodes in the collection that have either an attribute or a attribute equal to , then return null and stop the algorithm.\n• Otherwise, create a new object representing a live view of the object, further filtered so that the only nodes in the object are those that have either an attribute or a attribute equal to . The nodes in the object must be sorted in tree order.\n\nMembers of the interface inherited from the interface must behave as they would on a object.\n\nThe IDL attribute on the object, on getting, must return the value returned by running the following steps:\n• None Let be the first element in tree order represented by the object that is an element whose attribute is in the Radio Button state and whose checkedness is true. Otherwise, let it be null.\n• None If is null, return the empty string.\n• None If is an element with no attribute, return the string \" \".\n• None Otherwise, return the value of 's attribute.\n\nOn setting, the IDL attribute must run the following steps:\n• None If the new value is the string \" \": let be the first element in tree order represented by the object that is an element whose attribute is in the Radio Button state and whose content attribute is either absent, or present and equal to the new value, if any. If no such element exists, then instead let be null. Otherwise: let be the first element in tree order represented by the object that is an element whose attribute is in the Radio Button state and whose content attribute is present and equal to the new value, if any. If no such element exists, then instead let be null.\n• None If is not null, then set its checkedness to true.\n\nThe interface is used for collections of elements. It is always rooted on a element and has attributes and methods that manipulate that element's descendants.\n\nThe object's supported property indices are as defined for objects.\n\nThe getter steps are to return the number of nodes represented by the collection.\n• None Let be the number of nodes represented by the collection.\n• If the given value is greater than , then:\n• None If the given value is greater than 100,000, then return.\n• None Append new elements with no attributes and no child nodes to the element on which this is rooted.\n• If the given value is less than , then:\n• None Remove the last nodes in the collection from their parent nodes.\n\nSetting never removes or adds any elements, and never adds new children to existing elements (though it can remove children from them).\n\nThe supported property names consist of the non-empty values of all the and attributes of all the elements represented by the collection, in tree order, ignoring later duplicates, with the of an element preceding its if it contributes both, they differ from each other, and neither is the duplicate of an earlier entry.\n\nWhen the user agent is to set the value of a new indexed property or set the value of an existing indexed property for a given property index to a new value , it must run the following algorithm:\n• None If is null, invoke the steps for the method with as the argument, and return.\n• None Let be the number of nodes represented by the collection.\n• None If is greater than zero, then append a consisting of -1 new elements with no attributes and no child nodes to the element on which the is rooted.\n• None If is greater than or equal to zero, append to the element. Otherwise, replace the th element in the collection by .\n\nThe method must act according to the following algorithm:\n• None If is an ancestor of the element on which the is rooted, then throw a \" \" .\n• None If is an element, but that element isn't a descendant of the element on which the is rooted, then throw a \" \" .\n• None If and are the same element, then return.\n• None If is a node, then let be that node. Otherwise, if is an integer, and there is a th node in the collection, let be that node. Otherwise, let be null.\n• None If is not null, let be the parent node of . Otherwise, let be the element on which the is rooted.\n\nThe method must act according to the following algorithm:\n• None If the number of nodes represented by the collection is zero, return.\n• None If is not a number greater than or equal to 0 and less than the number of nodes represented by the collection, return.\n• None Let be the th element in the collection.\n\nThe IDL attribute must act like the identically named attribute on the element on which the is rooted\n\nThe interface is a non-fashionable retro way of representing a list of strings.\n\nNew APIs must use or equivalent rather than .\n\nEach object has an associated list.\n\nThe interface supports indexed properties. The supported property indices are the indices of this's associated list.\n\nThe getter steps are to return this's associated list's size.\n\nThe method steps are to return the th item in this's associated list, or null if plus one is greater than this's associated list's size.\n\nThe method steps are to return true if this's associated list contains , and false otherwise.\n\nTo support passing JavaScript objects, including platform objects, across realm boundaries, this specification defines the following infrastructure for serializing and deserializing objects, including in some cases transferring the underlying data instead of copying it. Collectively this serialization/deserialization process is known as \"structured cloning\", although most APIs perform separate serialization and deserialization steps. (With the notable exception being the method.)\n\nThis section uses the terminology and typographic conventions from the JavaScript specification. [JAVASCRIPT]\n\nSerializable objects support being serialized, and later deserialized, in a way that is independent of any given realm. This allows them to be stored on disk and later restored, or cloned across agent and even agent cluster boundaries.\n\nNot all objects are serializable objects, and not all aspects of objects that are serializable objects are necessarily preserved when they are serialized.\n\nPlatform objects can be serializable objects if their primary interface is decorated with the IDL extended attribute. Such interfaces must also define the following algorithms:\n\nIt is up to the definition of individual platform objects to determine what data is serialized and deserialized by these steps. Typically the steps are very symmetric.\n\nThe extended attribute must take no arguments, and must only appear on an interface. It must not appear more than once on an interface.\n\nFor a given platform object, only the object's primary interface is considered during the (de)serialization process. Thus, if inheritance is involved in defining the interface, each -annotated interface in the inheritance chain needs to define standalone serialization steps and deserialization steps, including taking into account any important data that might come from inherited interfaces.\n\nObjects defined in the JavaScript specification are handled by the StructuredSerialize abstract operation directly.\n\nOriginally, this specification defined the concept of \"cloneable objects\", which could be cloned from one realm to another. However, to better specify the behavior of certain more complex situations, the model was updated to make the serialization and deserialization explicit.\n\nTransferable objects support being transferred across agents. Transferring is effectively recreating the object while sharing a reference to the underlying data and then detaching the object being transferred. This is useful to transfer ownership of expensive resources. Not all objects are transferable objects and not all aspects of objects that are transferable objects are necessarily preserved when transferred.\n\nTransferring is an irreversible and non-idempotent operation. Once an object has been transferred, it cannot be transferred, or indeed used, again.\n\nPlatform objects can be transferable objects if their primary interface is decorated with the IDL extended attribute. Such interfaces must also define the following algorithms:\n\nIt is up to the definition of individual platform objects to determine what data is transferred by these steps. Typically the steps are very symmetric.\n\nThe extended attribute must take no arguments, and must only appear on an interface. It must not appear more than once on an interface.\n\nFor a given platform object, only the object's primary interface is considered during the transferring process. Thus, if inheritance is involved in defining the interface, each -annotated interface in the inheritance chain needs to define standalone transfer steps and transfer-receiving steps, including taking into account any important data that might come from inherited interfaces.\n\nPlatform objects that are transferable objects have a internal slot. This is used to ensure that once a platform object has been transferred, it cannot be transferred again.\n\nObjects defined in the JavaScript specification are handled by the StructuredSerializeWithTransfer abstract operation directly.\n\nThe StructuredSerializeInternal abstract operation takes as input a JavaScript value and serializes it to a realm-independent form, represented here as a Record. This serialized form has all the information necessary to later deserialize into a new JavaScript value in a different realm.\n\nThis process can throw an exception, for example when trying to serialize un-serializable objects.\n• If was not supplied, let be an empty map. The purpose of the map is to avoid serializing objects twice. This ends up preserving cycles and the identity of duplicate objects in graphs.\n• None If is undefined, null, a Boolean, a Number, a BigInt, or a String, then return { [[Type]]: \"primitive\", [[Value]]: }.\n• None If is a Symbol, then throw a \" \" .\n• None Let be an uninitialized value.\n• None If has a [[BooleanData]] internal slot, then set to { [[Type]]: \"Boolean\", [[BooleanData]]: .[[BooleanData]] }.\n• None Otherwise, if has a [[NumberData]] internal slot, then set to { [[Type]]: \"Number\", [[NumberData]]: .[[NumberData]] }.\n• None Otherwise, if has a [[BigIntData]] internal slot, then set to { [[Type]]: \"BigInt\", [[BigIntData]]: .[[BigIntData]] }.\n• None Otherwise, if has a [[StringData]] internal slot, then set to { [[Type]]: \"String\", [[StringData]]: .[[StringData]] }.\n• None Otherwise, if has a [[DateValue]] internal slot, then set to { [[Type]]: \"Date\", [[DateValue]]: .[[DateValue]] }.\n• None Otherwise, if has a [[RegExpMatcher]] internal slot, then set to { [[Type]]: \"RegExp\", [[RegExpMatcher]]: .[[RegExpMatcher]], [[OriginalSource]]: .[[OriginalSource]], [[OriginalFlags]]: .[[OriginalFlags]] }.\n• Otherwise, if has an [[ArrayBufferData]] internal slot, then:\n• If IsSharedArrayBuffer( ) is true, then:\n• If the current settings object's cross-origin isolated capability is false, then throw a \" \" . This check is only needed when serializing (and not when deserializing) as the cross-origin isolated capability cannot change over time and a cannot leave an agent cluster.\n• None If is true, then throw a \" \" .\n• None If has an [[ArrayBufferMaxByteLength]] internal slot, then set to { [[Type]]: \"GrowableSharedArrayBuffer\", [[ArrayBufferData]]: .[[ArrayBufferData]], [[ArrayBufferByteLengthData]]: .[[ArrayBufferByteLengthData]], [[ArrayBufferMaxByteLength]]: .[[ArrayBufferMaxByteLength]], [[AgentCluster]]: the surrounding agent's agent cluster }.\n• None Otherwise, set to { [[Type]]: \"SharedArrayBuffer\", [[ArrayBufferData]]: .[[ArrayBufferData]], [[ArrayBufferByteLength]]: .[[ArrayBufferByteLength]], [[AgentCluster]]: the surrounding agent's agent cluster }.\n• \n• None If IsDetachedBuffer( ) is true, then throw a \" \" .\n• This can throw a exception upon allocation failure.\n• None If has an [[ArrayBufferMaxByteLength]] internal slot, then set to { [[Type]]: \"ResizableArrayBuffer\", [[ArrayBufferData]]: , [[ArrayBufferByteLength]]: , [[ArrayBufferMaxByteLength]]: .[[ArrayBufferMaxByteLength]] }.\n• Otherwise, if has a [[ViewedArrayBuffer]] internal slot, then:\n• None If IsArrayBufferViewOutOfBounds( ) is true, then throw a \" \" .\n• None Let be the value of 's [[ViewedArrayBuffer]] internal slot.\n• None If has a [[DataView]] internal slot, then set to { [[Type]]: \"ArrayBufferView\", [[Constructor]]: \"DataView\", [[ArrayBufferSerialized]]: , [[ByteLength]]: .[[ByteLength]], [[ByteOffset]]: .[[ByteOffset]] }.\n• Otherwise, if has [[MapData]] internal slot, then:\n• Otherwise, if has [[SetData]] internal slot, then:\n• Otherwise, if has an [[ErrorData]] internal slot and is not a platform object, then:\n• None Let be ? Get( , \"name\").\n• None If is not one of \"Error\", \"EvalError\", \"RangeError\", \"ReferenceError\", \"SyntaxError\", \"TypeError\", or \"URIError\", then set to \"Error\".\n• None Let be undefined if IsDataDescriptor( ) is false, and ? ToString( .[[Value]]) otherwise.\n• User agents should attach a serialized representation of any interesting accompanying data which are not yet specified, notably the property, to . See the proposal for in-progress work on specifying this data. [JSERRORSTACKS]\n• Otherwise, if is an Array exotic object, then:\n• None Let be .[[Value]].\n• Otherwise, if is a platform object that is a serializable object:\n• None If has a [[Detached]] internal slot whose value is true, then throw a \" \" .\n• None Let be the identifier of the primary interface of .\n• None Otherwise, if is a platform object, then throw a \" \" .\n• None Otherwise, if IsCallable( ) is true, then throw a \" \" .\n• Otherwise, if has any internal slot other than [[Prototype]], [[Extensible]], or [[PrivateElements]], then throw a \" \" .\n• Otherwise, if is an exotic object and is not the %Object.prototype% intrinsic object associated with any realm, then throw a \" \" .\n• %Object.prototype% will end up being handled via this step and subsequent steps. The end result is that its exoticness is ignored, and after deserialization the result will be an empty object (not an immutable prototype exotic object).\n• If is true, then:\n• If has a [[MapData]] internal slot, then:\n• None Let be a new empty List.\n• For each Record { [[Key]], [[Value]] } of .[[MapData]]:\n• None Let be a new Record { [[Key]]: .[[Key]], [[Value]]: .[[Value]] }.\n• None If .[[Key]] is not the special value empty, append to .\n• For each Record { [[Key]], [[Value]] } of :\n• None Let be ? StructuredSerializeInternal( .[[Value]], , ).\n• Otherwise, if has a [[SetData]] internal slot, then:\n• None Let be a new empty List.\n• For each of .[[SetData]]:\n• None If is not the special value empty, append to .\n• For each of :\n• Otherwise, if is a platform object that is a serializable object, then perform the serialization steps for 's primary interface, given , , and . The serialization steps may need to perform a . This is an operation which takes as input a value , and returns StructuredSerializeInternal( , , ). (In other words, a sub-serialization is a specialization of StructuredSerializeInternal to be consistent within this invocation.)\n• Otherwise, for each in ! EnumerableOwnProperties( , key):\n• If ! HasOwnProperty( , ) is true, then:\n• None Let be ? .[[Get]]( , ).\n\nThe StructuredDeserialize abstract operation takes as input a Record , which was previously produced by StructuredSerialize or StructuredSerializeForStorage, and deserializes it into a new JavaScript value, created in .\n\nThis process can throw an exception, for example when trying to allocate memory for the new objects (especially objects).\n• If was not supplied, let be an empty map. The purpose of the map is to avoid deserializing objects twice. This ends up preserving cycles and the identity of duplicate objects in graphs.\n• None Let be an uninitialized value.\n• None If .[[Type]] is \"primitive\", then set to .[[Value]].\n• None Otherwise, if .[[Type]] is \"Boolean\", then set to a new Boolean object in whose [[BooleanData]] internal slot value is .[[BooleanData]].\n• None Otherwise, if .[[Type]] is \"Number\", then set to a new Number object in whose [[NumberData]] internal slot value is .[[NumberData]].\n• None Otherwise, if .[[Type]] is \"BigInt\", then set to a new BigInt object in whose [[BigIntData]] internal slot value is .[[BigIntData]].\n• None Otherwise, if .[[Type]] is \"String\", then set to a new String object in whose [[StringData]] internal slot value is .[[StringData]].\n• None Otherwise, if .[[Type]] is \"Date\", then set to a new Date object in whose [[DateValue]] internal slot value is .[[DateValue]].\n• None Otherwise, if .[[Type]] is \"RegExp\", then set to a new RegExp object in whose [[RegExpMatcher]] internal slot value is .[[RegExpMatcher]], whose [[OriginalSource]] internal slot value is .[[OriginalSource]], and whose [[OriginalFlags]] internal slot value is .[[OriginalFlags]].\n• Otherwise, if .[[Type]] is \"SharedArrayBuffer\", then:\n• None If 's corresponding agent cluster is not .[[AgentCluster]], then throw a \" \" .\n• None Otherwise, set to a new SharedArrayBuffer object in whose [[ArrayBufferData]] internal slot value is .[[ArrayBufferData]] and whose [[ArrayBufferByteLength]] internal slot value is .[[ArrayBufferByteLength]].\n• Otherwise, if .[[Type]] is \"GrowableSharedArrayBuffer\", then:\n• None If 's corresponding agent cluster is not .[[AgentCluster]], then throw a \" \" .\n• None Otherwise, set to a new SharedArrayBuffer object in whose [[ArrayBufferData]] internal slot value is .[[ArrayBufferData]], whose [[ArrayBufferByteLengthData]] internal slot value is .[[ArrayBufferByteLengthData]], and whose [[ArrayBufferMaxByteLength]] internal slot value is .[[ArrayBufferMaxByteLength]].\n• Otherwise, if .[[Type]] is \"ArrayBuffer\", then set to a new ArrayBuffer object in whose [[ArrayBufferData]] internal slot value is .[[ArrayBufferData]], and whose [[ArrayBufferByteLength]] internal slot value is .[[ArrayBufferByteLength]]. If this throws an exception, catch it, and then throw a \" \" . This step might throw an exception if there is not enough memory available to create such an ArrayBuffer object.\n• Otherwise, if .[[Type]] is \"ResizableArrayBuffer\", then set to a new ArrayBuffer object in whose [[ArrayBufferData]] internal slot value is .[[ArrayBufferData]], whose [[ArrayBufferByteLength]] internal slot value is .[[ArrayBufferByteLength]], and whose [[ArrayBufferMaxByteLength]] internal slot value is .[[ArrayBufferMaxByteLength]]. If this throws an exception, catch it, and then throw a \" \" . This step might throw an exception if there is not enough memory available to create such an ArrayBuffer object.\n• Otherwise, if .[[Type]] is \"ArrayBufferView\", then:\n• None If .[[Constructor]] is \"DataView\", then set to a new DataView object in whose [[ViewedArrayBuffer]] internal slot value is , whose [[ByteLength]] internal slot value is .[[ByteLength]], and whose [[ByteOffset]] internal slot value is .[[ByteOffset]].\n• None Otherwise, set to a new typed array object in , using the constructor given by .[[Constructor]], whose [[ViewedArrayBuffer]] internal slot value is , whose [[TypedArrayName]] internal slot value is .[[Constructor]], whose [[ByteLength]] internal slot value is .[[ByteLength]], whose [[ByteOffset]] internal slot value is .[[ByteOffset]], and whose [[ArrayLength]] internal slot value is .[[ArrayLength]].\n• Otherwise, if .[[Type]] is \"Map\", then:\n• None Set to a new Map object in whose [[MapData]] internal slot value is a new empty List.\n• Otherwise, if .[[Type]] is \"Set\", then:\n• None Set to a new Set object in whose [[SetData]] internal slot value is a new empty List.\n• Otherwise, if .[[Type]] is \"Array\", then:\n• Otherwise, if .[[Type]] is \"Object\", then:\n• None Set to a new Object in .\n• Otherwise, if .[[Type]] is \"Error\", then:\n• None If .[[Name]] is \"EvalError\", then set to %EvalError.prototype%.\n• None If .[[Name]] is \"RangeError\", then set to %RangeError.prototype%.\n• None If .[[Name]] is \"ReferenceError\", then set to %ReferenceError.prototype%.\n• None If .[[Name]] is \"SyntaxError\", then set to %SyntaxError.prototype%.\n• None If .[[Name]] is \"TypeError\", then set to %TypeError.prototype%.\n• None If .[[Name]] is \"URIError\", then set to %URIError.prototype%.\n• None Let be PropertyDescriptor{ [[Value]]: , [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }.\n• None If is not undefined, then perform ! OrdinaryDefineOwnProperty( , \" \", ).\n• None Any interesting accompanying data attached to should be deserialized and attached to .\n• \n• None If the interface identified by is not exposed in , then throw a \" \" .\n• None Set to a new instance of the interface identified by , created in .\n• If is true, then:\n• If .[[Type]] is \"Map\", then:\n• For each Record { [[Key]], [[Value]] } of .[[MapData]]:\n• None Let be ? StructuredDeserialize( .[[Value]], , ).\n• Otherwise, if .[[Type]] is \"Set\", then:\n• For each of .[[SetData]]:\n• Otherwise, if .[[Type]] is \"Array\" or \"Object\", then:\n• For each Record { [[Key]], [[Value]] } of .[[Properties]]:\n• None Let be ? StructuredDeserialize( .[[Value]], , ).\n• \n• Perform the appropriate deserialization steps for the interface identified by .[[Type]], given , , and . The deserialization steps may need to perform a . This is an operation which takes as input a previously-serialized Record , and returns StructuredDeserialize( , , ). (In other words, a sub-deserialization is a specialization of StructuredDeserialize to be consistent within this invocation.)\n• Let be an empty map. In addition to how it is used normally by StructuredSerializeInternal, in this algorithm is also used to ensure that StructuredSerializeInternal ignores items in , and let us do our own handling instead.\n• For each of :\n• None If has neither an [[ArrayBufferData]] internal slot nor a [[Detached]] internal slot, then throw a \" \" .\n• None If has an [[ArrayBufferData]] internal slot and IsSharedArrayBuffer( ) is true, then throw a \" \" .\n• Set [ ] to { [[Type]]: an uninitialized value }. is not transferred yet as transferring has side effects and StructuredSerializeInternal needs to be able to throw first.\n• None Let be a new empty List.\n• For each of :\n• None If has an [[ArrayBufferData]] internal slot and IsDetachedBuffer( ) is true, then throw a \" \" .\n• None If has a [[Detached]] internal slot and .[[Detached]] is true, then throw a \" \" .\n• If has an [[ArrayBufferData]] internal slot, then:\n• If has an [[ArrayBufferMaxByteLength]] internal slot, then:\n• Specifications can use the [[ArrayBufferDetachKey]] internal slot to prevent s from being detached. This is used in , for example. [WASMJS]\n• \n• None Assert: is a platform object that is a transferable object.\n• None Let be the identifier of the primary interface of .\n• None Perform the appropriate transfer steps for the interface identified by , given and .\n• Let be an empty map. Analogous to StructuredSerializeWithTransfer, in addition to how it is used normally by StructuredDeserialize, in this algorithm is also used to ensure that StructuredDeserialize ignores items in .[[TransferDataHolders]], and let us do our own handling instead.\n• None Let be a new empty List.\n• For each of .[[TransferDataHolders]]:\n• None Let be an uninitialized value.\n• If .[[Type]] is \"ArrayBuffer\", then set to a new ArrayBuffer object in whose [[ArrayBufferData]] internal slot value is .[[ArrayBufferData]], and whose [[ArrayBufferByteLength]] internal slot value is .[[ArrayBufferByteLength]]. In cases where the original memory occupied by [[ArrayBufferData]] is accessible during the deserialization, this step is unlikely to throw an exception, as no new memory needs to be allocated: the memory occupied by [[ArrayBufferData]] is instead just getting transferred into the new ArrayBuffer. This could be true, for example, when both the source and target realms are in the same process.\n• Otherwise, if .[[Type]] is \"ResizableArrayBuffer\", then set to a new ArrayBuffer object in whose [[ArrayBufferData]] internal slot value is .[[ArrayBufferData]], whose [[ArrayBufferByteLength]] internal slot value is .[[ArrayBufferByteLength]], and whose [[ArrayBufferMaxByteLength]] internal slot value is .[[ArrayBufferMaxByteLength]]. For the same reason as the previous step, this step is also unlikely to throw an exception.\n• \n• None If the interface identified by is not exposed in , then throw a \" \" .\n• None Set to a new instance of the interface identified by , created in .\n• None Perform the appropriate transfer-receiving steps for the interface identified by given and .\n\nPerforming serialization and transferring from other specifications\n\nOther specifications may use the abstract operations defined here. The following provides some guidance on when each abstract operation is typically useful, with examples.\n\nIn general, call sites may pass in Web IDL values instead of JavaScript values; this is to be understood to perform an implicit conversion to the JavaScript value before invoking these algorithms.\n\nCall sites that are not invoked as a result of author code synchronously calling into a user agent method must take care to properly prepare to run script and prepare to run a callback before invoking StructuredSerialize, StructuredSerializeForStorage, or StructuredSerializeWithTransfer abstract operations, if they are being performed on arbitrary objects. This is necessary because the serialization process can invoke author-defined accessors as part of its final deep-serialization steps, and these accessors could call into operations that rely on the entry and incumbent concepts being properly set up.\n\nperforms StructuredSerializeWithTransfer on its arguments, but is careful to do so immediately, inside the synchronous portion of its algorithm. Thus it is able to use the algorithms without needing to prepare to run script and prepare to run a callback.\n\nIn contrast, a hypothetical API that used StructuredSerialize to serialize some author-supplied object periodically, directly from a task on the event loop, would need to ensure it performs the appropriate preparations beforehand. As of this time, we know of no such APIs on the platform; usually it is simpler to perform the serialization ahead of time, as a synchronous consequence of author code.\n\nEvery XML and HTML document in an HTML UA is represented by a object. [DOM]\n\nThe object's is defined in . It is initially set when the object is created, but can change during the lifetime of the object; for example, it changes when the user navigates to a fragment on the page and when the method is called with a new URL. [DOM]\n\nInteractive user agents typically expose the object's URL in their user interface. This is the primary mechanism by which a user can tell if a site is attempting to impersonate another.\n\nThe object's is defined in . It is initially set when the object is created, and can change during the lifetime of the only upon setting . A 's origin can differ from the origin of its URL; for example when a child navigable is created, its active document's origin is inherited from its parent's active document's origin, even though its active document's URL is . [DOM]\n\nWhen a is created by a script using the or methods, the is ready for post-load tasks immediately.\n\nis a string (representing a URL) that can be set when the is created. If it is not explicitly set, then its value is the empty string.\n\nEach has a (a policy container), initially a new policy container, which contains policies which apply to the .\n\nEach has a , which is a permissions policy, which is initially empty.\n\nEach has a , which is a module map, initially empty.\n\nEach has an , which is an opener policy, initially a new opener policy.\n\nEach has an , which is a boolean, initially false.\n\nEach has a , which is a navigation ID or null, initially null.\n\nAs the name indicates, this is used for interfacing with the specification, which needs to be informed about certain occurrences during the early parts of the 's lifecycle, in a way that ties them to the original navigation ID used when the navigation that created this was the ongoing navigation. This eventually gets set back to null, after considers the loading process to be finished. [BIDI]\n\nEach has an , which is a URL or null, initially null.\n\nThis is only populated for \" \"-schemed s.\n\nEach has a , which is a set of not restored reason details, initially empty.\n\nEach has an , which is a list of elements, initially empty.\n\ndefines the mixin, which this specification extends.\n\nThe attribute must return the document's referrer.\n\nThe attribute represents the cookies of the resource identified by the document's URL.\n\nA object that falls into one of the following conditions is a :\n• A whose URL's scheme is not an HTTP(S) scheme.\n\nOn getting, if the document is a cookie-averse object, then the user agent must return the empty string. Otherwise, if the 's origin is an opaque origin, the user agent must throw a \" \" . Otherwise, the user agent must return the cookie-string for the document's URL for a \"non-HTTP\" API, decoded using UTF-8 decode without BOM. [COOKIES]\n\nOn setting, if the document is a cookie-averse object, then the user agent must do nothing. Otherwise, if the 's origin is an opaque origin, the user agent must throw a \" \" . Otherwise, the user agent must act as it would when receiving a set-cookie-string for the document's URL via a \"non-HTTP\" API, consisting of the new value encoded as UTF-8. [COOKIES] [ENCODING]\n\nSince the attribute is accessible across frames, the path restrictions on cookies are only a tool to help manage which cookies are sent to which parts of the site, and are not in any way a security feature.\n\nThe attribute's getter and setter synchronously access shared state. Since there is no locking mechanism, other browsing contexts in a multiprocess user agent can modify cookies while scripts are running. A site could, for instance, try to read a cookie, increment its value, then write it back out, using the new value of the cookie as a unique identifier for the session; if the site does this twice in two different browser windows at the same time, it might end up using the same \"unique\" identifier for both sessions, with potentially disastrous effects.\n\nThe attribute, on getting, must return the date and time of the 's source file's last modification, in the user's local time zone, in the following format:\n• None The month component of the date.\n• None The day component of the date.\n• None The year component of the date.\n• None The hours component of the time.\n• None The minutes component of the time.\n• None The seconds component of the time.\n\nAll the numeric components above, other than the year, must be given as two ASCII digits representing the number in base ten, zero-padded if necessary. The year must be given as the shortest possible string of four or more ASCII digits representing the number in base ten, zero-padded if necessary.\n\nThe 's source file's last modification date and time must be derived from relevant features of the networking protocols used, e.g. from the value of the HTTP ` ` header of the document, or from metadata in the file system for local files. If the last modification date and time are not known, the attribute must return the current date and time in the above format.\n\nFor objects created via the create and initialize a object algorithm, this will be immediately reset to \" \" before any script can observe the value of . This default applies to other cases such as initial s or s without a browsing context.\n\nThe getter steps are to return this's current document readiness.\n\nTo for to :\n• If is associated with an HTML parser, then:\n• None Let be the current high resolution time given 's relevant global object.\n• None If is \" \", and 's load timing info's DOM complete time is 0, then set 's load timing info's DOM complete time to .\n• None Otherwise, if is \" \", and 's load timing info's DOM interactive time is 0, then set 's load timing info's DOM interactive time to .\n\nA is said to have an if it is associated with an HTML parser or an XML parser that has not yet been stopped or aborted.\n\nThe struct has the following items:\n\nThe struct has the following items:\n\nEach has a , a set of elements, initially the empty set.\n\nA if 's content type is \" \" and the body element of is null.\n\nA is if both of the following are true:\n• None 's render-blocking element set is non-empty, or allows adding render-blocking elements.\n• None The current high resolution time given 's relevant global object has not exceeded an implementation-defined timeout value.\n\nAn element is if 's node document is render-blocked, and is in 's render-blocking element set.\n\nTo on an element :\n• None If allows adding render-blocking elements, then append to 's render-blocking element set.\n\nTo on an element :\n\nWhenever a render-blocking element becomes browsing-context disconnected, or 's blocking attribute's value is changed so that is no longer potentially render-blocking, then unblock rendering on .\n\nof a document is its document element, if it's an element, and null otherwise.\n\nof a document is the first element that is a child of the element, if there is one, or null otherwise.\n\nThe attribute, on getting, must return the element of the document (a element or null).\n\nof a document is the first element in the document (in tree order), if there is one, or null otherwise.\n\nThe attribute must, on getting, run the following algorithm:\n• None If the document element is an SVG element, then let be the child text content of the first SVG element that is a child of the document element.\n• None Otherwise, let be the child text content of the element, or the empty string if the element is null.\n\nOn setting, the steps corresponding to the first matching condition in the following list must be run:\n\nof a document is the first of the element's children that is either a element or a element, or null if there is no such element.\n\nThe attribute, on getting, must return the body element of the document (either a element, a element, or null). On setting, the following algorithm must be run:\n• If the new value is not a or element, then throw a \" \" .\n• Otherwise, if the new value is the same as the body element, return.\n• Otherwise, if the body element is not null, then replace the body element with the new value within the body element's parent and return.\n• Otherwise, if there is no document element, throw a \" \" .\n• Otherwise, the body element is null, but there's a document element. Append the new value to the document element.\n\nThe value returned by the getter is not always the one passed to the setter.\n\nThe attribute must return an rooted at the node, whose filter matches only elements.\n\nThe attribute must return an rooted at the node, whose filter matches only elements.\n\nThe attribute must return the same object as that returned by the attribute.\n\nThe attribute must return an rooted at the node, whose filter matches only elements with attributes and elements with attributes.\n\nThe attribute must return an rooted at the node, whose filter matches only elements.\n\nThe attribute must return an rooted at the node, whose filter matches only elements.\n\nThe method steps are to return a live containing all the HTML elements in that document that have a attribute whose value is identical to the argument, in tree order. When the method is invoked on a object again with the same argument, the user agent may return the same as the object returned by the earlier call. In other cases, a new object must be returned.\n\nThe attribute, on getting, must return the value to which it was most recently set. When the is created, the must be initialized to null.\n\nThis API has fallen out of favor in the implementer and standards community, as it globally exposes or SVG elements. As such, it is not available in newer contexts, such as when running module scripts or when running scripts in a shadow tree. We are looking into creating a new solution for identifying the running script in such contexts, which does not make it globally available: see issue #1013.\n\nThe interface supports named properties. The supported property names of a object at any moment consist of the following, in tree order according to the element that contributed them, ignoring later duplicates, and with values from attributes coming before values from attributes when the same element contributes both:\n• None the value of the content attribute for all exposed , , , , and exposed elements that have a non-empty content attribute and are in a document tree with as their root;\n• None the value of the content attribute for all exposed elements that have a non-empty content attribute and are in a document tree with as their root; and\n• None the value of the content attribute for all elements that have both a non-empty content attribute and a non-empty content attribute, and are in a document tree with as their root.\n\nTo determine the value of a named property for a , the user agent must return the value obtained using the following steps:\n• Let be the list of named elements with the name that are in a document tree with the as their root. There will be at least one such element, since the algorithm would otherwise not have been invoked by Web IDL.\n• None If has only one element, and that element is an element, and that element's content navigable is not null, then return the active of the element's content navigable.\n• Otherwise, if has only one element, return that element.\n• Otherwise, return an rooted at the node, whose filter matches only named elements with the name .\n\nwith the name , for the purposes of the above algorithm, are those that are either:\n• Exposed , , , , or exposed elements that have a content attribute whose value is , or\n• Exposed elements that have an content attribute whose value is , or\n• elements that have an content attribute whose value is , and that have a non-empty content attribute present also.\n\nAn or element is said to be if it has no exposed ancestor, and, for elements, is additionally either not showing its fallback content or has no or descendants.\n\nThe attribute on the interface is defined along with the content attribute.\n\nElements, attributes, and attribute values in HTML are defined (by this specification) to have certain meanings (semantics). For example, the element represents an ordered list, and the attribute represents the language of the content.\n\nThese definitions allow HTML processors, such as web browsers or search engines, to present and use documents and applications in a wide variety of contexts that the author might not have considered.\n\nAuthors must not use elements, attributes, or attribute values for purposes other than their appropriate intended semantic purpose, as doing so prevents software from correctly processing the page.\n\nAuthors must not use elements, attributes, or attribute values that are not permitted by this specification or other applicable specifications, as doing so makes it significantly harder for the language to be extended in the future.\n\nDOM nodes whose node document's browsing context is null are exempt from all document conformance requirements other than the HTML syntax requirements and XML syntax requirements.\n\nThrough scripting and using other mechanisms, the values of attributes, text, and indeed the entire structure of the document may change dynamically while a user agent is processing it. The semantics of a document at an instant in time are those represented by the state of the document at that instant in time, and the semantics of a document can therefore change over time. User agents must update their presentation of the document as this occurs.\n\nHTML has a element that describes a progress bar. If its \"value\" attribute is dynamically updated by a script, the UA would update the rendering to show the progress changing.\n\nThe nodes representing HTML elements in the DOM must implement, and expose to scripts, the interfaces listed for them in the relevant sections of this specification. This includes HTML elements in XML documents, even when those documents are in another context (e.g. inside an XSLT transform).\n\nElements in the DOM things; that is, they have intrinsic meaning, also known as semantics.\n\nFor example, an element represents an ordered list.\n\nElements can be (referred to) in some way, either explicitly or implicitly. One way that an element in the DOM can be explicitly referenced is by giving an attribute to the element, and then creating a hyperlink with that attribute's value as the fragment for the hyperlink's attribute value. Hyperlinks are not necessary for a reference, however; any manner of referring to the element in question will suffice.\n\nThe basic interface, from which all the HTML elements' interfaces inherit, and which must be used by elements that have no additional requirements, is the interface.\n\nThe interface holds methods and attributes related to a number of disparate features, and the members of this interface are therefore described in various different sections of this specification.\n\nThe element interface for an element with name in the HTML namespace is determined as follows:\n• None If is , , , , , , , or , then return .\n• None If is , , , , , , , , , , , or , then return .\n• None If is or , then return .\n• None Otherwise, if this specification defines an interface appropriate for the element type corresponding to the local name , then return that interface.\n• None If other applicable specifications define an appropriate interface for , then return the interface they define.\n• None If is a valid custom element name, then return .\n\nThe use of instead of in the case of valid custom element names is done to ensure that any potential future upgrades only cause a linear transition of the element's prototype chain, from to a subclass, instead of a lateral one, from to an unrelated subclass.\n\nFeatures shared between HTML and SVG elements use the interface mixin: [SVG]\n\nTo support the custom elements feature, all HTML elements have special constructor behavior. This is indicated via the IDL extended attribute. It indicates that the interface object for the given interface will have a specific behavior when called, as defined in detail below.\n\nThe extended attribute must take no arguments, and must only appear on constructor operations. It must appear only once on a constructor operation, and the interface must contain only the single, annotated constructor operation, and no others. The annotated constructor operation must be declared to take no arguments.\n\nInterfaces declared with constructor operations that are annotated with the extended attribute have the following overridden constructor steps:\n• If NewTarget is equal to the active function object, then throw a . This can occur when a custom element is defined using an element interface as its constructor: In this case, during the execution of (either explicitly, as in (1), or implicitly, as in (2)), both the active function object and NewTarget are . If this check was not present, it would be possible to create an instance of whose local name was .\n• Let be the item in 's custom element definition set with constructor equal to NewTarget. If there is no such item, then throw a . Since there can be no item in 's custom element definition set with a constructor of undefined, this step also prevents HTML element constructors from being called as functions (since in that case NewTarget will be undefined).\n• If 's local name is equal to 's name (i.e., is for an autonomous custom element):\n• If the active function object is not , then throw a . This can occur when a custom element is defined to not extend any local names, but inherits from a non- class: In this case, during the (implicit) call that occurs when constructing an instance of , the active function object is , not .\n• Otherwise (i.e., if is for a customized built-in element):\n• None Let be the list of local names for elements defined in this specification or in other applicable specifications that use the active function object as their element interface.\n• If does not contain 's local name, then throw a . This can occur when a custom element is defined to extend a given local name but inherits from the wrong class: In this case, during the (implicit) call that occurs when constructing an instance of , is the list containing and , but 's local name is , which is not in that list.\n• \n• None Let be the result of internally creating a new object implementing the interface to which the active function object corresponds, given the current realm and NewTarget.\n• None Set 's node document to the current global object's associated .\n• None Set 's local name to 's local name. This occurs when author script constructs a new custom element directly, e.g. via .\n• If is not an Object, then:\n• None Set to the interface prototype object of whose interface is the same as the interface of the active function object. The realm of the active function object might not be , so we are using the more general concept of \"the same interface\" across realms; we are not looking for equality of interface objects. This fallback behavior, including using the realm of NewTarget and looking up the appropriate prototype there, is designed to match analogous behavior for the JavaScript built-ins and Web IDL's internally create a new object implementing the interface algorithm.\n• None Let be the last entry in 's construction stack.\n• If is an already constructed marker, then throw a . This can occur when the author code inside the custom element constructor non-conformantly creates another instance of the class being constructed, before calling : doSillyThing DontDoThis HTMLElement constructor doSillyThing doSillyThing DontDoThis // Now the construction stack will contain an // This will then fail with a TypeError: This can also occur when author code inside the custom element constructor non-conformantly calls twice, since per the JavaScript specification, this actually executes the superclass constructor (i.e. this algorithm) twice, before throwing an error: DontDoThisEither HTMLElement constructor // This will throw, but not until it has already called into the HTMLElement constructor\n• None Replace the last entry in 's construction stack with an already constructed marker.\n• This step is normally reached when upgrading a custom element; the existing element is returned, so that the call inside the custom element constructor assigns that existing element to this.\n\nIn addition to the constructor behavior implied by , some elements also have named constructors (which are really factory functions with a modified property).\n\nEach element in this specification has a definition that includes the following information:\n\nThis is then followed by a description of what the element represents, along with any additional normative conformance criteria that may apply to authors and implementations. Examples are sometimes also included.\n\nAn attribute value is a string. Except where otherwise specified, attribute values on HTML elements may be any string value, including the empty string, and there is no restriction on what text can be specified in such attribute values.\n\nEach element defined in this specification has a content model: a description of the element's expected contents. An HTML element must have contents that match the requirements described in the element's content model. The of an element are its children in the DOM.\n\nASCII whitespace is always allowed between elements. User agents represent these characters between elements in the source markup as nodes in the DOM. Empty nodes and nodes consisting of just sequences of those characters are considered .\n\nInter-element whitespace, comment nodes, and processing instruction nodes must be ignored when establishing whether an element's contents match the element's content model or not, and must be ignored when following algorithms that define document and element semantics.\n\nThus, an element is said to be preceded or followed by a second element if and have the same parent node and there are no other element nodes or nodes (other than inter-element whitespace) between them. Similarly, a node is the only child of an element if that element contains no other nodes other than inter-element whitespace, comment nodes, and processing instruction nodes.\n\nAuthors must not use HTML elements anywhere except where they are explicitly allowed, as defined for each element, or as explicitly required by other specifications. For XML compound documents, these contexts could be inside elements from other namespaces, if those elements are defined as providing the relevant contexts.\n\ndefines a element. When its attribute has the value , requires that it contain a single HTML element. Thus, a element is allowed in that context, even though this is not explicitly normatively stated by this specification. [ATOM]\n\nIn addition, HTML elements may be orphan nodes (i.e. without a parent node).\n\nWhen an element's content model is , the element must contain no nodes (other than inter-element whitespace) and no element nodes.\n\nMost HTML elements whose content model is \"nothing\" are also, for convenience, void elements (elements that have no end tag in the HTML syntax). However, these are entirely separate concepts.\n\nEach element in HTML falls into zero or more that group elements with similar characteristics together. The following broad categories are used in this specification:\n\nSome elements also fall into other categories, which are defined in other parts of this specification.\n\nThese categories are related as follows:\n\nSectioning content, heading content, phrasing content, embedded content, and interactive content are all types of flow content. Metadata is sometimes flow content. Metadata and interactive content are sometimes phrasing content. Embedded content is also a type of phrasing content, and sometimes is interactive content.\n\nOther categories are also used for specific purposes, e.g. form controls are specified using a number of categories to define common requirements. Some elements have unique requirements and do not fit into any particular category.\n\nis content that sets up the presentation or behavior of the rest of the content, or that sets up the relationship of the document with other documents, or that conveys other \"out of band\" information.\n\nElements from other namespaces whose semantics are primarily metadata-related (e.g. RDF) are also metadata content.\n\nMost elements that are used in the body of documents and applications are categorized as .\n\nis content that defines the scope of and elements.\n\ndefines the heading of a section (whether explicitly marked up using sectioning content elements, or implied by the heading content itself).\n\nis the text of the document, as well as elements that mark up that text at the intra-paragraph level. Runs of phrasing content form paragraphs.\n\nMost elements that are categorized as phrasing content can only contain elements that are themselves categorized as phrasing content, not any flow content.\n\n, in the context of content models, means either nothing, or nodes. Text is sometimes used as a content model on its own, but is also phrasing content, and can be inter-element whitespace (if the nodes are empty or contain just ASCII whitespace).\n\nnodes and attribute values must consist of scalar values, excluding noncharacters, and controls other than ASCII whitespace. This specification includes extra constraints on the exact value of nodes and attribute values depending on their precise context.\n\nis content that imports another resource into the document, or content from another vocabulary that is inserted into the document.\n\nElements that are from namespaces other than the HTML namespace and that convey content but not metadata, are embedded content for the purposes of the content models defined in this specification. (For example, MathML or SVG.)\n\nSome embedded content elements can have : content that is to be used when the external resource cannot be used (e.g. because it is of an unsupported format). The element definitions state what the fallback is, if any.\n\nis content that is specifically intended for user interaction.\n\nAs a general rule, elements whose content model allows any flow content or phrasing content should have at least one node in its contents that is and that does not have the attribute specified.\n\nPalpable content makes an element non-empty by providing either some descendant non-empty text, or else something users can hear ( elements) or view ( , , or elements) or otherwise interact with (for example, interactive form controls).\n\nThis requirement is not a hard requirement, however, as there are many cases where an element can be empty legitimately, for example when it is used as a placeholder which will later be filled in by a script, or when the element is part of a template and would on most pages be filled in but on some pages is not relevant.\n\nConformance checkers are encouraged to provide a mechanism for authors to find elements that fail to fulfill this requirement, as an authoring aid.\n\nThe following elements are palpable content:\n• text that is not inter-element whitespace\n\nare those that do not represent anything themselves (i.e. they are not rendered), but are used to support scripts, e.g. to provide functionality for the user.\n\nThe following elements are script-supporting elements:\n\nSome elements are described as ; they have \"transparent\" in the description of their content model. The content model of a transparent element is derived from the content model of its parent element: the elements required in the part of the content model that is \"transparent\" are the same elements as required in the part of the content model of the parent of the transparent element in which the transparent element finds itself.\n\nIn some cases, where transparent elements are nested in each other, the process has to be applied iteratively.\n\nWhen a transparent element has no parent, then the part of its content model that is \"transparent\" must instead be treated as accepting any flow content.\n\nThe term paragraph as defined in this section is used for more than just the definition of the element. The paragraph concept defined here is used to describe how to interpret documents. The element is merely one of several ways of marking up a paragraph.\n\nA is typically a run of phrasing content that forms a block of text with one or more sentences that discuss a particular topic, as in typography, but can also be used for more general thematic grouping. For instance, an address is also a paragraph, as is a part of a form, a byline, or a stanza in a poem.\n\nParagraphs in flow content are defined relative to what the document looks like without the , , , and elements complicating matters, since those elements, with their hybrid content models, can straddle paragraph boundaries, as shown in the first two examples below.\n\nGenerally, having elements straddle paragraph boundaries is best avoided. Maintaining such markup can be difficult.\n\nLet be a view of the DOM that replaces all , , , and elements in the document with their contents. Then, in , for each run of sibling phrasing content nodes uninterrupted by other types of content, in an element that accepts content other than phrasing content as well as phrasing content, let be the first node of the run, and let be the last node of the run. For each such run that consists of at least one node that is neither embedded content nor inter-element whitespace, a paragraph exists in the original DOM from immediately before to immediately after . (Paragraphs can thus span across , , , and elements.)\n\nConformance checkers may warn authors of cases where they have paragraphs that overlap each other (this can happen with , , , and elements, and indirectly through elements in other namespaces that allow HTML to be further embedded therein, like SVG or MathML ).\n\nA paragraph is also formed explicitly by elements.\n\nThe element can be used to wrap individual paragraphs when there would otherwise not be any content other than phrasing content to separate the paragraphs from each other.\n\nThe following attributes are common to and may be specified on all HTML elements (even those not defined in this specification):\n\nThese attributes are only defined by this specification as attributes for HTML elements. When this specification refers to elements having these attributes, elements from namespaces that are not defined as having these attributes must not be considered as being elements with these attributes.\n\ndefines the user agent requirements for the , , and attributes for any element in any namespace. [DOM]\n\nThe , , and attributes may be specified on all HTML elements.\n\nWhen specified on HTML elements, the attribute must have a value that is a set of space-separated tokens representing the various classes that the element belongs to.\n\nWhen specified on HTML elements, the attribute value must be unique amongst all the IDs in the element's tree and must contain at least one character. The value must not contain any ASCII whitespace.\n\nIdentifiers are opaque strings. Particular meanings should not be derived from the value of the attribute.\n\nThere are no conformance requirements for the attribute specific to HTML elements.\n\nThe attribute is used to assign a slot to an element: an element with a attribute is assigned to the slot created by the element whose name attribute's value matches that attribute's value — but only if that element finds itself in the shadow tree whose root's host has the corresponding attribute value.\n\nTo enable assistive technology products to expose a more fine-grained interface than is otherwise possible with HTML elements and attributes, a set of annotations for assistive technology products can be specified (the ARIA and attributes). [ARIA]\n\nThe following event handler content attributes may be specified on any HTML element:\n\nThe attributes marked with an asterisk have a different meaning when specified on elements as those elements expose event handlers of the object with the same names.\n\nWhile these attributes apply to all elements, they are not useful on all elements. For example, only media elements will ever receive a event fired by the user agent.\n\nCustom data attributes (e.g. or ) can be specified on any HTML element, to store custom data, state, annotations, and similar, specific to the page.\n\nIn HTML documents, elements in the HTML namespace may have an attribute specified, if, and only if, it has the exact value \" \". This does not apply to XML documents.\n\nIn HTML, the attribute has absolutely no effect. It is basically a talisman. It is allowed merely to make migration to and from XML mildly easier. When parsed by an HTML parser, the attribute ends up in no namespace, not the \" \" namespace like namespace declaration attributes in XML do.\n\nIn XML, an attribute is part of the namespace declaration mechanism, and an element cannot actually have an attribute in no namespace specified.\n\nalso allows the use of the attribute in the XML namespace on any element in an XML document. This attribute has no effect on HTML elements, as the default behavior in HTML is to preserve whitespace. [XML]\n\nThere is no way to serialize the attribute on HTML elements in the syntax.\n\nThe attribute represents advisory information for the element, such as would be appropriate for a tooltip. On a link, this could be the title or a description of the target resource; on an image, it could be the image credit or a description of the image; on a paragraph, it could be a footnote or commentary on the text; on a citation, it could be further information about the source; on interactive content, it could be a label for, or instructions for, use of the element; and so forth. The value is text.\n\nRelying on the attribute is currently discouraged as many user agents do not expose the attribute in an accessible manner as required by this specification (e.g., requiring a pointing device such as a mouse to cause a tooltip to appear, which excludes keyboard-only users and touch-only users, such as anyone with a modern phone or tablet).\n\nIf this attribute is omitted from an element, then it implies that the attribute of the nearest ancestor HTML element with a attribute set is also relevant to this element. Setting the attribute overrides this, explicitly stating that the advisory information of any ancestors is not relevant to this element. Setting the attribute to the empty string indicates that the element has no advisory information.\n\nIf the attribute's value contains U+000A LINE FEED (LF) characters, the content is split into multiple lines. Each U+000A LINE FEED (LF) character represents a line break.\n\nSome elements, such as , , and , define additional semantics for the attribute beyond the semantics described above.\n\nThe of an element is the value that the following algorithm returns, with the algorithm being aborted once a value is returned. When the algorithm returns the empty string, then there is no advisory information.\n• None If the element has a attribute, then return the result of running normalize newlines on its value.\n• None If the element has a parent element, then return the parent element's advisory information.\n\nUser agents should inform the user when elements have advisory information, otherwise the information would not be discoverable.\n\nThe IDL attribute must reflect the content attribute.\n\nThe attribute (in no namespace) specifies the primary language for the element's contents and for any of the element's attributes that contain text. Its value must be a valid BCP 47 language tag, or the empty string. Setting the attribute to the empty string indicates that the primary language is unknown. [BCP47]\n\nThe attribute in the XML namespace is defined in XML. [XML]\n\nIf these attributes are omitted from an element, then the language of this element is the same as the language of its parent element, if any (except for elements in a shadow tree).\n\nThe attribute in no namespace may be used on any HTML element.\n\nThe attribute in the XML namespace may be used on HTML elements in XML documents, as well as elements in other namespaces if the relevant specifications allow it (in particular, MathML and SVG allow attributes in the XML namespace to be specified on their elements). If both the attribute in no namespace and the attribute in the XML namespace are specified on the same element, they must have exactly the same value when compared in an ASCII case-insensitive manner.\n\nAuthors must not use the attribute in the XML namespace on HTML elements in HTML documents. To ease migration to and from XML, authors may specify an attribute in no namespace with no prefix and with the literal localname \" \" on HTML elements in HTML documents, but such attributes must only be specified if a attribute in no namespace is also specified, and both attributes must have the same value when compared in an ASCII case-insensitive manner.\n\nThe attribute in no namespace with no prefix and with the literal localname \" \" has no effect on language processing.\n\nTo determine the of a node, user agents must use the first appropriate step in the following list:\n\nIf the resulting value is not a recognized language tag, then it must be treated as an unknown language having the given language tag, distinct from all other languages. For the purposes of round-tripping or communicating with other services that expect language tags, user agents should pass unknown language tags through unmodified, and tagged as being BCP 47 language tags, so that subsequent services do not interpret the data as another type of language description. [BCP47]\n\nThus, for instance, an element with would be matched by the selector (e.g. in CSS), but it would not be matched by , even though both are equally invalid. Similarly, if a web browser and screen reader working in unison communicated about the language of the element, the browser would tell the screen reader that the language was \"xyzzy\", even if it knew it was invalid, just in case the screen reader actually supported a language with that tag after all. Even if the screen reader supported both BCP 47 and another syntax for encoding language names, and in that other syntax the string \"xyzzy\" was a way to denote the Belarusian language, it would be incorrect for the screen reader to then start treating text as Belarusian, because \"xyzzy\" is not how Belarusian is described in BCP 47 codes (BCP 47 uses the code \"be\" for Belarusian).\n\nIf the resulting value is the empty string, then it must be interpreted as meaning that the language of the node is .\n\nUser agents may use the element's language to determine proper processing or rendering (e.g. in the selection of appropriate fonts or pronunciations, for dictionary selection, or for the user interfaces of form controls such as date pickers).\n\nThe IDL attribute must reflect the content attribute in no namespace.\n\nThe attribute is used to specify whether an element's attribute values and the values of its node children are to be translated when the page is localized, or whether to leave them unchanged. It is an attribute is an enumerated attribute with the following keywords and states:\n\nThe attribute's missing value default and invalid value default are both the state.\n\nEach element (even non-HTML elements) has a , which is in either the translate-enabled state or the no-translate state. If an HTML element's attribute is in the yes state, then the element's translation mode is in the translate-enabled state; otherwise, if the element's attribute is in the no state, then the element's translation mode is in the no-translate state. Otherwise, either the element's attribute is in the inherit state, or the element is not an HTML element and thus does not have a attribute; in either case, the element's translation mode is in the same state as its parent element's, if any, or in the translate-enabled state, if the element's parent element is null.\n\nWhen an element is in the state, the element's translatable attributes and the values of its node children are to be translated when the page is localized.\n\nWhen an element is in the state, the element's attribute values and the values of its node children are to be left as-is when the page is localized, e.g. because the element contains a person's name or a name of a computer program.\n\nThe following attributes are :\n• on elements, if the attribute specifies a metadata name whose value is known to be translatable\n• on HTML elements; must be \"translated\" to match the language used in the translation\n• on elements; must be parsed and recursively processed\n• on HTML elements; must be parsed and recursively processed (e.g. for the values of 'content' properties)\n• on elements with a attribute in the Button state or the Reset Button state\n\nOther specifications may define other attributes that are also translatable attributes. For example, would define the attribute as translatable.\n\nThe IDL attribute must, on getting, return true if the element's translation mode is translate-enabled, and false otherwise. On setting, it must set the content attribute's value to \" \" if the new value is true, and set the content attribute's value to \" \" otherwise.\n\nThe attribute is an enumerated attribute with the following keywords and states:\n\nThe attribute's missing value default and invalid value default are both the state.\n\nThe of an element (any element, not just an HTML element) is either ' ' or ' '. To compute the directionality given an element , switch on 's attribute state:\n\nSince the attribute is only defined for HTML elements, it cannot be present on elements from other namespaces. Thus, elements from other namespaces always end up using the parent directionality.\n• None elements whose attribute is in the Hidden, Text, Search, Telephone, URL, Email, Password, Submit Button, Reset Button, or Button state, and\n\nTo compute the given an element :\n• If is an auto-directionality form-associated element:\n• None If 's value contains a character of bidirectional character type AL or R, and there is no character of bidirectional character type L anywhere before it in the element's value, then return 'rtl'. [BIDI]\n• None If 's value is not the empty string, then return 'ltr'.\n• If is a element whose root is a shadow root and 's assigned nodes are not empty:\n• For each node of 's assigned nodes:\n• None If is a node, then set to the text node directionality of .\n• \n• None Set to the contained text auto directionality of with canExcludeRoot set to true.\n• None If is not null, then return .\n• None Return the contained text auto directionality of with canExcludeRoot set to false.\n\nTo compute the of an element with a boolean :\n• For each node of 's descendants, in tree order:\n• If any of\n• any ancestor element of that is a descendant of is one of\n• an element whose attribute is not in the undefined state\n• None If is a element whose root is a shadow root, then return the directionality of that shadow root's host.\n• None If is not a node, then continue.\n• None Let be the text node directionality of .\n• None If is not null, then return .\n\nTo compute the given a node :\n• None If 's data does not contain a code point whose bidirectional character type is L, AL, or R, then return null. [BIDI]\n• None Let be the first code point in 's data whose bidirectional character type is L, AL, or R.\n• None If is of bidirectional character type AL or R, then return 'rtl'.\n• None If is of bidirectional character type L, then return 'ltr'.\n\nTo compute the given an element :\n• None If is a shadow root, then return the directionality of 's host.\n• None If is an element, then return the directionality of .\n\nThis attribute has rendering requirements involving the bidirectional algorithm.\n\nThe of an HTML element, which is used when the text of that attribute is to be included in the rendering in some manner, is determined as per the first appropriate set of steps from the following list:\n\nThe following attributes are :\n• on elements, if the attribute specifies a metadata name whose value is primarily intended to be human-readable rather than machine-readable\n\nThe IDL attribute on an element must reflect the content attribute of that element, limited to only known values.\n\nThe IDL attribute on objects must reflect the content attribute of the element, if any, limited to only known values. If there is no such element, then the attribute must return the empty string and do nothing on setting.\n\nAuthors are strongly encouraged to use the attribute to indicate text direction rather than using CSS, since that way their documents will continue to render correctly even in the absence of CSS (e.g. as interpreted by search engines).\n\nAll HTML elements may have the content attribute set. This is a style attribute as defined by . [CSSATTR]\n\nIn user agents that support CSS, the attribute's value must be parsed when the attribute is added or has its value changed, according to the rules given for style attributes. [CSSATTR]\n\nHowever, if the Should element's inline behavior be blocked by Content Security Policy? algorithm returns \" \" when executed upon the attribute's element, \" \", and the attribute's value, then the style rules defined in the attribute's value must not be applied to the element. [CSP]\n\nDocuments that use attributes on any of their elements must still be comprehensible and usable if those attributes were removed.\n\nIn particular, using the attribute to hide and show content, or to convey meaning that is otherwise not included in the document, is non-conforming. (To hide and show content, use the attribute.)\n\nThe IDL attribute is defined in . [CSSOM]\n\nA is an attribute in no namespace whose name starts with the string \" \", has at least one character after the hyphen, is XML-compatible, and contains no ASCII upper alphas.\n\nAll attribute names on HTML elements in HTML documents get ASCII-lowercased automatically, so the restriction on ASCII uppercase letters doesn't affect such documents.\n\nCustom data attributes are intended to store custom data, state, annotations, and similar, private to the page or application, for which there are no more appropriate attributes or elements.\n\nThese attributes are not intended for use by software that is not known to the administrators of the site that uses the attributes. For generic extensions that are to be used by multiple independent tools, either this specification should be extended to provide the feature explicitly, or a technology like microdata should be used (with a standardized vocabulary).\n\nEvery HTML element may have any number of custom data attributes specified, with any value.\n\nAuthors should carefully design such extensions so that when the attributes are ignored and any associated CSS dropped, the page is still usable.\n\nUser agents must not derive any implementation behavior from these attributes or values. Specifications intended for user agents must not define these attributes to have any meaningful values.\n\nJavaScript libraries may use the custom data attributes, as they are considered to be part of the page on which they are used. Authors of libraries that are reused by many authors are encouraged to include their name in the attribute names, to reduce the risk of clashes. Where it makes sense, library authors are also encouraged to make the exact name used in the attribute names customizable, so that libraries whose authors unknowingly picked the same name can be used on the same page, and so that multiple versions of a particular library can be used on the same page even when those versions are not mutually compatible.\n\nThe IDL attribute provides convenient accessors for all the attributes on an element. On getting, the IDL attribute must return a whose associated element is this element.\n\nThe interface is used for the attribute. Each has an .\n\nTo , run the following algorithm:\n• None Let be an empty list of name-value pairs.\n• None For each content attribute on the 's associated element whose first five characters are the string \" \" and whose remaining characters (if any) do not include any ASCII upper alphas, in the order that those attributes are listed in the element's attribute list, add a name-value pair to whose name is the attribute's name with the first five characters removed and whose value is the attribute's value.\n• None For each name in , for each U+002D HYPHEN-MINUS character (-) in the name that is followed by an ASCII lower alpha, remove the U+002D HYPHEN-MINUS character (-) and replace the character that followed it by the same character converted to ASCII uppercase.\n\nThe supported property names on a object at any instant are the names of each pair returned from getting the 's name-value pairs at that instant, in the order returned.\n\nTo determine the value of a named property for a , return the value component of the name-value pair whose name component is in the list returned from getting the 's name-value pairs.\n\nTo set the value of a new named property or set the value of an existing named property for a , given a property name and a new value , run the following steps:\n• None If contains a U+002D HYPHEN-MINUS character (-) followed by an ASCII lower alpha, then throw a \" \" .\n• None For each ASCII upper alpha in , insert a U+002D HYPHEN-MINUS character (-) before the character and replace the character with the same character converted to ASCII lowercase.\n• None Insert the string at the front of .\n• None If does not match the XML production, throw an \" \" .\n• None Set an attribute value for the 's associated element using and .\n\nTo delete an existing named property for a , run the following steps:\n• None For each ASCII upper alpha in , insert a U+002D HYPHEN-MINUS character (-) before the character and replace the character with the same character converted to ASCII lowercase.\n• None Insert the string at the front of .\n• None Remove an attribute by name given and the 's associated element.\n\nThis algorithm will only get invoked by for names that are given by the earlier algorithm for getting the 's name-value pairs. [WEBIDL]\n\nThe , given an HTMLElement , are:\n• If is not being rendered or if the user agent is a non-CSS user agent, then return 's descendant text content. This step can produce surprising results, as when the getter is invoked on an element not being rendered, its text contents are returned, but when accessed on an element that is being rendered, all of its children that are not being rendered have their text contents ignored.\n• None Let be a new empty list.\n• For each child node of :\n• None Let be the list resulting in running the rendered text collection steps with . Each item in will either be a string or a positive integer (a required line break count). Intuitively, a required line break count item means that a certain number of line breaks appear at that point, but they can be collapsed with the line breaks induced by adjacent required line break count items, reminiscent to CSS margin-collapsing.\n• None For each item in , append to .\n• None Remove any items from that are the empty string.\n• None Remove any runs of consecutive required line break count items at the start or end of .\n• None Replace each remaining run of consecutive required line break count items with a string consisting of as many U+000A LF code points as the maximum of the values in the required line break count items.\n• None Return the concatenation of the string items in .\n\nThe and getter steps are to return the result of running get the text steps with this.\n\nThe , given a node , are as follows:\n• None Let be the result of running the rendered text collection steps with each child node of in tree order, and then concatenating the results to a single list.\n• None If 's computed value of 'visibility' is not 'visible', then return .\n• If is not being rendered, then return . For the purpose of this step, the following elements must act as described if the computed value of the 'display' property is not 'none':\n• None elements have an associated non-replaced inline CSS box whose child boxes include only those of and element child nodes;\n• None elements have an associated non-replaced block-level CSS box whose child boxes include only those of element child nodes; and\n• None element have an associated non-replaced block-level CSS box whose child boxes are as normal for non-replaced block-level CSS boxes. can be non-empty due to 'display:contents'.\n• None If is a node, then for each CSS text box produced by , in content order, compute the text of the box after application of the CSS 'white-space' processing rules and 'text-transform' rules, set to the list of the resulting strings, and return . The CSS 'white-space' processing rules are slightly modified: collapsible spaces at the end of lines are always collapsed, but they are only removed if the line is the last line of the block, or it ends with a element. Soft hyphens should be preserved. [CSSTEXT]\n• None If is a element, then append a string containing a single U+000A LF code point to .\n• None If 's computed value of 'display' is 'table-cell', and 's CSS box is not the last 'table-cell' box of its enclosing 'table-row' box, then append a string containing a single U+0009 TAB code point to .\n• None If 's computed value of 'display' is 'table-row', and 's CSS box is not the last 'table-row' box of the nearest ancestor 'table' box, then append a string containing a single U+000A LF code point to .\n• None If is a element, then append 2 (a required line break count) at the beginning and end of .\n• If 's used value of 'display' is block-level or 'table-caption', then append 1 (a required line break count) at the beginning and end of . [CSSDISPLAY] Floats and absolutely-positioned elements fall into this category.\n\nNote that descendant nodes of most replaced elements (e.g., , , and — but not ) are not rendered by CSS, strictly speaking, and therefore have no CSS boxes for the purposes of this algorithm.\n\nThis algorithm is amenable to being generalized to work on ranges. Then we can use it as the basis for 's stringifier and maybe expose it directly on ranges. See Bugzilla bug 10583.\n\nThe , given an HTMLElement , and a string are:\n• None Let be the rendered text fragment for given 's node document.\n• None Replace all with within .\n\nThe setter steps are to run set the inner text steps.\n• None If this's parent is null, then throw a \" \" .\n• None Let be this's next sibling.\n• None Let be the rendered text fragment for the given value given this's node document.\n• None If has no children, then append a new node whose data is the empty string and node document is this's node document to .\n• None Replace this with within this's parent.\n• None If is non-null and 's previous sibling is a node, then merge with the next text node given 's previous sibling.\n• None If is a node, then merge with the next text node given .\n\nThe for a string given a is the result of running the following steps:\n• None Let be a new whose node document is .\n• None Let be a position variable for , initially pointing at the start of .\n• None Let be the empty string.\n• While is not past the end of :\n• None Collect a sequence of code points that are not U+000A LF or U+000D CR from given , and set to the result.\n• None If is not the empty string, then append a new node whose data is and node document is to .\n• While is not past the end of , and the code point at is either U+000A LF or U+000D CR:\n• None If the code point at is U+000D CR and the next code point is U+000A LF, then advance to the next code point in .\n• None Advance to the next code point in .\n• None Append the result of creating an element given , \" \", and the HTML namespace to .\n\nTo merge with the next text node given a node :\n• None Let be 's next sibling.\n• None If is not a node, then return.\n\nText content in HTML elements with nodes in their contents, and text in attributes of HTML elements that allow free-form text, may contain characters in the ranges U+202A to U+202E and U+2066 to U+2069 (the bidirectional-algorithm formatting characters). [BIDI]\n\nAuthors are encouraged to use the attribute, the element, and the element, rather than maintaining the bidirectional-algorithm formatting characters manually. The bidirectional-algorithm formatting characters interact poorly with CSS.\n\nUser agents must implement the Unicode bidirectional algorithm to determine the proper ordering of characters when rendering documents and parts of documents. [BIDI]\n\nThe mapping of HTML to the Unicode bidirectional algorithm must be done in one of three ways. Either the user agent must implement CSS, including in particular the CSS 'unicode-bidi', 'direction', and 'content' properties, and must have, in its user agent style sheet, the rules using those properties given in this specification's rendering section, or, alternatively, the user agent must act as if it implemented just the aforementioned properties and had a user agent style sheet that included all the aforementioned rules, but without letting style sheets specified in documents override them, or, alternatively, the user agent must implement another styling language with equivalent semantics. [CSSGC]\n\nThe following elements and attributes have requirements defined by the rendering section that, due to the requirements in this section, are requirements on all user agents (not just those that support the suggested default rendering):\n\nRequirements related to ARIA and to platform accessibility APIs\n\nUser agent requirements for implementing Accessibility API semantics on HTML elements are defined in . In addition to the rules there, for a custom element , the default ARIA role semantics are determined as follows: [HTMLAAM]\n• None If [\" \"] exists, then return it.\n\nSimilarly, for a custom element , the default ARIA state and property semantics, for a state or property named , are determined as follows:\n• \n• None If 's attached internals's get the -associated element exists, then return the result of running it.\n• None If 's attached internals's get the -associated elements exists, then return the result of running it.\n• None If 's internal content attribute map[ ] exists, then return it.\n• None Return the default value for .\n\nThe \"default semantics\" referred to here are sometimes also called \"native\", \"implicit\", or \"host language\" semantics in . [ARIA]\n\nOne implication of these definitions is that the default semantics can change over time. This allows custom elements the same expressivity as built-in elements; e.g., compare to how the default ARIA role semantics of an element change as the attribute is added or removed.\n\nFor an example of this in action, see the custom elements section.\n\nConformance checker requirements for checking use of ARIA and attributes on HTML elements are defined in . [ARIAHTML]\n\nThe element represents the root of an HTML document.\n\nAuthors are encouraged to specify a attribute on the root element, giving the document's language. This aids speech synthesis tools to determine what pronunciations to use, translation tools to determine what rules to use, and so forth.\n\nThe element represents a collection of metadata for the .\n\nThe element is a required child in most situations, but when a higher-level protocol provides title information, e.g., in the subject line of an email when HTML is used as an email authoring format, the element can be omitted.\n\nThe element represents the document's title or name. Authors should use titles that identify their documents even when they are used out of context, for example in a user's history or bookmarks, or in search results. The document's title is often different from its first heading, since the first heading does not have to stand alone when taken out of context.\n\nThere must be no more than one element per document.\n\nIf it's reasonable for the to have no title, then the element is probably not required. See the element's content model for a description of when the element is required.\n\nThe attribute's getter must return this element's child text content.\n\nThe attribute's setter must string replace all with the given value within this element.\n\nThe string to use as the document's title is given by the IDL attribute.\n\nUser agents should use the document's title when referring to the document in their user interface. When the contents of a element are used in this way, the directionality of that element should be used to set the directionality of the document's title in the user interface.\n\nThe element allows authors to specify the document base URL for the purposes of parsing URLs, and the name of the default navigable for the purposes of following hyperlinks. The element does not represent any content beyond this information.\n\nThere must be no more than one element per document.\n\nA element must have either an attribute, a attribute, or both.\n\nThe content attribute, if specified, must contain a valid URL potentially surrounded by spaces.\n\nA element, if it has an attribute, must come before any other elements in the tree that have attributes defined as taking URLs.\n\nIf there are multiple elements with attributes, all but the first are ignored.\n\nThe attribute, if specified, must contain a valid navigable target name or keyword, which specifies which navigable is to be used as the default when hyperlinks and forms in the cause navigation.\n\nA element, if it has a attribute, must come before any elements in the tree that represent hyperlinks.\n\nIf there are multiple elements with attributes, all but the first are ignored.\n\nTo , given an , , or element , and an optional string-or-null (default null), run these steps:\n• If is null, then:\n• None If has a attribute, then set to that attribute's value.\n• None Otherwise, if 's node document contains a element with a attribute, set to the value of the attribute of the first such element.\n• None If is not null, and contains an ASCII tab or newline and a U+003C (<), then set to \" \".\n\nA element that is the first element with an content attribute in a document tree has a . The frozen base URL must be immediately set for an element whenever any of the following situations occur:\n• None The element becomes the first element in tree order with an content attribute in its .\n• None The element is the first element in tree order with an content attribute in its , and its content attribute is changed.\n\nTo for an element :\n• None Let be the result of parsing the value of 's content attribute with 's fallback base URL, and 's character encoding. (Thus, the element isn't affected by itself.)\n• If any of the following are true:\n• None 's scheme is \" \" or \" \"; or\n• None running Is base allowed for Document? on and returns \" \", then set 's frozen base URL to 's fallback base URL and return.\n\nThe IDL attribute, on getting, must return the result of running the following algorithm:\n• None Let be the value of the attribute of this element, if it has one, and the empty string otherwise.\n• None Let be the result of parsing with 's fallback base URL, and 's character encoding. (Thus, the element isn't affected by other elements or itself.)\n\nThe IDL attribute, on setting, must set the content attribute to the given new value.\n\nThe IDL attribute must reflect the content attribute of the same name.\n\nThe element allows authors to link their document to other resources.\n\nThe address of the link(s) is given by the attribute. If the attribute is present, then its value must be a valid non-empty URL potentially surrounded by spaces. One or both of the or attributes must be present.\n\nIf both the and attributes are absent, then the element does not define a link.\n\nThe types of link indicated (the relationships) are given by the value of the attribute, which, if present, must have a value that is a unordered set of unique space-separated tokens. The allowed keywords and their meanings are defined in a later section. If the attribute is absent, has no keywords, or if none of the keywords used are allowed according to the definitions in this specification, then the element does not create any links.\n\n's supported tokens are the keywords defined in HTML link types which are allowed on elements, impact the processing model, and are supported by the user agent. The possible supported tokens are , , , , , , , , , , , , and . 's supported tokens must only include the tokens from this list that the user agent implements the processing model for.\n\nTheoretically a user agent could support the processing model for the keyword — if it were a search engine that executed JavaScript. But in practice that's quite unlikely. So in most cases, ought not be included in 's supported tokens.\n\nA element must have either a attribute or an attribute, but not both.\n\nIf a element has an attribute, or has a attribute that contains only keywords that are body-ok, then the element is said to be . This means that the element can be used where phrasing content is expected.\n\nIf the attribute is used, the element can only sometimes be used in the of the page. When used with the attribute, the element can be used both in the element and in the of the page, subject to the constraints of the microdata model.\n\nTwo categories of links can be created using the element: links to external resources and hyperlinks. The link types section defines whether a particular link type is an external resource or a hyperlink. One element can create multiple links (of which some might be external resource links and some might be hyperlinks); exactly which and how many links are created depends on the keywords given in the attribute. User agents must process the links on a per-link basis, not a per-element basis.\n\nEach link created for a element is handled separately. For instance, if there are two elements with , they each count as a separate external resource, and each is affected by its own attributes independently. Similarly, if a single element has a attribute with the value , it creates both a hyperlink (for the keyword) and an external resource link (for the keyword), and they are affected by other attributes (such as or ) differently.\n\nHyperlinks created with the element and its attribute apply to the whole document. This contrasts with the attribute of and elements, which indicates the type of a link whose context is given by the link's location within the document.\n\nUnlike those created by and elements, hyperlinks created by elements are not displayed as part of the document by default, in user agents that support the suggested default rendering. And even if they are force-displayed using CSS, they have no activation behavior. Instead, they primarily provide semantic information which might be used by the page or by other software that consumes the page's contents. Additionally, the user agent can provide its own UI for following such hyperlinks.\n\nThe exact behavior for links to external resources depends on the exact relationship, as defined for the relevant link type.\n\nThe attribute is a CORS settings attribute. It is intended for use with external resource links.\n\nThe attribute says which media the resource applies to. The value must be a valid media query list.\n\nThe attribute represents the integrity metadata for requests which this element is responsible for. The value is text. The attribute must only be specified on elements that have a attribute that contains the , , or keyword. [SRI]\n\nThe attribute on the element has the same semantics as the attribute on the element.\n\nThe attribute gives the MIME type of the linked resource. It is purely advisory. The value must be a valid MIME type string.\n\nFor external resource links, the attribute is used as a hint to user agents so that they can avoid fetching resources they do not support.\n\nThe attribute is a referrer policy attribute. It is intended for use with external resource links, where it helps set the referrer policy used when fetching and processing the linked resource. [REFERRERPOLICY]\n\nThe attribute gives the title of the link. With one exception, it is purely advisory. The value is text. The exception is for style sheet links that are in a document tree, for which the attribute defines CSS style sheet sets.\n\nThe attribute on elements differs from the global attribute of most other elements in that a link without a title does not inherit the title of the parent element: it merely has no title.\n\nThe attribute may be present, and is a srcset attribute.\n\nThe and attributes (if width descriptors are not used) together contribute the image sources to the source set.\n\nIf the attribute is present and has any using a width descriptor, the attribute must also be present, and is a sizes attribute. The attribute contributes the source size to the source set.\n\nThe and attributes must only be specified on elements that have both a attribute that specifies the keyword, as well as an attribute in the \" \" state.\n\nThe attribute gives the sizes of icons for visual media. Its value, if present, is merely advisory. User agents may use the value to decide which icon(s) to use if multiple icons are available. If specified, the attribute must have a value that is an unordered set of unique space-separated tokens which are ASCII case-insensitive. Each value must be either an ASCII case-insensitive match for the string \" \", or a value that consists of two valid non-negative integers that do not have a leading U+0030 DIGIT ZERO (0) character and that are separated by a single U+0078 LATIN SMALL LETTER X or U+0058 LATIN CAPITAL LETTER X character. The attribute must only be specified on elements that have a attribute that specifies the keyword or the keyword.\n\nThe keyword is a registered extension to the predefined set of link types, but user agents are not required to support it in any way.\n\nThe attribute specifies the potential destination for a preload request for the resource given by the attribute. It is an enumerated attribute. Each potential destination is a keyword for this attribute, mapping to a state of the same name. The attribute must be specified on elements that have a attribute that contains the keyword. It may be specified on elements that have a attribute that contains the keyword; in such cases it must have a value which is a script-like destination. For other elements, it must not be specified.\n\nThe processing model for how the attribute is used is given in an individual link type's fetch and process the linked resource algorithm.\n\nThe attribute does not have a missing value default or invalid value default, meaning that invalid or missing values for the attribute map to no state. This is accounted for in the processing model. For links, both conditions are an error; for links, a missing value will be treated as \" \".\n\nThe attribute is a blocking attribute. It is used by link types and , and it must only be specified on link elements that have a attribute containing those keywords.\n\nThe attribute is used with the link type. The attribute must only be specified on elements that have a attribute that contains the keyword. The value must be a string that matches the CSS <color> production, defining a suggested color that user agents can use to customize the display of the icon that the user sees when they pin your site.\n\nThis specification does not have any user agent requirements for the attribute.\n\nThe keyword is a registered extension to the predefined set of link types, but user agents are not required to support it in any way.\n\nelements have an associated boolean. It is initially false.\n\nThe attribute is a boolean attribute that is used with the link type. The attribute must only be specified on elements that have a attribute that contains the keyword.\n\nWhenever the attribute is removed, set the element's explicitly enabled attribute to true.\n\nThe attribute is a fetch priority attribute that is intended for use with external resource links, where it is used to set the priority used when fetching and processing the linked resource.\n\nThe IDL attributes , , , , , , , , and each must reflect the respective content attributes of the same name.\n\nThere is no reflecting IDL attribute for the attribute, but this might be added later.\n\nThe IDL attribute must reflect the content attribute, limited to only known values.\n\nThe IDL attribute must reflect the content attribute, limited to only known values.\n\nThe IDL attribute must reflect the content attribute, limited to only known values.\n\nThe IDL attribute must reflect the content attribute, limited to only known values.\n\nThe IDL attribute must reflect the content attribute.\n\nThe IDL attribute must reflect the content attribute.\n\nThe IDL attribute must reflect the content attribute.\n\nThe attribute can be used for feature detection, by calling its method to check which types of links are supported.\n\nIf the link is a hyperlink then the attribute is purely advisory, and describes for which media the document in question was designed.\n\nHowever, if the link is an external resource link, then the attribute is prescriptive. The user agent must apply the external resource when the attribute's value matches the environment and the other relevant conditions apply, and must not apply it otherwise.\n\nThe default, if the attribute is omitted, is \" \", meaning that by default links apply to all media.\n\nThe external resource might have further restrictions defined within that limit its applicability. For example, a CSS style sheet might have some blocks. This specification does not override such further restrictions or requirements.\n\nIf the attribute is present, then the user agent must assume that the resource is of the given type (even if that is not a valid MIME type string, e.g. the empty string). If the attribute is omitted, but the external resource link type has a default type defined, then the user agent must assume that the resource is of that type. If the UA does not support the given MIME type for the given link relationship, then the UA should not fetch and process the linked resource; if the UA does support the given MIME type for the given link relationship, then the UA should fetch and process the linked resource at the appropriate time as specified for the external resource link's particular type. If the attribute is omitted, and the external resource link type does not have a default type defined, but the user agent would fetch and process the linked resource if the type was known and supported, then the user agent should fetch and process the linked resource under the assumption that it will be supported.\n\nUser agents must not consider the attribute authoritative — upon fetching the resource, user agents must not use the attribute to determine its actual type. Only the actual type (as defined in the next paragraph) is used to determine whether to apply the resource, not the aforementioned assumed type.\n\nIf the external resource link type defines rules for processing the resource's Content-Type metadata, then those rules apply. Otherwise, if the resource is expected to be an image, user agents may apply the image sniffing rules, with the being the type determined from the resource's Content-Type metadata, and use the resulting computed type of the resource as if it was the actual type. Otherwise, if neither of these conditions apply or if the user agent opts not to apply the image sniffing rules, then the user agent must use the resource's Content-Type metadata to determine the type of the resource. If there is no type metadata, but the external resource link type has a default type defined, then the user agent must assume that the resource is of that type.\n\nThe link type defines rules for processing the resource's Content-Type metadata.\n\nOnce the user agent has established the type of the resource, the user agent must apply the resource if it is of a supported type and the other relevant conditions apply, and must ignore the resource otherwise.\n\nAll external resource links have a algorithm, which takes a element . They also have which take a element and request . Individual link types may provide their own fetch and process the linked resource algorithm, but unless explicitly stated, they use the default fetch and process the linked resource algorithm. Similarly, individual link types may provide their own linked resource fetch setup steps, but unless explicitly stated, these steps just return true.\n\nThe , given a element , is as follows:\n• None Let be the result of creating link options from .\n• None Let be the result of creating a link request given .\n• None If is null, then return.\n• None Run the linked resource fetch setup steps, given and . If the result is false, then return.\n• None Set 's initiator type to \" \" if 's attribute contains the keyword ; \" \" otherwise.\n• Fetch with processResponseConsumeBody set to the following steps given response and null, failure, or a byte sequence :\n• If any of the following are true:\n• None is null or failure; or\n• None 's status is not an ok status, Note that content-specific errors, e.g., CSS parse errors or PNG decoding errors, do not affect .\n• Otherwise, wait for the link resource's critical subresources to finish loading. The specification that defines a link type's critical subresources (e.g., CSS) is expected to describe how these subresources are fetched and processed. However, since this is not currently explicit, this specification describes waiting for a link resource's critical subresources to be fetched and processed, with the expectation that this will be done correctly.\n• None Process the linked resource given , , , and .\n• None Assert: 's href is not the empty string.\n• None If 's destination is null, then return null.\n• Let be the result of encoding-parsing a URL given 's href, relative to 's base URL. Passing the base URL instead of a document or environment is tracked by issue #9715.\n• None If is failure, then return null.\n• None Let be the result of creating a potential-CORS request given , 's destination, and 's crossorigin.\n\nUser agents may opt to only try to fetch and process such resources when they are needed, instead of pro-actively fetching all the external resources that are not applied.\n\nSimilar to the fetch and process the linked resource algorithm, all external resource links have a algorithm which takes a element , boolean , a response , and a byte sequence . Individual link types may provide their own process the linked resource algorithm, but unless explicitly stated, that algorithm does nothing.\n\nUnless otherwise specified for a given keyword, the element must delay the load event of the element's node document until all the attempts to fetch and process the linked resource and its critical subresources are complete. (Resources that the user agent has not yet attempted to fetch and process, e.g., because it is waiting for the resource to be needed, do not delay the load event.)\n\nAll link types that can be external resource links define a algorithm, which takes a link processing options. This algorithm defines whether and how they react to appearing in an HTTP ` ` response header.\n\nFor most link types, this algorithm does nothing. The summary table is a good reference to quickly know whether a link type has defined process a link header steps.\n\nA is a struct. It has the following items:\n\nA link processing options has a base URL and an href rather than a parsed URL because the URL could be a result of the options's source set.\n• Let be a new link processing options with the result of translating the state of 's attribute. The current value of 's [[CryptographicNonce]] internal slot\n• None If has an attribute, then set 's href to the value of 's attribute.\n• None If has an attribute, then set 's integrity to the value of 's content attribute.\n• None If has a attribute, then set 's type to the value of 's attribute.\n• Assert: 's href is not the empty string, or 's source set is not null. A element with neither an or an does not represent a link.\n• None Let be a new list.\n• None Let be the result of getting, decoding, and splitting ` ` from .\n• For each of :\n• None Let be the result of parsing . [WEBLINK]\n• None If [\" \"] does not exist, then continue.\n\nTo given a , a response , and a \" \" or \" \" :\n• None Let be the result of extracting links from 's header list.\n• For each in :\n• None Let be \" \" if either \" \", \" \", or \" \" exist in ; otherwise \" \".\n• None If is not , then continue.\n• None If [\" \"] exists and [\" \"] does not match the environment, then continue.\n• Let be a new link processing options with\n• None Apply link options from parsed header attributes to given .\n• None If [\" \"] exists and [\" \"] exists, then set 's source set to the result of creating a source set given [\" \"], [\" \"], [\" \"], and null.\n• None Run the process a link header steps for given .\n\nTo to a link processing options given :\n• None If [\" \"] exists, then set 's destination to the result of translating [\" \"].\n• None If [\" \"] exists and is an ASCII case-insensitive match for one of the CORS settings attribute keywords, then set 's crossorigin to the CORS settings attribute state corresponding to that keyword.\n• None If [\" \"] exists, then set 's integrity to [\" \"].\n• None If [\" \"] exists and is an ASCII case-insensitive match for some referrer policy, then set 's referrer policy to that referrer policy.\n• None If [\" \"] exists, then set 's nonce to [\" \"].\n• None If [\" \"] exists, then set 's type to [\" \"].\n• None If [\" \"] exists and is an ASCII case-insensitive match for a fetch priority attribute keyword, then set 's fetch priority to that fetch priority attribute keyword.\n\nallow user-agents to perform some operations, such as to speculatively load resources that are likely to be used by the document, before the navigation request is fully handled by the server and a response code is served. Servers can indicate early hints by serving a response with a 103 status code before serving the final response.[RFC8297]\n\nFor compatibility reasons early hints are typically delivered over HTTP/2 or above, but for readability we use HTTP/1.1-style notation below.\n\nOnly the first early hint response served during the navigation is handled, and it is discarded if it is succeeded by a cross-origin redirect.\n\nIn addition to the ` ` headers, it is possible that the 103 response contains a Content Security Policy header, which is enforced when processing the early hint.\n\nTo given a response and an environment :\n\nEarly-hint ` ` headers are always processed before ` ` headers from the final response, followed by elements. This is equivalent to prepending the contents of the early and final ` ` headers to the 's element, in respective order.\n• Let be the result of creating a policy container from a fetch response given and . This allows the early hint response to include a Content Security Policy which would be enforced when fetching the early hint request.\n• None Let be the result of extracting links from 's header list.\n• None Let be an empty list.\n• For each in : The moment we receive the early hint link header, we begin fetching . If it comes back before the is created, we set to the response of that fetch and once the is created we commit it (by making it available in the map of preloaded resources as if it was a element). If the is created first, the response is committed as soon as it becomes available.\n• Let be a new link processing options with\n• Only the , , , and attributes are handled as part of early hint processing. The other ones, in particular , , , and are only applicable once a is created.\n• None Apply link options from parsed header attributes to given .\n• None Run the process a link header steps for given .\n• Return the following substeps given : for each in :\n• None If 's on document ready is null, then set 's document to .\n• None Otherwise, call 's on document ready with .\n\nProviding users with a means to follow hyperlinks created using the element\n\nInteractive user agents may provide users with a means to follow the hyperlinks created using the element, somewhere within their user interface. Such invocations of the follow the hyperlink algorithm must set the userInvolvement argument to \" \". The exact interface is not defined by this specification, but it could include the following information (obtained from the element's attributes, again as defined below), in some form or another (possibly simplified), for each hyperlink created with each element in the document:\n• The relationship between this document and the resource (given by the attribute)\n• The title of the resource (given by the attribute).\n• The address of the resource (given by the attribute).\n• The language of the resource (given by the attribute).\n• The optimum media for the resource (given by the attribute).\n\nUser agents could also include other information, such as the type of the resource (as given by the attribute).\n\nThe element represents various kinds of metadata that cannot be expressed using the , , , , and elements.\n\nThe element can represent document-level metadata with the attribute, pragma directives with the attribute, and the file's character encoding declaration when an HTML document is serialized to string form (e.g. for transmission over the network or for disk storage) with the attribute.\n\nExactly one of the , , , and attributes must be specified.\n\nIf either , , or is specified, then the attribute must also be specified. Otherwise, it must be omitted.\n\nThe attribute specifies the character encoding used by the document. This is a character encoding declaration. If the attribute is present, its value must be an ASCII case-insensitive match for the string \" \".\n\nThe attribute on the element has no effect in XML documents, but is allowed in XML documents in order to facilitate migration to and from XML.\n\nThere must not be more than one element with a attribute per document.\n\nThe attribute gives the value of the document metadata or pragma directive when the element is used for those purposes. The allowed values depend on the exact context, as described in subsequent sections of this specification.\n\nIf a element has a attribute, it sets document metadata. Document metadata is expressed in terms of name-value pairs, the attribute on the element giving the name, and the attribute on the same element giving the value. The name specifies what aspect of metadata is being set; valid names and the meaning of their values are described in the following sections. If a element has no attribute, then the value part of the metadata name-value pair is the empty string.\n\nThe attribute says which media the metadata applies to. The value must be a valid media query list. Unless the is , the attribute has no effect on the processing model and must not be used by authors.\n\nThe , , and IDL attributes must reflect the respective content attributes of the same name. The IDL attribute must reflect the content attribute .\n\nThis specification defines a few names for the attribute of the element.\n\nNames are case-insensitive, and must be compared in an ASCII case-insensitive manner.\n\nAnyone can create and use their own extensions to the predefined set of metadata names . There is no requirement to register such extensions.\n\nHowever, a new metadata name should not be created in any of the following cases:\n• None If either the name is a URL, or the value of its accompanying attribute is a URL; in those cases, registering it as an extension to the predefined set of link types is encouraged (rather than creating a new metadata name).\n• None If the name is for something expected to have processing requirements in user agents; in that case it ought to be standardized.\n\nAlso, before creating and using a new metadata name, consulting the WHATWG Wiki MetaExtensions page is encouraged — to avoid choosing a metadata name that's already in use, and to avoid duplicating the purpose of any metadata names that are already in use, and to avoid new standardized names clashing with your chosen name. [WHATWGWIKI]\n\nAnyone is free to edit the WHATWG Wiki MetaExtensions page at any time to add a metadata name. New metadata names can be specified with the following information:\n\nWhen the attribute is specified on a element, the element is a pragma directive.\n\nThe attribute is an enumerated attribute with the following keywords and states:\n\nWhen a element is inserted into the document, if its attribute is present and represents one of the above states, then the user agent must run the algorithm appropriate for that state, as described in the following list:\n\nThere must not be more than one element with any particular state in the document at a time.\n\nA is a mechanism by which the character encoding used to store or transmit a document is specified.\n\nThe Encoding standard requires use of the UTF-8 character encoding and requires use of the \" \" encoding label to identify it. Those requirements necessitate that the document's character encoding declaration, if it exists, specifies an encoding label using an ASCII case-insensitive match for \" \". Regardless of whether a character encoding declaration is present or not, the actual character encoding used to encode the document must be UTF-8. [ENCODING]\n\nTo enforce the above rules, authoring tools must default to using UTF-8 for newly-created documents.\n\nThe following restrictions also apply:\n• The character encoding declaration must be serialized without the use of character references or character escapes of any kind.\n• None The element containing the character encoding declaration must be serialized completely within the first 1024 bytes of the document.\n\nIn addition, due to a number of restrictions on elements, there can only be one -based character encoding declaration per document.\n\nIf an HTML document does not start with a BOM, and its encoding is not explicitly given by Content-Type metadata, and the document is not an document, then the encoding must be specified using a element with a attribute or a element with an attribute in the Encoding declaration state.\n\nIf the document is an document, the document must not have a character encoding declaration. (In this case, the source is already decoded, since it is part of the document that contained the .)\n\nIn XML, the XML declaration should be used for inline character encoding information, if necessary.\n\nThe element allows authors to embed CSS style sheets in their documents. The element is one of several inputs to the styling processing model. The element does not represent content for the user.\n• None If this does not have an associated CSS style sheet, return false.\n• None If this's associated CSS style sheet's disabled flag is set, return true.\n• None If this does not have an associated CSS style sheet, return.\n• None If the given value is true, set this's associated CSS style sheet's disabled flag. Otherwise, unset this's associated CSS style sheet's disabled flag.\n\nThe attribute says which media the styles apply to. The value must be a valid media query list. The user agent must apply the styles when the attribute's value matches the environment and the other relevant conditions apply, and must not apply them otherwise.\n\nThe styles might be further limited in scope, e.g. in CSS with the use of blocks. This specification does not override such further restrictions or requirements.\n\nThe default, if the attribute is omitted, is \" \", meaning that by default styles apply to all media.\n\nThe attribute on elements defines CSS style sheet sets. If the element has no attribute, then it has no title; the attribute of ancestors does not apply to the element. If the element is not in a document tree, then the attribute is ignored. [CSSOM]\n\nThe attribute on elements, like the attribute on elements, differs from the global attribute in that a block without a title does not inherit the title of the parent element: it merely has no title.\n\nThe child text content of a element must be that of a conformant style sheet.\n\nA element is implicitly potentially render-blocking if the element was created by its node document's parser.\n\nThe user agent must run the algorithm whenever any of the following conditions occur:\n• None The element is popped off the stack of open elements of an HTML parser or XML parser.\n• None The element is not on the stack of open elements of an HTML parser or XML parser, and it becomes connected or disconnected.\n\nThe algorithm is as follows:\n• None Let be the element.\n• None If has an associated CSS style sheet, remove the CSS style sheet in question.\n• None If is not connected, then return.\n• If 's attribute is present and its value is neither the empty string nor an ASCII case-insensitive match for \" \", then return. In particular, a value with parameters, such as \" \", will cause this algorithm to return early.\n• None If the Should element's inline behavior be blocked by Content Security Policy? algorithm returns \" \" when executed upon the element, \" \", and the element's child text content, then return. [CSP]\n• Create a CSS style sheet with the following properties: This is a reference to the (possibly absent at this time) attribute, rather than a copy of the attribute's current value. defines what happens when the attribute is dynamically set, changed, or removed. The attribute of , if is in a document tree, or the empty string otherwise. Again, this is a reference to the attribute. Left at its default value. This doesn't seem right. Presumably we should be using the element's child text content? Tracked as issue #2997.\n• None If contributes a script-blocking style sheet, append to its node document's script-blocking style sheet set.\n• None If 's attribute's value matches the environment and is potentially render-blocking, then block rendering on .\n\nOnce the attempts to obtain the style sheet's critical subresources, if any, are complete, or, if the style sheet has no critical subresources, once the style sheet has been parsed and processed, the user agent must run these steps:\n\nFetching the critical subresources is not well-defined; probably issue #968 is the best resolution for that. In the meantime, any critical subresource request should have its render-blocking set to whether or not the element is currently render-blocking.\n• None Let be the element associated with the style sheet in question.\n• If the attempts to obtain any of the style sheet's critical subresources failed for any reason (e.g., DNS error, HTTP 404 response, a connection being prematurely closed, unsupported Content-Type), set to false. Note that content-specific errors, e.g., CSS parse errors or PNG decoding errors, do not affect .\n• Queue an element task on the networking task source given and the following steps:\n• None If is true, fire an event named at .\n• None Otherwise, fire an event named at .\n\nThe element must delay the load event of the element's node document until all the attempts to obtain the style sheet's critical subresources, if any, are complete.\n\nThis specification does not specify a style system, but CSS is expected to be supported by most web browsers. [CSS]\n\nThe and IDL attributes must each reflect the respective content attributes of the same name.\n\nThe interface is also implemented by this element. [CSSOM]\n\nIf the style sheet referenced no other resources (e.g., it was an internal style sheet given by a element with no rules), then the style rules must be immediately made available to script; otherwise, the style rules must only be made available to script once the event loop reaches its step.\n\nAn element in the context of a of an HTML parser or XML parser if all of the following are true:\n• None was created by that 's parser.\n• None is either a element or a element that was an external resource link that contributes to the styling processing model when the was created by the parser.\n• None 's style sheet was enabled when the element was created by the parser.\n• None The last time the event loop reached step 1, 's root was that .\n• The user agent hasn't given up on loading that particular style sheet yet. A user agent may give up on loading a style sheet at any time. Giving up on a style sheet before the style sheet loads, if the style sheet eventually does still load, means that the script might end up operating with incorrect information. For example, if a style sheet sets the color of an element to green, but a script that inspects the resulting style is executed before the sheet is loaded, the script will find that the element is black (or whatever the default color is), and might thus make poor choices (e.g., deciding to use black as the color elsewhere on the page, instead of green). Implementers have to balance the likelihood of a script using incorrect information with the performance impact of doing nothing while waiting for a slow network request to finish.\n\nIt is expected that counterparts to the above rules also apply to PIs. However, this has not yet been thoroughly investigated.\n\nA has a , which is an ordered set, initially empty.\n\nA has a style sheet that is blocking scripts if the following steps return true:\n• None If 's script-blocking style sheet set is not empty, then return true.\n• None If 's node navigable is null, then return false.\n• None If is non-null and 's script-blocking style sheet set is not empty, then return true.\n\nA has no style sheet that is blocking scripts if it does not have a style sheet that is blocking scripts.\n\nThe element represents the contents of the document.\n\nIn conforming documents, there is only one element. The IDL attribute provides scripts with easy access to a document's element.\n\nSome DOM operations (for example, parts of the drag and drop model) are defined in terms of \"the body element\". This refers to a particular element in the DOM, as per the definition of the term, and not any arbitrary element.\n\nThe element exposes as event handler content attributes a number of the event handlers of the object. It also mirrors their event handler IDL attributes.\n\nThe event handlers of the object named by the -reflecting body element event handler set, exposed on the element, replace the generic event handlers with the same names normally supported by HTML elements.\n\nThus, for example, a bubbling event dispatched on a child of the body element of a would first trigger the event handler content attributes of that element, then that of the root element, and only then would it trigger the event handler content attribute on the element. This is because the event would bubble from the target, to the , to the , to the , to the , and the event handler on the is watching the not the . A regular event listener attached to the using , however, would be run when the event bubbled through the and not when it reaches the object.\n\nThe element represents a complete, or self-contained, composition in a document, page, application, or site and that is, in principle, independently distributable or reusable, e.g. in syndication. This could be a forum post, a magazine or newspaper article, a blog entry, a user-submitted comment, an interactive widget or gadget, or any other independent item of content.\n\nWhen elements are nested, the inner elements represent articles that are in principle related to the contents of the outer article. For instance, a blog entry on a site that accepts user-submitted comments could represent the comments as elements nested within the element for the blog entry.\n\nAuthor information associated with an element (q.v. the element) does not apply to nested elements.\n\nWhen used specifically with content to be redistributed in syndication, the element is similar in purpose to the element in Atom. [ATOM]\n\nThe schema.org microdata vocabulary can be used to provide the publication date for an element, using one of the CreativeWork subtypes.\n\nWhen the main content of the page (i.e. excluding footers, headers, navigation blocks, and sidebars) is all one single self-contained composition, that content may be marked with an , but it is technically redundant in that case (since it's self-evident that the page is a single composition, as it is a single document).\n\nThe element represents a generic section of a document or application. A section, in this context, is a thematic grouping of content, typically with a heading.\n\nExamples of sections would be chapters, the various tabbed pages in a tabbed dialog box, or the numbered sections of a thesis. A web site's home page could be split into sections for an introduction, news items, and contact information.\n\nAuthors are encouraged to use the element instead of the element when it would make sense to syndicate the contents of the element.\n\nThe element is not a generic container element. When an element is needed only for styling purposes or as a convenience for scripting, authors are encouraged to use the element instead. A general rule is that the element is appropriate only if the element's contents would be listed explicitly in the document's outline.\n\nThe element represents a section of a page that links to other pages or to parts within the page: a section with navigation links.\n\nNot all groups of links on a page need to be in a element — the element is primarily intended for sections that consist of major navigation blocks. In particular, it is common for footers to have a short list of links to various pages of a site, such as the terms of service, the home page, and a copyright page. The element alone is sufficient for such cases; while a element can be used in such cases, it is usually unnecessary.\n\nUser agents (such as screen readers) that are targeted at users who can benefit from navigation information being omitted in the initial rendering, or who can benefit from navigation information being immediately available, can use this element as a way to determine what content on the page to initially skip or provide on request (or both).\n\nThe element represents a section of a page that consists of content that is tangentially related to the content around the element, and which could be considered separate from that content. Such sections are often represented as sidebars in printed typography.\n\nThe element can be used for typographical effects like pull quotes or sidebars, for advertising, for groups of elements, and for other content that is considered separate from the main content of the page.\n\nIt's not appropriate to use the element just for parentheticals, since those are part of the main flow of the document.\n\nThese elements represent headings for their sections.\n\nThe semantics and meaning of these elements are defined in the section on headings and outlines.\n\nThese elements have a heading level given by the number in their name. The heading level corresponds to the levels of nested sections. The element is for a top-level section, for a subsection, for a sub-subsection, and so on.\n\nThe element represents a heading and related content. The element may be used to group an – element with one or more elements containing content representing a subheading, alternative title, or tagline.\n\nThe element represents a group of introductory or navigational aids.\n\nA element is intended to usually contain a heading (an – element or an element), but this is not required. The element can also be used to wrap a section's table of contents, a search form, or any relevant logos.\n\nThe element is not sectioning content; it doesn't introduce a new section.\n\nThe element a footer for its nearest ancestor element, or for if there is no such ancestor. A footer typically contains information about its section such as who wrote it, links to related documents, copyright data, and the like.\n\nWhen the element contains entire sections, they appendices, indices, long colophons, verbose license agreements, and other such content.\n\nContact information for the author or editor of a section belongs in an element, possibly itself inside a . Bylines and other information that could be suitable for both a or a can be placed in either (or neither). The primary purpose of these elements is merely to help the author write self-explanatory markup that is easy to maintain and style; they are not intended to impose specific structures on authors.\n\nFooters don't necessarily have to appear at the end of a section, though they usually do.\n\nWhen there is no ancestor element, then it applies to the whole page.\n\nThe element is not itself ; it doesn't introduce a new section.\n\nThe element represents the contact information for its nearest or element ancestor. If that is the body element, then the contact information applies to the document as a whole.\n\nThe element must not be used to represent arbitrary addresses (e.g. postal addresses), unless those addresses are in fact the relevant contact information. (The element is the appropriate element for marking up postal addresses in general.)\n\nThe element must not contain information other than contact information.\n\nTypically, the element would be included along with other information in a element.\n\nThe contact information for a node is a collection of elements defined by the first applicable entry from the following list:\n\nUser agents may expose the contact information of a node to the user, or use it for other purposes, such as indexing sections based on the sections' contact information.\n\n– elements have a , which is given by the number in the element's name.\n\nThese elements represent . The lower a heading's heading level is, the fewer ancestor sections the heading has.\n\nThe is all headings in a document, in tree order.\n\nThe outline should be used for generating document outlines, for example when generating tables of contents. When creating an interactive table of contents, entries should jump the user to the relevant heading.\n\nIf a document has one or more headings, at least a single heading within the outline should have a heading level of 1.\n\nEach heading following another heading in the outline must have a heading level that is less than, equal to, or 1 greater than 's heading level.\n\nUser agents are encouraged to expose page outlines to users to aid in navigation. This is especially true for non-visual media, e.g. screen readers.\n\nA forms part of something else. An is its own thing. But how does one know which is which? Mostly the real answer is \"it depends on author intent\".\n\nFor example, one could imagine a book with a \"Granny Smith\" chapter that just said \"These juicy, green apples make a great filling for apple pies.\"; that would be a because there'd be lots of other chapters on (maybe) other kinds of apples.\n\nOn the other hand, one could imagine a tweet or reddit comment or tumblr post or newspaper classified ad that just said \"Granny Smith. These juicy, green apples make a great filling for apple pies.\"; it would then be s because that was the whole thing.\n\nA comment on an article is not part of the on which it is commenting, therefore it is its own .\n\nWhile paragraphs are usually represented in visual media by blocks of text that are physically separated from adjacent blocks through blank lines, a style sheet or user agent would be equally justified in presenting paragraph breaks in a different manner, for instance using inline pilcrows (¶).\n\nThe element should not be used when a more specific element is more appropriate.\n\nThe element represents a paragraph-level thematic break, e.g., a scene change in a story, or a transition to another topic within a section of a reference book; alternatively, it represents a separator between a set of options of a element.\n\nThe element does not affect the document's outline.\n\nThe element represents a block of preformatted text, in which structure is represented by typographic conventions rather than by elements.\n\nIn the HTML syntax, a leading newline character immediately following the element start tag is stripped.\n\nSome examples of cases where the element could be used:\n• Including an email, with paragraphs indicated by blank lines, lists indicated by lines prefixed with a bullet, and so on.\n• Including fragments of computer code, with structure indicated according to the conventions of that language.\n\nAuthors are encouraged to consider how preformatted text will be experienced when the formatting is lost, as will be the case for users of speech synthesizers, braille displays, and the like. For cases like ASCII art, it is likely that an alternative presentation, such as a textual description, would be more universally accessible to the readers of the document.\n\nTo represent a block of computer code, the element can be used with a element; to represent a block of computer output the element can be used with a element. Similarly, the element can be used within a element to indicate text that the user is to enter.\n\nThis element has rendering requirements involving the bidirectional algorithm.\n\nThe element represents a section that is quoted from another source.\n\nContent inside a must be quoted from another source, whose address, if it has one, may be cited in the attribute.\n\nIf the attribute is present, it must be a valid URL potentially surrounded by spaces. To obtain the corresponding citation link, the value of the attribute must be parsed relative to the element's node document. User agents may allow users to follow such citation links, but they are primarily intended for private use (e.g., by server-side scripts collecting statistics about a site's use of quotations), not for readers.\n\nThe content of a may be abbreviated or may have context added in the conventional manner for the text's language.\n\nAttribution for the quotation, if any, must be placed outside the element.\n\nThe IDL attribute must reflect the element's content attribute.\n\nExamples of how to represent a conversation are shown in a later section; it is not appropriate to use the and elements for this purpose.\n\nThe element represents a list of items, where the items have been intentionally ordered, such that changing the order would change the meaning of the document.\n\nThe items of the list are the element child nodes of the element, in tree order.\n\nThe attribute is a boolean attribute. If present, it indicates that the list is a descending list (..., 3, 2, 1). If the attribute is omitted, the list is an ascending list (1, 2, 3, ...).\n\nThe attribute, if present, must be a valid integer. It is used to determine the starting value of the list.\n\nAn element has a , which is an integer determined as follows:\n• If the element has a attribute, then:\n• None Let be the result of parsing the value of the attribute as an integer.\n• None If is not an error, then return .\n• None If the element has a attribute, then return the number of owned elements.\n\nThe attribute can be used to specify the kind of marker to use in the list, in the cases where that matters (e.g. because items are to be referenced by their number/letter). The attribute, if specified, must have a value that is identical to one of the characters given in the first cell of one of the rows of the following table. The attribute represents the state given in the cell in the second column of the row whose first cell matches the attribute's value; if none of the cells match, or if the attribute is omitted, then the attribute represents the decimal state.\n\nUser agents should render the items of the list in a manner consistent with the state of the attribute of the element. Numbers less than or equal to zero should always use the decimal system regardless of the attribute.\n\nFor CSS user agents, a mapping for this attribute to the 'list-style-type' CSS property is given in the Rendering section (the mapping is straightforward: the states above have the same names as their corresponding CSS values).\n\nIt is possible to redefine the default CSS list styles used to implement this attribute in CSS user agents; doing so will affect how list items are rendered.\n\nThe and IDL attributes must reflect the respective content attributes of the same name.\n\nThe IDL attribute must reflect the content attribute of the same name, with a default value of 1.\n\nThis means that the IDL attribute does not necessarily match the list's starting value, in cases where the content attribute is omitted and the content attribute is specified.\n\nThe element represents a list of items, where the order of the items is not important — that is, where changing the order would not materially change the meaning of the document.\n\nThe items of the list are the element child nodes of the element.\n\nThe element represents a toolbar consisting of its contents, in the form of an unordered list of items (represented by elements), each of which represents a command that the user can perform or activate.\n\nThe element is simply a semantic alternative to to express an unordered list of commands (a \"toolbar\").\n\nThe element represents a list item. If its parent element is an , , or element, then the element is an item of the parent element's list, as defined for those elements. Otherwise, the list item has no defined list-related relationship to any other element.\n\nThe attribute, if present, must be a valid integer. It is used to determine the ordinal value of the list item, when the 's list owner is an element.\n\nAny element whose computed value of 'display' is 'list-item' has a , which is determined as follows:\n• None If the element is not being rendered, return null; the element has no list owner.\n• None Let be the element's parent.\n• None If the element has an , , or ancestor, set to the closest such ancestor element.\n• Return the closest inclusive ancestor of that produces a CSS box. Such an element will always exist, as at the very least the document element will always produce a CSS box.\n\nTo determine the of each element owned by a given list owner , perform the following steps:\n• None If is an element, let be 's starting value. Otherwise, let be 1.\n• None Loop: If is greater than the number of list items that owns, then return; all of 's owned list items have been assigned ordinal values.\n• None Let be the th of 's owned list items, in tree order.\n• If is an element that has a attribute, then:\n• None Let be the result of parsing the value of the attribute as an integer.\n• None If is not an error, then set to .\n• None The ordinal value of is .\n• None If is an element, and has a attribute, decrement by 1; otherwise, increment by 1.\n• None Go to the step labeled loop.\n\nThe IDL attribute must reflect the value of the content attribute.\n\nWhile it is conforming to include heading elements (e.g. ) inside elements, it likely does not convey the semantics that the author intended. A heading starts a new section, so a heading in a list implicitly splits the list into spanning multiple sections.\n\nThe element represents an association list consisting of zero or more name-value groups (a description list). A name-value group consists of one or more names ( elements, possibly as children of a element child) followed by one or more values ( elements, possibly as children of a element child), ignoring any nodes other than and element children, and and elements that are children of element children. Within a single element, there should not be more than one element for each name.\n\nName-value groups may be terms and definitions, metadata topics and values, questions and answers, or any other groups of name-value data.\n\nThe values within a group are alternatives; multiple paragraphs forming part of the same value must all be given within the same element.\n\nThe order of the list of groups, and of the names and values within each group, may be significant.\n\nIn order to annotate groups with microdata attributes, or other global attributes that apply to whole groups, or just for styling purposes, each group in a element can be wrapped in a element. This does not change the semantics of the element.\n\nThe name-value groups of a element are determined using the following algorithm. A name-value group has a name (a list of elements, initially empty) and a value (a list of elements, initially empty).\n• None Let be an empty list of name-value groups.\n• None Let be a new name-value group.\n• None Let be 's first child.\n• While is not null:\n• If is a element, then:\n• None Let be 's first child.\n• While is not null:\n• None Otherwise, process or for .\n• None If is not empty, then append to .\n\nTo for a node means to follow these steps:\n• None Let , , and be the same variables as those of the same name in the algorithm that invoked these steps.\n• If is a element, then:\n• None If is true, then append to , set to a new name-value group, and set to false.\n• None Otherwise, if is a element, then append to 's value and set to true.\n\nWhen a name-value group has an empty list as name or value, it is often due to accidentally using elements in the place of elements and vice versa. Conformance checkers can spot such mistakes and might be able to advise authors how to correctly use the markup.\n\nThe element is inappropriate for marking up dialogue. See some examples of how to mark up dialogue.\n\nThe element represents the term, or name, part of a term-description group in a description list ( element).\n\nThe element itself, when used in a element, does not indicate that its contents are a term being defined, but this can be indicated using the element.\n\nThe element represents the description, definition, or value, part of a term-description group in a description list ( element).\n\nThe element represents some flow content, optionally with a caption, that is self-contained (like a complete sentence) and is typically referenced as a single unit from the main flow of the document.\n\n\"Self-contained\" in this context does not necessarily mean independent. For example, each sentence in a paragraph is self-contained; an image that is part of a sentence would be inappropriate for , but an entire sentence made of images would be fitting.\n\nThe element can thus be used to annotate illustrations, diagrams, photos, code listings, etc.\n\nThe first element child of the element, if any, represents the caption of the element's contents. If there is no child element, then there is no caption.\n\nA element's contents are part of the surrounding flow. If the purpose of the page is to display the figure, for example a photograph on an image sharing site, the and elements can be used to explicitly provide a caption for that figure. For content that is only tangentially related, or that serves a separate purpose than the surrounding flow, the element should be used (and can itself wrap a ). For example, a pull quote that repeats content from an would be more appropriate in an than in a , because it isn't part of the content, it's a repetition of the content for the purposes of enticing readers or highlighting key topics.\n\nThe element represents a caption or legend for the rest of the contents of the element's parent element, if any.\n\nThe element represents the dominant contents of the document.\n\nA document must not have more than one element that does not have the attribute specified.\n\nA is one whose ancestor elements are limited to , , , without an accessible name, and autonomous custom elements. Each element must be a hierarchically correct element.\n\nThe element represents a part of a document or application that contains a set of form controls or other content related to performing a search or filtering operation. This could be a search of the web site or application; a way of searching or filtering search results on the current web page; or a global or Internet-wide search function.\n\nIt's not appropriate to use the element just for presenting search results, though suggestions and links as part of \"quick search\" results can be included as part of a search feature. Rather, a returned web page of search results would instead be expected to be presented as part of the main content of that web page.\n\nThe element has no special meaning at all. It represents its children. It can be used with the , , and attributes to mark up semantics common to a group of consecutive elements. It can also be used in a element, wrapping groups of and elements.\n\nAuthors are strongly encouraged to view the element as an element of last resort, for when no other element is suitable. Use of more appropriate elements instead of the element leads to better accessibility for readers and easier maintainability for authors.\n\nIf the element has an attribute, then it represents a hyperlink (a hypertext anchor) labeled by its contents.\n\nIf the element has no attribute, then the element represents a placeholder for where a link might otherwise have been placed, if it had been relevant, consisting of just the element's contents.\n\nThe , , , , , , and attributes must be omitted if the attribute is not present.\n\nIf the attribute is specified on an element, then the attribute must also be specified.\n\nThe , , , , and attributes affect what happens when users follow hyperlinks or download hyperlinks created using the element. The , , and attributes may be used to indicate to the user the likely nature of the target resource before the user follows the link.\n\nThe IDL attributes , , , , , and , must reflect the respective content attributes of the same name.\n\nThe IDL attribute must reflect the content attribute.\n\nThe IDL attribute must reflect the content attribute, limited to only known values.\n\nThe attribute's getter must return this element's descendant text content.\n\nThe attribute's setter must string replace all with the given value within this element.\n\nThe element represents stress emphasis of its contents.\n\nThe level of stress that a particular piece of content has is given by its number of ancestor elements.\n\nThe placement of stress emphasis changes the meaning of the sentence. The element thus forms an integral part of the content. The precise way in which stress is used in this way depends on the language.\n\nThe element represents strong importance, seriousness, or urgency for its contents.\n\nImportance: the element can be used in a heading, caption, or paragraph to distinguish the part that really matters from other parts that might be more detailed, more jovial, or merely boilerplate. (This is distinct from marking up subheadings, for which the element is appropriate.)\n\nFor example, the first word of the previous paragraph is marked up with to distinguish it from the more detailed text in the rest of the paragraph.\n\nSeriousness: the element can be used to mark up a warning or caution notice.\n\nUrgency: the element can be used to denote contents that the user needs to see sooner than other parts of the document.\n\nThe relative level of importance of a piece of content is given by its number of ancestor elements; each element increases the importance of its contents.\n\nChanging the importance of a piece of text with the element does not change the meaning of the sentence.\n\nThe element represents side comments such as small print.\n\nSmall print typically features disclaimers, caveats, legal restrictions, or copyrights. Small print is also sometimes used for attribution, or for satisfying licensing requirements.\n\nThe element does not \"de-emphasize\" or lower the importance of text emphasized by the element or marked as important with the element. To mark text as not emphasized or important, simply do not mark it up with the or elements respectively.\n\nThe element should not be used for extended spans of text, such as multiple paragraphs, lists, or sections of text. It is only intended for short runs of text. The text of a page listing terms of use, for instance, would not be a suitable candidate for the element: in such a case, the text is not a side comment, it is the main content of the page.\n\nThe element must not be used for subheadings; for that purpose, use the element.\n\nThe element represents contents that are no longer accurate or no longer relevant.\n\nThe element is not appropriate when indicating document edits; to mark a span of text as having been removed from a document, use the element.\n\nThe element represents the title of a work (e.g. a book, a paper, an essay, a poem, a score, a song, a script, a film, a TV show, a game, a sculpture, a painting, a theatre production, a play, an opera, a musical, an exhibition, a legal case report, a computer program, etc.). This can be a work that is being quoted or referenced in detail (i.e., a citation), or it can just be a work that is mentioned in passing.\n\nA person's name is not the title of a work — even if people call that person a piece of work — and the element must therefore not be used to mark up people's names. (In some cases, the element might be appropriate for names; e.g. in a gossip article where the names of famous people are keywords rendered with a different style to draw attention to them. In other cases, if an element is really needed, the element can be used.)\n\nA citation is not a quote (for which the element is appropriate).\n\nThe element represents some phrasing content quoted from another source.\n\nQuotation punctuation (such as quotation marks) that is quoting the contents of the element must not appear immediately before, after, or inside elements; they will be inserted into the rendering by the user agent.\n\nContent inside a element must be quoted from another source, whose address, if it has one, may be cited in the attribute. The source may be fictional, as when quoting characters in a novel or screenplay.\n\nIf the attribute is present, it must be a valid URL potentially surrounded by spaces. To obtain the corresponding citation link, the value of the attribute must be parsed relative to the element's node document. User agents may allow users to follow such citation links, but they are primarily intended for private use (e.g., by server-side scripts collecting statistics about a site's use of quotations), not for readers.\n\nThe element must not be used in place of quotation marks that do not represent quotes; for example, it is inappropriate to use the element for marking up sarcastic statements.\n\nThe use of elements to mark up quotations is entirely optional; using explicit quotation punctuation without elements is just as correct.\n\nThe element represents the defining instance of a term. The paragraph, description list group, or section that is the nearest ancestor of the element must also contain the definition(s) for the term given by the element.\n\n: if the element has a attribute, then the exact value of that attribute is the term being defined. Otherwise, if it contains exactly one element child node and no child nodes, and that child element is an element with a attribute, then the exact value of that attribute is the term being defined. Otherwise, it is the descendant text content of the element that gives the term being defined.\n\nIf the attribute of the element is present, then it must contain only the term being defined.\n\nThe attribute of ancestor elements does not affect elements.\n\nAn element that links to a element represents an instance of the term defined by the element.\n\nThe element represents an abbreviation or acronym, optionally with its expansion. The attribute may be used to provide an expansion of the abbreviation. The attribute, if specified, must contain an expansion of the abbreviation, and nothing else.\n\nIf an abbreviation is pluralized, the expansion's grammatical number (plural vs singular) must match the grammatical number of the contents of the element.\n\nAbbreviations do not have to be marked up using this element. It is expected to be useful in the following cases:\n• Abbreviations for which the author wants to give expansions, where using the element with a attribute is an alternative to including the expansion inline (e.g. in parentheses).\n• Abbreviations that are likely to be unfamiliar to the document's readers, for which authors are encouraged to either mark up the abbreviation using an element with a attribute or include the expansion inline in the text the first time the abbreviation is used.\n• Abbreviations whose presence needs to be semantically annotated, e.g. so that they can be identified from a style sheet and given specific styles, for which the element can be used without a attribute.\n\nProviding an expansion in a attribute once will not necessarily cause other elements in the same document with the same contents but without a attribute to behave as if they had the same expansion. Every element is independent.\n\nThe element allows one or more spans of phrasing content to be marked with ruby annotations. Ruby annotations are short runs of text presented alongside base text, primarily used in East Asian typography as a guide for pronunciation or to include other annotations. In Japanese, this form of typography is also known as furigana.\n\nThe content model of elements consists of one or more of the following sequences:\n• One or the other of the following:\n• None Phrasing content, but with no elements and with no element descendants\n• None A single element that itself has no element descendants\n• One or the other of the following:\n• None One or more elements\n• None An element followed by one or more elements, each of which is itself followed by an element\n\nThe and elements can be used for a variety of kinds of annotations, including in particular (though by no means limited to) those described below. For more details on Japanese Ruby in particular, and how to render Ruby for Japanese, see . [JLREQ]\n\nAt the time of writing, CSS does not yet provide a way to fully control the rendering of the HTML element. It is hoped that CSS will be extended to support the styles described below in due course.\n\nWithin a element that does not have a element ancestor, content is segmented and segments are placed into three categories: base text segments, annotation segments, and ignored segments. Ignored segments do not form part of the document's semantics (they consist of some inter-element whitespace and elements, the latter of which are used for legacy user agents that do not support ruby at all). Base text segments can overlap (with a limit of two segments overlapping any one position in the DOM, and with any segment having an earlier start point than an overlapping segment also having an equal or later end point, and any segment have a later end point than an overlapping segment also having an equal or earlier start point). Annotation segments correspond to elements. Each annotation segment can be associated with a base text segment, and each base text segment can have annotation segments associated with it. (In a conforming document, each base text segment is associated with at least one annotation segment, and each annotation segment is associated with one base text segment.) A element represents the union of the segments of base text it contains, along with the mapping from those base text segments to annotation segments. Segments are described in terms of DOM ranges; annotation segment ranges always consist of exactly one element. [DOM]\n\nAt any particular time, the segmentation and categorization of content of a element is the result that would be obtained from running the following algorithm:\n• None Let be an empty list of base text segments, each potentially with a list of base text subsegments.\n• None Let be an empty list of annotation segments, each potentially being associated with a base text segment or subsegment.\n• None Let be the element for which the algorithm is being run.\n• None If has a element ancestor, then jump to the step labeled end.\n• None Start mode: If is greater than or equal to the number of child nodes in , then jump to the step labeled end mode.\n• None If the th node in is an or element, jump to the step labeled annotation mode.\n• None Set to the value of .\n• None Base mode: If the th node in is a element, and if is the same element as , then push a ruby level and then jump to the step labeled start mode.\n• None If the th node in is an or element, then set the current base text and then jump to the step labeled annotation mode.\n• None Base mode post-increment: If is greater than or equal to the number of child nodes in , then jump to the step labeled end mode.\n• None Annotation mode: If the th node in is an element, then push a ruby annotation and jump to the step labeled annotation mode increment.\n• None If the th node in is an element, jump to the step labeled annotation mode increment.\n• None If the th node in is not a node, or is a node that is not inter-element whitespace, then jump to the step labeled base mode.\n• None Annotation mode increment: Let be plus one.\n• None Annotation mode white-space skipper: If is equal to the number of child nodes in then jump to the step labeled end mode.\n• None If the th node in is an element or an element, then set to and jump to the step labeled annotation mode.\n• None If the th node in is not a node, or is a node that is not inter-element whitespace, then jump to the step labeled base mode (without further incrementing , so the inter-element whitespace seen so far becomes part of the next base text segment).\n• None End mode: If is not the same element as , then pop a ruby level and jump to the step labeled base mode post-increment.\n• None End: Return and . Any content of the element not described by segments in either of those lists is implicitly in an ignored segment.\n\nWhen the steps above say to , it means to run the following steps at that point in the algorithm:\n• None Let be a DOM range whose start is the boundary point ( , ) and whose end is the boundary point ( , ).\n• None Let be a base text segment described by the range .\n\nWhen the steps above say to , it means to run the following steps at that point in the algorithm:\n• None Let be the th node in .\n• None Set to the value of .\n\nWhen the steps above say to , it means to run the following steps at that point in the algorithm:\n• None Let be the position of in .\n• None Set to the value of .\n\nWhen the steps above say to , it means to run the following steps at that point in the algorithm:\n• None Let be the element that is the th node of .\n• None Let be a DOM range whose start is the boundary point ( , ) and whose end is the boundary point ( , plus one) (i.e. that contains only ).\n• None Let be an annotation segment described by the range .\n• None If is not null, associate with .\n\nThe element marks the ruby text component of a ruby annotation. When it is the child of a element, it doesn't represent anything itself, but the element uses it as part of determining what it represents.\n\nAn element that is not a child of a element represents the same thing as its children.\n\nThe element can be used to provide parentheses or other content around a ruby text component of a ruby annotation, to be shown by user agents that don't support ruby annotations.\n\nAn element that is a child of a element represents nothing. An element whose parent element is not a element represents its children.\n\nThe element represents its contents, along with a machine-readable form of those contents in the attribute.\n\nThe attribute must be present. Its value must be a representation of the element's contents in a machine-readable format.\n\nWhen the value is date- or time-related, the more specific element can be used instead.\n\nThe element can be used for several purposes.\n\nWhen combined with microformats or the microdata attributes defined in this specification, the element serves to provide both a machine-readable value for the purposes of data processors, and a human-readable value for the purposes of rendering in a web browser. In this case, the format to be used in the attribute is determined by the microformats or microdata vocabulary in use.\n\nThe element can also, however, be used in conjunction with scripts in the page, for when a script has a literal value to store alongside a human-readable value. In such cases, the format to be used depends only on the needs of the script. (The attributes can also be useful in such situations.)\n\nThe IDL attribute must reflect the content attribute of the same name.\n\nThe element represents its contents, along with a machine-readable form of those contents in the attribute. The kind of content is limited to various kinds of dates, times, time-zone offsets, and durations, as described below.\n\nThe attribute may be present. If present, its value must be a representation of the element's contents in a machine-readable format.\n\nA element that does not have a content attribute must not have any element descendants.\n\nThe of a element is the value of the element's content attribute, if it has one, otherwise the child text content of the element.\n\nThe of a element must match one of the following syntaxes.\n\nThe must be obtained from the element's by using the following algorithm:\n• None If parsing a month string from the element's returns a month, that is the machine-readable equivalent; return.\n• None If from the element's returns a , that is the machine-readable equivalent; return.\n• None If from the element's returns a , that is the machine-readable equivalent; return.\n• None If parsing a time string from the element's returns a time, that is the machine-readable equivalent; return.\n• None If from the element's returns a , that is the machine-readable equivalent; return.\n• None If parsing a time-zone offset string from the element's returns a time-zone offset, that is the machine-readable equivalent; return.\n• None If from the element's returns a , that is the machine-readable equivalent; return.\n• None If parsing a week string from the element's returns a week, that is the machine-readable equivalent; return.\n• None If the element's consists of only ASCII digits, at least one of which is not U+0030 DIGIT ZERO (0), then the machine-readable equivalent is the base-ten interpretation of those digits, representing a year; return.\n• None If parsing a duration string from the element's returns a duration, that is the machine-readable equivalent; return.\n• None There is no machine-readable equivalent.\n\nThe algorithms referenced above are intended to be designed such that for any arbitrary string , only one of the algorithms returns a value. A more efficient approach might be to create a single algorithm that parses all these data types in one pass; developing such an algorithm is left as an exercise to the reader.\n\nThe IDL attribute must reflect the element's content attribute.\n\nThe element represents a fragment of computer code. This could be an XML element name, a filename, a computer program, or any other string that a computer would recognize.\n\nThere is no formal way to indicate the language of computer code being marked up. Authors who wish to mark elements with the language used, e.g. so that syntax highlighting scripts can use the right rules, can use the attribute, e.g. by adding a class prefixed with \" \" to the element.\n\nSee the element for more details.\n\nThe element represents a variable. This could be an actual variable in a mathematical expression or programming context, an identifier representing a constant, a symbol identifying a physical quantity, a function parameter, or just be a term used as a placeholder in prose.\n\nFor mathematics, in particular for anything beyond the simplest of expressions, MathML is more appropriate. However, the element can still be used to refer to specific variables that are then mentioned in MathML expressions.\n\nThe element represents sample or quoted output from another program or computing system.\n\nSee the and elements for more details.\n\nThis element can be contrasted with the element, which can be used to provide immediate output in a web application.\n\nThe element represents user input (typically keyboard input, although it may also be used to represent other input, such as voice commands).\n\nWhen the element is nested inside a element, it represents the input as it was echoed by the system.\n\nWhen the element contains a element, it represents input based on system output, for example invoking a menu item.\n\nWhen the element is nested inside another element, it represents an actual key or other single unit of input as appropriate for the input mechanism.\n\nThe element represents a superscript and the element represents a subscript.\n\nThese elements must be used only to mark up typographical conventions with specific meanings, not for typographical presentation for presentation's sake. For example, it would be inappropriate for the and elements to be used in the name of the LaTeX document preparation system. In general, authors should use these elements only if the absence of those elements would change the meaning of the content.\n\nIn certain languages, superscripts are part of the typographical conventions for some abbreviations.\n\nThe element can be used inside a element, for variables that have subscripts.\n\nMathematical expressions often use subscripts and superscripts. Authors are encouraged to use MathML for marking up mathematics, but authors may opt to use and if detailed mathematical markup is not desired. [MATHML]\n\nThe element represents a span of text in an alternate voice or mood, or otherwise offset from the normal prose in a manner indicating a different quality of text, such as a taxonomic designation, a technical term, an idiomatic phrase from another language, transliteration, a thought, or a ship name in Western texts.\n\nTerms in languages different from the main text should be annotated with attributes (or, in XML, attributes in the XML namespace).\n\nAuthors can use the attribute on the element to identify why the element is being used, so that if the style of a particular use (e.g. dream sequences as opposed to taxonomic terms) is to be changed at a later date, the author doesn't have to go through the entire document (or series of related documents) annotating each use.\n\nAuthors are encouraged to consider whether other elements might be more applicable than the element, for instance the element for marking up stress emphasis, or the element to mark up the defining instance of a term.\n\nStyle sheets can be used to format elements, just like any other element can be restyled. Thus, it is not the case that content in elements will necessarily be italicized.\n\nThe element represents a span of text to which attention is being drawn for utilitarian purposes without conveying any extra importance and with no implication of an alternate voice or mood, such as key words in a document abstract, product names in a review, actionable words in interactive text-driven software, or an article lede.\n\nAs with the element, authors can use the attribute on the element to identify why the element is being used, so that if the style of a particular use is to be changed at a later date, the author doesn't have to go through annotating each use.\n\nThe element should be used as a last resort when no other element is more appropriate. In particular, headings should use the to elements, stress emphasis should use the element, importance should be denoted with the element, and text marked or highlighted should use the element.\n\nStyle sheets can be used to format elements, just like any other element can be restyled. Thus, it is not the case that content in elements will necessarily be boldened.\n\nThe element represents a span of text with an unarticulated, though explicitly rendered, non-textual annotation, such as labeling the text as being a proper name in Chinese text (a Chinese proper name mark), or labeling the text as being misspelt.\n\nIn most cases, another element is likely to be more appropriate: for marking stress emphasis, the element should be used; for marking key words or phrases either the element or the element should be used, depending on the context; for marking book titles, the element should be used; for labeling text with explicit textual annotations, the element should be used; for technical terms, taxonomic designation, transliteration, a thought, or for labeling ship names in Western texts, the element should be used.\n\nThe default rendering of the element in visual presentations clashes with the conventional rendering of hyperlinks (underlining). Authors are encouraged to avoid using the element where it could be confused for a hyperlink.\n\nThe element represents a run of text in one document marked or highlighted for reference purposes, due to its relevance in another context. When used in a quotation or other block of text referred to from the prose, it indicates a highlight that was not originally present but which has been added to bring the reader's attention to a part of the text that might not have been considered important by the original author when the block was originally written, but which is now under previously unexpected scrutiny. When used in the main prose of a document, it indicates a part of the document that has been highlighted due to its likely relevance to the user's current activity.\n\nThe element represents a span of text that is to be isolated from its surroundings for the purposes of bidirectional text formatting. [BIDI]\n\nThe global attribute defaults to on this element (it never inherits from the parent element like with other elements).\n\nThis element has rendering requirements involving the bidirectional algorithm.\n\nThe element represents explicit text directionality formatting control for its children. It allows authors to override the Unicode bidirectional algorithm by explicitly specifying a direction override. [BIDI]\n\nAuthors must specify the attribute on this element, with the value to specify a left-to-right override and with the value to specify a right-to-left override. The value must not be specified.\n\nThis element has rendering requirements involving the bidirectional algorithm.\n\nThe element doesn't mean anything on its own, but can be useful when used together with the global attributes, e.g. , , or . It represents its children.\n\nWhile line breaks are usually represented in visual media by physically moving subsequent text to a new line, a style sheet or user agent would be equally justified in causing line breaks to be rendered in a different manner, for instance as green dots, or as extra spacing.\n\nelements must be used only for line breaks that are actually part of the content, as in poems or addresses.\n\nelements must not be used for separating thematic groups in a paragraph.\n\nIf a paragraph consists of nothing but a single element, it represents a placeholder blank line (e.g. as in a template). Such blank lines must not be used for presentation purposes.\n\nAny content inside elements must not be considered part of the surrounding text.\n\nThis element has rendering requirements involving the bidirectional algorithm.\n\nAny content inside elements must not be considered part of the surrounding text.\n\nThis element has rendering requirements involving the bidirectional algorithm.\n\nLinks are a conceptual construct, created by , , , and elements, that represent a connection between two resources, one of which is the current . There are three kinds of links in HTML:\n\nFor elements with an attribute and a attribute, links must be created for the keywords of the attribute, as defined for those keywords in the link types section.\n\nSimilarly, for and elements with an attribute and a attribute, links must be created for the keywords of the attribute as defined for those keywords in the link types section. Unlike elements, however, and elements with an attribute that either do not have a attribute, or whose attribute has no keywords that are defined as specifying hyperlinks, must also create a hyperlink. This implied hyperlink has no special meaning (it has no link type) beyond linking the element's node document to the resource given by the element's attribute.\n\nSimilarly, for elements with a attribute, links must be created for the keywords of the attribute as defined for those keywords in the link types section. elements that do not have a attribute, or whose attribute has no keywords that are defined as specifying hyperlinks, must also create a hyperlink.\n\nA hyperlink can have one or more that modify the processing semantics of that hyperlink.\n\nThe attribute on and elements must have a value that is a valid URL potentially surrounded by spaces.\n\nThe attribute on and elements is not required; when those elements do not have attributes they do not create hyperlinks.\n\nThe attribute, if present, must be a valid navigable target name or keyword. It gives the name of the navigable that will be used. User agents use this name when following hyperlinks.\n\nThe attribute, if present, indicates that the author intends the hyperlink to be used for downloading a resource. The attribute may have a value; the value, if any, specifies the default filename that the author recommends for use in labeling the resource in a local file system. There are no restrictions on allowed values, but authors are cautioned that most file systems have limitations with regard to what punctuation is supported in filenames, and user agents are likely to adjust filenames accordingly.\n\nThe attribute, if present, gives the URLs of the resources that are interested in being notified if the user follows the hyperlink. The value must be a set of space-separated tokens, each of which must be a valid non-empty URL whose scheme is an HTTP(S) scheme. The value is used by the user agent for hyperlink auditing.\n\nThe attribute on and elements controls what kinds of links the elements create. The attribute's value must be an unordered set of unique space-separated tokens. The allowed keywords and their meanings are defined below.\n\n's supported tokens are the keywords defined in HTML link types which are allowed on and elements, impact the processing model, and are supported by the user agent. The possible supported tokens are , , and . 's supported tokens must only include the tokens from this list that the user agent implements the processing model for.\n\nThe attribute has no default value. If the attribute is omitted or if none of the values in the attribute are recognized by the user agent, then the document has no particular relationship with the destination resource other than there being a hyperlink between the two.\n\nThe attribute on elements that create hyperlinks, if present, gives the language of the linked resource. It is purely advisory. The value must be a valid BCP 47 language tag. [BCP47] User agents must not consider this attribute authoritative — upon fetching the resource, user agents must use only language information associated with the resource to determine its language, not metadata included in the link to the resource.\n\nThe attribute, if present, gives the MIME type of the linked resource. It is purely advisory. The value must be a valid MIME type string. User agents must not consider the attribute authoritative — upon fetching the resource, user agents must not use metadata included in the link to the resource to determine its type.\n\nThe attribute is a referrer policy attribute. Its purpose is to set the referrer policy used when following hyperlinks. [REFERRERPOLICY]\n\nWhen an or element's activation behavior is invoked, the user agent may allow the user to indicate a preference regarding whether the hyperlink is to be used for navigation or whether the resource it specifies is to be downloaded.\n\nIn the absence of a user preference, the default should be navigation if the element has no attribute, and should be to download the specified resource if it does.\n\nThe activation behavior of an or element given an event is:\n• None If has no attribute, then return.\n• None If is an element, and 's target is an with an attribute specified, then:\n• None Let and be 0.\n• None If 's attribute is initialized to true, then set to the distance in CSS pixels from the left edge of the image to the location of the click, and set to the distance in CSS pixels from the top edge of the image to the location of the click.\n• None If is negative, set to 0.\n• None If is negative, set to 0.\n• None Set to the concatenation of U+003F (?), the value of expressed as a base-ten integer using ASCII digits, U+002C (,), and the value of expressed as a base-ten integer using ASCII digits.\n• If the user has expressed a preference to download the hyperlink, then set to \" \". That is, if the user has expressed a specific preference for downloading, this no longer counts as merely \" \".\n• None If has a attribute, or if the user has expressed a preference to download the hyperlink, then download the hyperlink created by with hyperlinkSuffix set to and userInvolvement set to .\n• None Otherwise, follow the hyperlink created by with hyperlinkSuffix set to and userInvolvement set to .\n\nAn element implementing the mixin has an associated (null or a URL). It is initially null.\n\nAn element implementing the mixin has an associated algorithm, which runs these steps:\n• None If this element's content attribute is absent, then return.\n• None Let be the result of encoding-parsing a URL given this element's content attribute's value, relative to this element's node document.\n• None If is not failure, then set this element's url to .\n\nWhen elements implementing the mixin are created, and whenever those elements have their content attribute set, changed, or removed, the user agent must set the url.\n\nThis is only observable for URLs as parsing them involves a Blob URL Store lookup.\n\nAn element implementing the mixin has an associated algorithm, which runs these steps:\n• None If the element's url is non-null, its scheme is \" \", and it has an opaque path, then terminate these steps.\n\nTo , set the element's content attribute's value to the element's url, serialized.\n• None If is null and this has no content attribute, return the empty string.\n• None Otherwise, if is null, return this's content attribute's value.\n\nThe setter steps are to set this's content attribute's value to the given value.\n• None If this's url is null, return the empty string.\n• None If this's url is null, then return.\n• Basic URL parse the given value, followed by \" \", with this's url as url and scheme start state as state override. Because the URL parser ignores multiple consecutive colons, providing a value of \" \" (or even \" \") is the same as providing a value of \" \".\n• None If this's url is null, return the empty string.\n• None If is null or cannot have a username/password/port, then return.\n• None Set the username, given and the given value.\n• None If is null, then return the empty string.\n• None If is null or cannot have a username/password/port, then return.\n• None Set the password, given and the given value.\n• None If or 's host is null, return the empty string.\n• None Return 's host, serialized, followed by \" \" and 's port, serialized.\n• None If is null or has an opaque path, then return.\n• None Basic URL parse the given value, with as url and host state as state override.\n• None If or 's host is null, return the empty string.\n• None If is null or has an opaque path, then return.\n• None Basic URL parse the given value, with as url and hostname state as state override.\n• None If or 's port is null, return the empty string.\n• None If is null or cannot have a username/password/port, then return.\n• None If the given value is the empty string, then set 's port to null.\n• None Otherwise, basic URL parse the given value, with as url and port state as state override.\n• None If is null, then return the empty string.\n• None If is null or has an opaque path, then return.\n• None Basic URL parse the given value, with as url and path start state as state override.\n• None If is null, or 's query is either null or the empty string, return the empty string.\n• None If is null, terminate these steps.\n• None If the given value is the empty string, set 's query to null.\n• \n• None Let be the given value with a single leading \" \" removed, if any.\n• None Basic URL parse , with as url and query state as state override.\n• None If is null, or 's fragment is either null or the empty string, return the empty string.\n• None If is null, then return.\n• None If the given value is the empty string, set 's fragment to null.\n• \n• None Let be the given value with a single leading \" \" removed, if any.\n• None Basic URL parse , with as url and fragment state as state override.\n\nAn element if any of the following are true:\n• None 's node document is not fully active; or\n• None is not an element and is not connected.\n\nThis is also used by form submission for the element. The exception for elements is for compatibility with web content.\n\nTo , given an , , or element , a URL record , and a string , perform the following steps. They return a boolean.\n• None If 's link types include the or keyword, then return true.\n• None If 's link types do not include the keyword and is an ASCII case-insensitive match for \" \", then return true.\n• If 's blob URL entry is not null:\n• None If is not same site with , then return true.\n\nTo created by an element , given an optional (default null) and an optional (default \" \"):\n• None If cannot navigate, then return.\n• None Let be the empty string.\n• None If is an or element, then set to the result of getting an element's target given .\n• None Let be the result of encoding-parsing a URL given 's attribute value, relative to 's node document.\n• None If is failure, then return.\n• None Let be the result of getting an element's noopener with , , and .\n• None Let be the first return value of applying the rules for choosing a navigable given , 's node navigable, and .\n• None If is null, then return.\n• None Let be the result of applying the URL serializer to .\n• None If is non-null, then append it to .\n• None Let be the current state of 's content attribute.\n• None If 's link types includes the keyword, then set to \" \".\n• Navigate to using 's node document, with referrerPolicy set to , userInvolvement set to , and sourceElement set to . Unlike many other types of navigations, following hyperlinks does not have special \" \" behavior for when documents are not completely loaded. This is true for both user-initiated instances of following hyperlinks, as well as script-triggered ones via, e.g., .\n\nIn some cases, resources are intended for later use rather than immediate viewing. To indicate that a resource is intended to be downloaded for use later, rather than immediately used, the attribute can be specified on the or element that creates the hyperlink to that resource.\n\nThe attribute can furthermore be given a value, to specify the filename that user agents are to use when storing the resource in a file system. This value can be overridden by the ` ` HTTP header's filename parameters. [RFC6266]\n\nIn cross-origin situations, the attribute has to be combined with the ` ` HTTP header, specifically with the disposition type, to avoid the user being warned of possibly nefarious activity. (This is to protect users from being made to download sensitive personal or confidential information without their full understanding.)\n\nTo created by an element , given an optional (default null) and an optional (default \" \"):\n• None If cannot navigate, then return.\n• None If 's node document's active sandboxing flag set has the sandboxed downloads browsing context flag set, then return.\n• None Let be the result of encoding-parsing-and-serializing a URL given 's attribute value, relative to 's node document.\n• None If is failure, then return.\n• None If is non-null, then append it to .\n• If is not \" \", then:\n• None Let be the value of 's attribute.\n• None Let be the result of firing a download request event at with destinationURL set to , userInvolvement set to , sourceElement set to , and filename set to .\n• None If is false, then return.\n• \n• None Optionally, the user agent may abort these steps, if it believes doing so would safeguard the user from a potentially hostile download.\n• None Let be a new request whose URL is , client is entry settings object, initiator is \" \", destination is the empty string, and whose synchronous flag and use-URL-credentials flag are set.\n• None Handle the result of fetching as a download.\n\nWhen a user agent is to handle a resource obtained from a fetch , it should provide the user with a way to save the resource for later use, if a resource is successfully obtained. Otherwise, it should report any problems downloading the file to the user.\n\nIf the user agent needs a filename for a resource being handled as a download, it should select one using the following algorithm.\n\nThis algorithm is intended to mitigate security dangers involved in downloading files from untrusted sites, and user agents are strongly urged to follow it.\n• None Let be the undefined value.\n• None If the resource has a ` ` header, that header specifies the disposition type, and the header includes filename information, then let have the value specified by the header, and jump to the step labeled sanitize below. [RFC6266]\n• None Let be the origin of the in which the download or navigate action resulting in the download was initiated, if any.\n• None Let be the origin of the URL of the resource being downloaded, unless that URL's scheme component is , in which case let be the same as the , if any.\n• None If there is no , then let be true. Otherwise, let be true if is the same origin as , and false otherwise.\n• None If is true and the resource has a ` ` header and that header includes filename information, then let have the value specified by the header, and jump to the step labeled sanitize below. [RFC6266]\n• None If the download was not initiated from a hyperlink created by an or element, or if the element of the hyperlink from which it was initiated did not have a attribute when the download was initiated, or if there was such an attribute but its value when the download was initiated was the empty string, then jump to the step labeled no proposed filename.\n• None Let have the value of the attribute of the element of the hyperlink that initiated the download at the time the download was initiated.\n• None If is true, let have the value of , and jump to the step labeled sanitize below.\n• None If the resource has a ` ` header and that header specifies the disposition type, let have the value of , and jump to the step labeled sanitize below. [RFC6266]\n• None No proposed filename: If is true, or if the user indicated a preference for having the resource in question downloaded, let have a value derived from the URL of the resource in an implementation-defined manner, and jump to the step labeled sanitize below.\n• Let be set to the user's preferred filename or to a filename selected by the user agent, and jump to the step labeled sanitize below. If the algorithm reaches this step, then a download was begun from a different origin than the resource being downloaded, and the origin did not mark the file as suitable for downloading, and the download was not initiated by the user. This could be because a attribute was used to trigger the download, or because the resource in question is not of a type that the user agent supports. This could be dangerous, because, for instance, a hostile server could be trying to get a user to unknowingly download private information and then re-upload it to the hostile server, by tricking the user into thinking the data is from the hostile server. Thus, it is in the user's interests that the user be somehow notified that the resource in question comes from quite a different source, and to prevent confusion, any suggested filename from the potentially hostile should be ignored.\n• None Sanitize: Optionally, allow the user to influence . For example, a user agent could prompt the user for a filename, potentially providing the value of as determined above as a default value.\n• Adjust to be suitable for the local file system. For example, this could involve removing characters that are not legal in filenames, or trimming leading and trailing whitespace.\n• None If the platform conventions do not in any way use extensions to determine the types of file on the file system, then return as the filename.\n• None Let be the type given by the resource's Content-Type metadata, if any is known. Let be the type given by 's extension, if any is known. For the purposes of this step, a type is a mapping of a MIME type to an extension.\n• None If is consistent with the user's preferences (e.g., because the value of was determined by prompting the user), then return as the filename.\n• None If and are the same type (i.e., the type given by the resource's Content-Type metadata is consistent with the type given by 's extension), then return as the filename.\n• If the is known, then alter to add an extension corresponding to . Otherwise, if is known to be potentially dangerous (e.g. it will be treated by the platform conventions as a native executable, shell script, HTML application, or executable-macro-capable document) then optionally alter to add a known-safe extension (e.g. \" \"). This last step would make it impossible to download executables, which might not be desirable. As always, implementers are forced to balance security and usability in this matter.\n\nFor the purposes of this algorithm, a file consists of any part of the filename that platform conventions dictate will be used for identifying the type of the file. For example, many operating systems use the part of the filename following the last dot (\" \") in the filename to determine the type of the file, and from that the manner in which the file is to be opened or executed.\n\nUser agents should ignore any directory or path information provided by the resource itself, its URL, and any attribute, in deciding where to store the resulting file in the user's file system.\n\nIf a hyperlink created by an or element has a attribute, and the user follows the hyperlink, and the value of the element's attribute can be parsed, relative to the element's node document, without failure, then the user agent must take the attribute's value, split that string on ASCII whitespace, parse each resulting token, relative to the element's node document, and then run these steps for each resulting URL , ignoring when parsing returns failure:\n• None If 's scheme is not an HTTP(S) scheme, then return.\n• None Optionally, return. (For example, the user agent might wish to ignore any or all ping URLs in accordance with the user's expressed preferences.)\n• None Let be the element's node document's relevant settings object.\n• None Let be a new request whose URL is , method is ` `, header list is « (` `, ` `) », body is ` `, client is , destination is the empty string, credentials mode is \" \", referrer is \" \", and whose use-URL-credentials flag is set, and whose initiator type is \" \".\n• Let be the result of encoding-parsing-and-serializing a URL given the element's attribute's value, relative to the element's node document, and then: If the URL of the object containing the hyperlink being audited and have the same origin If the origins are different, but the scheme of the URL of the containing the hyperlink being audited is not \" \" must include a ` ` header with, as its value, the URL of the document containing the hyperlink, and a ` ` HTTP header with, as its value, the . must include a ` ` HTTP header with, as its value, .\n\nThis may be done in parallel with the primary fetch, and is independent of the result of that fetch.\n\nUser agents should allow the user to adjust this behavior, for example in conjunction with a setting that disables the sending of HTTP ` ` (sic) headers. Based on the user's preferences, UAs may either ignore the attribute altogether, or selectively ignore URLs in the list (e.g. ignoring any third-party URLs); this is explicitly accounted for in the steps above.\n\nUser agents must ignore any entity bodies returned in the responses. User agents may close the connection prematurely once they start receiving a response body.\n\nWhen the attribute is present, user agents should clearly indicate to the user that following the hyperlink will also cause secondary requests to be sent in the background, possibly including listing the actual target URLs.\n\nFor example, a visual user agent could include the hostnames of the target ping URLs along with the hyperlink's actual URL in a status bar or tooltip.\n\nThe ` ` and ` ` HTTP request headers are included in hyperlink auditing requests. Their value is a URL, serialized.\n\nThe following table summarizes the link types that are defined by this specification, by their corresponding keywords. This table is non-normative; the actual definitions for the link types are given in the next few sections.\n\nIn this section, the term referenced document refers to the resource identified by the element representing the link, and the term current document refers to the resource within which the element representing the link finds itself.\n\nTo determine which link types apply to a , , , or element, the element's attribute must be split on ASCII whitespace. The resulting tokens are the keywords for the link types that apply to that element.\n\nExcept where otherwise specified, a keyword must not be specified more than once per attribute.\n\nSome of the sections that follow the table below list synonyms for certain keywords. The indicated synonyms are to be handled as specified by user agents, but must not be used in documents (for example, the keyword \" \").\n\nKeywords are always ASCII case-insensitive, and must be compared as such.\n\nThus, is the same as .\n\nKeywords that are affect whether elements are allowed in the body. The body-ok keywords are , , , , , , and .\n\nNew link types that are to be implemented by web browsers are to be added to this standard. The remainder can be registered as extensions.\n\nThe keyword may be used with , , and elements.\n\nThe meaning of this keyword depends on the values of the other attributes.\n\nThe keyword may be used with , , and elements. This keyword creates a hyperlink.\n\nFor and elements, the keyword indicates that the referenced document provides further information about the author of the nearest element ancestor of the element defining the hyperlink, if there is one, or of the page as a whole, otherwise.\n\nFor elements, the keyword indicates that the referenced document provides further information about the author for the page as a whole.\n\nThe \"referenced document\" can be, and often is, a URL giving the email address of the author. [MAILTO]\n\nSynonyms: For historical reasons, user agents must also treat , , and elements that have a attribute with the value \" \" as having the keyword specified as a link relationship.\n\nThe keyword may be used with and elements. This keyword creates a hyperlink.\n\nThe keyword gives a permalink for the nearest ancestor element of the linking element in question, or of the section the linking element is most closely associated with, if there are no ancestor elements.\n\nThe keyword may be used with element. This keyword creates a hyperlink.\n\nThe keyword indicates that URL given by the attribute is the preferred URL for the current document. That helps search engines reduce duplicate content, as described in more detail in . [RFC6596]\n\nThe keyword may be used with elements. This keyword creates an external resource link. This keyword is body-ok.\n\nThe keyword indicates that preemptively performing DNS resolution for the origin of the specified resource is likely to be beneficial, as it is highly likely that the user will require resources located at that origin, and the user experience would be improved by preempting the latency costs associated with DNS resolution.\n\nThere is no default type for resources given by the keyword.\n\nThe appropriate times to fetch and process this type of link are:\n• None When the external resource link is created on a element that is already browsing-context connected.\n• None When the external resource link's element becomes browsing-context connected.\n• None When the attribute of the element of an external resource link that is already browsing-context connected is changed.\n\nThe fetch and process the linked resource steps for this type of linked resource, given a element , are:\n• None Let be the result of encoding-parsing a URL given 's attribute's value, relative to 's node document.\n• None If is failure, then return.\n• None Let be the result of determining the network partition key given 's node document's relevant settings object.\n• The user agent should resolve an origin given and 's origin. As the results of this algorithm can be cached, future fetches could be faster.\n\nThe keyword may be used with elements. This keyword creates an internal resource link.\n\nAn internal resource link created by the keyword can be used to block rendering until the element that it indicates is connected to the document and fully parsed.\n\nThere is no default type for resources given by the keyword.\n\nWhenever any of the following conditions occur for a element :\n• None the internal resource link is created on that is already browsing-context connected;\n• None an internal resource link has been created on and becomes browsing-context connected;\n• None an internal resource link has been created on , is already browsing-context connected, and 's attribute is set, changed, or removed; or\n• None an internal resource link has been created on , is already browsing-context connected, and 's attribute is set, changed, or removed,\n\nTo given a element , run these steps:\n• None Let be the result of encoding-parsing a URL given 's attribute's value, relative to .\n• None If this fails, or if does not equal 's URL with exclude fragments set to false, then unblock rendering on and return.\n• None Let be the result of selecting the indicated part given and .\n• If all of the following are true:\n• None is not an element, or is on a stack of open elements of an HTML parser whose associated is ,\n• None For each element in 's render-blocking element set, process .\n\nThe following attribute change steps, given , , , and , are used to ensure elements respond to dynamic and changes:\n• None If is not null, then return.\n• None If is in a stack of open elements of an HTML parser, then return.\n• If any of the following is true:\n• None is and is an element,\n\nThe keyword may be used with , , and elements. This keyword does not create a hyperlink, but annotates any other hyperlinks created by the element (the implied hyperlink, if no other keywords create one).\n\nThe keyword indicates that the link is leading to a document that is not part of the site that the current document forms a part of.\n\nThe keyword may be used with , , , and elements. This keyword creates a hyperlink.\n\nFor , , and elements, the keyword indicates that the referenced document provides further help information for the parent of the element defining the hyperlink, and its children.\n\nFor elements, the keyword indicates that the referenced document provides help for the page as a whole.\n\nFor and elements, on some browsers, the keyword causes the link to use a different cursor.\n\nThe keyword may be used with elements. This keyword creates an external resource link.\n\nThe specified resource is an icon representing the page or site, and should be used by the user agent when representing the page in the user interface.\n\nIcons could be auditory icons, visual icons, or other kinds of icons. If multiple icons are provided, the user agent must select the most appropriate icon according to the , , and attributes. If there are multiple equally appropriate icons, user agents must use the last one declared in tree order at the time that the user agent collected the list of icons. If the user agent tries to use an icon but that icon is determined, upon closer examination, to in fact be inappropriate (e.g. because it uses an unsupported format), then the user agent must try the next-most-appropriate icon as determined by the attributes.\n\nUser agents are not required to update icons when the list of icons changes, but are encouraged to do so.\n\nThere is no default type for resources given by the keyword. However, for the purposes of determining the type of the resource, user agents must expect the resource to be an image.\n\nThe keywords represent icon sizes in raw pixels (as opposed to CSS pixels).\n\nAn icon that is 50 CSS pixels wide intended for displays with a device pixel density of two device pixels per CSS pixel (2x, 192dpi) would have a width of 100 raw pixels. This feature does not support indicating that a different resource is to be used for small high-resolution icons vs large low-resolution icons (e.g. 50×50 2x vs 100×100 1x).\n\nTo parse and process the attribute's value, the user agent must first split the attribute's value on ASCII whitespace, and must then parse each resulting keyword to determine what it represents.\n\nThe keyword represents that the resource contains a scalable icon, e.g. as provided by an SVG image.\n\nOther keywords must be further parsed as follows to determine what they represent:\n• None If the keyword doesn't contain exactly one U+0078 LATIN SMALL LETTER X or U+0058 LATIN CAPITAL LETTER X character, then this keyword doesn't represent anything. Return for that keyword.\n• None Let be the string before the \" \" or \" \".\n• None Let be the string after the \" \" or \" \".\n• None If either or start with a U+0030 DIGIT ZERO (0) character or contain any characters other than ASCII digits, then this keyword doesn't represent anything. Return for that keyword.\n• None Apply the rules for parsing non-negative integers to to obtain .\n• None Apply the rules for parsing non-negative integers to to obtain .\n• None The keyword represents that the resource contains a bitmap icon with a width of device pixels and a height of device pixels.\n\nThe keywords specified on the attribute must not represent icon sizes that are not actually available in the linked resource.\n\nThe linked resource fetch setup steps for this type of linked resource, given a element and request , are:\n\nThe process a link header steps for this type of linked resource are to do nothing.\n\nIn the absence of a with the keyword, for objects whose URL's scheme is an HTTP(S) scheme, user agents may instead run these steps in parallel:\n• None Let be a new request whose URL is the URL record obtained by resolving the URL \" \" against the object's URL, client is the object's relevant settings object, destination is \" \", synchronous flag is set, credentials mode is \" \", and whose use-URL-credentials flag is set.\n• None Let be the result of fetching .\n• None Use 's unsafe response as an icon as if it had been declared using the keyword.\n\nFor historical reasons, the keyword may be preceded by the keyword \" \". If the \" \" keyword is present, the attribute's entire value must be an ASCII case-insensitive match for the string \" \" (with a single U+0020 SPACE character between the tokens and no other ASCII whitespace).\n\nThe keyword may be used with , , , and elements. This keyword creates a hyperlink.\n\nThe keyword indicates that the referenced document provides the copyright license terms under which the main content of the current document is provided.\n\nThis specification does not specify how to distinguish between the main content of a document and content that is not deemed to be part of that main content. The distinction should be made clear to the user.\n\nSynonyms: For historical reasons, user agents must also treat the keyword \" \" like the keyword.\n\nThe keyword may be used with elements. This keyword creates an external resource link.\n\nThe keyword indicates the manifest file that provides metadata associated with the current document.\n\nThere is no default type for resources given by the keyword.\n\nWhen a web application is not installed, the appropriate time to fetch and process the linked resource for this link type is when the user agent deems it necessary. For example, when the user chooses to install the web application.\n\nFor an installed web application, the appropriate times to fetch and process the linked resource for this link type are:\n• None When the external resource link is created on a element that is already browsing-context connected.\n• None When the external resource link's element becomes browsing-context connected.\n• None When the attribute of the element of an external resource link that is already browsing-context connected is changed.\n\nIn any case, only the first element in tree order whose attribute contains the token may be used.\n\nA user agent must not delay the load event for this link type.\n\nThe linked resource fetch setup steps for this type of linked resource, given a element and request , are:\n• None If is null, then return false.\n• None If is not a top-level traversable, then return false.\n• None Set 's credentials mode to the CORS settings attribute credentials mode for 's content attribute.\n\nTo process this type of linked resource given a element , boolean , response , and byte sequence :\n• None If 's Content-Type metadata is not a JSON MIME type, then set to false.\n• \n• None Process the manifest given , , and . [MANIFEST]\n\nThe process a link header steps for this type of linked resource are to do nothing.\n\nThe keyword may be used with elements. This keyword creates an external resource link. This keyword is body-ok.\n\nThe keyword is a specialized alternative to the keyword, with a processing model geared toward preloading module scripts. In particular, it uses the specific fetch behavior for module scripts (including, e.g., a different interpretation of the attribute), and places the result into the appropriate module map for later evaluation. In contrast, a similar external resource link using the keyword would place the result in the preload cache, without affecting the document's module map.\n\nAdditionally, implementations can take advantage of the fact that module scripts declare their dependencies in order to fetch the specified module's dependency as well. This is intended as an optimization opportunity, since the user agent knows that, in all likelihood, those dependencies will also be needed later. It will not generally be observable without using technology such as service workers, or monitoring on the server side. Notably, the appropriate or events will occur after the specified module is fetched, and will not wait for any dependencies.\n\nA user agent must not delay the load event for this link type.\n\nThe appropriate times to fetch and process the linked resource for such a link are:\n• None When the external resource link is created on a element that is already browsing-context connected.\n• None When the external resource link's element becomes browsing-context connected.\n• None When the attribute of the element of an external resource link that is already browsing-context connected is changed.\n\nUnlike some other link relations, changing the relevant attributes (such as , , and ) of such a does not trigger a new fetch. This is because the document's module map has already been populated by a previous fetch, and so re-fetching would be pointless.\n\nThe fetch and process the linked resource algorithm for links, given a element , is as follows:\n• None If 's attribute's value is the empty string, then return.\n• None Let be the current state of 's attribute (a destination), or \" \" if it is in no state.\n• None If is not script-like, then queue an element task on the networking task source given to fire an event named at , and return.\n• None Let be the result of encoding-parsing a URL given 's attribute's value, relative to 's node document.\n• None If is failure, then return.\n• None Let be the CORS settings attribute credentials mode for 's attribute.\n• None Let be the value of 's attribute, if it is specified, or the empty string otherwise.\n• None If does not have an attribute, then set to the result of resolving a module integrity metadata with and .\n• None Let be the current state of 's attribute.\n• None Let be the current state of 's attribute.\n• None Let be a script fetch options whose cryptographic nonce is , integrity metadata is , parser metadata is \" \", credentials mode is , referrer policy is , and fetch priority is .\n• Fetch a modulepreload module script graph given , , , , and with the following steps given :\n• None If is null, then fire an event named at , and return.\n\nThe process a link header steps for this type of linked resource are to do nothing.\n\nThe keyword may be used with , , and elements. This keyword does not create a hyperlink, but annotates any other hyperlinks created by the element (the implied hyperlink, if no other keywords create one).\n\nThe keyword indicates that the link is not endorsed by the original author or publisher of the page, or that the link to the referenced document was included primarily because of a commercial relationship between people affiliated with the two pages.\n\nThe keyword may be used with , , and elements. This keyword does not create a hyperlink, but annotates any other hyperlinks created by the element (the implied hyperlink, if no other keywords create one).\n\nThe keyword indicates that any newly created top-level traversable which results from following the hyperlink will not contain an auxiliary browsing context. E.g., the resulting 's getter will return null.\n\nSee also the processing model.\n\nThe keyword may be used with , , and elements. This keyword does not create a hyperlink, but annotates any other hyperlinks created by the element (the implied hyperlink, if no other keywords create one).\n\nIt indicates that no referrer information is to be leaked when following the link and also implies the keyword behavior under the same conditions.\n\nSee also the processing model where referrer is directly manipulated.\n\nhas the same behavior as .\n\nThe keyword may be used with , , and elements. This keyword does not create a hyperlink, but annotates any other hyperlinks created by the element (the implied hyperlink, if no other keywords create one).\n\nThe keyword indicates that any newly created top-level traversable which results from following the hyperlink will contain an auxiliary browsing context.\n\nSee also the processing model.\n\nThe keyword may be used with elements. This keyword creates an external resource link. This keyword is body-ok.\n\nFor the semantics of the keyword, see . [PINGBACK]\n\nThe keyword may be used with elements. This keyword creates an external resource link. This keyword is body-ok.\n\nThe keyword indicates that preemptively initiating a connection to the origin of the specified resource is likely to be beneficial, as it is highly likely that the user will require resources located at that origin, and the user experience would be improved by preempting the latency costs associated with establishing the connection.\n\nThere is no default type for resources given by the keyword.\n\nA user agent must not delay the load event for this link type.\n\nThe appropriate times to fetch and process this type of link are:\n• None When the external resource link is created on a element that is already browsing-context connected.\n• None When the external resource link's element becomes browsing-context connected.\n• None When the attribute of the element of an external resource link that is already browsing-context connected is changed.\n• None When the attribute of the element of an external resource link that is already browsing-context connected is set, changed, or removed.\n\nThe fetch and process the linked resource steps for this type of linked resource, given a element , are to create link options from and to preconnect given the result.\n\nThe process a link header step for this type of linked resource given a link processing options are to preconnect given .\n• None If 's href is an empty string, return.\n• Let be the result of encoding-parsing a URL given 's href, relative to 's base URL. Passing the base URL instead of a document or environment is tracked by issue #9715.\n• None If is failure, then return.\n• None If 's scheme is not an HTTP(S) scheme, then return.\n• None Let be the result of determining the network partition key given 's environment.\n• None If 's crossorigin is Anonymous and 's origin does not have the same origin as 's origin, then set to false.\n• The user agent should obtain a connection given , 's origin, and . This connection is obtained but not used directly. It will remain in the connection pool for subsequent use. The user agent should attempt to initiate a preconnect and perform the full connection handshake (DNS+TCP for HTTP, and DNS+TCP+TLS for HTTPS origins) whenever possible, but is allowed to elect to perform a partial handshake (DNS only for HTTP, and DNS or DNS+TCP for HTTPS origins), or skip it entirely, due to resource constraints or other reasons. The optimal number of connections per origin is dependent on the negotiated protocol, users current connectivity profile, available device resources, global connection limits, and other context specific variables. As a result, the decision for how many connections should be opened is deferred to the user agent.\n\nThe keyword may be used with elements. This keyword creates an external resource link. This keyword is body-ok.\n\nThe keyword indicates that preemptively fetching and caching the specified resource or same-site document is likely to be beneficial, as it is highly likely that the user will require this resource for future navigations.\n\nThere is no default type for resources given by the keyword.\n\nThe appropriate times to fetch and process this type of link are:\n• None When the external resource link is created on a element that is already browsing-context connected.\n• None When the external resource link's element becomes browsing-context connected.\n• None When the attribute of the element of an external resource link that is already browsing-context connected is changed.\n• None When the attribute of the element of an external resource link that is already browsing-context connected is set, changed, or removed.\n\nThe fetch and process the linked resource algorithm for links, given a element , is as follows:\n• None If 's attribute's value is the empty string, then return.\n• None Let be the result of creating link options from .\n• None Let be the result of creating a link request given .\n• None If is null, then return.\n• Let be the following steps given a response and null, failure, or a byte sequence :\n• None If is a network error, fire an event named at .\n• None Otherwise, fire an event named at .\n• None The user agent should fetch , with processResponseConsumeBody set to . User agents may delay the fetching of to prioritize other requests that are necessary for the current document.\n\nThe process a link header steps for this type of linked resource are to do nothing.\n\nThe keyword may be used with elements. This keyword creates an external resource link. This keyword is body-ok.\n\nThe keyword indicates that the user agent will preemptively fetch and cache the specified resource according to the potential destination given by the attribute, and the priority given by the attribute, as it is highly likely that the user will require this resource for the current navigation.\n\nUser-agents might perform additional operations when a resource is loaded, such as preemptively decoding images or creating stylesheets. However, these additional operations cannot have observable effects.\n\nThere is no default type for resources given by the keyword.\n\nA user agent must not delay the load event for this link type.\n\nThe appropriate times to fetch and process the linked resource for such a link are:\n• None When the external resource link is created on a element that is already browsing-context connected.\n• None When the external resource link's element becomes browsing-context connected.\n• None When the attribute of the element of an external resource link that is already browsing-context connected is changed.\n• None When the attribute of the element of an external resource link that is already browsing-context connected is changed.\n• None When the attribute of the element of an external resource link that is already browsing-context connected, but was previously not obtained due to the attribute specifying an unsupported type for the request destination, is set, removed, or changed.\n• None When the attribute of the element of an external resource link that is already browsing-context connected, but was previously not obtained due to the attribute not matching the environment, is changed or removed.\n\nA has a , which is an ordered map, initially empty.\n\nA is a struct. It has the following items:\n\nA is a struct. It has the following items:\n\nTo for , given a URL , a string , a string , a string , a string , and , which is an algorithm accepting a response:\n• None Let be a preload key whose URL is , destination is , mode is , and credentials mode is .\n• None Let be 's associated 's map of preloaded resources.\n• None If does not exist in , then return false.\n• None Let be the result of parsing .\n• None Let be the result of parsing 's integrity metadata.\n• If none of the following conditions apply:\n• is equal to ; or This comparison would ignore unknown integrity options. See issue #116. A mistmatch in integrity metadata between the preload and the consumer, even if both match the data, would lead to an additional fetch from the network. It is important that network errors are added to the preload cache so that if a preload request results in an error, the erroneous response isn't re-requested from the network later. This also has security implications; consider the case where a developer specifies subresource integrity metadata on a preload request, but not the following resource request. If the preload request fails subresource integrity verification and is discarded, the resource request will fetch and consume a potentially-malicious response from the network without verifying its integrity. [SRI]\n• None If 's response is null, then set 's on response available to .\n\nFor the purposes of this section, a string a string if the following algorithm returns true:\n• None If is an empty string, then return true.\n• None If is \" \", then return true.\n• None Let be the result of parsing .\n• None If is failure, then return false.\n• None If is not supported by the user agent, then return false.\n• If any of the following are true:\n• None is \" \" or \" \", and is an audio or video MIME type;\n• None is a script-like destination and is a JavaScript MIME type;\n• None is \" \" and is an image MIME type;\n• None is \" \" and is a font MIME type;\n• None is \" \" and is a JSON MIME type;\n• None is \" \" and 's essence is ; or\n• None is \" \" and 's essence is ,\n\nTo for a request , return a new preload key whose URL is 's URL, destination is 's destination, mode is 's mode, and credentials mode is 's credentials mode.\n• None If is not \" \", \" \", \" \", \" \", \" \", or \" \", then return null.\n\nTo given a link processing options and an optional , which is an algorithm accepting a response:\n• None If 's destination is \" \" and 's source set is not null, then set 's href to the result of selecting an image source from 's source set.\n• None Let be the result of creating a link request given .\n• None If is null, then return.\n• None Let be a new preload entry whose integrity metadata is 's integrity.\n• None Let be the result of creating a preload key given .\n• None If 's document is \" \", then set 's initiator type to \" \".\n• None Let given a be to report timing for given 's relevant global object.\n• Set to the result of fetching , with processResponseConsumeBody set to the following steps given a response and null, failure, or a byte sequence :\n• If is a byte sequence, then set 's body to as a body. By using processResponseConsumeBody, we have extracted the entire body. This is necessary to ensure the preloader loads the entire body from the network, regardless of whether the preload will be consumed (which is uncertain at this point). This step then resets the request's body to a new body containing the same bytes, so that other specifications can read from it at the time of actual consumption, despite us having already done so once.\n• None If 's document is not null, then call given 's document.\n• None If 's on response available is null, then set 's response to ; otherwise call 's on response available given .\n• None If is given, then call with .\n• Let be the following steps given a :\n• None If 's response is not null, then call given .\n• None If 's document is null, then set 's on document ready to . Otherwise, call with 's document.\n\nThe fetch and process the linked resource steps for this type of linked resource, given a element , are:\n• None Let be the result of creating link options from .\n• Preload , with the following steps given a response :\n• If is a network error, fire an event named at . Otherwise, fire an event named at . The actual browsers' behavior is different from the spec here, and the feasibility of changing the behavior has not yet been investigated. See issue #1142.\n\nThe process a link header step for this type of link given a link processing options is to preload .\n\nThe keyword may be used with , , and elements. This keyword creates a hyperlink.\n\nThe keyword indicates that the referenced document contains information about the data collection and usage practices that apply to the current document, as described in more detail in . The referenced document may be a standalone privacy policy, or a specific section of some more general document. [RFC6903]\n\nThe keyword may be used with , , , and elements. This keyword creates a hyperlink.\n\nThe keyword indicates that the referenced document provides an interface specifically for searching the document and its related resources.\n\nOpenSearch description documents can be used with elements and the link type to enable user agents to autodiscover search interfaces. [OPENSEARCH]\n\nThe keyword may be used with elements. This keyword creates an external resource link that contributes to the styling processing model. This keyword is body-ok.\n\nThe specified resource is a CSS style sheet that describes how to present the document.\n\nIf the keyword is also specified on the element, then the link is an alternative style sheet ; in this case, the attribute must be specified on the element, with a non-empty value.\n\nThe default type for resources given by the keyword is .\n\nA element of this type is implicitly potentially render-blocking if the element was created by its node document's parser.\n\nWhen the attribute of a element with a keyword is set, disable the associated CSS style sheet.\n\nThe appropriate times to fetch and process this type of link are:\n• None When the external resource link is created on a element that is already browsing-context connected.\n• None When the external resource link's element becomes browsing-context connected.\n• None When the attribute of the element of an external resource link that is already browsing-context connected is changed.\n• None When the attribute of the element of an external resource link that is already browsing-context connected is set, changed, or removed.\n• None When the attribute of the element of an external resource link that is already browsing-context connected is set, changed, or removed.\n• None When the attribute of the element of an external resource link that is already browsing-context connected is set or changed to a value that does not or no longer matches the Content-Type metadata of the previous obtained external resource, if any.\n• None When the attribute of the element of an external resource link that is already browsing-context connected, but was previously not obtained due to the attribute specifying an unsupported type, is removed or changed.\n• None When the external resource link that is already browsing-context connected changes from being an alternative style sheet to not being one, or vice versa.\n\nQuirk: If the document has been set to quirks mode, has the same origin as the URL of the external resource, and the Content-Type metadata of the external resource is not a supported style sheet type, the user agent must instead assume it to be .\n\nThe linked resource fetch setup steps for this type of linked resource, given a element and request , are:\n• None If 's attribute is set, then return false.\n• None If contributes a script-blocking style sheet, append to its node document's script-blocking style sheet set.\n• None If 's attribute's value matches the environment and is potentially render-blocking, then block rendering on .\n• None If is currently render-blocking, then set 's render-blocking to true.\n\nSee issue #968 for plans to use the CSSOM fetch a CSS style sheet algorithm instead of the default fetch and process the linked resource algorithm. In the meantime, any critical subresource request should have its render-blocking set to whether or not the element is currently render-blocking.\n\nTo process this type of linked resource given a element , boolean , response , and byte sequence :\n• None If the resource's Content-Type metadata is not , then set to false.\n• If no longer creates an external resource link that contributes to the styling processing model, or if, since the resource in question was fetched, it has become appropriate to fetch it again, then:\n• None If has an associated CSS style sheet, remove the CSS style sheet.\n• If is true, then:\n• Create a CSS style sheet with the following properties: We provide a URL here on the assumption that w3c/csswg-drafts issue #9316 will be fixed. This is a reference to the (possibly absent at this time) attribute, rather than a copy of the attribute's current value. defines what happens when the attribute is dynamically set, changed, or removed. The attribute of , if is in a document tree, or the empty string otherwise. This is similarly a reference to the attribute, rather than a copy of the attribute's current value. Set if the link is an alternative style sheet and 's explicitly enabled is false; unset otherwise. Set if the resource is CORS-same-origin; unset otherwise. Left at its default value. This doesn't seem right. Presumably we should be using ? Tracked as issue #2997. The CSS environment encoding is the result of running the following steps: [CSSSYNTAX]\n• None If has a attribute, get an encoding from that attribute's value. If that succeeds, return the resulting encoding. [ENCODING]\n• None Otherwise, fire an event named at .\n\nThe process a link header steps for this type of linked resource are to do nothing.\n\nThe keyword may be used with and elements. This keyword creates a hyperlink.\n\nThe keyword indicates that the tag that the referenced document represents applies to the current document.\n\nSince it indicates that the tag applies to the current document, it would be inappropriate to use this keyword in the markup of a tag cloud, which lists the popular tags across a set of pages.\n\nThe keyword may be used with , , and elements. This keyword creates a hyperlink.\n\nThe keyword indicates that the referenced document contains information about the agreements between the current document's provider and users who wish to use the current document, as described in more detail in . [RFC6903]\n\nSome documents form part of a sequence of documents.\n\nA sequence of documents is one where each document can have a previous sibling and a next sibling. A document with no previous sibling is the start of its sequence, a document with no next sibling is the end of its sequence.\n\nA document may be part of multiple sequences.\n\nThe keyword may be used with , , , and elements. This keyword creates a hyperlink.\n\nThe keyword indicates that the document is part of a sequence, and that the link is leading to the document that is the next logical document in the sequence.\n\nWhen the keyword is used with a element, user agents should process such links as if they were using one of the , , or keywords. Which keyword the user agent wishes to use is implementation-dependent; for example, a user agent may wish to use the less-costly processing model when trying to conserve data, battery power, or processing power, or may wish to pick a keyword depending on heuristic analysis of past user behavior in similar scenarios.\n\nThe keyword may be used with , , , and elements. This keyword creates a hyperlink.\n\nThe keyword indicates that the document is part of a sequence, and that the link is leading to the document that is the previous logical document in the sequence.\n\nSynonyms: For historical reasons, user agents must also treat the keyword \" \" like the keyword.\n\nExtensions to the predefined set of link types may be registered on the microformats page for existing rel values. [MFREL]\n\nAnyone is free to edit the microformats page for existing rel values at any time to add a type. Extension types must be specified with the following information:\n\nConformance checkers must use the information given on the microformats page for existing rel values to establish if a value is allowed or not: values defined in this specification or marked as \"proposed\" or \"ratified\" must be accepted when used on the elements for which they apply as described in the \"Effect on...\" field, whereas values marked as \"discontinued\" or not listed in either this specification or on the aforementioned page must be rejected as invalid. Conformance checkers may cache this information (e.g. for performance reasons or to avoid the use of unreliable network connectivity).\n\nWhen an author uses a new type not defined by either this specification or the wiki page, conformance checkers should offer to add the value to the wiki, with the details described above, with the \"proposed\" status.\n\nTypes defined as extensions in the microformats page for existing rel values with the status \"proposed\" or \"ratified\" may be used with the attribute on , , and elements in accordance to the \"Effect on...\" field. [MFREL]\n\nThe and elements represent edits to the document.\n\nThe element represents an addition to the document.\n\nThe element represents a removal from the document.\n\nThe attribute may be used to specify the URL of a document that explains the change. When that document is long, for instance the minutes of a meeting, authors are encouraged to include a fragment pointing to the specific part of that document that discusses the change.\n\nIf the attribute is present, it must be a valid URL potentially surrounded by spaces that explains the change. To obtain the corresponding citation link, the value of the attribute must be parsed relative to the element's node document. User agents may allow users to follow such citation links, but they are primarily intended for private use (e.g., by server-side scripts collecting statistics about a site's edits), not for readers.\n\nThe attribute may be used to specify the time and date of the change.\n\nIf present, the attribute's value must be a .\n\nUser agents must parse the attribute according to the algorithm. If that doesn't return a or a , then the modification has no associated timestamp (the value is non-conforming; it is not a ). Otherwise, the modification is marked as having been made at the given or . If the given value is a then user agents should use the associated time-zone offset information to determine which time zone to present the given datetime in.\n\nThis value may be shown to the user, but it is primarily intended for private use.\n\nThe and elements must implement the interface:\n\nThe IDL attribute must reflect the element's content attribute. The IDL attribute must reflect the element's content attribute.\n\nSince the and elements do not affect paragraphing, it is possible, in some cases where paragraphs are implied (without explicit elements), for an or element to span both an entire paragraph or other non-phrasing content elements and part of another paragraph. For example:\n\nBy only wrapping some paragraphs in elements, one can even get the end of one paragraph, a whole second paragraph, and the start of a third paragraph to be covered by the same or element (though this is very confusing, and not considered good practice):\n\nHowever, due to the way implied paragraphs are defined, it is not possible to mark up the end of one paragraph and the start of the very next one using the same or element. You instead have to use one (or two) element(s) and two or elements, as for example:\n\nPartly because of the confusion described above, authors are strongly encouraged to always mark up all paragraphs with the element, instead of having or elements that cross implied paragraphs boundaries.\n\nThe content models of the and elements do not allow and elements as children. Lists always represent all their items, including items that would otherwise have been marked as deleted.\n\nTo indicate that an item is inserted or deleted, an or element can be wrapped around the contents of the element. To indicate that an item has been replaced by another, a single element can have one or more elements followed by one or more elements.\n\nThe elements that form part of the table model have complicated content model requirements that do not allow for the and elements, so indicating edits to a table can be difficult.\n\nTo indicate that an entire row or an entire column has been added or removed, the entire contents of each cell in that row or column can be wrapped in or elements (respectively).\n\nGenerally speaking, there is no good way to indicate more complicated edits (e.g. that a cell was removed, moving all subsequent cells up or to the left).\n\nThe element is a container which provides multiple sources to its contained element to allow authors to declaratively control or give hints to the user agent about which image resource to use, based on the screen pixel density, viewport size, image format, and other factors. It represents its children.\n\nThe element is somewhat different from the similar-looking and elements. While all of them contain elements, the element's attribute has no meaning when the element is nested within a element, and the resource selection algorithm is different. Also, the element itself does not display anything; it merely provides a context for its contained element that enables it to choose from multiple URLs.\n\nThe element allows authors to specify multiple alternative source sets for elements or multiple alternative media resources for media elements. It does not represent anything on its own.\n\nThe attribute may be present. If present, the value must be a valid MIME type string.\n\nThe attribute may also be present. If present, the value must contain a valid media query list. The user agent will skip to the next element if the value does not match the environment.\n\nThe attribute is only evaluated once during the resource selection algorithm for media elements. In contrast, when using the element, the user agent will react to changes in the environment.\n\nThe remainder of the requirements depend on whether the parent is a element or a media element:\n\nThe HTML element insertion steps, given , are:\n• None If is a media element that has no attribute and whose has the value , then invoke that media element's resource selection algorithm.\n• None If is a element, then for each of 's children, if is an element, then count this as a relevant mutation for .\n\nThe HTML element moving steps, given and , are:\n• None If is a element, then for each of 's children, if is an element, then count this as a relevant mutation for .\n\nThe HTML element removing steps, given and , are:\n• None If is a element, then for each of 's children, if is an element, then count this as a relevant mutation for .\n\nThe IDL attributes , , , , and must reflect the respective content attributes of the same name.\n\nAn element has a , initially set to the element itself.\n\nThe image given by the and attributes, and any previous sibling elements' attributes if the parent is a element, is the embedded content; the value of the attribute provides equivalent content for those who cannot process images or who have image loading disabled (i.e. it is the element's fallback content).\n\nThe requirements on the attribute's value are described in a separate section.\n\nThe attribute must be present, and must contain a valid non-empty URL potentially surrounded by spaces referencing a non-interactive, optionally animated, image resource that is neither paged nor scripted.\n\nThe requirements above imply that images can be static bitmaps (e.g. PNGs, GIFs, JPEGs), single-page vector documents (single-page PDFs, XML files with an SVG document element), animated bitmaps (APNGs, animated GIFs), animated vector graphics (XML files with an SVG document element that use declarative SMIL animation), and so forth. However, these definitions preclude SVG files with script, multipage PDF files, interactive MNG files, HTML documents, plain text documents, and the like. [PNG] [GIF] [JPEG] [PDF] [XML] [APNG] [SVG] [MNG]\n\nThe attribute may also be present, and is a srcset attribute.\n\nThe attribute and the attribute (if width descriptors are not used) contribute the image sources to the source set (if no element was selected).\n\nIf the attribute is present and has any using a width descriptor, the attribute must also be present. If the attribute is not specified, and the attribute is in the Lazy state, the attribute may be specified with the value \" \" (ASCII case-insensitive). The attribute is a sizes attribute, which contributes the source size to the source set (if no element was selected).\n• its attribute is in the Lazy state, and\n• its attribute's value is \" \" (ASCII case-insensitive), or starts with \" \" (ASCII case-insensitive).\n\nThe attribute is a CORS settings attribute. Its purpose is to allow images from third-party sites that allow cross-origin access to be used with .\n\nThe attribute is a referrer policy attribute. Its purpose is to set the referrer policy used when fetching the image. [REFERRERPOLICY]\n\nThe attribute indicates the preferred method to decode this image. The attribute, if present, must be an image decoding hint. This attribute's missing value default and invalid value default are both the auto state.\n\nThe attribute is a fetch priority attribute. Its purpose is to set the priority used when fetching the image.\n\nThe attribute is a lazy loading attribute. Its purpose is to indicate the policy for loading images that are outside the viewport.\n\nWhen the attribute's state is changed to the Eager state, the user agent must run these steps:\n• None Let be the element's lazy load resumption steps.\n• None If is null, then return.\n\nThe HTML element insertion steps, given , are:\n• None If 's parent is a element, then, count this as a relevant mutation for .\n\nThe HTML element moving steps, given and , are:\n• None If is a element, then, count this as a relevant mutation for .\n\nThe HTML element removing steps, given and , are:\n• None If is a element, then, count this as a relevant mutation for .\n\nThe element must not be used as a layout tool. In particular, elements should not be used to display transparent images, as such images rarely convey meaning and rarely add anything useful to the document.\n\nWhat an element represents depends on the attribute and the attribute.\n\nThe attribute does not represent advisory information. User agents must not present the contents of the attribute in the same way as content of the attribute.\n\nUser agents may always provide the user with the option to display any image, or to prevent any image from being displayed. User agents may also apply heuristics to help the user make use of the image when the user is unable to see it, e.g. due to a visual disability or because they are using a text terminal with no graphics capabilities. Such heuristics could include, for instance, optical character recognition (OCR) of text found within the image.\n\nWhile user agents are encouraged to repair cases of missing attributes, authors must not rely on such behavior. Requirements for providing text to act as an alternative for images are described in detail below.\n\nThe contents of elements, if any, are ignored for the purposes of rendering.\n\nThe attribute, if present, can indicate that the image has an associated image map.\n\nThe attribute, when used on an element that is a descendant of an element with an attribute, indicates by its presence that the element provides access to a server-side image map. This affects how events are handled on the corresponding element.\n\nThe attribute is a boolean attribute. The attribute must not be specified on an element that does not have an ancestor element with an attribute.\n\nThe and attributes can result in confusing behavior when used together with elements with the attribute specified in a element.\n\nThe , , , and IDL attributes must reflect the respective content attributes of the same name.\n\nThe IDL attribute must reflect the content attribute, limited to only known values.\n\nThe IDL attribute must reflect the content attribute.\n\nThe IDL attribute must reflect the content attribute.\n\nThe IDL attribute must reflect the content attribute, limited to only known values.\n\nThe IDL attribute must reflect the content attribute, limited to only known values.\n\nThe IDL attribute must reflect the content attribute, limited to only known values.\n\nThe IDL attribute must reflect the content attribute, limited to only known values.\n\nThe IDL attributes and must return the rendered width and height of the image, in CSS pixels, if the image is being rendered; or else the density-corrected natural width and height of the image, in CSS pixels, if the image has density-corrected natural width and height and is available but is not being rendered; or else 0, if the image is not available or does not have density-corrected natural width and height. [CSS]\n\nOn setting, they must act as if they reflected the respective content attributes of the same name.\n\nThe IDL attributes and must return the density-corrected natural width and height of the image, in CSS pixels, if the image has density-corrected natural width and height and is available, or else 0. [CSS]\n\nSince the density-corrected natural width and height of an image take into account any orientation specified in its metadata, and reflect the dimensions after applying any rotation needed to correctly orient the image, regardless of the value of the 'image-orientation' property.\n• If any of the following are true:\n• None both the attribute and the attribute are omitted;\n• None the attribute is omitted and the attribute's value is the empty string;\n• None the element's current request's state is completely available and its pending request is null; or\n• None the element's current request's state is broken and its pending request is null,\n\nThe IDL attribute must return the element's current request's current URL.\n\nThe method, when invoked, must perform the following steps:\n• None Let be a new promise.\n• Queue a microtask to perform the following steps: This is done because takes place in a microtask as well. Thus, to make code such as properly decode , we need to delay any processing by one microtask.\n• If any of the following are true:\n• None this's node document is not fully active; or then reject with an \" \" .\n• Otherwise, in parallel, wait for one of the following cases to occur, and perform the corresponding actions: This element's node document stops being fully active This element's current request changes or is mutated Queue a global task on the DOM manipulation task source with to reject with an \" \" . This element's current request's state becomes completely available If decoding does not need to be performed for this image (for example because it is a vector graphic) or the decoding process completes successfully, then queue a global task on the DOM manipulation task source with to resolve with undefined. If decoding fails (for example due to invalid image data), then queue a global task on the DOM manipulation task source with to reject with an \" \" . User agents should ensure that the decoded media data stays readily available until at least the end of the next successful step in the event loop. This is an important part of the API contract, and should not be broken if at all possible. (Typically, this would only be violated in low-memory situations that require evicting decoded image data, or when the image is too large to keep in decoded form for this period of time.) Animated images will become completely available only after all their frames are loaded. Thus, even though an implementation could decode the first frame before that point, the above steps will not do so, instead waiting until all frames are available.\n\nA legacy factory function is provided for creating objects (in addition to the factory methods from DOM such as ): . When invoked, the legacy factory function must perform the following steps:\n• None Let be the current global object's associated .\n• None Let be the result of creating an element given , \" \", and the HTML namespace.\n• None If is given, then set an attribute value for using \" \" and .\n• None If is given, then set an attribute value for using \" \" and .\n\nTo embed an image in HTML, when there is only a single image resource, use the element and its attribute.\n\nHowever, there are a number of situations for which the author might wish to use multiple image resources that the user agent can choose from:\n• Different users might have different environmental characteristics:\n• The users' physical screen size might be different from one another. A mobile phone's screen might be 4 inches diagonally, while a laptop's screen might be 14 inches diagonally. This is only relevant when an image's rendered size depends on the viewport size.\n• The users' screen pixel density might be different from one another. A mobile phone's screen might have three times as many physical pixels per inch compared to another mobile phone's screen, regardless of their physical screen size.\n• The users' zoom level might be different from one another, or might change for a single user over time. A user might zoom in to a particular image to be able to get a more detailed look. The zoom level and the screen pixel density (the previous point) can both affect the number of physical screen pixels per CSS pixel. This ratio is usually referred to as .\n• The users' screen orientation might be different from one another, or might change for a single user over time. A tablet can be held upright or rotated 90 degrees, so that the screen is either \"portrait\" or \"landscape\".\n• The users' network speed, network latency and bandwidth cost might be different from one another, or might change for a single user over time. A user might be on a fast, low-latency and constant-cost connection while at work, on a slow, low-latency and constant-cost connection while at home, and on a variable-speed, high-latency and variable-cost connection anywhere else.\n• Authors might want to show the same image content but with different rendered size depending on, usually, the width of the viewport. This is usually referred to as . A web page might have a banner at the top that always spans the entire viewport width. In this case, the rendered size of the image depends on the physical size of the screen (assuming a maximised browser window). Another web page might have images in columns, with a single column for screens with a small physical size, two columns for screens with medium physical size, and three columns for screens with big physical size, with the images varying in rendered size in each case to fill up the viewport. In this case, the rendered size of an image might be bigger in the one-column layout compared to the two-column layout, despite the screen being smaller.\n• Authors might want to show different image content depending on the rendered size of the image. This is usually referred to as . When a web page is viewed on a screen with a large physical size (assuming a maximised browser window), the author might wish to include some less relevant parts surrounding the critical part of the image. When the same web page is viewed on a screen with a small physical size, the author might wish to show only the critical part of the image.\n• Authors might want to show the same image content but using different image formats, depending on which image formats the user agent supports. This is usually referred to as . A web page might have some images in the JPEG, WebP and JPEG XR image formats, with the latter two having better compression abilities compared to JPEG. Since different user agents can support different image formats, with some formats offering better compression ratios, the author would like to serve the better formats to user agents that support them, while providing JPEG fallback for user agents that don't.\n\nThe above situations are not mutually exclusive. For example, it is reasonable to combine different resources for different device-pixel-ratio with different resources for art direction.\n\nWhile it is possible to solve these problems using scripting, doing so introduces some other problems:\n• None Some user agents aggressively download images specified in the HTML markup, before scripts have had a chance to run, so that web pages complete loading sooner. If a script changes which image to download, the user agent will potentially start two separate downloads, which can instead cause worse page loading performance.\n• None If the author avoids specifying any image in the HTML markup and instead instantiates a single download from script, that avoids the double download problem above but then no image will be downloaded at all for users with scripting disabled and the aggressive image downloading optimization will also be disabled.\n\nWith this in mind, this specification introduces a number of features to address the above problems in a declarative manner.\n\nCSS and media queries can be used to construct graphical page layouts that adapt dynamically to the user's environment, in particular to different viewport dimensions and pixel densities. For content, however, CSS does not help; instead, we have the element's attribute and the element. This section walks through a sample case showing how to use these features.\n\nConsider a situation where on wide screens (wider than 600 CSS pixels) a 300×150 image named is to be used, but on smaller screens (600 CSS pixels and less), a smaller 100×100 image called is to be used. The markup for this would look like this:\n\nFor details on what to put in the attribute, see the Requirements for providing text to act as an alternative for images section.\n\nThe problem with this is that the user agent does not necessarily know what dimensions to use for the image when the image is loading. To avoid the layout having to be reflowed multiple times as the page is loading, CSS and CSS media queries can be used to provide the dimensions:\n\nAlternatively, the and attributes can be used to provide the width and height for legacy user agents, using CSS just for the user agents that support :\n\nThe element is used with the attribute, which gives the URL of the image to use for legacy user agents that do not support the element. This leads to a question of which image to provide in the attribute.\n\nIf the author wants the biggest image in legacy user agents, the markup could be as follows:\n\nHowever, if legacy mobile user agents are more important, one can list all three images in the elements, overriding the attribute entirely.\n\nSince at this point the attribute is actually being ignored entirely by -supporting user agents, the attribute can default to any image, including one that is neither the smallest nor biggest:\n\nAbove the media feature is used, giving the maximum (viewport) dimensions that an image is intended for. It is also possible to use instead.\n\nA is an attribute with requirements defined in this section.\n\nIf present, its value must consist of one or more , each separated from the next by a U+002C COMMA character (,). If an contains no descriptors and no ASCII whitespace after the URL, the following , if there is one, must begin with one or more ASCII whitespace.\n\nAn consists of the following components, in order, with the further restrictions described below this list:\n• None Zero or more ASCII whitespace.\n• None A valid non-empty URL that does not start or end with a U+002C COMMA character (,), referencing a non-interactive, optionally animated, image resource that is neither paged nor scripted.\n• None Zero or more ASCII whitespace.\n• Zero or one of the following:\n• None A , consisting of: ASCII whitespace, a valid non-negative integer giving a number greater than zero representing the , and a U+0077 LATIN SMALL LETTER W character.\n• None A , consisting of: ASCII whitespace, a valid floating-point number giving a number greater than zero representing the , and a U+0078 LATIN SMALL LETTER X character.\n• None Zero or more ASCII whitespace.\n\nThere must not be an for an element that has the same width descriptor value as another 's width descriptor value for the same element.\n\nThere must not be an for an element that has the same pixel density descriptor value as another 's pixel density descriptor value for the same element. For the purpose of this requirement, an with no descriptors is equivalent to an with a descriptor.\n\nIf an for an element has the width descriptor specified, all other for that element must also have the width descriptor specified.\n\nThe specified width in an 's width descriptor must match the natural width in the resource given by the 's URL, if it has a natural width.\n\nIf an element has a sizes attribute present, all for that element must have the width descriptor specified.\n\nA is an attribute with requirements defined in this section.\n\nIf present, the value must be a valid source size list.\n\nA is a string that matches the following grammar: [CSSVALUES] [MQ]\n\nA <source-size-value> that is a <length> must not be negative, and must not use CSS functions other than the math functions.\n\nThe keyword is a width that is computed in parse a sizes attribute. If present, it must be the first entry and the entire <source-size-list> value must either be the string \" \" (ASCII case-insensitive) or start with the string \" \" (ASCII case-insensitive).\n\nIf the element that initiated the image loading (with the or react to environment changes algorithms) allows auto-sizes and is being rendered, then is the concrete object size width. Otherwise, the value is ignored and the next source size is used instead, if any.\n\nThe keyword may be specified in the attribute of elements and attribute of elements, if the following conditions are met. Otherwise, must not be specified.\n• None The element is a element with a following sibling element.\n• None The element is an element.\n• None The element referenced in either condition above allows auto-sizes.\n\nIn addition, it is strongly encouraged to specify dimensions using the and attributes or with CSS. Without specified dimensions, the image will likely render with 300x150 dimensions because implies in the Rendering section.\n\nThe <source-size-value> gives the intended layout width of the image. The author can specify different widths for different environments with <media-condition>s.\n\nPercentages are not allowed in a <source-size-value>, to avoid confusion about what it would be relative to. The 'vw' unit can be used for sizes relative to the viewport width.\n\nAn element has a and a . The current request is initially set to a new image request. The pending request is initially set to null.\n\nAn has a , , and .\n\nAn image request's state is one of the following:\n\nAn image request's current URL is initially the empty string.\n\nAn image request's image data is the decoded image data.\n\nWhen an image request's state is either partially available or completely available, the image request is said to be .\n\nWhen an element's current request's state is completely available and the user agent can decode the media data without errors, then the element is said to be .\n\nWhen an element's current request is available, the element provides a paint source whose width is the image's density-corrected natural width (if any), whose height is the image's density-corrected natural height (if any), and whose appearance is the natural appearance of the image.\n\nAn element is said to if it has a attribute specified or if it has a parent that is a element.\n\nEach element has a , which must initially be null.\n\nEach image request has a , which must initially be 1.\n\nEach image request has , which is either a struct consisting of a width and a height or is null. It must initially be null.\n\nTo determine the of an element :\n• The preferred density-corrected dimensions are set in the prepare an image for presentation algorithm based on meta information in the image.\n• None If is null, set to 's natural dimensions.\n\nFor example, if the current pixel density is 3.125, that means that there are 300 device pixels per CSS inch, and thus if the image data is 300x600, it has density-corrected natural width and height of 96 CSS pixels by 192 CSS pixels.\n\nAll and elements are associated with a source set.\n\nA is an ordered set of zero or more image sources and a source size.\n\nAn is a URL, and optionally either a pixel density descriptor, or a width descriptor.\n\nA is a <source-size-value>. When a source size has a unit relative to the viewport, it must be interpreted relative to the element's node document's viewport. Other units must be interpreted the same as in Media Queries. [MQ]\n\nA for algorithms in this section indicates a non-fatal mismatch between input and requirements. User agents are encouraged to expose parse errors somehow.\n\nWhether the image is fetched successfully or not (e.g. whether the response status was an ok status) must be ignored when determining the image's type and whether it is a valid image.\n\nThis allows servers to return images with error responses, and have them displayed.\n\nThe user agent should apply the image sniffing rules to determine the type of the image, with the image's associated Content-Type headers giving the . If these rules are not applied, then the type of the image must be the type given by the image's associated Content-Type headers.\n\nUser agents must not support non-image resources with the element (e.g. XML files whose document element is an HTML element). User agents must not run executable code (e.g. scripts) embedded in the image resource. User agents must only display the first page of a multipage resource (e.g. a PDF file). User agents must not allow the resource to act in an interactive fashion, but should honour any animation in the resource.\n\nThis specification does not specify which image types are to be supported.\n\nBy default, images are obtained immediately. User agents may provide users with the option to instead obtain them on-demand. (The on-demand option might be used by bandwidth-constrained users, for example.)\n\nWhen obtaining images immediately, the user agent must synchronously of the element, with the restart animation flag set if so stated, whenever that element is created or has experienced relevant mutations.\n\nWhen obtaining images on demand, the user agent must of an element whenever it needs the image data (i.e., on demand), but only if the element's current request's state is unavailable. When an element has experienced relevant mutations, if the user agent only obtains images on demand, the element's current request's state must return to unavailable.\n\nThe for an element are as follows:\n• None The element's , , , or attributes are set, changed, or removed.\n• None The element's attribute is set to the same value as the previous value. This must set the restart animation flag for the algorithm.\n• None The or HTML element insertion steps, HTML element removing steps, and HTML element moving steps count the mutation as a relevant mutation.\n• None The element's parent is a element and a element that is a previous sibling has its , , , , or attributes set, changed, or removed.\n• None If the element allows auto-sizes: the element starts or stops being rendered, or its concrete object size width changes. This must set the maybe omit events flag for the algorithm.\n\nThe list of available images\n\nEach object must have a . Each image in this list is identified by a tuple consisting of an absolute URL, a CORS settings attribute mode, and, if the mode is not No CORS, an origin. Each image furthermore has an flag. User agents may copy entries from one object's list of available images to another at any time (e.g. when the is created, user agents can add to it all the images that are loaded in other s), but must not change the keys of entries copied in this way when doing so, and must unset the ignore higher-layer caching flag for the copied entry. User agents may also remove images from such lists at any time (e.g. to save memory). User agents must remove entries in the list of available images as appropriate given higher-layer caching semantics for the resource (e.g. the HTTP ` ` response header) when the ignore higher-layer caching flag is unset.\n\nThe list of available images is intended to enable synchronous switching when changing the attribute to a URL that has previously been loaded, and to avoid re-downloading images in the same document even when they don't allow caching per HTTP. It is not used to avoid re-downloading the same image while the previous image is still loading.\n\nThe user agent can also store the image data separately from the list of available images.\n\nFor example, if a resource has the HTTP response header ` `, and its ignore higher-layer caching flag is unset, the user agent would remove it from the list of available images but could keep the image data separately, and use that if the server responds with a status.\n\nImage data is usually encoded in order to reduce file size. This means that in order for the user agent to present the image to the screen, the data needs to be decoded. is the process which converts an image's media data into a bitmap form, suitable for presentation to the screen. Note that this process can be slow relative to other processes involved in presenting content. Thus, the user agent can choose when to perform decoding, in order to create the best user experience.\n\nImage decoding is said to be synchronous if it prevents presentation of other content until it is finished. Typically, this has an effect of atomically presenting the image and any other content at the same time. However, this presentation is delayed by the amount of time it takes to perform the decode.\n\nImage decoding is said to be asynchronous if it does not prevent presentation of other content. This has an effect of presenting non-image content faster. However, the image content is missing on screen until the decode finishes. Once the decode is finished, the screen is updated with the image.\n\nIn both synchronous and asynchronous decoding modes, the final content is presented to screen after the same amount of time has elapsed. The main difference is whether the user agent presents non-image content ahead of presenting the final content.\n\nIn order to aid the user agent in deciding whether to perform synchronous or asynchronous decode, the attribute can be set on elements. The possible values of the attribute are the following keywords:\n\nWhen decoding an image, the user agent should respect the preference indicated by the attribute's state. If the state indicated is auto, then the user agent is free to choose any decoding behavior.\n\nIt is also possible to control the decoding behavior using the method. Since the method performs decoding independently from the process responsible for presenting content to screen, it is unaffected by the attribute.\n\nThis algorithm cannot be called from steps running in parallel. If a user agent needs to call this algorithm from steps running in parallel, it needs to queue a task to do so.\n\nWhen the user agent is to of an element, optionally with the restart animations flag set, optionally with the maybe omit events flag set, it must run the following steps:\n• If the element's node document is not fully active, then:\n• None Wait until the element's node document is fully active.\n• None If another instance of this algorithm for this element was started after this instance (even if it aborted and is no longer running), then return.\n• None If the user agent cannot support images, or its support for images has been disabled, then abort the image request for the current request and the pending request, set current request's state to unavailable, set pending request to null, and return.\n• None Let be the current request's current URL.\n• None Let be null and be undefined.\n• None If the element does not use or and it has a attribute specified whose value is not the empty string, then set to the value of the element's attribute and set to 1.0.\n• None Set the element's last selected source to .\n• If is not null, then:\n• None Let be the result of encoding-parsing-and-serializing a URL given , relative to the element's node document.\n• None If is failure, then abort this inner set of steps.\n• None Let be a tuple consisting of , the element's attribute's mode, and, if that mode is not No CORS, the node document's origin.\n• If the list of available images contains an entry for , then:\n• None Set the ignore higher-layer caching flag for that entry.\n• None Abort the image request for the current request and the pending request.\n• None Let current request be a new image request whose image data is that of the entry and whose state is completely available.\n• None Prepare current request for presentation given the element.\n• Queue an element task on the DOM manipulation task source given the element and the following steps:\n• None If restart animation is set, then restart the animation.\n• None If maybe omit events is not set or is not equal to , then fire an event named at the element.\n• None Queue a microtask to perform the rest of this algorithm, allowing the task that invoked this algorithm to continue.\n• If another instance of this algorithm for this element was started after this instance (even if it aborted and is no longer running), then return. Only the last instance takes effect, to avoid multiple requests when, for example, the , , and attributes are all set in succession.\n• None Let and be the URL and pixel density that results from selecting an image source, respectively.\n• If is null, then:\n• None Set the current request's state to broken, abort the image request for the current request and the pending request, and set pending request to null.\n• Queue an element task on the DOM manipulation task source given the element and the following steps:\n• None Change the current request's current URL to the empty string.\n• If all of the following are true:\n• None the element has a attribute or it uses or ; and\n• None maybe omit events is not set or is not the empty string, then fire an event named at the element.\n• None Let be the result of encoding-parsing-and-serializing a URL given , relative to the element's node document.\n• If is failure, then:\n• None Abort the image request for the current request and the pending request.\n• Queue an element task on the DOM manipulation task source given the element and the following steps:\n• None If maybe omit events is not set or is not equal to , then fire an event named at the element.\n• None If the pending request is not null and is the same as the pending request's current URL, then return.\n• None If is the same as the current request's current URL and current request's state is partially available, then abort the image request for the pending request, queue an element task on the DOM manipulation task source given the element to restart the animation if restart animation is set, and return.\n• None Abort the image request for the pending request.\n• None Set to a new image request whose current URL is .\n• None If current request's state is unavailable or broken, then set the current request to . Otherwise, set the pending request to .\n• None Let be the result of creating a potential-CORS request given , \" \", and the current state of the element's content attribute.\n• None If the element uses or , set 's initiator to \" \".\n• None Set 's referrer policy to the current state of the element's attribute.\n• None Set 's priority to the current state of the element's attribute.\n• None Let be true if the 's lazy loading attribute is in the Eager state, or if scripting is disabled for the , and false otherwise.\n• If the will lazy load element steps given the return true, then:\n• None Set the 's lazy load resumption steps to the rest of this algorithm starting with the step labeled fetch the image.\n• Fetch the image: Fetch . Return from this algorithm, and run the remaining steps as part of the fetch's processResponse for the response . The resource obtained in this fashion, if any, is 's image data. It can be either CORS-same-origin or CORS-cross-origin; this affects the image's interaction with other APIs (e.g., when used on a ). When is true, fetching the image must delay the load event of the element's node document until the task that is queued by the networking task source once the resource has been fetched (defined below) has been run. This, unfortunately, can be used to perform a rudimentary port scan of the user's local network (especially in conjunction with scripting, though scripting isn't actually necessary to carry out such an attack). User agents may implement cross-origin access control policies that are stricter than those described above to mitigate this attack, but unfortunately such policies are typically not compatible with existing web content.\n• As soon as possible, jump to the first applicable entry from the following list: If the resource type is The next task that is queued by the networking task source while the image is being fetched must run the following steps:\n• If is the pending request and at least one body part has been completely decoded, abort the image request for the current request, and upgrade the pending request to the current request.\n• None Otherwise, if is the pending request and the user agent is able to determine that 's image is corrupted in some fatal way such that the image dimensions cannot be obtained, abort the image request for the current request, upgrade the pending request to the current request, and set the current request's state to broken.\n• None Otherwise, if is the current request, its state is unavailable, and the user agent is able to determine 's image's width and height, set the current request's state to partially available.\n• None Otherwise, if is the current request, its state is unavailable, and the user agent is able to determine that 's image is corrupted in some fatal way such that the image dimensions cannot be obtained, set the current request's state to broken. Each task that is queued by the networking task source while the image is being fetched must update the presentation of the image, but as each new body part comes in, if the user agent is able to determine the image's width and height, it must prepare the element's current request for presentation given the element and replace the previous image. Once one body part has been completely decoded, perform the following steps:\n• None Set the element's current request's state to completely available.\n• None If maybe omit events is not set or is not equal to , then queue an element task on the DOM manipulation task source given the element to fire an event named at the element. If the resource type and data corresponds to a supported image format, as described below The next task that is queued by the networking task source while the image is being fetched must run the following steps:\n• None If the user agent is able to determine 's image's width and height, and is pending request, set 's state to partially available.\n• None Otherwise, if the user agent is able to determine 's image's width and height, and is current request, prepare for presentation given the element and set 's state to partially available.\n• Otherwise, if the user agent is able to determine that 's image is corrupted in some fatal way such that the image dimensions cannot be obtained, and is pending request:\n• None Abort the image request for the current request and the pending request.\n• None Upgrade the pending request to the current request.\n• None Fire an event named at the element.\n• Otherwise, if the user agent is able to determine that 's image is corrupted in some fatal way such that the image dimensions cannot be obtained, and is current request:\n• None If maybe omit events is not set or is not equal to , then fire an event named at the element. That task, and each subsequent task, that is queued by the networking task source while the image is being fetched, if is the current request, must update the presentation of the image appropriately (e.g., if the image is a progressive JPEG, each packet can improve the resolution of the image). Furthermore, the last task that is queued by the networking task source once the resource has been fetched must additionally run these steps:\n• None If is the pending request, abort the image request for the current request, upgrade the pending request to the current request and prepare for presentation given the element.\n• None Set to the completely available state.\n• None Add the image to the list of available images using the key , with the ignore higher-layer caching flag set.\n• None If maybe omit events is not set or is not equal to , then fire an event named at the element. The image data is not in a supported file format; the user agent must set 's state to broken, abort the image request for the current request and the pending request, upgrade the pending request to the current request if is the pending request, and then, if maybe omit events is not set or is not equal to , queue an element task on the DOM manipulation task source given the element to fire an event named at the element.\n\nWhile a user agent is running the above algorithm for an element , there must be a strong reference from the element's node document to the element , even if that element is not connected.\n\nTo for an image request or null means to run the following steps:\n• None If is null, then return.\n• None Abort any instance of the fetching algorithm for , discarding any pending tasks generated by that algorithm.\n\nTo upgrade the pending request to the current request for an element means to run the following steps:\n• None Let the element's current request be the pending request.\n• None Let the element's pending request be null.\n\nTo for an image request given image element :\n• None Let be the EXIF tags obtained from 's image data, as defined by the relevant codec. [EXIF]\n• None Let and be the width and height obtained from 's image data, as defined by the relevant codec.\n• None Let be the value of 's tag ( ).\n• None Let be the value of 's tag ( ).\n• None Let be the value of 's tag ( ).\n• None Let be the value of 's tag ( ).\n• None Let be the value of 's tag ( ).\n• None If either or is not a positive integer, then return.\n• None If either or is not a positive floating-point number, then return.\n• None If is not equal to ( ), then return.\n• None Let be the value of , multiplied by 72 and divided by .\n• None Let be the value of , multiplied by 72 and divided by .\n• None If is not equal to or is not equal to , then return.\n• If 's image data is CORS-cross-origin, then set 's natural dimensions to and , scale 's pixel data accordingly, and return.\n• None Set 's preferred density-corrected dimensions to a struct with its width set to and its height set to .\n\nResolution in EXIF is equivalent to CSS points per inch, therefore 72 is the base for computing size from resolution.\n\nIt is not yet specified what would be the case if EXIF arrives after the image is already presented. See issue #4929.\n\nTo given an element :\n• None If 's source set is empty, return null as the URL and undefined as the pixel density.\n• None Return the result of selecting an image from 's source set.\n• None If an entry in has the same associated pixel density descriptor as an earlier entry in , then remove entry . Repeat this step until none of the entries in have the same associated pixel density descriptor as an earlier entry.\n• None In an implementation-defined manner, choose one image source from . Let this be .\n• None Return and its associated pixel density.\n\nWhen asked to given a string , a string , a string , and an element or null :\n• None Let be an empty source set.\n• None If is not an empty string, then set to the result of parsing .\n• None Let source size be the result of parsing with .\n• None If is not the empty string and does not contain an image source with a pixel density descriptor value of 1, and no image source with a width descriptor, append to .\n\nWhen asked to for a given or element , user agents must do the following:\n• None If is an element whose parent node is a element, then replace the contents of with 's parent node's child elements, retaining relative order.\n• None Let be if is an element, otherwise null.\n• For each in :\n• \n• None Let be the empty string.\n• None Let be the empty string.\n• None Let be the empty string.\n• None If is an element that has a attribute, then set to that attribute's value.\n• None Otherwise, if is a element that has an attribute, then set to that attribute's value.\n• None If is an element that has a attribute, then set to that attribute's value.\n• None Otherwise, if is a element that has an attribute, then set to that attribute's value.\n• None If is an element that has a attribute, then set to that attribute's value.\n• None Otherwise, if is a element that has an attribute, then set to that attribute's value.\n• None Let 's source set be the result of creating a source set given , , , and .\n• If is a element, then contains only , so this step will be reached immediately and the rest of the algorithm will not run.\n• None If is not a element, then continue.\n• None If does not have a attribute, continue to the next child.\n• None Parse 's srcset attribute and let the returned source set be .\n• None If has zero image sources, continue to the next child.\n• None If has a attribute, and its value does not match the environment, continue to the next child.\n• None Parse 's sizes attribute with , and let 's source size be the returned value.\n• None If has a attribute, and its value is an unknown or unsupported MIME type, continue to the next child.\n• None If has or attributes, set 's dimension attribute source to . Otherwise, set 's dimension attribute source to .\n\nEach element independently considers its previous sibling elements plus the element itself for selecting an image source, ignoring any other (invalid) elements, including other elements in the same element, or elements that are following siblings of the relevant element.\n\nWhen asked to from an element, parse the value of the element's srcset attribute as follows:\n• None Let be the value passed to this algorithm.\n• None Let be a pointer into , initially pointing at the start of the string.\n• None Let be an initially empty source set.\n• None Splitting loop: Collect a sequence of code points that are ASCII whitespace or U+002C COMMA characters from given . If any U+002C COMMA characters were collected, that is a parse error.\n• None If is past the end of , return .\n• None Collect a sequence of code points that are not ASCII whitespace from given , and let that be .\n• None Let be a new empty list.\n• If ends with U+002C (,), then:\n• None Remove all trailing U+002C COMMA characters from . If this removed more than one character, that is a parse error.\n• None Let be the empty string.\n• None Let be in descriptor.\n• Let be the character at . Do the following depending on the value of . For the purpose of this step, \"EOF\" is a special character representing that is past the end of . Do the following, depending on the value of : If is not empty, append to and let be the empty string. Set to after descriptor. Advance to the next character in . If is not empty, append to . Jump to the step labeled descriptor parser. Append to . Set to in parens. If is not empty, append to . Jump to the step labeled descriptor parser. Do the following, depending on the value of : Append to . Set to in descriptor. Append to . Jump to the step labeled descriptor parser. Do the following, depending on the value of : Set to in descriptor. Set to the previous character in . Advance to the next character in . Repeat this step. In order to be compatible with future additions, this algorithm supports multiple descriptors and descriptors with parens.\n• None Descriptor parser: Let be no.\n• For each descriptor in , run the appropriate set of steps from the following list: If the descriptor consists of a valid non-negative integer followed by a U+0077 LATIN SMALL LETTER W character\n• If the user agent does not support the attribute, let be yes. A conforming user agent will support the attribute. However, user agents typically implement and ship features in an incremental manner in practice.\n• None If and are not both absent, then let be yes.\n• None Apply the rules for parsing non-negative integers to the descriptor. If the result is 0, let be yes. Otherwise, let be the result. If the descriptor consists of a valid floating-point number followed by a U+0078 LATIN SMALL LETTER X character\n• None If , and are not all absent, then let be yes.\n• Apply the rules for parsing floating-point number values to the descriptor. If the result is less than 0, let be yes. Otherwise, let be the result. If is 0, the natural dimensions will be infinite. User agents are expected to have limits in how big images can be rendered. If the descriptor consists of a valid non-negative integer followed by a U+0068 LATIN SMALL LETTER H character\n• None If and are not both absent, then let be yes.\n• None Apply the rules for parsing non-negative integers to the descriptor. If the result is 0, let be yes. Otherwise, let be the result. Let be yes.\n• None If is not absent and is absent, let be yes.\n• None If is still no, then append a new image source to whose URL is , associated with a width if not absent and a pixel density if not absent. Otherwise, there is a parse error.\n\nWhen asked to from an element , with an element or null :\n• None Let be the result of parsing a comma-separated list of component values from the value of 's sizes attribute (or the empty string, if the attribute is absent). [CSSSYNTAX]\n• For each in :\n• None Remove all consecutive <whitespace-token>s from the end of . If is now empty, then that is a parse error; continue.\n• None If the last component value in is a valid non-negative <source-size-value>, then set to its value and remove the component value from . Any CSS function other than the math functions is invalid. Otherwise, there is a parse error; continue.\n• If is , and is not null, and is being rendered, and allows auto-sizes, then set to the concrete object size width of , in CSS pixels. If is still , then it will be ignored.\n• Remove all consecutive <whitespace-token>s from the end of . If is now empty:\n• None If this was not the last item in , that is a parse error.\n• None If is not , then return . Otherwise, continue.\n• None Parse the remaining component values in as a <media-condition>. If it does not parse correctly, or it does parse correctly but the <media-condition> evaluates to false, continue. [MQ]\n• None If is not , then return . Otherwise, continue.\n\nIt is invalid to use a bare <source-size-value> that is a <length> (without an accompanying <media-condition>) as an entry in the <source-size-list> that is not the last entry. However, the parsing algorithm allows it at any point in the <source-size-list>, and will accept it immediately as the size if the preceding entries in the list weren't used. This is to enable future extensions, and protect against simple author errors such as a final trailing comma. A bare keyword is allowed to have other entries following it to provide a fallback for legacy user agents.\n\nAn image source can have a pixel density descriptor, a width descriptor, or no descriptor at all accompanying its URL. Normalizing a source set gives every image source a pixel density descriptor.\n\nWhen asked to of a source set , the user agent must do the following:\n• For each image source in :\n• None If the image source has a pixel density descriptor, continue to the next image source.\n• Otherwise, if the image source has a width descriptor, replace the width descriptor with a pixel density descriptor with a value of the width descriptor value divided by and a unit of . If the source size is 0, then the density would be infinity, which results in the natural dimensions being 0 by 0.\n• None Otherwise, give the image source a pixel density descriptor of .\n\nThe user agent may at any time run the following algorithm to update an element's image in order to react to changes in the environment . (User agents are not required to ever run this algorithm; for example, if the user is not looking at the page any more, the user agent might want to wait until the user has returned to the page before determining which image to use, in case the environment changes again in the meantime.)\n\nUser agents are encouraged to run this algorithm in particular when the user changes the viewport's size (e.g. by resizing the window or changing the page zoom), and when an element is inserted into a document, so that the density-corrected natural width and height match the new viewport, and so that the correct image is chosen when art direction is involved.\n• None Await a stable state. The synchronous section consists of all the remaining steps of this algorithm until the algorithm says the synchronous section has ended. (Steps in synchronous sections are marked with ⌛.)\n• None ⌛ If the element does not use or , its node document is not fully active, has image data whose resource type is , or the pending request is not null, then return.\n• None ⌛ Let and be the URL and pixel density that results from selecting an image source, respectively.\n• None ⌛ If is null, then return.\n• None ⌛ If and are the same as the element's last selected source and current pixel density, then return.\n• None ⌛ Let be the result of encoding-parsing-and-serializing a URL given , relative to the element's node document.\n• None ⌛ If is failure, then return.\n• None ⌛ Let be the state of the element's content attribute.\n• None ⌛ Let be the element's node document's origin.\n• None ⌛ Let be the element's node document's relevant settings object.\n• None ⌛ Let be a tuple consisting of , , and, if is not No CORS, .\n• None ⌛ Let be a new image request whose current URL is .\n• None ⌛ Let the element's pending request be .\n• None End the synchronous section, continuing the remaining steps in parallel.\n• If the list of available images contains an entry for , then set 's image data to that of the entry. Continue to the next step.\n• None Let be the result of creating a potential-CORS request given , \" \", and .\n• None Set 's client to , initiator to \" \", and set 's synchronous flag.\n• None Set 's referrer policy to the current state of the element's attribute.\n• None Set 's priority to the current state of the element's attribute.\n• None Let be the result of fetching .\n• None If 's unsafe response is a network error or if the image format is unsupported (as determined by applying the image sniffing rules, again as mentioned earlier), or if the user agent is able to determine that 's image is corrupted in some fatal way such that the image dimensions cannot be obtained, or if the resource type is , then let pending request be null and abort these steps.\n• None Otherwise, 's unsafe response is 's image data. It can be either CORS-same-origin or CORS-cross-origin; this affects the image's interaction with other APIs (e.g., when used on a ).\n• Queue an element task on the DOM manipulation task source given the element and the following steps:\n• None If the element has experienced relevant mutations since this algorithm started, then let pending request be null and abort these steps.\n• None Let the element's last selected source be and the element's current pixel density be .\n• None Set the 's state to completely available.\n• None Add the image to the list of available images using the key , with the ignore higher-layer caching flag set.\n• None Upgrade the pending request to the current request.\n• None Prepare for presentation given the element.\n• None Fire an event named at the element.\n\nRequirements for providing text to act as an alternative for images\n\nExcept where otherwise specified, the attribute must be specified and its value must not be empty; the value must be an appropriate replacement for the image. The specific requirements for the attribute depend on what the image is intended to represent, as described in the following sections.\n\nThe most general rule to consider when writing alternative text is the following: the intent is that replacing every image with the text of its attribute does not change the meaning of the page.\n\nSo, in general, alternative text can be written by considering what one would have written had one not been able to include the image.\n\nA corollary to this is that the attribute's value should never contain text that could be considered the image's caption, title, or legend. It is supposed to contain replacement text that could be used by users instead of the image; it is not meant to supplement the image. The attribute can be used for supplemental information.\n\nAnother corollary is that the attribute's value should not repeat information that is already provided in the prose next to the image.\n\nOne way to think of alternative text is to think about how you would read the page containing the image to someone over the phone, without mentioning that there is an image present. Whatever you say instead of the image is typically a good start for writing the alternative text.\n\nA link or button containing nothing but the image\n\nWhen an element that creates a hyperlink, or a element, has no textual content but contains one or more images, the attributes must contain text that together convey the purpose of the link or button.\n\nA phrase or paragraph with an alternative graphical representation: charts, diagrams, graphs, maps, illustrations\n\nSometimes something can be more clearly stated in graphical form, for example as a flowchart, a diagram, a graph, or a simple map showing directions. In such cases, an image can be given using the element, but the lesser textual version must still be given, so that users who are unable to view the image (e.g. because they have a very slow connection, or because they are using a text-only browser, or because they are listening to the page being read out by a hands-free automobile voice web browser, or simply because they are blind) are still able to understand the message being conveyed.\n\nThe text must be given in the attribute, and must convey the same message as the image specified in the attribute.\n\nIt is important to realize that the alternative text is a replacement for the image, not a description of the image.\n\nA short phrase or label with an alternative graphical representation: icons, logos\n\nA document can contain information in iconic form. The icon is intended to help users of visual browsers to recognize features at a glance.\n\nIn some cases, the icon is supplemental to a text label conveying the same meaning. In those cases, the attribute must be present but must be empty.\n\nIn other cases, the icon has no text next to it describing what it means; the icon is supposed to be self-explanatory. In those cases, an equivalent textual label must be given in the attribute.\n\nMany pages include logos, insignia, flags, or emblems, which stand for a particular entity such as a company, organization, project, band, software package, country, or some such.\n\nIf the logo is being used to represent the entity, e.g. as a page heading, the attribute must contain the name of the entity being represented by the logo. The attribute must not contain text like the word \"logo\", as it is not the fact that it is a logo that is being conveyed, it's the entity itself.\n\nIf the logo is being used next to the name of the entity that it represents, then the logo is supplemental, and its attribute must instead be empty.\n\nIf the logo is merely used as decorative material (as branding, or, for example, as a side image in an article that mentions the entity to which the logo belongs), then the entry below on purely decorative images applies. If the logo is actually being discussed, then it is being used as a phrase or paragraph (the description of the logo) with an alternative graphical representation (the logo itself), and the first entry above applies.\n\nText that has been rendered to a graphic for typographical effect\n\nSometimes, an image just consists of text, and the purpose of the image is not to highlight the actual typographic effects used to render the text, but just to convey the text itself.\n\nIn such cases, the attribute must be present but must consist of the same text as written in the image itself.\n\nWhen an image is used to represent a character that cannot otherwise be represented in Unicode, for example gaiji, itaiji, or new characters such as novel currency symbols, the alternative text should be a more conventional way of writing the same thing, e.g. using the phonetic hiragana or katakana to give the character's pronunciation.\n\nAn image should not be used if characters would serve an identical purpose. Only when the text cannot be directly represented using text, e.g., because of decorations or because there is no appropriate character (as in the case of gaiji), would an image be appropriate.\n\nIf an author is tempted to use an image because their default system font does not support a given character, then web fonts are a better solution than images.\n\nA graphical representation of some of the surrounding text\n\nIn many cases, the image is actually just supplementary, and its presence merely reinforces the surrounding text. In these cases, the attribute must be present but its value must be the empty string.\n\nIn general, an image falls into this category if removing the image doesn't make the page any less useful, but including the image makes it a lot easier for users of visual browsers to understand the concept.\n\nSometimes, an image is not critical to the content, but is nonetheless neither purely decorative nor entirely redundant with the text. In these cases, the attribute must be present, and its value should either be the empty string, or a textual representation of the information that the image conveys. If the image has a caption giving the image's title, then the attribute's value must not be empty (as that would be quite confusing for non-visual readers).\n\nIf an image is decorative but isn't especially page-specific — for example an image that forms part of a site-wide design scheme — the image should be specified in the site's CSS, not in the markup of the document.\n\nHowever, a decorative image that isn't discussed by the surrounding text but still has some relevance can be included in a page using the element. Such images are decorative, but still form part of the content. In these cases, the attribute must be present but its value must be the empty string.\n\nA group of images that form a single larger picture with no links\n\nWhen a picture has been sliced into smaller image files that are then displayed together to form the complete picture again, one of the images must have its attribute set as per the relevant rules that would be appropriate for the picture as a whole, and then all the remaining images must have their attribute set to the empty string.\n\nA group of images that form a single larger picture with links\n\nGenerally, image maps should be used instead of slicing an image for links.\n\nHowever, if an image is indeed sliced and any of the components of the sliced picture are the sole contents of links, then one image per link must have alternative text in its attribute representing the purpose of the link.\n\nIn some cases, the image is a critical part of the content. This could be the case, for instance, on a page that is part of a photo gallery. The image is the whole point of the page containing it.\n\nHow to provide alternative text for an image that is a key part of the content depends on the image's provenance.\n\nAn image not intended for the user\n\nGenerally authors should avoid using elements for purposes other than showing images.\n\nIf an element is being used for purposes other than showing an image, e.g. as part of a service to count page views, then the attribute must be the empty string.\n\nIn such cases, the and attributes should both be set to zero.\n\nAn image in an email or private document intended for a specific person who is known to be able to view images\n\nThis section does not apply to documents that are publicly accessible, or whose target audience is not necessarily personally known to the author, such as documents on a web site, emails sent to public mailing lists, or software documentation.\n\nWhen an image is included in a private communication (such as an HTML email) aimed at a specific person who is known to be able to view images, the attribute may be omitted. However, even in such cases authors are strongly urged to include alternative text (as appropriate according to the kind of image involved, as described in the above entries), so that the email is still usable should the user use a mail client that does not support images, or should the document be forwarded on to other users whose abilities might not include easily seeing images.\n\nMarkup generators (such as WYSIWYG authoring tools) should, wherever possible, obtain alternative text from their users. However, it is recognized that in many cases, this will not be possible.\n\nFor images that are the sole contents of links, markup generators should examine the link target to determine the title of the target, or the URL of the target, and use information obtained in this manner as the alternative text.\n\nFor images that have captions, markup generators should use the and elements, or the attribute, to provide the image's caption.\n\nAs a last resort, implementers should either set the attribute to the empty string, under the assumption that the image is a purely decorative image that doesn't add any information but is still specific to the surrounding content, or omit the attribute altogether, under the assumption that the image is a key part of the content.\n\nMarkup generators may specify a attribute on elements for which they have been unable to obtain alternative text and for which they have therefore omitted the attribute. The value of this attribute must be the empty string. Documents containing such attributes are not conforming, but conformance checkers will silently ignore this error.\n\nThis is intended to avoid markup generators from being pressured into replacing the error of omitting the attribute with the even more egregious error of providing phony alternative text, because state-of-the-art automated conformance checkers cannot distinguish phony alternative text from correct alternative text.\n\nMarkup generators should generally avoid using the image's own filename as the alternative text. Similarly, markup generators should avoid generating alternative text from any content that will be equally available to presentation user agents (e.g., web browsers).\n\nThis is because once a page is generated, it will typically not be updated, whereas the browsers that later read the page can be updated by the user, therefore the browser is likely to have more up-to-date and finely-tuned heuristics than the markup generator did when generating the page.\n\nA conformance checker must report the lack of an attribute as an error unless one of the conditions listed below applies:\n• None The element is in a element that satisfies the conditions described above.\n• None The element has a attribute with a value that is not the empty string (also as described above).\n• None The conformance checker has been configured to assume that the document is an email or document intended for a specific person who is known to be able to view images.\n• None The element has a (non-conforming) attribute whose value is the empty string. A conformance checker that is not reporting the lack of an attribute as an error must also not report the presence of the empty attribute as an error. (This case does not represent a case where the document is conforming, only that the generator could not determine appropriate alternative text — validators are not required to show an error in this case, because such an error might encourage markup generators to include bogus alternative text purely in an attempt to silence validators. Naturally, conformance checkers may report the lack of an attribute as an error even in the presence of the attribute; for example, there could be a user option to report all conformance errors even those that might be the more or less inevitable result of using a markup generator.)\n\nThe attribute gives the URL of a page that the element's content navigable is to contain. The attribute, if present, must be a valid non-empty URL potentially surrounded by spaces. If the attribute is specified on an element, then the attribute must also be specified.\n\nThe attribute gives the content of the page that the element's content navigable is to contain. The value of the attribute is used to construct , which is a whose URL matches .\n\nThe attribute, if present, must have a value using the HTML syntax that consists of the following syntactic components, in the given order:\n• Any number of and ASCII whitespace.\n• Any number of and ASCII whitespace.\n• The document element, in the form of an element.\n• Any number of and ASCII whitespace.\n\nThe above requirements apply in XML documents as well.\n\nIn the HTML syntax, authors need only remember to use U+0022 QUOTATION MARK characters (\") to wrap the attribute contents and then to escape all U+0026 AMPERSAND (&) and U+0022 QUOTATION MARK (\") characters, and to specify the attribute, to ensure safe embedding of content. (And remember to escape ampersands before quotation marks, to ensure quotation marks become \" and not &quot;.)\n\nIn XML the U+003C LESS-THAN SIGN character (<) needs to be escaped as well. In order to prevent attribute-value normalization, some of XML's whitespace characters — specifically U+0009 CHARACTER TABULATION (tab), U+000A LINE FEED (LF), and U+000D CARRIAGE RETURN (CR) — also need to be escaped. [XML]\n\nIf the attribute and the attribute are both specified together, the attribute takes priority. This allows authors to provide a fallback URL for legacy user agents that do not support the attribute.\n\nThe HTML element post-connection steps, given , are:\n• None If has a attribute, then parse the sandboxing directive given the attribute's value and 's sandboxing flag set.\n• None Process the attributes for , with set to true.\n\nThe HTML element removing steps, given , are to destroy a child navigable given .\n\nThis happens without any events firing (the element's content document is destroyed, not unloaded).\n\nAlthough s are processed while in a shadow tree, per the above, several other aspects of their behavior are not well-defined with regards to shadow trees. See issue #763 for more detail.\n\nWhenever an element with a non-null content navigable has its attribute set, changed, or removed, the user agent must process the attributes.\n\nSimilarly, whenever an element with a non-null content navigable but with no attribute specified has its attribute set, changed, or removed, the user agent must process the attributes.\n\nTo for an element , with an optional boolean (default false):\n• If 's attribute is specified, then:\n• If the will lazy load element steps given return true, then:\n• None Set 's lazy load resumption steps to the rest of this algorithm starting with the step labeled navigate to the srcdoc resource.\n• Navigate to the srcdoc resource: Navigate an or given , , the empty string, and the value of 's attribute. The resulting must be considered an document.\n• \n• None Let be the result of running the shared attribute processing steps for and elements given and .\n• None If is null, then return.\n• If matches and is true, then:\n• None Let be the current state of 's content attribute.\n• If the will lazy load element steps given return true, then:\n• None Set 's lazy load resumption steps to the rest of this algorithm starting with the step labeled navigate.\n• None Navigate: Navigate an or given , , and .\n\nThe , given an element and a boolean , are:\n• None Let be the URL record .\n• If has a attribute specified, and its value is not the empty string, then:\n• None Let be the result of encoding-parsing a URL given that attribute's value, relative to 's node document.\n• None If is not failure, then set to .\n• None If the inclusive ancestor navigables of 's node navigable contains a navigable whose active document's URL equals with exclude fragments set to true, then return null.\n• If matches and is true, then perform the given 's content navigable's active document and . This is necessary in case is something like . If is just plain , this will do nothing.\n\nTo given an element , a URL , a referrer policy , and an optional string-or-null (default null):\n• None If 's content navigable's active document is not completely loaded, then set to \" \".\n• None If is an , then set 's pending resource-timing start time to the current high resolution time given 's node document's relevant global object.\n• None Navigate 's content navigable to using 's node document, with historyHandling set to , referrerPolicy set to , and documentResource set to .\n\nEach has an flag and a flag. When a is created, these flags must be unset for that .\n\nTo run the , given an element :\n• None If has its mute iframe load flag set, then return.\n• If 's pending resource-timing start time is not null, then:\n• None Let be a new fetch timing info whose start time is 's pending resource-timing start time and whose response end time is the current high resolution time given .\n• None Mark resource timing given , , \" \", , the empty string, a new response body info, and 0.\n\nThis, in conjunction with scripting, can be used to probe the URL space of the local network's HTTP servers. User agents may implement cross-origin access control policies that are stricter than those described above to mitigate this attack, but unfortunately such policies are typically not compatible with existing web content.\n\nIf an element type , then for each element of that type, the user agent must delay the load event of 's node document if 's content navigable is non-null and any of the following are true:\n• None 's content navigable's active document is not ready for post-load tasks;\n• None 's content navigable's is delaying events is true; or\n• None anything is delaying the load event of 's content navigable's active document.\n\nIf, during the handling of the event, 's content navigable is again navigated, that will further delay the load event.\n\nEach element has an associated boolean, initially false. It is set and unset in the process the attributes algorithm.\n\nAn element whose current navigation was lazy loaded boolean is false potentially delays the load event.\n\nEach element has an associated null or , initially set to null.\n\nIf, when the element is created, the attribute is not set, and the attribute is either also not set or set but its value cannot be parsed, the element's content navigable will remain at the initial .\n\nIf the user navigates away from this page, the 's content navigable's active object will proxy new objects for new objects, but the attribute will not change.\n\nThe attribute, if present, must be a valid navigable target name. The given value is used to name the element's content navigable if present when that is created.\n\nThe attribute, when specified, enables a set of extra restrictions on any content hosted by the . Its value must be an unordered set of unique space-separated tokens that are ASCII case-insensitive. The allowed values are:\n\nWhen the attribute is set, the content is treated as being from a unique opaque origin, forms, scripts, and various potentially annoying APIs are disabled, and links are prevented from targeting other navigables. The keyword causes the content to be treated as being from its real origin instead of forcing it into an opaque origin; the keyword allows the content to navigate its traversable navigable; the keyword behaves similarly but allows such navigation only when the browsing context's active window has transient activation; the reenables navigations toward non fetch scheme to be handed off to external software; and the , , , , , , , and keywords re-enable forms, modal dialogs, screen orientation lock, the pointer lock API, popups, the presentation API, scripts, and the creation of unsandboxed auxiliary browsing contexts respectively. The keyword allows content to perform downloads. [POINTERLOCK] [SCREENORIENTATION] [PRESENTATION]\n\nThe and keywords must not both be specified, as doing so is redundant; only will have an effect in such non-conformant markup.\n\nSimilarly, the keyword must not be specified if either or are specified, as doing so is redundant.\n\nTo allow , , and inside sandboxed content, both the and keywords need to be specified, and the loaded URL needs to be same origin with the top-level origin. Without the keyword, the content is always treated as cross-origin, and cross-origin content cannot show simple dialogs.\n\nSetting both the and keywords together when the embedded page has the same origin as the page containing the allows the embedded page to simply remove the attribute and then reload itself, effectively breaking out of the sandbox altogether.\n\nThese flags only take effect when the content navigable of the element is navigated. Removing them, or removing the entire attribute, has no effect on an already-loaded page.\n\nPotentially hostile files should not be served from the same server as the file containing the element. Sandboxing hostile content is of minimal help if an attacker can convince the user to just visit the hostile content directly, rather than in the . To limit the damage that can be caused by hostile HTML content, it should be served from a separate dedicated domain. Using a different domain ensures that scripts in the files are unable to attack the site, even if the user is tricked into visiting those pages directly, without the protection of the attribute.\n\nWhen an element's attribute is set or changed while it has a non-null content navigable, the user agent must parse the sandboxing directive given the attribute's value and the element's sandboxing flag set.\n\nWhen an element's attribute is removed while it has a non-null content navigable, the user agent must empty the element's sandboxing flag set.\n\nThe attribute, when specified, determines the container policy that will be used when the permissions policy for a in the 's content navigable is initialized. Its value must be a serialized permissions policy. [PERMISSIONSPOLICY]\n\nThe attribute is a boolean attribute. When specified, it indicates that objects in the element's content navigable will be initialized with a permissions policy which allows the \" \" feature to be used from any origin. This is enforced by the process permissions policy attributes algorithm. [PERMISSIONSPOLICY]\n\nNeither nor can grant access to a feature in an element's content navigable if the element's node document is not already allowed to use that feature.\n\nTo determine whether a object is the policy-controlled-feature , run these steps:\n• None If 's browsing context is null, then return false.\n• None If is not fully active, then return false.\n• None If the result of running is feature enabled in document for origin on , , and 's origin is \" \", then return true.\n\nBecause they only influence the permissions policy of the content navigable's active document, the and attributes only take effect when the content navigable of the is navigated. Adding or removing them has no effect on an already-loaded document.\n\nThe element supports dimension attributes for cases where the embedded content has specific dimensions (e.g. ad units have well-defined dimensions).\n\nAn element never has fallback content, as it will always create a new child navigable, regardless of whether the specified initial contents are successfully used.\n\nThe attribute is a referrer policy attribute. Its purpose is to set the referrer policy used when processing the attributes. [REFERRERPOLICY]\n\nThe attribute is a lazy loading attribute. Its purpose is to indicate the policy for loading elements that are outside the viewport.\n\nWhen the attribute's state is changed to the Eager state, the user agent must run these steps:\n• None Let be the element's lazy load resumption steps.\n• None If is null, then return.\n\nDescendants of elements represent nothing. (In legacy user agents that do not support elements, the contents would be parsed as markup that could act as fallback content.)\n\nThe IDL attributes , , , and must reflect the respective content attributes of the same name.\n• None Let be the result of running get an attribute by namespace and local name given null, 's local name, and this.\n• None If is null, then return the empty string.\n• None Let be the result of invoking the Get Trusted Type compliant string algorithm with , this's relevant global object, the given value, \" \", and \" \".\n• None Set an attribute value given this, 's local name, and .\n\nThe supported tokens for 's are the allowed values defined in the attribute and supported by the user agent.\n\nThe IDL attribute must reflect the content attribute.\n\nThe IDL attribute must reflect the content attribute, limited to only known values.\n\nThe IDL attribute must reflect the content attribute, limited to only known values.\n\nThe getter steps are to return the this's content document.\n\nThe getter steps are to return this's content window.\n\nThe element provides an integration point for an external application or interactive content.\n\nThe attribute gives the URL of the resource being embedded. The attribute, if present, must contain a valid non-empty URL potentially surrounded by spaces.\n\nIf the attribute is specified on an element, then the attribute must also be specified.\n\nThe attribute, if present, gives the MIME type by which the plugin to instantiate is selected. The value must be a valid MIME type string. If both the attribute and the attribute are present, then the attribute must specify the same type as the explicit Content-Type metadata of the resource given by the attribute.\n\nWhile any of the following conditions are occurring, any plugin instantiated for the element must be removed, and the element represents nothing:\n• None The element has neither a attribute nor a attribute.\n• None The element has an ancestor element that is not showing its fallback content.\n\nAn element is said to be when the following conditions are all met simultaneously:\n• None The element is in a document or was in a document the last time the event loop reached step 1.\n• None The element has either a attribute set or a attribute set (or both).\n• None The element's attribute is either absent or its value is not the empty string.\n• None The element is not a descendant of a media element.\n• None The element is not a descendant of an element that is not showing its fallback content.\n• None The element is being rendered, or was being rendered the last time the event loop reached step 1.\n\nWhenever an element that was not potentially active becomes potentially active, and whenever a potentially active element that is remaining potentially active and has its attribute set, changed, or removed or its attribute set, changed, or removed, the user agent must queue an element task on the given the element to run the element setup steps for that element.\n\nfor a given element are as follows:\n• None If another task has since been queued to run the element setup steps for , then return.\n• If has a attribute set, then:\n• None Let be the result of encoding-parsing a URL given 's attribute's value, relative to 's node document.\n• None If is failure, then return.\n• None Let be a new request whose URL is , client is 's node document's relevant settings object, destination is \" \", credentials mode is \" \", mode is \" \", initiator type is \" \", and whose use-URL-credentials flag is set.\n• Fetch , with processResponse set to the following steps given response :\n• None If another task has since been queued to run the element setup steps for , then return.\n• None If is a network error, then fire an event named at , and return.\n• None Let be the result of determining the type of content given and .\n• \n• None If 's content navigable is null, then create a new child navigable for .\n• Navigate 's content navigable to 's URL using 's node document, with response set to , and historyHandling set to \" \". 's attribute does not get updated if the content navigable gets further navigated to other locations. Fetching the resource must delay the load event of 's node document.\n• None Otherwise, display no plugin for .\n\nTo determine the given an element and a response , run the following steps:\n• None If has a attribute, and that attribute's value is a type that a plugin supports, then return the value of the attribute.\n• If the path component of 's url matches a pattern that a plugin supports, then return the type that that plugin can handle. For example, a plugin might say that it can handle URLs with path components that end with the four character string \" \".\n• None If has explicit Content-Type metadata, and that value is a type that a plugin supports, then return that value.\n\nIt is intentional that the above algorithm allows to have a non-ok status. This allows servers to return data for plugins even with error responses (e.g., HTTP 500 Internal Server Error codes can still contain plugin data).\n\nTo for an element :\n• None Display an indication that no plugin could be found for , as the contents of .\n\nThe element has no fallback content; its descendants are ignored.\n\nWhenever an element that was potentially active stops being potentially active, any plugin that had been instantiated for that element must be unloaded.\n\nThe IDL attributes and each must reflect the respective content attributes of the same name.\n\nThe element can represent an external resource, which, depending on the type of the resource, will either be treated as an image or as a child navigable.\n\nThe attribute specifies the URL of the resource. It must be present, and must contain a valid non-empty URL potentially surrounded by spaces.\n\nThe attribute, if present, specifies the type of the resource. If present, the attribute must be a valid MIME type string.\n\nThe attribute, if present, must be a valid navigable target name. The given value is used to name the element's content navigable, if applicable, and if present when the element's content navigable is created.\n\nWhenever one of the following conditions occur:\n• the element is popped off the stack of open elements of an HTML parser or XML parser,\n• the element is not on the stack of open elements of an HTML parser or XML parser, and it is either inserted into a document or removed from a document,\n• the element's node document changes whether it is fully active,\n• one of the element's ancestor elements changes to or from showing its fallback content,\n• the element's attribute is set, changed, or removed,\n• the element's attribute is not present, and its attribute is set, changed, or removed,\n• neither the element's attribute nor its attribute are present, and its attribute is set, changed, or removed,\n• the element changes from being rendered to not being rendered, or vice versa,\n\n...the user agent must queue an element task on the DOM manipulation task source given the element to run the following steps to (re)determine what the element represents. This task being queued or actively running must delay the load event of the element's node document.\n• If the user has indicated a preference that this element's fallback content be shown instead of the element's usual behavior, then jump to the step below labeled fallback. For example, a user could ask for the element's fallback content to be shown because that content uses a format that the user finds more accessible.\n• None If the element has an ancestor media element, or has an ancestor element that is not showing its fallback content, or if the element is not in a document whose browsing context is non-null, or if the element's node document is not fully active, or if the element is still in the stack of open elements of an HTML parser or XML parser, or if the element is not being rendered, then jump to the step below labeled fallback.\n• None If the attribute is present and its value is not the empty string, then:\n• None If the attribute is present and its value is not a type that the user agent supports, then the user agent may jump to the step below labeled fallback without fetching the content to examine its real type.\n• None Let be the result of encoding-parsing a URL given the attribute's value, relative to the element's node document.\n• None If is failure, then fire an event named at the element and jump to the step below labeled fallback.\n• None Let be a new request whose URL is , client is the element's node document's relevant settings object, destination is \" \", credentials mode is \" \", mode is \" \", initiator type is \" \", and whose use-URL-credentials flag is set.\n• Fetching the resource must delay the load event of the element's node document until the task that is queued by the networking task source once the resource has been fetched (defined next) has been run.\n• None If the resource is not yet available (e.g. because the resource was not available in the cache, so that loading the resource required making a request over the network), then jump to the step below labeled fallback. The task that is queued by the networking task source once the resource is available must restart this algorithm from this step. Resources can load incrementally; user agents may opt to consider a resource \"available\" whenever enough data has been obtained to begin processing the resource.\n• None If the load failed (e.g. there was an HTTP 404 error, there was a DNS error), fire an event named at the element, then jump to the step below labeled fallback.\n• Determine the , as follows:\n• Let the be unknown.\n• If the user agent is configured to strictly obey Content-Type headers for this resource, and the resource has associated Content-Type metadata, then let the be the type specified in the resource's Content-Type metadata, and jump to the step below labeled handler. This can introduce a vulnerability, wherein a site is trying to embed a resource that uses a particular type, but the remote site overrides that and instead furnishes the user agent with a resource that triggers a different type of content with different security characteristics.\n• Run the appropriate set of steps from the following list: If the resource has associated Content-Type metadata\n• If the type specified in the resource's Content-Type metadata is \" \", and the result of applying the rules for distinguishing if a resource is text or binary to the resource is that the resource is not , then set to true.\n• If the type specified in the resource's Content-Type metadata is \" \", then set to true.\n• If is false, then let the be the type specified in the resource's Content-Type metadata, and jump to the step below labeled handler.\n• If there is a attribute present on the element, and its value is not , then run the following steps:\n• If the attribute's value is a type that starts with \" \" that is not also an XML MIME type, then let the be the type specified in that attribute.\n• Jump to the step below labeled handler. Otherwise, if the resource does not have associated Content-Type metadata\n• If there is a attribute present on the element, then let the be the type specified in that attribute. Otherwise, let be the computed type of the resource.\n• If is not , then let be and jump to the step below labeled handler.\n• If applying the URL parser algorithm to the URL of the specified resource (after any redirects) results in a URL record whose path component matches a pattern that a plugin supports, then let be the type that that plugin can handle. For example, a plugin might say that it can handle resources with path components that end with the four character string \" \". It is possible for this step to finish, or for one of the substeps above to jump straight to the next step, with still being unknown. In both cases, the next step will trigger fallback.\n• None Handler: Handle the content as given by the first of the following cases that matches: If the is an XML MIME type, or if the does not start with \" \" If the element's content navigable is null, then create a new child navigable for the element. Let be the response from fetch. If 's URL does not match , then navigate the element's content navigable to 's URL using the element's node document, with set to \" \". The attribute of the element doesn't get updated if the content navigable gets further navigated to other locations. If the starts with \" \", and support for images has not been disabled Apply the image sniffing rules to determine the type of the image. The element represents the specified image. If the image cannot be rendered, e.g. because it is malformed or in an unsupported format, jump to the step below labeled fallback. The given is not supported. Jump to the step below labeled fallback. If the previous step ended with the being unknown, this is the case that is triggered.\n• None The element's contents are not part of what the element represents.\n• If the element does not represent its content navigable, then once the resource is completely loaded, queue an element task on the DOM manipulation task source given the element to fire an event named at the element. If the element does represent its content navigable, then an analogous task will be queued when the created is completely finished loading.\n• None Fallback: The element represents the element's children. This is the element's fallback content. Destroy a child navigable given the element.\n\nDue to the algorithm above, the contents of elements act as fallback content, used only when referenced resources can't be shown (e.g. because it returned a 404 error). This allows multiple elements to be nested inside each other, targeting multiple user agents with different capabilities, with the user agent picking the first one it supports.\n\nThe attribute is used to explicitly associate the element with its form owner.\n\nThe IDL attributes , , and each must reflect the respective content attributes of the same name.\n\nThe getter steps are to return this's content document.\n\nThe getter steps are to return this's content window.\n\nThe , , and attributes, and the , , and methods, are part of the constraint validation API. The IDL attribute is part of the element's forms API.\n\nA element is used for playing videos or movies, and audio files with captions.\n\nContent may be provided inside the element. User agents should not show this content to the user; it is intended for older web browsers which do not support , so that text can be shown to the users of these older browsers informing them of how to access the video contents.\n\nIn particular, this content is not intended to address accessibility concerns. To make video content accessible to the partially sighted, the blind, the hard-of-hearing, the deaf, and those with other physical or cognitive disabilities, a variety of features are available. Captions can be provided, either embedded in the video stream or as external files using the element. Sign-language tracks can be embedded in the video stream. Audio descriptions can be embedded in the video stream or in text form using a WebVTT file referenced using the element and synthesized into speech by the user agent. WebVTT can also be used to provide chapter titles. For users who would rather not use a media element at all, transcripts or other textual alternatives can be provided by simply linking to them in the prose near the element. [WEBVTT]\n\nThe element is a media element whose media data is ostensibly video data, possibly with associated audio data.\n\nThe , , , , , , and attributes are the attributes common to all media elements.\n\nThe attribute gives the URL of an image file that the user agent can show while no video data is available. The attribute, if present, must contain a valid non-empty URL potentially surrounded by spaces.\n\nIf the specified resource is to be used, then, when the element is created or when the attribute is set, changed, or removed, the user agent must run the following steps to determine the element's (regardless of the value of the element's show poster flag):\n• None If there is an existing instance of this algorithm running for this element, abort that instance of this algorithm without changing the poster frame.\n• None If the attribute's value is the empty string or if the attribute is absent, then there is no poster frame; return.\n• None Let be the result of encoding-parsing a URL given the attribute's value, relative to the element's node document.\n• None If is failure, then return. There is no poster frame.\n• None Let be a new request whose URL is , client is the element's node document's relevant settings object, destination is \" \", initiator type is \" \", credentials mode is \" \", and whose use-URL-credentials flag is set.\n• None Fetch . This must delay the load event of the element's node document.\n• None If an image is thus obtained, the poster frame is that image. Otherwise, there is no poster frame.\n\nThe image given by the attribute, the poster frame, is intended to be a representative frame of the video (typically one of the first non-blank frames) that gives the user an idea of what the video is like.\n\nThe attribute is a boolean attribute. If present, it serves as a hint to the user agent that the video ought to be displayed \"inline\" in the document by default, constrained to the element's playback area, instead of being displayed fullscreen or in an independent resizable window.\n\nThe absence of the attribute does not imply that the video will display fullscreen by default. Indeed, most user agents have chosen to play all videos inline by default, and in such user agents the attribute has no effect.\n\nA element represents what is given for the first matching condition in the list below:\n\nFrames of video must be obtained from the video track that was selected when the event loop last reached step 1.\n\nWhich frame in a video stream corresponds to a particular playback position is defined by the video stream's format.\n\nThe element also represents any text track cues whose text track cue active flag is set and whose text track is in the showing mode, and any audio from the media resource, at the current playback position.\n\nAny audio associated with the media resource must, if played, be played synchronized with the current playback position, at the element's effective media volume. The user agent must play the audio from audio tracks that were enabled when the event loop last reached step 1.\n\nIn addition to the above, the user agent may provide messages to the user (such as \"buffering\", \"no video loaded\", \"error\", or more detailed information) by overlaying text or icons on the video or other areas of the element's playback area, or in another appropriate manner.\n\nUser agents that cannot render the video may instead make the element represent a link to an external video playback utility or to the video data itself.\n\nWhen a element's media resource has a video channel, the element provides a paint source whose width is the media resource's natural width, whose height is the media resource's natural height, and whose appearance is the frame of video corresponding to the current playback position, if that is available, or else (e.g. when the video is seeking or buffering) its previous appearance, if any, or else (e.g. because the video is still loading the first frame) blackness.\n\nThe and of the media resource are the dimensions of the resource in CSS pixels after taking into account the resource's dimensions, aspect ratio, clean aperture, resolution, and so forth, as defined for the format used by the resource. If an anamorphic format does not define how to apply the aspect ratio to the video data's dimensions to obtain the \"correct\" dimensions, then the user agent must apply the ratio by increasing one dimension and leaving the other unchanged.\n\nThe IDL attribute must return the natural width of the video in CSS pixels. The IDL attribute must return the natural height of the video in CSS pixels. If the element's attribute is , then the attributes must return 0.\n\nIn the absence of style rules to the contrary, video content should be rendered inside the element's playback area such that the video content is shown centered in the playback area at the largest possible size that fits completely within it, with the video content's aspect ratio being preserved. Thus, if the aspect ratio of the playback area does not match the aspect ratio of the video, the video will be shown letterboxed or pillarboxed. Areas of the element's playback area that do not contain the video represent nothing.\n\nIn user agents that implement CSS, the above requirement can be implemented by using the style rule suggested in the Rendering section.\n\nThe natural width of a element's playback area is the natural width of the poster frame, if that is available and the element currently represents its poster frame; otherwise, it is the natural width of the video resource, if that is available; otherwise the natural width is missing.\n\nThe natural height of a element's playback area is the natural height of the poster frame, if that is available and the element currently represents its poster frame; otherwise it is the natural height of the video resource, if that is available; otherwise the natural height is missing.\n\nThe default object size is a width of 300 CSS pixels and a height of 150 CSS pixels. [CSSIMAGES]\n\nUser agents should provide controls to enable or disable the display of closed captions, audio description tracks, and other additional data associated with the video stream, though such features should, again, not interfere with the page's normal rendering.\n\nUser agents may allow users to view the video content in manners more suitable to the user, such as fullscreen or in an independent resizable window. User agents may even trigger such a viewing mode by default upon playing a video, although they should not do so when the attribute is specified. As with the other user interface features, controls to enable this should not interfere with the page's normal rendering unless the user agent is exposing a user interface. In such an independent viewing mode, however, user agents may make full user interfaces visible, even if the attribute is absent.\n\nUser agents may allow video playback to affect system features that could interfere with the user's experience; for example, user agents could disable screensavers while video playback is in progress.\n\nThe IDL attribute must reflect the content attribute.\n\nThe IDL attribute must reflect the content attribute.\n\nContent may be provided inside the element. User agents should not show this content to the user; it is intended for older web browsers which do not support , so that text can be shown to the users of these older browsers informing them of how to access the audio contents.\n\nIn particular, this content is not intended to address accessibility concerns. To make audio content accessible to the deaf or to those with other physical or cognitive disabilities, a variety of features are available. If captions or a sign language video are available, the element can be used instead of the element to play the audio, allowing users to enable the visual alternatives. Chapter titles can be provided to aid navigation, using the element and a WebVTT file. And, naturally, transcripts or other textual alternatives can be provided by simply linking to them in the prose near the element. [WEBVTT]\n\nThe element is a media element whose media data is ostensibly audio data.\n\nThe , , , , , , and attributes are the attributes common to all media elements.\n\nA legacy factory function is provided for creating objects (in addition to the factory methods from DOM such as ): . When invoked, the legacy factory function must perform the following steps:\n• None Let be the current global object's associated .\n• None Let be the result of creating an element given , \" \", and the HTML namespace.\n• None Set an attribute value for using \" \" and \" \".\n• None If is given, then set an attribute value for using \" \" and . (This will cause the user agent to invoke the object's resource selection algorithm before returning.)\n\nThe element allows authors to specify explicit external timed text tracks for media elements. It does not represent anything on its own.\n\nThe attribute is an enumerated attribute with the following keywords and states:\n\nThe attribute's missing value default is the subtitles state, and its invalid value default is the metadata state.\n\nThe attribute gives the URL of the text track data. The value must be a valid non-empty URL potentially surrounded by spaces. This attribute must be present.\n\nThe element has an associated (a string), initially the empty string.\n\nWhen the element's attribute is set, run these steps:\n• None Let be the element's attribute value.\n• None If is not the empty string, then set to the result of encoding-parsing-and-serializing a URL given , relative to the element's node document.\n• None Set the element's track URL to if it is not failure; otherwise to the empty string.\n\nIf the element's track URL identifies a WebVTT resource, and the element's attribute is not in the chapters metadata or metadata state, then the WebVTT file must be a WebVTT file using cue text. [WEBVTT]\n\nThe attribute gives the language of the text track data. The value must be a valid BCP 47 language tag. This attribute must be present if the element's attribute is in the subtitles state. [BCP47]\n\nIf the element has a attribute whose value is not the empty string, then the element's is the value of the attribute. Otherwise, the element has no track language.\n\nThe attribute gives a user-readable title for the track. This title is used by user agents when listing subtitle, caption, and audio description tracks in their user interface.\n\nThe value of the attribute, if the attribute is present, must not be the empty string. Furthermore, there must not be two element children of the same media element whose attributes are in the same state, whose attributes are both missing or have values that represent the same language, and whose attributes are again both missing or both have the same value.\n\nIf the element has a attribute whose value is not the empty string, then the element's is the value of the attribute. Otherwise, the element's track label is an empty string.\n\nThe attribute is a boolean attribute, which, if specified, indicates that the track is to be enabled if the user's preferences do not indicate that another track would be more appropriate.\n\nEach media element must have no more than one element child whose attribute is in the subtitles or captions state and whose attribute is specified.\n\nEach media element must have no more than one element child whose attribute is in the description state and whose attribute is specified.\n\nEach media element must have no more than one element child whose attribute is in the chapters metadata state and whose attribute is specified.\n\nThere is no limit on the number of elements whose attribute is in the metadata state and whose attribute is specified.\n\nThe attribute must return the numeric value corresponding to the text track readiness state of the element's text track, as defined by the following list:\n\nThe IDL attribute must, on getting, return the element's text track's corresponding object.\n\nThe , , , and IDL attributes must reflect the respective content attributes of the same name. The IDL attribute must reflect the content attribute of the same name, limited to only known values.\n\nHTMLMediaElement objects ( and , in this specification) are simply known as .\n\nThe , , , , , , , and , apply to all media elements. They are defined in this section.\n\nMedia elements are used to present audio data, or video and audio data, to the user. This is referred to as in this section, since this section applies equally to media elements for audio or for video. The term is used to refer to the complete set of media data, e.g. the complete video file, or complete audio file.\n\nA media resource has an associated , which is either \" \", \" \", \" \", or an origin. It is initially set to \" \".\n\nA media resource can have multiple audio and video tracks. For the purposes of a media element, the video data of the media resource is only that of the currently selected track (if any) as given by the element's attribute when the event loop last reached step 1, and the audio data of the media resource is the result of mixing all the currently enabled tracks (if any) given by the element's attribute when the event loop last reached step 1.\n\nBoth and elements can be used for both audio and video. The main difference between the two is simply that the element has no playback area for visual content (such as video or captions), whereas the element does.\n\nTo with a media element and a series of steps , queue an element task on the media element's media element event task source given and .\n\nAll media elements have an associated error status, which records the last error the element encountered since its resource selection algorithm was last invoked. The attribute, on getting, must return the object created for this last error, or null if there has not been an error.\n\nEvery object has a , which is a string, and a , which is one of the following:\n\nTo , given an error code which is one of the above values, return a new object whose code is the given error code and whose message is a string containing any details the user agent is able to supply about the cause of the error condition, or the empty string if the user agent is unable to supply such details. This message string must not contain only the information already available via the supplied error code; for example, it must not simply be a translation of the code into a string format. If no additional information is available beyond that provided by the error code, the message must be set to the empty string.\n\nThe getter steps are to return this's code.\n\nThe getter steps are to return this's message.\n\nThe content attribute on media elements gives the URL of the media resource (video, audio) to show. The attribute, if present, must contain a valid non-empty URL potentially surrounded by spaces.\n\nIf the attribute is specified on the media element, then the attribute must also be specified.\n\nThe content attribute on media elements is a CORS settings attribute.\n\nIf a media element is created with a attribute, the user agent must immediately invoke the media element's resource selection algorithm.\n\nIf a attribute of a media element is set or changed, the user agent must invoke the media element's media element load algorithm. (Removing the attribute does not do this, even if there are elements present.)\n\nThe IDL attribute on media elements must reflect the content attribute of the same name.\n\nThe IDL attribute must reflect the content attribute, limited to only known values.\n\nA is an object that can represent a media resource, separate from a URL. objects, objects, and objects are all media provider objects.\n\nEach media element can have an , which is a media provider object. When a media element is created, it has no assigned media provider object.\n\nThe IDL attribute must initially be set to the empty string. Its value is changed by the resource selection algorithm defined below.\n\nThe IDL attribute, on getting, must return the element's assigned media provider object, if any, or null otherwise. On setting, it must set the element's assigned media provider object to the new value, and then invoke the element's media element load algorithm.\n\nThere are three ways to specify a media resource: the IDL attribute, the content attribute, and elements. The IDL attribute takes priority, followed by the content attribute, followed by the elements.\n\nA media resource can be described in terms of its type, specifically a MIME type, in some cases with a parameter. (Whether the parameter is allowed or not depends on the MIME type.) [RFC6381]\n\nTypes are usually somewhat incomplete descriptions; for example \" \" doesn't say anything except what the container type is, and even a type like \" \" doesn't include information like the actual bitrate (only the maximum bitrate). Thus, given a type, a user agent can often only know whether it might be able to play media of that type (with varying levels of confidence), or whether it definitely cannot play media of that type.\n\nA type that the user agent knows it cannot render is one that describes a resource that the user agent definitely does not support, for example because it doesn't recognize the container type, or it doesn't support the listed codecs.\n\nThe MIME type \" \" with no parameters is never a type that the user agent knows it cannot render. User agents must treat that type as equivalent to the lack of any explicit Content-Type metadata when it is used to label a potential media resource.\n\nOnly the MIME type \" \" with no parameters is special-cased here; if any parameter appears with it, it will be treated just like any other MIME type. This is a deviation from the rule that unknown MIME type parameters should be ignored.\n\nThe method must return if is a type that the user agent knows it cannot render or is the type \" \"; it must return \" \" if the user agent is confident that the type represents a media resource that it can render if used in with this or element; and it must return \" \" otherwise. Implementers are encouraged to return \" \" unless the type can be confidently established as being supported or not. Generally, a user agent should never return \" \" for a type that allows the parameter if that parameter is not present.\n\nThe attribute of the element allows the user agent to avoid downloading resources that use formats it cannot render.\n\nAs media elements interact with the network, their current network activity is represented by the attribute. On getting, it must return the current network state of the element, which must be one of the following values:\n\nThe resource selection algorithm defined below describes exactly when the attribute changes value and what events fire to indicate changes in this state.\n\nAll media elements have a , which must begin in the true state, and a , which must begin in the false state. While the delaying-the-load-event flag is true, the element must delay the load event of its document.\n\nWhen the method on a media element is invoked, the user agent must run the media element load algorithm.\n\nA media element has an associated boolean , which is initially false.\n\nThe consists of the following steps.\n• None Set this element's is currently stalled to false.\n• None Abort any already-running instance of the resource selection algorithm for this element.\n• None Let be a list of all tasks from the media element's media element event task source in one of the task queues.\n• None For each task in that would resolve pending play promises or reject pending play promises, immediately resolve or reject those promises in the order the corresponding tasks were queued.\n• Remove each task in from its task queue. Basically, pending events and callbacks are discarded and promises in-flight to be resolved/rejected are resolved/rejected immediately when the media element starts loading a new resource.\n• None If the media element's is set to or , queue a media element task given the media element to fire an event named at the media element.\n• If the media element's is not set to , then:\n• None Queue a media element task given the media element to fire an event named at the media element.\n• None If a fetching process is in progress for the media element, the user agent should stop it.\n• None If the media element's assigned media provider object is a object, then detach it.\n• None If is not set to , then set it to that state.\n• If the attribute is false, then:\n• None Take pending play promises and reject pending play promises with the result and an \" \" .\n• None If is true, set it to false.\n• Set the official playback position to 0. If this changed the official playback position, then queue a media element task given the media element to fire an event named at the media element.\n• The user agent will not fire a event for this particular change of the duration.\n• None Set the attribute to the value of the attribute.\n• None Set the attribute to null and the can autoplay flag to true.\n• Playback of any previously playing media resource for this element stops.\n\nThe for a media element is as follows. This algorithm is always invoked as part of a task, but one of the first steps in the algorithm is to return and continue running the remaining steps in parallel. In addition, this algorithm interacts closely with the event loop mechanism; in particular, it has synchronous sections (which are triggered as part of the event loop algorithm). Steps in such sections are marked with ⌛.\n• None Set the element's attribute to the value.\n• None Set the media element's delaying-the-load-event flag to true (this delays the load event).\n• None Await a stable state, allowing the task that invoked this algorithm to continue. The synchronous section consists of all the remaining steps of this algorithm until the algorithm says the synchronous section has ended. (Steps in synchronous sections are marked with ⌛.)\n• ⌛ If the media element's blocked-on-parser flag is false, then populate the list of pending text tracks.\n• ⌛ If the media element has an assigned media provider object, then let be object. ⌛ Otherwise, if the media element has no assigned media provider object but has a attribute, then let be attribute. ⌛ Otherwise, if the media element does not have an assigned media provider object and does not have a attribute, but does have a element child, then let be children and let be the first such element child in tree order. ⌛ Otherwise, the media element has no assigned media provider object and has neither a attribute nor a element child:\n• None ⌛ Set the element's delaying-the-load-event flag to false. This stops delaying the load event.\n• None ⌛ Queue a media element task given the media element to fire an event named at the media element.\n• Run the appropriate steps from the following list:\n• None ⌛ Set the attribute to the empty string.\n• None End the synchronous section, continuing the remaining steps in parallel.\n• None Run the resource fetch algorithm with the assigned media provider object. If that algorithm returns without aborting this one, then the load failed.\n• None Failed with media provider: Reaching this step indicates that the media resource failed to load. Take pending play promises and queue a media element task given the media element to run the dedicated media source failure steps with the result.\n• None Wait for the task queued by the previous step to have executed.\n• None Return. The element won't attempt to load another resource until this algorithm is triggered again.\n• None ⌛ If the attribute's value is the empty string, then end the synchronous section, and jump down to the failed with attribute step below.\n• None ⌛ Let be the result of encoding-parsing a URL given the attribute's value, relative to the media element's node document when the attribute was last changed.\n• None ⌛ If is not failure, then set the attribute to the result of applying the URL serializer to .\n• None End the synchronous section, continuing the remaining steps in parallel.\n• None If is not failure, then run the resource fetch algorithm with . If that algorithm returns without aborting this one, then the load failed.\n• None Failed with attribute: Reaching this step indicates that the media resource failed to load or that is failure. Take pending play promises and queue a media element task given the media element to run the dedicated media source failure steps with the result.\n• None Wait for the task queued by the previous step to have executed.\n• None Return. The element won't attempt to load another resource until this algorithm is triggered again.\n• ⌛ Let be a position defined by two adjacent nodes in the media element's child list, treating the start of the list (before the first child in the list, if any) and end of the list (after the last child in the list, if any) as nodes in their own right. One node is the node before , and the other node is the node after . Initially, let be the position between the node and the next node, if there are any, or the end of the list, if it is the last node. As nodes are inserted, removed, and moved into the media element, must be updated as follows: If a new node is inserted or moved between the two nodes that define Let be the point between the node before and the new node. In other words, insertions at go after . If the node before is removed Let be the point between the node after and the node before the node after . In other words, doesn't move relative to the remaining nodes. If the node after is removed Let be the point between the node before and the node after the node before . Just as with the previous case, doesn't move relative to the remaining nodes.\n• None ⌛ Process candidate: If does not have a attribute, or if its attribute's value is the empty string, then end the synchronous section, and jump down to the failed with elements step below.\n• None ⌛ If has a attribute whose value does not match the environment, then end the synchronous section, and jump down to the failed with elements step below.\n• None ⌛ Let be the result of encoding-parsing a URL given 's attribute's value, relative to 's node document when the attribute was last changed.\n• None ⌛ If is failure, then end the synchronous section, and jump down to the failed with elements step below.\n• None ⌛ If has a attribute whose value, when parsed as a MIME type (including any codecs described by the parameter, for types that define that parameter), represents a type that the user agent knows it cannot render, then end the synchronous section, and jump down to the failed with elements step below.\n• None ⌛ Set the attribute to the result of applying the URL serializer to .\n• None End the synchronous section, continuing the remaining steps in parallel.\n• None Run the resource fetch algorithm with . If that algorithm returns without aborting this one, then the load failed.\n• None Failed with elements: Queue a media element task given the media element to fire an event named at .\n• None Await a stable state. The synchronous section consists of all the remaining steps of this algorithm until the algorithm says the synchronous section has ended. (Steps in synchronous sections are marked with ⌛.)\n• None ⌛ Find next candidate: Let be null.\n• None ⌛ Search loop: If the node after is the end of the list, then jump to the waiting step below.\n• None ⌛ If the node after is a element, let be that element.\n• None ⌛ Advance so that the node before is now the node that was after , and the node after is the node after the node that used to be after , if any.\n• None ⌛ If is null, jump back to the search loop step. Otherwise, jump back to the process candidate step.\n• None ⌛ Waiting: Set the element's attribute to the value.\n• None ⌛ Queue a media element task given the media element to set the element's delaying-the-load-event flag to false. This stops delaying the load event.\n• None End the synchronous section, continuing the remaining steps in parallel.\n• None Wait until the node after is a node other than the end of the list. (This step might wait forever.)\n• None Await a stable state. The synchronous section consists of all the remaining steps of this algorithm until the algorithm says the synchronous section has ended. (Steps in synchronous sections are marked with ⌛.)\n• None ⌛ Set the element's delaying-the-load-event flag back to true (this delays the load event again, in case it hasn't been fired yet).\n• None ⌛ Jump back to the find next candidate step above. The with a list of promises are the following steps:\n• None Set the attribute to the result of creating a with .\n• None Set the element's attribute to the value.\n• None Fire an event named at the media element.\n• None Set the element's delaying-the-load-event flag to false. This stops delaying the load event.\n\nTo given a response , a media resource , and \" \" or a (number, number or \" \") tuple :\n• None If is a network error, then return false.\n• None If is \" \", then return true.\n• None If 's status is 200, then return true.\n• None If 's status is not 206, then return false.\n• If the result of extracting content-range values from is failure, then return false. Note that the extracted values are not used, and in particular are not compared to . So this step serves as syntactic validation of the ` ` header, but if the ` ` values on the response mismatch the ` ` values on the request, that is not considered a failure.\n• None Let be \" \" if 's URL is null; otherwise 's URL's origin.\n• If any of the following are true:\n• None and are \" \"; or\n• None and are origins, and is same origin with , Otherwise, if is CORS-cross-origin, then return false. This ensures that opaque responses with range headers do not leak information by being patched together with other responses from different origins.\n\nThe for a media element and a given URL record or media provider object is as follows:\n• If the algorithm was invoked with media provider object, then set to local.\n• None Let be the result of obtaining a blob object using the URL record's blob URL entry and the media element's node document's relevant settings object.\n• None If is a media provider object, then set to local.\n• None If is remote, then let the be the resource given by the URL record passed to this algorithm; otherwise, let the be the resource given by the media provider object. Either way, the is now the element's media resource.\n• None Remove all media-resource-specific text tracks from the media element's list of pending text tracks, if any.\n• Run the appropriate steps from the following list:\n• Optionally, run the following substeps. This is the expected behavior if the user agent intends to not attempt to fetch the resource until the user requests it explicitly (e.g. as a way to implement the attribute's keyword).\n• None Queue a media element task given the media element to fire an event named at the element.\n• None Queue a media element task given the media element to set the element's delaying-the-load-event flag to false. This stops delaying the load event.\n• None Wait for the task to be run.\n• None Wait for an implementation-defined event (e.g., the user requesting that the media element begin playback).\n• None Set the element's delaying-the-load-event flag back to true (this delays the load event again, in case it hasn't been fired yet).\n• None Let be \" \" if the media element is an element, or \" \" otherwise.\n• None Let be the result of creating a potential-CORS request given 's URL record, , and the current state of media element's content attribute.\n• None Let , which is \" \" or a (number, number or \" \") tuple, be the byte range required to satisfy missing data in media data. This value is implementation-defined and may rely on codec, network conditions or other heuristics. The user-agent may determine to fetch the resource in full, in which case would be \" \", to fetch from a byte offset until the end, in which case would be (number, \" \"), or to fetch a range between two byte offsets, im which case would be a (number, number) tuple representing the two offsets.\n• If is not \" \", then:\n• None If [1] is \" \" then add a range header to given [0].\n• None Otherwise, add a range header to given [0] and [1].\n• Fetch , with processResponse set to the following steps given response :\n• None Let be the media element's node document's relevant global object.\n• None Let be to queue a media element task given the media element to run the first appropriate steps from the media data processing steps list below. (A new task is used for this so that the work described below occurs relative to the appropriate media element event task source rather than using the networking task source.)\n• None Let be the following step: If the fetching process has completed without errors, including decoding the media data, and if all of the data is available to the user agent without network access, then, the user agent must move on to the final step below. This might never happen, e.g. when streaming an infinite resource such as web radio, or if the resource is longer than the user agent's ability to cache data.\n• None If the result of verifying given the and is false, then abort these steps.\n• None Otherwise, incrementally read 's body given , , an empty algorithm, and .\n• None Update the media data with the contents of 's unsafe response obtained in this fashion. can be CORS-same-origin or CORS-cross-origin; this affects whether subtitles referenced in the media data are exposed in the API and, for elements, whether a gets tainted when the video is drawn on it. The is an implementation-defined length of time, which should be about three seconds. When a media element that is actively attempting to obtain media data has failed to receive any data for a duration equal to the media element stall timeout, the user agent must queue a media element task given the media element to:\n• None Fire an event named at the element.\n• None Set the element's is currently stalled to true. User agents may allow users to selectively block or slow media data downloads. When a media element's download has been blocked altogether, the user agent must act as if it was stalled (as opposed to acting as if the connection was closed). The rate of the download may also be throttled automatically by the user agent, e.g. to balance the download with other connections sharing the same bandwidth. User agents may decide to not download more content at any time, e.g. after buffering five minutes of a one hour media resource, while waiting for the user to decide whether to play the resource or not, while waiting for user input in an interactive resource, or when the user navigates away from the page. When a media element's download has been suspended, the user agent must queue a media element task given the media element to set the to and fire an event named at the element. If and when downloading of the resource resumes, the user agent must queue a media element task given the media element to set the to . Between the queuing of these tasks, the load is suspended (so events don't fire, as described above). The attribute provides a hint regarding how much buffering the author thinks is advisable, even in the absence of the attribute. When a user agent decides to completely suspend a download, e.g., if it is waiting until the user starts playback before downloading any further content, the user agent must queue a media element task given the media element to set the element's delaying-the-load-event flag to false. This stops delaying the load event. Although the above steps give an algorithm for issuing requests, the user agent may use other means besides those exact ones, especially in the face of error conditions. For example, the user agent may reconnect to the server or switch to a streaming protocol. The user agent must only consider the resource erroneous, and proceed into the error branches of the above steps, if the user agent has given up trying to fetch the resource. To determine the format of the media resource, the user agent must use the rules for sniffing audio and video specifically. While the load is not suspended (see below), every 350ms (±200ms) or for every byte received, whichever is least frequent, queue a media element task given the media element to:\n• None Fire an event named at the element.\n• None Set the element's is currently stalled to false. While the user agent might still need network access to obtain parts of the media resource, the user agent must remain on this step. For example, if the user agent has discarded the first half of a video, the user agent will remain at this step even once the playback has ended, because there is always the chance the user will seek back to the start. In fact, in this situation, once playback has ended, the user agent will end up firing a event, as described earlier. The resource described by the , if any, contains the media data. It is CORS-same-origin. If the is a raw data stream (e.g. from a object), then to determine the format of the media resource, the user agent must use the rules for sniffing audio and video specifically. Otherwise, if the data stream is pre-decoded, then the format is the format given by the relevant specification. Whenever new data for the becomes available, queue a media element task given the media element to run the first appropriate steps from the media data processing steps list below. When the is permanently exhausted (e.g. all the bytes of a have been processed), if there were no decoding errors, then the user agent must move on to the final step below. This might never happen, e.g. if the is a . The is as follows: If the media data cannot be fetched at all, due to network errors, causing the user agent to give up trying to fetch the resource If the media data can be fetched but is found by inspection to be in an unsupported format, or can otherwise not be rendered at all DNS errors, HTTP 4xx and 5xx errors (and equivalents in other protocols), and other fatal network errors that occur before the user agent has established whether the is usable, as well as the file using an unsupported container format, or using unsupported codecs for all the data, must cause the user agent to execute the following steps:\n• None The user agent should cancel the fetching process.\n• None Abort this subalgorithm, returning to the resource selection algorithm. If the media resource is found to have an audio track\n• None Create an object to represent the audio track.\n• None Update the media element's attribute's object with the new object.\n• If either the media resource or the URL of the indicate a particular set of audio tracks to enable, or if the user agent has information that would facilitate the selection of specific audio tracks to improve the user's experience, then: if this audio track is one of the ones to enable, then set to true, otherwise, set to false. This could be triggered by media fragment syntax, but it could also be triggered e.g. by the user agent selecting a 5.1 surround sound audio track over a stereo audio track.\n• None If is still unknown, then, if the media element does not yet have an enabled audio track, then set to true, otherwise, set to false.\n• None If is true, then enable this audio track, otherwise, do not enable this audio track.\n• None Fire an event named at this object, using , with the attribute initialized to the new object. If the media resource is found to have a video track\n• None Update the media element's attribute's object with the new object.\n• If either the media resource or the URL of the indicate a particular set of video tracks to enable, or if the user agent has information that would facilitate the selection of specific video tracks to improve the user's experience, then: if this video track is the first such video track, then set to true, otherwise, set to false. This could again be triggered by media fragment syntax.\n• None If is still unknown, then, if the media element does not yet have a selected video track, then set to true, otherwise, set to false.\n• None If is true, then select this track and unselect any previously selected video tracks, otherwise, do not select this video track. If other tracks are unselected, then a event will be fired.\n• None Fire an event named at this object, using , with the attribute initialized to the new object. Once enough of the media data has been fetched to determine the duration of the media resource, its dimensions, and other metadata This indicates that the resource is usable. The user agent must follow these substeps:\n• Establish the media timeline for the purposes of the current playback position and the earliest possible position, based on the media data.\n• Update the timeline offset to the date and time that corresponds to the zero time in the media timeline established in the previous step, if any. If no explicit time and date is given by the media resource, the timeline offset must be set to Not-a-Number (NaN).\n• None Set the current playback position and the official playback position to the earliest possible position.\n• Update the attribute with the time of the last frame of the resource, if known, on the media timeline established above. If it is not known (e.g. a stream that is in principle infinite), update the attribute to the value positive Infinity. The user agent will queue a media element task given the media element to fire an event named at the element at this point.\n• For elements, set the and attributes, and queue a media element task given the media element to fire an event named at the media element. Further events will be fired if the dimensions subsequently change.\n• A DOM event will be fired as part of setting the attribute to a new value.\n• None If the media element's default playback start position is greater than zero, then seek to that time, and let be true.\n• None Let the media element's default playback start position be zero.\n• None Let the be zero.\n• If either the media resource or the URL of the indicate a particular start time, then set the to that time and, if is still false, seek to that time. For example, with media formats that support media fragment syntax, the fragment can be used to indicate a start position.\n• None If there is no enabled audio track, then enable an audio track. This will cause a event to be fired.\n• None If there is no selected video track, then select a video track. This will cause a event to be fired. Once the attribute reaches , after the event has been fired, set the element's delaying-the-load-event flag to false. This stops delaying the load event. A user agent that is attempting to reduce network usage while still fetching the metadata for each media resource would also stop buffering at this point, following the rules described previously, which involve the attribute switching to the value and a event firing. The user agent is required to determine the duration of the media resource and go through this step before playing. Once the entire media resource has been fetched (but potentially before any of it has been decoded) Fire an event named at the media element. Set the to and fire an event named at the media element. If the user agent ever discards any media data and then needs to resume the network activity to obtain it again, then it must queue a media element task given the media element to set the to . If the user agent can keep the media resource loaded, then the algorithm will continue to its final step below, which aborts the algorithm. If the connection is interrupted after some media data has been received, causing the user agent to give up trying to fetch the resource Fatal network errors that occur after the user agent has established whether the is usable (i.e. once the media element's attribute is no longer ) must cause the user agent to execute the following steps:\n• None The user agent should cancel the fetching process.\n• None Set the attribute to the result of creating a with .\n• None Set the element's attribute to the value.\n• None Set the element's delaying-the-load-event flag to false. This stops delaying the load event.\n• None Fire an event named at the media element. If the media data is corrupted Fatal errors in decoding the media data that occur after the user agent has established whether the is usable (i.e. once the media element's attribute is no longer ) must cause the user agent to execute the following steps:\n• None The user agent should cancel the fetching process.\n• None Set the attribute to the result of creating a with .\n• None Set the element's attribute to the value.\n• None Set the element's delaying-the-load-event flag to false. This stops delaying the load event.\n• None Fire an event named at the media element. If the media data fetching process is aborted by the user The fetching process is aborted by the user, e.g. because the user pressed a \"stop\" button, the user agent must execute the following steps. These steps are not followed if the method itself is invoked while these steps are running, as the steps above handle that particular kind of abort.\n• None The user agent should cancel the fetching process.\n• None Set the attribute to the result of creating a with .\n• None Fire an event named at the media element.\n• If the media element's attribute has a value equal to , set the element's attribute to the value, set the element's show poster flag to true, and fire an event named at the element. Otherwise, set the element's attribute to the value.\n• None Set the element's delaying-the-load-event flag to false. This stops delaying the load event. If the media data can be fetched but has non-fatal errors or uses, in part, codecs that are unsupported, preventing the user agent from rendering the content completely correctly but not preventing playback altogether The server returning data that is partially usable but cannot be optimally rendered must cause the user agent to render just the bits it can handle, and ignore the rest. If the media resource is found to declare a media-resource-specific text track that the user agent supports If the media data is CORS-same-origin, run the steps to expose a media-resource-specific text track with the relevant data. Cross-origin videos do not expose their subtitles, since that would allow attacks such as hostile sites reading subtitles from confidential videos on a user's intranet.\n• None Final step: If the user agent ever reaches this step (which can only happen if the entire resource gets loaded and kept available): abort the overall resource selection algorithm.\n\nWhen a media element is to , the user agent must remove from the media element's list of text tracks all the media-resource-specific text tracks, then empty the media element's attribute's object, then empty the media element's attribute's object. No events (in particular, no events) are fired as part of this; the and events, fired by the algorithms that invoke this one, can be used instead.\n\nThe attribute is an enumerated attribute with the following keywords and states:\n\nThe attribute's missing value default and invalid value default are both implementation-defined, though the Metadata state is suggested as a compromise between reducing server load and providing an optimal user experience.\n\nThe attribute can be changed even once the media resource is being buffered or played; the descriptions in the table above are to be interpreted with that in mind.\n\nAuthors might switch the attribute from \" \" or \" \" to \" \" dynamically once the user begins playback. For example, on a page with many videos this might be used to indicate that the many videos are not to be downloaded unless requested, but that once one is requested it is to be downloaded aggressively.\n\nThe attribute is intended to provide a hint to the user agent about what the author thinks will lead to the best user experience. The attribute may be ignored altogether, for example based on explicit user preferences or based on the available connectivity.\n\nThe IDL attribute must reflect the content attribute of the same name, limited to only known values.\n\nThe attribute can override the attribute (since if the media plays, it naturally has to buffer first, regardless of the hint given by the attribute). Including both is not an error, however.\n\nThe attribute must return a new static normalized object that represents the ranges of the media resource, if any, that the user agent has buffered, at the time the attribute is evaluated. Users agents must accurately determine the ranges available, even for media streams where this can only be determined by tedious inspection.\n\nTypically this will be a single range anchored at the zero point, but if, e.g. the user agent uses HTTP range requests in response to seeking, then there could be multiple ranges.\n\nThus, a time position included within a range of the objects return by the attribute at one time can end up being not included in the range(s) of objects returned by the same attribute at later times.\n\nReturning a new object each time is a bad pattern for attribute getters and is only enshrined here as it would be costly to change it. It is not to be copied to new APIs.\n\nA media resource has a that maps times (in seconds) to positions in the media resource. The origin of a timeline is its earliest defined position. The duration of a timeline is its last defined position.\n\n: if the media resource somehow specifies an explicit timeline whose origin is not negative (i.e. gives each frame a specific time offset and gives the first frame a zero or positive offset), then the media timeline should be that timeline. (Whether the media resource can specify a timeline or not depends on the media resource's format.) If the media resource specifies an explicit start time and date, then that time and date should be considered the zero point in the media timeline; the timeline offset will be the time and date, exposed using the method.\n\nIf the media resource has a discontinuous timeline, the user agent must extend the timeline used at the start of the resource across the entire resource, so that the media timeline of the media resource increases linearly starting from the earliest possible position (as defined below), even if the underlying media data has out-of-order or even overlapping time codes.\n\nFor example, if two clips have been concatenated into one video file, but the video format exposes the original times for the two clips, the video data might expose a timeline that goes, say, 00:15..00:29 and then 00:05..00:38. However, the user agent would not expose those times; it would instead expose the times as 00:15..00:29 and 00:29..01:02, as a single video.\n\nIn the rare case of a media resource that does not have an explicit timeline, the zero time on the media timeline should correspond to the first frame of the media resource. In the even rarer case of a media resource with no explicit timings of any kind, not even frame durations, the user agent must itself determine the time for each frame in an implementation-defined manner.\n\nAn example of a file format with no explicit timeline but with explicit frame durations is the Animated GIF format. An example of a file format with no explicit timings at all is the JPEG-push format ( with JPEG frames, often used as the format for MJPEG streams).\n\nIf, in the case of a resource with no timing information, the user agent will nonetheless be able to seek to an earlier point than the first frame originally provided by the server, then the zero time should correspond to the earliest seekable time of the media resource; otherwise, it should correspond to the first frame received from the server (the point in the media resource at which the user agent began receiving the stream).\n\nAt the time of writing, there is no known format that lacks explicit frame time offsets yet still supports seeking to a frame before the first frame sent by the server.\n\nIn any case, the user agent must ensure that the earliest possible position (as defined below) using the established media timeline, is greater than or equal to zero.\n\nThe media timeline also has an associated clock. Which clock is used is user-agent defined, and may be media resource-dependent, but it should approximate the user's wall clock.\n\nMedia elements have a , which must initially (i.e. in the absence of media data) be zero seconds. The current playback position is a time on the media timeline.\n\nMedia elements also have an , which must initially be set to zero seconds. The official playback position is an approximation of the current playback position that is kept stable while scripts are running.\n\nMedia elements also have a , which must initially be set to zero seconds. This time is used to allow the element to be seeked even before the media is loaded.\n\nEach media element has a . When a media element is created, this flag must be set to true. This flag is used to control when the user agent is to show a poster frame for a element instead of showing the video contents.\n\nThe attribute must, on getting, return the media element's default playback start position, unless that is zero, in which case it must return the element's official playback position. The returned value must be expressed in seconds. On setting, if the media element's is , then it must set the media element's default playback start position to the new value; otherwise, it must set the official playback position to the new value and then seek to the new value. The new value must be interpreted as being in seconds.\n\nIf the media resource is a streaming resource, then the user agent might be unable to obtain certain parts of the resource after it has expired from its buffer. Similarly, some media resources might have a media timeline that doesn't start at zero. The is the earliest position in the stream or resource that the user agent can ever obtain again. It is also a time on the media timeline.\n\nThe earliest possible position is not explicitly exposed in the API; it corresponds to the start time of the first range in the attribute's object, if any, or the current playback position otherwise.\n\nWhen the earliest possible position changes, then: if the current playback position is before the earliest possible position, the user agent must seek to the earliest possible position; otherwise, if the user agent has not fired a event at the element in the past 15 to 250ms and is not still running event handlers for such an event, then the user agent must queue a media element task given the media element to fire an event named at the element.\n\nBecause of the above requirement and the requirement in the resource fetch algorithm that kicks in when the metadata of the clip becomes known, the current playback position can never be less than the earliest possible position.\n\nIf at any time the user agent learns that an audio or video track has ended and all media data relating to that track corresponds to parts of the media timeline that are before the earliest possible position, the user agent may queue a media element task given the media element to run these steps:\n• None Remove the track from the attribute's object or the attribute's object as appropriate.\n• None Fire an event named at the media element's aforementioned or object, using , with the attribute initialized to the or object representing the track.\n\nThe attribute must return the time of the end of the media resource, in seconds, on the media timeline. If no media data is available, then the attributes must return the Not-a-Number (NaN) value. If the media resource is not known to be bounded (e.g. streaming radio, or a live event with no announced end time), then the attribute must return the positive Infinity value.\n\nThe user agent must determine the duration of the media resource before playing any part of the media data and before setting to a value greater than or equal to , even if doing so requires fetching multiple parts of the resource.\n\nWhen the length of the media resource changes to a known value (e.g. from being unknown to known, or from a previously established length to a new length) the user agent must queue a media element task given the media element to fire an event named at the media element. (The event is not fired when the duration is reset as part of loading a new media resource.) If the duration is changed such that the current playback position ends up being greater than the time of the end of the media resource, then the user agent must also seek to the time of the end of the media resource.\n\nIf an \"infinite\" stream ends for some reason, then the duration would change from positive Infinity to the time of the last frame or sample in the stream, and the event would be fired. Similarly, if the user agent initially estimated the media resource's duration instead of determining it precisely, and later revises the estimate based on new information, then the duration would change and the event would be fired.\n\nSome video files also have an explicit date and time corresponding to the zero time in the media timeline, known as the . Initially, the timeline offset must be set to Not-a-Number (NaN).\n\nThe method must return representing the current timeline offset.\n\nThe attribute is a boolean attribute that, if specified, indicates that the media element is to seek back to the start of the media resource upon reaching the end.\n\nThe IDL attribute must reflect the content attribute of the same name.\n\nMedia elements have a ready state, which describes to what degree they are ready to be rendered at the current playback position. The possible values are as follows; the ready state of a media element at any particular time is the greatest value describing the state of the element:\n\nIn practice, the difference between and is negligible. Really the only time the difference is relevant is when painting a element onto a , where it distinguishes the case where something will be drawn ( or greater) from the case where nothing is drawn ( or less). Similarly, the difference between (only the current frame) and (at least this frame and the next) can be negligible (in the extreme, only one frame). The only time that distinction really matters is when a page provides an interface for \"frame-by-frame\" navigation.\n\nWhen the ready state of a media element whose is not changes, the user agent must follow the steps given below:\n• Apply the first applicable set of substeps from the following list: If the previous ready state was , and the new ready state is Queue a media element task given the media element to fire an event named at the element. Before this task is run, as part of the event loop mechanism, the rendering will have been updated to resize the element if appropriate. If the previous ready state was and the new ready state is or greater If this is the first time this occurs for this media element since the algorithm was last invoked, the user agent must queue a media element task given the media element to fire an event named at the element. If the new ready state is or , then the relevant steps below must then be run also. If the previous ready state was or more, and the new ready state is or less If the media element was potentially playing before its attribute changed to a value lower than , and the element has not ended playback, and playback has not stopped due to errors, paused for user interaction, or paused for in-band content, the user agent must queue a media element task given the media element to fire an event named at the element, and queue a media element task given the media element to fire an event named at the element. If the previous ready state was or less, and the new ready state is The user agent must queue a media element task given the media element to fire an event named at the element. If the element's attribute is false, the user agent must notify about playing for the element. If the new ready state is If the previous ready state was or less, the user agent must queue a media element task given the media element to fire an event named at the element, and, if the element's attribute is false, notify about playing for the element. The user agent must queue a media element task given the media element to fire an event named at the element. If the element is not eligible for autoplay, then the user agent must abort these substeps. The user agent may run the following substeps:\n• If the element's show poster flag is true, set it to false and run the time marches on steps.\n• Queue a media element task given the element to fire an event named at the element.\n• Notify about playing for the element. Alternatively, if the element is a element, the user agent may start observing whether the element intersects the viewport. When the element starts intersecting the viewport, if the element is still eligible for autoplay, run the substeps above. Optionally, when the element stops intersecting the viewport, if the can autoplay flag is still true and the attribute is still specified, run the following substeps:\n• Run the internal pause steps and set the can autoplay flag to true.\n• Queue a media element task given the element to fire an event named at the element. The substeps for playing and pausing can run multiple times as the element starts or stops intersecting the viewport, as long as the can autoplay flag is true. User agents do not need to support autoplay, and it is suggested that user agents honor user preferences on the matter. Authors are urged to use the attribute rather than using script to force the video to play, so as to allow the user to override the behavior if so desired.\n\nIt is possible for the ready state of a media element to jump between these states discontinuously. For example, the state of a media element can jump straight from to without passing through the and states.\n\nThe IDL attribute must, on getting, return the value described above that describes the current ready state of the media element.\n\nThe attribute is a boolean attribute. When present, the user agent (as described in the algorithm described herein) will automatically begin playback of the media resource as soon as it can do so without stopping.\n\nAuthors are urged to use the attribute rather than using script to trigger automatic playback, as this allows the user to override the automatic playback when it is not desired, e.g. when using a screen reader. Authors are also encouraged to consider not using the automatic playback behavior at all, and instead to let the user agent wait for the user to start playback explicitly.\n\nThe IDL attribute must reflect the content attribute of the same name.\n\nThe attribute represents whether the media element is paused or not. The attribute must initially be true.\n\nA media element is a if its attribute is in the state, the state, or the state, or if the element has paused for user interaction or paused for in-band content.\n\nA media element is said to be when its attribute is false, the element has not ended playback, playback has not stopped due to errors, and the element is not a blocked media element.\n\nA DOM event can be fired as a result of an element that is potentially playing stopping playback due to its attribute changing to a value lower than .\n\nA media element is said to be when all of the following are true:\n• None its can autoplay flag is true;\n• None it has an attribute specified;\n• None its node document's active sandboxing flag set does not have the sandboxed automatic features browsing context flag set; and\n• None its node document is allowed to use the \" \" feature.\n\nA media element is said to be if the user agent and the system allow media playback in the current context.\n\nFor example, a user agent could allow playback only when the media element's object has transient activation, but an exception could be made to allow playback while muted.\n\nA media element is said to have when:\n• None The element's attribute is or greater, and\n• \n• None The current playback position is the end of the media resource, and\n• None The direction of playback is forwards, and\n• None The media element does not have a attribute specified.\n• None The current playback position is the earliest possible position, and\n• None The direction of playback is backwards.\n\nThe attribute must return true if, the last time the event loop reached step 1, the media element had ended playback and the direction of playback was forwards, and false otherwise.\n\nA media element is said to have when the element's attribute is or greater, and the user agent encounters a non-fatal error during the processing of the media data, and due to that error, is not able to play the content at the current playback position.\n\nA media element is said to have when its attribute is false, the attribute is either or and the user agent has reached a point in the media resource where the user has to make a selection for the resource to continue.\n\nIt is possible for a media element to have both ended playback and paused for user interaction at the same time.\n\nWhen a media element that is potentially playing stops playing because it has paused for user interaction, the user agent must queue a media element task given the media element to fire an event named at the element.\n\nA media element is said to have when its attribute is false, the attribute is either or and the user agent has suspended playback of the media resource in order to play content that is temporally anchored to the media resource and has a nonzero length, or to play content that is temporally anchored to a segment of the media resource but has a length longer than that segment.\n\nOne example of when a media element would be paused for in-band content is when the user agent is playing audio descriptions from an external WebVTT file, and the synthesized speech generated for a cue is longer than the time between the text track cue start time and the text track cue end time.\n\nWhen the current playback position reaches the end of the media resource when the direction of playback is forwards, then the user agent must follow these steps:\n• None If the media element has a attribute specified, then seek to the earliest possible position of the media resource and return.\n• None As defined above, the IDL attribute starts returning true once the event loop returns to step 1.\n• Queue a media element task given the media element and the following steps:\n• None Fire an event named at the media element.\n• If the media element has ended playback, the direction of playback is forwards, and paused is false, then:\n• None Fire an event named at the media element.\n• None Take pending play promises and reject pending play promises with the result and an \" \" .\n• None Fire an event named at the media element.\n\nWhen the current playback position reaches the earliest possible position of the media resource when the direction of playback is backwards, then the user agent must only queue a media element task given the media element to fire an event named at the element.\n\nThe word \"reaches\" here does not imply that the current playback position needs to have changed during normal playback; it could be via seeking, for instance.\n\nThe attribute gives the desired speed at which the media resource is to play, as a multiple of its intrinsic speed. The attribute is mutable: on getting it must return the last value it was set to, or 1.0 if it hasn't yet been set; on setting the attribute must be set to the new value.\n\nThe is used by the user agent when it exposes a user interface to the user.\n\nThe attribute gives the effective playback rate, which is the speed at which the media resource plays, as a multiple of its intrinsic speed. If it is not equal to the , then the implication is that the user is using a feature such as fast forward or slow motion playback. The attribute is mutable: on getting it must return the last value it was set to, or 1.0 if it hasn't yet been set; on setting, the user agent must follow these steps:\n• None If the given value is not supported by the user agent, then throw a \" \" .\n• None Set to the new value, and if the element is potentially playing, change the playback speed.\n\nThe getter steps are to return true if a pitch-preserving algorithm is in effect during playback. The setter steps are to correspondingly switch the pitch-preserving algorithm on or off, without any perceivable gaps or muting of playback. By default, such a pitch-preserving algorithm must be in effect (i.e., the getter will initially return true).\n\nThe attribute must return a new static normalized object that represents the ranges of points on the media timeline of the media resource reached through the usual monotonic increase of the current playback position during normal playback, if any, at the time the attribute is evaluated.\n\nReturning a new object each time is a bad pattern for attribute getters and is only enshrined here as it would be costly to change it. It is not to be copied to new APIs.\n\nEach media element has a , which must initially be empty.\n\nTo for a media element, the user agent must run the following steps:\n• None Let be an empty list of promises.\n• None Copy the media element's list of pending play promises to .\n\nTo for a media element with a list of promises , the user agent must resolve each promise in with undefined.\n\nTo for a media element with a list of promises and an exception name , the user agent must reject each promise in with .\n\nTo for a media element, the user agent must run the following steps:\n• None Take pending play promises and let be the result.\n• Queue a media element task given the element and the following steps:\n• None Fire an event named at the element.\n\nWhen the method on a media element is invoked, the user agent must run the following steps.\n• None If the media element is not allowed to play, then return a promise rejected with a \" \" .\n• If the media element's attribute is not null and its code is , then return a promise rejected with a \" \" . This means that the dedicated media source failure steps have run. Playback is not possible until the media element load algorithm clears the attribute.\n• None Let be a new promise and append to the list of pending play promises.\n• None Run the internal play steps for the media element.\n\nThe for a media element are as follows:\n• None If the media element's attribute has the value , invoke the media element's resource selection algorithm.\n• If the playback has ended and the direction of playback is forwards, seek to the earliest possible position of the media resource. This will cause the user agent to queue a media element task given the media element to fire an event named at the media element.\n• If the media element's attribute is true, then:\n• None Change the value of to false.\n• None If the show poster flag is true, set the element's show poster flag to false and run the time marches on steps.\n• None Queue a media element task given the media element to fire an event named at the element.\n• If the media element's attribute has the value , , or , queue a media element task given the media element to fire an event named at the element. Otherwise, the media element's attribute has the value or : notify about playing for the element.\n• Otherwise, if the media element's attribute has the value or , take pending play promises and queue a media element task given the media element to resolve pending play promises with the result. The media element is already playing. However, it's possible that will be rejected before the queued task is run.\n• None Set the media element's can autoplay flag to false.\n\nWhen the method is invoked, and when the user agent is required to pause the media element, the user agent must run the following steps:\n• None If the media element's attribute has the value , invoke the media element's resource selection algorithm.\n• None Run the internal pause steps for the media element.\n\nThe for a media element are as follows:\n• None Set the media element's can autoplay flag to false.\n• None If the media element's attribute is false, run the following steps:\n• None Change the value of to true.\n• None Take pending play promises and let be the result.\n• Queue a media element task given the media element and the following steps:\n• None Fire an event named at the element.\n• None Fire an event named at the element.\n• None Reject pending play promises with and an \" \" .\n• None Set the official playback position to the current playback position.\n\nIf the element's is positive or zero, then the is forwards. Otherwise, it is backwards.\n\nWhen a media element is potentially playing and its is a fully active , its current playback position must increase monotonically at the element's units of media time per unit time of the media timeline's clock. (This specification always refers to this as an increase, but that increase could actually be a decrease if the element's is negative.)\n\nThe element's can be 0.0, in which case the current playback position doesn't move, despite playback not being paused ( doesn't become true, and the event doesn't fire).\n\nThis specification doesn't define how the user agent achieves the appropriate playback rate — depending on the protocol and media available, it is plausible that the user agent could negotiate with the server to have the server provide the media data at the appropriate rate, so that (except for the period between when the rate is changed and when the server updates the stream's playback rate) the client doesn't actually have to drop or interpolate any frames.\n\nAny time the user agent provides a stable state, the official playback position must be set to the current playback position.\n\nWhile the direction of playback is backwards, any corresponding audio must be muted. While the element's is so low or so high that the user agent cannot play audio usefully, the corresponding audio must also be muted. If the element's is not 1.0 and is true, the user agent must apply pitch adjustment to preserve the original pitch of the audio. Otherwise, the user agent must speed up or slow down the audio without any pitch adjustment.\n\nWhen a media element is potentially playing, its audio data played must be synchronized with the current playback position, at the element's effective media volume. The user agent must play the audio from audio tracks that were enabled when the event loop last reached step 1.\n\nWhen a media element is not potentially playing, audio must not play for the element.\n\nMedia elements that are potentially playing while not in a document must not play any video, but should play any audio component. Media elements must not stop playing just because all references to them have been removed; only once a media element is in a state where no further audio could ever be played by that element may the element be garbage collected.\n\nIt is possible for an element to which no explicit references exist to play audio, even if such an element is not still actively playing: for instance, it could be unpaused but stalled waiting for content to buffer, or it could be still buffering, but with a event listener that begins playback. Even a media element whose media resource has no audio tracks could eventually play audio again if it had an event listener that changes the media resource.\n\nEach media element has a , which must be initially empty. Whenever a text track cue is added to the list of cues of a text track that is in the list of text tracks for a media element, that cue must be added to the media element's list of newly introduced cues. Whenever a text track is added to the list of text tracks for a media element, all of the cues in that text track's list of cues must be added to the media element's list of newly introduced cues. When a media element's list of newly introduced cues has new cues added while the media element's show poster flag is not set, then the user agent must run the time marches on steps.\n\nWhen a text track cue is removed from the list of cues of a text track that is in the list of text tracks for a media element, and whenever a text track is removed from the list of text tracks of a media element, if the media element's show poster flag is not set, then the user agent must run the time marches on steps.\n\nWhen the current playback position of a media element changes (e.g. due to playback or seeking), the user agent must run the time marches on steps. To support use cases that depend on the timing accuracy of cue event firing, such as synchronizing captions with shot changes in a video, user agents should fire cue events as close as possible to their position on the media timeline, and ideally within 20 milliseconds. If the current playback position changes while the steps are running, then the user agent must wait for the steps to complete, and then must immediately rerun the steps. These steps are thus run as often as possible or needed.\n\nIf one iteration takes a long time, this can cause short duration cues to be skipped over as the user agent rushes ahead to \"catch up\", so these cues will not appear in the list.\n\nThe steps are as follows:\n• None Let be a list of cues, initialized to contain all the cues of all the hidden or showing text tracks of the media element (not the disabled ones) whose start times are less than or equal to the current playback position and whose end times are greater than the current playback position.\n• None Let be a list of cues, initialized to contain all the cues of hidden and showing text tracks of the media element that are not present in .\n• None Let be the current playback position at the time this algorithm was last run for this media element, if this is not the first time it has run.\n• None If the current playback position has, since the last time this algorithm was run, only changed through its usual monotonic increase during normal playback, then let be the list of cues in whose start times are greater than or equal to and whose end times are less than or equal to the current playback position. Otherwise, let be an empty list.\n• None Remove all the cues in that are also in the media element's list of newly introduced cues, and then empty the element's list of newly introduced cues.\n• None If the time was reached through the usual monotonic increase of the current playback position during normal playback, and if the user agent has not fired a event at the element in the past 15 to 250ms and is not still running event handlers for such an event, then the user agent must queue a media element task given the media element to fire an event named at the element. (In the other cases, such as explicit seeks, relevant events get fired as part of the overall process of changing the current playback position.) The event thus is not to be fired faster than about 66Hz or slower than 4Hz (assuming the event handlers don't take longer than 250ms to run). User agents are encouraged to vary the frequency of the event based on the system load and the average cost of processing the event each time, so that the UI updates are not any more frequent than the user agent can comfortably handle while decoding the video.\n• None If all of the cues in have their text track cue active flag set, none of the cues in have their text track cue active flag set, and is empty, then return.\n• If the time was reached through the usual monotonic increase of the current playback position during normal playback, and there are cues in that have their text track cue pause-on-exit flag set and that either have their text track cue active flag set or are also in , then immediately pause the media element. In the other cases, such as explicit seeks, playback is not paused by going past the end time of a cue, even if that cue has its text track cue pause-on-exit flag set.\n• Let be a list of tasks, initially empty. Each task in this list will be associated with a text track, a text track cue, and a time, which are used to sort the list before the tasks are queued. Let be a list of text tracks, initially empty. When the steps below say to named for a text track cue with a time , the user agent must run these steps:\n• None Let be the text track with which the text track cue is associated.\n• None Create a task to fire an event named at .\n• None Add the newly created task to , associated with the time , the text track , and the text track cue .\n• None For each text track cue in , prepare an event named for the object with the text track cue start time.\n• None For each text track cue in that either has its text track cue active flag set or is in , prepare an event named for the object with the later of the text track cue end time and the text track cue start time.\n• None For each text track cue in that does not have its text track cue active flag set, prepare an event named for the object with the text track cue start time.\n• Sort the tasks in in ascending time order (tasks with earlier times first). Further sort tasks in that have the same time by the relative text track cue order of the text track cues associated with these tasks. Finally, sort tasks in that have the same time and same text track cue order by placing tasks that fire events before those that fire events.\n• None Queue a media element task given the media element for each task in , in list order.\n• None Sort in the same order as the text tracks appear in the media element's list of text tracks, and remove duplicates.\n• None For each text track in , in the list order, queue a media element task given the media element to fire an event named at the object, and, if the text track has a corresponding element, to then fire an event named at the element as well.\n• None Set the text track cue active flag of all the cues in the , and unset the text track cue active flag of all the cues in the .\n• None Run the rules for updating the text track rendering of each of the text tracks in that are showing, providing the text track's text track language as the fallback language if it is not the empty string. For example, for text tracks based on WebVTT, the rules for updating the display of WebVTT text tracks. [WEBVTT]\n\nFor the purposes of the algorithm above, a text track cue is considered to be part of a text track only if it is listed in the text track list of cues, not merely if it is associated with the text track.\n\nIf the media element's node document stops being a fully active document, then the playback will stop until the document is active again.\n\nWhen a media element is removed from a , the user agent must run the following steps:\n• None Await a stable state, allowing the task that removed the media element from the to continue. The synchronous section consists of all the remaining steps of this algorithm. (Steps in the synchronous section are marked with ⌛.)\n• None ⌛ If the media element is in a document, return.\n• None ⌛ Run the internal pause steps for the media element.\n\nThe attribute must initially have the value false.\n\nThe method must seek to the time given by , with the approximate-for-speed flag set.\n\nWhen the user agent is required to to a particular in the media resource, optionally with the approximate-for-speed flag set, it means that the user agent must run the following steps. This algorithm interacts closely with the event loop mechanism; in particular, it has a synchronous section (which is triggered as part of the event loop algorithm). Steps in that section are marked with ⌛.\n• None If the media element's is , return.\n• None If the element's IDL attribute is true, then another instance of this algorithm is already running. Abort that other instance of the algorithm without waiting for the step that it is running to complete.\n• None If the seek was in response to a DOM method call or setting of an IDL attribute, then continue the script. The remainder of these steps must be run in parallel. With the exception of the steps marked with ⌛, they could be aborted at any time by another instance of this algorithm being invoked.\n• None If the is later than the end of the media resource, then let it be the end of the media resource instead.\n• None If the is less than the earliest possible position, let it be that position instead.\n• None If the (possibly now changed) is not in one of the ranges given in the attribute, then let it be the position in one of the ranges given in the attribute that is the nearest to the . If two positions both satisfy that constraint (i.e. the is exactly in the middle between two ranges in the attribute) then use the position that is closest to the current playback position. If there are no ranges given in the attribute then set the IDL attribute to false and return.\n• If the approximate-for-speed flag is set, adjust the to a value that will allow for playback to resume promptly. If before this step is before current playback position, then the adjusted must also be before the current playback position. Similarly, if the before this step is after current playback position, then the adjusted must also be after the current playback position. For example, the user agent could snap to a nearby key frame, so that it doesn't have to spend time decoding then discarding intermediate frames before resuming playback.\n• None Queue a media element task given the media element to fire an event named at the element.\n• Set the current playback position to the . If the media element was potentially playing immediately before it started seeking, but seeking caused its attribute to change to a value lower than , then a event will be fired at the element. This step sets the current playback position, and thus can immediately trigger other conditions, such as the rules regarding when playback \"reaches the end of the media resource\" (part of the logic that handles looping), even before the user agent is actually able to render the media data for that position (as determined in the next step). The attribute returns the official playback position, not the current playback position, and therefore gets updated before script execution, separate from this algorithm.\n• None Wait until the user agent has established whether or not the media data for the is available, and, if it is, until it has decoded enough data to play back that position.\n• None Await a stable state. The synchronous section consists of all the remaining steps of this algorithm. (Steps in the synchronous section are marked with ⌛.)\n• None ⌛ Queue a media element task given the media element to fire an event named at the element.\n\nThe attribute must return a new static normalized object that represents the ranges of the media resource, if any, that the user agent is able to seek to, at the time the attribute is evaluated.\n\nIf the user agent can seek to anywhere in the media resource, e.g. because it is a simple movie file and the user agent and the server support HTTP Range requests, then the attribute would return an object with one range, whose start is the time of the first frame (the earliest possible position, typically zero), and whose end is the same as the time of the first frame plus the attribute's value (which would equal the time of the last frame, and might be positive Infinity).\n\nThe range might be continuously changing, e.g. if the user agent is buffering a sliding window on an infinite stream. This is the behavior seen with DVRs viewing live TV, for instance.\n\nReturning a new object each time is a bad pattern for attribute getters and is only enshrined here as it would be costly to change it. It is not to be copied to new APIs.\n\nUser agents should adopt a very liberal and optimistic view of what is seekable. User agents should also buffer recent content where possible to enable seeking to be fast.\n\nFor instance, consider a large video file served on an HTTP server without support for HTTP Range requests. A browser could implement this by only buffering the current frame and data obtained for subsequent frames, never allow seeking, except for seeking to the very start by restarting the playback. However, this would be a poor implementation. A high quality implementation would buffer the last few minutes of content (or more, if sufficient storage space is available), allowing the user to jump back and rewatch something surprising without any latency, and would in addition allow arbitrary seeking by reloading the file from the start if necessary, which would be slower but still more convenient than having to literally restart the video and watch it all the way through just to get to an earlier unbuffered spot.\n\nMedia resources might be internally scripted or interactive. Thus, a media element could play in a non-linear fashion. If this happens, the user agent must act as if the algorithm for seeking was used whenever the current playback position changes in a discontinuous fashion (so that the relevant events fire).\n\nA media resource can have multiple embedded audio and video tracks. For example, in addition to the primary video and audio tracks, a media resource could have foreign-language dubbed dialogues, director's commentaries, audio descriptions, alternative angles, or sign-language overlays.\n\nThe attribute of a media element must return a live object representing the audio tracks available in the media element's media resource.\n\nThe attribute of a media element must return a live object representing the video tracks available in the media element's media resource.\n\nThere are only ever one object and one object per media element, even if another media resource is loaded into the element: the objects are reused. (The and objects are not, though.)\n\nThe and interfaces are used by attributes defined in the previous section.\n\nAn object represents a dynamic list of zero or more audio tracks, of which zero or more can be enabled at a time. Each audio track is represented by an object.\n\nA object represents a dynamic list of zero or more video tracks, of which zero or one can be selected at a time. Each video track is represented by a object.\n\nTracks in and objects must be consistently ordered. If the media resource is in a format that defines an order, then that order must be used; otherwise, the order must be the relative order in which the tracks are declared in the media resource. The order used is called the natural order of the list.\n\nEach track in one of these objects thus has an index; the first has the index 0, and each subsequent track is numbered one higher than the previous one. If a media resource dynamically adds or removes audio or video tracks, then the indices of the tracks will change dynamically. If the media resource changes entirely, then all the previous tracks will be removed and replaced with new tracks.\n\nThe and attribute getters must return the number of tracks represented by their objects at the time of getting.\n\nThe supported property indices of and objects at any instant are the numbers from zero to the number of tracks represented by the respective object minus one, if any tracks are represented. If an or object represents no tracks, it has no supported property indices.\n\nTo determine the value of an indexed property for a given index in an or object , the user agent must return the or object that represents the th track in .\n\nThe and methods must return the first or object (respectively) in the or object (respectively) whose identifier is equal to the value of the argument (in the natural order of the list, as defined above). When no tracks match the given argument, the methods must return null.\n\nThe and objects represent specific tracks of a media resource. Each track can have an identifier, category, label, and language. These aspects of a track are permanent for the lifetime of the track; even if a track is removed from a media resource's or objects, those aspects do not change.\n\nIn addition, objects can each be enabled or disabled; this is the audio track's enabled state. When an is created, its enabled state must be set to false (disabled). The resource fetch algorithm can override this.\n\nSimilarly, a single object per object can be selected, this is the video track's selection state. When a is created, its selection state must be set to false (not selected). The resource fetch algorithm can override this.\n\nThe and attributes must return the identifier of the track, if it has one, or the empty string otherwise. If the media resource is in a format that supports media fragment syntax, the identifier returned for a particular track must be the same identifier that would enable the track if used as the name of a track in the track dimension of such a fragment. [INBAND]\n\nFor example, in Ogg files, this would be the Name header field of the track. [OGGSKELETONHEADERS]\n\nThe and attributes must return the category of the track, if it has one, or the empty string otherwise.\n\nThe category of a track is the string given in the first column of the table below that is the most appropriate for the track based on the definitions in the table's second and third columns, as determined by the metadata included in the track in the media resource. The cell in the third column of a row says what the category given in the cell in the first column of that row applies to; a category is only appropriate for an audio track if it applies to audio tracks, and a category is only appropriate for video tracks if it applies to video tracks. Categories must only be returned for objects if they are appropriate for audio, and must only be returned for objects if they are appropriate for video.\n\nFor Ogg files, the Role header field of the track gives the relevant metadata. For DASH media resources, the element conveys the information. For WebM, only the element currently maps to a value. has further details. [OGGSKELETONHEADERS] [DASH] [WEBMCG] [INBAND]\n\nThe and attributes must return the label of the track, if it has one, or the empty string otherwise. [INBAND]\n\nThe and attributes must return the BCP 47 language tag of the language of the track, if it has one, or the empty string otherwise. If the user agent is not able to express that language as a BCP 47 language tag (for example because the language information in the media resource's format is a free-form string without a defined interpretation), then the method must return the empty string, as if the track had no language. [INBAND]\n\nThe attribute, on getting, must return true if the track is currently enabled, and false otherwise. On setting, it must enable the track if the new value is true, and disable it otherwise. (If the track is no longer in an object, then the track being enabled or disabled has no effect beyond changing the value of the attribute on the object.)\n\nWhenever an audio track in an that was disabled is enabled, and whenever one that was enabled is disabled, the user agent must queue a media element task given the media element to fire an event named at the object.\n\nAn audio track that has no data for a particular position on the media timeline, or that does not exist at that position, must be interpreted as being silent at that point on the timeline.\n\nThe attribute must return the index of the currently selected track, if any. If the object does not currently represent any tracks, or if none of the tracks are selected, it must instead return −1.\n\nThe attribute, on getting, must return true if the track is currently selected, and false otherwise. On setting, it must select the track if the new value is true, and unselect it otherwise. If the track is in a , then all the other objects in that list must be unselected. (If the track is no longer in a object, then the track being selected or unselected has no effect beyond changing the value of the attribute on the object.)\n\nWhenever a track in a that was previously not selected is selected, and whenever the selected track in a is unselected without a new track being selected in its stead, the user agent must queue a media element task given the media element to fire an event named at the object. This task must be queued before the task that fires the event, if any.\n\nA video track that has no data for a particular position on the media timeline must be interpreted as being transparent black at that point on the timeline, with the same dimensions as the last frame before that position, or, if the position is before all the data for that track, the same dimensions as the first frame for that track. A track that does not exist at all at the current position must be treated as if it existed but had no data.\n\nFor instance, if a video has a track that is only introduced after one hour of playback, and the user selects that track then goes back to the start, then the user agent will act as if that track started at the start of the media resource but was simply transparent until one hour in.\n\nThe following are the event handlers (and their corresponding event handler event types) that must be supported, as event handler IDL attributes, by all objects implementing the and interfaces:\n\nThe and attributes allow scripts to select which track should play, but it is also possible to select specific tracks declaratively, by specifying particular tracks in the fragment of the URL of the media resource. The format of the fragment depends on the MIME type of the media resource. [RFC2046] [URL]\n\nA media element can have a group of associated , known as the media element's . The text tracks are sorted as follows:\n• None The text tracks corresponding to element children of the media element, in tree order.\n• None Any text tracks added using the method, in the order they were added, oldest first.\n• None Any media-resource-specific text tracks (text tracks corresponding to data in the media resource), in the order defined by the media resource's format specification.\n\nEach text track has a corresponding object.\n\nEach media element has a , which must initially be empty, a flag, which must initially be false, and a flag, which must also initially be false.\n\nWhen the user agent is required to of a media element, the user agent must add to the element's list of pending text tracks each text track in the element's list of text tracks whose text track mode is not disabled and whose text track readiness state is loading.\n\nWhenever a element's parent node changes, the user agent must remove the corresponding text track from any list of pending text tracks that it is in.\n\nWhenever a text track's text track readiness state changes to either loaded or failed to load, the user agent must remove it from any list of pending text tracks that it is in.\n\nWhen a media element is created by an HTML parser or XML parser, the user agent must set the element's blocked-on-parser flag to true. When a media element is popped off the stack of open elements of an HTML parser or XML parser, the user agent must honor user preferences for automatic text track selection, populate the list of pending text tracks, and set the element's blocked-on-parser flag to false.\n\nThe text tracks of a media element are when both the element's list of pending text tracks is empty and the element's blocked-on-parser flag is false.\n\nEach media element has a , which must initially be unset.\n\nWhenever a text track that is in a media element's list of text tracks has its text track mode change value, the user agent must run the following steps for the media element:\n• None If the media element's pending text track change notification flag is set, return.\n• Queue a media element task given the media element to run these steps:\n• None Fire an event named at the media element's attribute's object.\n• None If the media element's show poster flag is not set, run the time marches on steps.\n\nThe task source for the tasks listed in this section is the DOM manipulation task source.\n\nA is the unit of time-sensitive data in a text track, corresponding for instance for subtitles and captions to the text that appears at a particular time and disappears at another time.\n\nAn is a text track cue with a text track cue end time set to positive Infinity. An active unbounded text track cue cannot become inactive through the usual monotonic increase of the current playback position during normal playback (e.g. a metadata cue for a chapter in a live event with no announced end time.)\n\nThe text track cue start time and text track cue end time can be negative. (The current playback position can never be negative, though, so cues entirely before time zero cannot be active.)\n\nEach text track cue has a corresponding object (or more specifically, an object that inherits from — for example, WebVTT cues use the interface). A text track cue's in-memory representation can be dynamically changed through this API. [WEBVTT]\n\nA text track cue is associated with rules for updating the text track rendering, as defined by the specification for the specific kind of text track cue. These rules are used specifically when the object representing the cue is added to a object using the method.\n\nIn addition, each text track cue has two pieces of dynamic information:\n\nThe text track cues of a media element's text tracks are ordered relative to each other in the , which is determined as follows: first group the cues by their text track, with the groups being sorted in the same order as their text tracks appear in the media element's list of text tracks; then, within each group, cues must be sorted by their start time, earliest first; then, any cues with the same start time must be sorted by their end time, latest first; and finally, any cues with identical end times must be sorted in the order they were last added to their respective text track list of cues, oldest first (so e.g. for cues from a WebVTT file, that would initially be the order in which the cues were listed in the file). [WEBVTT]\n\nA is a text track that corresponds to data found in the media resource.\n\nRules for processing and rendering such data are defined by the relevant specifications, e.g. the specification of the video format if the media resource is a video. Details for some legacy formats can be found in . [INBAND]\n\nWhen a media resource contains data that the user agent recognizes and supports as being equivalent to a text track, the user agent runs the with the relevant data, as follows.\n• None Associate the relevant data with a new text track and its corresponding new object. The text track is a media-resource-specific text track.\n• None Set the new text track's kind, label, and language based on the semantics of the relevant data, as defined by the relevant specification. If there is no label in that data, then the label must be set to the empty string.\n• None Associate the text track list of cues with the rules for updating the text track rendering appropriate for the format in question.\n• If the new text track's kind is or , then set the text track in-band metadata track dispatch type as follows, based on the type of the media resource: If the media resource is an Ogg file The text track in-band metadata track dispatch type must be set to the value of the Name header field. [OGGSKELETONHEADERS] If the media resource is a WebM file The text track in-band metadata track dispatch type must be set to the value of the element. [WEBMCG] If the media resource is an MPEG-2 file Let be the value of the \"stream_type\" field describing the text track's type in the file's program map section, interpreted as an 8-bit unsigned integer. Let be the value of the \"ES_info_length\" field for the track in the same part of the program map section, interpreted as an integer as defined by Generic coding of moving pictures and associated audio information . Let be the bytes following the \"ES_info_length\" field. The text track in-band metadata track dispatch type must be set to the concatenation of the byte and the zero or more bytes, expressed in hexadecimal using ASCII upper hex digits. [MPEG2] If the media resource is an MPEG-4 file Let the first box of the first box of the first box of the first box of the text track's box in the first box of the file be the stsd box, if any. If the file has no stsd box, or if the stsd box has neither a box nor a box, then the text track in-band metadata track dispatch type must be set to the empty string. Otherwise, if the stsd box has a box then the text track in-band metadata track dispatch type must be set to the concatenation of the string \" \", a U+0020 SPACE character, and the value of the first field of the first box of the stsd box, or the empty string if that field is absent in that box. Otherwise, if the stsd box has no box but has a box then the text track in-band metadata track dispatch type must be set to the concatenation of the string \" \", a U+0020 SPACE character, and the value of the first field of the first box of the stsd box, or the empty string if that field is absent in that box. [MPEG4]\n• None Populate the new text track's list of cues with the cues parsed so far, following the guidelines for exposing cues, and begin updating it dynamically as necessary.\n• None Set the new text track's readiness state to loaded.\n• None Set the new text track's mode to the mode consistent with the user's preferences and the requirements of the relevant specification for the data. For instance, if there are no other active subtitles, and this is a forced subtitle track (a subtitle track giving subtitles in the audio track's primary language, but only for audio that is actually in another language), then those subtitles might be activated here.\n• None Add the new text track to the media element's list of text tracks.\n• None Fire an event named at the media element's attribute's object, using , with the attribute initialized to the text track's object.\n\nWhen a element is created, it must be associated with a new text track (with its value set as defined below) and its corresponding new object.\n\nThe text track kind is determined from the state of the element's attribute according to the following table; for a state given in a cell of the first column, the kind is the string given in the second column:\n\nThe text track label is the element's track label.\n\nThe text track language is the element's track language, if any, or the empty string otherwise.\n\nAs the , , and attributes are set, changed, or removed, the text track must update accordingly, as per the definitions above.\n\nChanges to the track URL are handled in the algorithm below.\n\nThe text track readiness state is initially not loaded, and the text track mode is initially disabled.\n\nThe text track list of cues is initially empty. It is dynamically modified when the referenced file is parsed. Associated with the list are the rules for updating the text track rendering appropriate for the format in question; for WebVTT, this is the rules for updating the display of WebVTT text tracks. [WEBVTT]\n\nWhen a element's parent element changes and the new parent is a media element, then the user agent must add the element's corresponding text track to the media element's list of text tracks, and then queue a media element task given the media element to fire an event named at the media element's attribute's object, using , with the attribute initialized to the text track's object.\n\nWhen a element's parent element changes and the old parent was a media element, then the user agent must remove the element's corresponding text track from the media element's list of text tracks, and then queue a media element task given the media element to fire an event named at the media element's attribute's object, using , with the attribute initialized to the text track's object.\n\nWhen a text track corresponding to a element is added to a media element's list of text tracks, the user agent must queue a media element task given the media element to run the following steps for the media element:\n• None If the element's blocked-on-parser flag is true, then return.\n• None If the element's did-perform-automatic-track-selection flag is true, then return.\n• None Honor user preferences for automatic text track selection for this element.\n\nWhen the user agent is required to for a media element, the user agent must run the following steps:\n• None If there are any text tracks in the media element's list of text tracks whose text track kind is or that correspond to elements with a attribute set whose text track mode is set to disabled, then set the text track mode of all such tracks to hidden.\n\nWhen the steps above say to for one or more text track kinds, it means to run the following steps:\n• None Let be a list consisting of the text tracks in the media element's list of text tracks whose text track kind is one of the kinds that were passed to the algorithm, if any, in the order given in the list of text tracks.\n• None If is empty, then return.\n• None If any of the text tracks in have a text track mode set to showing, return.\n• If the user has expressed an interest in having a track from enabled based on its text track kind, text track language, and text track label, then set its text track mode to showing. For example, the user could have set a browser preference to the effect of \"I want French captions whenever possible\", or \"If there is a subtitle track with 'Commentary' in the title, enable it\", or \"If there are audio description tracks available, enable one, ideally in Swiss German, but failing that in Standard Swiss German or Standard German\". Otherwise, if there are any text tracks in that correspond to elements with a attribute set whose text track mode is set to disabled, then set the text track mode of the first such track to showing.\n\nWhen a text track corresponding to a element experiences any of the following circumstances, the user agent must start the processing model for that text track and its element:\n• The text track has its text track mode changed.\n• The element's parent element changes and the new parent is a media element.\n\nWhen a user agent is to for a text track and its element, it must run the following algorithm. This algorithm interacts closely with the event loop mechanism; in particular, it has a synchronous section (which is triggered as part of the event loop algorithm). The steps in that section are marked with ⌛.\n• None If another occurrence of this algorithm is already running for this text track and its element, return, letting that other algorithm take care of this element.\n• None If the text track's text track mode is not set to one of hidden or showing, then return.\n• None If the text track's element does not have a media element as a parent, return.\n• None Run the remainder of these steps in parallel, allowing whatever caused these steps to run to continue.\n• None Top: Await a stable state. The synchronous section consists of the following steps. (The steps in the synchronous section are marked with ⌛.)\n• None ⌛ Let be the track URL of the element.\n• None ⌛ If the element's parent is a media element then let be the state of the parent media element's content attribute. Otherwise, let be No CORS.\n• None End the synchronous section, continuing the remaining steps in parallel.\n• If is not the empty string, then:\n• None Let be the result of creating a potential-CORS request given , \" \", and , and with the same-origin fallback flag set. The tasks queued by the fetching algorithm on the networking task source to process the data as it is being fetched must determine the type of the resource. If the type of the resource is not a supported text track format, the load will fail, as described below. Otherwise, the resource's data must be passed to the appropriate parser (e.g., the WebVTT parser) as it is received, with the text track list of cues being used for that parser's output. [WEBVTT] The appropriate parser will incrementally update the text track list of cues during these networking task source tasks, as each such task is run with whatever data has been received from the network). This specification does not currently say whether or how to check the MIME types of text tracks, or whether or how to perform file type sniffing using the actual file data. Implementers differ in their intentions on this matter and it is therefore unclear what the right solution is. In the absence of any requirement here, the HTTP specifications' strict requirement to follow the Content-Type header prevails (\"Content-Type specifies the media type of the underlying data.\" ... \"If and only if the media type is not given by a Content-Type field, the recipient MAY attempt to guess the media type via inspection of its content and/or the name extension(s) of the URI used to identify the resource.\"). If fetching fails for any reason (network error, the server returns an error code, CORS fails, etc.), or if is the empty string, then queue an element task on the DOM manipulation task source given the media element to first change the text track readiness state to failed to load and then fire an event named at the element. If fetching does not fail, but the type of the resource is not a supported text track format, or the file was not successfully processed (e.g., the format in question is an XML format and the file contained a well-formedness error that requires be detected and reported to the application), then the task that is queued on the networking task source in which the aforementioned problem is found must change the text track readiness state to failed to load and fire an event named at the element. If fetching does not fail, and the file was successfully processed, then the final task that is queued by the networking task source, after it has finished parsing the data, must change the text track readiness state to loaded, and fire an event named at the element. If, while fetching is ongoing, either:\n• the track URL changes so that it is no longer equal to , while the text track mode is set to hidden or showing; or\n• the text track mode changes to hidden or showing, while the track URL is not equal to ...then the user agent must abort fetching, discarding any pending tasks generated by that algorithm (and in particular, not adding any cues to the text track list of cues after the moment the URL changed), and then queue an element task on the DOM manipulation task source given the element that first changes the text track readiness state to failed to load and then fires an event named at the element.\n• None Wait until the text track readiness state is no longer set to loading.\n• None Wait until the track URL is no longer equal to , at the same time as the text track mode is set to hidden or showing.\n\nWhenever a element has its attribute set, changed, or removed, the user agent must immediately empty the element's text track's text track list of cues. (This also causes the algorithm above to stop adding cues from the resource being obtained using the previously given URL, if any.)\n\nin various formats as text track cues\n\nHow a specific format's text track cues are to be interpreted for the purposes of processing by an HTML user agent is defined by that format. In the absence of such a specification, this section provides some constraints within which implementations can attempt to consistently expose such formats.\n\nTo support the text track model of HTML, each unit of timed data is converted to a text track cue. Where the mapping of the format's features to the aspects of a text track cue as defined in this specification are not defined, implementations must ensure that the mapping is consistent with the definitions of the aspects of a text track cue as defined above, as well as with the following constraints:\n\nA object represents a dynamically updating list of text tracks in a given order.\n\nThe attribute of media elements must return a object representing the objects of the text tracks in the media element's list of text tracks, in the same order as in the list of text tracks.\n\nThe attribute of a object must return the number of text tracks in the list represented by the object.\n\nThe supported property indices of a object at any instant are the numbers from zero to the number of text tracks in the list represented by the object minus one, if any. If there are no text tracks in the list, there are no supported property indices.\n\nTo determine the value of an indexed property of a object for a given index , the user agent must return the th text track in the list represented by the object.\n\nThe method must return the first in the object whose IDL attribute would return a value equal to the value of the argument. When no tracks match the given argument, the method must return null.\n\nThe method of media elements, when invoked, must run the following steps:\n• Create a new text track corresponding to the new object, and set its text track kind to , its text track label to , its text track language to , its text track readiness state to the text track loaded state, its text track mode to the text track hidden mode, and its text track list of cues to an empty list. Initially, the text track list of cues is not associated with any rules for updating the text track rendering. When a text track cue is added to it, the text track list of cues has its rules permanently set accordingly.\n• Add the new text track to the media element's list of text tracks.\n• Queue a media element task given the media element to fire an event named at the media element's attribute's object, using , with the attribute initialized to the new text track's object.\n\nThe attribute must return the text track kind of the text track that the object represents.\n\nThe attribute must return the text track label of the text track that the object represents.\n\nThe attribute must return the text track language of the text track that the object represents.\n\nThe attribute returns the track's identifier, if it has one, or the empty string otherwise. For tracks that correspond to elements, the track's identifier is the value of the element's attribute, if any. For in-band tracks, the track's identifier is specified by the media resource. If the media resource is in a format that supports media fragment syntax, the identifier returned for a particular track must be the same identifier that would enable the track if used as the name of a track in the track dimension of such a fragment.\n\nThe attribute must return the text track in-band metadata track dispatch type of the text track that the object represents.\n\nThe attribute, on getting, must return the string corresponding to the text track mode of the text track that the object represents, as defined by the following list:\n\nOn setting, if the new value isn't equal to what the attribute would currently return, the new value must be processed as follows:\n\nIf the text track mode of the text track that the object represents is not the text track disabled mode, then the attribute must return a live object that represents the subset of the text track list of cues of the text track that the object represents whose end times occur at or after the earliest possible position when the script started, in text track cue order. Otherwise, it must return null. For each object, when an object is returned, the same object must be returned each time.\n\nThe earliest possible position when the script started is whatever the earliest possible position was the last time the event loop reached step 1.\n\nIf the text track mode of the text track that the object represents is not the text track disabled mode, then the attribute must return a live object that represents the subset of the text track list of cues of the text track that the object represents whose active flag was set when the script started, in text track cue order. Otherwise, it must return null. For each object, when an object is returned, the same object must be returned each time.\n\nA text track cue's active flag was set when the script started if its text track cue active flag was set the last time the event loop reached step 1.\n\nThe method of objects, when invoked, must run the following steps:\n• None If the text track list of cues does not yet have any associated rules for updating the text track rendering, then associate the text track list of cues with the rules for updating the text track rendering appropriate to .\n• None If text track list of cues' associated rules for updating the text track rendering are not the same rules for updating the text track rendering as appropriate for , then throw an \" \" .\n• None If the given is in a text track list of cues, then remove from that text track list of cues.\n• None Add to the object's text track's text track list of cues.\n\nThe method of objects, when invoked, must run the following steps:\n• None If the given is not in the object's text track's text track list of cues, then throw a \" \" .\n• None Remove from the object's text track's text track list of cues.\n\nA object represents a dynamically updating list of text track cues in a given order.\n\nThe attribute must return the number of cues in the list represented by the object.\n\nThe supported property indices of a object at any instant are the numbers from zero to the number of cues in the list represented by the object minus one, if any. If there are no cues in the list, there are no supported property indices.\n\nTo determine the value of an indexed property for a given index , the user agent must return the th text track cue in the list represented by the object.\n\nThe method, when called with an argument other than the empty string, must return the first text track cue in the list represented by the object whose text track cue identifier is , if any, or null otherwise. If the argument is the empty string, then the method must return null.\n\nThe attribute, on getting, must return the object of the text track in whose list of cues the text track cue that the object represents finds itself, if any; or null otherwise.\n\nThe attribute, on getting, must return the text track cue identifier of the text track cue that the object represents. On setting, the text track cue identifier must be set to the new value.\n\nThe attribute, on getting, must return the text track cue start time of the text track cue that the object represents, in seconds. On setting, the text track cue start time must be set to the new value, interpreted in seconds; then, if the object's text track cue is in a text track's list of cues, and that text track is in a media element's list of text tracks, and the media element's show poster flag is not set, then run the time marches on steps for that media element.\n\nThe attribute, on getting, must return the text track cue end time of the text track cue that the object represents, in seconds or positive Infinity. On setting, if the new value is negative Infinity or a Not-a-Number (NaN) value, then throw a TypeError exception. Otherwise, the text track cue end time must be set to the new value. Then, if the object's text track cue is in a text track's list of cues, and that text track is in a media element's list of text tracks, and the media element's show poster flag is not set, then run the time marches on steps for that media element.\n\nThe attribute, on getting, must return true if the text track cue pause-on-exit flag of the text track cue that the object represents is set; or false otherwise. On setting, the text track cue pause-on-exit flag must be set if the new value is true, and must be unset otherwise.\n\nEvent handlers for objects of the text track APIs\n\nThe following are the event handlers that (and their corresponding event handler event types) that must be supported, as event handler IDL attributes, by all objects implementing the interface:\n\nThe following are the event handlers that (and their corresponding event handler event types) that must be supported, as event handler IDL attributes, by all objects implementing the interface:\n\nThe following are the event handlers (and their corresponding event handler event types) that must be supported, as event handler IDL attributes, by all objects implementing the interface:\n\nText tracks can be used for storing data relating to the media data, for interactive or augmented views.\n\nFor example, a page showing a sports broadcast could include information about the current score. Suppose a robotics competition was being streamed live. The image could be overlaid with the scores, as follows:\n\nIn order to make the score display render correctly whenever the user seeks to an arbitrary point in the video, the metadata text track cues need to be as long as is appropriate for the score. For example, in the frame above, there would be maybe one cue that lasts the length of the match that gives the match number, one cue that lasts until the blue alliance's score changes, and one cue that lasts until the red alliance's score changes. If the video is just a stream of the live event, the time in the bottom right would presumably be automatically derived from the current video time, rather than based on a cue. However, if the video was just the highlights, then that might be given in cues also.\n\nThe following shows what fragments of this could look like in a WebVTT file:\n\nThe key here is to notice that the information is given in cues that span the length of time to which the relevant event applies. If, instead, the scores were given as zero-length (or very brief, nearly zero-length) cues when the score changes, for example saying \"red+2\" at 05:11:17.198, \"red+3\" at 05:11:25.912, etc, problems arise: primarily, seeking is much harder to implement, as the script has to walk the entire list of cues to make sure that no notifications have been missed; but also, if the cues are short it's possible the script will never see that they are active unless it listens to them specifically.\n\nWhen using cues in this manner, authors are encouraged to use the event to update the current annotations. (In particular, using the event would be less appropriate as it would require doing work even when the cues haven't changed, and, more importantly, would introduce a higher latency between when the metadata cues become active and when the display is updated, since events are rate-limited.)\n\nOther specifications or formats that need a URL to identify the return values of the or IDL attributes, or identify the kind of text track, must use the URL.\n\nThe attribute is a boolean attribute. If present, it indicates that the author has not provided a scripted controller and would like the user agent to provide its own set of controls.\n\nIf the attribute is present, or if scripting is disabled for the media element, then the user agent should . This user interface should include features to begin playback, pause playback, seek to an arbitrary position in the content (if the content supports arbitrary seeking), change the volume, change the display of closed captions or embedded sign-language tracks, select different audio tracks or turn on audio descriptions, and show the media content in manners more suitable to the user (e.g. fullscreen video or in an independent resizable window). Other controls may also be made available.\n\nEven when the attribute is absent, however, user agents may provide controls to affect playback of the media resource (e.g. play, pause, seeking, track selection, and volume controls), but such features should not interfere with the page's normal rendering. For example, such features could be exposed in the media element's context menu, platform media keys, or a remote control. The user agent may implement this simply by exposing a user interface to the user as described above (as if the attribute was present).\n\nIf the user agent exposes a user interface to the user by displaying controls over the media element, then the user agent should suppress any user interaction events while the user agent is interacting with this interface. (For example, if the user clicks on a video's playback control, events and so forth would not simultaneously be fired at elements on the page.)\n\nWhere possible (specifically, for starting, stopping, pausing, and unpausing playback, for seeking, for changing the rate of playback, for fast-forwarding or rewinding, for listing, enabling, and disabling text tracks, and for muting or changing the volume of the audio), user interface features exposed by the user agent must be implemented in terms of the DOM API described above, so that, e.g., all the same events fire.\n\nFeatures such as fast-forward or rewind must be implemented by only changing the attribute (and not the attribute).\n\nSeeking must be implemented in terms of seeking to the requested position in the media element's media timeline. For media resources where seeking to an arbitrary position would be slow, user agents are encouraged to use the approximate-for-speed flag when seeking in response to the user manipulating an approximate position interface such as a seek bar.\n\nThe IDL attribute must reflect the content attribute of the same name.\n\nA media element has a , which is a fraction in the range 0.0 (silent) to 1.0 (loudest). Initially, the volume should be 1.0, but user agents may remember the last set value across sessions, on a per-site basis or otherwise, so the volume may start at other values.\n\nThe IDL attribute must return the playback volume of any audio portions of the media element. On setting, if the new value is in the range 0.0 to 1.0 inclusive, the media element's playback volume must be set to the new value. If the new value is outside the range 0.0 to 1.0 inclusive, then, on setting, an \" \" must be thrown instead.\n\nA media element can also be . If anything is muting the element, then it is muted. (For example, when the direction of playback is backwards, the element is muted.)\n\nThe IDL attribute must return the value to which it was last set. When a media element is created, if the element has a content attribute specified, then the IDL attribute should be set to true; otherwise, the user agents may set the value to the user's preferred value (e.g. remembering the last set value across sessions, on a per-site basis or otherwise). While the IDL attribute is set to true, the media element must be muted.\n\nWhenever either of the values that would be returned by the and IDL attributes change, the user agent must queue a media element task given the media element to fire an event named at the media element. Then, if the media element is not allowed to play, the user agent must run the internal pause steps for the media element.\n\nA user agent has an associated (a boolean). Its value is implementation-defined and determines whether the playback volume takes effect.\n\nAn element's is determined as follows:\n• None If the user has indicated that the user agent is to override the volume of the element, then return the volume desired by the user.\n• None If the user agent's volume locked is true, then return the system volume.\n• None If the element's audio output is muted, then return zero.\n• None Let be the playback volume of the audio portions of the media element, in range 0.0 (silent) to 1.0 (loudest).\n• None Return , interpreted relative to the range 0.0 to 1.0, with 0.0 being silent, and 1.0 being the loudest setting, values in between increasing in loudness. The range need not be linear. The loudest setting may be lower than the system's loudest possible setting; for example the user could have set a maximum volume.\n\nThe content attribute on media elements is a boolean attribute that controls the default state of the audio output of the media resource, potentially overriding user preferences.\n\nThe IDL attribute must reflect the content attribute.\n\nThis attribute has no dynamic effect (it only controls the default state of the element).\n\nObjects implementing the interface represent a list of ranges (periods) of time.\n\nThe IDL attribute must return the number of ranges represented by the object.\n\nThe method must return the position of the start of the th range represented by the object, in seconds measured from the start of the timeline that the object covers.\n\nThe method must return the position of the end of the th range represented by the object, in seconds measured from the start of the timeline that the object covers.\n\nThese methods must throw \" \" s if called with an argument greater than or equal to the number of ranges represented by the object.\n\nWhen a object is said to be a , the ranges it represents must obey the following criteria:\n• The start of a range must be greater than the end of all earlier ranges.\n• The start of a range must be less than or equal to the end of that same range.\n\nIn other words, the ranges in such an object are ordered, don't overlap, and don't touch (adjacent ranges are folded into one bigger range). A range can be empty (referencing just a single moment in time), e.g. to indicate that only one frame is currently buffered in the case that the user agent has discarded the entire media resource except for the current frame, when a media element is paused.\n\nRanges in a object must be inclusive.\n\nThus, the end of a range would be equal to the start of a following adjacent (touching but not overlapping) range. Similarly, a range covering a whole timeline anchored at zero would have a start equal to zero and an end equal to the duration of the timeline.\n\nThe timelines used by the objects returned by the , , and IDL attributes of media elements must be that element's media timeline.\n\nThe attribute must return the value it was initialized to. It represents the context information for the event.\n\nThe following events fire on media elements as part of the processing model described above:\n\nThe following event fires on elements:\n\nThe following events fire on , , and objects:\n\nThe following event fires on objects and elements:\n\nThe following events fire on elements:\n\nThe following events fire on objects:\n\nThe main security and privacy implications of the and elements come from the ability to embed media cross-origin. There are two directions that threats can flow: from hostile content to a victim page, and from a hostile page to victim content.\n\nIf a victim page embeds hostile content, the threat is that the content might contain scripted code that attempts to interact with the that embeds the content. To avoid this, user agents must ensure that there is no access from the content to the embedding page. In the case of media content that uses DOM concepts, the embedded content must be treated as if it was in its own unrelated top-level traversable.\n\nFor instance, if an SVG animation was embedded in a element, the user agent would not give it access to the DOM of the outer page. From the perspective of scripts in the SVG resource, the SVG file would appear to be in a lone top-level traversable with no parent.\n\nIf a hostile page embeds victim content, the threat is that the embedding page could obtain information from the content that it would not otherwise have access to. The API does expose some information: the existence of the media, its type, its duration, its size, and the performance characteristics of its host. Such information is already potentially problematic, but in practice the same information can more or less be obtained using the element, and so it has been deemed acceptable.\n\nHowever, significantly more sensitive information could be obtained if the user agent further exposes metadata within the content, such as subtitles. That information is therefore only exposed if the video resource uses CORS. The attribute allows authors to enable CORS. [FETCH]\n\nWithout this restriction, an attacker could trick a user running within a corporate network into visiting a site that attempts to load a video from a previously leaked location on the corporation's intranet. If such a video included confidential plans for a new product, then being able to read the subtitles would present a serious confidentiality breach.\n\nBest practices for authors using media elements\n\nPlaying audio and video resources on small devices such as set-top boxes or mobile phones is often constrained by limited hardware resources in the device. For example, a device might only support three simultaneous videos. For this reason, it is a good practice to release resources held by media elements when they are done playing, either by being very careful about removing all references to the element and allowing it to be garbage collected, or, even better, by setting the element's attribute to an empty string. In cases where was set, instead set the to null.\n\nSimilarly, when the playback rate is not exactly 1.0, hardware, software, or format limitations can cause video frames to be dropped and audio to be choppy or muted.\n\nBest practices for implementers of media elements\n\nHow accurately various aspects of the media element API are implemented is considered a quality-of-implementation issue.\n\nFor example, when implementing the attribute, how precise an implementation reports the ranges that have been buffered depends on how carefully the user agent inspects the data. Since the API reports ranges as times, but the data is obtained in byte streams, a user agent receiving a variable-bitrate stream might only be able to determine precise times by actually decoding all of the data. User agents aren't required to do this, however; they can instead return estimates (e.g. based on the average bitrate seen so far) which get revised as more information becomes available.\n\nAs a general rule, user agents are urged to be conservative rather than optimistic. For example, it would be bad to report that everything had been buffered when it had not.\n\nAnother quality-of-implementation issue would be playing a video backwards when the codec is designed only for forward playback (e.g. there aren't many key frames, and they are far apart, and the intervening frames only have deltas from the previous frame). User agents could do a poor job, e.g. only showing key frames; however, better implementations would do more work and thus do a better job, e.g. actually decoding parts of the video forwards, storing the complete frames, and then playing the frames backwards.\n\nSimilarly, while implementations are allowed to drop buffered data at any time (there is no requirement that a user agent keep all the media data obtained for the lifetime of the media element), it is again a quality of implementation issue: user agents with sufficient resources to keep all the data around are encouraged to do so, as this allows for a better user experience. For example, if the user is watching a live stream, a user agent could allow the user only to view the live video; however, a better user agent would buffer everything and allow the user to seek through the earlier material, pause it, play it forwards and backwards, etc.\n\nWhen a media element that is paused is removed from a document and not reinserted before the next time the event loop reaches step 1, implementations that are resource constrained are encouraged to take that opportunity to release all hardware resources (like video planes, networking resources, and data buffers) used by the media element. (User agents still have to keep track of the playback position and so forth, though, in case playback is later restarted.)\n\nThe element, in conjunction with an element and any element descendants, defines an image map. The element represents its children.\n\nThe attribute gives the map a name so that it can be referenced. The attribute must be present and must have a non-empty value with no ASCII whitespace. The value of the attribute must not be equal to the value of the attribute of another element in the same tree. If the attribute is also specified, both attributes must have the same value.\n\nThe attribute must return an rooted at the element, whose filter matches only elements.\n\nThe IDL attribute must reflect the content attribute of the same name.\n\nThe element represents either a hyperlink with some text and a corresponding area on an image map, or a dead area on an image map.\n\nAn element with a parent node must have a element ancestor.\n\nIf the element has an attribute, then the element represents a hyperlink. In this case, the attribute must be present. It specifies the text of the hyperlink. Its value must be text that, when presented with the texts specified for the other hyperlinks of the image map, and with the alternative text of the image, but without the image itself, provides the user with the same kind of choice as the hyperlink would when used without its text but with its shape applied to the image. The attribute may be left blank if there is another element in the same image map that points to the same resource and has a non-blank attribute.\n\nIf the element has no attribute, then the area represented by the element cannot be selected, and the attribute must be omitted.\n\nIn both cases, the and attributes specify the area.\n\nThe attribute is an enumerated attribute with the following keywords and states:\n\nThe attribute's missing value default and invalid value default are both the rectangle state.\n\nThe attribute must, if specified, contain a valid list of floating-point numbers. This attribute gives the coordinates for the shape described by the attribute. The processing for this attribute is described as part of the image map processing model.\n\nIn the , elements must have a attribute present, with three integers, the last of which must be non-negative. The first integer must be the distance in CSS pixels from the left edge of the image to the center of the circle, the second integer must be the distance in CSS pixels from the top edge of the image to the center of the circle, and the third integer must be the radius of the circle, again in CSS pixels.\n\nIn the , elements must not have a attribute. (The area is the whole image.)\n\nIn the , elements must have a attribute with at least six integers, and the number of integers must be even. Each pair of integers must represent a coordinate given as the distances from the left and the top of the image in CSS pixels respectively, and all the coordinates together must represent the points of the polygon, in order.\n\nIn the , elements must have a attribute with exactly four integers, the first of which must be less than the third, and the second of which must be less than the fourth. The four points must represent, respectively, the distance from the left edge of the image to the left side of the rectangle, the distance from the top edge to the top side, the distance from the left edge to the right side, and the distance from the top edge to the bottom side, all in CSS pixels.\n\nWhen user agents allow users to follow hyperlinks or download hyperlinks created using the element, the , , , and attributes decide how the link is followed. The attribute may be used to indicate to the user the likely nature of the target resource before the user follows the link.\n\nThe , , , , and attributes must be omitted if the attribute is not present.\n\nIf the attribute is specified on an element, then the attribute must also be specified.\n\nThe IDL attributes , , , , , , and , each must reflect the respective content attributes of the same name.\n\nThe IDL attribute must reflect the content attribute.\n\nThe IDL attribute must reflect the content attribute, limited to only known values.\n\nAn allows geometric areas on an image to be associated with hyperlinks.\n\nAn image, in the form of an element, may be associated with an image map (in the form of a element) by specifying a attribute on the element. The attribute, if specified, must be a valid hash-name reference to a element.\n\nIf an element has a attribute specified, user agents must process it as follows:\n• None Parse the attribute's value using the rules for parsing a hash-name reference to a element, with the element as the context node. This will return either an element (the ) or null.\n• None If that returned null, then return. The image is not associated with an image map after all.\n• None Otherwise, the user agent must collect all the elements that are descendants of the . Let those be the .\n\nHaving obtained the list of elements that form the image map (the ), interactive user agents must process the list in one of two ways.\n\nIf the user agent intends to show the text that the element represents, then it must use the following steps.\n• None Remove all the elements in that have no attribute.\n• None Remove all the elements in that have no attribute, or whose attribute's value is the empty string, if there is another element in with the same value in the attribute and with a non-empty attribute.\n• None Each remaining element in represents a hyperlink. Those hyperlinks should all be made available to the user in a manner associated with the text of the . In this context, user agents may represent and elements with no specified attributes, or whose attributes are the empty string or some other non-visible text, in an implementation-defined fashion intended to indicate the lack of suitable author-provided text.\n\nIf the user agent intends to show the image and allow interaction with the image to select hyperlinks, then the image must be associated with a set of layered shapes, taken from the elements in , in reverse tree order (so the last specified element in the is the bottom-most shape, and the first element in the , in tree order, is the top-most shape).\n\nEach element in must be processed as follows to obtain a shape to layer onto the image:\n• None Find the state that the element's attribute represents.\n• None Use the rules for parsing a list of floating-point numbers to parse the element's attribute, if it is present, and let the result be the list. If the attribute is absent, let the list be the empty list.\n• If the number of items in the list is less than the minimum number given for the element's current state, as per the following table, then the shape is empty; return.\n• Check for excess items in the list as per the entry in the following list corresponding to the attribute's state: Drop any items in the list beyond the third. Drop all items in the list. Drop the last item if there's an odd number of items. Drop any items in the list beyond the fourth.\n• None If the attribute represents the rectangle state, and the first number in the list is numerically greater than the third number in the list, then swap those two numbers around.\n• None If the attribute represents the rectangle state, and the second number in the list is numerically greater than the fourth number in the list, then swap those two numbers around.\n• None If the attribute represents the circle state, and the third number in the list is less than or equal to zero, then the shape is empty; return.\n• None Now, the shape represented by the element is the one described for the entry in the list below corresponding to the state of the attribute: Let be the first number in , be the second number, and be the third number. The shape is a circle whose center is CSS pixels from the left edge of the image and CSS pixels from the top edge of the image, and whose radius is CSS pixels. The shape is a rectangle that exactly covers the entire image. Let be the (2 )th entry in , and be the (2 +1)th entry in (the first entry in being the one with index 0). Let be ( , ), interpreted in CSS pixels measured from the top left of the image, for all integer values of from 0 to ( /2)-1, where is the number of items in . The shape is a polygon whose vertices are given by , and whose interior is established using the even-odd rule. [GRAPHICS] Let be the first number in , be the second number, be the third number, and be the fourth number. The shape is a rectangle whose top-left corner is given by the coordinate ( , ) and whose bottom right corner is given by the coordinate ( , ), those coordinates being interpreted as CSS pixels from the top left corner of the image. For historical reasons, the coordinates must be interpreted relative to the displayed image after any stretching caused by the CSS 'width' and 'height' properties (or, for non-CSS browsers, the image element's and attributes — CSS browsers map those attributes to the aforementioned CSS properties). Browser zoom features and transforms applied using CSS or SVG do not affect the coordinates.\n\nPointing device interaction with an image associated with a set of layered shapes per the above algorithm must result in the relevant user interaction events being first fired to the top-most shape covering the point that the pointing device indicated, if any, or to the image element itself, if there is no shape covering that point. User agents may also allow individual elements representing hyperlinks to be selected and activated (e.g. using a keyboard).\n\nBecause a element (and its elements) can be associated with multiple elements, it is possible for an element to correspond to multiple focusable areas of the document.\n\nImage maps are live; if the DOM is mutated, then the user agent must act as if it had rerun the algorithms for image maps.\n\nThe MathML element falls into the embedded content, phrasing content, flow content, and palpable content categories for the purposes of the content models in this specification.\n\nWhen the MathML element contains elements from the HTML namespace, such elements must all be flow content.\n\nWhen the MathML token elements ( , , , , and ) are descendants of HTML elements, they may contain phrasing content elements from the HTML namespace.\n\nUser agents must handle text other than inter-element whitespace found in MathML elements whose content models do not allow straight text by pretending for the purposes of MathML content models, layout, and rendering that the text is actually wrapped in a MathML element. (Such text is not, however, conforming.)\n\nUser agents must act as if any MathML element whose contents does not match the element's content model was replaced, for the purposes of MathML layout and rendering, by a MathML element containing some appropriate error message.\n\nThe semantics of MathML elements are defined by and other applicable specifications. [MATHML]\n\nThe SVG element falls into the embedded content, phrasing content, flow content, and palpable content categories for the purposes of the content models in this specification.\n\nWhen the SVG element contains elements from the HTML namespace, such elements must all be flow content.\n\nThe content model for the SVG element inside HTML documents is phrasing content. (This further constrains the requirements given in .)\n\nThe semantics of SVG elements are defined by and other applicable specifications. [SVG]\n• None If is non-null and was created by the page load processing model for XML files section because the computed type of the resource in the navigate algorithm was , then return .\n\nAuthor requirements: The and attributes on , , , , , when the parent is a element and, when their attribute is in the Image Button state, elements may be specified to give the dimensions of the visual content of the element (the width and height respectively, relative to the nominal direction of the output medium), in CSS pixels. The attributes, if specified, must have values that are valid non-negative integers.\n\nThe specified dimensions given may differ from the dimensions specified in the resource itself, since the resource may have a resolution that differs from the CSS pixel resolution. (On screens, CSS pixels have a resolution of 96ppi, but in general the CSS pixel resolution depends on the reading distance.) If both attributes are specified, then one of the following statements must be true:\n\nThe is the ratio of the natural width to the natural height in the resource. The and are the values of the and attributes respectively.\n\nThe two attributes must be omitted if the resource in question does not have both a natural width and a natural height.\n\nIf the two attributes are both 0, it indicates that the element is not intended for the user (e.g. it might be a part of a service to count page views).\n\nThe dimension attributes are not intended to be used to stretch the image.\n\nUser agent requirements: User agents are expected to use these attributes as hints for the rendering.\n\nThe and IDL attributes on the , , , , and elements must reflect the respective content attributes of the same name.\n\nFor , and the IDL attributes are ; for and the IDL attributes are .\n\nThe corresponding IDL attributes for and elements are defined in those respective elements' sections, as they are slightly more specific to those elements' other behaviors.\n\nThe element represents data with more than one dimension, in the form of a table.\n\nThe element takes part in the table model. Tables have rows, columns, and cells given by their descendants. The rows and columns form a grid; a table's cells must completely cover that grid without overlap.\n\nPrecise rules for determining whether this conformance requirement is met are described in the description of the table model.\n\nAuthors are encouraged to provide information describing how to interpret complex tables. Guidance on how to provide such information is given below.\n\nTables must not be used as layout aids. Historically, some web authors have misused tables in HTML as a way to control their page layout. This usage is non-conforming, because tools attempting to extract tabular data from such documents would obtain very confusing results. In particular, users of accessibility tools like screen readers are likely to find it very difficult to navigate pages with tables used for layout.\n\nThere are a variety of alternatives to using HTML tables for layout, such as CSS grid layout, CSS flexible box layout (\"flexbox\"), CSS multi-column layout, CSS positioning, and the CSS table model. [CSS]\n\nTables can be complicated to understand and navigate. To help users with this, user agents should clearly delineate cells in a table from each other, unless the user agent has classified the table as a (non-conforming) layout table.\n\nAuthors and implementers are encouraged to consider using some of the table design techniques described below to make tables easier to navigate for users.\n\nUser agents, especially those that do table analysis on arbitrary content, are encouraged to find heuristics to determine which tables actually contain data and which are merely being used for layout. This specification does not define a precise heuristic, but the following are suggested as possible indicators:\n\nIt is quite possible that the above suggestions are wrong. Implementers are urged to provide feedback elaborating on their experiences with trying to create a layout table detection heuristic.\n\nIf a element has a (non-conforming) attribute, and the user agent has not classified the table as a layout table, the user agent may report the contents of that attribute to the user.\n\nIn all of the following attribute and method definitions, when an element is to be , that means to create an element given the element's node document, the given local name, and the HTML namespace.\n\nThe IDL attribute must return, on getting, the first element child of the element, if any, or null otherwise. On setting, the first element child of the element, if any, must be removed, and the new value, if not null, must be inserted as the first node of the element.\n\nThe method must return the first element child of the element, if any; otherwise a new element must be table-created, inserted as the first node of the element, and then returned.\n\nThe method must remove the first element child of the element, if any.\n\nThe IDL attribute must return, on getting, the first element child of the element, if any, or null otherwise. On setting, if the new value is null or a element, the first element child of the element, if any, must be removed, and the new value, if not null, must be inserted immediately before the first element in the element that is neither a element nor a element, if any, or at the end of the table if there are no such elements. If the new value is neither null nor a element, then a \" \" must be thrown instead.\n\nThe method must return the first element child of the element, if any; otherwise a new element must be table-created and inserted immediately before the first element in the element that is neither a element nor a element, if any, or at the end of the table if there are no such elements, and then that new element must be returned.\n\nThe method must remove the first element child of the element, if any.\n\nThe IDL attribute must return, on getting, the first element child of the element, if any, or null otherwise. On setting, if the new value is null or a element, the first element child of the element, if any, must be removed, and the new value, if not null, must be inserted at the end of the table. If the new value is neither null nor a element, then a \" \" must be thrown instead.\n\nThe method must return the first element child of the element, if any; otherwise a new element must be table-created and inserted at the end of the table, and then that new element must be returned.\n\nThe method must remove the first element child of the element, if any.\n\nThe attribute must return an rooted at the node, whose filter matches only elements that are children of the element.\n\nThe method must table-create a new element, insert it immediately after the last element child in the element, if any, or at the end of the element if the element has no element children, and then must return the new element.\n\nThe attribute must return an rooted at the node, whose filter matches only elements that are either children of the element, or children of , , or elements that are themselves children of the element. The elements in the collection must be ordered such that those elements whose parent is a are included first, in tree order, followed by those elements whose parent is either a or element, again in tree order, followed finally by those elements whose parent is a element, still in tree order.\n\nThe behavior of the method depends on the state of the table. When it is called, the method must act as required by the first item in the following list of conditions that describes the state of the table and the argument:\n\nWhen the method is called, the user agent must run the following steps:\n• None If is less than −1 or greater than or equal to the number of elements in the collection, then throw an \" \" .\n• None If is −1, then remove the last element in the collection from its parent, or do nothing if the collection is empty.\n• None Otherwise, remove the th element in the collection from its parent.\n\nFor tables that consist of more than just a grid of cells with headers in the first row and headers in the first column, and for any table in general where the reader might have difficulty understanding the content, authors should include explanatory information introducing the table. This information is useful for all users, but is especially useful for users who cannot see the table, e.g. users of screen readers.\n\nSuch explanatory information should introduce the purpose of the table, outline its basic cell structure, highlight any trends or patterns, and generally teach the user how to use the table.\n\nFor instance, the following table:\n\n...might benefit from a description explaining the way the table is laid out, something like \"Characteristics are given in the second column, with the negative side in the left column and the positive side in the right column\".\n\nThere are a variety of ways to include this information, such as:\n\nAuthors may also use other techniques, or combinations of the above techniques, as appropriate.\n\nThe best option, of course, rather than writing a description explaining the way the table is laid out, is to adjust the table such that no explanation is needed.\n\nGood table design is key to making tables more readable and usable.\n\nIn visual media, providing column and row borders and alternating row backgrounds can be very effective to make complicated tables more readable.\n\nFor tables with large volumes of numeric content, using monospaced fonts can help users see patterns, especially in situations where a user agent does not render the borders. (Unfortunately, for historical reasons, not rendering borders on tables is a common default.)\n\nIn speech media, table cells can be distinguished by reporting the corresponding headers before reading the cell's contents, and by allowing users to navigate the table in a grid fashion, rather than serializing the entire contents of the table in source order.\n\nAuthors are encouraged to use CSS to achieve these effects.\n\nUser agents are encouraged to render tables using these techniques whenever the page does not use CSS and the table is not classified as a layout table.\n\nThe element represents the title of the that is its parent, if it has a parent and that is a element.\n\nThe element takes part in the table model.\n\nWhen a element is the only content in a element other than the , the element should be omitted in favor of the .\n\nA caption can introduce context for a table, making it significantly easier to understand.\n\nThe element represents a group of one or more columns in the that is its parent, if it has a parent and that is a element.\n\nIf the element contains no elements, then the element may have a content attribute specified, whose value must be a valid non-negative integer greater than zero and less than or equal to 1000.\n\nThe element and its attribute take part in the table model.\n\nThe IDL attribute must reflect the content attribute of the same name. It is clamped to the range [1, 1000], and its default value is 1.\n\nIf a element has a parent and that is a element that itself has a parent that is a element, then the element represents one or more columns in the column group represented by that .\n\nThe element may have a content attribute specified, whose value must be a valid non-negative integer greater than zero and less than or equal to 1000.\n\nThe element and its attribute take part in the table model.\n\nThe element represents a block of rows that consist of a body of data for the parent element, if the element has a parent and it is a .\n\nThe element takes part in the table model.\n\nThe attribute must return an rooted at this element, whose filter matches only elements that are children of this element.\n\nThe method must act as follows:\n• None If is less than −1 or greater than the number of elements in the collection, throw an \" \" .\n• None Let be the result of creating an element given this element's node document, \" \", and the HTML namespace.\n• None If is −1 or equal to the number of items in the collection, then append to this element.\n• None Otherwise, insert as a child of this element, immediately before the th element in the collection.\n\nThe method must, when invoked, act as follows:\n• None If is less than −1 or greater than or equal to the number of elements in the collection, then throw an \" \" .\n• None If is −1, then remove the last element in the collection from this element, or do nothing if the collection is empty.\n• None Otherwise, remove the th element in the collection from this element.\n\nThe element represents the block of rows that consist of the column labels (headers) and any ancillary non-header cells for the parent element, if the element has a parent and it is a .\n\nThe element takes part in the table model.\n\nThe element the of that consist of the column summaries (footers) for the parent element, if the element has a parent and it is a .\n\nThe element takes part in the .\n\nThe element represents a row of cells in a table.\n\nThe element takes part in the table model.\n\nThe attribute must, if this element has a parent element, or a parent , , or element and a grandparent element, return the index of this element in that element's collection. If there is no such element, then the attribute must return −1.\n\nThe attribute must, if this element has a parent , , , or element, return the index of the element in the parent element's collection (for tables, that's 's collection; for table sections, that's 's collection). If there is no such parent element, then the attribute must return −1.\n\nThe attribute must return an rooted at this element, whose filter matches only and elements that are children of the element.\n\nThe method must act as follows:\n• None If is less than −1 or greater than the number of elements in the collection, then throw an \" \" .\n• None Let be the result of creating an element given this element's node document, \" \", and the HTML namespace.\n• None If is equal to −1 or equal to the number of items in collection, then append to this element.\n• None Otherwise, insert as a child of this element, immediately before the th or element in the collection.\n\nThe method must act as follows:\n• None If is less than −1 or greater than or equal to the number of elements in the collection, then throw an \" \" .\n• None If is −1, then remove the last element in the collection from its parent, or do nothing if the collection is empty.\n• None Otherwise, remove the th element in the collection from its parent.\n\nThe element and its , , and attributes take part in the table model.\n\nUser agents, especially in non-visual environments or where displaying the table as a 2D grid is impractical, may give the user context for the cell when rendering the contents of a cell; for instance, giving its position in the table model, or listing the cell's header cells (as determined by the algorithm for assigning header cells). When a cell's header cells are being listed, user agents may use the value of attributes on those header cells, if any, instead of the contents of the header cells themselves.\n\nThe element may have a content attribute specified.\n\nThe attribute is an enumerated attribute with the following keywords and states:\n\nThe attribute's missing value default and invalid value default are both the state. (In this state the header cell applies to a set of cells selected based on context.)\n\nA element's attribute must not be in the row group state if the element is not anchored in a row group, nor in the column group state if the element is not anchored in a column group.\n\nThe element may have an content attribute specified. Its value must be an alternative label for the header cell, to be used when referencing the cell in other contexts (e.g. when describing the header cells that apply to a data cell). It is typically an abbreviated form of the full header cell, but can also be an expansion, or merely a different phrasing.\n\nThe element and its , , , and attributes take part in the table model.\n\nThe and elements may have a content attribute specified, whose value must be a valid non-negative integer greater than zero and less than or equal to 1000.\n\nThe and elements may also have a content attribute specified, whose value must be a valid non-negative integer less than or equal to 65534. For this attribute, the value zero means that the cell is to span all the remaining rows in the row group.\n\nThese attributes give the number of columns and rows respectively that the cell is to span. These attributes must not be used to overlap cells, as described in the description of the table model.\n\nThe and element may have a content attribute specified. The attribute, if specified, must contain a string consisting of an unordered set of unique space-separated tokens, none of which are identical to another token and each of which must have the value of an ID of a element taking part in the same table as the or element (as defined by the table model).\n\nA element with ID is said to be directly targeted by all and elements in the same table that have attributes whose values include as one of their tokens the ID . A element is said to be targeted by a or element if either is directly targeted by or if there exists an element that is itself targeted by the element and is directly targeted by .\n\nA element must not be targeted by itself.\n\nThe , , and attributes take part in the table model.\n\nThe IDL attribute must reflect the content attribute. It is clamped to the range [1, 1000], and its default value is 1.\n\nThe IDL attribute must reflect the content attribute. It is clamped to the range [0, 65534], and its default value is 1.\n\nThe IDL attribute must reflect the content attribute of the same name.\n\nThe IDL attribute must, if the element has a parent element, return the index of the cell's element in the parent element's collection. If there is no such parent element, then the attribute must return −1.\n\nThe IDL attribute must reflect the content attribute of the same name, limited to only known values.\n\nThe IDL attribute must reflect the content attribute of the same name.\n\nThe various table elements and their content attributes together define the .\n\nA consists of cells aligned on a two-dimensional grid of with coordinates ( , ). The grid is finite, and is either empty or has one or more slots. If the grid has one or more slots, then the coordinates are always in the range 0 ≤ < , and the coordinates are always in the range 0 ≤ < . If one or both of and are zero, then the table is empty (has no slots). Tables correspond to elements.\n\nA is a set of slots anchored at a slot ( , ), and with a particular and such that the cell covers all the slots with coordinates ( , ) where ≤ < + and ≤ < + . Cells can either be data cells or header cells. Data cells correspond to elements, and header cells correspond to elements. Cells of both types can have zero or more associated header cells.\n\nIt is possible, in certain error cases, for two cells to occupy the same slot.\n\nA is a complete set of slots from =0 to = -1, for a particular value of . Rows usually correspond to elements, though a row group can have some implied rows at the end in some cases involving cells spanning multiple rows.\n\nA is a complete set of slots from =0 to = -1, for a particular value of . Columns can correspond to elements. In the absence of elements, columns are implied.\n\nA is a set of rows anchored at a slot (0, ) with a particular such that the row group covers all the slots with coordinates ( , ) where 0 ≤ < and ≤ < + . Row groups correspond to , , and elements. Not every row is necessarily in a row group.\n\nA is a set of columns anchored at a slot ( , 0) with a particular such that the column group covers all the slots with coordinates ( , ) where ≤ < + and 0 ≤ < . Column groups correspond to elements. Not every column is necessarily in a column group.\n\nRow groups cannot overlap each other. Similarly, column groups cannot overlap each other.\n\nA cell cannot cover slots that are from two or more row groups. It is, however, possible for a cell to be in multiple column groups. All the slots that form part of one cell are part of zero or one row groups and zero or more column groups.\n\nIn addition to cells, columns, rows, row groups, and column groups, tables can have a element associated with them. This gives the table a heading, or legend.\n\nA is an error with the data represented by elements and their descendants. Documents must not have table model errors.\n\nTo determine which elements correspond to which slots in a table associated with a element, to determine the dimensions of the table ( and ), and to determine if there are any table model errors, user agents must use the following algorithm:\n• Let be zero.\n• Let be zero.\n• Let be a list of elements, initially empty.\n• Let be the table represented by the element. The and variables give 's dimensions. is initially empty.\n• If the element has no children elements, then return (which will be empty).\n• Associate the first element child of the element with . If there are no such children, then it has no associated element.\n• Let the be the first element child of the element. If a step in this algorithm ever requires the to be advanced to the next child of the when there is no such next child, then the user agent must jump to the step labeled end, near the end of this algorithm.\n• While the is not one of the following elements, advance the to the next child of the :\n• If the is a , follow these substeps:\n• Column groups: Process the according to the appropriate case below: If the has any element children\n• Let have the value of .\n• Let the be the first element child of the element.\n• Columns: If the element has a attribute, then parse its value using the rules for parsing non-negative integers. If the result of parsing the value is not an error or zero, then let be that value. Otherwise, if the element has no attribute, or if trying to parse the attribute's value resulted in an error or zero, then let be 1. If is greater than 1000, let it be 1000 instead.\n• Let the last columns in correspond to the element.\n• If is not the last element child of the element, then let the be the next element child of the element, and return to the step labeled columns.\n• Let all the last columns in from x= to x= -1 form a new column group, anchored at the slot ( , 0), with width - , corresponding to the element. If the has no element children\n• If the element has a attribute, then parse its value using the rules for parsing non-negative integers. If the result of parsing the value is not an error or zero, then let be that value. Otherwise, if the element has no attribute, or if trying to parse the attribute's value resulted in an error or zero, then let be 1. If is greater than 1000, let it be 1000 instead.\n• Let the last columns in form a new column group, anchored at the slot ( - , 0), with width , corresponding to the element.\n• Advance the to the next child of the .\n• While the is not one of the following elements, advance the to the next child of the :\n• If the is a element, jump to the step labeled column groups above.\n• Let be zero.\n• Let the be an empty list.\n• Rows: While the is not one of the following elements, advance the to the next child of the :\n• If the is a , then run the algorithm for processing rows, advance the to the next child of the , and return to the step labeled rows.\n• If the is a , then add that element to the list of , advance the to the next child of the , and return to the step labeled rows.\n• The is either a or a .\n• Advance the to the next child of the .\n• End: For each element in the list of , in tree order, run the algorithm for processing row groups.\n• If there exists a row or column in containing only slots that do not have a cell anchored to them, then this is a table model error.\n\nThe , which is invoked by the set of steps above for processing , , and elements, is:\n• Let have the value of .\n• For each element that is a child of the element being processed, in tree order, run the algorithm for processing rows.\n• If > , then let all the last rows in from y= to y= -1 form a new row group, anchored at the slot with coordinate (0, ), with height - , corresponding to the element being processed.\n\nThe , which is invoked by the set of steps above when starting and ending a block of rows, is:\n• While is less than , follow these steps:\n\nThe , which is invoked by the set of steps above for processing elements, is:\n• If is equal to , then increase by 1. ( is never greater than .)\n• If the element being processed has no or element children, then increase by 1, abort this set of steps, and return to the algorithm above.\n• Let be the first or element child in the element being processed.\n• Cells: While is less than and the slot with coordinate ( , ) already has a cell assigned to it, increase by 1.\n• If is equal to , increase by 1. ( is never greater than .)\n• If the has a attribute, then parse that attribute's value, and let be the result. If parsing that value failed, or returned zero, or if the attribute is absent, then let be 1, instead. If is greater than 1000, let it be 1000 instead.\n• If the has a attribute, then parse that attribute's value, and let be the result. If parsing that value failed or if the attribute is absent, then let be 1, instead. If is greater than 65534, let it be 65534 instead.\n• If is zero and the element's node document is not set to quirks mode, then let be true, and set to 1. Otherwise, let be false.\n• If < + , then let be + .\n• If < + , then let be + .\n• Let the slots with coordinates ( , ) such that ≤ < + and ≤ < + be covered by a new cell , anchored at ( , ), which has width and height , corresponding to the element. If the element is a element, let this new cell be a header cell; otherwise, let it be a data cell. To establish which header cells apply to the element, use the algorithm for assigning header cells described in the next section. If any of the slots involved already had a cell covering them, then this is a table model error. Those slots now have two cells overlapping.\n• If is true, then add the tuple { , , } to the .\n• If is the last or element child in the element being processed, then increase by 1, abort this set of steps, and return to the algorithm above.\n• Let be the next or element child in the element being processed.\n\nWhen the algorithms above require the user agent to run the , the user agent must, for each { , , } tuple in the , if any, extend the cell so that it also covers the slots with coordinates ( , ), where ≤ < + .\n\nEach cell can be assigned zero or more header cells. The to a cell is as follows.\n• Let be an empty list of cells.\n• Let ( , ) be the coordinate of the slot to which the is anchored.\n• If the has a attribute specified\n• Take the value of the 's attribute and split it on ASCII whitespace, letting be the list of tokens obtained.\n• For each token in the , if the first element in the with an ID equal to the token is a cell in the same table, and that cell is not the , then add that cell to . If does not have a attribute specified\n• Let be the width of the .\n• Let be the height of the .\n• For each value of from to + -1, run the internal algorithm for scanning and assigning header cells, with the , the , the initial coordinate ( , ), and the increments Δ =−1 and Δ =0.\n• For each value of from to + -1, run the internal algorithm for scanning and assigning header cells, with the , the , the initial coordinate ( , ), and the increments Δ =0 and Δ =−1.\n• If the is anchored in a row group, then add all header cells that are row group headers and are anchored in the same row group with an -coordinate less than or equal to + -1 and a -coordinate less than or equal to + -1 to .\n• If the is anchored in a column group, then add all header cells that are column group headers and are anchored in the same column group with an -coordinate less than or equal to + -1 and a -coordinate less than or equal to + -1 to .\n• Remove all the empty cells from the .\n• Remove any duplicates from the .\n• Remove from the if it is there.\n• Assign the headers in the to the .\n\nThe , given a , a , an initial coordinate ( , ), and Δ and Δ increments, is as follows:\n• Let be an empty list of cells.\n• Let be true, and let be a list of cells containing just the . Let be false and let be an empty list of cells.\n• For each invocation of this algorithm, one of Δ and Δ will be −1, and the other will be 0.\n• If either or are less than 0, then abort this internal algorithm.\n• If there is no cell covering slot ( , ), or if there is more than one cell covering slot ( , ), return to the substep labeled loop.\n• Let be the cell covering slot ( , ).\n• \n• If there are any cells in the list anchored with the same -coordinate as the , and with the same width as , then let be true. If the is not a column header, then let be true. If there are any cells in the list anchored with the same -coordinate as the , and with the same height as , then let be true. If the is not a row header, then let be true.\n• None If is false, then add the to the . If is a data cell and is true Set to false. Add all the cells in to the list, and empty the list.\n\nA header cell anchored at the slot with coordinate ( , ) with width and height is said to be a if any of the following are true:\n• None the cell's attribute is in the column state; or\n• None the cell's attribute is in the auto state, and there are no data cells in any of the cells covering slots with -coordinates .. + -1.\n\nA header cell anchored at the slot with coordinate ( , ) with width and height is said to be a if any of the following are true:\n• None the cell's attribute is in the row state; or\n• None the cell's attribute is in the auto state, the cell is not a column header, and there are no data cells in any of the cells covering slots with -coordinates .. + -1.\n\nA header cell is said to be a if its attribute is in the column group state.\n\nA header cell is said to be a if its attribute is in the row group state.\n\nA cell is said to be an if it contains no elements and its child text content, if any, consists only of ASCII whitespace.\n\nThe following shows how one might mark up the bottom part of table 45 of the :\n\nThis table could look like this:\n\nThe following shows how one might mark up the gross margin table on page 46 of Apple, Inc's 10-K filing for fiscal year 2008:\n\nThis table could look like this:\n\nThe following shows how one might mark up the operating expenses table from lower on the same page of that document:\n\nThis table could look like this:\n\nA form is a component of a web page that has form controls, such as text, buttons, checkboxes, range, or color picker controls. A user can interact with such a form, providing data that can then be sent to the server for further processing (e.g. returning the results of a search or calculation). No client-side scripting is needed in many cases, though an API is available so that scripts can augment the user experience or use forms for purposes other than submitting data to a server.\n\nWriting a form consists of several steps, which can be performed in any order: writing the user interface, implementing the server-side processing, and configuring the user interface to communicate with the server.\n\nFor the purposes of this brief introduction, we will create a pizza ordering form.\n\nAny form starts with a element, inside which are placed the controls. Most controls are represented by the element, which by default provides a text control. To label a control, the element is used; the label text and the control itself go inside the element. Each part of a form is considered a paragraph, and is typically separated from other parts using elements. Putting this together, here is how one might ask for the customer's name:\n\nTo let the user select the size of the pizza, we can use a set of radio buttons. Radio buttons also use the element, this time with a attribute with the value . To make the radio buttons work as a group, they are given a common name using the attribute. To group a batch of controls together, such as, in this case, the radio buttons, one can use the element. The title of such a group of controls is given by the first element in the , which has to be a element.\n\nChanges from the previous step are highlighted.\n\nTo pick toppings, we can use checkboxes. These use the element with a attribute with the value :\n\nThe pizzeria for which this form is being written is always making mistakes, so it needs a way to contact the customer. For this purpose, we can use form controls specifically for telephone numbers ( elements with their attribute set to ) and email addresses ( elements with their attribute set to ):\n\nWe can use an element with its attribute set to to ask for a delivery time. Many of these form controls have attributes to control exactly what values can be specified; in this case, three attributes of particular interest are , , and . These set the minimum time, the maximum time, and the interval between allowed values (in seconds). This pizzeria only delivers between 11am and 9pm, and doesn't promise anything better than 15 minute increments, which we can mark up as follows:\n\nThe element can be used to provide a multiline text control. In this instance, we are going to use it to provide a space for the customer to give delivery instructions:\n\nFinally, to make the form submittable we use the element:\n\nThe exact details for writing a server-side processor are out of scope for this specification. For the purposes of this introduction, we will assume that the script at is configured to accept submissions using the format, expecting the following parameters sent in an HTTP POST body:\n\nForm submissions are exposed to servers in a variety of ways, most commonly as HTTP GET or POST requests. To specify the exact method used, the attribute is specified on the element. This doesn't specify how the form data is encoded, though; to specify that, you use the attribute. You also have to specify the URL of the service that will handle the submitted data, using the attribute.\n\nFor each form control you want submitted, you then have to give a name that will be used to refer to the data in the submission. We already specified the name for the group of radio buttons; the same attribute ( ) also specifies the submission name. Radio buttons can be distinguished from each other in the submission by giving them different values, using the attribute.\n\nMultiple controls can have the same name; for example, here we give all the checkboxes the same name, and the server distinguishes which checkbox was checked by seeing which values are submitted with that name — like the radio buttons, they are also given unique values with the attribute.\n\nGiven the settings in the previous section, this all becomes:\n\nThere is no particular significance to the way some of the attributes have their values quoted and others don't. The HTML syntax allows a variety of equally valid ways to specify attributes, as discussed in the syntax section.\n\nFor example, if the customer entered \"Denise Lawrence\" as their name, \"555-321-8642\" as their telephone number, did not specify an email address, asked for a medium-sized pizza, selected the Extra Cheese and Mushroom toppings, entered a delivery time of 7pm, and left the delivery instructions text control blank, the user agent would submit the following to the online web service:\n\nForms can be annotated in such a way that the user agent will check the user's input before the form is submitted. The server still has to verify the input is valid (since hostile users can easily bypass the form validation), but it allows the user to avoid the wait incurred by having the server be the sole checker of the user's input.\n\nThe simplest annotation is the attribute, which can be specified on elements to indicate that the form is not to be submitted until a value is given. By adding this attribute to the customer name, pizza size, and delivery time fields, we allow the user agent to notify the user when the user submits the form without filling in those fields:\n\nIt is also possible to limit the length of the input, using the attribute. By adding this to the element, we can limit users to 1000 characters, preventing them from writing huge essays to the busy delivery drivers instead of staying focused and to the point:\n\nWhen a form is submitted, events are fired at each form control that is invalid. This can be useful for displaying a summary of the problems with the form, since typically the browser itself will only report one problem at a time.\n\nSome browsers attempt to aid the user by automatically filling form controls rather than having the user reenter their information each time. For example, a field asking for the user's telephone number can be automatically filled with the user's phone number.\n\nTo help the user agent with this, the attribute can be used to describe the field's purpose. In the case of this form, we have three fields that can be usefully annotated in this way: the information about who the pizza is to be delivered to. Adding this information looks like this:\n\nSome devices, in particular those with virtual keyboards can provide the user with multiple input modalities. For example, when typing in a credit card number the user may wish to only see keys for digits 0-9, while when typing in their name they may wish to see a form field that by default capitalizes each word.\n\nUsing the attribute we can select appropriate input modalities:\n\nThe difference between the field type, the autofill field name, and the input modality\n\nThe , , and attributes can seem confusingly similar. For instance, in all three cases, the string \" \" is a valid value. This section attempts to illustrate the difference between the three attributes and provides advice suggesting how to use them.\n\nThe attribute on elements decides what kind of control the user agent will use to expose the field. Choosing between different values of this attribute is the same choice as choosing whether to use an element, a element, a element, etc.\n\nThe attribute, in contrast, describes what the value that the user will enter actually represents. Choosing between different values of this attribute is the same choice as choosing what the label for the element will be.\n\nFirst, consider telephone numbers. If a page is asking for a telephone number from the user, the right form control to use is . However, which value to use depends on which phone number the page is asking for, whether they expect a telephone number in the international format or just the local format, and so forth.\n\nFor example, a page that forms part of a checkout process on an e-commerce site for a customer buying a gift to be shipped to a friend might need both the buyer's telephone number (in case of payment issues) and the friend's telephone number (in case of delivery issues). If the site expects international phone numbers (with the country code prefix), this could thus look like this:\n\nBut if the site only supports British customers and recipients, it might instead look like this (notice the use of rather than ):\n\nNow, consider a person's preferred languages. The right value is . However, there could be a number of different form controls used for the purpose: a text control ( ), a drop-down list ( ), radio buttons ( ), etc. It only depends on what kind of interface is desired.\n\nFinally, consider names. If a page just wants one name from the user, then the relevant control is . If the page is asking for the user's full name, then the relevant value is .\n\nIn this example, the \" \" keywords in the attributes' values tell the user agent that the two fields expect different names. Without them, the user agent could automatically fill the second field with the value given in the first field when the user gave a value to the first field.\n\nThe \" \" and \" \" parts of the keywords are opaque to the user agent; the user agent cannot guess, from those, that the two names are expected to be in Japanese and English respectively.\n\nSeparate from the choices regarding and , the attribute decides what kind of input modality (e.g., virtual keyboard) to use, when the control is a text control.\n\nConsider credit card numbers. The appropriate input type is not , as explained below; it is instead . To encourage the user agent to use a numeric input modality anyway (e.g., a virtual keyboard displaying only digits), the page would use\n\nIn this pizza delivery example, the times are specified in the format \"HH:MM\": two digits for the hour, in 24-hour format, and two digits for the time. (Seconds could also be specified, though they are not necessary in this example.)\n\nIn some locales, however, times are often expressed differently when presented to users. For example, in the United States, it is still common to use the 12-hour clock with an am/pm indicator, as in \"2pm\". In France, it is common to separate the hours from the minutes using an \"h\" character, as in \"14h00\".\n\nSimilar issues exist with dates, with the added complication that even the order of the components is not always consistent — for example, in Cyprus the first of February 2003 would typically be written \"1/2/03\", while that same date in Japan would typically be written as \"2003年02月01日\" — and even with numbers, where locales differ, for example, in what punctuation is used as the decimal separator and the thousands separator.\n\nIt is therefore important to distinguish the time, date, and number formats used in HTML and in form submissions, which are always the formats defined in this specification (and based on the well-established ISO 8601 standard for computer-readable date and time formats), from the time, date, and number formats presented to the user by the browser and accepted as input from the user by the browser.\n\nThe format used \"on the wire\", i.e., in HTML markup and in form submissions, is intended to be computer-readable and consistent irrespective of the user's locale. Dates, for instance, are always written in the format \"YYYY-MM-DD\", as in \"2003-02-01\". While some users might see this format, others might see it as \"01.02.2003\" or \"February 1, 2003\".\n\nThe time, date, or number given by the page in the wire format is then translated to the user's preferred presentation (based on user preferences or on the locale of the page itself), before being displayed to the user. Similarly, after the user inputs a time, date, or number using their preferred format, the user agent converts it back to the wire format before putting it in the DOM or submitting it.\n\nThis allows scripts in pages and on servers to process times, dates, and numbers in a consistent manner without needing to support dozens of different formats, while still supporting the users' needs.\n\nSee also the implementation notes regarding localization of form controls.\n\nMostly for historical reasons, elements in this section fall into several overlapping (but subtly different) categories in addition to the usual ones like flow content, phrasing content, and interactive content.\n\nA number of the elements are , which means they can have a form owner.\n\nThe form-associated elements fall into several subcategories:\n\nSome elements, not all of them form-associated, are categorized as . These are elements that can be associated with a element.\n\nThe element represents a hyperlink that can be manipulated through a collection of form-associated elements, some of which can represent editable values that can be submitted to a server for processing.\n\nThe attribute gives the character encodings that are to be used for the submission. If specified, the value must be an ASCII case-insensitive match for \" \". [ENCODING]\n\nThe attribute represents the 's name within the collection. The value must not be the empty string, and the value must be unique amongst the elements in the collection that it is in, if any.\n\nThe attribute is an enumerated attribute with the following keywords and states:\n\nThe attribute's missing value default and invalid value default are both the on state.\n\nThe , , , , and attributes are attributes for form submission.\n\nThe attribute on elements controls what kinds of links the elements create. The attribute's value must be a unordered set of unique space-separated tokens. The allowed keywords and their meanings are defined in an earlier section.\n\n's supported tokens are the keywords defined in HTML link types which are allowed on elements, impact the processing model, and are supported by the user agent. The possible supported tokens are , , and . 's supported tokens must only include the tokens from this list that the user agent implements the processing model for.\n\nThe IDL attribute must reflect the content attribute of the same name, limited to only known values.\n\nThe and IDL attributes must reflect the content attribute of the same name.\n\nThe IDL attribute must reflect the content attribute.\n\nThe IDL attribute must reflect the content attribute.\n\nThe IDL attribute must return an rooted at the element's root, whose filter matches listed elements whose form owner is the element, with the exception of elements whose attribute is in the Image Button state, which must, for historical reasons, be excluded from this particular collection.\n\nThe IDL attribute must return the number of nodes represented by the collection.\n\nThe supported property indices at any instant are the indices supported by the object returned by the attribute at that instant.\n\nTo determine the value of an indexed property for a element, the user agent must return the value returned by the method on the collection, when invoked with the given index as its argument.\n\nEach element has a mapping of names to elements called the . It is used to persist names of controls even when they change names.\n\nThe supported property names consist of the names obtained from the following algorithm, in the order obtained from this algorithm:\n• None Let be an initially empty ordered list of tuples consisting of a string, an element, a source, where the source is either id, name, or past, and, if the source is past, an age.\n• For each listed element whose form owner is the element, with the exception of any elements whose attribute is in the Image Button state:\n• None If has an attribute, add an entry to with that attribute's value as the string, as the element, and id as the source.\n• None If has a attribute, add an entry to with that attribute's value as the string, as the element, and name as the source.\n• For each element whose form owner is the element:\n• None If has an attribute, add an entry to with that attribute's value as the string, as the element, and id as the source.\n• None If has a attribute, add an entry to with that attribute's value as the string, as the element, and name as the source.\n• For each entry in the past names map, add an entry to with the 's name as the string, 's element as the element, past as the source, and the length of time has been in the past names map as the age.\n• None Sort by tree order of the element entry of each tuple, sorting entries with the same element by putting entries whose source is id first, then entries whose source is name, and finally entries whose source is past, and sorting entries with the same element and source by their age, oldest first.\n• None Remove any entries in that have the empty string as their name.\n• None Remove any entries in that have the same name as an earlier entry in the map.\n• None Return the list of names from , maintaining their relative order.\n\nTo determine the value of a named property for a element, the user agent must run the following steps:\n• None Let be a live object containing all the listed elements, whose form owner is the element, that have either an attribute or a attribute equal to , with the exception of elements whose attribute is in the Image Button state, in tree order.\n• None If is empty, let be a live object containing all the elements, whose form owner is the element, that have either an attribute or a attribute equal to , in tree order.\n• None If is empty, is the name of one of the entries in the element's past names map: return the object associated with in that map.\n• None If contains more than one node, return .\n• None Otherwise, contains exactly one node. Add a mapping from to the node in in the element's past names map, replacing the previous entry with the same name, if any.\n\nIf an element listed in a element's past names map changes form owner, then its entries must be removed from that map.\n\nThe method steps are to submit this from this, with submitted from method set to true.\n\nThe method, when invoked, must run the following steps:\n• If is not null, then:\n• None If is not a submit button, then throw a .\n• None If 's form owner is not this element, then throw a \" \" .\n• None Otherwise, set to this element.\n\nThe method, when invoked, must run the following steps:\n• None If the element is marked as locked for reset, then return.\n• None Unmark the element as locked for reset.\n\nIf the method is invoked, the user agent must of the element, and return true if the constraint validation return a positive result, and false if it returned a negative result.\n\nIf the method is invoked, the user agent must of the element, and return true if the constraint validation return a positive result, and false if it returned a negative result.\n\nThe element represents a caption in a user interface. The caption can be associated with a specific form control, known as the element's , either using the attribute, or by putting the form control inside the element itself.\n\nExcept where otherwise specified by the following rules, a element has no labeled control.\n\nThe attribute may be specified to indicate a form control with which the caption is to be associated. If the attribute is specified, the attribute's value must be the ID of a labelable element in the same tree as the element. If the attribute is specified and there is an element in the tree whose ID is equal to the value of the attribute, and the first such element in tree order is a labelable element, then that element is the element's labeled control.\n\nIf the attribute is not specified, but the element has a labelable element descendant, then the first such descendant in tree order is the element's labeled control.\n\nThe element's exact default presentation and behavior, in particular what its activation behavior might be, if anything, should match the platform's label behavior. The activation behavior of a element for events targeted at interactive content descendants of a element, and any descendants of those interactive content descendants, must be to do nothing.\n\nForm-associated custom elements are labelable elements, so for user agents where the element's activation behavior impacts the labeled control, both built-in and custom elements will be impacted.\n\nThe IDL attribute must reflect the content attribute.\n\nThe IDL attribute must return the element's labeled control, if any, or null if there isn't one.\n\nThe IDL attribute must run the following steps:\n• None If the element has no labeled control, then return null.\n• None If the element's labeled control is not a form-associated element, then return null.\n• None Return the element's labeled control's form owner (which can still be null).\n\nThe IDL attribute on the element is different from the IDL attribute on listed form-associated elements, and the element does not have a content attribute.\n\nLabelable elements and all elements have a live object associated with them that represents the list of elements, in tree order, whose labeled control is the element in question. The IDL attribute of labelable elements that are not form-associated custom elements, and the IDL attribute of elements, on getting, must return that object, and that same value must always be returned, unless this element is an element whose attribute is in the Hidden state, in which case it must instead return null.\n\nForm-associated custom elements don't have a IDL attribute. Instead, their object has a IDL attribute. On getting, it must throw a \" \" if the target element is not a form-associated custom element. Otherwise, it must return that object, and that same value must always be returned.\n\nThe element represents a typed data field, usually with a form control to allow the user to edit the data.\n\nThe attribute controls the data type (and associated control) of the element. It is an enumerated attribute with the following keywords and states:\n\nThe attribute's missing value default and invalid value default are both the Text state.\n\nWhich of the , , , , , , , , , , , , , , , , , , , , , , , , , , and content attributes, the , , , , and IDL attributes, the method, the , , and , IDL attributes, the and methods, the and methods, and the and events to an element depends on the state of its attribute. The subsections that define each type also clearly define in normative \"bookkeeping\" sections which of these feature apply, and which , to each type. The behavior of these features depends on whether they apply or not, as defined in their various sections (q.v. for content attributes, for APIs, for events).\n\nThe following table is non-normative and summarizes which of those content attributes, IDL attributes, methods, and events apply to each state:\n\n† If the control has no selectable text, the method results in a no-op, with no \" \" .\n\nSome states of the attribute define a .\n\nEach element has a value, which is exposed by the IDL attribute. Some states define an , an , an , and an , which are used by , , , , , and .\n\nAn element's dirty value flag must be set to true whenever the user interacts with the control in a way that changes the value. (It is also set to true when the value is programmatically changed, as described in the definition of the IDL attribute.)\n\nThe content attribute gives the default value of the element. When the content attribute is added, set, or removed, if the control's dirty value flag is false, the user agent must set the value of the element to the value of the content attribute, if there is one, or the empty string otherwise, and then run the current value sanitization algorithm, if one is defined.\n\nEach element has a checkedness, which is exposed by the IDL attribute.\n\nEach element has a boolean . When it is true, the element is said to have a . The dirty checkedness flag must be initially set to false when the element is created, and must be set to true whenever the user interacts with the control in a way that changes the checkedness.\n\nThe content attribute is a boolean attribute that gives the default checkedness of the element. When the content attribute is added, if the control does not have dirty checkedness, the user agent must set the checkedness of the element to true; when the content attribute is removed, if the control does not have dirty checkedness, the user agent must set the checkedness of the element to false.\n\nThe reset algorithm for elements is to set its user validity, dirty value flag, and dirty checkedness flag back to false, set the value of the element to the value of the content attribute, if there is one, or the empty string otherwise, set the checkedness of the element to true if the element has a content attribute and false if it does not, empty the list of selected files, and then invoke the value sanitization algorithm, if the attribute's current state defines one.\n\nEach element can be mutable. Except where otherwise specified, an element is always mutable. Similarly, except where otherwise specified, the user agent should not allow the user to modify the element's value or checkedness.\n\nWhen an element is disabled, it is not mutable.\n\nThe attribute can also in some cases (e.g. for the state, but not the Checkbox state) stop an element from being mutable.\n\nThe element can . A picker is a user interface element that allows the end user to choose a value. Whether an element supports a picker depends on the attribute state and implementation-defined behavior. An element must support a picker when its attribute is in the File Upload state.\n\nThe cloning steps for elements given , , and are to propagate the value, dirty value flag, checkedness, and dirty checkedness flag from to .\n\nThe activation behavior for elements , given , are these steps:\n• None If is not mutable, and 's type attribute is neither in the Checkbox nor in the Radio state, then return.\n• None Run 's , if any, and do nothing otherwise.\n• None If has a form owner and 's type attribute is not in the Button state, then return.\n• None Run the popover target attribute activation behavior given and 's target.\n\nRecall that an element's activation behavior runs for both user-initiated activations and for synthetic activations (e.g., via ). User agents might also have behaviors for a given control — not specified here — that are triggered only by true user-initiated activations. A common choice is to show the picker, if applicable, for the control. In contrast, the input activation behavior only shows pickers for the special historical cases of the File Upload and Color states.\n\nThe legacy-pre-activation behavior for elements are these steps:\n• None If this element's attribute is in the Checkbox state, then set this element's checkedness to its opposite value (i.e. true if it is false, false if it is true) and set this element's IDL attribute to false.\n• None If this element's attribute is in the Radio Button state, then get a reference to the element in this element's radio button group that has its checkedness set to true, if any, and then set this element's checkedness to true.\n\nThe legacy-canceled-activation behavior for elements are these steps:\n• None If the element's attribute is in the Checkbox state, then set the element's checkedness and the element's IDL attribute back to the values they had before the legacy-pre-activation behavior was run.\n• None If this element's attribute is in the Radio Button state, then if the element to which a reference was obtained in the legacy-pre-activation behavior, if any, is still in what is now this element's radio button group, if it still has one, and if so, setting that element's checkedness to true; or else, if there was no such element, or that element is no longer in this element's radio button group, or if this element no longer has a radio button group, setting this element's checkedness to false.\n\nWhen an element is first created, the element's rendering and behavior must be set to the rendering and behavior defined for the attribute's state, and the value sanitization algorithm, if one is defined for the attribute's state, must be invoked.\n\nThe attribute represents the element's name. The attribute controls how the element's directionality is submitted. The attribute is used to make the control non-interactive and to prevent its value from being submitted. The attribute is used to explicitly associate the element with its form owner. The attribute controls how the user agent provides autofill behavior.\n\nThe IDL attribute must initially be set to false. On getting, it must return the last value it was set to. On setting, it must be set to the new value. It has no effect except for changing the appearance of checkbox controls.\n\nThe , , , , , , , , , , , and IDL attributes must reflect the respective content attributes of the same name. The IDL attribute must reflect the content attribute. The IDL attribute must reflect the content attribute. The IDL attribute must reflect the content attribute. The IDL attribute must reflect the content attribute.\n\nThe IDL attribute must reflect the content attribute, limited to only known values. The IDL attribute must reflect the respective content attribute of the same name, limited to only known values. The IDL attribute must reflect the content attribute, limited to only non-negative numbers. The IDL attribute must reflect the content attribute, limited to only non-negative numbers.\n\nThe IDL attributes and must return the rendered width and height of the image, in CSS pixels, if an image is being rendered; or else the natural width and height of the image, in CSS pixels, if an image is available but not being rendered; or else 0, if no image is available. When the element's attribute is not in the Image Button state, then no image is available. [CSS]\n\nOn setting, they must act as if they reflected the respective content attributes of the same name.\n\nThe , , and IDL attributes, and the , , and methods, are part of the constraint validation API. The IDL attribute provides a list of the element's s. The , , , , , and methods and IDL attributes expose the element's text selection. The , , and IDL attributes are part of the element's forms API.\n\nWhen an element's attribute is in the Hidden state, the rules in this section apply.\n\nThe element represents a value that is not intended to be examined or manipulated by the user.\n\nConstraint validation: If an element's attribute is in the Hidden state, it is barred from constraint validation.\n\nIf the attribute is present and has a value that is an ASCII case-insensitive match for \" \", then the element's attribute must be omitted.\n\nWhen an element's attribute is in the Text state or the Search state, the rules in this section apply.\n\nThe element represents a one line plain text edit control for the element's value.\n\nThe difference between the Text state and the Search state is primarily stylistic: on platforms where search controls are distinguished from regular text controls, the Search state might result in an appearance consistent with the platform's search controls rather than appearing like a regular text control.\n\nIf the element is mutable, its value should be editable by the user. User agents must not allow users to insert U+000A LINE FEED (LF) or U+000D CARRIAGE RETURN (CR) characters into the element's value.\n\nIf the element is mutable, the user agent should allow the user to change the writing direction of the element, setting it either to a left-to-right writing direction or a right-to-left writing direction. If the user does so, the user agent must then run the following steps:\n• None Set the element's attribute to \" \" if the user selected a left-to-right writing direction, and \" \" if the user selected a right-to-left writing direction.\n• None Queue an element task on the user interaction task source given the element to fire an event named at the element, with the and attributes initialized to true.\n\nThe attribute, if specified, must have a value that contains no U+000A LINE FEED (LF) or U+000D CARRIAGE RETURN (CR) characters.\n\nThe value sanitization algorithm is as follows: Strip newlines from the value.\n\nWhen an element's attribute is in the Telephone state, the rules in this section apply.\n\nThe element represents a control for editing a telephone number given in the element's value.\n\nIf the element is mutable, its value should be editable by the user. User agents may change the spacing and, with care, the punctuation of values that the user enters. User agents must not allow users to insert U+000A LINE FEED (LF) or U+000D CARRIAGE RETURN (CR) characters into the element's value.\n\nThe attribute, if specified, must have a value that contains no U+000A LINE FEED (LF) or U+000D CARRIAGE RETURN (CR) characters.\n\nThe value sanitization algorithm is as follows: Strip newlines from the value.\n\nUnlike the URL and Email types, the Telephone type does not enforce a particular syntax. This is intentional; in practice, telephone number fields tend to be free-form fields, because there are a wide variety of valid phone numbers. Systems that need to enforce a particular format are encouraged to use the attribute or the method to hook into the client-side validation mechanism.\n\nWhen an element's attribute is in the URL state, the rules in this section apply.\n\nThe element represents a control for editing a single absolute URL given in the element's value.\n\nIf the element is mutable, the user agent should allow the user to change the URL represented by its value. User agents may allow the user to set the value to a string that is not a valid absolute URL, but may also or instead automatically escape characters entered by the user so that the value is always a valid absolute URL (even if that isn't the actual value seen and edited by the user in the interface). User agents should allow the user to set the value to the empty string. User agents must not allow users to insert U+000A LINE FEED (LF) or U+000D CARRIAGE RETURN (CR) characters into the value.\n\nThe attribute, if specified and not empty, must have a value that is a valid URL potentially surrounded by spaces that is also an absolute URL.\n\nThe value sanitization algorithm is as follows: Strip newlines from the value, then strip leading and trailing ASCII whitespace from the value.\n\nConstraint validation: While the value of the element is neither the empty string nor a valid absolute URL, the element is suffering from a type mismatch.\n\nWhen an element's attribute is in the Email state, the rules in this section apply.\n\nHow the Email state operates depends on whether the attribute is specified or not.\n\nWhen the attribute is set or removed, the user agent must run the value sanitization algorithm.\n\nA is a string that matches the production of the following ABNF, the character set for which is Unicode. This ABNF implements the extensions described in RFC 1123. [ABNF] [RFC5322] [RFC1034] [RFC1123]\n\nThis requirement is a willful violation of RFC 5322, which defines a syntax for email addresses that is simultaneously too strict (before the \"@\" character), too vague (after the \"@\" character), and too lax (allowing comments, whitespace characters, and quoted strings in manners unfamiliar to most users) to be of practical use here.\n\nA is a set of comma-separated tokens, where each token is itself a valid email address. To obtain the list of tokens from a valid email address list, an implementation must split the string on commas.\n\nWhen an element's attribute is in the Password state, the rules in this section apply.\n\nThe element represents a one line plain text edit control for the element's value. The user agent should obscure the value so that people other than the user cannot see it.\n\nIf the element is mutable, its value should be editable by the user. User agents must not allow users to insert U+000A LINE FEED (LF) or U+000D CARRIAGE RETURN (CR) characters into the value.\n\nThe attribute, if specified, must have a value that contains no U+000A LINE FEED (LF) or U+000D CARRIAGE RETURN (CR) characters.\n\nThe value sanitization algorithm is as follows: Strip newlines from the value.\n\nWhen an element's attribute is in the state, the rules in this section apply.\n\nThe element a control for setting the element's to a string representing a specific .\n\nIf the element is , the user agent should allow the user to change the represented by its , as obtained by from it. User agents must not allow the user to set the to a non-empty string that is not a . If the user agent provides a user interface for selecting a , then the must be set to a representing the user's selection. User agents should allow the user to set the to the empty string.\n\nConstraint validation: While the user interface describes input that the user agent cannot convert to a , the control is .\n\nSee the introduction section for a discussion of the difference between the input format and submission format for date, time, and number form controls, and the implementation notes regarding localization of form controls.\n\nThe attribute, if specified and not empty, must have a value that is a .\n\nThe is as follows: If the of the element is not a , then set it to the empty string instead.\n\nThe attribute, if specified, must have a value that is a . The attribute, if specified, must have a value that is a .\n\nThe attribute is expressed in days. The is 86,400,000 (which converts the days to milliseconds, as used in the other algorithms). The is 1 day.\n\nWhen the element is , the user agent may round the element's to the nearest for which the element would not .\n\nThe , given a string , is as follows: If from results in an error, then return an error; otherwise, return the number of milliseconds elapsed from midnight UTC on the morning of 1970-01-01 (the time represented by the value \" \") to midnight UTC on the morning of the parsed , ignoring leap seconds.\n\nThe , given a number , is as follows: Return a that represents the that, in UTC, is current milliseconds after midnight UTC on the morning of 1970-01-01 (the time represented by the value \" \").\n\nThe , given a string , is as follows: If from results in an error, then return an error; otherwise, return representing midnight UTC on the morning of the parsed .\n\nThe , given a object , is as follows: Return a that represents the current at the time represented by in the UTC time zone.\n\nWhen an element's attribute is in the Month state, the rules in this section apply.\n\nThe element represents a control for setting the element's value to a string representing a specific month.\n\nIf the element is mutable, the user agent should allow the user to change the month represented by its value, as obtained by parsing a month from it. User agents must not allow the user to set the value to a non-empty string that is not a valid month string. If the user agent provides a user interface for selecting a month, then the value must be set to a valid month string representing the user's selection. User agents should allow the user to set the value to the empty string.\n\nConstraint validation: While the user interface describes input that the user agent cannot convert to a valid month string, the control is suffering from bad input.\n\nSee the introduction section for a discussion of the difference between the input format and submission format for date, time, and number form controls, and the implementation notes regarding localization of form controls.\n\nThe attribute, if specified and not empty, must have a value that is a valid month string.\n\nThe value sanitization algorithm is as follows: If the value of the element is not a valid month string, then set it to the empty string instead.\n\nThe attribute, if specified, must have a value that is a valid month string. The attribute, if specified, must have a value that is a valid month string.\n\nThe attribute is expressed in months. The step scale factor is 1 (there is no conversion needed as the algorithms use months). The default step is 1 month.\n\nWhen the element is suffering from a step mismatch, the user agent may round the element's value to the nearest month for which the element would not suffer from a step mismatch.\n\nThe algorithm to convert a string to a number, given a string , is as follows: If parsing a month from results in an error, then return an error; otherwise, return the number of months between January 1970 and the parsed month.\n\nThe algorithm to convert a number to a string, given a number , is as follows: Return a valid month string that represents the month that has months between it and January 1970.\n\nThe , given a string , is as follows: If parsing a month from results in an error, then return an error; otherwise, return representing midnight UTC on the morning of the first day of the parsed month.\n\nThe , given a object , is as follows: Return a valid month string that represents the month current at the time represented by in the UTC time zone.\n\nWhen an element's attribute is in the Week state, the rules in this section apply.\n\nThe element represents a control for setting the element's value to a string representing a specific week.\n\nIf the element is mutable, the user agent should allow the user to change the week represented by its value, as obtained by parsing a week from it. User agents must not allow the user to set the value to a non-empty string that is not a valid week string. If the user agent provides a user interface for selecting a week, then the value must be set to a valid week string representing the user's selection. User agents should allow the user to set the value to the empty string.\n\nConstraint validation: While the user interface describes input that the user agent cannot convert to a valid week string, the control is suffering from bad input.\n\nSee the introduction section for a discussion of the difference between the input format and submission format for date, time, and number form controls, and the implementation notes regarding localization of form controls.\n\nThe attribute, if specified and not empty, must have a value that is a valid week string.\n\nThe value sanitization algorithm is as follows: If the value of the element is not a valid week string, then set it to the empty string instead.\n\nThe attribute, if specified, must have a value that is a valid week string. The attribute, if specified, must have a value that is a valid week string.\n\nThe attribute is expressed in weeks. The step scale factor is 604,800,000 (which converts the weeks to milliseconds, as used in the other algorithms). The default step is 1 week. The default step base is −259,200,000 (the start of week 1970-W01).\n\nWhen the element is suffering from a step mismatch, the user agent may round the element's value to the nearest week for which the element would not suffer from a step mismatch.\n\nThe algorithm to convert a string to a number, given a string , is as follows: If parsing a week string from results in an error, then return an error; otherwise, return the number of milliseconds elapsed from midnight UTC on the morning of 1970-01-01 (the time represented by the value \" \") to midnight UTC on the morning of the Monday of the parsed week, ignoring leap seconds.\n\nThe algorithm to convert a number to a string, given a number , is as follows: Return a valid week string that represents the week that, in UTC, is current milliseconds after midnight UTC on the morning of 1970-01-01 (the time represented by the value \" \").\n\nThe , given a string , is as follows: If parsing a week from results in an error, then return an error; otherwise, return representing midnight UTC on the morning of the Monday of the parsed week.\n\nThe , given a object , is as follows: Return a valid week string that represents the week current at the time represented by in the UTC time zone.\n\nWhen an element's attribute is in the Time state, the rules in this section apply.\n\nThe element represents a control for setting the element's value to a string representing a specific time.\n\nIf the element is mutable, the user agent should allow the user to change the time represented by its value, as obtained by parsing a time from it. User agents must not allow the user to set the value to a non-empty string that is not a valid time string. If the user agent provides a user interface for selecting a time, then the value must be set to a valid time string representing the user's selection. User agents should allow the user to set the value to the empty string.\n\nConstraint validation: While the user interface describes input that the user agent cannot convert to a valid time string, the control is suffering from bad input.\n\nSee the introduction section for a discussion of the difference between the input format and submission format for date, time, and number form controls, and the implementation notes regarding localization of form controls.\n\nThe attribute, if specified and not empty, must have a value that is a valid time string.\n\nThe value sanitization algorithm is as follows: If the value of the element is not a valid time string, then set it to the empty string instead.\n\nThe attribute, if specified, must have a value that is a valid time string. The attribute, if specified, must have a value that is a valid time string.\n\nThe attribute is expressed in seconds. The step scale factor is 1000 (which converts the seconds to milliseconds, as used in the other algorithms). The default step is 60 seconds.\n\nWhen the element is suffering from a step mismatch, the user agent may round the element's value to the nearest time for which the element would not suffer from a step mismatch.\n\nThe algorithm to convert a string to a number, given a string , is as follows: If parsing a time from results in an error, then return an error; otherwise, return the number of milliseconds elapsed from midnight to the parsed time on a day with no time changes.\n\nThe algorithm to convert a number to a string, given a number , is as follows: Return a valid time string that represents the time that is milliseconds after midnight on a day with no time changes.\n\nThe , given a string , is as follows: If parsing a time from results in an error, then return an error; otherwise, return representing the parsed time in UTC on 1970-01-01.\n\nThe , given a object , is as follows: Return a valid time string that represents the UTC time component that is represented by .\n\nWhen an element's attribute is in the state, the rules in this section apply.\n\nThe element a control for setting the element's to a string representing a , with no time-zone offset information.\n\nIf the element is , the user agent should allow the user to change the represented by its , as obtained by from it. User agents must not allow the user to set the to a non-empty string that is not a . If the user agent provides a user interface for selecting a , then the must be set to a representing the user's selection. User agents should allow the user to set the to the empty string.\n\nConstraint validation: While the user interface describes input that the user agent cannot convert to a , the control is .\n\nSee the introduction section for a discussion of the difference between the input format and submission format for date, time, and number form controls, and the implementation notes regarding localization of form controls.\n\nThe attribute, if specified and not empty, must have a value that is a .\n\nThe is as follows: If the of the element is a , then set it to a representing the same date and time; otherwise, set it to the empty string instead.\n\nThe attribute, if specified, must have a value that is a . The attribute, if specified, must have a value that is a .\n\nThe attribute is expressed in seconds. The is 1000 (which converts the seconds to milliseconds, as used in the other algorithms). The is 60 seconds.\n\nWhen the element is , the user agent may round the element's to the nearest for which the element would not .\n\nThe , given a string , is as follows: If from results in an error, then return an error; otherwise, return the number of milliseconds elapsed from midnight on the morning of 1970-01-01 (the time represented by the value \" \") to the parsed , ignoring leap seconds.\n\nThe , given a number , is as follows: Return a that represents the date and time that is milliseconds after midnight on the morning of 1970-01-01 (the time represented by the value \" \").\n\nSee the note on historical dates in the state section.\n\nWhen an element's attribute is in the Number state, the rules in this section apply.\n\nThe element represents a control for setting the element's value to a string representing a number.\n\nIf the element is mutable, the user agent should allow the user to change the number represented by its value, as obtained from applying the rules for parsing floating-point number values to it. User agents must not allow the user to set the value to a non-empty string that is not a valid floating-point number. If the user agent provides a user interface for selecting a number, then the value must be set to the best representation of the number representing the user's selection as a floating-point number. User agents should allow the user to set the value to the empty string.\n\nConstraint validation: While the user interface describes input that the user agent cannot convert to a valid floating-point number, the control is suffering from bad input.\n\nThis specification does not define what user interface user agents are to use; user agent vendors are encouraged to consider what would best serve their users' needs. For example, a user agent in Persian or Arabic markets might support Persian and Arabic numeric input (converting it to the format required for submission as described above). Similarly, a user agent designed for Romans might display the value in Roman numerals rather than in decimal; or (more realistically) a user agent designed for the French market might display the value with apostrophes between thousands and commas before the decimals, and allow the user to enter a value in that manner, internally converting it to the submission format described above.\n\nThe attribute, if specified and not empty, must have a value that is a valid floating-point number.\n\nThe value sanitization algorithm is as follows: If the value of the element is not a valid floating-point number, then set it to the empty string instead.\n\nThe attribute, if specified, must have a value that is a valid floating-point number. The attribute, if specified, must have a value that is a valid floating-point number.\n\nThe step scale factor is 1. The default step is 1 (allowing only integers to be selected by the user, unless the step base has a non-integer value).\n\nWhen the element is suffering from a step mismatch, the user agent may round the element's value to the nearest number for which the element would not suffer from a step mismatch. If there are two such numbers, user agents are encouraged to pick the one nearest positive infinity.\n\nThe algorithm to convert a string to a number, given a string , is as follows: If applying the rules for parsing floating-point number values to results in an error, then return an error; otherwise, return the resulting number.\n\nThe algorithm to convert a number to a string, given a number , is as follows: Return a valid floating-point number that represents .\n\nThe state is not appropriate for input that happens to only consist of numbers but isn't strictly speaking a number. For example, it would be inappropriate for credit card numbers or US postal codes. A simple way of determining whether to use is to consider whether it would make sense for the input control to have a spinbox interface (e.g. with \"up\" and \"down\" arrows). Getting a credit card number wrong by 1 in the last digit isn't a minor mistake, it's as wrong as getting every digit incorrect. So it would not make sense for the user to select a credit card number using \"up\" and \"down\" buttons. When a spinbox interface is not appropriate, is probably the right choice (possibly with an or attribute).\n\nWhen an element's attribute is in the Range state, the rules in this section apply.\n\nThe element represents a control for setting the element's value to a string representing a number, but with the caveat that the exact value is not important, letting UAs provide a simpler interface than they do for the Number state.\n\nIf the element is mutable, the user agent should allow the user to change the number represented by its value, as obtained from applying the rules for parsing floating-point number values to it. User agents must not allow the user to set the value to a string that is not a valid floating-point number. If the user agent provides a user interface for selecting a number, then the value must be set to a best representation of the number representing the user's selection as a floating-point number. User agents must not allow the user to set the value to the empty string.\n\nConstraint validation: While the user interface describes input that the user agent cannot convert to a valid floating-point number, the control is suffering from bad input.\n\nThe attribute, if specified, must have a value that is a valid floating-point number.\n\nThe value sanitization algorithm is as follows: If the value of the element is not a valid floating-point number, then set it to the best representation, as a floating-point number, of the default value.\n\nThe is the minimum plus half the difference between the minimum and the maximum, unless the maximum is less than the minimum, in which case the default value is the minimum.\n\nWhen the element is suffering from an underflow, the user agent must set the element's value to the best representation, as a floating-point number, of the minimum.\n\nWhen the element is suffering from an overflow, if the maximum is not less than the minimum, the user agent must set the element's value to a valid floating-point number that represents the maximum.\n\nWhen the element is suffering from a step mismatch, the user agent must round the element's value to the nearest number for which the element would not suffer from a step mismatch, and which is greater than or equal to the minimum, and, if the maximum is not less than the minimum, which is less than or equal to the maximum, if there is a number that matches these constraints. If two numbers match these constraints, then user agents must use the one nearest to positive infinity.\n\nFor example, the markup results in a range control whose initial value is 60.\n\nIn this state, the range and step constraints are enforced even during user input, and there is no way to set the value to the empty string.\n\nThe attribute, if specified, must have a value that is a valid floating-point number. The default minimum is 0. The attribute, if specified, must have a value that is a valid floating-point number. The default maximum is 100.\n\nThe step scale factor is 1. The default step is 1 (allowing only integers, unless the attribute has a non-integer value).\n\nThe algorithm to convert a string to a number, given a string , is as follows: If applying the rules for parsing floating-point number values to results in an error, then return an error; otherwise, return the resulting number.\n\nThe algorithm to convert a number to a string, given a number , is as follows: Return the best representation, as a floating-point number, of .\n\nWhen an element's attribute is in the Color state, the rules in this section apply.\n\nThe element represents a color well control, for setting the element's value to a string representing the serialization of a CSS color.\n\nIn this state, there is always a CSS color picked, and there is no way for the end user to set the value to the empty string.\n\nThe attribute is a boolean attribute. If present, it indicates the CSS color's alpha component can be manipulated by the end user and does not have to be fully opaque.\n\nThe attribute indicates the color space of the serialized CSS color. It also hints at the desired user interface for selecting a CSS color. It is an enumerated attribute with the following keywords and states:\n\nThe attribute's missing value default and invalid value default are both the Limited sRGB state.\n\nWhenever the element's or attributes are changed, the user agent must run given the element.\n\nIf the element is mutable, the user agent should allow the user to change the color represented by its value, as obtained from parsing it. User agents must not allow the user to set the value to a string that running for the element would not set it to. If the user agent provides a user interface for selecting a CSS color, then the value must be set to the result of serializing a color well control color given the element and the end user's selection.\n\nThe input activation behavior for such an element is to show the picker, if applicable, for .\n\nConstraint validation: While the element's value is not the empty string and parsing it returns failure, the control is suffering from bad input.\n\nThe attribute, if specified and not the empty string, must have a value that is a CSS color.\n\nThe value sanitization algorithm is as follows: Run for the element.\n\nTo , given an element :\n• None Assert: is an element whose attribute is in the Color state.\n• None Let be the result of parsing 's value.\n• None If is failure, then set to opaque black.\n• None Set 's value to the result of serializing a color well control color given and .\n\nTo , given an element and a CSS color :\n• None Assert: is an element whose attribute is in the Color state.\n• None If 's attribute is not specified, then set 's alpha component to be fully opaque.\n• If 's attribute is in the Limited sRGB state:\n• None Set to converted to the 'srgb' color space.\n• None Round each of 's components so they are in the range 0 to 255, inclusive. Components are to be rounded towards +∞.\n• If 's attribute is not specified, then set to true. This intentionally uses a different serialization path for compatibility with an earlier version of the color well control.\n• None Otherwise, set to converted to using the 'color()' function.\n• \n• None Assert: 's attribute is in the Display P3 state.\n• None Set to converted to the 'display-p3' color space.\n• None Return the result of serializing . If is true, then do so with HTML-compatible serialization requested.\n\nWhen an element's attribute is in the Checkbox state, the rules in this section apply.\n\nThe element represents a two-state control that represents the element's checkedness state. If the element's checkedness state is true, the control represents a positive selection, and if it is false, a negative selection. If the element's IDL attribute is set to true, then the control's selection should be obscured as if the control was in a third, indeterminate, state.\n\nThe control is never a true tri-state control, even if the element's IDL attribute is set to true. The IDL attribute only gives the appearance of a third state.\n\nThe input activation behavior is to run the following steps:\n• None If the element is not connected, then return.\n• None Fire an event named at the element with the and attributes initialized to true.\n• None Fire an event named at the element with the attribute initialized to true.\n\nConstraint validation: If the element is required and its checkedness is false, then the element is suffering from being missing.\n\nWhen an element's attribute is in the Radio Button state, the rules in this section apply.\n\nThe element represents a control that, when used in conjunction with other elements, forms a radio button group in which only one control can have its checkedness state set to true. If the element's checkedness state is true, the control represents the selected control in the group, and if it is false, it indicates a control in the group that is not selected.\n\nThe that contains an element also contains all the other elements that fulfill all of the following conditions:\n• The element 's attribute is in the Radio Button state.\n• Either and have the same form owner, or they both have no form owner.\n• Both and are in the same tree.\n• They both have a attribute, their attributes are not empty, and the value of 's attribute equals the value of 's attribute.\n\nA tree must not contain an element whose radio button group contains only that element.\n\nWhen any of the following phenomena occur, if the element's checkedness state is true after the occurrence, the checkedness state of all the other elements in the same radio button group must be set to false:\n• The element's checkedness state is set to true (for whatever reason).\n• The element's attribute is set, changed, or removed.\n• A type change is signalled for the element.\n\nThe input activation behavior is to run the following steps:\n• None If the element is not connected, then return.\n• None Fire an event named at the element with the and attributes initialized to true.\n• None Fire an event named at the element with the attribute initialized to true.\n\nConstraint validation: If an element in the radio button group is required, and all of the elements in the radio button group have a checkedness that is false, then the element is suffering from being missing.\n\nIf none of the radio buttons in a radio button group are checked, then they will all be initially unchecked in the interface, until such time as one of them is checked (either by the user or by script).\n\nWhen an element's attribute is in the File Upload state, the rules in this section apply.\n\nThe element represents a list of , each file consisting of a filename, a file type, and a file body (the contents of the file).\n\nFilenames must not contain path components, even in the case that a user has selected an entire directory hierarchy or multiple files with the same name from different directories. , for the purposes of the File Upload state, are those parts of filenames that are separated by U+005C REVERSE SOLIDUS character (\\) characters.\n\nUnless the attribute is set, there must be no more than one file in the list of selected files.\n\nThe input activation behavior for such an element is to show the picker, if applicable, for .\n\nIf the element is mutable, the user agent should allow the user to change the files on the list in other ways also, e.g., adding or removing files by drag-and-drop. When the user does so, the user agent must for the element.\n\nIf the element is not mutable, the user agent must not allow the user to change the element's selection.\n\nTo for an element :\n• Queue an element task on the user interaction task source given and the following steps:\n• None Update 's selected files so that it represents the user's selection.\n• None Fire an event named at the element, with the and attributes initialized to true.\n• None Fire an event named at the element, with the attribute initialized to true.\n\nConstraint validation: If the element is required and the list of selected files is empty, then the element is suffering from being missing.\n\nThe attribute may be specified to provide user agents with a hint of what file types will be accepted.\n\nIf specified, the attribute must consist of a set of comma-separated tokens, each of which must be an ASCII case-insensitive match for one of the following:\n\nThe tokens must not be ASCII case-insensitive matches for any of the other tokens (i.e. duplicates are not allowed). To obtain the list of tokens from the attribute, the user agent must split the attribute value on commas.\n\nUser agents may use the value of this attribute to display a more appropriate user interface than a generic file picker. For instance, given the value , a user agent could offer the user the option of using a local camera or selecting a photograph from their photo collection; given the value , a user agent could offer the user the option of recording a clip using a headset microphone.\n\nUser agents should prevent the user from selecting files that are not accepted by one (or more) of these tokens.\n\nAuthors are encouraged to specify both any MIME types and any corresponding extensions when looking for data in a specific format.\n\nExtensions tend to be ambiguous (e.g. there are an untold number of formats that use the \" \" extension, and users can typically quite easily rename their files to have a \" \" extension even if they are not Microsoft Word documents), and MIME types tend to be unreliable (e.g. many formats have no formally registered types, and many formats are in practice labeled using a number of different MIME types). Authors are reminded that, as usual, data received from a client should be treated with caution, as it may not be in an expected format even if the user is not hostile and the user agent fully obeyed the attribute's requirements.\n\nWhen an element's attribute is in the Submit Button state, the rules in this section apply.\n\nThe element represents a button that, when activated, submits the form. If the element has a attribute, the button's label must be the value of that attribute; otherwise, it must be an implementation-defined string that means \"Submit\" or some such. The element is a button, specifically a submit button.\n\nSince the default label is implementation-defined, and the width of the button typically depends on the button's label, the button's width can leak a few bits of fingerprintable information. These bits are likely to be strongly correlated to the identity of the user agent and the user's locale.\n\nThe element's input activation behavior given is as follows:\n• None If the element does not have a form owner, then return.\n• None If the element's node document is not fully active, then return.\n• None Submit the element's form owner from the element with userInvolvement set to 's user navigation involvement.\n\nThe , , , , and attributes are attributes for form submission.\n\nThe attribute can be used to make submit buttons that do not trigger the constraint validation.\n\nWhen an element's attribute is in the Image Button state, the rules in this section apply.\n\nThe element represents either an image from which a user can select a coordinate and submit the form, or alternatively a button from which the user can submit the form. The element is a button, specifically a submit button.\n\nThe coordinate is sent to the server during form submission by sending two entries for the element, derived from the name of the control but with \" \" and \" \" appended to the name with the and components of the coordinate respectively.\n\nThe image is given by the attribute. The attribute must be present, and must contain a valid non-empty URL potentially surrounded by spaces referencing a non-interactive, optionally animated, image resource that is neither paged nor scripted.\n\nWhen any of the these events occur\n• the element's attribute is first set to the Image Button state (possibly when the element is first created), and the attribute is present\n• the element's attribute is changed back to the Image Button state, and the attribute is present, and its value has changed since the last time the attribute was in the Image Button state\n• the element's attribute is in the Image Button state, and the attribute is set or changed\n\nthen unless the user agent cannot support images, or its support for images has been disabled, or the user agent only fetches images on demand, or the attribute's value is the empty string, run these steps:\n• None Let be the result of encoding-parsing a URL given the attribute's value, relative to the element's node document.\n• None If is failure, then return.\n• None Let be a new request whose URL is , client is the element's node document's relevant settings object, destination is \" \", initiator type is \" \", credentials mode is \" \", and whose use-URL-credentials flag is set.\n• Fetch , with processResponseEndOfBody set to the following steps given response :\n• None If the download was successful and the image is available, queue an element task on the user interaction task source given the element to fire an event named at the element.\n• None Otherwise, if the fetching process fails without a response from the remote server, or completes but the image is not a valid or supported image, then queue an element task on the user interaction task source given the element to fire an event named on the element.\n\nFetching the image must delay the load event of the element's node document until the task that is queued by the networking task source once the resource has been fetched (defined below) has been run.\n\nIf the image was successfully obtained, with no network errors, and the image's type is a supported image type, and the image is a valid image of that type, then the image is said to be . If this is true before the image is completely downloaded, each task that is queued by the networking task source while the image is being fetched must update the presentation of the image appropriately.\n\nThe user agent should apply the image sniffing rules to determine the type of the image, with the image's associated Content-Type headers giving the . If these rules are not applied, then the type of the image must be the type given by the image's associated Content-Type headers.\n\nUser agents must not support non-image resources with the element. User agents must not run executable code embedded in the image resource. User agents must only display the first page of a multipage resource. User agents must not allow the resource to act in an interactive fashion, but should honor any animation in the resource.\n\nThe attribute provides the textual label for the button for users and user agents who cannot use the image. The attribute must be present, and must contain a non-empty string giving the label that would be appropriate for an equivalent button if the image was unavailable.\n\nIf the attribute is set, and the image is available and the user agent is configured to display that image, then the element represents a control for selecting a coordinate from the image specified by the attribute. In that case, if the element is mutable, the user agent should allow the user to select this coordinate.\n\nOtherwise, the element represents a submit button whose label is given by the value of the attribute.\n\nThe element's input activation behavior given is as follows:\n• None If the element does not have a form owner, then return.\n• None If the element's node document is not fully active, then return.\n• If the user activated the control while explicitly selecting a coordinate, then set the element's selected coordinate to that coordinate. This is only possible under the conditions outlined above, when the element represents a control for selecting such a coordinate. Even then, the user might activate the control without explicitly selecting a coordinate.\n• None Submit the element's form owner from the element with userInvolvement set to 's user navigation involvement.\n\nThe element's consists of an -component and a -component. It is initially (0, 0). The coordinates represent the position relative to the edge of the element's image, with the coordinate space having the positive direction to the right, and the positive direction downwards.\n\nThe -component must be a valid integer representing a number in the range −( + ) ≤ ≤ + + , where is the rendered width of the image, is the width of the border on the left of the image, is the width of the padding on the left of the image, is the width of the border on the right of the image, and is the width of the padding on the right of the image, with all dimensions given in CSS pixels.\n\nThe -component must be a valid integer representing a number in the range −( + ) ≤ ≤ + + , where is the rendered height of the image, is the width of the border above the image, is the width of the padding above the image, is the width of the border below the image, and is the width of the padding below the image, with all dimensions given in CSS pixels.\n\nWhere a border or padding is missing, its width is zero CSS pixels.\n\nThe , , , , and attributes are attributes for form submission.\n\nMany aspects of this state's behavior are similar to the behavior of the element. Readers are encouraged to read that section, where many of the same requirements are described in more detail.\n\nWhen an element's attribute is in the Reset Button state, the rules in this section apply.\n\nThe element represents a button that, when activated, resets the form. If the element has a attribute, the button's label must be the value of that attribute; otherwise, it must be an implementation-defined string that means \"Reset\" or some such. The element is a button.\n\nSince the default label is implementation-defined, and the width of the button typically depends on the button's label, the button's width can leak a few bits of fingerprintable information. These bits are likely to be strongly correlated to the identity of the user agent and the user's locale.\n\nThe element's input activation behavior is as follows:\n• None If the element does not have a form owner, then return.\n• None If the element's node document is not fully active, then return.\n• None Reset the form owner from the element.\n\nConstraint validation: The element is barred from constraint validation.\n\nWhen an element's attribute is in the Button state, the rules in this section apply.\n\nThe element represents a button with no default behavior. A label for the button must be provided in the attribute, though it may be the empty string. If the element has a attribute, the button's label must be the value of that attribute; otherwise, it must be the empty string. The element is a button.\n\nThe element has no input activation behavior.\n\nConstraint validation: The element is barred from constraint validation.\n\nThe formats shown to the user in date, time, and number controls is independent of the format used for form submission.\n\nBrowsers are encouraged to use user interfaces that present dates, times, and numbers according to the conventions of either the locale implied by the element's language or the user's preferred locale. Using the page's locale will ensure consistency with page-provided data.\n\nFor example, it would be confusing to users if an American English page claimed that a Cirque De Soleil show was going to be showing on 02/03, but their browser, configured to use the British English locale, only showed the date 03/02 in the ticket purchase date picker. Using the page's locale would at least ensure that the date was presented in the same format everywhere. (There's still a risk that the user would end up arriving a month late, of course, but there's only so much that can be done about such cultural differences...)\n\nThese attributes only apply to an element if its attribute is in a state whose definition declares that the attribute applies. When an attribute doesn't apply to an element, user agents must ignore the attribute, regardless of the requirements and definitions below.\n\nThe attribute, when it applies, is a form control attribute.\n\nThe attribute, when it applies, is a form control attribute.\n\nIf the element has a maximum allowed value length, then the length of the value of the element's attribute must be less than or equal to the element's maximum allowed value length.\n\nThe attribute gives the number of characters that, in a visual rendering, the user agent is to allow the user to see while editing the element's value.\n\nThe attribute, if specified, must have a value that is a valid non-negative integer greater than zero.\n\nIf the attribute is present, then its value must be parsed using the rules for parsing non-negative integers, and if the result is a number greater than zero, then the user agent should ensure that at least that many characters are visible.\n\nThe IDL attribute is limited to only positive numbers and has a default value of 20.\n\nThe attribute is a boolean attribute that controls whether or not the user can edit the form control. When specified, the element is not mutable.\n\nConstraint validation: If the attribute is specified on an element, the element is barred from constraint validation.\n\nThe attribute is a boolean attribute. When specified, the element is .\n\nConstraint validation: If the element is required, and its IDL attribute applies and is in the mode value, and the element is mutable, and the element's value is the empty string, then the element is suffering from being missing.\n\nThe attribute is a boolean attribute that indicates whether the user is to be allowed to specify more than one value.\n\nThe attribute specifies a regular expression against which the control's value, or, when the attribute applies and is set, the control's values, are to be checked.\n\nIf specified, the attribute's value must match the JavaScript Pattern production.\n\nThe of an element, if it exists, is a JavaScript object. It is determined as follows:\n• None If the element does not have a attribute specified, then return nothing. The element has no compiled pattern regular expression.\n• None Let be the value of the attribute of the element.\n• If is an abrupt completion, then return nothing. The element has no compiled pattern regular expression. User agents are encouraged to log this error in a developer console, to aid debugging.\n• None Let be the string \" \", followed by , followed by \" \".\n\nThe reasoning behind these steps, instead of just using the value of the attribute directly, is twofold. First, we want to ensure that when matched against a string, the regular expression's start is anchored to the start of the string and its end to the end of the string. Second, we want to ensure that the regular expression is valid in standalone form, instead of only becoming valid after being surrounded by the \" \" and \" \" anchors.\n\nA object a string , if ! RegExpBuiltinExec( , ) is not null.\n\nConstraint validation: If the element's value is not the empty string, and either the element's attribute is not specified or it does not apply to the element given its attribute's current state, and the element has a compiled pattern regular expression but that regular expression does not match the element's value, then the element is suffering from a pattern mismatch.\n\nConstraint validation: If the element's value is not the empty string, and the element's attribute is specified and applies to the element, and the element has a compiled pattern regular expression but that regular expression does not match each of the element's values, then the element is suffering from a pattern mismatch.\n\nWhen an element has a attribute specified, authors should include a attribute to give a description of the pattern. User agents may use the contents of this attribute, if it is present, when informing the user that the pattern is not matched, or at any other suitable time, such as in a tooltip or read out by assistive technology when the control gains focus.\n\nWhen a control has a attribute, the attribute, if used, must describe the pattern. Additional information could also be included, so long as it assists the user in filling in the control. Otherwise, assistive technology would be impaired.\n\nFor instance, if the title attribute contained the caption of the control, assistive technology could end up saying something like The text you have entered does not match the required pattern. Birthday , which is not useful.\n\nUAs may still show the in non-error situations (for example, as a tooltip when hovering over the control), so authors should be careful not to word s as if an error has necessarily occurred.\n\nSome form controls can have explicit constraints applied limiting the allowed range of values that the user can provide. Normally, such a range would be linear and continuous. A form control can , however, in which case the form control's broadest possible range is finite, and authors can specify explicit ranges within it that span the boundaries.\n\nSpecifically, the broadest range of a control is midnight to midnight (24 hours), and authors can set both continuous linear ranges (such as 9pm to 11pm) and discontinuous ranges spanning midnight (such as 11pm to 1am).\n\nThe and attributes indicate the allowed range of values for the element.\n\nTheir syntax is defined by the section that defines the attribute's current state.\n\nIf the element has a attribute, and the result of applying the algorithm to convert a string to a number to the value of the attribute is a number, then that number is the element's ; otherwise, if the attribute's current state defines a , then that is the minimum; otherwise, the element has no minimum.\n\nThe attribute also defines the step base.\n\nIf the element has a attribute, and the result of applying the algorithm to convert a string to a number to the value of the attribute is a number, then that number is the element's ; otherwise, if the attribute's current state defines a , then that is the maximum; otherwise, the element has no maximum.\n\nIf the element does not have a periodic domain, the attribute's value (the maximum) must not be less than the attribute's value (its minimum).\n\nIf an element that does not have a periodic domain has a maximum that is less than its minimum, then so long as the element has a value, it will either be suffering from an underflow or suffering from an overflow.\n\nAn element if it has a periodic domain and its maximum is less than its minimum.\n\nAn element if it has a defined minimum or a defined maximum.\n\nConstraint validation: When the element has a minimum and does not have a reversed range, and the result of applying the algorithm to convert a string to a number to the string given by the element's value is a number, and the number obtained from that algorithm is less than the minimum, the element is suffering from an underflow.\n\nConstraint validation: When the element has a maximum and does not have a reversed range, and the result of applying the algorithm to convert a string to a number to the string given by the element's value is a number, and the number obtained from that algorithm is more than the maximum, the element is suffering from an overflow.\n\nConstraint validation: When an element has a reversed range, and the result of applying the algorithm to convert a string to a number to the string given by the element's value is a number, and the number obtained from that algorithm is more than the maximum and less than the minimum, the element is simultaneously suffering from an underflow and suffering from an overflow.\n\nThe attribute indicates the granularity that is expected (and required) of the value or values, by limiting the allowed values. The section that defines the attribute's current state also defines the , the , and in some cases the , which are used in processing the attribute as described below.\n\nThe attribute, if specified, must either have a value that is a valid floating-point number that parses to a number that is greater than zero, or must have a value that is an ASCII case-insensitive match for the string \" \".\n\nThe attribute provides the for the element, as follows:\n• None If the attribute does not apply, then there is no allowed value step.\n• None Otherwise, if the attribute is absent, then the allowed value step is the default step multiplied by the step scale factor.\n• None Otherwise, if the attribute's value is an ASCII case-insensitive match for the string \" \", then there is no allowed value step.\n• None Otherwise, if the rules for parsing floating-point number values, when they are applied to the attribute's value, return an error, zero, or a number less than zero, then the allowed value step is the default step multiplied by the step scale factor.\n• None Otherwise, the allowed value step is the number returned by the rules for parsing floating-point number values when they are applied to the attribute's value, multiplied by the step scale factor.\n\nThe is the value returned by the following algorithm:\n• None If the element has a content attribute, and the result of applying the algorithm to convert a string to a number to the value of the content attribute is not an error, then return that result.\n• None If the element has a content attribute, and the result of applying the algorithm to convert a string to a number to the value of the content attribute is not an error, then return that result.\n• None If a default step base is defined for this element given its attribute's state, then return it.\n\nConstraint validation: When the element has an allowed value step, and the result of applying the algorithm to convert a string to a number to the string given by the element's value is a number, and that number subtracted from the step base is not an integral multiple of the allowed value step, the element is suffering from a step mismatch.\n\nThe attribute is used to identify an element that lists predefined options suggested to the user.\n\nIf present, its value must be the ID of a element in the same tree.\n\nThe is the first element in the tree in tree order to have an ID equal to the value of the attribute, if that element is a element. If there is no attribute, or if there is no element with that ID, or if the first element with that ID is not a element, then there is no suggestions source element.\n\nIf there is a suggestions source element, then, when the user agent is allowing the user to edit the element's value, the user agent should offer the suggestions represented by the suggestions source element to the user in a manner suitable for the type of control used. If appropriate, the user agent should use the suggestion's label and value to identify the suggestion to the user.\n\nUser agents are encouraged to filter the suggestions represented by the suggestions source element when the number of suggestions is large, including only the most relevant ones (e.g. based on the user's input so far). No precise threshold is defined, but capping the list at four to seven values is reasonable. If filtering based on the user's input, user agents should search within both the label and value of the suggestions for matches. User agents should consider how input variations affect the matching process. Unicode normalization should be applied so that different underlying Unicode code point sequences, caused by different keyboard- or input-specific mechanisms, do not interfere with the matching process. Case variations should be ignored, which may require language-specific case mapping. For examples of these, see . User agents may also provide other matching features: for illustration, a few examples include matching different forms of kana to each other (or to kanji), ignoring accents, or applying spelling correction. [CHARMODNORM]\n\nAs always, user agents are free to make user interface decisions which are appropriate for their particular requirements and for the user's particular circumstances. However, this has historically been an area of confusion for implementers, web developers, and users alike, so we've given some \"should\" suggestions above.\n\nHow user selections of suggestions are handled depends on whether the element is a control accepting a single value only, or whether it accepts multiple values:\n\nIf the attribute does not apply, there is no suggestions source element.\n\nThe attribute represents a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format. The attribute, if specified, must have a value that contains no U+000A LINE FEED (LF) or U+000D CARRIAGE RETURN (CR) characters.\n\nThe attribute should not be used as an alternative to a . For a longer hint or other advisory text, the attribute is more appropriate.\n\nThese mechanisms are very similar but subtly different: the hint given by the control's is shown at all times; the short hint given in the attribute is shown before the user enters a value; and the hint in the attribute is shown when the user requests further help.\n\nUser agents should present this hint to the user, after having stripped newlines from it, when the element's value is the empty string, especially if the control is not focused.\n\nIf a user agent normally doesn't show this hint to the user when the control is focused, then the user agent should nonetheless show the hint for the control if it was focused as a result of the attribute, since in that case the user will not have had an opportunity to examine the control before focusing it.\n\nThe IDL attribute allows scripts to manipulate the value of an element. The attribute is in one of the following modes, which define its behavior:\n\nThe IDL attribute allows scripts to manipulate the checkedness of an element. On getting, it must return the current checkedness of the element; and on setting, it must set the element's checkedness to the new value and set the element's dirty checkedness flag to true.\n\nThe IDL attribute allows scripts to access the element's selected files.\n\nOn getting, if the IDL attribute applies, it must return a object that represents the current selected files. The same object must be returned until the list of selected files changes. If the IDL attribute does not apply, then it must instead return null. [FILEAPI]\n\nOn setting, it must run these steps:\n• None If the IDL attribute does not apply or the given value is null, then return.\n• None Replace the element's selected files with the given value.\n\nThe IDL attribute represents the value of the element, interpreted as a date.\n\nOn getting, if the attribute does not apply, as defined for the element's attribute's current state, then return null. Otherwise, run the defined for that state to the element's value; if the algorithm returned a object, then return it, otherwise, return null.\n\nOn setting, if the attribute does not apply, as defined for the element's attribute's current state, then throw an \" \" ; otherwise, if the new value is not null and not a object throw a exception; otherwise, if the new value is null or a object representing the NaN time value, then set the value of the element to the empty string; otherwise, run the , as defined for that state, on the new value, and set the value of the element to the resulting string.\n\nThe IDL attribute represents the value of the element, interpreted as a number.\n\nOn getting, if the attribute does not apply, as defined for the element's attribute's current state, then return a Not-a-Number (NaN) value. Otherwise, run the algorithm to convert a string to a number defined for that state to the element's value; if the algorithm returned a number, then return it, otherwise, return a Not-a-Number (NaN) value.\n\nOn setting, if the new value is infinite, then throw a exception. Otherwise, if the attribute does not apply, as defined for the element's attribute's current state, then throw an \" \" . Otherwise, if the new value is a Not-a-Number (NaN) value, then set the value of the element to the empty string. Otherwise, run the algorithm to convert a number to a string, as defined for that state, on the new value, and set the value of the element to the resulting string.\n\nThe and methods, when invoked, must run the following algorithm:\n• None If the and methods do not apply, as defined for the element's attribute's current state, then throw an \" \" .\n• None If the element has no allowed value step, then throw an \" \" .\n• None If the element has a minimum and a maximum and the minimum is greater than the maximum, then return.\n• None If the element has a minimum and a maximum and there is no value greater than or equal to the element's minimum and less than or equal to the element's maximum that, when subtracted from the step base, is an integral multiple of the allowed value step, then return.\n• None If applying the algorithm to convert a string to a number to the string given by the element's value does not result in an error, then let be the result of that algorithm. Otherwise, let be zero.\n• If subtracted from the step base is not an integral multiple of the allowed value step, then set to the nearest value that, when subtracted from the step base, is an integral multiple of the allowed value step, and that is less than if the method invoked was the method, and more than otherwise. Otherwise ( subtracted from the step base is an integral multiple of the allowed value step):\n• None Let be the argument.\n• None Let be the allowed value step multiplied by .\n• None If the method invoked was the method, negate .\n• None Let be the result of adding to .\n• None If the element has a minimum, and is less than that minimum, then set to the smallest value that, when subtracted from the step base, is an integral multiple of the allowed value step, and that is more than or equal to that minimum.\n• None If the element has a maximum, and is greater than that maximum, then set to the largest value that, when subtracted from the step base, is an integral multiple of the allowed value step, and that is less than or equal to that maximum.\n• If either the method invoked was the method and is greater than , or the method invoked was the method and is less than , then return. This ensures that invoking the method on the element in the following example does not change the value of that element:\n• None Let be the result of running the algorithm to convert a number to a string, as defined for the element's attribute's current state, on .\n• None Set the value of the element to .\n\nThe IDL attribute must return the current suggestions source element, if any, or null otherwise.\n\nThe and method steps are:\n• None If this is not mutable, then throw an \" \" .\n• If this's relevant settings object's origin is not same origin with this's relevant settings object's top-level origin, and this is a element, or this's attribute is not in the File Upload state or Color state, then throw a \" \" . File and Color inputs are exempted from this check for historical reason: their input activation behavior also shows their pickers, and has never been guarded by an origin check.\n• None If this's relevant global object does not have transient activation, then throw a \" \" .\n• None If this is a element, and this is not being rendered, then throw a \" \" .\n• None Show the picker, if applicable, for this.\n\nTo for an or element :\n• None If 's relevant global object does not have transient activation, then return.\n• None If is not mutable, then return.\n• None If does not support a picker, then return.\n• If is an element and 's attribute is in the File Upload state, then run these steps in parallel:\n• None Optionally, wait until any prior execution of this algorithm has terminated.\n• None Let be the result of WebDriver BiDi file dialog opened with .\n• \n• None Display a prompt to the user requesting that the user specify some files. If the attribute is not set on , there must be no more than one file selected; otherwise, any number may be selected. Files can be from the filesystem or created on the fly, e.g., a picture taken from a camera connected to the user's device.\n• None Wait for the user to have made their selection.\n• None If is true or if the user dismissed the prompt without changing their selection, then queue an element task on the user interaction task source given to fire an event named at , with the attribute initialized to true. As with all user interface specifications, user agents have a good deal of freedom in how they interpret these requirements. The above text implies that a user either dismisses the prompt or changes their selection; exactly one of these will be true. But the mapping of these possibilities to specific user interface elements is not mandated by the standard. For example, a user agent might interpret clicking the \"Cancel\" button when files were previously selected as a change of selection to select zero files, thus firing and . Or it might interpret such a click as a dismissal that leaves the selection unchanged, thus firing . Similarly, it's up to the user agent whether re-selecting the same files as were previously selected counts as a dismissal, or as a change of selection.\n• Otherwise, the user agent should show the relevant user interface for selecting a value for , in the way it normally would when the user interacts with the control. When showing such a user interface, it must respect the requirements stated in the relevant parts of the specification for how behaves given its attribute state. (For example, various sections describe restrictions on the resulting value string.) This step can have side effects, such as closing other pickers that were previously shown by this algorithm. (If this closes a file selection picker, then per the above that will lead to firing either and events, or a event.)\n\nWhen the and events apply (which is the case for all controls other than buttons and those with the attribute in the Hidden state), the events are fired to indicate that the user has interacted with the control. The event fires whenever the user has modified the data of the control. The event fires when the value is committed, if that makes sense for the control, or else when the control loses focus. In all cases, the event comes before the corresponding event (if any).\n\nWhen an element has a defined input activation behavior, the rules for dispatching these events, if they apply, are given in the section above that defines the attribute's state. (This is the case for all controls with the attribute in the Checkbox state, the Radio Button state, or the File Upload state.)\n\nFor elements without a defined input activation behavior, but to which these events apply, and for which the user interface involves both interactive manipulation and an explicit commit action, then when the user changes the element's value, the user agent must queue an element task on the user interaction task source given the element to fire an event named at the element, with the and attributes initialized to true, and any time the user commits the change, the user agent must queue an element task on the user interaction task source given the element to set its user validity to true and fire an event named at the element, with the attribute initialized to true.\n\nAn example of a user interface involving both interactive manipulation and a commit action would be a Range controls that use a slider, when manipulated using a pointing device. While the user is dragging the control's knob, events would fire whenever the position changed, whereas the event would only fire when the user let go of the knob, committing to a specific value.\n\nFor elements without a defined input activation behavior, but to which these events apply, and for which the user interface involves an explicit commit action but no intermediate manipulation, then any time the user commits a change to the element's value, the user agent must queue an element task on the user interaction task source given the element to first fire an event named at the element, with the and attributes initialized to true, and then fire an event named at the element, with the attribute initialized to true.\n\nAn example of a user interface with a commit action would be a Color control that consists of a single button that brings up a color wheel: if the value only changes when the dialog is closed, then that would be the explicit commit action. On the other hand, if manipulating the control changes the color interactively, then there might be no commit action.\n\nAnother example of a user interface with a commit action would be a control that allows both text-based user input and user selection from a drop-down calendar: while text input might not have an explicit commit step, selecting a date from the drop down calendar and then dismissing the drop down would be a commit action.\n\nFor elements without a defined input activation behavior, but to which these events apply, any time the user causes the element's value to change without an explicit commit action, the user agent must queue an element task on the user interaction task source given the element to fire an event named at the element, with the and attributes initialized to true. The corresponding event, if any, will be fired when the control loses focus.\n\nExamples of a user changing the element's value would include the user typing into a text control, pasting a new value into the control, or undoing an edit in that control. Some user interactions do not cause changes to the value, e.g., hitting the \"delete\" key in an empty text control, or replacing some text in the control with text from the clipboard that happens to be exactly the same text.\n\nA Range control in the form of a slider that the user has focused and is interacting with using a keyboard would be another example of the user changing the element's value without a commit step.\n\nIn the case of tasks that just fire an event, user agents may wait for a suitable break in the user's interaction before queuing the tasks; for example, a user agent could wait for the user to have not hit a key for 100ms, so as to only fire the event when the user pauses, instead of continuously for each keystroke.\n\nWhen the user agent is to change an element's value on behalf of the user (e.g. as part of a form prefilling feature), the user agent must queue an element task on the user interaction task source given the element to first update the value accordingly, then fire an event named at the element, with the and attributes initialized to true, then fire an event named at the element, with the attribute initialized to true.\n\nThese events are not fired in response to changes made to the values of form controls by scripts. (This is to make it easier to update the values of form controls in response to the user manipulating the controls, without having to then filter out the script's own changes to avoid an infinite loop.)\n\nThese events are also not fired when the browser changes the values of form controls as part of state restoration during navigation.\n\nThe element represents a button labeled by its contents.\n\nThe attribute controls the behavior of the button when it is activated. It is an enumerated attribute with the following keywords and states:\n\nThe attribute's missing value default and invalid value default are both the state.\n\nA element is said to be a submit button if any of the following are true:\n• None the attribute is in the Auto state and both the and content attributes are not present; or\n• None the attribute is in the Submit Button state.\n\nConstraint validation: If the element is not a submit button, the element is barred from constraint validation.\n\nIf specified, the attribute value must be the ID of an element in the same tree as the button with the attribute.\n\nThe attribute is an enumerated attribute with the following keywords and states:\n\nThe attribute's missing value default and invalid value default are both the state.\n\nA is a string that starts with \" \".\n• None If is disabled, then return.\n• None If 's node document is not fully active, then return.\n• \n• None If is a submit button, then submit 's form owner from with userInvolvement set to 's user navigation involvement, and return.\n• None If 's attribute is in the Reset Button state, then reset 's form owner, and return.\n• None If 's attribute is in the Auto state, then return.\n• None Let be the result of running 's get the associated element.\n• If is not null:\n• None If is in the Unknown state, then return.\n• None Let be true if 's attribute is not in the no popover state; otherwise false.\n• If is false and is not in the Custom state:\n• None If this standard does not define is valid invoker command steps for 's local name, then return.\n• None Otherwise, if the result of running 's corresponding is valid invoker command steps given is false, then return.\n• Let be the result of firing an event named at , using , with its attribute initialized to , its attribute initialized to , and its and attributes initialized to true. DOM standard issue #1328 tracks how to better standardize associated event data in a way which makes sense on Events. Currently an event attribute initialized to a value cannot also have a getter, and so an internal slot (or map of additional fields) is required to properly specify this.\n• None If is false, then return.\n• None If is not connected, then return.\n• None If is in the Custom state, then return.\n• If is in the Hide Popover state:\n• None If the result of running check popover validity given , true, false, and null is true, then run the hide popover algorithm given , true, true, and false.\n• Otherwise, if is in the Toggle Popover state:\n• None If the result of running check popover validity given , false, false, and null is true, then run the show popover algorithm given , true, true, and false.\n• None Otheriwse, if the result of running check popover validity given , true, false, and null is true, then run the hide popover algorithm given , true, true, and false.\n• Otherwise, if is in the Show Popover state:\n• None If the result of running check popover validity given , false, false, and null is true, then run the show popover algorithm given , true, true, and false.\n• None Otherwise, if this standard defines invoker command steps for 's local name, then run the corresponding invoker command steps given , and .\n• None Otherwise, run the popover target attribute activation behavior given and 's target.\n\nAn HTML element can have specific and defined for the element's local name.\n\nThe attribute is used to explicitly associate the element with its form owner. The attribute represents the element's name. The attribute is used to make the control non-interactive and to prevent its value from being submitted. The , , , , and attributes are attributes for form submission.\n\nThe attribute can be used to make submit buttons that do not trigger the constraint validation.\n\nThe , , , , and must not be specified if the element is not a submit button.\n\nThe IDL attribute must reflect the element's content attribute.\n• None If is in the Custom state, then return 's value.\n• None If is in the Unknown state, then return the empty string.\n• None Return the keword corresponding to the value of .\n\nThe setter steps are to set the content attribute to the given value.\n\nThe attribute gives the element's value for the purposes of form submission. The element's value is the value of the element's attribute, if there is one, or the empty string otherwise.\n\nA button (and its value) is only included in the form submission if the button itself was used to initiate the form submission.\n\nThe IDL attribute must reflect the content attribute of the same name.\n• None If is a submit button, then return \" \".\n• None Assert: is not in the Submit Button state.\n• None If is in the Auto state, then return \" \".\n• None Return the keyword value corresponding to .\n\nThe setter steps are to set the content attribute to the given value.\n\nThe , , and IDL attributes, and the , , and methods, are part of the constraint validation API. The IDL attribute provides a list of the element's s. The , , and IDL attributes are part of the element's forms API.\n\nThe element represents a control for selecting amongst a set of options.\n\nThe attribute is a boolean attribute. If the attribute is present, then the element represents a control for selecting zero or more options from the list of options. If the attribute is absent, then the element represents a control for selecting a single option from the list of options.\n\nThe attribute gives the number of options to show to the user. The attribute, if specified, must have a value that is a valid non-negative integer greater than zero.\n\nThe of a element is the result of applying the rules for parsing non-negative integers to the value of element's attribute, if it has one and parsing it is successful. If applying those rules to the attribute's value is not successful, or if the attribute is absent, then the element's display size is 4 if the element's content attribute is present, and 1 otherwise.\n\nThe for a element consists of all the element children of the element, and all the element children of all the element children of the element, in tree order.\n\nThe attribute is a boolean attribute. When specified, the user will be required to select a value before submitting the form.\n\nIf a element has a attribute specified, does not have a attribute specified, and has a display size of 1; and if the value of the first element in the element's list of options (if any) is the empty string, and that element's parent node is the element (and not an element), then that is the element's .\n\nIf a element has a attribute specified, does not have a attribute specified, and has a display size of 1, then the element must have a placeholder label option.\n\nIn practice, the requirement stated in the paragraph above can only apply when a element does not have a attribute with a value greater than 1.\n\nConstraint validation: If the element has its attribute specified, and either none of the elements in the element's list of options have their selectedness set to true, or the only element in the element's list of options with its selectedness set to true is the placeholder label option, then the element is suffering from being missing.\n\nIf the attribute is absent, and the element is not disabled, then the user agent should allow the user to pick an element in its list of options that is itself not disabled. Upon this element being (either through a click, or through unfocusing the element after changing its value, or through a menu command, or through any other mechanism), and before the relevant user interaction event is queued (e.g. before the event), the user agent must set the selectedness of the picked element to true, set its dirtiness to true, and then .\n\nIf the attribute is absent, whenever an element in the element's list of options has its selectedness set to true, and whenever an element with its selectedness set to true is added to the element's list of options, the user agent must set the selectedness of all the other elements in its list of options to false.\n\nIf the attribute is absent and the element's display size is greater than 1, then the user agent should also allow the user to request that the whose selectedness is true, if any, be unselected. Upon this request being conveyed to the user agent, and before the relevant user interaction event is queued (e.g. before the event), the user agent must set the selectedness of that element to false, set its dirtiness to true, and then .\n\nThe , given a element , is to run the following steps:\n• None If 's attribute is absent, and 's display size is 1, and no elements in the 's list of options have their selectedness set to true, then set the selectedness of the first element in the list of options in tree order that is not disabled, if any, to true, and return.\n• None If 's attribute is absent, and two or more elements in 's list of options have their selectedness set to true, then set the selectedness of all but the last element with its selectedness set to true in the list of options in tree order to false.\n\nThe HTML element insertion steps, given , are:\n• None If 's parent is a element, or 's parent is an element whose parent is a element, then run that element's selectedness setting algorithm.\n\nThe HTML element removing steps, given and , are:\n• None If is a element, or is an element whose parent is a element, then run that element's selectedness setting algorithm.\n\nThe HTML element moving steps, given and , are:\n• None Run the HTML element removing steps given and .\n\nThe HTML element removing steps, given and , are:\n• None If is a element and has an child, then run 's selectedness setting algorithm.\n\nThe HTML element moving steps, given and , are:\n• None Run the HTML element removing steps given and .\n\nIf an element in the list of options , then run that element's selectedness setting algorithm.\n\nIf the attribute is present, and the element is not disabled, then the user agent should allow the user to the selectedness of the elements in its list of options that are themselves not disabled. Upon such an element being toggled (either through a click, or through a menu command, or any other mechanism), and before the relevant user interaction event is queued (e.g. before a related event), the selectedness of the element must be changed (from true to false or false to true), the dirtiness of the element must be set to true, and the user agent must .\n\nWhen the user agent is to , queue an element task on the user interaction task source given the element to run these steps:\n• None Fire an event named at the element, with the and attributes initialized to true.\n• None Fire an event named at the element, with the attribute initialized to true.\n\nThe reset algorithm for a element is:\n• For each of 's list of options:\n• None If has a attribute, then set 's selectedness to true; otherwise set it to false.\n\nThe attribute is used to explicitly associate the element with its form owner. The attribute represents the element's name. The attribute is used to make the control non-interactive and to prevent its value from being submitted. The attribute controls how the user agent provides autofill behavior.\n\nA element that is not disabled is mutable.\n\nThe IDL attribute, on getting, must return the string \" \" if the attribute is absent, and the string \" \" if the attribute is present.\n\nThe IDL attribute must return an rooted at the node, whose filter matches the elements in the list of options.\n\nThe collection is also mirrored on the object. The supported property indices at any instant are the indices supported by the object returned by the attribute at that instant.\n\nThe IDL attribute must return the number of nodes represented by the collection. On setting, it must act like the attribute of the same name on the collection.\n\nThe method must return the value returned by the method of the same name on the collection, when invoked with the same argument.\n\nThe method must return the value returned by the method of the same name on the collection, when invoked with the same argument.\n\nWhen the user agent is to set the value of a new indexed property or set the value of an existing indexed property for a element, it must instead run the corresponding algorithm on the element's collection.\n\nSimilarly, the method must act like its namesake method on that same collection.\n\nThe method must act like its namesake method on that same collection when it has arguments, and like its namesake method on the interface implemented by the ancestor interface when it has no arguments.\n\nThe IDL attribute must return an rooted at the node, whose filter matches the elements in the list of options that have their selectedness set to true.\n\nThe IDL attribute, on getting, must return the index of the first element in the list of options in tree order that has its selectedness set to true, if any. If there isn't one, then it must return −1.\n\nOn setting, the attribute must set the selectedness of all the elements in the list of options to false, and then the element in the list of options whose index is the given new value, if any, must have its selectedness set to true and its dirtiness set to true.\n\nThis can result in no element having a selectedness set to true even in the case of the element having no attribute and a display size of 1.\n\nThe IDL attribute, on getting, must return the value of the first element in the list of options in tree order that has its selectedness set to true, if any. If there isn't one, then it must return the empty string.\n\nOn setting, the attribute must set the selectedness of all the elements in the list of options to false, and then the first element in the list of options, in tree order, whose value is equal to the given new value, if any, must have its selectedness set to true and its dirtiness set to true.\n\nThis can result in no element having a selectedness set to true even in the case of the element having no attribute and a display size of 1.\n\nThe , , and IDL attributes must reflect the respective content attributes of the same name. The IDL attribute has a default value of 0.\n\nFor historical reasons, the default value of the IDL attribute does not return the actual size used, which, in the absence of the content attribute, is either 1 or 4 depending on the presence of the attribute.\n\nThe , , and IDL attributes, and the , , and methods, are part of the constraint validation API. The IDL attribute provides a list of the element's s. The , , and IDL attributes are part of the element's forms API.\n\nThe element represents a set of elements that represent predefined options for other controls. In the rendering, the element represents nothing and it, along with its children, should be hidden.\n\nThe element can be used in two ways. In the simplest case, the element has just element children.\n\nIn the more elaborate case, the element can be given contents that are to be displayed for down-level clients that don't support . In this case, the elements are provided inside a element inside the element.\n\nThe element is hooked up to an element using the attribute on the element.\n\nEach element that is a descendant of the element, that is not disabled, and whose value is a string that isn't the empty string, represents a suggestion. Each suggestion has a value and a label.\n\nThe IDL attribute must return an rooted at the node, whose filter matches elements.\n\nConstraint validation: If an element has a element ancestor, it is barred from constraint validation.\n\nThe element represents a group of elements with a common label.\n\nThe element's group of elements consists of the elements that are children of the element.\n\nWhen showing elements in elements, user agents should show the elements of such groups as being related to each other and separate from other elements.\n\nThe attribute is a boolean attribute and can be used to disable a group of elements together.\n\nThe attribute must be specified. Its value gives the name of the group, for the purposes of the user interface. User agents should use this attribute's value when labeling the group of elements in a element.\n\nThe and attributes must reflect the respective content attributes of the same name.\n\nThere is no way to select an element. Only elements can be selected. An element merely provides a label for a group of elements.\n\nThe element represents an option in a element or as part of a list of suggestions in a element.\n\nIn certain circumstances described in the definition of the element, an element can be a element's placeholder label option. A placeholder label option does not represent an actual option, but instead represents a label for the control.\n\nThe attribute is a boolean attribute. An element is if its attribute is present or if it is a child of an element whose attribute is present.\n\nAn element that is disabled must prevent any events that are queued on the user interaction task source from being dispatched on the element.\n\nThe attribute provides a label for element. The of an element is the value of the content attribute, if there is one and its value is not the empty string, or, otherwise, the value of the element's IDL attribute.\n\nThe content attribute, if specified, must not be empty.\n\nThe attribute provides a value for element. The of an element is the value of the content attribute, if there is one, or, if there is not, the value of the element's IDL attribute.\n\nThe attribute is a boolean attribute. It represents the default selectedness of the element.\n\nThe of an element is a boolean state, initially false. It controls whether adding or removing the content attribute has any effect.\n\nThe of an element is a boolean state, initially false. Except where otherwise specified, when the element is created, its selectedness must be set to true if the element has a attribute. Whenever an element's attribute is added, if its dirtiness is false, its selectedness must be set to true. Whenever an element's attribute is removed, if its dirtiness is false, its selectedness must be set to false.\n\nThe constructor, when called with three or fewer arguments, overrides the initial state of the selectedness state to always be false even if the third argument is true (implying that a attribute is to be set). The fourth argument can be used to explicitly set the initial selectedness state when using the constructor.\n\nA element whose attribute is not specified must not have more than one descendant element with its attribute set.\n\nAn element's is the number of elements that are in the same list of options but that come before it in tree order. If the element is not in a list of options, then the element's index is zero.\n\nThe IDL attribute must reflect the content attribute of the same name. The IDL attribute must reflect the content attribute.\n\nThe IDL attribute, on getting, if there is a content attribute, must return that attribute's value; otherwise, it must return the element's label. On setting, the element's content attribute must be set to the new value.\n\nThe IDL attribute, on getting, must return the element's value. On setting, the element's content attribute must be set to the new value.\n\nThe IDL attribute, on getting, must return true if the element's selectedness is true, and false otherwise. On setting, it must set the element's selectedness to the new value, set its dirtiness to true, and then cause the element to ask for a reset.\n\nThe IDL attribute must return the element's index.\n\nThe IDL attribute, on getting, must return the result of stripping and collapsing ASCII whitespace from the concatenation of data of all the node descendants of the element, in tree order, excluding any that are descendants of descendants of the element that are themselves or SVG elements.\n\nThe attribute's setter must string replace all with the given value within this element.\n\nThe IDL attribute's behavior depends on whether the element is in a element or not. If the has a element as its parent, or has an element as its parent and that element has a element as its parent, then the IDL attribute must return the same value as the IDL attribute on that element. Otherwise, it must return null.\n\nA legacy factory function is provided for creating objects (in addition to the factory methods from DOM such as ): . When invoked, the legacy factory function must perform the following steps:\n• None Let be the current global object's associated .\n• None Let be the result of creating an element given , \" \", and the HTML namespace.\n• None If is not the empty string, then append to a new node whose data is .\n• None If is given, then set an attribute value for using \" \" and .\n• None If is true, then set an attribute value for using \" \" and the empty string.\n• None If is true, then set 's selectedness to true; otherwise set its selectedness to false (even if is true).\n\nThe element represents a multiline plain text edit control for the element's . The contents of the control represent the control's default value.\n\nThe raw value of a control must be initially the empty string.\n\nThis element has rendering requirements involving the bidirectional algorithm.\n\nThe attribute is a boolean attribute used to control whether the text can be edited by the user or not.\n\nConstraint validation: If the attribute is specified on a element, the element is barred from constraint validation.\n\nA element is mutable if it is neither disabled nor has a attribute specified.\n\nWhen a is mutable, its raw value should be editable by the user: the user agent should allow the user to edit, insert, and remove text, and to insert and remove line breaks in the form of U+000A LINE FEED (LF) characters. Any time the user causes the element's raw value to change, the user agent must queue an element task on the user interaction task source given the element to fire an event named at the element, with the and attributes initialized to true. User agents may wait for a suitable break in the user's interaction before queuing the task; for example, a user agent could wait for the user to have not hit a key for 100ms, so as to only fire the event when the user pauses, instead of continuously for each keystroke.\n\nA element's dirty value flag must be set to true whenever the user interacts with the control in a way that changes the raw value.\n\nThe cloning steps for elements given , , and are to propagate the raw value and dirty value flag from to .\n\nThe children changed steps for elements must, if the element's dirty value flag is false, set the element's raw value to its child text content.\n\nThe reset algorithm for elements is to set the user validity to false, dirty value flag back to false, and set the raw value of element to its child text content.\n\nWhen a element is popped off the stack of open elements of an HTML parser or XML parser, then the user agent must invoke the element's reset algorithm.\n\nIf the element is mutable, the user agent should allow the user to change the writing direction of the element, setting it either to a left-to-right writing direction or a right-to-left writing direction. If the user does so, the user agent must then run the following steps:\n• None Set the element's attribute to \" \" if the user selected a left-to-right writing direction, and \" \" if the user selected a right-to-left writing direction.\n• None Queue an element task on the user interaction task source given the element to fire an event named at the element, with the and attributes initialized to true.\n\nThe attribute specifies the expected maximum number of characters per line. If the attribute is specified, its value must be a valid non-negative integer greater than zero. If applying the rules for parsing non-negative integers to the attribute's value results in a number greater than zero, then the element's is that value; otherwise, it is 20.\n\nThe user agent may use the element's character width as a hint to the user as to how many characters the server prefers per line (e.g. for visual user agents by making the width of the control be that many characters). In visual renderings, the user agent should wrap the user's input in the rendering so that each line is no wider than this number of characters.\n\nThe attribute specifies the number of lines to show. If the attribute is specified, its value must be a valid non-negative integer greater than zero. If applying the rules for parsing non-negative integers to the attribute's value results in a number greater than zero, then the element's is that value; otherwise, it is 2.\n\nVisual user agents should set the height of the control to the number of lines given by character height.\n\nThe attribute is an enumerated attribute with the following keywords and states:\n\nThe attribute's missing value default and invalid value default are both the Soft state.\n\nIf the element's attribute is in the Hard state, the attribute must be specified.\n\nFor historical reasons, the element's value is normalized in three different ways for three different purposes. The raw value is the value as it was originally set. It is not normalized. The API value is the value used in the IDL attribute, IDL attribute, and by the and content attributes. It is normalized so that line breaks use U+000A LINE FEED (LF) characters. Finally, there is the value, as used in form submission and other processing models in this specification. It is normalized as for the API value, and in addition, if necessary given the element's attribute, additional line breaks are inserted to wrap the text at the given width.\n\nThe algorithm for obtaining the element's API value is to return the element's raw value, with newlines normalized.\n\nThe element's value is defined to be the element's API value with the textarea wrapping transformation applied. The is the following algorithm, as applied to a string:\n• None If the element's attribute is in the Hard state, insert U+000A LINE FEED (LF) characters into the string using an implementation-defined algorithm so that each line has no more than character width characters. For the purposes of this requirement, lines are delimited by the start of the string, the end of the string, and U+000A LINE FEED (LF) characters.\n\nIf the element has a maximum allowed value length, then the element's children must be such that the length of the value of the element's descendant text content with newlines normalized is less than or equal to the element's maximum allowed value length.\n\nThe attribute is a boolean attribute. When specified, the user will be required to enter a value before submitting the form.\n\nConstraint validation: If the element has its attribute specified, and the element is mutable, and the element's value is the empty string, then the element is suffering from being missing.\n\nThe attribute represents a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format.\n\nThe attribute should not be used as an alternative to a . For a longer hint or other advisory text, the attribute is more appropriate.\n\nThese mechanisms are very similar but subtly different: the hint given by the control's is shown at all times; the short hint given in the attribute is shown before the user enters a value; and the hint in the attribute is shown when the user requests further help.\n\nUser agents should present this hint to the user when the element's value is the empty string and the control is not focused (e.g. by displaying it inside a blank unfocused control). All U+000D CARRIAGE RETURN U+000A LINE FEED character pairs (CRLF) in the hint, as well as all other U+000D CARRIAGE RETURN (CR) and U+000A LINE FEED (LF) characters in the hint, must be treated as line breaks when rendering the hint.\n\nIf a user agent normally doesn't show this hint to the user when the control is focused, then the user agent should nonetheless show the hint for the control if it was focused as a result of the attribute, since in that case the user will not have had an opportunity to examine the control before focusing it.\n\nThe attribute represents the element's name. The attribute controls how the element's directionality is submitted. The attribute is used to make the control non-interactive and to prevent its value from being submitted. The attribute is used to explicitly associate the element with its form owner. The attribute controls how the user agent provides autofill behavior.\n\nThe , , , , and IDL attributes must reflect the respective content attributes of the same name. The and attributes are limited to only positive numbers with fallback. The IDL attribute's default value is 20. The IDL attribute's default value is 2. The IDL attribute must reflect the content attribute. The IDL attribute must reflect the content attribute, limited to only non-negative numbers. The IDL attribute must reflect the content attribute, limited to only non-negative numbers. The IDL attribute must reflect the content attribute.\n\nThe IDL attribute must return the value \" \".\n\nThe attribute's getter must return the element's child text content.\n\nThe attribute's setter must string replace all with the given value within this element.\n\nThe IDL attribute must, on getting, return the element's API value. On setting, it must perform the following steps:\n• None Let be this element's API value.\n• None Set this element's raw value to the new value.\n• None Set this element's dirty value flag to true.\n• None If the new API value is different from , then move the text entry cursor position to the end of the text control, unselecting any selected text and resetting the selection direction to \" \".\n\nThe IDL attribute must return the length of the element's API value.\n\nThe , , and IDL attributes, and the , , and methods, are part of the constraint validation API. The IDL attribute provides a list of the element's s. The , , , , , and methods and IDL attributes expose the element's text selection. The , , and IDL attributes are part of the element's forms API.\n\nThe element represents the result of a calculation performed by the application, or the result of a user action.\n\nThis element can be contrasted with the element, which is the appropriate element for quoting the output of other programs run previously.\n\nThe content attribute allows an explicit relationship to be made between the result of a calculation and the elements that represent the values that went into the calculation or that otherwise influenced the calculation. The attribute, if specified, must contain a string consisting of an unordered set of unique space-separated tokens, none of which are identical to another token and each of which must have the value of an ID of an element in the same tree.\n\nThe attribute is used to explicitly associate the element with its form owner. The attribute represents the element's name. The element is associated with a form so that it can be easily referenced from the event handlers of form controls; the element's value itself is not submitted when the form is submitted.\n\nThe element has a (null or a string). Initially it must be null.\n\nThe element's is determined by the following steps:\n• None If this element's default value override is non-null, then return it.\n\nThe reset algorithm for elements is to run these steps:\n• None String replace all with this element's default value within this element.\n• None Set this element's default value override to null.\n\nThe getter steps are to return this's descendant text content.\n• None Set this's default value override to its default value.\n• None String replace all with the given value within this.\n\nThe getter steps are to return the result of running this's default value.\n• None If this's default value override is null, then string replace all with the given value within this and return.\n• None Set this's default value override to the given value.\n\nThe getter steps are to return \" \".\n\nThe IDL attribute must reflect the content attribute.\n\nThe , , and IDL attributes, and the , , and methods, are part of the constraint validation API. The IDL attribute provides a list of the element's s. The and IDL attributes are part of the element's forms API.\n\nThe element represents the completion progress of a task. The progress is either indeterminate, indicating that progress is being made but that it is not clear how much more work remains to be done before the task is complete (e.g. because the task is waiting for a remote host to respond), or the progress is a number in the range zero to a maximum, giving the fraction of work that has so far been completed.\n\nThere are two attributes that determine the current task completion represented by the element. The attribute specifies how much of the task has been completed, and the attribute specifies how much work the task requires in total. The units are arbitrary and not specified.\n\nTo make a determinate progress bar, add a attribute with the current progress (either a number from 0.0 to 1.0, or, if the attribute is specified, a number from 0 to the value of the attribute). To make an indeterminate progress bar, remove the attribute.\n\nAuthors are encouraged to also include the current value and the maximum value inline as text inside the element, so that the progress is made available to users of legacy user agents.\n\nThe and attributes, when present, must have values that are valid floating-point numbers. The attribute, if present, must have a value greater than or equal to zero, and less than or equal to the value of the attribute, if present, or 1.0, otherwise. The attribute, if present, must have a value greater than zero.\n\nThe element is the wrong element to use for something that is just a gauge, as opposed to task progress. For instance, indicating disk space usage using would be inappropriate. Instead, the element is available for such use cases.\n\nUser agent requirements: If the attribute is omitted, then the progress bar is an indeterminate progress bar. Otherwise, it is a determinate progress bar.\n\nIf the progress bar is a determinate progress bar and the element has a attribute, the user agent must parse the attribute's value according to the rules for parsing floating-point number values. If this does not result in an error, and if the parsed value is greater than zero, then the of the progress bar is that value. Otherwise, if the element has no attribute, or if it has one but parsing it resulted in an error, or if the parsed value was less than or equal to zero, then the maximum value of the progress bar is 1.0.\n\nIf the progress bar is a determinate progress bar, user agents must parse the attribute's value according to the rules for parsing floating-point number values. If this does not result in an error and the parsed value is greater than zero, then the of the progress bar is that parsed value. Otherwise, if parsing the attribute's value resulted in an error or a number less than or equal to zero, then the value of the progress bar is zero.\n\nIf the progress bar is a determinate progress bar, then the is the maximum value, if value is greater than the maximum value, and value otherwise.\n\nUA requirements for showing the progress bar: When representing a element to the user, the UA should indicate whether it is a determinate or indeterminate progress bar, and in the former case, should indicate the relative position of the current value relative to the maximum value.\n\nIf the progress bar is an indeterminate progress bar, then the IDL attribute must return −1. Otherwise, it must return the result of dividing the current value by the maximum value.\n\nIf the progress bar is an indeterminate progress bar, then the IDL attribute, on getting, must return 0. Otherwise, it must return the current value. On setting, the given value must be converted to the best representation of the number as a floating-point number and then the content attribute must be set to that string.\n\nSetting the IDL attribute to itself when the corresponding content attribute is absent would change the progress bar from an indeterminate progress bar to a determinate progress bar with no progress.\n\nThe IDL attribute must reflect the content attribute of the same name, limited to only positive numbers. The default value for is 1.0.\n\nThe IDL attribute provides a list of the element's s.\n\nThe element represents a scalar measurement within a known range, or a fractional value; for example disk usage, the relevance of a query result, or the fraction of a voting population to have selected a particular candidate.\n\nThis is also known as a gauge.\n\nThe element should not be used to indicate progress (as in a progress bar). For that role, HTML provides a separate element.\n\nThe element also does not represent a scalar value of arbitrary range — for example, it would be wrong to use this to report a weight, or height, unless there is a known maximum value.\n\nThere are six attributes that determine the semantics of the gauge represented by the element.\n\nThe attribute specifies the lower bound of the range, and the attribute specifies the upper bound. The attribute specifies the value to have the gauge indicate as the \"measured\" value.\n\nThe other three attributes can be used to segment the gauge's range into \"low\", \"medium\", and \"high\" parts, and to indicate which part of the gauge is the \"optimum\" part. The attribute specifies the range that is considered to be the \"low\" part, and the attribute specifies the range that is considered to be the \"high\" part. The attribute gives the position that is \"optimum\"; if that is higher than the \"high\" value then this indicates that the higher the value, the better; if it's lower than the \"low\" mark then it indicates that lower values are better, and naturally if it is in between then it indicates that neither high nor low values are good.\n\nAuthoring requirements: The attribute must be specified. The , , , , , and attributes, when present, must have values that are valid floating-point numbers.\n\nIn addition, the attributes' values are further constrained:\n\nLet be the attribute's number.\n\nIf the attribute is specified, then let be that attribute's value; otherwise, let it be zero.\n\nIf the attribute is specified, then let be that attribute's value; otherwise, let it be 1.0.\n\nThe following inequalities must hold, as applicable:\n• None ≤ ≤ (if is specified)\n• None ≤ ≤ (if is specified)\n• None ≤ ≤ (if is specified)\n• None ≤ (if both and are specified)\n\nIf no minimum or maximum is specified, then the range is assumed to be 0..1, and the value thus has to be within that range.\n\nAuthors are encouraged to include a textual representation of the gauge's state in the element's contents, for users of user agents that do not support the element.\n\nWhen used with microdata, the element's attribute provides the element's machine-readable value.\n\nThere is no explicit way to specify units in the element, but the units may be specified in the attribute in free-form text.\n\nUser agent requirements: User agents must parse the , , , , , and attributes using the rules for parsing floating-point number values.\n\nUser agents must then use all these numbers to obtain values for six points on the gauge, as follows. (The order in which these are evaluated is important, as some of the values refer to earlier ones.)\n\nAll of which will result in the following inequalities all being true:\n• None minimum value ≤ actual value ≤ maximum value\n\nUA requirements for regions of the gauge: If the optimum point is equal to the low boundary or the high boundary, or anywhere in between them, then the region between the low and high boundaries of the gauge must be treated as the optimum region, and the low and high parts, if any, must be treated as suboptimal. Otherwise, if the optimum point is less than the low boundary, then the region between the minimum value and the low boundary must be treated as the optimum region, the region from the low boundary up to the high boundary must be treated as a suboptimal region, and the remaining region must be treated as an even less good region. Finally, if the optimum point is higher than the high boundary, then the situation is reversed; the region between the high boundary and the maximum value must be treated as the optimum region, the region from the high boundary down to the low boundary must be treated as a suboptimal region, and the remaining region must be treated as an even less good region.\n\nUA requirements for showing the gauge: When representing a element to the user, the UA should indicate the relative position of the actual value to the minimum and maximum values, and the relationship between the actual value and the three regions of the gauge.\n\nUser agents may combine the value of the attribute and the other attributes to provide context-sensitive help or inline text detailing the actual values.\n\nThe IDL attribute, on getting, must return the actual value. On setting, the given value must be converted to the best representation of the number as a floating-point number and then the content attribute must be set to that string.\n\nThe IDL attribute, on getting, must return the minimum value. On setting, the given value must be converted to the best representation of the number as a floating-point number and then the content attribute must be set to that string.\n\nThe IDL attribute, on getting, must return the maximum value. On setting, the given value must be converted to the best representation of the number as a floating-point number and then the content attribute must be set to that string.\n\nThe IDL attribute, on getting, must return the low boundary. On setting, the given value must be converted to the best representation of the number as a floating-point number and then the content attribute must be set to that string.\n\nThe IDL attribute, on getting, must return the high boundary. On setting, the given value must be converted to the best representation of the number as a floating-point number and then the content attribute must be set to that string.\n\nThe IDL attribute, on getting, must return the optimum value. On setting, the given value must be converted to the best representation of the number as a floating-point number and then the content attribute must be set to that string.\n\nThe IDL attribute provides a list of the element's s.\n\nThe element represents a set of form controls (or other content) grouped together, optionally with a caption. The caption is given by the first element that is a child of the element, if any. The remainder of the descendants form the group.\n\nThe attribute, when specified, causes all the form control descendants of the element, excluding those that are descendants of the element's first element child, if any, to be disabled.\n\nA element is a if it matches any of the following conditions:\n• Its attribute is specified\n• It is a descendant of another element whose attribute is specified, and is not a descendant of that element's first element child, if any.\n\nThe attribute is used to explicitly associate the element with its form owner. The attribute represents the element's name.\n\nThe IDL attribute must reflect the content attribute of the same name.\n\nThe IDL attribute must return the string \" \".\n\nThe IDL attribute must return an rooted at the element, whose filter matches listed elements.\n\nThe , , and attributes, and the , , and methods, are part of the constraint validation API. The and IDL attributes are part of the element's forms API.\n\nThe element represents a caption for the rest of the contents of the element's parent element, if any.\n\nThe IDL attribute's behavior depends on whether the element is in a element or not. If the has a element as its parent, then the IDL attribute must return the same value as the IDL attribute on that element. Otherwise, it must return null.\n\nMost form controls have a and a . (The latter is only used by elements.) These are used to describe how the user interacts with the control.\n\nA control's value is its internal state. As such, it might not match the user's current input.\n\nFor instance, if a user enters the word \" \" into a numeric field that expects digits, the user's input would be the string \"three\" but the control's value would remain unchanged. Or, if a user enters the email address \" \" (with leading whitespace) into an email field, the user's input would be the string \" awesome@example.com\" but the browser's UI for email fields might translate that into a value of \" \" (without the leading whitespace).\n\nand elements have a . This is used to track the interaction between the value and default value. If it is false, value mirrors the default value. If it is true, the default value is ignored.\n\n, , and elements have a boolean. It is initially set to false.\n\nTo define the behavior of constraint validation in the face of the element's attribute, elements can also have separately defined .\n\nTo define the behavior of the and attributes, as well as other APIs specific to the element, all form control with a value also have an algorithm for obtaining an . By default this algorithm is to simply return the control's value.\n\nThe element does not have a value; the selectedness of its elements is what is used instead.\n\nA form control can be designated as .\n\nThis determines (by means of definitions and requirements in this specification that rely on whether an element is so designated) whether or not the user can modify the value or checkedness of a form control, or whether or not a control can be automatically prefilled.\n\nA form-associated element can have a relationship with a element, which is called the element's . If a form-associated element is not associated with a element, its form owner is said to be null.\n\nA form-associated element has an associated .\n\nA form-associated element is, by default, associated with its nearest ancestor element (as described below), but, if it is listed, may have a attribute specified to override this.\n\nThis feature allows authors to work around the lack of support for nested elements.\n\nIf a listed form-associated element has a attribute specified, then that attribute's value must be the ID of a element in the element's tree.\n\nThe rules in this section are complicated by the fact that although conforming documents or trees will never contain nested elements, it is quite possible (e.g., using a script that performs DOM manipulation) to generate trees that have such nested elements. They are also complicated by rules in the HTML parser that, for historical reasons, can result in a form-associated element being associated with a element that is not its ancestor.\n\nWhen a form-associated element is created, its form owner must be initialized to null (no owner).\n\nWhen a form-associated element is to be with a form, its form owner must be set to that form.\n\nWhen a listed form-associated element's attribute is set, changed, or removed, then the user agent must reset the form owner of that element.\n\nWhen a listed form-associated element has a attribute and the ID of any of the elements in the tree changes, then the user agent must reset the form owner of that form-associated element.\n\nWhen a listed form-associated element has a attribute and an element with an ID is inserted into or removed from the , or its HTML element moving steps are run, then the user agent must reset the form owner of that form-associated element.\n\nThe form owner is also reset by the HTML element insertion steps, HTML element removing steps, and HTML element moving steps.\n• If all of the following are true:\n• None is not listed or its content attribute is not present; and\n• None 's form owner is its nearest element ancestor after the change to the ancestor chain,\n• If is listed, has a content attribute, and is connected, then:\n• None If the first element in 's tree, in tree order, to have an ID that is identical to 's content attribute's value, is a element, then associate the with that element.\n• None Otherwise, if has an ancestor element, then associate with the nearest such ancestor element.\n\nListed form-associated elements except for form-associated custom elements have a IDL attribute, which, on getting, must return the element's form owner, or null if there isn't one.\n\nForm-associated custom elements don't have IDL attribute. Instead, their object has a IDL attribute. On getting, it must throw a \" \" if the target element is not a form-associated custom element. Otherwise, it must return the element's form owner, or null if there isn't one.\n\nThe content attribute gives the name of the form control, as used in form submission and in the element's object. If the attribute is specified, its value must not be the empty string or .\n\nA number of user agents historically implemented special support for first-in-form text controls with the name , and this specification previously defined related user agent requirements for it. However, some user agents subsequently dropped that special support, and the related requirements were removed from this specification. So, to avoid problematic reinterpretations in legacy user agents, the name is no longer allowed.\n\nOther than , any non-empty value for is allowed. An ASCII case-insensitive match for the name is special: if used as the name of a Hidden control with no attribute, then during submission the attribute is automatically given a value consisting of the submission character encoding.\n\nThe IDL attribute must reflect the content attribute.\n\nThe attribute on a form control element enables the submission of the directionality of the element, and gives the name of the control that contains this value during form submission. If such an attribute is specified, its value must not be the empty string.\n\nA , controlled by the dirty value flag, declares a limit on the number of characters a user can input. The number of characters is measured using length and, in the case of elements, with all newlines normalized to a single character (as opposed to CRLF pairs).\n\nIf an element has its form control attribute specified, the attribute's value must be a valid non-negative integer. If the attribute is specified and applying the rules for parsing non-negative integers to its value results in a number, then that number is the element's . If the attribute is omitted or parsing its value results in an error, then there is no maximum allowed value length.\n\nConstraint validation: If an element has a maximum allowed value length, its dirty value flag is true, its value was last changed by a user edit (as opposed to a change made by a script), and the length of the element's API value is greater than the element's maximum allowed value length, then the element is suffering from being too long.\n\nUser agents may prevent the user from causing the element's API value to be set to a value whose length is greater than the element's maximum allowed value length.\n\nIn the case of elements, the API value and value differ. In particular, newline normalization is applied before the maximum allowed value length is checked (whereas the textarea wrapping transformation is not applied).\n\nA , controlled by the dirty value flag, declares a lower bound on the number of characters a user can input. The \"number of characters\" is measured using length and, in the case of elements, with all newlines normalized to a single character (as opposed to CRLF pairs).\n\nThe attribute does not imply the attribute. If the form control has no attribute, then the value can still be omitted; the attribute only kicks in once the user has entered a value at all. If the empty string is not allowed, then the attribute also needs to be set.\n\nIf an element has its form control attribute specified, the attribute's value must be a valid non-negative integer. If the attribute is specified and applying the rules for parsing non-negative integers to its value results in a number, then that number is the element's . If the attribute is omitted or parsing its value results in an error, then there is no minimum allowed value length.\n\nIf an element has both a maximum allowed value length and a minimum allowed value length, the minimum allowed value length must be smaller than or equal to the maximum allowed value length.\n\nConstraint validation: If an element has a minimum allowed value length, its dirty value flag is true, its value was last changed by a user edit (as opposed to a change made by a script), its value is not the empty string, and the length of the element's API value is less than the element's minimum allowed value length, then the element is suffering from being too short.\n\nThe attribute for elements and the attribute for elements are defined separately.\n\nA form control is if any of the following are true:\n• None the element is a , , , , or form-associated custom element, and the attribute is specified on this element (regardless of its value); or\n• None the element is a descendant of a element whose attribute is specified, and is not a descendant of that element's first element child, if any.\n\nA form control that is disabled must prevent any events that are queued on the user interaction task source from being dispatched on the element.\n\nConstraint validation: If an element is disabled, it is barred from constraint validation.\n\nThe IDL attribute must reflect the content attribute.\n\ncan be specified both on elements and on submit buttons (elements that represent buttons that submit forms, e.g. an element whose attribute is in the Submit Button state).\n\nThe attributes for form submission that may be specified on elements are , , , , and .\n\nThe corresponding attributes for form submission that may be specified on submit buttons are , , , , and . When omitted, they default to the values given on the corresponding attributes on the element.\n\nThe and content attributes, if specified, must have a value that is a valid non-empty URL potentially surrounded by spaces.\n\nThe of an element is the value of the element's attribute, if the element is a submit button and has such an attribute, or the value of its form owner's attribute, if it has one, or else the empty string.\n\nThe and content attributes are enumerated attributes with the following keywords and states:\n\nThe attribute's missing value default and invalid value default are both the GET state.\n\nThe attribute has no missing value default, and its invalid value default is the GET state.\n\nThe of an element is one of those states. If the element is a submit button and has a attribute, then the element's method is that attribute's state; otherwise, it is the form owner's attribute's state.\n\nThe and content attributes are enumerated attributes with the following keywords and states:\n• The \" \" keyword and corresponding state.\n• The \" \" keyword and corresponding state.\n• The \" \" keyword and corresponding state.\n\nThe attribute's missing value default and invalid value default are both the state.\n\nThe attribute has no missing value default, and its invalid value default is the state.\n\nThe of an element is one of those three states. If the element is a submit button and has a attribute, then the element's enctype is that attribute's state; otherwise, it is the form owner's attribute's state.\n\nThe and content attributes, if specified, must have values that are valid navigable target names or keywords.\n\nThe and content attributes are boolean attributes. If present, they indicate that the form is not to be validated during submission.\n\nThe of an element is true if the element is a submit button and the element's attribute is present, or if the element's form owner's attribute is present, and false otherwise.\n\nThe IDL attribute must reflect the content attribute of the same name, except that on getting, when the content attribute is missing or its value is the empty string, the element's node document's URL must be returned instead. The IDL attribute must reflect the content attribute of the same name. The and IDL attributes must reflect the respective content attributes of the same name, limited to only known values. The IDL attribute must reflect the content attribute, limited to only known values. The IDL attribute must reflect the content attribute. The IDL attribute must reflect the content attribute, except that on getting, when the content attribute is missing or its value is the empty string, the element's node document's URL must be returned instead. The IDL attribute must reflect the content attribute, limited to only known values. The IDL attribute must reflect the content attribute, limited to only known values. The IDL attribute must reflect the content attribute. The IDL attribute must reflect the content attribute.\n\nUser agents sometimes have features for helping users fill forms in, for example prefilling the user's address based on earlier user input. The content attribute can be used to hint to the user agent how to, or indeed whether to, provide such a feature.\n\nThere are two ways this attribute is used. When wearing the , the attribute describes what input is expected from users. When wearing the , the attribute describes the meaning of the given value.\n\nOn an element whose attribute is in the Hidden state, the attribute wears the autofill anchor mantle. In all other cases, it wears the autofill expectation mantle.\n\nWhen wearing the autofill expectation mantle, the attribute, if specified, must have a value that is an ordered set of space-separated tokens consisting of either a single token that is an ASCII case-insensitive match for the string \" \", or a single token that is an ASCII case-insensitive match for the string \" \", or autofill detail tokens.\n\nWhen wearing the autofill anchor mantle, the attribute, if specified, must have a value that is an ordered set of space-separated tokens consisting of just autofill detail tokens (i.e. the \" \" and \" \" keywords are not allowed).\n\nare the following, in the order given below:\n• Optionally, a token whose first eight characters are an ASCII case-insensitive match for the string \" \", meaning that the field belongs to the named group. For example, if there are two shipping addresses in the form, then they could be marked up as: Ship the blue gift to... Address: City: Postal Code: Ship the red gift to... Address: City: Postal Code:\n• Optionally, a token that is an ASCII case-insensitive match for one of the following strings:\n• \" \", meaning the field is part of the shipping address or contact information\n• \" \", meaning the field is part of the billing address or contact information\n• Either of the following two options:\n• A token that is an ASCII case-insensitive match for one of the following autofill field names, excluding those that are inappropriate for the control:\n• The following, in the given order:\n• Optionally, a token that is an ASCII case-insensitive match for one of the following strings:\n• \" \", meaning the field is for contacting someone at their residence\n• \" \", meaning the field is for contacting someone at their workplace\n• \" \", meaning the field is for contacting someone regardless of location\n• A token that is an ASCII case-insensitive match for one of the following autofill field names, excluding those that are inappropriate for the control:\n• None Optionally, a token that is an ASCII case-insensitive match for the string \" \", meaning the user agent should show public key credentials available via mediation when the user interacts with the form control. is only valid for and elements.\n\nAs noted earlier, the meaning of the attribute and its keywords depends on the mantle that the attribute is wearing.\n\nThe keywords relate to each other as described in the table below. Each field name listed on a row of this table corresponds to the meaning given in the cell for that row in the column labeled \"Meaning\". Some fields correspond to subparts of other fields; for example, a credit card expiry date can be expressed as one field giving both the month and year of expiry (\" \"), or as two fields, one giving the month (\" \") and one the year (\" \"). In such cases, the names of the broader fields cover multiple rows, in which the narrower fields are defined.\n\nGenerally, authors are encouraged to use the broader fields rather than the narrower fields, as the narrower fields tend to expose Western biases. For example, while it is common in some Western cultures to have a given name and a family name, in that order (and thus often referred to as a first name and a surname), many cultures put the family name first and the given name second, and many others simply have one name (a mononym). Having a single field is therefore more flexible.\n\nSome fields are only appropriate for certain form controls. An autofill field name is if the control does not belong to the group listed for that autofill field in the fifth column of the first row describing that autofill field in the table below. What controls fall into each group is described below the table.\n\nThe groups correspond to controls as follows:\n\nAddress levels: The \" \" – \" \" fields are used to describe the locality of the street address. Different locales have different numbers of levels. For example, the US uses two levels (state and town), the UK uses one or two depending on the address (the post town, and in some cases the locality), and China can use three (province, city, district). The \" \" field represents the widest administrative division. Different locales order the fields in different ways; for example, in the US the town (level 2) precedes the state (level 1); while in Japan the prefecture (level 1) precedes the city (level 2) which precedes the district (level 3). Authors are encouraged to provide forms that are presented in a way that matches the country's conventions (hiding, showing, and rearranging fields accordingly as the user changes the country).\n\nEach element to which the attribute applies, each element, and each element, has an , an , an , a , and an .\n\nThe autofill field name specifies the specific kind of data expected in the field, e.g. \" \" or \" \".\n\nThe autofill hint set identifies what address or contact information type the user agent is to look at, e.g. \" \" or \" \".\n\nThe non-autofill credential type identifies a type of credential that may be offered by the user agent when the user interacts with the field alongside other autofill field values. If this value is \" \" instead of null, selecting a credential of that type will resolve a pending mediation request, instead of autofilling the field.\n\nThe autofill scope identifies the group of fields whose information concerns the same subject, and consists of the autofill hint set with, if applicable, the \" \" prefix, e.g. \" \", \" \", or \" \".\n\nThese values are defined as the result of running the following algorithm:\n• None If the element has no attribute, then jump to the step labeled default.\n• None Let be the result of splitting the attribute's value on ASCII whitespace.\n• None If is empty, then jump to the step labeled default.\n• None Let be the index of the last token in .\n• None Let be the th token in .\n• None Set the , pair to the result of determining a field's category given .\n• None If is null, then jump to the step labeled default.\n• None If the number of tokens in is greater than , then jump to the step labeled default.\n• None If is Off or Automatic but the element's attribute is wearing the autofill anchor mantle, then jump to the step labeled default.\n• None If is Off, let the element's autofill field name be the string \" \", let its autofill hint set be empty, and let its IDL-exposed autofill value be the string \" \". Then, return.\n• None If is Automatic, let the element's autofill field name be the string \" \", let its autofill hint set be empty, and let its IDL-exposed autofill value be the string \" \". Then, return.\n• None Let be an empty list.\n• None Let be an empty set.\n• None Let have the same value as .\n• If is Credential and the th token in is an ASCII case-insensitive match for \" \", then run the substeps that follow:\n• None If the th token in is the first entry, then skip to the step labeled done.\n• None Set the , pair to the result of determining a field's category given the th token in .\n• None If is not Normal and is not Contact, then jump to the step labeled default.\n• None If is greater than minus one (i.e. if the number of remaining tokens is greater than ), then jump to the step labeled default.\n• None Set to the concatenation of the th token in , a U+0020 SPACE character, and the previous value of .\n• None If the th token in is the first entry, then skip to the step labeled done.\n• If is Contact and the th token in is an ASCII case-insensitive match for one of the strings in the following list, then run the substeps that follow:\n• None Let be the matching string from the list above.\n• None Insert at the start of .\n• None Let be the concatenation of , a U+0020 SPACE character, and the previous value of .\n• None If the th entry in is the first entry, then skip to the step labeled done.\n• If the th token in is an ASCII case-insensitive match for one of the strings in the following list, then run the substeps that follow:\n• None Let be the matching string from the list above.\n• None Insert at the start of .\n• None Let be the concatenation of , a U+0020 SPACE character, and the previous value of .\n• None If the th entry in is the first entry, then skip to the step labeled done.\n• None If the th entry in is not the first entry, then jump to the step labeled default.\n• None If the first eight characters of the th token in are not an ASCII case-insensitive match for the string \" \", then jump to the step labeled default.\n• None Let be the th token in , converted to ASCII lowercase.\n• None Insert at the start of .\n• None Let be the concatenation of , a U+0020 SPACE character, and the previous value of .\n• None Done: Let the element's autofill hint set be .\n• None Let the element's non-autofill credential type be .\n• None Let the element's autofill scope be .\n• None Let the element's autofill field name be .\n• None Let the element's IDL-exposed autofill value be .\n• None Default: Let the element's IDL-exposed autofill value be the empty string, and its autofill hint set and autofill scope be empty.\n• None If the element's attribute is wearing the autofill anchor mantle, then let the element's autofill field name be the empty string and return.\n• None Let be the element's form owner, if any, or null otherwise.\n• If is not null and 's attribute is in the off state, then let the element's autofill field name be \" \". Otherwise, let the element's autofill field name be \" \".\n• If the is not an ASCII case-insensitive match for one of the tokens given in the first column of the following table, return the pair (null, null).\n• None Otherwise, let and be the values of the cells in the second and third columns of that row respectively.\n\nFor the purposes of autofill, a depends on the kind of control:\n\nHow to process the autofill hint set, autofill scope, and autofill field name depends on the mantle that the attribute is wearing.\n\nWhen the user agent , elements with the same form owner and the same autofill scope must use data relating to the same person, address, payment instrument, and contact details. When a user agent autofills \" \" and \" \" fields with the same form owner and autofill scope, and the user agent has a value for the \" field(s), then the \" \" field(s) must be filled using a human-readable name for the same country. When a user agent fills in multiple fields at once, all fields with the same autofill field name, form owner, and autofill scope must be filled with the same value.\n\nSuppose a user agent knows of two phone numbers, +1 555 123 1234 and +1 555 666 7777. It would not be conforming for the user agent to fill a field with with the value \"123\" and another field in the same form with with the value \"7777\". The only valid prefilled values given the aforementioned information would be \"123\" and \"1234\", or \"666\" and \"7777\", respectively.\n\nSimilarly, if a form for some reason contained both a \" \" field and a \" \" field, and the user agent prefilled the form, then the month component of the former would have to match the latter.\n\nThe \" \" tokens in the autofill scope are opaque; user agents must not attempt to derive meaning from the precise values of these tokens.\n\nFor example, it would not be conforming if the user agent decided that it should offer the address it knows to be the user's daughter's address for \" \" and the addresses it knows to be the user's spouses' addresses for \" \".\n\nThe autocompletion mechanism must be implemented by the user agent acting as if the user had modified the control's data, and must be done at a time where the element is mutable (e.g. just after the element has been inserted into the document, or when the user agent stops parsing). User agents must only prefill controls using values that the user could have entered.\n\nFor example, if a element only has elements with values \"Steve\" and \"Rebecca\", \"Jay\", and \"Bob\", and has an autofill field name \" \", but the user agent's only idea for what to prefill the field with is \"Evan\", then the user agent cannot prefill the field. It would not be conforming to somehow set the element to the value \"Evan\", since the user could not have done so themselves.\n\nA user agent prefilling a form control must not discriminate between form controls that are in a document tree and those that are connected; that is, it is not conforming to make the decision on whether or not to autofill based on whether the element's root is a shadow root versus a .\n\nA user agent prefilling a form control's value must not cause that control to suffer from a type mismatch, suffer from being too long, suffer from being too short, suffer from an underflow, suffer from an overflow, or suffer from a step mismatch. A user agent prefilling a form control's value must not cause that control to suffer from a pattern mismatch either. Where possible given the control's constraints, user agents must use the format given as canonical in the aforementioned table. Where it's not possible for the canonical format to be used, user agents should use heuristics to attempt to convert values so that they can be used.\n\nA user agent may allow the user to override an element's autofill field name, e.g. to change it from \" \" to \" \" to allow values to be remembered and prefilled despite the page author's objections, or to always \" \", never remembering values.\n\nMore specifically, user agents may in particular consider replacing the autofill field name of form controls that match the description given in the first column of the following table, when their autofill field name is either \" \" or \" \", with the value given in the second cell of that row. If this table is used, the replacements must be done in tree order, since all but the first row references the autofill field name of earlier elements. When the descriptions below refer to form controls being preceded or followed by others, they mean in the list of listed elements that share the same form owner.\n\nThe IDL attribute, on getting, must return the element's IDL-exposed autofill value, and on setting, must reflect the content attribute of the same name.\n\nThe and elements define several attributes and methods for handling their selection. Their shared algorithms are defined here.\n\nAll elements to which these APIs apply, and all elements, have either a or a at all times (even for elements that are not being rendered), measured in offsets into the code units of the control's relevant value. The initial state must consist of a text entry cursor at the beginning of the control.\n\nFor elements, these APIs must operate on the element's value. For elements, these APIs must operate on the element's API value. In the below algorithms, we call the value string being operated on the .\n\nCharacters with no visible rendering, such as U+200D ZERO WIDTH JOINER, still count as characters. Thus, for instance, the selection can include just an invisible character, and the text insertion cursor can be placed to one side or another of such a character.\n\nWhenever the relevant value changes for an element to which these APIs apply, run these steps:\n• If the element has a selection:\n• None If the start of the selection is now past the end of the relevant value, set it to the end of the relevant value.\n• None If the end of the selection is now past the end of the relevant value, set it to the end of the relevant value.\n• None If the user agent does not support empty selection, and both the start and end of the selection are now pointing to the end of the relevant value, then instead set the element's text entry cursor position to the end of the relevant value, removing any selection.\n• None Otherwise, the element must have a text entry cursor position position. If it is now past the end of the relevant value, set it to the end of the relevant value.\n\nIn some cases where the relevant value changes, other parts of the specification will also modify the text entry cursor position, beyond just the clamping steps above. For example, see the setter for .\n\nWhere possible, user interface features for changing the text selection in and elements must be implemented using the set the selection range algorithm so that, e.g., all the same events fire.\n\nThe selections of and elements have a , which is either \" \", \" \", or \" \". The exact meaning of the selection direction depends on the platform. This direction is set when the user manipulates the selection. The initial selection direction must be \" \" if the platform supports that direction, or \" \" otherwise.\n\nTo of an element to a given direction, update the element's selection direction to the given direction, unless the direction is \" \" and the platform does not support that direction; in that case, update the element's selection direction to \" \".\n\nThe method, when invoked, must run the following steps:\n• If this element is an element, and either does not apply to this element or the corresponding control has no selectable text, return. For instance, in a user agent where is rendered as a color well with a picker, as opposed to a text control accepting a hexadecimal color code, there would be no selectable text, and thus calls to the method are ignored.\n• None Set the selection range with 0 and infinity.\n\nThe attribute's getter must run the following steps:\n• None If this element is an element, and does not apply to this element, return null.\n• None If there is no selection, return the code unit offset within the relevant value to the character that immediately follows the text entry cursor.\n• None Return the code unit offset within the relevant value to the character that immediately follows the start of the selection.\n\nThe attribute's setter must run the following steps:\n• None If this element is an element, and does not apply to this element, throw an \" \" .\n• None Let be the value of this element's attribute.\n• None If is less than the given value, set to the given value.\n• None Set the selection range with the given value, , and the value of this element's attribute.\n\nThe attribute's getter must run the following steps:\n• None If this element is an element, and does not apply to this element, return null.\n• None If there is no selection, return the code unit offset within the relevant value to the character that immediately follows the text entry cursor.\n• None Return the code unit offset within the relevant value to the character that immediately follows the end of the selection.\n\nThe attribute's setter must run the following steps:\n• None If this element is an element, and does not apply to this element, throw an \" \" .\n• None Set the selection range with the value of this element's attribute, the given value, and the value of this element's attribute.\n\nThe attribute's getter must run the following steps:\n• None If this element is an element, and does not apply to this element, return null.\n\nThe attribute's setter must run the following steps:\n• None If this element is an element, and does not apply to this element, throw an \" \" .\n• None Set the selection range with the value of this element's attribute, the value of this element's attribute, and the given value.\n\nThe method, when invoked, must run the following steps:\n• None If this element is an element, and does not apply to this element, throw an \" \" .\n• None Set the selection range with , , and .\n\nTo with an integer or null , an integer or null or the special value infinity , and optionally a string , run the following steps:\n• None If is null, let be zero.\n• None If is null, let be zero.\n• None Set the selection of the text control to the sequence of code units within the relevant value starting with the code unit at the th position (in logical order) and ending with the code unit at the ( -1)th position. Arguments greater than the length of the relevant value of the text control (including the special value infinity) must be treated as pointing at the end of the text control. If is less than or equal to then the start of the selection and the end of the selection must both be placed immediately before the character with offset . In UAs where there is no concept of an empty selection, this must set the cursor to be just before the character with offset .\n• None If is not identical to either \" \" or \" \", or if the argument was not given, set to \" \".\n• None Set the selection direction of the text control to .\n• None If the previous steps caused the selection of the text control to be modified (in either extent or direction), then queue an element task on the user interaction task source given the element to fire an event named at the element, with the attribute initialized to true.\n\nThe method, when invoked, must run the following steps:\n• None If this element is an element, and does not apply to this element, throw an \" \" .\n• None Set this element's dirty value flag to true.\n• If the method has only one argument, then let and have the values of the attribute and the attribute respectively. Otherwise, let , have the values of the second and third arguments respectively.\n• None If is greater than , then throw an \" \" .\n• None If is greater than the length of the relevant value of the text control, then set it to the length of the relevant value of the text control.\n• None If is greater than the length of the relevant value of the text control, then set it to the length of the relevant value of the text control.\n• None Let be the current value of the attribute.\n• None Let be the current value of the attribute.\n• None If is less than , delete the sequence of code units within the element's relevant value starting with the code unit at the th position and ending with the code unit at the ( -1)th position.\n• None Insert the value of the first argument into the text of the relevant value of the text control, immediately before the th code unit.\n• None Let be the length of the value of the first argument.\n• None Let be the sum of and .\n• Run the appropriate set of substeps from the following list: If the fourth argument's value is \" \" If the fourth argument's value is \" \" Let and be . If the fourth argument's value is \" \" Let and be . If the fourth argument's value is \" \" If the method has only one argument\n• If is greater than , then increment it by . (If is negative, i.e. the new text is shorter than the old text, then this will decrease the value of .) Otherwise: if is greater than , then set it to . (This snaps the start of the selection to the start of the new text if it was in the middle of the text that it replaced.)\n• If is greater than , then increment it by in the same way. Otherwise: if is greater than , then set it to . (This snaps the end of the selection to the end of the new text if it was in the middle of the text that it replaced.)\n• None Set the selection range with and .\n\nThe method uses the following enumeration:\n\nA submittable element is a except when a condition has . (For example, an element is barred from constraint validation if it has a element ancestor.)\n\nAn element can have a defined. Initially, an element must have its custom validity error message set to the empty string. When its value is not the empty string, the element is suffering from a custom error. It can be set using the method, except for form-associated custom elements. Form-associated custom elements can have a custom validity error message set via their object's method. The user agent should use the custom validity error message when alerting the user to the problem with the control.\n\nAn element can be constrained in various ways. The following is the list of that a form control can be in, making the control invalid for the purposes of constraint validation. (The definitions below are non-normative; other parts of this specification define more precisely when each state applies or does not.)\n\nAn element can still suffer from these states even when the element is disabled; thus these states can be represented in the DOM even if validating the form during submission wouldn't indicate a problem to the user.\n\nAn element if it is not suffering from any of the above validity states.\n\nWhen the user agent is required to of element , it must run the following steps, which return either a positive result (all the controls in the form are valid) or a negative result (there are invalid controls) along with a (possibly empty) list of elements that are invalid and for which no script has claimed responsibility:\n• None Let be a list of all the submittable elements whose form owner is , in tree order.\n• None Let be an initially empty list of elements.\n• For each element in , in tree order:\n• None If is not a , then move on to the next element.\n• None Otherwise, if satisfies its constraints, then move on to the next element.\n• None If is empty, then return a positive result.\n• None Let be an initially empty list of elements.\n• For each element in , if any, in tree order:\n• None Let be the result of firing an event named at , with the attribute initialized to true.\n• None If is true, then add to .\n• None Return a negative result with the list of elements in the list.\n\nIf a user agent is to of element , then the user agent must run the following steps:\n• None of , and let be the list of elements returned if the result was negative.\n• None If the result was positive, then return that result.\n• Report the problems with the constraints of at least one of the elements given in to the user.\n• None User agents may focus one of those elements in the process, by running the focusing steps for that element, and may change the scrolling position of the document, or perform some other action that brings the element to the user's attention. For elements that are form-associated custom elements, user agents should use their validation anchor instead, for the purposes of these actions.\n• None User agents may report more than one constraint violation.\n• None User agents may coalesce related constraint violation reports if appropriate (e.g. if multiple radio buttons in a group are marked as required, only one error need be reported).\n• None If one of the controls is not being rendered (e.g. it has the attribute set) then user agents may report a script error.\n\nThe attribute's getter must return true, if this element is a , and false otherwise (i.e., false if any conditions are barring it from constraint validation).\n\nThe attribute of interface, on getting, must throw a \" \" if the target element is not a form-associated custom element. Otherwise, it must return true if the target element is a , and false otherwise.\n• None Set to the result of normalizing newlines given .\n\nThe attribute's getter must return a object that represents the validity states of this element. This object is live.\n\nThe attribute of interface, on getting, must throw a \" \" if the target element is not a form-associated custom element. Otherwise, it must return a object that represents the validity states of the target element. This object is live.\n\nA object has the following attributes. On getting, they must return true if the corresponding condition given in the following list is true, and false otherwise.\n\nThe for an element are:\n• If is a and does not satisfy its constraints, then:\n• None Fire an event named at , with the attribute initialized to true (though canceling has no effect).\n\nThe method, when invoked, must run the check validity steps on this element.\n\nThe method of the interface must run these steps:\n• None Let be this 's target element.\n• None If is not a form-associated custom element, then throw a \" \" .\n\nThe for an element are:\n• If is a and does not satisfy its constraints, then:\n• None Let be the result of firing an event named at , with the attribute initialized to true.\n• None If is true, then report the problems with the constraints of this element to the user. When reporting the problem with the constraints to the user, the user agent may run the focusing steps for , and may change the scrolling position of the document, or perform some other action that brings to the user's attention. User agents may report more than one constraint violation, if suffers from multiple problems at once.\n\nThe method, when invoked, must run the report validity steps on this element.\n\nThe method of the interface must run these steps:\n• None Let be this 's target element.\n• None If is not a form-associated custom element, then throw a \" \" .\n\nThe attribute's getter must run these steps:\n• None If this element is not a or if this element satisfies its constraints, then return the empty string.\n• None Return a suitably localized message that the user agent would show the user if this were the only form control with a validity constraint problem. If the user agent would not actually show a textual message in such a situation (e.g., it would show a graphical cue instead), then return a suitably localized message that expresses (one or more of) the validity constraint(s) that the control does not satisfy. If the element is a and is suffering from a custom error, then the custom validity error message should be present in the return value.\n\nServers should not rely on client-side validation. Client-side validation can be intentionally bypassed by hostile users, and unintentionally bypassed by users of older user agents or automated tools that do not implement these features. The constraint validation features are only intended to improve the user experience, not to provide any kind of security mechanism.\n\nWhen a form is submitted, the data in the form is converted into the structure specified by the enctype, and then sent to the destination specified by the action using the given method.\n\nFor example, take the following form:\n\nIf the user types in \"cats\" in the first field and \"fur\" in the second, and then hits the submit button, then the user agent will load .\n\nOn the other hand, consider this form:\n\nGiven the same user input, the result on submission is quite different: the user agent instead does an HTTP POST to the given URL, with as the entity body something like the following text:\n\nA element's is the first submit button in tree order whose form owner is that element.\n\nIf the user agent supports letting the user submit a form implicitly (for example, on some platforms hitting the \"enter\" key while a text control is focused implicitly submits the form), then doing so for a form, whose default button has activation behavior and is not disabled, must cause the user agent to fire a event at that default button.\n\nThere are pages on the web that are only usable if there is a way to implicitly submit forms, so user agents are strongly encouraged to support this.\n\nIf the form has no submit button, then the implicit submission mechanism must perform the following steps:\n• None If the form has more than one field that blocks implicit submission, then return.\n• None Submit the element from the element itself with userInvolvement set to \" \".\n\nFor the purpose of the previous paragraph, an element is a of a element if it is an element whose form owner is that element and whose attribute is in one of the following states: Text, Search, Telephone, URL, Email, Password, , Month, Week, Time, , Number\n\nTo a element from an element (typically a button), given an optional boolean (default false) and an optional user navigation involvement (default \" \"):\n• None If cannot navigate, then return.\n• None If 's constructing entry list is true, then return.\n• None If 's active sandboxing flag set has its sandboxed forms browsing context flag set, then return.\n• If is false, then:\n• None If 's firing submission events is true, then return.\n• None For each element in the list of submittable elements whose form owner is , set 's user validity to true.\n• If the element's is false, then of and examine the result. If the result is negative (i.e., the constraint validation concluded that there were invalid fields and probably informed the user of this), then:\n• None Let be null if is . Otherwise, let be .\n• None Let be the result of firing an event named at using , with the attribute initialized to , the attribute initialized to true, and the attribute initialized to true.\n• None If is false, then return.\n• If cannot navigate, then return. Cannot navigate is run again as dispatching the event could have changed the outcome.\n• None Let be the result of picking an encoding for the form.\n• None Let be the result of constructing the entry list with , , and .\n• If cannot navigate, then return. Cannot navigate is run again as dispatching the event in constructing the entry list could have changed the outcome.\n• None Let be the element's method.\n• If is dialog, then:\n• None If does not have an ancestor element, then return.\n• If is an element whose attribute is in the Image Button state, then:\n• None Let ( , ) be the selected coordinate.\n• None Set to the concatenation of , \" \", and .\n• None Otherwise, if has a value, then set to that value.\n• None Let be the element's action.\n• If is the empty string, let be the URL of the .\n• None Let be the result of encoding-parsing a URL given , relative to 's node document.\n• None If is failure, then return.\n• None Let be the scheme of .\n• None Let be the element's enctype.\n• None If the element is a submit button and it has a attribute, then set to the attribute value.\n• None Let be the result of getting an element's target given 's form owner and .\n• None Let be the result of getting an element's noopener with , , and .\n• None Let be the first return value of applying the rules for choosing a navigable given , 's node navigable, and .\n• None If is null, then return.\n• None If equals 's active document, and has not yet completely loaded, then set to \" \".\n• Select the appropriate row in the table below based on as given by the first cell of each row. Then, select the appropriate cell on that row based on as given in the first cell of each column. Then, jump to the steps named in that cell and defined below the table. If is not one of those listed in this table, then the behavior is not defined by this specification. User agents should, in the absence of another specification defining this, act in a manner analogous to that defined in this specification for similar schemes. Each element has a , which is either null or a task; when the is first created, its planned navigation must be set to null. In the behaviors described below, when the user agent is required to to a URL given an optional POST resource-or-null (default null), it must run the following steps:\n• None Let be the empty string.\n• None If the element's link types include the keyword, then set to \" \".\n• None If the has a non-null planned navigation, remove it from its task queue.\n• Queue an element task on the DOM manipulation task source given the element and the following steps:\n• None Navigate to using the element's node document, with set to , userInvolvement set to , sourceElement set to , referrerPolicy set to , documentResource set to , and formDataEntryList set to .\n• None Set the 's planned navigation to the just-queued task. The behaviors are as follows: Let be the result of converting to a list of name-value pairs with . Let be the result of running the serializer with and . Let be the result of converting to a list of name-value pairs with . Let be the result of running the serializer with and . Set to the result of encoding . Let be the result of running the encoding algorithm with and . Let be the isomorphic encoding of the concatenation of \" \" and the boundary string generated by the encoding algorithm. Let be the result of converting to a list of name-value pairs with . Let be the result of running the encoding algorithm with . Set to the result of encoding using . Plan to navigate to given a POST resource whose request body is and request content-type is . Let be the result of converting to a list of name-value pairs with . Let be the result of running the serializer with and . Replace occurrences of U+002B PLUS SIGN characters (+) in with the string \" \". Let be the result of converting to a list of name-value pairs with . Let be the result of running the encoding algorithm with . Set to the result of running UTF-8 percent-encode on using the default encode set. [URL] Let be the result of running the serializer with and . If 's query is null, then set it to the empty string. If 's query is not the empty string, then append a single U+0026 AMPERSAND character (&) to it.\n\nAn is a list of entries, typically representing the contents of a form. An is a tuple consisting of a (a scalar value string) and a (either a scalar value string or a object).\n\nTo given a string , a string or object , and optionally a scalar value string :\n• None Set to the result of converting into a scalar value string.\n• None If is a string, then set to the result of converting into a scalar value string.\n• \n• None If is not a object, then set to a new object, representing the same bytes, whose attribute value is \" \".\n• None If is given, then set to a new object, representing the same bytes, whose attribute is . These operations will create a new object if either is given or the passed is not a object. In those cases, the identity of the passed object is not kept.\n• None Return an entry whose name is and whose value is .\n\nTo given a , an optional (default null), and an optional (default UTF-8):\n• None If 's constructing entry list is true, then return null.\n• None Let be a list of all the submittable elements whose form owner is , in tree order.\n• None Let be a new empty entry list.\n• For each element in , in tree order:\n• If any of the following are true:\n• None is a button but it is not ;\n• None is an element whose attribute is in the Checkbox state and whose checkedness is false; or\n• None is an element whose attribute is in the Radio Button state and whose checkedness is false,\n• If the element is an element whose attribute is in the Image Button state, then:\n• None If the element is not , then continue.\n• None If the element has a attribute specified and its value is not the empty string, let be that value followed by U+002E (.). Otherwise, let be the empty string.\n• None Let be the concatenation of and U+0078 (x).\n• None Let be the concatenation of and U+0079 (y).\n• None Let ( , ) be the selected coordinate.\n• None Create an entry with and , and append it to .\n• None Create an entry with and , and append it to .\n• None If the is a form-associated custom element, then perform the entry construction algorithm given and , then continue.\n• None If either the element does not have a attribute specified, or its attribute's value is the empty string, then continue.\n• None Let be the value of the element's attribute.\n• None If the element is a element, then for each element in the element's list of options whose selectedness is true and that is not disabled, create an entry with and the value of the element, and append it to .\n• Otherwise, if the element is an element whose attribute is in the Checkbox state or the Radio Button state, then:\n• None If the element has a attribute specified, then let be the value of that attribute; otherwise, let be the string \" \".\n• None Create an entry with and , and append it to .\n• Otherwise, if the element is an element whose attribute is in the File Upload state, then:\n• None If there are no selected files, then create an entry with and a new object with an empty name, as type, and an empty body, and append it to .\n• None Otherwise, for each file in selected files, create an entry with and a object representing the file, and append it to .\n• Otherwise, if the element is an element whose attribute is in the Hidden state and is an ASCII case-insensitive match for \" \":\n• None Let be the name of .\n• None Create an entry with and , and append it to .\n• None Otherwise, create an entry with and the value of the element, and append it to .\n• If the element has a attribute, that attribute's value is not the empty string, and the element is an auto-directionality form-associated element:\n• None Let be the value of the element's attribute.\n• None Let be the string \" \" if the directionality of the element is 'ltr', and \" \" otherwise (i.e., when the directionality of the element is 'rtl').\n• None Create an entry with and , and append it to .\n• None Let be a new object associated with .\n• None Fire an event named at using , with the attribute initialized to and the attribute initialized to true.\n\nIf the user agent is to , it must run the following steps:\n• None Let be the document's character encoding.\n• If the element has an attribute, set to the return value of running these substeps:\n• None Let be the value of the element's attribute.\n• None Let be the result of splitting on ASCII whitespace.\n• None Let be an empty list of character encodings.\n• None For each token in in turn (in the order in which they were found in ), get an encoding for the token and, if this does not result in failure, append the encoding to .\n• None Return the first encoding in .\n• None Return the result of getting an output encoding from .\n\nConverting an entry list to a list of name-value pairs\n\nThe and encoding algorithms take a list of name-value pairs, where the values must be strings, rather than an entry list where the value can be a . The following algorithm performs the conversion.\n\nTo an entry list , run these steps:\n• None Let be an empty list of name-value pairs.\n• For each of :\n• None Let be 's name, with every occurrence of U+000D (CR) not followed by U+000A (LF), and every occurrence of U+000A (LF) not preceded by U+000D (CR), replaced by a string consisting of U+000D (CR) and U+000A (LF).\n• None If 's value is a object, then let be 's value's . Otherwise, let be 's value.\n• None Replace every occurrence of U+000D (CR) not followed by U+000A (LF), and every occurrence of U+000A (LF) not preceded by U+000D (CR), in , by a string consisting of U+000D (CR) and U+000A (LF).\n• None Append to a new name-value pair whose name is and whose value is .\n\nSee for details on . [URL]\n\nThe , given an entry list and an encoding , is as follows:\n• For each of :\n• None Replace every occurrence of U+000D (CR) not followed by U+000A (LF), and every occurrence of U+000A (LF) not preceded by U+000D (CR), in 's name, by a string consisting of a U+000D (CR) and U+000A (LF).\n• None If 's value is not a object, then replace every occurrence of U+000D (CR) not followed by U+000A (LF), and every occurrence of U+000A (LF) not preceded by U+000D (CR), in 's value, by a string consisting of a U+000D (CR) and U+000A (LF).\n• Return the byte sequence resulting from encoding the using the rules described by RFC 7578, , given the following conditions: [RFC7578]\n• None Each entry in is a field, the name of the entry is the field name and the value of the entry is the field value.\n• None The order of parts must be the same as the order of fields in . Multiple entries with the same name must be treated as distinct fields.\n• None Field names, field values for non-file fields, and filenames for file fields, in the generated resource must be set to the result of encoding the corresponding entry's name or value with , converted to a byte sequence.\n• None For field names and filenames for file fields, the result of the encoding in the previous bullet point must be escaped by replacing any 0x0A (LF) bytes with the byte sequence ` `, 0x0D (CR) with ` ` and 0x22 (\") with ` `. The user agent must not perform any other escapes.\n• None The parts of the generated resource that correspond to non-file fields must not have a ` ` header specified.\n• None The boundary used by the user agent in generating the return value of this algorithm is the . (This value is used to generate the MIME type of the form submission payload generated by this algorithm.)\n\nFor details on how to interpret payloads, see RFC 7578. [RFC7578]\n\nThe , given a list of name-value pairs , is as follows:\n• None Let be the empty string.\n• For each in :\n\nPayloads using the format are intended to be human readable. They are not reliably interpretable by computer, as the format is ambiguous (for example, there is no way to distinguish a literal newline in a value from the newline at the end of the value).\n\nThe attribute must return the value it was initialized to.\n\nThe attribute must return the value it was initialized to. It represents a object associated to the entry list that is constructed when the is submitted.\n\nWhen a element is , run these steps:\n• None Let be the result of firing an event named at , with the and attributes initialized to true.\n• None If is true, then invoke the reset algorithm of each resettable element whose form owner is .\n\nEach resettable element defines its own . Changes made to form controls as part of these algorithms do not count as changes caused by the user (and thus, e.g., do not cause events to fire).\n\nThe element represents a disclosure widget from which the user can obtain additional information or controls.\n\nAs with all HTML elements, it is not conforming to use the element when attempting to represent another type of control. For example, tab widgets and menu widgets are not disclosure widgets, so abusing the element to implement these patterns is incorrect.\n\nThe element is not appropriate for footnotes. Please see the section on footnotes for details on how to mark up footnotes.\n\nThe first element child of the element, if any, represents the summary or legend of the details. If there is no child element, the user agent should provide its own legend (e.g. \"Details\").\n\nThe rest of the element's contents represents the additional information or controls.\n\nThe content attribute gives the name of the group of related elements that the element is a member of. Opening one member of this group causes other members of the group to close. If the attribute is specified, its value must not be the empty string.\n\nBefore using this feature, authors should consider whether this grouping of related elements into an exclusive accordion is helpful or harmful to users. While using an exclusive accordion can reduce the maximum amount of space that a set of content can occupy, it can also frustrate users who have to open many items to find what they want or users who want to look at the contents of multiple items at the same time.\n\nA document must not contain more than one element in the same details name group that has the attribute present. Authors must not use script to add elements to a document in a way that would cause a details name group to have more than one element with the attribute present.\n\nThe group of elements that is created by a common attribute is exclusive, meaning that at most one of the elements can be open at once. While this exclusivity is enforced by user agents, the resulting enforcement immediately changes the attributes in the markup. This requirement on authors forbids such misleading markup.\n\nA document must not contain a element that is a descendant of another element in the same details name group.\n\nDocuments that use the attribute to group multiple related elements should keep those related elements together in a containing element (such as a element or element). When it makes sense for the group to be introduced with a heading, authors should put that heading in a heading element at the start of the containing element.\n\nVisually and programmatically grouping related elements together can be important for accessible user experiences. This can help users understand the relationship between such elements. When related elements are in disparate sections of a web page rather than being grouped, the elements' relationships to each other can be less discoverable or understandable.\n\nThe content attribute is a boolean attribute. If present, it indicates that both the summary and the additional information is to be shown to the user. If the attribute is absent, only the summary is to be shown.\n\nWhen the element is created, if the attribute is absent, the additional information should be hidden; if the attribute is present, that information should be shown. Subsequently, if the attribute is removed, then the information should be hidden; if the attribute is added, the information should be shown.\n\nThe user agent should allow the user to request that the additional information be shown or hidden. To honor a request for the details to be shown, the user agent must set the attribute on the element to the empty string. To honor a request for the information to be hidden, the user agent must remove the attribute from the element.\n\nThis ability to request that additional information be shown or hidden may simply be the activation behavior of the appropriate element, in the case such an element exists. However, if no such element exists, user agents can still provide this ability through some other user interface affordance.\n\nThe that contains a element also contains all the other elements that fulfill all of the following conditions:\n• Both and are in the same tree.\n• They both have a attribute, their attributes are not the empty string, and the value of 's attribute equals the value of 's attribute.\n\nEvery element has a , which is a toggle task tracker or null, initially null.\n\nThe following attribute change steps, given , , , , and , are used for all elements:\n• None If is not null, then return.\n• None If is , then ensure details exclusivity by closing the given element if needed given .\n• None If is , then:\n• If one of or is null and the other is not null, run the following steps, which are known as the , for this element: When the attribute is toggled several times in succession, the resulting tasks essentially get coalesced so that only one event is fired.\n• None If is null, queue a details toggle event task given the element, \" \", and \" \".\n• None Otherwise, queue a details toggle event task given the element, \" \", and \" \".\n• None If is null and is not null, then ensure details exclusivity by closing other elements if needed given .\n\nThe HTML element insertion steps, given , are:\n• None Ensure details exclusivity by closing the given element if needed given .\n\nTo be clear, these attribute change and insertion steps also run when an attribute or element is inserted via the parser.\n\nTo given a element , a string , and a string :\n• If 's details toggle task tracker is not null, then:\n• Queue an element task given the DOM manipulation task source and to run the following steps:\n• None Fire an event named at , using , with the attribute initialized to and the attribute initialized to .\n• None Set 's details toggle task tracker to a struct with task set to the just-queued task and old state set to .\n\nTo ensure details exclusivity by closing other elements if needed given a element :\n• None If does not have a attribute, or its attribute is the empty string, then return.\n• None Let be a list of elements, containing all elements in 's details name group except for , in tree order.\n• For each element of :\n• If the attribute is set on , then:\n• None Assert: is the only element in that has the attribute set.\n\nTo ensure details exclusivity by closing the given element if needed given a element :\n• None If does not have an attribute, then return.\n• None If does not have a attribute, or its attribute is the empty string, then return.\n• None Let be a list of elements, containing all elements in 's details name group except for , in tree order.\n• For each element of :\n• If the attribute is set on , then:\n\nThe and IDL attributes must reflect the respective content attributes of the same name.\n\nThe is to run the following steps on :\n• While has a parent node within the flat tree:\n• If is slotted into the second slot of a element:\n• None Set to the element which is slotted into.\n• None If the attribute is not set on , then set the attribute on to the empty string.\n• None Otherwise, set to the parent node of within the flat tree.\n\nThe element represents a summary, caption, or legend for the rest of the contents of the element's parent element, if any.\n\nA element is a if the following algorithm returns true:\n• None If this element has no parent, then return false.\n• None Let be this element's parent.\n• None If is not a element, then return false.\n• None If 's first element child is not this element, then return false.\n\nThe activation behavior of elements is to run the following steps:\n• None If this element is not the summary for its parent details, then return.\n• None Let be this element's parent.\n• If the attribute is present on , then remove it. Otherwise, set 's attribute to the empty string. This will then run the details notification task steps.\n\nA is the abstraction behind menu items, buttons, and links. Once a command is defined, other parts of the interface can refer to the same command, allowing many access points to a single feature to share facets such as the Disabled State.\n\nCommands are defined to have the following :\n\nUser agents may expose the commands that match the following criteria:\n• None The element is in a document with a non-null browsing context.\n• None Neither the element nor any of its ancestors has a attribute specified.\n\nUser agents are encouraged to do this especially for commands that have Access Keys, as a way to advertise those keys to the user.\n\nFor example, such commands could be listed in the user agent's menu bar.\n\nUsing the element to define a command\n\nAn element with an attribute defines a command.\n\nThe Label of the command is the element's descendant text content.\n\nThe Access Key of the command is the element's assigned access key, if any.\n\nThe Hidden State of the command is true (hidden) if the element has a attribute, and false otherwise.\n\nThe Disabled State facet of the command is true if the element or one of its ancestors is inert, and false otherwise.\n\nThe Action of the command is to fire a event at the element.\n\nUsing the element to define a command\n\nThe Label, Access Key, Hidden State, and Action facets of the command are determined as for elements (see the previous section).\n\nThe Disabled State of the command is true if the element or one of its ancestors is inert, or if the element's disabled state is set, and false otherwise.\n\nUsing the element to define a command\n\nAn element whose attribute is in one of the Submit Button, Reset Button, Image Button, Button, Radio Button, or Checkbox states defines a command.\n\nThe Label of the command is determined as follows:\n• None If the attribute is in one of the Submit Button, Reset Button, Image Button, or Button states, then the Label is the string given by the attribute, if any, and a UA-dependent, locale-dependent value that the UA uses to label the button itself if the attribute is absent.\n• None Otherwise, if the element is a labeled control, then the Label is the descendant text content of the first element in tree order whose labeled control is the element in question. (In JavaScript terms, this is given by .)\n• None Otherwise, if the attribute is present, then the Label is the value of that attribute.\n• None Otherwise, the Label is the empty string.\n\nThe Access Key of the command is the element's assigned access key, if any.\n\nThe Hidden State of the command is true (hidden) if the element has a attribute, and false otherwise.\n\nThe Disabled State of the command is true if the element or one of its ancestors is inert, or if the element's disabled state is set, and false otherwise.\n\nThe Action of the command is to fire a event at the element.\n\nUsing the element to define a command\n\nAn element with an ancestor element and either no attribute or a attribute that is not the empty string defines a command.\n\nThe Label of the command is the value of the element's attribute, if there is one, or else the element's descendant text content, with ASCII whitespace stripped and collapsed.\n\nThe Access Key of the command is the element's assigned access key, if any.\n\nThe Hidden State of the command is true (hidden) if the element has a attribute, and false otherwise.\n\nThe Disabled State of the command is true if the element is disabled, or if its nearest ancestor element is disabled, or if it or one of its ancestors is inert, and false otherwise.\n\nIf the 's nearest ancestor element has a attribute, the Action of the command is to toggle the element. Otherwise, the Action is to pick the element.\n\nUsing the attribute on a element to define a command\n\nA element defines a command if all of the following are true:\n• None It has an assigned access key.\n• None It is a child of a element.\n• None Its parent has a descendant that defines a command that is neither a element nor a element. This element, if it exists, is .\n\nThe Label of the command is the element's descendant text content.\n\nThe Access Key of the command is the element's assigned access key.\n\nThe Hidden State, Disabled State, and Action facets of the command are the same as the respective facets of the element's delegatee.\n\nUsing the attribute to define a command on other elements\n\nAn element that has an assigned access key defines a command.\n\nIf one of the earlier sections that define elements that define commands define that this element defines a command, then that section applies to this element, and this section does not. Otherwise, this section applies to that element.\n\nThe Label of the command depends on the element. If the element is a labeled control, the descendant text content of the first element in tree order whose labeled control is the element in question is the Label (in JavaScript terms, this is given by ). Otherwise, the Label is the element's descendant text content.\n\nThe Access Key of the command is the element's assigned access key.\n\nThe Hidden State of the command is true (hidden) if the element has a attribute, and false otherwise.\n\nThe Disabled State of the command is true if the element or one of its ancestors is inert, and false otherwise.\n\nThe Action of the command is to run the following steps:\n• Run the focusing steps for the element.\n\nThe element represents a transitory part of an application, in the form of a small window (\"dialog box\"), which the user interacts with to perform a task or gather information. Once the user is done, the dialog can be automatically closed by the application, or manually closed by the user.\n\nEspecially for modal dialogs, which are a familiar pattern across all types of applications, authors should work to ensure that dialogs in their web applications behave in a way that is familiar to users of non-web applications.\n\nAs with all HTML elements, it is not conforming to use the element when attempting to represent another type of control. For example, context menus, tooltips, and popup listboxes are not dialog boxes, so abusing the element to implement these patterns is incorrect.\n\nAn important part of user-facing dialog behavior is the placement of initial focus. The dialog focusing steps attempt to pick a good candidate for initial focus when a dialog is shown, but might not be a substitute for authors carefully thinking through the correct choice to match user expectations for a specific dialog. As such, authors should use the attribute on the descendant element of the dialog that the user is expected to immediately interact with after the dialog opens. If there is no such element, then authors should use the attribute on the element itself.\n\nAnother important aspect of user behavior is whether dialogs are scrollable or not. In some cases, overflow (and thus scrollability) cannot be avoided, e.g., when it is caused by the user's high text zoom settings. But in general, scrollable dialogs are not expected by users. Adding large text nodes directly to dialog elements is particularly bad as this is likely to cause the dialog element itself to overflow. Authors are best off avoiding them.\n\nThe attribute is a boolean attribute. When specified, it indicates that the element is active and that the user can interact with it.\n\nThe content attribute is an enumerated attribute with the following keywords and states:\n\nThe attribute's invalid value default and missing value default are both the state.\n\nThe Auto state behaves as Close Request state when the was shown using its method; otherwise the None state.\n\nA element without an attribute specified should not be shown to the user. This requirement may be implemented indirectly through the style layer. For example, user agents that support the suggested default rendering implement this requirement using the CSS rules described in the Rendering section.\n\nThe attribute must not be specified on elements.\n• None If this has an attribute and is modal of this is false, then return.\n• None If this has an attribute, then throw an \" \" .\n• None If the result of firing an event named , using , with the attribute initialized to true, the attribute initialized to \" \", and the attribute initialized to \" \" at this is false, then return.\n• None If this has an attribute, then return.\n• None Queue a dialog toggle event task given this, \" \", and \" \".\n• None Add an attribute to this, whose value is the empty string.\n• None Assert: this's node document's open dialogs list does not contain this.\n• None Set the dialog close watcher with this.\n• None Let be the result of running topmost popover ancestor given this, 's showing hint popover list, null, and false.\n• None If is null, then set to the result of running topmost popover ancestor given this, 's showing auto popover list, null, and false.\n• None If is null, then set to .\n• None Run hide all popovers until given , false, and true.\n• None Run the dialog focusing steps given this.\n\nThe method steps are to show a modal dialog given this.\n• None If is not given, then set it to null.\n• None Close the dialog this with .\n• None If this does not have an attribute, then return.\n• None If is not given, then set it to null.\n\nThe IDL attribute, on getting, must return the last value to which it was set. On setting, it must be set to the new value. When the element is created, it must be set to the empty string.\n\nThe getter steps are to return the keyword corresponding to the computed closed-by state given this.\n\nThe setter steps are to set the content attribute to the given value.\n\nThe IDL attribute must reflect the content attribute.\n\nEach has a , which is an HTML dialog element or null, initially null.\n\nEach HTML element has a which is null or an element, and it is initially null. When and are called, this element is set to the currently focused element before running the dialog focusing steps. Elements with the attribute set this element to the currently focused element during the show popover algorithm.\n\nEach element has a , which is a toggle task tracker or null, initially null.\n\nEach element has a , which is a close watcher or null, initially null.\n\nEach element has a , which is a string, initially null.\n\nEach element has an boolean, initially false.\n\nEach element has an boolean, initially false.\n\nThe HTML element removing steps, given and , are:\n• If 's close watcher is not null, then:\n• None If 's node document's top layer contains , then remove an element from the top layer immediately given .\n• None Set is modal of to false.\n• None If has an attribute and is modal of is true, then return.\n• None If has an attribute, then throw an \" \" .\n• None If 's node document is not fully active, then throw an \" \" .\n• None If is not connected, then throw an \" \" .\n• None If is in the popover showing state, then throw an \" \" .\n• None If the result of firing an event named , using , with the attribute initialized to true, the attribute initialized to \" \", and the attribute initialized to \" \" at is false, then return.\n• None If has an attribute, then return.\n• None If is not connected, then return.\n• None If is in the popover showing state, then return.\n• None Add an attribute to , whose value is the empty string.\n• None Set is modal of to true.\n• None Assert: 's node document's open dialogs list does not contain .\n• Let 's node document be blocked by the modal dialog . This will cause the focused area of the document to become inert (unless that currently focused area is a shadow-including descendant of ). In such cases, the focused area of the document will soon be reset to the viewport. In a couple steps we will attempt to find a better candidate to focus.\n• None If 's node document's top layer does not already contain , then add an element to the top layer given .\n• None Let be the result of running topmost popover ancestor given , 's showing hint popover list, null, and false.\n• None If is null, then set to the result of running topmost popover ancestor given , 's showing auto popover list, null, and false.\n• None If is null, then set to .\n• None Run hide all popovers until given , false, and true.\n• Set 's close watcher to the result of establishing a close watcher given 's relevant global object, with:\n• None cancelAction given being to return the result of firing an event named at , with the attribute initialized to .\n• None closeAction being to close the dialog given and 's request close return value.\n• None getEnabledState being to return true if 's enable close watcher for is true or 's computed closed-by state is not None; otherwise false.\n\nThe is valid invoker command steps for elements, given a attribute , are:\n• None If is in the Close state or in the Show Modal state, then return true.\n\nThe invoker command steps for elements, given an element , an element , and a attribute , are:\n• None If is in the popover showing state, then return.\n• If is in the Close state and has an attribute:\n• None Let be 's value.\n• None If is the Show Modal state and does not have an attribute, then show a modal dialog given .\n\nWhen a element is to be , with null or a string , run these steps:\n• None If does not have an attribute, then return.\n• None Fire an event named , using , with the attribute initialized to \" \" and the attribute initialized to \" \" at .\n• None If does not have an attribute, then return.\n• None If is modal of is true, then request an element to be removed from the top layer given .\n• None Let be the value of 's is modal flag.\n• None Set is modal of to false.\n• None If is not null, then set the attribute to .\n• None Set the request close return value to null.\n• If 's previously focused element is not null, then:\n• None If 's node document's focused area of the document's DOM anchor is a shadow-including inclusive descendant of , or is true, then run the focusing steps for ; the viewport should not be scrolled by doing this step.\n• None Queue an element task on the user interaction task source given the element to fire an event named at .\n• If 's close watcher is not null, then:\n\nTo given a element , a string , and a string :\n• If 's dialog toggle task tracker is not null, then:\n• Queue an element task given the DOM manipulation task source and to run the following steps:\n• None Fire an event named at , using , with the attribute initialized to and the attribute initialized to .\n• None Set 's dialog toggle task tracker to a struct with task set to the just-queued task and old state set to .\n• If the state of 's attribute is Auto:\n• None If 's is modal is true, then return Close Request.\n\nThe , given a element , are as follows:\n• None If the allow focus steps given 's node document return false, then return.\n• None If has the attribute, then set to .\n• None If is null, then set to the focus delegate of .\n• None If is null, then set to .\n• If is not focusable, this will do nothing. This would only happen if subject had no focus delegate, and the user agent decided that elements were not generally focusable. In that case, any earlier modifications to the focused area of the document will apply.\n• None If 's node document's origin is not the same as the origin of , then return.\n\n\"Light dismiss\" means that clicking outside of a element whose attribute is in the Any state will close the element. This is in addition to how such s respond to close requests.\n• None If 's open dialogs list is empty, then return.\n• None Let be the result of running nearest clicked dialog given .\n• None If 's is \" \", then set 's dialog pointerdown target to .\n• If 's is \" \", then:\n• None Let be true if is 's dialog pointerdown target.\n• None If is false, then return.\n• None Let be the last element of 's open dialogs list.\n• None If is , then return.\n• None If 's computed closed-by state is not Any, then return.\n\nRun light dismiss activities will be called by the Pointer Events spec when the user clicks or touches anywhere on the page.\n\nTo find the , given a :\n• None If is a element, has an attribute, 's is modal is true, and 's and are outside the bounds of , then return null. The check for and is because a pointer event that hits the pseudo element of a dialog will result in having a target of the dialog element itself.\n• While is not null:\n• None If is a element and has an attribute, then return .\n• None Set to 's parent in the flat tree.\n\nScripts allow authors to add interactivity to their documents.\n\nAuthors are encouraged to use declarative alternatives to scripting where possible, as declarative mechanisms are often more maintainable, and many users disable scripting.\n\nAuthors are also encouraged to make their applications degrade gracefully in the absence of scripting support.\n\nThe element allows authors to include dynamic script and data blocks in their documents. The element does not represent content for the user.\n\nThe attribute allows customization of the type of script represented:\n• None Omitting the attribute, setting it to the empty string, or setting it to a JavaScript MIME type essence match, means that the script is a classic script, to be interpreted according to the JavaScript Script top-level production. Classic scripts are affected by the and attributes, but only when the attribute is set. Authors should omit the attribute instead of redundantly setting it.\n• None Setting the attribute to an ASCII case-insensitive match for \" \" means that the script is a JavaScript module script, to be interpreted according to the JavaScript Module top-level production. Module scripts are not affected by the attribute, but are affected by the attribute (regardless of the state of the attribute).\n• None Setting the attribute to an ASCII case-insensitive match for \" \" means that the script is an import map, containing JSON that will be used to control the behavior of module specifier resolution. Import maps can only be inline, i.e., the attribute and most other attributes are meaningless and not to be used with them.\n• None Setting the attribute to any other value means that the script is a , which is not processed. None of the attributes (except itself) have any effect on data blocks. Authors must use a valid MIME type string that is not a JavaScript MIME type essence match to denote data blocks.\n\nThe requirement that data blocks must be denoted using a valid MIME type string is in place to avoid potential future collisions. If this specification ever adds additional types of script, they will be triggered by setting the attribute to something which is not a MIME type, like how the \" \" value denotes module scripts. By using a valid MIME type string now, you ensure that your data block will not ever be reinterpreted as a different script type, even in future user agents.\n\nClassic scripts and JavaScript module scripts can be embedded inline, or be imported from an external file using the attribute, which if specified gives the URL of the external script resource to use. If is specified, it must be a valid non-empty URL potentially surrounded by spaces.\n\nThe contents of inline elements, or the external script resource, must conform with the requirements of the JavaScript specification's Script or Module productions, for classic scripts and JavaScript module scripts respectively. [JAVASCRIPT]\n\nThe contents of the external script resource for CSS module scripts must conform to the requirements of the CSS specification. [CSS]\n\nThe contents of the external script resource for JSON module scripts must conform to the requirements of the JSON specification. [JSON]\n\nThe contents of inline elements for import maps must conform with the import map authoring requirements.\n\nFor import map elements, the , , , , , , and attributes must not be specified.\n\nA document must not have more than one import map element.\n\nWhen used to include data blocks, the data must be embedded inline, the format of the data must be given using the attribute, and the contents of the element must conform to the requirements defined for the format used. The , , , , , , , and attributes must not be specified.\n\nThe attribute is a boolean attribute that prevents a script from being executed in user agents that support module scripts. This allows selective execution of module scripts in modern user agents and classic scripts in older user agents, as shown below. The attribute must not be specified on module scripts (and will be ignored if it is).\n\nThe and attributes are boolean attributes that indicate how the script should be evaluated. Classic scripts may specify or , but must not specify either unless the attribute is present. Module scripts may specify the attribute, but must not specify the attribute.\n\nThere are several possible modes that can be selected using these attributes, and depending on the script's type.\n\nFor classic scripts, if the attribute is present, then the classic script will be fetched in parallel to parsing and evaluated as soon as it is available (potentially before parsing completes). If the attribute is not present but the attribute is present, then the classic script will be fetched in parallel and evaluated when the page has finished parsing. If neither attribute is present, then the script is fetched and evaluated immediately, blocking parsing until these are both complete.\n\nFor module scripts, if the attribute is present, then the module script and all its dependencies will be fetched in parallel to parsing, and the module script will be evaluated as soon as it is available (potentially before parsing completes). Otherwise, the module script and its dependencies will be fetched in parallel to parsing and evaluated when the page has finished parsing. (The attribute has no effect on module scripts.)\n\nThis is all summarized in the following schematic diagram:\n\nThe exact processing details for these attributes are, for mostly historical reasons, somewhat non-trivial, involving a number of aspects of HTML. The implementation requirements are therefore by necessity scattered throughout the specification. The algorithms below (in this section) describe the core of this processing, but these algorithms reference and are referenced by the parsing rules for start and end tags in HTML, in foreign content, and in XML, the rules for the method, the handling of scripting, etc.\n\nWhen inserted using the method, elements usually execute (typically blocking further script execution or HTML parsing). When inserted using the and attributes, they do not execute at all.\n\nThe attribute may be specified even if the attribute is specified, to cause legacy web browsers that only support (and not ) to fall back to the behavior instead of the blocking behavior that is the default.\n\nThe attribute is a CORS settings attribute. For classic scripts, it controls whether error information will be exposed, when the script is obtained from other origins. For module scripts, it controls the credentials mode used for cross-origin requests.\n\nUnlike classic scripts, module scripts require the use of the CORS protocol for cross-origin fetching.\n\nThe attribute represents the integrity metadata for requests which this element is responsible for. The value is text. The attribute must not be specified when the attribute is not specified. [SRI]\n\nThe attribute is a referrer policy attribute. Its purpose is to set the referrer policy used when fetching the script, as well as any scripts imported from it. [REFERRERPOLICY]\n\nThe attribute is a fetch priority attribute. Its purpose is to set the priority used when fetching the script.\n\nChanging the , , , , , , , , and attributes dynamically has no direct effect; these attributes are only used at specific times described below.\n\nThe IDL attributes , , , , and , must each reflect the respective content attributes of the same name.\n\nThe IDL attribute must reflect the content attribute, limited to only known values.\n\nThe IDL attribute must reflect the content attribute, limited to only known values.\n\nThe IDL attribute must reflect the content attribute, limited to only known values.\n\nThe IDL attribute must reflect the content attribute.\n• None If this's force async is true, then return true.\n• None If this's content attribute is present, then return true.\n• None If the given value is true, then set this's content attribute to the empty string.\n\nThe attribute's getter must return this element's child text content.\n\nThe attribute's setter must string replace all with the given value within this element.\n• None If is \" \", then return true.\n• None If is \" \", then return true.\n• None If is \" \", then return true.\n\nThe argument has to exactly match these values; we do not perform an ASCII case-insensitive match. This is different from how content attribute values are treated, and how 's method works, but it aligns with the enumeration used in the constructor.\n\nA element has several associated pieces of state.\n\nA element has a , which is either null or a , initially null. It is set by the HTML parser and the XML parser on elements they insert, and affects the processing of those elements. elements with non-null parser documents are known as .\n\nA element has a , which is either null or a , initially null. It is used to prevent scripts that move between documents during preparation from executing.\n\nA element has a boolean, initially true. It is set to false by the HTML parser and the XML parser on elements they insert, and when the element gets an content attribute added.\n\nA element has a boolean, initially false. It is determined when the script is prepared, based on the attribute of the element at that time.\n\nA element has a boolean, initially false. This is used only used for elements that are also parser-inserted, to let the parser know when to execute the script.\n\nA element has a , which is either null, \" \", \" \", or \" \", initially null. It is determined when the element is prepared, based on the attribute of the element at that time.\n\nA element has a , which is either \" \", null (representing an error), a script, or an import map parse result. It is initially \" \".\n\nA element has steps to run when the result is ready , which are a series of steps or null, initially null. To a element given a script, import map parse result, or null :\n• None If 's steps to run when the result is ready are not null, then run them.\n• None Set 's steps to run when the result is ready to null.\n\nA element is implicitly potentially render-blocking if 's type is \" \", is parser-inserted, and does not have an or attribute.\n\nThe cloning steps for elements given , , and are to set 's already started to 's already started.\n\nWhen an attribute is added to a element , the user agent must set 's force async to false.\n\nWhenever a element 's delaying the load event is true, the user agent must delay the load event of 's preparation-time document.\n\nThe HTML element post-connection steps, given , are:\n• If is not connected, then return. This can happen in the case where an earlier-inserted removes a later-inserted . For instance: Nothing is printed to the console in this example. By the time the HTML element post-connection steps run for the first that was atomically inserted by , it can observe that the second is already connected to the DOM. It removes the second , so that by the time its HTML element post-connection steps run, it is no longer connected, and does not get prepared.\n• None If is parser-inserted, then return.\n• None Run the HTML element post-connection steps, given the element.\n\nThe following attribute change steps, given , , , , and , are used for all elements:\n• None If is not null, then return.\n• None If is , then run the HTML element post-connection steps, given .\n• None If 's already started is true, then return.\n• This is done so that if parser-inserted elements fail to run when the parser tries to run them, e.g. because they are empty or specify an unsupported scripting language, another script can later mutate them and cause them to run again.\n• If is non-null and does not have an attribute, then set 's force async to true. This is done so that if a parser-inserted element fails to run when the parser tries to run it, but it is later executed after a script dynamically updates it, it will execute in an async fashion even if the attribute isn't set.\n• None If has no attribute, and is the empty string, then return.\n• None If is not connected, then return.\n• If any of the following are true:\n• None has a attribute whose value is the empty string;\n• None has no attribute but it has a attribute and that attribute's value is the empty string; or\n• None has neither a attribute nor a attribute, then let for this element be \" \". Otherwise, if has a attribute, then let be the value of that attribute with leading and trailing ASCII whitespace stripped. Otherwise, has a non-empty attribute; let be the concatenation of \" \" and the value of 's attribute. The attribute is never conforming, and is always ignored if there is a attribute present.\n• None If is a JavaScript MIME type essence match, then set 's type to \" \".\n• None Otherwise, if is an ASCII case-insensitive match for the string \" \", then set 's type to \" \".\n• None Otherwise, if is an ASCII case-insensitive match for the string \" \", then set 's type to \" \".\n• None Otherwise, return. (No script is executed, and 's type is left as null.)\n• None If is non-null, then set 's parser document back to and set 's force async to false.\n• None If is non-null, and is not equal to 's preparation-time document, then return.\n• If scripting is disabled for , then return. The definition of scripting is disabled means that, amongst others, the following scripts will not execute: scripts in 's documents, scripts in -created documents, scripts in documents created by 's feature, and scripts that are first inserted by a script into a that was created using the API. [XHR] [DOMPARSING] [XSLTP] [DOM]\n• If has a content attribute and its type is \" \", then return. This means specifying on a module script has no effect; the algorithm continues onward.\n• None If does not have a content attribute, and the Should element's inline behavior be blocked by Content Security Policy? algorithm returns \" \" when given , \" \", and , then return. [CSP]\n• If has an attribute and a attribute, and 's type is \" \", then:\n• None Let be the value of 's attribute.\n• None Let be the value of 's attribute.\n• None Strip leading and trailing ASCII whitespace from and .\n• None If is not an ASCII case-insensitive match for the string \" \", then return.\n• None If is not an ASCII case-insensitive match for either the string \" \" or the string \" \", then return.\n• If has a attribute, then let be the result of getting an encoding from the value of the attribute. If does not have a attribute, or if getting an encoding failed, then let be 's node document's the encoding. If 's type is \" \", this encoding will be ignored.\n• None Let be the current state of 's content attribute.\n• None Let be the CORS settings attribute credentials mode for 's content attribute.\n• None Let be 's [[CryptographicNonce]] internal slot's value.\n• If has an attribute, then let be that attribute's value. Otherwise, let be the empty string.\n• None Let be the current state of 's content attribute.\n• None Let be the current state of 's content attribute.\n• None Let be \" \" if is parser-inserted, and \" \" otherwise.\n• None Let be a script fetch options whose cryptographic nonce is , integrity metadata is , parser metadata is , credentials mode is , referrer policy is , and fetch priority is .\n• If has a content attribute, then:\n• If 's type is \" \", then queue an element task on the DOM manipulation task source given to fire an event named at , and return. External import map scripts are not currently supported. See WICG/import-maps issue #235 for discussions on adding support.\n• None Let be the value of 's attribute.\n• None If is the empty string, then queue an element task on the DOM manipulation task source given to fire an event named at , and return.\n• None Set 's from an external file to true.\n• None Let be the result of encoding-parsing a URL given , relative to 's node document.\n• None If is failure, then queue an element task on the DOM manipulation task source given to fire an event named at , and return.\n• None If is potentially render-blocking, then block rendering on .\n• None If is currently render-blocking, then set 's render-blocking to true.\n• Let given be the following steps:\n• If does not have an attribute, then set 's integrity metadata to the result of resolving a module integrity metadata with and . Fetch an external module script graph given , , , and . For performance reasons, user agents may start fetching the classic script or module graph (as defined above) as soon as the attribute is set, instead, in the hope that will become connected (and that the attribute won't change value in the meantime). Either way, once becomes connected, the load must have started as described in this step. If the UA performs such prefetching, but never becomes connected, or the attribute is dynamically changed, or the attribute is dynamically changed, then the user agent will not execute the script so obtained, and the fetching process will have been effectively wasted.\n• If does not have a content attribute:\n• \n• None Let be the result of creating a classic script using , , , and .\n• If is potentially render-blocking, then:\n• Fetch an inline module script graph, given , , , , and with the following steps given :\n• Queue an element task on the networking task source given to perform the following steps: Queueing a task here means that, even if the inline module script has no dependencies or synchronously results in a parse error, we won't proceed to execute the script element synchronously.\n• None Let be the result of creating an import map parse result given and .\n• If 's type is \" \" and has a attribute, or 's type is \" \":\n• If has an attribute or 's force async is true:\n• None Let be 's preparation-time document's set of scripts that will execute as soon as possible.\n• Set 's steps to run when the result is ready to the following:\n• Otherwise, if is not parser-inserted:\n• None Let be 's preparation-time document's list of scripts that will execute in order as soon as possible.\n• Set 's steps to run when the result is ready to the following:\n• None If [0] is not , then abort these steps.\n• While is not empty, and [0]'s result is not \" \":\n• Otherwise, if has a attribute or 's type is \" \":\n• None Append to its parser document's list of scripts that will execute when the document has finished parsing.\n• None Set 's steps to run when the result is ready to the following: set 's ready to be parser-executed to true. (The parser will handle executing the script.)\n• \n• None Set 's steps to run when the result is ready to the following: set 's ready to be parser-executed to true. (The parser will handle executing the script.)\n• \n• If all of the following are true:\n• 's parser document has a style sheet that is blocking scripts; and\n• either the parser that created is an XML parser, or it's an HTML parser whose script nesting level is not greater than one,\n• None Set 's ready to be parser-executed to true. (The parser will handle executing the script.)\n• None Otherwise, immediately execute the script element , even if other scripts are already executing.\n\nEach has a , which is a element or null, initially null.\n\nEach has a set of scripts that will execute as soon as possible , which is a set of elements, initially empty.\n\nEach has a list of scripts that will execute in order as soon as possible , which is a list of elements, initially empty.\n\nEach has a list of scripts that will execute when the document has finished parsing , which is a list of elements, initially empty.\n\nIf a element that blocks a parser gets moved to another before it would normally have stopped blocking that parser, it nonetheless continues blocking that parser until the condition that causes it to be blocking the parser no longer applies (e.g., if the script is a pending parsing-blocking script because the original has a style sheet that is blocking scripts when it was parsed, but then the script is moved to another before the blocking style sheet(s) loaded, the script still blocks the parser until the style sheets are all loaded, at which time the script executes and the parser is unblocked).\n• None If 's preparation-time document is not equal to , then return.\n• None If 's result is null, then fire an event named at , and return.\n• None If 's from an external file is true, or 's type is \" \", then increment 's ignore-destructive-writes counter.\n• \n• None Let be the value to which 's object was most recently set.\n• If 's root is not a shadow root, then set 's attribute to . Otherwise, set it to null. This does not use the in a document tree check, as could have been removed from the document prior to execution, and in that scenario still needs to point to it.\n• None Run the classic script given by 's result.\n• None Run the module script given by 's result.\n• None Register an import map given 's relevant global object and 's result.\n• None Decrement the ignore-destructive-writes counter of , if it was incremented in the earlier step.\n• None If 's from an external file is true, then fire an event named at .\n\nUser agents are not required to support JavaScript. This standard needs to be updated if a language other than JavaScript comes along and gets similar wide adoption by web browsers. Until such a time, implementing other languages is in conflict with this standard, given the processing model defined for the element.\n\nServers should use for JavaScript resources, in accordance with . Servers should not use other JavaScript MIME types for JavaScript resources, and must not use non-JavaScript MIME types. [RFC9239]\n\nFor external JavaScript resources, MIME type parameters in ` ` headers are generally ignored. (In some cases the ` ` parameter has an effect.) However, for the element's attribute they are significant; it uses the JavaScript MIME type essence match concept.\n\nFor example, scripts with their attribute set to \" \" will not be evaluated, even though that is a valid JavaScript MIME type when parsed.\n\nFurthermore, again for external JavaScript resources, special considerations apply around ` ` header processing as detailed in the prepare the script element algorithm and . [FETCH]\n\nThe easiest and safest way to avoid the rather strange restrictions described in this section is to always escape an ASCII case-insensitive match for \" \" as \" \", \" \" as \" \", and \" \" as \" \" when these sequences appear in literals in scripts (e.g. in strings, regular expressions, or comments), and to avoid writing code that uses such constructs in expressions. Doing so avoids the pitfalls that the restrictions in this section are prone to triggering: namely, that, for historical reasons, parsing of blocks in HTML is a strange and exotic practice that acts unintuitively in the face of these sequences.\n\nThe element's descendant text content must match the production in the following ABNF, the character set for which is Unicode. [ABNF]\n\nWhen a element contains script documentation, there are further restrictions on the contents of the element, as described in the section below.\n\nIf a element's attribute is specified, then the contents of the element, if any, must be such that the value of the IDL attribute, which is derived from the element's contents, matches the production in the following ABNF, the character set for which is Unicode. [ABNF]\n\nThis corresponds to putting the contents of the element in JavaScript comments.\n\nThis requirement is in addition to the earlier restrictions on the syntax of contents of elements.\n\nThis specification does not define how XSLT interacts with the element. However, in the absence of another specification actually defining this, here are some guidelines for implementers, based on existing implementations:\n• None When an XSLT transformation program is triggered by an processing instruction and the browser implements a direct-to-DOM transformation, elements created by the XSLT processor need to have its parser document set correctly, and run in document order (modulo scripts marked or ), immediately, as the transformation is occurring.\n• None The method adds elements to a object with a null browsing context, and, accordingly, any elements they create need to have their already started set to true in the prepare the script element algorithm and never get executed (scripting is disabled). Such elements still need to have their parser document set, though, such that their IDL attribute will return false in the absence of an content attribute.\n• None The method needs to create a fragment that is equivalent to one built manually by creating the elements using . For instance, it needs to create elements with null parser document and with their already started set to false, so that they will execute when the fragment is inserted into a document.\n\nThe main distinction between the first two cases and the last case is that the first two operate on s and the last operates on a fragment.\n\nThe element represents nothing if scripting is enabled, and represents its children if scripting is disabled. It is used to present different markup to user agents that support scripting and those that don't support scripting, by affecting how the document is parsed.\n\nWhen used in HTML documents, the allowed content model is as follows:\n\nAll these contortions are required because, for historical reasons, the element is handled differently by the HTML parser based on whether scripting was enabled or not when the parser was invoked.\n\nThe element must not be used in XML documents.\n\nThe element is only effective in the HTML syntax, it has no effect in the XML syntax. This is because the way it works is by essentially \"turning off\" the parser when scripts are enabled, so that the contents of the element are treated as pure text and not as real elements. XML does not define a mechanism by which to do this.\n\nThe element has no other requirements. In particular, children of the element are not exempt from form submission, scripting, and so forth, even when scripting is enabled for the element.\n\nThe element is used to declare fragments of HTML that can be cloned and inserted in the document by script.\n\nIn a rendering, the element represents nothing.\n\nThe content attribute is an enumerated attribute with the following keywords and states:\n\nThe attribute's invalid value default and missing value default are both the state.\n\nThe template contents of a element are not children of the element itself.\n\nIt is also possible, as a result of DOM manipulation, for a element to contain nodes and element nodes; however, having any is a violation of the element's content model, since its content model is defined as nothing.\n\nEach element has an associated object that is its . The template contents have no conformance requirements. When a element is created, the user agent must run the following steps to establish the template contents:\n• None Let be the element's node document's appropriate template contents owner document.\n• None Create a object whose node document is and host is the element.\n• None Set the element's template contents to the newly created object.\n\nA 's is the returned by the following algorithm:\n• If is not a created by this algorithm, then:\n• If does not yet have an , then:\n• None Let be a new (whose browsing context is null). This is \"a created by this algorithm\" for the purposes of the step above.\n• None If is an HTML document, mark as an HTML document also.\n• None Let 's associated inert template document be . Each not created by this algorithm thus gets a single to act as its proxy for owning the template contents of all its elements, so that they aren't in a browsing context and thus remain inert (e.g. scripts do not run). Meanwhile, elements inside objects that are created by this algorithm just reuse the same owner for their contents.\n\nThe adopting steps (with and as parameters) for elements are the following:\n• Let be 's node document's appropriate template contents owner document. 's node document is the object that was just adopted into.\n\nThe getter steps are to return 's template contents, if the template contents is not a node; otherwise null.\n\nThe IDL attribute must reflect the content attribute, limited to only known values.\n\nThe IDL attribute must reflect the content attribute.\n\nThe IDL attribute must reflect the content attribute.\n\nThe IDL attribute must reflect the content attribute.\n\nThe cloning steps for elements given , , and are:\n• None If is false, then return.\n• None For each of 's template contents's children, in tree order: clone a node given with document set to 's template contents's node document, subtree set to true, and parent set to 's template contents.\n\nInteraction of elements with XSLT and XPath\n\nThis specification does not define how XSLT and XPath interact with the element. However, in the absence of another specification actually defining this, here are some guidelines for implementers, which are intended to be consistent with other processing described in this specification:\n• None An XSLT processor based on an XML parser that acts as described in this specification needs to act as if elements contain as descendants their template contents for the purposes of the transform.\n• None An XSLT processor that outputs a DOM needs to ensure that nodes that would go into a element are instead placed into the element's template contents.\n• None XPath evaluation using the XPath DOM API when applied to a parsed using the HTML parser or the XML parser described in this specification needs to ignore template contents.\n\nThe element defines a slot. It is typically used in a shadow tree. A element represents its assigned nodes, if any, and its contents otherwise.\n\nThe content attribute may contain any string value. It represents a slot's name.\n\nThe attribute is used to assign slots to other elements: a element with a attribute creates a named slot to which any element is assigned if that element has a attribute whose value matches that attribute's value, and the element is a child of the shadow tree whose root's host has that corresponding attribute value.\n\nThe IDL attribute must reflect the content attribute of the same name.\n\nThe element has , which is an ordered set of slottables set by . This set is initially empty.\n\nThe manually assigned nodes set can be implemented using weak references to the slottables, because this set is not directly accessible from script.\n• None If [\" \"] is false, then return this's assigned nodes.\n• None Return the result of finding flattened slottables with this.\n• None If [\" \"] is false, then return this's assigned nodes, filtered to contain only nodes.\n• None Return the result of finding flattened slottables with this, filtered to contain only nodes.\n• None For each of this's manually assigned nodes, set 's manual slot assignment to null.\n• None Let be a new ordered set.\n• For each of :\n• None If 's manual slot assignment refers to a slot, then remove from that slot's manually assigned nodes.\n\nThe element provides scripts with a resolution-dependent bitmap canvas, which can be used for rendering graphs, game graphics, art, or other visual images on the fly.\n\nAuthors should not use the element in a document when a more suitable element is available. For example, it is inappropriate to use a element to render a page heading: if the desired presentation of the heading is graphically intense, it should be marked up using appropriate elements (typically ) and then styled using CSS and supporting technologies such as shadow trees.\n\nWhen authors use the element, they must also provide content that, when presented to the user, conveys essentially the same function or purpose as the 's bitmap. This content may be placed as content of the element. The contents of the element, if any, are the element's fallback content.\n\nIn interactive visual media, if scripting is enabled for the element, and if support for elements has been enabled, then the element represents embedded content consisting of a dynamically created image, the element's bitmap.\n\nIn non-interactive, static, visual media, if the element has been previously associated with a rendering context (e.g. if the page was viewed in an interactive visual medium and is now being printed, or if some script that ran during the page layout process painted on the element), then the element represents embedded content with the element's current bitmap and size. Otherwise, the element represents its fallback content instead.\n\nIn non-visual media, and in visual media if scripting is disabled for the element or if support for elements has been disabled, the element represents its fallback content instead.\n\nWhen a element represents embedded content, the user can still focus descendants of the element (in the fallback content). When an element is focused, it is the target of keyboard interaction events (even though the element itself is not visible). This allows authors to make an interactive canvas keyboard-accessible: authors should have a one-to-one mapping of interactive regions to focusable areas in the fallback content. (Focus has no effect on mouse interaction events.) [UIEVENTS]\n\nAn element whose nearest element ancestor is being rendered and represents embedded content is an element that is being used as relevant canvas fallback content .\n\nThe element has two attributes to control the size of the element's bitmap: and . These attributes, when specified, must have values that are valid non-negative integers. The rules for parsing non-negative integers must be used to . If an attribute is missing, or if parsing its value returns an error, then the default value must be used instead. The attribute defaults to 300, and the attribute defaults to 150.\n\nWhen setting the value of the or attribute, if the context mode of the element is set to placeholder, the user agent must throw an \" \" and leave the attribute's value unchanged.\n\nThe natural dimensions of the element when it represents embedded content are equal to the dimensions of the element's bitmap.\n\nThe user agent must use a square pixel density consisting of one pixel of image data per coordinate space unit for the bitmaps of a and its rendering contexts.\n\nA element can be sized arbitrarily by a style sheet, its bitmap is then subject to the 'object-fit' CSS property.\n\nThe bitmaps of elements, the bitmaps of objects, as well as some of the bitmaps of rendering contexts, such as those described in the sections on the , , and objects below, have an flag, which can be set to true or false. Initially, when the element or object is created, its bitmap's origin-clean flag must be set to true.\n\nA element can have a rendering context bound to it. Initially, it does not have a bound rendering context. To keep track of whether it has a rendering context or not, and what kind of rendering context it is, a also has a , which is initially but can be changed to either , , , , , or by algorithms defined in this specification.\n\nWhen its canvas context mode is none, a element has no rendering context, and its bitmap must be transparent black with a natural width equal to the numeric value of the element's attribute and a natural height equal to the numeric value of the element's attribute, those values being interpreted in CSS pixels, and being updated as the attributes are set, changed, or removed.\n\nWhen its canvas context mode is placeholder, a element has no rendering context. It serves as a placeholder for an object, and the content of the element is updated by the object's rendering context.\n\nWhen a element represents embedded content, it provides a paint source whose width is the element's natural width, whose height is the element's natural height, and whose appearance is the element's bitmap.\n\nWhenever the and content attributes are set, removed, changed, or redundantly set to the value they already have, then the user agent must perform the action from the row of the following table that corresponds to the element's context mode.\n\nThe and IDL attributes must reflect the respective content attributes of the same name, with the same defaults.\n\nThe method of the element, when invoked, must run these steps:\n• None If is not an object, then set to null.\n• None Set to the result of converting to a JavaScript value.\n• Run the steps in the cell of the following table whose column header matches this element's canvas context mode and whose row header matches :\n• None Let be the result of running the 2D context creation algorithm given this and . Return the same object as was returned the last time the method was invoked with this same first argument.\n• None Let be the result of running the creation algorithm given this and . Return the same object as was returned the last time the method was invoked with this same first argument. \" \" or \" \", if the user agent supports the WebGL feature in its current configuration\n• None Let be the result of following the instructions given in the WebGL specifications' Context Creation sections. [WEBGL]\n• None If is null, then return null; otherwise set this's context mode to webgl or webgl2. Return the same object as was returned the last time the method was invoked with this same first argument. \" \", if the user agent supports the WebGPU feature in its current configuration\n• None Let be the result of following the instructions given in 's Canvas Rendering section. [WEBGPU]\n• None If is null, then return null; otherwise set this's context mode to webgpu. Return the same object as was returned the last time the method was invoked with this same first argument. * For example, the \" \" or \" \" value in the case of a user agent having exhausted the graphics hardware's abilities and having no software fallback implementation.\n\nThe method, when invoked, must run these steps:\n• None If this element's bitmap's origin-clean flag is set to false, then throw a \" \" .\n• None If this element's bitmap has no pixels (i.e. either its horizontal dimension or its vertical dimension is zero) then return the string \" \". (This is the shortest URL; it represents the empty string in a resource.)\n• None Let be a serialization of this element's bitmap as a file, passing and if given.\n• None If is null then return \" \".\n\nThe method, when invoked, must run these steps:\n• None If this element's bitmap's origin-clean flag is set to false, then throw a \" \" .\n• None If this element's bitmap has pixels (i.e., neither its horizontal dimension nor its vertical dimension is zero), then set to a copy of this element's bitmap.\n• \n• None If is non-null, then set to a serialization of as a file with and if given.\n• Queue an element task on the given the element to run these steps:\n• None If is non-null, then set to a new object, created in the relevant realm of this element, representing . [FILEAPI]\n\nThe method, when invoked, must run these steps:\n• None If this element's context mode is not set to none, throw an \" \" .\n• None Let be a new object with its width and height equal to the values of the and content attributes of this element.\n• None Set the 's placeholder element to a weak reference to this element.\n• None Set the 's inherited language to the language of this element.\n• None Set the 's inherited direction to the directionality of this element.\n\nTo maintain compatibility with existing web content, user agents need to enumerate methods defined in immediately after the method on objects.\n\nThe 2D rendering context represents a flat linear Cartesian surface whose origin (0,0) is at the top left corner, with the coordinate space having values increasing when going right, and values increasing when going down. The -coordinate of the right-most edge is equal to the width of the rendering context's output bitmap in CSS pixels; similarly, the -coordinate of the bottom-most edge is equal to the height of the rendering context's output bitmap in CSS pixels.\n\nThe size of the coordinate space does not necessarily represent the size of the actual bitmaps that the user agent will use internally or during rendering. On high-definition displays, for instance, the user agent may internally use bitmaps with four device pixels per unit in the coordinate space, so that the rendering remains at high quality throughout. Anti-aliasing can similarly be implemented using oversampling with bitmaps of a higher resolution than the final image on the display.\n\nThe , which is passed a (a element) and , consists of running these steps:\n• None Let be the result of converting to the dictionary type . (This can throw an exception.).\n• None Let be a new object.\n• None Set 's output bitmap to the same bitmap as 's bitmap (so that they are shared).\n• None Set bitmap dimensions to the numeric values of 's and content attributes.\n• None Run the canvas settings output bitmap initialization algorithm, given and .\n\nWhen the user agent is to to and , it must run these steps:\n• None Reset the rendering context to its default state.\n• None Resize the output bitmap to the new and .\n• None Let be the element to which the rendering context's attribute was initialized.\n• None If the numeric value of 's content attribute differs from , then set 's content attribute to the shortest possible string representing as a valid non-negative integer.\n• None If the numeric value of 's content attribute differs from , then set 's content attribute to the shortest possible string representing as a valid non-negative integer.\n\nThe attribute must return the value it was initialized to when the object was created.\n\nThe enumeration is used to specify the color space of the canvas's backing store.\n\nThe \" \" value indicates the 'srgb' color space.\n\nThe \" \" value indicates the 'display-p3' color space.\n\nThe algorithm for converting between color spaces can be found in the Converting Colors section of . [CSSCOLOR]\n\nThe enumeration is used to specify the color type of the canvas's backing store.\n\nThe \" \" value indicates that the type for all color components is 8-bit unsigned normalized.\n\nThe \" \" value indicates that the type for all color components is 16-bit floating point.\n\nThe enumeration is used to select the algorithm by which to determine if a point is inside or outside a path.\n\nThe \" \" value indicates the nonzero winding rule, wherein a point is considered to be outside a shape if the number of times a half-infinite straight line drawn from that point crosses the shape's path going in one direction is equal to the number of times it crosses the path going in the other direction.\n\nThe \" \" value indicates the even-odd rule, wherein a point is considered to be outside a shape if the number of times a half-infinite straight line drawn from that point crosses the shape's path is even.\n\nIf a point is not outside a shape, it is inside the shape.\n\nThe enumeration is used to express a preference for the interpolation quality to use when smoothing images.\n\nThe \" \" value indicates a preference for a low level of image interpolation quality. Low-quality image interpolation may be more computationally efficient than higher settings.\n\nThe \" \" value indicates a preference for a medium level of image interpolation quality.\n\nThe \" \" value indicates a preference for a high level of image interpolation quality. High-quality image interpolation may be more computationally expensive than lower settings.\n\nBilinear scaling is an example of a relatively fast, lower-quality image-smoothing algorithm. Bicubic or Lanczos scaling are examples of image-smoothing algorithms that produce higher-quality output. This specification does not mandate that specific interpolation algorithms be used.\n\nThe output bitmap, when it is not directly displayed by the user agent, implementations can, instead of updating this bitmap, merely remember the sequence of drawing operations that have been applied to it until such time as the bitmap's actual data is needed (for example because of a call to , or the factory method). In many cases, this will be more memory efficient.\n\nThe bitmap of a element is the one bitmap that's pretty much always going to be needed in practice. The output bitmap of a rendering context, when it has one, is always just an alias to a element's bitmap.\n\nAdditional bitmaps are sometimes needed, e.g. to enable fast drawing when the canvas is being painted at a different size than its natural size, or to enable double buffering so that graphics updates, like page scrolling for example, can be processed concurrently while canvas draw commands are being executed.\n\nA object has an that is initialized when the object is created.\n\nThe output bitmap has an origin-clean flag, which can be set to true or false. Initially, when one of these bitmaps is created, its origin-clean flag must be set to true.\n\nThe object also has an boolean. When a object's alpha is false, then its alpha component must be fixed to 1.0 (fully opaque) for all pixels, and attempts to change the alpha component of any pixel must be silently ignored.\n\nThus, the bitmap of such a context starts off as opaque black instead of transparent black; always results in opaque black pixels, every fourth byte from is always 255, the method effectively ignores every fourth byte in its input, and so on. However, the alpha component of styles and images drawn onto the canvas are still honoured up to the point where they would impact the output bitmap's alpha component; for instance, drawing a 50% transparent white square on a freshly created output bitmap with its alpha set to false will result in a fully-opaque gray square.\n\nThe object also has a boolean. When a object's desynchronized is true, then the user agent may optimize the rendering of the canvas to reduce the latency, as measured from input events to rasterization, by desynchronizing the canvas paint cycle from the event loop, bypassing the ordinary user agent rendering algorithm, or both. Insofar as this mode involves bypassing the usual paint mechanisms, rasterization, or both, it might introduce visible tearing artifacts.\n\nThe user agent usually renders on a buffer which is not being displayed, quickly swapping it and the one being scanned out for presentation; the former buffer is called back buffer and the latter front buffer. A popular technique for reducing latency is called front buffer rendering, also known as single buffer rendering, where rendering happens in parallel and racily with the scanning out process. This technique reduces the latency at the price of potentially introducing tearing artifacts and can be used to implement in total or part of the desynchronized boolean. [MULTIPLEBUFFERING]\n\nThe desynchronized boolean can be useful when implementing certain kinds of applications, such as drawing applications, where the latency between input and rasterization is critical.\n\nThe object also has a boolean. When a object's will read frequently is true, the user agent may optimize the canvas for readback operations.\n\nOn most devices the user agent needs to decide whether to store the canvas's output bitmap on the GPU (this is also called \"hardware accelerated\"), or on the CPU (also called \"software\"). Most rendering operations are more performant for accelerated canvases, with the major exception being readback with , , or . objects with will read frequently equal to true tell the user agent that the webpage is likely to perform many readback operations and that it is advantageous to use a software canvas.\n\nThe object also has a setting of type . The object's color space indicates the color space for the output bitmap.\n\nThe object also has a setting of type . The object's color type indicates the data type of the color and alpha components of the pixels of the output bitmap.\n\nTo , given a and a :\n\nThe method steps are to return «[ \" \" → this's alpha, \" \" → this's desynchronized, \" \" → this's color space, \" \" → this's color type, \" \" → this's will read frequently ]».\n\nObjects that implement the interface maintain a stack of drawing states. consist of:\n• None The current letter spacing, word spacing, fill style, stroke style, filter, global alpha, compositing and blending operator, and shadow color.\n• None The current values of the following attributes: , , , , , , , , , , , , , , , , , , .\n\nThe rendering context's bitmaps are not part of the drawing state, as they depend on whether and how the rendering context is bound to a element.\n\nObjects that implement the mixin have a boolean, that is initialized to false when the object is created. The context lost value is updated in the context lost steps.\n\nThe method steps are to push a copy of the current drawing state onto the drawing state stack.\n\nThe method steps are to pop the top entry in the drawing state stack, and reset the drawing state it describes. If there is no saved state, then the method must do nothing.\n\nThe method steps are to reset the rendering context to its default state.\n\nTo reset the rendering context to its default state :\n• None Empty the list of subpaths in context's current default path.\n• None Reset everything that drawing state consists of to their initial values.\n\nThe method steps are to return this's context lost.\n\nObjects that implement the interface have attributes and methods (defined in this section) that control how lines are treated by the object.\n\nThe attribute gives the width of lines, in coordinate space units. On getting, it must return the current value. On setting, zero, negative, infinite, and NaN values must be ignored, leaving the value unchanged; other values must change the current value to the new value.\n\nWhen the object implementing the interface is created, the attribute must initially have the value 1.0.\n\nThe attribute defines the type of endings that UAs will place on the end of lines. The three valid values are \" \", \" \", and \" \".\n\nOn getting, it must return the current value. On setting, the current value must be changed to the new value.\n\nWhen the object implementing the interface is created, the attribute must initially have the value \" \".\n\nThe attribute defines the type of corners that UAs will place where two lines meet. The three valid values are \" \", \" \", and \" \".\n\nOn getting, it must return the current value. On setting, the current value must be changed to the new value.\n\nWhen the object implementing the interface is created, the attribute must initially have the value \" \".\n\nWhen the attribute has the value \" \", strokes use the miter limit ratio to decide how to render joins. The miter limit ratio can be explicitly set using the attribute. On getting, it must return the current value. On setting, zero, negative, infinite, and NaN values must be ignored, leaving the value unchanged; other values must change the current value to the new value.\n\nWhen the object implementing the interface is created, the attribute must initially have the value 10.0.\n\nEach object has a , which is either empty or consists of an even number of non-negative numbers. Initially, the dash list must be empty.\n\nThe method, when invoked, must run these steps:\n• None If any value in is not finite (e.g. an Infinity or a NaN value), or if any value is negative (less than zero), then return (without throwing an exception; user agents could show a message on a developer console, though, as that would be helpful for debugging).\n• None If the number of elements in is odd, then let be the concatenation of two copies of .\n• None Let the object's dash list be .\n\nWhen the method is invoked, it must return a sequence whose values are the values of the object's dash list, in the same order.\n\nIt is sometimes useful to change the \"phase\" of the dash pattern, e.g. to achieve a \"marching ants\" effect. The phase can be set using the attribute. On getting, it must return the current value. On setting, infinite and NaN values must be ignored, leaving the value unchanged; other values must change the current value to the new value.\n\nWhen the object implementing the interface is created, the attribute must initially have the value 0.0.\n\nWhen a user agent is to , given an object that implements the interface, it must run the following algorithm. This algorithm returns a new path.\n• None Let be a copy of the path being traced.\n• None Remove from any subpaths containing no lines (i.e. subpaths with just one point).\n• None Replace each point in each subpath of other than the first point and the last point of each subpath by a join that joins the line leading to that point to the line leading out of that point, such that the subpaths all consist of two points (a starting point with a line leading out of it, and an ending point with a line leading into it), one or more lines (connecting the points and the joins), and zero or more joins (each connecting one line to another), connected together such that each subpath is a series of one or more lines with a join between each one and a point on each end.\n• None Add a straight closing line to each closed subpath in connecting the last point and the first point of that subpath; change the last point to a join (from the previously last line to the newly added closing line), and change the first point to a join (from the newly added closing line to the first line).\n• None If 's dash list is empty, then jump to the step labeled convert.\n• None Let be the concatenation of all the entries of 's dash list, in coordinate space units.\n• None For each subpath in , run the following substeps. These substeps mutate the subpaths in in vivo.\n• None Let be the length of all the lines of , in coordinate space units.\n• None Let be the value of 's , in coordinate space units.\n• While is greater than , decrement it by . While is less than zero, increment it by .\n• None Define to be a linear coordinate line defined along all lines in , such that the start of the first line in the subpath is defined as coordinate 0, and the end of the last line in the subpath is defined as coordinate .\n• None Let be zero minus .\n• None Let be off (the other states being on and zero-on).\n• None Dash on: Let be the value of 's dash list's th entry.\n• None If is greater than , then end these substeps for this subpath and start them again for the next subpath; if there are no more subpaths, then jump to the step labeled convert instead.\n• None If is nonzero, then let be on.\n• None Dash off: Let be the value of 's dash list's th entry.\n• None Let be the offset on .\n• None If is less than zero, then jump to the step labeled post-cut.\n• None If is less than zero, then let be zero.\n• None If is greater than , then let be the offset on . Otherwise, let be the offset on .\n• Jump to the first appropriate step: If is zero and is off Do nothing, just continue to the next step. If is off Cut the line on which finds itself short at and place a point there, cutting in two the subpath that it was in; remove all line segments, joins, points, and subpaths that are between and ; and finally place a single point at with no lines connecting to it. The point has a directionality for the purposes of drawing line caps (see below). The directionality is the direction that the original line had at that point (i.e. when was defined above). Cut the line on which finds itself into two at and place a point there, cutting in two the subpath that it was in, and similarly cut the line on which finds itself short at and place a point there, cutting in two the subpath that it was in, and then remove all line segments, joins, points, and subpaths that are between and . If and are the same point, then this results in just the line being cut in two and two points being inserted there, with nothing being removed, unless a join also happens to be at that point, in which case the join must be removed.\n• None Post-cut: If is greater than , then jump to the step labeled convert.\n• None Increment by one. If it is equal to the number of entries in 's dash list, then let be 0.\n• None Return to the step labeled dash on.\n• Convert: This is the step that converts the path to a new path that represents its stroke. Create a new path that describes the edge of the areas that would be covered if a straight line of length equal to 's was swept along each subpath in while being kept at an angle such that the line is orthogonal to the path being swept, replacing each point with the end cap necessary to satisfy 's attribute as described previously and elaborated below, and replacing each join with the join necessary to satisfy 's type, as defined below. Caps: Each point has a flat edge perpendicular to the direction of the line coming out of it. This is then augmented according to the value of 's . The \" \" value means that no additional line cap is added. The \" \" value means that a semi-circle with the diameter equal to 's width must additionally be placed on to the line coming out of each point. The \" \" value means that a rectangle with the length of 's width and the width of half 's width, placed flat against the edge perpendicular to the direction of the line coming out of the point, must be added at each point. Points with no lines coming out of them must have two caps placed back-to-back as if it was really two points connected to each other by an infinitesimally short straight line in the direction of the point's directionality (as defined above). Joins: In addition to the point where a join occurs, two additional points are relevant to each join, one for each line: the two corners found half the line width away from the join point, one perpendicular to each line, each on the side furthest from the other line. A triangle connecting these two opposite corners with a straight line, with the third point of the triangle being the join point, must be added at all joins. The attribute controls whether anything else is rendered. The three aforementioned values have the following meanings: The \" \" value means that this is all that is rendered at joins. The \" \" value means that an arc connecting the two aforementioned corners of the join, abutting (and not overlapping) the aforementioned triangle, with the diameter equal to the line width and the origin at the point of the join, must be added at joins. The \" \" value means that a second triangle must (if it can given the miter length) be added at the join, with one line being the line between the two aforementioned corners, abutting the first triangle, and the other two being continuations of the outside edges of the two joining lines, as long as required to intersect without going over the miter length. The miter length is the distance from the point where the join occurs to the intersection of the line edges on the outside of the join. The miter limit ratio is the maximum allowed ratio of the miter length to half the line width. If the miter length would cause the miter limit ratio (as set by 's attribute) to be exceeded, then this second triangle must not be added. The subpaths in the newly created path must be oriented such that for any point, the number of times a half-infinite straight line drawn from that point crosses a subpath is even if and only if the number of times a half-infinite straight line drawn from that same point crosses a subpath going in one direction is equal to the number of times it crosses a subpath going in the other direction.\n\nObjects that implement the interface have attributes (defined in this section) that control how text is laid out (rasterized or outlined) by the object. Such objects can also have a . For objects, this is the element given by the value of the context's attribute. For objects, this is the associated object.\n\nFont resolution for the font style source object requires a font source. This is determined for a given implementing by the following steps: [CSSFONTLOAD]\n• None If 's font style source object is a element, return the element's node document.\n• Otherwise, 's font style source object is an object:\n• None If is a object, then return 's associated .\n\nThe IDL attribute, on setting, must be parsed as a CSS <'font'> value (but without supporting property-independent style sheet syntax like 'inherit'), and the resulting font must be assigned to the context, with the 'line-height' component forced to 'normal', with the 'font-size' component converted to CSS pixels, and with system fonts being computed to explicit values. If the new value is syntactically incorrect (including using property-independent style sheet syntax like 'inherit' or 'initial'), then it must be ignored, without assigning a new font value. [CSS]\n\nFont family names must be interpreted in the context of the font style source object when the font is to be used; any fonts embedded using or loaded using objects that are visible to the font style source object must therefore be available once they are loaded. (Each font style source object has a font source, which determines what fonts are available.) If a font is used before it is fully loaded, or if the font style source object does not have that font in scope at the time the font is to be used, then it must be treated as if it was an unknown font, falling back to another as described by the relevant CSS specifications. [CSSFONTS] [CSSFONTLOAD]\n\nOn getting, the attribute must return the serialized form of the current font of the context (with no 'line-height' component). [CSSOM]\n\nWhen the object implementing the interface is created, the font of the context must be set to 10px sans-serif. When the 'font-size' component is set to lengths using percentages, 'em' or 'ex' units, or the 'larger' or 'smaller' keywords, these must be interpreted relative to the computed value of the 'font-size' property of the font style source object at the time that the attribute is set, if it is an element. When the 'font-weight' component is set to the relative values 'bolder' and 'lighter', these must be interpreted relative to the computed value of the 'font-weight' property of the font style source object at the time that the attribute is set, if it is an element. If the computed values are undefined for a particular case (e.g. because the font style source object is not an element or is not being rendered), then the relative keywords must be interpreted relative to the normal-weight 10px sans-serif default.\n\nThe IDL attribute, on getting, must return the current value. On setting, the current value must be changed to the new value. When the object implementing the interface is created, the attribute must initially have the value .\n\nThe IDL attribute, on getting, must return the current value. On setting, the current value must be changed to the new value. When the object implementing the interface is created, the attribute must initially have the value .\n\nObjects that implement the interface have an associated value used to localize font rendering. Valid values are a BCP 47 language tag, the empty string, or \" \" where the language comes from the element's language, or the associated document element when there is no element. Initially, the language must be \" \".\n\nThe getter steps are to return this's language.\n\nThe setter steps are to set this's language to the given value.\n\nThe IDL attribute, on getting, must return the current value. On setting, the current value must be changed to the new value. When the object implementing the interface is created, the attribute must initially have the value \" \".\n\nObjects that implement the interface have attributes that control the spacing between letters and words. Such objects have associated and values, which are CSS <length> values. Initially, both must be the result of parsing \" \" as a CSS <length>.\n\nThe getter steps are to return the serialized form of this's letter spacing.\n• None Let be the result of parsing the given value as a CSS <length>.\n• None If is failure, then return.\n\nThe getter steps are to return the serialized form of this's word spacing.\n• None Let be the result of parsing the given value as a CSS <length>.\n• None If is failure, then return.\n\nThe IDL attribute, on getting, must return the current value. On setting, the current value must be changed to the new value. When the object implementing the interface is created, the attribute must initially have the value \" \".\n\nThe IDL attribute, on getting, must return the current value. On setting, the current value must be changed to the new value. When the object implementing the interface is created, the attribute must initially have the value \" \".\n\nThe IDL attribute, on getting, must return the current value. On setting, the current value must be changed to the new value. When the object implementing the interface is created, the attribute must initially have the value \" \".\n\nThe IDL attribute, on getting, must return the current value. On setting, the current value must be changed to the new value. When the object implementing the interface is created, the attribute must initially have the value \" \".\n\nThe attribute's allowed keywords are as follows:\n\nThe attribute's allowed keywords correspond to alignment points in the font:\n\nThe keywords map to these alignment points as follows:\n\nThe attribute's allowed keywords are as follows:\n\nThe attribute's allowed keywords are as follows:\n\nThe attribute's allowed keywords are as follows:\n\nThe attribute's allowed keywords are as follows:\n\nThe attribute's allowed keywords are as follows:\n\nThe is as follows. It takes as input a string , a object , and an optional length . It returns an array of glyph shapes, each positioned on a common coordinate space, a whose value is one of left, right, and center, and an inline box. (Most callers of this algorithm ignore the and the inline box.)\n• None If was provided but is less than or equal to zero or equal to NaN, then return an empty array.\n• None Replace all ASCII whitespace in with U+0020 SPACE characters.\n• None Let be the current font of , as given by that object's attribute.\n• None Let be the 's language.\n• \n• None If is a element, then set to the 's language.\n• None If is the empty string, then set to explicitly unknown.\n• Apply the appropriate step from the following list to determine the value of : If the object's attribute has the value \" \" If the object's attribute has the value \" \" If the object's attribute has the value \" \"\n• None If is a element, then let be 's directionality.\n• Form a hypothetical infinitely-wide CSS line box containing a single inline box containing the text , with the CSS content language set to , and with its CSS properties set as follows: and with all other properties set to their initial values.\n• None If was provided and the hypothetical width of the inline box in the hypothetical line box is greater than CSS pixels, then change to have a more condensed font (if one is available or if a reasonably readable one can be synthesized by applying a horizontal scale factor to the font) or a smaller font, and return to the previous step.\n• The is a point on the inline box, and the is one of the values left, right, and center. These variables are determined by the and values as follows: If is If is and is 'ltr' If is and is 'rtl' Let the 's horizontal position be the left edge of the inline box, and let be left. If is If is and is 'ltr' If is and is 'rtl' Let the 's horizontal position be the right edge of the inline box, and let be right. Let the 's horizontal position be half way between the left and right edges of the inline box, and let be center. Let the 's vertical position be the top of the em box of the first available font of the inline box. Let the 's vertical position be the hanging baseline of the first available font of the inline box. Let the 's vertical position be half way between the bottom and the top of the em box of the first available font of the inline box. Let the 's vertical position be the alphabetic baseline of the first available font of the inline box. Let the 's vertical position be the ideographic-under baseline of the first available font of the inline box. Let the 's vertical position be the bottom of the em box of the first available font of the inline box.\n• Let be an array constructed by iterating over each glyph in the inline box from left to right (if any), adding to the array, for each glyph, the shape of the glyph as it is in the inline box, positioned on a coordinate space using CSS pixels with its origin at the .\n\nObjects that implement the interface have a path. A has a list of zero or more subpaths. Each subpath consists of a list of one or more points, connected by straight or curved , and a flag indicating whether the subpath is closed or not. A closed subpath is one where the last point of the subpath is connected to the first point of the subpath by a straight line. Subpaths with only one point are ignored when painting the path.\n\nPaths have a flag. When this flag is set, certain APIs create a new subpath rather than extending the previous one. When a path is created, its need new subpath flag must be set.\n\nWhen an object implementing the interface is created, its path must be initialized to zero subpaths.\n\nThe following methods allow authors to manipulate the paths of objects implementing the interface.\n\nFor objects implementing the and interfaces, the points passed to the methods, and the resulting lines added to current default path by these methods, must be transformed according to the current transformation matrix before being added to the path.\n\nThe method, when invoked, must run these steps:\n• None If either of the arguments are infinite or NaN, then return.\n• None Create a new subpath with the specified point as its first (and only) point.\n\nWhen the user agent is to for a coordinate ( , ) on a path, the user agent must check to see if the path has its need new subpath flag set. If it does, then the user agent must create a new subpath with the point ( , ) as its first (and only) point, as if the method had been called, and must then unset the path's need new subpath flag.\n\nThe method, when invoked, must do nothing if the object's path has no subpaths. Otherwise, it must mark the last subpath as closed, create a new subpath whose first point is the same as the previous subpath's first point, and finally add this new subpath to the path.\n\nIf the last subpath had more than one point in its list of points, then this is equivalent to adding a straight line connecting the last point back to the first point of the last subpath, thus \"closing\" the subpath.\n\nNew points and the lines connecting them are added to subpaths using the methods described below. In all cases, the methods only modify the last subpath in the object's path.\n\nThe method, when invoked, must run these steps:\n• None If either of the arguments are infinite or NaN, then return.\n• None If the object's path has no subpaths, then ensure there is a subpath for ( , ).\n• None Otherwise, connect the last point in the subpath to the given point ( , ) using a straight line, and then add the given point ( , ) to the subpath.\n\nThe method, when invoked, must run these steps:\n• None If any of the arguments are infinite or NaN, then return.\n• None Ensure there is a subpath for ( , )\n• None Connect the last point in the subpath to the given point ( , ) using a quadratic Bézier curve with control point ( , ). [BEZIER]\n• None Add the given point ( , ) to the subpath.\n\nThe method, when invoked, must run these steps:\n• None If any of the arguments are infinite or NaN, then return.\n• None Ensure there is a subpath for ( , ).\n• None Connect the last point in the subpath to the given point ( , ) using a cubic Bézier curve with control points ( , ) and ( , ). [BEZIER]\n• None Add the point ( , ) to the subpath.\n\nThe method, when invoked, must run these steps:\n• None If any of the arguments are infinite or NaN, then return.\n• None Ensure there is a subpath for ( , ).\n• None If is negative, then throw an \" \" .\n• None Let the point ( , ) be the last point in the subpath, transformed by the inverse of the current transformation matrix (so that it is in the same coordinate system as the points passed to the method).\n• None If the point ( , ) is equal to the point ( , ), or if the point ( , ) is equal to the point ( , ), or if is zero, then add the point ( , ) to the subpath, and connect that point to the previous point ( , ) by a straight line.\n• None Otherwise, if the points ( , ), ( , ), and ( , ) all lie on a single straight line, then add the point ( , ) to the subpath, and connect that point to the previous point ( , ) by a straight line.\n• None Otherwise, let be the shortest arc given by circumference of the circle that has radius , and that has one point tangent to the half-infinite line that crosses the point ( , ) and ends at the point ( , ), and that has a different point tangent to the half-infinite line that ends at the point ( , ) and crosses the point ( , ). The points at which this circle touches these two lines are called the start and end tangent points respectively. Connect the point ( , ) to the start tangent point by a straight line, adding the start tangent point to the subpath, and then connect the start tangent point to the end tangent point by , adding the end tangent point to the subpath.\n\nThe method, when invoked, must run the ellipse method steps with this, , , , , 0, , , and .\n\nThis makes it equivalent to except that both radii are equal and is 0.\n\nThe method, when invoked, must run the ellipse method steps with this, , , , , , , , and .\n\nThe determine the point on an ellipse steps , given , and , are:\n• None Let be the circle that shares its origin with , with a radius equal to the semi-major axis of .\n• None Let be the point on 's circumference at measured in radians clockwise from 's semi-major axis.\n• None Let be the line perpendicular to 's major axis between this axis and .\n• None Return the point on that crosses 's circumference.\n\nThe , given , , , , , , , , and , are:\n• None If any of the arguments are infinite or NaN, then return.\n• None If either or are negative, then throw an \" \" .\n• None If 's path has any subpaths, then add a straight line from the last point in the subpath to the start point of the arc.\n• Add the start and end points of the arc to the subpath, and connect them with an arc. The arc and its start and end points are defined as follows: Consider an ellipse that has its origin at ( , ), that has a major-axis radius and a minor-axis radius , and that is rotated about its origin such that its semi-major axis is inclined radians clockwise from the x-axis. If is false and − is greater than or equal to 2π, or, if is true and − is greater than or equal to 2π, then the arc is the whole circumference of this ellipse, and both the start point and the end point are the result of running the determine the point on an ellipse steps given this ellipse and . Otherwise, the start point is the result of running the determine the point on an ellipse steps given this ellipse and , the end point is the result of running the determine the point on an ellipse steps given this ellipse and , and the arc is the path along the circumference of this ellipse from the start point to the end point, going counterclockwise if is true, and clockwise otherwise. Since the points are on the ellipse, as opposed to being simply angles from zero, the arc can never cover an angle greater than 2π radians. Even if the arc covers the entire circumference of the ellipse and there are no other points in the subpath, the path is not closed unless the method is appropriately invoked.\n\nThe method, when invoked, must run these steps:\n• None If any of the arguments are infinite or NaN, then return.\n• None Create a new subpath containing just the four points ( , ), ( + , ), ( + , + ), ( , + ), in that order, with those four points connected by straight lines.\n• None Create a new subpath with the point ( , ) as the only point in the subpath.\n• None If any of , , , or are infinite or NaN, then return.\n• None If is an or , then set to « ».\n• None If is not a list of size one, two, three, or four, then throw a .\n• None Let be an empty list.\n• For each of :\n• \n• None If [\" \"] or [\" \"] is infinite or NaN, then return.\n• None If [\" \"] or [\" \"] is negative, then throw a .\n• \n• None If is infinite or NaN, then return.\n• None If is negative, then throw a .\n• None Let , , , and be null.\n• None If 's size is 4, then set to [0], set to [1], set to [2], and set to [3].\n• None If 's size is 3, then set to [0], set and to [1], and set to [2].\n• None If 's size is 2, then set and to [0] and set and to [1].\n• None If 's size is 1, then set , , , and to [0].\n• Corner curves must not overlap. Scale all radii to prevent this:\n• None Let be the minimum value of the ratios / , / , / , / .\n• None If is less than 1, then set the and members of , , , and to their current values multiplied by .\n• \n• None Draw an arc to the point ( + , + [\" \"]).\n• None Draw an arc to the point ( + − [\" \"], + ).\n• None Draw an arc to the point ( , + − [\" \"]).\n• None Draw an arc to the point ( + [\" \"], ).\n• None Create a new subpath with the point ( , ) as the only point in the subpath.\n\nThis is designed to behave similarly to the CSS 'border-radius' property.\n\nobjects can be used to declare paths that are then later used on objects implementing the interface. In addition to many of the APIs described in earlier sections, objects have methods to combine paths, and to add text to paths.\n\nThe constructor, when invoked, must run these steps:\n• None Let be a new object.\n• None If is not given, then return .\n• None If is a object, then add all subpaths of to and return . (In other words, it returns a copy of the argument.)\n• Let be the result of parsing and interpreting according to 's rules for path data. [SVG] The resulting path could be empty. SVG defines error handling rules for parsing and applying path data.\n• None Let ( , ) be the last point in .\n• None Add all the subpaths, if any, from to .\n• None Create a new subpath in with ( , ) as the only point in the subpath.\n\nThe method, when invoked on a object , must run these steps:\n• None If the object has no subpaths, then return.\n• None Let be the result of creating a from the 2D dictionary .\n• None If one or more of 's m11 element, m12 element, m21 element, m22 element, m41 element, or m42 element are infinite or NaN, then return.\n• None Create a copy of all the subpaths in . Let this copy be known as .\n• None Transform all the coordinates and lines in by the transform matrix .\n• None Let ( , ) be the last point in the last subpath of .\n• None Add all the subpaths in to .\n• None Create a new subpath in with ( , ) as the only point in the subpath.\n\nObjects that implement the interface have a , as well as methods (described in this section) to manipulate it. When an object implementing the interface is created, its transformation matrix must be initialized to the identity matrix.\n\nThe current transformation matrix is applied to coordinates when creating the current default path, and when painting text, shapes, and objects, on objects implementing the interface.\n\nThe transformations must be performed in reverse order.\n\nFor instance, if a scale transformation that doubles the width is applied to the canvas, followed by a rotation transformation that rotates drawing operations by a quarter turn, and a rectangle twice as wide as it is tall is then drawn on the canvas, the actual result will be a square.\n\nThe method, when invoked, must run these steps:\n• None If either of the arguments are infinite or NaN, then return.\n• None Add the scaling transformation described by the arguments to the current transformation matrix. The argument represents the scale factor in the horizontal direction and the argument represents the scale factor in the vertical direction. The factors are multiples.\n\nThe method, when invoked, must run these steps:\n• None If is infinite or NaN, then return.\n• None Add the rotation transformation described by the argument to the current transformation matrix. The argument represents a clockwise rotation angle expressed in radians.\n\nThe method, when invoked, must run these steps:\n• None If either of the arguments are infinite or NaN, then return.\n• None Add the translation transformation described by the arguments to the current transformation matrix. The argument represents the translation distance in the horizontal direction and the argument represents the translation distance in the vertical direction. The arguments are in coordinate space units.\n\nThe method, when invoked, must run these steps:\n• None If any of the arguments are infinite or NaN, then return.\n• Replace the current transformation matrix with the result of multiplying the current transformation matrix with the matrix described by:\n\nThe arguments , , , , , and are sometimes called , , , , , and or , , , , , and . Care ought to be taken in particular with the order of the second and third arguments ( and ) as their order varies from API to API and APIs sometimes use the notation / and sometimes / for those positions.\n\nThe method, when invoked, must return a newly created representing a copy of the current transformation matrix matrix of the context.\n\nThis returned object is not live, so updating it will not affect the current transformation matrix, and updating the current transformation matrix will not affect an already returned .\n\nThe method, when invoked, must run these steps:\n• None If any of the arguments are infinite or NaN, then return.\n• Reset the current transformation matrix to the matrix described by:\n\nThe method, when invoked, must run these steps:\n• None Let be the result of creating a from the 2D dictionary .\n• None If one or more of 's m11 element, m12 element, m21 element, m22 element, m41 element, or m42 element are infinite or NaN, then return.\n\nThe method, when invoked, must reset the current transformation matrix to the identity matrix.\n\nSome methods on the and interfaces take the union type as an argument.\n\nThis union type allows objects implementing any of the following interfaces to be used as image sources:\n\nAlthough not formally specified as such, SVG elements are expected to be implemented nearly identical to elements. That is, SVG elements share the fundamental concepts and features of elements.\n\nThe interface can be created from a number of other image-representing types, including .\n\nTo check the usability of the argument , where is a object, run these steps:\n• If 's current request's state is broken, then throw an \" \" . If is not fully decodable, then return bad. If has a natural width or natural height (or both) equal to zero, then return bad. If 's attribute is either or , then return bad. If has either a horizontal dimension or a vertical dimension equal to zero, then throw an \" \" . If 's [[Detached]] internal slot value is set to true, then throw an \" \" .\n\nWhen a object represents an , the element's image must be used as the source image.\n\nSpecifically, when a object represents an animated image in an , the user agent must use the default image of the animation (the one that the format defines is to be used when animation is not supported or is disabled), or, if there is no such image, the first frame of the animation, when rendering the image for APIs.\n\nWhen a object represents an , then the frame at the current playback position when the method with the argument is invoked must be used as the source image when rendering the image for APIs, and the source image's dimensions must be the natural width and natural height of the media resource (i.e., after any aspect-ratio correction has been applied).\n\nWhen a object represents an , the element's bitmap must be used as the source image.\n\nWhen a object represents an element that is being rendered and that element has been resized, the original image data of the source image must be used, not the image as it is rendered (e.g. and attributes on the source element have no effect on how the object is interpreted when rendering the image for APIs).\n\nWhen a object represents an , the object's bitmap image data must be used as the source image.\n\nWhen a object represents an , the object's bitmap must be used as the source image.\n\nWhen a object represents a , the object's pixel data must be used as the source image, and the source image's dimensions must be the object's [[display width]] and [[display height]].\n\nAn object if, switching on 's type:\n\nObjects that implement the interface have attributes and methods (defined in this section) that control how shapes are treated by the object.\n\nSuch objects have associated and values, which are either CSS colors, s, or s. Initially, both must be the result of parsing the string \" \".\n\nWhen the value is a CSS color, it must not be affected by the transformation matrix when used to draw on bitmaps.\n\nWhen set to a or object, changes made to the object after the assignment do affect subsequent stroking or filling of shapes.\n• None If this's fill style is a CSS color, then return the serialization of that color with HTML-compatible serialization requested.\n• If the given value is a string, then:\n• None Let be this's attribute's value, if that is an element; otherwise null.\n• None Let be the result of parsing the given value with if non-null.\n• None If is failure, then return.\n• None If the given value is a object that is marked as not origin-clean, then set this's origin-clean flag to false.\n• None Set this's fill style to the given value.\n• None If this's stroke style is a CSS color, then return the serialization of that color with HTML-compatible serialization requested.\n• If the given value is a string, then:\n• None Let be this's attribute's value, if that is an element; otherwise null.\n• None Let be the result of parsing the given value with if non-null.\n• None If is failure, then return.\n• None If the given value is a object that is marked as not origin-clean, then set this's origin-clean flag to false.\n• None Set this's stroke style to the given value.\n\nThere are three types of gradients, linear gradients, radial gradients, and conic gradients, represented by objects implementing the opaque interface.\n\nOnce a gradient has been created (see below), stops are placed along it to define how the colors are distributed along the gradient. The color of the gradient at each stop is the color specified for that stop. Between each such stop, the colors and the alpha component must be linearly interpolated over the RGBA space without premultiplying the alpha value to find the color to use at that offset. Before the first stop, the color must be the color of the first stop. After the last stop, the color must be the color of the last stop. When there are no stops, the gradient is transparent black.\n\nThe method on the , when invoked, must run these steps:\n• None If the is less than 0 or greater than 1, then throw an \" \" .\n• Let be the result of parsing . No element is passed to the parser because objects are -neutral — a object created by one can be used by another, and there is therefore no way to know which is the \"element in question\" at the time that the color is specified.\n• Place a new stop on the gradient, at offset relative to the whole gradient, and with the color . If multiple stops are added at the same offset on a gradient, then they must be placed in the order added, with the first one closest to the start of the gradient, and each subsequent one infinitesimally further along towards the end point (in effect causing all but the first and last stop added at each point to be ignored).\n\nThe method takes four arguments that represent the start point ( , ) and end point ( , ) of the gradient. The method, when invoked, must return a linear initialized with the specified line.\n\nLinear gradients must be rendered such that all points on a line perpendicular to the line that crosses the start and end points have the color at the point where those two lines cross (with the colors coming from the interpolation and extrapolation described above). The points in the linear gradient must be transformed as described by the current transformation matrix when rendering.\n\nIf = and = , then the linear gradient must paint nothing.\n\nThe method takes six arguments, the first three representing the start circle with origin ( , ) and radius , and the last three representing the end circle with origin ( , ) and radius . The values are in coordinate space units. If either of or are negative, then an \" \" must be thrown. Otherwise, the method, when invoked, must return a radial initialized with the two specified circles.\n\nRadial gradients must be rendered by following these steps:\n• None If = and = and = , then the radial gradient must paint nothing. Return.\n• Let the color at be the color at that position on the gradient (with the colors coming from the interpolation and extrapolation described above).\n• None For all values of where r( ) > 0, starting with the value of nearest to positive infinity and ending with the value of nearest to negative infinity, draw the circumference of the circle with radius r( ) at position (x( ), y( )), with the color at , but only painting on the parts of the bitmap that have not yet been painted on by earlier circles in this step for this rendering of the gradient.\n\nThis effectively creates a cone, touched by the two circles defined in the creation of the gradient, with the part of the cone before the start circle (0.0) using the color of the first offset, the part of the cone after the end circle (1.0) using the color of the last offset, and areas outside the cone untouched by the gradient (transparent black).\n\nThe resulting radial gradient must then be transformed as described by the current transformation matrix when rendering.\n\nThe method takes three arguments, the first argument, , represents the angle in radians at which the gradient begins, and the last two arguments, ( , ), represent the center of the gradient in CSS pixels. The method, when invoked, must return a conic initialized with the specified center and angle.\n\nIt follows the same rendering rule as CSS 'conic-gradient' and it is equivalent to CSS 'conic-gradient(from rad at px px, )'. Here:\n• None is given by + π/2;\n• None is given by the color stops that have been added to the using , with the color stop offsets interpreted as percentages.\n\nGradients must be painted only where the relevant stroking or filling effects requires that they be drawn.\n\nPatterns are represented by objects implementing the opaque interface.\n\nThe method, when invoked, must run these steps:\n• None Let be the result of checking the usability of .\n• None If is bad, then return null.\n• None If is the empty string, then set it to \" \".\n• None If is not identical to one of \" \", \" \", \" \", or \" \", then throw a \" \" .\n• None Let be a new object with the image and the repetition behavior given by .\n• None If is not origin-clean, then mark as .\n\nModifying the used when creating a object after calling the method must not affect the pattern(s) rendered by the object.\n\nPatterns have a transformation matrix, which controls how the pattern is used when it is painted. Initially, a pattern's transformation matrix must be the identity matrix.\n\nThe method, when invoked, must run these steps:\n• None Let be the result of creating a from the 2D dictionary .\n• None If one or more of 's m11 element, m12 element, m21 element, m22 element, m41 element, or m42 element are infinite or NaN, then return.\n\nWhen a pattern is to be rendered within an area, the user agent must run the following steps to determine what is rendered:\n• Place a copy of the image on the bitmap, anchored such that its top left corner is at the origin of the coordinate space, with one coordinate space unit per CSS pixel of the image, then place repeated copies of this image horizontally to the left and right, if the repetition behavior is \" \", or vertically up and down, if the repetition behavior is \" \", or in all four directions all over the bitmap, if the repetition behavior is \" \". If the original image data is a bitmap image, then the value painted at a point in the area of the repetitions is computed by filtering the original image data. When scaling up, if the attribute is set to false, then the image must be rendered using nearest-neighbor interpolation. Otherwise, the user agent may use any filtering algorithm (for example bilinear interpolation or nearest-neighbor). User agents which support multiple filtering algorithms may use the value of the attribute to guide the choice of filtering algorithm. When such a filtering algorithm requires a pixel value from outside the original image data, it must instead use the value from wrapping the pixel's coordinates to the original image's dimensions. (That is, the filter uses 'repeat' behavior, regardless of the value of the pattern's repetition behavior.)\n• None Transform the resulting bitmap according to the pattern's transformation matrix.\n• None Transform the resulting bitmap again, this time according to the current transformation matrix.\n• None Replace any part of the image outside the area in which the pattern is to be rendered with transparent black.\n• None The resulting bitmap is what is to be rendered, with the same origin and same scale.\n\nIf a radial gradient or repeated pattern is used when the transformation matrix is singular, then the resulting style must be transparent black (otherwise the gradient or pattern would be collapsed to a point or line, leaving the other pixels undefined). Linear gradients and solid colors always define all points even with singular transformation matrices.\n\nObjects that implement the interface provide the following methods for immediately drawing rectangles to the bitmap. The methods each take four arguments; the first two give the and coordinates of the top left of the rectangle, and the second two give the width and height of the rectangle, respectively.\n\nThe current transformation matrix must be applied to the following four coordinates, which form the path that must then be closed to get the specified rectangle: ( , ), ( + , ), ( + , + ), ( , + ).\n\nShapes are painted without affecting the current default path, and are subject to the clipping region, and, with the exception of , also shadow effects, global alpha, and the current compositing and blending operator.\n\nThe method, when invoked, must run these steps:\n• None If any of the arguments are infinite or NaN, then return.\n• None Let be the set of pixels in the specified rectangle that also intersect the current clipping region.\n• None Clear the pixels in to a transparent black, erasing any previous image.\n\nIf either height or width are zero, this method has no effect, since the set of pixels would be empty.\n\nThe method, when invoked, must run these steps:\n• None If any of the arguments are infinite or NaN, then return.\n• None If either or are zero, then return.\n• None Paint the specified rectangular area using this's fill style.\n\nThe method, when invoked, must run these steps:\n• None If any of the arguments are infinite or NaN, then return.\n• None Take the result of tracing the path described below, using the interface's line styles, and fill it with this's stroke style.\n\nIf both and are zero, the path has a single subpath with just one point ( , ), and no lines, and this method thus has no effect (the trace a path algorithm returns an empty path in that case).\n\nIf just one of either or is zero, then the path has a single subpath consisting of two points, with coordinates ( , ) and ( + , + ), in that order, connected by a single straight line.\n\nOtherwise, the path has a single subpath consisting of four points, with coordinates ( , ), ( + , ), ( + , + ), and ( , + ), connected to each other in that order by straight lines.\n\nObjects that implement the interface provide the following methods for rendering text.\n\nThe and methods render the given at the given ( , ) coordinates ensuring that the text isn't wider than if specified, using the current , , and values. Specifically, when the methods are invoked, the user agent must run these steps:\n• None If any of the arguments are infinite or NaN, then return.\n• None Run the text preparation algorithm, passing it , the object implementing the interface, and, if the argument was provided, that argument. Let be the result.\n• None Move all the shapes in to the right by CSS pixels and down by CSS pixels.\n• Paint the shapes given in , as transformed by the current transformation matrix, with each CSS pixel in the coordinate space of mapped to one coordinate space unit. For , this's fill style must be applied to the shapes and this's stroke style must be ignored. For , the reverse holds: this's stroke style must be applied to the result of tracing the shapes using the object implementing the interface for the line styles, and this's fill style must be ignored. These shapes are painted without affecting the current path, and are subject to shadow effects, global alpha, the clipping region, and the current compositing and blending operator.\n\nThe method steps are to run the text preparation algorithm, passing it and the object implementing the interface, and then using the returned inline box must return a new object with members behaving as described in the following list: [CSS]\n\nGlyphs rendered using and can spill out of the box given by the font size and the width returned by (the text width). Authors are encouraged to use the bounding box values described above if this is an issue.\n\nA future version of the 2D context API might provide a way to render fragments of documents, rendered using CSS, straight to the canvas. This would be provided in preference to a dedicated way of doing multiline layout.\n\nObjects that implement the interface have a . There is only one current default path, it is not part of the drawing state. The current default path is a path, as described above.\n\nThe method steps are to empty the list of subpaths in this's current default path so that it once again has zero subpaths.\n\nWhere the following method definitions use the term for a -or-null , it means itself if it is a object, or the current default path otherwise.\n\nWhen the intended path is a object, the coordinates and lines of its subpaths must be transformed according to the current transformation matrix on the object implementing the interface when used by these methods (without affecting the object itself). When the intended path is the current default path, it is not affected by the transform. (This is because transformations already affect the current default path when it is constructed, so applying it when it is painted as well would result in a double transformation.)\n\nThe method steps are to run the fill steps given this, null, and .\n\nThe method steps are to run the fill steps given this, , and .\n\nThe , given a , a -or-null , and a fill rule , are to fill all the subpaths of the intended path for , using 's fill style, and using the fill rule indicated by . Open subpaths must be implicitly closed when being filled (without affecting the actual subpaths).\n\nThe method steps are to run the stroke steps given this and null.\n\nThe method steps are to run the stroke steps given this and .\n\nThe , given a and a -or-null , are to trace the intended path for , using 's line styles as set by its mixin, and then fill the resulting path using 's stroke style, using the nonzero winding rule.\n\nAs a result of how the algorithm to trace a path is defined, overlapping parts of the paths in one stroke operation are treated as if their union was what was painted.\n\nThe stroke style is affected by the transformation during painting, even if the current default path is used.\n\nPaths, when filled or stroked, must be painted without affecting the current default path or any objects, and must be subject to shadow effects, global alpha, the clipping region, and the current compositing and blending operator. (The effect of transformations is described above and varies based on which path is being used.)\n\nThe method steps are to run the clip steps given this, null, and .\n\nThe method steps are to run the clip steps given this, , and .\n\nThe , given a , a -or-null , and a fill rule , are to create a new by calculating the intersection of 's current clipping region and the area described by the intended path for , using the fill rule indicated by . Open subpaths must be implicitly closed when computing the clipping region, without affecting the actual subpaths. The new clipping region replaces the current clipping region.\n\nWhen the context is initialized, its current clipping region must be set to the largest infinite surface (i.e. by default, no clipping occurs).\n\nThe method steps are to return the result of the is point in path steps given this, null, , , and .\n\nThe method steps are to return the result of the is point in path steps given this, , , , and .\n\nThe , given a , a -or-null , two numbers and , and a fill rule , are:\n• None If or are infinite or NaN, then return false.\n• None If the point given by the and coordinates, when treated as coordinates in the canvas coordinate space unaffected by the current transformation, is inside the intended path for as determined by the fill rule indicated by , then return true. Open subpaths must be implicitly closed when computing the area inside the path, without affecting the actual subpaths. Points on the path itself must be considered to be inside the path.\n\nThe method steps are to return the result of the is point in stroke steps given this, null, , and .\n\nThe method steps are to return the result of the is point in stroke steps given this, , , and .\n\nThe , given a , a -or-null , and two numbers and , are:\n• None If or are infinite or NaN, then return false.\n• None If the point given by the and coordinates, when treated as coordinates in the canvas coordinate space unaffected by the current transformation, is inside the path that results from tracing the intended path for , using the nonzero winding rule, and using 's line styles as set by its mixin, then return true. Points on the resulting path must be considered to be inside the path.\n\nObjects that implement the interface provide the following methods to draw focus rings.\n\nThe method steps are to draw focus if needed given this, , and this's current default path.\n\nThe method steps are to draw focus if needed given this, , and .\n\nTo , given an object implementing , an element , and a path :\n• None If is not focused or is not a descendant of 's element, then return.\n• Draw a focus ring of the appropriate style along , following platform conventions. Some platforms only draw focus rings around elements that have been focused from the keyboard, and not those focused from the mouse. Other platforms simply don't draw focus rings around some elements at all unless relevant accessibility features are enabled. This API is intended to follow these conventions. User agents that implement distinctions based on the manner in which the element was focused are encouraged to classify focus driven by the method based on the kind of user interaction event from which the call was triggered (if any). The focus ring should not be subject to the shadow effects, the global alpha, the current compositing and blending operator, the fill style, the stroke style, or any of the members in the , interfaces, but should be subject to the clipping region. (The effect of transformations is described above and varies based on which path is being used.)\n• None Inform the user that the focus is at the location given by the intended path. User agents may wait until the next time the event loop reaches its step to optionally inform the user.\n\nUser agents should not implicitly close open subpaths in the intended path when drawing the focus ring.\n\nThis might be a moot point, however. For example, if the focus ring is drawn as an axis-aligned bounding rectangle around the points in the intended path, then whether the subpaths are closed or not has no effect. This specification intentionally does not specify precisely how focus rings are to be drawn: user agents are expected to honor their platform's native conventions.\n\n\"Inform the user\", as used in this section, does not imply any persistent state change. It could mean, for instance, calling a system accessibility API to notify assistive technologies such as magnification tools so that the user's magnifier moves to the given area of the canvas. However, it does not associate the path with the element, or provide a region for tactile feedback, etc.\n\nObjects that implement the interface have the method to draw images.\n\nThis method can be invoked with three different sets of arguments:\n\nWhen the method is invoked, the user agent must run these steps:\n• None If any of the arguments are infinite or NaN, then return.\n• None Let be the result of checking the usability of .\n• None If is bad, then return (without drawing anything).\n• Establish the source and destination rectangles as follows: If not specified, the and arguments must default to the values of and , interpreted such that one CSS pixel in the image is treated as one unit in the output bitmap's coordinate space. If the , , , and arguments are omitted, then they must default to 0, 0, the image's natural width in image pixels, and the image's natural height in image pixels, respectively. If the image has no natural dimensions, then the concrete object size must be used instead, as determined using the CSS \"Concrete Object Size Resolution\" algorithm, with the specified size having neither a definite width nor height, nor any additional constraints, the object's natural properties being those of the argument, and the default object size being the size of the output bitmap. [CSSIMAGES] The source rectangle is the rectangle whose corners are the four points ( , ), ( + , ), ( + , + ), ( , + ). The destination rectangle is the rectangle whose corners are the four points ( , ), ( + , ), ( + , + ), ( , + ). When the source rectangle is outside the source image, the source rectangle must be clipped to the source image and the destination rectangle must be clipped in the same proportion. When the destination rectangle is outside the destination image (the output bitmap), the pixels that land outside the output bitmap are discarded, as if the destination was an infinite canvas whose rendering was clipped to the dimensions of the output bitmap.\n• None If one of the or arguments is zero, then return. Nothing is painted.\n• Paint the region of the argument specified by the source rectangle on the region of the rendering context's output bitmap specified by the destination rectangle, after applying the current transformation matrix to the destination rectangle. The image data must be processed in the original direction, even if the dimensions given are negative. When scaling up, if the attribute is set to true, the user agent should attempt to apply a smoothing algorithm to the image data when it is scaled. User agents which support multiple filtering algorithms may use the value of the attribute to guide the choice of filtering algorithm when the attribute is set to true. Otherwise, the image must be rendered using nearest-neighbor interpolation. This specification does not define the precise algorithm to use when scaling an image down, or when scaling an image up when the attribute is set to true. When a element is drawn onto itself, the drawing model requires the source to be copied before the image is drawn, so it is possible to copy parts of a element onto overlapping parts of itself. If the original image data is a bitmap image, then the value painted at a point in the destination rectangle is computed by filtering the original image data. The user agent may use any filtering algorithm (for example bilinear interpolation or nearest-neighbor). When the filtering algorithm requires a pixel value from outside the original image data, it must instead use the value from the nearest edge pixel. (That is, the filter uses 'clamp-to-edge' behavior.) When the filtering algorithm requires a pixel value from outside the source rectangle but inside the original image data, then the value from the original image data must be used. Thus, scaling an image in parts or in whole will have the same effect. This does mean that when sprites coming from a single sprite sheet are to be scaled, adjacent images in the sprite sheet can interfere. This can be avoided by ensuring each sprite in the sheet is surrounded by a border of transparent black, or by copying sprites to be scaled into temporary elements and drawing the scaled sprites from there. Images are painted without affecting the current path, and are subject to shadow effects, global alpha, the clipping region, and the current compositing and blending operator.\n• None If is not origin-clean, then set the 's origin-clean flag to false.\n\nObjects that implement the interface provide the following methods for reading and writing pixel data to the bitmap.\n• None If one or both of and are zero, then throw an \" \" .\n• None Initialize this given , , and settings set to .\n• None Initialize the image data of this to transparent black.\n• None Let be the number of bytes in .\n• None If is not a nonzero integral multiple of four, then throw an \" \" .\n• None Let be divided by four.\n• If is not an integral multiple of , then throw an \" \" . At this step, the length is guaranteed to be greater than zero (otherwise the second step above would have aborted the steps), so if is zero, this step will throw the exception and return.\n• None Let be divided by .\n• None If was given and its value is not equal to , then throw an \" \" .\n• Initialize this given , , settings set to , and source set to . This step does not set this's data to a copy of . It sets it to the actual object passed as .\n• None If one or both of and are zero, then throw an \" \" .\n• None Let be a new object.\n• None Initialize given the absolute magnitude of , the absolute magnitude of , settings set to , and defaultColorSpace set to this's color space.\n• None Initialize the image data of to transparent black.\n• None Let be a new object.\n• None Initialize given the value of 's attribute, the value of 's attribute, and defaultColorSpace set to the value of 's attribute.\n• None Initialize the image data of to transparent black.\n• None If either the or arguments are zero, then throw an \" \" .\n• None If the 's origin-clean flag is set to false, then throw a \" \" .\n• None Let be a new object.\n• None Initialize given , , settings set to , and defaultColorSpace set to this's color space.\n• None Let the source rectangle be the rectangle whose corners are the four points ( , ), ( + , ), ( + , + ), ( , + ).\n• None Set the pixel values of to be the pixels of this's output bitmap in the area specified by the source rectangle in the bitmap's coordinate space units, converted from this's color space to 's using 'relative-colorimetric' rendering intent.\n• None Set the pixels values of for areas of the source rectangle that are outside of the output bitmap to transparent black.\n\nTo , given a positive integer number of rows , a positive integer number of pixels per row , an optional , an optional , and an optional :\n• None If was given, then initialize the attribute of to .\n• Otherwise ( was not given), initialize the attribute of to a new object. The object must use a new Canvas Pixel for its storage, and must have a zero start offset and a length equal to the length of its storage, in bytes. The Canvas Pixel must have the correct size to store × pixels. If the Canvas Pixel cannot be allocated, then rethrow the thrown by JavaScript, and return.\n• None Initialize the attribute of to .\n• None Initialize the attribute of to .\n• None If was given and [\" \"] exists, then initialize the attribute of to [\" \"].\n• None Otherwise, if was given, then initialize the attribute of to .\n• None Otherwise, initialize the attribute of to \"srgb\".\n\nobjects are serializable objects. Their serialization steps, given and , are:\n• None Set .[[Data]] to the sub-serialization of the value of 's attribute.\n• None Set .[[Width]] to the value of 's attribute.\n• None Set .[[Height]] to the value of 's attribute.\n• None Set .[[ColorSpace]] to the value of 's attribute.\n\nTheir deserialization steps, given , , and , are:\n• None Initialize 's attribute to the sub-deserialization of .[[Data]].\n\nA is an whose data is represented in left-to-right order, row by row top to bottom, starting with the top left, with each pixel's red, green, blue, and alpha components being given in that order for each pixel. Each component of each pixel represented in this array must be in the range 0..255, representing the 8 bit value for that component. The components must be assigned consecutive indices starting with 0 for the top left pixel's red component.\n\nThe method steps are to put pixels from an onto a bitmap, given , this's output bitmap, , , 0, 0, 's , and 's .\n\nThe method steps are to put pixels from an onto a bitmap, given , this's output bitmap, , , , , , and .\n\nTo put pixels from an onto a bitmap , given an , an output bitmap , and numbers , , , , , and :\n• None If IsDetachedBuffer( ) is true, then throw an \" \" .\n• If is negative, then let be + , and let be equal to the absolute magnitude of . If is negative, then let be + , and let be equal to the absolute magnitude of .\n• If is negative, then let be + , and let be zero. If is negative, then let be + , and let be zero.\n• If + is greater than the attribute of the argument, then let be the value of that attribute, minus the value of . If + is greater than the attribute of the argument, then let be the value of that attribute, minus the value of .\n• If, after those changes, either or are negative or zero, then return without affecting any bitmaps.\n• None For all integer values of and where ≤ < + and ≤ < + , set the pixel with coordinate ( + , + ) in to the color of the pixel at coordinate ( , ) in the data structure's Canvas Pixel , converted from 's to the color space of using 'relative-colorimetric' rendering intent.\n\nDue to the lossy nature of converting between color spaces and converting to and from premultiplied alpha color values, pixels that have just been set using , and are not completely opaque, might be returned to an equivalent as different values.\n\nThe current path, transformation matrix, shadow attributes, global alpha, the clipping region, and current compositing and blending operator must not affect the methods described in this section.\n\nObjects that implement the interface have a global alpha value and a current compositing and blending operator value that both affect all the drawing operations on this object.\n\nThe value gives an alpha value that is applied to shapes and images before they are composited onto the output bitmap. The value ranges from 0.0 (fully transparent) to 1.0 (no additional transparency). It must initially have the value 1.0.\n\nThe getter steps are to return this's global alpha.\n• None If the given value is either infinite, NaN, or not in the range 0.0 to 1.0, then return.\n• None Otherwise, set this's global alpha to the given value.\n\nThe value controls how shapes and images are drawn onto the output bitmap, once they have had the global alpha and the current transformation matrix applied. Initially, it must be set to \" \".\n\nThe getter steps are to return this's current compositing and blending operator.\n• None If the given value is not identical to any of the values that the <blend-mode> or the <composite-mode> properties are defined to take, then return. [COMPOSITE]\n• None Otherwise, set this's current compositing and blending operator to the given value.\n\nObjects that implement the interface have attributes that control how image smoothing is performed.\n\nThe attribute, on getting, must return the last value it was set to. On setting, it must be set to the new value. When the object implementing the interface is created, the attribute must be set to true.\n\nThe attribute, on getting, must return the last value it was set to. On setting, it must be set to the new value. When the object implementing the interface is created, the attribute must be set to \" \".\n\nAll drawing operations on an object which implements the interface are affected by the four global shadow attributes.\n\nObjects which implement the interface have an associated , which is a CSS color. Initially, it must be transparent black.\n\nThe getter steps are to return the serialization of this's shadow color with HTML-compatible serialization requested.\n• None Let be this's attribute's value, if that is an element; otherwise null.\n• None Let be the result of parsing the given value with if non-null.\n• None If is failure, then return.\n\nThe and attributes specify the distance that the shadow will be offset in the positive horizontal and positive vertical distance respectively. Their values are in coordinate space units. They are not affected by the current transformation matrix.\n\nWhen the context is created, the shadow offset attributes must initially have the value 0.\n\nOn getting, they must return their current value. On setting, the attribute being set must be set to the new value, except if the value is infinite or NaN, in which case the new value must be ignored.\n\nThe attribute specifies the level of the blurring effect. (The units do not map to coordinate space units, and are not affected by the current transformation matrix.)\n\nWhen the context is created, the attribute must initially have the value 0.\n\nOn getting, the attribute must return its current value. On setting, the attribute must be set to the new value, except if the value is negative, infinite or NaN, in which case the new value must be ignored.\n\nShadows are only drawn if the opacity component of the alpha component of the shadow color is nonzero and either the is nonzero, or the is nonzero, or the is nonzero.\n\nWhen shadows are drawn, they must be rendered as follows:\n• None Let be an infinite transparent black bitmap on which the source image for which a shadow is being created has been rendered.\n• None Let be an infinite transparent black bitmap, with a coordinate space and an origin identical to .\n• None Copy the alpha component of to , offset by in the positive direction, and in the positive direction.\n• If is greater than 0:\n• None Let be half the value of .\n• None Perform a 2D Gaussian Blur on , using as the standard deviation. User agents may limit values of to an implementation-specific maximum value to avoid exceeding hardware limitations during the Gaussian blur operation.\n• None Set the red, green, and blue components of every pixel in to the red, green, and blue components (respectively) of the shadow color.\n• None Multiply the alpha component of every pixel in by the alpha component of the shadow color.\n• None The shadow is in the bitmap , and is rendered as part of the drawing model described below.\n\nIf the current compositing and blending operator is \" \", then shadows effectively won't render (since the shape will overwrite the shadow).\n\nAll drawing operations on an object which implements the interface are affected by the global attribute.\n\nSuch objects have an associated , which is a string. Initially the current filter is set to the string \" \". Whenever the value of the current filter is the string \" \" filters will be disabled for the context.\n\nThe getter steps are to return this's current filter.\n• None If the given value is \" \", then set this's current filter to \" \" and return.\n• None Let be the result of parsing the given values as a <filter-value-list>. If any property-independent style sheet syntax like 'inherit' or 'initial' is present, then this parsing must return failure.\n• None If is failure, then return.\n• None Set this's current filter to the given value.\n\nThough will disable filters for the context, , , and are all treated as unparseable inputs and the value of the current filter is left unchanged.\n\nCoordinates used in the value of the current filter are interpreted such that one pixel is equivalent to one SVG user space unit and to one canvas coordinate space unit. Filter coordinates are not affected by the current transformation matrix. The current transformation matrix affects only the input to the filter. Filters are applied in the output bitmap's coordinate space.\n\nWhen the value of the current filter is a string parsable as a <filter-value-list> which defines lengths using percentages or using 'em' or 'ex' units, these must be interpreted relative to the computed value of the 'font-size' property of the font style source object at the time that the attribute is set. If the computed values are undefined for a particular case (e.g. because the font style source object is not an element or is not being rendered), then the relative keywords must be interpreted relative to the default value of the attribute. The 'larger' and 'smaller' keywords are not supported.\n\nIf the value of the current filter is a string parseable as a <filter-value-list> with a reference to an SVG filter in the same document, and this SVG filter changes, then the changed filter is used for the next draw operation.\n\nIf the value of the current filter is a string parseable as a <filter-value-list> with a reference to an SVG filter in an external resource document and that document is not loaded when a drawing operation is invoked, then the drawing operation must proceed with no filtering.\n\nSince drawing is performed using filter value \" \" until an externally-defined filter has finished loading, authors might wish to determine whether such a filter has finished loading before proceeding with a drawing operation. One way to accomplish this is to load the externally-defined filter elsewhere within the same page in some element that sends a event (for example, an SVG element), and wait for the event to be dispatched.\n\nWhen a shape or image is painted, user agents must follow these steps, in the order given (or act as if they do):\n• None Render the shape or image onto an infinite transparent black bitmap, creating image , as described in the previous sections. For shapes, the current fill, stroke, and line styles must be honored, and the stroke must itself also be subjected to the current transformation matrix.\n• None Multiply the alpha component of every pixel in by .\n• When the current filter is set to a value other than \" \" and all the externally-defined filters it references, if any, are in documents that are currently loaded, then use image as the input to the current filter, creating image . If the current filter is a string parseable as a <filter-value-list>, then draw using the current filter in the same manner as SVG. Otherwise, let be an alias for .\n• None When shadows are drawn, render the shadow from image , using the current shadow styles, creating image .\n• None When shadows are drawn, composite within the clipping region over the current output bitmap using the current compositing and blending operator.\n• None Composite within the clipping region over the current output bitmap using the current compositing and blending operator.\n\nWhen compositing onto the output bitmap, pixels that would fall outside of the output bitmap must be discarded.\n\nWhen a canvas is interactive, authors should include focusable elements in the element's fallback content corresponding to each focusable part of the canvas, as in the example above.\n\nWhen rendering focus rings, to ensure that focus rings have the appearance of native focus rings, authors should use the method, passing it the element for which a ring is being drawn. This method only draws the focus ring if the element is focused, so that it can simply be called whenever drawing the element, without checking whether the element is focused or not first.\n\nAuthors should avoid implementing text editing controls using the element. Doing so has a large number of disadvantages:\n• Mouse placement of the caret has to be reimplemented.\n• Keyboard movement of the caret has to be reimplemented (possibly across lines, for multiline text input).\n• Scrolling of the text control has to be implemented (horizontally for long lines, vertically for multiline input).\n• Native features such as copy-and-paste have to be reimplemented.\n• Native features such as spell-checking have to be reimplemented.\n• Native features such as drag-and-drop have to be reimplemented.\n• Native features such as page-wide text search have to be reimplemented.\n• Native features specific to the user, for example custom text services, have to be reimplemented. This is close to impossible since each user might have different services installed, and there is an unbounded set of possible such services.\n• Bidirectional text editing has to be reimplemented.\n• For multiline text editing, line wrapping has to be implemented for all relevant languages.\n• Text selection has to be reimplemented.\n• Dragging of bidirectional text selections has to be reimplemented.\n• Platform-native keyboard shortcuts have to be reimplemented.\n• Platform-native input method editors (IMEs) have to be reimplemented.\n• Undo and redo functionality has to be reimplemented.\n• Accessibility features such as magnification following the caret or selection have to be reimplemented.\n\nThis is a huge amount of work, and authors are most strongly encouraged to avoid doing any of it by instead using the element, the element, or the attribute.\n\nis a performance-oriented interface that provides a low overhead method for displaying the contents of objects. It uses transfer semantics to reduce overall memory consumption. It also streamlines performance by avoiding intermediate compositing, unlike the method of .\n\nUsing an element as an intermediate for getting an image resource into a canvas, for example, would result in two copies of the decoded image existing in memory at the same time: the element's copy, and the one in the canvas's backing store. This memory cost can be prohibitive when dealing with extremely large images. This can be avoided by using .\n\nThe attribute must return the value it was initialized to when the object was created.\n\nAn object has an , which is a reference to bitmap data.\n\nAn object has a , which can be set to or . A value of valid indicates that the context's output bitmap refers to bitmap data that was acquired via . A value blank indicates that the context's output bitmap is a default transparent bitmap.\n\nAn object also has an flag, which can be set to true or false. When an object has its alpha flag set to false, the contents of the element to which the context is bound are obtained by compositing the context's output bitmap onto an opaque black bitmap of the same size using the source-over compositing operator. If the alpha flag is set to true, then the output bitmap is used as the contents of the element to which the context is bound. [COMPOSITE]\n\nThe step of compositing over an opaque black bitmap ought to be elided whenever equivalent results can be obtained more efficiently by other means.\n\nWhen a user agent is required to , with a argument that is an object and an optional argument that refers to bitmap data, it must run these steps:\n• None If a argument was not provided, then:\n• None Let be the element to which is bound.\n• None Set 's output bitmap to be transparent black with a natural width equal to the numeric value of 's attribute and a natural height equal to the numeric value of 's attribute, those values being interpreted in CSS pixels.\n• None If a argument was provided, then:\n• Set 's output bitmap to refer to the same underlying bitmap data as , without making a copy. The origin-clean flag of is included in the bitmap data to be referenced by 's output bitmap.\n\nThe , which is passed a and , consists of running these steps:\n• None Let be the result of converting to the dictionary type . (This can throw an exception.)\n• None Let be a new object.\n• None Set 's output bitmap to the same bitmap as 's bitmap (so that they are shared).\n• None Run the steps to set an 's output bitmap with .\n• Process each of the members of as follows: If false, then set 's alpha flag to false.\n\nThe method, when invoked, must run these steps:\n• None Let be the object on which the method was called.\n• None If is null, then run the steps to set an ImageBitmapRenderingContext's output bitmap, with as the argument and no argument, then return.\n• None If the value of 's [[Detached]] internal slot is set to true, then throw an \" \" .\n• None Run the steps to set an 's output bitmap, with the argument equal to , and the argument referring to 's underlying bitmap data.\n• None Set the value of 's [[Detached]] internal slot to true.\n\nis an , so both and WebGL can fire events at it. can fire and , and WebGL can fire and . [WEBGL]\n\nobjects are used to create rendering contexts, much like an , but with no connection to the DOM. This makes it possible to use canvas rendering contexts in workers.\n\nAn object may hold a weak reference to a , which is typically in the DOM, whose embedded content is provided by the object. The bitmap of the object is pushed to the placeholder element as part of the 's relevant agent's event loop's steps.\n\nAn object has an internal that is initialized when the object is created. The width and height of the bitmap are equal to the values of the and attributes of the object. Initially, all the bitmap's pixels are transparent black.\n\nAn object has an internal and set when the is created.\n\nAn object can have a rendering context bound to it. Initially, it does not have a bound rendering context. To keep track of whether it has a rendering context or not, and what kind of rendering context it is, an object also has a , which is initially but can be changed to either , , , , , or by algorithms defined in this specification.\n• None Initialize the bitmap of this to a rectangular array of transparent black pixels of the dimensions specified by and .\n• None Initialize the of this to .\n• None Initialize the of this to .\n• None Let be the relevant global object of this.\n• \n• None Let be the document element of 's associated .\n• If is not null:\n• None Set the inherited language of this to 's language.\n• None Set the inherited direction of this to 's directionality.\n\nobjects are transferable. Their transfer steps, given and , are as follows:\n• None If 's context mode is not equal to none, then throw an \" \" .\n• None Let and be the dimensions of 's bitmap.\n• None Let and be the values of 's inherited language and inherited direction.\n• None Set .[[Width]] to and .[[Height]] to .\n• None Set .[[Language]] to and .[[Direction]] to .\n• None Set .[[PlaceholderCanvas]] to be a weak reference to 's placeholder element, if has one, or null if it does not.\n\nTheir transfer-receiving steps, given and , are:\n• None Initialize 's bitmap to a rectangular array of transparent black pixels with width given by .[[Width]] and height given by .[[Height]].\n• None Set 's inherited language to .[[Language]] and inherited direction to .[[Direction]].\n• None If .[[PlaceholderCanvas]] is not null, set 's placeholder element to .[[PlaceholderCanvas]] (while maintaining the weak reference semantics).\n\nThe method of an object, when invoked, must run these steps:\n• None If is not an object, then set to null.\n• None Set to the result of converting to a JavaScript value.\n• Run the steps in the cell of the following table whose column header matches this object's context mode and whose row header matches :\n• None Let be the result of running the offscreen 2D context creation algorithm given this and . Return the same object as was returned the last time the method was invoked with this same first argument.\n• None Let be the result of running the creation algorithm given this and . Return the same object as was returned the last time the method was invoked with this same first argument.\n• None Let be the result of following the instructions given in the WebGL specifications' Context Creation sections. [WEBGL]\n• None If is null, then return null; otherwise set this's context mode to webgl or webgl2. Return the same value as was returned the last time the method was invoked with this same first argument.\n• None Let be the result of following the instructions given in 's Canvas Rendering section. [WEBGPU]\n• None If is null, then return null; otherwise set this's context mode to webgpu. Return the same value as was returned the last time the method was invoked with this same first argument.\n\nIf either the or attributes of an object are set (to a new value or to the same value as before) and the object's context mode is 2d, then reset the rendering context to its default state and resize the object's bitmap to the new values of the and attributes.\n\nThe resizing behavior for \" \" and \" \" contexts is defined in the WebGL specifications. [WEBGL]\n\nThe resizing behavior for \" \" context is defined in . [WEBGPU]\n\nIf an object whose dimensions were changed has a placeholder element, then the placeholder element's natural size will only be updated during the 's relevant agent's event loop's steps.\n• None If the value of this's [[Detached]] internal slot is true, then return a promise rejected with an \" \" .\n• None If this's context mode is 2d and the rendering context's output bitmap's origin-clean flag is set to false, then return a promise rejected with a \" \" .\n• None If this's bitmap has no pixels (i.e., either its horizontal dimension or its vertical dimension is zero), then return a promise rejected with an \" \" .\n• None Let be a copy of this's bitmap.\n• None Let be a new promise object.\n• \n• None Let be a serialization of as a file, with 's and if present.\n• Queue a global task on the canvas blob serialization task source given to run these steps:\n• None If is null, then reject with an \" \" .\n• None Otherwise, resolve with a new object, created in 's relevant realm, representing . [FILEAPI]\n\nThe method, when invoked, must run the following steps:\n• None If the value of this object's [[Detached]] internal slot is set to true, then throw an \" \" .\n• None If this object's context mode is set to none, then throw an \" \" .\n• None Let be a newly created object that references the same underlying bitmap data as this object's bitmap.\n• Set this object's bitmap to reference a newly created bitmap of the same dimensions and color space as the previous bitmap, and with its pixels initialized to transparent black, or opaque black if the rendering context's alpha is false. This means that if the rendering context of this is a , the value of will have no effect. [WEBGL]\n\nThe following are the event handlers (and their corresponding event handler event types) that must be supported, as event handler IDL attributes, by all objects implementing the interface:\n\nThe object is a rendering context for drawing to the bitmap of an object. It is similar to the object, with the following differences:\n• None there is no support for user interface features;\n• None its attribute refers to an object rather than a element;\n\nAn object has an , which is the object from which the object was created.\n\nThe , which is passed a (an object) and optionally some arguments, consists of running the following steps:\n• None If the algorithm was passed some arguments, let be the first such argument. Otherwise, let be undefined.\n• None Let be the result of converting to the dictionary type . (This can throw an exception.).\n• None Let be a new object.\n• None Run the canvas settings output bitmap initialization algorithm, given and .\n• None Set 's output bitmap to a newly created bitmap with the dimensions specified by the and attributes of , and set 's bitmap to the same bitmap (so that they are shared).\n• None If 's alpha flag is set to true, initialize all the pixels of 's output bitmap to transparent black. Otherwise, initialize the pixels to opaque black.\n\nImplementations are encouraged to short-circuit the graphics update steps of the window event loop for the purposes of updating the contents of a placeholder element to the display. This could mean, for example, that the bitmap contents are copied directly to a graphics buffer that is mapped to the physical display location of the placeholder element. This or similar short-circuiting approaches can significantly reduce display latency, especially in cases where the is updated from a worker event loop and the window event loop of the placeholder element is busy. However, such shortcuts cannot have any script-observable side-effects. This means that the committed bitmap still needs to be sent to the placeholder element, in case the element is used as a , as an , or in case or are called on it.\n\nThe attribute, on getting, must return this 's associated object.\n\nThe APIs provide mechanisms for specifying the color space of the canvas's backing store. The default backing store color space for all canvas APIs is 'srgb'.\n\nColor space conversion must be applied to the canvas's backing store when rendering the canvas to the output device. This color space conversion must be identical to the color space conversion that would be applied to an element with a color profile that specifies the same color space as the canvas's backing store.\n\nWhen drawing content to a 2D context, all inputs must be converted to the context's color space before drawing. Interpolation of gradient color stops must be performed on color values after conversion to the context's color space. Alpha blending must be performed on values after conversion to the context's color space.\n\nThere do not exist any inputs to a 2D context for which the color space is undefined. The color space for CSS colors is defined in . The color space for images that specify no color profile information is assumed to be 'srgb', as specified in the Color Spaces of Untagged Colors section of . [CSSCOLOR]\n\nWhen a user agent is to create a serialization of the bitmap as a file , given a and an optional , it must create an image file in the format given by . If an error occurs during the creation of the image file (e.g. an internal encoder error), then the result of the serialization is null. [PNG]\n\nThe image file's pixel data must be the bitmap's pixel data scaled to one image pixel per coordinate space unit, and if the file format used supports encoding resolution metadata, the resolution must be given as 96dpi (one image pixel per CSS pixel).\n\nIf is supplied, then it must be interpreted as a MIME type giving the format to use. If the type has any parameters, then it must be treated as not supported.\n\nFor example, the value \" \" would mean to generate a PNG image, the value \" \" would mean to generate a JPEG image, and the value \" \" would mean to generate an SVG image (which would require that the user agent track how the bitmap was generated, an unlikely, though potentially awesome, feature).\n\nUser agents must support PNG (\" \"). User agents may support other types. If the user agent does not support the requested type, then it must create the file using the PNG format. [PNG]\n\nUser agents must convert the provided type to ASCII lowercase before establishing if they support that type.\n\nFor image types that do not support an alpha component, the serialized image must be the bitmap image composited onto an opaque black background using the source-over compositing operator.\n\nFor image types that support color profiles, the serialized image must include a color profile indicating the color space of the underlying bitmap. For image types that do not support color profiles, the serialized image must be converted to the 'srgb' color space using 'relative-colorimetric' rendering intent.\n\nThus, in the 2D context, calling the method to render the output of the or method to the canvas, given the appropriate dimensions, has no visible effect beyond, at most, clipping colors of the canvas to a more narrow gamut.\n\nFor image types that support multiple bit depths, the serialized image must use the bit depth that best preserves content of the underlying bitmap.\n\nFor example, when serializing a 2D context that has color type of float16 to \" \", the resulting image would have 16 bits per sample. This serialization will still lose significant detail (all values less than 0.5/65535 would be clamped to 0, and all values greater than 1 would be clamped to 1).\n\nIf is an image format that supports variable quality (such as \" \"), is given, and is not \" \", then, if is a Number in the range 0.0 to 1.0 inclusive, the user agent must treat as the desired quality level. Otherwise, the user agent must use its default quality value, as if the argument had not been given.\n\nThe use of type-testing here, instead of simply declaring as a Web IDL , is a historical artifact.\n\nDifferent implementations can have slightly different interpretations of \"quality\". When the quality is not specified, an implementation-specific default is used that represents a reasonable compromise between compression ratio, image quality, and encoding time.\n\nInformation leakage can occur if scripts from one origin can access information (e.g. read pixels) from images from another origin (one that isn't the same).\n\nTo mitigate this, bitmaps used with elements, objects, and objects are defined to have a flag indicating whether they are origin-clean. All bitmaps start with their origin-clean set to true. The flag is set to false when cross-origin images are used.\n\nThe , , and methods check the flag and will throw a \" \" rather than leak cross-origin data.\n\nThe value of the origin-clean flag is propagated from a source's bitmap to a new object by . Conversely, a destination element's bitmap will have its origin-clean flags set to false by if the source image is an object whose bitmap has its origin-clean flag set to false.\n\nThe flag can be reset in certain situations; for example, when changing the value of the or the content attribute of the element to which a is bound, the bitmap is cleared and its origin-clean flag is reset.\n\nWhen using an , the value of the origin-clean flag is propagated from objects when they are transferred to the via transferFromImageBitmap().\n\nrefers to one way of representing transparency in an image, the other being non-premultiplied alpha.\n\nUnder non-premultiplied alpha, the red, green, and blue components of a pixel represent that pixel's color, and its alpha component represents that pixel's opacity.\n\nUnder premultiplied alpha, however, the red, green, and blue components of a pixel represent the amounts of color that the pixel adds to the image, and its alpha component represents the amount that the pixel obscures whatever is behind it.\n\nConverting a color value from a non-premultiplied representation to a premultiplied one involves multiplying the color's red, green, and blue components by its alpha component (remapping the range of the alpha component such that \"fully transparent\" is 0, and \"fully opaque\" is 1).\n\nConverting a color value from a premultiplied representation to a non-premultiplied one involves the inverse: dividing the color's red, green, and blue components by its alpha component.\n\nAs certain colors can only be represented under premultiplied alpha (for instance, additive colors), and others can only be represented under non-premultiplied alpha (for instance, \"invisible\" colors which hold certain red, green, and blue values even with no opacity); and division and multiplication using finite precision entails a loss of accuracy, converting between premultiplied and non-premultiplied alpha is a lossy operation on colors that are not fully opaque.\n\nA 's output bitmap and an 's output bitmap must use premultiplied alpha to represent transparent colors.\n\nIt is important for canvas bitmaps to represent colors using premultiplied alpha because it affects the range of representable colors. While additive colors cannot currently be drawn onto canvases directly because CSS colors are non-premultiplied and cannot represent them, it is still possible to, for instance, draw additive colors onto a WebGL canvas and then draw that WebGL canvas onto a 2D canvas via .\n\nCustom elements provide a way for authors to build their own fully-featured DOM elements. Although authors could always use non-standard elements in their documents, with application-specific behavior added after the fact by scripting or similar, such elements have historically been non-conforming and not very functional. By defining a custom element, authors can inform the parser how to properly construct an element and how elements of that class should react to changes.\n\nCustom elements are part of a larger effort to \"rationalise the platform\", by explaining existing platform features (like the elements of HTML) in terms of lower-level author-exposed extensibility points (like custom element definition). Although today there are many limitations on the capabilities of custom elements—both functionally and semantically—that prevent them from fully explaining the behaviors of HTML's existing elements, we hope to shrink this gap over time.\n\nFor the purposes of illustrating how to create an autonomous custom element, let's define a custom element that encapsulates rendering a small icon for a country flag. Our goal is to be able to use it like so:\n\nTo do this, we first declare a class for the custom element, extending :\n\nWe then need to use this class to define the element:\n\nAt this point, our above code will work! The parser, whenever it sees the tag, will construct a new instance of our class, and tell our code about its new attribute, which we then use to set the element's internal state and update its rendering (when appropriate).\n\nYou can also create elements using the DOM API:\n\nFinally, we can also use the custom element constructor itself. That is, the above code is equivalent to:\n\nAdding a static property, with a true value, makes an autonomous custom element a form-associated custom element. The interface helps you to implement functions and properties common to form control elements.\n\nYou can use the custom element like a built-in form-associated element. For example, putting it in or associates the element with them, and submitting the will send data provided by implementation.\n\nBy using the appropriate properties of , your custom element can have default accessibility semantics. The following code expands our form-associated checkbox from the previous section to properly set its default role and checkedness, as viewed by accessibility technology:\n\nNote that, like for built-in elements, these are only defaults, and can be overridden by the page author using the and attributes:\n\nCustom element authors are encouraged to state what aspects of their accessibility semantics are strong native semantics, i.e., should not be overridden by users of the custom element. In our example, the author of the element would state that its role and values are strong native semantics, thus discouraging code such as the above.\n\nCustomized built-in elements are a distinct kind of custom element, which are defined slightly differently and used very differently compared to autonomous custom elements. They exist to allow reuse of behaviors from the existing elements of HTML, by extending those elements with new custom functionality. This is important since many of the existing behaviors of HTML elements can unfortunately not be duplicated by using purely autonomous custom elements. Instead, customized built-in elements allow the installation of custom construction behavior, lifecycle hooks, and prototype chain onto existing elements, essentially \"mixing in\" these capabilities on top of the already-existing element.\n\nCustomized built-in elements require a distinct syntax from autonomous custom elements because user agents and other software key off an element's local name in order to identify the element's semantics and behavior. That is, the concept of customized built-in elements building on top of existing behavior depends crucially on the extended elements retaining their original local name.\n\nIn this example, we'll be creating a customized built-in element named , which behaves like a normal button but gets fancy animation effects added whenever you click on it. We start by defining a class, just like before, although this time we extend instead of :\n\nWhen defining our custom element, we have to also specify the option:\n\nIn general, the name of the element being extended cannot be determined simply by looking at what element interface it extends, as many elements share the same interface (such as and both sharing ).\n\nTo construct our customized built-in element from parsed HTML source text, we use the attribute on a element:\n\nTrying to use a customized built-in element as an autonomous custom element will not work; that is, will simply create an with no special behavior.\n\nIf you need to create a customized built-in element programmatically, you can use the following form of :\n\nAnd as before, the constructor will also work:\n\nNote that when creating a customized built-in element programmatically, the attribute will not be present in the DOM, since it was not explicitly set. However, it will be added to the output when serializing:\n\nRegardless of how it is created, all of the ways in which is special apply to such \"plastic buttons\" as well: their focus behavior, ability to participate in form submission, the attribute, and so on.\n\nCustomized built-in elements are designed to allow extension of existing HTML elements that have useful user-agent supplied behavior or APIs. As such, they can only extend existing HTML elements defined in this specification, and cannot extend legacy elements such as , , , , , , or that have been defined to use as their element interface.\n\nOne reason for this requirement is future-compatibility: if a customized built-in element was defined that extended a currently-unknown element, for example , this would prevent this specification from defining a element in the future, as consumers of the derived customized built-in element would have come to depend on their base element having no interesting user-agent-supplied behavior.\n\nAs specified below, and alluded to above, simply defining and using an element called does not mean that such elements represent buttons. That is, tools such as web browsers, search engines, or accessibility technology will not automatically treat the resulting element as a button just based on its defined name.\n\nTo convey the desired button semantics to a variety of users, while still using an autonomous custom element, a number of techniques would need to be employed:\n• None The addition of the attribute would make the focusable. Note that if the were to become logically disabled, the attribute would need to be removed.\n• None The addition of an ARIA role and various ARIA states and properties helps convey semantics to accessibility technology. For example, setting the role to \" \" will convey the semantics that this is a button, enabling users to successfully interact with the control using usual button-like interactions in their accessibility technology. Setting the property is necessary to give the button an accessible name, instead of having accessibility technology traverse its child text nodes and announce them. And setting the state to \" \" when the button is logically disabled conveys to accessibility technology the button's disabled state.\n• None The addition of event handlers to handle commonly-expected button behaviors helps convey the semantics of the button to web browser users. In this case, the most relevant event handler would be one that proxies appropriate events to become events, so that you can activate the button both with keyboard and by clicking.\n• None In addition to any default visual styling provided for elements, the visual styling will also need to be updated to reflect changes in logical state, such as becoming disabled; that is, whatever style sheet has rules for will also need to have rules for .\n\nWith these points in mind, a full-featured that took on the responsibility of conveying button semantics (including the ability to be disabled) might look something like this:\n\nEven with this rather-complicated element definition, the element is not a pleasure to use for consumers: it will be continually \"sprouting\" attributes of its own volition, and its choice of focusability behavior may not match the behavior on the current platform. This is because as of now there is no way to specify default focus behavior for custom elements, forcing the use of the attribute to do so (even though it is usually reserved for allowing the consumer to override default behavior).\n\nIn contrast, a simple customized built-in element, as shown in the previous section, would automatically inherit the semantics and behavior of the element, with no need to implement these behaviors manually. In general, for any elements with nontrivial behavior and semantics that build on top of existing elements of HTML, customized built-in elements will be easier to develop, maintain, and consume.\n\nBecause element definition can occur at any time, a non-custom element could be created, and then later become a custom element after an appropriate definition is registered. We call this process \"upgrading\" the element, from a normal element into a custom element.\n\nUpgrades enable scenarios where it may be preferable for custom element definitions to be registered after relevant elements have been initially created, such as by the parser. They allow progressive enhancement of the content in the custom element. For example, in the following HTML document the element definition for is loaded asynchronously:\n\nThe definition for the element here is loaded using a element marked with the attribute, placed after the tag in the markup. While the script is loading, the element will be treated as an undefined element, similar to a . Once the script loads, it will define the element, and the existing element on the page will be upgraded, applying the custom element's definition (which presumably includes applying an image filter identified by the string \"Kelvin\", enhancing the image's visual appearance).\n\nNote that upgrades only apply to elements in the document tree. (Formally, elements that are connected.) An element that is not inserted into a document will stay un-upgraded. An example illustrates this point:\n\nBuilt-in elements provided by user agents have certain states that can change over time depending on user interaction and other factors, and are exposed to web authors through pseudo-classes. For example, some form controls have the \"invalid\" state, which is exposed through the pseudo-class.\n\nLike built-in elements, custom elements can have various states to be in too, and custom element authors want to expose these states in a similar fashion as the built-in elements.\n\nThis is done via the pseudo-class. A custom element author can use the property of to add and remove such custom states, which are then exposed as arguments to the pseudo-class.\n\nWhen authoring custom element constructors, authors are bound by the following conformance requirements:\n• None A parameter-less call to must be the first statement in the constructor body, to establish the correct prototype chain and this value before any further code is run.\n• None A statement must not appear anywhere inside the constructor body, unless it is a simple early-return ( or ).\n• None The constructor must not use the or methods.\n• None The element's attributes and children must not be inspected, as in the non-upgrade case none will be present, and relying on upgrades makes the element less usable.\n• None The element must not gain any attributes or children, as this violates the expectations of consumers who use the or methods.\n• None In general, work should be deferred to as much as possible—especially work involving fetching resources or rendering. However, note that can be called more than once, so any initialization work that is truly one-time will need a guard to prevent it from running twice.\n• None In general, the constructor should be used to set up initial state and default values, and to set up event listeners and possibly a shadow root.\n\nSeveral of these requirements are checked during element creation, either directly or indirectly, and failing to follow them will result in a custom element that cannot be instantiated by the parser or DOM APIs. This is true even if the work is done inside a constructor-initiated microtask, as a microtask checkpoint can occur immediately after construction.\n\nWhen authoring custom element reactions, authors should avoid manipulating the node tree as this can lead to unexpected results.\n\nWhen manipulating the DOM tree, an element can be moved in the tree while connected. This applies to custom elements as well. By default, the \" \" and \" \" would be called on the element, one after the other. This is done to maintain compatibility with existing custom elements that predate the method. This means that by default, custom elements reset their state as if they were removed and re-inserted. In the example above, the impact would be that the observer would be disconnected and re-connected, and the tab index would be reset.\n\nTo opt in to a state-preserving behavior while moving, the author can implement a \" \". The existence of this callback, even if empty, would supercede the default behavior of calling \" \" and \" \". \" \" can also be an appropriate place to execute logic that depends on the element's ancestors. For example:\n\nA is an element that is custom. Informally, this means that its constructor and prototype are defined by the author, instead of by the user agent. This author-supplied constructor function is called the .\n\nTwo distinct types of custom elements can be defined:\n• None An , which is defined with no option. These types of custom elements have a local name equal to their defined name.\n• None A , which is defined with an option. These types of custom elements have a local name equal to the value passed in their option, and their defined name is used as the value of the attribute, which therefore must be a valid custom element name.\n\nAfter a custom element is created, changing the value of the attribute does not change the element's behavior, as it is saved on the element as its value.\n\nAutonomous custom elements have the following element definition:\n\nAn autonomous custom element does not have any special meaning: it represents its children. A customized built-in element inherits the semantics of the element that it extends.\n\nAny namespace-less attribute that is relevant to the element's functioning, as determined by the element's author, may be specified on an autonomous custom element, so long as the attribute name is XML-compatible and contains no ASCII upper alphas. The exception is the attribute, which must not be specified on an autonomous custom element (and which will have no effect if it is).\n\nCustomized built-in elements follow the normal requirements for attributes, based on the elements they extend. To add custom attribute-based behavior, use attributes.\n\nAn autonomous custom element is called a if the element is associated with a custom element definition whose form-associated field is set to true.\n\nThe attribute represents the form-associated custom element's name. The attribute is used to make the form-associated custom element non-interactive and to prevent its submission value from being submitted. The attribute is used to explicitly associate the form-associated custom element with its form owner.\n\nThe attribute of form-associated custom elements specifies that the element is barred from constraint validation. User agents don't provide any other behavior for the attribute, but custom element authors should, where possible, use its presence to make their control non-editable in some appropriate fashion, similar to the behavior for the readonly attribute on built-in form controls.\n\nConstraint validation: If the attribute is specified on a form-associated custom element, the element is barred from constraint validation.\n\nThe reset algorithm for form-associated custom elements is to enqueue a custom element callback reaction with the element, callback name \" \", and « ».\n\nA is a sequence of characters that meets all of the following requirements:\n• This uses the EBNF notation from the specification. [XML]\n• must not be any of the following: The list of names above is the summary of all hyphen-containing element names from the applicable specifications, namely and . [SVG] [MATHML]\n\nTo , given a , , , and , perform the following steps. They will return either a custom element definition or null:\n• None If is not the HTML namespace, then return null.\n• None If 's browsing context is null, then return null.\n• None If 's custom element definition set contains an item with name and local name both equal to , then return that item.\n• None If 's custom element definition set contains an item with name equal to and local name equal to , then return that item.\n\nEach object has an associated (a object). It is set to a new object when the object is created.\n\nCustom element registries are associated with objects, instead of objects, since each custom element constructor inherits from the interface, and there is exactly one interface per object.\n\nThe attribute of the interface must return the object for that object.\n\nEvery has a , a set of custom element definitions, initially « ». Lookup of items in this set uses their name, local name, or constructor.\n\nEvery also has an boolean which is used to prevent reentrant invocations of element definition. It is initially false.\n\nEvery also has a , a map of valid custom element names to promises. It is used to implement the method.\n\nis a process of adding a custom element definition to the . This is accomplished by the method. The method steps are:\n• None If IsConstructor( ) is false, then throw a .\n• None If is not a valid custom element name, then throw a \" \" .\n• None If this's custom element definition set contains an item with name , then throw a \" \" .\n• None If this's custom element definition set contains an item with constructor , then throw a \" \" .\n• None Let be [\" \"] if it exists; otherwise null.\n• If is not null:\n• None If is a valid custom element name, then throw a \" \" .\n• None If the element interface for and the HTML namespace is (e.g., if does not indicate an element definition in this specification), then throw a \" \" .\n• None If this's element definition is running is true, then throw a \" \" .\n• None Let be an empty .\n• Run the following steps while catching any exceptions:\n• None Let be ? Get( , \"prototype\").\n• None If is not an Object, then throw a exception.\n• None Let be the ordered map «[ \" \" → null, \" \" → null, \" \" → null, \" \" → null, \" \" → null ]».\n• For each of the keys of :\n• None Let be ? Get( , ).\n• None If is not undefined, then set [ ] to the result of converting to the Web IDL callback type.\n• If [\" \"] is not null:\n• None Let be ? Get( , \"observedAttributes\").\n• None If is not undefined, then set to the result of converting to a . Rethrow any exceptions from the conversion.\n• None Let be an empty .\n• None Let be ? Get( , \"disabledFeatures\").\n• None If is not undefined, then set to the result of converting to a . Rethrow any exceptions from the conversion.\n• None If contains \" \", then set to true.\n• None If contains \" \", then set to true.\n• None Let be ? Get( , \"formAssociated\").\n• None Set to the result of converting to a .\n• If is true, then for each of « \" \", \" \", \" \", \" \" »:\n• None Let be ? Get( , ).\n• None If is not undefined, then set [ ] to the result of converting to the Web IDL callback type. Then, regardless of whether the above steps threw an exception or not: set this's element definition is running to false. Finally, if the steps threw an exception, rethrow that exception.\n• None Let be a new custom element definition with name , local name , constructor , observed attributes , lifecycle callbacks , form-associated , disable internals , and disable shadow .\n• None Let be this's relevant global object's associated .\n• None Let be all elements that are shadow-including descendants of , whose namespace is the HTML namespace and whose local name is , in shadow-including tree order. Additionally, if is non-null, only include elements whose value is equal to .\n• None For each element of , enqueue a custom element upgrade reaction given and .\n• None If this's custom element definition set contains an item with name , then return that item's constructor.\n• None If this's custom element definition set contains an item with constructor , then return that item's name.\n• None If is not a valid custom element name, then return a promise rejected with a \" \" .\n• None If this's custom element definition set contains an item with name , then return a promise resolved with that item's constructor.\n• None If this's when-defined promise map[ ] does not exist, then set this's when-defined promise map[ ] to a new promise.\n\nWhen invoked, the method must run these steps:\n• None Let be a list of all of 's shadow-including inclusive descendant elements, in shadow-including tree order.\n• None For each of , try to upgrade .\n\nTo , given as input a custom element definition and an element , run the following steps:\n• If 's custom element state is not \" \" or \" \", then return. One scenario where this can occur due to reentrant invocation of this algorithm, as in the following example: // Defining enqueues upgrade reactions for both \"a\" and \"b\" customElements define HTMLElement constructor b document querySelector b remove // While this constructor is running for \"a\", \"b\" is still // undefined, and so inserting it into the document will enqueue a // second upgrade reaction for \"b\" in addition to the one enqueued document body appendChild b This step will thus bail out the algorithm early when upgrade an element is invoked with \" \" a second time.\n• It will be set to \" \" after the upgrade succeeds. For now, we set it to \" \" so that any reentrant invocations will hit the above early-exit step.\n• None For each in 's attribute list, in order, enqueue a custom element callback reaction with , callback name \" \", and « 's local name, null, 's value, 's namespace ».\n• None If is connected, then enqueue a custom element callback reaction with , callback name \" \", and « ».\n• None Add to the end of 's construction stack.\n• Run the following substeps while catching any exceptions:\n• If 's disable shadow is true and 's shadow root is non-null, then throw a \" \" . This is needed as does not use look up a custom element definition while does.\n• Let be the result of constructing , with no arguments. If non-conformantly uses an API decorated with the extended attribute, then the reactions enqueued at the beginning of this algorithm will execute during this step, before finishes and control returns to this algorithm. Otherwise, they will execute after and the rest of the upgrade process finishes.\n• If SameValue( , ) is false, then throw a . This can occur if constructs another instance of the same custom element before calling , or if uses JavaScript's -override feature to return an arbitrary object from the constructor. Then, perform the following substep, regardless of whether the above steps threw an exception or not:\n• Remove the last entry from the end of 's construction stack. Assuming calls (as it will if it is conformant), and that the call succeeds, this will be the already constructed marker that replaced the we pushed at the beginning of this algorithm. (The HTML element constructor carries out this replacement.) If does not call (i.e. it is not conformant), or if any step in the HTML element constructor throws, then this entry will still be . Finally, if the above steps threw an exception, then:\n• None Rethrow the exception (thus terminating this algorithm). If the above steps threw an exception, then 's custom element state will remain \" \" or \" \".\n• If is a form-associated custom element, then:\n• None Reset the form owner of . If is associated with a element, then enqueue a custom element callback reaction with , callback name \" \", and « the associated ».\n• None If is disabled, then enqueue a custom element callback reaction with , callback name \" \" and « true ».\n\nTo try to upgrade an element , given as input an element , run the following steps:\n• None Let be the result of looking up a custom element definition given 's node document, 's namespace, 's local name, and 's value.\n• None If is not null, then enqueue a custom element upgrade reaction given and .\n\nA custom element possesses the ability to respond to certain occurrences by running author code:\n• None When upgraded, its constructor is run, with no arguments.\n• None When it becomes connected, its is called, with no arguments.\n• None When it becomes disconnected, its is called, with no arguments.\n• None When it is moved, its is called, with no arguments.\n• None When it is adopted into a new document, its is called, given the old document and new document as arguments.\n• None When any of its attributes are changed, appended, removed, or replaced, its is called, given the attribute's local name, old value, new value, and namespace as arguments. (An attribute's old or new value is considered to be null when the attribute is added or removed, respectively.)\n• None When the user agent resets the form owner of a form-associated custom element and doing so changes the form owner, its is called, given the new form owner (or null if no owner) as an argument.\n• None When the form owner of a form-associated custom element is reset, its is called.\n• None When the disabled state of a form-associated custom element is changed, its is called, given the new state as an argument.\n• None When user agent updates a form-associated custom element's value on behalf of a user or as part of navigation, its is called, given the new state and a string indicating a reason, \" \" or \" \", as arguments.\n\nThe way in which custom element reactions are invoked is done with special care, to avoid running author code during the middle of delicate operations. Effectively, they are delayed until \"just before returning to user script\". This means that for most purposes they appear to execute synchronously, but in the case of complicated composite operations (like cloning, or range manipulation), they will instead be delayed until after all the relevant user agent processing steps have completed, and then run together as a batch.\n\nAdditionally, the precise ordering of these reactions is managed via a somewhat-complicated stack-of-queues system, described below. The intention behind this system is to guarantee that custom element reactions always are invoked in the same order as their triggering actions, at least within the local context of a single custom element. (Because custom element reaction code can perform its own mutations, it is not possible to give a global ordering guarantee across multiple elements.)\n\nEach similar-origin window agent has a , which is initially empty. A similar-origin window agent's is the element queue at the top of its custom element reactions stack. Each item in the stack is an , which is initially empty as well. Each item in an element queue is an element. (The elements are not necessarily custom yet, since this queue is used for upgrades as well.)\n\nEach custom element reactions stack has an associated , which is an initially-empty element queue. Elements are pushed onto the backup element queue during operations that affect the DOM without going through an API decorated with , or through the parser's create an element for the token algorithm. An example of this is a user-initiated editing operation which modifies the descendants or attributes of an editable element. To prevent reentrancy when processing the backup element queue, each custom element reactions stack also has a flag, initially unset.\n\nAll elements have an associated , initially empty. Each item in the custom element reaction queue is of one of two types:\n• None An , which will upgrade the custom element and contains a custom element definition; or\n• None A , which will call a lifecycle callback, and contains a callback function as well as a list of arguments.\n\nThis is all summarized in the following schematic diagram:\n\nTo enqueue an element on the appropriate element queue , given an element , run the following steps:\n• If is empty, then:\n• None If 's processing the backup element queue flag is set, then return.\n• Queue a microtask to perform the following steps:\n\nTo , given a custom element , a callback name , and a list of arguments , run the following steps:\n• None Let be the value of the entry in 's lifecycle callbacks with key .\n• If is \" \" and is null:\n• None Let be the value of the entry in 's lifecycle callbacks with key \" \".\n• None Let be the value of the entry in 's lifecycle callbacks with key \" \".\n• None If and are null, then return.\n• Set to the following steps:\n• None If is not null, then call with no arguments.\n• None If is not null, then call with no arguments.\n• None If is null, then return.\n• \n• None Let be the first element of .\n• None If 's observed attributes does not contain , then return.\n• None Add a new callback reaction to 's custom element reaction queue, with callback function and arguments .\n• None Enqueue an element on the appropriate element queue given .\n\nTo , given an element and custom element definition , run the following steps:\n• None Add a new upgrade reaction to 's custom element reaction queue, with custom element definition .\n• None Enqueue an element on the appropriate element queue given .\n\nTo in an element queue , run the following steps:\n• While is not empty:\n• None Let be the result of dequeuing from .\n• \n• Remove the first element of , and let be that element. Switch on 's type: If this throws an exception, catch it, and report it for 's custom element definition's constructor's corresponding JavaScript object's associated realm's global object. Invoke 's callback function with 's arguments and \" \", and callback this value set to .\n\nTo ensure custom element reactions are triggered appropriately, we introduce the IDL extended attribute. It indicates that the relevant algorithm is to be supplemented with additional steps in order to appropriately track and invoke custom element reactions.\n\nThe extended attribute must take no arguments, and must not appear on anything other than an operation, attribute, setter, or deleter. Additionally, it must not appear on readonly attributes.\n\nOperations, attributes, setters, or deleters annotated with the extended attribute must run the following steps in place of the ones specified in their description:\n• None Push a new element queue onto this object's relevant agent's custom element reactions stack.\n• None Run the originally-specified steps for this construct, catching any exceptions. If the steps return a value, let be the returned value. If they throw an exception, let be the thrown exception.\n• None Let be the result of popping from this object's relevant agent's custom element reactions stack.\n• None If an exception was thrown by the original steps, rethrow .\n• None If a value was returned from the original steps, return .\n\nAny nonstandard APIs introduced by the user agent that could modify the DOM in such a way as to cause enqueuing a custom element callback reaction or enqueuing a custom element upgrade reaction, for example by modifying any attributes or child elements, must also be decorated with the attribute.\n\nCertain capabilities are meant to be available to a custom element author, but not to a custom element consumer. These are provided by the method, which returns an instance of . The properties and methods of allow control over internal features which the user agent provides to all elements.\n\nEach has an (null or an object), initially null.\n• None If this's value is not null, then throw a \" \" .\n• None Let be the result of looking up a custom element definition given this's node document, its namespace, its local name, and null as the value.\n• None If is null, then throw an \" \" .\n• None If 's disable internals is true, then throw a \" \" .\n• None If this's attached internals is non-null, then throw an \" \" .\n• None If this's custom element state is not \" \" or \" \", then throw a \" \" .\n• None Set this's attached internals to a new instance whose target element is this.\n\nThe IDL for the interface is as follows, with the various operations and attributes defined in the following sections:\n\nEach has a , which is a custom element.\n• None If is not a shadow host, then return null.\n• None If 's available to element internals is false, then return null.\n\nEach form-associated custom element has . It is used to provide one or more entries on form submission. The initial value of submission value is null, and submission value can be null, a string, a , or a list of entries.\n\nEach form-associated custom element has . It is information with which the user agent can restore a user's input for the element. The initial value of state is null, and state can be null, a string, a , or a list of entries.\n\nThe method is used by the custom element author to set the element's submission value and state, thus communicating these to the user agent.\n\nWhen the user agent believes it is a good idea to restore a form-associated custom element's state, for example after navigation or restarting the user agent, they may enqueue a custom element callback reaction with that element, callback name \" \", and « the state to be restored, \" \" ».\n\nIf the user agent has a form-filling assist feature, then when the feature is invoked, it may enqueue a custom element callback reaction with a form-associated custom element, callback name \" \", and « the state value determined by history of state value and some heuristics, \" \" ».\n\nIn general, the state is information specified by a user, and the submission value is a value after canonicalization or sanitization, suitable for submission to the server. The following examples makes this concrete:\n\nSuppose that we have a form-associated custom element which asks a user to specify a date. The user specifies , but the control wishes to submit to the server. would be a state of the element, and would be a submission value.\n\nSuppose you develop a custom element emulating a the behavior of the existing checkbox type. Its submission value would be the value of its content attribute, or the string . Its state would be one of , , , or .\n• None If is not a form-associated custom element, then throw a \" \" .\n• None Set target element's submission value to if is not a object, or to a clone of 's entry list otherwise.\n• None If the argument of the function is omitted, set 's state to its submission value.\n• None Otherwise, if is a object, set 's state to a clone of 's entry list.\n\nEach form-associated custom element has validity flags named , , , , , , , , and . They are false initially.\n\nEach form-associated custom element has a string. It is the empty string initially.\n\nEach form-associated custom element has a element. It is null initially.\n• None If is not a form-associated custom element, then throw a \" \" .\n• None If contains one or more true values and is not given or is the empty string, then throw a .\n• None For each entry → of , set 's validity flag with the name to .\n• None Set 's validation message to the empty string if is not given or all of 's validity flags are false, or to otherwise.\n• None If 's validity flag is true, then set 's custom validity error message to 's validation message. Otherwise, set 's custom validity error message to the empty string.\n• None Set 's validation anchor to null if is not given. Otherwise, if is not a shadow-including descendant of , then throw a \" \" . Otherwise, set 's validation anchor to .\n• None If is not a form-associated custom element, then throw a \" \" .\n\nThe for a form-associated custom element, given an element and an entry list , consists of the following steps:\n• If 's submission value is a list of entries, then append each item of 's submission value to , and return. In this case, user agent does not refer to the content attribute value. An implementation of form-associated custom element is responsible to decide names of entries. They can be the content attribute value, they can be strings based on the content attribute value, or they can be unrelated to the content attribute.\n• None If the element does not have a attribute specified, or its attribute's value is the empty string, then return.\n• None If the element's submission value is not null, create an entry with the attribute value and the submission value, and append it to .\n\nEach custom element has an , which is a map, initially empty. See the Requirements related to ARIA and to platform accessibility APIs section for information on how this impacts platform accessibility APIs.\n\nEach custom element has a , which is a , initially empty.\n\nThe getter steps are to return this's target element's states set.\n\nThis specification does not provide a machine-readable way of describing breadcrumb navigation menus. Authors are encouraged to just use a series of links in a paragraph. The element can be used to mark the section containing these paragraphs as being navigation blocks.\n\nThis specification does not define any markup specifically for marking up lists of keywords that apply to a group of pages (also known as tag clouds). In general, authors are encouraged to either mark up such lists using elements with explicit inline counts that are then hidden and turned into a presentational effect using a style sheet, or to use SVG.\n\nThis specification does not define a specific element for marking up conversations, meeting minutes, chat transcripts, dialogues in screenplays, instant message logs, and other situations where different players take turns in discourse.\n\nInstead, authors are encouraged to mark up conversations using elements and punctuation. Authors who need to mark the speaker for styling purposes are encouraged to use or . Paragraphs with their text wrapped in the element can be used for marking up stage directions.\n\nHTML does not have a dedicated mechanism for marking up footnotes. Here are the suggested alternatives.\n\nFor short inline annotations, the attribute could be used.\n\nUnfortunately, relying on the attribute is currently discouraged as many user agents do not expose the attribute in an accessible manner as required by this specification (e.g. requiring a pointing device such as a mouse to cause a tooltip to appear, which excludes keyboard-only users and touch-only users, such as anyone with a modern phone or tablet).\n\nIf the attribute is used, CSS can be used to draw the reader's attention to the elements with the attribute.\n\nFor longer annotations, the element should be used, pointing to an element later in the document. The convention is that the contents of the link be a number in square brackets.\n\nFor side notes, longer annotations that apply to entire sections of the text rather than just specific words or sentences, the element should be used.\n\nFor figures or tables, footnotes can be included in the relevant or element, or in surrounding prose.\n\nAn element is said to be if it is one of the following:\n• an element that is disabled\n• an element that has a attribute\n• an element that is disabled\n\nThis definition is used to determine what elements are focusable and which elements match the and pseudo classes.\n\nleaves the case-sensitivity of attribute names for the purpose of the 'attr()' function to be defined by the host language. [CSSVALUES]\n\nWhen comparing the attribute name part of a CSS 'attr()' function to the names of namespace-less attributes on HTML elements in HTML documents, the name part of the CSS 'attr()' function must first be converted to ASCII lowercase. The same function when compared to other attributes must be compared according to its original case. In both cases, to match the values must be identical to each other (and therefore the comparison is case sensitive).\n\nThis is the same as comparing the name part of a CSS attribute selector, specified in the next section.\n\nleaves the case-sensitivity of element names, attribute names, and attribute values to be defined by the host language. [SELECTORS]\n\nWhen comparing a CSS element type selector to the names of HTML elements in HTML documents, the CSS element type selector must first be converted to ASCII lowercase. The same selector when compared to other elements must be compared according to its original case. In both cases, to match the values must be identical to each other (and therefore the comparison is case sensitive).\n\nWhen comparing the name part of a CSS attribute selector to the names of attributes on HTML elements in HTML documents, the name part of the CSS attribute selector must first be converted to ASCII lowercase. The same selector when compared to other attributes must be compared according to its original case. In both cases, the comparison is case-sensitive.\n\nAttribute selectors on an HTML element in an HTML document must treat the values of attributes with the following names as ASCII case-insensitive:\n\nAll other attribute values and everything else must be treated as entirely identical to each other for the purposes of selector matching. This includes:\n• None IDs and classes in no-quirks mode and limited-quirks mode\n• None the names of elements not in the HTML namespace\n• None the names of HTML elements in XML documents\n• None the names of attributes of elements not in the HTML namespace\n• None the names of attributes of HTML elements in XML documents\n• None the names of attributes that themselves have namespaces\n\ndefines that ID and class selectors (such as and ), when matched against elements in documents that are in quirks mode, will be matched in an ASCII case-insensitive manner. However, this does not apply for attribute selectors with \" \" or \" \" as the name part. The selector will treat its value as case-sensitive even in quirks mode.\n\nThere are a number of dynamic selectors that can be used with HTML. This section defines when these selectors match HTML elements. [SELECTORS] [CSSUI]\n\nThis specification does not define when an element matches the dynamic pseudo-class, as it is defined in sufficient detail in a language-agnostic fashion in . [SELECTORS]\n\nSometimes, it is desirable to annotate content with specific machine-readable labels, e.g. to allow generic scripts to provide services that are customized to the page, or to enable content from a variety of cooperating authors to be processed by a single script in a consistent manner.\n\nFor this purpose, authors can use the microdata features described in this section. Microdata allows nested groups of name-value pairs to be added to documents, in parallel with the existing content.\n\nAt a high level, microdata consists of a group of name-value pairs. The groups are called items, and each name-value pair is a property. Items and properties are represented by regular elements.\n\nTo create an item, the attribute is used.\n\nTo add a property to an item, the attribute is used on one of the item's descendants.\n\nMarkup without the microdata-related attributes does not have any effect on the microdata model.\n\nProperties generally have values that are strings.\n\nWhen a string value is a URL, it is expressed using the element and its attribute, the element and its attribute, or other elements that link to or embed external resources.\n\nWhen a string value is in some machine-readable format unsuitable for human consumption, it is expressed using the attribute of the element, with the human-readable version given in the element's contents.\n\nFor numeric data, the element and its attribute can be used instead.\n\nSimilarly, for date- and time-related data, the element and its attribute can be used instead.\n\nProperties can also themselves be groups of name-value pairs, by putting the attribute on the element that declares the property.\n\nItems that are not part of others are called top-level microdata items.\n\nProperties that are not descendants of the element with the attribute can be associated with the item using the attribute. This attribute takes a list of IDs of elements to crawl in addition to crawling the children of the element with the attribute.\n\nAn item can have multiple properties with the same name and different values.\n\nAn element introducing a property can also introduce multiple properties at once, to avoid duplication when some of the properties have the same value.\n\nIt's important to note that there is no relationship between the microdata and the content of the document where the microdata is marked up.\n\nThe examples in the previous section show how information could be marked up on a page that doesn't expect its microdata to be re-used. Microdata is most useful, though, when it is used in contexts where other authors and readers are able to cooperate to make new uses of the markup.\n\nFor this purpose, it is necessary to give each item a type, such as \"https://example.com/person\", or \"https://example.org/cat\", or \"https://band.example.net/\". Types are identified as URLs.\n\nThe type for an item is given as the value of an attribute on the same element as the attribute.\n\nThe type gives the context for the properties, thus selecting a vocabulary: a property named \"class\" given for an item with the type \"https://census.example/person\" might refer to the economic class of an individual, while a property named \"class\" given for an item with the type \"https://example.com/school/teacher\" might refer to the classroom a teacher has been assigned. Several types can share a vocabulary. For example, the types \" \" and \" \" could be defined to use the same vocabulary (though maybe some properties would not be especially useful in both cases, e.g. maybe the \" \" type might not typically be used with the \" \" property). Multiple types defined to use the same vocabulary can be given for a single item by listing the URLs as a space-separated list in the attribute' value. An item cannot be given two types if they do not use the same vocabulary, however.\n\nSometimes, an item gives information about a topic that has a global identifier. For example, books can be identified by their ISBN number.\n\nVocabularies (as identified by the attribute) can be designed such that items get associated with their global identifier in an unambiguous way by expressing the global identifiers as URLs given in an attribute.\n\nThe exact meaning of the URLs given in attributes depends on the vocabulary used.\n\nUsing microdata means using a vocabulary. For some purposes, an ad-hoc vocabulary is adequate. For others, a vocabulary will need to be designed. Where possible, authors are encouraged to re-use existing vocabularies, as this makes content re-use easier.\n\nWhen designing new vocabularies, identifiers can be created either using URLs, or, for properties, as plain words (with no dots or colons). For URLs, conflicts with other vocabularies can be avoided by only using identifiers that correspond to pages that the author has control over.\n\nProperties whose names are just plain words can only be used within the context of the types for which they are intended; properties named using URLs can be reused in items of any type. If an item has no type, and is not part of another item, then if its properties have names that are just plain words, they are not intended to be globally unique, and are instead only intended for limited use. Generally speaking, authors are encouraged to use either properties with globally unique names (URLs) or ensure that their items are typed.\n\nThe microdata model consists of groups of name-value pairs known as items.\n\nEach group is known as an item. Each item can have item types, a global identifier (if the vocabulary specified by the item types support global identifiers for items), and a list of name-value pairs. Each name in the name-value pair is known as a property, and each property has one or more values. Each value is either a string or itself a group of name-value pairs (an item). The names are unordered relative to each other, but if a particular name has multiple values, they do have a relative order.\n\nEvery HTML element may have an attribute specified. The attribute is a boolean attribute.\n\nAn element with the attribute specified creates a new , a group of name-value pairs.\n\nElements with an attribute may have an attribute specified, to give the item types of the item.\n\nThe attribute, if specified, must have a value that is an unordered set of unique space-separated tokens, none of which are identical to another token and each of which is a valid URL string that is an absolute URL, and all of which are defined to use the same vocabulary. The attribute's value must have at least one token.\n\nThe of an item are the tokens obtained by splitting the element's attribute's value on ASCII whitespace. If the attribute is missing or parsing it in this way finds no tokens, the item is said to have no item types.\n\nThe item types must all be types defined in applicable specifications and must all be defined to use the same vocabulary.\n\nExcept if otherwise specified by that specification, the URLs given as the item types should not be automatically dereferenced.\n\nA specification could define that its item type can be dereferenced to provide the user with help information, for example. In fact, vocabulary authors are encouraged to provide useful information at the given URL.\n\nItem types are opaque identifiers, and user agents must not dereference unknown item types, or otherwise deconstruct them, in order to determine how to process items that use them.\n\nThe attribute must not be specified on elements that do not have an attribute specified.\n\nAn item is said to be a when either it has an item type, or it is the value of a property of a typed item. The for a typed item is the item's item types, if it has any, or else is the relevant types of the item for which it is a property's value.\n\nElements with an attribute and an attribute that references a vocabulary that is defined to may also have an attribute specified, to give a global identifier for the item, so that it can be related to other items on pages elsewhere on the web.\n\nThe attribute, if specified, must have a value that is a valid URL potentially surrounded by spaces.\n\nThe of an item is the value of its element's attribute, if it has one, parsed relative to the node document of the element on which the attribute is specified. If the attribute is missing or if parsing it returns failure, it is said to have no global identifier.\n\nThe attribute must not be specified on elements that do not have both an attribute and an attribute specified, and must not be specified on elements with an attribute whose attribute specifies a vocabulary that does not support global identifiers for items, as defined by that vocabulary's specification.\n\nThe exact meaning of a global identifier is determined by the vocabulary's specification. It is up to such specifications to define whether multiple items with the same global identifier (whether on the same page or on different pages) are allowed to exist, and what the processing rules for that vocabulary are with respect to handling the case of multiple items with the same ID.\n\nElements with an attribute may have an attribute specified, to give a list of additional elements to crawl to find the name-value pairs of the item.\n\nThe attribute, if specified, must have a value that is an unordered set of unique space-separated tokens none of which are identical to another token and consisting of IDs of elements in the same tree.\n\nThe attribute must not be specified on elements that do not have an attribute specified.\n\nThe attribute is not part of the microdata data model. It is merely a syntactic construct to aid authors in adding annotations to pages where the data to be annotated does not follow a convenient tree structure. For example, it allows authors to mark up data in a table so that each column defines a separate item, while keeping the properties in the cells.\n\nEvery HTML element may have an attribute specified, if doing so adds one or more properties to one or more items (as defined below).\n\nThe attribute, if specified, must have a value that is an unordered set of unique space-separated tokens none of which are identical to another token, representing the names of the name-value pairs that it adds. The attribute's value must have at least one token.\n\nEach token must be either:\n• If the item is a typed item: a allowed in this situation according to the specification that defines the relevant types for the item, or\n• A valid URL string that is an absolute URL defined as an item property name allowed in this situation by a vocabulary specification, or\n• A valid URL string that is an absolute URL, used as a proprietary item property name (i.e. one used by the author for private purposes, not defined in a public specification), or\n• If the item is not a typed item: a string that contains no U+002E FULL STOP characters (.) and no U+003A COLON characters (:), used as a proprietary item property name (i.e. one used by the author for private purposes, not defined in a public specification).\n\nSpecifications that introduce defined property names must ensure all such property names contain no U+002E FULL STOP characters (.), no U+003A COLON characters (:), and no ASCII whitespace.\n\nThe rules above disallow U+003A COLON characters (:) in non-URL values because otherwise they could not be distinguished from URLs. Values with U+002E FULL STOP characters (.) are reserved for future extensions. ASCII whitespace are disallowed because otherwise the values would be parsed as multiple tokens.\n\nWhen an element with an attribute adds a property to multiple items, the requirement above regarding the tokens applies for each item individually.\n\nThe of an element are the tokens that the element's attribute is found to contain when its value is split on ASCII whitespace, with the order preserved but with duplicates removed (leaving only the first occurrence of each name).\n\nWithin an item, the properties are unordered with respect to each other, except for properties with the same name, which are ordered in the order they are given by the algorithm that defines the properties of an item.\n\nThe of a name-value pair added by an element with an attribute is as given for the first matching case in the following list:\n\nThe are the , , , , , , , , , , and elements.\n\nIf a property's value, as defined by the property's definition, is an absolute URL, the property must be specified using a URL property element.\n\nThese requirements do not apply just because a property value happens to match the syntax for a URL. They only apply if the property is explicitly defined as taking such a value.\n\nFor example, a book about the first moon landing could be called \"mission:moon\". A \"title\" property from a vocabulary that defines a title as being a string would not expect the title to be given in an element, even though it looks like a URL. On the other hand, if there was a (rather narrowly scoped!) vocabulary for \"books whose titles look like URLs\" which had a \"title\" property defined to take a URL, then the property would expect the title to be given in an element (or one of the other URL property elements), because of the requirement above.\n\nTo find the properties of an item defined by the element , the user agent must run the following steps. These steps are also used to flag microdata errors.\n• None Let , , and be empty lists of elements.\n• None Add the child elements of , if any, to .\n• None If has an attribute, split the value of that attribute on ASCII whitespace. For each resulting token , if there is an element in the tree of with the ID , then add the first such element to .\n• While is not empty:\n• None Remove an element from and let be that element.\n• None If is already in , there is a microdata error; continue.\n• None If does not have an attribute, then: add all the child elements of to .\n• None If has an attribute specified and has one or more property names, then add to .\n\nA document must not contain any items for which the algorithm to find the properties of an item finds any .\n\nAn item is a if its element does not have an attribute.\n\nAll attributes in a must be such that there are no cycles in the graph formed from representing each item in the as a node in the graph and each property of an item whose value is another item as an edge in the graph connecting those two items.\n\nA document must not contain any elements that have an attribute that would not be found to be a property of any of the items in that document were their properties all to be determined.\n\nCurrently, the , , and other microdata attributes are only defined for HTML elements. This means that attributes with the literal names \" \", \" \", etc, do not cause microdata processing to occur on elements in other namespaces, such as SVG.\n\nThe vocabularies in this section are primarily intended to demonstrate how a vocabulary is specified, though they are also usable in their own right.\n\nAn item with the represents a person's or organization's contact information.\n\nThis vocabulary does not .\n\nThe following are the type's . They are based on the vocabulary defined in ( ) and its extensions, where more information on how to interpret the values can be found. [RFC6350]\n\nGiven a list of nodes in a , a user agent must run the following algorithm to (only the first vCard is returned):\n• None If none of the nodes in are with the , then there is no vCard. Abort the algorithm, returning nothing.\n• None Let be the first node in that is an with the .\n• None Let be an empty string.\n• None with the type \" \" and the value \" \" to .\n• None with the type \" \" and the value \" \" to .\n• None with the type \" \" and the value \" \" to .\n• None with the type \" \" and the result of that is the document's as the value to .\n• None If is not null, with the type \" \" and with the result of obtained from 's as the value to .\n• None Let be the empty string.\n• None Let be the empty string.\n• For each element that is : for each name in 's , run the following substeps:\n• None Let be an empty set of name-value pairs.\n• Run the appropriate set of substeps from the following list. The steps will set a variable , which is used in the next step. If the property's is an and is\n• None Let be the empty string.\n• None Append to the result of named in .\n• None Append to the result of named in .\n• None Append to the result of named in .\n• None Append to the result of named in .\n• None Append to the result of named in . If the property's is an and is\n• None Let be the empty string.\n• None Append to the result of named in .\n• None Append to the result of named in .\n• None Append to the result of named in .\n• None Append to the result of named in .\n• None Append to the result of named in .\n• None Append to the result of named in .\n• None Append to the result of named in .\n• None If there is a property named in , and the first such property has a that is not an and whose value consists only of , then add a parameter named \" \" whose value is the of that property to . If the property's is an and is\n• None Let be the empty string.\n• None Append to the result of named in .\n• For each property named in , run the following steps:\n• None If the of the property is an , then skip this property.\n• None Append the result of given by the of the property to . If the property's is an with the and is\n• None Let be the empty string.\n• None If there is a property named in , and its element is a , then append the result of given by the of the first such property to , and add a parameter with the name \" \" and the value \" \" to .\n• None If there is a property named in , and the first such property has a that is not an and whose value consists only of , then add a parameter named \" \" whose value is the of that property to . If the property's is an and is none of the above\n• None Let be the result of named in .\n• None If there is a property named in , and the first such property has a that is not an and whose value consists only of , then add a parameter named \" \" whose value is the of that property to . If the property's is not an and its is If this is the first such property to be found, set to the property's . If the property's is not an and its is If this is the first such property to be found, set to the property's . Otherwise (the property's is not an )\n• None Let be the property's .\n• None If is one of the , add a parameter with the name \" \" and the value \" \" to .\n• None Otherwise, if is or and the is a , add a parameter with the name \" \" and the value \" \" to .\n• None Otherwise, if is and the is a , add a parameter with the name \" \" and the value \" \" to .\n• None Prefix every U+005C REVERSE SOLIDUS character (\\) in with another U+005C REVERSE SOLIDUS character (\\).\n• None Prefix every U+002C COMMA character (,) in with a U+005C REVERSE SOLIDUS character (\\).\n• None Unless is , prefix every U+003B SEMICOLON character (;) in with a U+005C REVERSE SOLIDUS character (\\).\n• None Replace every U+000D CARRIAGE RETURN U+000A LINE FEED character pair (CRLF) in with a U+005C REVERSE SOLIDUS character (\\) followed by a U+006E LATIN SMALL LETTER N character (n).\n• None Replace every remaining U+000D CARRIAGE RETURN (CR) or U+000A LINE FEED (LF) character in with a U+005C REVERSE SOLIDUS character (\\) followed by a U+006E LATIN SMALL LETTER N character (n).\n• with the type , the parameters , and the value to .\n• None If either or has a value that is not the empty string, with the type \" \" and the value consisting of the concatenation of , a U+003B SEMICOLON character (;), and to .\n• None with the type \" \" and the value \" \" to .\n\nWhen the above algorithm says that the user agent is to consisting of a type , optionally some parameters, and a value to a string , it must run the following steps:\n• None Let be an empty string.\n• If there are any parameters, then for each parameter, in the order that they were added, run these substeps:\n• None Append the parameter's name to .\n• None Append the parameter's value to .\n• While 's is greater than :\n• None Append the first code points of to .\n• None Remove the first code points from .\n• None Append (what remains of) to .\n\nWhen the steps above require the user agent to obtain the result of named in , the user agent must run the following steps:\n• None Let be the empty string.\n• For each property named in the item , run the following substeps:\n• None If the of the property is itself an , then skip this property.\n• None If this is not the first property named in (ignoring any that were skipped by the previous step), then append a U+002C COMMA character (,) to .\n• None Append the result of given by the of the property to .\n\nWhen the steps above require the user agent to obtain the result of named in , the user agent must run the following steps:\n• None If there are no properties named in , then return the empty string.\n• None If the of the first property named in is an , then return the empty string.\n• None Return the result of given by the of the first property named in .\n\nWhen the above algorithms say the user agent is to , the user agent must use the following steps:\n• None Prefix every U+005C REVERSE SOLIDUS character (\\) in with another U+005C REVERSE SOLIDUS character (\\).\n• None Prefix every U+002C COMMA character (,) in with a U+005C REVERSE SOLIDUS character (\\).\n• None Prefix every U+003B SEMICOLON character (;) in with a U+005C REVERSE SOLIDUS character (\\).\n• None Replace every U+000D CARRIAGE RETURN U+000A LINE FEED character pair (CRLF) in with a U+005C REVERSE SOLIDUS character (\\) followed by a U+006E LATIN SMALL LETTER N character (n).\n• None Replace every remaining U+000D CARRIAGE RETURN (CR) or U+000A LINE FEED (LF) character in with a U+005C REVERSE SOLIDUS character (\\) followed by a U+006E LATIN SMALL LETTER N character (n).\n\nThis algorithm can generate invalid vCard output, if the input does not conform to the rules described for the and .\n\nAn item with the item type represents an event.\n\nThis vocabulary does not support global identifiers for items.\n\nThe following are the type's defined property names. They are based on the vocabulary defined in ( ), where more information on how to interpret the values can be found. [RFC5545]\n\nOnly the parts of the iCalendar vocabulary relating to events are used here; this vocabulary cannot express a complete iCalendar instance.\n\nA string is a if it matches the following pattern:\n• One of the following:\n• None A valid non-negative integer followed by a U+0057 LATIN CAPITAL LETTER W character (W). The integer represents a duration of that number of weeks.\n• At least one, and possible both in this order, of the following:\n• None A valid non-negative integer followed by a U+0044 LATIN CAPITAL LETTER D character (D). The integer represents a duration of that number of days.\n• A U+0054 LATIN CAPITAL LETTER T character (T) followed by any one of the following, or the first and second of the following in that order, or the second and third of the following in that order, or all three of the following in this order:\n• None A valid non-negative integer followed by a U+0048 LATIN CAPITAL LETTER H character (H). The integer represents a duration of that number of hours.\n• None A valid non-negative integer followed by a U+004D LATIN CAPITAL LETTER M character (M). The integer represents a duration of that number of minutes.\n• None A valid non-negative integer followed by a U+0053 LATIN CAPITAL LETTER S character (S). The integer represents a duration of that number of seconds.\n\nGiven a list of nodes in a , a user agent must run the following algorithm to extract any vEvent data represented by those nodes :\n• None If none of the nodes in are items with the type , then there is no vEvent data. Abort the algorithm, returning nothing.\n• None Let be an empty string.\n• None Add an iCalendar line with the type \" \" and the value \" \" to .\n• None Add an iCalendar line with the type \" \" and the value equal to a user-agent-specific string representing the user agent to .\n• None Add an iCalendar line with the type \" \" and the value \" \" to .\n• For each node in that is an item with the type , run the following steps:\n• None Add an iCalendar line with the type \" \" and the value \" \" to .\n• None Add an iCalendar line with the type \" \" and a value consisting of an iCalendar DATE-TIME string representing the current date and time, with the annotation \" \", to . [RFC5545]\n• For each element that is a property of the item : for each name in 's property names, run the appropriate set of substeps from the following list: If the property's value is an item If the property is If the property is If the property is If the property is If the property is If the property is Let be the result of stripping all U+002D HYPHEN-MINUS (-) and U+003A COLON (:) characters from the property's value. If the property's value is a then add an iCalendar line with the type and the value to , with the annotation \" \". Otherwise, if the property's value is a then add an iCalendar line with the type and the value to , with the annotation \" \". Add an iCalendar line with the type and the property's value to .\n• None Add an iCalendar line with the type \" \" and the value \" \" to .\n• None Add an iCalendar line with the type \" \" and the value \" \" to .\n\nWhen the above algorithm says that the user agent is to consisting of a type , a value , and optionally an annotation, to a string , it must run the following steps:\n• None Let be an empty string.\n• If there is an annotation:\n• None Prefix every U+005C REVERSE SOLIDUS character (\\) in with another U+005C REVERSE SOLIDUS character (\\).\n• None Prefix every U+002C COMMA character (,) in with a U+005C REVERSE SOLIDUS character (\\).\n• None Prefix every U+003B SEMICOLON character (;) in with a U+005C REVERSE SOLIDUS character (\\).\n• None Replace every U+000D CARRIAGE RETURN U+000A LINE FEED character pair (CRLF) in with a U+005C REVERSE SOLIDUS character (\\) followed by a U+006E LATIN SMALL LETTER N character (n).\n• None Replace every remaining U+000D CARRIAGE RETURN (CR) or U+000A LINE FEED (LF) character in with a U+005C REVERSE SOLIDUS character (\\) followed by a U+006E LATIN SMALL LETTER N character (n).\n• While 's code point length is greater than :\n• None Append the first code points of to .\n• None Remove the first code points from .\n• None Append (what remains of) to .\n\nThis algorithm can generate invalid iCalendar output, if the input does not conform to the rules described for the item type and defined property names.\n\nAn item with the item type represents a work (e.g. an article, an image, a video, a song, etc.). This type is primarily intended to allow authors to include licensing information for works.\n\nThe following are the type's defined property names.\n\nGiven a list of nodes in a , a user agent must run the following algorithm to extract the microdata from those nodes into a JSON form :\n• None Let be an empty object.\n• None Let be an empty array.\n• None For each in , check if the element is a top-level microdata item, and if it is then get the object for that element and add it to .\n• None Add an entry to called \" \" whose value is the array .\n• None Return the result of serializing to JSON in the shortest possible way (meaning no whitespace between tokens, no unnecessary zero digits in numbers, and only using Unicode escapes in strings for characters that do not have a dedicated escape sequence), and with a lowercase \" \" used, when appropriate, in the representation of any numbers. [JSON]\n\nThis algorithm returns an object with a single property that is an array, instead of just returning an array, so that it is possible to extend the algorithm in the future if necessary.\n\nWhen the user agent is to for an item , optionally with a list of elements , it must run the following substeps:\n• None Let be an empty object.\n• None If no was passed to the algorithm, let be an empty list.\n• None If the has any item types, add an entry to called \" \" whose value is an array listing the item types of , in the order they were specified on the attribute.\n• None If the has a global identifier, add an entry to called \" \" whose value is the global identifier of .\n• None Let be an empty object.\n• For each element that has one or more property names and is one of the properties of the item , in the order those elements are given by the algorithm that returns the properties of an item, run the following substeps:\n• None Let be the property value of .\n• None If is an item, then: If is in , then let be the string \" \". Otherwise, get the object for , passing a copy of , and then replace with the object returned from those steps.\n• For each name in 's property names, run the following substeps:\n• None If there is no entry named in , then add an entry named to whose value is an empty array.\n• None Append to the entry named in .\n• None Add an entry to called \" \" whose value is the object .\n\nAll HTML elements may have the content attribute set. The attribute is an enumerated attribute with the following keywords and states:\n\nThe attribute's missing value default is the state, and its invalid value default is the hidden state.\n\nWhen an element has the attribute in the hidden state, it indicates that the element is not yet, or is no longer, directly relevant to the page's current state, or that it is being used to declare content to be reused by other parts of the page as opposed to being directly accessed by the user. User agents should not render elements that are in the hidden state.\n\nThe requirement for user agents not to render elements that are in the hidden state can be implemented indirectly through the style layer. For example, a web browser could implement these requirements using the rules suggested in the Rendering section.\n\nWhen an element has the attribute in the hidden until found state, it indicates that the element is hidden like the hidden state but the content inside the element will be accessible to find-in-page and fragment navigation. When these features attempt to scroll to a target which is in the element's subtree, the user agent will remove the attribute in order to reveal the content before scrolling to it. In addition to removing the attribute, an event named is also fired on the element before the attribute is removed.\n\nWeb browsers will use 'content-visibility: hidden' instead of 'display: none' when the attribute is in the hidden until found state, as specified in the Rendering section.\n\nThe attribute must not be used to hide content that could legitimately be shown in another presentation. For example, it is incorrect to use to hide panels in a tabbed dialog, because the tabbed interface is merely a kind of overflow presentation — one could equally well just show all the form controls in one big page with a scrollbar. It is similarly incorrect to use this attribute to hide content just from one presentation — if something is marked , it is hidden from all presentations, including, for instance, screen readers.\n\nElements that are not themselves must not hyperlink to elements that are . The attributes of and elements that are not themselves must similarly not refer to elements that are . In both cases, such references would cause user confusion.\n\nElements and scripts may, however, refer to elements that are in other contexts.\n\nElements in a section hidden by the attribute are still active, e.g. scripts and form controls in such sections still execute and submit respectively. Only their presentation to the user changes.\n• None If the attribute is in the hidden until found state, then return \" \".\n• None If the attribute is set, then return true.\n• None If the given value is a string that is an ASCII case-insensitive match for \" \", then set the attribute to \" \".\n• None Otherwise, if the given value is false, then remove the attribute.\n• None Otherwise, if the given value is the empty string, then remove the attribute.\n• None Otherwise, if the given value is null, then remove the attribute.\n• None Otherwise, if the given value is 0, then remove the attribute.\n• None Otherwise, if the given value is NaN, then remove the attribute.\n• None Otherwise, set the attribute to the empty string.\n\nThe is to run the following steps on :\n• While has a parent node within the flat tree:\n• If has the attribute in the hidden until found state, then:\n• None Set to the parent node of within the flat tree.\n\nA traversable navigable's system visibility state, including its initial value upon creation, is determined by the user agent. It represents, for example, whether the browser window is minimized, a browser tab is currently in the background, or a system element such as a task switcher obscures the page.\n\nWhen a user-agent determines that the system visibility state for traversable navigable has changed to , it must run the following steps:\n• None Let be the inclusive descendant navigables of 's active document.\n• For each of in what order?:\n• None Queue a global task on the user interaction task source given 's relevant global object to of with .\n\nA has a , which is either \" \" or \" \", initially set to \" \".\n\nThe getter steps are to return this's visibility state.\n\nThe getter steps are to return true if this's visibility state is \" \", otherwise false.\n\nTo of to :\n• None Queue a new whose visibility state is and whose is the current high resolution time given 's relevant global object.\n• Run any which may be defined in other specifications, with visibility state and . It would be better if specification authors sent a pull request to add calls from here into their specifications directly, instead of using the page visibility change steps hook, to ensure well-defined cross-specification call order. As of the time of this writing the following specifications are known to have page visibility change steps, which will be run in an unspecified order: and . [DEVICEPOSTURE] [WEBNFC]\n• None Fire an event named at , with its attribute initialized to true.\n\nThe interface exposes visibility changes to the document, from the moment the document becomes active.\n\nSince hiding a page can cause throttling of rendering and other user-agent operations, it is common to use visibility changes as an indication that such throttling has occurred. However, other things could also cause throttling in different browsers, such as long periods of inactivity.\n\nThe has an associated .\n\nThe has an associated \" \" or \" \" .\n\nThe getter steps are to return this's visibility state.\n\nThe getter steps are to return \" \".\n\nThe getter steps are to return this's .\n\nThe getter steps are to return zero.\n\nSee also for an explanation of the attribute of the same name.\n\nA node (in particular elements and text nodes) can be . When a node is inert:\n• None Hit-testing must act as if the 'pointer-events' CSS property were set to 'none'.\n• None Text selection functionality must act as if the 'user-select' CSS property were set to 'none'.\n• None If it is editable, the node behaves as if it were non-editable.\n• None The user agent should ignore the node for the purposes of find-in-page.\n\nInert nodes generally cannot be focused, and user agents do not expose the inert nodes to accessibility APIs or assistive technologies. Inert nodes that are commands will become inoperable to users, in the manner described above.\n\nUser agents may allow the user to override the restrictions on find-in-page and text selection, however.\n\nBy default, a node is not inert.\n\nA is if is the topmost element in 's top layer. While is so blocked, every node that is connected to , with the exception of the element and its flat tree descendants, must become inert.\n\ncan additionally become inert via the attribute, but only if specified on itself (i.e., escapes inertness of ancestors); 's flat tree descendants can become inert in a similar fashion.\n\nThe element's method causes this mechanism to trigger, by adding the element to its node document's top layer.\n\nThe attribute is a boolean attribute that indicates, by its presence, that the element and all its flat tree descendants which don't otherwise escape inertness (such as modal dialogs) are to be made inert by the user agent.\n\nAn inert subtree should not contain any content or controls which are critical to understanding or using aspects of the page which are not in the inert state. Content in an inert subtree will not be perceivable by all users, or interactive. Authors should not specify elements as inert unless the content they represent are also visually obscured in some way. In most cases, authors should not specify the attribute on individual form controls. In these instances, the attribute is probably more appropriate.\n\nThe IDL attribute must reflect the content attribute of the same name.\n\nTo prevent abuse of certain APIs that could be annoying to users (e.g., opening popups or vibrating phones), user agents allow these APIs only when the user is actively interacting with the web page or has interacted with the page at least once. This \"active interaction\" state is maintained through the mechanisms defined in this section.\n\nFor the purpose of tracking user activation, each has two relevant values:\n• None A , which is either a , positive infinity (indicating that has never been activated), or negative infinity (indicating that the activation has been consumed). Initially positive infinity.\n• None A , which is either a or positive infinity, initially positive infinity.\n\nA user agent also defines a , which is a constant number indicating how long a user activation is available for certain user activation-gated APIs (e.g., for opening popups).\n\nThe transient activation duration is expected be at most a few seconds, so that the user can possibly perceive the link between an interaction with the page and the page calling the activation-gated API.\n\nWe then have the following boolean user activation states for :\n\nThe and are retained even after the changes its fully active status (e.g., after navigating away from a , or navigating to a cached ). This means sticky activation state spans multiple navigations as long as the same gets reused. For the transient activation state, the original expiry time remains unchanged (i.e., the state still expires within the transient activation duration limit from the original activation triggering input event). It is important to consider this when deciding whether to base certain things off sticky activation or transient activation.\n\nWhen a user interaction causes firing of an activation triggering input event in a , the user agent must perform the following steps before dispatching the event:\n• None Extend with the active window of each of 's ancestor navigables.\n• None Extend with the active window of each of 's descendant navigables, filtered to include only those navigables whose active document's origin is same origin with 's origin.\n• For each in :\n• None Notify the close watcher manager about user activation given .\n\nAn is any event whose attribute is true and whose is one of:\n• None \" \", provided the key is neither the key nor a shortcut key reserved by the user agent;\n• None \" \", provided the event's is not \" \"; or\n\nActivation consuming APIs defined in this and other specifications can by performing the following steps, given a :\n• None If 's navigable is null, then return.\n• None Let be the inclusive descendant navigables of 's active document.\n• None Let be the list of objects constructed by taking the active window of each item in .\n• None For each in , if 's is not positive infinity, then set 's to negative infinity.\n\nHistory-action activation-consuming APIs can by performing the following steps, given a :\n• None If 's navigable is null, then return.\n• None Let be the inclusive descendant navigables of 's active document.\n• None Let be the list of objects constructed by taking the active window of each item in .\n• None For each in , set 's to 's .\n\nNote the asymmetry in the sets of browsing contexts in the page that are affected by an activation notification vs an activation consumption: an activation consumption changes (to false) the transient activation states for all browsing contexts in the page, but an activation notification changes (to true) the states for a subset of those browsing contexts. The exhaustive nature of consumption here is deliberate: it prevents malicious sites from making multiple calls to an activation consuming API from a single user activation (possibly by exploiting a deep hierarchy of s).\n\nAPIs that are dependent on user activation are classified into different levels:\n\nEach has an , which is a object. Upon creation of the object, its associated must be set to a new object created in the object's relevant realm.\n\nThe getter steps are to return this's relevant global object's associated .\n\nThe getter steps are to return true if this's relevant global object has sticky activation, and false otherwise.\n\nThe getter steps are to return true if this's relevant global object has transient activation, and false otherwise.\n\nFor the purposes of user-agent automation and application testing, this specification defines the following extension command for the specification. It is optional for a user agent to support the following extension command. [WEBDRIVER]\n• None Let be true if has transient activation; otherwise false.\n• None If is true, then consume user activation of .\n\nCertain elements in HTML have an activation behavior, which means that the user can activate them. This is always caused by a event.\n\nThe user agent should allow the user to manually trigger elements that have an activation behavior, for instance using keyboard or voice input, or through mouse clicks. When the user triggers an element with a defined activation behavior in a manner other than clicking it, the default action of the interaction event must be to fire a event at the element.\n\nEach element has an associated , which is initially unset.\n\nThe method must run the following steps:\n• None If this element is a form control that is disabled, then return.\n• None If this element's click in progress flag is set, then return.\n• None Fire a synthetic pointer event named at this element, with the set.\n\nThe and attributes must return the values they are initialized to.\n\nA is a struct which has:\n\nThe attribute must return the value it was initialized to.\n\nThe getter steps are to return the result of retargeting against this's .\n\nDOM standard issue #1328 tracks how to better standardize associated event data in a way which makes sense on Events. Currently an event attribute initialized to a value cannot also have a getter, and so an internal slot (or map of additional fields) is required to properly specify this.\n\nAn HTML user interface typically consists of multiple interactive widgets, such as form controls, scrollable regions, links, dialog boxes, browser tabs, and so forth. These widgets form a hierarchy, with some (e.g. browser tabs, dialog boxes) containing others (e.g. links, form controls).\n\nWhen interacting with an interface using a keyboard, key input is channeled from the system, through the hierarchy of interactive widgets, to an active widget, which is said to be focused.\n\nKeyboard events are always targeted at this focused element.\n\nA top-level traversable has when it can receive keyboard input channeled from the operating system, possibly targeted at one of its active document's descendant navigables.\n\nA top-level traversable has when its system visibility state is \" \", and it either has system focus or user agent widgets directly related to it can receive keyboard input channeled from the operating system.\n\nUser attention is lost when a browser window loses focus, whereas system focus might also be lost to other system widgets in the browser window such as a location bar.\n\nA is a when is fully active and 's node navigable's top-level traversable has user attention.\n\nThe term is used to refer to regions of the interface that can further become the target of such keyboard input. Focusable areas can be elements, parts of elements, or other regions managed by the user agent.\n\nEach focusable area has a , which is a object that represents the position of the focusable area in the DOM. (When the focusable area is itself a , it is its own DOM anchor.) The DOM anchor is used in some APIs as a substitute for the focusable area when there is no other DOM object to represent the focusable area.\n\nThe following table describes what objects can be focusable areas. The cells in the left column describe objects that can be focusable areas; the cells in the right column describe the DOM anchors for those elements. (The cells that span both columns are non-normative examples.)\n\nA navigable container (e.g. an ) is a focusable area, but key events routed to a navigable container get immediately routed to its content navigable's active document. Similarly, in sequential focus navigation a navigable container essentially acts merely as a placeholder for its content navigable's active document.\n\nOne focusable area in each is designated the . Which control is so designated changes over time, based on algorithms in this specification.\n\nEven if a document is not fully active and not shown to the user, it can still have a focused area of the document. If a document's fully active state changes, its focused area of the document will stay the same.\n\nThe is the focusable area-or-null returned by this algorithm:\n• None If does not have system focus, then return null.\n• None While 's focused area is a navigable container with a non-null content navigable: set to the active document of that navigable container's content navigable.\n• None If 's focused area is non-null, set to 's focused area.\n\nThe is the focus chain of the currently focused area of , if is non-null, or an empty list otherwise.\n\nAn element that is the DOM anchor of a focusable area is said to when that focusable area becomes the currently focused area of a top-level traversable. When an element is the DOM anchor of a focusable area of the currently focused area of a top-level traversable, it is .\n\nThe of a focusable area is the ordered list constructed as follows:\n• None Let be an empty list.\n• \n• If is an element's shape, then append that element to . Otherwise, if 's DOM anchor is an element that is not itself, then append 's DOM anchor to .\n• If is a focusable area, then set to 's DOM anchor's node document. Otherwise, if is a whose node navigable's parent is non-null, then set to 's node navigable's parent.\n• The chain starts with and (if is or can be the currently focused area of a top-level traversable) continues up the focus hierarchy up to the of the top-level traversable.\n\nAll elements that are focusable areas are said to be .\n\nThere are two special types of focusability for focusable areas:\n• A focusable area is said to be if it is included in its 's sequential focus navigation order and the user agent determines that it is sequentially focusable.\n• A focusable area is said to be if the user agent determines that it is click focusable. User agents should consider focusable areas with non-null tabindex values to be click focusable.\n\nElements which are not focusable are not focusable areas, and thus not sequentially focusable and not click focusable.\n\nWhen a user activates a click focusable focusable area, the user agent must run the focusing steps on the focusable area with set to \" \".\n\nNote that focusing is not an activation behavior, i.e. calling the method on an element or dispatching a synthetic event on it won't cause the element to get focused.\n\nA node is a if it is a , a shadow host, a slot, or an element in the popover showing state which also has a popover invoker set.\n\nEach focus navigation scope owner has a , which is a list of elements. Its contents are determined as follows:\n\nEvery element has an , which is either null or a focus navigation scope owner. It is determined by the following algorithm:\n• None If 's parent is null, then return null.\n• None If 's parent is a shadow host, then return 's assigned slot.\n• None If 's parent is a shadow root, then return the parent's host.\n• None If 's parent is the document element, then return the parent's node document.\n• None If is in the popover showing state and has a popover invoker set, then return .\n\nThen, the contents of a given focus navigation scope owner 's focus navigation scope are all elements whose associated focus navigation owner is .\n\nThe order of elements within a focus navigation scope does not impact any of the algorithms in this specification. Ordering only becomes important for the tabindex-ordered focus navigation scope and flattened tabindex-ordered focus navigation scope concepts defined below.\n\nA is a list of focusable areas and focus navigation scope owners. Every focus navigation scope owner has tabindex-ordered focus navigation scope, whose contents are determined as follows:\n• None It contains all elements in 's focus navigation scope that are themselves focus navigation scope owners, except the elements whose tabindex value is a negative integer.\n• None It contains all of the focusable areas whose DOM anchor is an element in 's focus navigation scope, except the focusable areas whose tabindex value is a negative integer.\n\nThe order within a tabindex-ordered focus navigation scope is determined by each element's tabindex value, as described in the section below.\n\nThe rules there do not give a precise ordering, as they are composed mostly of \"should\" statements and relative orderings.\n\nA is a list of focusable areas. Every focus navigation scope owner owns a distinct flattened tabindex-ordered focus navigation scope, whose contents are determined by the following algorithm:\n• None Let be a clone of 's tabindex-ordered focus navigation scope.\n• For each of :\n• None If is not a focus navigation scope owner, then continue.\n• None If is not a focusable area, then replace with all of the items in 's flattened tabindex-ordered focus navigation scope.\n• None Otherwise, insert the contents of 's flattened tabindex-ordered focus navigation scope after .\n\nThe content attribute allows authors to make an element and regions that have the element as its DOM anchor be focusable areas, allow or prevent them from being sequentially focusable, and determine their relative ordering for sequential focus navigation.\n\nThe name \"tab index\" comes from the common use of the key to navigate through the focusable elements. The term \"tabbing\" refers to moving forward through sequentially focusable focusable areas.\n\nThe attribute, if specified, must have a value that is a valid integer. Positive numbers specify the relative position of the element's focusable areas in the sequential focus navigation order, and negative numbers indicate that the control is not sequentially focusable.\n\nDevelopers should use caution when using values other than 0 or −1 for their attributes as this is complicated to do correctly.\n\nThe of an element is the value of its attribute, parsed using the rules for parsing integers. If parsing fails or the attribute is not specified, then the tabindex value is null.\n\nThe tabindex value of a focusable area is the tabindex value of its DOM anchor.\n\nThe tabindex value of an element must be interpreted as follows:\n\nThe IDL attribute must reflect the value of the content attribute. The default value is 0 if the element is an , , , , , , , , , or SVG element, or is a element that is a summary for its parent details. The default value is −1 otherwise.\n\nThe varying default value based on element type is a historical artifact.\n\nTo for a that is either an element that is not a focusable area, or is a navigable, given an optional string (default \" \"), run the first matching set of steps from the following list:\n\nThe for a , given an optional string (default \" \"), is given by the following steps:\n• None If is a shadow host and its shadow root's delegates focus is false, then return null.\n• None If is a shadow host, then set to 's shadow root.\n• None Let be the autofocus delegate for given .\n• None If is not null, then return .\n• For each of 's descendants, in tree order:\n• None If is a element and is sequentially focusable, then set to .\n• None Otherwise, if is not a and is a focusable area, set to .\n• Otherwise, set to the result of getting the focusable area for given . This step can end up recursing, i.e., the get the focusable area steps might return the focus delegate of .\n• None If is not null, then return . It's important that we are not looking at the shadow-including descendants here, but instead only at the descendants. Shadow hosts are instead handled by the recursive case mentioned above.\n\nThe above algorithm essentially returns the first suitable focusable area where the path between its DOM anchor and delegates focus at any shadow tree boundaries.\n\nThe for a given a is given by the following steps:\n• For each descendant of , in tree order:\n• None If does not have an content attribute, then continue.\n• None Let be , if is a focusable area; otherwise let be the result of getting the focusable area for given .\n• None If is null, then continue.\n• None If is not click focusable and is \" \", then continue.\n\nThe for an object that is either a focusable area, or an element that is not a focusable area, or a navigable, are as follows. They can optionally be run with a and a string .\n• None If is not a focusable area, then set to the result of getting the focusable area for , given if it was passed.\n• If is null, then:\n• None If no was specified, then return.\n• None Otherwise, set to the .\n• None If is a navigable container with non-null content navigable, then set to the content navigable's active document.\n• None If is a focusable area and its DOM anchor is inert, then return.\n• None If is the currently focused area of a top-level traversable, then return.\n• None Let be the current focus chain of the top-level traversable in which finds itself.\n• None Let be the focus chain of .\n• None Run the with , , and respectively.\n\nUser agents must immediately run the focusing steps for a focusable area or navigable whenever the user attempts to move the focus to .\n\nThe for an object that is either a focusable area or an element that is not a focusable area are as follows:\n• None If is a shadow host whose shadow root's delegates focus is true, and 's shadow root is a shadow-including inclusive ancestor of the currently focused area of a top-level traversable's DOM anchor, then set to that currently focused area of a top-level traversable.\n• None If is inert, then return.\n• None If is an element and one of its shapes is the currently focused area of a top-level traversable, or, if is an element with one or more scrollable regions, and one of them is the currently focused area of a top-level traversable, then let be that currently focused area of a top-level traversable.\n• None Let be the current focus chain of the top-level traversable in which finds itself.\n• None If is not one of the entries in , then return.\n• None If is not a focusable area, then return.\n• None Let be 's last entry.\n• If 's node navigable has system focus, then run the focusing steps for 's viewport. Otherwise, apply any relevant platform-specific conventions for removing system focus from 's node navigable, and run the given , an empty list, and null.\n\nThe unfocusing steps do not always result in the focus changing, even when applied to the currently focused area of a top-level traversable. For example, if the currently focused area of a top-level traversable is a viewport, then it will usually keep its focus regardless until another focusable area is explicitly focused with the focusing steps.\n\nThe , given an , a , and a respectively, are as follows:\n• None If the last entry in and the last entry in are the same, pop the last entry from and the last entry from and redo this step.\n• For each entry in , in order, run these substeps:\n• If is an element, and the event applies to the element, and the element does not have a defined activation behavior, and the user has changed the element's value or its list of selected files while the control was focused without committing that change (such that it is different to what it was when the control was first focused), then:\n• None Fire an event named at the element, with the attribute initialized to true.\n• If is an element, let be . If is a object, let be that object's relevant global object. Otherwise, let be null.\n• None If is the last entry in , and is an , and the last entry in is also an , then let be the last entry in . Otherwise, let be null.\n• If is not null, fire a focus event named at , with as the related target. In some cases, e.g., if is an element's shape, a scrollable region, or a viewport, no event is fired.\n• None Apply any relevant platform-specific conventions for focusing . (For example, some platforms select the contents of a text control when that control is focused.)\n• For each entry in , in reverse order, run these substeps:\n• If is a focusable area, and the focused area of the document is not :\n• None Designate as the focused area of the document.\n• If is an element, let be . If is a object, let be that object's relevant global object. Otherwise, let be null.\n• None If is the last entry in , and is an , and the last entry in is also an , then let be the last entry in . Otherwise, let be null.\n• If is not null, fire a focus event named at , with as the related target. In some cases, e.g. if is an element's shape, a scrollable region, or a viewport, no event is fired.\n\nTo named at an element with a given related target , fire an event named at , using , with the attribute initialized to , the attribute initialized to 's node document's relevant global object, and the composed flag set.\n\nWhen a key event is to be routed in a top-level traversable, the user agent must run the following steps:\n• None Let be the currently focused area of the top-level traversable.\n• None Assert: is not null, since key events are only routed to top-level traversables that have system focus. Therefore, is a focusable area.\n• If is a that has a body element, then let be the body element of that . Otherwise, if is a object that has a non-null document element, then let be that document element.\n• If is not inert, then:\n• None Let be the result of dispatching the key event at .\n• None If is true, then let handle the key event. This might include firing a event at .\n\nThe , given a object , are as follows:\n• None If 's node navigable's top-level traversable does not have system focus, then return false.\n• \n• None If is , then return true.\n• None If the focused area of is a navigable container with a non-null content navigable, then set to the active document of that navigable container's content navigable.\n\nEach has a , which orders some or all of the focusable areas in the relative to each other. Its contents and ordering are given by the flattened tabindex-ordered focus navigation scope of the .\n\nPer the rules defining the flattened tabindex-ordered focus navigation scope, the ordering is not necessarily related to the tree order of the .\n\nIf a focusable area is omitted from the sequential focus navigation order of its , then it is unreachable via sequential focus navigation.\n\nThere can also be a . It is initially unset. The user agent may set it when the user indicates that it should be moved.\n\nFor example, the user agent could set it to the position of the user's click if the user clicks on the document contents.\n\nUser agents are required to set the sequential focus navigation starting point to the target element when navigating to a fragment.\n\nA is one of two possible values: \" \", or \" \". They are used in the below algorithms to describe the direction in which sequential focus travels at the user's request.\n\nA is one of two possible values: \" \", or \" \". They are used to describe how the sequential navigation search algorithm finds the focusable area it returns.\n\nWhen the user requests that focus move from the currently focused area of a top-level traversable to the next or previous focusable area (e.g., as the default action of pressing the key), or when the user requests that focus sequentially move to a top-level traversable in the first place (e.g., from the browser's location bar), the user agent must use the following algorithm:\n• None Let be the currently focused area of a top-level traversable, if the user requested to move focus sequentially from there, or else the top-level traversable itself, if the user instead requested to move focus from outside the top-level traversable.\n• None If there is a sequential focus navigation starting point defined and it is inside , then let be the sequential focus navigation starting point instead.\n• Let be \" \" if the user requested the next control, and \" \" if the user requested the previous control. Typically, pressing requests the next control, and pressing requests the previous control.\n• Loop: Let be \" \" if is a navigable or if is in its 's sequential focus navigation order. Otherwise, is not in its 's sequential focus navigation order; let be \" \".\n• None Let be the result of running the sequential navigation search algorithm with , , and .\n• None If is not null, then run the focusing steps for and return.\n• If is a top-level traversable, or a focusable area in the top-level traversable, the user agent should transfer focus to its own controls appropriately (if any), honouring , and then return. For example, if is backward, then the last sequentially focusable control before the browser's rendering area would be the control to focus. If the user agent has no sequentially focusable controls — a kiosk-mode browser, for instance — then the user agent may instead restart these steps with the being the top-level traversable itself.\n• None Otherwise, is a focusable area in a child navigable. Set to that child navigable's parent and return to the step labeled loop.\n\nThe , given a focusable area , sequential focus direction , and selection mechanism , consists of the following steps. They return a focusable area-or-null.\n• Pick the appropriate cell from the following table, and follow the instructions in that cell. The appropriate cell is the one that is from the column whose header describes and from the first row whose header describes and . Let be the first suitable sequentially focusable area in 's active document, if any; or else null Let be the last suitable sequentially focusable area in 's active document, if any; or else null Let be the suitable sequentially focusable area, that appears nearest after in 's , in shadow-including tree order, if any; or else null In this case, does not necessarily belong to its 's sequential focus navigation order, so we'll select the suitable item from that list that comes after in shadow-including tree order. Let be the suitable sequentially focusable area, that appears nearest before in 's , in shadow-including tree order, if any; or else null Let be the first suitable sequentially focusable area after , in 's 's sequential focus navigation order, if any; or else null Let be the last suitable sequentially focusable area before , in 's 's sequential focus navigation order, if any; or else null A is a focusable area whose DOM anchor is not inert and is sequentially focusable.\n• If is a navigable container with a non-null content navigable, then:\n• None Let be the result of running the sequential navigation search algorithm with 's content navigable, , and \" \".\n• None If is null, then return the result of running the sequential navigation search algorithm with , , and .\n\nThe attribute's getter must run these steps:\n• None Let be the DOM anchor of the focused area of this 's node document.\n• None Set to the result of retargeting against this .\n• None If 's root is not this , then return null.\n• None If is not a object, then return .\n• None If has a body element, then return that body element.\n• None If 's document element is non-null, then return that document element.\n\nThe method on the object, when invoked, must return the result of running the has focus steps with the object as the argument.\n\nThe method, when invoked, must run these steps:\n• None Let be this object's navigable.\n• None If is null, then return.\n• None If the allow focus steps given 's active document return false, then return.\n• None If is a top-level traversable, user agents are encouraged to trigger some sort of notification to indicate to the user that the page is attempting to gain focus.\n\nThe method steps are to do nothing.\n\nHistorically, the and methods actually affected the system-level focus of the system widget (e.g., tab or window) that contained the navigable, but hostile sites widely abuse this behavior to the user's detriment.\n\nThe method on elements, when invoked, must run the following steps:\n• None If the allow focus steps given the element's node document return false, then return.\n• None If the element is marked as locked for focus, then return.\n• None Run the focusing steps for the element.\n• None If the value of the dictionary member of is true, or is not present but in an implementation-defined way the user agent determines it would be best to do so, then indicate focus.\n• None If the value of the dictionary member of is false, then scroll the element into view given \"auto\", \"center\", and \"center\".\n• None Unmark the element as locked for focus.\n\nThe method, when invoked, should run the unfocusing steps for the element on which the method was called. User agents may selectively or uniformly ignore calls to this method for usability reasons.\n\nFor example, if the method is unwisely being used to remove the focus ring for aesthetics reasons, the page would become unusable by keyboard users. Ignoring calls to this method would thus allow keyboard users to interact with the page.\n\nThe , given a object , are as follows:\n• None If is allowed to use the \" \" feature, then return true.\n• If any of the following are true:\n• None 's node navigable's container, if any, is marked as locked for focus,\n\nThe content attribute allows the author to indicate that an element is to be focused as soon as the page is loaded, allowing the user to just start typing without having to manually focus the main element.\n\nWhen the attribute is specified on an element inside elements or HTML elements whose attribute is set, then it will be focused when the dialog or popover becomes shown.\n\nTo find the given an :\n• None If is a element, then return .\n• None If 's attribute is not in the no popover state, then return .\n• \n• None If is a element, then return .\n• None If 's attribute is not in the no popover state, then return .\n\nThere must not be two elements with the same nearest ancestor autofocus scoping root element that both have the attribute specified.\n\nEach has an list, initially empty.\n\nEach has an boolean, initially false.\n\nWhen an element with the attribute specified is inserted into a document, run the following steps:\n• None If the user has indicated (for example, by starting to type in a form control) that they do not wish focus to be changed, then optionally return.\n• None Let be the element's node document.\n• None If is not fully active, then return.\n• None If 's active sandboxing flag set has the sandboxed automatic features browsing context flag, then return.\n• None If the allow focus steps given return false, then return.\n• None For each of 's ancestor navigables: if 's active document's origin is not same origin with 's origin, then return.\n• None If 's autofocus processed flag is false, then remove the element from 's , and append the element to 's .\n\nWe do not check if an element is a focusable area before storing it in the list, because even if it is not a focusable area when it is inserted, it could become one by the time sees it.\n\nTo for a document , run these steps:\n• None If 's autofocus processed flag is true, then return.\n• None If is empty, then return.\n• If 's focused area is not itself, or has non-null target element, then:\n• While is not empty:\n• None If is not fully active, then remove from , and continue.\n• None If 's node navigable's top-level traversable is not the same as 's node navigable, then remove from , and continue.\n• If 's script-blocking style sheet set is not empty, then return. In this case, is the currently-best candidate, but is not ready for autofocusing. We'll try again next time is called.\n• None Let be a list consisting of the active document of 's inclusive ancestor navigables.\n• None If any in has non-null target element, then continue.\n• If is not a focusable area, then set to the result of getting the focusable area for . can contain elements which are not focusable areas. In addition to the special cases handled in the get the focusable area algorithm, this can happen because a non-focusable area element with an attribute was inserted into a document and it never became focusable, or because the element was focusable but its status changed while it was stored in .\n• If is not null, then:\n\nThis handles the automatic focusing during document load. The and methods of elements also processes the attribute.\n\nFocusing the element does not imply that the user agent has to focus the browser window if it has lost focus.\n\nThe IDL attribute must reflect the content attribute of the same name.\n\nEach element that can be activated or focused can be assigned a single key combination to activate it, using the attribute.\n\nThe exact shortcut is determined by the user agent, based on information about the user's keyboard, what keyboard shortcuts already exist on the platform, and what other shortcuts have been specified on the page, using the information provided in the attribute as a guide.\n\nIn order to ensure that a relevant keyboard shortcut is available on a wide variety of input devices, the author can provide a number of alternatives in the attribute.\n\nEach alternative consists of a single character, such as a letter or digit.\n\nUser agents can provide users with a list of the keyboard shortcuts, but authors are encouraged to do so also. The IDL attribute returns a string representing the actual key combination assigned by the user agent.\n\nAll HTML elements may have the content attribute set. The attribute's value is used by the user agent as a guide for creating a keyboard shortcut that activates or focuses the element.\n\nIf specified, the value must be an ordered set of unique space-separated tokens none of which are identical to another token and each of which must be exactly one code point in length.\n\nAn element's is a key combination derived from the element's content attribute. Initially, an element must not have an assigned access key.\n\nWhenever an element's attribute is set, changed, or removed, the user agent must update the element's assigned access key by running the following steps:\n• None If the element has no attribute, then skip to the fallback step below.\n• None Otherwise, split the attribute's value on ASCII whitespace, and let be the resulting tokens.\n• For each value in in turn, in the order the tokens appeared in the attribute's value, run the following substeps:\n• None If the value is not a string exactly one code point in length, then skip the remainder of these steps for this value.\n• None If the value does not correspond to a key on the system's keyboard, then skip the remainder of these steps for this value.\n• None If the user agent can find a mix of zero or more modifier keys that, combined with the key that corresponds to the value given in the attribute, can be used as the access key, then the user agent may assign that combination of keys as the element's assigned access key and return.\n• None Fallback: Optionally, the user agent may assign a key combination of its choosing as the element's assigned access key and then return.\n• None If this step is reached, the element has no assigned access key.\n\nOnce a user agent has selected and assigned an access key for an element, the user agent should not change the element's assigned access key unless the content attribute is changed or the element is moved to another .\n\nWhen the user presses the key combination corresponding to the assigned access key for an element, if the element defines a command, the command's Hidden State facet is false (visible), the command's Disabled State facet is also false (enabled), the element is in a document that has a non-null browsing context, and neither the element nor any of its ancestors has a attribute specified, then the user agent must trigger the Action of the command.\n\nUser agents might expose elements that have an attribute in other ways as well, e.g. in a menu displayed in response to a specific key combination.\n\nThe IDL attribute must reflect the content attribute.\n\nThe IDL attribute must return a string that represents the element's assigned access key, if any. If the element does not have one, then the IDL attribute must return the empty string.\n\nThe content attribute is an enumerated attribute with the following keywords and states:\n\nThe attribute's missing value default and invalid value default are both the state. The inherit state indicates that the element is editable (or not) based on the parent element's state.\n\nThe IDL attribute, on getting, must return the string \" \" if the content attribute is set to the true state, \" \" if the content attribute is set to the plaintext-only state, \" \" if the content attribute is set to the false state, and \" \" otherwise. On setting, if the new value is an ASCII case-insensitive match for the string \" \" then the content attribute must be removed, if the new value is an ASCII case-insensitive match for the string \" \" then the content attribute must be set to the string \" \", if the new value is an ASCII case-insensitive match for the string \" \" then the content attribute must be set to the string \" \", if the new value is an ASCII case-insensitive match for the string \" \" then the content attribute must be set to the string \" \", and otherwise the attribute setter must throw a \" \" .\n\nThe IDL attribute, on getting, must return true if the element is either an editing host or editable, and false otherwise.\n\nobjects have an associated , which is a boolean. It is initially false.\n\nThe getter steps are to return \" \" if this's design mode enabled is true; otherwise \" \".\n• None Let be the given value, converted to ASCII lowercase.\n• If is \" \" and this's design mode enabled is false, then:\n• None Reset this's active range's start and end boundary points to be at the start of this.\n• None Run the focusing steps for this's document element, if non-null.\n• None If is \" \", then set this's design mode enabled to false.\n\nAuthors are encouraged to set the 'white-space' property on editing hosts and on markup that was originally created through these editing mechanisms to the value 'pre-wrap'. Default HTML whitespace handling is not well suited to WYSIWYG editing, and line wrapping will not work correctly in some corner cases if 'white-space' is left at its default value.\n\nAn is either an HTML element with its attribute in the true state or plaintext-only state, or a child HTML element of a whose design mode enabled is true.\n\nThe definition of the terms , , and , the user interface requirements of elements that are editing hosts or editable, the , , , , , and methods, text selections, and the algorithm are defined in . [EXECCOMMAND]\n\nUser agents can support the checking of spelling and grammar of editable text, either in form controls (such as the value of elements), or in elements in an editing host (e.g. using ).\n\nFor each element, user agents must establish a , either through defaults or through preferences expressed by the user. There are three possible default behaviors for each element:\n\nThe attribute is an enumerated attribute with the following keywords and states:\n\nThe attribute's missing value default and invalid value default are both the state. The default state indicates that the element is to act according to a default behavior, possibly based on the parent element's own state, as defined below.\n\nThe IDL attribute, on getting, must return true if the element's content attribute is in the true state, or if the element's content attribute is in the default state and the element's default behavior is true-by-default, or if the element's content attribute is in the default state and the element's default behavior is inherit-by-default and the element's parent element's IDL attribute would return true; otherwise, if none of those conditions applies, then the attribute must instead return false.\n\nThe IDL attribute is not affected by user preferences that override the content attribute, and therefore might not reflect the actual spellchecking state.\n\nOn setting, if the new value is true, then the element's content attribute must be set to \" \", otherwise it must be set to \" \".\n\nUser agents should only consider the following pieces of text as checkable for the purposes of this feature:\n• The value of elements whose attributes are in the Text, Search, URL, or Email states and that are mutable (i.e. that do not have the attribute specified and that are not disabled).\n• The value of elements that do not have a attribute and that are not disabled.\n• Text in nodes that are children of editing hosts or editable elements.\n\nFor text that is part of a node, the element with which the text is associated is the element that is the immediate parent of the first character of the word, sentence, or other piece of text. For text in attributes, it is the attribute's element. For the values of and elements, it is the element itself.\n\nTo determine if a word, sentence, or other piece of text in an applicable element (as defined above) is to have spelling- and grammar-checking enabled, the UA must use the following algorithm:\n• If the user has disabled the checking for this text, then the checking is disabled.\n• Otherwise, if the user has forced the checking for this text to always be enabled, then the checking is enabled.\n• Otherwise, if the element with which the text is associated has a content attribute, then: if that attribute is in the true state, then checking is enabled; otherwise, if that attribute is in the false state, then checking is disabled.\n• Otherwise, if there is an ancestor element with a content attribute that is not in the default state, then: if the nearest such ancestor's content attribute is in the true state, then checking is enabled; otherwise, checking is disabled.\n• Otherwise, if the element's default behavior is true-by-default, then checking is enabled.\n• Otherwise, if the element's default behavior is false-by-default, then checking is disabled.\n• Otherwise, if the element's parent element has its checking enabled, then checking is enabled.\n\nIf the checking is enabled for a word/sentence/text, the user agent should indicate spelling and grammar errors in that text. User agents should take into account the other semantics given in the document when suggesting spelling and grammar corrections. User agents may use the language of the element to determine what spelling and grammar rules to use, or may use the user's preferred language settings. UAs should use element attributes such as to ensure that the resulting value is valid, where possible.\n\nIf checking is disabled, the user agent should not indicate spelling or grammar errors for that text.\n\nThis specification does not define the user interface for spelling and grammar checkers. A user agent could offer on-demand checking, could perform continuous checking while the checking is enabled, or could use other interfaces.\n\nUser agents offer writing suggestions as users type into editable regions, either in form controls (e.g., the element) or in elements in an editing host.\n\nThe content attribute is an enumerated attribute with the following keywords and states:\n\nThe attribute's missing value default is the state. The default state indicates that the element is to act according to a default behavior, possibly based on the parent element's own state, as defined below.\n\nThe attribute's invalid value default is the true state.\n\nThe of a given is determined by running the following steps:\n• None If 's content attribute is in the false state, return \" \".\n• None If 's content attribute is in the default state, has a parent element, and the computed writing suggestions value of 's parent element is \" \", then return \" \".\n\nThe IDL attribute is not affected by user preferences that override the content attribute, and therefore might not reflect the actual writing suggestions state.\n• None Set this's content attribute to the given value.\n\nUser agents should only offer suggestions within an element's scope if the result of running the following algorithm given returns true:\n• None If the user has disabled writing suggestions, then return false.\n• If none of the following conditions are true:\n• None is an element whose attribute is in either the Text, Search, Telephone, URL, or Email state and is mutable;\n• None is a element that is mutable; or\n• None is an editing host or is editable,\n• None If has an inclusive ancestor with a content attribute that's not in the default and the nearest such ancestor's content attribute is in the false state, then return false.\n\nThis specification does not define the user interface for writing suggestions. A user agent could offer on-demand suggestions, continuous suggestions as the user types, inline suggestions, autofill-like suggestions in a popup, or could use other interfaces.\n\nSome methods of entering text, for example virtual keyboards on mobile devices, and also voice input, often assist users by automatically capitalizing the first letter of sentences (when composing text in a language with this convention). A virtual keyboard that implements autocapitalization might automatically switch to showing uppercase letters (but allow the user to toggle it back to lowercase) when a letter that should be autocapitalized is about to be typed. Other types of input, for example voice input, may perform autocapitalization in a way that does not give users an option to intervene first. The attribute allows authors to control such behavior.\n\nThe attribute, as typically implemented, does not affect behavior when typing on a physical keyboard. (For this reason, as well as the ability for users to override the autocapitalization behavior in some cases or edit the text after initial input, the attribute must not be relied on for any sort of input validation.)\n\nThe attribute can be used on an editing host to control autocapitalization behavior for the hosted editable region, on an or element to control the behavior for inputting text into that element, or on a element to control the default behavior for all autocapitalize-and-autocorrect inheriting elements associated with the element.\n\nThe attribute never causes autocapitalization to be enabled for elements whose attribute is in one of the URL, Email, or Password states. (This behavior is included in the used autocapitalization hint algorithm below.)\n\nThe autocapitalization processing model is based on selecting among five , defined as follows:\n\nThe attribute is an enumerated attribute whose states are the possible autocapitalization hints. The autocapitalization hint specified by the attribute's state combines with other considerations to form the used autocapitalization hint, which informs the behavior of the user agent. The keywords for this attribute and their state mappings are as follows:\n\nThe attribute's missing value default is the default state, and its invalid value default is the sentences state.\n\nTo compute the of an element , run the following steps:\n• None If the content attribute is present on , and its value is not the empty string, return the state of the attribute.\n• None If is an autocapitalize-and-autocorrect inheriting element and has a non-null form owner, return the own autocapitalization hint of 's form owner.\n\nThe getter steps are to:\n• None Let be the own autocapitalization hint of this.\n• None If is default, then return the empty string.\n• None If is none, then return \" \".\n• None If is sentences, then return \" \".\n• None Return the keyword value corresponding to .\n\nThe setter steps are to set the content attribute to the given value.\n\nUser agents that support customizable autocapitalization behavior for a text input method and wish to allow web developers to control this functionality should, during text input into an element, compute the for the element. This will be an autocapitalization hint that describes the recommended autocapitalization behavior for text input into the element.\n\nUser agents or input methods may choose to ignore or override the used autocapitalization hint in certain circumstances.\n\nThe used autocapitalization hint for an element is computed using the following algorithm:\n• None If is an element whose attribute is in one of the URL, Email, or Password states, then return default.\n• None If is an element or a element, then return 's own autocapitalization hint.\n• None If is an editing host or an editable element, then return the own autocapitalization hint of the editing host of .\n• None Assert: this step is never reached, since text input only occurs in elements that meet one of the above criteria.\n\nSome methods of entering text assist users by automatically correcting misspelled words while typing, a process also known as autocorrection. User agents can support autocorrection of editable text, either in form controls (such as the value of elements), or in elements in an editing host (e.g., using ). Autocorrection may be accompanied by user interfaces indicating that text is about to be autocorrected or has been autocorrected, and is commonly performed when inserting punctuation characters, spaces, or new paragraphs after misspelled words. The attribute allows authors to control such behavior.\n\nThe attribute can be used on an editing host to control autocorrection behavior for the hosted editable region, on an or element to control the behavior when inserting text into that element, or on a element to control the default behavior for all autocapitalize-and-autocorrect inheriting elements associated with the element.\n\nThe attribute never causes autocorrection to be enabled for elements whose attribute is in one of the URL, E-mail, or Password states. (This behavior is included in the used autocorrection state algorithm below.)\n\nThe attribute is an enumerated attribute with the following keywords and states:\n\nThe attribute's invalid value default and missing value default are both the on state.\n\nThe getter steps are: return true if the element's used autocorrection state is on and false if the element's used autocorrection state is off. The setter steps are: if the given value is true, then the element's attribute must be set to \" \"; otherwise it must be set to \" \".\n\nTo compute the of an element , run these steps:\n• None If is an element whose attribute is in one of the URL, E-mail, or Password states, then return off.\n• None If the content attribute is present on , then return the state of the attribute.\n• None If is an autocapitalize-and-autocorrect inheriting element and has a non-null form owner, then return the state of 's form owner's attribute.\n\nUser agents can support the attribute on form controls (such as the value of elements), or in elements in an editing host (e.g., using ).\n\nThe content attribute is an enumerated attribute that specifies what kind of input mechanism would be most helpful for users entering content.\n\nThe IDL attribute must reflect the content attribute, limited to only known values.\n\nWhen is unspecified (or is in a state not supported by the user agent), the user agent should determine the default virtual keyboard to be shown. Contextual information such as the input or attributes should be used to determine which type of virtual keyboard should be presented to the user.\n\nUser agents can support the attribute on form controls (such as the value of elements), or in elements in an editing host (e.g., using ).\n\nThe content attribute is an enumerated attribute that specifies what action label (or icon) to present for the enter key on virtual keyboards. This allows authors to customize the presentation of the enter key in order to make it more helpful for users.\n\nThe IDL attribute must reflect the content attribute, limited to only known values.\n\nWhen is unspecified (or is in a state not supported by the user agent), the user agent should determine the default action label (or icon) to present. Contextual information such as the , , or attributes should be used to determine which action label (or icon) to present on the virtual keyboard.\n\nThis section defines — a common user-agent mechanism which allows users to search through the contents of the page for particular information.\n\nAccess to the find-in-page feature is provided via a . This is a user-agent provided user interface, which allows the user to specify input and the parameters of the search. This interface can appear as a result of a shortcut or a menu selection.\n\nA combination of text input and settings in the find-in-page interface represents the user . This typically includes the text that the user wants to search for, as well as optional settings (e.g., the ability to restrict the search to whole words only).\n\nThe user-agent processes page contents for a given query, and identifies zero or more , which are content ranges that satisfy the user query.\n\nOne of the matches is identified to the user as the . It is highlighted and scrolled into view. The user can navigate through the matches by advancing the active match using the find-in-page interface.\n\nWhen find-in-page begins searching for matches, all elements in the page which do not have their attribute set should have the skipped contents of their second slot become accessible, without modifying the attribute, in order to make find-in-page able to search through it. Similarly, all HTML elements with the attribute in the hidden until found state should have their skipped contents become accessible without modifying the attribute in order to make find-in-page able to search through them. After find-in-page finishes searching for matches, the elements and the elements with the attribute in the hidden until found state should have their contents become skipped again. This entire process must happen synchronously (and so is not observable to users or to author code). [CSSCONTAIN]\n\nWhen find-in-page chooses a new active match, perform the following steps:\n• None Let be the first node in the active match.\n• None Queue a global task on the user interaction task source given 's relevant global object to run the following steps:\n\nWhen find-in-page auto-expands a element like this, it will fire a event. As with the separate event that find-in-page fires, this event could be used by the page to discover what the user is typing into the find-in-page dialog. If the page creates a tiny scrollable area with the current search term and every possible next character the user could type separated by a gap, and observes which one the browser scrolls to, it can add that character to the search term and update the scrollable area to incrementally build the search term. By wrapping each possible next match in a closed element, the page could listen to events instead of events. This attack could be addressed for both events by not acting on every character the user types into the find-in-page dialog.\n\nThe find-in-page process is invoked in the context of a document, and may have an effect on the selection of that document. Specifically, the range that defines the active match can dictate the current selection. These selection updates, however, can happen at different times during the find-in-page process (e.g. upon the find-in-page interface dismissal or upon a change in the active match range).\n\nIn an implementation-defined (and likely device-specific) manner, a user can send a to the user agent. This indicates that the user wishes to close something that is currently being shown on the screen, such as a popover, menu, dialog, picker, or display mode.\n\nWhenever the user agent receives a potential close request targeted at a , it must queue a global task on the user interaction task source given 's relevant global object to perform the following :\n• If 's fullscreen element is not null, then: This does not fire any relevant event, such as ; it only causes to be eventually fired.\n• For example, if the user agent detects user frustration at repeated close request interception by the current web page, it might take this path.\n• Fire any relevant events, per or other relevant specifications. [UIEVENTS] An example of a relevant event in the model would be the event that suggests firing when the user presses the key on their keyboard. On most platforms with keyboards, this is treated as a close request, and so would trigger these close request steps. An example of relevant events that are outside of the model given in would be assistive technology synthesizing an event when the user sends a close request by using a dismiss gesture.\n• None Let be null if no such events are fired, or the object representing one of the fired events otherwise. If multiple events are fired, which one is chosen is implementation-defined.\n• None If is not null, and its canceled flag is set, then return.\n• If is not fully active, then return. This step is necessary because, if is not null, then an event listener might have caused to no longer be fully active.\n• None Let be the result of processing close watchers on 's relevant global object.\n• None If is true, then return.\n• None Alternative processing: Otherwise, there was nothing watching for a close request. The user agent may instead interpret this interaction as some other action, instead of interpreting it as a close request.\n\nOn platforms where pressing the key is interpreted as a close request, the user agent must interpret the key being pressed down as the close request, instead of the key being released. Thus, in the above algorithm, the \"relevant events\" that are fired must be the single event.\n\nOn platforms where is the close request, the user agent will first fire an appropriately-initialized event. If the web developer cancels the event by calling , then nothing further happens. But if the event fires without being canceled, then the user agent proceeds to process close watchers.\n\nOn platforms where a back button is a potential close request, no event is involved, so when the back button is pressed, the user agent proceeds directly to process close watchers. If there is an active close watcher, then that will get triggered. If there is not, then the user agent can interpret the back button press in another way, for example as a request to traverse the history by a delta of −1.\n\nEach has a , which is a struct with the following items:\n• None Next user interaction allows a new group , a boolean, initially true.\n\nMost of the complexity of the close watcher manager comes from anti-abuse protections designed to prevent developers from disabling users' history traversal abilities, for platforms where a close request's fallback action is the main mechanism of history traversal. In particular:\n\nThe grouping of close watchers is designed so that if multiple close watchers are created without history-action activation, they are grouped together, so that a user-triggered close request will close all of the close watchers in a group. This ensures that web developers can't intercept an unlimited number of close requests by creating close watchers; instead they can create a number equal to at most 1 + the number of times the user activates the page.\n\nThe next user interaction allows a new group boolean encourages web developers to create close watchers in a way that is tied to individual user activations. Without it, each user activation would increase the allowed number of groups, even if the web developer isn't \"using\" those user activations to create close watchers. In short:\n• None Allowed: user interaction; create a close watcher in its own group; user interaction; create a close watcher in a second independent group.\n• None Disallowed: user interaction; user interaction; create a close watcher in its own group; create a close watcher in a second independent group.\n• None Allowed: user interaction; user interaction; create a close watcher in its own group; create a close watcher grouped with the previous one.\n\nThis protection is not important for upholding our desired invariant of creating at most (1 + the number of times the user activates the page) groups. A determined abuser will just create one close watcher per user interaction, \"banking\" them for future abuse. But this system causes more predictable behavior for the normal case, and encourages non-abusive developers to create close watchers directly in response to user interactions.\n• None If 's next user interaction allows a new group is true, then increment 's allowed number of groups.\n• None Set 's next user interaction allows a new group to false.\n\nA is a struct with the following items:\n• None A , an algorithm accepting a boolean argument and returning a boolean. The argument indicates whether or not the cancel action algorithm can prevent the close request from proceeding via the algorithm's return value. If the boolean argument is true, then the algorithm can return either true to indicate that the caller will proceed to the close action, or false to indicate that the caller will bail out. If the argument is false, then the return value is always false. This algorithm can never throw an exception.\n• None A , an algorithm accepting no arguments and returning nothing. This algorithm can never throw an exception.\n• None A , an algorithm accepting no arguments and returning a boolean. This algorithm can never throw an exception.\n\nA close watcher if 's window's close watcher manager contains any list which contains .\n\nTo given a , a list of steps , a list of steps , and an algorithm that returns a boolean :\n• Let be a new close watcher, with\n• None If 's groups's size is less than 's allowed number of groups, then append « » to 's groups.\n• \n• None Assert: 's groups's size is at least 1 in this branch, since 's allowed number of groups is always at least 1.\n• None Set 's next user interaction allows a new group to true.\n• None If is not active, then return true.\n• None If the result of running 's get enabled state is false, then return true.\n• None If 's is running cancel action is true, then return true.\n• None If 's associated is not fully active, then return true.\n• None Let be true if is false, or if 's close watcher manager's groups's size is less than 's close watcher manager's allowed number of groups, and has history-action activation; otherwise false.\n• None Let be the result of running 's cancel action given .\n• If is false, then: Note that since these substeps consume history-action user activation, requesting to close a close watcher twice without any intervening user activation will result in being false the second time.\n• None If is not active, then return.\n• None If the result of running 's get enabled state is false, then return.\n• None If 's window's associated is not fully active, then return.\n• None For each of 's groups: remove from .\n• None Remove any item from 's groups that is empty.\n• If 's close watcher manager's groups is not empty:\n• None Let be the last item in 's close watcher manager's groups.\n• For each of , in reverse order:\n• None If the result of running 's get enabled state is true, set to true.\n• None Let be the result of requesting to close with true.\n• None If is false, then break.\n• None If 's close watcher manager's allowed number of groups is greater than 1, decrement it by 1.\n\nEach instance has an , which is a close watcher.\n• None If this's relevant global object's associated is not fully active, then throw an \" \" .\n• Let be the result of establishing a close watcher given this's relevant global object, with:\n• None cancelAction given being to return the result of firing an event named at this, with the attribute initialized to .\n• None closeAction being to fire an event named at this.\n• \n• None If [\" \"] is aborted, then destroy .\n• Add the following steps to [\" \"]:\n\nThe method steps are to request to close this's internal close watcher with false.\n\nThe method steps are to close this's internal close watcher.\n\nThe method steps are to destroy this's internal close watcher.\n\nThe following are the event handlers (and their corresponding event handler event types) that must be supported, as event handler IDL attributes, by all objects implementing the interface:\n\nCombined, the above two examples show how and differ. Because we used in the event handler for the close button, clicking that button will trigger the 's event, and thus potentially ask the user for confirmation if there is unsaved data. If we had used , then this check would be skipped. Sometimes that is appropriate, but usually is the better option for user-triggered close requests.\n\nThis specification does not define exactly what a drag-and-drop operation actually is.\n\nOn a visual medium with a pointing device, a drag operation could be the default action of a event that is followed by a series of events, and the drop could be triggered by the mouse being released.\n\nWhen using an input modality other than a pointing device, users would probably have to explicitly indicate their intention to perform a drag-and-drop operation, stating what they wish to drag and where they wish to drop it, respectively.\n\nHowever it is implemented, drag-and-drop operations must have a starting point (e.g. where the mouse was clicked, or the start of the selection or element that was selected for the drag), may have any number of intermediate steps (elements that the mouse moves over during a drag, or elements that the user picks as possible drop points as they cycle through possibilities), and must either have an end point (the element above which the mouse button was released, or the element that was finally selected), or be canceled. The end point must be the last element selected as a possible drop point before the drop occurs (so if the operation is not canceled, there must be at least one element in the middle step).\n\nTo make an element draggable, give the element a attribute, and set an event listener for that stores the data being dragged.\n\nThe event handler typically needs to check that it's not a text selection that is being dragged, and then needs to store data into the object and set the allowed effects (copy, move, link, or some combination).\n\nTo accept a drop, the drop target has to listen to the following events:\n• The event handler reports whether or not the drop target is potentially willing to accept the drop, by canceling the event.\n• The event handler specifies what feedback will be shown to the user, by setting the attribute of the associated with the event. This event also needs to be canceled.\n• The event handler has a final chance to accept or reject the drop. If the drop is accepted, the event handler must perform the drop operation on the target. This event needs to be canceled, so that the attribute's value can be used by the source. Otherwise, the drop operation is rejected.\n\nTo remove the original element (the one that was dragged) from the display, the event can be used.\n\nFor our example here, that means updating the original markup to handle that event:\n\nThe data that underlies a drag-and-drop operation, known as the , consists of the following information:\n• None A , which is a list of items representing the dragged data, each consisting of the following information: A Unicode string giving the type or format of the data, generally given by a MIME type. Some values that are not MIME types are special-cased for legacy reasons. The API does not enforce the use of MIME types; other values can be used as well. In all cases, however, the values are all converted to ASCII lowercase by the API. There is a limit of one text item per item type string. A Unicode or binary string, in some cases with a filename (itself a Unicode string), as per the drag data item kind. The drag data store item list is ordered in the order that the items were added to the list; most recently added last.\n• The following information, used to generate the UI feedback during the drag:\n• User-agent-defined default feedback information, known as the .\n• Optionally, a bitmap image and the coordinate of a point within that image, known as the and .\n• A , which is one of the following: For the event. New data can be added to the drag data store. For the event. The list of items representing dragged data can be read, including the data. No new data can be added. For all other events. The formats and kinds in the drag data store list of items representing dragged data can be enumerated, but the data itself is unavailable and no new data can be added.\n\nWhen a drag data store is , it must be initialized such that its drag data store item list is empty, it has no drag data store default feedback, it has no drag data store bitmap and drag data store hot spot coordinate, its drag data store mode is protected mode, and its drag data store allowed effects state is the string \" \".\n\nobjects are used to expose the drag data store that underlies a drag-and-drop operation.\n\nobjects that are created as part of drag-and-drop events are only valid while those events are being fired.\n\nA object is associated with a drag data store while it is valid.\n\nA object has an associated , which is a , initially empty. When the contents of the object's drag data store item list change, or when the object becomes no longer associated with a drag data store, run the following steps:\n• None Let be an empty sequence.\n• If the object is still associated with a drag data store, then:\n• None For each item in the object's drag data store item list whose kind is text, add an entry to consisting of the item's type string.\n• None If there are any items in the object's drag data store item list whose kind is File, then add an entry to consisting of the string \" \". (This value can be distinguished from the other values because it is not lowercase.)\n• None Set the object's types array to the result of creating a frozen array from .\n\nThe constructor, when invoked, must return a newly created object initialized as follows:\n• None Set the drag data store's item list to be an empty list.\n• None Set the and to \"none\".\n\nThe attribute controls the drag-and-drop feedback that the user is given during a drag-and-drop operation. When the object is created, the attribute is set to a string value. On getting, it must return its current value. On setting, if the new value is one of \" \", \" \", \" \", or \" \", then the attribute's current value must be set to the new value. Other values must be ignored.\n\nThe attribute is used in the drag-and-drop processing model to initialize the attribute during the and events. When the object is created, the attribute is set to a string value. On getting, it must return its current value. On setting, if drag data store's mode is the read/write mode and the new value is one of \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", or \" \", then the attribute's current value must be set to the new value. Otherwise, it must be left unchanged.\n\nThe attribute must return a object associated with the object.\n\nThe method must run the following steps:\n• None If the object is no longer associated with a drag data store, return. Nothing happens.\n• None If the drag data store's mode is not the read/write mode, return. Nothing happens.\n• None If is an element, then set the drag data store bitmap to the element's image (at its natural size); otherwise, set the drag data store bitmap to an image generated from the given element (the exact mechanism for doing so is not currently specified).\n• None Set the drag data store hot spot coordinate to the given , coordinate.\n\nThe attribute must return this object's types array.\n\nThe method must run the following steps:\n• None If the object is no longer associated with a drag data store, then return the empty string.\n• None If the drag data store's mode is the protected mode, then return the empty string.\n• None Let be the first argument, converted to ASCII lowercase.\n• None If equals \" \", change it to \" \".\n• None If equals \" \", change it to \" \" and set to true.\n• None If there is no item in the drag data store item list whose kind is text and whose type string is equal to , return the empty string.\n• None Let be the data of the item in the drag data store item list whose kind is Plain Unicode string and whose type string is equal to .\n• None If is true, then parse as appropriate for data, and then set to the first URL from the list, if any, or the empty string otherwise. [RFC2483]\n\nThe method must run the following steps:\n• None If the object is no longer associated with a drag data store, return. Nothing happens.\n• None If the drag data store's mode is not the read/write mode, return. Nothing happens.\n• None Let be the first argument, converted to ASCII lowercase.\n• If equals \" \", change it to \" \". If equals \" \", change it to \" \".\n• None Remove the item in the drag data store item list whose kind is text and whose type string is equal to , if there is one.\n• None Add an item to the drag data store item list whose kind is text, whose type string is equal to , and whose data is the string given by the method's second argument.\n\nThe method must run the following steps:\n• None If the object is no longer associated with a drag data store, return. Nothing happens.\n• None If the drag data store's mode is not the read/write mode, return. Nothing happens.\n• None If the method was called with no arguments, remove each item in the drag data store item list whose kind is Plain Unicode string, and return.\n• If equals \" \", change it to \" \". If equals \" \", change it to \" \".\n• None Remove the item in the drag data store item list whose kind is text and whose type string is equal to , if there is one.\n\nThe method does not affect whether any files were included in the drag, so the attribute's list might still not be empty after calling (it would still contain the \" \" string if any files were included in the drag).\n\nThe attribute must return a live sequence consisting of objects representing the files found by the following steps. Furthermore, for a given object and a given underlying file, the same object must be used each time.\n• None If the object is no longer associated with a drag data store, the is empty. Return the empty list .\n• None If the drag data store's mode is the protected mode, return the empty list .\n• None For each item in the drag data store item list whose kind is File, add the item's data (the file, in particular its name and contents, as well as its type) to the list .\n• None The files found by these steps are those in the list .\n\nThis version of the API does not expose the types of the files during the drag.\n\nEach object is associated with a object.\n\nWhile the object's object is associated with a drag data store, the object's mode is the same as the drag data store mode. When the object's object is not associated with a drag data store, the object's mode is the disabled mode. The drag data store referenced in this section (which is used only when the object is not in the disabled mode) is the drag data store with which the object's object is associated.\n\nThe attribute must return zero if the object is in the disabled mode; otherwise it must return the number of items in the drag data store item list.\n\nWhen a object is not in the disabled mode, its supported property indices are the indices of the drag data store item list.\n\nTo determine the value of an indexed property of a object, the user agent must return a object representing the th item in the drag data store. The same object must be returned each time a particular item is obtained from this object. The object must be associated with the same object as the object when it is first created.\n\nThe method must run the following steps:\n• None If the object is not in the read/write mode, return null.\n• Jump to the appropriate set of steps from the following list: If the first argument to the method is a string If there is already an item in the drag data store item list whose kind is text and whose type string is equal to the value of the method's second argument, converted to ASCII lowercase, then throw a \" \" . Otherwise, add an item to the drag data store item list whose kind is text, whose type string is equal to the value of the method's second argument, converted to ASCII lowercase, and whose data is the string given by the method's first argument. If the first argument to the method is a Add an item to the drag data store item list whose kind is File, whose type string is the of the , converted to ASCII lowercase, and whose data is the same as the 's data.\n• None Determine the value of the indexed property corresponding to the newly added item, and return that value (a newly created object).\n\nThe method must run these steps:\n• None If the object is not in the read/write mode, throw an \" \" .\n• None If the drag data store does not contain an th item, then return.\n• None Remove the th item from the drag data store.\n\nThe method, if the object is in the read/write mode, must remove all the items from the drag data store. Otherwise, it must do nothing.\n\nEach object is associated with a object.\n\nWhile the object's object is associated with a drag data store and that drag data store's drag data store item list still contains the item that the object represents, the object's mode is the same as the drag data store mode. When the object's object is not associated with a drag data store, or if the item that the object represents has been removed from the relevant drag data store item list, the object's mode is the disabled mode. The drag data store referenced in this section (which is used only when the object is not in the disabled mode) is the drag data store with which the object's object is associated.\n\nThe attribute must return the empty string if the object is in the disabled mode; otherwise it must return the string given in the cell from the second column of the following table from the row whose cell in the first column contains the drag data item kind of the item represented by the object:\n\nThe attribute must return the empty string if the object is in the disabled mode; otherwise it must return the drag data item type string of the item represented by the object.\n\nThe method must run the following steps:\n• None If the is null, return.\n• None If the object is not in the read/write mode or the read-only mode, return. The callback is never invoked.\n• None If the drag data item kind is not text, then return. The callback is never invoked.\n• None Otherwise, queue a task to invoke , passing the actual data of the item represented by the object as the argument.\n\nThe method must run the following steps:\n• None If the object is not in the read/write mode or the read-only mode, then return null.\n• None If the drag data item kind is not File, then return null.\n• None Return a new object representing the actual data of the item represented by the object.\n\nThe drag-and-drop processing model involves several events. They all use the interface.\n\nAlthough, for consistency with other event interfaces, the interface has a constructor, it is not particularly useful. In particular, there's no way to create a useful object from script, as objects have a processing and security model that is coordinated by the browser during drag-and-drops.\n\nThe attribute of the interface must return the value it was initialized to. It represents the context information for the event.\n\nWhen a user agent is required to named at an element, using a particular drag data store, and optionally with a specific , the user agent must run the following steps:\n• None If no specific was provided, set to null.\n• None Let be the relevant global object of the object of the specified target element.\n• If is , then set the drag data store mode to the read/write mode and set to true. If is , set the drag data store mode to the read-only mode.\n• None Let be a newly created object associated with the given drag data store.\n• None Set the attribute to the drag data store's drag data store allowed effects state.\n• Set the attribute to \" \" if is , , or ; to the value corresponding to the current drag operation if is or ; and to a value based on the attribute's value and the drag-and-drop source, as given by the following table, otherwise (i.e. if is or ): \" \", or, if appropriate, \" \" \" \", or, if appropriate, \" \" \" \", or, if appropriate, either \" \" or \" \" \" \", or, if appropriate, \" \" \" \" when what is being dragged is a selection from a text control \" \", or, if appropriate, either \" \" or \" \" \" \" when what is being dragged is a selection \" \", or, if appropriate, either \" \" or \" \" \" \" when what is being dragged is an element with an attribute \" \", or, if appropriate, either \" \" or \" \" \" \", or, if appropriate, either \" \" or \" \" Where the table above provides , user agents may instead use the listed alternative values if platform conventions dictate that the user has requested those alternate effects. For example, Windows platform conventions are such that dragging while holding the \"alt\" key indicates a preference for linking the data, rather than moving or copying it. Therefore, on a Windows system, if \" \" is an option according to the table above while the \"alt\" key is depressed, the user agent could select that instead of \" \" or \" \".\n• None Let be the result of creating an event using .\n• None Initialize 's attribute to , its attribute to true, its attribute to , its attribute to , and its attribute to .\n• None If is not or , then initialize 's attribute to true.\n• Initialize 's mouse and key attributes initialized according to the state of the input devices as they would be for user interaction events. If there is no relevant pointing device, then initialize 's , , , , and attributes to 0.\n• None Dispatch at the specified target element.\n• None Set the drag data store allowed effects state to the current value of 's attribute. (It can only have changed value if is .)\n• None If is true, then set the drag data store mode back to the protected mode.\n• None Break the association between and the drag data store.\n\nWhen the user attempts to begin a drag operation, the user agent must run the following steps. User agents must act as if these steps were run even if the drag actually started in another document or application and the user agent was not aware that the drag was occurring until it intersected with a document under the user agent's purview.\n• Determine what is being dragged, as follows: If the drag operation was invoked on a selection, then it is the selection that is being dragged. Otherwise, if the drag operation was invoked on a , it is the first element, going up the ancestor chain, starting at the node that the user tried to drag, that has the IDL attribute set to true. If there is no such element, then nothing is being dragged; return, the drag-and-drop operation is never started. Otherwise, the drag operation was invoked outside the user agent's purview. What is being dragged is defined by the document or application where the drag was started. elements and elements with an attribute have their attribute set to true by default.\n• None Create a drag data store. All the DND events fired subsequently by the steps in this section must use this drag data store.\n• Establish which DOM node is the , as follows: If it is a selection that is being dragged, then the source node is the node that the user started the drag on (typically the node that the user originally clicked). If the user did not specify a particular node, for example if the user just told the user agent to begin a drag of \"the selection\", then the source node is the first node containing a part of the selection. Otherwise, if it is an element that is being dragged, then the source node is the element that is being dragged. Otherwise, the source node is part of another document or application. When this specification requires that an event be dispatched at the source node in this case, the user agent must instead follow the platform-specific conventions relevant to that situation. Multiple events are fired on the source node during the course of the drag-and-drop operation.\n• Determine the , as follows: If it is a selection that is being dragged, then the list of dragged nodes contains, in tree order, every node that is partially or completely included in the selection (including all their ancestors). Otherwise, the list of dragged nodes contains only the source node, if any.\n• If it is a selection that is being dragged, then add an item to the drag data store item list, with its properties set as follows: The text of the selection Otherwise, if any files are being dragged, then add one item per file to the drag data store item list, with their properties set as follows: The MIME type of the file, if known, or \" \" otherwise. The file's contents and name. Dragging files can currently only happen from outside a navigable, for example from a file system manager application. If the drag initiated outside of the application, the user agent must add items to the drag data store item list as appropriate for the data being dragged, honoring platform conventions where appropriate; however, if the platform conventions do not use MIME types to label dragged data, the user agent must make a best-effort attempt to map the types to MIME types, and, in any case, all the drag data item type strings must be converted to ASCII lowercase. User agents may also add one or more items representing the selection or dragged element(s) in other forms, e.g. as HTML.\n• If the list of dragged nodes is not empty, then extract the microdata from those nodes into a JSON form, and add one item to the drag data store item list, with its properties set as follows:\n• \n• For each in the list of dragged nodes: If the node is an element with an attribute Add to the result of encoding-parsing-and-serializing a URL given the element's content attribute's value, relative to the element's node document. If the node is an element with a attribute Add to the result of encoding-parsing-and-serializing a URL given the element's content attribute's value, relative to the element's node document.\n• None If is still empty, then return.\n• None Let be the result of concatenating the strings in , in the order they were added, separated by a U+000D CARRIAGE RETURN U+000A LINE FEED character pair (CRLF).\n• None Add one item to the drag data store item list, with its properties set as follows:\n• Update the drag data store default feedback as appropriate for the user agent (if the user is dragging the selection, then the selection would likely be the basis for this feedback; if the user is dragging an element, then that element's rendering would be used; if the drag began outside the user agent, then the platform conventions for determining the drag feedback should be used).\n• If the event is canceled, then the drag-and-drop operation should not occur; return. Since events with no event listeners registered are, almost by definition, never canceled, drag-and-drop is always available to the user if the author does not specifically prevent it.\n• None Fire a pointer event at the source node named , and fire any other follow-up events as required by . [POINTEREVENTS]\n• Initiate the drag-and-drop operation in a manner consistent with platform conventions, and as described below. The drag-and-drop feedback must be generated from the first of the following sources that is available:\n• The drag data store bitmap, if any. In this case, the drag data store hot spot coordinate should be used as hints for where to put the cursor relative to the resulting image. The values are expressed as distances in CSS pixels from the left side and from the top side of the image respectively. [CSS]\n\nFrom the moment that the user agent is to , until the end of the drag-and-drop operation, device input events (e.g. mouse and keyboard events) must be suppressed.\n\nDuring the drag operation, the element directly indicated by the user as the drop target is called the . (Only elements can be selected by the user; other nodes must not be made available as drop targets.) However, the immediate user selection is not necessarily the , which is the element currently selected for the drop part of the drag-and-drop operation.\n\nThe immediate user selection changes as the user selects different elements (either by pointing at them with a pointing device, or by selecting them in some other way). The current target element changes when the immediate user selection changes, based on the results of event listeners in the document, as described below.\n\nBoth the current target element and the immediate user selection can be null, which means no target element is selected. They can also both be elements in other (DOM-based) documents, or other (non-web) programs altogether. (For example, a user could drag text to a word-processor.) The current target element is initially null.\n\nIn addition, there is also a , which can take on the values \" \", \" \", \" \", and \" \". Initially, it has the value \" \". It is updated by the user agent as described in the steps below.\n\nUser agents must, as soon as the drag operation is initiated and every 350ms (±200ms) thereafter for as long as the drag operation is ongoing, queue a task to perform the following steps in sequence:\n• If the user agent is still performing the previous iteration of the sequence (if any) when the next iteration becomes due, return for this iteration (effectively \"skipping missed frames\" of the drag-and-drop operation).\n• Fire a DND event named at the source node. If this event is canceled, the user agent must set the current drag operation to \" \" (no drag operation).\n• If the event was not canceled and the user has not ended the drag-and-drop operation, check the state of the drag-and-drop operation, as follows:\n• If the user is indicating a different immediate user selection than during the last iteration (or if this is the first iteration), and if this immediate user selection is not the same as the current target element, then update the current target element as follows: If the new immediate user selection is null Set the current target element to null also. If the new immediate user selection is in a non-DOM document or application Set the current target element to the immediate user selection. Fire a DND event named at the immediate user selection. If the event is canceled, then set the current target element to the immediate user selection. Otherwise, run the appropriate step from the following list: If the immediate user selection is a text control (e.g., , or an element whose attribute is in the Text state) or an editing host or editable element, and the drag data store item list has an item with the drag data item type string \" \" and the drag data item kind text Set the current target element to the immediate user selection anyway. If the immediate user selection is the body element Fire a DND event named at the body element, if there is one, or at the object, if not. Then, set the current target element to the body element, regardless of whether that event was canceled or not.\n• If the previous step caused the current target element to change, and if the previous target element was not null or a part of a non-DOM document, then fire a DND event named at the previous target element, with the new current target element as the specific .\n• If the current target element is a DOM element, then fire a DND event named at this current target element. If the event is not canceled, run the appropriate step from the following list: If the current target element is a text control (e.g., , or an element whose attribute is in the Text state) or an editing host or editable element, and the drag data store item list has an item with the drag data item type string \" \" and the drag data item kind text Set the current drag operation to either \" \" or \" \", as appropriate given the platform conventions. Otherwise (if the event is canceled), set the current drag operation based on the values of the and attributes of the object's object as they stood after the event dispatch finished, as per the following table:\n• Otherwise, if the current target element is not a DOM element, use platform-specific mechanisms to determine what drag operation is being performed (none, copy, link, or move), and set the current drag operation accordingly.\n• Update the drag feedback (e.g. the mouse cursor) to match the current drag operation, as follows: Data will be copied if dropped here. Data will be linked if dropped here. Data will be moved if dropped here. No operation allowed, dropping here will cancel the drag-and-drop operation.\n• Otherwise, if the user ended the drag-and-drop operation (e.g. by releasing the mouse button in a mouse-driven drag-and-drop interface), or if the event was canceled, then this will be the last iteration. Run the following steps, then stop the drag-and-drop operation:\n• If the current drag operation is \" \" (no drag operation), or, if the user ended the drag-and-drop operation by canceling it (e.g. by hitting the key), or if the current target element is null, then the drag operation failed. Run these substeps:\n• None If the current target element is a DOM element, fire a DND event named at it; otherwise, if it is not null, use platform-specific conventions for drag cancelation. Otherwise, the drag operation might be a success; run these substeps:\n• None If the current target element is a DOM element, fire a DND event named at it; otherwise, use platform-specific conventions for indicating a drop.\n• If the event is canceled, set the current drag operation to the value of the attribute of the object's object as it stood after the event dispatch finished. Otherwise, the event is not canceled; perform the event's default action, which depends on the exact target as follows: If the current target element is a text control (e.g., , or an element whose attribute is in the Text state) or an editing host or editable element, and the drag data store item list has an item with the drag data item type string \" \" and the drag data item kind text Insert the actual data of the first item in the drag data store item list to have a drag data item type string of \" \" and a drag data item kind that is text into the text control or editing host or editable element in a manner consistent with platform-specific conventions (e.g. inserting it at the current mouse cursor position, or inserting it at the end of the field).\n• Run the appropriate steps from the following list as the default action of the event: If is true, the current target element is a text control (see below), the current drag operation is \" \", and the source of the drag-and-drop operation is a selection in the DOM that is entirely contained within an editing host If is true, the current target element is a text control (see below), the current drag operation is \" \", and the source of the drag-and-drop operation is a selection in a text control The user agent should delete the dragged selection from the relevant text control. If is false or if the current drag operation is \" \" The drag was canceled. If the platform conventions dictate that this be represented to the user (e.g. by animating the dragged selection going back to the source of the drag-and-drop operation), then do so. The event has no default action. For the purposes of this step, a text control is a element or an element whose attribute is in one of the Text, Search, Tel, URL, Email, Password, or Number states.\n\nUser agents are encouraged to consider how to react to drags near the edge of scrollable regions. For example, if a user drags a link to the bottom of the viewport on a long page, it might make sense to scroll the page so that the user can drop the link lower on the page.\n\nThis model is independent of which object the nodes involved are from; the events are fired as described above and the rest of the processing model runs as described above, irrespective of how many documents are involved in the operation.\n\nThe following events are involved in the drag-and-drop model.\n\nAll of these events bubble, are composed, and the attribute always has the value it had after the event, defaulting to \" \" in the event.\n\nAll HTML elements may have the content attribute set. The attribute is an enumerated attribute with the following keywords and states:\n\nThe attribute's missing value default and invalid value default are both the state. The auto state uses the default behavior of the user agent.\n\nAn element with a attribute should also have a attribute that names the element for the purpose of non-visual interactions.\n\nThe IDL attribute, whose value depends on the content attribute's in the way described below, controls whether or not the element is draggable. Generally, only text selections are draggable, but elements whose IDL attribute is true become draggable as well.\n\nIf an element's content attribute has the state true, the IDL attribute must return true.\n\nOtherwise, if the element's content attribute has the state false, the IDL attribute must return false.\n\nOtherwise, the element's content attribute has the state auto. If the element is an element, an element that represents an image, or an element with an content attribute, the IDL attribute must return true; otherwise, the IDL attribute must return false.\n\nIf the IDL attribute is set to the value false, the content attribute must be set to the literal value \" \". If the IDL attribute is set to the value true, the content attribute must be set to the literal value \" \".\n\nUser agents must not make the data added to the object during the event available to scripts until the event, because otherwise, if a user were to drag sensitive information from one document to a second document, crossing a hostile third document in the process, the hostile document could intercept the data.\n\nFor the same reason, user agents must consider a drop to be successful only if the user specifically ended the drag operation — if any scripts end the drag operation, it must be considered unsuccessful (canceled) and the event must not be fired.\n\nUser agents should take care to not start drag-and-drop operations in response to script actions. For example, in a mouse-and-window environment, if a script moves a window while the user has their mouse button depressed, the UA would not consider that to start a drag. This is important because otherwise UAs could cause data to be dragged from sensitive sources and dropped into hostile documents without the user's consent.\n\nUser agents should filter potentially active (scripted) content (e.g. HTML) when it is dragged and when it is dropped, using a safelist of known-safe features. Similarly, relative URLs should be turned into absolute URLs to avoid references changing in unexpected ways. This specification does not specify how this is performed.\n\nAll HTML elements may have the content attribute set. When specified, the element won't be rendered until it becomes shown, at which point it will be rendered on top of other page content.\n\nWhen using on elements without accessibility semantics, for instance the element, authors should use the appropriate ARIA attributes to ensure the popover is accessible.\n\nInserting a popover element into an element will generally cause screen readers to announce the content when it becomes visible. Depending on the complexity or frequency of the content, this could be either useful or annoying to users of these assistive technologies. Keep this in mind when using the element or other ARIA live regions to ensure the best user experience.\n\nThe attribute is an enumerated attribute with the following keywords and states:\n\nThe attribute's missing value default is the state, and its invalid value default is the manual state.\n\nThe IDL attribute must reflect the popover attribute, limited to only known values.\n\nEvery HTML element has a , initially hidden, with these potential values:\n\nEvery has a , which is an HTML element or null, initially null.\n\nEvery HTML element has a , which is an HTML element or null, initially set to null.\n\nEvery HTML element has a , which is a boolean, initially set to false.\n\nEvery HTML element , which is a toggle task tracker or null, initially null.\n\nEvery HTML element has a , which is a close watcher or null, initially null.\n\nEvery HTML element has an , which is a string or null, initially null.\n\nThe following attribute change steps, given , , , , and , are used for all HTML elements:\n• None If is not null, then return.\n• None If is not , then return.\n• None If 's popover visibility state is in the showing state and and are in different states, then run the hide popover algorithm given , true, true, and false.\n• None Let be [\" \"] if it exists; otherwise, null.\n• None Run show popover given this, true, and .\n\nTo , given an HTML element , a boolean , and an HTML element or null :\n• None If the result of running check popover validity given , false, , and null is false, then return.\n• None Assert: is not in 's top layer.\n• None Let be 's popover showing or hiding.\n• None Let be the boolean negation of .\n• Let be the following steps:\n• None If is false, then set 's popover showing or hiding to false.\n• None If the result of firing an event named , using , with the attribute initialized to true, the attribute initialized to \" \", and the attribute initialized to \" \" at is false, then run and return.\n• If the result of running check popover validity given , false, , and is false, then run and return. Check popover validity is called again because firing the event could have disconnected this element or changed its attribute.\n• None Let be the current state of 's attribute.\n• None Let be the result of running the topmost popover ancestor algorithm given , 's showing auto popover list, , and true.\n• None Let be the result of running the topmost popover ancestor algorithm given , 's showing hint popover list, , and true.\n• If is the auto state, then:\n• None Let be the result of running the topmost popover ancestor algorithm given , 's showing auto popover list, , and true.\n• None If is null, then set to .\n• None Run hide all popovers until given , , and .\n• If is the hint state, then:\n• If is not null, then:\n• None Run hide all popovers until given , , and .\n• \n• If is not null, then:\n• None Run hide all popovers until given , , and .\n• If is auto or hint, then:\n• If is not equal to the value of 's attribute, then:\n• None If is true, then throw a \" \" .\n• If the result of running check popover validity given , false, , and is false, then run and return. Check popover validity is called again because running hide all popovers until above could have fired the event, and an event handler could have disconnected this element or changed its attribute.\n• If the result of running topmost auto or hint popover on is null, then set to true. This ensures that focus is returned to the previously-focused element only for the first popover in a stack.\n• \n• None Assert: 's showing auto popover list does not contain .\n• None Assert: 's showing hint popover list does not contain .\n• Set 's popover close watcher to the result of establishing a close watcher given 's relevant global object, with:\n• None closeAction being to hide a popover given , true, true, and false.\n• None Let be 's focused area of the document's DOM anchor.\n• None Add an element to the top layer given .\n• None If is true and 's attribute is not in the no popover state, then set 's previously focused element to .\n\nTo given an element , a string , and a string :\n• If 's popover toggle task tracker is not null, then:\n• Queue an element task given the DOM manipulation task source and to run the following steps:\n• None Fire an event named at , using , with the attribute initialized to and the attribute initialized to .\n• None Set 's popover toggle task tracker to a struct with task set to the just-queued task and old state set to .\n• None Run the hide popover algorithm given this, true, true, and true.\n\nTo given an HTML element , a boolean , a boolean , and a boolean :\n• None If the result of running check popover validity given , true, , and null is false, then return.\n• None Let be 's popover showing or hiding.\n• None If is true, then set to false.\n• Let be the following steps:\n• None If is false, then set 's popover showing or hiding to false.\n• If 's popover close watcher is not null, then:\n• If 's attribute is in the auto state or the hint state, then:\n• None Run hide all popovers until given , , and .\n• If the result of running check popover validity given , true, and is false, then run and return. Check popover validity is called again because running hide all popovers until could have disconnected or changed its attribute.\n• None Let be true if 's showing auto popover list's last item is , otherwise false.\n• \n• None Fire an event named , using , with the attribute initialized to \" \" and the attribute initialized to \" \" at .\n• None If is true and 's showing auto popover list's last item is not , then run hide all popovers until given , , and false.\n• If the result of running check popover validity given , true, , and null is false, then run and return. Check popover validity is called again because firing the event could have disconnected or changed its attribute.\n• None Request an element to be removed from the top layer given .\n• None Otherwise, remove an element from the top layer immediately given .\n• None If is true, then queue a popover toggle event task given , \" \", and \" \".\n• If is not null, then:\n• None If is true and 's focused area of the document's DOM anchor is a shadow-including inclusive descendant of , then run the focusing steps for ; the viewport should not be scrolled by doing this step.\n• None If is a boolean, set to .\n• None Otherwise, if [\" \"] exists, set to [\" \"].\n• None Let be [\" \"] if it exists; otherwise, null.\n• None If this's popover visibility state is showing, and is null or false, then run the hide popover algorithm given this, true, true, and true.\n• None Otherwise, if is null or true, then run show popover given this, true, and .\n• \n• None Let be true if this's popover visibility state is showing; otherwise false.\n• None Return true if this's popover visibility state is showing; otherwise false.\n\nTo , given an HTML element or , a boolean , and a boolean :\n• None If is an HTML element and is not in the popover showing state, then return.\n• None Assert: is a or 's popover visibility state is showing.\n• None Assert: is a or 's attribute is in the auto state or 's attribute is in the hint state.\n• \n• None Assert: 's attribute is in the hint state.\n• None Run hide popover stack until given , 's showing hint popover list, , and .\n• None If 's showing auto popover list does not contain , then return.\n• None Run hide popover stack until given , 's showing auto popover list, , and .\n\nTo , given an HTML element , a list , a boolean , and a boolean :\n• Perform the following steps at least once:\n• For each in :\n• None If is , then break.\n• None If is null, then return.\n• \n• None Run the hide popover algorithm given the last item in , , , and false.\n• None Assert: is false or 's last item is .\n• None Set to true if contains and 's last item is not , otherwise false.\n• None If is true, then set to false. and keep performing them while is true.\n\nThe hide all popovers until algorithm is used in several cases to hide all popovers that don't stay open when something happens. For example, during light-dismiss of a popover, this algorithm ensures that we close only the popovers that aren't related to the node clicked by the user.\n\nTo find the , given a , a list , an HTML element or null , and a boolean , perform the following steps. They return an HTML element or null.\n• \n• None Assert: 's attribute is not in the no popover state or the manual state.\n• None Assert: 's popover visibility state is not in the popover showing state.\n• None Let be an empty ordered map.\n• For each of :\n• None If is true, then set [ ] to .\n• Let be an algorithm which performs the following steps given :\n• None If is null, then return.\n• \n• None Set to the result of running nearest inclusive open popover given .\n• None If is null or does not contain , then return.\n• None Assert: 's attribute is not in the manual or none state.\n• None Set to true if 's attribute is in the hint state or 's attribute is in the auto state.\n• None If is false, then set to 's parent in the flat tree.\n• None If is null or [ ] is less than , then set to .\n• None Run given 's parent node within the flat tree.\n\nTo find the given a , perform the following steps. They return an HTML element or null.\n• While is not null:\n• None If 's attribute is in the auto state and 's popover visibility state is showing, then return .\n• None Set to 's parent in the flat tree.\n\nTo given a , perform the following steps. They return an HTML element or null.\n• None If 's showing hint popover list is not empty, then return 's showing hint popover list's last element.\n• None If 's showing auto popover list is not empty, then return 's showing auto popover list's last element.\n\nTo perform the for an HTML element :\n• None If the allow focus steps given 's node document return false, then return.\n• None If is a element, then run the dialog focusing steps given and return.\n• None If has the attribute, then let be .\n• None Otherwise, let be the autofocus delegate for given \" \".\n• None If is null, then return.\n• None Let be the active document of 's node document's browsing context's top-level browsing context.\n• None If 's node document's origin is not the same as the origin of , then return.\n\nTo for an HTML element given a boolean , a boolean , and a or null , perform the following steps. They throw an exception or return a boolean.\n• If 's attribute is in the no popover state, then:\n• None If is true, then throw a \" \" .\n• If any of the following are true:\n• None is true and 's popover visibility state is not showing; or\n• None is false and 's popover visibility state is not hidden,\n• If any of the following are true:\n• None is not null and 's node document is not ;\n• None is a element and its is modal is set to true; or\n• None If is true, then throw a \" \" .\n\nTo get the for a :\n• For each in 's top layer:\n• If all of the following are true:\n• None 's opened in popover mode is \" \"; and\n\nTo get the for a :\n• For each in 's top layer:\n• If all of the following are true:\n• None 's opened in popover mode is \" \"; and\n\nTo given a list , a boolean , and a boolean :\n• While is not empty:\n• None Run the hide popover algorithm given 's last item, , , and false.\n\nButtons may have the following content attributes:\n\nIf specified, the attribute value must be the ID of an element with a attribute in the same tree as the button with the attribute.\n\nThe attribute is an enumerated attribute with the following keywords and states:\n\nThe attribute's missing value default and invalid value default are both the toggle state.\n\nWhenever possible ensure the popover element is placed immediately after its triggering element in the DOM. Doing so will help ensure that the popover is exposed in a logical programmatic reading order for users of assistive technology, such as screen readers.\n\nThe IDL attribute must reflect the attribute.\n\nThe IDL attribute must reflect the attribute, limited to only known values.\n\nTo run the given a and a :\n• None If is null, then return.\n• None If is a shadow-including inclusive descendant of and is a shadow-including descendant of , then return.\n• None If 's attribute is in the show state and 's popover visibility state is showing, then return.\n• None If 's attribute is in the hide state and 's popover visibility state is hidden, then return.\n• None If 's popover visibility state is showing, then run the hide popover algorithm given , true, true, and false.\n• None Otherwise, if 's popover visibility state is hidden and the result of running check popover validity given , false, false, and null is true, then run show popover given , false, and .\n\nTo get the given a , perform the following steps. They return an HTML element or null.\n• None If is not a button, then return null.\n• None If is disabled, then return null.\n• None If has a form owner and is a submit button, then return null.\n• None Let be the result of running 's get the -associated element.\n• None If is null, then return null.\n• None If 's attribute is in the no popover state, then return null.\n\n\"Light dismiss\" means that clicking outside of a popover whose attribute is in the auto state will close the popover. This is in addition to how such popovers respond to close requests.\n• None Let be the result of running topmost auto popover given .\n• None If is null, then return.\n• None If 's is \" \", then: set 's popover pointerdown target to the result of running topmost clicked popover given .\n• If 's is \" \", then:\n• None Let be the result of running topmost clicked popover given .\n• None Let be true if is 's popover pointerdown target.\n• None If is null, then set to .\n• None If is true, then run hide all popovers until given , false, and true.\n\nTo find the , given a :\n• None Let be the result of running nearest inclusive open popover given .\n• None Let be the result of running nearest inclusive target popover for invoker given .\n• None If the result of getting the popover stack position given is greater than the result of getting the popover stack position given , then return .\n\nTo , given an HTML element :\n• None If is in , then return the index of in + the size of + 1.\n• None If is in , then return the index of in + 1.\n\nTo find the given a :\n• While is not null:\n• None If is not null and 's attribute is in the auto state and 's popover visibility state is showing, then return .\n• None Set to 's ancestor in the flat tree.\n\nThis section describes features that apply most directly to web browsers. Having said that, except where specified otherwise, the requirements defined in this section do apply to all user agents, whether they are web browsers or not.\n\nOrigins are the fundamental currency of the web's security model. Two actors in the web platform that share an origin are assumed to trust each other and to have the same authority. Actors with differing origins are considered potentially hostile versus each other, and are isolated from each other to varying degrees.\n\nFor example, if Example Bank's web site, hosted at , tries to examine the DOM of Example Charity's web site, hosted at , a \" \" will be raised.\n\nAn is one of the following:\n\nOrigins can be shared, e.g., among multiple objects. Furthermore, origins are generally immutable. Only the domain of a tuple origin can be changed, and only through the API.\n\nThe of an origin is computed as follows:\n• None If is an opaque origin, then return null.\n• None If 's domain is non-null, then return 's domain.\n\nThe is the string obtained by applying the following algorithm to the given origin :\n• None If is an opaque origin, then return \" \".\n• None Otherwise, let be 's scheme.\n• None If 's port is non-null, append a U+003A COLON character (:), and 's port, serialized, to .\n\nThe serialization of (\" \", \" \", null, null) is \" \".\n\nThere used to also be a Unicode serialization of an origin. However, it was never widely adopted.\n\nTwo origins, and , are said to be if the following algorithm returns true:\n• None If and are the same opaque origin, then return true.\n• None If and are both tuple origins and their schemes, hosts, and port are identical, then return true.\n\nTwo origins, and , are said to be if the following algorithm returns true:\n• None If and are the same opaque origin, then return true.\n• If and are both tuple origins:\n• None If and 's schemes are identical, and their domains are identical and non-null, then return true.\n• None Otherwise, if and are same origin and their domains are both null, return true.\n\nA is a tuple of a (an ASCII string) and a (a host).\n\nA is an opaque origin or a scheme-and-host.\n\nTo , given an origin , run these steps:\n• None If is an opaque origin, then return .\n• None If 's host's registrable domain is null, then return ( 's scheme, 's host).\n\nTwo sites, and , are said to be if the following algorithm returns true:\n• None If and are the same opaque origin, then return true.\n• None If or is an opaque origin, then return false.\n• None If 's and 's scheme values are different, then return false.\n• None If 's and 's host values are not equal, then return false.\n\nThe is the string obtained by applying the following algorithm to the given site :\n• None If is an opaque origin, then return \" \".\n\nIt needs to be clear from context that the serialized value is a site, not an origin, as there is not necessarily a syntactic difference between the two. For example, the origin (\" \", \" \", null, null) and the site (\" \", \" \") have the same serialization: \" \".\n\nTwo origins, and , are said to be if the following algorithm returns true:\n• None If and are the same opaque origin, then return true.\n• If and are both tuple origins, then:\n• None Let be 's host, and let be 's host.\n• None If equals and 's registrable domain is null, then return true.\n• None If 's registrable domain equals 's registrable domain and is non-null, then return true.\n\nTwo origins, and , are said to be if the following algorithm returns true:\n• None Let be the result of obtaining a site given .\n• None Let be the result of obtaining a site given .\n• None If is same site with , then return true.\n\nUnlike the same origin and same origin-domain concepts, for schemelessly same site and same site, the port and domain components are ignored.\n\nFor the reasons explained in , the same site and schemelessly same site concepts should be avoided when possible, in favor of same origin checks.\n• None If is null, then return the empty string.\n• None If this's browsing context is null, then throw a \" \" .\n• None If this's active sandboxing flag set has its sandboxed browsing context flag set, then throw a \" \" .\n• None If is null, then throw a \" \" .\n• None If the given value is not a registrable domain suffix of and is not equal to , then throw a \" \" .\n• None If the surrounding agent's agent cluster's is origin-keyed is true, then return.\n• None Set this's origin's domain to the result of parsing the given value.\n\nTo determine if a scalar value string is a registrable domain suffix of or is equal to a host :\n• None If is the empty string, then return false.\n• None Let be the result of parsing .\n• None If is failure, then return false.\n• If does not equal , then:\n• If or is not a domain, then return false. This excludes hosts that are IP addresses.\n• None If , prefixed by U+002E (.), does not match the end of , then return false.\n• If any of the following are true:\n• None , prefixed by U+002E (.), matches the end of 's public suffix,\n• None Assert: 's public suffix, prefixed by U+002E (.), matches the end of .\n\nA delivered over a secure context can request that it be placed in an origin-keyed agent cluster, by using the ` ` HTTP response header. This header is a structured header whose value must be a boolean. [STRUCTURED-FIELDS]\n\nPer the processing model in the create and initialize a new object, values that are not the structured header boolean true value (i.e., ` `) will be ignored.\n\nThe consequences of using this header are that the resulting 's agent cluster key is its origin, instead of the corresponding site. In terms of observable effects, this means that attempting to relax the same-origin restriction using will instead do nothing, and it will not be possible to send objects to cross-origin s (even if they are same site). Behind the scenes, this isolation can allow user agents to allocate implementation-specific resources corresponding to agent clusters, such as processes or threads, more efficiently.\n\nNote that within a browsing context group, the ` ` header can never cause same-origin objects to end up in different agent clusters, even if one sends the header and the other doesn't. This is prevented by means of the historical agent cluster key map.\n\nThis means that the getter can return false, even if the header is set, if the header was omitted on a previously-loaded same-origin page in the same browsing context group. Similarly, it can return true even when the header is not set.\n\nThe getter steps are to return the surrounding agent's agent cluster's is origin-keyed.\n\ns with an opaque origin can be considered unconditionally origin-keyed; for them the header has no effect, and the getter will always return true.\n\nSimilarly, s whose agent cluster's cross-origin isolation mode is not \" \" are automatically origin-keyed. The ` ` header might be useful as an additional hint to implementations about resource allocation, since the ` ` and ` ` headers used to achieve cross-origin isolation are more about ensuring that everything in the same address space opts in to being there. But adding it would have no additional observable effects on author code.\n\nAn allows a document which is navigated to in a top-level browsing context to force the creation of a new top-level browsing context, and a corresponding group. The possible values are:\n• None A , which is an opener policy value, initially \" \".\n• None A , which is string or null, initially null.\n• None A , which is an opener policy value, initially \" \".\n• None A , which is a string or null, initially null.\n\nTo , given an opener policy value , an origin , an opener policy value , and an origin :\n• None If is \" \" and is \" \", then return true.\n• None If is \" \" or is \" \", then return false.\n• None If is and is same origin with , then return true.\n\nA 's cross-origin opener policy is derived from the ` ` and ` ` HTTP response headers. These headers are structured headers whose value must be a token. [STRUCTURED-FIELDS]\n\nThe valid token values are the opener policy values. The token may also have attached parameters; of these, the \" \" parameter can have a valid URL string identifying an appropriate reporting endpoint. [REPORTING]\n\nPer the processing model described below, user agents will ignore this header if it contains an invalid value. Likewise, user agents will ignore this header if the value cannot be parsed as a token.\n\nTo given a response and an environment :\n• None Let be a new opener policy.\n• None If is a non-secure context, then return .\n• None Let be the result of getting a structured field value given ` ` and \" \" from 's header list.\n• If is not null, then:\n• If [0] is \" \", then:\n• None Let be the result of obtaining a cross-origin embedder policy from and .\n• None If 's value is compatible with cross-origin isolation, then set 's value to \" \".\n• None Otherwise, set 's value to \" \".\n• None If [0] is \" \", then set 's value to \" \".\n• None If [0] is \" \", then set 's value to \" \".\n• None If [1][\" \"] exists and it is a string, then set 's reporting endpoint to [1][\" \"].\n• None Set to the result of getting a structured field value given ` ` and \" \" from 's header list.\n• If is not null, then:\n• If [0] is \" \", then:\n• None Let be the result of obtaining a cross-origin embedder policy from and .\n• If 's value is compatible with cross-origin isolation or 's report-only value is compatible with cross-origin isolation, then set 's report-only value to \" \". Report only COOP also considers report-only COEP to assign the special \" \" value. This allows developers more freedom in the order of deployment of COOP and COEP.\n• None Otherwise, set 's report-only value to \" \".\n• None If [0] is \" \", then set 's report-only value to \" \".\n• None If [1][\" \"] exists and it is a string, then set 's report-only reporting endpoint to [1][\" \"].\n\nTo , given two origins and , and two opener policy values and :\n• If all of the following are true:\n• None 's value is \" \" or \" \"; and\n• None If the result of matching , , , and is true, then return false.\n\nTo , given a boolean , two origins and , and two opener policy values and :\n• None If is true, then return the result of with , , , and .\n• Here we are dealing with a non-popup navigation. If the result of matching , , , and is true, then return false.\n\nTo , given a boolean , two origins , , and two opener policies and :\n• If the result of checking if COOP values require a browsing context group switch given , , , 's report-only value and 's report-only value is false, then return false. Matching report-only policies allows a website to specify the same report-only opener policy on all its pages and not receive violation reports for navigations between these pages.\n• None If the result of checking if COOP values require a browsing context group switch given , , , 's value and 's report-only value is true, then return true.\n• None If the result of checking if COOP values require a browsing context group switch given , , , 's report-only value and 's value is true, then return true.\n\nAn is a struct with the following items:\n• None A boolean would need a browsing context group switch due to report-only , initially false.\n\nTo , given a browsing context , a URL , an origin , an opener policy , an opener policy enforcement result , and a referrer :\n• Let be a new opener policy enforcement result with would need a browsing context group switch due to report-only 's would need a browsing context group switch due to report-only\n• None Let be 's active document's is initial .\n• None If is true and 's initial URL is null, set 's initial URL to .\n• If the result of checking if COOP values require a browsing context group switch given , 's opener policy's value, 's origin, 's value, and is true, then:\n• If 's group's browsing context set's size is greater than 1, then:\n• None Queue a violation report for browsing context group switch when navigating to a COOP response with , \" \", , 's url, 's origin, , and .\n• None Queue a violation report for browsing context group switch when navigating away from a COOP response with 's opener policy, \" \", 's url, , 's origin, , and 's current context is navigation source.\n• If the result of checking if enforcing report-only COOP would require a browsing context group switch given , , 's origin, , and 's opener policy, is true, then:\n• None Set 's would need a browsing context group switch due to report-only to true.\n• If 's group's browsing context set's size is greater than 1, then:\n• None Queue a violation report for browsing context group switch when navigating to a COOP response with , \" \", , 's url, 's origin, , and .\n• None Queue a violation report for browsing context group switch when navigating away from a COOP response with 's opener policy, \" \", 's url, , 's origin, , and 's current context is navigation source.\n\nTo obtain a browsing context to use for a navigation response , given navigation params :\n• None If is not a top-level browsing context, then return .\n• None Let be 's needs a browsing context group switch.\n• If is not same site with :\n• If either of or have a scheme that is not an HTTP(S) scheme and the user agent considers it necessary for and to be isolated from each other (for implementation-defined reasons), optionally set to true. For example, if a user navigates from to , the user agent could force a swap. Issue #10842 tracks settling on an interoperable behavior here, instead of letting this be optional.\n• If 's user involvement is \" \", optionally set to true. Issue #6356 tracks settling on an interoperable behavior here, instead of letting this be optional.\n• If 's group's browsing context set's size is 1, optionally set to true. Some implementations swap browsing context groups here for performance reasons. The check for other contexts that could script this one is not sufficient to prevent differences in behavior that could affect a web page. Even if there are currently no other contexts, the destination page could open a window, then if the user navigates back, the previous page could expect to be able to script the opened window. Doing a swap here would break that use case.\n• If is false, then:\n• None If 's would need a browsing context group switch due to report-only is true, set 's virtual browsing context group ID to a new unique identifier.\n• Let be the first return value of creating a new top-level browsing context and document. In this case we are going to perform a browsing context group swap. will not be used by the new that we are about to create. If it is not used by other s either (such as ones in the back/forward cache), then the user agent might destroy it at this point.\n• If 's value is \" \", then set 's group's cross-origin isolation mode to either \" \" or \" \". The choice of which is implementation-defined. It is difficult on some platforms to provide the security properties required by the cross-origin isolated capability. \" \" grants access to it and \" \" does not.\n• None Let be a clone of 's final sandboxing flag set.\n• If is not empty, then:\n\nAn is an enum that describes the relationship between two browsing contexts between which an access happened. It can take the following values:\n\nTo check if an access between two browsing contexts should be reported , given two browsing contexts and , a JavaScript property name , and an environment settings object :\n• None If is not a cross-origin accessible window property name, then return.\n• None Assert: 's active document and 's active document are both fully active.\n• None Let be the list obtained by taking the origin of the active document of each of 's active document's inclusive ancestor navigables.\n• None Let be the list obtained by taking the origin of the active document of each of 's active document's inclusive ancestor navigables.\n• If any of are not same origin with 's origin, or if any of are not same origin with 's origin, then return. This avoids leaking information about cross-origin iframes to a top level frame with opener policy reporting.\n• None If 's top-level browsing context's virtual browsing context group ID is 's top-level browsing context's virtual browsing context group ID, then return.\n• None Let be a new accessor-accessed relationship with value none.\n• None If 's top-level browsing context's opener browsing context is or is an ancestor of , then set to accessor is opener.\n• None If 's top-level browsing context's opener browsing context is or is an ancestor of , then set to accessor is openee.\n• None Queue violation reports for accesses, given , 's opener policy, 's opener policy, 's active document's URL, 's active document's URL, 's top-level browsing context's initial URL, 's top-level browsing context's initial URL, 's active document's origin, 's active document's origin, 's top-level browsing context's opener origin at creation, 's top-level browsing context's opener origin at creation, 's referrer, 's referrer, , and .\n• None Let be a copy of .\n• None Set the username given and the empty string.\n• None Set the password given and the empty string.\n• None Return the serialization of with exclude fragment set to true.\n\nTo queue a violation report for browsing context group switch when navigating to a COOP response given an opener policy , a string , a URL , a URL , two origins and , and a referrer :\n• None Let be 's value.\n• None If is \" \", then set to 's report-only value.\n• None Let be an empty string.\n• None If is a URL, set to the serialization of .\n• Let be a new object containing the following properties: If and are same origin this is the sanitization of , null otherwise.\n• None Queue as \" \" for 's reporting endpoint with .\n\nTo queue a violation report for browsing context group switch when navigating away from a COOP response given an opener policy , a string , a URL , a URL , two origins and , and a boolean :\n• None Let be 's value.\n• None If is \" \", then set to 's report-only value.\n• Let be a new object containing the following properties: If and are same origin or is true, this is the sanitization of , null otherwise.\n• None Queue as \" \" for 's reporting endpoint with .\n\nTo , given an accessor-accessed relationship , two opener policies and , four URLs , , , , four origins , , and , two referrers and , a string , and an environment settings object :\n• None Let be 's value.\n• None If is \" \", then set to 's report-only value.\n• If is accessor is opener:\n• None Queue a violation report for access to an opened window, given , , , , , , , , and .\n• None Queue a violation report for access from the opener, given , , , , , , and .\n• Otherwise, if is accessor is openee:\n• None Queue a violation report for access to the opener, given , , , , , , , and .\n• None Queue a violation report for access from an opened window, given , , , , , , , and .\n• \n• None Queue a violation report for access to another window, given , , , , , , and\n• None Queue a violation report for access from another window, given , , , , , and .\n\nTo queue a violation report for access to the opener , given an opener policy , two URLs and , two origins and , a string , a referrer , and an environment settings object :\n• None Let , and be the relevant script URL and problematic position which triggered this report.\n• None Let be an empty string.\n• None If is a URL, set to the serialization of .\n• Let be a new object containing the following properties: If and are same origin, this is the sanitization of , null otherwise.\n• None Queue as \" \" for 's reporting endpoint with and .\n\nTo queue a violation report for access to an opened window , given an opener policy , three URLs , and , three origins , , and , a string , and an environment settings object :\n• None Let , and be the relevant script URL and problematic position which triggered this report.\n• Let be a new object containing the following properties: If and are same origin, this is the sanitization of , null otherwise. If and are same origin, this is the sanitization of , null otherwise.\n• None Queue as \" \" for 's reporting endpoint with and .\n\nTo queue a violation report for access to another window , given an opener policy , two URLs and , two origins and , a string , and an environment settings object :\n• None Let , and be the relevant script URL and problematic position which triggered this report.\n• Let be a new object containing the following properties: If and are same origin, this is the sanitization of , null otherwise.\n• None Queue as \" \" for 's reporting endpoint with and .\n\nTo queue a violation report for access from the opener , given an opener policy , two URLs and , two origins and , a string , and a referrer :\n• None Let be an empty string.\n• None If is a URL, set to the serialization of .\n• Let be a new object containing the following properties: If and are same origin, this is the sanitization of , null otherwise.\n• None Queue as \" \" for 's reporting endpoint with .\n\nTo queue a violation report for access from an opened window , given an opener policy , three URLs , and , three origins , , and , and a string :\n• Let be a new object containing the following properties: If and are same origin, this is the sanitization of , null otherwise. If and are same origin, this is the sanitization of , null otherwise.\n• None Queue as \" \" for 's reporting endpoint with .\n\nTo queue a violation report for access from another window , given an opener policy , two URLs and , two origins and , and a string :\n• Let be a new object containing the following properties: If and are same origin, this is the sanitization of , null otherwise.\n• None Queue as \" \" for 's reporting endpoint with .\n\nAn is one of three strings that controls the fetching of cross-origin resources without explicit permission from resource owners.\n\nAn embedder policy value is if it is \" \" or \" \".\n• None A , which is an embedder policy value, initially \" \".\n• None A , which is an embedder policy value, initially \" \".\n\nThe is a report type whose value is \" \". It is visible to s.\n\nThe ` ` and ` ` HTTP response headers allow a server to declare an embedder policy for an environment settings object. These headers are structured headers whose values must be token. [STRUCTURED-FIELDS]\n\nThe valid token values are the embedder policy values. The token may also have attached parameters; of these, the \" \" parameter can have a valid URL string identifying an appropriate reporting endpoint. [REPORTING]\n\nTo from a response and an environment :\n• None Let be a new embedder policy.\n• None If is a non-secure context, then return .\n• None Let be the result of getting a structured field value with ` ` and \" \" from 's header list.\n• If is non-null and [0] is compatible with cross-origin isolation:\n• None If [1][\" \"] exists, then set 's endpoint to [1][\" \"].\n• None Set to the result of getting a structured field value with ` ` and \" \" from 's header list.\n• If is non-null and [0] is compatible with cross-origin isolation:\n• None Set 's report only value to [0].\n• None If [1][\" \"] exists, then set 's endpoint to [1][\" \"].\n\nTo given a response , a navigable , and an embedder policy :\n• None If is not a child navigable, then return true.\n• None If 's report-only value is compatible with cross-origin isolation and 's value is not, then queue a cross-origin embedder policy inheritance violation with , \" \", 's report only reporting endpoint, \" \", and 's container document's relevant settings object.\n• None If 's value is not compatible with cross-origin isolation or 's value is compatible with cross-origin isolation, then return true.\n\nTo given a , an environment settings object , and a response :\n• None If is not a object, then return true.\n• None If 's report-only value is compatible with cross-origin isolation and 's value is not, then queue a cross-origin embedder policy inheritance violation with , \" \", 's report only reporting endpoint, \" \", and .\n• None If 's value is not compatible with cross-origin isolation or 's value is compatible with cross-origin isolation, then return true.\n\nTo given a response , a string , a string , a string , and an environment settings object :\n• None Let be the result of serializing a response URL for reporting with .\n• Let be a new object containing the following properties:\n• None Queue as the \" \" report type for on .\n\nA is a set of zero or more of the following flags, which are used to restrict the abilities that potentially untrusted resources have:\n\nWhen the user agent is to , given a string and a sandboxing flag set , it must run the following steps:\n• Add the following flags to :\n• None The sandboxed auxiliary navigation browsing context flag, unless contains the keyword.\n• None The sandboxed top-level navigation without user activation browsing context flag, unless contains the keyword.\n• The sandboxed top-level navigation with user activation browsing context flag, unless contains either the keyword or the keyword. This means that if the is present, the keyword will have no effect. For this reason, specifying both is a document conformance error.\n• The sandboxed origin browsing context flag, unless the contains the keyword. The keyword is intended for two cases. First, it can be used to allow content from the same site to be sandboxed to disable scripting, while still allowing access to the DOM of the sandboxed content. Second, it can be used to embed content from a third-party site, sandboxed to prevent that site from opening popups, etc, without preventing the embedded page from communicating back to its originating site, using the database APIs to store data, etc.\n• None The sandboxed forms browsing context flag, unless contains the keyword.\n• None The sandboxed pointer lock browsing context flag, unless contains the keyword.\n• None The sandboxed scripts browsing context flag, unless contains the keyword.\n• The sandboxed automatic features browsing context flag, unless contains the keyword (defined above). This flag is relaxed by the same keyword as scripts, because when scripts are enabled these features are trivially possible anyway, and it would be unfortunate to force authors to use script to do them when sandboxed rather than allowing them to use the declarative features.\n• None The sandbox propagates to auxiliary browsing contexts flag, unless contains the keyword.\n• None The sandboxed modals flag, unless contains the keyword.\n• None The sandboxed orientation lock browsing context flag, unless contains the keyword.\n• None The sandboxed presentation browsing context flag, unless contains the keyword.\n• None The sandboxed downloads browsing context flag, unless contains the keyword.\n• None The sandboxed custom protocols navigation browsing context flag, unless contains either the keyword, the keyword, or the keyword.\n\nEvery top-level browsing context has a , which is a sandboxing flag set. When a browsing context is created, its must be empty. It is populated by the rules for choosing a navigable and the obtain a browsing context to use for a navigation response algorithm.\n\nEvery element has an , which is a sandboxing flag set. Which flags in an sandboxing flag set are set at any particular time is determined by the element's attribute.\n\nEvery has an , which is a sandboxing flag set. When the is created, its active sandboxing flag set must be empty. It is populated by the navigation algorithm.\n\nEvery CSP list has , which is a sandboxing flag set. It is the return value of the following algorithm:\n• None Let be an empty ordered set.\n• For each policy in :\n• None If 's disposition is not \" \", then continue.\n• None If 's directive set contains a directive whose name is \" \", then append that directive to .\n• None If is empty, then return an empty sandboxing flag set.\n• None Return the result of parsing the sandboxing directive .\n\nTo for a browsing context , given null or an element , return the union of the flags that are present in the following sandboxing flag sets:\n• None If is null, then: the flags set on 's .\n• None If is an element, then: the flags set on 's sandboxing flag set.\n• None If is an element, then: the flags set on 's node document's active sandboxing flag set.\n\nA is a struct containing policies that apply to a , a , or a . It has the following items:\n• None A , which is a CSP list. It is initially empty.\n• None An , which is an embedder policy. It is initially a new embedder policy.\n• None A , which is a referrer policy. It is initially the default referrer policy.\n\nMove other policies into the policy container.\n• None Let be a new policy container.\n• None For each in 's CSP list, append a copy of into 's CSP list.\n• None If 's scheme is \" \", then return false.\n• None If is local, then return true.\n\nTo given a response and an environment-or-null :\n• None If 's URL's scheme is \" \", then return a clone of 's URL's blob URL entry's environment's policy container.\n• None Let be a new policy container.\n• None Set 's CSP list to the result of parsing a response's Content Security Policies given .\n• None If is non-null, then set 's embedder policy to the result of obtaining an embedder policy given and . Otherwise, set it to \" \".\n• None Set 's referrer policy to the result of parsing the ` ` header given . [REFERRERPOLICY]\n\nTo given a URL and four policy container-or-nulls , , , and :\n• If is not null, then:\n• If is , then:\n• None If is local and is not null, then return a clone of .\n• None If is not null, then return .\n\nTo given a , a response , and an environment :\n• If 's url is local but its scheme is not \" \":\n• None Otherwise, set 's policy container to the result of creating a policy container from a fetch response given and .\n\nAlthough typically objects cannot be accessed across origins, the web platform would not be true to itself if it did not have some legacy exceptions to that rule that the web depends upon.\n\nThis section uses the terminology and typographic conventions from the JavaScript specification. [JAVASCRIPT]\n\nWhen perform a security check is invoked, with a , , and , run these steps:\n• None If is not a or object, then return.\n• For each of CrossOriginProperties( ):\n• If SameValue( .[[Property]], ) is true, then:\n• None If is \" \" and has neither [[NeedsGet]] nor [[NeedsSet]], then return.\n• None Otherwise, if is \" \" and .[[NeedsGet]] is true, then return.\n• None Otherwise, if is \" \" and .[[NeedsSet]] is true, then return.\n• None If IsPlatformObjectSameOrigin( ) is false, then throw a \" \" .\n\nand objects both have a internal slot, whose value is initially an empty map.\n\nThe [[CrossOriginPropertyDescriptorMap]] internal slot contains a map with entries whose keys are ( , , )-tuples and values are property descriptors, as a memoization of what is visible to scripts when inspects a or object from . It is filled lazily by CrossOriginGetOwnPropertyHelper, which consults it on future lookups.\n\nUser agents should allow a value held in the map to be garbage collected along with its corresponding key when nothing holds a reference to any part of the value. That is, as long as garbage collection is not observable.\n\nFor example, with the value and its corresponding key in the map cannot be garbage collected as that would be observable.\n\nUser agents may have an optimization whereby they remove key-value pairs from the map when is set. This is not observable as cannot revisit an earlier value.\n\nFor example, setting to \" \" on www.example.com means user agents can remove all key-value pairs from the map where part of the key is www.example.com, as that can never be part of the origin again and therefore the corresponding value could never be retrieved from the map.\n• None If is a object, then return « { [[Property]]: \" \", [[NeedsGet]]: false, [[NeedsSet]]: true }, { [[Property]]: \" \" } ».\n\nThis abstract operation does not return a Completion Record.\n\nIndexed properties do not need to be safelisted in this algorithm, as they are handled directly by the object.\n\nA JavaScript property name is a if it is \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", or an array index property name.\n• None If is \" \", %Symbol.toStringTag%, %Symbol.hasInstance%, or %Symbol.isConcatSpreadable%, then return PropertyDescriptor{ [[Value]]: undefined, [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n• None Return true if the current settings object's origin is same origin-domain with 's relevant settings object's origin, and false otherwise.\n\nThis abstract operation does not return a Completion Record.\n\nHere the current settings object roughly corresponds to the \"caller\", because this check occurs before the execution context for the getter/setter/method in question makes its way onto the JavaScript execution context stack. For example, in the code , this step is invoked before the getter is reached as part of the [[Get]] algorithm for the .\n\nIf this abstract operation returns undefined and there is no custom behavior, the caller needs to throw a \" \" . In practice this is handled by the caller calling CrossOriginPropertyFallback.\n• None Let be a tuple consisting of the current settings object, 's relevant settings object, and .\n• For each of CrossOriginProperties( ):\n• If SameValue( .[[Property]], ) is true, then:\n• None If the value of the [[CrossOriginPropertyDescriptorMap]] internal slot of contains an entry whose key is , then return that entry's value.\n• If .[[NeedsGet]] and .[[NeedsSet]] are absent, then:\n• None Let be .[[Value]].\n• None If IsCallable( ) is true, then set to an anonymous built-in function, created in the current realm, that performs the same steps as the IDL operation on object .\n• \n• None If .[[NeedsGet]] is true, then set to an anonymous built-in function, created in the current realm, that performs the same steps as the getter of the IDL attribute on object .\n• None If .[[NeedsSet]] is true, then set to an anonymous built-in function, created in the current realm, that performs the same steps as the setter of the IDL attribute on object .\n• None Create an entry in the value of the [[CrossOriginPropertyDescriptorMap]] internal slot of with key and value .\n\nThis abstract operation does not return a Completion Record.\n\nThe reason that the property descriptors produced here are configurable is to preserve the invariants of the essential internal methods required by the JavaScript specification. In particular, since the value of the property can change as a consequence of navigation, it is required that the property be configurable. (However, see tc39/ecma262 issue #672 and references to it elsewhere in this specification for cases where we are not able to preserve these invariants, for compatibility with existing web content.) [JAVASCRIPT]\n\nThe reason the property descriptors are non-enumerable, despite this mismatching the same-origin behavior, is for compatibility with existing web content. See issue #3183 for details.\n• None If IsDataDescriptor( ) is true, then return .[[Value]].\n• None Let be .[[Get]].\n• None If is undefined, then throw a \" \" .\n• If .[[Set]] is present and its value is not undefined, then:\n• None Let be a new empty List.\n• None For each of CrossOriginProperties( ), append .[[Property]] to .\n• None Return the concatenation of and « \" \", %Symbol.toStringTag%, %Symbol.hasInstance%, %Symbol.isConcatSpreadable% ».\n\nThis abstract operation does not return a Completion Record.\n\nThe object has an , which is a object. It is set when the object is created, and only ever changed during navigation from the initial .\n\nA 's is its associated 's browsing context. It is either null or a browsing context.\n\nA 's is the navigable whose active document is the 's associated 's, or null if there is no such navigable.\n\nThe , , and getter steps are to return this's relevant realm.[[GlobalEnv]].[[GlobalThisValue]].\n\nThe getter steps are to return this's associated .\n\nThe object associated with a object can change in exactly one case: when the navigate algorithm creates a new object for the first page loaded in a browsing context. In that specific case, the object of the initial page is reused and gets a new object.\n• None If this's browsing context is null, then return null.\n\nFor historical reasons, objects must also have a writable, configurable, non-enumerable property named whose value is the interface object.\n\nTo , given a , an ordered map , and a URL record-or-null , perform the following steps. They return a boolean.\n• If is not null and 's blob URL entry is not null:\n• None If is not same site with , then return true.\n• None If [\" \"] exists, then set to the result of parsing [\" \"] as a boolean feature.\n\nThe , given a string , a string , and a string , are as follows:\n• None If the event loop's termination nesting level is nonzero, then return null.\n• None Let be the entry global object's associated .\n• If is not the empty string, then:\n• None Set to the result of encoding-parsing a URL given , relative to .\n• None If is failure, then throw a \" \" .\n• None If is the empty string, then set to \" \".\n• None Let be the result of tokenizing .\n• None If [\" \"] exists, then set to the result of parsing [\" \"] as a boolean feature.\n• None Let be the result of getting noopener for window open with , , and .\n• None Let be the empty string.\n• None If is true, then set to true and set to \" \".\n• Let and be the result of applying the rules for choosing a navigable given , 's node navigable, and . If there is a user agent that supports control-clicking a link to open it in a new tab, and the user control-clicks on an element whose handler uses the API to open a page in an element, the user agent could override the selection of the target browsing context to instead target a new tab.\n• None If is null, then return null.\n• If is either \" \" or \" new with no opener \", then:\n• None Set 's active browsing context's to the result of , given .\n• None Set up browsing context features for 's active browsing context given . [CSSOMVIEW]\n• None If is null, then set to a URL record representing .\n• If matches , then perform the given 's active document and . This is necessary in case is something like . If is just plain , this will do nothing.\n• None Otherwise, navigate to using , with referrerPolicy set to and exceptionsEnabled set to true.\n• \n• None If is not null, then navigate to using , with referrerPolicy set to and exceptionsEnabled set to true.\n• None If is false, then set 's active browsing context's opener browsing context to 's browsing context.\n• None If is true or is \" new with no opener \", then return null.\n\nThe method steps are to run the window open steps with , , and .\n\nThe method provides a mechanism for navigating an existing browsing context or opening and navigating an auxiliary browsing context.\n• None Let be a new ordered map.\n• None Let point at the first code point of .\n• While is not past the end of :\n• None Let be the empty string.\n• None Let be the empty string.\n• None Collect a sequence of code points that are feature separators from given . This skips past leading separators before the name.\n• None Collect a sequence of code points that are not feature separators from given . Set to the collected characters, converted to ASCII lowercase.\n• None Set to the result of normalizing the feature name .\n• While is not past the end of and the code point at in is not U+003D (=):\n• None If the code point at in is U+002C (,), or if it is not a feature separator, then break. This skips to the first U+003D (=) but does not skip past a U+002C (,) or a non-separator.\n• If the code point at in is a feature separator:\n• While is not past the end of and the code point at in is a feature separator:\n• None If the code point at in is U+002C (,), then break. This skips to the first non-separator but does not skip past a U+002C (,).\n• None Collect a sequence of code points that are not feature separators code points from given . Set to the collected code points, converted to ASCII lowercase.\n• None If is not the empty string, then set [ ] to .\n\nTo , given , , and :\n• None If [ ] exists, then return the result of parsing [ ] as a boolean feature.\n• None If is empty, then return false.\n• None If [\" \"] exists, then return the result of parsing [\" \"] as a boolean feature.\n• None Let be the result of checking if a window feature is set, given , \" \", and false.\n• None Let be the result of checking if a window feature is set, given , \" \", and false.\n• None If and are both false, then return true.\n• None Let be the result of checking if a window feature is set, given , \" \", and false.\n• None If is false, then return true.\n• None Let be the result of checking if a window feature is set, given , \" \", and true.\n• None If is false, then return true.\n• None Let be the result of checking if a window feature is set, given , \" \", and false.\n• None If is false, then return true.\n• None Let be the result of checking if a window feature is set, given , \" \", and false.\n• None If is false, then return true.\n\nA code point is a if it is ASCII whitespace, U+003D (=), or U+002C (,).\n\nFor legacy reasons, there are some aliases of some feature names. To , switch on :\n• None If is the empty string, then return true.\n• None If is \" \", then return true.\n• None If is \" \", then return true.\n• None Let be the result of parsing as an integer.\n• None If is an error, then set it to 0.\n• None Return false if is 0, and true otherwise.\n• None If this's navigable is null, then return the empty string.\n• None If this's navigable is null, then return.\n• None Set this's navigable's active session history entry's document state's navigable target name to the given value.\n\nThe name gets reset when the navigable is navigated to another origin.\n• None If is not a top-level traversable, then return.\n• None If 's is closing is true, then return.\n• None Let be the result of snapshotting source snapshot params given 's active document.\n• If all the following are true:\n• None the incumbent global object's browsing context is familiar with ; and\n• None the incumbent global object's navigable is allowed by sandboxing to navigate , given ,\n• None Queue a task on the DOM manipulation task source to definitely close .\n\nA navigable is if its active browsing context is an auxiliary browsing context that was created by a script (as opposed to by an action of the user), or if it is a top-level traversable whose session history entries's size is 1.\n\nThe getter steps are to return true if this's browsing context is null or its is closing is true; otherwise false.\n• None If this's navigable is null, then return.\n\nThe getter steps are to return this's associated 's document-tree child navigables's size.\n\nIndexed access to document-tree child navigables is defined through the [[GetOwnProperty]] internal method of the object.\n\nThe of a object is the return value of running these steps:\n• None Let be the document-tree child navigables of 's associated .\n• None Let be an empty ordered set.\n• For each of :\n• None Let be 's target name.\n• None If is the empty string, then continue.\n• None If contains a navigable whose target name is , then continue.\n• None Let be an empty ordered set.\n• For each of :\n• None Let be 's target name.\n• None If 's active document's origin is same origin with 's relevant settings object's origin, then append to .\n\nThe object supports named properties. The supported property names of a object at any moment consist of the following, in tree order according to the element that contributed them, ignoring later duplicates:\n• None the value of the content attribute for all , , , and elements that have a non-empty content attribute and are in a document tree with 's associated as their root; and\n• None the value of the content attribute for all HTML elements that have a non-empty content attribute and are in a document tree with 's associated as their root.\n\nTo determine the value of a named property in a object , the user agent must return the value obtained using the following steps:\n• Let be the list of named objects of with the name . There will be at least one such object, since the algorithm would otherwise not have been invoked by Web IDL.\n• If contains a navigable, then:\n• None Let be the first navigable container in 's associated 's descendants whose content navigable is in .\n• None Otherwise, if has only one element, return that element.\n• None Otherwise, return an rooted at 's associated , whose filter matches only named objects of with the name . (By definition, these will all be elements.)\n\nof object with the name , for the purposes of the above algorithm, consist of the following:\n• None document-tree child navigables of 's associated whose target name is ;\n• None , , , or elements that have a content attribute whose value is and are in a document tree with 's associated as their root; and\n• None HTML elements that have an content attribute whose value is and are in a document tree with 's associated as their root.\n\nSince the interface has the extended attribute, its named properties follow the rules for named properties objects rather than legacy platform objects.\n• None If this's navigable is null, then return null.\n• None If is null, then return null.\n• None If 's opener browsing context is null, then return null.\n• None If the given value is null and this's browsing context is non-null, then set this's browsing context's opener browsing context to null.\n• None If the given value is non-null, then perform ? DefinePropertyOrThrow(this, \" \", { [[Value]]: the given value, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true }).\n• None If is null, then return null.\n• None If 's parent is not null, then set to 's parent.\n• None If is null, then return null.\n• None If is null, then return null.\n• None If 's node document's origin is not same origin-domain with the current settings object's origin, then return null.\n\nFor historical reasons, the interface had some properties that represented the visibility of certain web browser interface elements.\n\nFor privacy and interoperability reasons, those properties now return values that represent whether the 's browsing context's property is true or false.\n\nEach interface element is represented by a object:\n• None If is null, then return true.\n\nThe following objects must exist for each object:\n\nThe attribute must return the location bar object.\n\nThe attribute must return the menu bar object.\n\nThe attribute must return the personal bar object.\n\nThe attribute must return the scrollbar object.\n\nThe attribute must return the status bar object.\n\nThe attribute must return the toolbar object.\n\nFor historical reasons, the attribute on the object must, on getting, return the last string it was set to, and on setting, must set itself to the new value. When the object is created, the attribute must be set to the empty string. It does not do anything else.\n\nTo , given a URL , a JavaScript execution context , null or an environment , a URL , and an origin , run these steps:\n• None Let be the value of 's Realm component.\n• Let be a new environment settings object whose algorithms are defined as follows: Return the module map of 's associated . Return the current base URL of 's associated . Return the origin of 's associated . Return the policy container of 's associated . Return true if both of the following hold, and false otherwise:\n• None 's associated is allowed to use the \" \" feature.\n• If is non-null, then:\n• None Set 's id to 's id, target browsing context to 's target browsing context, and active service worker to 's active service worker.\n• The identity of the reserved environment is considered to be fully transferred to the created environment settings object. The reserved environment is not searchable by the environment’s id from this point on.\n• None Otherwise, set 's id to a new unique opaque string, 's target browsing context to null, and 's active service worker to null.\n• None Set 's creation URL to , 's top-level creation URL to , and 's top-level origin to .\n\nA is an exotic object that wraps a ordinary object, indirecting most operations through to the wrapped object. Each browsing context has an associated object. When the browsing context is navigated, the object wrapped by the browsing context's associated object is changed.\n\nThe exotic object must use the ordinary internal methods except where it is explicitly specified otherwise below.\n\nThere is no interface object.\n\nEvery object has a internal slot representing the wrapped object.\n\nAlthough is named as a \"proxy\", it does not do polymorphic dispatch on its target's internal methods as a real proxy would, due to a desire to reuse machinery between and objects. As long as the object remains an ordinary object this is unobservable and can be implemented either way.\n• None Let be the value of the [[Window]] internal slot of this.\n• None If IsPlatformObjectSameOrigin( ) is true, then return ! OrdinaryGetPrototypeOf( ).\n• None Let be the value of the [[Window]] internal slot of this.\n• If is an array index property name, then:\n• None Let be the document-tree child navigables of 's associated .\n• If is less than 's size, then:\n• None Sort in ascending order, with being less than if 's container was inserted into 's associated earlier than 's container was.\n• If is undefined, then:\n• None If IsPlatformObjectSameOrigin( ) is true, then return undefined.\n• If IsPlatformObjectSameOrigin( ) is true, then return ! OrdinaryGetOwnProperty( , ). This is a willful violation of the JavaScript specification's invariants of the essential internal methods to maintain compatibility with existing web content. See tc39/ecma262 issue #672 for more information. [JAVASCRIPT]\n• None If is not undefined, then return .\n• If is undefined and is in 's document-tree child navigable target name property set, then:\n• None Let be the active of the named object of with the name .\n• The reason the property descriptors are non-enumerable, despite this mismatching the same-origin behavior, is for compatibility with existing web content. See issue #3183 for details.\n• None Let be the value of the [[Window]] internal slot of this.\n• If IsPlatformObjectSameOrigin( ) is true, then:\n• None If is an array index property name, return false.\n• This is a willful violation of the JavaScript specification's invariants of the essential internal methods to maintain compatibility with existing web content. See tc39/ecma262 issue #672 for more information. [JAVASCRIPT]\n• None Let be the value of the [[Window]] internal slot of this.\n• None Check if an access between two browsing contexts should be reported, given the current global object's browsing context, 's browsing context, , and the current settings object.\n• None If IsPlatformObjectSameOrigin( ) is true, then return ? OrdinaryGet(this, , ).\n\nthis is passed rather than as OrdinaryGet and CrossOriginGet will invoke the [[GetOwnProperty]] internal method.\n• None Let be the value of the [[Window]] internal slot of this.\n• None Check if an access between two browsing contexts should be reported, given the current global object's browsing context, 's browsing context, , and the current settings object.\n• If IsPlatformObjectSameOrigin( ) is true, then:\n• None If is an array index property name, then return false.\n• this is passed rather than as CrossOriginSet will invoke the [[GetOwnProperty]] internal method.\n• None Let be the value of the [[Window]] internal slot of this.\n• If IsPlatformObjectSameOrigin( ) is true, then:\n• If is an array index property name, then:\n• None If is undefined, then return true.\n• None Let be the value of the [[Window]] internal slot of this.\n• None Let be 's associated 's document-tree child navigables's size.\n• None Let be the range 0 to , exclusive.\n• None If IsPlatformObjectSameOrigin( ) is true, then return the concatenation of and OrdinaryOwnPropertyKeys( ).\n• None Return the concatenation of and ! CrossOriginOwnPropertyKeys( ).\n\nEach object is associated with a unique instance of a object, allocated when the object is created.\n\nThe exotic object is defined through a mishmash of IDL, invocation of JavaScript internal methods post-creation, and overridden JavaScript internal methods. Coupled with its scary security policy, please take extra care while implementing this excrescence.\n• None Let be a new platform object.\n• None Set the value of the [[DefaultProperties]] internal slot of to .[[OwnPropertyKeys]]().\n\nThe addition of and %Symbol.toPrimitive% own data properties, as well as the fact that all of 's IDL attributes are marked , is required by legacy code that consulted the interface, or stringified it, to determine the document URL, and then used it in a security-sensitive way. In particular, the , %Symbol.toPrimitive%, and stringifier mitigations ensure that code such as or cannot be misdirected.\n\nThe object's getter steps are to return this's relevant global object's object, if this is fully active, and null otherwise.\n\nThe object's getter steps are to return this's object.\n\nobjects provide a representation of the URL of their associated , as well as methods for navigating and reloading the associated navigable.\n\nA object has an associated , which is its relevant global object's browsing context's active document, if this object's relevant global object's browsing context is non-null, and null otherwise.\n\nA object has an associated , which is this object's relevant 's URL, if this object's relevant is non-null, and otherwise.\n\nA object has an associated . When a object is created, its ancestor origins list must be set to a object whose associated list is the list of strings that the following steps would produce:\n• None Let be a new list of strings.\n• None Let be the object's relevant .\n• \n• None Append the serialization of 's origin to .\n\nTo a object to a URL , optionally given a (default \" \"):\n• None Let be the incumbent global object's associated .\n• None If 's relevant is not yet completely loaded, and the incumbent global object does not have transient activation, then set to \" \".\n• None Navigate to using , with exceptionsEnabled set to true and historyHandling set to .\n• None If this's relevant is non-null and its origin is not same origin-domain with the entry settings object's origin, then throw a \" \" .\n• None If this's relevant is null, then return.\n• None Let be the result of encoding-parsing a URL given the given value, relative to the entry settings object.\n• None If is failure, then throw a \" \" .\n\nThe setter intentionally has no security check.\n• None If this's relevant is non-null and its origin is not same origin-domain with the entry settings object's origin, then throw a \" \" .\n• None If this's relevant is non-null and its origin is not same origin-domain with the entry settings object's origin, then throw a \" \" .\n• None If this's relevant is null, then return.\n• None If this's relevant 's origin is not same origin-domain with the entry settings object's origin, then throw a \" \" .\n• None Let be a copy of this's url.\n• Let be the result of basic URL parsing the given value, followed by \" \", with as url and scheme start state as state override. Because the URL parser ignores multiple consecutive colons, providing a value of \" \" (or even \" \") is the same as providing a value of \" \".\n• None If is failure, then throw a \" \" .\n• None If 's scheme is not an HTTP(S) scheme, then terminate these steps.\n• None If this's relevant is non-null and its origin is not same origin-domain with the entry settings object's origin, then throw a \" \" .\n• None If 's host is null, return the empty string.\n• None Return 's host, serialized, followed by \" \" and 's port, serialized.\n• None If this's relevant is null, then return.\n• None If this's relevant 's origin is not same origin-domain with the entry settings object's origin, then throw a \" \" .\n• None Let be a copy of this's url.\n• None If has an opaque path, then return.\n• None Basic URL parse the given value, with as url and host state as state override.\n• None If this's relevant is non-null and its origin is not same origin-domain with the entry settings object's origin, then throw a \" \" .\n• None If this's url's host is null, return the empty string.\n• None If this's relevant is null, then return.\n• None If this's relevant 's origin is not same origin-domain with the entry settings object's origin, then throw a \" \" .\n• None Let be a copy of this's url.\n• None If has an opaque path, then return.\n• None Basic URL parse the given value, with as url and hostname state as state override.\n• None If this's relevant is non-null and its origin is not same origin-domain with the entry settings object's origin, then throw a \" \" .\n• None If this's url's port is null, return the empty string.\n• None If this's relevant is null, then return.\n• None If this's relevant 's origin is not same origin-domain with the entry settings object's origin, then throw a \" \" .\n• None Let be a copy of this's url.\n• None If cannot have a username/password/port, then return.\n• None If the given value is the empty string, then set 's port to null.\n• None Otherwise, basic URL parse the given value, with as url and port state as state override.\n• None If this's relevant is non-null and its origin is not same origin-domain with the entry settings object's origin, then throw a \" \" .\n• None Return the result of URL path serializing this object's url.\n• None If this's relevant is null, then return.\n• None If this's relevant 's origin is not same origin-domain with the entry settings object's origin, then throw a \" \" .\n• None Let be a copy of this's url.\n• None If has an opaque path, then return.\n• None Basic URL parse the given value, with as url and path start state as state override.\n• None If this's relevant is non-null and its origin is not same origin-domain with the entry settings object's origin, then throw a \" \" .\n• None If this's url's query is either null or the empty string, return the empty string.\n• None If this's relevant is null, then return.\n• None If this's relevant 's origin is not same origin-domain with the entry settings object's origin, then throw a \" \" .\n• None Let be a copy of this's url.\n• None If the given value is the empty string, set 's query to null.\n• \n• None Let be the given value with a single leading \" \" removed, if any.\n• None Basic URL parse , with null, the relevant 's document's character encoding, as url, and query state as state override.\n• None If this's relevant is non-null and its origin is not same origin-domain with the entry settings object's origin, then throw a \" \" .\n• None If this's url's fragment is either null or the empty string, return the empty string.\n• None If this's relevant is null, then return.\n• None If this's relevant 's origin is not same origin-domain with the entry settings object's origin, then throw a \" \" .\n• None Let be a copy of this's url.\n• None Let be the given value with a single leading \" \" removed, if any.\n• None Basic URL parse , with as url and fragment state as state override.\n• If 's fragment is this's url's fragment, then return. This bailout is necessary for compatibility with deployed content, which redundantly sets on scroll. It does not apply to other mechanisms of fragment navigation, such as the setter or .\n\nUnlike the equivalent API for the and elements, the setter does not special case the empty string, to remain compatible with deployed scripts.\n• None If this's relevant is null, then return.\n• None If this's relevant 's origin is not same origin-domain with the entry settings object's origin, then throw a \" \" .\n• None Let be the result of encoding-parsing a URL given , relative to the entry settings object.\n• None If is failure, then throw a \" \" .\n• None If this's relevant is null, then return.\n• None Let be the result of encoding-parsing a URL given , relative to the entry settings object.\n• None If is failure, then throw a \" \" .\n• None -object navigate this to given \" \".\n\nThe method intentionally has no security check.\n• None If is null, then return.\n• None If 's origin is not same origin-domain with the entry settings object's origin, then throw a \" \" .\n• None If this's relevant is null, then return an empty list.\n• None If this's relevant 's origin is not same origin-domain with the entry settings object's origin, then throw a \" \" .\n\nThe details of how the attribute works are still controversial and might change. See issue #1918 for more information.\n\nAs explained earlier, the exotic object requires additional logic beyond IDL for security purposes. The object must use the ordinary internal methods except where it is explicitly specified otherwise below.\n\nAlso, every object has a internal slot representing its own properties at time of its creation.\n• None If IsPlatformObjectSameOrigin(this) is true, then return ! OrdinaryGetPrototypeOf(this).\n• If IsPlatformObjectSameOrigin(this) is true, then:\n• None If the value of the [[DefaultProperties]] internal slot of this contains , then set .[[Configurable]] to true.\n• None If is not undefined, then return .\n• If IsPlatformObjectSameOrigin(this) is true, then:\n• None If the value of the [[DefaultProperties]] internal slot of this contains , then return false.\n• None If IsPlatformObjectSameOrigin(this) is true, then return ? OrdinaryGet(this, , ).\n• None If IsPlatformObjectSameOrigin(this) is true, then return ? OrdinarySet(this, , , ).\n• None If IsPlatformObjectSameOrigin(this) is true, then return ? OrdinaryDelete(this, ).\n• None If IsPlatformObjectSameOrigin(this) is true, then return OrdinaryOwnPropertyKeys(this).\n\nThe getter steps are to return this's associated 's history object.\n\nEach object has an , a non-negative integer, initially 0.\n\nAlthough the index is not directly exposed, it can be inferred from changes to the length during synchronous navigations. In fact, that is what it's used for.\n• None If this's relevant global object's associated is not fully active, then throw a \" \" .\n• None If this's relevant global object's associated is not fully active, then throw a \" \" .\n• None If this's relevant global object's associated is not fully active, then throw a \" \" .\n• None Set this's node navigable's active session history entry's scroll restoration mode to the given value.\n• None If this's relevant global object's associated is not fully active, then throw a \" \" .\n\nThe method steps are to delta traverse this given .\n\nThe method steps are to delta traverse this given −1.\n\nThe method steps are to delta traverse this given +1.\n\nTo a object given an integer :\n• None Let be 's relevant global object's associated .\n• None If is not fully active, then throw a \" \" .\n• None If is 0, then reload 's node navigable, and return.\n• None Traverse the history by a delta given 's node navigable's traversable navigable, , and with sourceDocument set to .\n\nThe method steps are to run the shared history push/replace state steps given this, , , and \" \".\n\nThe method steps are to run the shared history push/replace state steps given this, , , and \" \".\n\nThe , given a , a value , a scalar value string-or-null , and a history handling behavior , are:\n• None Let be 's associated .\n• None If is not fully active, then throw a \" \" .\n• None Optionally, return. (For example, the user agent might disallow calls to these methods that are invoked on a timer, or from event listeners that are not triggered in response to a clear user action, or that are invoked in rapid succession.)\n• None Let be StructuredSerializeForStorage( ). Rethrow any exceptions.\n• If is not null or the empty string, then:\n• None Set to the result of encoding-parsing a URL given , relative to the relevant settings object of .\n• None If is failure, then throw a \" \" .\n• None If cannot have its URL rewritten to , then throw a \" \" . The special case for the empty string here is historical, and leads to different resulting URLs when comparing code such as (which performs URL parsing on the empty string) versus (which bypasses it).\n• None Let be the result of firing a push/replace/reload event at with navigationType set to , isSameDocument set to true, destinationURL set to , and classicHistoryAPIState set to .\n• None If is false, then return.\n• None Run the given and , with serializedData set to and historyHandling set to .\n\nUser agents may limit the number of state objects added to the session history per page. If a page hits the implementation-defined limit, user agents must remove the entry immediately after the first entry for that object in the session history after having added the new entry. (Thus the state history acts as a FIFO buffer for eviction, but as a LIFO buffer for navigation.)\n\nA can have its URL rewritten to a URL if the following algorithm returns true:\n• None If and differ in their scheme, username, password, host, or port components, then return false.\n• If 's scheme is an HTTP(S) scheme, then return true. Differences in path, query, and fragment are allowed for and URLs.\n• If 's scheme is \" \", then:\n• None If and differ in their path component, then return false. Differences in query and fragment are allowed for URLs.\n• If and differ in their path component or query components, then return false. Only differences in fragment are allowed for other types of URLs.\n\nThe navigation API, provided by the global property, provides a modern and web application-focused way of managing navigations and history entries. It is a successor to the classic and APIs.\n\nOne ability the API provides is inspecting session history entries. For example, the following will display the entries' URLs in an ordered list:\n\nThe array contains instances, which have other useful properties in addition to the and properties shown here. Note that the array only contains objects that represent the current navigable, and thus its contents are not impacted by navigations inside navigable containers such as s, or by navigations of the parent navigable in cases where the navigation API is itself being used inside an . Additionally, it only contains objects representing same-origin session history entries, meaning that if the user has visited other origins before or after the current one, there will not be corresponding s.\n\nThe navigation API can also be used to navigate, reload, or traverse through the history:\n\nNote that traversals are again limited to same-origin destinations, meaning that, for example, will be false if the previous session history entry is for a page from another origin.\n\nThe most powerful part of the navigation API is the event, which fires whenever almost any navigation or traversal occurs in the current navigable:\n\nMuch of the time, the event's property will be true, meaning this event can be canceled using :\n\nThe property will be false for some \" \" navigations, such as those taking place inside child navigables, those crossing to new origins, or when the user attempts to traverse again shortly after a previous call to prevented them from doing so.\n\nThe 's method allows intercepting a navigation and converting it into a same-document navigation:\n\nNote that the function can return a promise to represent the asynchronous progress, and success or failure, of the navigation. While the promise is still pending, browser UI can treat the navigation as ongoing (e.g., by presenting a loading spinner). Other parts of the navigation API are also sensitive to these promises, such as the return value of :\n\nEach has an associated , which is a object. Upon creation of the object, its navigation API must be set to a new object created in the object's relevant realm.\n\nThe getter steps are to return this's navigation API.\n\nThe following are the event handlers (and their corresponding event handler event types) that must be supported, as event handler IDL attributes, by all objects implementing the interface:\n\nEach has an associated , a list of objects, initially empty.\n\nEach has an associated , an integer, initially −1.\n\nThe of a is the result of running the following steps:\n• None If has entries and events disabled, then return null.\n\nA if the following steps return true:\n• None Let be 's relevant global object's associated .\n• None If is not fully active, then return true.\n• None If 's is initial is true, then return true.\n• None If 's origin is opaque, then return true.\n\nTo of a session history entry within a :\n• For each of 's entry list:\n• None If 's session history entry is equal to , then return .\n\nA key type used throughout the navigation API is the enumeration:\n\nThis captures the main web developer-visible types of \"navigations\", which (as noted elsewhere) do not exactly correspond to this standard's singular navigate algorithm. The meaning of each value is the following:\n\nThe value space of the enumeration is a superset of the value space of the specification-internal history handling behavior type. Several parts of this standard make use of this overlap, by passing in a history handling behavior to an algorithm that expects a .\n\nTo initialize the navigation API entries for a new document given a , a of , and a :\n• \n• None Let be a created in the of . will have originally come from , and thus each will be contiguous with .\n• None Set 's to the result of of within .\n\nTo given a , a of , and a :\n• None Let be a new empty .\n• None Let be a of 's .\n• \n• If a whose is , then:\n• \n• None Set to a created in the of . will have originally come from , and thus each will be contiguous with . By the end of this loop, all s that remain in represent which have been disposed while the was in bfcache.\n• None Set 's to the result of of within .\n• on the given 's to run the following steps: We delay these steps by a task to ensure that events will fire after the event. This ensures that is the first event a page receives upon .\n\nTo given a , a , and a :\n• None Let be the of .\n• None Let be a new empty .\n• If is \" \", then:\n• None Set 's to the result of of within . This algorithm is only called for same-document traversals. Cross-document traversals will instead call either or .\n• Otherwise, if is \" \", then:\n• None all items in from 's .\n• Otherwise, if is \" \", then:\n• If is \" \" or \" \", then:\n• None Let be a created in the of .\n• If 's is non-null, then given 's and the of . It is important to do this before firing the or events, since event handlers could start another navigation, or otherwise change the value of 's .\n• See the discussion for other navigation API events to understand why we do this.\n• None named at using , with its attribute initialized to and its initialized to .\n\nIn implementations, same-document navigations can cause to be disposed by falling off the back of the session history entry list. This is not yet handled by the above algorithm (or by any other part of this standard). See issue #8620 to track progress on defining the correct behavior in such cases.\n\nEach has an associated , which is a session history entry.\n\nThe of a is given by the return value of the following algorithm:\n• None If 's relevant global object's associated is not fully active, then return the empty string.\n\nThe of a is given by the return value of the following algorithm:\n• None If 's relevant global object's associated is not fully active, then return the empty string.\n\nThe of a is given by the return value of the following algorithm:\n• None If 's relevant global object's associated is not fully active, then return −1.\n• None Return the result of getting the navigation API entry index of this's session history entry within this's relevant global object's navigation API.\n• None Let be this's relevant global object's associated .\n• None If is not fully active, then return the empty string.\n• None If 's document does not equal , and 's document state's request referrer policy is \" \" or \" \", then return null.\n\nThe getter steps are to return this's key.\n\nThe getter steps are to return this's ID.\n\nThe getter steps are to return this's index.\n• None Let be this's relevant global object's associated .\n• None If is not fully active, then return false.\n• None Return true if this's session history entry's document equals , and false otherwise.\n• None If this's relevant global object's associated is not fully active, then return undefined.\n• This can in theory throw an exception, if attempting to deserialize a large when not enough memory is available.\n\nThe following are the event handlers (and their corresponding event handler event types) that must be supported, as event handler IDL attributes, by all objects implementing the interface:\n• None If this has entries and events disabled, then return the empty list.\n• Recall that because of Web IDL's sequence type conversion rules, this will create a new JavaScript array object on each call. That is, .\n\nThe getter steps are to return the current entry of this.\n• None Let be the current entry of this.\n• None If is null, then throw an \" \" .\n• None Let be StructuredSerializeForStorage( [\" \"]), rethrowing any exceptions.\n• None Fire an event named at this using , with its attribute initialized to null and its initialized to .\n• None If this has entries and events disabled, then return false.\n• None If this's current entry index is 0, then return false.\n• None If this has entries and events disabled, then return false.\n• None If this's current entry index is equal to this's entry list's size − 1, then return false.\n• None Let be the result of parsing a URL given , relative to this's relevant settings object.\n• None If is failure, then return an early error result for a \" \" .\n• None Let be this's relevant global object's associated .\n• None If [\" \"] is \" \", and the navigation must be a replace given and , then return an early error result for a \" \" .\n• None Let be [\" \"], if it exists; otherwise, undefined.\n• Let be StructuredSerializeForStorage( ). If this throws an exception, then return an early error result for that exception. It is important to perform this step early, since serialization can invoke web developer code, which in turn might change various things we check in later steps.\n• None If is not fully active, then return an early error result for an \" \" .\n• None If 's unload counter is greater than 0, then return an early error result for an \" \" .\n• None Let be [\" \"], if it exists; otherwise, undefined.\n• None Let be the result of maybe setting the upcoming non-traverse API method tracker for this given and .\n• Navigate 's node navigable to using , with historyHandling set to [\" \"] and navigationAPIState set to . Unlike and friends, which are exposed across origin-domain boundaries, can only be accessed by code with direct synchronous access to the property. Thus, we avoid the complications about attributing the source document of the navigation, and we don't need to deal with the allowed by sandboxing to navigate check and its acccompanying exceptionsEnabled flag. We just treat all navigations as if they come from the corresponding to this object itself (i.e., ).\n• If this's upcoming non-traverse API method tracker is , then: If the upcoming non-traverse API method tracker is still , this means that the navigate algorithm bailed out before ever getting to the inner event firing algorithm which would promote that upcoming API method tracker to ongoing.\n• None Return an early error result for an \" \" .\n• None Let be this's relevant global object's associated .\n• If [\" \"] exists, then set to StructuredSerializeForStorage( [\" \"]). If this throws an exception, then return an early error result for that exception. It is important to perform this step early, since serialization can invoke web developer code, which in turn might change various things we check in later steps.\n• \n• None Let be the current entry of this.\n• None If is not null, then set to 's session history entry's navigation API state.\n• None If is not fully active, then return an early error result for an \" \" .\n• None If 's unload counter is greater than 0, then return an early error result for an \" \" .\n• None Let be [\" \"], if it exists; otherwise, undefined.\n• None Let be the result of maybe setting the upcoming non-traverse API method tracker for this given and .\n• None If this's current entry index is −1, then return an early error result for an \" \" .\n• None If this's entry list does not contain a whose session history entry's navigation API key equals , then return an early error result for an \" \" .\n• None Return the result of performing a navigation API traversal given this, , and .\n• None If this's current entry index is −1 or 0, then return an early error result for an \" \" .\n• None Return the result of performing a navigation API traversal given this, , and .\n• None If this's current entry index is −1 or is equal to this's entry list's size − 1, then return an early error result for an \" \" .\n• None Return the result of performing a navigation API traversal given this, , and .\n\nTo given a , a string , and a :\n• None Let be 's relevant global object's associated .\n• None If is not fully active, then return an early error result for an \" \" .\n• None If 's unload counter is greater than 0, then return an early error result for an \" \" .\n• None Let be the current entry of .\n• None If equals 's session history entry's navigation API key, then return «[ \" \" → a promise resolved with , \" \" → a promise resolved with ]».\n• None If 's upcoming traverse API method trackers[ ] exists, then return a navigation API method tracker-derived result for 's upcoming traverse API method trackers[ ].\n• None Let be [\" \"], if it exists; otherwise, undefined.\n• None Let be the result of adding an upcoming traverse API method tracker for given and .\n• None Let be the result of snapshotting source snapshot params given .\n• Append the following session history traversal steps to :\n• None Let be the result of getting session history entries given .\n• Let be the session history entry in whose navigation API key is . If no such entry exists, then:\n• None Queue a global task on the navigation and traversal task source given 's relevant global object to reject the finished promise for with an \" \" . This path is taken if 's entry list was outdated compared to , which can occur for brief periods while all the relevant threads and processes are being synchronized in reaction to a history change.\n• If is 's active session history entry, then abort these steps. This can occur if a previously queued traversal already took us to this session history entry. In that case the previous traversal will have dealt with already.\n• None Let be the result of applying the traverse history step given by 's step to , given , , and \" \".\n• None If is \" \", then queue a global task on the navigation and traversal task source given 's relevant global object to reject the finished promise for with a new \" \" created in 's relevant realm.\n• If is \" \", then queue a global task on the navigation and traversal task source given 's relevant global object to reject the finished promise for with a new \" \" created in 's relevant realm. When is \" \" or \" \", the event was never fired, aborting the ongoing navigation would not be correct; it would result in a event without a preceding event. In the \" \" case, is fired, but the inner event firing algorithm will take care of aborting the ongoing navigation.\n\nAn for an exception is a dictionary instance given by «[ \" \" → a promise rejected with , \" \" → a promise rejected with ]».\n\nA for a navigation API method tracker is a dictionary instance given by «[ \" \" → 's committed promise, \" \" → 's finished promise ]».\n\nDuring any given navigation (in the broad sense of the word), the object needs to keep track of the following:\n\nWe also cannot assume there is only a single navigation requested at any given time, due to web developer code such as:\n\nThat is, in this scenario, we need to ensure that while navigating to , we still have the promise around so that we can reject it. We can't just get rid of any ongoing navigation promises the moment the second call to happens.\n\nWe end up accomplishing all this by associating the following with each :\n• None , an ordered map from strings to navigation API method trackers, initially empty.\n\nThe state here that is not stored in navigation API method trackers is state which needs to be tracked even for navigations that are not initiated via navigation API methods.\n\nA is a struct with the following items:\n\nAll this state is then managed via the following algorithms.\n\nTo given a , a JavaScript value , and a serialized state-or-null :\n• None Let and be new promises created in 's relevant realm.\n• The web developer doesn’t necessarily care about being rejected:\n• None They might only care about .\n• None They could be doing multiple synchronous navigations within the same task, in which case all but the last will be aborted (causing their to reject). This could be an application bug, but also could just be an emergent feature of disparate parts of the application overriding each others' actions.\n• None They might prefer to listen to other transition-failure signals instead of , e.g., the event, or the promise. As such, we mark it as handled to ensure that it never triggers events.\n• Let be a new navigation API method tracker with:\n• If does not have entries and events disabled, then set 's upcoming non-traverse API method tracker to . If has entries and events disabled, then and will never fulfill (since we never create a object for such s, and so we have nothing to resolve them with); there is no to apply to; and there is no event to include with. So, we don't need to track this API method call after all.\n\nTo given a , a string , and a JavaScript value :\n• None Let and be new promises created in 's relevant realm.\n• See the previous discussion about why this is done.\n• Let be a new navigation API method tracker with:\n\nTo given a and a string-or-null :\n• If is not null, then:\n• None If 's ongoing API method tracker is , then set 's ongoing API method tracker to null.\n\nTo given a navigation API method tracker and a :\n• If 's serialized state is not null, then set 's session history entry's navigation API state to 's serialized state. If it's null, then we're traversing to via , which does not allow changing the state. At this point, 's serialized state is no longer needed. Implementations might want to clear it out to avoid keeping it alive for the lifetime of the navigation API method tracker.\n• At this point, 's committed promise is only needed in cases where it has not yet been returned to author code. Implementations might want to clear it out to avoid keeping it alive for the lifetime of the navigation API method tracker.\n\nTo for a navigation API method tracker with a JavaScript value :\n• This will do nothing if 's committed promise was previously resolved via notify about the committed-to entry.\n\nTo given a and an optional :\n• None If was not given, then let be a new \" \" created in 's relevant realm.\n• None If 's dispatch flag is set, then set 's canceled flag to true.\n• Let be the result of extracting error information from . For example, if this algorithm is reached because of a call to , these properties would probably end up initialized based on the line of script that called . But if it's because the user clicked the stop button, these properties would probably end up with default values like the empty string or 0.\n• None Fire an event named at using , with additional attributes initialized according to .\n• None If 's ongoing API method tracker is non-null, then reject the finished promise for with .\n• If 's transition is not null, then:\n• None If this algorithm is running on 's active window's relevant agent's event loop, then continue on to the following steps. Otherwise, queue a global task on the navigation and traversal task source given 's active window to run the following steps.\n• None If 's ongoing event is null, then return.\n• None Inform the navigation API about aborting navigation in .\n• None Let be a clone of 's upcoming traverse API method trackers.\n• None For each of : reject the finished promise for with a new \" \" created in 's relevant realm.\n\nThe ongoing navigation concept is most-directly exposed to web developers through the property, which is an instance of the interface:\n\nEach has a , which is a or null, initially null.\n\nThe getter steps are to return this's transition.\n\nEach has an associated , which is a .\n\nEach has an associated , which is a .\n\nEach has an associated , which is a promise.\n\nThe getter steps are to return this's navigation type.\n\nThe getter steps are to return this's from entry.\n\nThe getter steps are to return this's finished promise.\n\nEach has an associated , which is null or a object, initially null.\n\nThe getter steps are to return this's activation.\n\nThe getter steps are to return this's old entry.\n\nThe getter steps are to return this's new entry.\n\nThe getter steps are to return this's navigation type.\n\nA major feature of the navigation API is the event. This event is fired on any navigation (in the broad sense of the word), allowing web developers to monitor such outgoing navigations. In many cases, the event is , which allows preventing the navigation from happening. And in others, the navigation can be intercepted and replaced with a same-document navigation by using the method of the class.\n\nEach has an , which is either \" \", \" \", \" \", \" \", or \" \", initially \" \".\n\nEach has a , a list of callbacks, initially empty.\n\nEach has an , an -or-null, initially null.\n\nEach has a , a serialized state or null. It is only used in some cases where the event's is \" \" or \" \", and is set appropriately when the event is fired.\n\nThe , , , , , , , , , , and attributes must return the values they are initialized to.\n• None If this's attribute was initialized to false, then throw a \" \" .\n• None If this's dispatch flag is unset, then throw an \" \" .\n• None Assert: this's interception state is either \" \" or \" \".\n• None If [\" \"] exists, then append it to this's navigation handler list.\n• \n• None If this's focus reset behavior is not null, and it is not equal to [\" \"], then the user agent may report a warning to the console indicating that the option for a previous call to was overridden by this new value, and the previous value will be ignored.\n• \n• None If this's scroll behavior is not null, and it is not equal to [\" \"], then the user agent may report a warning to the console indicating that the option for a previous call to was overridden by this new value, and the previous value will be ignored.\n• None If this's interception state is not \" \", then throw an \" \" .\n• None If 's relevant global object's associated is not fully active, then throw an \" \" .\n• None If 's attribute was initialized to false, then throw a \" \" .\n• None If 's canceled flag is set, then throw an \" \" .\n\nEach has a , which is a URL.\n\nEach has an , which is a or null.\n\nIt will be non-null if and only if the corresponds to a \" \" navigation.\n\nEach has a , which is a serialized state.\n\nEach has an , which is a boolean.\n\nThe getter steps are to return this's URL, serialized.\n• None If this's entry is null, then return the empty string.\n• None If this's entry is null, then return the empty string.\n• None If this's entry is null, then return −1.\n\nThe getter steps are to return this's is same document.\n\nThe method steps are to return StructuredDeserialize(this's state).\n\nOther parts of the standard fire the event, through a series of wrapper algorithms given in this section.\n\nTo at a given a session history entry and an optional user navigation involvement (default \" \"):\n• None Let be the result of creating an event given , in 's relevant realm.\n• None Let be a new created in 's relevant realm.\n• None Let be the in 's entry list whose session history entry is , or null if no such exists.\n• If is non-null, then:\n• None Set 's is same document to true if 's document is equal to 's relevant global object's associated ; otherwise false.\n• None Return the result of performing the inner event firing algorithm given , \" \", , , , null, null, and null.\n\nTo at a given a , a URL , a boolean , an optional user navigation involvement (default \" \"), an optional -or-null (default null), an optional entry list-or-null (default null), an optional serialized state (default StructuredSerializeForStorage(null)), and an optional serialized state-or-null (default null):\n• None Let be the result of creating an event given , in 's relevant realm.\n• None Let be a new created in 's relevant realm.\n• None Set 's is same document to .\n• None Return the result of performing the inner event firing algorithm given , , , , , , , and null.\n\nTo at a given a URL , a user navigation involvement , an -or-null , and a string :\n• None Let be the result of creating an event given , in 's relevant realm.\n• None Let be a new created in 's relevant realm.\n• None Set 's is same document to false.\n• None Return the result of performing the inner event firing algorithm given , \" \", , , , , null, and .\n\nThe consists of the following steps, given a , a , a , a , a user navigation involvement , an -or-null , an entry list-or-null , and a string-or-null :\n• If has entries and events disabled, then: These assertions holds because , , and will immediately fail when entries and events are disabled (since there are no entries to traverse to), and if our starting point is instead or , then we avoided setting the upcoming non-traverse API method tracker in the first place.\n• None If 's entry is non-null, then set to 's entry's key.\n• None Assert: is not the empty string.\n• None Promote an upcoming API method tracker to ongoing given and .\n• None Let be 's relevant global object's associated .\n• None If can have its URL rewritten to 's URL, and either 's is same document is true or is not \" \", then initialize 's to true. Otherwise, initialize it to false.\n• Let be true if all of the following are true:\n• None 's is same document is true; and\n• None either is not \" \", or 's relevant global object has history-action activation. Otherwise, let it be false.\n• \n• None is not \" \"; or then initialize 's to true. Otherwise, initialize it to false.\n• If is not null, then initialize 's to 's info. Otherwise, initialize it to undefined. At this point 's info is no longer needed and can be nulled out instead of keeping it alive for the lifetime of the navigation API method tracker.\n• None Initialize 's to true if a visual transition, to display a cached rendered state of the 's latest entry, was done by the user agent. Otherwise, initialize it to false.\n• None Set 's abort controller to a new created in 's relevant realm.\n• If all of the following are true:\n• None 's is same document is true;\n• None 's URL equals with exclude fragments set to true; and\n• None 's URL's fragment is not identical to 's fragment, then initialize 's to true. Otherwise, initialize it to false. The first condition here means that will be true for fragment navigations, but false for cases like .\n• None If is not \" \", then initialize 's to true. Otherwise, initialize it to false.\n• None If is not null, then initialize 's to a new created in 's relevant realm, associated to . Otherwise, initialize it to null.\n• None Let be the result of dispatching at .\n• \n• None If is \" \", then consume history-action user activation given 's relevant global object.\n• None If 's abort controller's signal is not aborted, then abort the ongoing navigation given .\n• None Let be true if 's interception state is not \" \" or 's 's is same document is true.\n• This is done to avoid the JavaScript execution context stack becoming empty right after any event handlers run as a result of the that could soon happen. If the stack were to become empty at that time, then it would immediately perform a microtask checkpoint, causing various promise fulfillment handlers to run interleaved with the event handlers and before any handlers passed to . This is undesirable since it means promise handler ordering vs. event handler ordering vs. handler ordering would be dependent on whether the navigation is happening with an empty JavaScript execution context stack (e.g., because the navigation was user-initiated) or with a nonempty one (e.g., because the navigation was caused by a JavaScript API call). By inserting an otherwise-unnecessary JavaScript execution context onto the stack in this step, we essentially suppress the perform a microtask checkpoint algorithm until later, thus ensuring that the sequence is always: event handlers, then handlers, then promise handlers.\n• If 's interception state is not \" \":\n• None Let be the current entry of .\n• None Set 's transition to a new created in 's relevant realm, whose navigation type is , whose from entry is , and whose finished promise is a new promise created in 's relevant realm.\n• See the discussion about other finished promises to understand why this is done.\n• If is \" \", then set 's suppress normal scroll restoration during ongoing navigation to true. If 's scroll behavior was set to \" \", then scroll restoration will happen as part of finishing the relevant . Otherwise, there will be no scroll restoration. That is, no navigation which is intercepted by goes through the normal scroll restoration process; scroll restoration for such navigations is either done manually, by the web developer, or is done after the transition.\n• If is \" \" or \" \", then run the given and 's 's URL, with serializedData set to 's classic history API state and historyHandling set to .\n• Otherwise, if is \" \", then given , 's active session history entry, and \" \". If is \" \", then this event firing is happening as part of the traversal process, and that process will take care of performing the appropriate session history entry updates.\n• \n• None Let be an empty list.\n• For each of 's navigation handler list:\n• None Append the result of invoking with an empty arguments list to .\n• If 's size is 0, then set to « a promise resolved with undefined ». There is a subtle timing difference between how waiting for all schedules its success and failure steps when given zero promises versus ≥1 promises. For most uses of waiting for all, this does not matter. However, with this API, there are so many events and promise handlers which could fire around the same time that the difference is pretty easily observable: it can cause the event/promise handler sequence to vary. (Some of the events and promises involved include: / , , , 's promises, and the promise.)\n• Wait for all of , with the following success steps:\n• None If 's relevant global object is not fully active, then abort these steps.\n• None If 's abort controller's signal is aborted, then abort these steps.\n• None If is non-null, then resolve the finished promise for .\n• None If 's transition is not null, then resolve 's transition's finished promise with undefined. and the following failure steps given reason :\n• None If 's relevant global object is not fully active, then abort these steps.\n• None If 's abort controller's signal is aborted, then abort these steps.\n• None Let be the result of extracting error information from .\n• None Fire an event named at using , with additional attributes initialized according to .\n• None If is non-null, then reject the finished promise for with .\n• None If 's transition is not null, then reject 's transition's finished promise with .\n• None Otherwise, if is non-null, then clean up .\n• Clean up after running script given 's relevant settings object. Per the previous note, this stops suppressing any potential promise handler microtasks, causing them to run at this point or later.\n• None If 's interception state is \" \", then return true.\n\nBy calling , web developers can suppress the normal scroll and focus behavior for same-document navigations, instead invoking cross-document navigation-like behavior at a later time. The algorithms in this section are called at those appropriate later points.\n• None Assert: 's interception state is not \" \" or \" \".\n• None If 's interception state is \" \", then return.\n• None If is true, then potentially process scroll behavior given .\n• None Let be 's focus changed during ongoing navigation.\n• None If is true, then return.\n• If 's focus reset behavior is \" \", then return. If it was left as null, then we treat that as \" \", and continue onward.\n• None Let be 's relevant global object's associated .\n• None Let be the autofocus delegate for .\n• None If is null, then set to 's body element.\n• None If is null, then set to 's document element.\n• None Run the focusing steps for , with 's viewport as the .\n• None If 's interception state is \" \", then return.\n• If 's scroll behavior is \" \", then return. If it was left as null, then we treat that as \" \", and continue onward.\n• None If 's was initialized to \" \" or \" \", then restore scroll position data given 's relevant global object's navigable's active session history entry.\n• \n• None Let be 's relevant global object's associated .\n• None If 's indicated part is null, then scroll to the beginning of the document given . [CSSOMVIEW]\n• None Otherwise, scroll to the fragment given .\n\nThe interface has its own dedicated section, due to its complexity.\n\nThe and attributes must return the values they were initialized to.\n\nThe attribute must return the value it was initialized to. It represents the context information for the event, or null, if the state represented is the initial state of the .\n\nThe attribute must return the value it was initialized to.\n\nThe attribute must return the value it was initialized to. It represents context information for the event, specifically the URL of the session history entry that was traversed from.\n\nThe attribute must return the value it was initialized to. It represents context information for the event, specifically the URL of the session history entry that was traversed to.\n\nThe and attributes must return the values they were initialized to.\n\nThe attribute must return the value it was initialized to.\n\nThe attribute must return the value it was initialized to. It represents the context information for the event.\n\nTo named at a with a boolean , fire an event named at , using , with the attribute initialized to , the attribute initialized to true, the attribute initialized to true, and set.\n\nThe values for and don't make any sense, since canceling the event does nothing and it's not possible to bubble past the object. They are set to true for historical reasons.\n\nThere are no -specific initialization methods.\n\nThe interface is a legacy interface which allows checking if unloading is canceled to be controlled not only by canceling the event, but by setting the attribute to a value besides the empty string. Authors should use the method, or other means of canceling events, instead of using .\n\nThe attribute controls the process of checking if unloading is canceled. When the event is created, the attribute must be set to the empty string. On getting, it must return the last value it was set to. On setting, the attribute must be set to the new value.\n\nThis attribute is a only for historical reasons. Any value besides the empty string will be treated as a request to ask the user for confirmation.\n\nA object has a , a not restored reason details or null, initially null.\n\nThe getter steps are to return this's backing struct's reason.\n\nTo given a not restored reason details and a realm :\n• None Let be a new object created in .\n\nA is a struct with the following items:\n\nThe reason is a string that represents the reason that prevented the page from being restored from back/forward cache. The string is one of the following:\n\nIn addition to the list above, a user agent might choose to expose a reason that prevented the page from being restored from back/forward cache for . These are one of the following strings:\n\nA object has a , a not restored reasons or null, initially null.\n\nThe getter steps are to return this's backing struct's src.\n\nThe getter steps are to return this's backing struct's id.\n\nThe getter steps are to return this's backing struct's name.\n• None If this's backing struct's URL is null, then return null.\n\nThe getter steps are to return this's reasons array.\n\nThe getter steps are to return this's children array.\n\nTo given a not restored reasons and a realm :\n• None Let be a new object created in .\n• None If 's reasons is null, set 's reasons array to null.\n• \n• None Let be an empty list.\n• For each of 's reasons:\n• None Create a object given and , and append it to .\n• None Set 's reasons array to the result of creating a frozen array given .\n• None If 's children is null, set 's children array to null.\n• \n• None Let be an empty list.\n• For each of 's children:\n• None Create a object given and and append it to .\n• None Set 's children array to the result of creating a frozen array given .\n\nA is a struct with the following items:\n• None , null or a list of not restored reason details, initially null.\n• None , null or a list of not restored reasons, initially null.\n\nA is its node navigable's active session history entry's document state's not restored reasons, if 's node navigable is a top-level traversable; otherwise null.\n\nThis standard contains several related concepts for grouping sequences of documents. As a brief, non-normative summary:\n• None Navigables are a user-facing representation of a sequence of documents, i.e., they represent something that can be navigated between documents. Typical examples are tabs or windows in a web browser, or s, or s in a .\n• None Traversable navigables are a special type of navigable which control the session history of themselves and of their descendant navigables. That is, in addition to their own series of documents, they represent a tree of further series of documents, plus the ability to linearly traverse back and forward through a flattened view of this tree.\n• None Browsing contexts are a developer-facing representation of a series of documents. They correspond 1:1 with objects. Each navigable can present a series of browsing contexts, with switches between those browsing contexts occuring under certain well-defined circumstances.\n\nMost of this standard works in the language of navigables, but certain APIs expose the existence of browsing context switches, and so some parts of the standard need to work in terms of browsing contexts.\n\nA presents a to the user via its active session history entry. Each navigable has:\n• None An , a new unique internal value.\n• This can only be modified within the session history traversal queue of the parent traversable navigable.\n• This can only be modified from the event loop of the active session history entry's document.\n• This is only ever set to true for top-level traversable navigables.\n• This is only ever set to true in cases where the navigable's parent is non-null.\n\nThe current session history entry and the active session history entry are usually the same, but they get out of sync when:\n• None Synchronous navigations are performed. This causes the active session history entry to temporarily step ahead of the current session history entry.\n• None A non-displayable, non-error response is received when applying the history step. This updates the current session history entry but leaves the active session history entry as-is.\n\nThis can be safely read from within the session history traversal queue of the navigable's top-level traversable. Although a navigable's active history entry can change synchronously, the new entry will always have the same .\n\nA navigable's is its active document's browsing context. If this navigable is a traversable navigable, then its active browsing context will be a top-level browsing context.\n\nA navigable's is its active browsing context's associated .\n\nThis will always equal the navigable's active document's relevant global object; this is kept in sync by the make active algorithm.\n\nA navigable's is its active session history entry's document state's navigable target name.\n\nTo get the of a node , return the navigable whose active document is 's node document, or null if there is no such navigable.\n\nTo navigable , given a document state and an optional navigable-or-null (default null):\n• Let be a new session history entry, with The caller of this algorithm is responsible for initializing 's step; it will be left as \" \" until that is complete.\n\nA is a navigable that also controls which session history entry should be the current session history entry and active session history entry for itself and its descendant navigables.\n\nIn addition to the properties of a navigable, a traversable navigable has:\n• None A , a session history traversal parallel queue, the result of starting a new session history traversal parallel queue.\n• A , which is either \" \" or \" \". See the page visibility section for the requirements on this item.\n\nTo get the of a navigable :\n• None While is not a traversable navigable, set to 's parent.\n\nCurrently, all traversable navigables are top-level traversables. Future proposals envision introducing non-top-level traversables.\n\nA user agent holds a (a set of top-level traversables). These are typically presented to the user in the form of browser windows or browser tabs.\n\nTo get the of a navigable :\n• None While 's parent is not null, set to 's parent.\n\nTo given a browsing context-or-null , a string , and an optional navigable :\n• None If is null, then set to the second return value of creating a new top-level browsing context and document.\n• None Otherwise, set to the second return value of creating a new auxiliary browsing context and document given .\n• Let be a new document state, with null if is null; otherwise, 's origin\n• None Let be a new traversable navigable.\n• None If is non-null, then legacy-clone a traversable storage shed given 's top-level traversable and . [STORAGE]\n\nTo given a URL and an optional POST resource-or-null (default null):\n• None Let be the result of creating a new top-level traversable given null and the empty string.\n• Navigate to using 's active document, with documentResource set to . We treat these initial navigations as navigating itself, which will ensure all relevant security checks pass.\n\nCertain elements (for example, elements) can present a navigable to the user. These elements are called .\n\nEach navigable container has a , which is either a navigable or null. It is initially null.\n\nThe of a navigable is the navigable container whose content navigable is , or null if there is no such element.\n\nThe of a navigable is the result of running these steps:\n• None If 's container is null, then return null.\n• This is equal to 's container's shadow-including root as 's container has to be connected.\n\nThe of a is the result of running these steps:\n• None If 's node navigable is null, then return null.\n\nA navigable is a of another navigable when 's parent is . We can also just say that a navigable \"is a child navigable\", which means that its parent is non-null.\n\nAll child navigables are the content navigable of their container.\n\nThe of a navigable container is the result of running these steps:\n• None If 's content navigable is null, then return null.\n• None If 's origin and 's node document's origin are not same origin-domain, then return null.\n\nThe of a navigable container is the result of running these steps:\n• None If 's content navigable is null, then return null.\n\nTo , given an element :\n• None Let and be the result of creating a new browsing context and document given 's node document, , and .\n• None If has a content attribute, then set to the value of that attribute.\n• Let be a new document state, with\n• None Let be a new navigable.\n• None Initialize the navigable given and .\n• Append the following session history traversal steps to :\n• None Let be the result of getting session history entries for .\n• None Let be the first session history entry in whose document state equals .\n• None Let be a new nested history whose id is 's id and entries list is « ».\n\nA useful method for visualizing sequences of documents, and in particular navigables and their session history entries, is the . A typical Jake diagram is the following:\n\nHere, each numbered column denotes a possible value for the traversable's session history step. Each labeled row depicts a navigable, as it transitions between different URLs and documents. The first, labeled , being the top-level traversable, and the others being child navigables. The documents are given by the background color of each cell, with a new background color indicating a new document in that navigable. The URLs are given by the text content of the cells; usually they are given as relative URLs for brevity, unless a cross-origin case is specifically under investigation. A given navigable might not exist at a given step, in which case the corresponding cells are empty. The bold-italic step number depicts the current session history step of the traversable, and all cells with bold-italic URLs represent the current session history entry for that row's navigable.\n\nThus, the above Jake diagram depicts the following sequence of events:\n• None A top-level traversable is created, starting a the URL , with two child navigables starting at and respectively.\n• None The first child navigable is navigated to another document, with URL .\n• None The second child navigable is navigated to another document, with URL .\n• None The top-level traversable is navigated to the same document, updating its URL to .\n• None The top-level traversable is navigated to another document, with URL . (Notice how this document, of course, does not carry over the old document's child navigables.)\n• None The traversable was traversed by a delta of −3, back to step 1.\n\nJake diagrams are a powerful tool for visualizing the interactions of multiple navigables, navigations, and traversals. They cannot capture every possible interaction — for example, they only work with a single level of nesting — but we will have ocassion to use them to illustrate several complex situations throughout this standard.\n\nJake diagrams are named after their creator, the inimitable Jake Archibald.\n\nIt is often helpful in this standard's algorithms to look at collections of navigables starting at a given . This section contains a curated set of algorithms for collecting those navigables.\n\nThe return values of these algorithms are ordered so that parents appears before their children. Callers rely on this ordering.\n\nStarting with a , rather than a navigable, is generally better because it makes the caller cognizant of whether they are starting with a fully active or not. Although non-fully active s do have ancestor and descendant navigables, they often behave as if they don't (e.g., in the getter).\n\nThe of a are given by these steps:\n• None Let be an empty list.\n• While is not null:\n\nThe of a are given by these steps:\n\nThe of a are given by these steps:\n• None Let be new list.\n• None Let be a list of all shadow-including descendants of that are navigable containers, in shadow-including tree order.\n• For each of :\n• None If 's content navigable is null, then continue.\n\nThe of a are given by these steps:\n\nThese descendant-collecting algorithms are described as looking at the DOM tree of descendant objects. In reality, this is often not feasible since the DOM tree can be in another process from the caller of the algorithm. Instead, implementations generally replicate the appropriate trees across processes.\n\nThe of a are given by these steps:\n• None If 's node navigable is null, then return the empty list.\n• None Let be new list.\n• None Let be a list of all descendants of that are navigable containers, in tree order.\n• For each of :\n• None If 's content navigable is null, then continue.\n• None If is null, then return.\n• None Inform the navigation API about child navigable destruction given .\n• None Destroy a document and its descendants given 's active document.\n• None Remove the nested history from 's nested histories whose id equals 's id.\n• Append the following session history traversal steps to :\n• For each in 's session history entries in what order?:\n• None If is not null, then destroy a document and its descendants given .\n• None Remove from the user interface (e.g., close or hide its tab in a tabbed browser).\n\nUser agents may destroy a top-level traversable at any time (typically, in response to user requests).\n• None If 's is closing is true, then return.\n• None If the result of checking if unloading is canceled for is true, then return.\n• Append the following session history traversal steps to :\n• None Let be an algorithm step which destroys .\n• None Unload a document and its descendants given 's active document, null, and .\n\nThe close vs. definitely close separation allows other specifications to call close and have it be a no-op if the top-level traversable is already closing due to JavaScript code calling .\n\nNavigables can be given target names, which are strings allowing certain APIs (such as or the element's attribute) to target navigations at that navigable.\n\nA is any string with at least one character that does not contain both an ASCII tab or newline and a U+003C (<), and it does not start with a U+005F (_). (Names starting with a U+005F (_) are reserved for special keywords.)\n\nA is any string that is either a valid navigable target name or that is an ASCII case-insensitive match for one of: , , , or .\n\nThese values have different meanings based on whether the page is sandboxed or not, as summarized in the following (non-normative) table. In this table, \"current\" means the navigable that the link or script is in, \"parent\" means the parent of the navigable that the link or script is in, \"top\" means the top-level traversable of the navigable that the link or script is in, \"new\" means a new traversable navigable with a null parent (which may use an auxiliary browsing context, subject to various user preferences and user agent policies), \"none\" means that nothing will happen, and \"maybe new\" means the same as \"new\" if the \" \" keyword is also specified on the attribute (or if the user overrode the sandboxing), and the same as \"none\" otherwise.\n\nMost of the restrictions on sandboxed browsing contexts are applied by other algorithms, e.g. the navigation algorithm, not the rules for choosing a navigable given below.\n\nTo given a string and a navigable :\n• None Let be the result of snapshotting source snapshot params given .\n• Let be an implementation-defined choice of one of the following: Issue #10848 tracks settling on one of these two possibilities, to achieve interoperability.\n• For each of , in reverse order:\n• For each of the inclusive descendant navigables of :\n• If is not allowed by sandboxing to navigate given , then optionally continue.\n• None If 's target name is , then return .\n• For each of 's browsing context set, in an implementation-defined order (the user agent should pick a consistent ordering, such as the most recently opened, most recently focused, or more closely related):\n• None If is , then continue.\n• For each of the inclusive descendant navigables of :\n• None If 's active browsing context is not familiar with 's active browsing context, then continue.\n• If is not allowed by sandboxing to navigate given , then optionally continue.\n• None If 's target name is , then return .\n\n, given a string , a navigable , and a boolean are as follows:\n• None If is the empty string or an ASCII case-insensitive match for \" \", then set to .\n• None Otherwise, if is an ASCII case-insensitive match for \" \", set to 's parent, if any, and otherwise.\n• None Otherwise, if is an ASCII case-insensitive match for \" \", set to 's traversable navigable.\n• None Otherwise, if is not an ASCII case-insensitive match for \" \", and there exists a navigable that is the result of finding a navigable by target name given and , set to that navigable.\n• Otherwise, a new top-level traversable is being requested, and what happens depends on the user agent's configuration and abilities — it is determined by the rules given for the first applicable option from the following list: The user agent may inform the user that a popup has been blocked. If has the sandboxed auxiliary navigation browsing context flag set The user agent may report to a developer console that a popup has been blocked. If the user agent has been configured such that in this instance it will create a new top-level traversable\n• If 's opener policy's value is \" \" or \" \", and 's origin is not same origin with 's relevant settings object's top-level origin, then:\n• None Set to \" new with no opener \". In the presence of an opener policy, nested documents that are cross-origin with their top-level browsing context's active document always set to true.\n• None Let be the empty string.\n• None If is not an ASCII case-insensitive match for \" \", then set to .\n• None If is true, then set to the result of creating a new top-level traversable given null, , and .\n• \n• None Set to the result of creating a new top-level traversable given 's active browsing context, , and .\n• None If 's sandboxed navigation browsing context flag is set, then set 's active browsing context's one permitted sandboxed navigator to 's active browsing context.\n• None If 's sandbox propagates to auxiliary browsing contexts flag is set, then all the flags that are set in must be set in 's active browsing context's . If the newly created navigable is immediately navigated, then the navigation will be done as a \" \" navigation. If the user agent has been configured such that in this instance it will choose If the user agent has been configured such that in this instance it will not find a navigable User agents are encouraged to provide a way for users to configure the user agent to always choose .\n\nA is a programmatic representation of a series of documents, multiple of which can live within a single navigable. Each browsing context has a corresponding object, as well as the following:\n• None An , an origin or null, initially null.\n• The only mandatory impact in this specification of is on the getter of the relevant objects. However, user agents might also use it for user interface considerations.\n• None A integer, initially 0. This is used by opener policy reporting, to keep track of the browsing context group switches that would have happened if the report-only policy had been enforced.\n\nA browsing context's is its object's [[Window]] internal slot value. A browsing context's is its active window's associated .\n\nA browsing context whose is auxiliary is true is known as an . Auxiliary browsing contexts are always top-level browsing contexts.\n\nIt's unclear whether a separate is auxiliary concept is necessary. In issue #5680, it is indicated that we may be able to simplify this by using whether or not the opener browsing context is null.\n\nModern specifications should avoid using the browsing context concept in most cases, unless they are dealing with the subtleties of browsing context group switches and agent cluster allocation. Instead, the and navigable concepts are usually more appropriate.\n\nA does not necessarily have a non-null browsing context. In particular, data mining tools are likely to never instantiate browsing contexts. A created using an API such as never has a non-null browsing context. And the originally created for an element, which has since been removed from the document, has no associated browsing context, since that browsing context was nulled out.\n\nIn general, there is a 1-to-1 mapping from the object to the object, as long as the object has a non-null browsing context. There is one exception. A can be reused for the presentation of a second in the same browsing context, such that the mapping is then 1-to-2. This occurs when a browsing context is navigated from the initial to another, which will be done with replacement.\n\nTo , given null or a object , null or an element , and a browsing context group :\n• None Let be a new browsing context.\n• None Let be the unsafe shared current time.\n• If is non-null, then:\n• None Let be the result of determining the creation sandboxing flags given and .\n• None Let be the result of determining the origin given , , and .\n• Let be the result of creating a permissions policy given and . [PERMISSIONSPOLICY]\n• None Let be the result of obtaining a similar-origin window agent given , , and false.\n• Let be the result of creating a new realm given and the following customizations:\n• None For the global object, create a new object.\n• None For the global this binding, use 's object.\n• None Let be if is null; otherwise 's relevant settings object's top-level creation URL.\n• None Let be if is null; otherwise 's relevant settings object's top-level origin.\n• None Set up a window environment settings object with , , null, , and .\n• None Let be a new document load timing info with its navigation start time set to the result of calling coarsen time with and the new environment settings object's cross-origin isolated capability.\n• Let be a new , with:\n• If is non-null, then:\n• None Set 's referrer to the serialization of 's URL.\n• None If 's origin is same origin with 's relevant settings object's top-level origin, then set 's opener policy to 's browsing context's top-level browsing context's active document's opener policy.\n• None Let and be the result of creating a new browsing context group and document.\n• None Assert: is non-null, as navigating invokes this directly.\n• None Let and be the result of creating a new browsing context and document with 's active document, null, and .\n\nTo , given a URL , a sandboxing flag set , and an origin-or-null :\n• None If has its sandboxed origin browsing context flag set, then return a new opaque origin.\n• None If is null, then return a new opaque origin.\n• If is , then:\n• None If matches and is non-null, then return .\n\nThe cases that return result in two s that end up with the same underlying origin, meaning that affects both.\n\nA browsing context is said to be an of a browsing context if the following algorithm returns true:\n• None If is not fully active, then return false.\n• None Let be the list obtained by taking the browsing context of the active document of each member of 's ancestor navigables.\n• None If contains , then return true.\n\nA is a browsing context whose active document's node navigable is a traversable navigable.\n\nIt is not required to be a top-level traversable.\n\nThe of a browsing context is the result of the following algorithm:\n• None If 's active document is not fully active, then return null.\n• None While 's parent is not null, set to 's parent.\n\nA browsing context is a second browsing context if the following algorithm returns true:\n• None If 's active document's origin is same origin with 's active document's origin, then return true.\n• None If 's top-level browsing context is , then return true.\n• None If is an auxiliary browsing context and is familiar with 's opener browsing context, then return true.\n• If there exists an ancestor browsing context of whose active document has the same origin as the active document of , then return true. This includes the case where is an ancestor browsing context of .\n\nA top-level browsing context has an associated (null or a browsing context group). It is initially null.\n\nA top-level browsing context is added to the group when the group is created. All subsequent top-level browsing contexts added to the group will be auxiliary browsing contexts.\n\nA browsing context group has an associated (a weak map of agent cluster keys to agent clusters). User agents are responsible for collecting agent clusters when it is deemed that nothing can access them anymore.\n\nA browsing context group has an associated , which is a map of origins to agent cluster keys. This map is used to ensure the consistency of the origin-keyed agent clusters feature by recording what agent cluster keys were previously used for a given origin.\n\nThe historical agent cluster key map only ever gains entries over the lifetime of the browsing context group.\n\nA browsing context group has a , which is a cross-origin isolation mode. It is initially \" \".\n\nA is one of three possible values: \" \", \" \", or \" \".\n• None Let be a new browsing context group.\n• None Let and be the result of creating a new browsing context and document with null, null, and .\n• None If 's browsing context set is empty, then remove from the user agent's browsing context group set.\n\nAppend and remove are primitive operations that help define the lifetime of a browsing context group. They are called by higher-level creation and destruction operations for s and browsing contexts.\n\nWhen there are no objects whose browsing context equals a given browsing context (i.e., all such s have been destroyed), and that browsing context's is eligible for garbage collection, then the browsing context will never be accessed again. If it is a top-level browsing context, then at this point the user agent must remove it.\n\nA is said to be when is the active document of a navigable , and either is a top-level traversable or 's container document is fully active.\n\nBecause they are associated with an element, child navigables are always tied to a specific , their container document, in their parent navigable. User agents must not allow the user to interact with child navigables whose container documents are not themselves fully active.\n\nWelcome to the dragon's maw. Navigation, session history, and the traversal through that session history are some of the most complex parts of this standard.\n\nThe basic concept may not seem so difficult:\n• None The user is looking at a navigable that is presenting its active document. They navigate it to another URL.\n• None The browser fetches the given URL from the network, using it to populate a new session history entry with a newly-created .\n• None The browser updates the navigable's active session history entry to the newly-populated one, and thus updates the active document that it is showing to the user.\n• None At some point later, the user presses the browser back button to go back to the previous session history entry.\n• None The browser looks at the URL stored in that session history entry, and uses it to re-fetch and populate that entry's document.\n• None The browser again updates the navigable's active session history entry.\n\nYou can see some of the intertwined complexity peeking through here, in how traversal can cause a navigation (i.e., a network fetch to a stored URL), and how a navigation necessarily needs to interface with the session history list to ensure that when it finishes the user is looking at the right thing. But the real problems come in with the various edge cases and interacting web platform features:\n• None Child navigables (e.g., those contained in s) can also navigate and traverse, but those navigations need to be linearized into a single session history list since the user only has a single back/forward interface for the entire traversable navigable (e.g., browser tab).\n• None Since the user can traverse back more than a single step in the session history (e.g., by holding down their back button), they can end up traversing multiple navigables at the same time when child navigables are involved. This needs to be synchronized across all of the involved navigables, which might involve multiple event loops or even agent clusters.\n• None During navigation, servers can respond with 204 or 205 status codes or with ` ` headers, which cause navigation to abort and the navigable to stay on its original active document. (This is much worse if it happens during a traversal-initiated navigation!)\n• None Various other HTTP headers, such as ` `, ` `, ` `, and those for Content Security Policy, contribute to either the fetching process, or the -creation process, or both. The ` ` header even contributes to the browsing context selection and creation process!\n• None Some navigations (namely fragment navigations and single-page app navigations) are synchronous, meaning that JavaScript code expects to observe the navigation's results instantly. This then needs to be synchronized with the view of the session history that all other navigables in the tree see, which can be subject to race conditions and necessitate resolving conflicting views of the session history.\n• None The platform has accumulated various exciting navigation-related features that need special-casing, such as URLs, s, and the event.\n\nIn what follows, we have attempted to guide the reader through these complexities by appropriately cordoning them off into labeled sections and algorithms, and giving appropriate words of introduction where possible. Nevertheless, if you wish to truly understand navigation and session history, the usual advice will be invaluable.\n\nA is a struct with the following items:\n• None , which is a string, initially set to the result of generating a random UUID.\n• None , which is a string, initially set to the result of generating a random UUID.\n• None , which is scroll position data for the document's restorable scrollable regions.\n• For example, some user agents might want to persist the values of form controls. User agents that persist the value of form controls are encouraged to also persist their directionality (the value of the element's attribute). This prevents values from being displayed incorrectly after a history traversal when the user had originally entered the values with an explicit, non-default directionality.\n\nTo get a session history entry's , return its document state's document.\n\nis a serialization (via StructuredSerializeForStorage) of an object representing a user interface state. We sometimes informally refer to \"state objects\", which are the objects representing user interface state supplied by the author, or alternately the objects created by deserializing (via StructuredDeserialize) serialized state.\n\nPages can add serialized state to the session history. These are then deserialized and returned to the script when the user (or script) goes back in the history, thus enabling authors to use the \"navigation\" metaphor even in one-page applications.\n\nA indicates whether the user agent should restore the persisted scroll position (if any) when traversing to an entry. A scroll restoration mode is one of the following:\n\nholds state inside a session history entry regarding how to present and, if necessary, recreate, a . It has:\n• When a history entry is active, it has a in its document state. However, when a is not fully active, it's possible for it to be destroyed to free resources. In such cases, this document item will be nulled out. The URL and other data in the session history entry and document state is then used to bring a new into being to take the place of the original, in the case where the user agent finds itself having to traverse to the entry. If the is not destroyed, then during history traversal, it can be reactivated. The cache in which browsers store such s is often called a back-forward cache, or bfcache (or perhaps \"blazingly fast\" cache).\n• None A , which is \" \", \" \", or a URL, initially \" \".\n• A , which is a referrer policy, initially the default referrer policy. The request referrer policy is distinct from the history policy container's referrer policy. The former is used for fetches of this document, whereas the latter controls fetches by this document.\n• An , which is an origin or null, initially null.\n• An , which is an origin or null, initially null. This is the origin that we set \" \"-schemed s' origin to. We store it here because it is also used when restoring these s during traversal, since they are reconstructed locally without visiting the network. It is also used to compare the origin before and after the session history entry is repopulated. If the origins change, the navigable target name is cleared.\n• An , which is a URL or null, initially null. This will be populated only for \" \"-schemed s and will be the fallback base URL for those s. It is a snapshot of the initiator 's document base URL.\n• A string is treated as HTML. It's used to store the source of an document.\n\nUser agents may destroy a document and its descendants given the documents of document states with non-null documents, as long as the is not fully active.\n\nApart from that restriction, this standard does not specify when user agents should destroy the document stored in a document state, versus keeping it cached.\n• This is only ever accessed in parallel, so it doesn't need to be stored in memory. However, it must return the same byte sequence each time. If this isn't possible due to resources changing on disk, or if resources can no longer be accessed, then this must be set to failure.\n• None A , which is ` `, ` `, or ` `.\n• This is used to associate the nested history with a navigable.\n\nThis will later contain ways to identify a child navigable across reloads.\n\nSeveral contiguous entries in a session history can share the same document state. This can occur when the initial entry is reached via normal navigation, and the following entry is added via . Or it can occur via navigation to a fragment.\n\nAll entries that share the same document state (and that are therefore merely different states of one particular document) are contiguous by construction.\n\nThis is the entry that was most recently represented by a given . A single can represent many session history entries over time, as many contiguous session history entries can share the same document state as explained above.\n\nTo maintain a single source of truth, all modifications to a traversable navigable's session history entries need to be synchronized. This is especially important due to how session history is influenced by all of the descendant navigables, and thus by multiple event loops. To accomplish this, we use the session history traversal parallel queue structure.\n\nA is very similar to a parallel queue. It has an , an ordered set.\n\nThe items in a session history traversal parallel queue's algorithm set are either algorithm steps, or , which are a particular brand of algorithm steps involving a (a navigable).\n\nTo to a traversable navigable given algorithm steps , append to 's session history traversal queue's algorithm set.\n\nTo involving a navigable to a traversable navigable given algorithm steps , append as synchronous navigation steps targeting target navigable to 's session history traversal queue's algorithm set.\n• None Let be a new session history traversal parallel queue.\n• Run the following steps in parallel:\n• \n• None If 's algorithm set is empty, then continue.\n• None Let be the result of dequeuing from 's algorithm set.\n\nSynchronous navigation steps are tagged in the algorithm set to allow them to conditionally \"jump the queue\". This is handled within apply the history step.\n\nThis section contains a miscellaneous grab-bag of operations that we perform throughout the standard when manipulating session history. The best way to get a sense of what they do is to look at their call sites.\n• None Assert: this is running within 's session history traversal queue.\n• None Let be an empty ordered set of document states.\n• None For each of 's session history entries, append 's document state to .\n• For each of :\n• For each of 's nested histories:\n• None For each of 's entries, append 's document state to .\n• None Assert: this step is not reached.\n\nTo get session history entries for the navigation API of a navigable given an integer :\n• None Let be the result of getting session history entries for .\n• None Let be a new empty list.\n• Let be the index of the session history entry in who has the greatest step less than or equal to . See this example to understand why it's the greatest step less than or equal to .\n• \n• None If [ ]'s document state's origin is not same origin with , then break.\n• \n• None If [ ]'s document state's origin is not same origin with , then break.\n• None Assert: this is running within 's session history traversal queue.\n• None Let be the 's current session history step.\n• None Let be the ordered set « 's session history entries ».\n• For each of :\n• None Remove every session history entry from that has a step greater than .\n• For each of :\n• None For each of 's document state's nested histories, append 's entries list to .\n\nTo get all used history steps that are part of traversable navigable :\n• None Assert: this is running within 's session history traversal queue.\n• None Let be an empty ordered set of non-negative integers.\n• None Let be the ordered set « 's session history entries ».\n• For each of :\n• For each of :\n• None For each of 's document state's nested histories, append 's entries list to .\n\nCertain actions cause a navigable to navigate to a new resource.\n\nFor example, following a hyperlink, form submission, and the and methods can all cause navigation.\n\nBefore we can jump into the navigation algorithm itself, we need to establish several important structures that it uses.\n\nThe struct is used to capture data from a initiating a navigation. It is snapshotted at the beginning of a navigation and used throughout the navigation's lifetime. It has the following items:\n\nTo given a , return a new source snapshot params with\n\nThe struct is used to capture data from a navigable being navigated. Like source snapshot params, it is snapshotted at the beginning of a navigation and used throughout the navigation's lifetime. It has the following items:\n\nTo given a navigable , return a new target snapshot params with sandboxing flags set to the result of determining the creation sandboxing flags given 's active browsing context and 's container.\n\nMuch of the navigation process is concerned with determining how to create a new , which ultimately happens in the create and initialize a object algorithm. The parameters to that algorithm are tracked via a struct, which has the following items:\n\nOnce a navigation params struct is created, this standard does not mutate any of its items. They are only passed onward to other algorithms.\n\nA is a UUID string generated during navigation. It is used to interface with the specification as well as to track the ongoing navigation. [WEBDRIVERBIDI]\n\nAfter creation, the relevant traversable navigable's session history gets updated. The enumeration is used to indicate the desired type of session history update to the navigate algorithm. It is one of the following:\n\nA is a that is either \" \" or \" \", i.e., that has been resolved away from any initial \" \" value.\n\nThe navigation must be a replace , given a URL and a , if any of the following are true:\n\nVarious parts of the platform track whether a user is involved in a navigation. A is one of the following:\n\nFor convenience at certain call sites, the for an is defined as follows:\n• None Assert: this algorithm is being called as part of an activation behavior definition.\n• None If 's is initialized to true, then return \" \".\n\nTo a navigable to a URL using a , with an optional POST resource, string, or null (default null), an optional response-or-null (default null), an optional boolean (default false), an optional (default \" \"), an optional serialized state-or-null (default null), an optional entry list or null (default null), an optional referrer policy (default the empty string), an optional user navigation involvement (default \" \"), and an optional (default null):\n• None Let be \" \" if is non-null; otherwise \" \".\n• None Let be the result of snapshotting source snapshot params given .\n• If 's node navigable is not allowed by sandboxing to navigate given , then:\n• None If is true, then throw a \" \" .\n• None Let be the result of generating a random UUID. [WEBCRYPTO]\n• If the surrounding agent is equal to 's active document's relevant agent, then continue these steps. Otherwise, queue a global task on the navigation and traversal task source given 's active window to continue these steps. We do this because we are about to look at a lot of properties of 's active document, which are in theory only accessible over in the appropriate event loop. (But, we do not want to unconditionally queue a task, since — for example — same-event-loop fragment navigations need to take effect synchronously.) Another implementation strategy would be to replicate the relevant information across event loops, or into a canonical \"browser process\", so that it can be consulted without queueing a task. This could give different results than what we specify here in edge cases, where the relevant properties have changed over in the target event loop but not yet been replicated. Further testing is needed to determine which of these strategies best matches browser behavior, in such racy edge cases.\n• None If 's active document's unload counter is greater than 0, then invoke WebDriver BiDi navigation failed with and a WebDriver BiDi navigation status whose id is , status is \" \", and url is , and return.\n• None If is an element and will lazy load element steps given returns true, then stop intersection-observing a lazy loading element and set 's lazy load resumption steps to null.\n• If is \" \", then:\n• None If equals 's active document's URL, and is same origin with 's active document's origin, then set to \" \".\n• None If the navigation must be a replace given and 's active document, then set to \" \".\n• If all of the following are true:\n• None equals 's active session history entry's URL with exclude fragments set to true; and\n• None Navigate to a fragment given , , , , , , and .\n• None If 's parent is non-null, then set 's is delaying events to true.\n• None Let be the result of snapshotting target snapshot params given .\n• None Invoke WebDriver BiDi navigation started with and a new WebDriver BiDi navigation status whose id is , status is \" \", and url is .\n• If 's ongoing navigation is \" \", then:\n• None Invoke WebDriver BiDi navigation failed with and a new WebDriver BiDi navigation status whose id is , status is \" \", and url is . Any attempts to navigate a navigable that is currently traversing are ignored.\n• Set the ongoing navigation for to . This will have the effect of aborting other ongoing navigations of , since at certain points during navigation changes to the ongoing navigation will cause further work to be abandoned.\n• If 's scheme is \" \", then:\n• None Queue a global task on the navigation and traversal task source given 's active window to navigate to a URL given , , , , , , and .\n• If all of the following are true:\n• None 's active document's origin is same origin-domain with 's origin;\n• None 's active document's is initial is false; and\n• None Let be if is a POST resource; otherwise, null.\n• None Let be if is not null; otherwise, StructuredSerializeForStorage(undefined).\n• None Let be the result of firing a push/replace/reload event at with navigationType set to , isSameDocument set to false, userInvolvement set to , sourceElement set to , formDataEntryList set to , destinationURL set to , and navigationAPIState set to .\n• None If is false, then return. It is possible for navigations with of \" \" or initiated by a cross origin-domain to fire events, if they go through the earlier navigate to a fragment path.\n• \n• None Let be the result of checking if unloading is canceled for 's active document's inclusive descendant navigables.\n• If is true, or 's ongoing navigation is no longer , then:\n• None Invoke WebDriver BiDi navigation failed with and a new WebDriver BiDi navigation status whose id is , status is \" \", and url is .\n• None Queue a global task on the navigation and traversal task source given 's active window to abort a document and its descendants given 's active document.\n• Let be a new document state with The navigable target name can get cleared under various conditions later in the navigation process, before the document state is finalized.\n• If matches or is , then:\n• None Let be a new session history entry, with its URL set to and its document state set to .\n• The navigate algorithm is only supplied with a response as part of the and processing models, or for processing parts of responses after the initial response.\n• None Let be the result of determining navigation params policy container given response's URL, null, a clone of the 's policy container, 's container document's policy container, and null.\n• None Let be the union of 's sandboxing flags and 's CSP list's CSP-derived sandboxing flags.\n• None Let be the result of determining the origin given 's URL, , and 's initiator origin.\n• None Let be a new opener policy.\n• Let be a new opener policy enforcement result with\n• Set to a new navigation params, with\n• Attempt to populate the history entry's document for , given , \" \", , , , , , , with allowPOST set to true and completionSteps set to the following step:\n• None Append session history traversal steps to 's traversable to finalize a cross-document navigation given , , , and .\n\nAlthough the usual cross-document navigation case will first foray into populating a session history entry with a , all navigations that don't get aborted will ultimately end up calling into one of the below algorithms.\n\nTo given a navigable , a history handling behavior , a user navigation involvement , and a session history entry :\n• None Assert: this is running on 's traversable navigable's session history traversal queue.\n• If 's document is null, then return. This means that attempting to populate the history entry's document ended up not creating a document, as a result of e.g., the navigation being canceled by a subsequent navigation, a 204 No Content response, etc.\n• If all of the following are true:\n• None 's document's browsing context is not an auxiliary browsing context whose opener browsing context is non-null; and then set 's document state's navigable target name to the empty string.\n• None Let be 's active session history entry if is \" \", otherwise null.\n• None Let be the result of getting session history entries for .\n• If is null, then:\n• None If 's document state's origin is same origin with 's document state's origin, then set 's navigation API key to 's navigation API key.\n• None Apply the push/replace history step to given and .\n\nURLs have a dedicated label on the issue tracker documenting various problems with their specification.\n\nTo , given a navigable , a URL , a history handling behavior , a source snapshot params , an origin , a user navigation involvement , and a string :\n• None Set the ongoing navigation for to null.\n• None If is not same origin-domain with 's active document's origin, then return.\n• Let be a new request whose URL is and whose policy container is 's source policy container. This is a synthetic request solely for plumbing into the next step. It will never hit the network.\n• None If the result of should navigation request of type be blocked by Content Security Policy? given and is \" \", then return. [CSP]\n• None Let be the result of evaluating a URL given , , , and .\n• If is null, then return. In this case, some JavaScript code was executed, but no new was created, so we will not perform a navigation.\n• Let be a new document state with a clone of the 's history policy container if it is non-null; null otherwise 's request referrer policy that was passed to or should this be thethat was passed to navigate\n• Let be a new session history entry, with For the URL, we do not use , i.e. the actual URL that the navigate algorithm was called with. This means URLs are never stored in session history, and so can never be traversed to.\n• None Append session history traversal steps to 's traversable to finalize a cross-document navigation with , , , and .\n\nTo given a navigable , a URL , an origin , and a user navigation involvement :\n• None Let be the result of running the URL serializer on .\n• None Let be the result of removing the leading \" \" from .\n• None Let be the UTF-8 decoding of the percent-decoding of .\n• None Let be the result of creating a classic script given , , , and the default script fetch options.\n• None Let be the result of running the classic script .\n• None If is a normal completion, and .[[Value]] is a String, then set to .[[Value]].\n• Let be a new response with the UTF-8 encoding of , as a body The encoding to UTF-8 means that unpaired surrogates will not roundtrip, once the HTML parser decodes the response body.\n• Let be a new opener policy enforcement result with\n• Let be a new navigation params, with null to be null; is that correct? this will cause the referrer of the resultingto be null; is that correct?\n• None Return the result of loading an HTML document given .\n\nTo given a navigable , a URL , a history handling behavior , a user navigation involvement , an -or-null , a serialized state-or-null , and a navigation ID :\n• None If is not null, then set to .\n• None Let be the result of firing a push/replace/reload event at with navigationType set to , isSameDocument set to true, userInvolvement set to , sourceElement set to , destinationURL set to , and navigationAPIState set to .\n• None If is false, then return.\n• Let be a new session history entry, with For navigations peformed with , the value provided by the option is used for the new navigation API state. (This will set it to the serialization of undefined, if no value is provided for that option.) For other fragment navigations, including user-initiated ones, the navigation API state is carried over from the previous entry. The classic history API state is never carried over.\n• None Let be 's active session history entry if is \" \", otherwise null.\n• If is \" \", then:\n• This algorithm will be called twice as a result of a single fragment navigation: once synchronously, where best-guess values and are set, is nulled out, and various events are fired; and once asynchronously, where the final values for index and length are set, remains untouched, and no events are fired.\n• Scroll to the fragment given 's active document. If the scrolling fails because the is new and the relevant ID has not yet been parsed, then the second asynchronous call to will take care of scrolling.\n• Append the following session history synchronous navigation steps involving to :\n• None Invoke WebDriver BiDi fragment navigated with and a new WebDriver BiDi navigation status whose id is , url is , and status is \" \".\n\nTo given a traversable navigable , a navigable , a session history entry , a session history entry-or-null , a history handling behavior , and a user navigation involvement :\n\nThis is used by both fragment navigations and by the , which are the only synchronous updates to session history. By virtue of being synchronous, those algorithms are performed outside of the top-level traversable's session history traversal queue. This puts them out of sync with the top-level traversable's current session history step, so this algorithm is used to resolve conflicts due to race conditions.\n• None Assert: this is running on 's session history traversal queue.\n• None If 's active session history entry is not , then return.\n• None Let be the result of getting session history entries for .\n• If is null, then:\n• Apply the push/replace history step to given and . This is done even for \" \" navigations, as it resolves race conditions across multiple synchronous navigations.\n\nThe input to attempt to create a non-fetch scheme document is the struct. It is a lightweight version of navigation params which only carries parameters relevant to the non-fetch scheme navigation case. It has the following items:\n• If is to be handled using a mechanism that does not affect , e.g., because 's scheme is handled externally, then:\n• None Hand-off to external software given , , 's target snapshot sandboxing flags, 's source snapshot has transient activation, and 's initiator origin.\n• Handle by displaying some sort of inline content, e.g., an error message because the specified scheme is not one of the supported protocols, or an inline prompt to allow the user to select a registered handler for the given scheme. Return the result of displaying the inline content given , 's id, 's navigation timing type, and 's user involvement. In the case of a registered handler being used, navigate will be invoked with a new URL.\n\nTo given a URL or response , a navigable , a sandboxing flag set , a boolean , and an origin , user agents should:\n• If all of the following are true:\n• None has its sandboxed custom protocols navigation browsing context flag set; and\n• None has its sandboxed top-level navigation with user activation browsing context flag set, or is false, then return without invoking the external software package. Navigation inside an iframe toward external software can be seen by users as a new popup or a new top-level navigation. That's why its is allowed in sandboxed only when one of , , , or is specified.\n• Perform the appropriate handoff of while attempting to mitigate the risk that this is an attempt to exploit the target software. For example, user agents could prompt the user to confirm that is to be allowed to invoke the external software in question. In particular, if is false, then the user agent should not invoke the external software package without prior user confirmation. For example, there could be a vulnerability in the target software's URL handler which a hostile page would attempt to exploit by tricking a user into clicking a link.\n\nA couple of scenarios can intervene early in the navigation process and put the whole thing to a halt. This can be especially exciting when multiple navigables are navigating at the same time, due to a session history traversal.\n\nA navigable is a second navigable , given a source snapshot params , if the following steps return true:\n• None If is , then return true.\n• None If is an ancestor of , then return true.\n• If is an ancestor of , then:\n• None If is not a top-level traversable, then return true.\n• None If 's has transient activation is true, and 's sandboxing flags's sandboxed top-level navigation with user activation browsing context flag is set, then return false.\n• None If 's has transient activation is false, and 's sandboxing flags's sandboxed top-level navigation without user activation browsing context flag is set, then return false.\n• \n• None If is the one permitted sandboxed navigator of , then return true.\n• None If 's sandboxing flags's sandboxed navigation browsing context flag is set, then return false.\n• None If 's sandboxing flags's sandboxed navigation browsing context flag is set, then return false.\n\nTo for a list of navigables , given an optional traversable navigable , an optional integer , and an optional user navigation involvement , run these steps. They return \" \", \" \", or \" \".\n• None Let be the active document of each item in .\n• If was given, then:\n• None Assert: and were given.\n• None Let be the result of getting the target history entry given and .\n• If is not 's current session history entry, and 's document state's origin is the same as 's current session history entry's document state's origin, then: In this case, we're going to fire the event for here. Because under some circumstances it might be canceled, we need to do this separately from other traversal events, which happen later. Additionally, because we want events to fire before events, this means we need to fire for here (if applicable), instead of doing it as part of the below loop over .\n• None Let be true if contains ; otherwise false.\n• None If is true, then remove 's active document from .\n• Queue a global task on the navigation and traversal task source given 's active window to perform the following steps:\n• If is true, then:\n• None Let ( , ) be the result of running the steps to fire given 's active document and false.\n• None If is true, then set to true.\n• None If is true, then set to \" \".\n• None If is \" \", then abort these steps.\n• None Let be the result of firing a traverse event at given and .\n• None If is false, then set to \" \".\n• None If is not \" \", then return .\n• None Let be the size of .\n• For each of , queue a global task on the navigation and traversal task source given 's relevant global object to run the steps:\n• None Let ( , ) be the result of running the steps to fire given and .\n• None If is true, then set to true.\n• None If is true, then set to \" \".\n• None Wait for to be .\n\nThe given a and a boolean are:\n• None Let be the result of firing an event named at 's relevant global object, using , with the attribute initialized to true.\n• If all of the following are true:\n• None 's active sandboxing flag set does not have its sandboxed modals flag set;\n• None is false, or the attribute of is not the empty string; and\n• None showing an unload prompt is unlikely to be annoying, deceptive, or pointless,\n• None Let be the result of WebDriver BiDi user prompt opened with 's relevant global object, \" \", and \"\".\n• None If is \" \", then set to true.\n• If is \" \", then:\n• Ask the user to confirm that they wish to unload the document, and pause while waiting for the user's response. The message shown to the user is not customizable, but instead determined by the user agent. In particular, the actual value of the attribute is ignored.\n• None If the user did not confirm the page navigation, then set to true.\n• None Invoke WebDriver BiDi user prompt closed with 's relevant global object, \" \", and true if is false or false otherwise.\n\nEach navigable has an , which is a navigation ID, \" \", or null, initially null. It is used to track navigation aborting and to prevent any navigations from taking place during traversal.\n\nTo for a navigable to :\n• None If 's ongoing navigation is equal to , then return.\n• None Inform the navigation API about aborting navigation given .\n\nTo a navigable given an optional serialized state-or-null (default null) and an optional user navigation involvement (default \" \"):\n• If is not \" \", then:\n• None If is not null, then set to .\n• None Let be the result of firing a push/replace/reload event at with navigationType set to \" \", isSameDocument set to false, userInvolvement set to , destinationURL set to 's active session history entry's URL, and navigationAPIState set to .\n• None If is false, then return.\n• Append the following session history traversal steps to :\n• None Apply the reload history step to given .\n\nTo given a traversable navigable , an integer , and an optional :\n• None Let and be null.\n• If is given, then:\n• None Set to the result of snapshotting source snapshot params given .\n• Append the following session history traversal steps to :\n• None Let be the result of getting all used history steps for .\n• None Let be the index of 's current session history step within .\n• None Let be plus .\n• None If [ ] does not exist, then abort these steps.\n• None Apply the traverse history step [ ] to , given , , and .\n\nApart from the navigate algorithm, session history entries can be pushed or replaced via one more mechanism, the . The most well-known callers of these steps are the and APIs, but various other parts of the standard also need to perform updates to the active history entry, and they use these steps to do so.\n\nThe , given a , a URL , an optional serialized state-or-null (default null), and an optional history handling behavior (default \" \"), are:\n• Let be a new session history entry, with if is not null, ; otherwise 's classic history API state\n• If 's is initial is true, then set to \" \". This means that on an initial behaves as a call.\n• None Let be if is \" \", otherwise null.\n• If is \" \", then: These are temporary best-guess values for immediate synchronous access.\n• None If is not null, then restore the history object state given and .\n• Since this is neither a navigation nor a history traversal, it does not cause a event to be fired.\n• Append the following session history synchronous navigation steps involving to :\n\nAlthough both fragment navigation and the perform synchronous history updates, only fragment navigation contains a synchronous call to . The instead perform a few select updates inside the above algorithm, omitting others. This is somewhat of an unfortunate historical accident, and generally leads to web-developer sadness about the inconsistency. For example, this means that events fire for fragment navigations, but not for calls.\n\nAs explained in the overview, both navigation and traversal involve creating a session history entry and then attempting to populate its document member, so that it can be presented inside the navigable.\n\nThis involves either: using an already-given response; using the srcdoc resource stored in the session history entry; or fetching. The process has several failure modes, which can either result in doing nothing (leaving the navigable on its currently-active ) or can result in populating the session history entry with an error document.\n\nTo for a session history entry , given a navigable , a , a source snapshot params , a target snapshot params , a user navigation involvement , an optional navigation ID-or-null (default null), an optional navigation params-or-null (default null), an optional string (default \" \"), an optional boolean (default false), and optional algorithm steps (default an empty algorithm):\n• None Assert: this is running in parallel.\n• None Assert: if is non-null, then 's response is non-null.\n• If is null, then:\n• None If is a string, then set to the result of creating navigation params from a srcdoc resource given , , , , , and .\n• Otherwise, if all of the following are true:\n• None is null, or is true and 's request body is not failure, then set to the result of creating navigation params by fetching given , , , , , , , and .\n• Otherwise, if 's URL's scheme is not a fetch scheme, then set to a new non-fetch scheme navigation params, with\n• Queue a global task on the navigation and traversal task source, given 's active window, to run these steps:\n• None If 's ongoing navigation no longer equals , then run and abort these steps.\n• Usually, in the cases where we end up populating 's document state's document, we then want to save some of the state from that into . This ensures that if there are future traversals to where its document has been destroyed, we can use that state when creating a new . However, in some specific cases, saving the state would be unhelpful. For those, we set to false later in this algorithm.\n• If is a non-fetch scheme navigation params, then:\n• Set 's document state's document to the result of running attempt to create a non-fetch scheme document given . This can result in setting 's document state's document to null, e.g., when handing-off to external software.\n• Otherwise, if any of the following are true:\n• None the result of should navigation response to navigation request of type in target be blocked by Content Security Policy? given 's request, 's response, 's policy container's CSP list, , and is \" \";\n• None 's reserved environment is non-null and the result of checking a navigation response's adherence to its embedder policy given 's response, , and 's policy container's embedder policy is false; or\n• None the result of checking a navigation response's adherence to ` ` given 's response, , 's policy container's CSP list, and 's origin is false,\n• None Set 's document state's document to the result of creating a document for inline content that doesn't have a DOM, given , null, , and . The inline content should indicate to the user the sort of error that occurred.\n• If is not null, then:\n• None Invoke WebDriver BiDi navigation failed with and a new WebDriver BiDi navigation status whose id is , status is \" \", and url is 's response's URL.\n• Otherwise, if 's response has a ` ` header specifying the disposition type, then:\n• None Let be 's allows downloading.\n• None Let be false if 's final sandboxing flag set has the sandboxed downloads browsing context flag set; otherwise true.\n• None Optionally, the user agent may set to false, if it believes doing so would safeguard the user from a potentially hostile download.\n• If , , and are true, then:\n• None Invoke WebDriver BiDi download started with and a new WebDriver BiDi navigation status whose id is , status is \" \", and url is 's response's URL.\n• Otherwise, if 's response's status is not 204 and is not 205, then set 's document state's document to the result of loading a document given , , and 's document state's initiator origin. This can result in setting 's document state's document to null, e.g., when handing-off to external software.\n• If 's document state's document is not null, then:\n• \n• If 's URL requires storing the policy container in history, then:\n• None Assert: is a navigation params (i.e., neither null nor a non-fetch scheme navigation params).\n• If 's document state's request referrer is \" \", and is a navigation params (i.e., neither null nor a non-fetch scheme navigation params), then:\n\nTo given a session history entry , a navigable , a target snapshot params , a user navigation involvement , a navigation ID-or-null , and a :\n• Let be a new response with the UTF-8 encoding of , as a body\n• None Let be the result of determining the origin given 's URL, 's sandboxing flags, and 's document state's origin.\n• None Let be a new opener policy.\n• Let be a new opener policy enforcement result with\n• None Let be the result of determining navigation params policy container given 's URL, 's document state's history policy container, null, 's container document's policy container, and null.\n\nTo given a session history entry , a navigable , a source snapshot params , a target snapshot params , a string , a user navigation involvement , a navigation ID-or-null , and a , perform the following steps. They return a navigation params, a non-fetch scheme navigation params, or null.\n• None Assert: this is running in parallel.\n• Let be a new request, with\n• If is a POST resource, then:\n• None If 's document state's reload pending is true, then set 's reload-navigation flag.\n• None Otherwise, if 's document state's ever populated is true, then set 's history-navigation flag.\n• None If 's has transient activation is true, then set 's user-activation to true.\n• \n• None If the 's container has a browsing context scope origin, then set 's origin to that browsing context scope origin.\n• If 's fetch client is 's container document's relevant settings object, then set 's initiator type to 's container's local name. This ensure that only container-initiated navigations are reported to resource timing.\n• Let be a new opener policy enforcement result, with true if 's active document's origin is same origin with 's document state's initiator origin otherwise false\n• None Let be an empty sandboxing flag set.\n• None Let be a new opener policy.\n• \n• If 's reserved client is not null and 's origin is not the same as 's reserved client's creation URL's origin, then:\n• Preloaded links from early hint headers remain in the preload cache after a same origin redirect, but get discarded when the redirect is cross-origin.\n• If 's reserved client is null, then:\n• If is not a top-level traversable, then:\n• Set 's reserved client to a new environment whose id is a unique opaque string, target browsing context is 's active browsing context, creation URL is , top-level creation URL is , and top-level origin is . The created environment's active service worker is set in the Handle Fetch algorithm during the fetch if the request URL matches a service worker registration. [SW]\n• None If the result of should navigation request of type be blocked by Content Security Policy? given and is \" \", then set to a network error and break. [CSP]\n• If is null, then set to the result of fetching , with processEarlyHintsResponse set to as defined below, processResponse set to as defined below, and useParallelQueue set to true. Let be the following algorithm given a response :\n• None If is null, then set to the result of processing early hint headers given and 's reserved client. Let be the following algorithm given a response :\n• Otherwise, process the next manual redirect for . This will result in calling the processResponse we supplied above, during our first iteration through the loop, and thus setting . Navigation handles redirects manually as navigation is the only place in the web platform that cares for redirects to URLs and such.\n• Wait until either is non-null, or 's ongoing navigation changes to no longer equal . If the latter condition occurs, then abort , and return.\n• If 's body is null, then set 's document state's resource to null. Fetch unsets the body for particular redirects.\n• None Set to the result of creating a policy container from a fetch response given and 's reserved client.\n• None Set to the union of 's sandboxing flags and 's CSP list's CSP-derived sandboxing flags.\n• Set to the result of determining the origin given 's URL, , and 's document state's initiator origin. If is a redirect, then 's URL will be the URL that led to the redirect to 's location URL; it will not be the location URL itself.\n• If is a top-level traversable, then:\n• None Set to the result of obtaining an opener policy given and 's reserved client.\n• None Set to the result of enforcing the response's opener policy given 's active browsing context, 's URL, , , and 's referrer.\n• If is not empty and 's value is not \" \", then set to an appropriate network error and break. This results in a network error as one cannot simultaneously provide a clean slate to a response using opener policy and sandbox the result of navigating to that response.\n• If is not a network error, is a child navigable, and the result of performing a cross-origin resource policy check with 's container document's origin, 's container document's relevant settings object, 's destination, , and true is blocked, then set to a network error and break. Here we're running the cross-origin resource policy check against the parent navigable rather than itself. This is because we care about the same-originness of the embedded content against the parent context, not the navigation source.\n• None If is failure or null, then break.\n• Set 's document state to a new document state, with a clone of the 's history policy container if it is non-null; null otherwise For the navigation case, only referenced , which was created early in the navigate algorithm. So for navigations, this is functionally just an update to 's document state. For the traversal case, it's possible adjacent session history entries also reference , in which case they will continue doing so even after we've updated 's document state. 's history policy container is only ever non-null here in the traversal case, after we've populated it during a navigation to a URL that requires storing the policy container in history. The setup is given by the following Jake diagram: Also assume that the document state shared by the entries in steps 0, 1, and 2 has a null document, i.e., bfcache is not in play. Now consider the scenario where we traverse back to step 2, but this time when fetching , the server responds with a ` ` header pointing to . That is, points to and so we have reached this step instead of breaking out of the loop. In this case, we replace the document state of the session history entry occupying step 2, but we do not replace the document state of the entries occupying steps 0 and 1. The resulting Jake diagram looks like this: Note that we perform this replacement even if we end up in a redirect chain back to the original URL, for example if itself had a ` ` header pointing to . Such a case would end up like so:\n• If 's scheme is not an HTTP(S) scheme, then: By the end of this loop we will be in one of these scenarios:\n• None is failure, because of an unparseable ` ` header.\n• None is null, either because is a network error or because we successfully fetched a non-network error HTTP(S) response with no ` ` header.\n• If is a URL whose scheme is not a fetch scheme, then return a new non-fetch scheme navigation params, with At this point, 's current URL is the last URL in the redirect chain with a fetch scheme before redirecting to a non-fetch scheme URL. It is this URL's origin that will be used as the initiator origin for navigations to non-fetch scheme URLs.\n• If any of the following are true:\n• None is a URL whose scheme is a fetch scheme, We allow redirects to non-fetch scheme URLs, but redirects to fetch scheme URLs that aren't HTTP(S) are treated like network errors.\n• None Assert: is null and is not a network error.\n• None Let be the result of determining navigation params policy container given 's URL, 's document state's history policy container, 's source policy container, null, and .\n• If 's container is an , and 's timing allow passed flag is set, then set container's pending resource-timing start time to null. If the is allowed to report to resource timing, we don't need to run its fallback steps as the normal reporting would happen.\n\nAn element has a if its 's node navigable is a top-level traversable or if all of its 's ancestor navigables all have active documents whose origins are the same origin as the element's node document's origin. If an element has a browsing context scope origin, then its value is the origin of the element's node document.\n\nThis definition is broken and needs investigation to see what it was intended to express: see issue #4703.\n\nTo given navigation params , source snapshot params , and origin , perform the following steps. They return a or null.\n• None Let be the computed type of 's response.\n• If the user agent has been configured to process resources of the given using some mechanism other than rendering the content in a navigable, then skip this step. Otherwise, if the is one of the following types: Return the result of loading an HTML document, given . an XML MIME type that is not an explicitly supported XML MIME type Return the result of loading an XML document given and . a JavaScript MIME type a JSON MIME type that is not an explicitly supported JSON MIME type Return the result of loading a text document given and . Return the result of loading a document, given , , and . Return the result of loading a media document given and . If the user agent's PDF viewer supported is true, return the result of creating a document for inline content that doesn't have a DOM given 's navigable, 's id, 's navigation timing type, and 's user involvement. An is an XML MIME type for which the user agent is configured to use an external application to render the content, or for which the user agent has dedicated processing rules. For example, a web browser with a built-in Atom feed viewer would be said to explicitly support the MIME type. An is a JSON MIME type for which the user agent is configured to use an external application to render the content, or for which the user agent has dedicated processing rules. In both cases, the external application or user agent will either display the content inline directly in 's navigable, or hand it off to external software. Both happen in the steps below.\n• None If, given , the new resource is to be handled by displaying some sort of inline content, e.g., a native rendering of the content or an error message because the specified type is not supported, then return the result of creating a document for inline content that doesn't have a DOM given 's navigable, 's id, 's navigation timing type, and 's user involvement.\n• None Otherwise, the document's is such that the resource will not affect 's navigable, e.g., because the resource is to be handed to an external application or because it is an unknown type that will be processed as a download. Hand-off to external software given 's response, 's navigable, 's final sandboxing flag set, 's has transient activation, and .\n\nFor both navigation and traversal, once we have an idea of where we want to head to in the session history, much of the work comes about in applying that notion to the traversable navigable and the relevant . For navigations, this work generally occurs toward the end of the process; for traversals, it is the beginning.\n\nEnsuring a traversable ends up at the right session history step is particularly complex, as it can involve coordinating across multiple navigable descendants of the traversable, populating them in parallel, and then synchronizing back up to ensure everyone has the same view of the result. This is further complicated by the existence of synchronous same-document navigations being mixed together with cross-document navigations, and how web pages have come to have certain relative timing expectations.\n\nA is used to store information during the apply the history step algorithm, allowing parts of the algorithm to continue only after other parts have finished. It is a struct with:\n\nAlthough all updates to the traversable navigable end up in the same apply the history step algorithm, each possible entry point comes along with some minor customizations:\n• None Return the result of applying the history step to given false, null, null, \" \", and null.\n\nTo given a non-negative integer to a traversable navigable , given a history handling behavior and a user navigation involvement :\n• None Return the result of applying the history step to given false, null, null, , and .\n\nApply the push/replace history step never passes source snapshot params or an initiator navigable to apply the history step. This is because those checks are done earlier in the navigation algorithm.\n\nTo to a traversable navigable given user navigation involvement :\n• None Return the result of applying the history step to given true, null, null, , and \" \".\n\nApply the reload history step never passes source snapshot params or an initiator navigable to apply the history step. This is because reloading is always treated as if it were done by the navigable itself, even in cases like .\n\nTo given a non-negative integer to a traversable navigable , with source snapshot params , navigable , and user navigation involvement :\n• None Return the result of applying the history step to given true, , , , and \" \".\n\nNow for the algorithm itself.\n• None Assert: This is running within 's session history traversal queue.\n• None Let be the result of getting the used step given and .\n• If is not null, then:\n• None For each of get all navigables whose current session history entry will change or reload: if is not allowed by sandboxing to navigate given , then return \" \".\n• None Let be the result of getting all navigables that might experience a cross-document traversal given and .\n• None If is true, and the result of checking if unloading is canceled given , , , and is not \" \", then return that result.\n• None Let be the result of get all navigables whose current session history entry will change or reload given and .\n• None Let be the result of given and .\n• For each of :\n• None Let be the result of getting the target history entry given and .\n• None Set the ongoing navigation for to \" \".\n• None Let be the size of .\n• Let be an empty queue of changing navigable continuation states. This queue is used to split the operations on into two parts. Specifically, holds data for the second part.\n• For each of , queue a global task on the navigation and traversal task source of 's active window to run the steps: This set of steps are split into two parts to allow synchronous navigations to be processed before documents unload. State is stored in for the second part.\n• Let be a changing navigable continuation state with:\n• If is and 's document state's reload pending is false, then: This case occurs due to a synchronous navigation which already updated the active session history entry.\n• Assert: 's step is 's step and 's document state's ever populated is false. Assert: 's step is 's step + 1 and 's document state's ever populated is false.\n• If all of the following are true:\n• None is not 's current session history entry; and\n• None is the same as 's current session history entry's document state's origin,\n• None Fire a traverse event at given and .\n• If 's document is null, or 's document state's reload pending is true, then:\n• None Let be \" \" if 's document is null; otherwise \" \".\n• None Let be the result of snapshotting target snapshot params given .\n• If is null, then set it to the result of snapshotting source snapshot params given 's active document. In this case there is no clear source of the traversal/reload. We treat this situation as if navigated itself, but note that some properties of 's original initiator are preserved in 's document state, such as the initiator origin and referrer, which will appropriately influence the navigation.\n• None In parallel, attempt to populate the history entry's document for , given , , , , with allowPOST set to and completionSteps set to queue a global task on the navigation and traversal task source given 's active window to run . In both cases, let be the following steps:\n• If 's document is null, then set 's to true. This means we tried to populate the document, but were unable to do so, e.g. because of the server returning a 204. These kinds of failed navigations or traversals will not be signaled to the navigation API (e.g., through the promises of any navigation API method tracker, or the event). Doing so would leak information about the timing of responses from other origins, in the cross-origin case, and providing different results in the cross-origin vs. same-origin cases was deemed too confusing. However, implementations could use this opportunity to clear any promise handlers for the promise, as they are guaranteed at this point to never run. And, they might wish to report a warning to the console if any part of the navigation API initiated these navigations, to make it clear to the web developer why their promises will never settle and events will never fire.\n• If 's document's origin is not , then set 's classic history API state to StructuredSerializeForStorage(null). This clears history state when the origin changed vs a previous load of without a redirect occuring. This can happen due to a change in CSP sandbox headers.\n• If all of the following are true:\n• None 's document's browsing context is not an auxiliary browsing context whose opener browsing context is non-null; and then set 's document state's navigable target name to the empty string.\n• The rest of this job runs later in this algorithm.\n• None Let be an empty set.\n• While does not equal :\n• If 's running nested apply history step is false, then:\n• While 's session history traversal queue's algorithm set contains one or more synchronous navigation steps with a target navigable not contained in :\n• None Let be the first item in 's session history traversal queue's algorithm set that is synchronous navigation steps with a target navigable not contained in . Synchronous navigations that are intended to take place before this traversal jump the queue at this point, so they can be added to the correct place in 's session history entries before this traversal potentially unloads their document. More details can be found here.\n• None Let be the result of dequeuing from .\n• None If is nothing, then continue.\n• Let ( , ) be the result of getting the history object length and index given and . These values might have changed since they were last calculated.\n• Once a navigable has reached this point in traversal, additionally queued synchronous navigation steps are likely to be intended to occur after this traversal rather than before it, so they no longer jump the queue. More details can be found here.\n• None Let be the result of getting session history entries for the navigation API given and .\n• If 's is true, or 's document is , then: This is a same-document navigation: we proceed without unloading.\n• Set the ongoing navigation for to null. This allows new navigations of to start, whereas during the traversal they were blocked.\n• None Queue a global task on the navigation and traversal task source given 's active window to perform .\n• In both cases, let be the following steps:\n• None If 's is false, then activate history entry for .\n• None Let be an algorithm step which performs given 's document, , 's , , , , , and .\n• None If 's document is equal to , then perform .\n• None Otherwise, queue a global task on the navigation and traversal task source given 's document's relevant global object to perform .\n• Let be the size of . This step onwards deliberately waits for all the previous operations to complete, as they include processing synchronous navigations which will also post tasks to update history length and index.\n• None Let ( , ) be the result of getting the history object length and index given and .\n• For each of , queue a global task on the navigation and traversal task source given 's active window to run the steps:\n\nTo given a , a user navigation involvement , a session history entry , a , and , which is an algorithm that receives no arguments:\n• None Let be true if is \" \"; otherwise false.\n• None Set to the result of calling can navigation trigger a cross-document view-transition? given , 's document, , and .\n• If is false, then:\n• Let be the following step:\n• None Fire the event given , , , and null.\n• Set the ongoing navigation for to null. This allows new navigations of to start, whereas during the traversal they were blocked.\n• None Unload a document and its descendants given , 's document, , and .\n• Otherwise, queue a global task on the navigation and traversal task source given 's active window to run the steps:\n• Let be the following step:\n• Append the following session history traversal steps to 's traversable navigable:\n• Set the ongoing navigation for to null. This allows new navigations of to start, whereas during the traversal they were blocked.\n• None Unload a document and its descendants given , 's document, and .\n• None Let be the result of setting up a cross-document view-transition given , 's document, , and .\n• None Fire the event given , , , and .\n• If is null, then run . In the case where a view transition started, the view transitions algorithms are responsible for calling .\n\nTo given a , a session history entry , a , and a -or-null :\n• None Assert: this is running as part of a task queued on 's relevant agent's event loop.\n• If all of the following are true:\n• None 's document's origin is same origin with 's origin; and\n• None 's document's was created via cross-origin redirects is false, or 's document's latest entry is not null,\n• Let be determined by switching on : The in 's entry list whose session history entry is A new in 's relevant realm with its session history entry set to .\n• Set to a new created in 's relevant realm, with This means that a cross-origin redirect during a navigation would result in a null in the old document's , unless the new document is being restored from bfcache.\n• None Fire an event named at 's relevant global object, using with its set to , and its set to .\n• None Assert: 's is initial is false, i.e., we never traverse back to the initial because it always gets replaced when we navigate away from it.\n\nTo get the used step given a traversable navigable , and a non-negative integer , perform the following steps. They return a non-negative integer.\n• None Let be the result of getting all used history steps within .\n• Return the greatest item in that is less than or equal to . This caters for situations where there's no session history entry with step , due to the removal of a navigable.\n\nTo get the history object length and index given a traversable navigable , and a non-negative integer , perform the following steps. They return a tuple of two non-negative integers.\n• None Let be the result of getting all used history steps within .\n• None Let be the size of .\n• It is assumed that has been adjusted by getting the used step.\n• None Let be the index of in .\n\nTo get all navigables whose current session history entry will change or reload given a traversable navigable , and a non-negative integer , perform the following steps. They return a list of navigables.\n• None Let be an empty list.\n• This list is extended in the loop below.\n• For each of :\n• None Let be the result of getting the target history entry given and .\n• None If is not 's current session history entry or 's document state's reload pending is true, then append to .\n• If 's document is 's document, and 's document state's reload pending is false, then extend with the child navigables of . Adding child navigables to means those navigables will also be checked by this loop. Child navigables are only checked if the 's active document will not change as part of this traversal.\n\nTo given a traversable navigable , and a non-negative integer , perform the following steps. They return a list of navigables.\n\nOther navigables might not be impacted by the traversal. For example, if the response is a 204, the currently active document will remain. Additionally, going 'back' after a 204 will change the current session history entry, but the active session history entry will already be correct.\n• None Let be an empty list.\n• This list is extended in the loop below.\n• For each of :\n• None Let be the result of getting the target history entry given and .\n• If is 's current session history entry and 's document state's reload pending is false, then:\n• Adding child navigables to means those navigables will also be checked by this loop. child navigables are only checked if the 's active document will not change as part of this traversal.\n\nTo given a navigable , and a non-negative integer , perform the following steps. They return a session history entry.\n• None Let be the result of getting session history entries for .\n• None Return the item in that has the greatest step less than or equal to .\n\nTo get all navigables that might experience a cross-document traversal given a traversable navigable , and a non-negative integer , perform the following steps. They return a list of navigables.\n• None Let be an empty list.\n• This list is extended in the loop below.\n• For each of :\n• None Let be the result of getting the target history entry given and .\n• If 's document is not 's document or 's document state's reload pending is true, then append to . Although 's active history entry can change synchronously, the new entry will always have the same , so accessing 's document is reliable.\n• Adding child navigables to means those navigables will also be checked by this loop. Child navigables are only checked if the 's active document will not change as part of this traversal.\n\nTo given a , a session history entry , a boolean , integers and , -or-null , an optional list of session history entries , and an optional session history entry :\n• None Let be true if 's latest entry is null; otherwise false.\n• None Let be true if 's latest entry is not ; otherwise false.\n• If is true, then:\n• None Restore the history object state given and .\n• If is false, then:\n• None Fire an event named at 's relevant global object, using , with the attribute initialized to 's history object's state and initialized to true if a visual transition, to display a cached rendered state of the latest entry, was done by the user agent.\n• None If 's fragment is not equal to 's URL's fragment, then queue a global task on the DOM manipulation task source given 's relevant global object to fire an event named at 's relevant global object, using , with the attribute initialized to the serialization of and the attribute initialized to the serialization of 's URL.\n• \n• None Initialize the navigation API entries for a new document given , , and .\n• If all the following are true:\n• None is \" \" or 's document is not ,\n• None If 's activation is null, then set 's activation to a new object in 's relevant realm.\n• None Let be the result of getting the navigation API entry index of within .\n• None If is non-negative, then set 's old entry to 's entry list[ ].\n• Otherwise, if all the following are true:\n• None 's document state's origin is same origin with 's origin; and then set 's old entry to a new in 's relevant realm, whose session history entry is .\n• If is true, then:\n• None Assert: 's during-loading navigation ID for WebDriver BiDi is not null.\n• None Invoke WebDriver BiDi navigation committed with and a new WebDriver BiDi navigation status whose id is 's during-loading navigation ID for WebDriver BiDi, status is \" \", and url is 's URL\n• None Try to scroll to the fragment for .\n• None At this point scripts may run for the newly-created document .\n• Otherwise, if is false and is false, then: can be false for one of two reasons: either we are restoring from bfcache, or we are asynchronously finishing up a synchronous navigation which already synchronously set 's latest entry. The argument distinguishes between these two cases.\n\nTo given and session history entry :\n• None Let be StructuredDeserialize( 's classic history API state, ). If this throws an exception, catch it and let be null.\n• None Queue a new whose visibility state is 's visibility state and whose is zero.\n\nTo a given a session history entry and a list of session history entries :\n\nThis algorithm updates after it has come out of bfcache, i.e., after it has been made fully active again. Other specifications that want to watch for this change to the fully active state are encouraged to add steps into this algorithm, so that the ordering of events that happen in effect of the change is clear.\n• None For each of form controls in with an autofill field name of \" \", invoke the reset algorithm for .\n• If 's suspended timer handles is not empty:\n• None Assert: 's suspension time is not zero.\n• None Let be the current high resolution time minus 's suspension time.\n• None Let be 's relevant global object's map of active timers.\n• None For each in 's suspended timer handles, if [ ] exists, then increase [ ] by .\n• If 's current document readiness is \" \", and 's page showing is false:\n• None Set 's has been revealed to false.\n\nTo try to scroll to the fragment for a , perform the following steps in parallel:\n• None Wait for an implementation-defined amount of time. (This is intended to allow the user agent to optimize the user experience in the face of performance concerns.)\n• Queue a global task on the navigation and traversal task source given 's relevant global object to run these steps:\n• None If has no parser, or its parser has stopped parsing, or the user agent has reason to believe the user is no longer interested in scrolling to the fragment, then abort these steps.\n• None Scroll to the fragment given .\n• None If 's indicated part is still null, then try to scroll to the fragment for .\n\nTo , given a and a string :\n• None Let be a new not restored reason details whose reason is .\n• None Let be a new not restored reasons.\n• If is an element:\n• None Let be the empty string.\n• \n• None Let be the result of encoding-parsing-and-serializing a URL given 's attribute's value, relative to 's node document.\n• None If is failure, then set to 's attribute's value.\n• None Set 's id to 's attribute's value, or the empty string if it has no such attribute.\n• None Set 's name to 's attribute's value, or the empty string if it has no such attribute.\n• For each of 's document-tree child navigables:\n• None Build not restored reasons for document state given .\n\nTo build not restored reasons for a top-level traversable and its descendants given top-level traversable :\n• None Build not restored reasons for document state given 's active document.\n• None Let be an empty list.\n• For each of 's active document's descendant navigables:\n• None If 's active document's origin is not same origin with 's active document's origin, then append to .\n• For each of :\n• None Let be 's active document's document state's not restored reasons.\n• None If 's reasons is not empty, set to true.\n• None If is true, make document unsalvageable given 's active document and \" \".\n\nA has a boolean , initially false. It is used to ensure that the event is fired once for each activation of the (once when it's rendered initially, and once for each reactivation).\n• None If 's has been revealed is true, then return.\n• None Set 's has been revealed to true.\n• None Let be the result of resolving inbound cross-document view-transition for .\n• None Fire an event named at 's relevant global object, using with its set to .\n• If is not null, then:\n• None Clean up after running script given 's relevant settings object. Activating a view transition might resolve/reject promises, so by wrapping the activation with prepare/cleanup we ensure those promises are handled before the next rendering step.\n\nThough is guaranteed to be fired during the first step that displays an up-to-date version of the page, user agents are free to display a cached frame of the page before firing it. This prevents the presence of a handler from delaying the presentation of such cached frame.\n• None If 's indicated part is null, then set 's target element to null.\n• Otherwise, if 's indicated part is top of the document, then:\n• None Scroll to the beginning of the document for . [CSSOMVIEW]\n• \n• None Assert: 's indicated part is an element.\n• None Let be 's indicated part.\n• None Scroll into view, with set to \"auto\", set to \"start\", and set to \"nearest\". [CSSOMVIEW]\n• None Run the focusing steps for , with the 's viewport as the .\n\nA 's is the one that its URL's fragment identifies, or null if the fragment does not identify anything. The semantics of the fragment in terms of mapping it to a node is defined by the specification that defines the MIME type used by the (for example, the processing of fragments for XML MIME types is the responsibility of RFC7303). [RFC7303]\n\nThere is also a for each , which is used in defining the pseudo-class and is updated by the above algorithm. It is initially null.\n\nFor an HTML document , its indicated part is the result of selecting the indicated part given and 's URL.\n\nTo given a and a URL :\n• None If 's URL does not equal with exclude fragments set to true, then return null.\n• None If is the empty string, then return the special value .\n• None Let be the result of finding a potential indicated element given and .\n• None If is not null, then return .\n• None Let be the result of percent-decoding .\n• None Let be the result of running UTF-8 decode without BOM on .\n• None Set to the result of finding a potential indicated element given and .\n• None If is not null, then return .\n• None If is an ASCII case-insensitive match for the string , then return the top of the document.\n\nTo given a and a string , run these steps:\n• None If there is an element in the document tree whose root is and that has an ID equal to , then return the first such element in tree order.\n• None If there is an element in the document tree whose root is that has a attribute whose value is equal to , then return the first such element in tree order.\n• None Set the scroll position data of to contain the scroll positions for all of 's document's restorable scrollable regions.\n• None Optionally, update 's persisted user state to reflect any state that the user agent wishes to persist, such as the values of form fields.\n• If 's scroll restoration mode is \" \", and 's document's relevant global object's navigation API's suppress normal scroll restoration during ongoing navigation is false, then restore scroll position data given . The user agent not restoring scroll positions does not imply that scroll positions will be left at any particular value (e.g., (0,0)). The actual scroll position depends on the navigation type and the user agent's particular caching strategy. So web applications cannot assume any particular scroll position but rather are urged to set it to what they want it to be. If suppress normal scroll restoration during ongoing navigation is true, then restoring scroll position data might still happen at a later point, as part of finishing the relevant , or via a method call.\n• Optionally, update other aspects of 's document and its rendering, for instance values of form fields, that the user agent had previously recorded in 's persisted user state. This can even include updating the attribute of elements or elements whose attribute is in the Text, Search, Telephone, URL, or Email state, if the persisted state includes the directionality of user input in such controls. Restoring the value of form controls as part of this process does not fire any or events, but can trigger the of form-associated custom elements.\n\nEach has a boolean has been scrolled by the user , initially false. If the user scrolls the document, the user agent must set that document's has been scrolled by the user to true.\n\nThe of a are 's viewport, and all of 's scrollable regions excepting any navigable containers.\n\nChild navigable scroll restoration is handled as part of state restoration for the session history entry for those navigables' s.\n• None If 's has been scrolled by the user is true, then the user agent should return.\n• The user agent should attempt to use 's scroll position data to restore the scroll positions of 's document's restorable scrollable regions. The user agent may continue to attempt to do so periodically, until 's has been scrolled by the user becomes true. This is formulated as an attempt, which is potentially repeated until success or until the user scrolls, due to the fact that relevant content indicated by the scroll position data might take some time to load from the network. Scroll restoration might be affected by scroll anchoring. [CSSSCROLLANCHORING]\n\nWhen loading a document using one of the below algorithms, we use the following steps to , given a type , content type , and navigation params :\n\nobjects are also created when creating a new browsing context and document; such initial are never created by this algorithm. Also, browsing context-less objects can be created via various APIs, such as .\n• Let be the result of obtaining a browsing context to use for a navigation response given . This can result in a browsing context group switch, in which case will be a newly-created browsing context instead of being 's navigable's active browsing context. In such a case, the created , , and agent will not end up being used; because the created 's origin is opaque, we will end up creating a new agent and later in this algorithm to go along with the new .\n• Let be the result of creating a permissions policy from a response given 's navigable's container, 's origin, and 's response. [PERMISSIONSPOLICY] The creating a permissions policy from a response algorithm makes use of the passed origin. If has been used for 's navigable's container document, then its origin cannot be same origin-domain with the passed origin, because these steps run before the is created, so it cannot itself yet have used . Note that this means that Permissions Policy checks are less permissive compared to doing a same origin check instead. See below for some examples of this in action.\n• None If 's request is non-null, then set to 's request's current URL.\n• If 's active document's is initial is true, and 's active document's origin is same origin-domain with 's origin, then set to 's active window. This means that both the initial , and the new that is about to be created, will share the same object.\n• \n• None Let be the result of getting a structured field value given ` ` and \" \" from 's response's header list.\n• None Let be true if is not null and [0] is the boolean true; otherwise false.\n• None If 's reserved environment is a non-secure context, then set to false.\n• None Let be the result of obtaining a similar-origin window agent given 's origin, 's group, and .\n• Let be the result of creating a new realm given and the following customizations:\n• None For the global object, create a new object.\n• None For the global this binding, use 's object.\n• None Set to the global object of 's Realm component.\n• If 's container is not null, then:\n• None Set up a window environment settings object with , , 's reserved environment, , and . This is the usual case, where the new we're about to create gets a new to go along with it.\n• None Let be a new document load timing info with its navigation start time set to 's response's timing info's start time.\n• Let be a new , with\n• If 's request is non-null, then:\n• If is a URL record, then set 's referrer to the serialization of . Per , will be either a URL record or \" \" at this point.\n• If 's fetch controller is not null, then:\n• None Let be the result of extracting the full timing info from 's fetch controller.\n• None Let be 0 if 's response's has cross-origin redirects is true; otherwise 's request's redirect count.\n• None Create the navigation timing entry for , given , , , 's response's service worker timing info, and 's response's body info.\n• None Create the navigation timing entry for , with 's response's timing info, , 's navigation timing type, and 's response's service worker timing info.\n• If 's response has a ` ` header, then:\n• None Let be the isomorphic decoding of the value of the header.\n• None Run the shared declarative refresh steps with and . We do not currently have a spec for how to handle multiple ` ` headers. This is tracked as issue #2900.\n• None If 's commit early hints is not null, then call 's commit early hints with .\n• None Let be the result of creating an element given , \" \", and the HTML namespace.\n• None Let be the result of creating an element given , \" \", and the HTML namespace.\n• None Let be the result of creating an element given , \" \", and the HTML namespace.\n• None Let be the result of creating and initializing a object given \" \", \" \", and .\n• If 's URL is , then populate with / / given . This special case, where even non-initial s are synchronously given their element nodes, is necessary for compatible with deployed content. In other words, it is not compatible to instead go down the \"otherwise\" branch and feed the empty byte sequence into an HTML parser to asynchronously populate .\n• Otherwise, create an HTML parser and associate it with the . Each task that the networking task source places on the task queue while fetching runs must then fill the parser's input byte stream with the fetched bytes and cause the HTML parser to perform the appropriate processing of the input stream. The first task that the networking task source places on the task queue while fetching runs must process link headers given , 's response, and \" \", after the task has been processed by the HTML parser. Before any script execution occurs, the user agent must wait for scripts may run for the newly-created document to be true for . The input byte stream converts bytes into characters for use in the tokenizer. This process relies, in part, on character encoding information found in the real Content-Type metadata of the resource; the computed type is not used for this purpose. When no more bytes are available, the user agent must queue a global task on the networking task source given 's relevant global object to have the parser process the implied EOF character, which eventually causes a event to be fired.\n\nWhen faced with displaying an XML file inline, provided navigation params and a string , user agents must follow the requirements defined in and , , , and other relevant specifications to create and initialize a object , given \" \", , and , and return that . They must also create a corresponding XML parser. [XML] [XMLNS] [RFC7303] [DOM]\n\nAt the time of writing, the XML specification community had not actually yet specified how XML and the DOM interact.\n\nThe first task that the networking task source places on the task queue while fetching runs must process link headers given , 's response, and \" \", after the task has been processed by the XML parser.\n\nThe actual HTTP headers and other metadata, not the headers as mutated or implied by the algorithms given in this specification, are the ones that must be used when determining the character encoding according to the rules given in the above specifications. Once the character encoding is established, the document's character encoding must be set to that character encoding.\n\nBefore any script execution occurs, the user agent must wait for scripts may run for the newly-created document to be true for the newly-created .\n\nOnce parsing is complete, the user agent must set 's during-loading navigation ID for WebDriver BiDi to null.\n\nFor HTML documents this is reset when parsing is complete, after firing the load event.\n\nError messages from the parse process (e.g., XML namespace well-formedness errors) may be reported inline by mutating the .\n\nTo , given a navigation params and a string :\n• None Let be the result of creating and initializing a object given \" \", , and .\n• None Set 's parser cannot change the mode flag to true.\n• Create an HTML parser and associate it with the . Act as if the tokenizer had emitted a start tag token with the tag name \"pre\" followed by a single U+000A LINE FEED (LF) character, and switch the HTML parser's tokenizer to the PLAINTEXT state. Each task that the networking task source places on the task queue while fetching runs must then fill the parser's input byte stream with the fetched bytes and cause the HTML parser to perform the appropriate processing of the input stream. 's encoding must be set to the character encoding used to decode the document during parsing. The first task that the networking task source places on the task queue while fetching runs must process link headers given , 's response, and \" \", after the task has been processed by the HTML parser. Before any script execution occurs, the user agent must wait for scripts may run for the newly-created document to be true for . When no more bytes are available, the user agent must queue a global task on the networking task source given 's relevant global object to have the parser process the implied EOF character, which eventually causes a event to be fired.\n• User agents may add content to the element of , e.g., linking to a style sheet, providing script, or giving the document a . In particular, if the user agent supports the feature of RFC 3676 then the user agent would need to apply extra styling to cause the text to wrap correctly and to handle the quoting feature. This could be performed using, e.g., a CSS extension.\n\nThe rules for how to convert the bytes of the plain text document into actual characters, and the rules for actually rendering the text to the user, are defined by the specifications for the computed MIME type of the resource (i.e., ).\n\nTo , given navigation params , source snapshot params , and origin :\n• None Parse 's response's body using the rules for multipart types. [RFC2046]\n• None Let be a copy of .\n• None Set 's response to a new response representing the first part of 's response's body's multipart stream.\n• Let be the result of loading a document given , , and . For each additional body part obtained from 's response, the user agent must navigate 's node navigable to 's request's URL, using , with response set to 's response and historyHandling set to \" \".\n\nFor the purposes of algorithms processing these body parts as if they were complete stand-alone resources, the user agent must act as if there were no more bytes for those resources whenever the boundary following the body part is reached.\n\nThus, events (and for that matter events) do fire for each body part loaded.\n\nTo , given and a string :\n• None Let be the result of creating and initializing a object given \" \", , and .\n• None Append an element for the media, as described below, to the element.\n• None Set the appropriate attribute of the element , as described below, to the address of the image, video, or audio resource.\n• None User agents may add content to the element of , or attributes to , e.g., to link to a style sheet, to provide a script, to give the document a , or to make the media autoplay.\n• None Act as if the user agent had stopped parsing .\n\nThe element to create for the media is the element given in the table below in the second cell of the row whose first cell describes the media. The appropriate attribute to set is the one given by the third cell in that same row.\n\nBefore any script execution occurs, the user agent must wait for scripts may run for the newly-created document to be true for the .\n\nLoading a document for inline content that doesn't have a DOM\n\nWhen the user agent is to create a document to display a user agent page or PDF viewer inline, provided a navigable , a navigation ID , a , and a user navigation involvement , the user agent should:\n• None Let be a new opaque origin.\n• None Let be a new opener policy.\n• Let be a new opener policy enforcement result with\n• Let be a new navigation params with\n• None Let be the result of creating and initializing a object given \" \", \" \", and .\n• None Either associate with a custom rendering that is not rendered using the normal rendering rules, or mutate until it represents the content the user agent wants to render.\n\nBecause we ensure the resulting 's origin is opaque, and the resulting cannot run script with access to the DOM, the existence and properties of this are not observable to web developer code. This means that most of the above values, e.g., the type, do not matter. Similarly, most of the items in don't have any observable effect, besides preventing the -creation algorithm from getting confused, and so are set to default values.\n\nOnce the page has been set up, the user agent must act as if it had stopped parsing.\n\nA has a (a time or null), which is initially null.\n\nA is considered if its completely loaded time is non-null.\n• This will be null in the case where is the initial in a or , since at the point of browsing context creation which calls this algorithm, the container relationship has not yet been established. (That happens in a subsequent step of create a new child navigable.) The consequence of this is that the following steps do nothing, i.e., we do not fire an asynchronous event on the container element for such cases. Instead, a synchronous event is fired in a special initial-insertion case when processing the attributes.\n• None If is an element, then queue an element task on the DOM manipulation task source given to run the iframe load event steps given .\n• None Otherwise, if is non-null, then queue an element task on the DOM manipulation task source given to fire an event named at .\n\nA has a state, which must initially be true, and a boolean, which is initially false. The page showing boolean is used to ensure that scripts receive and events in a consistent manner (e.g., that they never receive two events in a row without an intervening , or vice versa).\n\nEvent loops have a counter, which must initially be 0.\n\nobjects have an , which is used to ignore certain operations while the below algorithms run. Initially, the counter must be set to zero.\n\nTo a , given an optional :\n• None Assert: this is running as part of a task queued on 's relevant agent's event loop.\n• None Let be a new document unload timing info.\n• If is not given, then set to null. In this case there is no new document that needs to know about how long it took to unload.\n• Otherwise, if 's event loop is not 's event loop, then the user agent may be unloading in parallel. In that case, the user agent should set to null. In this case 's loading is not impacted by how long it takes to unload , so it would be meaningless to communicate that timing info.\n• Let be true if the user agent intends to keep alive in a session history entry, such that it can later be used for history traversal. This must be false if is not salvageable, or if there are any descendants of which the user agent does not intend to keep alive in the same way (including due to their lack of salvageability).\n• None If is false, then set 's salvageable state to false.\n• None If is not null, then set 's unload event start time to the current high resolution time given 's relevant global object, coarsened given 's relevant settings object's cross-origin isolated capability.\n• None If 's salvageable state is false, then fire an event named at 's relevant global object, with set.\n• None If is not null, then set 's unload event end time to the current high resolution time given 's relevant global object, coarsened given 's relevant settings object's cross-origin isolated capability.\n• None Set 's suspension time to the current high resolution time given 's relevant global object.\n• None Set 's suspended timer handles to the result of getting the keys for the map of active timers.\n• None Set 's has been scrolled by the user to false.\n• None Run any unloading document cleanup steps for that are defined by this specification and other applicable specifications.\n• None If 's node navigable is a top-level traversable, build not restored reasons for a top-level traversable and its descendants given 's node navigable.\n• None If 's salvageable state is false, then destroy .\n• None If is given, 's was created via cross-origin redirects is false, and 's origin is the same as 's origin, then set 's previous document unload timing to .\n\nTo , given a , an optional -or-null (default null), an optional set of steps , and an optional set of steps :\n• None Assert: this is running within 's node navigable's traversable navigable's session history traversal queue.\n• For each of in what order?, queue a global task on the navigation and traversal task source given 's active window to perform the following steps:\n• None Let be an algorithm step which increments .\n• None Unload a document and its descendants given 's active document, null, and .\n• Queue a global task on the navigation and traversal task source given 's relevant global object to perform the following steps:\n• None If is given, then run .\n• None Unload , passing along if it is not null.\n• None If was given, then run it.\n\nThis specification defines the following . Other specifications can define more. Given a :\n• For each object whose relevant global object is , make disappear . If this affected any objects, then make document unsalvageable given and \" \".\n• None For each object whose relevant global object is , run the context cleanup steps given .\n• If 's salvageable state is false, then:\n• None For each object whose relevant global object is equal to , forcibly close .\n• None Assert: this is running as part of a task queued on 's relevant agent's event loop.\n• None Let be the list of s whose relevant global object's associated is .\n• None For each in , disentangle .\n• None Run any unloading document cleanup steps for that are defined by this specification and other applicable specifications.\n• None Remove any tasks whose document is from any task queue (without running those tasks).\n• None Remove from the owner set of each object whose set contains .\n• None For each in 's worklet global scopes, terminate .\n\nEven after destruction, the object itself might still be accessible to script, in the case where we are destroying a child navigable.\n\nTo given a and an optional set of steps , perform the following steps in parallel:\n• If is not fully active, then:\n• None Let be a string from user-agent specific blocking reasons. If none apply, then let be \" \".\n• None If 's node navigable is a top-level traversable, build not restored reasons for a top-level traversable and its descendants given 's node navigable.\n• For each of in what order?, queue a global task on the navigation and traversal task source given 's active window to perform the following steps:\n• None Let be an algorithm step which increments .\n• None Destroy a document and its descendants given 's active document and .\n• Queue a global task on the navigation and traversal task source given 's relevant global object to perform the following steps:\n• None If was given, then run it.\n• None Assert: this is running as part of a task queued on 's relevant agent's event loop.\n• None Cancel any instances of the fetch algorithm in the context of , discarding any tasks queued for them, and discarding any further data received from the network for them. If this resulted in any instances of the fetch algorithm being canceled or any queued tasks or any network data getting discarded, then make document unsalvageable given and \" \".\n• If 's during-loading navigation ID for WebDriver BiDi is non-null, then:\n• None Invoke WebDriver BiDi navigation aborted with 's node navigable and a new WebDriver BiDi navigation status whose id is 's during-loading navigation ID for WebDriver BiDi, status is \" \", and url is 's URL.\n• If has an active parser, then:\n• None Assert: this is running as part of a task queued on 's relevant agent's event loop.\n• For each of in what order?, queue a global task on the navigation and traversal task source given 's active window to perform the following steps:\n• None If 's active document's salvageable is false, then set 's salvageable to false.\n• If 's unload counter is 0, and 's ongoing navigation is a navigation ID, then set the ongoing navigation for to null. This will have the effect of aborting any ongoing navigations of , since at certain points during navigation, changes to the ongoing navigation will cause further work to be abandoned.\n• None Abort a document and its descendants given .\n\nThrough their user interface, user agents also allow stopping traversals, i.e. cases where the ongoing navigation is \" \". The above algorithm does not account for this. (On the other hand, user agents do not allow to stop traversals, so the above algorithm is correct for that caller.) See issue #6905.\n\nThe ` ` HTTP response header is a way of controlling whether and how a may be loaded inside of a child navigable. For sites using CSP, the directive provides more granular control over the same situations. It was originally defined in , but the definition and processing model here supersedes that document. [CSP] [RFC7034]\n\nIn particular, specified an ` ` variant of the header, but that is not to be implemented.\n\nPer the below processing model, if both a CSP directive and an ` ` header are used in the same response, then ` ` is ignored.\n\nFor web developers and conformance checkers, its value ABNF is:\n\nTo , given a response , a navigable , a CSP list , and an origin :\n• None If is not a child navigable, then return true.\n• For each of :\n• None If 's disposition is not \" \", then continue.\n• None If 's directive set contains a directive, then return true.\n• None Let be the result of getting, decoding, and splitting ` ` from 's header list.\n• None Let be a new set.\n• None For each of , append , converted to ASCII lowercase, to .\n• If 's size is greater than 1, and contains any of \" \", \" \", or \" \", then return false. The intention here is to block any attempts at applying ` ` which were trying to do something valid, but appear confused. This is the only impact of the legacy ` ` value on the processing model.\n• If 's size is greater than 1, then return true. This means it contains multiple invalid values, which we treat the same way as if the header was omitted entirely.\n• None If [0] is \" \", then return false.\n• If [0] is \" \", then:\n• While is not null:\n• None If 's origin is not same origin with , then return false.\n• If we've reached this point then we have a lone invalid value (which could potentially be one the legacy ` ` or ` ` forms). These are treated as if the header were omitted entirely.\n\nThe ` ` HTTP response header is the HTTP-equivalent to a element with an attribute in the Refresh state. It takes the same value and works largely the same. Its processing model is detailed in create and initialize a object.\n\nBrowser user agents should provide the ability to navigate, reload, and stop loading any top-level traversable in their top-level traversable set.\n\nFor example, via a location bar and reload/stop button UI.\n\nBrowser user agents should provide the ability to traverse by a delta any top-level traversable in their top-level traversable set.\n\nFor example, via back and forward buttons, possibly including long-press abilities to change the delta.\n\nIt is suggested that such user agents allow traversal by deltas greater than one, to avoid letting a page \"trap\" the user by stuffing the session history with spurious entries. (For example, via repeated calls to or fragment navigations.)\n\nSome user agents have heuristics for translating a single \"back\" or \"forward\" button press into a larger delta, specifically to overcome such abuses. We are contemplating specifying these heuristics in issue #7832.\n\nBrowser user agents should offer users the ability to create a fresh top-level traversable, given a user-provided or user agent-determined initial URL.\n\nFor example, via a \"new tab\" or \"new window\" button.\n\nBrowser user agents should offer users the ability to arbitrarily close any top-level traversable in their top-level traversable set.\n\nFor example, by clicking a \"close tab\" button.\n\nBrowser user agents may provide ways for the user to explicitly cause any navigable (not just a top-level traversable) to navigate, reload, or stop loading.\n\nFor example, via a context menu.\n\nBrowser user agents may provide the ability for users to destroy a top-level traversable.\n\nFor example, by force-closing a window containing one or more such top-level traversables.\n\nWhen a user requests a reload of a navigable whose active session history entry's document state's resource is a POST resource, the user agent should prompt the user to confirm the operation first, since otherwise transactions (e.g., purchases or database modifications) could be repeated.\n\nWhen a user requests a reload of a navigable, user agents may provide a mechanism for ignoring any caches when reloading.\n\nAll calls to navigate initiated by the mechanisms mentioned above must have the userInvolvement argument set to \" \".\n\nAll calls to reload initiated by the mechanisms mentioned above must have the userInvolvement argument set to \" \".\n\nAll calls to traverse the history by a delta initiated by the mechanisms mentioned above must not pass a value for the sourceDocument argument.\n\nThe above recommendations, and the data structures in this specification, are not meant to place restrictions on how user agents represent the session history to the user.\n\nFor example, although a top-level traversable's session history entries are stored and maintained as a list, and the user agent is recommended to give an interface for traversing that list by a delta, a novel user agent could instead or in addition present a tree-like view, with each page having multiple \"forward\" pages that the user can choose between.\n\nSimilarly, although session history for all descendant navigables is stored in their traversable navigable, user agents could present the user with a more nuanced per-navigable view of the session history.\n\nBrowser user agents may use a top-level browsing context's boolean for the following purposes:\n• None Deciding whether or not to provide a minimal web browser user interface for the corresponding top-level traversable.\n• None Performing the optional steps in set up browsing context features.\n\nIn both cases user agents might additionally incorporate user preferences, or present a choice as to whether to go down the popup route.\n\nUser agents that provides a minimal user interface for such popups are encouraged to not hide the browser's location bar.\n\nVarious mechanisms can cause author-provided executable code to run in the context of a document. These mechanisms include, but are probably not limited to:\n• Event handlers, whether registered through the DOM using , by explicit event handler content attributes, by event handler IDL attributes, or otherwise.\n• Processing of technologies like SVG that have their own scripting features.\n\nJavaScript defines the concept of an agent. This section gives the mapping of that language-level concept on to the web platform.\n\nThe following types of agents exist on the web platform:\n\nOnly shared and dedicated worker agents allow the use of JavaScript APIs to potentially block.\n• None Let be a new unique internal value.\n• None Let be a new .\n• None Let be a new agent whose [[CanBlock]] is , [[Signifier]] is , [[CandidateExecution]] is , and [[IsLockFree1]], [[IsLockFree2]], and [[LittleEndian]] are set at the implementation's discretion.\n\nFor a realm , the agent whose [[Signifier]] is .[[AgentSignifier]] is .\n\nThe for a platform object is 's relevant realm's agent.\n\nThe agent equivalent of the current realm is the surrounding agent.\n\nJavaScript also defines the concept of an agent cluster, which this standard maps to the web platform by placing agents appropriately when they are created using the obtain a similar-origin window agent or obtain a worker/worklet agent algorithms.\n\nThe agent cluster concept is crucial for defining the JavaScript memory model, and in particular among which agents the backing data of objects can be shared.\n\nConceptually, the agent cluster concept is an architecture-independent, idealized \"process boundary\" that groups together multiple \"threads\" (agents). The agent clusters defined by the specification are generally more restrictive than the actual process boundaries implemented in user agents. By enforcing these idealized divisions at the specification level, we ensure that web developers see interoperable behavior with regard to shared memory, even in the face of varying and changing user agent process models.\n\nAn agent cluster has an associated , which is a cross-origin isolation mode. It is initially \" \".\n\nAn agent cluster has an associated (a boolean), which is initially false.\n\nThe following defines the allocation of the agent clusters of similar-origin window agents.\n\nAn is a site or tuple origin. Without web developer action to achieve origin-keyed agent clusters, it will be a site.\n\nAn equivalent formulation is that an agent cluster key can be a scheme-and-host or an origin.\n\nTo , given an origin , a browsing context group , and a boolean , run these steps:\n• None Let be the result of obtaining a site with .\n• None If 's cross-origin isolation mode is not \" \", then set to .\n• None Otherwise, if 's historical agent cluster key map[ ] exists, then set to 's historical agent cluster key map[ ].\n• \n• None If is true, then set to .\n• If 's agent cluster map[ ] does not exist, then:\n• None Let be a new agent cluster.\n• If is an origin:\n• None Add the result of creating an agent, given false, to .\n\nThis means that there is only one similar-origin window agent per browsing context agent cluster. (However, dedicated worker and worklet agents might be in the same cluster.)\n\nThe following defines the allocation of the agent clusters of all other types of agents.\n\nTo , given an environment settings object or null , a boolean , and a boolean , run these steps:\n• If is true, then:\n• These workers can be considered to be origin-keyed. However, this is not exposed through any APIs (in the way that exposes the origin-keyedness for windows).\n• \n• None Set to the agent cluster which contains .\n• None Let be the result of creating an agent given .\n\nTo , given an environment settings object and a boolean , return the result of obtaining a worker/worklet agent given , , and true.\n\nTo , given an environment settings object , return the result of obtaining a worker/worklet agent given , false, and false.\n\nTo , return the result of obtaining a worker/worklet agent given null, true, and false.\n\nThe JavaScript specification introduces the realm concept, representing a global environment in which script is run. Each realm comes with an implementation-defined global object; much of this specification is devoted to defining that global object and its properties.\n\nFor web specifications, it is often useful to associate values or algorithms with a realm/global object pair. When the values are specific to a particular type of realm, they are associated directly with the global object in question, e.g., in the definition of the or interfaces. When the values have utility across multiple realms, we use the environment settings object concept.\n\nFinally, in some cases it is necessary to track associated values before a realm/global object/environment settings object even comes into existence (for example, during navigation). These values are tracked in the environment concept.\n\nAn is an object that identifies the settings of a current or potential execution environment (i.e., a navigation params's reserved environment or a request's reserved client). An environment has the following fields:\n\nSpecifications may define for environments. The steps take an environment as input.\n\nThe environment discarding steps are run for only a select few environments: the ones that will never become execution ready because, for example, they failed to load.\n\nAn is an environment that additionally specifies algorithms for:\n\nAn environment settings object's is its global object's relevant agent's event loop.\n\nA is a JavaScript object that is the [[GlobalObject]] field of a realm.\n\nIn this specification, all realms are created with global objects that are either , , or objects.\n\nA global object has an boolean, which is initially false.\n\nA global object has an , a set of objects, initially empty. This set must not create strong references to any of its members, and implementations are free to limit its size in an implementation-defined manner, e.g., by removing old entries from it when new ones are added.\n\nA global object has an , a list of objects, initially empty.\n\nA global object has an , initially an empty import map.\n\nFor now, only global objects have their import map modified from the initial empty one. The import map is only accessed for the resolution of a root module script.\n\nThe resolved module set ensures that module specifier resolution returns the same result when called multiple times with the same (referrer, specifier) pair. It does that by ensuring that import map rules that impact the specifier in its referrer's scope cannot be defined after its initial resolution. For now, only global objects have their module set data structures modified from the initial empty one.\n\nThere is always a 1-to-1-to-1 mapping between realms, global objects, and environment settings objects:\n• None A realm has a [[HostDefined]] field, which contains .\n• None A realm has a [[GlobalObject]] field, which contains .\n• None Each global object in this specification is created during the creation of a corresponding realm, known as .\n• None Each global object in this specification is created alongside a corresponding environment settings object, known as its relevant settings object.\n• None An environment settings object's realm then has a [[GlobalObject]] field, which contains .\n\nTo in an agent , optionally with instructions to create a global object or a global this binding (or both), the following steps are taken:\n• None Perform InitializeHostDefinedRealm() with the provided customizations for creating the global object and the global this binding.\n• Let be the running JavaScript execution context. This is the JavaScript execution context created in the previous step.\n• If 's agent cluster's cross-origin isolation mode is \" \", then: This is done for compatibility with web content and there is some hope that this can be removed in the future. Web developers can still get at the constructor through .\n\nWhen defining algorithm steps throughout this specification, it is often important to indicate what realm is to be used—or, equivalently, what global object or environment settings object is to be used. In general, there are at least four possibilities:\n\nNote how the entry, incumbent, and current concepts are usable without qualification, whereas the relevant concept must be applied to a particular platform object.\n\nThe incumbent and entry concepts should not be used by new specifications, as they are excessively complicated and unintuitive to work with. We are working to remove almost all existing uses from the platform: see issue #1430 for incumbent, and issue #1431 for entry.\n\nIn general, web platform specifications should use the relevant concept, applied to the object being operated on (usually the this value of the current method). This mismatches the JavaScript specification, where current is generally used as the default (e.g., in determining the realm whose constructor should be used to construct the result in ). But this inconsistency is so embedded in the platform that we have to accept it going forward.\n\nThe rest of this section deals with formally defining the entry, incumbent, current, and relevant concepts.\n\nThe process of calling scripts will push or pop realm execution contexts onto the JavaScript execution context stack, interspersed with other execution contexts.\n\nWith this in hand, we define the to be the most recently pushed item in the JavaScript execution context stack that is a realm execution context. The is the entry execution context's Realm component.\n\nThen, the is the environment settings object of the entry realm.\n\nSimilarly, the is the global object of the entry realm.\n\nAll JavaScript execution contexts must contain, as part of their code evaluation state, a value, which is initially zero. In the process of preparing to run a callback and cleaning up after running a callback, this value will be incremented and decremented.\n\nEvery event loop has an associated , initially empty. Roughly speaking, it is used to determine the incumbent settings object when no author code is on the stack, but author code is responsible for the current algorithm having been run in some way. The process of preparing to run a callback and cleaning up after running a callback manipulate this stack. [WEBIDL]\n\nWhen Web IDL is used to invoke author code, or when HostEnqueuePromiseJob invokes a promise job, they use the following algorithms to track relevant data for determining the incumbent settings object:\n\nTo with an environment settings object :\n• None Let be the topmost script-having execution context.\n• None If is not null, increment 's skip-when-determining-incumbent counter.\n\nTo with an environment settings object :\n• Let be the topmost script-having execution context. This will be the same as the topmost script-having execution context inside the corresponding invocation of prepare to run a callback.\n• None If is not null, decrement 's skip-when-determining-incumbent counter.\n• None Assert: the topmost entry of the backup incumbent settings object stack is .\n\nHere, the is the topmost entry of the JavaScript execution context stack that has a non-null ScriptOrModule component, or null if there is no such entry in the JavaScript execution context stack.\n\nWith all this in place, the is determined as follows:\n• None Let be the topmost script-having execution context.\n• If is null, or if 's skip-when-determining-incumbent counter is greater than zero, then:\n• Assert: the backup incumbent settings object stack is not empty. This assert would fail if you try to obtain the incumbent settings object from inside an algorithm that was triggered neither by calling scripts nor by Web IDL invoking a callback. For example, it would trigger if you tried to obtain the incumbent settings object inside an algorithm that ran periodically as part of the event loop, with no involvement of author code. In such cases the incumbent concept cannot be used.\n• None Return the topmost entry of the backup incumbent settings object stack.\n\nThen, the is the realm of the incumbent settings object.\n\nSimilarly, the is the global object of the incumbent settings object.\n\nThe following series of examples is intended to make it clear how all of the different mechanisms contribute to the definition of the incumbent concept:\n\nThe JavaScript specification defines the current realm, also known as the \"current Realm Record\". [JAVASCRIPT]\n\nThen, the is the environment settings object of the current realm.\n\nSimilarly, the is the global object of the current realm.\n\nThe for a platform object is the value of its [[Realm]] field.\n\nThen, the for a platform object is the environment settings object of the relevant realm for .\n\nSimilarly, the for a platform object is the global object of the relevant realm for .\n\nfor an environment settings object when all of the following conditions are true:\n• The user has not disabled scripting for at this time. (User agents may provide users with the option to disable scripting globally, or in a finer-grained manner, e.g., on a per-origin basis, down to the level of individual environment settings objects.)\n• Either 's global object is not a object, or 's global object's associated 's active sandboxing flag set does not have its sandboxed scripts browsing context flag set.\n\nfor an environment settings object when scripting is not enabled for it, i.e., when any of the above conditions are false.\n\nfor a node if 's node document's browsing context is non-null, and scripting is enabled for 's relevant settings object.\n\nfor a node when scripting is not enabled, i.e., when its node document's browsing context is null or when scripting is disabled for its relevant settings object.\n\nAn environment is a if the following algorithm returns true:\n• If is an environment settings object, then:\n• If is a , then:\n• If 's owner set[0]'s relevant settings object is a secure context, then return true. We only need to check the 0th item since they will necessarily all be consistent.\n• If is a , then return true. Worklets can only be created in secure contexts.\n• None If the result of Is url potentially trustworthy? given 's top-level creation URL is \" \", then return true.\n\nAn environment is a if it is not a secure context.\n\nA is one of two possible structs (namely, a classic script or a module script). All scripts have:\n\nA is a type of script that has the following additional item:\n\nA is another type of script. It has no additional items.\n\nModule scripts can be classified into four types:\n• None A module script is a if its record is a Source Text Module Record.\n• A module script is a if its record is a Synthetic Module Record, and it was created via the create a CSS module script algorithm. CSS module scripts represent a parsed CSS stylesheet.\n• A module script is a if its record is a Synthetic Module Record, and it was created via the create a JSON module script algorithm. JSON module scripts represent a parsed JSON document.\n• A module script is a if its record is a WebAssembly Module Record.\n\nAs CSS stylesheets and JSON documents do not import dependent modules, and do not throw exceptions on evaluation, the fetch options and base URL of CSS module scripts and JSON module scripts and are always null.\n\nThe is determined by the following algorithm:\n\nThe active script concept is so far only used by the feature, to determine the base URL to use for resolving relative module specifiers.\n\nThis section introduces a number of algorithms for fetching scripts, taking various necessary inputs and resulting in classic or module scripts.\n\nis a struct with the following items:\n\nRecall that via the feature, classic scripts can import module scripts.\n\nThe are a script fetch options whose cryptographic nonce is the empty string, integrity metadata is the empty string, parser metadata is \" \", credentials mode is \" \", referrer policy is the empty string, and fetch priority is \" \".\n\nGiven a request and a script fetch options , we define:\n\nTo given a script fetch options , a URL , and an environment settings object :\n• None Let be a copy of .\n• None Let be the result of resolving a module integrity metadata with and .\n\nTo , given a URL and an environment settings object :\n• None If 's integrity[ ] does not exist, then return the empty string.\n\nSeveral of the below algorithms can be customized with a algorithm, which takes a request, a boolean , and a algorithm. It runs with a response and either null (on failure) or a byte sequence containing the response body. will be true for all classic script fetches, and for the initial fetch when fetching an external module script graph or fetching a module worker script graph, but false for the fetches resulting from statements encountered throughout the graph or from expressions.\n\nBy default, not supplying a perform the fetch hook will cause the below algorithms to simply fetch the given request, with algorithm-specific customizations to the request and validations of the resulting response.\n\nTo layer your own customizations on top of these algorithm-specific ones, supply a perform the fetch hook that modifies the given request, fetches it, and then performs specific validations of the resulting response (completing with a network error if the validations fail).\n\nThe hook can also be used to perform more subtle customizations, such as keeping a cache of responses and avoiding performing a fetch at all.\n\nis an example of a specification that runs these algorithms with its own options for the hook. [SW]\n\nNow for the algorithms themselves.\n\nTo given a URL , an environment settings object , a script fetch options , a CORS settings attribute state , an encoding , and an algorithm , run these steps. must be an algorithm accepting null (on failure) or a classic script (on success).\n• None Let be the result of creating a potential-CORS request given , \" \", and .\n• None Set up the classic script request given and .\n• Fetch with the following processResponseConsumeBody steps given response and null, failure, or a byte sequence : can be either CORS-same-origin or CORS-cross-origin. This only affects how error reporting happens.\n• If any of the following are true:\n• None is null or failure; or\n• None 's status is not an ok status, then run given null, and abort these steps. For historical reasons, this algorithm does not include MIME type checking, unlike the other script-fetching algorithms in this section.\n• None Let be the result of extracting a MIME type given 's header list.\n• Set to the result of legacy extracting an encoding given and .\n• Let be the result of decoding to Unicode, using as the fallback encoding. The decode algorithm overrides if the file contains a BOM.\n• None Let be true if was CORS-cross-origin, and false otherwise.\n• None Let be the result of creating a classic script given , , 's URL, , , and .\n\nTo given a URL , an environment settings object , a destination , an environment settings object , an algorithm , and an optional perform the fetch hook , run these steps. must be an algorithm accepting null (on failure) or a classic script (on success).\n• None Let be a new request whose URL is , client is , destination is , initiator type is \" \", mode is \" \", credentials mode is \" \", parser metadata is \" \", and whose use-URL-credentials flag is set.\n• If was given, run with , true, and with as defined below. Otherwise, fetch with processResponseConsumeBody set to as defined below. In both cases, let given response and null, failure, or a byte sequence be the following algorithm:\n• If any of the following are true:\n• None is null or failure; or\n• None 's status is not an ok status, then run given null, and abort these steps.\n• If all of the following are true:\n• None 's URL's scheme is an HTTP(S) scheme; and\n• None the result of extracting a MIME type from 's header list is not a JavaScript MIME type, then run given null, and abort these steps. Other fetch schemes are exempted from MIME type checking for historical web-compatibility reasons. We might be able to tighten this in the future; see issue #3255.\n• None Let be the result of UTF-8 decoding .\n• None Let be the result of creating a classic script using , , 's URL, and the default script fetch options.\n\nTo given a URL , an environment settings object , and an optional perform the fetch hook , run these steps. The algorithm will return a classic script on success, or throw an exception on failure.\n• None Let be a new request whose URL is , client is , destination is \" \", initiator type is \" \", parser metadata is \" \", and whose use-URL-credentials flag is set.\n• If was given, run with , , and with as defined below. Otherwise, fetch with processResponseConsumeBody set to as defined below. In both cases, let given response and null, failure, or a byte sequence be the following algorithm:\n• Pause until is not null. Unlike other algorithms in this section, the fetching process is synchronous here.\n• If any of the following are true:\n• None 's status is not an ok status; or\n• None the result of extracting a MIME type from 's header list is not a JavaScript MIME type,\n• None Let be the result of UTF-8 decoding .\n• None Let be true if was CORS-cross-origin, and false otherwise.\n• None Let be the result of creating a classic script given , , 's URL, the default script fetch options, and .\n\nTo given a URL , an environment settings object , a script fetch options , and an algorithm , run these steps. must be an algorithm accepting null (on failure) or a module script (on success).\n• Fetch a single module script given , , \" \", , , \" \", true, and with the following steps given :\n• None If is null, run given null, and abort these steps.\n• None Fetch the descendants of and link given , \" \", and .\n\nTo given a URL , a destination , an environment settings object , a script fetch options , and an algorithm , run these steps. must be an algorithm accepting null (on failure) or a module script (on success).\n• Fetch a single module script given , , , , , \" \", true, and with the following steps given :\n• If is not null, optionally fetch the descendants of and link given , , and an empty algorithm. Generally, performing this step will be beneficial for performance, as it allows pre-loading the modules that will invariably be requested later, via algorithms such as fetch an external module script graph that fetch the entire graph. However, user agents might wish to skip them in bandwidth-constrained situations, or situations where the relevant fetches are already in flight.\n\nTo given a string , a URL , an environment settings object , a script fetch options , and an algorithm , run these steps. must be an algorithm accepting null (on failure) or a module script (on success).\n• None Let be the result of creating a JavaScript module script using , , , and .\n• None Fetch the descendants of and link , given , \" \", and .\n\nTo given a URL , an environment settings object , a destination , a credentials mode , an environment settings object , and an algorithm , fetch a worklet/module worker script graph given , , , , , and .\n\nTo given a URL , an environment settings object , a destination , a credentials mode , an environment settings object , a module responses map , and an algorithm , fetch a worklet/module worker script graph given , , , , , , and the following perform the fetch hook given and processCustomFetchResponse:\n• None If [ ] is \" \", wait in parallel until that entry's value changes, then queue a task on the networking task source to proceed with running the following steps.\n• Fetch , with processResponseConsumeBody set to the following steps given response and null, failure, or a byte sequence :\n\nThe following algorithms are meant for internal use by this specification only as part of fetching an external module script graph or other similar concepts above, and should not be used directly by other specifications.\n\nThis diagram illustrates how these algorithms relate to the ones above, as well as to each other:\n\nTo given a URL , an environment settings object , a destination , a credentials mode , an environment settings object , an algorithm , and an optional perform the fetch hook , run these steps. must be an algorithm accepting null (on failure) or a module script (on success).\n• None Let be a script fetch options whose cryptographic nonce is the empty string, integrity metadata is the empty string, parser metadata is \" \", credentials mode is , referrer policy is the empty string, and fetch priority is \" \".\n• Fetch a single module script given , , , , , \" \", true, and as defined below. If was given, pass it along as well. given is the following algorithm:\n• None If is null, run given null, and abort these steps.\n• None Fetch the descendants of and link given , , and . If was given, pass it along as well.\n\nTo fetch the descendants of and link a module script , given an environment settings object , a destination , an algorithm , and an optional perform the fetch hook , run these steps. must be an algorithm accepting null (on failure) or a module script (on success).\n• If is null, then:\n• None If was given, set .[[PerformFetch]] to .\n• This step will recursively load all the module transitive dependencies.\n• Upon fulfillment of , run the following steps:\n• This step will recursively call Link on all of the module's unlinked dependencies. If this throws an exception, catch it, and set 's error to rethrow to that exception.\n• Upon rejection of , run the following steps:\n• None If .[[ParseError]] is not null, set 's error to rethrow to .[[ParseError]] and run given .\n• .[[ParseError]] is null when is rejected due to a loading error.\n\nTo , given a URL , an environment settings object , a destination , a script fetch options , an environment settings object , a referrer , an optional ModuleRequest Record , a boolean , an algorithm , and an optional perform the fetch hook , run these steps. must be an algorithm accepting null (on failure) or a module script (on success).\n• None If was given, then set to the result of running the module type from module request steps given .\n• None Assert: the result of running the module type allowed steps given and is true. Otherwise, we would not have reached this point because a failure would have been raised when inspecting .[[Attributes]] in HostLoadImportedModule or fetch a single imported module script.\n• None If [( , )] is \" \", wait in parallel until that entry's value changes, then queue a task on the networking task source to proceed with running the following steps.\n• None If [( , )] exists, run given [( , )], and return.\n• None Let be a new request whose URL is , mode is \" \", referrer is , and client is .\n• None Set 's destination to the result of running the fetch destination from module type steps given and .\n• None If is \" \", \" \", or \" \", and is true, then set 's mode to \" \".\n• None Set up the module script request given and .\n• If was given, run with , , and with as defined below. Otherwise, fetch with processResponseConsumeBody set to as defined below. In both cases, let given response and null, failure, or a byte sequence be the following algorithm:\n• If any of the following are true:\n• None is null or failure; or\n• None 's status is not an ok status, then set [( , )] to null, run given null, and abort these steps.\n• None Let be the result of extracting a MIME type from 's header list.\n• None Let be the result of parsing the ` ` header given . [REFERRERPOLICY]\n• None If is not the empty string, set 's referrer policy to .\n• None If 's essence is \" \" and is \" \", then set to the result of creating a WebAssembly module script given , , 's URL, and .\n• \n• None Let be the result of UTF-8 decoding .\n• None If is a JavaScript MIME type and is \" \", then set to the result of creating a JavaScript module script given , , 's URL, and .\n• None If the MIME type essence of is \" \" and is \" \", then set to the result of creating a CSS module script given and .\n• None If is a JSON MIME type and is \" \", then set to the result of creating a JSON module script given and .\n• Set [( , )] to , and run given . It is intentional that the module map is keyed by the request URL, whereas the base URL for the module script is set to the response URL. The former is used to deduplicate fetches, while the latter is used for URL resolution.\n\nTo , given a URL , an environment settings object , a destination , a script fetch options , environment settings object , a referrer , a ModuleRequest Record , an algorithm , and an optional perform the fetch hook , run these steps. must be an algorithm accepting null (on failure) or a module script (on success).\n• None Assert: .[[Attributes]] does not contain any Record such that .[[Key]] is not \" \", because we only asked for \" \" attributes in HostGetSupportedImportAttributes.\n• None Let be the result of running the module type from module request steps given .\n• None If the result of running the module type allowed steps given and is false, then run given null, and return.\n• None Fetch a single module script given , , , , , , , false, and . If was given, pass it along as well.\n\nTo , given a string , an environment settings object , a URL , a script fetch options , an optional boolean (default false), and an optional URL-or-null (default null):\n• If is true, then set to . When is true, is the script's CORS-cross-origin response's url, which shouldn't be exposed to JavaScript. Therefore, is sanitized here.\n• None If scripting is disabled for , then set to the empty string.\n• None Let be a new classic script that this algorithm will subsequently initialize.\n• None Set 's parse error and error to rethrow to null.\n• Passing as the last parameter here ensures .[[HostDefined]] will be .\n• If is a list of errors, then:\n• None Set 's parse error and its error to rethrow to [0].\n\nTo , given a string , an environment settings object , a URL , and a script fetch options :\n• None If scripting is disabled for , then set to the empty string.\n• None Let be a new module script that this algorithm will subsequently initialize.\n• None Set 's parse error and error to rethrow to null.\n• Passing as the last parameter here ensures .[[HostDefined]] will be .\n• If is a list of errors, then:\n\nTo , given a byte sequence , an environment settings object , a URL , and a script fetch options :\n• If scripting is disabled for , then set to the byte sequence 0x00 0x61 0x73 0x6d 0x01 0x00 0x00 0x00. This byte sequence corresponds to an empty WebAssembly module with only the magic bytes and version number provided.\n• None Let be a new module script that this algorithm will subsequently initialize.\n• None Set 's parse error and error to rethrow to null.\n• Let be the result of parsing a WebAssembly module given , 's realm, and . Passing as the last parameter here ensures .[[HostDefined]] will be .\n• If the previous step threw an error , then:\n\nspecifies the hooks for the WebAssembly integration with ECMA-262 module loading. This includes support both for direct dependency imports, as well as for source phase imports, which support virtualization and multi-instantiation. [WASMESM]\n\nTo , given a string and an environment settings object :\n• None Let be a new module script that this algorithm will subsequently initialize.\n• None Set 's parse error and error to rethrow to null.\n• None Let be the result of running the steps to create a constructed with an empty dictionary as the argument.\n• Run the steps to synchronously replace the rules of a on given . If this throws an exception, catch it, and set 's parse error to that exception, and return . The steps to synchronously replace the rules of a will throw if contains any rules. This is by-design for now because there is not yet an agreement on how to handle these for CSS module scripts; therefore they are blocked altogether until a consensus is reached.\n• None Set 's record to the result of CreateDefaultExportSyntheticModule( ).\n\nTo , given a string and an environment settings object :\n• None Let be a new module script that this algorithm will subsequently initialize.\n• None Set 's parse error and error to rethrow to null.\n• If this throws an exception, catch it, and set 's parse error to that exception, and return .\n\nThe steps, given a ModuleRequest Record , are as follows:\n• If .[[Attributes]] has a Record such that .[[Key]] is \" \", then:\n• If .[[Value]] is \" \", then set to null. This specification uses the \" \" module type internally for JavaScript module scripts or WebAssembly module scripts, so this step is needed to prevent modules from being imported using a \" \" type attribute (a null will cause the module type allowed check to fail).\n• None Otherwise, set to .[[Value]].\n\nThe steps, given a string and an environment settings object , are as follows:\n• None If is not \" \", \" \", or \" \", then return false.\n• None If is \" \" and the interface is not exposed in 's realm, then return false.\n\nThe steps, given a destination and a string , are as follows:\n• If is \" \", then return \" \".\n• If is \" \", then return \" \".\n\nTo given a classic script and an optional boolean (default false):\n• None Let be the settings object of .\n• None Check if we can run script with . If this returns \"do not run\" then return NormalCompletion(empty).\n• None If 's error to rethrow is not null, then set to Completion { [[Type]]: throw, [[Value]]: 's error to rethrow, [[Target]]: empty }.\n• If ScriptEvaluation does not complete because the user agent has aborted the running script, leave as null.\n• If is an abrupt completion, then:\n• If is true and 's muted errors is false, then:\n• None Clean up after running script with .\n• If is true and 's muted errors is true, then:\n• None Clean up after running script with .\n• Otherwise, is false. Perform the following steps:\n• None Report an exception given by .[[Value]] for 's settings object's global object.\n• None Clean up after running script with .\n• None Clean up after running script with .\n• None If is a normal completion, then return .\n• None If we've reached this point, was left as null because the script was aborted prematurely during evaluation. Return Completion { [[Type]]: throw, [[Value]]: a new \" \" , [[Target]]: empty }.\n\nTo given a module script and an optional boolean (default false):\n• None Let be the settings object of .\n• None Check if we can run script with . If this returns \"do not run\", then return a promise resolved with undefined.\n• None If 's error to rethrow is not null, then set to a promise rejected with 's error to rethrow.\n• \n• This step will recursively evaluate all of the module's dependencies. If Evaluate fails to complete as a result of the user agent aborting the running script, then set to a promise rejected with a new \" \" .\n• None If is false, then upon rejection of with , report an exception given by for 's settings object's global object.\n• None Clean up after running script with .\n\nThe steps to check if we can run script with an environment settings object are as follows. They return either \"run\" or \"do not run\".\n• None If the global object specified by is a object whose object is not fully active, then return \"do not run\".\n• None If scripting is disabled for , then return \"do not run\".\n\nThe steps to with an environment settings object are as follows:\n• None Push 's realm execution context onto the JavaScript execution context stack; it is now the running JavaScript execution context.\n• None Add to the surrounding agent's event loop's currently running task's script evaluation environment settings object set.\n\nThe steps to with an environment settings object are as follows:\n• None If the JavaScript execution context stack is now empty, perform a microtask checkpoint. (If this runs scripts, these algorithms will be invoked reentrantly.)\n\nThese algorithms are not invoked by one script directly calling another, but they can be invoked reentrantly in an indirect manner, e.g. if a script dispatches an event which has event listeners registered.\n\nThe is the script in the [[HostDefined]] field in the ScriptOrModule component of the running JavaScript execution context.\n\nAlthough the JavaScript specification does not account for this possibility, it's sometimes necessary to . This causes any ScriptEvaluation or Source Text Module Record Evaluate invocations to cease immediately, emptying the JavaScript execution context stack without triggering any of the normal mechanisms like blocks. [JAVASCRIPT]\n\nUser agents may impose resource limitations on scripts, for example CPU quotas, memory limits, total execution time limits, or bandwidth limitations. When a script exceeds a limit, the user agent may either throw a \" \" , abort the script without an exception, prompt the user, or throttle script execution.\n\nUser agents are encouraged to allow users to disable scripting whenever the user is prompted either by a script (e.g. using the API) or because of a script's actions (e.g. because it has exceeded a time limit).\n\nIf scripting is disabled while a script is executing, the script should be terminated immediately.\n\nUser agents may allow users to specifically disable scripts just for the purposes of closing a browsing context.\n\nFor example, the prompt mentioned in the example above could also offer the user with a mechanism to just close the page entirely, without running any event handlers.\n\nTo from a JavaScript value :\n• None Let be an empty map keyed by IDL attributes.\n• Set [ ], [ ], [ ], and [ ] to implementation-defined values derived from . Browsers implement behavior not specified here or in the JavaScript specification to gather values which are helpful, including in unusual cases (e.g., ). In the future, this might be specified in greater detail.\n\nTo which is a JavaScript value, for a particular global object and optional boolean (default false):\n• None Let be the result of extracting error information from .\n• Let be a script found in an implementation-defined way, or null. This should usually be the running script (most notably during run a classic script). Implementations have not yet settled on interoperable behavior for which script is used to determine whether errors are muted in less common cases.\n• None If is a classic script and 's muted errors is true, then set [ ] to null, [ ] to \" \", [ ] to the empty string, [ ] to 0, and [ ] to 0.\n• None If is true, then set [ ] to null.\n• If is not in error reporting mode, then:\n• If implements , then set to the result of firing an event named at , using , with the attribute initialized to true, and additional attributes initialized according to . Returning true in an event handler cancels the event per the event handler processing algorithm.\n• If is true, then:\n• If implements , queue a global task on the DOM manipulation task source with the 's associated 's relevant global object to run these steps:\n• None Let be the object associated with .\n• None Set be the result of firing an event named at , using , with the attribute initialized to true, and additional attributes initialized according to .\n• If is true, then report for 's relevant global object with set to true. The actual value will not be available in the owner realm, but the user agent still carries through enough information to set the message, filename, and other attributes, as well as potentially report to a developer console.\n• None Otherwise, the user agent may report to a developer console.\n\nIf the implicit port connecting a worker to its object has been disentangled (i.e. if the parent worker has been terminated), then the user agent must act as if the object had no event handler and as if that worker's attribute was null, but must otherwise act as described above.\n\nThus, error reports propagate up to the chain of dedicated workers up to the original , even if some of the workers along this chain have been terminated and garbage collected.\n\nPrevious revisions of this standard defined an algorithm to . As part of issue #958, this has been superseded by report an exception which behaves differently and takes different inputs. Issue #10516 tracks updating the specification ecosystem.\n\nThe method steps are to report an exception for this.\n\nIt is unclear whether muting is applicable here. In Chrome and Safari it is muted, but in Firefox it is not. See also issue #958.\n\nThe interface is defined as follows:\n\nThe attribute must return the value it was initialized to. It represents the error message.\n\nThe attribute must return the value it was initialized to. It represents the URL of the script in which the error originally occurred.\n\nThe attribute must return the value it was initialized to. It represents the line number where the error occurred in the script.\n\nThe attribute must return the value it was initialized to. It represents the column number where the error occurred in the script.\n\nThe attribute must return the value it was initialized to. It must initially be initialized to undefined. Where appropriate, it is set to the object representing the error (e.g., the exception object in the case of an uncaught exception).\n\nIn addition to synchronous runtime script errors, scripts may experience asynchronous promise rejections, tracked via the and events. Tracking these rejections is done via the HostPromiseRejectionTracker abstract operation, but reporting them is defined here.\n• None Let be a clone of 's about-to-be-notified rejected promises list.\n• None If is empty, then return.\n• Queue a global task on the DOM manipulation task source given to run the following step:\n• None For each promise of :\n• None If .[[PromiseIsHandled]] is true, then continue.\n• None Let be the result of firing an event named at , using , with the attribute initialized to true, the attribute initialized to , and the attribute initialized to .[[PromiseResult]].\n• None If is true, then the user agent may report .[[PromiseResult]] to a developer console.\n• None If .[[PromiseIsHandled]] is false, then append to 's outstanding rejected promises weak set.\n\nThe interface is defined as follows:\n\nThe attribute must return the value it was initialized to. It represents the promise which this notification is about.\n\nBecause of how Web IDL conversion rules for types always wrap the input into a new promise, the attribute is of type instead, which is more appropriate for representing an opaque handle to the original promise object.\n\nThe attribute must return the value it was initialized to. It represents the rejection reason for the promise.\n\nAn is a struct that is similar to a script, and also can be stored in a element's result, but is not counted as a script for other purposes. It has the following items:\n\nTo given a string and a URL :\n• None Let be an import map parse result whose import map is null and whose error to rethrow is null.\n• None Parse an import map string given and , catching any exceptions. If this threw an exception, then set 's error to rethrow to that exception. Otherwise, set 's import map to the return value.\n\nTo given a and an import map parse result :\n• None If 's error to rethrow is not null, then report an exception given by 's error to rethrow for and return.\n• None Merge existing and new import maps, given and 's import map.\n\nThe resolve a module specifier algorithm is the primary entry point for converting module specifier strings into URLs. When no import maps are involved, it is relatively straightforward, and reduces to resolving a URL-like module specifier.\n\nWhen there is a non-empty import map present, the behavior is more complex. It checks candidate entries from all applicable module specifier maps, from most-specific to least-specific scopes (falling back to the top-level unscoped imports), and from most-specific to least-specific prefixes. For each candidate, the resolve an imports match algorithm will give on the following results:\n• None Successful resolution of the specifier to a URL. Then the resolve a module specifier algorithm will return that URL.\n• None Throwing an exception. Then the resolve a module specifier algorithm will rethrow that exception, without any further fallbacks.\n• None Failing to resolve, without an error. In this case the outer resolve a module specifier algorithm will move on to the next candidate.\n\nIn the end, if no successful resolution is found via any of the candidate module specifier maps, resolve a module specifier will throw an exception. Thus the result is always either a URL or a thrown exception.\n\nTo given a script-or-null and a string :\n• None Let and be null.\n• If is not null, then:\n• None Let be an empty import map.\n• None If 's global object implements , then set to 's global object's import map.\n• None Let be the result of resolving a URL-like module specifier given and .\n• None Let be the serialization of , if is non-null; otherwise, .\n• For each → of 's scopes:\n• If is , or if ends with U+002F (/) and is a code unit prefix of , then:\n• None Let be the result of resolving an imports match given , , and .\n• None If is not null, then set to , and break.\n• None If is null, set be the result of resolving an imports match given , , and 's imports.\n• If is null, set it to . By this point, if was null, wasn't remapped to anything by , but it might have been able to be turned into a URL.\n• If is not null, then:\n• None Add module to resolved module set given , , , and .\n• None Throw a indicating that was a bare specifier, but was not remapped to anything by .\n\nTo , given a string , a URL-or-null , and a module specifier map :\n• For each → of :\n• If is , then:\n• If is null, then throw a indicating that resolution of was blocked by a null entry. This will terminate the entire resolve a module specifier algorithm, without any further fallbacks.\n• If all of the following are true:\n• None is a code unit prefix of ; and\n• None either is null, or is special,\n• If is null, then throw a indicating that the resolution of was blocked by a null entry. This will terminate the entire resolve a module specifier algorithm, without any further fallbacks.\n• None Let be the portion of after the initial prefix.\n• None Assert: , serialized, ends with U+002F (/), as enforced during parsing.\n• None Let be the result of URL parsing with .\n• If is failure, then throw a indicating that resolution of was blocked since the portion could not be URL-parsed relative to the mapped to by the prefix. This will terminate the entire resolve a module specifier algorithm, without any further fallbacks.\n• If the serialization of is not a code unit prefix of the serialization of , then throw a indicating that the resolution of was blocked due to it backtracking above its prefix . This will terminate the entire resolve a module specifier algorithm, without any further fallbacks.\n• The resolve a module specifier algorithm will fall back to a less-specific scope, or to \" \", if possible.\n\nTo , given a string and a URL :\n• If starts with \" \", \" \", or \" \", then:\n• None Let be the result of URL parsing with .\n• If is failure, then return null. One way this could happen is if is \" \" and is a URL. This includes cases where starts with \" \", i.e., scheme-relative URLs. Thus, might end up with a different host than .\n• None Let be the result of URL parsing (with no base URL).\n• None If is failure, then return null.\n\nAn import map allows control over module specifier resolution. Import maps are delivered via inline elements with their attribute set to \" \", and with their child text content containing a JSON representation of the import map.\n\nA can have multiple import maps processed, which can happen either before or after any modules have been imported, e.g., via expressions or elements with their attribute set to \" \". The merge existing and new import maps algorithm ensures that new import maps cannot define the module resolution for modules that were already defined by past import maps, or for ones that were already resolved.\n\nThe child text content of a element representing an import map must match the following :\n• None It must be valid JSON. [JSON]\n• None The JSON must represent a JSON object, with at most the three keys \" \", \" \", and \" \".\n• None The values corresponding to the \" \", \" \", and \" \" keys, if present, must themselves be JSON objects.\n• None The value corresponding to the \" \" key, if present, must be a valid module specifier map.\n• None The value corresponding to the \" \" key, if present, must be a JSON object, whose keys are valid URL strings and whose values are valid module specifier maps.\n• None The value corresponding to the \" \" key, if present, must be a JSON object, whose keys are valid URL strings and whose values fit the requirements of the integrity attribute.\n\nA is a JSON object that meets the following requirements:\n• None All of its keys must be nonempty.\n• None All of its values must be strings.\n• None Each value must be either a valid absolute URL or a valid URL string that starts with \" \", \" \", or \" \".\n• None If a given key ends with \" \", then the corresponding value must also.\n\nFormally, an is a struct with three items:\n• None , an ordered map of URLs to module specifier maps; and\n\nA is an ordered map whose keys are strings and whose values are either URLs or nulls.\n\nA is an ordered map whose keys are URLs and whose values are strings that will be used as integrity metadata.\n\nAn is an import map with its imports and scopes both being empty maps.\n\nA is a struct. It has the following items:\n\nImplementations can replace specifier as a URL with a boolean that indicates that the specifier is either bare or URL-like that is special.\n\nTo given an environment settings object , a string , a string , and a URL-or-null :\n• None If does not implement , then return.\n• None Let be a new specifier resolution record, with serialized base URL set to , specifier set to , and specifier as a URL set to .\n\nTo , given a string and a URL :\n• None Let be the result of parsing a JSON string to an Infra value given .\n• None If is not an ordered map, then throw a indicating that the top-level value needs to be a JSON object.\n• None Let be an empty ordered map.\n• \n• None If [\" \"] is not an ordered map, then throw a indicating that the value for the \" \" top-level key needs to be a JSON object.\n• None Set to the result of sorting and normalizing a module specifier map given [\" \"] and .\n• None Let be an empty ordered map.\n• \n• None If [\" \"] is not an ordered map, then throw a indicating that the value for the \" \" top-level key needs to be a JSON object.\n• None Set to the result of sorting and normalizing scopes given [\" \"] and .\n• None Let be an empty ordered map.\n• \n• None If [\" \"] is not an ordered map, then throw a indicating that the value for the \" \" top-level key needs to be a JSON object.\n• None Set to the result of normalizing a module integrity map given [\" \"] and .\n• If 's keys contains any items besides \" \", \" \", or \" \", then the user agent should report a warning to the console indicating that an invalid top-level key was present in the import map. This can help detect typos. It is not an error, because that would prevent any future extensions from being added backward-compatibly.\n• None Return an import map whose imports are , whose scopes are , and whose integrity are .\n\nTo , given a module specifier map and a module specifier map :\n• None Let be a deep copy of .\n• For each → of :\n• If exists in , then:\n• None The user agent may report a warning to the console indicating the ignored rule. They may choose to avoid reporting if the rule is identical to an existing one.\n\nTo , given a global object and an import map :\n• Let be a deep copy of 's scopes. We're mutating these copies and removing items from them when they are used to ignore scope-specific rules. This is true for , as well as to below.\n• None Let be a deep copy of 's imports.\n• For each → of :\n• For each of 's resolved module set:\n• If is 's serialized base URL, or if ends with U+002F (/) and is a code unit prefix of 's serialized base URL, then:\n• For each → of :\n• If is 's specifier, or if all of the following conditions are true:\n• None either 's specifier as a URL is null or is special,\n• None The user agent may report a warning to the console indicating the ignored rule. They may choose to avoid reporting if the rule is identical to an existing one. Implementers are encouraged to implement a more efficient matching algorithm when working with the resolved module set. As guidance, the number of resolved/mapped modules in a large application can be on the order of thousands.\n• None If exists in 's scopes, then set 's scopes[ ] to the result of merging module specifier maps, given and 's scopes[ ].\n• For each → of 's integrity:\n• If exists in 's integrity, then:\n• None The user agent may report a warning to the console indicating the ignored rule. They may choose to avoid reporting if the rule is identical to an existing one.\n• For each of 's resolved module set:\n• For each → of :\n• If starts with 's specifier, then:\n• None The user agent may report a warning to the console indicating the ignored rule. They may choose to avoid reporting if the rule is identical to an existing one.\n• None Set 's imports to the result of merge module specifier maps, given and 's imports.\n\nThe above algorithm merges a new import map into the given environment settings object's global object's import map. Let's examine a few examples:\n\nTo , given an ordered map and a URL :\n• None Let be an empty ordered map.\n• For each → of :\n• None Let be the result of normalizing a specifier key given and .\n• None If is null, then continue.\n• If is not a string, then:\n• None The user agent may report a warning to the console indicating that addresses need to be strings.\n• None Let be the result of resolving a URL-like module specifier given and .\n• If is null, then:\n• None The user agent may report a warning to the console indicating that the address was invalid.\n• If ends with U+002F (/), and the serialization of does not end with U+002F (/), then:\n• None The user agent may report a warning to the console indicating that an invalid address was given for the specifier key ; since ends with a slash, the address needs to as well.\n• None Return the result of sorting in descending order , with an entry being less than an entry if 's key is code unit less than 's key.\n\nTo , given an ordered map and a URL :\n• None Let be an empty ordered map.\n• For each → of :\n• None If is not an ordered map, then throw a indicating that the value of the scope with prefix needs to be a JSON object.\n• None Let be the result of URL parsing with .\n• If is failure, then:\n• None The user agent may report a warning to the console that the scope prefix URL was not parseable.\n• None Let be the serialization of .\n• None Set [ ] to the result of sorting and normalizing a module specifier map given and .\n• None Return the result of sorting in descending order , with an entry being less than an entry if 's key is code unit less than 's key.\n\nIn the above two algorithms, sorting keys and scopes in descending order has the effect of putting \" \" before \" \". This in turn gives \" \" a higher priority than \" \" during module specifier resolution.\n\nTo , given an ordered map :\n• None Let be an empty ordered map.\n• For each → of :\n• Let be the result of resolving a URL-like module specifier given and . Unlike \" \", keys of the integrity map are treated as URLs, not module specifiers. However, we use the resolve a URL-like module specifier algorithm to prohibit \"bare\" relative URLs like , which could be mistaken for module specifiers.\n• If is null, then:\n• None The user agent may report a warning to the console indicating that the key failed to resolve.\n• If is not a string, then:\n• None The user agent may report a warning to the console indicating that integrity metadata values need to be strings.\n\nTo , given a string and a URL :\n• If is the empty string, then:\n• None The user agent may report a warning to the console indicating that specifier keys may not be the empty string.\n• None Let be the result of resolving a URL-like module specifier, given and .\n• None If is not null, then return the serialization of .\n\nThe JavaScript specification contains a number of implementation-defined abstract operations, that vary depending on the host environment. This section defines them for user agent hosts.\n\nJavaScript contains an implementation-defined HostEnsureCanAddPrivateElement( ) abstract operation. User agents must use the following implementation: [JAVASCRIPT]\n• None If is a object, or implements , then return Completion { [[Type]]: throw, [[Value]]: a new }.\n\nJavaScript private fields can be applied to arbitrary objects. Since this can dramatically complicate implementation for particularly-exotic host objects, the JavaScript language specification provides this hook to allow hosts to reject private fields on objects meeting a host-defined criteria. In the case of HTML, and have complicated semantics — particularly around navigation and security — that make implementation of private field semantics challenging, so our implementation simply rejects those objects.\n\nJavaScript contains an implementation-defined HostEnsureCanCompileStrings abstract operation, redefined by the proposal. User agents must use the following implementation: [JAVASCRIPT] [JSDYNAMICCODEBRANDCHECKS]\n\nThe proposal contains an implementation-defined HostGetCodeForEval( ) abstract operation. User agents must use the following implementation: [JSDYNAMICCODEBRANDCHECKS]\n• None If is a object, then return 's data.\n\nJavaScript contains an implementation-defined HostPromiseRejectionTracker( , ) abstract operation. User agents must use the following implementation: [JAVASCRIPT]\n• None Let be the running script.\n• None If is a classic script and 's muted errors is true, then return.\n• None Let be the current settings object.\n• None If is not null, then set to 's settings object.\n• If is \" \", then:\n• If is \" \", then:\n• None If 's about-to-be-notified rejected promises list contains , then remove from that list and return.\n• None If 's outstanding rejected promises weak set does not contain , then return.\n• None Queue a global task on the DOM manipulation task source given to fire an event named at , using , with the attribute initialized to , and the attribute initialized to .[[PromiseResult]].\n\nThe Temporal proposal contains an implementation-defined HostSystemUTCEpochNanoseconds abstract operation. User agents must use the following implementation: [JSTEMPORAL]\n• None Let be the number of nanoseconds from the Unix epoch to , rounded to the nearest integer.\n• None Return the result of clamping between nsMinInstant and nsMaxInstant.\n\nThe JavaScript specification defines Jobs to be scheduled and run later by the host, as well as JobCallback Records which encapsulate JavaScript functions that are called as part of jobs. The JavaScript specification contains a number of implementation-defined abstract operations that lets the host define how jobs are scheduled and how JobCallbacks are handled. HTML uses these abstract operations to track the incumbent settings object in promises and callbacks by saving and restoring the incumbent settings object and a JavaScript execution context for the active script in JobCallbacks. This section defines them for user agent hosts.\n\nJavaScript contains an implementation-defined HostCallJobCallback( , , ) abstract operation to let hosts restore state when invoking JavaScript callbacks from inside tasks. User agents must use the following implementation: [JAVASCRIPT]\n• This affects the incumbent concept while the callback runs.\n• If is not null, then push onto the JavaScript execution context stack. This affects the active script while the callback runs.\n• None If is not null, then pop from the JavaScript execution context stack.\n• None Clean up after running a callback with .\n\nJavaScript has the ability to register objects with objects, in order to schedule a cleanup action if they are found to be garbage collected. The JavaScript specification contains an implementation-defined HostEnqueueFinalizationRegistryCleanupJob( ) abstract operation to schedule the cleanup action.\n\nThe timing and occurrence of cleanup work is implementation-defined in the JavaScript specification. User agents might differ in when and whether an object is garbage collected, affecting both whether the return value of the method is undefined, and whether cleanup callbacks occur. There are well-known cases in popular web browsers where objects are not accessible to JavaScript, but they remain retained by the garbage collector indefinitely. HTML clears kept-alive objects in the perform a microtask checkpoint algorithm. Authors would be best off not depending on the timing details of garbage collection implementations.\n\nCleanup actions do not take place interspersed with synchronous JavaScript execution, but rather happen in queued tasks. User agents must use the following implementation: [JAVASCRIPT]\n• Queue a global task on the given to perform the following steps:\n• None Check if we can run script with . If this returns \"do not run\", then return.\n• This affects the entry concept while the cleanup callback runs.\n• None Let be the result of performing CleanupFinalizationRegistry( ).\n• None Clean up after running script with .\n• None If is an abrupt completion, then report an exception given by .[[Value]] for .\n\nJavaScript contains an implementation-defined HostEnqueueGenericJob( , ) abstract operation to perform generic jobs in a particular realm (e.g., resolve promises resulting from ). User agents must use the following implementation: [JAVASCRIPT]\n• None Queue a global task on the JavaScript engine task source given to perform ().\n\nJavaScript contains an implementation-defined HostEnqueuePromiseJob( , ) abstract operation to schedule Promise-related operations. HTML schedules these operations in the microtask queue. User agents must use the following implementation: [JAVASCRIPT]\n• If is not null, then let be the settings object for . Otherwise, let be null. If is not null, it is the realm of the author code that will run. When is returned by NewPromiseReactionJob, it is the realm of the promise's handler function. When is returned by NewPromiseResolveThenableJob, it is the realm of the function. If is null, either no author code will run or author code is guaranteed to throw. For the former, the author may not have passed in code to run, such as in . For the latter, it is because a revoked Proxy was passed. In both cases, all the steps below that would otherwise use get skipped. NewPromiseResolveThenableJob and NewPromiseReactionJob both seem to provide non-null realms (the current Realm Record) in the case of a revoked proxy. The previous text could be updated to reflect that.\n• Queue a microtask to perform the following steps:\n• None If is not null, then check if we can run script with . If this returns \"do not run\" then return.\n• If is not null, then prepare to run script with . This affects the entry concept while the job runs.\n• is an abstract closure returned by NewPromiseReactionJob or NewPromiseResolveThenableJob. The promise's handler function when is returned by NewPromiseReactionJob, and the function when is returned by NewPromiseResolveThenableJob, are wrapped in JobCallback Records. HTML saves the incumbent settings object and a JavaScript execution context for to the active script in HostMakeJobCallback and restores them in HostCallJobCallback.\n• None If is not null, then clean up after running script with .\n• If is an abrupt completion, then report an exception given by .[[Value]] for 's global object. There is a very gnarly case where HostEnqueuePromiseJob is called with a null realm (e.g., because Promise.prototype.then was called with null handlers) but also the job returns abruptly (because the promise capability's resolve or reject handler threw, possibly because this is a subclass of Promise that takes the supplied functions and wraps them in throwing functions before passing them on to the function passed to the Promise superclass constructor. Which global is to be used then, considering that the current realm could be different at each of those steps, by using a Promise constructor or Promise.prototype.then from another realm? See issue #10526.\n\nJavaScript contains an implementation-defined HostEnqueueTimeoutJob( , ) abstract operation to schedule an operation to be performed after a timeout. HTML schedules these operations using run steps after a timeout. User agents must use the following implementation: [JAVASCRIPT]\n• None Let be an algorithm step which queues a global task on the JavaScript engine task source given to perform ().\n• None Run steps after a timeout given , \" \", , and .\n\nJavaScript contains an implementation-defined HostMakeJobCallback( ) abstract operation to let hosts attach state to JavaScript callbacks that are called from inside tasks. User agents must use the following implementation: [JAVASCRIPT]\n• None Let be the incumbent settings object.\n• None Let be the active script.\n• If is not null, set to a new JavaScript execution context, with its Function field set to null, its Realm field set to 's settings object's realm, and its ScriptOrModule set to 's record. As seen below, this is used in order to propagate the current active script forward to the time when the job callback is invoked. A case where is non-null, and saving it in this way is useful, is the following: Without this step (and the steps that use it in HostCallJobCallback), there would be no active script when the expression is evaluated, since is a built-in function that does not originate from any particular script. With this step in place, the active script is propagated from the above code into the job, allowing to use the original script's base URL appropriately. can be null if the user clicks on the following button: In this case, the JavaScript function for the event handler will be created by the get the current value of the event handler algorithm, which creates a function with null [[ScriptOrModule]] value. Thus, when the promise machinery calls HostMakeJobCallback, there will be no active script to pass along. As a consequence, this means that when the expression is evaluated, there will still be no active script. Fortunately that is handled by our implementation of HostLoadImportedModule by falling back to using the current settings object's API base URL.\n\nThe JavaScript specification defines a syntax for modules, as well as some host-agnostic parts of their processing model. This specification defines the rest of their processing model: how the module system is bootstrapped, via the element with attribute set to \" \", and how modules are fetched, resolved, and executed. [JAVASCRIPT]\n\nAlthough the JavaScript specification speaks in terms of \"scripts\" versus \"modules\", in general this specification speaks in terms of classic scripts versus module scripts, since both of them use the element.\n\nA is a map keyed by tuples consisting of a URL record and a string. The URL record is the request URL at which the module was fetched, and the string indicates the type of the module (e.g. \" \"). The module map's values are either a module script, null (used to represent failed fetches), or a placeholder value \" \". Module maps are used to ensure that imported module scripts are only fetched, parsed, and evaluated once per or worker.\n\nJavaScript contains an implementation-defined HostGetImportMetaProperties abstract operation. User agents must use the following implementation: [JAVASCRIPT]\n• None Assert: 's base URL is not null, as is a JavaScript module script.\n• Let be the following steps, given the argument :\n• None Let be the result of resolving a module specifier given and .\n\nJavaScript contains an an implementation-defined HostGetSupportedImportAttributes abstract operation. User agents must use the following implementation: [JAVASCRIPT]\n\nJavaScript contains an implementation-defined HostLoadImportedModule abstract operation. User agents must use the following implementation: [JAVASCRIPT]\n• None Let be the current settings object.\n• If 's global object implements or and is undefined, then: is undefined when the current fetching process has been initiated by a dynamic call, either directly or when loading the transitive dependencies of the dynamically imported module.\n• None Let be Completion Record { [[Type]]: throw, [[Value]]: a new , [[Target]]: empty }.\n• None Let be the default script fetch options.\n• If is a Script Record or a Cyclic Module Record, then: is usually a Script Record or a Cyclic Module Record, but it will not be so for event handlers per the get the current value of the event handler algorithm. For example, given: If a event occurs, then at the time the expression runs, GetActiveScriptOrModule will return null, and this operation will receive the current realm as a fallback .\n• If is a Cyclic Module Record and is equal to the first element of .[[RequestedModules]], then:\n• None Let be the result of resolving a module specifier given and .[[Specifier]], catching any exceptions. If they throw an exception, let be the thrown exception.\n• If the previous step threw an exception, then:\n• None Let be Completion Record { [[Type]]: throw, [[Value]]: , [[Target]]: empty }.\n• None Let be the result of getting the descendant script fetch options given , , and .\n• If is not undefined, then:\n• Fetch a single imported module script given , , , , , , , and as defined below. If is not undefined and .[[PerformFetch]] is not null, pass .[[PerformFetch]] along as well. given is the following algorithm:\n• None If is null, then set to Completion Record { [[Type]]: throw, [[Value]]: a new , [[Target]]: empty }.\n• Otherwise, if 's parse error is not null, then:\n• None If is not undefined and .[[ParseError]] is null, set .[[ParseError]] to .\n• None Otherwise, set to Completion Record { [[Type]]: normal, [[Value]]: 's record, [[Target]]: empty }.\n\nTo coordinate events, user interaction, scripts, rendering, networking, and so forth, user agents must use as described in this section. Each agent has an associated , which is unique to that agent.\n\nThe event loop of a similar-origin window agent is known as a . The event loop of a dedicated worker agent, shared worker agent, or service worker agent is known as a . And the event loop of a worklet agent is known as a .\n\nAn event loop has one or more . A task queue is a set of tasks.\n\nTask queues are sets, not queues, because the event loop processing model grabs the first runnable task from the chosen queue, instead of dequeuing the first task.\n\nThe microtask queue is not a task queue.\n\nTasks encapsulate algorithms that are responsible for such work as:\n\nFormally, a is a struct which has:\n\nA task is if its document is either null or fully active.\n\nPer its source field, each task is defined as coming from a specific . For each event loop, every task source must be associated with a specific task queue.\n\nEssentially, task sources are used within standards to separate logically-different types of tasks, which a user agent might wish to distinguish between. Task queues are used by user agents to coalesce task sources within a given event loop.\n\nFor example, a user agent could have one task queue for mouse and key events (to which the user interaction task source is associated), and another to which all other task sources are associated. Then, using the freedom granted in the initial step of the event loop processing model, it could give keyboard and mouse events preference over other tasks three-quarters of the time, keeping the interface responsive but not starving other task queues. Note that in this setup, the processing model still enforces that the user agent would never process events from any one task source out of order.\n\nEach event loop has a , which is either a task or null. Initially, this is null. It is used to handle reentrancy.\n\nEach event loop has a , which is a queue of microtasks, initially empty. A is a colloquial way of referring to a task that was created via the queue a microtask algorithm.\n\nEach event loop has a boolean, which is initially false. It is used to prevent reentrant invocation of the perform a microtask checkpoint algorithm.\n\nEach window event loop has a , initially set to zero.\n\nEach window event loop has a , initially set to zero.\n\nTo get the for a window event loop , return all objects whose relevant agent's event loop is .\n\nTo on a task source , which performs a series of steps , optionally given an event loop and a document :\n• None If was not given, set to the implied event loop.\n• None If was not given, set to the implied document.\n• None Let be a new task.\n• None Let be the task queue to which is associated on .\n\nFailing to pass an event loop and document to queue a task means relying on the ambiguous and poorly-specified implied event loop and implied document concepts. Specification authors should either always pass these values, or use the wrapper algorithms queue a global task or queue an element task instead. Using the wrapper algorithms is recommended.\n\nTo on a task source , with a global object and a series of steps :\n• None Let be 's associated , if is a object; otherwise null.\n\nTo on a task source , with an element and a series of steps :\n\nTo which performs a series of steps , optionally given a document :\n• None Assert: there is a surrounding agent. I.e., this algorithm is not called while in parallel.\n• None Let be the surrounding agent's event loop.\n• None If was not given, set to the implied document.\n• None Let be a new task.\n\nIt is possible for a microtask to be moved to a regular task queue, if, during its initial execution, it spins the event loop. This is the only case in which the source, document, and script evaluation environment settings object set of the microtask are consulted; they are ignored by the perform a microtask checkpoint algorithm.\n\nThe when queuing a task is the one that can deduced from the context of the calling algorithm. This is generally unambiguous, as most specification algorithms only ever involve a single agent (and thus a single event loop). The exception is algorithms involving or specifying cross-agent communication (e.g., between a window and a worker); for those cases, the implied event loop concept must not be relied upon and specifications must explicitly provide an event loop when queuing a task.\n\nThe when queuing a task on an event loop is determined as follows:\n• None If is not a window event loop, then return null.\n• None If the task is being queued in the context of an element, then return the element's node document.\n• None If the task is being queued in the context of a browsing context, then return the browsing context's active document.\n• None If the task is being queued by or for a script, then return the script's settings object's global object's associated .\n• None Assert: this step is never reached, because one of the previous conditions is true. Really?\n\nBoth implied event loop and implied document are vaguely-defined and have a lot of action-at-a-distance. The hope is to remove these, especially implied document. See issue #4980.\n\nAn event loop must continually run through the following steps for as long as it exists:\n• None Let and be null.\n• If the event loop has a task queue with at least one runnable task, then:\n• Let be one such task queue, chosen in an implementation-defined manner. Remember that the microtask queue is not a task queue, so it will not be chosen in this step. However, a task queue to which the microtask task source is associated might be chosen in this step. In that case, the task chosen in the next step was originally a microtask, but it got moved as part of spinning the event loop.\n• None Set to the first runnable task in , and remove it from .\n• None If 's document is not null, then record task start time given and 's document.\n• None Set the event loop's currently running task to .\n• None Set the event loop's currently running task back to null.\n• None Let be the unsafe shared current time. [HRT]\n• If is not null, then:\n• None Let be an empty set.\n• For each environment settings object of 's script evaluation environment settings object set:\n• None If is not a object, then continue.\n• None If 's browsing context is null, then continue.\n• None If is not null, then append it to .\n• None If 's document is not null, then record task end time given and 's document.\n• If this is a window event loop that has no runnable task in this event loop's task queues, then:\n• None Set this event loop's last idle period start time to the unsafe shared current time.\n• Let be the following steps:\n• Let be this event loop's last idle period start time plus 50. The cap of 50ms in the future is to ensure responsiveness to new user input within the threshold of human perception.\n• For each of the same-loop windows for this event loop:\n• None If 's map of animation frame callbacks is not empty, or if the user agent believes that the might have pending rendering updates, set to true.\n• None Let be the result of getting the values of 's map of active timers.\n• None For each of , if is less than , set to .\n• If is true, then:\n• Let be this event loop's last render opportunity time plus (1000 divided by the current refresh rate). The refresh rate can be hardware- or implementation-specific. For a refresh rate of 60Hz, the would be about 16.67ms after the last render opportunity time.\n• None If is less than , then return .\n• None For each of the same-loop windows for this event loop, perform the start an idle period algorithm for with the following step: return the result of calling , coarsened given 's relevant settings object's cross-origin isolated capability. [REQUESTIDLECALLBACK]\n• If this is a worker event loop, then:\n• If this event loop's agent's single realm's global object is a supported and the user agent believes that it would benefit from having its rendering updated at this time, then:\n• None Let be the current high resolution time given the . [HRT]\n• None Run the animation frame callbacks for that , passing in as the timestamp.\n• None Update the rendering of that dedicated worker to reflect the current state. Similar to the notes for in a window event loop, a user agent can determine the rate of rendering in the dedicated worker.\n• None If there are no tasks in the event loop's task queues and the object's closing flag is true, then destroy the event loop, aborting these steps, resuming the run a worker steps described in the Web workers section below.\n\nA window event loop must also run the following in parallel, as long as it exists:\n• None Wait until at least one navigable whose active document's relevant agent's event loop is might have a rendering opportunity.\n• None Set 's last render opportunity time to the unsafe shared current time.\n• For each that has a rendering opportunity, queue a global task on the rendering task source given 's active window to : This might cause redundant calls to . However, these calls would have no observable effect because there will be no rendering necessary, as per the Unnecessary rendering step. Implementations can introduce further optimizations such as only queuing this task when it is not already queued. However, note that the document associated with the task might become inactive before the task is processed.\n• None Let be 's last render opportunity time.\n• Let be all fully active objects whose relevant agent's event loop is , sorted arbitrarily except that the following conditions must be met:\n• None Any whose container document is must be listed after in the list.\n• None If there are two documents and that both have the same non-null container document , then the order of and in the list must match the shadow-including tree order of their respective navigable containers in 's node tree. In the steps below that iterate over , each must be processed in the order it is found in the list.\n• Filter non-renderable documents: Remove from any object for which any of the following are true:\n• None 's rendering is suppressed for view transitions; or We have to check for rendering opportunities here, in addition to checking that in the in parallel steps, as some documents that share the same event loop might not have a rendering opportunity at the same time.\n• Unnecessary rendering: Remove from any object for which all of the following are true:\n• None the user agent believes that updating the rendering of 's node navigable would have no visible effect; and\n• Remove from all objects for which the user agent believes that it's preferable to skip updating the rendering for other reasons. The step labeled Filter non-renderable documents prevents the user agent from updating the rendering when it is unable to present new content to the user. The step labeled Unnecessary rendering prevents the user agent from updating the rendering when there's no new content to draw. This step enables the user agent to prevent the steps below from running for other reasons, for example, to ensure certain tasks are executed immediately after each other, with only microtask checkpoints interleaved (and without, e.g., animation frame callbacks interleaved). Concretely, a user agent might wish to coalesce timer callbacks together, with no intermediate rendering updates.\n• None For each of , reveal .\n• None For each of , for if its node navigable is a top-level traversable.\n• None For each of , run the resize steps for . [CSSOMVIEW]\n• None For each of , run the scroll steps for . [CSSOMVIEW]\n• None For each of , evaluate media queries and report changes for . [CSSOMVIEW]\n• None For each of , for , passing in relative high resolution time given and 's relevant global object as the timestamp [WEBANIMATIONS]\n• None For each of , run the fullscreen steps for . [FULLSCREEN]\n• For each of , if the user agent detects that the backing storage associated with a or an , , has been lost, then it must run the for each such :\n• None Let be the value of 's attribute, if is a , or the associated object for otherwise.\n• None Reset the rendering context to its default state given .\n• None Let be the result of firing an event named at , with the attribute initialized to true.\n• None If is false, then abort these steps.\n• None Attempt to restore by creating a backing storage using 's attributes and associating them with . If this fails, then abort these steps.\n• None For each of , run the animation frame callbacks for , passing in the relative high resolution time given and 's relevant global object as the timestamp.\n• None Let be the unsafe shared current time.\n• For each of :\n• \n• For each element with 'auto' used value of 'content-visibility':\n• None Let be true if 's proximity to the viewport is not determined and it is not relevant to the user. Otherwise, let be false.\n• None Determine proximity to the viewport for .\n• None If is true and is now relevant to the user, then set to true.\n• If is true, then continue. The intent of this step is for the initial viewport proximity determination, which takes effect immediately, to be reflected in the style and layout calculation which is carried out in a previous step of this loop. Proximity determinations other than the initial one take effect at the next rendering opportunity. [CSSCONTAIN]\n• \n• None Set to the result of broadcasting active resize observations given .\n• None If has skipped resize observations, then deliver resize loop error given .\n• For each of , if the focused area of is not a focusable area, then run the focusing steps for 's viewport, and set 's relevant global object's navigation API's focus changed during ongoing navigation to false. For example, this might happen because an element has the attribute added, causing it to stop being rendered. It might also happen to an element when the element gets disabled. This will usually fire events, and possibly events. In addition to this asynchronous fixup, if the focused area of the document is removed, there is a synchronous fixup. That one will not fire or events.\n• None For each of , perform pending transition operations for . [CSSVIEWTRANSITIONS]\n• None For each of , for , passing in the relative high resolution time given and 's relevant global object as the timestamp. [INTERSECTIONOBSERVER]\n• None For each of , record rendering time for given .\n• None For each of , mark paint timing for .\n• None For each of , update the rendering or user interface of and its node navigable to reflect the current state.\n• None For each of , process top layer removals given .\n\nA navigable has a if the user agent is currently able to present the contents of the navigable to the user, accounting for hardware refresh rate constraints and user agent throttling for performance reasons, but considering content presentable even if it's outside the viewport.\n\nA navigable's rendering opportunities are determined based on hardware constraints such as display refresh rates and other factors such as page performance or whether its active document's visibility state is \" \". Rendering opportunities typically occur at regular intervals.\n\nThis specification does not mandate any particular model for selecting rendering opportunities. But for example, if the browser is attempting to achieve a 60Hz refresh rate, then rendering opportunities occur at a maximum of every 60th of a second (about 16.7ms). If the browser finds that a navigable is not able to sustain this rate, it might drop to a more sustainable 30 rendering opportunities per second for that navigable, rather than occasionally dropping frames. Similarly, if a navigable is not visible, the user agent might decide to drop that page to a much slower 4 rendering opportunities per second, or even less.\n\nWhen a user agent is to :\n• None If the event loop's performing a microtask checkpoint is true, then return.\n• While the event loop's microtask queue is not empty:\n• None Let be the result of dequeuing from the event loop's microtask queue.\n• None Set the event loop's currently running task to .\n• This might involve invoking scripted callbacks, which eventually calls the clean up after running script steps, which call this perform a microtask checkpoint algorithm again, which is why we use the performing a microtask checkpoint flag to avoid reentrancy.\n• None Set the event loop's currently running task back to null.\n• None For each environment settings object whose responsible event loop is this event loop, notify about rejected promises given 's global object.\n• When returns an object, that object is kept alive until the next invocation of ClearKeptObjects(), after which it is again subject to garbage collection.\n\nWhen an algorithm running in parallel is to , the user agent must queue a microtask that runs the following steps, and must then stop executing (execution of the algorithm resumes when the microtask is run, as described in the following steps):\n• None Resumes execution of the algorithm in parallel, if appropriate, as described in the algorithm's steps.\n\nSteps in synchronous sections are marked with ⌛.\n\nAlgorithm steps that say to until a condition is met are equivalent to substituting in the following algorithm steps:\n• Let be the event loop's currently running task.\n• None Let be a copy of the JavaScript execution context stack.\n• If is a microtask this step will be a no-op due to performing a microtask checkpoint being true.\n• \n• None Wait until the condition is met.\n• \n• Perform any steps that appear after this spin the event loop instance in the original algorithm.\n• Stop , allowing whatever algorithm that invoked it to resume. This causes the event loop's main set of steps or the perform a microtask checkpoint algorithm to continue.\n\nUnlike other algorithms in this and other specifications, which behave similar to programming-language function calls, spin the event loop is more like a macro, which saves typing and indentation at the usage site by expanding into a series of steps and operations.\n\nSome of the algorithms in this specification, for historical reasons, require the user agent to while running a task until a condition is met. This means running the following steps:\n• None Let be the current global object.\n• None Let be the current high resolution time given .\n• None If necessary, update the rendering or user interface of any or navigable to reflect the current state.\n• None Wait until the condition is met. While a user agent has a paused task, the corresponding event loop must not run further tasks, and any script in the currently running task must block. User agents should remain responsive to user input while paused, however, albeit in a reduced capacity since the event loop will not be doing anything.\n• None Record pause duration given the duration from to the current high resolution time given .\n\nThe following task sources are used by a number of mostly unrelated features in this and other specifications.\n\nDealing with the event loop from other specifications\n\nWriting specifications that correctly interact with the event loop can be tricky. This is compounded by how this specification uses concurrency-model-independent terminology, so we say things like \"event loop\" and \"in parallel\" instead of using more familiar model-specific terms like \"main thread\" or \"on a background thread\".\n\nBy default, specification text generally runs on the event loop. This falls out from the formal event loop processing model, in that you can eventually trace most algorithms back to a task queued there.\n\nThe algorithm steps for any JavaScript method will be invoked by author code calling that method. And author code can only be run via queued tasks, usually originating somewhere in the processing model.\n\nFrom this starting point, the overriding guideline is that any work a specification needs to perform that would otherwise block the event loop must instead be performed in parallel with it. This includes (but is not limited to):\n• None performing operations which could require involving outside systems (i.e. \"going out of process\").\n\nThe next complication is that, in algorithm sections that are in parallel, you must not create or manipulate objects associated to a specific realm, global, or environment settings object. (Stated in more familiar terms, you must not directly access main-thread artifacts from a background thread.) Doing so would create data races observable to JavaScript code, since after all, your algorithm steps are running in parallel to the JavaScript code.\n\nBy extension, you cannot access Web IDL's this value from steps running in parallel, even if those steps were activated by an algorithm that does have access to the this value.\n\nYou can, however, manipulate specification-level data structures and values from , as those are realm-agnostic. They are never directly exposed to JavaScript without a specific conversion taking place (often via Web IDL). [INFRA] [WEBIDL]\n\nTo affect the world of observable JavaScript objects, then, you must queue a global task to perform any such manipulations. This ensures your steps are properly interleaved with respect to other things happening on the event loop. Furthermore, you must choose a task source when queuing a global task; this governs the relative order of your steps versus others. If you are unsure which task source to use, pick one of the generic task sources that sounds most applicable. Finally, you must indicate which global object your queued task is associated with; this ensures that if that global object is inactive, the task does not run.\n\nThe base primitive, on which queue a global task builds, is the queue a task algorithm. In general, queue a global task is better because it automatically picks the right event loop and, where appropriate, document. Older specifications often use queue a task combined with the implied event loop and implied document concepts, but this is discouraged.\n\nPutting this all together, we can provide a template for a typical algorithm that needs to do work asynchronously:\n• None Do any synchronous setup work, while still on the event loop. This may include converting realm-specific JavaScript values into realm-agnostic specification-level values.\n• None Perform a set of potentially-expensive steps in parallel, operating entirely on realm-agnostic values, and producing a realm-agnostic result.\n• None Queue a global task, on a specified task source and given an appropriate global object, to convert the realm-agnostic result back into observable effects on the observable world of JavaScript objects on the event loop.\n\nMany objects can have specified. These act as non-capture event listeners for the object on which they are specified. [DOM]\n\nAn event handler is a struct with two items:\n• None a , which is either null, a callback object, or an internal raw uncompiled handler. The callback function type describes how this is exposed to scripts. Initially, an event handler's value must be set to null.\n• None a , which is either null or an event listener responsible for running the event handler processing algorithm. Initially, an event handler's listener must be set to null.\n\nEvent handlers are exposed in two ways.\n\nThe first way, common to all event handlers, is as an event handler IDL attribute.\n\nThe second way is as an event handler content attribute. Event handlers on HTML elements and some of the event handlers on objects are exposed in this way.\n\nFor both of these two ways, the event handler is exposed through a , which is a string that always starts with \" \" and is followed by the name of the event for which the handler is intended.\n\nMost of the time, the object that exposes an event handler is the same as the object on which the corresponding event listener is added. However, the and elements expose several event handlers that act upon the element's object, if one exists. In either case, we call the object an event handler acts upon the of that event handler.\n\nTo determine the target of an event handler , given an object on which the event handler is exposed, and an event handler name , the following steps are taken:\n• None If is not a element or a element, then return .\n• None If is not the name of an attribute member of the interface mixin and the -reflecting body element event handler set does not contain , then return .\n• If 's node document is not an active document, then return null. This could happen if this object is a element without a corresponding object, for example. This check does not necessarily prevent and elements that are not the body element of their node document from reaching the next step. In particular, a element created in an active document (perhaps with ) but not connected will also have its corresponding object as the target of several event handlers exposed through it.\n\nEach object that has one or more event handlers specified has an associated , which is a map of strings representing names of event handlers to event handlers.\n\nWhen an object that has one or more event handlers specified is created, its event handler map must be initialized such that it contains an entry for each event handler that has that object as target, with items in those event handlers set to their initial values.\n\nThe order of the entries of event handler map could be arbitrary. It is not observable through any algorithms that operate on the map.\n\nEntries are not created in the event handler map of an object for event handlers that are merely exposed on that object, but have some other object as their targets.\n\nAn is an IDL attribute for a specific event handler. The name of the IDL attribute is the same as the name of the event handler.\n\nThe getter of an event handler IDL attribute with name , when called, must run these steps:\n• None Let be the result of determining the target of an event handler given this object and .\n• None If is null, then return null.\n• None Return the result of getting the current value of the event handler given and .\n\nThe setter of an event handler IDL attribute with name , when called, must run these steps:\n• None Let be the result of determining the target of an event handler given this object and .\n• None If is null, then return.\n• None If the given value is null, then deactivate an event handler given and .\n• \n• None Set 's value to the given value.\n• None Activate an event handler given and .\n\nCertain event handler IDL attributes have additional requirements, in particular the attribute of objects.\n\nAn is a content attribute for a specific event handler. The name of the content attribute is the same as the name of the event handler.\n\nEvent handler content attributes, when specified, must contain valid JavaScript code which, when parsed, would match the FunctionBody production after automatic semicolon insertion.\n\nThe following attribute change steps are used to synchronize between event handler content attributes and event handlers: [DOM]\n• None If is not null, or is not the name of an event handler content attribute on , then return.\n• None Let be the result of determining the target of an event handler given and .\n• None If is null, then return.\n• None If is null, then deactivate an event handler given and .\n• \n• None If the Should element's inline behavior be blocked by Content Security Policy? algorithm returns \" \" when executed upon , \" \", and , then return. [CSP]\n• None Let be the script location that triggered the execution of these steps.\n• None Set 's value to the internal raw uncompiled handler / .\n• None Activate an event handler given and .\n\nPer the DOM Standard, these steps are run even if and are identical (setting an attribute to its current value), but not if and are both null (removing an attribute that doesn't currently exist). [DOM]\n\nTo given an object and a string that is the name of an event handler, run these steps:\n• None If is not null, then remove an event listener with and .\n\nTo given an object , run these steps:\n• None If has an associated event handler map, then for each → of 's associated event handler map, deactivate an event handler given and .\n\nThis algorithm is used to define .\n\nTo given an object and a string that is the name of an event handler, run these steps:\n• None If 's listener is not null, then return.\n• Let be the result of creating a Web IDL instance representing a reference to a function of one argument that executes the steps of the event handler processing algorithm, given , , and its argument. The 's callback context can be arbitrary; it does not impact the steps of the event handler processing algorithm. [DOM] The callback is emphatically not the event handler itself. Every event handler ends up registering the same callback, the algorithm defined below, which takes care of invoking the right code, and processing the code's return value.\n• Let be a new event listener whose type is the corresponding to and callback is . To be clear, an event listener is different from an .\n• None Add an event listener with and .\n\nThe interfaces implemented by the event object do not influence whether an event handler is triggered or not.\n\nfor an object , a string representing the name of an event handler, and an object is as follows:\n• None Let be the result of getting the current value of the event handler given and .\n• None If is null, then return.\n• None Let be true if is an object, 's is \" \", and 's implements the mixin. Otherwise, let be false.\n• Process the object as follows: Let be the result of invoking with « 's , 's , 's , 's , 's », \" \", and with callback this value set to 's . Let be the result of invoking with « », \" \", and with callback this value set to 's . If an exception gets thrown by the callback, it will be rethrown, ending these steps. The exception will propagate to the DOM event dispatch logic, which will then report it.\n• If is a object and 's is \" \" In this case, the event handler IDL attribute's type will be , so will have been coerced into either null or a . If is not null, then:\n• None If 's attribute's value is the empty string, then set 's attribute's value to . If is true, then set 's canceled flag. If is false, then set 's canceled flag. If we've gotten to this \"Otherwise\" clause because 's is \" \" but is not a object, then will never be false, since in such cases will have been coerced into either null or a .\n\nThe callback function type represents a callback used for event handlers. It is represented in Web IDL as follows:\n\nIn JavaScript, any object implements this interface.\n\nFor historical reasons, the handler has different arguments:\n\nSimilarly, the handler has a different return value:\n\nAn is a tuple with the following information:\n• None A location where the script body originated, in case an error needs to be reported\n\nWhen the user agent is to get the current value of the event handler given an object and a string that is the name of an event handler, it must run these steps:\n• If 's value is an internal raw uncompiled handler, then:\n• None If is an element, then let be , and be 's node document. Otherwise, is a object, let be null, and be 's associated .\n• None If scripting is disabled for , then return null.\n• None Let be the uncompiled script body in 's value.\n• None Let be the location where the script body originated, as given by 's value.\n• None If is not null and has a form owner, let be that form owner. Otherwise, let be null.\n• None Let be the relevant settings object of .\n• If is not parsable as FunctionBody or if parsing detects an early error, then follow these substeps:\n• This does not deactivate the event handler, which additionally removes the event handler's listener (if present).\n• None Let be a new exception associated with 's realm which describes the error while parsing. It should be based on , where the script body originated.\n• None Report an exception with for 's global object.\n• Push 's realm execution context onto the JavaScript execution context stack; it is now the running JavaScript execution context. This is necessary so the subsequent invocation of OrdinaryFunctionCreate takes place in the correct realm.\n• Let be the result of calling OrdinaryFunctionCreate, with arguments: If is and is a object The string formed by concatenating \" \", , \" \", U+000A LF, , U+000A LF, and \" \". The string formed by concatenating \" \", , \" \", U+000A LF, , U+000A LF, and \" \". If is and is a object Let the function have five arguments, named , , , , and . Let the function have a single argument called . The result of parsing above.\n• If is an element's event handler, then set to NewObjectEnvironment( , true, ).\n• None If is not null, then set to NewObjectEnvironment( , true, ).\n• None If is not null, then set to NewObjectEnvironment( , true, ).\n• This is done because the default behavior, of associating the created function with the nearest script on the stack, can lead to path-dependent results. For example, an event handler which is first invoked by user interaction would end up with null [[ScriptOrModule]] (since then this algorithm would be first invoked when the active script is null), whereas one that is first invoked by dispatching an event from script would have its [[ScriptOrModule]] set to that script. Instead, we just always set [[ScriptOrModule]] to null. This is more intuitive anyway; the idea that the first script which dispatches an event is somehow responsible for the event handler code is dubious. In practice, this only affects the resolution of relative URLs via , which consult the base URL of the associated script. Nulling out [[ScriptOrModule]] means that HostLoadImportedModule will fall back to the current settings object's API base URL.\n• None Set 's value to the result of creating a Web IDL callback function object whose object reference is and whose callback context is .\n\nThe following are the event handlers (and their corresponding event handler event types) that must be supported by all HTML elements, as both event handler content attributes and event handler IDL attributes; and that must be supported by all and objects, as event handler IDL attributes:\n\nThe following are the event handlers (and their corresponding event handler event types) that must be supported by all HTML elements other than and elements, as both event handler content attributes and event handler IDL attributes; that must be supported by all objects, as event handler IDL attributes; and that must be supported by all objects, as event handler IDL attributes on the objects themselves, and with corresponding event handler content attributes and event handler IDL attributes exposed on all and elements that are owned by that object's associated :\n\nWe call the set of the names of the event handlers listed in the first column of this table the .\n\nThe following are the event handlers (and their corresponding event handler event types) that must be supported by objects, as event handler IDL attributes on the objects themselves, and with corresponding event handler content attributes and event handler IDL attributes exposed on all and elements that are owned by that object's associated :\n\nThis list of event handlers is reified as event handler IDL attributes through the interface mixin.\n\nThe following are the event handlers (and their corresponding event handler event types) that must be supported on objects as event handler IDL attributes:\n\nCertain operations and methods are defined as firing events on elements. For example, the method on the interface is defined as firing a event on the element. [UIEVENTS]\n\nat , with an optional , means running these steps:\n• None Let be the result of creating an event using .\n• None If the is set, initialize 's attribute to false.\n• None Initialize 's , , , and attributes according to the current state of the key input device, if any (false for any keys that are not available).\n• None Initialize 's attribute to 's node document's object, if any, and null otherwise.\n• None 's method is to return values appropriately describing the current state of the key input device.\n• None Return the result of dispatching at .\n\nThe mixin is for use of APIs that are to be exposed on and objects.\n\nOther standards are encouraged to further extend it using along with an appropriate reference.\n\nThe getter steps are to return true if this's relevant settings object is a secure context, or false otherwise.\n\nThe getter steps are to return this's relevant settings object's origin, serialized.\n\nThe getter steps are to return this's relevant settings object's cross-origin isolated capability.\n\nThe and methods allow developers to transform content to and from the base64 encoding.\n\nIn these APIs, for mnemonic purposes, the \"b\" can be considered to stand for \"binary\", and the \"a\" for \"ASCII\". In practice, though, for primarily historical reasons, both the input and output of these functions are Unicode strings.\n\nThe method must throw an \" \" if contains any character whose code point is greater than U+00FF. Otherwise, the user agent must convert to a byte sequence whose th byte is the eight-bit representation of the th code point of , and then must apply forgiving-base64 encode to that byte sequence and return the result.\n• None Let be the result of running forgiving-base64 decode on .\n• None If is failure, then throw an \" \" .\n\nAPIs for dynamically inserting markup into the document interact with the parser, and thus their behavior varies depending on whether they are used with HTML documents (and the HTML parser) or XML documents (and the XML parser).\n\nobjects have a , which is used in conjunction with the create an element for the token algorithm to prevent custom element constructors from being able to use , , and when they are invoked by the parser. Initially, the counter must be set to zero.\n\nobjects have an boolean, which is used to prevent scripts from invoking the and methods (directly or indirectly) after the document's active parser has been aborted. It is initially false.\n\nThe , given a , are as follows:\n• None If is an XML document, then throw an \" \" exception.\n• None If 's throw-on-dynamic-markup-insertion counter is greater than 0, then throw an \" \" .\n• None Let be the entry global object's associated .\n• None If 's origin is not same origin to 's origin, then throw a \" \" .\n• If has an active parser whose script nesting level is greater than 0, then return . This basically causes to be ignored when it's called in an inline script found during parsing, while still letting it have an effect when called from a non-parser task such as a timer callback or event handler.\n• Similarly, if 's unload counter is greater than 0, then return . This basically causes to be ignored when it's called from a , , or event handler while the is being unloaded.\n• If 's active parser was aborted is true, then return . This notably causes to be ignored if it is called after a navigation has started, but only during the initial parse. See issue #4723 for more background.\n• None If 's node navigable is non-null and 's node navigable's ongoing navigation is a navigation ID, then stop loading 's node navigable.\n• None For each shadow-including inclusive descendant of , erase all event listeners and handlers given .\n• None If is the associated of 's relevant global object, then erase all event listeners and handlers given 's relevant global object.\n• None Replace all with null within .\n• If is fully active, then:\n• None Let be a copy of 's URL.\n• None If is not , then set 's fragment to null.\n• None Run the with and .\n• None If 's iframe load in progress flag is set, then set 's mute iframe load flag.\n• None Create a new HTML parser and associate it with . This is a (meaning that it can be closed by the and methods, and that the tokenizer will wait for an explicit call to before emitting an end-of-file token). The encoding confidence is irrelevant.\n• None Set the insertion point to point at just before the end of the input stream (which at this point will be empty).\n• This causes a event to fire, but the event is actually unobservable to author code, because of the previous step which erased all event listeners and handlers that could observe it.\n\nThe document open steps do not affect whether a is ready for post-load tasks or completely loaded.\n\nThe method must return the result of running the document open steps with this.\n\nThe and arguments are ignored, but kept in the IDL to allow code that calls the function with one or two arguments to continue working. They are necessary due to Web IDL overload resolution algorithm rules, which would throw a exception for such calls had the arguments not been there. whatwg/webidl issue #581 investigates changing the algorithm to allow for their removal. [WEBIDL]\n\nThe method must run these steps:\n• None If this is not fully active, then throw an \" \" exception.\n• None Return the result of running the window open steps with , , and .\n\nThe method must run the following steps:\n• None If this is an XML document, then throw an \" \" .\n• None If this's throw-on-dynamic-markup-insertion counter is greater than zero, then throw an \" \" .\n• None If there is no script-created parser associated with this, then return.\n• None Insert an explicit \"EOF\" character at the end of the parser's input stream.\n• None If this's pending parsing-blocking script is not null, then return.\n• None Run the tokenizer, processing resulting tokens as they are emitted, and stopping when the tokenizer reaches the explicit \"EOF\" character or spins the event loop.\n\nThis method performs no sanitization to remove potentially-dangerous elements and attributes like or event handler content attributes.\n\nobjects have an , which is used in conjunction with the processing of elements to prevent external scripts from being able to use to blow away the document by implicitly calling . Initially, the counter must be set to zero.\n\nThe , given a object , a list , a boolean , and a string , are as follows:\n• None Let be the empty string.\n• None Let be false if contains a string; otherwise true.\n• For each of :\n• None If is a object, then append 's associated data to .\n• None If is false, set to the result of invoking the Get Trusted Type compliant string algorithm with , this's relevant global object, , , and \" \".\n• None If is true, append U+000A LINE FEED to .\n• None If is an XML document, then throw an \" \" .\n• None If 's throw-on-dynamic-markup-insertion counter is greater than 0, then throw an \" \" .\n• None If 's active parser was aborted is true, then return.\n• If the insertion point is undefined, then:\n• None If 's unload counter is greater than 0 or 's ignore-destructive-writes counter is greater than 0, then return.\n• None Insert into the input stream just before the insertion point.\n• If 's pending parsing-blocking script is null, then have the HTML parser process , one code point at a time, processing resulting tokens as they are emitted, and stopping when the tokenizer reaches the insertion point or when the processing of the tokenizer is aborted by the tree construction stage (this can happen if a end tag token is emitted by the tokenizer). If the method was called from script executing inline (i.e. executing because the parser parsed a set of tags), then this is a reentrant invocation of the parser. If the parser pause flag is set, the tokenizer will abort immediately and no HTML will be parsed, per the tokenizer's parser pause flag check.\n\nThe method steps are to run the document write steps with this, , false, and \" \".\n\nThis method performs no sanitization to remove potentially-dangerous elements and attributes like or event handler content attributes.\n\nThe method steps are to run the document write steps with this, , true, and \" \".\n\nThe interface allows authors to create new objects by parsing strings, as either HTML or XML.\n\nThe design of , as a class that needs to be constructed and then have its method called, is an unfortunate historical artifact. If we were designing this functionality today it would be a standalone function. For parsing HTML, the modern alternative is .\n\nThis method performs no sanitization to remove potentially-dangerous elements and attributes like or event handler content attributes.\n\nThe constructor steps are to do nothing.\n• None Let be the result of invoking the Get Trusted Type compliant string algorithm with , this's relevant global object, , \" \", and \" \".\n• Let be a new , whose content type is and URL is this's relevant global object's associated 's URL. The document's encoding will be left as its default, of UTF-8. In particular, any XML declarations or elements found while parsing will have no effect.\n• \n• None Parse HTML from a string given and . Since does not have a browsing context, scripting is disabled.\n• None Create an XML parser , associated with , and with XML scripting support disabled.\n• If the previous step resulted in an XML well-formedness or XML namespace well-formedness error, then:\n• None Let be the result of creating an element given , \" \", and \" \".\n• None Optionally, add attributes or children to to describe the nature of the parsing error.\n\nTo , given a and a string :\n• None Create an HTML parser , associated with .\n• None Place into the input stream for . The encoding confidence is irrelevant.\n• Start and let it run until it has consumed all the characters just inserted into the input stream. This might mutate the document's mode.\n\nThese methods perform no sanitization to remove potentially-dangerous elements and attributes like or event handler content attributes.\n• None Let be the result of invoking the Get Trusted Type compliant string algorithm with , this's relevant global object, , \" \", and \" \".\n• None Let be this's template contents if this is a element; otherwise this.\n• None Unsafely set HTML given , this, and .\n• None Let be the result of invoking the Get Trusted Type compliant string algorithm with , this's relevant global object, , \" \", and \" \".\n• None Unsafely set HTML given this, this's shadow host, and .\n\nTo , given an or , an , and a string :\n• None Let be the result of the HTML fragment parsing algorithm given , , and true.\n• None Let be a new whose node document is 's node document.\n• None For each in , append to .\n• None Replace all with within .\n• None Let be the result of invoking the Get Trusted Type compliant string algorithm with , this's relevant global object, , \" \", and \" \".\n• Let be a new , whose content type is \" \". Since does not have a browsing context, scripting is disabled.\n• None Parse HTML from a string given and .\n\n's method steps are to return the result of HTML fragment serialization algorithm with this, [\" \"], and [\" \"].\n\n's method steps are to return the result of HTML fragment serialization algorithm with this, [\" \"], and [\" \"].\n\nThe property has a number of outstanding issues in the issue tracker, documenting various problems with its specification.\n\nThese properties' setters perform no sanitization to remove potentially-dangerous elements and attributes like or event handler content attributes.\n\nThe , given an , , or and a boolean , are:\n• None If is an HTML document, return the result of HTML fragment serialization algorithm with , false, and « ».\n• None Return the XML serialization of given .\n\nThe , given an and a string , are:\n• None Let be the HTML fragment parsing algorithm.\n• None If 's node document is an XML document, then set to the XML fragment parsing algorithm.\n• None Let be the result of invoking given and .\n• None Let be a new whose node document is 's node document.\n• For each of , in tree order: append to . This ensures the node document for the new nodes is correct.\n\n's getter steps are to return the result of running fragment serializing algorithm steps with this and true.\n\n's getter steps are to return the result of running fragment serializing algorithm steps with this and true.\n• None Let be the result of invoking the Get Trusted Type compliant string algorithm with , this's relevant global object, the given value, \" \", and \" \".\n• None Let be this.\n• None Let be the result of invoking the fragment parsing algorithm steps with and .\n• If is a element, then set to the element's template contents (a ). Setting on a element will replace all the nodes in its template contents rather than its children.\n• None Replace all with within .\n• None Let be the result of invoking the Get Trusted Type compliant string algorithm with , this's relevant global object, the given value, \" \", and \" \".\n• None Let be the result of invoking the fragment parsing algorithm steps with and .\n• None Replace all with within this.\n\nThe property has a number of outstanding issues in the issue tracker, documenting various problems with its specification.\n\nThis property's setter performs no sanitization to remove potentially-dangerous elements and attributes like or event handler content attributes.\n• None Let be a fictional node whose only child is this.\n• None Return the result of running fragment serializing algorithm steps with and true.\n• None Let be the result of invoking the Get Trusted Type compliant string algorithm with , this's relevant global object, the given value, \" \", and \" \".\n• None If is null, return. There would be no way to obtain a reference to the nodes created even if the remaining steps were run.\n• None If is a , set to the result of creating an element given this's node document, \" \", and the HTML namespace.\n• None Let be the result of invoking the fragment parsing algorithm steps given and .\n• None Replace this with within this's parent.\n\nThe method has a number of outstanding issues in the issue tracker, documenting various problems with its specification.\n\nThis method performs no sanitization to remove potentially-dangerous elements and attributes like or event handler content attributes.\n• None Let be the result of invoking the Get Trusted Type compliant string algorithm with , this's relevant global object, , \" \", and \" \".\n• None Use the first matching item from this list: If is an ASCII case-insensitive match for the string \" \" If is an ASCII case-insensitive match for the string \" \"\n• None If is null or a , throw a \" \" . If is an ASCII case-insensitive match for the string \" \" If is an ASCII case-insensitive match for the string \" \"\n• If is not an or all of the following are true:\n• None 's local name is \" \"; and set to the result of creating an element given this's node document, \" \", and the HTML namespace.\n• Let be the result of invoking the fragment parsing algorithm steps with and .\n• Use the first matching item from this list: If is an ASCII case-insensitive match for the string \" \" Insert into this's parent before this. If is an ASCII case-insensitive match for the string \" \" Insert into this before its first child. If is an ASCII case-insensitive match for the string \" \" If is an ASCII case-insensitive match for the string \" \" Insert into this's parent before this's next sibling.\n\nAs with other direct -manipulation APIs (and unlike ), does not include any special handling for elements. In most cases you will want to use instead of directly manipulating the child nodes of a element.\n\nThe method has a number of outstanding issues in the issue tracker, documenting various problems with its specification.\n\nThis method performs no sanitization to remove potentially-dangerous elements and attributes like or event handler content attributes.\n• None Let be the result of invoking the Get Trusted Type compliant string algorithm with , this's relevant global object, , \" \", and \" \".\n• None Otherwise, if implements or , set to 's parent element.\n• If is null or all of the following are true:\n• None 's local name is \" \"; and then set to the result of creating an element given this's node document, \" \", and the HTML namespace.\n• None Let be the result of invoking the fragment parsing algorithm steps with and .\n• For each of 's element descendants:\n\nThe interface has a number of outstanding issues in the issue tracker, documenting various problems with its specification. The remainder of will be gradually upstreamed to this specification.\n\nThe design of , as a class that needs to be constructed and then have its method called, is an unfortunate historical artifact. If we were designing this functionality today it would be a standalone function.\n\nThe constructor steps are to do nothing.\n• None Return the XML serialization of given false.\n\nThe and methods allow authors to schedule timer-based callbacks.\n\nTimers can be nested; after five such nested timers, however, the interval is forced to be at least four milliseconds.\n\nThis API does not guarantee that timers will run exactly on schedule. Delays due to CPU load, other tasks, etc, are to be expected.\n\nObjects that implement the mixin have a , which is an ordered map, initially empty. Each key in this map is a positive integer, corresponding to the return value of a or call. Each value is a unique internal value, corresponding to a key in the object's map of active timers.\n\nThe method steps are to return the result of running the timer initialization steps given this, , , , and false.\n\nThe method steps are to return the result of running the timer initialization steps given this, , , , and true.\n\nThe and method steps are to remove this's map of setTimeout and setInterval IDs[ ].\n\nBecause and clear entries from the same map, either method can be used to clear timers created by or .\n\nTo perform the , given a , a string or or , a number , a list , a boolean , and optionally (and only if is true) a number , perform the following steps. They return a number.\n• None Let be if that is a object; otherwise let be the that corresponds to .\n• None If was given, let be ; otherwise, let be an implementation-defined integer that is greater than zero and does not already exist in 's map of setTimeout and setInterval IDs.\n• If the surrounding agent's event loop's currently running task is a task that was created by this algorithm, then let be the task's timer nesting level. Otherwise, let be zero. The task's timer nesting level is used both for nested calls to , and for the repeating timers created by . (Or, indeed, for any combination of the two.) In other words, it represents nested invocations of this algorithm, not of a particular method.\n• None If is less than 0, then set to 0.\n• None If is greater than 5, and is less than 4, then set to 4.\n• None Let be the active script.\n• Let be a task that runs the following substeps:\n• None Assert: is a unique internal value, not null.\n• None If does not exist in 's map of setTimeout and setInterval IDs, then abort these steps.\n• If 's map of setTimeout and setInterval IDs[ ] does not equal , then abort these steps. This accommodates for the ID having been cleared by a or call, and being reused by a subsequent or call.\n• None Record timing info for timer handler given , 's relevant settings object, and .\n• None If is a , then invoke given and \" \", and with callback this value set to .\n• \n• If was not given:\n• None Let be \" \" if is a object; \" \" otherwise.\n• None Let be \" \" if is true; \" \" otherwise.\n• None Let be a concatenation of , U+0020 SPACE, and .\n• None Set to the result of invoking the Get Trusted Type compliant string algorithm with , , , , and \" \".\n• None Perform EnsureCSPDoesNotBlockStringCompilation( , « », , , timer, « », ). If this throws an exception, catch it, report it for , and abort these steps.\n• None Let be the default script fetch options.\n• If is not null, then:\n• None Set to a script fetch options whose cryptographic nonce is 's fetch options's cryptographic nonce, integrity metadata is the empty string, parser metadata is \" \", credentials mode is 's fetch options's credentials mode, referrer policy is 's fetch options's referrer policy, and fetch priority is \" \". The effect of these steps ensures that the string compilation done by and behaves equivalently to that done by . That is, module script fetches via will behave the same in both contexts.\n• None Let be the result of creating a classic script given , , , and .\n• None If does not exist in 's map of setTimeout and setInterval IDs, then abort these steps.\n• If 's map of setTimeout and setInterval IDs[ ] does not equal , then abort these steps. The ID might have been removed via the author code in calling or . Checking that uniqueHandle isn't different accounts for the possibility of the ID, after having been cleared, being reused by a subsequent or call.\n• None If is true, then perform the timer initialization steps again, given , , , , true, and .\n• None Otherwise, remove 's map of setTimeout and setInterval IDs[ ].\n• None Let be an algorithm step which queues a global task on the given to run .\n• None Set to the result of running steps after a timeout given , \" \", , .\n• None Set 's map of setTimeout and setInterval IDs[ ] to .\n\nArgument conversion as defined by Web IDL (for example, invoking methods on objects passed as the first argument) happens in the algorithms defined in Web IDL, before this algorithm is invoked.\n\nObjects that implement the mixin have a , which is an ordered map, initially empty. Each key in this map is a unique internal value that represents a timer, and each value is a , representing the expiry time for that timer.\n\nTo , given a , a string , a number , and a set of steps , perform the following steps. They return a unique internal value.\n• None Let be a new unique internal value.\n• None Let be the current high resolution time given .\n• None Set 's map of active timers[ ] to plus .\n• Run the following steps in parallel:\n• If is a object, wait until 's associated has been fully active for a further milliseconds (not necessarily consecutively). Otherwise, is a object; wait until milliseconds have passed with the worker not suspended (not necessarily consecutively).\n• None Wait until any invocations of this algorithm that had the same and , that started before this one, and whose is less than or equal to this one's, have completed.\n• This is intended to allow user agents to pad timeouts as needed to optimize the power usage of the device. For example, some processors have a low-power mode where the granularity of timers is reduced; on such platforms, user agents can slow timers down to fit this schedule instead of requiring the processor to use the more accurate mode with its associated higher power usage.\n\nRun steps after a timeout is meant to be used by other specifications that want to execute developer-supplied code after a developer-supplied timeout, in a similar manner to . (Note, however, it does not have the nesting and clamping behavior of .) Such specifications can choose an to ensure ordering within their specification's timeouts, while not constraining ordering with respect to other specification's timeouts.\n\nThe method must queue a microtask to invoke with « » and \" \".\n\nThe method allows authors to schedule a callback on the microtask queue. This allows their code to run once the JavaScript execution context stack is next empty, which happens once all currently executing synchronous JavaScript has run to completion. This doesn't yield control back to the event loop, as would be the case when using, for example, .\n\nAuthors ought to be aware that scheduling a lot of microtasks has the same performance downsides as running a lot of synchronous code. Both will prevent the browser from doing its own work, such as rendering. In many cases, or is a better choice. In particular, if the goal is to run code before the next rendering cycle, that is the purpose of .\n\nAs can be seen from the following examples, the best way of thinking about is as a mechanism for rearranging synchronous code, effectively placing the queued code immediately after the currently executing synchronous JavaScript has run to completion.\n\nLogic that depends on tasks or microtasks, such as media elements loading their media data, are stalled when these methods are invoked.\n\nThe and method steps are:\n• None If we cannot show simple dialogs for this, then return.\n• None If the method was invoked with no arguments, then let be the empty string; otherwise, let be the method's first argument.\n• None Set to the result of normalizing newlines given .\n• None Set to the result of optionally truncating .\n• None Let be WebDriver BiDi user prompt opened with this, \" \", and .\n• If is \" \", then:\n• None Show to the user, treating U+000A LF as a line break.\n• None Optionally, pause while waiting for the user to acknowledge the message.\n• None Invoke WebDriver BiDi user prompt closed with this, \" \", and true.\n\nThis method is defined using two overloads, instead of using an optional argument, for historical reasons. The practical impact of this is that is treated as , but is treated as .\n• None If we cannot show simple dialogs for this, then return false.\n• None Set to the result of normalizing newlines given .\n• None Set to the result of optionally truncating .\n• None Show to the user, treating U+000A LF as a line break, and ask the user to respond with a positive or negative response.\n• None Let be WebDriver BiDi user prompt opened with this, \" \", and .\n• If is \" \", then:\n• None Pause until the user responds either positively or negatively.\n• None If the user responded positively, then set to true.\n• None If is \" \", then set to true.\n• None Invoke WebDriver BiDi user prompt closed with this, \" \", and .\n• None If we cannot show simple dialogs for this, then return null.\n• None Set to the result of normalizing newlines given .\n• None Set to the result of optionally truncating .\n• None Set to the result of optionally truncating .\n• None Show to the user, treating U+000A LF as a line break, and ask the user to either respond with a string value or abort. The response must be defaulted to the value given by .\n• None Let be WebDriver BiDi user prompt opened with this, \" \", and .\n• If is \" \", then:\n• None Pause while waiting for the user's response.\n• None If the user did not abort, then set to the string that the user responded with.\n• None Otherwise, if is \" \", then set to the empty string.\n• None Invoke WebDriver BiDi user prompt closed with this, \" \", false if is null or true otherwise, and .\n\nTo , return either itself or some string derived from that is shorter. User agents should not provide UI for displaying the elided portion of , as this makes it too easy for abusers to create dialogs of the form \"Important security alert! Click 'Show More' for full details!\".\n\nFor example, a user agent might want to only display the first 100 characters of a message. Or, a user agent might replace the middle of the string with \"…\". These types of modifications can be useful in limiting the abuse potential of unnaturally large, trustworthy-looking system dialogs.\n\nWe for a when the following algorithm returns true:\n• None If the active sandboxing flag set of 's associated has the sandboxed modals flag set, then return true.\n• None If 's relevant settings object's origin and 's relevant settings object's top-level origin are not same origin-domain, then return true.\n• If 's relevant agent's event loop's termination nesting level is nonzero, then optionally return true.\n• None Optionally, return true. (For example, the user agent might give the user the option to ignore all modal dialogs, and would thus abort at this step whenever the method was invoked.)\n• None Let be this's associated .\n• None If is not fully active, then return.\n• None If 's unload counter is greater than 0, then return.\n• None If is ready for post-load tasks, then run the printing steps for .\n\nUser agents should also run the printing steps whenever the user asks for the opportunity to obtain a physical form (e.g. printed copy), or the representation of a physical form (e.g. PDF copy), of a document.\n\nThe for a are:\n• The user agent may display a message to the user or return (or both). For instance, a kiosk browser could silently ignore any invocations of the method. For instance, a browser on a mobile device could detect that there are no printers in the vicinity and display a message saying so before continuing to offer a \"save to PDF\" option.\n• If the active sandboxing flag set of has the sandboxed modals flag set, then return. If the printing dialog is blocked by a 's sandbox, then neither the nor events will be fired.\n• The user agent must fire an event named at the relevant global object of , as well as any child navigable in it. Firing in children only doesn't seem right here, and some tasks likely need to be queued. See issue #5096. The event can be used to annotate the printed copy, for instance adding the time at which the document was printed.\n• None The user agent should offer the user the opportunity to obtain a physical form (or the representation of a physical form) of . The user agent may wait for the user to either accept or decline before returning; if so, the user agent must pause while the method is waiting. Even if the user agent doesn't wait at this point, the user agent must use the state of the relevant documents as they are at this point in the algorithm if and when it eventually creates the alternate form.\n• The user agent must fire an event named at the relevant global object of , as well as any child navigables in it. Firing in children only doesn't seem right here, and some tasks likely need to be queued. See issue #5096. The event can be used to revert annotations added in the earlier event, as well as showing post-printing UI. For instance, if a page is walking the user through the steps of applying for a home loan, the script could automatically advance to the next step after having printed a form or other.\n\nInstances of represent the identity and state of the user agent (the client). It has also been used as a generic global under which various APIs are located, but this is not precedent to build upon. Instead use the mixin or equivalent.\n\nThese interface mixins are defined separately so that can reuse parts of the interface.\n\nEach has an , which is a object. Upon creation of the object, its associated must be set to a new object created in the object's relevant realm.\n\nThe and getter steps are to return this's associated .\n\nIn certain cases, despite the best efforts of the entire industry, web browsers have bugs and limitations that web authors are forced to work around.\n\nThis section defines a collection of attributes that can be used to determine, from script, the kind of user agent in use, in order to work around these issues.\n\nThe user agent has a , which is either Chrome, Gecko, or WebKit.\n\nThe navigator compatibility mode constrains the mixin to the combinations of attribute values and presence of and that are known to be compatible with existing web content.\n\nClient detection should always be limited to detecting known current versions; future versions and unknown versions should always be assumed to be fully compliant.\n\nIf the navigator compatibility mode is Gecko, then the user agent must also support the following partial interface:\n\nThe attribute's getter must return either the empty string or a string representing the platform on which the browser is executing, e.g. \" \", \" \".\n\nAny information in this API that varies from user to user can be used to profile the user. In fact, if enough such information is available, a user can actually be uniquely identified. For this reason, user agent implementers are strongly urged to include as little information in this API as possible.\n\nA event is fired at the or object when the user agent's understanding of what the user's preferred languages are changes.\n\nTo determine , the user agent should bear in mind the following:\n• Any information in this API that varies from user to user can be used to profile or identify the user.\n• If the user is not using a service that obfuscates the user's point of origin (e.g. the Tor anonymity network), then the value that is least likely to distinguish the user from other users with similar origins (e.g. from the same IP address block) is the language used by the majority of such users. [TOR]\n• If the user is using an anonymizing service, then the value \" \" is suggested; if all users of the service use that same value, that reduces the possibility of distinguishing the users from each other.\n\nTo avoid introducing any more fingerprinting vectors, user agents should use the same list for the APIs defined in this function as for the HTTP ` ` header.\n\nThe attribute must return false if the user agent will not contact the network when the user follows links or when a script requests a remote page (or knows that such an attempt would fail), and must return true otherwise.\n\nWhen the value that would be returned by the attribute of a or changes from true to false, the user agent must queue a global task on the networking task source given to fire an event named at .\n\nOn the other hand, when the value that would be returned by the attribute of a or changes from false to true, the user agent must queue a global task on the networking task source given to fire an event named at the or object.\n\nThis attribute is inherently unreliable. A computer can be connected to a network without having Internet access.\n• None Let ( , ) be the result of running normalize protocol handler parameters with , , and this's relevant settings object.\n• In parallel: for and . User agents may, within the constraints described, do whatever they like. A user agent could, for instance, prompt the user and offer the user the opportunity to add the site to a shortlist of handlers, or make the handlers their default, or cancel the request. User agents could also silently collect the information, providing it only when relevant to the user. User agents should keep track of which sites have registered handlers (even if the user has declined such registrations) so that the user is not repeatedly prompted with the same request. If the automation mode of this's relevant global object's associated is not \" \", the user agent should first verify that it is in an automation context (see WebDriver's security considerations). The user agent should then bypass the above communication of information and gathering of user consent, and instead do the following based on the value of the automation mode: Act as if the user has seen the registration details and accepted the request. Act as if the user has seen the registration details and rejected the request. When the for a URL :\n• None Set the username given and the empty string.\n• None Set the password given and the empty string.\n• None Let be the serialization of .\n• None Let be the result of running UTF-8 percent-encode on using the component percent-encode set.\n• None Replace the first instance of \" \" in with .\n• None Let be the result of parsing .\n• None Navigate an appropriate navigable to . If the user had visited a site at that made the following call: ...and then, much later, while visiting , clicked on a link such as: ...then the UA might navigate to the following URL: This site could then do whatever it is that it does with soup (synthesize it and ship it to the user, or whatever). This does not define when the handler is used. To some extent, the processing model for navigating across documents defines some cases where it is relevant, but in general user agents may use this information wherever they would otherwise consider handing schemes to native plugins or helper applications.\n• None Let ( , ) be the result of running normalize protocol handler parameters with , , and this's relevant settings object.\n• None In parallel: unregister the handler described by and .\n\nTo , given a string , a string , and an environment settings object , run these steps:\n• If is neither a safelisted scheme nor a string starting with \" \" followed by one or more ASCII lower alphas, then throw a \" \" . This means that including a colon in (as in \" \") will throw. The following schemes are the : This list can be changed. If there are schemes that ought to be added, please send feedback.\n• None If does not contain \" \", then throw a \" \" .\n• None Let be the result of encoding-parsing a URL given , relative to .\n• If is failure, then throw a \" \" . This is forcibly the case if the placeholder is in the host or port of the URL.\n• None If 's scheme is not an HTTP(S) scheme or 's origin is not same origin with 's origin, then throw a \" \" .\n• Assert: the result of Is url potentially trustworthy? given is \" \". Because normalize protocol handler parameters is run within a secure context, this is implied by the same origin condition.\n• The serialization of will by definition not be a valid URL string as it includes the string \" \" which is not a valid component in a URL.\n\nCustom scheme handlers can introduce a number of concerns, in particular privacy concerns.\n\nHijacking all web usage. User agents should not allow schemes that are key to its normal operation, such as an HTTP(S) scheme, to be rerouted through third-party sites. This would allow a user's activities to be trivially tracked, and would allow user information, even in secure connections, to be collected.\n\nHijacking defaults. User agents are strongly urged to not automatically change any defaults, as this could lead the user to send data to remote hosts that the user is not expecting. New handlers registering themselves should never automatically cause those sites to be used.\n\nRegistration spamming. User agents should consider the possibility that a site will attempt to register a large number of handlers, possibly from multiple domains (e.g., by redirecting through a series of pages each on a different domain, and each registering a handler for — analogous practices abusing other web browser features have been used by pornography web sites for many years). User agents should gracefully handle such hostile attempts, protecting the user.\n\nHostile handler metadata. User agents should protect against typical attacks against strings embedded in their interface, for example ensuring that markup or escape characters in such strings are not executed, that null bytes are properly handled, that over-long strings do not cause crashes or buffer overruns, and so forth.\n\nLeaking private data. Web page authors may reference a custom scheme handler using URL data considered private. They might do so with the expectation that the user's choice of handler points to a page inside the organization, ensuring that sensitive data will not be exposed to third parties. However, a user may have registered a handler pointing to an external site, resulting in a data leak to that third party. Implementers might wish to consider allowing administrators to disable custom handlers on certain subdomains, content types, or schemes.\n\nInterface interference. User agents should be prepared to handle intentionally long arguments to the methods. For example, if the user interface exposed consists of an \"accept\" button and a \"deny\" button, with the \"accept\" binding containing the name of the handler, it's important that a long name not cause the \"deny\" button to be pushed off the screen.\n\nEach has a . It defaults to \" \", but it also can be either \" \" or \" \".\n\nFor the purposes of user agent automation and website testing, this standard defines WebDriver extension command. It instructs the user agent to place a into a mode where it will automatically simulate a user either accepting or rejecting and registration confirmation prompt dialog.\n• None If is not a JSON Object, return a WebDriver error with WebDriver error code invalid argument.\n• None Let be the result of getting a property named \" \" from .\n• None If is not \" \", \" \", or \" \", return a WebDriver error with WebDriver error code invalid argument.\n• None Let be the current browsing context's active document.\n\nThe attribute must return true if the user agent attempts to handle cookies according to , and false if it ignores cookie change requests. [COOKIES]\n\nAlthough these days detecting PDF viewer support can be done via , for historical reasons, there are a number of complex and intertwined interfaces that provide the same capability, which legacy code relies on. This section specifies both the simple modern variant and the complicated historical one.\n\nEach user agent has a boolean, whose value is implementation-defined (and might vary according to user preferences).\n\nThis value also impacts the navigation processing model.\n\nEach object has a list. If the user agent's PDF viewer supported is false, then it is the empty list. Otherwise, it is a list containing five objects, whose names are, respectively:\n\nThe values of the above list form the list.\n\nThese names were chosen based on evidence of what websites historically search for, and thus what is necessary for user agents to expose in order to maintain compatibility with existing content. They are ordered alphabetically. The \" \" name was then inserted in the 0th position so that the getter could point to a generic plugin name.\n\nEach object has a list. If the user agent's PDF viewer supported is false, then it is the empty list. Otherwise, it is a list containing two objects, whose types are, respectively:\n\nThe values of the above list form the list.\n\nEach object has a , which is a new , and a , which is a new .\n\nThe mixin's getter steps are to return this's plugins array.\n\nThe mixin's getter steps are to return this's mime types array.\n\nThe mixin's method steps are to return false.\n\nThe mixin's getter steps are to return the user agent's PDF viewer supported.\n\nThe interface supports named properties. If the user agent's PDF viewer supported is true, then they are the PDF viewer plugin names. Otherwise, they are the empty list.\n• None For each of this's relevant global object's PDF viewer plugin objects: if 's name is , then return .\n\nThe interface supports indexed properties. The supported property indices are the indices of this's relevant global object's PDF viewer plugin objects.\n\nThe interface's getter steps are to return this's relevant global object's PDF viewer plugin objects's size.\n\nThe interface's method steps are to do nothing.\n\nThe interface supports named properties. If the user agent's PDF viewer supported is true, then they are the PDF viewer mime types. Otherwise, they are the empty list.\n• None For each of this's relevant global object's PDF viewer mime type objects: if 's type is , then return .\n\nThe interface supports indexed properties. The supported property indices are the indices of this's relevant global object's PDF viewer mime type objects.\n\nThe interface's getter steps are to return this's relevant global object's PDF viewer mime type objects's size.\n\nEach object has a , which is set when the object is created.\n\nThe interface's getter steps are to return this's name.\n\nThe interface's getter steps are to return \" \".\n\nThe interface's getter steps are to return \" \".\n\nThe interface supports named properties. If the user agent's PDF viewer supported is true, then they are the PDF viewer mime types. Otherwise, they are the empty list.\n• None For each of this's relevant global object's PDF viewer mime type objects: if 's type is , then return .\n\nThe interface supports indexed properties. The supported property indices are the indices of this's relevant global object's PDF viewer mime type objects.\n\nThe interface's getter steps are to return this's relevant global object's PDF viewer mime type objects's size.\n\nEach object has a , which is set when the object is created.\n\nThe interface's getter steps are to return this's type.\n\nThe interface's getter steps are to return \" \".\n\nThe interface's getter steps are to return \" \".\n\nThe interface's getter steps are to return this's relevant global object's PDF viewer plugin objects[0] (i.e., the generic \" \" one).\n\nAn object represents a bitmap image that can be painted to a canvas without undue latency.\n\nThe exact judgement of what is undue latency of this is left up to the implementer, but in general if making use of the bitmap requires network I/O, or even local disk I/O, then the latency is probably undue; whereas if it only requires a blocking read from a GPU or system RAM, the latency is probably acceptable.\n\nAn object whose [[Detached]] internal slot value is false always has associated , with a width and a height. However, it is possible for this data to be corrupted. If an object's media data can be decoded without errors, it is said to be .\n\nAn object's bitmap has an origin-clean flag, which indicates whether the bitmap is tainted by content from a different origin. The flag is initially set to true and may be changed to false by the steps of .\n\nTheir serialization steps, given and , are:\n• None If 's origin-clean flag is not set, then throw a \" \" .\n\nTheir deserialization steps, given , , and , are:\n\nTheir transfer steps, given and , are:\n• None If 's origin-clean flag is not set, then throw a \" \" .\n\nTheir transfer-receiving steps, given and , are:\n\nThe and methods, when invoked, must run these steps:\n• None If either or is given and is 0, then return a promise rejected with a .\n• None If either 's or 's is present and is 0, then return a promise rejected with an \" \" .\n• None Check the usability of the argument. If this throws an exception or returns bad, then return a promise rejected with an \" \" .\n• None Let be a new promise.\n• None Let be a new object.\n• \n• None If 's media data has no natural dimensions (e.g., it's a vector graphic with no specified content size) and either 's or 's is not present, then return a promise rejected with an \" \" .\n• None If 's media data has no natural dimensions (e.g., it's a vector graphic with no specified content size), it should be rendered to a bitmap of the size specified by the and the options.\n• None Set 's bitmap data to a copy of 's media data, cropped to the source rectangle with formatting. If this is an animated image, 's bitmap data must only be taken from the default image of the animation (the one that the format defines is to be used when animation is not supported or is disabled), or, if there is no such image, the first frame of the animation.\n• None If is not origin-clean, then set the origin-clean flag of 's bitmap to false.\n• None If 's attribute is , then return a promise rejected with an \" \" .\n• None Set 's bitmap data to a copy of the frame at the current playback position, at the media resource's natural width and natural height (i.e., after any aspect-ratio correction has been applied), cropped to the source rectangle with formatting.\n• None If is not origin-clean, then set the origin-clean flag of 's bitmap to false.\n• None Set 's bitmap data to a copy of 's bitmap data, cropped to the source rectangle with formatting.\n• None Set the origin-clean flag of the 's bitmap to the same value as the origin-clean flag of 's bitmap.\n• None Let be the result of reading 's data. If an error occurs during reading of the object, then reject with an \" \" and abort these steps.\n• None Apply the image sniffing rules to determine the file format of , with MIME type of (as given by 's attribute) giving the official type.\n• None If is not in a supported image file format (e.g., it's not an image at all), or if is corrupted in some fatal way such that the image dimensions cannot be obtained (e.g., a vector graphic with no natural size), then reject with an \" \" and abort these steps.\n• None Set 's bitmap data to , cropped to the source rectangle with formatting. If this is an animated image, 's bitmap data must only be taken from the default image of the animation (the one that the format defines is to be used when animation is not supported or is disabled), or, if there is no such image, the first frame of the animation.\n• None If IsDetachedBuffer( ) is true, then return a promise rejected with an \" \" .\n• None Set 's bitmap data to 's image data, cropped to the source rectangle with formatting.\n• None Set 's bitmap data to a copy of 's bitmap data, cropped to the source rectangle with formatting.\n• None Set the origin-clean flag of 's bitmap to the same value as the origin-clean flag of 's bitmap.\n• None Set 's bitmap data to a copy of 's visible pixel data, cropped to the source rectangle with formatting.\n\nWhen the steps above require that the user agent crop bitmap data to the source rectangle with formatting , the user agent must run the following steps:\n• None Let be the bitmap data being transformed.\n• If , , and are specified, let be a rectangle whose corners are the four points ( , ), ( + , ), ( + , + ), ( , + ). Otherwise, let be a rectangle whose corners are the four points (0, 0), (width of , 0), (width of , height of ), (0, height of ). If either or are negative, then the top-left corner of this rectangle will be to the left or above the ( , ) point.\n• Let be determined as follows: If the member of is specified the value of the member of If the member of is not specified, but the member is specified the width of , times the value of the member of , divided by the height of , rounded up to the nearest integer If neither nor are specified\n• Let be determined as follows: If the member of is specified the value of the member of If the member of is not specified, but the member is specified the height of , times the value of the member of , divided by the width of , rounded up to the nearest integer If neither nor are specified\n• None Place on an infinite transparent black grid plane, positioned so that its top left corner is at the origin of the plane, with the -coordinate increasing to the right, and the -coordinate increasing down, and with each pixel in the image data occupying a cell on the plane's grid.\n• None Let be the rectangle on the plane denoted by .\n• None Scale to the size specified by and . The user agent should use the value of the option to guide the choice of scaling algorithm.\n• If the value of the member of is \" \", must be flipped vertically, disregarding any image orientation metadata of the source (such as EXIF metadata), if any. [EXIF] If the value is \" \", no extra step is needed. There used to be a \" \" enum value. It was renamed to \" \". In the future, \" \" will be added back with a different meaning.\n• If is an element or a object, let be the value of the member of , and then run these substeps:\n• None If is \" \", the color space conversion behavior is implementation-specific, and should be chosen according to the default color space that the implementation uses for drawing images onto the canvas.\n• None If is \" \", must be decoded without performing any color space conversions. This means that the image decoding algorithm must ignore color profile metadata embedded in the source data as well as the display device color profile.\n• Let be the value of member of , and then run these substeps:\n• None If is \" \", the alpha premultiplication behavior is implementation-specific, and should be chosen according to implementation deems optimal for drawing images onto the canvas.\n• None If is \" \", the that is not premultiplied by alpha must have its color components multiplied by alpha and that is premultiplied by alpha must be left untouched.\n• None If is \" \", the that is not premultiplied by alpha must be left untouched and that is premultiplied by alpha must have its color components divided by alpha.\n• None If this's [[Detached]] internal slot's value is true, then return 0.\n• None If this's [[Detached]] internal slot's value is true, then return 0.\n\nThe enumeration is used to express a preference for the interpolation quality to use when scaling images.\n\nThe \" \" value indicates a preference for scaling the image to preserve the pixelation of the original as much as possible, with minor smoothing as necessary to avoid distorting the image when the target size is not a clean multiple of the original.\n\nTo implement \" \", for each axis independently, first determine the integer multiple of its natural size that puts it closest to the target size and is greater than zero. Scale it to this integer-multiple-size using nearest neighbor, then scale it the rest of the way to the target size using bilinear interpolation.\n\nThe \" \" value indicates a preference for a low level of image interpolation quality. Low-quality image interpolation may be more computationally efficient than higher settings.\n\nThe \" \" value indicates a preference for a medium level of image interpolation quality.\n\nThe \" \" value indicates a preference for a high level of image interpolation quality. High-quality image interpolation may be more computationally expensive than lower settings.\n\nBilinear scaling is an example of a relatively fast, lower-quality image-smoothing algorithm. Bicubic or Lanczos scaling are examples of image-scaling algorithms that produce higher-quality output. This specification does not mandate that specific interpolation algorithms be used, except for \" \" as described above.\n\nEach object also has a that stores the provider's internal state. It is defined as follows:\n\nEach target object has a , which is an ordered map that must be initially empty, and an , which is a number that must initially be zero.\n\nAn is considered if any of the following are true:\n• None Any of the objects in 's owner set are supported.\n• None If this is not supported, then throw a \" \" .\n• None Increment 's animation frame callback identifier by one, and let be the result.\n• None Let be 's map of animation frame callbacks.\n• None If this is not supported, then throw a \" \" .\n• None Let be this's target object's map of animation frame callbacks.\n\nTo for a target object with a timestamp :\n• None Let be 's map of animation frame callbacks.\n• None Let be the result of getting the keys of .\n• For each in , if exists in :\n\nThe interface used to be defined here. It is now defined in . [WEBSOCKETS]\n\nMessages in server-sent events, cross-document messaging, channel messaging, broadcast channels, and use the interface for their events: [WEBSOCKETS]\n\nThe attribute must return the value it was initialized to. It represents the message being sent.\n\nThe attribute must return the value it was initialized to. It represents, in server-sent events and cross-document messaging, the origin of the document that sent the message (typically the scheme, hostname, and port of the document, but not its path or fragment).\n\nThe attribute must return the value it was initialized to. It represents, in server-sent events, the last event ID string of the event source.\n\nThe attribute must return the value it was initialized to. It represents, in cross-document messaging, the of the browsing context of the object from which the message came; and in the events used by shared workers, the newly connecting .\n\nThe attribute must return the value it was initialized to. It represents, in cross-document messaging and channel messaging, the array being sent.\n\nThe method must initialize the event in a manner analogous to the similarly-named method. [DOM]\n\nVarious APIs (e.g., , ) use the interface for their event without using the API.\n\nTo enable servers to push data to web pages over HTTP or using dedicated server-push protocols, this specification introduces the interface.\n\nUsing this API consists of creating an object and registering an event listener.\n\nOn the server-side, the script (\" \" in this case) sends messages in the following form, with the MIME type:\n\nAuthors can separate events by using different event types. Here is a stream that has two event types, \"add\" and \"remove\":\n\nThe script to handle such a stream would look like this (where and are functions that take one argument, the event):\n\nEvent streams are always decoded as UTF-8. There is no way to specify another character encoding.\n\nEvent stream requests can be redirected using HTTP 301 and 307 redirects as with normal HTTP requests. Clients will reconnect if the connection is closed; a client can be told to stop reconnecting using the HTTP 204 No Content response code.\n\nUsing this API rather than emulating it using or an allows the user agent to make better use of network resources in cases where the user agent implementer and the network operator are able to coordinate in advance. Amongst other benefits, this can result in significant savings in battery life on portable devices. This is discussed further in the section below on connectionless push.\n\nEach object has the following associated with it:\n• None A . This must initially be null.\n• None A , in milliseconds. This must initially be an implementation-defined value, probably in the region of a few seconds.\n• None A . This must initially be the empty string.\n\nApart from url these are not currently exposed on the object.\n\nThe constructor, when invoked, must run these steps:\n• None Let be a new object.\n• None Let be the result of encoding-parsing a URL given , relative to .\n• None If is failure, then throw a \" \" .\n• None If the value of 's member is true, then set to Use Credentials and set 's attribute to true.\n• None Let be the result of creating a potential-CORS request given , the empty string, and .\n• None Let given response be the following step: if is not a network error, then reestablish the connection.\n• Fetch , with processResponseEndOfBody set to and processResponse set to the following steps given response :\n• None If is an aborted network error, then fail the connection.\n• None Otherwise, if is a network error, then reestablish the connection, unless the user agent knows that to be futile, in which case the user agent may fail the connection.\n• None Otherwise, if 's status is not 200, or if 's ` ` is not ` `, then fail the connection.\n• None Otherwise, announce the connection and interpret 's body line by line.\n\nThe attribute's getter must return the serialization of this object's url.\n\nThe attribute must return the value to which it was last initialized. When the object is created, it must be initialized to false.\n\nThe attribute represents the state of the connection. It can have the following values:\n\nWhen the object is created its must be set to (0). The rules given below for handling the connection define when the value changes.\n\nThe method must abort any instances of the fetch algorithm started for this object, and must set the attribute to .\n\nThe following are the event handlers (and their corresponding event handler event types) that must be supported, as event handler IDL attributes, by all objects implementing the interface:\n\nWhen a user agent is to , the user agent must queue a task which, if the attribute is set to a value other than , sets the attribute to and fires an event named at the object.\n\nWhen a user agent is to , the user agent must run the following steps. These steps are run in parallel, not as part of a task. (The tasks that it queues, of course, are run like normal tasks and not themselves in parallel.)\n• Queue a task to run the following steps:\n• None If the attribute is set to , abort the task.\n• None Fire an event named at the object.\n• None Wait a delay equal to the reconnection time of the event source.\n• None Optionally, wait some more. In particular, if the previous attempt failed, then user agents might introduce an exponential backoff delay to avoid overloading a potentially already overloaded server. Alternatively, if the operating system has reported that there is no network connectivity, user agents might wait for the operating system to announce that the network connection has returned before retrying.\n• None Wait until the aforementioned task has run, if it has not yet run.\n• Queue a task to run the following steps:\n• None If the object's attribute is not set to , then return.\n• None Let be the object's request.\n• If the object's last event ID string is not the empty string, then:\n• None Let be the object's last event ID string, encoded as UTF-8.\n• None Fetch and process the response obtained in this fashion, if any, as described earlier in this section.\n\nWhen a user agent is to , the user agent must queue a task which, if the attribute is set to a value other than , sets the attribute to and fires an event named at the object. Once the user agent has failed the connection, it does not attempt to reconnect.\n\nThe task source for any tasks that are queued by objects is the .\n\nThe ` HTTP request header reports an object's last event ID string to the server when the user agent is to reestablish the connection.\n\nSee whatwg/html issue #7363 to define the value space better. It is essentially any UTF-8 encoded string, that does not contain U+0000 NULL, U+000A LF, or U+000D CR.\n\nThe event stream format is as described by the production of the following ABNF, the character set for which is Unicode. [ABNF]\n\nEvent streams in this format must always be encoded as UTF-8. [ENCODING]\n\nLines must be separated by either a U+000D CARRIAGE RETURN U+000A LINE FEED (CRLF) character pair, a single U+000A LINE FEED (LF) character, or a single U+000D CARRIAGE RETURN (CR) character.\n\nSince connections established to remote servers for such resources are expected to be long-lived, UAs should ensure that appropriate buffering is used. In particular, while line buffering with lines are defined to end with a single U+000A LINE FEED (LF) character is safe, block buffering or line buffering with different expected line endings can cause delays in event dispatch.\n\nStreams must be decoded using the UTF-8 decode algorithm.\n\nThe UTF-8 decode algorithm strips one leading UTF-8 Byte Order Mark (BOM), if any.\n\nThe stream must then be parsed by reading everything line by line, with a U+000D CARRIAGE RETURN U+000A LINE FEED (CRLF) character pair, a single U+000A LINE FEED (LF) character not preceded by a U+000D CARRIAGE RETURN (CR) character, and a single U+000D CARRIAGE RETURN (CR) character not followed by a U+000A LINE FEED (LF) character being the ways in which a line can end.\n\nWhen a stream is parsed, a buffer, an buffer, and a buffer must be associated with it. They must be initialized to the empty string.\n\nLines must be processed, in the order they are received, as follows:\n\nOnce the end of the file is reached, any pending data must be discarded. (If the file ends in the middle of an event, before the final empty line, the incomplete event is not dispatched.)\n\nThe steps to given a field name and a field value depend on the field name, as given in the following list. Field names must be compared literally, with no case folding performed.\n\nWhen the user agent is required to , the user agent must process the buffer, the buffer, and the buffer using steps appropriate for the user agent.\n\nFor web browsers, the appropriate steps to dispatch the event are as follows:\n• None Set the last event ID string of the event source to the value of the buffer. The buffer does not get reset, so the last event ID string of the event source remains set to this value until the next time it is set by the server.\n• None If the buffer is an empty string, set the buffer and the buffer to the empty string and return.\n• None If the buffer's last character is a U+000A LINE FEED (LF) character, then remove the last character from the buffer.\n• None Let be the result of creating an event using , in the relevant realm of the object.\n• None Initialize 's attribute to \" \", its attribute to , its attribute to the serialization of the origin of the event stream's final URL (i.e., the URL after redirects), and its attribute to the last event ID string of the event source.\n• None If the buffer has a value other than the empty string, change the type of the newly created event to equal the value of the buffer.\n• None Set the buffer and the buffer to the empty string.\n• None Queue a task which, if the attribute is set to a value other than , dispatches the newly created event at the object.\n\nIf an event doesn't have an \"id\" field, but an earlier event did set the event source's last event ID string, then the event's field will be set to the value of whatever the last seen \"id\" field was.\n\nFor other user agents, the appropriate steps to dispatch the event are implementation dependent, but at a minimum they must set the and buffers to the empty string before returning.\n\nLegacy proxy servers are known to, in certain cases, drop HTTP connections after a short timeout. To protect against such proxy servers, authors can include a comment line (one starting with a ':' character) every 15 seconds or so.\n\nAuthors wishing to relate event source connections to each other or to specific documents previously served might find that relying on IP addresses doesn't work, as individual clients can have multiple IP addresses (due to having multiple proxy servers) and individual IP addresses can have multiple clients (due to sharing a proxy server). It is better to include a unique identifier in the document when it is served and then pass that identifier as part of the URL when the connection is established.\n\nAuthors are also cautioned that HTTP chunking can have unexpected negative effects on the reliability of this protocol, in particular if the chunking is done by a different layer unaware of the timing requirements. If this is a problem, chunking can be disabled for serving event streams.\n\nClients that support HTTP's per-server connection limitation might run into trouble when opening multiple pages from a site if each page has an to the same domain. Authors can avoid this using the relatively complex mechanism of using unique domain names per connection, or by allowing the user to enable or disable the functionality on a per-page basis, or by sharing a single object using a shared worker.\n\nUser agents running in controlled environments, e.g. browsers on mobile handsets tied to specific carriers, may offload the management of the connection to a proxy on the network. In such a situation, the user agent for the purposes of conformance is considered to include both the handset software and the network proxy.\n\nThis can reduce the total data usage, and can therefore result in considerable power savings.\n\nAs well as implementing the existing API and wire format as defined by this specification and in more distributed ways as described above, formats of event framing defined by other applicable specifications may be supported. This specification does not define how they are to be parsed or processed.\n\nWhile an object's is , and the object has one or more event listeners registered for , , or events, there must be a strong reference from the or object that the object's constructor was invoked from to the object itself.\n\nWhile an object's is , and the object has one or more event listeners registered for or events, there must be a strong reference from the or object that the object's constructor was invoked from to the object itself.\n\nWhile there is a task queued by an object on the remote event task source, there must be a strong reference from the or object that the object's constructor was invoked from to that object.\n\nIf a user agent is to an object (this happens when a object goes away permanently), the user agent must abort any instances of the fetch algorithm started for this object, and must set the attribute to .\n\nIf an object is garbage collected while its connection is still open, the user agent must abort any instance of the fetch algorithm opened by this .\n\nUser agents are strongly urged to provide detailed diagnostic information about objects and their related network connections in their development consoles, to aid authors in debugging code using this API.\n\nFor example, a user agent could have a panel displaying all the objects a page has created, each listing the constructor's arguments, whether there was a network error, what the CORS status of the connection is and what headers were sent by the client and received from the server to lead to that status, the messages that were received and how they were parsed, and so forth.\n\nImplementations are especially encouraged to report detailed information to their development consoles whenever an event is fired, since little to no information can be made available in the events themselves.\n\nWeb browsers, for security and privacy reasons, prevent documents in different domains from affecting each other; that is, cross-site scripting is disallowed.\n\nWhile this is an important security feature, it prevents pages from different domains from communicating even when those pages are not hostile. This section introduces a messaging system that allows documents to communicate with each other regardless of their source domain, in a way designed to not enable cross-site scripting attacks.\n\nThe API can be used as a tracking vector.\n\nUse of this API requires extra care to protect users from hostile entities abusing a site for their own purposes.\n\nAuthors should check the attribute to ensure that messages are only accepted from domains that they expect to receive messages from. Otherwise, bugs in the author's message handling code could be exploited by hostile sites.\n\nFurthermore, even after checking the attribute, authors should also check that the data in question is of the expected format. Otherwise, if the source of the event has been attacked using a cross-site scripting flaw, further unchecked processing of information sent using the method could result in the attack being propagated into the receiver.\n\nAuthors should not use the wildcard keyword (*) in the argument in messages that contain any confidential information, as otherwise there is no way to guarantee that the message is only delivered to the recipient to which it was intended.\n\nAuthors who accept messages from any origin are encouraged to consider the risks of a denial-of-service attack. An attacker could send a high volume of messages; if the receiving page performs expensive computation or causes network traffic to be sent for each such message, the attacker's message could be multiplied into a denial-of-service attack. Authors are encouraged to employ rate limiting (only accepting a certain number of messages per minute) to make such attacks impractical.\n\nThe integrity of this API is based on the inability for scripts of one origin to post arbitrary events (using or otherwise) to objects in other origins (those that are not the same).\n\nImplementers are urged to take extra care in the implementation of this feature. It allows authors to transmit information from one domain to another domain, which is normally disallowed for security reasons. It also requires that UAs be careful to allow access to certain properties but not others.\n\nUser agents are also encouraged to consider rate-limiting message traffic between different origins, to protect naïve sites from denial-of-service attacks.\n\nWhen posting a message to a of a browsing context that has just been navigated to a new is likely to result in the message not receiving its intended recipient: the scripts in the target browsing context have to have had time to set up listeners for the messages. Thus, for instance, in situations where a message is to be sent to the of newly created child , authors are advised to have the child post a message to their parent announcing their readiness to receive messages, and for the parent to wait for this message before beginning posting messages.\n\nThe , given a , , and , are as follows:\n• None Let be the incumbent settings object.\n• None If is a single U+002F SOLIDUS character (/), then set to 's origin.\n• Otherwise, if is not a single U+002A ASTERISK character (*), then:\n• None Let be the result of running the URL parser on .\n• None If is failure, then throw a \" \" .\n• None Let be StructuredSerializeWithTransfer( , ). Rethrow any exceptions.\n• Queue a global task on the given to run the following steps:\n• None If the argument is not a single literal U+002A ASTERISK character (*) and 's associated 's origin is not same origin with , then return.\n• None Let be the serialization of 's origin.\n• None Let be the object corresponding to 's global object (a object).\n• If this throws an exception, catch it, fire an event named at , using , with the attribute initialized to and the attribute initialized to , and then return.\n• None Let be a new frozen array consisting of all objects in .[[TransferredValues]], if any, maintaining their relative order.\n• None Fire an event named at , using , with the attribute initialized to , the attribute initialized to , the attribute initialized to , and the attribute initialized to .\n\nThe interface's method steps are to run the window post message steps given this, , and .\n\nThe interface's method steps are to run the window post message steps given this, , and «[ \" \" → , \" \" → ]».\n\nTo enable independent pieces of code (e.g. running in different browsing contexts) to communicate directly, authors can use channel messaging.\n\nCommunication channels in this mechanism are implemented as two-ways pipes, with a port at each end. Messages sent in one port are delivered at the other port, and vice-versa. Messages are delivered as DOM events, without interrupting or blocking running tasks.\n\nTo create a connection (two \"entangled\" ports), the constructor is called:\n\nOne of the ports is kept as the local port, and the other port is sent to the remote code, e.g. using :\n\nTo send messages, the method on the port is used:\n\nTo receive messages, one listens to events:\n\nData sent on a port can be structured data; for example here an array of strings is passed on a :\n\nPorts as the basis of an object-capability model on the web\n\nPorts can be viewed as a way to expose limited capabilities (in the object-capability model sense) to other actors in the system. This can either be a weak capability system, where the ports are merely used as a convenient model within a particular origin, or as a strong capability model, where they are provided by one origin as the only mechanism by which another origin can effect change in or obtain information from .\n\nFor example, consider a situation in which a social web site embeds in one the user's email contacts provider (an address book site, from a second origin), and in a second a game (from a third origin). The outer social site and the game in the second cannot access anything inside the first ; together they can only:\n• None Navigate the to a new URL, such as the same URL but with a different fragment, causing the in the to receive a event.\n• None Resize the , causing the in the to receive a event.\n• None Send a event to the in the using the API.\n\nThe contacts provider can use these methods, most particularly the third one, to provide an API that can be accessed by other origins to manipulate the user's address book. For example, it could respond to a message \" \" by adding the given person and email address to the user's address book.\n\nTo avoid any site on the web being able to manipulate the user's contacts, the contacts provider might only allow certain trusted sites, such as the social site, to do this.\n\nNow suppose the game wanted to add a contact to the user's address book, and that the social site was willing to allow it to do so on its behalf, essentially \"sharing\" the trust that the contacts provider had with the social site. There are several ways it could do this; most simply, it could just proxy messages between the game site and the contacts site. However, this solution has a number of difficulties: it requires the social site to either completely trust the game site not to abuse the privilege, or it requires that the social site verify each request to make sure it's not a request that it doesn't want to allow (such as adding multiple contacts, reading the contacts, or deleting them); it also requires some additional complexity if there's ever the possibility of multiple games simultaneously trying to interact with the contacts provider.\n\nUsing message channels and objects, however, all of these problems can go away. When the game tells the social site that it wants to add a contact, the social site can ask the contacts provider not for it to add a contact, but for the capability to add a single contact. The contacts provider then creates a pair of objects, and sends one of them back to the social site, who forwards it on to the game. The game and the contacts provider then have a direct connection, and the contacts provider knows to only honor a single \"add contact\" request, nothing else. In other words, the game has been granted the capability to add a single contact.\n\nPorts as the basis of abstracting out service implementations\n\nContinuing the example from the previous section, consider the contacts provider in particular. While an initial implementation might have simply used objects in the service's , an evolution of the service might instead want to use a shared worker with a single connection.\n\nIf the initial design used objects to grant capabilities, or even just to allow multiple simultaneous independent sessions, the service implementation can switch from the s-in-each- model to the shared- model without changing the API at all: the ports on the service provider side can all be forwarded to the shared worker without it affecting the users of the API in the slightest.\n\nA object has an associated and an associated , both objects.\n• None Set this's port 1 to a new in this's relevant realm.\n• None Set this's port 2 to a new in this's relevant realm.\n\nThe getter steps are to return this's port 1.\n\nThe getter steps are to return this's port 2.\n\nThe following are the event handlers (and their corresponding event handler event types) that must be supported, as event handler IDL attributes, by objects implementing the interface:\n\nEach channel has two message ports. Data sent through one port is received by the other port, and vice versa.\n\nEach object has a (a ), to which the and events are dispatched. Unless otherwise specified, it defaults to the object itself.\n\nEach object can be entangled with another (a symmetric relationship). Each object also has a task source called the , initially empty. A port message queue can be enabled or disabled, and is initially disabled. Once enabled, a port can never be disabled again (though messages in the queue can get moved to another queue or removed altogether, which has much the same effect). A also has a flag, which must initially be false.\n\nWhen a port's port message queue is enabled, the event loop must use it as one of its task sources. When a port's relevant global object is a , all tasks queued on its port message queue must be associated with the port's relevant global object's associated .\n\nIf the document is fully active, but the event listeners were all created in the context of documents that are not fully active, then the messages will not be received unless and until the documents become fully active again.\n\nEach event loop has a task source called the . This is a virtual task source: it must act as if it contained the tasks of each port message queue of each whose has been shipped flag is false, whose port message queue is enabled, and whose relevant agent's event loop is that event loop, in the order in which they were added to their respective task source. When a task would be removed from the unshipped port message queue, it must instead be removed from its port message queue.\n\nWhen a 's has been shipped flag is false, its port message queue must be ignored for the purposes of the event loop. (The unshipped port message queue is used instead.)\n\nThe has been shipped flag is set to true when a port, its twin, or the object it was cloned from, is or has been transferred. When a 's has been shipped flag is true, its port message queue acts as a first-class task source, unaffected to any unshipped port message queue.\n\nWhen the user agent is to two objects, it must run the following steps:\n• If one of the ports is already entangled, then disentangle it and the port that it was entangled with. If those two previously entangled ports were the two ports of a object, then that object no longer represents an actual channel: the two ports in that object are no longer entangled.\n• Associate the two ports to be entangled, so that they form the two parts of a new channel. (There is no object that represents this channel.) Two ports and that have gone through this step are now said to be entangled; one is entangled to the other, and vice versa. While this specification describes this process as instantaneous, implementations are more likely to implement it via message passing. As with all algorithms, the key is \"merely\" that the end result be indistinguishable, in a black-box sense, from the specification.\n\nThe steps, given a which initiates disentangling, are as follows:\n• None Let be the which was entangled with.\n• None Disentangle and , so that they are no longer entangled or associated with each other.\n\nobjects are transferable objects. Their transfer steps, given and , are:\n• None Set 's has been shipped flag to true.\n• If is entangled with another port , then:\n• None Set 's has been shipped flag to true.\n\nTheir transfer-receiving steps, given and , are:\n• None Set 's has been shipped flag to true.\n• None Move all the tasks that are to fire events in .[[PortMessageQueue]] to the port message queue of , if any, leaving 's port message queue in its initial disabled state, and, if 's relevant global object is a , associating the moved tasks with 's relevant global object's associated .\n• None If .[[RemotePort]] is not null, then entangle .[[RemotePort]] and . (This will disentangle .[[RemotePort]] from the original port that was transferred.)\n\nThe , given , , , and are as follows:\n• None If contains , then throw a \" \" .\n• None If is not null and contains , then set to true and optionally report to a developer console that the target port was posted to itself, causing the communication channel to be lost.\n• None Let be StructuredSerializeWithTransfer( , ). Rethrow any exceptions.\n• None If is null, or if is true, then return.\n• Add a task that runs the following steps to the port message queue of :\n• Let be the in whose port message queue the task now finds itself. This can be different from , if itself was transferred and thus all its tasks moved along with it.\n• If this throws an exception, catch it, fire an event named at , using , and then return.\n• None Let be a new frozen array consisting of all objects in .[[TransferredValues]], if any, maintaining their relative order.\n• None Fire an event named at , using , with the attribute initialized to and the attribute initialized to .\n• None Let be the port with which this is entangled, if any; otherwise let it be null.\n• None Run the message port post message steps providing this, , and .\n• None Let be the port with which this is entangled, if any; otherwise let it be null.\n• None Run the message port post message steps providing this, , and .\n\nThe method steps are to enable this's port message queue, if it is not already enabled.\n• None If this is entangled, disentangle it.\n\nThe following are the event handlers (and their corresponding event handler event types) that must be supported, as event handler IDL attributes, by all objects implementing the interface:\n\nThe first time a object's IDL attribute is set, the port's port message queue must be enabled, as if the method had been called.\n\nWhen a object is garbage collected, if is entangled, then the user agent must disentangle .\n\nWhen a object is entangled and or event listener is registered, user agents must act as if 's entangled object has a strong reference to .\n\nFurthermore, a object must not be garbage collected while there exists an event referenced by a task in a task queue that is to be dispatched on that object, or while the object's port message queue is enabled and not empty.\n\nAuthors are strongly encouraged to explicitly close objects to disentangle them, so that their resources can be recollected. Creating many objects and discarding them without closing them can lead to high transient memory usage since garbage collection is not necessarily performed promptly, especially for s where garbage collection can involve cross-process coordination.\n\nPages on a single origin opened by the same user in the same user agent but in different unrelated browsing contexts sometimes need to send notifications to each other, for example \"hey, the user logged in over here, check your credentials again\".\n\nFor elaborate cases, e.g. to manage locking of shared state, to manage synchronization of resources between a server and multiple local clients, to share a connection with a remote host, and so forth, shared workers are the most appropriate solution.\n\nFor simple cases, though, where a shared worker would be an unreasonable overhead, authors can use the simple channel-based broadcast mechanism described in this section.\n\nThe getter steps are to return this's channel name.\n\nA object is said to be when its relevant global object is either:\n• None a object whose associated is fully active, or\n• None a object whose closing flag is false and whose worker is not a suspendable worker.\n• None If this is not eligible for messaging, then return.\n• None If this's closed flag is true, then throw an \" \" .\n• None Let be StructuredSerialize( ). Rethrow any exceptions.\n• None Let be the result of running obtain a storage key for non-storage purposes with this's relevant settings object.\n• Let be a list of objects that match the following criteria:\n• None They are eligible for messaging.\n• None The result of running obtain a storage key for non-storage purposes with their relevant settings object equals .\n• None Their channel name is this's channel name.\n• None Sort such that all objects whose relevant agents are the same are sorted in creation order, oldest first. (This does not define a complete ordering. Within this constraint, user agents may sort the list in any implementation-defined manner.)\n• For each in , queue a global task on the DOM manipulation task source given 's relevant global object to perform the following steps:\n• None If 's closed flag is true, then abort these steps.\n• If this throws an exception, catch it, fire an event named at , using , with the attribute initialized to the serialization of , and then abort these steps.\n• None Fire an event named at , using , with the attribute initialized to and the attribute initialized to the serialization of .\n\nWhile a object whose closed flag is false has an event listener registered for or events, there must be a strong reference from the object's relevant global object to the object itself.\n\nThe method steps are to set this's closed flag to true.\n\nAuthors are strongly encouraged to explicitly close objects when they are no longer needed, so that they can be garbage collected. Creating many objects and discarding them while leaving them with an event listener and without closing them can lead to an apparent memory leak, since the objects will continue to live for as long as they have an event listener (or until their page or worker is closed).\n\nThe following are the event handlers (and their corresponding event handler event types) that must be supported, as event handler IDL attributes, by all objects implementing the interface:\n\nThis specification defines an API for running scripts in the background independently of any user interface scripts.\n\nThis allows for long-running scripts that are not interrupted by scripts that respond to clicks or other user interactions, and allows long tasks to be executed without yielding to keep the page responsive.\n\nWorkers (as these background scripts are called herein) are relatively heavy-weight, and are not intended to be used in large numbers. For example, it would be inappropriate to launch one worker for each pixel of a four megapixel image. The examples below show some appropriate uses of workers.\n\nGenerally, workers are expected to be long-lived, have a high start-up performance cost, and a high per-instance memory cost.\n\nThere are a variety of uses that workers can be put to. The following subsections show various examples of this use.\n\nThe simplest use of workers is for performing a computationally expensive task without interrupting the user interface.\n\nIn this example, the main document spawns a worker to (naïvely) compute prime numbers, and progressively displays the most recently found prime number.\n\nThe main page is as follows:\n\nThe constructor call creates a worker and returns a object representing that worker, which is used to communicate with the worker. That object's event handler allows the code to receive messages from the worker.\n\nThe worker itself is as follows:\n\nThe bulk of this code is simply an unoptimized search for a prime number. The method is used to send a message back to the page when a prime is found.\n\nAll of our examples so far show workers that run classic scripts. Workers can instead be instantiated using module scripts, which have the usual benefits: the ability to use the JavaScript statement to import other modules; strict mode by default; and top-level declarations not polluting the worker's global scope.\n\nAs the statement is available, the method will automatically fail inside module workers.\n\nIn this example, the main document uses a worker to do off-main-thread image manipulation. It imports the filters used from another module.\n\nThe main page is as follows:\n\nThe worker file is then:\n\nThis section introduces shared workers using a Hello World example. Shared workers use slightly different APIs, since each worker can have multiple connections.\n\nThis first example shows how you connect to a worker and how a worker can send a message back to the page when it connects to it. Received messages are displayed in a log.\n\nHere is the HTML page:\n\nHere is the JavaScript worker:\n\nThis second example extends the first one by changing two things: first, messages are received using instead of an event handler IDL attribute, and second, a message is sent to the worker, causing the worker to send another message in return. Received messages are again displayed in a log.\n\nHere is the HTML page:\n\nHere is the JavaScript worker:\n\nFinally, the example is extended to show how two pages can connect to the same worker; in this case, the second page is merely in an on the first page, but the same principle would apply to an entirely separate page in a separate top-level traversable.\n\nHere is the outer HTML page:\n\nHere is the inner HTML page:\n\nHere is the JavaScript worker:\n\nIn this example, multiple windows (viewers) can be opened that are all viewing the same map. All the windows share the same map information, with a single worker coordinating all the viewers. Each viewer can move around independently, but if they set any data on the map, all the viewers are updated.\n\nThe main page isn't interesting, it merely provides a way to open the viewers:\n\nThe viewer is more involved:\n\nThere are several key things worth noting about the way the viewer is written.\n\nMultiple listeners. Instead of a single message processing function, the code here attaches multiple event listeners, each one performing a quick check to see if it is relevant for the message. In this example it doesn't make much difference, but if multiple authors wanted to collaborate using a single port to communicate with a worker, it would allow for independent code instead of changes having to all be made to a single event handling function.\n\nRegistering event listeners in this way also allows you to unregister specific listeners when you are done with them, as is done with the method in this example.\n\nConnecting to multiple pages. The script uses the event listener to listen for multiple connections.\n\nDirect channels. When the worker receives a \"msg\" message from one viewer naming another viewer, it sets up a direct connection between the two, so that the two viewers can communicate directly without the worker having to proxy all the messages.\n\nWith multicore CPUs becoming prevalent, one way to obtain better performance is to split computationally expensive tasks amongst multiple workers. In this example, a computationally expensive task that is to be performed for every number from 1 to 10,000,000 is farmed out to ten subworkers.\n\nThe main page is as follows, it just reports the result:\n\nThe worker itself is as follows:\n\nIt consists of a loop to start the subworkers, and then a handler that waits for all the subworkers to respond.\n\nThe subworkers are implemented as follows:\n\nThey receive two numbers in two events, perform the computation for the range of numbers thus specified, and then report the result back to the parent.\n\nSuppose that a cryptography library is made available that provides three tasks:\n\nThe library itself is as follows:\n\nNote that the crypto functions here are just stubs and don't do real cryptography.\n\nThis library could be used as follows:\n\nA later version of the API, though, might want to offload all the crypto work onto subworkers. This could be done as follows:\n\nThe little subworkers would then be as follows.\n\nNotice how the users of the API don't have to even know that this is happening — the API hasn't changed; the library can delegate to subworkers without changing its API, even though it is accepting data using message channels.\n\nCreating a worker requires a URL to a JavaScript file. The constructor is invoked with the URL to that file as its only argument; a worker is then created and returned:\n\nIf you want your worker script to be interpreted as a module script instead of the default classic script, you need to use a slightly different signature:\n\nDedicated workers use objects behind the scenes, and thus support all the same features, such as sending structured data, transferring binary data, and transferring other ports.\n\nTo receive messages from a dedicated worker, use the event handler IDL attribute on the object:\n\nYou can also use the method.\n\nThe implicit used by dedicated workers has its port message queue implicitly enabled when it is created, so there is no equivalent to the interface's method on the interface.\n\nTo send data to a worker, use the method. Structured data can be sent over this communication channel. To send objects efficiently (by transferring them rather than cloning them), list them in an array in the second argument.\n\nTo receive a message inside the worker, the event handler IDL attribute is used.\n\nYou can again also use the method.\n\nIn either case, the data is provided in the event object's attribute.\n\nTo send messages back, you again use . It supports the structured data in the same manner.\n\nShared workers are identified by the URL of the script used to create it, optionally with an explicit name. The name allows multiple instances of a particular shared worker to be started.\n\nShared workers are scoped by origin. Two different sites using the same names will not collide. However, if a page tries to use the same shared worker name as another page on the same site, but with a different script URL, it will fail.\n\nCreating shared workers is done using the constructor. This constructor takes the URL to the script to use for its first argument, and the name of the worker, if any, as the second argument.\n\nCommunicating with shared workers is done with explicit objects. The object returned by the constructor holds a reference to the port on its attribute.\n\nInside the shared worker, new clients of the worker are announced using the event. The port for the new client is given by the event object's attribute.\n\nThis standard defines two kinds of workers: dedicated workers, and shared workers. Dedicated workers, once created, are linked to their creator, but message ports can be used to communicate from a dedicated worker to multiple other browsing contexts or workers. Shared workers, on the other hand, are named, and once created any script running in the same origin can obtain a reference to that worker and communicate with it. defines a third kind. [SW]\n\nThe global scope is the \"inside\" of a worker.\n\nserves as the base class for specific types of worker global scope objects, including , , and .\n\nA object has an associated (a set of and objects). It is initially empty and populated when the worker is created or obtained.\n\nIt is a set, instead of a single owner, to accommodate objects.\n\nA object has an associated (\" \" or \" \"). It is set during creation.\n\nA object has an associated (null or a URL). It is initially null.\n\nA object has an associated (a string). It is set during creation.\n\nThe name can have different semantics for each subclass of . For instances, it is simply a developer-supplied name, useful mostly for debugging purposes. For instances, it allows obtaining a reference to a common shared worker via the constructor. For objects, it doesn't make sense (and as such isn't exposed through the JavaScript API at all).\n\nA object has an associated (a policy container). It is initially a new policy container.\n\nA object has an associated (an embedder policy).\n\nA object has an associated . It is a module map, initially empty.\n\nA object has an associated boolean. It is initially false.\n\nThe attribute must return the object itself.\n\nThe attribute must return the object whose associated object is the object.\n\nWhile the object is created after the object, this is not problematic as it cannot be observed from script.\n\nThe following are the event handlers (and their corresponding event handler event types) that must be supported, as event handler IDL attributes, by objects implementing the interface:\n\nobjects have an associated (a ). This port is part of a channel that is set up when the worker is created, but it is not exposed. This object must never be garbage collected before the object.\n\nThe getter steps are to return this's name. Its value represents the name given to the worker using the constructor, used primarily for debugging purposes.\n\nThe and methods on objects act as if, when invoked, it immediately invoked the respective and on the port, with the same arguments, and returned the same return value.\n\nTo , given a , run these steps:\n• None Discard any tasks that have been added to 's relevant agent's event loop's task queues.\n• None Set 's closing flag to true. (This prevents any further tasks from being queued.)\n\nThe method steps are to close a worker given this.\n\nA object has an associated , , and . They are initialized when the object is created, in the run a worker algorithm.\n\nShared workers receive message ports through events on their object for each connection.\n\nThe getter steps are to return this's name. Its value represents the name that can be used to obtain a reference to the worker using the constructor.\n\nThe method steps are to close a worker given this.\n\nThe following are the event handlers (and their corresponding event handler event types) that must be supported, as event handler IDL attributes, by objects implementing the interface:\n\nA worker event loop's task queues only have events, callbacks, and networking activity as tasks. These worker event loops are created by the run a worker algorithm.\n\nEach object has a flag, which must be initially false, but which can get set to true by the algorithms in the processing model section below.\n\nOnce the 's closing flag is set to true, the event loop's task queues must discard any further tasks that would be added to them (tasks already on the queue are unaffected except where otherwise specified). Effectively, once the closing flag is true, timers stop firing, notifications for all pending background operations are dropped, etc.\n\nWorkers communicate with other workers and with s through message channels and their objects.\n\nEach object has a list of , which consists of all the objects that are entangled with another port and that have one (but only one) port owned by . This list includes the implicit in the case of dedicated workers.\n\nGiven an environment settings object when creating or obtaining a worker, the depends on the type of global object specified by . If 's global object is a object (i.e., if we are creating a nested dedicated worker), then the relevant owner is that global object. Otherwise, 's global object is a object, and the relevant owner is that 's associated .\n\nA worker is said to be a if its 's owner set is not empty or:\n• its owner set has been empty for no more than a short implementation-defined timeout value,\n• its object is a object (i.e., the worker is a shared worker), and\n• the user agent has a navigable whose active document is not completely loaded.\n\nThe second part of this definition allows a shared worker to survive for a short time while a page is loading, in case that page is going to contact the shared worker again. This can be used by user agents as a way to avoid the cost of restarting a shared worker used by a site when the user is navigating from page to page within that site.\n\nA worker is said to be an if any of its owners are either objects that are fully active or active needed workers.\n\nA worker is said to be a if it is an active needed worker and either it has outstanding timers, database transactions, or network connections, or its list of the worker's ports is not empty, or its is actually a object (i.e., the worker is a shared worker).\n\nA worker is said to be a if it is not an active needed worker but it is a permissible worker.\n\nWhen a user agent is to for a script with or object , URL , environment settings object , , and a dictionary , it must run the following steps.\n• None Let be true if is a object, and false otherwise.\n• None Let be the relevant owner to add given .\n• None Let be the unsafe shared current time.\n• None Let be the result of obtaining a dedicated/shared worker agent given and . Run the rest of these steps in that agent.\n• Let be the result of creating a new realm given and the following customizations:\n• None For the global object, if is true, create a new object. Otherwise, create a new object.\n• Let be the global object of 's Realm component. This is the or object created in the previous step.\n• None Set up a worker environment settings object with , , and , and let be the result.\n• None Set 's name to the value of 's member.\n• If is true, then:\n• None Set 's type to the value of 's member.\n• None Set 's credentials to the value of 's member.\n• None Let be \" \" if is true, and \" \" otherwise.\n• Obtain by switching on the value of 's member: Fetch a classic worker script given , , , , and with and as defined below. Fetch a module worker script graph given , , , the value of the member of , , and with and as defined below. In both cases, let be the following perform the fetch hook given , isTopLevel and processCustomFetchResponse:\n• None If is false, fetch with processResponseConsumeBody set to , and abort these steps.\n• Fetch with processResponseConsumeBody set to the following steps given response and null, failure, or a byte sequence :\n• None If the Run CSP initialization for a global object algorithm returns \" \" when executed upon , set to a network error. [CSP]\n• If 's embedder policy's value is compatible with cross-origin isolation and is true, then set 's agent cluster's cross-origin isolation mode to \" \" or \" \". The one chosen is implementation-defined. This really ought to be set when the agent cluster is created, which requires a redesign of this section.\n• None If the result of checking a global object's embedder policy with , , and is false, then set to a network error.\n• None Set 's cross-origin isolated capability to true if 's agent cluster's cross-origin isolation mode is \" \".\n• None If is false and 's cross-origin isolated capability is false, then set 's cross-origin isolated capability to false.\n• If is false and 's url's scheme is \" \", then set 's cross-origin isolated capability to false. This is a conservative default for now, while we figure out how workers in general, and URL workers in particular (which are cross-origin from their owner), will be treated in the context of permissions policies. See w3c/webappsec-permissions-policy issue #207 for more details. In both cases, let given be the following steps:\n• None If is null or if 's error to rethrow is non-null, then:\n• None Queue a global task on the DOM manipulation task source given 's relevant global object to fire an event named at .\n• None Let be a new object in 's realm.\n• If is false, then:\n• None Create a new object and associate it with .\n• Closing orphan workers: Start monitoring the worker such that no sooner than it stops being a protected worker, and no later than it stops being a permissible worker, 's closing flag is set to true.\n• Suspending workers: Start monitoring the worker, such that whenever 's closing flag is false and the worker is a suspendable worker, the user agent suspends execution of script in that worker until such time as either the closing flag switches to true or the worker stops being a suspendable worker.\n• If is a classic script, then run the classic script . Otherwise, it is a module script; run the module script . In addition to the usual possibilities of returning a value or failing due to an exception, this could be prematurely aborted by the terminate a worker algorithm defined below.\n• None If is false, enable the port message queue of the worker's implicit port.\n• None If is true, then queue a global task on DOM manipulation task source given to fire an event named at , using , with the attribute initialized to the empty string, the attribute initialized to a new frozen array containing , and the attribute initialized to .\n• None Enable the client message queue of the object whose associated service worker client is 's relevant settings object.\n• Event loop: Run the responsible event loop specified by until it is destroyed. The handling of events or the execution of callbacks by tasks run by the event loop might get prematurely aborted by the terminate a worker algorithm defined below. The worker processing model remains on this step until the event loop is destroyed, which happens after the closing flag is set to true, as described in the event loop processing model.\n• Disentangle all the ports in the list of the worker's ports.\n\nWhen a user agent is to , it must run the following steps in parallel with the worker's main loop (the \"run a worker\" processing model defined above):\n• None If there are any tasks queued in the object's relevant agent's event loop's task queues, discard them without processing them.\n• None Abort the script currently running in the worker.\n• None If the worker's object is actually a object (i.e. the worker is a dedicated worker), then empty the port message queue of the port that the worker's implicit port is entangled with.\n\nUser agents may invoke the terminate a worker algorithm when a worker stops being an active needed worker and the worker continues executing even after its closing flag was set to true.\n\nWhenever an uncaught runtime script error occurs in one of the worker's scripts, if the error did not occur while handling a previous script error, the user agent will report it for the worker's object.\n\nThe following are the event handlers (and their corresponding event handler event types) that must be supported, as event handler IDL attributes, by objects implementing the interface:\n\nTo , given a JavaScript execution context , an environment settings object , and a number :\n• None Let be the value of 's Realm component.\n• Let be a new environment settings object whose algorithms are defined as follows: Return a unique opaque origin if 's url's scheme is \" \", and otherwise. Return the result of coarsening with 's cross-origin isolated capability.\n• None Set 's id to a new unique opaque string, creation URL to 's url, top-level creation URL to null, target browsing context to null, and active service worker to null.\n• None If is a object, then set 's top-level origin to 's top-level origin.\n• Otherwise, set 's top-level origin to an implementation-defined value. See Client-Side Storage Partitioning for the latest on properly defining this.\n\nEach object has an associated (a ). This port is part of a channel that is set up when the worker is created, but it is not exposed. This object must never be garbage collected before the object.\n\nThe method, when invoked, must cause the terminate a worker algorithm to be run on the worker with which the object is associated.\n\nThe and methods on objects act as if, when invoked, they immediately invoked the respective and on this's outside port, with the same arguments, and returned the same return value.\n\nWhen the constructor is invoked, the user agent must run the following steps:\n• None Let be the result of invoking the Get Trusted Type compliant string algorithm with , this's relevant global object, , \" \", and \" \".\n• None Let be the current settings object.\n• Let be the result of encoding-parsing a URL given , relative to . Any same-origin URL (including URLs) can be used. URLs can also be used, but they create a worker with an opaque origin.\n• None If is failure, then throw a \" \" .\n• None Let be a new object.\n• None Let be a new in 's realm.\n\nThe attribute must return the value it was assigned by the object's constructor. It represents the for communicating with the shared worker.\n\nA user agent has an associated which is the result of starting a new parallel queue.\n\nEach user agent has a single shared worker manager for simplicity. Implementations could use one per origin; that would not be observably different and enables more concurrency.\n\nWhen the constructor is invoked:\n• None Let be the result of invoking the Get Trusted Type compliant string algorithm with , this's relevant global object, , \" \", and \" \".\n• None If is a , set to a new dictionary whose member is set to the value of and whose other members are set to their default values.\n• None Let be the current settings object.\n• Let be the result of encoding-parsing a URL given , relative to . Any same-origin URL (including URLs) can be used. URLs can also be used, but they create a worker with an opaque origin.\n• None If is failure, then throw a \" \" .\n• None Let be a new object.\n• None Let be a new in 's realm.\n• None Assign to the attribute of .\n• None Let be true if is a secure context; otherwise, false.\n• None Let be the result of running obtain a storage key for non-storage purposes given .\n• Enqueue the following steps to the shared worker manager:\n• For each in the list of all objects:\n• None Let be the result of running obtain a storage key for non-storage purposes given 's relevant settings object.\n• If all of the following are true:\n• 's name equals the value of 's member, URLs create a worker with an opaque origin. Both the constructor origin and constructor url are compared so the same URL can be used within an origin to get to the same object, but cannot be used to bypass the same origin restriction.\n• If is not null, but the user agent has been configured to disallow communication between the worker represented by the and the scripts whose settings object is , then set to null. For example, a user agent could have a development mode that isolates a particular top-level traversable from all other pages, and scripts in that development mode could be blocked from connecting to shared workers running in the normal browser mode.\n• None If is not null, then check if 's type and credentials match the values. If not, queue a task to fire an event named and abort these steps.\n• If is not null, then run these subsubsteps:\n• None Let be the relevant settings object for .\n• None Let be true if is a secure context; otherwise, false.\n• None If is not , then queue a task to fire an event named at and abort these steps. [SECURE-CONTEXTS]\n• None Let be a new in 's realm.\n• None Queue a task, using the DOM manipulation task source, to fire an event named at , using , with the attribute initialized to the empty string, the attribute initialized to a new frozen array containing only , and the attribute initialized to .\n• None Append the relevant owner to add given to 's owner set.\n• None Otherwise, in parallel, run a worker given , , , , and .\n\nThe attribute's getter must return a number between 1 and the number of logical processors potentially available to the user agent. If this cannot be determined, the getter must return 1.\n\nUser agents should err toward exposing the number of logical processors available, using lower values only in cases where there are user-agent specific limits in place (such as a limitation on the number of workers that can be created) or when the user agent desires to limit fingerprinting possibilities.\n• For each of :\n• None Append the result of invoking the Get Trusted Type compliant string algorithm with , this's relevant global object, , \" \", and \" \" to .\n• None Import scripts into worker global scope given this and .\n\nTo , given a object , a list of scalar value strings , and an optional perform the fetch hook :\n• None Let be the current settings object.\n• For each of :\n• None Let be the result of encoding-parsing a URL given , relative to .\n• None If is failure, then throw a \" \" .\n• For each of :\n• None Fetch a classic worker-imported script given and , passing along if provided. If this succeeds, let be the result. Otherwise, rethrow the exception.\n• Run the classic script , with the rethrow errors argument set to true. will run until it either returns, fails to parse, fails to catch an exception, or gets prematurely aborted by the terminate a worker algorithm defined above. If an exception was thrown or if the script was prematurely aborted, then abort all these steps, letting the exception or aborting continue to be processed by the calling script.\n\nis an example of a specification that runs this algorithm with its own perform the fetch hook. [SW]\n\nThe attribute of the interface must return an instance of the interface, which represents the identity and state of the user agent (the client):\n\nA object has an associated (a object).\n\nThe getter steps are to return this's object's url, serialized.\n\nThe getter steps are to return the serialization of this's object's url's origin.\n\nThe getter steps are to return this's object's url's scheme, followed by \" \".\n• None If 's host is null, return the empty string.\n• None Return 's host, serialized, followed by \" \" and 's port, serialized.\n• None If is null, return the empty string.\n• None If is null, return the empty string.\n\nThe getter steps are to return the result of URL path serializing this's object's url.\n• None If is either null or the empty string, return the empty string.\n• None If is either null or the empty string, return the empty string.\n\nWorklets are a piece of specification infrastructure which can be used for running scripts independent of the main JavaScript execution environment, while not requiring any particular implementation model.\n\nThe worklet infrastructure specified here cannot be used directly by web developers. Instead, other specifications build upon it to create directly-usable worklet types, specialized for running in particular parts of the browser implementation pipeline.\n\nAllowing extension points to rendering, or other sensitive parts of the implementation pipeline such as audio output, is difficult. If extension points were done with full access to the APIs available on , engines would need to abandon previously-held assumptions for what could happen in the middle of those phases. For example, during the layout phase, rendering engines assume that no DOM will be modified.\n\nAdditionally, defining extension points in the environment would restrict user agents to performing work in the same thread as the object. (Unless implementations added complex, high-overhead infrastructure to allow thread-safe APIs, as well as thread-joining guarantees.)\n\nWorklets are designed to allow extension points, while keeping guarantees that user agents currently rely on. This is done through new global environments, based on subclasses of .\n\nWorklets are similar to web workers. However, they:\n• None Are thread-agnostic. That is, they are not designed to run on a dedicated separate thread, like each worker is. Implementations can run worklets wherever they choose (including on the main thread).\n• None Are able to have multiple duplicate instances of the global scope created, for the purpose of parallelism.\n• None Do not use an event-based API. Instead, classes are registered on the global scope, whose methods are invoked by the user agent.\n• None Have a reduced API surface on the global scope.\n• None Have a lifetime for their global object which is defined by other specifications, often in an implementation-defined manner.\n\nAs worklets have relatively high overhead, they are best used sparingly. Due to this, a given is expected to be shared between multiple separate scripts. (This is similar to how a single is shared between multiple separate scripts.)\n\nWorklets are a general technology that serve different use cases. Some worklets, such as those defined in , provide extension points intended for stateless, idempotent, and short-running computations, which have special considerations as described in the next couple of sections. Others, such as those defined in , are used for stateful, long-running operations. [CSSPAINT] [WEBAUDIO]\n\nSome specifications which use worklets are intended to allow user agents to parallelize work over multiple threads, or to move work between threads as required. In these specifications, user agents might invoke methods on a web-developer-provided class in an implementation-defined order.\n\nAs a result of this, to prevent interoperability issues, authors who register classes on such s should make their code idempotent. That is, a method or set of methods on the class should produce the same output given a particular input.\n\nThis specification uses the following techniques in order to encourage authors to write code in an idempotent way:\n• No reference to the global object is available (i.e., there is no counterpart to on ). Although this was the intention when worklets were first specified, the introduction of has made it no longer true. See issue #6059 for more discussion.\n• None Code is loaded as a module script, which results in the code being executed in strict mode and with no shared referencing the global proxy.\n\nTogether, these restrictions help prevent two different scripts from sharing state using properties of the global object.\n\nAdditionally, specifications which use worklets and intend to allow implementation-defined behavior must obey the following:\n• None They must require user agents to always have at least two instances per , and randomly assign a method or set of methods on a class to a particular instance. These specifications may provide an opt-out under memory constraints.\n• None These specifications must allow user agents to create and destroy instances of their subclasses at any time.\n\nSome specifications which use worklets can invoke methods on a web-developer-provided class based on the state of the user agent. To increase concurrency between threads, a user agent may invoke a method speculatively, based on potential future states.\n\nIn these specifications, user agents might invoke such methods at any time, and with any arguments, not just ones corresponding to the current state of the user agent. The results of such speculative evaluations are not displayed immediately, but can be cached for use if the user agent state matches the speculated state. This can increase the concurrency between the user agent and worklet threads.\n\nAs a result of this, to prevent interoperability risks between user agents, authors who register classes on such s should make their code stateless. That is, the only effect of invoking a method should be its result, and not any side effects such as updating mutable state.\n\nThe same techniques which encourage code idempotence also encourage authors to write stateless code.\n\nSubclasses of are used to create global objects wherein code loaded into a particular can execute.\n\nOther specifications are intended to subclass , adding APIs to register a class, as well as other APIs specific for their worklet type.\n\nEach has an associated . It is a module map, initially empty.\n\nEach is contained in its own worklet agent, which has its corresponding event loop. However, in practice, implementation of these agents and event loops is expected to be different from most others.\n\nA worklet agent exists for each since, in theory, an implementation could use a separate thread for each instance, and allowing this level of parallelism is best done using agents. However, because their [[CanBlock]] value is false, there is no requirement that agents and threads are one-to-one. This allows implementations the freedom to execute scripts loaded into a worklet on any thread, including one running code from other agents with [[CanBlock]] of false, such as the thread of a similar-origin window agent (\"the main thread\"). Contrast this with dedicated worker agents, whose true value for [[CanBlock]] effectively requires them to get a dedicated operating system thread.\n\nWorklet event loops are also somewhat special. They are only used for tasks associated with , tasks wherein the user agent invokes author-defined methods, and microtasks. Thus, even though the event loop processing model specifies that all event loops run continuously, implementations can achieve observably-equivalent results using a simpler strategy, which just invokes author-provided methods and then relies on that process to perform a microtask checkpoint.\n• None Let be the result of obtaining a worklet agent given . Run the rest of these steps in that agent.\n• Let be the result of creating a new realm given and the following customizations:\n• None For the global object, create a new object of the type given by 's worklet global scope type.\n• None Let be the global object of 's Realm component.\n• None Let be the result of setting up a worklet environment settings object given and .\n• None Let be a clone of 's added modules list.\n• Let be the following steps:\n• If is not empty, then:\n• None Let be the result of dequeueing from .\n• Fetch a worklet script graph given , , 's worklet destination type, what credentials mode?, , 's module responses map, and with the following steps given : This will not actually perform a network request, as it will just reuse responses from 's module responses map. The main purpose of this step is to create a new -specific module script from the response.\n• None Assert: is not null, since the fetch succeeded and the source text was successfully parsed when 's module responses map was initially populated with .\n• None Run the responsible event loop specified by .\n• None If there are any tasks queued in 's task queues, discard them without processing them.\n• None Wait for to complete the currently running task.\n• None If the previous step doesn't complete within an implementation-defined period of time, then abort the script currently running in the worklet.\n• None Remove from the global scopes of the whose global scopes contains .\n• None Remove from the worklet global scopes of the whose worklet global scopes contains .\n\nTo , given a JavaScript execution context and an environment settings object :\n• None Let be a clone of 's policy container.\n• None Let be the value of 's Realm component.\n• Let be a new environment settings object whose algorithms are defined as follows: Unlike workers or other globals derived from a single resource, worklets have no primary resource; instead, multiple scripts, each with their own URL, are loaded into the global scope via . So this API base URL is rather unlike that of other globals. However, so far this doesn't matter, as no APIs available to worklet code make use of the API base URL. Assert: this algorithm is never called, because the time origin is not available in a worklet context.\n• None Set 's id to a new unique opaque string, creation URL to , top-level creation URL to null, top-level origin to 's top-level origin, target browsing context to null, and active service worker to null.\n\nThe class provides the capability to add module scripts into its associated s. The user agent can then create classes registered on the s and invoke their methods.\n\nSpecifications that create instances must specify the following for a given instance:\n• None its , which must be a Web IDL type that inherits from ; and\n• None its , which must be a destination, and is used when fetching scripts.\n\nA has a list of , which contains instances of the 's worklet global scope type. It is initially empty.\n\nA has an , which is a list of URLs, initially empty. Access to this list should be thread-safe.\n\nA has a , which is an ordered map from URLs to either \" \" or tuples consisting of a response and either null, failure, or a byte sequence representing the response body. This map is initially empty, and access to it should be thread-safe.\n• None Let be the relevant settings object of this.\n• None Let be the result of encoding-parsing a URL given , relative to .\n• None If is failure, then return a promise rejected with a \" \" .\n• None Let be a new promise.\n• None Let be this.\n• Run the following steps in parallel:\n• If 's global scopes is empty, then:\n• None Optionally, create additional global scope instances given , depending on the specific worklet in question and its specification.\n• None Wait for all steps of the creation process(es) — including those taking place within the worklet agents — to complete, before moving on.\n• For each of 's global scopes, queue a global task on the networking task source given to fetch a worklet script graph given , , 's worklet destination type, [\" \"], 's relevant settings object, 's module responses map, and the following steps given : Only the first of these fetches will actually perform a network request; the ones for other s will reuse responses from 's module responses map.\n• If is null, then:\n• Queue a global task on the networking task source given 's relevant global object to perform the following steps:\n• If is not −1, then:\n• If 's error to rethrow is not null, then:\n• Queue a global task on the networking task source given 's relevant global object to perform the following steps:\n• If is not −1, then:\n• If is false, then:\n• Queue a global task on the networking task source given 's relevant global object to perform the following steps:\n• If is not −1, then:\n• None If is 0, then resolve .\n\nThe lifetime of a has no special considerations; it is tied to the object it belongs to, such as the .\n\nEach has a , which is a set of s, initially empty.\n\nThe lifetime of a is, at a minimum, tied to the whose worklet global scopes contain it. In particular, destroying the will terminate the corresponding and allow it to be garbage-collected.\n\nAdditionally, user agents may, at any time, terminate a given , unless the specification defining the corresponding worklet type says otherwise. For example, they might terminate them if the worklet agent's event loop has no tasks queued, or if the user agent has no pending operations planning to make use of the worklet, or if the user agent detects abnormal operations such as infinite loops or callbacks exceeding imposed time limits.\n\nFinally, specifications for specific worklet types can give more specific details on when to create s for a given worklet type. For example, they might create them during specific processes that call upon worklet code, as in the example.\n\nThis specification introduces two related mechanisms, similar to HTTP session cookies, for storing name-value pairs on the client side. [COOKIES]\n\nThe first is designed for scenarios where the user is carrying out a single transaction, but could be carrying out multiple transactions in different windows at the same time.\n\nCookies don't really handle this case well. For example, a user could be buying plane tickets in two different windows, using the same site. If the site used cookies to keep track of which ticket the user was buying, then as the user clicked from page to page in both windows, the ticket currently being purchased would \"leak\" from one window to the other, potentially causing the user to buy two tickets for the same flight without noticing.\n\nTo address this, this specification introduces the getter. Sites can add data to the session storage, and it will be accessible to any page from the same site opened in that window.\n\nThe second storage mechanism is designed for storage that spans multiple windows, and lasts beyond the current session. In particular, web applications might wish to store megabytes of user data, such as entire user-authored documents or a user's mailbox, on the client side for performance reasons.\n\nAgain, cookies do not handle this case well, because they are transmitted with every request.\n\nThe getter is used to access a page's local storage area.\n\nEach site has its own separate storage area.\n\nThe getter provides access to shared state. This specification does not define the interaction with other agent clusters in a multiprocess user agent, and authors are encouraged to assume that there is no locking mechanism. A site could, for instance, try to read the value of a key, increment its value, then write it back out, using the new value as a unique identifier for the session; if the site does this twice in two different browser windows at the same time, it might end up using the same \"unique\" identifier for both sessions, with potentially disastrous effects.\n\nA object has an associated:\n\nTo a object , reorder 's map's entries in an implementation-defined manner.\n\nUnfortunate as it is, iteration order is not defined and can change upon most mutations.\n\nTo a object , given a , , and , run these steps:\n• None Let be 's relevant global object's associated .\n• None Let be the serialization of 's URL.\n• Let be all objects excluding whose:\n• relevant settings object's origin is same origin with 's relevant settings object's origin. and, if type is \" \", whose relevant settings object's associated 's node navigable's traversable navigable is 's node navigable's traversable navigable.\n• For each of : queue a global task on the DOM manipulation task source given 's relevant global object to fire an event named at 's relevant global object, using , with initialized to , initialized to , initialized to , initialized to , and initialized to . The object associated with the resulting task is not necessarily fully active, but events fired on such objects are ignored by the event loop until the becomes fully active again.\n\nThe getter steps are to return this's map's size.\n• None If is greater than or equal to this's map's size, then return null.\n• None Let be the result of running get the keys on this's map.\n\nThe supported property names on a object are the result of running get the keys on 's map.\n• None If this's map[ ] does not exist, then return null.\n• \n• None If is , then return.\n• None If cannot be stored, then throw a \" \" exception.\n• None If is true, then reorder this.\n• None Broadcast this with , , and .\n• None If this's map[ ] does not exist, then return.\n• None Broadcast this with , , and null.\n• None Broadcast this with null, null, and null.\n\nA object has an associated , which is null or a object. It is initially null.\n• None If this's associated 's session storage holder is non-null, then return this's associated 's session storage holder.\n• None Let be the result of running obtain a session storage bottle map with this's relevant settings object and \" \".\n• None If is failure, then throw a \" \" .\n• None Let be a new object whose map is .\n\nAfter creating a new auxiliary browsing context and document, the session storage is copied over.\n\nA object has an associated , which is null or a object. It is initially null.\n• None If this's associated 's local storage holder is non-null, then return this's associated 's local storage holder.\n• None Let be the result of running obtain a local storage bottle map with this's relevant settings object and \" \".\n• None If is failure, then throw a \" \" .\n• None Let be a new object whose map is .\n\nThe , , , , and attributes must return the values they were initialized to.\n\nThe method must initialize the event in a manner analogous to the similarly-named method. [DOM]\n\nA third-party advertiser (or any entity capable of getting content distributed to multiple sites) could use a unique identifier stored in its local storage area to track a user across multiple sessions, building a profile of the user's interests to allow for highly targeted advertising. In conjunction with a site that is aware of the user's real identity (for example an e-commerce site that requires authenticated credentials), this could allow oppressive groups to target individuals with greater accuracy than in a world with purely anonymous web usage.\n\nThere are a number of techniques that can be used to mitigate the risk of user tracking:\n\nWhile these suggestions prevent trivial use of this API for user tracking, they do not block it altogether. Within a single domain, a site can continue to track the user during a session, and can then pass all this information to the third party along with any identifying information (names, credit card numbers, addresses) obtained by the site. If a third party cooperates with multiple sites to obtain such information, a profile can still be created.\n\nHowever, user tracking is to some extent possible even with no cooperation from the user agent whatsoever, for instance by using session identifiers in URLs, a technique already commonly used for innocuous purposes but easily repurposed for user tracking (even retroactively). This information can then be shared with other sites, using visitors' IP addresses and other user-specific data (e.g. user-agent headers and configuration settings) to combine separate sessions into coherent user profiles.\n\nUser agents should treat persistently stored data as potentially sensitive; it's quite possible for emails, calendar appointments, health records, or other confidential documents to be stored in this mechanism.\n\nTo this end, user agents should ensure that when deleting data, it is promptly deleted from the underlying storage.\n\nBecause of the potential for DNS spoofing attacks, one cannot guarantee that a host claiming to be in a certain domain really is from that domain. To mitigate this, pages can use TLS. Pages using TLS can be sure that only the user, software working on behalf of the user, and other pages using TLS that have certificates identifying them as being from the same domain, can access their storage areas.\n\nDifferent authors sharing one host name, for example users hosting content on the now defunct , all share one local storage object. There is no feature to restrict the access by pathname. Authors on shared hosts are therefore urged to avoid using these features, as it would be trivial for other authors to read the data and overwrite it.\n\nEven if a path-restriction feature was made available, the usual DOM scripting security model would make it trivial to bypass this protection and access the data from any path.\n\nThe two primary risks when implementing these persistent storage features are letting hostile sites read information from other domains, and letting hostile sites write information that is then read from other domains.\n\nLetting third-party sites read data that is not supposed to be read from their domain causes information leakage. For example, a user's shopping wishlist on one domain could be used by another domain for targeted advertising; or a user's work-in-progress confidential documents stored by a word-processing site could be examined by the site of a competing company.\n\nLetting third-party sites write data to the persistent storage of other domains can result in information spoofing, which is equally dangerous. For example, a hostile site could add items to a user's wishlist; or a hostile site could set a user's session identifier to a known ID that the hostile site can then use to track the user's actions on the victim site.\n\nThus, strictly following the origin model described in this specification is important for user security.\n\nThis section only describes the rules for resources labeled with an HTML MIME type. Rules for XML resources are discussed in the section below entitled \"The XML syntax\".\n\nThis section only applies to documents, authoring tools, and markup generators. In particular, it does not apply to conformance checkers; conformance checkers must use the requirements given in the next section (\"parsing HTML documents\").\n\nDocuments must consist of the following parts, in the given order:\n• Any number of and ASCII whitespace.\n• Any number of and ASCII whitespace.\n• The document element, in the form of an element.\n• Any number of and ASCII whitespace.\n\nThe various types of content mentioned above are described in the next few sections.\n\nIn addition, there are some restrictions on how character encoding declarations are to be serialized, as discussed in the section on that topic.\n\nMany strings in the HTML syntax (e.g. the names of elements and their attributes) are case-insensitive, but only for ASCII upper alphas and ASCII lower alphas. For convenience, in this section this is just referred to as \"case-insensitive\".\n\nDOCTYPEs are required for legacy reasons. When omitted, browsers tend to use a different rendering mode that is incompatible with some specifications. Including the DOCTYPE in a document ensures that the browser makes a best-effort attempt at following the relevant specifications.\n\nA DOCTYPE must consist of the following components, in this order:\n• A string that is an ASCII case-insensitive match for the string \" \".\n• One or more ASCII whitespace.\n• A string that is an ASCII case-insensitive match for the string \" \".\n• Zero or more ASCII whitespace.\n\nFor the purposes of HTML generators that cannot output HTML markup with the short DOCTYPE \" \", a may be inserted into the DOCTYPE (in the position defined above). This string must consist of:\n• One or more ASCII whitespace.\n• A string that is an ASCII case-insensitive match for the string \" \".\n• One or more ASCII whitespace.\n• A U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (the quote mark).\n• A matching U+0022 QUOTATION MARK or U+0027 APOSTROPHE character (i.e. the same character as in the earlier step labeled quote mark).\n\nIn other words, or , case-insensitively except for the part in single or double quotes.\n\nThe DOCTYPE legacy string should not be used unless the document is generated from a system that cannot output the shorter string.\n\nThere are six different kinds of : void elements, the element, raw text elements, escapable raw text elements, foreign elements, and normal elements.\n\nare used to delimit the start and end of elements in the markup. Raw text, escapable raw text, and normal elements have a start tag to indicate where they begin, and an end tag to indicate where they end. The start and end tags of certain normal elements can be omitted, as described below in the section on optional tags. Those that cannot be omitted must not be omitted. Void elements only have a start tag; end tags must not be specified for void elements. Foreign elements must either have a start tag and an end tag, or a start tag that is marked as self-closing, in which case they must not have an end tag.\n\nThe contents of the element must be placed between just after the start tag (which might be implied, in certain cases) and just before the end tag (which again, might be implied in certain cases). The exact allowed contents of each individual element depend on the content model of that element, as described earlier in this specification. Elements must not contain content that their content model disallows. In addition to the restrictions placed on the contents by those content models, however, the five types of elements have additional syntactic requirements.\n\nVoid elements can't have any contents (since there's no end tag, no content can be put between the start tag and the end tag).\n\nThe element can have template contents, but such template contents are not children of the element itself. Instead, they are stored in a associated with a different — without a browsing context — so as to avoid the contents interfering with the main . The markup for the template contents of a element is placed just after the element's start tag and just before element's end tag (as with other elements), and may consist of any text, character references, elements, and , but the text must not contain the character U+003C LESS-THAN SIGN (<) or an ambiguous ampersand.\n\nRaw text elements can have text, though it has restrictions described below.\n\nEscapable raw text elements can have text and character references, but the text must not contain an ambiguous ampersand. There are also further restrictions described below.\n\nForeign elements whose start tag is marked as self-closing can't have any contents (since, again, as there's no end tag, no content can be put between the start tag and the end tag). Foreign elements whose start tag is not marked as self-closing can have text, character references, CDATA sections, other elements, and , but the text must not contain the character U+003C LESS-THAN SIGN (<) or an ambiguous ampersand.\n\nNormal elements can have text, character references, other elements, and , but the text must not contain the character U+003C LESS-THAN SIGN (<) or an ambiguous ampersand. Some normal elements also have yet more restrictions on what content they are allowed to hold, beyond the restrictions imposed by the content model and those described in this paragraph. Those restrictions are described below.\n\nTags contain a , giving the element's name. HTML elements all have names that only use ASCII alphanumerics. In the HTML syntax, tag names, even those for foreign elements, may be written with any mix of lower- and uppercase letters that, when converted to all-lowercase, matches the element's tag name; tag names are case-insensitive.\n\nmust have the following format:\n• The first character of a start tag must be a U+003C LESS-THAN SIGN character (<).\n• The next few characters of a start tag must be the element's .\n• If there are to be any attributes in the next step, there must first be one or more .\n• Then, the start tag may have a number of attributes, the is described below. Attributes must be separated from each other by one or more .\n• After the attributes, or after the if there are no attributes, there may be one or more . (Some attributes are required to be followed by a space. See the below.)\n• Then, if the element is one of the , or if the element is a , then there may be a single U+002F SOLIDUS character (/), which on marks the start tag as self-closing. On , it does not mark the start tag as self-closing but instead is unnecessary and has no effect of any kind. For such void elements, it should be used only with caution — especially since, if directly preceded by an unquoted attribute value, it becomes part of the attribute value rather than being discarded by the parser.\n• Finally, start tags must be closed by a U+003E GREATER-THAN SIGN character (>).\n\nmust have the following format:\n• The first character of an end tag must be a U+003C LESS-THAN SIGN character (<).\n• The second character of an end tag must be a U+002F SOLIDUS character (/).\n• The next few characters of an end tag must be the element's .\n• After the tag name, there may be one or more .\n• Finally, end tags must be closed by a U+003E GREATER-THAN SIGN character (>).\n\nfor an element are expressed inside the element's start tag.\n\nAttributes have a name and a value. must consist of one or more characters other than controls, U+0020 SPACE, U+0022 (\"), U+0027 ('), U+003E (>), U+002F (/), U+003D (=), and noncharacters. In the HTML syntax, attribute names, even those for foreign elements, may be written with any mix of ASCII lower and ASCII upper alphas.\n\nare a mixture of text and character references, except with the additional restriction that the text cannot contain an ambiguous ampersand.\n\nAttributes can be specified in four different ways:\n\nThere must never be two or more attributes on the same start tag whose names are an ASCII case-insensitive match for each other.\n\nWhen a foreign element has one of the namespaced attributes given by the local name and namespace of the first and second cells of a row from the following table, it must be written using the name given by the third cell from the same row.\n\nNo other namespaced attribute can be expressed in the HTML syntax.\n\nWhether the attributes in the table above are conforming or not is defined by other specifications (e.g. and ); this section only describes the syntax rules if the attributes are serialized using the HTML syntax.\n\nCertain tags can be .\n\nOmitting an element's in the situations described below does not mean the element is not present; it is implied, but it is still there. For example, an HTML document always has a root element, even if the string doesn't appear anywhere in the markup.\n\nAn element's may be omitted if the first thing inside the element is not a .\n\nAn element's may be omitted if the element is not immediately followed by a .\n\nA element's may be omitted if the element is empty, or if the first thing inside the element is an element.\n\nA element's may be omitted if the element is not immediately followed by or a .\n\nA element's may be omitted if the element is empty, or if the first thing inside the element is not or a , except if the first thing inside the element is a , , , , , or element.\n\nA element's may be omitted if the element is not immediately followed by a .\n\nAn element's may be omitted if the element is immediately followed by another element or if there is no more content in the parent element.\n\nA element's may be omitted if the element is immediately followed by another element or a element.\n\nA element's may be omitted if the element is immediately followed by another element or a element, or if there is no more content in the parent element.\n\nA element's may be omitted if the element is immediately followed by an , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , or element, or if there is no more content in the parent element and the parent element is an that is not an , , , , , , or element, or an .\n\nAn element's may be omitted if the element is immediately followed by an or element, or if there is no more content in the parent element.\n\nAn element's may be omitted if the element is immediately followed by an or element, or if there is no more content in the parent element.\n\nAn element's may be omitted if the element is immediately followed by another element, if it is immediately followed by an element, or if there is no more content in the parent element.\n\nAn element's may be omitted if the element is immediately followed by another element, if it is immediately followed by an element, if it is immediately followed by an element, or if there is no more content in the parent element.\n\nA element's may be omitted if the first thing inside the element is a element, and if the element is not immediately preceded by another element whose has been omitted. (It can't be omitted if the element is empty.)\n\nA element's may be omitted if the element is not immediately followed by or a .\n\nA element's may be omitted if the element is not immediately followed by or a .\n\nA element's may be omitted if the element is immediately followed by a or element.\n\nA element's may be omitted if the first thing inside the element is a element, and if the element is not immediately preceded by a , , or element whose has been omitted. (It can't be omitted if the element is empty.)\n\nA element's may be omitted if the element is immediately followed by a or element, or if there is no more content in the parent element.\n\nA element's may be omitted if there is no more content in the parent element.\n\nA element's may be omitted if the element is immediately followed by another element, or if there is no more content in the parent element.\n\nA element's may be omitted if the element is immediately followed by a or element, or if there is no more content in the parent element.\n\nA element's may be omitted if the element is immediately followed by a or element, or if there is no more content in the parent element.\n\nHowever, a must never be omitted if it has any attributes.\n\nThis section assumes that the document is conforming, in particular, that there are no violations. Omitting tags in the fashion described in this section in a document that does not conform to the described in this specification is likely to result in unexpected DOM differences (this is, in part, what the content models are designed to avoid).\n\nFor historical reasons, certain elements have extra restrictions beyond even the restrictions given by their content model.\n\nA element must not contain elements, even though these elements are technically allowed inside elements according to the content models described in this specification. (If a element is put inside a in the markup, it will in fact imply a start tag before it.)\n\nA single newline may be placed immediately after the start tag of and elements. This does not affect the processing of the element. The otherwise optional newline must be included if the element's contents themselves start with a newline (because otherwise the leading newline in the contents would be treated like the optional newline, and ignored).\n\nRestrictions on the contents of raw text and escapable raw text elements\n\nThe text in raw text and escapable raw text elements must not contain any occurrences of the string \" \" (U+003C LESS-THAN SIGN, U+002F SOLIDUS) followed by characters that case-insensitively match the tag name of the element followed by one of U+0009 CHARACTER TABULATION (tab), U+000A LINE FEED (LF), U+000C FORM FEED (FF), U+000D CARRIAGE RETURN (CR), U+0020 SPACE, U+003E GREATER-THAN SIGN (>), or U+002F SOLIDUS (/).\n\nis allowed inside elements, attribute values, and comments. Extra constraints are placed on what is and what is not allowed in text based on where the text is to be put, as described in the other sections.\n\nin HTML may be represented either as U+000D CARRIAGE RETURN (CR) characters, U+000A LINE FEED (LF) characters, or pairs of U+000D CARRIAGE RETURN (CR), U+000A LINE FEED (LF) characters in that order.\n\nWhere character references are allowed, a character reference of a U+000A LINE FEED (LF) character (but not a U+000D CARRIAGE RETURN (CR) character) also represents a newline.\n\nIn certain cases described in other sections, text may be mixed with . These can be used to escape characters that couldn't otherwise legally be included in text.\n\nCharacter references must start with a U+0026 AMPERSAND character (&). Following this, there are three possible kinds of character references:\n\nThe numeric character reference forms described above are allowed to reference any code point excluding U+000D CR, noncharacters, and controls other than ASCII whitespace.\n\nAn is a U+0026 AMPERSAND character (&) that is followed by one or more ASCII alphanumerics, followed by a U+003B SEMICOLON character (;), where these characters do not match any of the names given in the named character references section.\n\nmust consist of the following components, in this order:\n• Optionally, text, with the additional restriction that the text must not contain the string \" \".\n\nmust have the following format:\n• Optionally, , with the additional restriction that the text must not start with the string \" \", nor start with the string \" \", nor contain the strings \" \", \" \", or \" \", nor end with the string \" \".\n\nThe is allowed to end with the string \" \", as in <!--My favorite operators are > and <!--> .\n\nThis section only applies to user agents, data mining tools, and conformance checkers.\n\nThe rules for parsing XML documents into DOM trees are covered by the next section, entitled \"The XML syntax\".\n\nUser agents must use the parsing rules described in this section to generate the DOM trees from resources. Together, these rules define what is referred to as the .\n\nFor the purposes of conformance checkers, if a resource is determined to be in the HTML syntax, then it is an HTML document.\n\nAs stated in the terminology section, references to element types that do not explicitly specify a namespace always refer to elements in the HTML namespace. For example, if the spec talks about \"a element\", then that is an element with the local name \" \", the namespace \" \", and the interface . Where possible, references to such elements are hyperlinked to their definition.\n\nThe input to the HTML parsing process consists of a stream of code points, which is passed through a tokenization stage followed by a tree construction stage. The output is a object.\n\nImplementations that do not support scripting do not have to actually create a DOM object, but the DOM tree in such cases is still used as the model for the rest of the specification.\n\nIn the common case, the data handled by the tokenization stage comes from the network, but it can also come from script running in the user agent, e.g. using the API.\n\nThere is only one set of states for the tokenizer stage and the tree construction stage, but the tree construction stage is reentrant, meaning that while the tree construction stage is handling one token, the tokenizer might be resumed, causing further tokens to be emitted and processed before the first token's processing is complete.\n\nTo handle these cases, parsers have a , which must be initially set to zero, and a , which must be initially set to false.\n\nThis specification defines the parsing rules for HTML documents, whether they are syntactically correct or not. Certain points in the parsing algorithm are said to be parse errors. The error handling for parse errors is well-defined (that's the processing rules described throughout this specification), but user agents, while parsing an HTML document, may abort the parser at the first parse error that they encounter for which they do not wish to apply the rules described in this specification.\n\nConformance checkers must report at least one parse error condition to the user if one or more parse error conditions exist in the document and must not report parse error conditions if none exist in the document. Conformance checkers may report more than one parse error condition if more than one parse error condition exists in the document.\n\nParse errors are only errors with the syntax of HTML. In addition to checking for parse errors, conformance checkers will also verify that the document obeys all the other conformance requirements described in this specification.\n\nSome parse errors have dedicated codes outlined in the table below that should be used by conformance checkers in reports.\n\nError descriptions in the table below are non-normative.\n\nThe stream of code points that comprises the input to the tokenization stage will be initially seen by the user agent as a stream of bytes (typically coming over the network or from the local file system). The bytes encode the actual characters according to a particular character encoding, which the user agent uses to decode the bytes into characters.\n\nFor XML documents, the algorithm user agents are required to use to determine the character encoding is given by . This section does not apply to XML documents. [XML]\n\nUsually, the encoding sniffing algorithm defined below is used to determine the character encoding.\n\nGiven a character encoding, the bytes in the input byte stream must be converted to characters for the tokenizer's input stream, by passing the input byte stream and character encoding to decode.\n\nA leading Byte Order Mark (BOM) causes the character encoding argument to be ignored and will itself be skipped.\n\nBytes or sequences of bytes in the original byte stream that did not conform to the Encoding standard (e.g. invalid UTF-8 byte sequences in a UTF-8 input byte stream) are errors that conformance checkers are expected to report. [ENCODING]\n\nThe decoder algorithms describe how to handle invalid input; for security reasons, it is imperative that those rules be followed precisely. Differences in how invalid byte sequences are handled can result in, amongst other problems, script injection vulnerabilities (\"XSS\").\n\nWhen the HTML parser is decoding an input byte stream, it uses a character encoding and a . The confidence is either tentative, certain, or irrelevant. The encoding used, and whether the confidence in that encoding is tentative or certain, is used during the parsing to determine whether to change the encoding. If no encoding is necessary, e.g. because the parser is operating on a Unicode stream and doesn't have to use a character encoding at all, then the confidence is irrelevant.\n\nSome algorithms feed the parser by directly adding characters to the input stream rather than adding bytes to the input byte stream.\n\nWhen the HTML parser is to operate on an input byte stream that has , then the character encoding is that encoding and the confidence is certain.\n\nIn some cases, it might be impractical to unambiguously determine the encoding before parsing the document. Because of this, this specification provides for a two-pass mechanism with an optional pre-scan. Implementations are allowed, as described below, to apply a simplified parsing algorithm to whatever bytes they have available before beginning to parse the document. Then, the real parser is started, using a tentative encoding derived from this pre-parse and other out-of-band metadata. If, while the document is being loaded, the user agent discovers a character encoding declaration that conflicts with this information, then the parser can get reinvoked to perform a parse of the document with the real encoding.\n\nUser agents must use the following algorithm, called the , to determine the character encoding to use when decoding a document in the first pass. This algorithm takes as input any out-of-band metadata available to the user agent (e.g. the Content-Type metadata of the document) and all the bytes available so far, and returns a character encoding and a confidence that is either tentative or certain.\n• If the result of BOM sniffing is an encoding, return that encoding with confidence certain. Although the decode algorithm will itself change the encoding to use based on the presence of a byte order mark, this algorithm sniffs the BOM as well in order to set the correct document's character encoding and confidence.\n• If the user has explicitly instructed the user agent to override the document's character encoding with a specific encoding, optionally return that encoding with the confidence certain. Typically, user agents remember such user requests across sessions, and in some cases apply them to documents in s as well.\n• The user agent may wait for more bytes of the resource to be available, either in this step or at any later step in this algorithm. For instance, a user agent might wait 500ms or 1024 bytes, whichever came first. In general preparsing the source to find the encoding improves performance, as it reduces the need to throw away the data structures used when parsing upon finding the encoding information. However, if the user agent delays too long to obtain data to determine the encoding, then the cost of the delay could outweigh any performance improvements from the preparse. The authoring conformance requirements for character encoding declarations limit them to only appearing in the first 1024 bytes. User agents are therefore encouraged to use the prescan algorithm below (as invoked by these steps) on the first 1024 bytes, but not to stall beyond that.\n• None If the transport layer specifies a character encoding, and it is supported, return that encoding with the confidence certain.\n• Optionally prescan the byte stream to determine its encoding, with the end condition being when the user agent decides that scanning further bytes would not be efficient. User agents are encouraged to only prescan the first 1024 bytes. User agents may decide that scanning any bytes is not efficient, in which case these substeps are entirely skipped. The aforementioned algorithm returns either a character encoding or failure. If it returns a character encoding, then return the same encoding, with confidence tentative.\n• If the HTML parser for which this algorithm is being run is associated with a whose container document is non-null, then:\n• None If 's origin is same origin with 's origin and 's character encoding is not UTF-16BE/LE, then return 's character encoding, with the confidence tentative.\n• None Otherwise, if the user agent has information on the likely encoding for this page, e.g. based on the encoding of the page when it was last visited, then return that encoding, with the confidence tentative.\n• The user agent may attempt to autodetect the character encoding from applying frequency analysis or other algorithms to the data stream. Such algorithms may use information about the resource other than the resource's contents, including the address of the resource. If autodetection succeeds in determining a character encoding, and that encoding is a supported encoding, then return that encoding, with the confidence tentative. [UNIVCHARDET] User agents are generally discouraged from attempting to autodetect encodings for resources obtained over the network, since doing so involves inherently non-interoperable heuristics. Attempting to detect encodings based on an HTML document's preamble is especially tricky since HTML markup typically uses only ASCII characters, and HTML documents tend to begin with a lot of markup rather than with text content. The UTF-8 encoding has a highly detectable bit pattern. Files from the local file system that contain bytes with values greater than 0x7F which match the UTF-8 pattern are very likely to be UTF-8, while documents with byte sequences that do not match it are very likely not. When a user agent can examine the whole file, rather than just the preamble, detecting for UTF-8 specifically can be especially effective. [PPUTF8] [UTF8DET]\n• Otherwise, return an implementation-defined or user-specified default character encoding, with the confidence tentative. In controlled environments or in environments where the encoding of documents can be prescribed (for example, for user agents intended for dedicated use in new networks), the comprehensive encoding is suggested. In other environments, the default encoding is typically dependent on the user's locale (an approximation of the languages, and thus often encodings, of the pages that the user is likely to frequent). The following table gives suggested defaults based on the user's locale, for compatibility with legacy content. Locales are identified by BCP 47 language tags. [BCP47] [ENCODING] The contents of this table are derived from the intersection of Windows, Chrome, and Firefox defaults.\n\nThe document's character encoding must immediately be set to the value returned from this algorithm, at the same time as the user agent uses the returned value to select the decoder to use for the input byte stream.\n\nWhen an algorithm requires a user agent to , given some defined , then it must run the following steps. If at any point during these steps (including during instances of the get an attribute algorithm invoked by this one) the user agent either runs out of bytes (meaning the pointer created in the first step below goes beyond the end of the byte stream obtained so far) or reaches its , then abort the prescan a byte stream to determine its encoding algorithm and return the result get an XML encoding applied to the same bytes that the prescan a byte stream to determine its encoding algorithm was applied to. Otherwise, these steps will return a character encoding.\n• None Let be a pointer to a byte in the input byte stream, initially pointing at the first byte.\n• Prescan for UTF-16 XML declarations: If points to: For historical reasons, the prefix is two bytes longer than in Appendix F of and the encoding name is not checked.\n• Advance the pointer so that it points at the first 0x3E byte which is preceded by two 0x2D bytes (i.e. at the end of an ASCII '-->' sequence) and comes after the 0x3C byte that was found. (The two 0x2D bytes can be the same as those in the '<!--' sequence.) A sequence of bytes starting with: 0x3C, 0x4D or 0x6D, 0x45 or 0x65, 0x54 or 0x74, 0x41 or 0x61, and one of 0x09, 0x0A, 0x0C, 0x0D, 0x20, 0x2F (case-insensitive ASCII '<meta' followed by a space or slash)\n• None Advance the pointer so that it points at the next 0x09, 0x0A, 0x0C, 0x0D, 0x20, or 0x2F byte (the one in sequence of characters matched above).\n• None Let be an empty list of strings.\n• None Let be the null value (which, for the purposes of this algorithm, is distinct from an unrecognized encoding or the empty string).\n• None Attributes: Get an attribute and its value. If no attribute was sniffed, then jump to the processing step below.\n• None If the attribute's name is already in , then return to the step labeled attributes.\n• None Add the attribute's name to .\n• Run the appropriate step from the following list, if one applies: If the attribute's name is \" \" If the attribute's value is \" \", then set to true. If the attribute's name is \" \" Apply the algorithm for extracting a character encoding from a element, giving the attribute's value as the string to parse. If a character encoding is returned, and if is still set to null, let be the encoding returned, and set to true. If the attribute's name is \" \" Let be the result of getting an encoding from the attribute's value, and set to false.\n• None Processing: If is null, then jump to the step below labeled next byte.\n• None If is true but is false, then jump to the step below labeled next byte.\n• None If is failure, then jump to the step below labeled next byte.\n• None If is UTF-16BE/LE, then set to UTF-8.\n• None If is x-user-defined, then set to windows-1252. A sequence of bytes starting with a 0x3C byte (<), optionally a 0x2F byte (/), and finally a byte in the range 0x41-0x5A or 0x61-0x7A (A-Z or a-z)\n• None Advance the pointer so that it points at the next 0x09 (HT), 0x0A (LF), 0x0C (FF), 0x0D (CR), 0x20 (SP), or 0x3E (>) byte.\n• None Repeatedly get an attribute until no further attributes can be found, then jump to the step below labeled next byte. Advance the pointer so that it points at the first 0x3E byte (>) that comes after the 0x3C byte that was found. Do nothing with that byte.\n• Next byte: Move so it points at the next byte in the input byte stream, and return to the step above labeled loop.\n\nWhen the prescan a byte stream to determine its encoding algorithm says to , it means doing this:\n• None If the byte at is one of 0x09 (HT), 0x0A (LF), 0x0C (FF), 0x0D (CR), 0x20 (SP), or 0x2F (/) then advance to the next byte and redo this step.\n• None If the byte at is 0x3E (>), then abort the get an attribute algorithm. There isn't one.\n• None Otherwise, the byte at is the start of the attribute name. Let and be the empty string.\n• None Process the byte at as follows: If it is 0x3D (=), and the is longer than the empty string Advance to the next byte and jump to the step below labeled value. If it is 0x09 (HT), 0x0A (LF), 0x0C (FF), 0x0D (CR), or 0x20 (SP) Jump to the step below labeled spaces. If it is 0x2F (/) or 0x3E (>) Abort the get an attribute algorithm. The attribute's name is the value of , its value is the empty string. If it is in the range 0x41 (A) to 0x5A (Z) Append the code point +0x20 to (where is the value of the byte at ). (This converts the input to lowercase.) Append the code point with the same value as the byte at to . (It doesn't actually matter how bytes outside the ASCII range are handled here, since only ASCII bytes can contribute to the detection of a character encoding.)\n• None Advance to the next byte and return to the previous step.\n• None Spaces: If the byte at is one of 0x09 (HT), 0x0A (LF), 0x0C (FF), 0x0D (CR), or 0x20 (SP) then advance to the next byte, then, repeat this step.\n• None If the byte at is not 0x3D (=), abort the get an attribute algorithm. The attribute's name is the value of , its value is the empty string.\n• None Value: If the byte at is one of 0x09 (HT), 0x0A (LF), 0x0C (FF), 0x0D (CR), or 0x20 (SP) then advance to the next byte, then, repeat this step.\n• None Process the byte at as follows: If it is 0x22 (\") or 0x27 (')\n• Let be the value of the byte at .\n• Quote loop: Advance to the next byte.\n• If the value of the byte at is the value of , then advance to the next byte and abort the \"get an attribute\" algorithm. The attribute's name is the value of , and its value is the value of .\n• Otherwise, if the value of the byte at is in the range 0x41 (A) to 0x5A (Z), then append a code point to whose value is 0x20 more than the value of the byte at .\n• Otherwise, append a code point to whose value is the same as the value of the byte at .\n• Return to the step above labeled quote loop. If it is 0x3E (>) Abort the get an attribute algorithm. The attribute's name is the value of , its value is the empty string. If it is in the range 0x41 (A) to 0x5A (Z) Append a code point +0x20 to (where is the value of the byte at ). Advance to the next byte. Append a code point with the same value as the byte at to . Advance to the next byte.\n• None Process the byte at as follows: If it is 0x09 (HT), 0x0A (LF), 0x0C (FF), 0x0D (CR), 0x20 (SP), or 0x3E (>) Abort the get an attribute algorithm. The attribute's name is the value of and its value is the value of . If it is in the range 0x41 (A) to 0x5A (Z) Append a code point +0x20 to (where is the value of the byte at ). Append a code point with the same value as the byte at to .\n• None Advance to the next byte and return to the previous step.\n\nWhen the prescan a byte stream to determine its encoding algorithm is aborted without returning an encoding, means doing this.\n\nLooking for syntax resembling an XML declaration, even in , is necessary for compatibility with existing content.\n• None Let be a pointer to the start of the stream.\n• None If does not point to the start of a byte sequence 0x3C, 0x3F, 0x78, 0x6D, 0x6C (` `), then return failure.\n• None Let be a pointer to the next byte in the input byte stream which is 0x3E (>). If there is no such byte, then return failure.\n• None Set to the position of the first occurrence of the subsequence of bytes 0x65, 0x6E, 0x63, 0x6F, 0x64, 0x69, 0x6E, 0x67 (` `) at or after the current . If there is no such sequence, then return failure.\n• None While the byte at is less than or equal to 0x20 (i.e., it is either an ASCII space or control character), advance to the next byte.\n• None If the byte at is not 0x3D (=), then return failure.\n• None Advance to the next byte.\n• None While the byte at is less than or equal to 0x20 (i.e., it is either an ASCII space or control character), advance to the next byte.\n• None Let be the byte at .\n• None If is not either 0x22 (\") or 0x27 ('), then return failure.\n• None Advance to the next byte.\n• None Let be the position of the next occurrence of at or after . If does not occur again, then return failure.\n• None Let be the sequence of the bytes between (inclusive) and (exclusive).\n• None If contains one or more bytes whose byte value is 0x20 or below, then return failure.\n• None Let be the result of getting an encoding given isomorphic decoded.\n• None If the is UTF-16BE/LE, then change it to UTF-8.\n\nFor the sake of interoperability, user agents should not use a pre-scan algorithm that returns different results than the one described above. (But, if you do, please at least let us know, so that we can improve this algorithm and benefit everyone...)\n\nUser agents must support the encodings defined in , including, but not limited to, , , , , , , , , , , , , , , , , , , , , , and . User agents must not support other encodings.\n\nThe above prohibits supporting, for example, CESU-8, UTF-7, BOCU-1, SCSU, EBCDIC, and UTF-32. This specification does not make any attempt to support prohibited encodings in its algorithms; support and use of prohibited encodings would thus lead to unexpected behavior. [CESU8] [UTF7] [BOCU1] [SCSU]\n\nWhen the parser requires the user agent to , it must run the following steps. This might happen if the encoding sniffing algorithm described above failed to find a character encoding, or if it found a character encoding that was not the actual encoding of the file.\n• None If the encoding that is already being used to interpret the input stream is UTF-16BE/LE, then set the confidence to certain and return. The new encoding is ignored; if it was anything but the same encoding, then it would be clearly incorrect.\n• None If the new encoding is UTF-16BE/LE, then change it to UTF-8.\n• None If the new encoding is x-user-defined, then change it to windows-1252.\n• None If the new encoding is identical or equivalent to the encoding that is already being used to interpret the input stream, then set the confidence to certain and return. This happens when the encoding information found in the file matches what the encoding sniffing algorithm determined to be the encoding, and in the second pass through the parser if the first pass found that the encoding sniffing algorithm described in the earlier section failed to find the right encoding.\n• None If all the bytes up to the last byte converted by the current decoder have the same Unicode interpretations in both the current encoding and the new encoding, and if the user agent supports changing the converter on the fly, then the user agent may change to the new converter for the encoding on the fly. Set the document's character encoding and the encoding used to convert the input stream to the new encoding, set the confidence to certain, and return.\n• None Otherwise, restart the navigate algorithm, with historyHandling set to \" \" and other inputs kept the same, but this time skip the encoding sniffing algorithm and instead just set the encoding to the new encoding and the confidence to certain. Whenever possible, this should be done without actually contacting the network layer (the bytes should be re-parsed from memory), even if, e.g., the document is marked as not being cacheable. If this is not possible and contacting the network layer would involve repeating a request that uses a method other than ` `, then instead set the confidence to certain and ignore the new encoding. The resource will be misinterpreted. User agents may notify the user of the situation, to aid in application development.\n\nThis algorithm is only invoked when a new encoding is found declared on a element.\n\nThe consists of the characters pushed into it as the input byte stream is decoded or from the various APIs that directly manipulate the input stream.\n\nAny occurrences of surrogates are surrogate-in-input-stream parse errors. Any occurrences of noncharacters are noncharacter-in-input-stream parse errors and any occurrences of controls other than ASCII whitespace and U+0000 NULL characters are control-character-in-input-stream parse errors.\n\nThe handling of U+0000 NULL characters varies based on where the characters are found and happens at the later stages of the parsing. They are either ignored or, for security reasons, replaced with a U+FFFD REPLACEMENT CHARACTER. This handling is, by necessity, spread across both the tokenization stage and the tree construction stage.\n\nBefore the tokenization stage, the input stream must be preprocessed by normalizing newlines. Thus, newlines in HTML DOMs are represented by U+000A LF characters, and there are never any U+000D CR characters in the input to the tokenization stage.\n\nThe is the first character in the input stream that has not yet been or explicitly ignored by the requirements in this section. Initially, the next input character is the first character in the input. The is the last character to have been consumed.\n\nThe is the position (just before a character or just before the end of the input stream) where content inserted using is actually inserted. The insertion point is relative to the position of the character immediately after it, it is not an absolute offset into the input stream. Initially, the insertion point is undefined.\n\nThe \"EOF\" character in the tables below is a conceptual character representing the end of the input stream. If the parser is a script-created parser, then the end of the input stream is reached when an (inserted by the method) is consumed. Otherwise, the \"EOF\" character is not a real character in the stream, but rather the lack of any further characters.\n\nThe is a state variable that controls the primary operation of the tree construction stage.\n\nInitially, the insertion mode is \"initial\". It can change to \"before html\", \"before head\", \"in head\", \"in head noscript\", \"after head\", \"in body\", \"text\", \"in table\", \"in table text\", \"in caption\", \"in column group\", \"in table body\", \"in row\", \"in cell\", \"in select\", \"in select in table\", \"in template\", \"after body\", \"in frameset\", \"after frameset\", \"after after body\", and \"after after frameset\" during the course of the parsing, as described in the tree construction stage. The insertion mode affects how tokens are processed and whether CDATA sections are supported.\n\nSeveral of these modes, namely \"in head\", \"in body\", \"in table\", and \"in select\", are special, in that the other modes defer to them at various times. When the algorithm below says that the user agent is to do something \" using the rules for the insertion mode\", where is one of these modes, the user agent must use the rules described under the insertion mode's section, but must leave the insertion mode unchanged unless the rules in themselves switch the insertion mode to a new value.\n\nWhen the insertion mode is switched to \"text\" or \"in table text\", the is also set. This is the insertion mode to which the tree construction stage will return.\n\nSimilarly, to parse nested elements, a is used. It is initially empty. The is the insertion mode that was most recently added to the stack of template insertion modes. The algorithms in the sections below will push insertion modes onto this stack, meaning that the specified insertion mode is to be added to the stack, and pop insertion modes from the stack, which means that the most recently added insertion mode must be removed from the stack.\n\nWhen the steps below require the UA to , it means the UA must follow these steps:\n• None Let be the last node in the stack of open elements.\n• None Loop: If is the first node in the stack of open elements, then set to true, and, if the parser was created as part of the HTML fragment parsing algorithm (fragment case), set to the element passed to that algorithm.\n• If is a element, run these substeps:\n• None If is true, jump to the step below labeled done.\n• None Loop: If is the first node in the stack of open elements, jump to the step below labeled done.\n• None Let be the node before in the stack of open elements.\n• None If is a node, jump to the step below labeled done.\n• None If is a node, switch the insertion mode to \"in select in table\" and return.\n• None Done: Switch the insertion mode to \"in select\" and return.\n• None If is a or element and is false, then switch the insertion mode to \"in cell\" and return.\n• None If is a element, then switch the insertion mode to \"in row\" and return.\n• None If is a , , or element, then switch the insertion mode to \"in table body\" and return.\n• None If is a element, then switch the insertion mode to \"in caption\" and return.\n• None If is a element, then switch the insertion mode to \"in column group\" and return.\n• None If is a element, then switch the insertion mode to \"in table\" and return.\n• None If is a element, then switch the insertion mode to the current template insertion mode and return.\n• None If is a element and is false, then switch the insertion mode to \"in head\" and return.\n• None If is a element, then switch the insertion mode to \"in body\" and return.\n• None If is a element, then switch the insertion mode to \"in frameset\" and return. (fragment case)\n• If is an element, run these substeps:\n• None If the element pointer is null, switch the insertion mode to \"before head\" and return. (fragment case)\n• None Otherwise, the element pointer is not null, switch the insertion mode to \"after head\" and return.\n• None If is true, then switch the insertion mode to \"in body\" and return. (fragment case)\n• None Let now be the node before in the stack of open elements.\n\nInitially, the is empty. The stack grows downwards; the topmost node on the stack is the first one added to the stack, and the bottommost node of the stack is the most recently added node in the stack (notwithstanding when the stack is manipulated in a random access fashion as part of the handling for misnested tags).\n\nThe \"before html\" insertion mode creates the document element, which is then added to the stack.\n\nIn the fragment case, the stack of open elements is initialized to contain an element that is created as part of that algorithm. (The fragment case skips the \"before html\" insertion mode.)\n\nThe node, however it is created, is the topmost node of the stack. It only gets popped off the stack when the parser finishes.\n\nThe is the bottommost node in this stack of open elements.\n\nThe is the context element if the parser was created as part of the HTML fragment parsing algorithm and the stack of open elements has only one element in it (fragment case); otherwise, the adjusted current node is the current node.\n\nWhen the current node is removed from the stack of open elements, process internal resource links given the current node's node document.\n\nElements in the stack of open elements fall into the following categories:\n\nTypically, the special elements have the start and end tag tokens handled specifically, while ordinary elements' tokens fall into \"any other start tag\" and \"any other end tag\" clauses, and some parts of the tree builder check if a particular element in the stack of open elements is in the special category. However, some elements (e.g., the element) have their start or end tag tokens handled specifically, but are still not in the special category, so that they get the ordinary handling elsewhere.\n\nThe stack of open elements is said to have an element in a specific scope consisting of a list of element types when the following algorithm terminates in a match state:\n• None Initialize to be the current node (the bottommost node of the stack).\n• None If is , terminate in a match state.\n• None Otherwise, if is one of the element types in , terminate in a failure state.\n• None Otherwise, set to the previous entry in the stack of open elements and return to step 2. (This will never fail, since the loop will always terminate in the previous step if the top of the stack — an element — is reached.)\n\nThe stack of open elements is said to have a particular element in scope when it has that element in the specific scope consisting of the following element types:\n\nThe stack of open elements is said to have a particular element in list item scope when it has that element in the specific scope consisting of the following element types:\n• All the element types listed above for the has an element in scope algorithm.\n\nThe stack of open elements is said to have a particular element in button scope when it has that element in the specific scope consisting of the following element types:\n• All the element types listed above for the has an element in scope algorithm.\n\nThe stack of open elements is said to have a particular element in table scope when it has that element in the specific scope consisting of the following element types:\n\nThe stack of open elements is said to have a particular element in select scope when it has that element in the specific scope consisting of all element types except the following:\n\nNothing happens if at any time any of the elements in the stack of open elements are moved to a new location in, or removed from, the tree. In particular, the stack is not changed in this situation. This can cause, amongst other strange effects, content to be appended to nodes that are no longer in the DOM.\n\nIn some cases (namely, when closing misnested formatting elements), the stack is manipulated in a random-access fashion.\n\nInitially, the is empty. It is used to handle mis-nested formatting element tags.\n\nThe list contains elements in the formatting category, and markers. The are inserted when entering , , , , , , and elements, and are used to prevent formatting from \"leaking\" into , , , , , , and elements.\n\nIn addition, each element in the list of active formatting elements is associated with the token for which it was created, so that further elements can be created for that token if necessary.\n\nWhen the steps below require the UA to push onto the list of active formatting elements an element , the UA must perform the following steps:\n• None If there are already three elements in the list of active formatting elements after the last marker, if any, or anywhere in the list if there are no markers, that have the same tag name, namespace, and attributes as , then remove the earliest such element from the list of active formatting elements. For these purposes, the attributes must be compared as they were when the elements were created by the parser; two elements have the same attributes if all their parsed attributes can be paired such that the two attributes in each pair have identical names, namespaces, and values (the order of the attributes does not matter). This is the Noah's Ark clause. But with three per family instead of two.\n• None Add to the list of active formatting elements.\n\nWhen the steps below require the UA to , the UA must perform the following steps:\n• None If there are no entries in the list of active formatting elements, then there is nothing to reconstruct; stop this algorithm.\n• None If the last (most recently added) entry in the list of active formatting elements is a marker, or if it is an element that is in the stack of open elements, then there is nothing to reconstruct; stop this algorithm.\n• None Let be the last (most recently added) element in the list of active formatting elements.\n• None Rewind: If there are no entries before in the list of active formatting elements, then jump to the step labeled create.\n• None Let be the entry one earlier than in the list of active formatting elements.\n• None If is neither a marker nor an element that is also in the stack of open elements, go to the step labeled rewind.\n• None Advance: Let be the element one later than in the list of active formatting elements.\n• None Create: Insert an HTML element for the token for which the element was created, to obtain .\n• None Replace the entry for in the list with an entry for .\n• None If the entry for in the list of active formatting elements is not the last entry in the list, return to the step labeled advance.\n\nThis has the effect of reopening all the formatting elements that were opened in the current body, cell, or caption (whichever is youngest) that haven't been explicitly closed.\n\nThe way this specification is written, the list of active formatting elements always consists of elements in chronological order with the least recently added element first and the most recently added element last (except for while steps 7 to 10 of the above algorithm are being executed, of course).\n\nWhen the steps below require the UA to clear the list of active formatting elements up to the last marker , the UA must perform the following steps:\n• None Let be the last (most recently added) entry in the list of active formatting elements.\n• None Remove from the list of active formatting elements.\n• None If was a marker, then stop the algorithm at this point. The list has been cleared up to the last marker.\n\nInitially, the and the are both null.\n\nOnce a element has been parsed (whether implicitly or explicitly) the element pointer gets set to point to this node.\n\nThe element pointer points to the last element that was opened and whose end tag has not yet been seen. It is used to make form controls associate with forms in the face of dramatically bad markup, for historical reasons. It is ignored inside elements.\n\nThe is set to \"enabled\" if scripting was enabled for the with which the parser is associated when the parser was created, and \"disabled\" otherwise.\n\nThe scripting flag can be enabled even when the parser was created as part of the HTML fragment parsing algorithm, even though elements don't execute in that case.\n\nThe is set to \"ok\" when the parser is created. It is set to \"not ok\" after certain tokens are seen.\n\nImplementations must act as if they used the following state machine to tokenize HTML. The state machine must start in the data state. Most states consume a single character, which may have various side-effects, and either switches the state machine to a new state to reconsume the current input character, or switches it to a new state to consume the next character, or stays in the same state to consume the next character. Some states have more complicated behavior and can consume several characters before switching to another state. In some cases, the tokenizer state is also changed by the tree construction stage.\n\nWhen a state says to a matched character in a specified state, that means to switch to that state, but when it attempts to consume the next input character, provide it with the current input character instead.\n\nThe exact behavior of certain states depends on the insertion mode and the stack of open elements. Certain states also use a to track progress, and the character reference state uses a to return to the state it was invoked from.\n\nThe output of the tokenization step is a series of zero or more of the following tokens: DOCTYPE, start tag, end tag, comment, character, end-of-file. DOCTYPE tokens have a name, a public identifier, a system identifier, and a . When a DOCTYPE token is created, its name, public identifier, and system identifier must be marked as missing (which is a distinct state from the empty string), and the force-quirks flag must be set to off (its other state is on). Start and end tag tokens have a tag name, a , and a list of attributes, each of which has a name and a value. When a start or end tag token is created, its self-closing flag must be unset (its other state is that it be set), and its attributes list must be empty. Comment and character tokens have data.\n\nWhen a token is emitted, it must immediately be handled by the tree construction stage. The tree construction stage can affect the state of the tokenization stage, and can insert additional characters into the stream. (For example, the element can result in scripts executing and using the dynamic markup insertion APIs to insert characters into the stream being tokenized.)\n\nCreating a token and emitting it are distinct actions. It is possible for a token to be created but implicitly abandoned (never emitted), e.g. if the file ends unexpectedly while processing the characters that are being parsed into a start tag token.\n\nWhen a start tag token is emitted with its self-closing flag set, if the flag is not when it is processed by the tree construction stage, that is a non-void-html-element-start-tag-with-trailing-solidus parse error.\n\nWhen an end tag token is emitted with attributes, that is an end-tag-with-attributes parse error.\n\nWhen an end tag token is emitted with its self-closing flag set, that is an end-tag-with-trailing-solidus parse error.\n\nAn is an end tag token whose tag name matches the tag name of the last start tag to have been emitted from this tokenizer, if any. If no start tag has been emitted from this tokenizer, then no end tag token is appropriate.\n\nA character reference is said to be consumed as part of an attribute if the is either attribute value (double-quoted) state, attribute value (single-quoted) state, or attribute value (unquoted) state.\n\nWhen a state says to , it means that for each code point in the (in the order they were added to the buffer) user agent must append the code point from the buffer to the current attribute's value if the character reference was consumed as part of an attribute, or emit the code point as a character token otherwise.\n\nBefore each step of the tokenizer, the user agent must first check the parser pause flag. If it is true, then the tokenizer must abort the processing of any nested invocations of the tokenizer, yielding control back to the caller.\n\nThe tokenizer state machine consists of the states defined in the following subsections.\n\nWhen the user agent leaves the attribute name state (and before emitting the tag token, if appropriate), the complete attribute's name must be compared to the other attributes on the same token; if there is already an attribute on the token with the exact same name, then this is a duplicate-attribute parse error and the new attribute must be removed from the token.\n\nIf an attribute is so removed from a token, it, and the value that gets associated with it, if any, are never subsequently used by the parser, and are therefore effectively discarded. Removing the attribute in this way does not change its status as the \"current attribute\" for the purposes of the tokenizer, however.\n\nIf the next few characters are:\n\nU+0000 NULL characters are handled in the tree construction stage, as part of the in foreign content insertion mode, which is the only place where CDATA sections can appear.\n\nSet the to the empty string. Append a U+0026 AMPERSAND (&) character to the . Consume the next input character:\n\nConsume the maximum number of characters possible, where the consumed characters are one of the identifiers in the first column of the named character references table. Append each character to the when it's consumed.\n\nSet the to zero (0).\n• None If the number is 0x00, then this is a null-character-reference parse error. Set the to 0xFFFD.\n• None If the number is greater than 0x10FFFF, then this is a character-reference-outside-unicode-range parse error. Set the to 0xFFFD.\n• None If the number is a surrogate, then this is a surrogate-character-reference parse error. Set the to 0xFFFD.\n• None If the number is a noncharacter, then this is a noncharacter-character-reference parse error.\n• None If the number is 0x0D, or a control that's not ASCII whitespace, then this is a control-character-reference parse error. If the number is one of the numbers in the first column of the following table, then find the row with that number in the first column, and set the to the number in the second column of that row.\n\nSet the to the empty string. Append a code point equal to the to the . Flush code points consumed as a character reference. Switch to the .\n\nThe input to the tree construction stage is a sequence of tokens from the tokenization stage. The tree construction stage is associated with a DOM object when a parser is created. The \"output\" of this stage consists of dynamically modifying or extending that document's DOM tree.\n\nThis specification does not define when an interactive user agent has to render the so that it is available to the user, or when it has to begin accepting user input.\n\nAs each token is emitted from the tokenizer, the user agent must follow the appropriate steps from the following list, known as the :\n\nThe is the token that is about to be processed by the tree construction dispatcher (even if the token is subsequently just ignored).\n\nA node is a if it is one of the following elements:\n\nA node is an if it is one of the following elements:\n• A MathML element whose start tag token had an attribute with the name \"encoding\" whose value was an ASCII case-insensitive match for the string \" \"\n• A MathML element whose start tag token had an attribute with the name \"encoding\" whose value was an ASCII case-insensitive match for the string \" \"\n\nIf the node in question is the element passed to the HTML fragment parsing algorithm, then the start tag token for that element is the \"fake\" token created during by that HTML fragment parsing algorithm.\n\nNot all of the tag names mentioned below are conformant tag names in this specification; many are included to handle legacy content. They still form part of the algorithm that implementations are required to implement to claim conformance.\n\nThe algorithm described below places no limit on the depth of the DOM tree generated, or on the length of tag names, attribute names, attribute values, nodes, etc. While implementers are encouraged to avoid arbitrary limits, it is recognized that practical concerns will likely force user agents to impose nesting depth constraints.\n\nWhile the parser is processing a token, it can enable or disable . This affects the following algorithm.\n\nThe , optionally using a particular override target, is the position in an element returned by running the following steps:\n• If there was an override target specified, then let be the override target. Otherwise, let be the current node.\n• Determine the using the first matching steps from the following list: If foster parenting is enabled and is a , , , , or element Foster parenting happens when content is misnested in tables.\n• None Let be the last element in the stack of open elements, if any.\n• None Let be the last element in the stack of open elements, if any.\n• None If there is a and either there is no , or there is one, but is lower (more recently added) than in the stack of open elements, then: let be inside 's template contents, after its last child (if any), and abort these steps.\n• None If there is no , then let be inside the first element in the stack of open elements (the element), after its last child (if any), and abort these steps. (fragment case)\n• None If has a parent node, then let be inside 's parent node, immediately before , and abort these steps.\n• None Let be the element immediately above in the stack of open elements.\n• None Let be inside , after its last child (if any). These steps are involved in part because it's possible for elements, the element in this case in particular, to have been moved by a script around in the DOM, or indeed removed from the DOM entirely, after the element was inserted by the parser. Let be inside , after its last child (if any).\n• If the is inside a element, let it instead be inside the element's template contents, after its last child (if any).\n\nWhen the steps below require the UA to in a particular and with a particular , the UA must run the following steps:\n• None If the active speculative HTML parser is not null, then return the result of creating a speculative mock element given , the tag name of the given token, and the attributes of the given token.\n• Otherwise, optionally create a speculative mock element given , the tag name of the given token, and the attributes of the given token. The result is not used. This step allows for a speculative fetch to be initiated from non-speculative parsing. The fetch is still speculative at this point, because, for example, by the time the element is inserted, might have been removed from the document.\n• None Let be the tag name of the token.\n• None Let be the value of the \" \" attribute in the given token, if such an attribute exists, or null otherwise.\n• None Let be the result of looking up a custom element definition given , , , and .\n• None Let be true if is non-null and the parser was not created as part of the HTML fragment parsing algorithm; otherwise false.\n• \n• None If the JavaScript execution context stack is empty, then perform a microtask checkpoint.\n• Let be the result of creating an element given , , , null, , and . This will cause custom element constructors to run, if is true. However, since we incremented the throw-on-dynamic-markup-insertion counter, this cannot cause new characters to be inserted into the tokenizer, or the document to be blown away.\n• Append each attribute in the given token to . This can enqueue a custom element callback reaction for the , which might run immediately (in the next step). Even though the attribute governs the creation of a customized built-in element, it is not present during the execution of the relevant custom element constructor; it is appended in this step, along with all other attributes.\n• \n• None Let be the result of popping from 's relevant agent's custom element reactions stack. (This will be the same element queue as was pushed above.)\n• None If has an attribute in the XMLNS namespace whose value is not exactly the same as the element's namespace, that is a parse error. Similarly, if has an attribute in the XMLNS namespace whose value is not the XLink Namespace, that is a parse error.\n• None If is a resettable element, invoke its reset algorithm. (This initializes the element's value and checkedness based on the element's attributes.)\n• None If is a form-associated element and not a form-associated custom element, the element pointer is not null, there is no element on the stack of open elements, is either not listed or doesn't have a attribute, and the is in the same tree as the element pointed to by the element pointer, then associate with the element pointed to by the element pointer and set 's parser inserted flag.\n\nTo insert an element at the adjusted insertion location with an element :\n• None Let the be the appropriate place for inserting a node.\n• None If it is not possible to insert at the , abort these steps.\n• None If the parser was not created as part of the HTML fragment parsing algorithm, then push a new element queue onto 's relevant agent's custom element reactions stack.\n• None If the parser was not created as part of the HTML fragment parsing algorithm, then pop the element queue from 's relevant agent's custom element reactions stack, and invoke custom element reactions in that queue.\n\nIf the cannot accept more elements, e.g., because it's a that already has an element child, then is dropped on the floor.\n\nWhen the steps below require the user agent to for a token in a given namespace and with a boolean , the user agent must run these steps:\n• None Let the be the appropriate place for inserting a node.\n• None Let be the result of creating an element for the token in the given namespace, with the intended parent being the element in which the finds itself.\n• None If is false, then run insert an element at the adjusted insertion location with .\n• None Push onto the stack of open elements so that it is the new current node.\n\nWhen the steps below require the user agent to for a token, the user agent must insert a foreign element for the token, with the HTML namespace and false.\n\nWhen the steps below require the user agent to for a token, then, if the token has an attribute named , change its name to (note the case difference).\n\nWhen the steps below require the user agent to for a token, then, for each attribute on the token whose attribute name is one of the ones in the first column of the following table, change the attribute's name to the name given in the corresponding cell in the second column. (This fixes the case of SVG attributes that are not all lowercase.)\n\nWhen the steps below require the user agent to for a token, then, if any of the attributes on the token match the strings given in the first column of the following table, let the attribute be a namespaced attribute, with the prefix being the string given in the corresponding cell in the second column, the local name being the string given in the corresponding cell in the third column, and the namespace being the namespace given in the corresponding cell in the fourth column. (This fixes the use of namespaced attributes, in particular attributes in the XML namespace.)\n\nWhen the steps below require the user agent to while processing a token, the user agent must run the following steps:\n• None Let be the characters passed to the algorithm, or, if no characters were explicitly specified, the character of the character token being processed.\n• None Let the be the appropriate place for inserting a node.\n• If the is in a node, then return. The DOM will not let nodes have node children, so they are dropped on the floor.\n• If there is a node immediately before the , then append to that node's data. Otherwise, create a new node whose data is and whose node document is the same as that of the element in which the finds itself, and insert the newly created node at the .\n\nWhen the steps below require the user agent to while processing a comment token, optionally with an explicit insertion position , the user agent must run the following steps:\n• None Let be the data given in the comment token being processed.\n• None If was specified, then let the be . Otherwise, let be the appropriate place for inserting a node.\n• None Create a node whose attribute is set to and whose node document is the same as that of the node in which the finds itself.\n• None Insert the newly created node at the .\n\nParsing elements that contain only text\n\nThe and the consist of the following steps. These algorithms are always invoked in response to a start tag token.\n• None Insert an HTML element for the token.\n• None If the algorithm that was invoked is the generic raw text element parsing algorithm, switch the tokenizer to the RAWTEXT state; otherwise the algorithm invoked was the generic RCDATA element parsing algorithm, switch the tokenizer to the RCDATA state.\n• None Let the original insertion mode be the current insertion mode.\n• None Then, switch the insertion mode to \"text\".\n\nWhen the steps below require the UA to , then, while the is a element, a element, an element, an element, an element, a element, an element, an element, an element, or an element, the UA must pop the off the .\n\nIf a step requires the UA to generate implied end tags but lists an element to exclude from the process, then the UA must perform the above steps as if that element was not in the above list.\n\nWhen the steps below require the UA to , then, while the is a element, a element, a element, a element, an element, an element, an element, a element, an element, an element, an element, an element, a element, a element, a element, a element, a element, or a element, the UA must pop the off the .\n\nThe rules for parsing tokens in HTML content\n\nA object has an associated (a boolean). It is initially false.\n\nWhen the user agent is to apply the rules for the \"initial\" insertion mode, the user agent must handle the token as follows:\n\nWhen the user agent is to apply the rules for the \"before html\" insertion mode, the user agent must handle the token as follows:\n\nThe document element can end up being removed from the object, e.g. by scripts; nothing in particular happens in such cases, content continues being appended to the nodes as described in the next section.\n\nWhen the user agent is to apply the rules for the \"before head\" insertion mode, the user agent must handle the token as follows:\n\nWhen the user agent is to apply the rules for the \"in head\" insertion mode, the user agent must handle the token as follows:\n\nWhen the user agent is to apply the rules for the \"in head noscript\" insertion mode, the user agent must handle the token as follows:\n\nWhen the user agent is to apply the rules for the \"after head\" insertion mode, the user agent must handle the token as follows:\n\nWhen the user agent is to apply the rules for the \"in body\" insertion mode, the user agent must handle the token as follows:\n\nWhen the steps above say the user agent is to , it means that the user agent must run the following steps:\n• None If the current node is not a element, then this is a parse error.\n• None Pop elements from the stack of open elements until a element has been popped from the stack.\n\nThe , which takes as its only argument a token for which the algorithm is being run, consists of the following steps:\n• None Let be 's tag name.\n• None If the current node is an HTML element whose tag name is , and the current node is not in the list of active formatting elements, then pop the current node off the stack of open elements and return.\n• \n• None If is greater than or equal to 8, then return.\n• Let be the last element in the list of active formatting elements that:\n• is between the end of the list and the last marker in the list, if any, or the start of the list otherwise, and\n• has the tag name . If there is no such element, then return and instead act as described in the \"any other end tag\" entry above.\n• None If is not in the stack of open elements, then this is a parse error; remove the element from the list, and return.\n• None If is in the stack of open elements, but the element is not in scope, then this is a parse error; return.\n• None If is not the current node, this is a parse error. (But do not return.)\n• None Let be the topmost node in the stack of open elements that is lower in the stack than , and is an element in the special category. There might not be one.\n• None If there is no , then the UA must first pop all the nodes from the bottom of the stack of open elements, from the current node up to and including , then remove from the list of active formatting elements, and finally return.\n• None Let be the element immediately above in the stack of open elements.\n• None Let a bookmark note the position of in the list of active formatting elements relative to the elements on either side of it in the list.\n• None Let and be .\n• \n• None Let be the element immediately above in the stack of open elements, or if is no longer in the stack of open elements (e.g. because it got removed by this algorithm), the element that was immediately above in the stack of open elements before was removed.\n• None If is , then break.\n• None If is greater than 3 and is in the list of active formatting elements, then remove from the list of active formatting elements.\n• None If is not in the list of active formatting elements, then remove from the stack of open elements and continue.\n• None Create an element for the token for which the element was created, in the HTML namespace, with as the intended parent; replace the entry for in the list of active formatting elements with an entry for the new element, replace the entry for in the stack of open elements with an entry for the new element, and let be the new element.\n• None If is , then move the aforementioned bookmark to be immediately after the new in the list of active formatting elements.\n• None Insert whatever ended up being in the previous step at the appropriate place for inserting a node, but using as the override target.\n• None Create an element for the token for which was created, in the HTML namespace, with as the intended parent.\n• None Take all of the child nodes of and append them to the element created in the last step.\n• None Append that new element to .\n• None Remove from the list of active formatting elements, and insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n• None Remove from the stack of open elements, and insert the new element into the stack of open elements immediately below the position of in that stack.\n\nThis algorithm's name, the \"adoption agency algorithm\", comes from the way it causes elements to change parents, and is in contrast with other possible algorithms for dealing with misnested content.\n\nWhen the user agent is to apply the rules for the \"text\" insertion mode, the user agent must handle the token as follows:\n\nWhen the user agent is to apply the rules for the \"in table\" insertion mode, the user agent must handle the token as follows:\n\nWhen the steps above require the UA to , it means that the UA must, while the current node is not a , , or element, pop elements from the stack of open elements.\n\nThis is the same list of elements as used in the has an element in table scope steps.\n\nThe current node being an element after this process is a fragment case.\n\nWhen the user agent is to apply the rules for the \"in table text\" insertion mode, the user agent must handle the token as follows:\n\nWhen the user agent is to apply the rules for the \"in caption\" insertion mode, the user agent must handle the token as follows:\n\nWhen the user agent is to apply the rules for the \"in column group\" insertion mode, the user agent must handle the token as follows:\n\nWhen the user agent is to apply the rules for the \"in table body\" insertion mode, the user agent must handle the token as follows:\n\nWhen the steps above require the UA to , it means that the UA must, while the current node is not a , , , , or element, pop elements from the stack of open elements.\n\nThe current node being an element after this process is a fragment case.\n\nWhen the user agent is to apply the rules for the \"in row\" insertion mode, the user agent must handle the token as follows:\n\nWhen the steps above require the UA to , it means that the UA must, while the current node is not a , , or element, pop elements from the stack of open elements.\n\nThe current node being an element after this process is a fragment case.\n\nWhen the user agent is to apply the rules for the \"in cell\" insertion mode, the user agent must handle the token as follows:\n\nWhere the steps above say to , they mean to run the following algorithm:\n• None If the current node is not now a element or a element, then this is a parse error.\n• None Pop elements from the stack of open elements until a element or a element has been popped from the stack.\n• None Clear the list of active formatting elements up to the last marker.\n• None Switch the insertion mode to \"in row\".\n\nThe stack of open elements cannot have both a and a element in table scope at the same time, nor can it have neither when the close the cell algorithm is invoked.\n\nWhen the user agent is to apply the rules for the \"in select\" insertion mode, the user agent must handle the token as follows:\n\nWhen the user agent is to apply the rules for the \"in select in table\" insertion mode, the user agent must handle the token as follows:\n\nWhen the user agent is to apply the rules for the \"in template\" insertion mode, the user agent must handle the token as follows:\n\nWhen the user agent is to apply the rules for the \"after body\" insertion mode, the user agent must handle the token as follows:\n\nWhen the user agent is to apply the rules for the \"in frameset\" insertion mode, the user agent must handle the token as follows:\n\nWhen the user agent is to apply the rules for the \"after frameset\" insertion mode, the user agent must handle the token as follows:\n\nWhen the user agent is to apply the rules for the \"after after body\" insertion mode, the user agent must handle the token as follows:\n\nWhen the user agent is to apply the rules for the \"after after frameset\" insertion mode, the user agent must handle the token as follows:\n\nWhen the user agent is to apply the rules for parsing tokens in foreign content, the user agent must handle the token as follows:\n\nOnce the user agent the document, the user agent must run the following steps:\n• None If the active speculative HTML parser is not null, then stop the speculative HTML parser and return.\n• None Pop all the nodes off the stack of open elements.\n• None While the list of scripts that will execute when the document has finished parsing is not empty:\n• None Spin the event loop until the first in the list of scripts that will execute when the document has finished parsing has its ready to be parser-executed set to true and the parser's has no style sheet that is blocking scripts.\n• None Execute the script element given by the first in the list of scripts that will execute when the document has finished parsing.\n• None Remove the first element from the list of scripts that will execute when the document has finished parsing (i.e. shift out the first entry in the list).\n• Queue a global task on the DOM manipulation task source given the 's relevant global object to run the following substeps:\n• None Set the 's load timing info's DOM content loaded event start time to the current high resolution time given the 's relevant global object.\n• None Fire an event named at the object, with its attribute initialized to true.\n• None Set the 's load timing info's DOM content loaded event end time to the current high resolution time given the 's relevant global object.\n• None Enable the client message queue of the object whose associated service worker client is the object's relevant settings object.\n• None Invoke WebDriver BiDi DOM content loaded with the 's browsing context, and a new WebDriver BiDi navigation status whose id is the object's during-loading navigation ID for WebDriver BiDi, status is \" \", and url is the object's URL.\n• None Spin the event loop until the set of scripts that will execute as soon as possible and the list of scripts that will execute in order as soon as possible are empty.\n• None Spin the event loop until there is nothing that in the .\n• Queue a global task on the DOM manipulation task source given the 's relevant global object to run the following steps:\n• None If the object's browsing context is null, then abort these steps.\n• None Let be the 's relevant global object.\n• None Set the 's load timing info's load event start time to the current high resolution time given .\n• None Fire an event named at , with set.\n• None Invoke WebDriver BiDi load complete with the 's browsing context, and a new WebDriver BiDi navigation status whose id is the object's during-loading navigation ID for WebDriver BiDi, status is \" \", and url is the object's URL.\n• None Set the object's during-loading navigation ID for WebDriver BiDi to null.\n• None Set the 's load timing info's load event end time to the current high resolution time given .\n• None Queue the navigation timing entry for the .\n• None If the 's print when loaded flag is set, then run the printing steps.\n• None The is now .\n\nWhen the user agent is to , it must run the following steps:\n• None Throw away any pending content in the input stream, and discard any future content that would have been added to it.\n• None Stop the speculative HTML parser for this HTML parser.\n• None Pop all the nodes off the stack of open elements.\n\nUser agents may implement an optimization, as described in this section, to speculatively fetch resources that are declared in the HTML markup while the HTML parser is waiting for a pending parsing-blocking script to be fetched and executed, or during normal parsing, at the time an element is created for a token. While this optimization is not defined in precise detail, there are some rules to consider for interoperability.\n\nEach HTML parser can have an . It is initially null.\n\nThe must act like the normal HTML parser (e.g., the tree builder rules apply), with some exceptions:\n• The state of the normal HTML parser and the document itself must not be affected. For example, the next input character or the stack of open elements for the normal HTML parser is not affected by the speculative HTML parser.\n• Bytes pushed into the HTML parser's input byte stream must also be pushed into the speculative HTML parser's input byte stream. Bytes read from the streams must be independent.\n• The result of the speculative parsing is primarily a series of speculative fetches. Which kinds of resources to speculatively fetch is implementation-defined, but user agents must not speculatively fetch resources that would not be fetched with the normal HTML parser, under the assumption that the script that is blocking the HTML parser does nothing. It is possible that the same markup is seen multiple times from the speculative HTML parser and then the normal HTML parser. It is expected that duplicated fetches will be prevented by caching rules, which are not yet fully specified.\n\nA for a speculative mock element must follow these rules:\n\nShould some of these things be applied to the document \"for real\", even though they are found speculatively?\n• If the speculative HTML parser encounters one of the following elements, then act as if that element is processed for the purpose of its effect of subsequent speculative fetches.\n• A element whose attribute is in the Content security policy state.\n• A element whose attribute is an ASCII case-insensitive match for \" \".\n• A element whose attribute is an ASCII case-insensitive match for \" \". (This can affect whether a media query list matches the environment.) [CSSDEVICEADAPT]\n• None Let be the URL that would fetch if it was processed normally. If there is no such URL or if it is the empty string, then do nothing. Otherwise, if url is already in the list of speculative fetch URLs, then do nothing. Otherwise, fetch url as if the element was processed normally, and add to the list of speculative fetch URLs.\n\nEach has a , which is a list of URLs, initially empty.\n\nTo for an instance of an HTML parser :\n• This step allows user agents to opt out of speculative HTML parsing.\n• If 's active speculative HTML parser is not null, then stop the speculative HTML parser for . This can happen when writes another parser-blocking script. For simplicity, this specification always restarts speculative parsing, but user agents can implement a more efficient strategy, so long as the end result is equivalent.\n• None Let be a new speculative HTML parser, with the same state as .\n• None Let be a new isomorphic representation of 's , where all elements are instead speculative mock elements. Let parse into .\n• None In parallel, run until it is stopped or until it reaches the end of its input stream.\n\nTo for an instance of an HTML parser :\n• None If is null, then return.\n• None Throw away any pending content in 's input stream, and discard any future content that would have been added to it.\n\nThe speculative HTML parser will create speculative mock elements instead of normal elements. DOM operations that the tree builder normally does on elements are expected to work appropriately on speculative mock elements.\n\nA is a struct with the following items:\n• None A string , corresponding to an element's namespace.\n• None A string , corresponding to an element's local name.\n• None A list , corresponding to an element's attribute list.\n• None A list , corresponding to an element's children.\n\nTo given a , , and :\n• None Let be a new speculative mock element.\n\nWhen the tree builder says to insert an element into a element's template contents, if that is a speculative mock element, and the element's template contents is not a node, instead do nothing. URLs found speculatively inside non-declarative-shadow-root elements might themselves be templates, and must not be speculatively fetched.\n\nCoercing an HTML DOM into an infoset\n\nWhen an application uses an HTML parser in conjunction with an XML pipeline, it is possible that the constructed DOM is not compatible with the XML tool chain in certain subtle ways. For example, an XML toolchain might not be able to represent attributes with the name , since they conflict with the Namespaces in XML syntax. There is also some data that the HTML parser generates that isn't included in the DOM itself. This section specifies some rules for handling these issues.\n\nIf the XML API being used doesn't support DOCTYPEs, the tool may drop DOCTYPEs altogether.\n\nIf the XML API doesn't support attributes in no namespace that are named \" \", attributes whose names start with \" \", or attributes in the XMLNS namespace, then the tool may drop such attributes.\n\nThe tool may annotate the output with any namespace declarations required for proper operation.\n\nIf the XML API being used restricts the allowable characters in the local names of elements and attributes, then the tool may map all element and attribute local names that the API wouldn't support to a set of names that are allowed, by replacing any character that isn't supported with the uppercase letter U and the six digits of the character's code point when expressed in hexadecimal, using digits 0-9 and capital letters A-F as the symbols, in increasing numeric order.\n\nFor example, the element name , which can be output by the HTML parser, though it is neither a legal HTML element name nor a well-formed XML element name, would be converted into , which is a well-formed XML element name (though it's still not legal in HTML by any means).\n\nAs another example, consider the attribute . Used on a MathML element, it becomes, after being adjusted, an attribute with a prefix \" \" and a local name \" \". However, used on an HTML element, it becomes an attribute with no prefix and the local name \" \", which is not a valid NCName, and thus might not be accepted by an XML API. It could thus get converted, becoming \" \".\n\nThe resulting names from this conversion conveniently can't clash with any attribute generated by the HTML parser, since those are all either lowercase or those listed in the adjust foreign attributes algorithm's table.\n\nIf the XML API restricts comments from having two consecutive U+002D HYPHEN-MINUS characters (--), the tool may insert a single U+0020 SPACE character between any such offending characters.\n\nIf the XML API restricts comments from ending in a U+002D HYPHEN-MINUS character (-), the tool may insert a single U+0020 SPACE character at the end of such comments.\n\nIf the XML API restricts allowed characters in character data, attribute values, or comments, the tool may replace any U+000C FORM FEED (FF) character with a U+0020 SPACE character, and any other literal non-XML character with a U+FFFD REPLACEMENT CHARACTER.\n\nIf the tool has no way to convey out-of-band information, then the tool may drop the following information:\n• Whether the document is set to no-quirks mode, limited-quirks mode, or quirks mode\n• The association between form controls and forms that aren't their nearest element ancestor (use of the element pointer in the parser)\n• The template contents of any elements.\n\nThe mutations allowed by this section apply after the HTML parser's rules have been applied. For example, a start tag will be closed by a end tag, and never by a end tag, even if the user agent is using the rules above to then generate an actual element in the DOM with the name for that start tag.\n\nAn introduction to error handling and strange cases in the parser\n\nThis section examines some erroneous markup and discusses how the HTML parser handles these cases.\n\nThe most-often discussed example of erroneous markup is as follows:\n\nThe parsing of this markup is straightforward up to the \"3\". At this point, the DOM looks like this:\n\nHere, the has five elements on it: , , , , and . The just has two: and . The is \" \".\n\nUpon receiving the end tag token with the tag name \"b\", the \"adoption agency algorithm\" is invoked. This is a simple case, in that the is the element, and there is no . Thus, the ends up with just three elements: , , and , while the has just one: . The DOM tree is unmodified at this point.\n\nThe next token is a character (\"4\"), triggers the , in this case just the element. A new element is thus created for the \"4\" node. After the end tag token for the \"i\" is also received, and the \"5\" node is inserted, the DOM looks as follows:\n\nA case similar to the previous one is the following:\n\nUp to the \"2\" the parsing here is straightforward:\n\nThe interesting part is when the end tag token with the tag name \"b\" is parsed.\n\nBefore that token is seen, the has four elements on it: , , , and . The just has the one: . The is \" \".\n\nUpon receiving the end tag token with the tag name \"b\", the \"adoption agency algorithm\" is invoked, as in the previous example. However, in this case, there is a , namely the element. Thus, this time the adoption agency algorithm isn't skipped over.\n\nThe is the element. A conceptual \"bookmark\" marks the position of the in the , but since that list has only one element in it, the bookmark won't have much effect.\n\nAs the algorithm progresses, ends up set to the formatting element ( ), and ends up set to the ( ).\n\nThe gets appended (moved) to the , so that the DOM looks like:\n\nA new element is created, and the children of the element are moved to it:\n\nFinally, the new element is appended to the element, so that the DOM looks like:\n\nThe element is removed from the and the , so that when the \"3\" is parsed, it is appended to the element:\n\nError handling in tables is, for historical reasons, especially strange. For example, consider the following markup:\n\nThe highlighted element start tag is not allowed directly inside a table like that, and the parser handles this case by placing the element before the table. (This is called foster parenting.) This can be seen by examining the DOM tree as it stands just after the element's start tag has been seen:\n\n...and then immediately after the element start tag has been seen:\n\nAt this point, the stack of open elements has on it the elements , , , and (in that order, despite the resulting DOM tree); the list of active formatting elements just has the element in it; and the insertion mode is \"in table\".\n\nThe start tag causes the element to be popped off the stack and a start tag to be implied; the and elements are then handled in a rather straight-forward manner, taking the parser through the \"in table body\" and \"in row\" insertion modes, after which the DOM looks as follows:\n\nHere, the stack of open elements has on it the elements , , , , and ; the list of active formatting elements still has the element in it; and the insertion mode is \"in row\".\n\nThe element start tag token, after putting a element on the tree, puts a marker on the list of active formatting elements (it also switches to the \"in cell\" insertion mode).\n\nThe marker means that when the \"aaa\" character tokens are seen, no element is created to hold the resulting node:\n\nThe end tags are handled in a straight-forward manner; after handling them, the stack of open elements has on it the elements , , , and ; the list of active formatting elements still has the element in it (the marker having been removed by the \"td\" end tag token); and the insertion mode is \"in table body\".\n\nThus it is that the \"bbb\" character tokens are found. These trigger the \"in table text\" insertion mode to be used (with the original insertion mode set to \"in table body\"). The character tokens are collected, and when the next token (the element end tag) is seen, they are processed as a group. Since they are not all spaces, they are handled as per the \"anything else\" rules in the \"in table\" insertion mode, which defer to the \"in body\" insertion mode but with foster parenting.\n\nWhen the active formatting elements are reconstructed, a element is created and foster parented, and then the \"bbb\" node is appended to it:\n\nThe stack of open elements has on it the elements , , , , and the new (again, note that this doesn't match the resulting tree!); the list of active formatting elements has the new element in it; and the insertion mode is still \"in table body\".\n\nHad the character tokens been only ASCII whitespace instead of \"bbb\", then that ASCII whitespace would just be appended to the element.\n\nFinally, the is closed by a \"table\" end tag. This pops all the nodes from the stack of open elements up to and including the element, but it doesn't affect the list of active formatting elements, so the \"ccc\" character tokens after the table result in yet another element being created, this time after the table:\n\nScripts that modify the page as it is being parsed\n\nConsider the following markup, which for this example we will assume is the document with URL , being rendered as the content of an in another document with the URL :\n\nUp to the first \"script\" end tag, before the script is parsed, the result is relatively straightforward:\n\nAfter the script is parsed, though, the element and its child element are gone:\n\nThey are, at this point, in the of the aforementioned outer browsing context. However, the stack of open elements still contains the element.\n\nThus, when the second element is parsed, it is inserted into the outer object.\n\nThose parsed into different s than the one the parser was created for do not execute, so the first alert does not show.\n\nOnce the element's end tag is parsed, the element is popped off the stack, and so the next element is in the inner :\n\nThis script does execute, resulting in an alert that says \"https://example.com/inner\".\n\nThe execution of scripts that are moving across multiple documents\n\nElaborating on the example in the previous section, consider the case where the second element is an external script (i.e. one with a attribute). Since the element was not in the parser's when it was created, that external script is not even downloaded.\n\nIn a case where a element with a attribute is parsed normally into its parser's , but while the external script is being downloaded, the element is moved to another document, the script continues to download, but does not execute.\n\nIn general, moving elements between s is considered a bad practice.\n\nThe following markup shows how nested formatting elements (such as ) get collected and continue to be applied even as the elements they are contained in are closed, but that excessive duplicates are thrown away.\n\nThe resulting DOM tree is as follows:\n\nNote how the second element in the markup has no explicit elements, but in the resulting DOM, up to three of each kind of formatting element (in this case three elements with the class attribute, and two unadorned elements) get reconstructed before the element's \"X\".\n\nAlso note how this means that in the final paragraph only six end tags are needed to completely clear the list of active formatting elements, even though nine start tags have been seen up to this point.\n\nFor the purposes of the following algorithm, an element if its element type is one of the void elements, or is , , , , or .\n\nThe following steps form the . The algorithm takes as input a DOM , , or referred to as , a boolean , and a , and returns a string.\n\nThis algorithm serializes the children of the node being serialized, not the node itself.\n• None If serializes as void, then return the empty string.\n• None Let be a string, and initialize it to the empty string.\n• None If is a element, then let instead be the element's template contents (a node).\n• If is a shadow host, then:\n• If one of the following is true:\n• None is true and 's serializable is true; or\n• None If 's mode is \" \", then append \" \". Otherwise, append \" \".\n• None If 's delegates focus is set, then append \" \".\n• None If 's serializable is set, then append \" \".\n• None If 's clonable is set, then append \" \".\n• None Append the value of running the HTML fragment serialization algorithm with , , and (thus recursing into this algorithm for that element).\n• For each child node of , in tree order, run the following steps:\n• None Let be the child node being processed.\n• Append the appropriate string from the following list to : If is an If is an element in the HTML namespace, the MathML namespace, or the SVG namespace, then let be 's local name. Otherwise, let be 's qualified name. For HTML elements created by the HTML parser or , will be lowercase. If 's value is not null, and the element does not have an attribute in its attribute list, then append the string \" \", followed by 's value escaped as described below in attribute mode, followed by a U+0022 QUOTATION MARK character (\"). For each attribute that the element has, append a U+0020 SPACE character, the attribute's serialized name as described below, a U+003D EQUALS SIGN character (=), a U+0022 QUOTATION MARK character (\"), the attribute's value, escaped as described below in attribute mode, and a second U+0022 QUOTATION MARK character (\"). An for the purposes of the previous paragraph must be determined as follows: If the attribute has no namespace The attribute's serialized name is the attribute's local name. For attributes on HTML elements set by the HTML parser or by , the local name will be lowercase. If the attribute is in the XML namespace The attribute's serialized name is the string \" \" followed by the attribute's local name. If the attribute is in the XMLNS namespace and the attribute's local name is The attribute's serialized name is the string \" \". If the attribute is in the XMLNS namespace and the attribute's local name is not The attribute's serialized name is the string \" \" followed by the attribute's local name. If the attribute is in the XLink namespace The attribute's serialized name is the string \" \" followed by the attribute's local name. If the attribute is in some other namespace The attribute's serialized name is the attribute's qualified name. While the exact order of attributes is implementation-defined, and may depend on factors such as the order that the attributes were given in the original markup, the sort order must be stable, such that consecutive invocations of this algorithm serialize an element's attributes in the same order. If serializes as void, then continue on to the next child node at this point. Append the value of running the HTML fragment serialization algorithm with , , and (thus recursing into this algorithm for that node), followed by a U+003C LESS-THAN SIGN character (<), a U+002F SOLIDUS character (/), again, and finally a U+003E GREATER-THAN SIGN character (>). If the parent of is a , , , , , , or element, or if the parent of is a element and scripting is enabled for the node, then append the value of 's data literally. Otherwise, append the value of 's data, escaped as described below. Append \" \" (U+003C LESS-THAN SIGN, U+0021 EXCLAMATION MARK, U+002D HYPHEN-MINUS, U+002D HYPHEN-MINUS), followed by the value of 's data, followed by the literal string \" \" (U+002D HYPHEN-MINUS, U+002D HYPHEN-MINUS, U+003E GREATER-THAN SIGN). Append \" \" (U+003C LESS-THAN SIGN, U+003F QUESTION MARK), followed by the value of 's IDL attribute, followed by a single U+0020 SPACE character, followed by the value of 's data, followed by a single U+003E GREATER-THAN SIGN character (>). Append \" \" (U+003C LESS-THAN SIGN, U+0021 EXCLAMATION MARK, U+0044 LATIN CAPITAL LETTER D, U+004F LATIN CAPITAL LETTER O, U+0043 LATIN CAPITAL LETTER C, U+0054 LATIN CAPITAL LETTER T, U+0059 LATIN CAPITAL LETTER Y, U+0050 LATIN CAPITAL LETTER P, U+0045 LATIN CAPITAL LETTER E), followed by a space (U+0020 SPACE), followed by the value of 's name, followed by \" \" (U+003E GREATER-THAN SIGN).\n\nIt is possible that the output of this algorithm, if parsed with an HTML parser, will not return the original tree structure. Tree structures that do not roundtrip a serialize and reparse step can also be produced by the HTML parser itself, although such cases are typically non-conforming.\n\nFor historical reasons, this algorithm does not round-trip an initial U+000A LINE FEED (LF) character in , , or elements, even though (in the first two cases) the markup being round-tripped can be conforming. The HTML parser will drop such a character during parsing, but this algorithm does not serialize an extra U+000A LINE FEED (LF) character.\n\nBecause of the special role of the attribute in signaling the creation of customized built-in elements, in that it provides a mechanism for parsed HTML to set the element's value, we special-case its handling during serialization. This ensures that an element's value is preserved through serialize-parse roundtrips.\n\n(for the purposes of the algorithm above) consists of running the following steps:\n• None Replace any occurrence of the \" \" character by the string \" \".\n• None Replace any occurrences of the U+00A0 NO-BREAK SPACE character by the string \" \".\n• None If the algorithm was invoked in the attribute mode, replace any occurrences of the \" \" character by the string \" \".\n• None If the algorithm was not invoked in the attribute mode, replace any occurrences of the \" \" character by the string \" \", and any occurrences of the \" \" character by the string \" \".\n\nThe , given an node , string , and an optional boolean (default false) is the following steps. They return a list of zero or more nodes.\n\nParts marked in algorithms in the HTML parser section are parts that only occur if the parser was created for the purposes of this algorithm. The algorithms have been annotated with such markings for informational purposes only; such markings have no normative weight. If it is possible for a condition described as a fragment case to occur even when the parser wasn't created for the purposes of handling this algorithm, then that is an error in the specification.\n• None Let be a node whose type is \" \".\n• None If 's node document is in quirks mode, then set 's mode to \" \".\n• None Otherwise, if 's node document is in limited-quirks mode, then set 's mode to \" \".\n• None If is true, then set 's allow declarative shadow roots to true.\n• None Create a new HTML parser, and associate it with .\n• Set the state of the HTML parser's tokenization stage as follows, switching on the element: Switch the tokenizer to the RCDATA state. Switch the tokenizer to the RAWTEXT state. Switch the tokenizer to the script data state. If the scripting flag is enabled, switch the tokenizer to the RAWTEXT state. Otherwise, leave the tokenizer in the data state. Switch the tokenizer to the PLAINTEXT state. Leave the tokenizer in the data state. For performance reasons, an implementation that does not report errors and that uses the actual state machine described in this specification directly could use the PLAINTEXT state instead of the RAWTEXT and script data states where those are mentioned in the list above. Except for rules regarding parse errors, they are equivalent, since there is no appropriate end tag token in the fragment case, yet they involve far fewer state transitions.\n• None Let be the result of creating an element given , \" \", and the HTML namespace.\n• None Set up the HTML parser's stack of open elements so that it contains just the single element .\n• None If is a element, then push \"in template\" onto the stack of template insertion modes so that it is the new current template insertion mode.\n• Create a start tag token whose name is the local name of and whose attributes are the attributes of . Let this start tag token be the start tag token of ; e.g. for the purposes of determining if it is an HTML integration point.\n• The parser will reference the element as part of that algorithm.\n• None Set the HTML parser's element pointer to the nearest node to that is a element (going straight up the ancestor chain, and including the element itself, if it is a element), if any. (If there is no such element, the element pointer keeps its initial value, null.)\n• None Place the into the input stream for the HTML parser just created. The encoding confidence is irrelevant.\n• None Start the HTML parser and let it run until it has consumed all the characters just inserted into the input stream.\n\nThis table lists the character reference names that are supported by HTML, and the code points to which they refer. It is referenced by the previous sections.\n\nIt is intentional, for legacy compatibility, that many code points have multiple character reference names. For example, some appear both with and without the trailing semicolon, or with different capitalizations.\n\nThis data is also available as a JSON file.\n\nThe glyphs displayed above are non-normative. Refer to Unicode for formal definitions of the characters listed above.\n\nThe character reference names originate from , though only the above is considered normative. [XMLENTITY]\n\nThis list is static and will not be expanded or changed in the future.\n\nThis section only describes the rules for XML resources. Rules for resources are discussed in the section above entitled \"The HTML syntax\".\n\nUsing the XML syntax is not recommended, for reasons which include the fact that there is no specification which defines the rules for how an XML parser must map a string of bytes or characters into a object, as well as the fact that the XML syntax is essentially unmaintained — in that, it’s not expected that any further features will ever be added to the XML syntax (even when such features have been added to the HTML syntax).\n\nThe XML syntax for HTML was formerly referred to as \"XHTML\", but this specification does not use that term (among other reasons, because no such term is used for the HTML syntaxes of MathML and SVG).\n\nThe syntax for XML is defined in and . [XML] [XMLNS]\n\nThis specification does not define any syntax-level requirements beyond those defined for XML proper.\n\nXML documents may contain a if desired, but this is not required to conform to this specification. This specification does not define a public or system identifier, nor provide a formal DTD.\n\nAccording to , XML processors are not guaranteed to process the external DTD subset referenced in the DOCTYPE. This means, for example, that using entity references for characters in XML documents is unsafe if they are defined in an external file (except for , , , , and ).\n\nThis section describes the relationship between XML and the DOM, with a particular emphasis on how this interacts with HTML.\n\nAn , for the purposes of this specification, is a construct that follows the rules given in to map a string of bytes or characters into a object.\n\nAt the time of writing, no such rules actually exist.\n\nAn XML parser is either associated with a object when it is created, or creates one implicitly.\n\nThis must then be populated with DOM nodes that represent the tree structure of the input passed to the parser, as defined by , , and . When creating DOM nodes representing elements, the create an element for a token algorithm or some equivalent that operates on appropriate XML data structures must be used, to ensure the proper element interfaces are created and that custom elements are set up correctly.\n\nFor the operations that the XML parser performs on the 's tree, the user agent must act as if elements and attributes were individually appended and set respectively so as to trigger rules in this specification regarding what happens when an element is inserted into a document or has its attributes set, and 's requirements regarding mutation observers mean that mutation observers are fired. [XML] [XMLNS] [DOM] [UIEVENTS]\n\nBetween the time an element's start tag is parsed and the time either the element's end tag is parsed or the parser detects a well-formedness error, the user agent must act as if the element was in a stack of open elements.\n\nThis is used by various elements to only start certain processes once they are popped off of the stack of open elements.\n\nThis specification provides the following additional information that user agents should use when retrieving an external entity: the public identifiers given in the following list all correspond to the URL given by this link. (This URL is a DTD containing the entity declarations for the names listed in the named character references section.) [XML]\n\nFurthermore, user agents should attempt to retrieve the above external entity's content when one of the above public identifiers is used, and should not attempt to retrieve any other external entity's content.\n\nThis is not strictly a violation of , but it does contradict the spirit of 's requirements. This is motivated by a desire for user agents to all handle entities in an interoperable fashion without requiring any network access for handling external subsets. [XML]\n\nXML parsers can be invoked with or . Except where otherwise specified, XML parsers are invoked with XML scripting support enabled.\n\nWhen an XML parser with XML scripting support enabled creates a element, it must have its parser document set and its force async set to false. If the parser was created as part of the XML fragment parsing algorithm, then the element's already started must be set to true. When the element's end tag is subsequently parsed, the user agent must perform a microtask checkpoint, and then prepare the element. If this causes there to be a pending parsing-blocking script, then the user agent must run the following steps:\n• None Block this instance of the XML parser, such that the event loop will not run tasks that invoke it.\n• None Spin the event loop until the parser's has no style sheet that is blocking scripts and the pending parsing-blocking script's ready to be parser-executed is true.\n• None Unblock this instance of the XML parser, such that tasks that invoke it can again be run.\n• None Execute the script element given by the pending parsing-blocking script.\n\nSince the API is not available for XML documents, much of the complexity in the HTML parser is not needed in the XML parser.\n\nWhen the XML parser has XML scripting support disabled, none of this happens.\n\nWhen an XML parser would append a node to a element, it must instead append it to the element's template contents (a node).\n\nThis is a willful violation of ; unfortunately, XML is not formally extensible in the manner that is needed for processing. [XML]\n\nWhen an XML parser creates a object, its node document must be set to the node document of the node into which the newly created node is to be inserted.\n\nCertain algorithms in this specification characters one string at a time. In such cases, the XML parser must act as it would have if faced with a single string consisting of the concatenation of all those characters.\n\nWhen an XML parser reaches the end of its input, it must stop parsing, following the same rules as the HTML parser. An XML parser can also be aborted, which must again be done in the same way as for an HTML parser.\n\nFor the purposes of conformance checkers, if a resource is determined to be in the XML syntax, then it is an XML document.\n\nThe for a or node either returns a fragment of XML that represents that node or throws an exception.\n\nFor s, the algorithm must return a string in the form of a document entity, if none of the error cases below apply.\n\nFor s, the algorithm must return a string in the form of an internal general parsed entity, if none of the error cases below apply.\n\nIn both cases, the string returned must be XML namespace-well-formed and must be an isomorphic serialization of all of that node's relevant child nodes, in tree order. User agents may adjust prefixes and namespace declarations in the serialization (and indeed might be forced to do so in some cases to obtain namespace-well-formed XML). User agents may use a combination of regular text and character references to represent nodes in the DOM.\n\nA node's are those that apply given the following rules:\n\nFor s, if any of the elements in the serialization are in no namespace, the default namespace in scope for those elements must be explicitly declared as the empty string. (This doesn't apply in the case.) [XML] [XMLNS]\n\nFor the purposes of this section, an internal general parsed entity is considered XML namespace-well-formed if a document consisting of an element with no namespace declarations whose contents are the internal general parsed entity would itself be XML namespace-well-formed.\n\nIf any of the following error cases are found in the DOM subtree being serialized, then the algorithm must throw an \" \" instead of returning a string:\n• A node that has an external subset public identifier that contains characters that are not matched by the XML production. [XML]\n• A node that has an external subset system identifier that contains both a U+0022 QUOTATION MARK (\") and a U+0027 APOSTROPHE (') or that contains characters that are not matched by the XML production. [XML]\n• A node with a local name containing a U+003A COLON (:).\n• A node with a local name that does not match the XML production. [XML]\n• An node with no namespace whose local name is the lowercase string \" \". [XMLNS]\n• An node with two or more attributes with the same local name and namespace.\n• An node, node, node, or node whose data contains characters that are not matched by the XML production. [XML]\n• A node whose data contains two adjacent U+002D HYPHEN-MINUS characters (-) or ends with such a character.\n• A node whose target name is an ASCII case-insensitive match for the string \" \".\n• A node whose target name contains a U+003A COLON (:).\n• A node whose data contains the string \" \".\n\nThese are the only ways to make a DOM unserialisable. The DOM enforces all the other XML constraints; for example, trying to append two elements to a node will throw a \" \" .\n\nThe given an node and a string , runs the following steps. They return a list of nodes.\n• Feed the parser just created the string corresponding to the start tag of , declaring all the namespace prefixes that are in scope on that element in the DOM, as well as declaring the default namespace (if any) that is in scope on that element in the DOM. A namespace prefix is in scope if the DOM method on the element would return a non-null value for that prefix. The default namespace is the namespace for which the DOM method on the element would return true. No is passed to the parser, and therefore no external subset is referenced, and therefore no entities will be recognized.\n• None Feed the parser just created the string .\n• None Feed the parser just created the string corresponding to the end tag of .\n• None If there is an XML well-formedness or XML namespace well-formedness error, then throw a \" \" .\n• None If the document element of the resulting has any sibling nodes, then throw a \" \" .\n\nUser agents are not required to present HTML documents in any particular way. However, this section provides a set of suggestions for rendering HTML documents that, if followed, are likely to lead to a user experience that closely resembles the experience intended by the documents' authors. So as to avoid confusion regarding the normativity of this section, \"must\" has not been used. Instead, the term \"expected\" is used to indicate behavior that will lead to this experience. For the purposes of conformance for user agents designated as supporting the suggested default rendering, the term \"expected\" in this section has the same conformance implications as \"must\".\n\nThe suggestions in this section are generally expressed in CSS terms. User agents are expected to either support CSS, or translate from the CSS rules given in this section to approximations for other presentation mechanisms.\n\nIn the absence of style-layer rules to the contrary (e.g. author style sheets), user agents are expected to render an element so that it conveys to the user the meaning that the element represents, as described by this specification.\n\nThe suggestions in this section generally assume a visual output medium with a resolution of 96dpi or greater, but HTML is intended to apply to multiple media (it is a media-independent language). User agent implementers are encouraged to adapt the suggestions in this section to their target media.\n\nAn element is if it has any associated CSS layout boxes, SVG layout boxes, or some equivalent in other styling languages.\n\nJust being off-screen does not mean the element is not being rendered. The presence of the attribute normally means the element is not being rendered, though this might be overridden by the style sheets.\n\nThe fully active state does not affect whether an element is being rendered or not. Even if a document is not fully active and not shown at all to the user, elements within it can still qualify as \"being rendered\".\n\nAn element is said to when it is being rendered and its associated CSS layout box intersects the viewport.\n\nSimilar to the being rendered state, elements in non-fully active documents can still intersect the viewport. The viewport is not shared between documents and might not always be shown to the user, so an element in a non-fully active document can still intersect the viewport associated with its document.\n\nThis specification does not define the precise timing for when the intersection is tested, but it is suggested that the timing match that of the Intersection Observer API. [INTERSECTIONOBSERVER]\n\nAn element is delegating its rendering to its children if it is not being rendered but its children (if any) could be rendered, as a result of CSS 'display: contents', or some equivalent in other styling languages. [CSSDISPLAY]\n\nUser agents that do not honor author-level CSS style sheets are nonetheless expected to act as if they applied the CSS rules given in these sections in a manner consistent with this specification and the relevant CSS and Unicode specifications. [CSS] [UNICODE] [BIDI]\n\nThis is especially important for issues relating to the 'display', 'unicode-bidi', and 'direction' properties.\n\nThe CSS rules given in these subsections are, except where otherwise specified, expected to be used as part of the user-agent level style sheet defaults for all documents that contain HTML elements.\n\nSome rules are intended for the author-level zero-specificity presentational hints part of the CSS cascade; these are explicitly called out as .\n\nWhen the text below says that an attribute on an element (or properties) , it means that if has an attribute set, and parsing that attribute's value using the rules for parsing non-negative integers doesn't generate an error, then the user agent is expected to use the parsed value as a pixel length for a presentational hint for .\n\nWhen the text below says that an attribute on an element (or properties) , it means that if has an attribute set, and parsing that attribute's value using the rules for parsing dimension values doesn't generate an error, then the user agent is expected to use the parsed dimension as the value for a presentational hint for , with the value given as a pixel length if the dimension was a length, and with the value given as a percentage if the dimension was a percentage.\n\nWhen the text below says that an attribute on an element maps to the dimension property (ignoring zero) (or properties) , it means that if has an attribute set, and parsing that attribute's value using the rules for parsing nonzero dimension values doesn't generate an error, then the user agent is expected to use the parsed dimension as the value for a presentational hint for , with the value given as a pixel length if the dimension was a length, and with the value given as a percentage if the dimension was a percentage.\n\nWhen the text below says that a pair of attributes and on an element , it means that if has both attributes and , and parsing those attributes' values using the rules for parsing non-negative integers doesn't generate an error for either, then the user agent is expected to use the parsed integers as a presentational hint for the 'aspect-ratio' property of the form .\n\nWhen the text below says that a pair of attributes and on an element map to the aspect-ratio property (using dimension rules) , it means that if has both attributes and , and parsing those attributes' values using the rules for parsing dimension values doesn't generate an error or return a percentage for either, then the user agent is expected to use the parsed dimensions as a presentational hint for the 'aspect-ratio' property of the form .\n\nWhen a user agent is to of a node, the user agent is expected to align only those descendants that have both their 'margin-inline-start' and 'margin-inline-end' properties computing to a value other than 'auto', that are over-constrained and that have one of those two margins with a used value forced to a greater value, and that do not themselves have an applicable attribute. When multiple elements are to align a particular descendant, the most deeply nested such element is expected to override the others. Aligned elements are expected to be aligned by having the used values of their margins on the line-left and line-right sides be set accordingly. [CSSLOGICAL] [CSSWM]\n\nFor each property in the table below, given a element, the first attribute that exists maps to the pixel length property on the element. If none of the attributes for a property are found, or if the value of the attribute that was found cannot be parsed successfully, then a default value of 8px is expected to be used for that property instead.\n\nIf the element's node document's node navigable is a child navigable, and the container of that navigable is a or element, then the of the element is that or element. Otherwise, there is no container frame element.\n\nThe above requirements imply that a page can change the margins of another page (including one from another origin) using, for example, an . This is potentially a security risk, as it might in some cases allow an attack to contrive a situation in which a page is rendered not as the author intended, possibly for the purposes of phishing or otherwise misleading the user.\n\nIf a 's node navigable is a child navigable, then it is expected to be positioned and sized to fit inside the content box of the container of that navigable. If the container is not being rendered, the navigable is expected to have a viewport with zero width and zero height.\n\nIf a 's node navigable is a child navigable, the container of that navigable is a or element, that element has a attribute, and that attribute's value is an ASCII case-insensitive match for the string \" \", \" \", or \" \", then the user agent is expected to prevent any scrollbars from being shown for the viewport of the 's node navigable, regardless of the 'overflow' property that applies to that viewport.\n\nWhen a element has a attribute set to a non-empty value, the new value is expected to be encoding-parsed-and-serialized relative to the element's node document, and if that does not return failure, the user agent is expected to treat the attribute as a presentational hint setting the element's 'background-image' property to the return value.\n\nWhen a element has a attribute set, the new value is expected to be parsed using the rules for parsing a legacy color value, and if that does not return failure, the user agent is expected to treat the attribute as a presentational hint setting the element's 'background-color' property to the resulting color.\n\nWhen a element has a attribute, its value is expected to be parsed using the rules for parsing a legacy color value, and if that does not return failure, the user agent is expected to treat the attribute as a presentational hint setting the element's 'color' property to the resulting color.\n\nWhen a element has a attribute, its value is expected to be parsed using the rules for parsing a legacy color value, and if that does not return failure, the user agent is expected to treat the attribute as a presentational hint setting the 'color' property of any element in the matching the pseudo-class to the resulting color.\n\nWhen a element has a attribute, its value is expected to be parsed using the rules for parsing a legacy color value, and if that does not return failure, the user agent is expected to treat the attribute as a presentational hint setting the 'color' property of any element in the matching the pseudo-class to the resulting color.\n\nWhen a element has an attribute, its value is expected to be parsed using the rules for parsing a legacy color value, and if that does not return failure, the user agent is expected to treat the attribute as a presentational hint setting the 'color' property of any element in the matching the pseudo-class and either the pseudo-class or the pseudo-class to the resulting color.\n\nThe following rules are also expected to apply, as presentational hints:\n\nIn quirks mode, the following rules are also expected to apply:\n\nThe element, and the element when it has an attribute whose value is an ASCII case-insensitive match for either the string \" \" or the string \" \", are expected to center text within themselves, as if they had their 'text-align' property set to 'center' in a presentational hint, and to align descendants to the center.\n\nThe element, when it has an attribute whose value is an ASCII case-insensitive match for the string \" \", is expected to left-align text within itself, as if it had its 'text-align' property set to 'left' in a presentational hint, and to align descendants to the left.\n\nThe element, when it has an attribute whose value is an ASCII case-insensitive match for the string \" \", is expected to right-align text within itself, as if it had its 'text-align' property set to 'right' in a presentational hint, and to align descendants to the right.\n\nThe element, when it has an attribute whose value is an ASCII case-insensitive match for the string \" \", is expected to full-justify text within itself, as if it had its 'text-align' property set to 'justify' in a presentational hint, and to align descendants to the left.\n\nThe following rules are also expected to apply, as presentational hints:\n\nFor the purposes of the CSS ruby model, runs of children of elements that are not or elements are expected to be wrapped in anonymous boxes whose 'display' property has the value 'ruby-base'. [CSSRUBY]\n\nWhen a particular part of a ruby has more than one annotation, the annotations should be distributed on both sides of the base text so as to minimize the stacking of ruby annotations on one side.\n\nWhen it becomes possible to do so, the preceding requirement will be updated to be expressed in terms of CSS ruby. (Currently, CSS ruby does not handle nested elements or multiple sequential elements, which is how this semantic is expressed.)\n\nUser agents that do not support correct ruby rendering are expected to render parentheses around the text of elements in the absence of elements.\n\nUser agents are expected to support the 'clear' property on inline elements (in order to render elements with attributes) in the manner described in the non-normative note to this effect in .\n\nThe initial value for the 'color' property is expected to be black. The initial value for the 'background-color' property is expected to be 'transparent'. The canvas's background is expected to be white.\n\nWhen a element has a attribute, its value is expected to be parsed using the rules for parsing a legacy color value, and if that does not return failure, the user agent is expected to treat the attribute as a presentational hint setting the element's 'color' property to the resulting color.\n\nWhen a element has a attribute, the user agent is expected to treat the attribute as a presentational hint setting the element's 'font-family' property to the attribute's value.\n\nWhen a element has a attribute, the user agent is expected to use the following steps, known as the , to treat the attribute as a presentational hint setting the element's 'font-size' property:\n• None Let be the attribute's value.\n• None Let be a pointer into , initially pointing at the start of the string.\n• None If is past the end of , there is no presentational hint. Return.\n• None If the character at is a U+002B PLUS SIGN character (+), then let be relative-plus, and advance to the next character. Otherwise, if the character at is a U+002D HYPHEN-MINUS character (-), then let be relative-minus, and advance to the next character. Otherwise, let be absolute.\n• None Collect a sequence of code points that are ASCII digits from given , and let the resulting sequence be .\n• None If is the empty string, there is no presentational hint. Return.\n• None Interpret as a base-ten integer. Let be the resulting number.\n• If is relative-plus, then increment by 3. If is relative-minus, then let be the result of subtracting from 3.\n• None If is greater than 7, let it be 7.\n• None If is less than 1, let it be 1.\n• Set 'font-size' to the keyword corresponding to the value of according to the following table:\n\nWhen an element's attribute is in the auto state and its attribute is in the Text state, then the user agent is expected to act as if it had a user-agent-level style sheet rule setting the 'unicode-bidi' property to 'plaintext'.\n\nInput fields (i.e. elements, and elements when their attribute is in the Text, Search, Telephone, URL, or Email state) are expected to present an editing user interface with a directionality that matches the element's 'direction' property.\n\nWhen the document's character encoding is ISO-8859-8, the following rules are additionally expected to apply, following those above: [ENCODING]\n\nIn the following CSS block, is shorthand for the following selector:\n\nThe shorthand is used to keep this block at least mildly readable.\n\nThe following rules are also expected to apply, as presentational hints:\n\nWhen rendering elements, non-CSS user agents are expected to use the ordinal value of the element to render the counter in the list item marker.\n\nFor CSS user agents, some aspects of rendering list items are defined by the specification. Additionally, the following attribute mappings are expected to apply: [CSSLISTS]\n\nWhen an element has a attribute, and parsing that attribute's value using the rules for parsing integers doesn't generate an error, the user agent is expected to use the parsed value as a presentational hint for the 'counter-set' property of the form .\n\nWhen an element has a attribute or a attribute, or both, the user agent is expected to use the following steps to treat the attributes as a presentational hint for the 'counter-reset' property:\n• None If the element has a attribute, then set to the result of parsing the attribute's value using the rules for parsing integers.\n• If the element has a attribute, then:\n• None If is an integer, then increment by 1 and return .\n• Either the attribute was absent, or parsing its value resulted in an error.\n• \n• None If is an integer, then decrement by 1 and return .\n• None Otherwise, there is no presentational hint.\n\nThe following rules are also expected to apply, as presentational hints:\n\nIn quirks mode, the following rules are also expected to apply:\n\nFor the purposes of the CSS table model, the element is expected to be treated as if it was present as many times as its attribute specifies.\n\nFor the purposes of the CSS table model, the element, if it contains no element, is expected to be treated as if it had as many such children as its attribute specifies.\n\nFor the purposes of the CSS table model, the and attributes on and elements are expected to provide the special knowledge regarding cells spanning rows and columns.\n\nIn HTML documents, the following rules are also expected to apply:\n\nThe element's attribute maps to the pixel length property 'border-spacing' on the element.\n\nThe element's attribute maps to the pixel length properties 'padding-top', 'padding-right', 'padding-bottom', and 'padding-left' of any and elements that have corresponding cells in the table corresponding to the element.\n\nThe element's attribute maps to the dimension property 'height' on the element.\n\nThe element's attribute maps to the dimension property (ignoring zero) 'width' on the element.\n\nThe element's attribute maps to the dimension property 'width' on the element.\n\nThe , , and elements' attribute maps to the dimension property 'height' on the element.\n\nThe element's attribute maps to the dimension property 'height' on the element.\n\nThe and elements' attributes map to the dimension property (ignoring zero) 'height' on the element.\n\nThe and elements' attributes map to the dimension property (ignoring zero) 'width' on the element.\n\nThe , , , , , and elements, when they have an attribute whose value is an ASCII case-insensitive match for either the string \" \" or the string \" \", are expected to center text within themselves, as if they had their 'text-align' property set to 'center' in a presentational hint, and to align descendants to the center.\n\nThe , , , , , and elements, when they have an attribute whose value is an ASCII case-insensitive match for the string \" \", are expected to left-align text within themselves, as if they had their 'text-align' property set to 'left' in a presentational hint, and to align descendants to the left.\n\nThe , , , , , and elements, when they have an attribute whose value is an ASCII case-insensitive match for the string \" \", are expected to right-align text within themselves, as if they had their 'text-align' property set to 'right' in a presentational hint, and to align descendants to the right.\n\nThe , , , , , and elements, when they have an attribute whose value is an ASCII case-insensitive match for the string \" \", are expected to full-justify text within themselves, as if they had their 'text-align' property set to 'justify' in a presentational hint, and to align descendants to the left.\n\nUser agents are expected to have a rule in their user agent style sheet that matches elements that have a parent node whose computed value for the 'text-align' property is its initial value, whose declaration block consists of just a single declaration that sets the 'text-align' property to the value 'center'.\n\nWhen a , , , , , , or element has a attribute set to a non-empty value, the new value is expected to be encoding-parsed-and-serialized relative to the element's node document, and if that does not return failure, the user agent is expected to treat the attribute as a presentational hint setting the element's 'background-image' property to the return value.\n\nWhen a , , , , , , or element has a attribute set, the new value is expected to be parsed using the rules for parsing a legacy color value, and if that does not return failure, the user agent is expected to treat the attribute as a presentational hint setting the element's 'background-color' property to the resulting color.\n\nWhen a element has a attribute, its value is expected to be parsed using the rules for parsing a legacy color value, and if that does not return failure, the user agent is expected to treat the attribute as a presentational hint setting the element's 'border-top-color', 'border-right-color', 'border-bottom-color', and 'border-left-color' properties to the resulting color.\n\nThe element's attribute maps to the pixel length properties 'border-top-width', 'border-right-width', 'border-bottom-width', 'border-left-width' on the element. If the attribute is present but parsing the attribute's value using the rules for parsing non-negative integers generates an error, a default value of 1px is expected to be used for that property instead.\n\nRules marked \" only if border is not equivalent to zero \" in the CSS block above is expected to only be applied if the attribute mentioned in the selectors for the rule is not only present but, when parsed using the rules for parsing non-negative integers, is also found to have a value other than zero or to generate an error.\n\nIn quirks mode, a element or a element that has a attribute but also has a attribute whose value, when parsed using the rules for parsing nonzero dimension values, is found to be a length (not an error or a number classified as a percentage), is expected to have a presentational hint setting the element's 'white-space' property to 'normal', overriding the rule in the CSS block above that sets it to 'nowrap'.\n\nA node is if it is a text node that is not inter-element whitespace, or if it is an element node.\n\nA node is if it is an element that contains no substantial nodes.\n\nThe are the following elements: , , , , , , , , , , , , , , , ,\n\nIn quirks mode, any element with default margins that is the child of a , , or element and has no substantial previous siblings is expected to have a user-agent level style sheet rule that sets its 'margin-block-start' property to zero.\n\nIn quirks mode, any element with default margins that is the child of a , , or element, has no substantial previous siblings, and is blank, is expected to have a user-agent level style sheet rule that sets its 'margin-block-end' property to zero also.\n\nIn quirks mode, any element with default margins that is the child of a or element, has no substantial following siblings, and is blank, is expected to have a user-agent level style sheet rule that sets its 'margin-block-start' property to zero.\n\nIn quirks mode, any element that is the child of a or element and has no substantial following siblings, is expected to have a user-agent level style sheet rule that sets its 'margin-block-end' property to zero.\n\nIn quirks mode, the following rules are also expected to apply:\n\nEach kind of form control is also described in the Widgets section, which describes the look and feel of the control.\n\nFor elements where the attribute is not in the Hidden state or the Image Button state, and that are being rendered, are expected to act as follows:\n• None The inner display type is always 'flow-root'.\n\nThe following rules are also expected to apply, as presentational hints:\n\nIf an element has either a attribute or a attribute, and furthermore also has a attribute, and parsing that attribute's value using the rules for parsing non-negative integers doesn't generate an error, then the user agent is expected to use the parsed value divided by two as a pixel length for presentational hints for the properties 'border-top-width', 'border-right-width', 'border-bottom-width', and 'border-left-width' on the element.\n\nOtherwise, if an element has neither a attribute nor a attribute, but does have a attribute, and parsing that attribute's value using the rules for parsing non-negative integers doesn't generate an error, then: if the parsed value is one, then the user agent is expected to use the attribute as a presentational hint setting the element's 'border-bottom-width' to 0; otherwise, if the parsed value is greater than one, then the user agent is expected to use the parsed value minus two as a pixel length for presentational hints for the 'height' property on the element.\n\nThe attribute on an element maps to the dimension property 'width' on the element.\n\nWhen an element has a attribute, its value is expected to be parsed using the rules for parsing a legacy color value, and if that does not return failure, the user agent is expected to treat the attribute as a presentational hint setting the element's 'color' property to the resulting color.\n\nThe element, when it generates a CSS box, is expected to act as follows:\n• None The element is expected to establish a new block formatting context.\n• The 'display' property is expected to act as follows:\n• None If the computed value of 'display' is a value such that the outer display type is 'inline', then behave as 'inline-block'. This does not change the computed value.\n• If the element's box has a child box that matches the conditions in the list below, then the first such child box is the 'fieldset' element's :\n• The child's used value of 'float' is 'none'.\n• The child's used value of 'position' is not 'absolute' or 'fixed'.\n• If the element has a rendered legend, then the border is expected to not be painted behind the rectangle defined as follows, using the writing mode of the fieldset:\n• None The block-start edge of the rectangle is the smaller of the block-start edge of the rendered legend's margin rectangle at its static position (ignoring transforms), and the block-start outer edge of the 's border.\n• None The block-end edge of the rectangle is the larger of the block-end edge of the rendered legend's margin rectangle at its static position (ignoring transforms), and the block-end outer edge of the 's border.\n• None The inline-start edge of the rectangle is the smaller of the inline-start edge of the rendered legend's border rectangle at its static position (ignoring transforms), and the inline-start outer edge of the 's border.\n• None The inline-end edge of the rectangle is the larger of the inline-end edge of the rendered legend's border rectangle at its static position (ignoring transforms), and the inline-end outer edge of the 's border.\n• None The space allocated for the element's border on the block-start side is expected to be the element's 'border-block-start-width' or the rendered legend's margin box size in the 's block-flow direction, whichever is greater.\n• None For the purpose of calculating the used 'block-size', if the computed 'block-size' is not 'auto', the space allocated for the rendered legend's margin box that spills out past the border, if any, is expected to be subtracted from the 'block-size'. If the content box's block-size would be negative, then let the content box's block-size be zero instead.\n• None If the element has a rendered legend, then that element is expected to be the first child box.\n• None The anonymous fieldset content box is expected to appear after the rendered legend and is expected to contain the content (including the '::before' and '::after' pseudo-elements) of the element except for the rendered legend, if there is one.\n• None The used value of the 'padding-top', 'padding-right', 'padding-bottom', and 'padding-left' properties are expected to be zero.\n• None For the purpose of calculating the min-content inline size, use the greater of the min-content inline size of the rendered legend and the min-content inline size of the anonymous fieldset content box.\n• None For the purpose of calculating the max-content inline size, use the greater of the max-content inline size of the rendered legend and the max-content inline size of the anonymous fieldset content box.\n\nA element's rendered legend, if any, is expected to act as follows:\n• None The element is expected to establish a new formatting context for its contents. The type of this formatting context is determined by its 'display' value, as usual.\n• The 'display' property is expected to behave as if its computed value was blockified. This does not change the computed value.\n• None If the computed value of 'inline-size' is 'auto', then the used value is the fit-content inline size.\n• None The element is expected to be positioned in the inline direction as is normal for blocks (e.g., taking into account margins and the 'justify-self' property).\n• The element's box is expected to be constrained in the inline direction by the inline content size of the as if it had used its computed inline padding. For example, if the has a specified padding of 50px, then the rendered legend will be positioned 50px in from the 's border. The padding will further apply to the anonymous fieldset content box instead of the element itself.\n• None The element is expected to be positioned in the block-flow direction such that its border box is centered over the border on the block-start side of the element.\n\nA element's is expected to act as follows:\n• The 'display' property is expected to act as follows:\n• None If the computed value of 'display' on the element is 'grid' or 'inline-grid', then set the used value to 'grid'.\n• None If the computed value of 'display' on the element is 'flex' or 'inline-flex', then set the used value to 'flex'.\n• None Otherwise, set the used value to 'flow-root'.\n• The following properties are expected to inherit from the element:\n• None The 'block-size' property is expected to be set to '100%'.\n• None For the purpose of calculating percentage padding, act as if the padding was calculated for the element.\n\nThe following elements can be replaced elements: , , , , , , , and .\n\nThe , , and elements are expected to be treated as replaced elements.\n\nA element that represents embedded content is expected to be treated as a replaced element; the contents of such elements are the element's bitmap, if any, or else a transparent black bitmap with the same natural dimensions as the element. Other elements are expected to be treated as ordinary elements in the rendering model.\n\nAn element that represents an image, plugin, or its content navigable is expected to be treated as a replaced element. Other elements are expected to be treated as ordinary elements in the rendering model.\n\nThe element, when it is exposing a user interface, is expected to be treated as a replaced element about one line high, as wide as is necessary to expose the user agent's user interface features. When an element is not exposing a user interface, the user agent is expected to force its 'display' property to compute to 'none', irrespective of CSS rules.\n\nWhether a element is exposing a user interface is not expected to affect the size of the rendering; controls are expected to be overlaid above the page content without causing any layout changes, and are expected to disappear when the user does not need them.\n\nWhen a element represents a poster frame or frame of video, the poster frame or frame of video is expected to be rendered at the largest size that maintains the aspect ratio of that poster frame or frame of video without being taller or wider than the element itself, and is expected to be centered in the element.\n\nAny subtitles or captions are expected to be overlaid directly on top of their element, as defined by the relevant rendering rules; for WebVTT, those are the rules for updating the display of WebVTT text tracks. [WEBVTT]\n\nWhen the user agent starts exposing a user interface for a element, the user agent should run the rules for updating the text track rendering of each of the text tracks in the element's list of text tracks that are showing and whose text track kind is one of or (e.g., for text tracks based on WebVTT, the rules for updating the display of WebVTT text tracks). [WEBVTT]\n\nResizing and elements does not interrupt video playback or clear the canvas.\n\nThe following CSS rules are expected to apply:\n\nUser agents are expected to render elements and elements whose attributes are in the Image Button state, according to the first applicable rules from the following list:\n\nThe icons mentioned above are expected to be relatively small so as not to disrupt most text but be easily clickable. In a visual environment, for instance, icons could be 16 pixels by 16 pixels square, or 1em by 1em if the images are scalable. In an audio environment, the icon could be a short bleep. The icons are intended to indicate to the user that they can be used to get to whatever options the UA provides for images, and, where appropriate, are expected to provide access to the context menu that would have come up if the user interacted with the actual image.\n\nAll animated images with the same absolute URL and the same image data are expected to be rendered synchronized to the same timeline as a group, with the timeline starting at the time of the least recent addition to the group.\n\nIn other words, when a second image with the same absolute URL and animated image data is inserted into a document, it jumps to the point in the animation cycle that is currently being displayed by the first image.\n\nWhen a user agent is to for an element showing an animated image, all animated images with the same absolute URL and the same image data in that element's node document are expected to restart their animation from the beginning.\n\nThe following CSS rules are expected to apply:\n\nThe following CSS rules are expected to apply when the is in quirks mode:\n\nThe following CSS rules are expected to apply as presentational hints:\n\nWhen an , , , or element, or an element whose attribute is in the Image Button state, has an attribute whose value is an ASCII case-insensitive match for the string \" \" or the string \" \", the user agent is expected to act as if the element's 'vertical-align' property was set to a value that aligns the vertical middle of the element with the parent element's baseline.\n\nThe attribute of , , or elements, and elements with a attribute in the Image Button state, maps to the dimension properties 'margin-left' and 'margin-right' on the element.\n\nThe attribute of , , or elements, and elements with a attribute in the Image Button state, maps to the dimension properties 'margin-top' and 'margin-bottom' on the element.\n\nWhen an element has a attribute whose value, when parsed using the rules for parsing integers, is zero or an error, the user agent is expected to have presentational hints setting the element's 'border-top-width', 'border-right-width', 'border-bottom-width', and 'border-left-width' properties to zero.\n\nWhen an element, element, or element with a attribute in the Image Button state has a attribute whose value, when parsed using the rules for parsing non-negative integers, is found to be a number greater than zero, the user agent is expected to use the parsed value for eight presentational hints: four setting the parsed value as a pixel length for the element's 'border-top-width', 'border-right-width', 'border-bottom-width', and 'border-left-width' properties, and four setting the element's 'border-top-style', 'border-right-style', 'border-bottom-style', and 'border-left-style' properties to the value 'solid'.\n\nThe and attributes on an element's dimension attribute source map to the dimension properties 'width' and 'height' on the element respectively. They similarly map to the aspect-ratio property (using dimension rules) of the element.\n\nThe and attributes on , , , and elements, and elements with a attribute in the Image Button state and that either represents an image or that the user expects will eventually represent an image, map to the dimension properties 'width' and 'height' on the element respectively.\n\nThe and attributes map to the aspect-ratio property (using dimension rules) on and elements, and elements with a attribute in the Image Button state.\n\nThe and attributes map to the aspect-ratio property on elements.\n\nShapes on an image map are expected to act, for the purpose of the CSS cascade, as elements independent of the original element that happen to match the same style rules but inherit from the or element.\n\nFor the purposes of the rendering, only the 'cursor' property is expected to have any effect on the shape.\n\nThus, for example, if an element has a attribute that sets the 'cursor' property to 'help', then when the user designates that shape, the cursor would change to a Help cursor.\n\nSimilarly, if an element had a CSS rule that set its 'cursor' property to 'inherit' (or if no rule setting the 'cursor' property matched the element at all), the shape's cursor would be inherited from the or element of the image map, not from the parent of the element.\n\nThe specification calls elements that can have a native appearance widgets, and defines whether to use that native appearance depending on the 'appearance' property. That logic, in turn, depends on whether each the element is classified as a devolvable widget or non-devolvable widget. This section defines which elements match these concepts for HTML, what their native appearance is, and any particularity of their devolved state or primitive appearance. [CSSUI]\n\nThe following elements can have a native appearance for the purpose of the CSS 'appearance' property.\n\nSeveral widgets have their rendering controlled by the 'writing-mode' CSS property. For the purposes of those widgets, we have the following definitions.\n\nA is when resolving the 'writing-mode' property of the control results in a computed value of 'horizontal-tb'.\n\nA is when resolving the 'writing-mode' property of the control results in a computed value of either 'vertical-rl', 'vertical-lr', 'sideways-rl' or 'sideways-lr'.\n\nWhen an element uses button layout, it is a devolvable widget, and it's native appearance is that of a button.\n\nis as follows:\n• If the element is a element, then the 'display' property is expected to act as follows:\n• None If the computed value of 'display' is 'inline-grid', 'grid', 'inline-flex', 'flex', 'none', or 'contents', then behave as the computed value.\n• None Otherwise, if the computed value of 'display' is a value such that the outer display type is 'inline', then behave as 'inline-block'.\n• None The element is expected to establish a new formatting context for its contents. The type of this formatting context is determined by its 'display' value, as usual.\n• None If the element is absolutely-positioned, then for the purpose of the CSS visual formatting model, act as if the element is a replaced element. [CSS]\n• None If the computed value of 'inline-size' is 'auto', then the used value is the fit-content inline size.\n• None For the purpose of the 'normal' keyword of the 'align-self' property, act as if the element is a replaced element.\n• If the element is an element, or if it is a element and its computed value for 'display' is not 'inline-grid', 'grid', 'inline-flex', or 'flex', then the element's box has a child with the following behaviors:\n• None The box is a block-level block container that establishes a new block formatting context (i.e., 'display' is 'flow-root').\n• None If the box does not overflow in the horizontal axis, then it is centered horizontally.\n• None If the box does not overflow in the vertical axis, then it is centered vertically. Otherwise, there is no anonymous button content box.\n\nNeed to define the expected primitive appearance.\n\nThe element, when it generates a CSS box, is expected to depict a button and to use button layout whose anonymous button content box's contents (if there is an anonymous button content box) are the child boxes the element's box would otherwise have.\n\nThe element is expected to have an internal shadow tree with three child elements:\n• The first child element is a that is expected to take the element's first element child, if any. This element has a single child element called the which has text content that is implementation-defined (and probably locale-specific). The element that this slot represents is expected to allow the user to request the details be shown or hidden.\n• The second child element is a that is expected to take the element's remaining descendants, if any. This element has no contents. This element is expected to match the '::details-content' pseudo-element. This element is expected to have its attribute set to \" \" when the element does not have an attribute. When it does have the attribute, the attribute is expected to be set to \" \". Because the slots are hidden inside a shadow tree, this attribute is not directly visible to author code. Its impacts, however, are visible. Notably, the choice of instead of, e.g., , impacts the results of various APIs that query layout information.\n• The third child element is either a or element with the following styles for the default summary: The position of this child element relative to the other two is not observable. This means that implementations might have it in a different order relative to its siblings. Implementations might even associate the style with the shadow tree using a mechanism that is not an element.\n\nThe structure of this shadow tree is observable through the ways that the children of the element and the '::details-content' pseudo-element respond to CSS styles.\n\nAn element whose attribute is in the Text, Telephone, URL, or Email state, is a devolvable widget. Its expected native appearance is to render as an 'inline-block' box depicting a one-line text control.\n\nAn element whose attribute is in the Search state is a devolvable widget. Its expected native appearance is to render as an 'inline-block' box depicting a one-line text control. If the computed value of the element's 'appearance' property is not , it may have a distinct style indicating that it is a search field.\n\nAn element whose attribute is in the Password state is a devolvable widget. Its expected native appearance is to render as an 'inline-block' box depicting a one-line text control that obscures data entry.\n\nFor elements whose attribute is in one of the above states, the used value of the 'line-height' property must be a length value that is no smaller than what the used value would be for 'line-height: normal'.\n\nThe used value will not be the actual keyword 'normal'. Also, this rule does not affect the computed value.\n\nIf these text controls provide a text selection, then, when the user changes the current selection, the user agent is expected to queue an element task on the user interaction task source given the element to fire an event named at the element, with the attribute initialized to true.\n\nAn element whose attribute is in one of the above states is an element with default preferred size, and user agents are expected to apply the 'field-sizing' CSS property to the element. User agents are expected to determine the inline size of its intrinsic size by the following steps:\n• If the 'field-sizing' property on the element has a computed value of 'content', the inline size is determined by the text which the element shows. The text is either a value or a short hint specified by the attribute. User agents may take the text caret size into account in the inline size.\n• If the element has a attribute, and parsing that attribute's value using the rules for parsing non-negative integers doesn't generate an error, return the value obtained from applying the converting a character width to pixels algorithm to the value of the attribute.\n• Otherwise, return the value obtained from applying the converting a character width to pixels algorithm to the number 20.\n\nThe algorithm returns ( -1)× + , where is the character width to convert, is the average character width of the primary font for the element for which the algorithm is being run, in pixels, and is the maximum character width of that same font, also in pixels. (The element's 'letter-spacing' property does not affect the result.)\n\nThese text controls are expected to be scroll containers and support scrolling in the inline axis, but not the block axis.\n\nNeed to detail the expected native appearance and primitive appearance.\n\nAn element whose attribute is in the state is a devolvable widget expected to render as an 'inline-block' box depicting a date control.\n\nAn element whose attribute is in the Month state is a devolvable widget expected to render as an 'inline-block' box depicting a month control.\n\nAn element whose attribute is in the Week state is a devolvable widget expected to render as an 'inline-block' box depicting a week control.\n\nAn element whose attribute is in the Time state is a devolvable widget expected to render as an 'inline-block' box depicting a time control.\n\nAn element whose attribute is in the state is a devolvable widget expected to render as an 'inline-block' box depicting a local date and time control.\n\nAn element whose attribute is in the Number state is a devolvable widget expected to render as an 'inline-block' box depicting a number control.\n\nAn element whose attribute is in the Number state is an element with default preferred size, and user agents are expected to apply the 'field-sizing' CSS property to the element. The block size of the intrinsic size is about one line high. If the 'field-sizing' property on the element has a computed value of 'content', the inline size of the intrinsic size is expected to be about as wide as necessary to show the current value. Otherwise, the inline size of the intrinsic size is expected to be about as wide as necessary to show the widest possible value.\n\nAn element whose attribute is in the , Month, Week, Time, or state, is expected to be about one line high, and about as wide as necessary to show the widest possible value.\n\nNeed to detail the expected native appearance and primitive appearance.\n\nAn element whose attribute is in the Range state is a non-devolvable widget. Its expected native appearance is to render as an 'inline-block' box depicting a slider control.\n\nWhen this control has a horizontal writing mode, the control is expected to be a horizontal slider. Its lowest value is on the right if the 'direction' property has a computed value of 'rtl', and on the left otherwise. When this control has a vertical writing mode, it is expected to be a vertical slider. Its lowest value is on the bottom if the 'direction' property has a computed value of 'rtl', and on the top otherwise.\n\nPredefined suggested values (provided by the attribute) are expected to be shown as tick marks on the slider, which the slider can snap to.\n\nNeed to detail the expected primitive appearance.\n\nThe element as a color well\n\nAn element whose attribute is in the Color state is expected to depict a color well, which, when activated, provides the user with a color picker (e.g. a color wheel or color palette) from which the color can be changed. The element, when it generates a CSS box, is expected to use button layout, that has no child boxes of the anonymous button content box. The anonymous button content box is expected to have a presentational hint setting the 'background-color' property to the element's value.\n\nPredefined suggested values (provided by the attribute) are expected to be shown in the color picker interface, not on the color well itself.\n\nNeed to detail the expected native appearance and primitive appearance.\n\nThe element as a checkbox and radio button widgets\n\nAn element whose attribute is in the Checkbox state is a non-devolvable widget expected to render as an 'inline-block' box containing a single checkbox control, with no label.\n\nNeed to detail the expected native appearance and primitive appearance.\n\nAn element whose attribute is in the Radio Button state is a non-devolvable widget expected to render as an 'inline-block' box containing a single radio button control, with no label.\n\nNeed to detail the expected native appearance and primitive appearance.\n\nAn element whose attribute is in the File Upload state, when it generates a CSS box, is expected to render as an 'inline-block' box containing a span of text giving the filename(s) of the selected files, if any, followed by a button that, when activated, provides the user with a file picker from which the selection can be changed. The button is expected to use button layout and match the '::file-selector-button' pseudo-element. The contents of its anonymous button content box are expected to be implementation-defined (and possibly locale-specific) text, for example \"Choose file\".\n\nUser agents may handle an element whose attribute is in the File Upload state as an element with default preferred size, and user agents may apply the 'field-sizing' CSS property to the element. If the 'field-sizing' property on the element has a computed value of 'content', the intrinsic size of the element is expected to depend on its content such as the '::file-selector-button' pseudo-element and chosen file names.\n\nAn element whose attribute is in the Submit Button, Reset Button, or Button state, when it generates a CSS box, is expected to depict a button and use button layout and the contents of the anonymous button content box are expected to be the text of the element's attribute, if any, or text derived from the element's attribute in an implementation-defined (and probably locale-specific) fashion, if not.\n\nThe element, while turned on, is expected to render in an animated fashion according to its attributes as follows:\n\nThe attribute has the meanings described in the following table:\n\nIn any case, the animation should proceed such that there is a delay given by the marquee scroll interval between each frame, and such that the content moves at most the distance given by the marquee scroll distance with each frame.\n\nWhen a element has a attribute set, the value is expected to be parsed using the rules for parsing a legacy color value, and if that does not return failure, the user agent is expected to treat the attribute as a presentational hint setting the element's 'background-color' property to the resulting color.\n\nThe and attributes on a element map to the dimension properties 'width' and 'height' on the element respectively.\n\nThe natural height of a element with its attribute in the up or down states is 200 CSS pixels.\n\nThe attribute of a element maps to the dimension properties 'margin-top' and 'margin-bottom' on the element. The attribute of a element maps to the dimension properties 'margin-left' and 'margin-right' on the element.\n\nThe element is a devolvable widget. Its expected native appearance is to render as an 'inline-block' box with a 'block-size' of '1em' and a 'inline-size' of '5em', a 'vertical-align' of '-0.2em', and with its contents depicting a gauge.\n\nWhen this element has a horizontal writing mode, the depiction is expected to be of a horizontal gauge. Its minimum value is on the right if the 'direction' property has a computed value of 'rtl', and on the left otherwise. When this element has a vertical writing mode, it is expected to depict a vertical gauge. Its minimum value is on the bottom if the 'direction' property has a computed value of 'rtl', and on the top otherwise.\n\nUser agents are expected to use a presentation consistent with platform conventions for gauges, if any.\n\nRequirements for what must be depicted in the gauge are included in the definition of the element.\n\nNeed to detail the expected primitive appearance.\n\nThe element is a devolvable widget. Its expected native appearance is to render as an 'inline-block' box with a 'block-size' of '1em' and a 'inline-size' of '10em', and a 'vertical-align' of '-0.2em'.\n\nWhen the this element has a horizontal writing mode, the element is expected to be depicted as a horizontal progress bar. The start is on the right and the end is on the left if the 'direction' property on this element has a computed value of 'rtl', and with the start on the left and the end on the right otherwise. When this element has a vertical writing mode, it is expected to be depicted as a vertical progress bar. The start is on the bottom and the end is on the top if the 'direction' property on this element has a computed value of 'rtl', and with the start on the top and the end on the bottom otherwise.\n\nUser agents are expected to use a presentation consistent with platform conventions for progress bars. In particular, user agents are expected to use different presentations for determinate and indeterminate progress bars. User agents are also expected to vary the presentation based on the dimensions of the element.\n\nRequirements for how to determine if the progress bar is determinate or indeterminate, and what progress a determinate progress bar is to show, are included in the definition of the element.\n\nNeed to detail the expected primitive appearance.\n\nThe element is an element with default preferred size, and user agents are expected to apply the 'field-sizing' CSS property to elements.\n\nA element is either a or a , depending on its attributes.\n\nA element whose attribute is present is expected to render as a multi-select list box.\n\nA element whose attribute is absent, and whose display size is greater than 1, is expected to render as a single-select list box.\n\nWhen the element renders as a list box, it is a devolvable widget expected to render as an 'inline-block' box. The inline size of its intrinsic size is the width of the 's labels plus the width of a scrollbar. The block size of its intrinsic size is determined by the following steps:\n• If the 'field-sizing' property on the element has a computed value of 'content', return the height necessary to contain all rows for items.\n• If the attribute is absent or it has no valid value, return the height necessary to contain four rows.\n• Otherwise, return the height necessary to contain as many rows for items as given by the element's display size.\n\nA element whose attribute is absent, and whose display size is 1, is expected to render as an 'inline-block' one-line drop-down box. The inline size of its intrinsic size is the width of the 's labels. If the 'field-sizing' property on the element has a computed value of 'content', the inline size of the intrinsic size depends on the shown text. The shown text is typically the label of an of which selectedness is set to true.\n\nWhen the element renders as a drop-down box, it is a devolvable widget. Its appearance in the devolved state, as well as its appearance when the computed value of the element's 'appearance' property is , is that of a drop-down box, including a \"drop-down button\", but not necessarily rendered using a native control of the host operating system. In such a state, CSS properties such as 'color', 'background-color', and 'border' should not be disregarded (as is generally permissible when rendering an element according to its native appearance).\n\nIn either case (list box or drop-down box), the element's items are expected to be the element's list of options, with the element's element children providing headers for groups of options where applicable.\n\nAn element is expected to be rendered by displaying the element's attribute.\n\nAn element is expected to be rendered by displaying the element's label, indented under its element if it has one.\n\nEach sequence of one or more child element siblings may be rendered as a single separator.\n\nThe is the wider of the width necessary to render the widest , and the width necessary to render the widest element in the element's list of options (including its indent, if any).\n\nIf a element contains a placeholder label option, the user agent is expected to render that in a manner that conveys that it is a label, rather than a valid option of the control. This can include preventing the placeholder label option from being explicitly selected by the user. When the placeholder label option's selectedness is true, the control is expected to be displayed in a fashion that indicates that no valid option is currently selected.\n\nUser agents are expected to render the labels in a in such a manner that any alignment remains consistent whether the label is being displayed as part of the page or in a menu control.\n\nNeed to detail the expected native appearance and primitive appearance.\n\nThe element is a devolvable widget expected to render as an 'inline-block' box depicting a multiline text control. If this multiline text control provides a selection, then, when the user changes the current selection, the user agent is expected to queue an element task on the user interaction task source given the element to fire an event named at the element, with the attribute initialized to true.\n\nThe element is an element with default preferred size, and user agents are expected to apply the 'field-sizing' CSS property to elements.\n\nIf the 'field-sizing' property on the element has a computed value of 'content', the intrinsic size is determined from the text which the element shows. The text is either a raw value or a short hint specified by the attribute. User agents may take the text caret size into account in the intrinsic size. Otherwise, its intrinsic size is computed from textarea effective width and textarea effective height (as defined below).\n\nThe of a element is × + , where is the element's character width, is the average character width of the primary font of the element, in CSS pixels, and is the width of a scrollbar, in CSS pixels. (The element's 'letter-spacing' property does not affect the result.)\n\nThe of a element is the height in CSS pixels of the number of lines specified the element's character height, plus the height of a scrollbar in CSS pixels.\n\nUser agents are expected to apply the 'white-space' CSS property to elements. For historical reasons, if the element has a attribute whose value is an ASCII case-insensitive match for the string \" \", then the user agent is expected to treat the attribute as a presentational hint setting the element's 'white-space' property to 'pre'.\n\nNeed to detail the expected native appearance and primitive appearance.\n\nUser agents are expected to render elements as a box with the height and width of the viewport, with a surface rendered according to the following layout algorithm:\n• The and variables are lists of zero or more pairs consisting of a number and a unit, the unit being one of percentage, relative, and absolute. Use the rules for parsing a list of dimensions to parse the value of the element's attribute, if there is one. Let be the result, or an empty list if there is no such attribute. Use the rules for parsing a list of dimensions to parse the value of the element's attribute, if there is one. Let be the result, or an empty list if there is no such attribute.\n• For any of the entries in or that have the number zero and the unit relative, change the entry's number to one.\n• If has no entries, then add a single entry consisting of the value 1 and the unit relative to . If has no entries, then add a single entry consisting of the value 1 and the unit relative to .\n• Invoke the algorithm defined below to convert a list of dimensions to a list of pixel values using as the input list, and the width of the surface that the is being rendered into, in CSS pixels, as the input dimension. Let be the resulting list. Invoke the algorithm defined below to convert a list of dimensions to a list of pixel values using as the input list, and the height of the surface that the is being rendered into, in CSS pixels, as the input dimension. Let be the resulting list.\n• Split the surface into a grid of × rectangles, where is the number of entries in and is the number of entries in . Size the columns so that each column in the grid is as many CSS pixels wide as the corresponding entry in the list. Size the rows so that each row in the grid is as many CSS pixels high as the corresponding entry in the list.\n• Let be the list of and elements that are children of the element for which the algorithm was invoked.\n• For each row of the grid of rectangles created in the previous step, from top to bottom, run these substeps:\n• For each rectangle in the row, from left to right, run these substeps:\n• If there are any elements left in , take the first element in the list, and assign it to the rectangle. If this is a element, then recurse the entire layout algorithm for that element, with the rectangle as the surface. Otherwise, it is a element; render its content navigable, positioned and sized to fit the rectangle.\n• If there are any elements left in , remove the first element from .\n• If the element has a border, draw an outer set of borders around the rectangles, using the element's frame border color. For each rectangle, if there is an element assigned to that rectangle, and that element has a border, draw an inner set of borders around that rectangle, using the element's frame border color. For each (visible) border that does not abut a rectangle that is assigned a element with a attribute (including rectangles in further nested elements), the user agent is expected to allow the user to move the border, resizing the rectangles within, keeping the proportions of any nested grids. A or element if the following algorithm returns true:\n• None If the element has a attribute whose value is not the empty string and whose first character is either a U+0031 DIGIT ONE (1) character, a U+0079 LATIN SMALL LETTER Y character (y), or a U+0059 LATIN CAPITAL LETTER Y character (Y), then return true.\n• None Otherwise, if the element has a attribute, return false.\n• None Otherwise, if the element has a parent element that is a element, then return true if that element has a border, and false if it does not. The of a or element is the color obtained from the following algorithm:\n• None If the element has a attribute, and applying the rules for parsing a legacy color value to that attribute's value does not return failure, then return the color so obtained.\n• None Otherwise, if the element has a parent element that is a element, then return the frame border color of that element.\n\nThe algorithm to convert a list of dimensions to a list of pixel values consists of the following steps:\n• Let be the list of numbers and units passed to the algorithm. Let be a list of numbers the same length as , all zero. Entries in correspond to the entries in that have the same position.\n• None Let be the size passed to the algorithm.\n• Let be the sum of all the numbers in whose unit is percentage. Let be the sum of all the numbers in whose unit is relative. Let be the sum of all the numbers in whose unit is absolute. Let be the value of .\n• If is greater than , then for each entry in whose unit is absolute, set the corresponding value in to the number of the entry in multiplied by and divided by . Then, set to zero. Otherwise, for each entry in whose unit is absolute, set the corresponding value in to the number of the entry in . Then, decrement by .\n• If multiplied by the and divided by 100 is greater than , then for each entry in whose unit is percentage, set the corresponding value in to the number of the entry in multiplied by and divided by . Then, set to zero. Otherwise, for each entry in whose unit is percentage, set the corresponding value in to the number of the entry in multiplied by the and divided by 100. Then, decrement by multiplied by the and divided by 100.\n• For each entry in whose unit is relative, set the corresponding value in to the number of the entry in multiplied by and divided by .\n\nUser agents working with integer values for frame widths (as opposed to user agents that can lay frames out with subpixel accuracy) are expected to distribute the remainder first to the last entry whose unit is relative, then equally (not proportionally) to each entry whose unit is percentage, then equally (not proportionally) to each entry whose unit is absolute, and finally, failing all else, to the last entry.\n\nThe contents of a element that does not have a parent are expected to be rendered as transparent black; the user agent is expected to not render its content navigable in this case, and its content navigable is expected to have a viewport with zero width and zero height.\n\nUser agents are expected to allow the user to control aspects of hyperlink activation and form submission, such as which navigable is to be used for the subsequent navigation.\n\nUser agents are expected to allow users to discover the destination of hyperlinks and of forms before triggering their navigation.\n\nUser agents are expected to inform the user of whether a hyperlink includes hyperlink auditing, and to let them know at a minimum which domains will be contacted as part of such auditing.\n\nUser agents may allow users to navigate navigables to the URLs indicated by the attributes on , , , and elements.\n\nUser agents may surface hyperlinks created by elements in their user interface, as discussed previously.\n\nUser agents are expected to expose the advisory information of elements upon user request, and to make the user aware of the presence of such information.\n\nOn interactive graphical systems where the user can use a pointing device, this could take the form of a tooltip. When the user is unable to use a pointing device, then the user agent is expected to make the content available in some other fashion, e.g. by making the element a focusable area and always displaying the advisory information of the currently focused element, or by showing the advisory information of the elements under the user's finger on a touch device as the user pans around the screen.\n\nU+000A LINE FEED (LF) characters are expected to cause line breaks in the tooltip; U+0009 CHARACTER TABULATION (tab) characters are expected to render as a nonzero horizontal shift that lines up the next glyph with the next tab stop, with tab stops occurring at points that are multiples of 8 times the width of a U+0020 SPACE character.\n\nThe current text editing caret (i.e. the active range, if it is empty and in an editing host), if any, is expected to act like an inline replaced element with the vertical dimensions of the caret and with zero width for the purposes of the CSS rendering model.\n\nThis means that even an empty block can have the caret inside it, and that when the caret is in such an element, it prevents margins from collapsing through the element.\n\nUser agents are expected to honor the Unicode semantics of text that is exposed in user interfaces, for example supporting the bidirectional algorithm in text shown in dialogs, title bars, popup menus, and tooltips. Text from the contents of elements is expected to be rendered in a manner that honors the directionality of the element from which the text was obtained. Text from attributes is expected to be rendered in a manner that honours the directionality of the attribute.\n\nA string provided by a script (e.g. the argument to ) is expected to be treated as an independent set of one or more bidirectional algorithm paragraphs when displayed, as defined by the bidirectional algorithm, including, for instance, supporting the paragraph-breaking behavior of U+000A LINE FEED (LF) characters. For the purposes of determining the paragraph level of such text in the bidirectional algorithm, this specification does not provide a higher-level override of rules P2 and P3. [BIDI]\n\nWhen necessary, authors can enforce a particular direction for a given paragraph by starting it with the Unicode U+200E LEFT-TO-RIGHT MARK or U+200F RIGHT-TO-LEFT MARK characters.\n\nUser agents are expected to allow the user to request the opportunity to (or a representation of a physical form) of a . For example, selecting the option to print a page or convert it to PDF format. [PDF]\n\nWhen the user actually obtains a physical form (or a representation of a physical form) of a , the user agent is expected to create a new rendering of the for the print media.\n\nHTML user agents may, in certain circumstances, find themselves rendering non-HTML documents that use vocabularies for which they lack any built-in knowledge. This section provides for a way for user agents to handle such documents in a somewhat useful manner.\n\nWhile a is an unstyled document, the user agent is expected to render an unstyled document view.\n\nA is an while it matches the following conditions:\n• The has no author style sheets (whether referenced by HTTP headers, processing instructions, elements like , inline elements like , or any other mechanism).\n• None of the elements in the have any presentational hints.\n• None of the elements in the have any style attributes.\n• None of the elements in the are in any of the following namespaces: HTML namespace, SVG namespace, MathML namespace\n• The has no focusable area (e.g. from XLink) other than the viewport.\n• The has no hyperlinks (e.g. from XLink).\n• There exists no script whose settings object's global object is a object with this as its associated .\n• None of the elements in the have any registered event listeners.\n\nis one where the DOM is not rendered according to CSS (which would, since there are no applicable styles in this context, just result in a wall of text), but is instead rendered in a manner that is useful for a developer. This could consist of just showing the object's source, maybe with syntax highlighting, or it could consist of displaying just the DOM tree, or simply a message saying that the page is not a styled document.\n\nIf a stops being an unstyled document, then the conditions above stop applying, and thus a user agent following these requirements will switch to using the regular CSS rendering.\n\nFeatures listed in this section will trigger warnings in conformance checkers.\n\nAuthors should not specify a attribute on an element. If the attribute is present, its value must be the string \" \". CSS should be used instead.\n\nAuthors should not specify a attribute on a element. If the attribute is present, its value must be an ASCII case-insensitive match for \" \". (This has no effect in a document that conforms to the requirements elsewhere in this standard of being encoded as UTF-8.)\n\nAuthors should not specify a attribute on a element. If the attribute is present, its value must be an ASCII case-insensitive match for the string \" \" and either the attribute must be omitted or its value must be an ASCII case-insensitive match for the string \" \". The attribute should be entirely omitted instead (with the value \" \", it has no effect), or replaced with use of the attribute.\n\nAuthors should not specify a value for the attribute on elements that is the empty string or a JavaScript MIME type essence match. Instead, they should omit the attribute, which has the same effect.\n\nAuthors should not specify a attribute on a element. If the attribute is present, its value must be an ASCII case-insensitive match for \" \".\n\nAuthors should not specify the attribute on elements. If the attribute is present, its value must not be the empty string and must neither be equal to the value of any of the IDs in the element's tree other than the element's own ID, if any, nor be equal to the value of any of the other attributes on elements in the element's tree. If this attribute is present and the element has an ID, then the attribute's value must be equal to the element's ID. In earlier versions of the language, this attribute was intended as a way to specify possible targets for fragments in URLs. The attribute should be used instead.\n\nAuthors should not, but may despite requirements to the contrary elsewhere in this specification, specify the and attributes on elements whose attributes are in the Number state. One valid reason for using these attributes regardless is to help legacy user agents that do not support elements with to still render the text control with a useful width.\n\nTo ease the transition from HTML4 Transitional documents to the language defined in this specification, and to discourage certain features that are only allowed in very few circumstances, conformance checkers must warn the user when the following features are used in a document. These are generally old obsolete features that have no effect, and are allowed only to distinguish between likely mistakes (regular conformance errors) and mere vestigial markup or unusual and discouraged practices (these warnings).\n\nThe following features must be categorized as described above:\n• None The presence of a attribute on an element if its value is the string \" \".\n• None The presence of a attribute on a element if its value is an ASCII case-insensitive match for \" \".\n• None The presence of a attribute on a element if its value is an ASCII case-insensitive match for the string \" \" and if there is no attribute or there is and its value is an ASCII case-insensitive match for the string \" \".\n• None The presence of a attribute on a element if its value is a JavaScript MIME type essence match.\n• None The presence of a attribute on a element if its value is an ASCII case-insensitive match for \" \".\n• None The presence of a attribute on an element, if its value is not the empty string.\n• None The presence of a attribute on an element whose attribute is in the Number state.\n• None The presence of a attribute on an element whose attribute is in the Number state.\n\nConformance checkers must distinguish between pages that have no conformance errors and have none of these obsolete features, and pages that have no conformance errors but do have some of these obsolete features.\n\nFor example, a validator could report some pages as \"Valid HTML\" and others as \"Valid HTML with warnings\".\n\nElements in the following list are entirely obsolete, and must not be used by authors:\n\nThe following attributes are obsolete (though the elements are still part of the language), and must not be used by authors:\n\nThe element is a presentational element that animates content. CSS transitions and animations are a more appropriate mechanism. [CSSANIMATIONS] [CSSTRANSITIONS]\n\nThe element must implement the interface.\n\nA element can be or . When it is created, it is turned on.\n\nWhen the method is called, the element must be turned on.\n\nWhen the method is called, the element must be turned off.\n\nThe content attribute on elements is an enumerated attribute with the following keywords and states (all non-conforming):\n\nThe attribute's missing value default and invalid value default are both the scroll state.\n\nThe content attribute on elements is an enumerated attribute with the following keywords and states (all non-conforming):\n\nThe attribute's missing value default and invalid value default are both the left state.\n\nThe content attribute on elements is a boolean attribute.\n\nA element has a , which is obtained as follows:\n• None If the element has a attribute, and parsing its value using the rules for parsing non-negative integers does not return an error, then let be the parsed value. Otherwise, let be 85.\n• None If the element does not have a attribute, and the value is less than 60, then let be 60 instead.\n• None The marquee scroll interval is , interpreted in milliseconds.\n\nA element has a , which, if the element has a attribute, and parsing its value using the rules for parsing non-negative integers does not return an error, is the parsed value interpreted in CSS pixels, and otherwise is 6 CSS pixels.\n\nA element has a , which, if the element has a attribute, and parsing its value using the rules for parsing integers does not return an error or a number less than 1, is the parsed value, and otherwise is −1.\n\nThe IDL attribute, on getting, must return the element's marquee loop count; and on setting, if the new value is different than the element's marquee loop count and either greater than zero or equal to −1, must set the element's content attribute (adding it if necessary) to the valid integer that represents the new value. (Other values are ignored.)\n\nA element also has a , which is zero when the element is created.\n\nThe rendering layer will occasionally , which must cause the following steps to be run:\n• None If the marquee loop count is −1, then return.\n• None Increment the marquee current loop index by one.\n• None If the marquee current loop index is now greater than or equal to the element's marquee loop count, turn off the element.\n\nThe , , , , , and IDL attributes must reflect the respective content attributes of the same name.\n\nThe IDL attribute must reflect the content attribute.\n\nThe IDL attribute must reflect the content attribute. The default value is 6.\n\nThe IDL attribute must reflect the content attribute. The default value is 85.\n\nThe IDL attribute must reflect the content attribute.\n\nThe element acts as the body element in documents that use frames.\n\nThe element must implement the interface.\n\nThe and IDL attributes of the element must reflect the respective content attributes of the same name.\n\nThe element exposes as event handler content attributes a number of the event handlers of the object. It also mirrors their event handler IDL attributes.\n\nThe event handlers of the object named by the -reflecting body element event handler set, exposed on the element, replace the generic event handlers with the same names normally supported by HTML elements.\n\nThe element has a content navigable similar to the element, but rendered within a element.\n\nThe HTML element insertion steps, given , are:\n• None If is not in a document tree, then return.\n• None If 's root's browsing context is null, then return.\n• None Process the attributes for , with set to true.\n\nThe HTML element removing steps, given , are to destroy a child navigable given .\n\nWhenever a element with a non-null content navigable has its attribute set, changed, or removed, the user agent must process the attributes.\n\nTo for an element , with an optional boolean :\n• None Let be the result of running the shared attribute processing steps for and elements given and .\n• None If is null, then return.\n• If matches and is true, then:\n• None Navigate an or given , , and the empty string.\n\nThe element must implement the interface.\n\nThe , , and IDL attributes of the element must reflect the respective content attributes of the same name. For the purposes of reflection, the element's content attribute is defined as containing a URL.\n\nThe IDL attribute of the element must reflect the element's content attribute.\n\nThe IDL attribute of the element must reflect the element's content attribute, which for the purposes of reflection is defined as containing a URL.\n\nThe IDL attribute of the element must reflect the element's content attribute.\n\nThe IDL attribute of the element must reflect the element's content attribute.\n\nThe IDL attribute of the element must reflect the element's content attribute.\n\nThe getter steps are to return this's content document.\n\nThe getter steps are to return this's content window.\n\nUser agents must treat elements in a manner equivalent to elements in terms of semantics and for purposes of rendering.\n\nThe , , , , and IDL attributes of the element must reflect the respective content attributes of the same name.\n\nThe IDL attribute of the element must reflect the element's content attribute.\n\nThe IDL attribute of the element must reflect the element's content attribute.\n\nThe IDL attribute of the element must reflect the element's content attribute.\n\nThe IDL attribute of the element must reflect the element's content attribute.\n\nThe IDL attribute of the element must reflect the element's content attribute.\n\nThe IDL attribute of the element must reflect the element's content attribute.\n\nThe IDL attribute of the element must reflect the element's content attribute. (The content is not defined to contain a URL, despite rules regarding its handling in the Rendering section above.)\n\nThe IDL attribute of the element must reflect the content attribute of the same name.\n\nThe IDL attribute of the element must reflect the content attribute of the same name.\n\nThe and IDL attributes of the element must reflect the respective content attributes of the same name.\n\nThe IDL attribute of the element must reflect the element's content attribute.\n\nThe IDL attribute of the element must reflect the element's content attribute.\n\nThe IDL attribute of the element must reflect the element's content attribute.\n\nUser agents must treat elements in a manner equivalent to elements in terms of semantics and for purposes of rendering.\n\nThe element must implement the interface.\n\nThe IDL attribute of the element must reflect the content attribute of the same name.\n\nThe IDL attribute of the element must reflect the content attribute of the same name.\n\nThe IDL attribute of the element must reflect the content attribute of the same name.\n\nThe and IDL attributes of the element must reflect the respective content attributes of the same name.\n\nThe element must implement the interface.\n\nThe , , and IDL attributes of the element must reflect the respective content attributes of the same name.\n\nThe IDL attribute of the – elements must reflect the content attribute of the same name.\n\nThe IDL attribute on elements (with the interface) is intentionally omitted. Unless so required by another applicable specification, implementations would therefore not support this attribute. (It is mentioned here as it was defined in a previous version of .)\n\nThe , , , and IDL attributes of the element must reflect the respective content attributes of the same name.\n\nThe IDL attribute of the element must reflect the element's content attribute.\n\nThe IDL attribute of the element must reflect the content attribute of the same name.\n\nThe and IDL attributes of the element must reflect the respective content attributes of the same name.\n\nThe IDL attribute of the element must reflect the element's content attribute.\n\nThe IDL attribute of the element must reflect the element's content attribute, which for the purposes of reflection is defined as containing a URL.\n\nThe IDL attribute of the element must reflect the element's content attribute.\n\nThe IDL attribute of the element must reflect the element's content attribute.\n\nThe , , , , and IDL attributes of the element must reflect the respective content attributes of the same name.\n\nThe IDL attribute of the element must reflect the element's content attribute, which for the purposes of reflection is defined as containing a URL.\n\nThe IDL attribute of the element must reflect the element's content attribute, which for the purposes of reflection is defined as containing a URL.\n\nThe IDL attribute of the element must reflect the content attribute of the same name.\n\nThe IDL attribute of the element must reflect the element's content attribute.\n\nThe IDL attribute of the element must reflect the content attribute of the same name.\n\nThe IDL attribute of the element must reflect the content attribute of the same name.\n\nThe , , and IDL attributes of the element must reflect the respective content attributes of the same name.\n\nUser agents must treat elements in a manner equivalent to elements in terms of semantics and for purposes of rendering.\n\nThe IDL attribute of the element must reflect the content attribute of the same name.\n\nUser agents may treat the content attribute on the element as an extension of the element's content attribute when processing a element with a attribute whose value is one that the user agent recognizes as supporting the attribute.\n\nUser agents are encouraged to ignore the attribute and instead process the value given to the metadata name as if it had been specified for each expected value of the attribute.\n\nThe IDL attribute of the element must reflect the content attribute of the same name.\n\nThe , , , , , , , and IDL attributes of the element must reflect the respective content attributes of the same name.\n\nThe IDL attribute of the element must reflect the element's content attribute, which for the purposes of reflection is defined as containing a URL.\n\nThe IDL attribute of the element must reflect the element's content attribute.\n\nThe IDL attribute must reflect the content attribute.\n\nThe IDL attribute of the element must reflect the content attribute of the same name.\n\nThe IDL attribute of the element must reflect the content attribute of the same name.\n\nThe element must implement the interface.\n\nThe , , and IDL attributes of the element must reflect the respective content attributes of the same name.\n\nThe IDL attribute of the element must reflect the element's content attribute.\n\nUser agents must treat elements in a manner equivalent to elements in terms of semantics and for purposes of rendering. (The parser has special behavior for this element, though.)\n\nThe IDL attribute of the element must reflect the content attribute of the same name.\n\nThe IDL attribute of the element must reflect the element's content attribute.\n\nThe and IDL attributes of the element must reflect the respective content attributes of the same name.\n\nThe IDL attribute of the element must reflect the element's content attribute.\n\nThe , , , , , and IDL attributes of the element must reflect the respective content attributes of the same name.\n\nThe IDL attribute of the element must reflect the element's content attribute.\n\nThe IDL attribute of the element must reflect the element's content attribute.\n\nThe IDL attribute of the element must reflect the element's content attribute.\n\nThe IDL attribute of the , , and elements must reflect the content attribute of the same name.\n\nThe IDL attribute of the , , and elements must reflect the elements' content attributes.\n\nThe IDL attribute of the , , and elements must reflect the elements' content attributes.\n\nThe IDL attribute of the , , and elements must reflect the elements' content attributes.\n\nThe , , , and IDL attributes of the and elements must reflect the respective content attributes of the same name.\n\nThe IDL attribute of the and elements must reflect the elements' content attributes.\n\nThe IDL attribute of the and elements must reflect the elements' content attributes.\n\nThe IDL attribute of the and elements must reflect the elements' content attributes.\n\nThe IDL attribute of the and elements must reflect the elements' content attributes.\n\nThe IDL attribute of the and elements must reflect the elements' content attributes.\n\nThe IDL attribute of the element must reflect the content attribute of the same name.\n\nThe IDL attribute of the element must reflect the element's content attribute.\n\nThe IDL attribute of the element must reflect the element's content attribute.\n\nThe IDL attribute of the element must reflect the element's content attribute.\n\nThe IDL attribute of the element must reflect the element's content attribute.\n\nThe and IDL attributes of the element must reflect the respective content attributes of the same name.\n\nUser agents must treat elements in a manner equivalent to elements in terms of semantics and for purposes of rendering. (The parser has special behavior for this element though.)\n\nThe attributes of the object listed in the first column of the following table must reflect the content attribute on the body element with the name given in the corresponding cell in the second column on the same row, if the body element is a element (as opposed to a element). When there is no body element or if it is a element, the attributes must instead return the empty string on getting and do nothing on setting.\n\nThe attribute must return an rooted at the node, whose filter matches only elements with attributes.\n\nThe attribute must return an rooted at the node, whose filter matches nothing. (It exists for historical reasons.)\n\nThe , , and methods must do nothing.\n\nThe attribute must return an rooted at the node, whose filter matches all elements.\n\nThe and methods must do nothing.\n\nThe attribute of the interface must return an instance of the interface:\n\nThe and methods must do nothing.\n\nThis registration is for community review and will be submitted to the IESG for review, approval, and registration with IANA.\n\nFragments used with resources either refer to the indicated part of the corresponding , or provide state information for in-page scripts.\n\nThis registration is for community review and will be submitted to the IESG for review, approval, and registration with IANA.\n\nFragments used with resources apply to each body part as defined by the type used by that body part.\n\nThis registration is for community review and will be submitted to the IESG for review, approval, and registration with IANA.\n\nFragments used with resources have the same semantics as with any XML MIME type. [RFC7303]\n\nThis registration is for community review and will be submitted to the IESG for review, approval, and registration with IANA.\n\nFragments have no meaning with resources.\n\nThis registration is for community review and will be submitted to the IESG for review, approval, and registration with IANA.\n\nFragments used with resources have the same semantics as when used with (namely, at the time of writing, no semantics at all). [JSON]\n\nThis registration is for community review and will be submitted to the IESG for review, approval, and registration with IANA.\n\nFragments have no meaning with resources.\n\nThis section describes a convention for use with the IANA URI scheme registry. It does not itself register a specific scheme. [RFC7595]\n\nThe following sections only cover conforming elements and features.\n\nAn asterisk (*) in a cell indicates that the actual rules are more complicated than indicated in the table above.\n\n† Categories in the \"Parents\" column refer to parents that list the given categories in their content model, not to elements that themselves are in those categories. For example, the element's \"Parents\" column says \"phrasing\", so any element whose content model contains the \"phrasing\" category could be a parent of an element. Since the \"flow\" category includes all the \"phrasing\" elements, that means the element could be a parent to an element.\n\nAn asterisk (*) in a cell indicates that the actual rules are more complicated than indicated in the table above.\n\nThe following table lists events fired by this document, excluding those already defined in media element events and drag-and-drop events.\n\nThe following HTTP request headers are defined by this specification:\n\nThe following HTTP response headers are defined by this specification:\n\nThe following MIME types are mentioned in this specification:\n\nAll references are normative unless marked \"Non-normative\".\n\nThanks to Tim Berners-Lee for inventing HTML, without which none of this would exist.\n\nThanks to Aankhen, Aaqa Ishtyaq, Aaron Boodman, Aaron Leventhal, Aaron Krajeski, Abhishek Ghaskata, Abhishek Gupta, Adam Barth, Adam de Boor, Adam Hepton, Adam Klein, Adam Rice, Adam Roben, Addison Phillips, Adele Peterson, Adrian Bateman, Adrian Roselli, Adrian Sutton, Agustín Fernández, Aharon (Vladimir) Lanin, Ajai Tirumali, Ajay Poshak, Akash Balenalli, Akatsuki Kitamura, Alan Jeffrey, Alan Plum, Alastair Campbell, Alejandro G. Castro, Alex Bishop, Alex Nicolaou, Alex Nozdriukhin, Alex Rousskov, Alex Soncodi, Alexander Farkas, Alexander J. Vincent, Alexander Kalenik, Alexandre Dieulot, Alexandre Morgaut, Alexey Feldgendler, Алексей Проскуряков (Alexey Proskuryakov), Alexey Shvayka, Alexis Deveria, Alfred Agrell, Ali Juma, Alice Boxhall, Alice Wonder, Allan Clements, Allen Wirfs-Brock, Alex Komoroske, Alex Russell, Alphan Chen, Aman Ansari, Ami Fischman, Amos Jeffries, Amos Lim, Anders Carlsson, André Bargull, André E. Veltstra, Andrea Rendine, Andreas, Andreas Deuschlinger, Andreas Farre, Andreas Kling, Andrei Popescu, Andres Gomez, Andres Rios, Andreu Botella, Andrew Barfield, Andrew Clover, Andrew Gove, Andrew Grieve, Andrew Kaster, Andrew Macpherson, Andrew Oakley, Andrew Paseltiner, Andrew Simons, Andrew Smith, Andrew W. Hagen, Andrew Williams, Andrey V. Lukyanov, Andry Rendy, Andy Davies, Andy Earnshaw, Andy Heydon, Andy Paicu, Andy Palay, Anjana Vakil, Ankur Kaushal, Anna Belle Leiserson, Anna Sidwell, Anthony Boyd, Anthony Bryan, Anthony Hickson, Anthony Ramine, Anthony Ricaud, Anton Vayvod, Antonio Sartori, Antti Koivisto, Arfat Salman, Arkadiusz Michalski, Arne Thomassen, Aron Spohr, Arphen Lin, Arthur Hemery, Arthur Sonzogni, Arthur Stolyar, Arun Patole, Aryeh Gregor, Asanka Herath, Asbjørn Ulsberg, Ashley Gullen, Ashley Sheridan, Asumu Takikawa, Atsushi Takayama, Attila Haraszti, Aurelien Levy, Ave Wrigley, Avi Drissman, Axel Dahmen, 방성범 (Bang Seongbeom), Barry Pollard, Ben Boyle, Ben Godfrey, Ben Golightly, Ben Kelly, Ben Lerner, Ben Leslie, Ben Meadowcroft, Ben Millard, Benjamin Carl Wiley Sittler, Benjamin Hawkes-Lewis, Benji Bilheimer, Benoit Ren, Bert Bos, Bijan Parsia, Bil Corry, Bill Mason, Bill McCoy, Billy Wong, Billy Woods, Bjartur Thorlacius, Björn Höhrmann, Blake Frantz, Bob Lund, Bob Owen, Bobby Holley, Boris Zbarsky, Brad Fults, Brad Neuberg, Brad Spencer, Bradley Meck, Brady Eidson, Brandon Jones, Brendan Eich, Brenton Simpson, Brett Wilson, Brett Zamir, Brian Birtles, Brian Blakely, Brian Campbell, Brian Korver, Brian Kuhn, Brian M. Dube, Brian Ryner, Brian Smith, Brian Wilson, Bryan Sullivan, Bruce Bailey, Bruce D'Arcus, Bruce Lawson, Bruce Miller, Bugs Nash, C. Scott Ananian, C. Williams, Cameron McCormack, Cameron Zemek, Cao Yipeng, Carlos Amengual, Carlos Gabriel Cardona, Carlos Ibarra López, Carlos Perelló Marín, Carolyn MacLeod, Casey Leask, Cătălin Badea, Cătălin Mariș, Cem Turesoy, ceving, Chao Cai, 윤석찬 (Channy Yun), Charl van Niekerk, Charlene Wright, Charles Iliya Krempeaux, Charles McCathie Nevile, Charlie Reis, 白丞祐 (Cheng-You Bai), Chris Apers, Chris Cressman, Chris Dumez, Chris Evans, Chris Harrelson, Chris Markiewicz, Chris Morris, Chris Nardi, Chris Needham, Chris Pearce, Chris Peterson, Chris Rebert, Chris Weber, Chris Wilson, Christian Biesinger, Christian Johansen, Christian Schmidt, Christoph Päper, Christophe Dumez, Christopher Aillon, Christopher Cameron, Christopher Ferris, Chriswa, Clark Buehler, Cole Robison, Colin Fine, Collin Jackson, Corey Farwell, Corprew Reed, Craig Cockburn, Csaba Gabor, Csaba Marton, Cynthia Shelly, Cyrille Tuzi, Daksh Shah, Dan Callahan, Dan Yoder, Dane Foster, Daniel Barclay, Daniel Bratell, Daniel Brooks, Daniel Brumbaugh Keeney, Daniel Buchner, Daniel Cheng, Daniel Clark, Daniel Davis, Daniel Ehrenberg, Daniel Ethridge, Daniel Glazman, Daniel Holbert, Daniel Peng, Daniel Schattenkirchner, Daniel Spång, Daniel Steinberg, Daniel Tan, Daniel Trebbien, Daniel Vogelheim, Danny Sullivan, Daphne Preston-Kendal, Darien Maillet Valentine, Darin Adler, Darin Fisher, Darxus, Dave Camp, Dave Cramer, Dave Hodder, Dave Lampton, Dave Singer, Dave Tapuska, Dave Townsend, David Baron, David Bloom, David Bokan, David Bruant, David Carlisle, David E. Cleary, David Egan Evans, David Fink, David Flanagan, David Gerard, David Grogan, David Hale, David Håsäther, David Hyatt, David I. Lehn, David John Burrowes, David Matja, David Remahl, David Resseguie, David Smith, David Storey, David Vest, David Woolley, David Zbarsky, Dave Methvin, DeWitt Clinton, Dean Edridge, Dean Edwards, Dean Jackson, Debanjana Sarkar, Debi Orton, Delan Azabani, Derek Featherstone, Derek Guenther, Devarshi Pant, Devdatta, Devin Mullins, Devin Rousso, Di Zhang, Diego Ferreiro Val, Diego González Zúñiga, Diego Ponce de León, Dimitri Glazkov, Dimitry Golubovsky, Dirk Pranke, Dirk Schulze, Dirkjan Ochtman, Divya Manian, Dmitry Lazutkin, Dmitry Titov, dolphinling, Dominic Cooney, Dominique Hazaël-Massieux, Don Brutzman, Donovan Glover, Doron Rosenberg, Doug Kramer, Doug Simpkinson, Drew Wilson, Edgar Chen, Edmund Lai, Eduard Pascual, Eduardo Vela, Edward Welbourne, Edward Z. Yang, Ehsan Akhgari, Ehsan Karamad, Eira Monstad, Eitan Adler, Eli Friedman, Eli Grey, Eliot Graff, Elisabeth Robson, Elizabeth Castro, Elliott Sprehn, Elliotte Harold, Emilio Cobos Álvarez, Emily Stark, Eric Carlson, Eric Casler, Eric Lawrence, Eric Portis, Eric Rescorla, Eric Semling, Eric Shepherd, Eric Willigers, Erik Arvidsson, Erik Charlebois, Erik Rose, 栗本 英理子 (Eriko Kurimoto), espretto, Evan Jacobs, Evan Martin, Evan Prodromou, Evan Stade, Evert, Evgeny Kapun, ExE-Boss, Ezequiel Garzón, fantasai, Félix Sanz, Felix Sasaki, Fernando Altomare Serboncini, Forbes Lindesay, Francesco Schwarz, Francis Brosnan Blazquez, Franck 'Shift' Quélain, François Marier, Frank Barchard, Frank Liberato, Franklin Shirley, Frederik Braun, Fredrik Söderquist, 鵜飼文敏 (Fumitoshi Ukai), Futomi Hatano, Gavin Carothers, Gavin Kistner, Gareth Rees, Garrett Smith, Gary Blackwood, Gary Kacmarcik, Gary Katsevman, Geoff Richards, Geoffrey Garen, Georg Neis, George Lund, Gianmarco Armellin, Giovanni Campagna, Giuseppe Pascale, Glenn Adams, Glenn Maynard, Graham Klyne, Greg Botten, Greg Houston, Greg Wilkins, Gregg Tavares, Gregory J. Rosmaita, Gregory Terzian, Grey, guest271314, Guilherme Johansson Tramontina, Guy Bedford, Gytis Jakutonis, Håkon Wium Lie, Habib Virji, Hajime Morrita, Hallvord Reiar Michaelsen Steen, Hanna Laakso, Hans S. Tømmerhalt, Hans Stimer, Harald Alvestrand, Hayato Ito, 何志翔 (HE Zhixiang), Henri Sivonen, Henrik Lied, Henrik Lievonen, Henry Lewis, Henry Mason, Henry Story, Hermann Donfack Zeufack, 中川博貴 (Hiroki Nakagawa), Hiroshige Hayashizaki, Hiroyuki USHITO, Hitoshi Yoshida, Hongchan Choi, 王华 (Hua Wang), Hugh Bellamy, Hugh Guiney, Hugh Winkler, Ian Bicking, Ian Clelland, Ian Davis, Ian Fette, Ian Henderson, Ian Kilpatrick, Ibrahim Ahmed, Ido Green, Ignacio Javier, Igor Oliveira, 安次嶺 一功 (Ikko Ashimine), Ilya Grigorik, Ingvar Stepanyan, isonmad, Iurii Kucherov, Ivan Enderlin, Ivan Nikulin, Ivan Panchenko, Ivo Emanuel Gonçalves, J. King, J.C. Jones, Jackson Ray Hamilton, Jacob Davies, Jacques Distler, Jake Archibald, Jake Verbaten, Jakub Vrána, Jakub Łopuszański, Jakub Wilk, James Craig, James Graham, James Greene, James Justin Harrell, James Kozianski, James M Snell, James Perrett, James Robinson, Jamie Liu, Jamie Lokier, Jamie Mansfield, Jan Kühle, Jan Miksovsky, Janice Shiu, Janusz Majnert, Jan-Ivar Bruaroey, Jan-Klaas Kollhof, Jared Jacobs, Jason Duell, Jason Kersey, Jason Lustig, Jason Orendorff, Jason White, Jasper Bryant-Greene, Jasper St. Pierre, Jatinder Mann, Jay Henry Kao, Jean-Yves Avenard, Jed Hartman, Jeff Balogh, Jeff Cutsinger, Jeff Gilbert, Jeff \"=JeffH\" Hodges, Jeff Schiller, Jeff Walden, Jeffrey Yasskin, Jeffrey Zeldman, 胡慧鋒 (Jennifer Braithwaite), Jellybean Stonerfish, Jennifer Apacible, Jens Bannmann, Jens Fendler, Jens Oliver Meiert, Jens Widell, Jer Noble, Jeremey Hustman, Jeremy Keith, Jeremy Orlow, Jeremy Roman, Jeroen van der Meer, Jerry Smith, Jesse Renée Beach, Jessica Jong, jfkthame, Jian Li, Jihye Hong, Jim Jewett, Jim Ley, Jim Meehan, Jim Michaels, Jinho Bang, Jinjiang (勾三股四), Jirka Kosek, Jjgod Jiang, Joaquim Medeiros, João Eiras, Jochen Eisinger, Joe Clark, Joe Gregorio, Joel Spolsky, Joel Verhagen, Joey Arhar, Johan Herland, Johanna Herman, John Boyer, John Bussjaeger, John Carpenter, John Daggett, John Fallows, John Foliot, John Harding, John Keiser, John Law, John Musgrave, John Snyders, John Stockton, John-Mark Bell, Johnny Stenback, Jon Coppeard, Jon Ferraiolo, Jon Gibbins, Jon Jensen, Jon Perlow, Jonas Sicking, Jonathan Cook, Jonathan Kew, Jonathan Neal, Jonathan Oddy, Jonathan Rees, Jonathan Watt, Jonathan Worent, Jonny Axelsson, Joram Schrijver, Jordan Tucker, Jorgen Horstink, Joris van der Wel, Jorunn Danielsen Newth, Joseph Kesselman, Joseph Mansfield, Joseph Pecoraro, Josh Aas, Josh Hart, Josh Juran, Josh Levenberg, Josh Matthews, Joshua Bell, Joshua Chen, Joshua Randall, Juan Olvera, Juanmi Huertas, Jukka K. Korpela, Jules Clément-Ripoche, Julian Reschke, Julio Lopez, 小勝 純 (Jun Kokatsu), Jun Yang (harttle), Jungkee Song, Jürgen Jeka, Justin Lebar, Justin Novosad, Justin Rogers, Justin Schuh, Justin Sinclair, Juuso Lapinlampi, Ka-Sing Chou, Kagami Sascha Rosylight, Kai Hendry, Kamishetty Sreeja, 呂康豪 (KangHao Lu), Karl Dubost, Karl Tomlinson, Kartik Arora, Kartikaya Gupta, Kathy Walton, 河童エクマ（Kawarabe Ecma） Keith Cirkel, Keith Rollin, Keith Yeung, Kelly Ford, Kelly Norton, Ken Russell, Kenji Baheux, Kevin Benson, Kevin Cole, Kevin Gadd, Kevin McNee, Kevin Venkiteswaran, Khushal Sagar, Kinuko Yasuda, Koji Ishii, Kornél Pál, Kornel Lesinski, 上野 康平 (UENO, Kouhei), Kris Northfield, Kristian Spangsege, Kristof Zelechovski, Krzysztof Maczyński, 黒澤剛志 (Kurosawa Takeshi), Kyle Barnhart, Kyle Hofmann, Kyle Huey, Léonard Bouchet, Léonie Watson, Lachlan Hunt, Larry Masinter, Larry Page, Lars Gunther, Lars Solberg, Laura Carlson, Laura Granka, Laura L. Carlson, Laura Wisewell, Laurens Holst, Lawrence Forooghian, Lee Kowalkowski, Leif Halvard Silli, Leif Kornstaedt, Lenny Domnitser, Leonard Rosenthol, Leons Petrazickis, Liviu Tinta, Lobotom Dysmon, Logan, Logan Moore, Loune, Lucas Gadani, Łukasz Pilorz, Luke Kenneth Casson Leighton, Luke Warlow, Luke Wilde, Maciej Stachowiak, Magne Andersson, Magnus Kristiansen, Maik Merten, Majid Valipour, Maksim Sadym, Malcolm Rowe, Manish Goregaokar, Manish Tripathi, Manuel Martinez-Almeida, Manuel Rego Casasnovas, Marc Hoyois, Marc-André Choquette, Marc-André Lafortune, Marco Zehe, Marcus Bointon, Marcus Otterström, Marijn Kruisselbrink, Mark Amery, Mark Birbeck, Mark Davis, Mark Green, Mark Miller, Mark Nottingham, Mark Pilgrim, Mark Rogers, Mark Rowe, Mark Schenk, Mark Vickers, Mark Wilton-Jones, Markus Cadonau, Markus Stange, Martijn van der Ven, Martijn Wargers, Martin Atkins, Martin Chaov, Martin Dürst, Martin Honnen, Martin Janecke, Martin Kutschker, Martin Nilsson, Martin Thomson, Masataka Yakura, Masatoshi Kimura, Mason Freed, Mason Mize, Mathias Bynens, Mathieu Henri, Matias Larsson, Matt Brubeck, Matt Di Pasquale, Matt Falkenhagen, Matt Giuca, Matt Harding, Matt Schmidt, Matt Wright, Matthew Gaudet, Matthew Gregan, Matthew Mastracci, Matthew Noorenberghe, Matthew Raymond, Matthew Thomas, Matthew Tylee Atkinson, Mattias Waldau, Max Romantschuk, Maxim Tsoy, Mayeul Cantan, Menachem Salomon, Menno van Slooten, Micah Dubinko, Micah Nerren, Michael 'Ratt' Iannarelli, Michael A. Nachbaur, Michael A. Puls II, Michael Carter, Michael Daskalov, Michael Day, Michael Dyck, Michael Enright, Michael Ficarra, Michael Gratton, Michael Kohler, Michael McKelvey, Michael Nordman, Michael Powers, Michael Rakowski, Michael(tm) Smith, Michael Walmsley, Michal Zalewski, Michel Buffa, Michel Fortin, Michelangelo De Simone, Michiel van der Blonk, Miguel Casas-Sanchez, Mihai Şucan, Mihai Parparita, Mike Brown, Mike Dierken, Mike Dixon, Mike Hearn, Mike Pennisi, Mike Schinkel, Mike Shaver, Mikko Rantalainen, Mingye Wang, Mirko Brodesser, Mohamed Zergaoui, Mohammad Al Houssami, Mohammad Reza Zakerinasab, Momdo Nakamura, Morten Stenshorne, Mounir Lamouri, Ms2ger, mtrootyy, 邱慕安 (Mu-An Chiou), Mukilan Thiyagarajan, Mustaq Ahmed, Myles Borins, Nadia Heninger, Nate Chapin, NARUSE Yui, Navid Zolghadr, Neil Deakin, Neil Rashbrook, Neil Soiffer, Nereida Rondon, networkException, Nicholas Shanks, Nicholas Stimpson, Nicholas Zakas, Nickolay Ponomarev, Nicolas Gallagher, Nicolas Pena Moreno, Nicolò Ribaudo, Nidhi Jaju, Nikki Bee, Niklas Gögge, Nina Satragno, Noah Mendelsohn, Noah Slater, Noam Rosenthal, Noel Gordon, Nolan Waite, NoozNooz42, Norbert Lindenberg, Oisín Nolan, Ojan Vafai, Olaf Hoffmann, Olav Junker Kjær, Oldřich Vetešník, Oli Studholme, Oliver Hunt, Oliver Rigby, Olivia (Xiaoni) Lai, Olivier Gendrin, Olli Pettay, Ondřej Žára, Ori Avtalion, Oriol Brufau, oSand, Pablo Flouret, Patrick Dark, Patrick Garies, Patrick H. Lauke, Patrik Persson, Paul Adenot, Paul Lewis, Paul Norman, Per-Erik Brodin, 一丝 (percyley), Perry Smith, Peter Beverloo, Peter Karlsson, Peter Kasting, Peter Moulder, Peter Occil, Peter Stark, Peter Van der Beken, Peter van der Zee, Peter-Paul Koch, Phil Pickering, Philip Ahlberg, Philip Brembeck, Philip Taylor, Philip TAYLOR, Philippe De Ryck, Pierre-Arnaud Allumé, Pierre-Marie Dartus, Pierre-Yves Gérardy, Piers Wombwell, Pooja Sanklecha, Prashant Hiremath, Prashanth Chandra, Prateek Rungta, Pravir Gupta, Prayag Verma, 李普君 (Pujun Li), Rachid Finge, Rafael Weinstein, Rafał Miłecki, Rahim Abdi, Rahul Purohit, Raj Doshi, Rajas Moonka, Rakina Zata Amni, Ralf Stoltze, Ralph Giles, Raphael Champeimont, Rebecca Star, Remci Mizkur, Remco, Remy Sharp, Rene Saarsoo, Rene Stach, Ric Hardacre, Rich Clark, Rich Doughty, Richa Rupela, Richard Gibson, Richard Ishida, Richard Torres, Ricky Mondello, Rigo Wenning, Rikkert Koppes, Rimantas Liubertas, Riona Macnamara, Rob Buis, Rob Ennals, Rob Jellinghaus, Rob S, Rob Smith, Robert Blaut, Robert Collins, Robert Hogan, Robert Kieffer, Robert Linder, Robert Millan, Robert O'Callahan, Robert Sayre, Robin Berjon, Robin Schaufler, Rodger Combs, Roland Steiner, Roma Matusevich, Romain Deltour, Roman Ivanov, Roy Fielding, Rune Lillesveen, Russell Bicknell, Ruud Steltenpool, Ryan King, Ryan Landay, Ryan Sleevi, Ryo Kajiwara, Ryo Kato, Ryosuke Niwa, S. Mike Dierken, Salvatore Loreto, Sam Atkins, Sam Dutton, Sam Kuper, Sam Ruby, Sam Sneddon, Sam Weinig, Samikshya Chand, Samuel Bronson, Samy Kamkar, Sander van Lambalgen, Sanjoy Pal, Sanket Joshi, Sarah Gebauer, Sarven Capadisli, Satrujit Behera, Sayan Sivakumaran, Schalk Neethling, Scott Beardsley, Scott González, Scott Hess, Scott Miles, Scott O'Hara, Sean B. Palmer, Sean Feng, Sean Fraser, Sean Hayes, Sean Hogan, Sean Knapp, Sebastian Markbåge, Sebastian Schnitzenbaumer, Sendil Kumar N, Seth Call, Seth Dillingham, Shannon Moeller, Shanti Rao, Shaun Inman, Shiino Yuki, 贺师俊 (HE Shi-Jun), Shiki Okasaka, Shivani Sharma, shreyateeza, Shubheksha Jalan, Sidak Singh Aulakh, Sierk Bornemann, Sigbjørn Finne, Sigbjørn Vik, Silver Ghost, Silvia Pfeiffer, Šime Vidas, Simon Fraser, Simon Montagu, Simon Sapin, Yu Han, Simon Spiegel, Simon Wülker, Siye Liu, skeww, Smylers, Srirama Chandra Sekhar Mogali, Stanton McCandlish, stasoid, Stefan Håkansson, Stefan Haustein, Stefan Santesson, Stefan Schumacher, Ştefan Vargyas, Stefan Weiss, Steffen Meschkat, Stephen Chenney, Stephen Ma, Stephen Stewart, Stephen White, Steve Comstock, Steve Faulkner, Steve Fink, Steve Orvell, Steve Runyon, Steven Bennett, Steven Bingler, Steven Garrity, Steven Tate, Stewart Brodie, Stuart Ballard, Stuart Langridge, Stuart Parmenter, Subramanian Peruvemba, Sudhanshu Jaiswal, sudokus999, Sunava Dutta, Surma, Susan Borgrink, Susan Lesch, Sylvain Pasche, T.J. Crowder, Tab Atkins-Bittner, Taiju Tsuiki, Takashi Toyoshima, Takayoshi Kochi, Takeshi Yoshino, Tantek Çelik, 田村健人 (Kent TAMURA), Tawanda Moyo, Taylor Hunt, Ted Mielczarek, Terence Eden, Terrence Wood, Tetsuharu OHZEKI, Theresa O'Connor, Thijs van der Vossen, Thomas Broyer, Thomas Koetter, Thomas O'Connor, Tim Altman, Tim Dresser, Tim Johansson, Tim Nguyen, Tim Perry, Tim van der Lippe, TJ VanToll, Tobias Schneider, Tobie Langel, Toby Inkster, Todd Moody, Tom Baker, Tom Pike, Tom Schuster, Tom ten Thij, Tomasz Jakut, Tomek Wytrębowicz, Tommy Thorsen, Tony Ross, Tooru Fujisawa, Toru Kobayashi, Traian Captan, Travis Leithead, Trevor Rowbotham, Trevor Saunders, Trey Eckels, triple-underscore, Tristan Fraipont, Tristan Parisot, 保呂 毅 (Tsuyoshi Horo), Tyler Close, Valentin Gosu, Vardhan Gupta, Vas Sudanagunta, Veli Şenol, Victor Carbune, Victor Costan, Vipul Snehadeep Chawathe, Vitya Muhachev, Vlad Levin, Vladimir Katardjiev, Vladimir Vukićević, Vyacheslav Aristov, voracity, Walter Steiner, Wakaba, Wayne Carr, Wayne Pollock, Wellington Fernando de Macedo, Wenson Hsieh, Weston Ruter, Wilhelm Joys Andersen, Will Levine, Will Ray, William Chen, William Swanson, Willy Martin Aguirre Rodriguez, Wladimir Palant, Wojciech Mach, Wolfram Kriesing, Xan Gregg, xenotheme, XhmikosR, Xida Chen, Xidorn Quan, Xue Fuqiao, Yang Chen, Yao Xiao, Yash Handa, Yay295, Ye-Kui Wang, Yehuda Katz, Yi Xu, Yi-An Huang, Yngve Nysaeter Pettersen, Yoav Weiss, Yonathan Randolph, Yu Huojiang, Yuki Okushi, Yury Delendik, 平野裕 (Yutaka Hirano), Yuzo Fujishima, 西條柚 (Yuzu Saijo), Zhenbin Xu, 张智强 (Zhiqiang Zhang), Zoltan Herczeg, Zyachel, and Øistein E. Andersen, for their useful comments, both large and small, that have led to changes to this specification over the years.\n\nThanks also to everyone who has ever posted about HTML to their blogs, public mailing lists, or forums, including all the contributors to the various W3C HTML WG lists and the various WHATWG lists.\n\nSpecial thanks to Richard Williamson for creating the first implementation of in Safari, from which the canvas feature was designed.\n\nSpecial thanks also to the Microsoft employees who first implemented the event-based drag-and-drop mechanism, , and other features first widely deployed by the Windows Internet Explorer browser.\n\nSpecial thanks and $10,000 to David Hyatt who came up with a broken implementation of the adoption agency algorithm that the editor had to reverse engineer and fix before using it in the parsing section.\n\nThanks to the participants of the microdata usability study for allowing us to use their mistakes as a guide for designing the microdata feature.\n\nThanks to the many sources that provided inspiration for the examples used in the specification.\n\nThanks also to the Microsoft blogging community for some ideas, to the attendees of the W3C Workshop on Web Applications and Compound Documents for inspiration, to the #mrt crew, the #mrt.no crew, and the #whatwg crew, and to Pillar and Hedral for their ideas and support.\n\nThanks to Igor Zhbanov for generating PDF versions of the specification.\n\nSpecial thanks to the RICG for developing the element and related features; in particular thanks to Adrian Bateman, Bruce Lawson, David Newton, Ilya Grigorik, John Schoenick, Leon de Rijke, Mat Marquis, Marcos Cáceres, Tab Atkins, Theresa O'Connor, and Yoav Weiss for their contributions.\n\nSpecial thanks to the WPWG for incubating the custom elements feature. In particular, thanks to David Hyatt and Ian Hickson for their influence through the XBL specifications, Dimitri Glazkov for the first draft of the custom elements specification, and to Alex Komoroske, Alex Russell, Andres Rios, Boris Zbarsky, Brian Kardell, Daniel Buchner, Dominic Cooney, Erik Arvidsson, Elliott Sprehn, Hajime Morrita, Hayato Ito, Jan Miksovsky, Jonas Sicking, Olli Pettay, Rafael Weinstein, Roland Steiner, Ryosuke Niwa, Scott Miles, Steve Faulkner, Steve Orvell, Tab Atkins, Theresa O'Connor, Tim Perry, and William Chen for their contributions.\n\nSpecial thanks to the CSSWG for developing the worklets. In particular, thanks to Ian Kilpatrick for his work as editor of the original worklets specification.\n\nFor about ten years starting in 2003, this standard was almost entirely written by Ian Hickson (Google, ian@hixie.ch).\n\nStarting in 2015, the editor group expanded. It is currently maintained by Anne van Kesteren (Apple, annevk@annevk.nl), Domenic Denicola (Google, d@domenic.me) Dominic Farolino (Google, domfarolino@gmail.com), Philip Jägenstedt (Google, philip@foolip.org), and Simon Pieters (Mozilla, zcorpan@gmail.com).\n\nPart of the revision history of the element and related features can be found in the repository, which is available under the W3C Software and Document License.\n\nPart of the revision history of the metadata name can be found in the repository, which is available under CC0.\n\nPart of the revision history of the custom elements feature can be found in the repository, which is available under the W3C Software and Document License.\n\nPart of the revision history of the getter and setter can be found in the repository, which is available under CC0.\n\nPart of the revision history of the worklets feature can be found in the repository, which is available under the W3C Software and Document License.\n\nPart of the revision history of the import maps feature can be found in the repository, which is available under the W3C Software and Document License.\n\nPart of the revision history of the navigation API feature can be found in the repository, which is available under the W3C Software and Document License.\n\nPart of the revision history of the Close requests and close watchers section can be found in the repository, which is available under the W3C Software and Document License.\n\nCopyright © WHATWG (Apple, Google, Mozilla, Microsoft). This work is licensed under a Creative Commons Attribution 4.0 International License. To the extent portions of it are incorporated into source code, such portions in the source code are licensed under the BSD 3-Clause License instead.\n\nThis is the Living Standard. Those interested in the patent-review version should view the Living Standard Review Draft."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Structuring_content/Structuring_documents",
        "document": "In addition to defining individual parts of your page (such as \"a paragraph\" or \"an image\"), HTML also boasts a number of block level elements used to define areas of your website (such as \"the header\", \"the navigation menu\", \"the main content column\"). This article looks into how to plan a basic website structure, and write the HTML to represent this structure. Basic HTML familiarity, as covered in Basic HTML Syntax. Text-level semantics such as headings and paragraphs and lists.\n• The common HTML semantic structural elements, for example , , , , , and , and how to use them correctly.\n• The need to use semantic elements in appropriate places, rather than just using elements wherever a block-level container is required, and the benefits of this (such as improved accessibility).\n\nWebpages can and will look pretty different from one another, but they all tend to share similar standard components, unless the page is displaying a fullscreen video or game, is part of some kind of art project, or is just badly structured: Usually a big strip across the top with a big heading, logo, and perhaps a tagline. This usually stays the same from one page of a website to another. Links to the site's main sections; usually represented by menu buttons, links, or tabs. Like the header, this content usually remains consistent from one webpage to another — having inconsistent navigation on your website will just lead to confused, frustrated users. Many web designers consider the navigation bar to be part of the header rather than an individual component, but that's not a requirement; in fact, some also argue that having the two separate is better for accessibility, as screen readers can read the two features better if they are separate. A big area in the center that contains most of the unique content of a given webpage, for example, the video you want to watch, or the main story you're reading, or the map you want to view, or the news headlines, etc. This is the one part of the website that definitely will vary from page to page! Some peripheral info, links, quotes, ads, etc. Usually, this is contextual to what is contained in the main content (for example on a news article page, the sidebar might contain the author's bio, or links to related articles) but there are also cases where you'll find some recurring elements like a secondary navigation system. A strip across the bottom of the page that generally contains fine print, copyright notices, or contact info. It's a place to put common information (like the header) but usually, that information is not critical or secondary to the website itself. The footer is also sometimes used for SEO purposes, by providing links for quick access to popular content. A \"typical website\" could be structured something like this: Note: The image above illustrates the main sections of a document, which you can define with HTML. However, the appearance of the page shown here — including the layout, colors, and fonts — is achieved by applying CSS to the HTML.\n\nActive learning: exploring the code for our example Our example seen above is represented by the following code (you can also find the example in our GitHub repository). We'd like you to look at the example above, and then look over the listing below to see what parts make up what section of the visual. <!doctype html> <html lang=\"en-US\"> <head> <meta charset=\"utf-8\" /> <meta name=\"viewport\" content=\"width=device-width\" /> <title>My page title</title> <link href=\"https://fonts.googleapis.com/css?family=Open+Sans+Condensed:300|Sonsie+One\" rel=\"stylesheet\" /> <link rel=\"stylesheet\" href=\"style.css\" /> </head> <body> <!-- The main header used across all the pages of our website --> <header> <h1>Header</h1> </header> <nav> <ul> <li><a href=\"#\">Home</a></li> <li><a href=\"#\">Our team</a></li> <li><a href=\"#\">Projects</a></li> <li><a href=\"#\">Contact</a></li> </ul> <!-- A Search form: another common non-linear way to navigate through a site. --> <form> <input type=\"search\" name=\"q\" placeholder=\"Search query\" /> <input type=\"submit\" value=\"Go!\" /> </form> </nav> <!-- Our page's main content --> <main> <!-- An article --> <article> <h2>Article heading</h2> <p> Lorem ipsum dolor sit amet, consectetur adipisicing elit. Donec a diam lectus. Set sit amet ipsum mauris. Maecenas congue ligula as quam viverra nec consectetur ant hendrerit. Donec et mollis dolor. Praesent et diam eget libero egestas mattis sit amet vitae augue. Nam tincidunt congue enim, ut porta lorem lacinia consectetur. </p> <section> <h3>Subsection</h3> <p> Donec ut librero sed accu vehicula ultricies a non tortor. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aenean ut gravida lorem. Ut turpis felis, pulvinar a semper sed, adipiscing id dolor. </p> <p> Pelientesque auctor nisi id magna consequat sagittis. Curabitur dapibus, enim sit amet elit pharetra tincidunt feugiat nist imperdiet. Ut convallis libero in urna ultrices accumsan. Donec sed odio eros. </p> </section> <section> <h3>Another subsection</h3> <p> Donec viverra mi quis quam pulvinar at malesuada arcu rhoncus. Cum soclis natoque penatibus et manis dis parturient montes, nascetur ridiculus mus. In rutrum accumsan ultricies. Mauris vitae nisi at sem facilisis semper ac in est. </p> <p> Vivamus fermentum semper porta. Nunc diam velit, adipscing ut tristique vitae sagittis vel odio. Maecenas convallis ullamcorper ultricied. Curabitur ornare, ligula semper consectetur sagittis, nisi diam iaculis velit, is fringille sem nunc vet mi. </p> </section> </article> <!-- the aside content can also be nested within the main content --> <aside> <h2>Related</h2> <ul> <li><a href=\"#\">Oh I do like to be beside the seaside</a></li> <li><a href=\"#\">Oh I do like to be beside the sea</a></li> <li><a href=\"#\">Although in the North of England</a></li> <li><a href=\"#\">It never stops raining</a></li> <li><a href=\"#\">Oh well…</a></li> </ul> </aside> </main> <!-- The footer that is used across all the pages of our website --> <footer> <p>©Copyright 2050 by nobody. All rights reversed.</p> </footer> </body> </html> Take some time to look over the code and understand it — the comments inside the code should also help you to understand it. We aren't asking you to do much else in this article, because the key to understanding document layout is writing a sound HTML structure, and then laying it out with CSS. We'll wait for this until you start to study CSS layout as part of the CSS topic.\n\nSometimes you'll come across a situation where you can't find an ideal semantic element to group some items together or wrap some content. Sometimes you might want to just group a set of elements together to affect them all as a single entity with some CSS or JavaScript. For cases like these, HTML provides the and elements. You should use these preferably with a suitable attribute, to provide some kind of label for them so they can be easily targeted. is an inline non-semantic element, which you should only use if you can't think of a better semantic text element to wrap your content, or don't want to add any specific meaning. For example: <p> The King walked drunkenly back to his room at 01:00, the beer doing nothing to aid him as he staggered through the door. <span class=\"editor-note\"> [Editor's note: At this point in the play, the lights should be down low]. </span> </p> In this case, the editor's note is supposed to merely provide extra direction for the director of the play; it is not supposed to have extra semantic meaning. For sighted users, CSS would perhaps be used to distance the note slightly from the main text. is a block level non-semantic element, which you should only use if you can't think of a better semantic block element to use, or don't want to add any specific meaning. For example, imagine a shopping cart widget that you could choose to pull up at any point during your time on an e-commerce site: This isn't really an , as it doesn't necessarily relate to the main content of the page (you want it viewable from anywhere). It doesn't even particularly warrant using a , as it isn't part of the main content of the page. So a is fine in this case. We've included a heading as a signpost to aid screen reader users in finding it. Warning: Divs are so convenient to use that it's easy to use them too much. As they carry no semantic value, they just clutter your HTML code. Take care to use them only when there is no better semantic solution and try to reduce their usage to the minimum otherwise you'll have a hard time updating and maintaining your documents.\n\nTwo elements that you'll use occasionally and will want to know about are and . creates a line break in a paragraph; it is the only way to force a rigid structure in a situation where you want a series of fixed short lines, such as in a postal address or a poem. For example: <p> There once was a man named O'Dell<br /> Who loved to write HTML<br /> But his structure was bad, his semantics were sad<br /> and his markup didn't read very well. </p> Without the elements, the paragraph would just be rendered in one long line (as we said earlier in the course, HTML ignores most whitespace); with elements in the code, the markup renders like this: elements create a horizontal rule in the document that denotes a thematic change in the text (such as a change in topic or scene). Visually it just looks like a horizontal line. As an example: <p> Ron was backed into a corner by the marauding netherbeasts. Scared, but determined to protect his friends, he raised his wand and prepared to do battle, hoping that his distress call had made it through. </p> <hr /> <p> Meanwhile, Harry was sitting at home, staring at his royalty statement and pondering when the next spin off series would come out, when an enchanted distress letter flew through his window and landed in his lap. He read it hazily and sighed; \"better get back to work then\", he mused. </p>"
    },
    {
        "link": "https://kinsta.com/blog/html-best-practices",
        "document": "HTML best practices help developers offer innovative and highly interactive websites and web apps. These best practices help you develop the most feature-rich and business-centric applications. Plus, organizations can harness these best practices to provide a seamless user experience.\n\nToday, when we talk about HTML, we typically discuss HTML5 (and not its immediate predecessors). HTML5 is a powerful markup language that allows web developers to create a web document. It’s easy to use and understand, and almost all browsers support it. Also, it’s the foundation of almost all Content Management Systems (CMS)\n\nAs a web developer with minimal experience, questions such as “How can I write better HTML?” often arise. This article aims to help you get started on the right foot.\n\nYou probably already have a grasp of this markup language, but here are some HTML5 best practices that will let you code better.\n\nWhen creating an HTML document, the declaration is required for informing the browser what standards you’re using. Its purpose is to render your markup correctly.\n\nThe declaration should be in the first line of your HTML document. Here is a comparison between its right and wrong implementation:\n\nAlternatively, you can use the doctype corresponding to the HTML/XHTML version you want to use. Learn about the recommended list of doctype declarations to help you choose the right one.\n\nDevelopers know that the purpose of tags is to help web browsers distinguish between HTML content and ordinary content. HTML tags contain an opening tag, content, and closing tag. However, they’re often confused about the proper placement of tags, the elements that require closing tags, or when to omit tags.\n\nFor instance, where’s the best place to put tags?\n\nScript tags are typically placed inside the element. But a modern HTML best practice is to place them at the bottom of the document instead, before closing the tag, to delay their download. The webpage will load the Document Object Model (DOM) first, show it to the user, and then request the scripts afterward, reducing time to first byte (TTFB).\n\nThe browser interprets your HTML document line by line from top to bottom. So, when it reads the head and comes across a script tag, it starts a request to the server to get the file. There’s nothing inherently wrong with this process, but if the page is loading a huge file, it will take a long time and greatly affect the user experience.\n\nUnder the root element is the , or language, attribute. This attribute helps in translating an HTML document into the proper language. The best practice is to keep this attribute’s value as short as possible.\n\nFor example, the Japanese language is mostly used in Japan. Therefore, the country code is not necessary when targeting the Japanese language.\n\nOne of the most common HTML best practices is to check on the do’s and don’ts. Here are some known don’ts in HTML coding:\n\nLike any coding practice, the “keep it simple” principle is very applicable to HTML and HTML5. Generally, HTML5 is compatible with older HTML versions and XHTML. For that reason, we recommend avoiding the use of XML declarations or attributes.\n\nYou don’t need to declare code as such unless you want to write an XHTML document. Similarly, you don’t need XML attributes, such as:\n\nDevelopers should code with SEO in mind. Web contents that are not found are also not indexed. For that reason, here are some best SEO best practices to consider:\n\nThe tag is a handy tag, but misusing it may result in some non-intuitive behaviors. Thus, if you declare a base tag, then every link in the document will be relative unless explicitly specified:\n\nThis syntax changes the default behavior of some links. For example, linking to an external webpage with only the page name and extension:\n\nOr the browser will interpret it as:\n\nThis interpretation becomes chaotic, so it’s safer to always use absolute paths for your links.\n\nOn the other hand, writing metatag descriptions is not strictly a part of HTML best practices, but it’s still equally important. The attribute is what search engine crawlers reference when they index your page, so it’s vital to your SEO health.\n\nThe tag makes a web page search engine-friendly. For one thing, the text inside the tag appears in Google’s Search Engine Result Pages (SERP) and the user’s web browser bar and tabs.\n\nTake, for example, when you search the keyword “HTML5.” The title in this search result indicates the specific title attribute and the author. This is very important in SEO and site traffic generation.\n\nImages Must Have an Alt Attribute\n\nUsing a meaningful alt attribute with elements is a must for writing valid and semantic code.\n\nIn the table below, the bad practice column shows an element without an alt attribute. Although the second example in the same column has an alt attribute, its value is meaningless.\n\nThe meta description is an HTML element that describes and summarizes the contents of a webpage. Its purpose is for the users to find the context of the page. Although metadata doesn’t help anymore with SEO rankings, the meta description still plays a significant role in on-page SEO.\n\nHere is a sample code that includes the keywords, description, author’s name, and character set. The character set is used to support almost all the characters and symbols from different languages. On the other hand, you can set cookies, add a revision date, and allow the page to refresh.\n\nIn the anchor elements, the best practice is to use title attributes to improve accessibility. The title attribute increases the meaning of the anchor tag. The tag (or anchor element) paired with its attribute, creates a hyperlink to web pages, email addresses, and files. It is used to link locations within the same page or external addresses.\n\nCheck the example under the bad practice column — it’s there for being redundant. This type of practice is evident if a user uses a screen reader to read the anchor tag and read the same text twice to the listener. A screen reader is an assistive technology provided to the visually impaired or those with a learning disability. As a good practice, if you’re just repeating the anchor’s text, then it’s better not to use a title at all.\n\nWebsite development isn’t simply a matter of creating a block of text and headers, link pages, and you’re done. There are some best practices in HTML to consider to make the best of your website.\n\nThe HTML documents will still work without the primary elements: , , and . However, pages may not render correctly if these elements are missing. To that end, it’s important to use proper document structure consistently.\n\nFor a thematic grouping of content, use the section element. According to the W3C specification, a should contain a heading (H1, H2, etc.). Some developers skip the use of the heading element entirely, but we recommend including it to reach those better using screen readers:\n\nThe tag serves as a container for an external resource. This includes web pages, pictures, videos, or plug-ins. However, you must consider that most browsers no longer support Java Applets and plug-ins. What’s more, ActiveX controls are no longer supported in any browser, and the support for Shockwave Flash has also been turned off in modern browsers.\n\nWe recommend the following:\n• For a picture, use the tag.\n• For HTML pulled in from another site, use the tag.\n• For videos or audios, use the and tags.\n\nThe alt attribute in the element provides an image description useful to search engines and screen readers. It can come in especially handy to users when the images can’t be processed:\n\nLeave the alt attribute empty if there’s supplemental text to explain the image. This is to avoid redundancy:\n\nLeave elements empty if there are some restrictions in its content. An empty iframe element is always safe:\n\nDevelopers should provide fallback content, or backup links, for any or elements, just as with images. Fallback content is needed, especially for newly introduced elements in HTML:\n\nHTML documents become complicated, especially for web pages with a lot of content. It’s best to reduce the number of elements on a page to as few as you can manage. Learn how to use the heading elements wisely and follow how to elements denote HTML’s content hierarchy. This makes your content more meaningful for your readers, screen-reading software, and search engines.\n\nFor WordPress developers and content creators, use the element for the blog post’s title instead of the site’s name. This helps in search engine crawling, and this approach is SEO-friendly.\n\nIn addition, use the right HTML element to convey the information it contains to achieve a semantic and meaningful content structure. For example, use for emphasis and for heavy emphasis instead of their predecessors or , which are now deprecated.\n\nJust as importantly, use for paragraphs, and avoid using to add a new line between paragraphs. Instead, make use of CSS margin and/or padding properties to position your content better. Sometimes, you might find yourself tempted to use the tag for indentation purposes. Avoid this pitfall — use it exclusively when quoting text.\n\nOne of the best HTML best practices is to use semantically appropriate elements in your page layout. Several elements will help you organize your layout in sections.\n\nWith the wide breadth of topics under HTML layout, it’s best to highlight the do’s and don’ts in layout quickly. For instance, HTML gives more semantic meaning to the header and footer elements, so don’t neglect the use of the tag as it’s used in any given section or article. Aside from controlling the and tags and other stylistic elements of the document, it’s used in headings, publish dates, and other introductory content of your page or section. Similarly, you can do away with the notion that footers belong to the copyright section only — now, you can use it just about everywhere.\n\nFor the element, you should use it for site-wide navigation. There is no need to declare a role as the usage is already implied in the tag.\n\nAs for the element, it is already part of the latest HTML5 versions, which denote the main content of the document body. So, there is no longer any need to use when we have a more specific tag for our main content.\n\nThe is used for a content block. It is a stand-alone and makes sense without the need to give further explanation, while the tag is used to divide a page into different subject areas or to section an individual article. Unfortunately, many developers still use the two interchangeably.\n\nConsider that the tag is a more generic tag than the tag. This means that the former denotes content related to the topic at hand, but not necessarily self-contained. The latter, conversely, is a stand-alone property.\n\nBut when there’s no appropriate markup tag for your purposes, what should you use? The answer is to use when no other element works or when it’s a specifically stylistic element. For our purposes, using is also a bad practice.\n\nLet’s go back to the tag, which is a semantic markup tag. It is not a stylistic one, and it is important to emphasize it. In effect, a good coding practice should include a heading tag.\n\nNow, the don’ts with follows that you shouldn’t use it to tag a wrapper, a container, or any other purely stylistic block. Below is an example of bad coding practice with the tag:\n\nHere is a better approach, but it overuses the tag:\n\nHence, a much better coding practice is:\n\nA popular part of many layouts are figures for data representation, and the element is mostly used with pictures. However, it has a wider range of possible uses, as anything related to the document could be positioned anywhere and wrapped in a element. Some examples include illustrations, tables, or diagrams in a book.\n\nAn interesting characteristic of is that it does not contribute to the document’s outline. Therefore, you can use it to group elements with a common theme — for instance, several images with one common , or even a block of code.\n\nIn grouping elements with , use . The caption should go either directly after the opening tag, or directly before the closing tag :\n\nHTML is one of the core technologies in web development. It has awesome power and features that made it popular with developers and business owners. Frontend development keeps on innovating, and to keep up with it, developers should know the best practices in HTML scripting.\n\nInline styles will make your code cluttered and unreadable. To that end, always link to and use external stylesheets. Also, avoid using import statements in your CSS files as they produce an extra server request.\n\nThe same goes for inline CSS and JavaScript. Apart from readability issues, this will make your document heavier and more difficult to maintain so that you can avoid inlining code.\n\nUsing lowercase characters in code is an industry-standard practice. Although using uppercase or other text cases will still render your page, the problem is not standardization but code readability.\n\nCode readability is an important aspect of coding as it helps make applications maintainable and secure. Not only that, web development mostly comprises a team. Making your code readable makes your work and the work of your team less complicated.\n\nWhile there are many don’ts in coding HTML, we’ll share two basics don’ts in scripting:\n• Write well-indented and consistently formatted codes: Clean and well-written code promotes better readability on your site, which is a huge help to your developer and other people who might work with the site. It also shows great professionalism and attention to detail, reflecting well on your attitude as a developer.\n• Refrain from including excessive comments: Comments are essential and make your code easier to understand. However, HTML syntax is very self-explanatory, so commenting is not necessary unless you have to clarify semantics and naming conventions.\n\nValidating and minifying codes are used to identify errors early on. Don’t wait until you finish your HTML document — make it a habit to validate and identify errors frequently. You can do validation either manually or use any known validator tool such as W3C Markup Validator.\n\nAt the same time, practice minification by removing anything that is not essential such as comments or whitespace. Ensure that you write clean and concise codes to reduce the size of your HTML file. You can use tools such as HTML Minifier and others.\n\nMany HTML5 best practices resources for 2021 are available online to assist you. However, remember the general rule in coding: consistency. This article has provided basic insights and helped you kick-start that frontend development journey. Using this guide, you’ll be an expert in semantically correct HTML5 in no time.\n\nWhen you’re ready, look beyond what HTML can offer and explore some open source HTML frameworks too for building modern, single-page web apps. They offer excellent synchronization between the data and UI and work seamlessly with CSS and JavaScript.\n\nDid we miss any HTML best practices that you use in your own coding? Let us know in the comments section!"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Structuring_content/Creating_links",
        "document": "Hyperlinks are one of the most exciting innovations the Web has to offer. They've been a feature of the Web since the beginning, and are what makes the Web a web. Hyperlinks allow us to link documents to other documents or resources, link to specific parts of documents, or make apps available at a web address. Almost any web content can be converted to a link so that when clicked or otherwise activated the web browser goes to another web address (URL). Note: A URL can point to HTML files, text files, images, text documents, video and audio files, or anything else that lives on the Web. If the web browser doesn't know how to display or handle the file, it will ask you if you want to open the file (in which case the duty of opening or handling the file is passed to a suitable native app on the device) or download the file (in which case you can try to deal with it later on). For example, the BBC homepage contains many links that point not only to multiple news stories, but also different areas of the site (navigation functionality), login/registration pages (user tools), and more.\n\nAnother attribute you may want to add to your links is . The title contains additional information about the link, such as which kind of information the page contains, or things to be aware of on the website. <p> I'm creating a link to <a href=\"https://www.mozilla.org/en-US/\" title=\"The best place to find more information about Mozilla's mission and how to contribute\"> the Mozilla homepage</a>. </p> This gives us the following result and hovering over the link displays the title as a tooltip: Note: A link title is only revealed on mouse hover, which means that people relying on keyboard controls or touchscreens to navigate web pages will have difficulty accessing title information. If a title's information is truly important to the usability of the page, then you should present it in a manner that will be accessible to all users, for example by putting it in the regular text.\n\nTo fully understand link targets, you need to understand URLs and file paths. This section gives you the information you need to achieve this. A URL, or Uniform Resource Locator is a string of text that defines where something is located on the Web. For example, Mozilla's English homepage is located at . URLs use paths to find files. Paths specify where the file you're interested in is located in the filesystem. Let's look at an example of a directory structure, see the directory structure shown below: The root of this directory structure is called . When working locally with a website, you'll have one directory that contains the entire site. Inside the root, we have an file and a . In a real website, would be our home page or landing page (a web page that serves as the entry point for a website or a particular section of a website.). There are also two directories inside our root — and . These each have a single file inside them — a PDF ( ) and an file, respectively. Note that you can have two files in one project, as long as they're in different filesystem locations. The second would perhaps be the main landing page for project-related information. Let's look at some examples of links between some different files in this directory structure to demonstrate different link types:\n• Same directory: If you wanted to include a hyperlink inside (the top level ) pointing to , you would specify the filename that you want to link to, because it's in the same directory as the current file. The URL you would use is : <p> Want to contact a specific staff member? Find details on our <a href=\"contacts.html\">contacts page</a>. </p>\n• Moving down into subdirectories: If you wanted to include a hyperlink inside (the top level ) pointing to , you would need to go down into the directory before indicating the file you want to link to. This is done by specifying the directory's name, then a forward slash, then the name of the file. The URL you would use is :\n• Moving back up into parent directories: If you wanted to include a hyperlink inside pointing to , you'd have to go up a directory level, then back down into the directory. To go up a directory, use two dots — — so the URL you would use is : Note: You can combine multiple instances of these features into complex URLs, if needed, for example: .\n\nIt's possible to link to a specific part of an HTML document, known as a document fragment, rather than just to the top of the document. To do this you first have to assign an attribute to the element you want to link to. It normally makes sense to link to a specific heading, so this would look something like the following: Then to link to that specific , you'd include it at the end of the URL, preceded by a hash/pound symbol ( ), for example: <p> Want to write us a letter? Use our <a href=\"contacts.html#Mailing_address\">mailing address</a>. </p> You can even use the document fragment reference on its own to link to another part of the current document: <p> The <a href=\"#Mailing_address\">company mailing address</a> can be found at the bottom of this page. </p>\n\nTwo terms you'll come across on the web are absolute URL and relative URL: Absolute URL: Points to a location defined by its absolute location on the web, including protocol and domain name. For example, if an page is uploaded to a directory called that sits inside the root of a web server, and the website's domain is , the page would be available at (or even just , as most web servers just look for a landing page such as to load if it isn't specified in the URL.) An absolute URL will always point to the same location, no matter where it's used. Relative URL: Points to a location that is relative to the file you are linking from, more like what we looked at in the previous section. For example, if we wanted to link from our example file at to a PDF file in the same directory, the URL would just be the filename — — no extra information needed. If the PDF was available in a subdirectory inside called , the relative link would be (the equivalent absolute URL would be .) A relative URL will point to different places depending on the actual location of the file you refer from — for example if we moved our file out of the directory and into the root of the website (the top level, not in any directories), the relative URL link inside it would now point to a file located at , not a file located at . Of course, the location of the file and folder won't suddenly change because you moved the file — this would make your link point to the wrong place, so it wouldn't work if clicked on. You need to be careful!\n\nWhen linking to a resource that will not be opened in the current page as a \"normal navigation\", you should add clear wording to the link text about what is going to happen. For example, if you're downloading or streaming a resource, or if the link is going to open a popup or perform some other potentially unexpected effect, this should be stated in the text. This is important for users on low bandwidth connections, who might want to avoid downloading assets of multiple megabytes. It also helps to set up expectations for screen reader users, who may not be aware of what's happening otherwise. Let's look at some examples, to see what kind of text can be used here: <p> <a href=\"/large-report.pdf\" download> Download the sales report (PDF, 10MB) </a> </p> <p> <a href=\"https://www.example.com/video-stream/\" target=\"_blank\"> Watch the video (stream opens in separate tab, HD quality) </a> </p>\n\nWhen to open links in a new tab Links by default open in the same tab as the page they are on, which allows the user to navigate back to the previous page using the browser's back button. However, many sites (including MDN) choose to open certain links, especially external links, in a new tab. This is done by setting the attribute to . Firefox is developed by the <a href=\"https://www.mozilla.org/en-US/\" target=\"_blank\">Mozilla Foundation</a>. Whether or not to open links in a new tab should be a conscious decision, based on user experience design considerations. Here are some things to think about:\n• Opening links in a new tab presents the two documents simultaneously, which is useful for a \"parallel\" navigation experience. On the other hand, links that open in the same tab are more like a continuation of the current page.\n• Opening links in a new tab can be disorienting for users who are accustomed to using the back button.\n• Even when links are opened in the same tab by default, users can still choose to open them in a new tab, using keyboard shortcuts or context menu options. On the other hand, links that open in a new tab are hard to open in the same tab.\n• Screen reader users may be confused by links that open in a new tab, as they may not realize that the new tab has opened, and they may lose context about their location on the page. A common approach is to open external links in new tabs and internal links in the same tab. Some designers prefer to open all links in the same tab. If you do open links in new tabs, then it is recommended that you provide cues for these links, such as an icon next to the link text.\n\nFor this exercise, we'd like you to link some pages together with a navigation menu to create a multipage website. This is one common way in which a website is created — the same page structure is used on every page, including the same navigation menu, so when links are clicked it gives the impression that you are staying in the same place, and different content is being brought up. You'll need to make local copies of the following four pages, all in the same directory. For a complete file list, see the navigation-menu-start directory:\n• Add an unordered list in the indicated place on one page that includes the names of the pages to link to. A navigation menu is usually just a list of links, so this is semantically OK.\n• Change each page name into a link to that page.\n• Copy the navigation menu across to each page.\n• On each page, remove just the link to that same page — it's confusing and unnecessary for a page to include a link to itself. And, the lack of a link acts a good visual reminder of which page you are currently on. The finished example should look similar to the following page: Note: If you get stuck, or aren't sure if you have got it right, you can check the navigation-menu-marked-up directory to see the correct answer."
    },
    {
        "link": "https://w3schools.com/html/html5_syntax.asp",
        "document": "Consistent, clean, and tidy HTML code makes it easier for others to read and understand your code.\n\nHere are some guidelines and tips for creating good HTML code.\n\nAlways declare the document type as the first line in your document.\n\nThe correct document type for HTML is:\n\nHTML allows mixing uppercase and lowercase letters in element names.\n\nHowever, we recommend using lowercase element names, because:\n\nIn HTML, you do not have to close all elements (for example the element).\n\nHowever, we strongly recommend closing all HTML elements, like this:\n\nHTML allows mixing uppercase and lowercase letters in attribute names.\n\nHowever, we recommend using lowercase attribute names, because:\n\nHowever, we recommend quoting attribute values, because:\n• You MUST use quotes if the value contains spaces\n\nAlways Specify alt, width, and height for Images\n\nAlways specify the attribute for images. This attribute is important if the image for some reason cannot be displayed.\n\nAlso, always define the and of images. This reduces flickering, because the browser can reserve space for the image before loading.\n\nHTML allows spaces around equal signs. But space-less is easier to read and groups entities better together.\n\nWhen using an HTML editor, it is NOT convenient to scroll right and left to read the HTML code.\n\nTry to avoid too long code lines.\n\nDo not add blank lines, spaces, or indentations without a reason.\n\nFor readability, add blank lines to separate large or logical code blocks.\n\nFor readability, add two spaces of indentation. Do not use the tab key.\n\nThe element is required in HTML.\n\nThe contents of a page title is very important for search engine optimization (SEO)! The page title is used by search engine algorithms to decide the order when listing pages in search results.\n• provides a title for the page when it is added to favorites\n• displays a title for the page in search-engine results\n\nSo, try to make the title as accurate and meaningful as possible:\n\nAn HTML page will validate without the and tags:\n\nHowever, we strongly recommend to always add the and tags!\n\nOmitting and can also crash DOM and XML software.\n\nThe HTML <head> tag can also be omitted.\n\nBrowsers will add all elements before , to a default element.\n\nHowever, we recommend using the tag.\n\nIn HTML, it is optional to close empty elements.\n\nIf you expect XML/XHTML software to access your page, keep the closing slash (/), because it is required in XML and XHTML.\n\nYou should always include the attribute inside the tag, to declare the language of the Web page. This is meant to assist search engines and browsers.\n\nTo ensure proper interpretation and correct search engine indexing, both the language and the character encoding should be defined as early as possible in an HTML document:\n\nThe viewport is the user's visible area of a web page. It varies with the device - it will be smaller on a mobile phone than on a computer screen.\n\nYou should include the following element in all your web pages:\n\nThis gives the browser instructions on how to control the page's dimensions and scaling.\n\nThe part sets the width of the page to follow the screen-width of the device (which will vary depending on the device).\n\nThe part sets the initial zoom level when the page is first loaded by the browser.\n\nHere is an example of a web page without the viewport meta tag, and the same web page with the viewport meta tag:\n\nShort comments should be written on one line, like this:\n\nComments that spans more than one line, should be written like this:\n\nLong comments are easier to observe if they are indented with two spaces.\n\nUse simple syntax for linking to style sheets (the attribute is not necessary):\n\nShort CSS rules can be written compressed, like this:\n\nLong CSS rules should be written over multiple lines:\n• Place the opening bracket on the same line as the selector\n• Use one space before the opening bracket\n• Use two spaces of indentation\n• Use semicolon after each property-value pair, including the last\n• Only use quotes around values if the value contains spaces\n• Place the closing bracket on a new line, without leading spaces\n\nUse simple syntax for loading external scripts (the attribute is not necessary):\n\nUsing \"untidy\" HTML code can result in JavaScript errors.\n\nThese two JavaScript statements will produce different results:\n\nSome web servers (Apache, Unix) are case sensitive about file names: \"london.jpg\" cannot be accessed as \"London.jpg\".\n\nOther web servers (Microsoft, IIS) are not case sensitive: \"london.jpg\" can be accessed as \"London.jpg\".\n\nIf you use a mix of uppercase and lowercase, you have to be aware of this.\n\nIf you move from a case-insensitive to a case-sensitive server, even small errors will break your web!\n\nTo avoid these problems, always use lowercase file names!\n\nHTML files should have a .html extension (.htm is allowed).\n\nThere is no difference between the .htm and .html file extensions!\n\nBoth will be treated as HTML by any web browser and web server.\n\nWhen a URL does not specify a filename at the end (like \"https://www.w3schools.com/\"), the server just adds a default filename, such as \"index.html\", \"index.htm\", \"default.html\", or \"default.htm\".\n\nIf your server is configured only with \"index.html\" as the default filename, your file must be named \"index.html\", and not \"default.html\".\n\nHowever, servers can be configured with more than one default filename; usually you can set up as many default filenames as you want."
    },
    {
        "link": "https://stackoverflow.com/questions/55193570/html5-elements-and-html-structuring-sectioning",
        "document": "I'll try to answer your questions based on my understanding of what is said here:\n\nBoth and can be a . According to the references above, a element represents a generic section of a document, .. and a thematic grouping of a content. And it goes on to give examples. Examples of sections would be chapters, the various tabbed pages in a tabbed dialog box, or the numbered sections of a thesis. A Web site’s home page could be split into sections for an introduction, news items, and contact information.\n\nHowever, neither can be an nor an because both contain an element which is not considered a phrasing content.\n\nNow, they can also be an if their content are tangentially related to the content of the parent, which in this case is the ... An can be considered separate from the parent, albeit related to it.\n\nSurprisingly, it is okay according to the HTML Living Standard - Headings and Sections, which says:\n\nSubsequent headings of equal or higher rank start new (implied) sections, headings of lower rank start implied subsections that are part of the previous one. In both cases, the element represents the heading of the implied section. (Emphasis added)\n\nThis is similar to your previous question. The link I cited actually re-uses within elements in the same element.\n\nIn some cases, this is actually easier to maintain especially if a tends to be moved a lot during editing.\n\nTechnically, it is correct. An is allowed where flow content is expected.\n\nBut deciding between making them an or will depend on what their content actually serves to do in relation to the they belong. An is more specific in its purpose."
    }
]