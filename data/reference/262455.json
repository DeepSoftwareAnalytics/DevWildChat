[
    {
        "link": "https://w3schools.com/sql/sql_Groupby.asp",
        "document": "The statement groups rows that have the same values into summary rows, like \"find the number of customers in each country\".\n\nThe statement is often used with aggregate functions ( , , , , ) to group the result-set by one or more columns.\n\nBelow is a selection from the \"Customers\" table in the Northwind sample database:\n\nThe following SQL statement lists the number of customers in each country:\n\nThe following SQL statement lists the number of customers in each country, sorted high to low:\n\nBelow is a selection from the \"Orders\" table in the Northwind sample database:\n\nAnd a selection from the \"Shippers\" table:\n\nGROUP BY With JOIN Example\n\nThe following SQL statement lists the number of orders sent by each shipper:\n\nSELECT Shippers.ShipperName, COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders\n\nLEFT JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID\n\n GROUP BY ShipperName; Try it Yourself »"
    },
    {
        "link": "https://w3schools.com/sql/sql_groupby.asp",
        "document": "The statement groups rows that have the same values into summary rows, like \"find the number of customers in each country\".\n\nThe statement is often used with aggregate functions ( , , , , ) to group the result-set by one or more columns.\n\nBelow is a selection from the \"Customers\" table in the Northwind sample database:\n\nThe following SQL statement lists the number of customers in each country:\n\nThe following SQL statement lists the number of customers in each country, sorted high to low:\n\nBelow is a selection from the \"Orders\" table in the Northwind sample database:\n\nAnd a selection from the \"Shippers\" table:\n\nGROUP BY With JOIN Example\n\nThe following SQL statement lists the number of orders sent by each shipper:\n\nSELECT Shippers.ShipperName, COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders\n\nLEFT JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID\n\n GROUP BY ShipperName; Try it Yourself »"
    },
    {
        "link": "https://docs.aws.amazon.com/dms/latest/sql-server-to-aurora-postgresql-migration-playbook/chap-sql-server-aurora-pg.sql.groupby.html",
        "document": "This topic provides reference information about migrating from Microsoft SQL Server 2019 to Amazon Aurora PostgreSQL, focusing on GROUP BY, CUBE, ROLLUP, and GROUPING SETS functionalities. You can use this guide to understand the similarities and differences between these database systems when working with aggregate functions and grouping operations.\n\nis an ANSI SQL query clause used to group individual rows that have passed the filter clause into groups to be passed on to the filter and then to the list. This grouping supports the use of aggregate functions such as , , , and others.\n\nThe basic ANSI syntax for GROUP BY supports multiple grouping expressions, the and keywords, and the clause; all used to add super-aggregate rows to the output.\n\nUp to SQL Server 2008 R2, the database engine supported a legacy, proprietary syntax (not ANSI Compliant) using the and clauses. These clauses added super-aggregates to the output.\n\nAlso, up to SQL Server 2008 R2, SQL Server supported the syntax, which was used to create an empty group for rows that failed the WHERE clause.\n\nThe preceding example produces the following results.\n\nThe rows with NULL were added as a result of the clause and contain super aggregates for the following:\n\nUsing instead of adds super aggregates in all possible combinations, not only in expression order.\n\nThe preceding example produces the following results.\n\nFour additional rows were added by the . They provide super aggregates for every date for all customers that were not part of the results in the preceding example.\n\nUse the Orders table from the previous example.\n\nThe preceding example produces the following results.\n\nThe last row failed the WHERE clause and was returned as an empty group as indicated by the warning for the empty .\n\nThe following query uses the ANSI compliant syntax to provide all possible aggregate combinations for the Orders table, similar to the result of the syntax. This syntax requires specifying each dimension that needs to be aggregated.\n\nThe preceding example produces the following results.\n\nFor more information, see Aggregate Functions (Transact-SQL) and SELECT - GROUP BY- Transact-SQL in the SQL Server documentation.\n\nAmazon Aurora PostgreSQL-Compatible Edition (Aurora PostgreSQL) supports the basic ANSI syntax for and also supports , and .\n\nIn Aurora PostgreSQL, you can use and clauses in the same query, but the syntax is different from SQL Server. There is no clause in the statement.\n\nThe main difference is the need to move from writing the column to after the .\n\nFor the option, it’s the same change.\n\nFor the , use the following query.\n\nFor more information, see Table Expressions in the PostgreSQL documentation.\n\nThe functionality exists except for the option.\n\nConvert every query to use the column name after the option, such as , , or .\n\nThe preceding example produces the following results.\n\nThe preceding example produces the following results.\n\nThe following table shows similarities, differences, and key migration considerations.\n\nFor more information, see Aggregate Functions in the PostgreSQL documentation."
    },
    {
        "link": "https://hightouch.com/sql-dictionary/sql-group-by",
        "document": "What is the SQL GROUP BY Clause?\n\nThe GROUP BY clause in SQL is a powerful function used to group rows from a table based on the values of one or more columns. It is often used in conjunction with aggregate functions (such as COUNT, SUM, AVG, MAX, or MIN) to perform calculations on these grouped data. GROUP BY is a fundamental tool for summarizing and analyzing data in relational databases.\n\nWhen to Use GROUP BY?\n\nYou would use the GROUP BY clause when you need to:\n• Aggregate data: When you want to calculate summary statistics, like the total sales, average scores, or the count of items that meet certain criteria.\n• Group similar data: When you want to categorize rows into meaningful groups based on one or more columns, such as grouping sales by product categories, employees by department, or customers by location.\n• Simplify large datasets: When you have a large dataset and you want to reduce the number of rows by summarizing and condensing information.\n\nThe basic syntax of the GROUP BY clause is as follows:\n• : The columns you want to retrieve.\n• : The column by which you want to group the data.\n• : Functions like SUM, COUNT, AVG, MAX, or MIN that operate on the grouped data.\n• : The name of the table from which you want to retrieve data.\n\nYou can also use multiple columns in the GROUP BY clause to create more granular groups.\n• : The column by which you want to group the data. It can be of any data type (numeric, text, date, etc.).\n• : Various aggregate functions can be used, depending on what you want to calculate (e.g., SUM, COUNT, AVG, MAX, MIN).\n\nLet's consider a simple example. Suppose we have a table named with columns , , and . We want to find the total revenue for each product category.\n\nThe result of the above query might look like this:\n\nGROUP BY is used in a wide range of scenarios, including but not limited to:\n• Employee reports: Grouping employees by department or job title to calculate average salaries.\n• Website analytics: Grouping website visits by date, user, or page to analyze traffic patterns.\n\nThe GROUP BY clause is a standard SQL feature supported by most relational database systems, including but not limited to MySQL, PostgreSQL, SQL Server, Oracle, and SQLite. While the basic syntax is consistent across these systems, some advanced features or specific functions may vary from one database to another.\n\nAlways consult the documentation for your specific database system for any unique implementations or extensions of the GROUP BY clause."
    },
    {
        "link": "https://sqlshack.com/an-overview-of-the-sql-group-by-clause",
        "document": "This article briefly explains the SQL group by clause, when it should be used, and what we should consider when using it.\n\nSide Note: All code examples in this article are made using SQL Server 2019 and Stack Overflow 2010 database.\n\nWhat is “Grouping” in SQL, and why is it needed?\n\nConsider that we are analyzing the Stack overflow QA website database. This database contains several tables that store information about the website users, posted questions, answers, comments, and awarded badges.\n\nFor example, let’s take the “Posts” table. This table contains all information about different types of posts on the QA website; questions, answers, wiki, moderators’ nominations… If we are looking to count the number of each type of post, using a simple SELECT statement can return the number of rows of a single type by using the COUNT() function besides filtering the result using the WHERE clause:\n\nFigure 1 – Calculating the number of rows for one post’s type\n\nIf we try to add the PostTypeId column before the COUNT(*), the SQL command will not be executed and will throw the following exception to notify the user that aggregation is required to perform this operation:\n\nColumn ‘StackOverflow2010.dbo.Posts.PostTypeId’ is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause.\n\nThe SQL GROUP BY clause arranges similar data stored within one or several columns into groups, where an aggregate function is applied to produce summaries. For example, calculating the number of posts for each user.\n\nFigure 2 – Calculating the number of each type of post\n\nBefore explaining the SQL GROUP BY clause and when we should use it, we need to know how is the SQL query executed by the database engine. Once asking to execute a SQL command, the database engine parses the different parts of it in the following order:\n\nAs defined in the Microsoft official documentation, a SELECT – GROUP BY command is a SELECT statement clause that divides the query result into groups of rows, usually to perform one or more aggregations on each group. The SELECT statement returns one row per group”.\n\nThe syntax of the GROUP BY clause is as follows:\n\nA SQL GROUP BY clause can be used to perform aggregations over each group or even to remove duplicated rows based on the grouping expression. For example, assume that we need to extract all the distinct locations of the Stack Overflow users. We can simply add the DISTINCT keyword after the SELECT term.\n\nOr, we can use a SELECT – GROUP BY command to achieve the same thing:\n\nIt is worth mentioning that both queries have the same execution plan.\n\nNow, we can add an aggregation function in the SELECT clause to perform it per each group.\n\nAs shown in the image below, all NULL values are considered equal and collected into a single group.\n\nFigure 4 – Adding an aggregate function to the SELECT – GROUP BY command\n\nChecking the command execution plan, we can see that after aggregating the data within groups, a scalar function is applied per each group.\n\nThe simplest way to use the SQL GROUP BY clause is to select the columns needed for the grouping operation. All columns specified in the SELECT clause – except the aggregation functions – should be specified in the GROUP BY clause. For example, if we execute the following query:\n\nThe following exception is thrown:\n\nColumn ‘StackOverflow2010.dbo.Users.Id’ is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause.\n\nAnother thing worth mentioning is that column aliases cannot be used in the SQL GROUP BY clause since it is computed before the SELECT clause by the SQL engine.\n\nWe can also use user-defined scalar functions alongside the columns specified in the SELECT and GROUP BY clauses. For example, we created the following function to get whether a question has an answer or not:\n\nThe following query can be executed successfully.\n\nAnother way to group the result is by using column expressions. For example, if we are looking to group the columns based on a specific computation such as a mathematical expression or a CASE WHEN expression, we can simply use it similar to a single column. For example, assume that we want to count the number of questions being solved and the number of open issues on the Stack Overflow website. Noting that the Posts table only contains a column named AccetpedAnswerId that contains the identifier of the answer.\n\nWe cannot use the WHERE clause in this operation to filter the query result based on the group aggregated function result since the database engine executes the WHERE clause before applying the aggregate function. This is why the HAVING clause was found.\n\nThe HAVING clause can only be used with a SQL GROUP BY clause. For example, we need to get the locations mentioned in more than 1000 and less than 10000 user profiles.\n\nFigure 8 – Using the HAVING keyword to filter the result of a grouping operation\n\nTo explain the ROLLUP, CUBE, and GROUPING SETS options, we create a view from the Posts and Users tables with the following structure:\n\nLet’s assume that we want to generate a report showing the number of posts in each year, quarter, and month, for each post’s type. The result should be as the following:\n\nThe SQL GROUP BY ROLLUP lets us create the combinations that exist in the data in addition to rolling up within the hierarchical order we define in the ROLLUP statement. For example, let us try the following query:\n\nAs shown in the image below, the result includes three levels of aggregations:\n• The number of posts per month\n• The number of posts per quarter\n• The number of posts per year\n\nFigure 9 – Using the ROLLUP statement to apply aggregation on different hierarchical levels\n\nNow, let’s assume that we are asked to generate a report that shows the number of posts per user location, the post type, or both.\n\nTHE SQL GROUP BY CUBE statement produces every possible combination between the columns mentioned in the CUBE statement. For example, let’s try the following command:\n\nAs shown in the image below, the results contain three groups:\n• The number of posts per location\n• The number of posts per type\n• The number of posts per location and type\n\nFigure 10 – Using the GROUP BY CUBE statement\n\nSometimes we will be asked to only generate a report for only some specific combination of columns and expressions. In this case, using the CUBE or ROLLUP may be inefficient and time-consuming.\n\nFor this reason, we can use the GROUPING SETS statement, where we should define each combination explicitly. For example, we only want to generate a report showing the number of posts per location, per type, and the total number of posts.\n\nAs shown in the image below, the first five rows show the number of posts for each type, the 6th row shows the total number of posts, and the rest shows the number of posts per location.\n\nThis article briefly explained the SQL GROUP BY clause and how to use it to perform aggregate functions on the data. We also demonstrated the options available, such as grouping over a set of columns, expressions, and user-defined functions. In addition, we explained how to use the HAVING keyword for filtering and the ROLLUP, CUBE, and GROUPING SETS options for reporting purposes.\n\nTo learn more about the SQL GROUP BY function, you can refer to the following articles previously published on SQL Shack:"
    },
    {
        "link": "https://w3resource.com/sql/aggregate-functions/sum-with-group-by.php",
        "document": "The aggregate functions summarize the table data. Once the rows are divided into groups, the aggregate functions are applied in order to return just one value per group. It is better to identify each summary row by including the GROUP BY clause in the query results. All columns other than those listed in the GROUP BY clause must have an aggregate function applied to them.\n\nThe SUM() function in SQL is a powerful aggregate function that calculates the total sum of a numeric column. When combined with the GROUP BY clause, it allows you to summarize data based on unique values in specified columns. This is particularly useful for generating reports and insights from large datasets. To effectively use SUM(), all non-aggregated columns must be included in the GROUP BY clause. This ensures that you get one result row per unique group.\n\nTo retrieve the total ADVANCE_AMOUNT for each AGENT_CODE from the orders table, ensuring that each agent appears only once, you can use the following SQL query:\n• SELECT COUNT(*): This is the main part of the SQL query. It uses the COUNT(*) function to count the number of rows in the 'orders' table. The * is a wildcard character that counts all rows regardless of their content. The result will be a single row with a single column containing the total number of rows in the 'orders' table.\n• FROM orders: This specifies the source of the data for the query, which is the 'orders' table. The FROM keyword is used to indicate the table from which the data will be selected. In this case, it selects data from the 'orders' table.\n• GROUP BY agent_code: This clause groups the results based on agent_code, ensuring the aggregate function applies to each unique agent.\n\nTo calculate the combined total of OPENING_AMT and RECEIVE_AMT from a customer table, use the following query:\n• SELECT cust_city, SUM(opening_amt + receive_amt): This is the main part of the SQL query. It selects two columns: 'cust_city' and the sum of 'opening_amt' and 'receive_amt' for each city. The SUM() function is used to calculate the total sum of these amounts, which are summed up for each distinct 'cust_city'.\n• FROM customer: This specifies the source of the data for the query, which is the 'customer' table. It indicates that the 'customer' table will be queried to retrieve the necessary data for processing.\n• GROUP BY cust_city: This clause groups the result set by the 'cust_city' column. The GROUP BY clause is used to aggregate the rows based on the values in the 'cust_city' column. This means that the calculation performed in the SELECT statement will be applied separately for each unique value in the 'cust_city' column.\n\nNote: Outputs of the said SQL statement shown here is taken by using Oracle Database 10g Express Edition\n\n1. What is the purpose of the SQL SUM() function when used with GROUP BY?\n\nThe SQL SUM() function calculates the total of a numeric column for grouped data. When used with GROUP BY, it allows for summarizing values based on unique entries in specified columns.\n\n2. Why is the SQL GROUP BY clause important?\n\nThe GROUP BY clause is essential because it defines how the result set is divided into groups. Each unique value in the specified column(s) will have one summary row in the results, ensuring accurate aggregations.\n\n3. What are the requirements for using SQL SUM() with GROUP BY?\n\nWhen using the SUM() function with GROUP BY, all columns in the SELECT statement that are not included in the GROUP BY clause must be aggregated. This ensures that the query adheres to SQL standards and produces valid results.\n\n4. Can we group by multiple columns?\n\nYes, you can group by multiple columns in SQL. This allows for more complex aggregations and summarizations based on combinations of values from different columns.\n\n5. How can we ensure our results are clear and informative?\n\nIncluding descriptive labels and ensuring that the GROUP BY columns are relevant will help clarify the results. Additionally, using aliases for calculated fields can enhance readability.\n\n6. What are common use cases for SQL SUM() with GROUP BY?\n\nCommon use cases include generating financial reports, analyzing sales data, summarizing transactions by categories, and reporting on inventory levels across different locations.\n\n7. Are there performance considerations when using SQL SUM() with GROUP BY?\n\nYes, performance can be affected by the size of the dataset and the complexity of the GROUP BY operation. Indexing relevant columns may improve query performance.\n\nHere is a slide presentation of all aggregate functions.\n\nCheck out our 1000+ SQL Exercises with solution and explanation to improve your skills.\n\nPrevious: SUM function\n\n Next: SUM and COUNT Using Variable and inner join"
    },
    {
        "link": "https://learnsql.com/blog/sql-sum-group-by",
        "document": "Explore some real-world examples of using SUM() and GROUP BY in SQL, from the most basic to the most sophisticated.\n\nis a SQL aggregate function that computes the sum of the given values. is a SQL clause that partitions rows into groups and computes a stated aggregate function for each group. Using these two functions together, you can compute total sums for a group of rows.\n\nIn this article, we’ll see 8 different examples of how you can combine and to create many different reports. We’ll talk about the most basic use case and we’ll cover some complex scenarios.\n\nThe best way to refresh your SQL skills – including and – is our interactive SQL Practice Set. It contains 88 interactive exercises that cover different SQL topics. The course is perfect for interview preparation or a review before an SQL exam.\n\nExample 1: Basic Usage of SUM() and GROUP BY in SQL\n\nLet’s look at an example of how the function works together with :\n\nThe query returns a list of all countries found in the table, along with a total sum of the order quantities for each country. The rows in the table are divided into groups (one group for each country) and the database sums the quantity values for each country.\n\nLet’s analyze this example in detail.\n\nHere is the data in the table. This table would be common in an e-commerce system; in addition to the destination country of the goods and the quantity ordered, it includes data on the salesperson who took the order, product SKU, order date, and the customer’s address.\n\nThe orders table we will use throughout this article.\n\nThe function is one of SQL’s aggregate functions. Aggregate functions in SQL return a single value for a set of rows. The function returns the sum of the arguments given to the function. There are other SQL aggregate functions, but we will only focus on in this article.\n\nWhen we add to the query …\n\n… we will only get a single value, resulting from summing up all quantity values:\n\nNote that the function ignores NULL values. They are treated as 0s in the calculation. For more information on the function, you can read this complete explanation of the SQL SUM() function.\n\nThe function, like other aggregate functions, is typically used with the clause.\n\nThe GROUP BY Clause in SQL\n\nThe clause is used to compute statistics for a group of rows; rows are partitioned into groups based on the values of one or more columns. The statement with GROUP BY returns a single row for each distinct group defined in the clause.\n\nLet’s go back to our example query:\n\nThe rows in the table are partitioned into groups based on the value of the column because of this line: . It tells the database to place rows with the same value into one group.\n\nRows for Mexico are put into one group, rows for New Zealand into another group, and so on. The SUM() function is then applied to quantity values in each group. The sum for the United States is the sum of 10, 12, and 15, resulting in 37. The sum for the United Kingdom is the sum of 18 and 25, resulting in 43, etc.\n\nHere’s the result of our query again. You can see that each row contains the sum of quantity values in the corresponding group.\n\nThe clause is especially useful when you want to get summary information from tables with too many rows to go through them one by one. For more information, read a complete explanation of the SQL GROUP BY clause or this article explaining GROUP BY in SQL.\n\nExample 2: Computing 2 SUMs and Grouping By 2 Columns\n\nIn the previous example, we saw how to use and to group a set of data by the column country and get the total quantity for each country separately. You can also group by more than one column with and compute more than one sum in a query.\n\nIf we would like to know all the combinations of and in the table and get the total of quantities ordered and their amounts for each combination, we need to use and .\n\nBased on the table above, this query results in the following data:\n\nWe have two expressions that use the function in the query: one computes the total quantity, and the other computes the total amount. We also group by two columns: and .\n\nInternally, the database engine performs the following procedure:\n• It creates a result set from the table specified in the clause, grouping together the rows for each combination of values of the columns specified in the clause. In our example, rows with the same value of and are grouped together: there’s one row for the Meghan’s US sales, one row Stephen’s sales in the United States, etc.\n• For each row in the result set created in the previous step, it calculates the sum of each column enclosed in a In our example, it computes the sum of columns and the sum of columns.\n• It returns the result set with the summations.\n\nYou can group by more than two columns if you need to. You can read about grouping by multiple columns in our article How to Group by Multiple Columns in SQL.\n\nExample 3: Using a WHERE Condition with SUM and GROUP BY\n\nYou can use a condition in your query with and . In this case, the database engine alters the procedure seen above to return the results of the query. It applies the clause in step 1 of the procedure. Then, the initial result set will be assembled from those rows that meet the condition.\n\nThe columns involved in the condition can be any of the columns in the table. It does not matter whether or not they are listed in the clause or whether or not they are returned as a result of the query.\n\nFollowing our example, we could use any of the columns in the table, e.g. or . We’re interested in orders for the product with the SKU 990048006427 that have been made between April 7, 2023 and April 8, 2023.\n\nTo solve this query, the database engine will first create a temporary result set from the table that meets the conditions of the clause. From that result set, it will take all combinations of the and columns. For each combination, it will calculate the sums of and .\n\nNote that when we compare the result with Example 2, we only include orders made between April 7, 2023 and April 8, 2023 for the product 990048006427. For example, there are no rows for Meghan’s sales in the United States, as she hasn’t sold this product on these two April days.\n\nExample 4: Using the ORDER BY Clause With SUM and GROUP BY\n\nIf we also add an ORDER BY clause to the query we build with and , then the database engine will have to do a little more work. It adds one more step to the three described above; this step consists of sorting the results according to the criteria specified in the clause.\n\nFor example, we could sort the results by the sum of , referencing it by its alias . We could also specify the full expression :\n\nIn this example, we add the clause so that the results are sorted from highest to lowest.\n\nIn addition to being applied to individual columns, the function can also be applied to expressions that return numeric values. Suppose that we have a column instead of having an amount column. The order amount would result from multiplying by .\n\nFor the SQL to return a sum of the ordered amounts in this case, we will have to apply the function on the expression:\n\nThe result of the query would be the same as for Example 2:\n\nThe procedure performed by the database engine would be a little different. For each group, it would first compute the value of the expression and then it would calculate the sums using the computed values.\n\nExample 6: Null Values in the SUM() Function\n\nWhen using the function in SQL, are ignored and are not included in the calculation of the total. If any row in the table had values in the or columns, they will be ignored by the function. The exception is if all values are for any of the columns, in which case the function will also return .\n\nThis caveat affects the and combination. If there are some combinations of the values of the columns where all the totaled values are , then will also return for that combination of values.\n\nIn our sample order table, all rows for and have a value in quantity and amount. For that reason, the result of and returns in the sum of quantity and amount for and . However, neither Arthur nor Mexico are NULL in any of their other combinations.\n\nIf a new row was inserted for and with non- values in and , then the rest of the values would be ignored in the total. The results would include only the values that do not have in the columns being summed.\n\nWe saw that the function returns if all the values in the summed column are . If there is only one non- value, the rest of the values are ignored – that is, they are treated as if they were zero.\n\nThis can be difficult to explain when doing data storytelling. We want to avoid the word \"NULL\" appearing in a result box where a number should appear (thus causing confusion to our audience). In such cases, it is convenient to convert the values to zeros. To do this, you can use the function. It converts values in a column to a set value – usually zero, although other values can be used.\n\nIn our example, we don’t want to run the risk of values in or causing “ ” text to appear in our results. We can enclose these columns in the function and send the result of this as a parameter of the function:\n\nIn this way, all in the summed columns will appear as zeros.\n\nNote that the row for Arthur’s sales in Mexico now shows 0 instead of NULL.\n\nSometimes we want the combination to only consider data that meets certain conditions.\n\nContinuing with our example, suppose each order has a BIT-type column called that indicates whether the order has been delivered or not. We might want the results of our summations to be divided in two: a total of delivered products and a total of undelivered products. This is solved by using within the function to evaluate the content of the column:\n\nThe statement is similar to the IF statement in many programming languages; it adds some logic to the flow of our query by evaluating a stated condition. It gives the condition after . If the condition is met, then the value after is returned. If the condition is not met, the value after is returned.\n\nIn this expression, we return the column for delivered products. For other products, we return 0.\n\nHere’s the result of the query:\n\nYou can read more about how to use CASE WHEN with SUM and GROUP BY elsewhere in our blog.\n\nPractice Using SUM() with GROUP BY in Your SQL Queries\n\nThroughout this article, we have seen eight examples of how to combine and in SQL queries. Our table – although it has only a few rows – represents real-life situations.\n\nIn your work, you will often encounter situations similar to the ones we’ve presented – but your tables will be populated with many more rows. You will then have to make use of all possible variants of and to prove that the results of your queries are legitimate.\n\nTake advantage of our SQL Practice Set course and SQL Practice track to hone your SQL skills. Remember: The most critical aspect of a data analyst’s job is that the information they provide is 100% reliable."
    },
    {
        "link": "https://stackoverflow.com/questions/41816846/sql-query-with-sum-with-group-by",
        "document": "I can't make my query work the way I need to. I have a simple query which outputs the following data:\n\nWhat I need is to SUM the total_reseller_sales for each month and not display the same month twice. I try the following but it throws an error\n\nThe error I get is that each element in SELECT is invalid because it is not contained in either an aggregate function or the GROUP BY clause.\n\nIf I include them i nthe GROUP BY, then I get the same results.\n\nAny help would be appreciated."
    },
    {
        "link": "https://w3schools.com/sql/sql_groupby.asp",
        "document": "The statement groups rows that have the same values into summary rows, like \"find the number of customers in each country\".\n\nThe statement is often used with aggregate functions ( , , , , ) to group the result-set by one or more columns.\n\nBelow is a selection from the \"Customers\" table in the Northwind sample database:\n\nThe following SQL statement lists the number of customers in each country:\n\nThe following SQL statement lists the number of customers in each country, sorted high to low:\n\nBelow is a selection from the \"Orders\" table in the Northwind sample database:\n\nAnd a selection from the \"Shippers\" table:\n\nGROUP BY With JOIN Example\n\nThe following SQL statement lists the number of orders sent by each shipper:\n\nSELECT Shippers.ShipperName, COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders\n\nLEFT JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID\n\n GROUP BY ShipperName; Try it Yourself »"
    },
    {
        "link": "https://w3schools.com/sql/sql_aggregate_functions.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    }
]