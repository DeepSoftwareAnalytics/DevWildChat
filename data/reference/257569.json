[
    {
        "link": "https://element-plus.org/en-US/component/table",
        "document": "Display multiple data with similar format. You can sort, filter, compare your data in a table.\n\nBasic table is just for data display.\n\nStriped table makes it easier to distinguish different rows.\n\nYou can highlight your table content to distinguish between \"success, information, warning, danger\" and other states.\n\nWhen the content is too long, it will break into multiple lines, you can use to keep it in one line.\n\nWhen there are too many rows, you can use a fixed header.\n\nWhen there are too many columns, you can fix some of them.\n\nWhen you have huge chunks of data to put in a table, you can fix the header and columns at the same time.\n\nWhen the the data is dynamically changed, you might want the table to have a maximum height rather than a fixed height and to show the scroll bar if needed.\n\nWhen the data structure is complex, you can use group header to show the data hierarchy.\n\nYou can also select multiple rows.\n\nAfter 2.8.3, supports the third parameter to determine whether to ignore the selectable attribute.\n\nSort the data to find or compare data quickly.\n\nCustomize table column so it can be integrated with other components.\n\nCustomize table header so it can be even more customized.\n\nWhen the row content is too long and you do not want to display the horizontal scroll bar, you can use the expandable row feature.\n\nAfter 2.9.7, is added to control whether to preserve expanded row content in DOM when collapsed.\n\nFor table of numbers, you can add an extra row at the table footer displaying each column's sum.\n\nConfiguring rowspan and colspan allows you to merge cells\n\nYou can customize row index in columns.\n\nThe table-layout property sets the algorithm used to lay out table cells, rows, and columns.\n\nYou can use to customize the tooltip content.\n\nHow to use image preview in the table? ​\n\nWhy column is not rendered when use DOM templates? ​\n\nThis is because the HTML spec only allows a few specific elements to omit closing tags, the most common being and . For all other elements, if you omit the closing tag, the native HTML parser will think you never terminated the opening tag\n\nFor more details please refer to vue docs"
    },
    {
        "link": "https://github.com/element-plus/element-plus/blob/dev/docs/en-US/component/table.md",
        "document": "Display multiple data with similar format. You can sort, filter, compare your data in a table.\n\nBasic table is just for data display.\n\n:::demo After setting attribute of with an object array, you can use (corresponding to a key of the object in array) in to insert data to table columns, and set the attribute to define the column name. You can also use the attribute to define the width of columns.\n\nStriped table makes it easier to distinguish different rows.\n\n:::demo Attribute accepts a . If , table will be striped.\n\n:::demo By default, Table has no vertical border. If you need it, you can set attribute to .\n\nYou can highlight your table content to distinguish between \"success, information, warning, danger\" and other states.\n\n:::demo Use in to add custom classes to a certain row. Then you can style it with custom classes.\n\nWhen the content is too long, it will break into multiple lines, you can use to keep it in one line.\n\n:::demo Attribute , which accepts a value. When set , the extra content will show in tooltip when hover on the cell.\n\nWhen there are too many rows, you can use a fixed header.\n\n:::demo By setting the attribute of , you can fix the table header without any other codes.\n\nWhen there are too many columns, you can fix some of them.\n\n:::demo Attribute is used in , it accepts a . If , the column will be fixed at left. It also accepts two string literals: 'left' and 'right', both indicating that the column will be fixed at corresponding direction.\n\nWhen you have huge chunks of data to put in a table, you can fix the header and columns at the same time.\n\n:::demo Fix columns and header at the same time by combining the above two examples.\n\nWhen the the data is dynamically changed, you might want the table to have a maximum height rather than a fixed height and to show the scroll bar if needed.\n\n:::demo By setting the attribute of , you can fix the table header. The table body scrolls only if the height of the rows exceeds the max height value.\n\nWhen the data structure is complex, you can use group header to show the data hierarchy.\n\n:::demo Only need to place el-table-column inside a el-table-column, you can achieve group header.\n\n:::demo The attribute of the group header is determined by the outermost\n\n:::demo Table supports single row selection. You can activate it by adding the attribute. An event called will be triggered when row selection changes, and its parameters are the rows after and before this change: and . If you need to display row index, you can add a new with its attribute assigned to , and you will see the index starting from 1.\n\nYou can also select multiple rows.\n\nAfter ^(2.8.3), supports the third parameter to determine whether to ignore the selectable attribute.\n\n:::demo Activating multiple selection is easy: simply add an with its set to .\n\nSort the data to find or compare data quickly.\n\n:::demo Set attribute in a certain column to sort the data based on this column. It accepts with a default value . Set table attribute to determine default sort column and order. To apply your own sorting rules, use or . If you need remote sorting from backend, set to , and listen to the event on Table. In the event handler, you have access to the sorting column and sorting order so that you can fetch sorted table data from API. In this example we use another attribute named to format the value of certain columns. It accepts a function which has two parameters: and . You can handle it according to your own needs.\n\n:::demo Set attribute and in makes this column filterable. is an array, and is a function deciding which rows are displayed. It has three parameters: , and .\n\nCustomize table column so it can be integrated with other components.\n\n:::demo You have access to the following data: row, column, $index and store (state management of Table) by slot.\n\nCustomize table header so it can be even more customized.\n\n:::demo You can customize how the header looks by header slots.\n\nWhen the row content is too long and you do not want to display the horizontal scroll bar, you can use the expandable row feature.\n\nAfter ^(2.9.7), is added to control whether to preserve expanded row content in DOM when collapsed.\n\n:::demo Activate expandable row by adding type=\"expand\" and slot. The template for el-table-column will be rendered as the contents of the expanded row, and you can access the same attributes as when you are using in custom column templates.\n\n:::demo You can display tree structure data. When row contains the field, it is treated as nested data. For rendering nested data, the prop is required. Also, child row data can be loaded asynchronously. Set property of Table to true and the function . Specify attribute in row to determine which row contains children. Both and can be configured via .\n\n:::demo When is true, the selection state of parent and child nodes is no longer associated, that is, when the parent node is selected, its child nodes will not be selected; when is false, the selection state of parent and child nodes will be associated with the selection state of child nodes, that is, when the parent node is selected, all its child nodes will be selected.\n\nFor table of numbers, you can add an extra row at the table footer displaying each column's sum.\n\n:::demo You can add the summary row by setting to . By default, for the summary row, the first column does not sum anything up but always displays 'Sum' (you can configure the displayed text using ), while other columns sum every number in that column up and display them. You can of course define your own sum behaviour. To do so, pass a method to , which returns an array, and each element of the returned array will be displayed in the columns of the summary row, It can be a VNode or string. The second table of this example is a detailed demo.\n\nConfiguring rowspan and colspan allows you to merge cells\n\n:::demo Use the attribute to configure rowspan and colspan. It accepts a method, and passes an object to that method including current row , current column , current row index and current column index . The method should return an array of two numbers, the first number being and second . It can also return an object with and props.\n\nYou can customize row index in columns.\n\n:::demo To customize row indices, use attribute on with . If it is assigned to a number, all indices will have an offset of that number. It also accepts a method with each index (starting from ) as parameter, and the returned value will be displayed as index.\n\nThe table-layout property sets the algorithm used to lay out table cells, rows, and columns.\n\nYou can use to customize the tooltip content.\n\nThis is because the HTML spec only allows a few specific elements to omit closing tags, the most common being and . For all other elements, if you omit the closing tag, the native HTML parser will think you never terminated the opening tag\n\nFor more details please refer to vue docs"
    },
    {
        "link": "https://github.com/guolaopi/element-plus-table-dragable",
        "document": "A directive what used sortablejs to add drag support for element-plus's table component base on vue3.\n\n: vDragable : : : : and use v-for render it in table's slot. then you can change index of the item in 'column' here : : : :"
    },
    {
        "link": "https://stackoverflow.com/questions/68218954/vue-element-ui-table-columns-draggable",
        "document": "I'm using that for table now, but the header of the table is able to drag for now. How can I drag the table's columns?\n\nI'm using vue element-ui. I want to make to move that header and body of table in same time when I drag the table's header. Is it possible?"
    },
    {
        "link": "https://npmjs.com/package/element-plus-table-dragable",
        "document": "A directive what used sortablejs to add drag support for element-plus's table component base on vue3.\n\n: : : : : and use v-for render it in table's slot. then you can change index of the item in 'column' here : : : : script>"
    },
    {
        "link": "https://element-plus.org/en-US/component/table",
        "document": "Display multiple data with similar format. You can sort, filter, compare your data in a table.\n\nBasic table is just for data display.\n\nStriped table makes it easier to distinguish different rows.\n\nYou can highlight your table content to distinguish between \"success, information, warning, danger\" and other states.\n\nWhen the content is too long, it will break into multiple lines, you can use to keep it in one line.\n\nWhen there are too many rows, you can use a fixed header.\n\nWhen there are too many columns, you can fix some of them.\n\nWhen you have huge chunks of data to put in a table, you can fix the header and columns at the same time.\n\nWhen the the data is dynamically changed, you might want the table to have a maximum height rather than a fixed height and to show the scroll bar if needed.\n\nWhen the data structure is complex, you can use group header to show the data hierarchy.\n\nYou can also select multiple rows.\n\nAfter 2.8.3, supports the third parameter to determine whether to ignore the selectable attribute.\n\nSort the data to find or compare data quickly.\n\nCustomize table column so it can be integrated with other components.\n\nCustomize table header so it can be even more customized.\n\nWhen the row content is too long and you do not want to display the horizontal scroll bar, you can use the expandable row feature.\n\nAfter 2.9.7, is added to control whether to preserve expanded row content in DOM when collapsed.\n\nFor table of numbers, you can add an extra row at the table footer displaying each column's sum.\n\nConfiguring rowspan and colspan allows you to merge cells\n\nYou can customize row index in columns.\n\nThe table-layout property sets the algorithm used to lay out table cells, rows, and columns.\n\nYou can use to customize the tooltip content.\n\nHow to use image preview in the table? ​\n\nWhy column is not rendered when use DOM templates? ​\n\nThis is because the HTML spec only allows a few specific elements to omit closing tags, the most common being and . For all other elements, if you omit the closing tag, the native HTML parser will think you never terminated the opening tag\n\nFor more details please refer to vue docs"
    },
    {
        "link": "https://github.com/mui/mui-x/issues/4777",
        "document": "This is the name of the generic UI component, not the React module!\n\nThis is the name of the generic UI component, not the React module!\n\nThis is about UI or UX design, please involve a designer\n\nImpact at least one Pro user"
    },
    {
        "link": "https://element-plus.org/en-US/component/table-v2",
        "document": "Along with evolutionary web development, table component has always been the most popular component in our web apps especially for dashboards, data analysis. For Table V1, with even just 1000 records of data, it can be very annoying when using it, because of the poor performance.\n\nWith Virtualized Table, you can render massive chunks of data in a blink of an eye.\n\nThis component is still under testing, use at your own risk. If you find any bugs or issues, please report them at GitHub for us to fix. Also there were some APIs which are not mentioned in this documentation, some of them were not fully developed yet, which is why they are not mentioned here. Even though Virtualized Table is efficient, when the data load is too large, your network and memory size can become the bottleneck of your app. So keep in mind that Virtualized Table is never the ultimate solution for everything, consider paginating your data, adding filters etc.\n\nLet's demonstrate the performance of the Virtualized Table by rendering a basic example with 10 columns and 1000 rows.\n\nWhen you do not want to manually pass the and properties to the table, you can wrap the table component with the AutoResizer. This will automatically update the width and height for you.\n\nResize your browser to see how it works.\n\nOf course, you can render the table cell according to your needs. Here's a simple example of how to customize your cell.\n\nUsing customized cell renderer to allow selection for your table.\n\nJust as we demonstrated with selections above, you can use the same method to enable inline editing.\n\nYou can highlight your table content to distinguish between \"success, information, warning, danger\" and other states.\n\nTo customize the appearance of rows, use the attribute. For example, every 10th row is highlighted using the class, and every 5th row with the class.\n\nYou can make some rows stick to the top of the table, and that can be very easily achieved by using the attribute.\n\nYou can dynamically set the sticky row based on scroll events, as shown in this example.\n\nIf you want to have columns stick to the left or right for some reason, you can achieve this by adding special attributes to the table.\n\nYou can set the column's attribute to (representing ) or or\n\nBy customizing your header renderer, you can group your header as shown in this example.\n\nVirtualized Table provides custom header renderers for creating customized headers. We can then utilize these to render filters.\n\nYou can sort the table with sort state.\n\nYou can define multiple sortable columns as needed. Keep in mind that if you define multiple sortable columns, the UI may appear confusing to your users, as it becomes unclear which column is currently being sorted.\n\nWhen dealing with a large list, it's easy to lose track of the current row and column you are visiting. In such cases, using this feature can be very helpful.\n\nThe virtualized table doesn't use the built-in element, so and behave a bit differently compared to TableV1. However, with a customized row renderer, these features can still be implemented. In this section, we'll demonstrate how to achieve this.\n\nSince we have covered Colspan, it's worth noting that we also have row span. It's a little bit different from colspan but the idea is basically the same.\n\nWe can combine rowspan and colspan together to meet your business goal!\n\nVirtual Table can also render data in a tree-like structure. By clicking the arrow icon, you can expand or collapse the tree nodes.\n\nVirtual Table is capable of rendering rows with dynamic heights. If you're working with data and are uncertain about the content size, this feature is ideal for rendering rows that adjust to the content's height. To enable this, pass down the attribute. The closer the estimated height matches the actual content, the smoother the rendering experience.\n\nUsing dynamic height rendering, you can also display a detailed view within the table.\n\nRender a customized footer when you want to show a concluding message or information.\n\nRender an overlay on top of the table when you want to show a loading indicator or something else.\n\nUse the methods provided by Table V2 to scroll manually/programmatically with desired offset/rows.\n\nHow do I render a list with a checkbox in the first column? ​\n\nSince you are allowed to define your own cell renderer, you can do what the example Customize Cell Renderer did to render yourself, and maintain the state by yourself.\n\nWhy does virtualized table provide less features than TableV1 ​\n\nFor virtualized table, we intend to provide less feature and let our users implement their own features as needed. Integrating too many features makes the code hard to maintain and for most users the basic features are enough. Some key features were not developed yet. We would love to hear from you. Join Discord to stay tuned."
    },
    {
        "link": "https://github.com/element-plus/element-plus/issues/8576",
        "document": "\n• Click on any sortable header once (Date column for example), to set column order to ascending.\n• Click on the same header for the second time to set sorting condition to descending.\n• Click on the same header once more to unset the sorting condition.\n\nOn the method handleSortChanged that listens to \"sort-change\" event.\n\n After the third interaction, I would like to have null value only in the \"order\" argument to keep a track on my sort object.\n\nFor me it makes more sense on click 3 the incoming values on the handler:\n\nBecause, this way, I able to know that a sorting condition (order) on a specific column (prop) has been set to null and then apply it on my remote request.\n\nWhat is actually happening?\n\nWhen the header is clicked the handler to \"sort-change\" will alternate in the folowing values:"
    },
    {
        "link": "https://element-plus.czwang.top/en-US/component/table",
        "document": "Made with ❤️ by Element Plus"
    },
    {
        "link": "https://element-plus.org/en-US/component/table",
        "document": "Display multiple data with similar format. You can sort, filter, compare your data in a table.\n\nBasic table is just for data display.\n\nStriped table makes it easier to distinguish different rows.\n\nYou can highlight your table content to distinguish between \"success, information, warning, danger\" and other states.\n\nWhen the content is too long, it will break into multiple lines, you can use to keep it in one line.\n\nWhen there are too many rows, you can use a fixed header.\n\nWhen there are too many columns, you can fix some of them.\n\nWhen you have huge chunks of data to put in a table, you can fix the header and columns at the same time.\n\nWhen the the data is dynamically changed, you might want the table to have a maximum height rather than a fixed height and to show the scroll bar if needed.\n\nWhen the data structure is complex, you can use group header to show the data hierarchy.\n\nYou can also select multiple rows.\n\nAfter 2.8.3, supports the third parameter to determine whether to ignore the selectable attribute.\n\nSort the data to find or compare data quickly.\n\nCustomize table column so it can be integrated with other components.\n\nCustomize table header so it can be even more customized.\n\nWhen the row content is too long and you do not want to display the horizontal scroll bar, you can use the expandable row feature.\n\nAfter 2.9.7, is added to control whether to preserve expanded row content in DOM when collapsed.\n\nFor table of numbers, you can add an extra row at the table footer displaying each column's sum.\n\nConfiguring rowspan and colspan allows you to merge cells\n\nYou can customize row index in columns.\n\nThe table-layout property sets the algorithm used to lay out table cells, rows, and columns.\n\nYou can use to customize the tooltip content.\n\nHow to use image preview in the table? ​\n\nWhy column is not rendered when use DOM templates? ​\n\nThis is because the HTML spec only allows a few specific elements to omit closing tags, the most common being and . For all other elements, if you omit the closing tag, the native HTML parser will think you never terminated the opening tag\n\nFor more details please refer to vue docs"
    },
    {
        "link": "https://stackoverflow.com/questions/58976797/fixed-element-ui-table-size-when-column-changes",
        "document": "I make a Element-UI table and use v-if to control column show/hide. It works perfectly, but a little problem.\n\nThe table will change size by itself when column is show/hide. I already fixed width and height in the table attribute, but seems not to work.\n\nWhy do the table change size, and how to fixed size?\n\nIn the following code, this is an easy sample."
    },
    {
        "link": "https://stackoverflow.com/questions/75940508/vuejs-elementui-el-table-resizing-issue-in-div",
        "document": "I have to place two tables (ElementUI's ) next to eachother. No problem, I just put them in a and split the div using .\n\nWith the following css for the container-div:\n\nI also need to place a heading above each table, so I would like to wrap each table in a div and split that div using and .\n\nProblem: When I increase the viewport-width (by hiding the sidebar or increasing the width of my browser), the tables expand just perfectly. But once I try to reduce the width of my page, the tables won't shrink back down and overflow outside the viewport. Does anybody know why wrapping a table in a div messes with it's responsiveness?"
    },
    {
        "link": "https://element-plus.org/en-US/component/table-v2",
        "document": "Along with evolutionary web development, table component has always been the most popular component in our web apps especially for dashboards, data analysis. For Table V1, with even just 1000 records of data, it can be very annoying when using it, because of the poor performance.\n\nWith Virtualized Table, you can render massive chunks of data in a blink of an eye.\n\nThis component is still under testing, use at your own risk. If you find any bugs or issues, please report them at GitHub for us to fix. Also there were some APIs which are not mentioned in this documentation, some of them were not fully developed yet, which is why they are not mentioned here. Even though Virtualized Table is efficient, when the data load is too large, your network and memory size can become the bottleneck of your app. So keep in mind that Virtualized Table is never the ultimate solution for everything, consider paginating your data, adding filters etc.\n\nLet's demonstrate the performance of the Virtualized Table by rendering a basic example with 10 columns and 1000 rows.\n\nWhen you do not want to manually pass the and properties to the table, you can wrap the table component with the AutoResizer. This will automatically update the width and height for you.\n\nResize your browser to see how it works.\n\nOf course, you can render the table cell according to your needs. Here's a simple example of how to customize your cell.\n\nUsing customized cell renderer to allow selection for your table.\n\nJust as we demonstrated with selections above, you can use the same method to enable inline editing.\n\nYou can highlight your table content to distinguish between \"success, information, warning, danger\" and other states.\n\nTo customize the appearance of rows, use the attribute. For example, every 10th row is highlighted using the class, and every 5th row with the class.\n\nYou can make some rows stick to the top of the table, and that can be very easily achieved by using the attribute.\n\nYou can dynamically set the sticky row based on scroll events, as shown in this example.\n\nIf you want to have columns stick to the left or right for some reason, you can achieve this by adding special attributes to the table.\n\nYou can set the column's attribute to (representing ) or or\n\nBy customizing your header renderer, you can group your header as shown in this example.\n\nVirtualized Table provides custom header renderers for creating customized headers. We can then utilize these to render filters.\n\nYou can sort the table with sort state.\n\nYou can define multiple sortable columns as needed. Keep in mind that if you define multiple sortable columns, the UI may appear confusing to your users, as it becomes unclear which column is currently being sorted.\n\nWhen dealing with a large list, it's easy to lose track of the current row and column you are visiting. In such cases, using this feature can be very helpful.\n\nThe virtualized table doesn't use the built-in element, so and behave a bit differently compared to TableV1. However, with a customized row renderer, these features can still be implemented. In this section, we'll demonstrate how to achieve this.\n\nSince we have covered Colspan, it's worth noting that we also have row span. It's a little bit different from colspan but the idea is basically the same.\n\nWe can combine rowspan and colspan together to meet your business goal!\n\nVirtual Table can also render data in a tree-like structure. By clicking the arrow icon, you can expand or collapse the tree nodes.\n\nVirtual Table is capable of rendering rows with dynamic heights. If you're working with data and are uncertain about the content size, this feature is ideal for rendering rows that adjust to the content's height. To enable this, pass down the attribute. The closer the estimated height matches the actual content, the smoother the rendering experience.\n\nUsing dynamic height rendering, you can also display a detailed view within the table.\n\nRender a customized footer when you want to show a concluding message or information.\n\nRender an overlay on top of the table when you want to show a loading indicator or something else.\n\nUse the methods provided by Table V2 to scroll manually/programmatically with desired offset/rows.\n\nHow do I render a list with a checkbox in the first column? ​\n\nSince you are allowed to define your own cell renderer, you can do what the example Customize Cell Renderer did to render yourself, and maintain the state by yourself.\n\nWhy does virtualized table provide less features than TableV1 ​\n\nFor virtualized table, we intend to provide less feature and let our users implement their own features as needed. Integrating too many features makes the code hard to maintain and for most users the basic features are enough. Some key features were not developed yet. We would love to hear from you. Join Discord to stay tuned."
    },
    {
        "link": "https://github.com/element-plus/element-plus/issues/13456",
        "document": "To see all available qualifiers, see our documentation .\n\nSaved searches Use saved searches to filter your results more quickly\n\nWe read every piece of feedback, and take your input very seriously.\n\nYou signed in with another tab or window. Reload to refresh your session.\n\nYou signed out in another tab or window. Reload to refresh your session.\n\nYou switched accounts on another tab or window. Reload to refresh your session."
    }
]