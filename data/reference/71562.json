[
    {
        "link": "https://docs.python.org/3/library/datetime.html",
        "document": ""
    },
    {
        "link": "https://docs.python.org/3/library/time.html",
        "document": "This module provides various time-related functions. For related functionality, see also the and modules.\n\nAlthough this module is always available, not all functions are available on all platforms. Most of the functions defined in this module call platform C library functions with the same name. It may sometimes be helpful to consult the platform documentation, because the semantics of these functions varies among platforms.\n\nAn explanation of some terminology and conventions is in order.\n• None The epoch is the point where the time starts, the return value of . It is January 1, 1970, 00:00:00 (UTC) on all platforms.\n• None The term seconds since the epoch refers to the total number of elapsed seconds since the epoch, typically excluding leap seconds. Leap seconds are excluded from this total on all POSIX-compliant platforms.\n• None The functions in this module may not handle dates and times before the epoch or far in the future. The cut-off point in the future is determined by the C library; for 32-bit systems, it is typically in 2038.\n• None Function can parse 2-digit years when given format code. When 2-digit years are parsed, they are converted according to the POSIX and ISO C standards: values 69–99 are mapped to 1969–1999, and values 0–68 are mapped to 2000–2068.\n• None UTC is Coordinated Universal Time and superseded Greenwich Mean Time or GMT as the basis of international timekeeping. The acronym UTC is not a mistake but conforms to an earlier, language-agnostic naming scheme for time standards such as UT0, UT1, and UT2.\n• None DST is Daylight Saving Time, an adjustment of the timezone by (usually) one hour during part of the year. DST rules are magic (determined by local law) and can change from year to year. The C library has a table containing the local rules (often it is read from a system file for flexibility) and is the only source of True Wisdom in this respect.\n• None The precision of the various real-time functions may be less than suggested by the units in which their value or argument is expressed. E.g. on most Unix systems, the clock “ticks” only 50 or 100 times a second.\n• None On the other hand, the precision of and is better than their Unix equivalents: times are expressed as floating-point numbers, returns the most accurate time available (using Unix where available), and will accept a time with a nonzero fraction (Unix is used to implement this, where available).\n• None The time value as returned by , , and , and accepted by , and , is a sequence of 9 integers. The return values of , , and also offer attribute names for individual fields. See for a description of these objects. Changed in version 3.3: The type was extended to provide the and attributes when platform supports corresponding members. Changed in version 3.6: The attributes and are now available on all platforms.\n• None Use the following functions to convert between time representations:\n\nConvert a tuple or representing a time as returned by or to a string of the following form: . The day field is two characters long and is space padded if the day is a single digit, e.g.: . If t is not provided, the current time as returned by is used. Locale information is not used by . Unlike the C function of the same name, does not add a trailing newline. Return the clk_id of the thread-specific CPU-time clock for the specified thread_id. Use or the attribute of objects to get a suitable value for thread_id. Passing an invalid or expired thread_id may result in undefined behavior, such as segmentation fault. See the man page for pthread_getcpuclockid(3) for further information. Return the resolution (precision) of the specified clock clk_id. Refer to Clock ID Constants for a list of accepted values for clk_id. Return the time of the specified clock clk_id. Refer to Clock ID Constants for a list of accepted values for clk_id. Use to avoid the precision loss caused by the type. Similar to but return time as nanoseconds. Set the time of the specified clock clk_id. Currently, is the only accepted value for clk_id. Use to avoid the precision loss caused by the type. Similar to but set time with nanoseconds. Convert a time expressed in seconds since the epoch to a string of a form: representing local time. The day field is two characters long and is space padded if the day is a single digit, e.g.: . If secs is not provided or , the current time as returned by is used. is equivalent to . Locale information is not used by . Get information on the specified clock as a namespace object. Supported clock names and the corresponding functions to read their value are: The result has the following attributes:\n• None adjustable: if the clock can be changed automatically (e.g. by a NTP daemon) or manually by the system administrator, otherwise\n• None implementation: The name of the underlying C function used to get the clock value. Refer to Clock ID Constants for possible values.\n• None monotonic: if the clock cannot go backward, otherwise\n• None resolution: The resolution of the clock in seconds ( ) Convert a time expressed in seconds since the epoch to a in UTC in which the dst flag is always zero. If secs is not provided or , the current time as returned by is used. Fractions of a second are ignored. See above for a description of the object. See for the inverse of this function. Like but converts to local time. If secs is not provided or , the current time as returned by is used. The dst flag is set to when DST applies to the given time. may raise , if the timestamp is outside the range of values supported by the platform C or functions, and on or failure. It’s common for this to be restricted to years between 1970 and 2038. This is the inverse function of . Its argument is the or full 9-tuple (since the dst flag is needed; use as the dst flag if it is unknown) which expresses the time in local time, not UTC. It returns a floating-point number, for compatibility with . If the input value cannot be represented as a valid time, either or will be raised (which depends on whether the invalid value is caught by Python or the underlying C libraries). The earliest date for which it can generate a time is platform-dependent. Return the value (in fractional seconds) of a monotonic clock, i.e. a clock that cannot go backwards. The clock is not affected by system clock updates. The reference point of the returned value is undefined, so that only the difference between the results of two calls is valid. Use to avoid the precision loss caused by the type. Changed in version 3.5: The function is now always available and always system-wide. Changed in version 3.10: On macOS, the function is now system-wide. Similar to , but return time as nanoseconds. Return the value (in fractional seconds) of a performance counter, i.e. a clock with the highest available resolution to measure a short duration. It does include time elapsed during sleep and is system-wide. The reference point of the returned value is undefined, so that only the difference between the results of two calls is valid. CPython implementation detail: On CPython, use the same clock as and is a monotonic clock, i.e. a clock that cannot go backwards. Use to avoid the precision loss caused by the type. Changed in version 3.10: On Windows, the function is now system-wide. Changed in version 3.13: Use the same clock as . Similar to , but return time as nanoseconds. Return the value (in fractional seconds) of the sum of the system and user CPU time of the current process. It does not include time elapsed during sleep. It is process-wide by definition. The reference point of the returned value is undefined, so that only the difference between the results of two calls is valid. Use to avoid the precision loss caused by the type. Similar to but return time as nanoseconds. Suspend execution of the calling thread for the given number of seconds. The argument may be a floating-point number to indicate a more precise sleep time. If the sleep is interrupted by a signal and no exception is raised by the signal handler, the sleep is restarted with a recomputed timeout. The suspension time may be longer than requested by an arbitrary amount, because of the scheduling of other activity in the system. On Windows, if secs is zero, the thread relinquishes the remainder of its time slice to any other thread that is ready to run. If there are no other threads ready to run, the function returns immediately, and the thread continues execution. On Windows 8.1 and newer the implementation uses a high-resolution timer which provides resolution of 100 nanoseconds. If secs is zero, is used.\n• None Use if available (resolution: 1 nanosecond);\n• None Or use if available (resolution: 1 nanosecond); To emulate a “no-op”, use instead of . To voluntarily relinquish the CPU, specify a real-time scheduling policy and use instead. Changed in version 3.5: The function now sleeps at least secs even if the sleep is interrupted by a signal, except if the signal handler raises an exception (see PEP 475 for the rationale). Changed in version 3.11: On Unix, the and functions are now used if available. On Windows, a waitable timer is now used. Convert a tuple or representing a time as returned by or to a string as specified by the format argument. If t is not provided, the current time as returned by is used. format must be a string. is raised if any field in t is outside of the allowed range. 0 is a legal argument for any position in the time tuple; if it is normally illegal the value is forced to a correct one. The following directives can be embedded in the format string. They are shown without the optional field width and precision specification, and are replaced by the indicated characters in the result: Day of the month as a decimal number [01,31]. Day of the year as a decimal number [001,366]. Locale’s equivalent of either AM or PM. Week number of the year (Sunday as the first day of the week) as a decimal number [00,53]. All days in a new year preceding the first Sunday are considered to be in week 0. Day of the week (Monday is 1; Sunday is 7) as a decimal number [1, 7]. Week number of the year (Monday as the first day of the week) as a decimal number [00,53]. All days in a new year preceding the first Monday are considered to be in week 0. Time zone offset indicating a positive or negative time difference from UTC/GMT of the form +HHMM or -HHMM, where H represents decimal hour digits and M represents decimal minute digits [-23:59, +23:59]. Time zone name (no characters if no time zone exists). Deprecated. ISO 8601 year (similar to but follows the rules for the ISO 8601 calendar year). The year starts with the week that contains the first Thursday of the calendar year. ISO 8601 week number (as a decimal number [01,53]). The first week of the year is the one that contains the first Thursday of the year. Weeks start on Monday.\n• None The format directive only applies to , not to . However, see also and where the format directive applies to microseconds.\n• None When used with the function, the directive only affects the output hour field if the directive is used to parse the hour.\n• None The range really is to ; value is valid in timestamps representing leap seconds and value is supported for historical reasons.\n• None When used with the function, and are only used in calculations when the day of the week and the year are specified. Here is an example, a format for dates compatible with that specified in the RFC 2822 Internet email standard. Additional directives may be supported on certain platforms, but only the ones listed here have a meaning standardized by ANSI C. To see the full set of format codes supported on your platform, consult the strftime(3) documentation. On some platforms, an optional field width and precision specification can immediately follow the initial of a directive in the following order; this is also not portable. The field width is normally 2 except for where it is 3. Parse a string representing a time according to a format. The return value is a as returned by or . The format parameter uses the same directives as those used by ; it defaults to which matches the formatting returned by . If string cannot be parsed according to format, or if it has excess data after parsing, is raised. The default values used to fill in any missing data when more accurate values cannot be inferred are . Both string and format must be strings. Support for the directive is based on the values contained in and whether is true. Because of this, it is platform-specific except for recognizing UTC and GMT which are always known (and are considered to be non-daylight savings timezones). Only the directives specified in the documentation are supported. Because is implemented per platform it can sometimes offer more directives than those listed. But is independent of any platform and thus does not necessarily support all directives available that are not documented as supported. The type of the time value sequence returned by , , and . It is an object with a named tuple interface: values can be accessed by index and by attribute name. The following values are present: Note that unlike the C structure, the month value is a range of [1, 12], not [0, 11]. In calls to , may be set to 1 when daylight savings time is in effect, and 0 when it is not. A value of -1 indicates that this is not known, and will usually result in the correct state being filled in. When a tuple with an incorrect length is passed to a function expecting a , or having elements of the wrong type, a is raised. Return the time in seconds since the epoch as a floating-point number. The handling of leap seconds is platform dependent. On Windows and most Unix systems, the leap seconds are not counted towards the time in seconds since the epoch. This is commonly referred to as Unix time. Note that even though the time is always returned as a floating-point number, not all systems provide time with a better precision than 1 second. While this function normally returns non-decreasing values, it can return a lower value than a previous call if the system clock has been set back between the two calls. The number returned by may be converted into a more common time format (i.e. year, month, day, hour, etc…) in UTC by passing it to function or in local time by passing it to the function. In both cases a object is returned, from which the components of the calendar date may be accessed as attributes. Use to avoid the precision loss caused by the type. Similar to but returns time as an integer number of nanoseconds since the epoch. Return the value (in fractional seconds) of the sum of the system and user CPU time of the current thread. It does not include time elapsed during sleep. It is thread-specific by definition. The reference point of the returned value is undefined, so that only the difference between the results of two calls in the same thread is valid. Use to avoid the precision loss caused by the type. Similar to but return time as nanoseconds. Reset the time conversion rules used by the library routines. The environment variable specifies how this is done. It will also set the variables (from the environment variable), (non-DST seconds West of UTC), (DST seconds west of UTC) and (to 0 if this timezone does not have any daylight saving time rules, or to nonzero if there is a time, past, present or future when daylight saving time applies). Although in many cases, changing the environment variable may affect the output of functions like without calling , this behavior should not be relied on. The environment variable should contain no whitespace. The standard format of the environment variable is (whitespace added for clarity): Where the components are: Three or more alphanumerics giving the timezone abbreviations. These will be propagated into time.tzname The offset has the form: . This indicates the value added the local time to arrive at UTC. If preceded by a ‘-’, the timezone is east of the Prime Meridian; otherwise, it is west. If no offset follows dst, summer time is assumed to be one hour ahead of standard time. Indicates when to change to and back from DST. The format of the start and end dates are one of the following: The Julian day n (1 <= n <= 365). Leap days are not counted, so in all years February 28 is day 59 and March 1 is day 60. The zero-based Julian day (0 <= n <= 365). Leap days are counted, and it is possible to refer to February 29. The d’th day (0 <= d <= 6) of week n of month m of the year (1 <= n <= 5, 1 <= m <= 12, where week 5 means “the last d day in month m” which may occur in either the fourth or the fifth week). Week 1 is the first week in which the d’th day occurs. Day zero is a Sunday. has the same format as except that no leading sign (‘-’ or ‘+’) is allowed. The default, if time is not given, is 02:00:00. On many Unix systems (including *BSD, Linux, Solaris, and Darwin), it is more convenient to use the system’s zoneinfo (tzfile(5)) database to specify the timezone rules. To do this, set the environment variable to the path of the required timezone datafile, relative to the root of the systems ‘zoneinfo’ timezone database, usually located at . For example, , , or .\n\nThe offset of the local DST timezone, in seconds west of UTC, if one is defined. This is negative if the local DST timezone is east of UTC (as in Western Europe, including the UK). Only use this if is nonzero. See note below. Nonzero if a DST timezone is defined. See note below. The offset of the local (non-DST) timezone, in seconds west of UTC (negative in most of Western Europe, positive in the US, zero in the UK). See note below. A tuple of two strings: the first is the name of the local non-DST timezone, the second is the name of the local DST timezone. If no DST timezone is defined, the second string should not be used. See note below. For the above Timezone constants ( , , , and ), the value is determined by the timezone rules in effect at module load time or the last time is called and may be incorrect for times in the past. It is recommended to use the and results from to obtain timezone information. More object-oriented interface to dates and times. Internationalization services. The locale setting affects the interpretation of many format specifiers in and . General calendar-related functions. is the inverse of from this module."
    },
    {
        "link": "https://geeksforgeeks.org/python-datetime-module",
        "document": "In Python, date and time are not data types of their own, but a module named DateTime in Python can be imported to work with the date as well as time. Python Datetime module comes built into Python, so there is no need to install it externally.\n\nIn this article, we will explore How DateTime in Python works and what are the main classes of DateTime module in Python.\n\nPython Datetime module supplies classes to work with date and time. These classes provide several functions to deal with dates, times, and time intervals. Date and DateTime are an object in Python, so when you manipulate them, you are manipulating objects and not strings or timestamps.\n\nThe DateTime module is categorized into 6 main classes –\n• date – An idealized naive date, assuming the current Gregorian calendar always was, and always will be, in effect. Its attributes are year, month, and day. you can refer to –\n• time – An idealized time, independent of any particular day, assuming that every day has exactly 24*60*60 seconds. Its attributes are hour, minute, second, microsecond, and tzinfo. You can refer to –\n• date-time – It is a combination of date and time along with the attributes year, month, day, hour, minute, second, microsecond, and tzinfo. You can refer to –\n• timedelta – A duration expressing the difference between two date, time, or datetime instances to microsecond resolution. You can refer to –\n• tzinfo – It provides time zone information objects. You can refer to –\n• timezone – A class that implements the tzinfo abstract base class as a fixed offset from the UTC (New in version 3.2). You can refer to –\n\nThe date class is used to instantiate date objects in Python. When an object of this class is instantiated, it represents a date in the format YYYY-MM-DD. The constructor of this class needs three mandatory arguments year, month, and date.\n\nThe arguments must be in the following range –\n• None 1 <= day <= number of days in the given month and year\n\nNote – If the argument is not an integer it will raise a TypeError and if it is outside the range a ValueError will be raised.\n\nInitializing the constructor and passing arguments in the format year, month, and date.\n\nTo return the current local date today() function of the date class is used. today() function comes with several attributes (year, month, and day). These can be printed individually.\n\nWe can get the year, month, and date attributes from the date object using the year, month and date attribute of the date class.\n\nWe can create date objects from timestamps y=using the fromtimestamp() method. The timestamp is the number of seconds from 1st January 1970 at UTC to a particular date.\n\nWe can convert date object to a string representation using two functions isoformat() and strftime().\n\nThe time class creates the time object which represents local time, independent of any day.\n\nAll the arguments are optional. tzinfo can be None otherwise all the attributes must be integer in the following range –\n\nExample 2: Get hours, minutes, seconds, and microseconds\n\nAfter creating a time object, its attributes can also be printed separately.\n\nWe can convert time object to string using the isoformat() method.\n\nThe DateTime class contains information on both date and time. Like a date object, datetime assumes the current Gregorian calendar extended in both directions; like a time object, datetime assumes there are exactly 3600*24 seconds in every day.\n\nThe year, month, and day arguments are mandatory. tzinfo can be None, rest all the attributes must be an integer in the following range –\n• None 1 <= day <= number of days in the given month and year\n\nNote – Passing an argument other than integer will raise a TypeError and passing arguments outside the range will raise ValueError.\n\nAfter creating a DateTime object, its attributes can also be printed separately.\n\nYou can print the current date and time using the Datetime.now() function. now() function returns the current local date and time.\n\nWe can convert Datetime to string in Python using the datetime.strftime and datetime.isoformat methods.\n\nPython timedelta class is used for calculating differences in dates and also can be used for date manipulations in Python. It is one of the easiest ways to perform date manipulations.\n\nDifference between two date and times\n\nDate and Time differences can also be found using this class.\n\nFormatting DateTime can be very necessary as the date representation may differ from place to place. In some countries, it can be yyyy-mm-dd and in other countries, it can be dd-mm-yyyy. To format Python Datetime strptime and strftime functions can be used.\n\nA strftime() method converts the given date, time, or DateTime object to the string representation of the given format.\n\nNote: For more information, refer to strftime() method.\n\nThe strptime() creates a DateTime object from the given string.\n\nThe datetime.now() function contains no information regarding time zones. It only makes use of the current system time. Tzinfo is an abstract base class in Python. It cannot be directly instantiated. A concrete subclass must derive from this abstract class and implement the methods offered by it.\n\nThe tzinfo class instance can be provided to the DateTime and time object constructors. It is used in scenarios such as converting local time to UTC or accounting for daylight savings time.\n\nTimezones in DateTime can be used in the case where one might want to display time according to the timezone of a specific region. This can be done using the pytz module of Python. This module serves the date-time conversion functionalities and helps users serving international client bases."
    },
    {
        "link": "https://stackoverflow.com/questions/3327946/how-can-i-get-the-current-time-now-in-utc",
        "document": "I have a python datetime object (representing five minutes from now) which I would like to convert to UTC. I am planning to output it in RFC 2822 format to put in an HTTP header, but I am not sure if that matters for this question. I found some information on this site about converting time objects, and it looks simpler that way, but this time I really want to use datetime objects, because I am using timedeltas to adjust them:\n\nI tried something like this:\n\nNothing in the time or datetime module looks like it would help me. It seems like I may be able to do it by passing the datetime object through 3 or 4 functions, but I am wondering if there is a simpler way.\n\nI would prefer not to use third-party modules, but I may if it is the only reasonable choice."
    },
    {
        "link": "https://docs.python.org/3.10/library/datetime.html?highlight=time",
        "document": ""
    },
    {
        "link": "https://docs.python.org/3/library/random.html",
        "document": "This module implements pseudo-random number generators for various distributions.\n\nFor integers, there is uniform selection from a range. For sequences, there is uniform selection of a random element, a function to generate a random permutation of a list in-place, and a function for random sampling without replacement.\n\nOn the real line, there are functions to compute uniform, normal (Gaussian), lognormal, negative exponential, gamma, and beta distributions. For generating distributions of angles, the von Mises distribution is available.\n\nAlmost all module functions depend on the basic function , which generates a random float uniformly in the half-open range . Python uses the Mersenne Twister as the core generator. It produces 53-bit precision floats and has a period of 2**19937-1. The underlying implementation in C is both fast and threadsafe. The Mersenne Twister is one of the most extensively tested random number generators in existence. However, being completely deterministic, it is not suitable for all purposes, and is completely unsuitable for cryptographic purposes.\n\nThe functions supplied by this module are actually bound methods of a hidden instance of the class. You can instantiate your own instances of to get generators that don’t share state.\n\nClass can also be subclassed if you want to use a different basic generator of your own devising: see the documentation on that class for more details.\n\nThe module also provides the class which uses the system function to generate random numbers from sources provided by the operating system.\n\nReturn a random element from the non-empty sequence seq. If seq is empty, raises . Return a k sized list of elements chosen from the population with replacement. If the population is empty, raises . If a weights sequence is specified, selections are made according to the relative weights. Alternatively, if a cum_weights sequence is given, the selections are made according to the cumulative weights (perhaps computed using ). For example, the relative weights are equivalent to the cumulative weights . Internally, the relative weights are converted to cumulative weights before making selections, so supplying the cumulative weights saves work. If neither weights nor cum_weights are specified, selections are made with equal probability. If a weights sequence is supplied, it must be the same length as the population sequence. It is a to specify both weights and cum_weights. The weights or cum_weights can use any numeric type that interoperates with the values returned by (that includes integers, floats, and fractions but excludes decimals). Weights are assumed to be non-negative and finite. A is raised if all weights are zero. For a given seed, the function with equal weighting typically produces a different sequence than repeated calls to . The algorithm used by uses floating-point arithmetic for internal consistency and speed. The algorithm used by defaults to integer arithmetic with repeated selections to avoid small biases from round-off error. Changed in version 3.9: Raises a if all weights are zero. To shuffle an immutable sequence and return a new shuffled list, use instead. Note that even for small , the total number of permutations of x can quickly grow larger than the period of most random number generators. This implies that most permutations of a long sequence can never be generated. For example, a sequence of length 2080 is the largest that can fit within the period of the Mersenne Twister random number generator. Return a k length list of unique elements chosen from the population sequence. Used for random sampling without replacement. Returns a new list containing elements from the population while leaving the original population unchanged. The resulting list is in selection order so that all sub-slices will also be valid random samples. This allows raffle winners (the sample) to be partitioned into grand prize and second place winners (the subslices). Members of the population need not be hashable or unique. If the population contains repeats, then each occurrence is a possible selection in the sample. Repeated elements can be specified one at a time or with the optional keyword-only counts parameter. For example, is equivalent to . To choose a sample from a range of integers, use a object as an argument. This is especially fast and space efficient for sampling from a large population: . If the sample size is larger than the population size, a is raised. Changed in version 3.11: The population must be a sequence. Automatic conversion of sets to lists is no longer supported.\n\nThe following functions generate specific real-valued distributions. Function parameters are named after the corresponding variables in the distribution’s equation, as used in common mathematical practice; most of these equations can be found in any statistics text. Return the next random floating-point number in the range Return a random floating-point number N such that for and for . The end-point value may or may not be included in the range depending on floating-point rounding in the expression . Return a random floating-point number N such that and with the specified mode between those bounds. The low and high bounds default to zero and one. The mode argument defaults to the midpoint between the bounds, giving a symmetric distribution. Beta distribution. Conditions on the parameters are and . Returned values range between 0 and 1. Exponential distribution. lambd is 1.0 divided by the desired mean. It should be nonzero. (The parameter would be called “lambda”, but that is a reserved word in Python.) Returned values range from 0 to positive infinity if lambd is positive, and from negative infinity to 0 if lambd is negative. Changed in version 3.12: Added the default value for . Gamma distribution. (Not the gamma function!) The shape and scale parameters, alpha and beta, must have positive values. (Calling conventions vary and some sources define ‘beta’ as the inverse of the scale). Normal distribution, also called the Gaussian distribution. mu is the mean, and sigma is the standard deviation. This is slightly faster than the function defined below. Multithreading note: When two threads call this function simultaneously, it is possible that they will receive the same return value. This can be avoided in three ways. 1) Have each thread use a different instance of the random number generator. 2) Put locks around all calls. 3) Use the slower, but thread-safe function instead. Changed in version 3.11: mu and sigma now have default arguments. Log normal distribution. If you take the natural logarithm of this distribution, you’ll get a normal distribution with mean mu and standard deviation sigma. mu can have any value, and sigma must be greater than zero. Normal distribution. mu is the mean, and sigma is the standard deviation. Changed in version 3.11: mu and sigma now have default arguments. mu is the mean angle, expressed in radians between 0 and 2*pi, and kappa is the concentration parameter, which must be greater than or equal to zero. If kappa is equal to zero, this distribution reduces to a uniform random angle over the range 0 to 2*pi. Weibull distribution. alpha is the scale parameter and beta is the shape parameter.\n\n# Even integer from 0 to 100 inclusive ['four', 'two', 'ace', 'three'] # of 52 playing cards, and determine the proportion of cards # Estimate the probability of getting 5 or more heads from 7 spins # of a biased coin that settles on heads 60% of the time. # Probability of the median of 5 samples being in middle two quartiles Example of statistical bootstrapping using resampling with replacement to estimate a confidence interval for the mean of a sample: Example of a resampling permutation test to determine the statistical significance or p-value of an observed difference between the effects of a drug versus a placebo: # Example from \"Statistics is Easy\" by Dennis Shasha and Manda Wilson 'at least as extreme as the observed difference of leads us to reject the null' 'hypothesis that there is no difference between the drug and the placebo.' Simulation of arrival times and service deliveries for a multiserver queue: # time when each server becomes available Statistics for Hackers a video tutorial by Jake Vanderplas on statistical analysis using just a few fundamental concepts including simulation, sampling, shuffling, and cross-validation. Economics Simulation a simulation of a marketplace by Peter Norvig that shows effective use of many of the tools and distributions provided by this module (gauss, uniform, sample, betavariate, choice, triangular, and randrange). A Concrete Introduction to Probability (using Python) a tutorial by Peter Norvig covering the basics of probability theory, how to write simulations, and how to perform data analysis using Python.\n\nThese recipes show how to efficiently make random selections from the combinatoric iterators in the module: \"Choose r elements with replacement. Order the result to match the iterable.\" # Result will be in set(itertools.combinations_with_replacement(iterable, r)). The default returns multiples of 2⁻⁵³ in the range 0.0 ≤ x < 1.0. All such numbers are evenly spaced and are exactly representable as Python floats. However, many other representable floats in that interval are not possible selections. For example, isn’t an integer multiple of 2⁻⁵³. The following recipe takes a different approach. All floats in the interval are possible selections. The mantissa comes from a uniform distribution of integers in the range 2⁵² ≤ mantissa < 2⁵³. The exponent comes from a geometric distribution where exponents smaller than -53 occur half as often as the next larger exponent. All real valued distributions in the class will use the new method: The recipe is conceptually equivalent to an algorithm that chooses from all the multiples of 2⁻¹⁰⁷⁴ in the range 0.0 ≤ x < 1.0. All such numbers are evenly spaced, but most have to be rounded down to the nearest representable Python float. (The value 2⁻¹⁰⁷⁴ is the smallest positive unnormalized float and is equal to .) Generating Pseudo-random Floating-Point Values a paper by Allen B. Downey describing ways to generate more fine-grained floats than normally generated by ."
    },
    {
        "link": "https://w3schools.com/python/module_random.asp",
        "document": "Python has a built-in module that you can use to make random numbers.\n\nThe module has a set of methods:"
    },
    {
        "link": "https://geeksforgeeks.org/python-random-module",
        "document": "Python Random module generates random numbers in Python. These are pseudo-random numbers means they are not truly random.\n\nThis module can be used to perform random actions such as generating random numbers, printing random a value for a list or string, etc. It is an in-built function in Python.\n\nList of all the functions Python Random Module\n\nThere are different random functions in the Random Module of Python. Look at the table below to learn more about these functions:\n\nLet’s discuss some common operations performed by Random module in Python.\n\nExample 1: Printing a random value from a list in Python.\n\nThis code uses the module to select a random element from the list using the function. It prints a random element from the list, demonstrating how to pick a random item from a sequence in Python.\n\nExample 2: Creating random numbers with Python seed() in Python.\n\nAs stated above random module creates pseudo-random numbers. Random numbers depend on the seeding value. For example, if the seeding value is 5 then the output of the below program will always be the same. Therefore, it must not be used for encryption.\n\nThe code sets the random number generator’s seed to 5 using , ensuring reproducibility. It then prints two random floating-point numbers between 0 and 1 using . The seed makes these numbers the same every time you run the code with a seed of 5, providing consistency in the generated random values.\n\nrandom.randint() method is used to generate random integers between the given range.\n\nThis code uses the ‘ module to generate random integers within specific ranges. It first generates a random integer between 5 and 15 (inclusive) and then between -10 and -2 (inclusive). The generated integers are printed with appropriate formatting.\n\nA random.random() method is used to generate random floats between 0.0 to 1.\n\nIn this code, we are using the function from the ‘ module in Python. It prints a random floating-point number between 0 and 1 when you call .\n\nRandom sampling from a list in Python (random.choice, and sample)\n\nExample 1: Python random.choice() function is used to return a random item from a list, tuple, or string.\n\nThe code uses the function from the module to randomly select elements from different data types. It demonstrates selecting a random element from a list, a string, and a tuple. The chosen elements will vary each time you run the code, making it useful for random selection from various data structures.\n\nExample 2: Python random.sample() function is used to return a random item from a list, tuple, or string.\n\nThis code utilizes the function from the ‘ module to obtain random samples from various data types. It selects three random elements without replacement from a list, a tuple, and a string, demonstrating its versatility in generating distinct random samples. With each execution, the selected elements will differ, providing random subsets from the input data structures.\n\nA random.shuffle() method is used to shuffle a sequence (list). Shuffling means changing the position of the elements of the sequence. Here, the shuffling operation is inplace.\n\nThis code uses the function from the ‘ module to shuffle the elements of a list named ‘ . It first prints the original order of the list, then shuffles it twice. The second shuffle creates a new random order, and the list’s content is displayed after each shuffle. This demonstrates how the elements are rearranged randomly in the list with each shuffle operation.\n\nIn this article we discussed about Python Random module, and also saw some examples of functions in random module in Python. Random module in Python is very important and contains very useful functions.\n\nHope this helps you in using Python Random module functions.\n\nWhat is a random module in Python?\n\nWhat is random vs Randint in Python?\n\nHow many functions are there in the random module?\n\nWhat is the syntax of the random function?\n\nWhat is the difference between the math module and the random module?"
    },
    {
        "link": "https://stackoverflow.com/questions/70660733/python-random-module-how-can-i-generate-a-random-number-which-includes-certain",
        "document": "I am trying to generate a random number in Python, but I need it to include certain digits.\n\nLet's say the range I want for it is between 100000 and 999999, so I want it to be in that range but also include digits like 1, 4, and 5.\n\nIs there a way to do this?"
    },
    {
        "link": "https://docs.python.org/2/library/random.html",
        "document": "This module implements pseudo-random number generators for various distributions.\n\nFor integers, uniform selection from a range. For sequences, uniform selection of a random element, a function to generate a random permutation of a list in-place, and a function for random sampling without replacement.\n\nOn the real line, there are functions to compute uniform, normal (Gaussian), lognormal, negative exponential, gamma, and beta distributions. For generating distributions of angles, the von Mises distribution is available.\n\nAlmost all module functions depend on the basic function , which generates a random float uniformly in the semi-open range [0.0, 1.0). Python uses the Mersenne Twister as the core generator. It produces 53-bit precision floats and has a period of 2**19937-1. The underlying implementation in C is both fast and threadsafe. The Mersenne Twister is one of the most extensively tested random number generators in existence. However, being completely deterministic, it is not suitable for all purposes, and is completely unsuitable for cryptographic purposes.\n\nThe functions supplied by this module are actually bound methods of a hidden instance of the class. You can instantiate your own instances of to get generators that don’t share state. This is especially useful for multi-threaded programs, creating a different instance of for each thread, and using the method to make it likely that the generated sequences seen by each thread don’t overlap.\n\nClass can also be subclassed if you want to use a different basic generator of your own devising: in that case, override the , , , and methods. Optionally, a new generator can supply a method — this allows to produce selections over an arbitrarily large range.\n\nAs an example of subclassing, the module provides the class that implements an alternative generator in pure Python. The class provides a backward compatible way to reproduce results from earlier versions of Python, which used the Wichmann-Hill algorithm as the core generator. Note that this Wichmann-Hill generator can no longer be recommended: its period is too short by contemporary standards, and the sequence generated is known to fail some stringent randomness tests. See the references below for a recent variant that repairs these flaws.\n\nThe module also provides the class which uses the system function to generate random numbers from sources provided by the operating system.\n\nReturn a k length list of unique elements chosen from the population sequence. Used for random sampling without replacement. Returns a new list containing elements from the population while leaving the original population unchanged. The resulting list is in selection order so that all sub-slices will also be valid random samples. This allows raffle winners (the sample) to be partitioned into grand prize and second place winners (the subslices). Members of the population need not be hashable or unique. If the population contains repeats, then each occurrence is a possible selection in the sample. To choose a sample from a range of integers, use an object as an argument. This is especially fast and space efficient for sampling from a large population: .\n\nThe following functions generate specific real-valued distributions. Function parameters are named after the corresponding variables in the distribution’s equation, as used in common mathematical practice; most of these equations can be found in any statistics text."
    },
    {
        "link": "https://geeksforgeeks.org/working-csv-files-python",
        "document": "Python is one of the important fields for data scientists and many programmers to handle a variety of data. CSV (Comma-Separated Values) is one of the prevalent and accessible file formats for storing and exchanging tabular data.\n\nIn article explains What is CSV. Working with CSV files in Python, Reading, and Writing to a CSV file, and Storing Emails in CSV files .\n\nCSV (Comma Separated Values) is a simple file format used to store tabular data, such as a spreadsheet or database. A CSV file stores tabular data (numbers and text) in plain text. Each line of the file is a data record. Each record consists of one or more fields, separated by commas. The use of the comma as a field separator is the source of the name for this file format. For working CSV files in Python, there is an inbuilt module called CSV.\n\nBelow are some operations that we perform while working with Python CSV files in Python\n\nReading from a CSV file is done using the reader object. The CSV file is opened as a text file with Python’s built-in open() function, which returns a file object. In this example, we first open the CSV file in READ mode, file object is converted to csv.reader object and further operation takes place. Code and detailed explanation is given below.\n\nThe above example uses a CSV file aapl.csv which can be downloaded from here .\n\nRun this program with the aapl.csv file in the same directory.\n• None Let us try to understand this piece of code.\n• None Here, we first open the CSV file in READ mode. The file object is named as csvfile . The file object is converted to csv.reader object. We save the csv.reader object as csvreader.\n• csvreader is an iterable object. Hence, .next() method returns the current row and advances the iterator to the next row. Since, the first row of our csv file contains the headers (or field names), we save them in a list called fields\n• None Now, we iterate through the remaining rows using a for loop. Each row is appended to a list called rows . If you try to print each row, one can find that a row is nothing but a list containing all the field values.\n• csvreader.line_num is nothing but a counter which returns the number of rows that have been iterated.\n\nWe can read a CSV file into a dictionary using the module in Python and the class. Here’s an example:\n\nSuppose, we have a employees.csv file and content inside it will be:\n\nIn this example, reads each row of the CSV file as a dictionary where the keys are the column headers, and the values are the corresponding values in each row. The dictionaries are then appended to a list ( in this case).\n\nTo write to a CSV file, we first open the CSV file in WRITE mode. The file object is converted to csv.writer object and further operations takes place. Code and detailed explanation is given below.\n\nLet us try to understand the above code in pieces.\n• fields rows have been already defined. fields is a list containing all the field names. rows is a list of lists. Each row is a list containing the field values of that row.\n• None Here, we first open the CSV file in WRITE mode. The file object is named as csvfile . The file object is converted to csv.writer object. We save the csv.writer object as csvwriter\n• None Now we use writerow method to write the first row which is nothing but the field names.\n• writerows method to write multiple rows at once.\n\nTo write a dictionary to a CSV file, the file object (csvfile) is converted to a DictWriter object. Detailed example with explanation and code is given below.\n\nIn this example, we write a dictionary mydict to a CSV file.\n• csvfile ) is converted to a DictWriter object. Here, we specify the fieldnames\n• None writeheader method simply writes the first row of your csv file using the pre-specified fieldnames.\n• writerows method simply writes all the rows but in each row, it writes only the values(not keys).\n\nSo, in the end, our CSV file looks like this:\n\nConsider that a CSV file looks like this in plain text:\n• None We notice that the delimiter is not a comma but a semi-colon. Also, the rows are separated by two newlines instead of one. In such cases, we can specify the delimiter and line terminator.\n\nWe can read a Python CSV files with Pandas using the pandas.read_csv( ) function. Here’s an example:\n\nSuppose, we have a employees.csv file and content inside it will be:\n\nIn this example, reads the CSV file into a Pandas DataFrame. The resulting DataFrame can be used for various data manipulation and analysis tasks.\n\nWe can access specific columns, filter data, and perform various operations using pandas DataFrame functionality. For example, if we want to access the “name” column, we can use\n\nWe can use Pandas to write CSV files. It can done by using pd.DataFrame() function. In this example, the Pandas library is used to convert a list of dictionaries ( ) into a DataFrame, representing tabular data. The DataFrame is then written to a Python CSV file named “output.csv” using the method, creating a structured and readable data file for further analysis or sharing.\n\nHere we are importing the csv module and then simply using the same concept of storing the emails in the form of comma-separated entity also with their names. We’re opening the file open() function and specifying that we need that as a csv file and then writing the each column into the csv file using writer object."
    },
    {
        "link": "https://docs.python.org/3/library/csv.html",
        "document": "The so-called CSV (Comma Separated Values) format is the most common import and export format for spreadsheets and databases. CSV format was used for many years prior to attempts to describe the format in a standardized way in RFC 4180. The lack of a well-defined standard means that subtle differences often exist in the data produced and consumed by different applications. These differences can make it annoying to process CSV files from multiple sources. Still, while the delimiters and quoting characters vary, the overall format is similar enough that it is possible to write a single module which can efficiently manipulate such data, hiding the details of reading and writing the data from the programmer.\n\nThe module implements classes to read and write tabular data in CSV format. It allows programmers to say, “write this data in the format preferred by Excel,” or “read data from this file which was generated by Excel,” without knowing the precise details of the CSV format used by Excel. Programmers can also describe the CSV formats understood by other applications or define their own special-purpose CSV formats.\n\nThe module’s and objects read and write sequences. Programmers can also read and write data in dictionary form using the and classes.\n\nThe module defines the following functions: Return a reader object that will process lines from the given csvfile. A csvfile must be an iterable of strings, each in the reader’s defined csv format. A csvfile is most commonly a file-like object or list. If csvfile is a file object, it should be opened with . An optional dialect parameter can be given which is used to define a set of parameters specific to a particular CSV dialect. It may be an instance of a subclass of the class or one of the strings returned by the function. The other optional fmtparams keyword arguments can be given to override individual formatting parameters in the current dialect. For full details about the dialect and formatting parameters, see section Dialects and Formatting Parameters. Each row read from the csv file is returned as a list of strings. No automatic data type conversion is performed unless the format option is specified (in which case unquoted fields are transformed into floats). Return a writer object responsible for converting the user’s data into delimited strings on the given file-like object. csvfile can be any object with a method. If csvfile is a file object, it should be opened with . An optional dialect parameter can be given which is used to define a set of parameters specific to a particular CSV dialect. It may be an instance of a subclass of the class or one of the strings returned by the function. The other optional fmtparams keyword arguments can be given to override individual formatting parameters in the current dialect. For full details about dialects and formatting parameters, see the Dialects and Formatting Parameters section. To make it as easy as possible to interface with modules which implement the DB API, the value is written as the empty string. While this isn’t a reversible transformation, it makes it easier to dump SQL NULL data values to CSV files without preprocessing the data returned from a call. All other non-string data are stringified with before being written. Associate dialect with name. name must be a string. The dialect can be specified either by passing a sub-class of , or by fmtparams keyword arguments, or both, with keyword arguments overriding parameters of the dialect. For full details about dialects and formatting parameters, see section Dialects and Formatting Parameters. Delete the dialect associated with name from the dialect registry. An is raised if name is not a registered dialect name. Return the dialect associated with name. An is raised if name is not a registered dialect name. This function returns an immutable . Return the names of all registered dialects. Returns the current maximum field size allowed by the parser. If new_limit is given, this becomes the new limit. The module defines the following classes: Create an object that operates like a regular reader but maps the information in each row to a whose keys are given by the optional fieldnames parameter. The fieldnames parameter is a sequence. If fieldnames is omitted, the values in the first row of file f will be used as the fieldnames and will be omitted from the results. If fieldnames is provided, they will be used and the first row will be included in the results. Regardless of how the fieldnames are determined, the dictionary preserves their original ordering. If a row has more fields than fieldnames, the remaining data is put in a list and stored with the fieldname specified by restkey (which defaults to ). If a non-blank row has fewer fields than fieldnames, the missing values are filled-in with the value of restval (which defaults to ). All other optional or keyword arguments are passed to the underlying instance. If the argument passed to fieldnames is an iterator, it will be coerced to a . Changed in version 3.6: Returned rows are now of type . Changed in version 3.8: Returned rows are now of type . Create an object which operates like a regular writer but maps dictionaries onto output rows. The fieldnames parameter is a of keys that identify the order in which values in the dictionary passed to the method are written to file f. The optional restval parameter specifies the value to be written if the dictionary is missing a key in fieldnames. If the dictionary passed to the method contains a key not found in fieldnames, the optional extrasaction parameter indicates what action to take. If it is set to , the default value, a is raised. If it is set to , extra values in the dictionary are ignored. Any other optional or keyword arguments are passed to the underlying instance. Note that unlike the class, the fieldnames parameter of the class is not optional. If the argument passed to fieldnames is an iterator, it will be coerced to a . The class is a container class whose attributes contain information for how to handle doublequotes, whitespace, delimiters, etc. Due to the lack of a strict CSV specification, different applications produce subtly different CSV data. instances define how and instances behave. All available names are returned by , and they can be registered with specific and classes through their initializer ( ) functions like this: The class defines the usual properties of an Excel-generated CSV file. It is registered with the dialect name . The class defines the usual properties of an Excel-generated TAB-delimited file. It is registered with the dialect name . The class defines the usual properties of a CSV file generated on UNIX systems, i.e. using as line terminator and quoting all fields. It is registered with the dialect name . The class is used to deduce the format of a CSV file. The class provides two methods: Analyze the given sample and return a subclass reflecting the parameters found. If the optional delimiters parameter is given, it is interpreted as a string containing possible valid delimiter characters. Analyze the sample text (presumed to be in CSV format) and return if the first row appears to be a series of column headers. Inspecting each column, one of two key criteria will be considered to estimate if the sample contains a header:\n• None the second through n-th rows contain numeric values\n• None the second through n-th rows contain strings where at least one value’s length differs from that of the putative header of that column. Twenty rows after the first row are sampled; if more than half of columns + rows meet the criteria, is returned. This method is a rough heuristic and may produce both false positives and negatives. An example for use: The module defines the following constants: Instructs objects to quote all fields. Instructs objects to only quote those fields which contain special characters such as delimiter, quotechar or any of the characters in lineterminator. Instructs objects to quote all non-numeric fields. Instructs objects to convert all non-quoted fields to type float. Instructs objects to never quote fields. When the current delimiter occurs in output data it is preceded by the current escapechar character. If escapechar is not set, the writer will raise if any characters that require escaping are encountered. Instructs objects to perform no special processing of quote characters. Instructs objects to quote all fields which are not . This is similar to , except that if a field value is an empty (unquoted) string is written. Instructs objects to interpret an empty (unquoted) field as and to otherwise behave as . Instructs objects to always place quotes around fields which are strings. This is similar to , except that if a field value is an empty (unquoted) string is written. Instructs objects to interpret an empty (unquoted) string as and to otherwise behave as . The module defines the following exception: Raised by any of the functions when an error is detected.\n\nTo make it easier to specify the format of input and output records, specific formatting parameters are grouped together into dialects. A dialect is a subclass of the class containing various attributes describing the format of the CSV file. When creating or objects, the programmer can specify a string or a subclass of the class as the dialect parameter. In addition to, or instead of, the dialect parameter, the programmer can also specify individual formatting parameters, which have the same names as the attributes defined below for the class. A one-character string used to separate fields. It defaults to . Controls how instances of quotechar appearing inside a field should themselves be quoted. When , the character is doubled. When , the escapechar is used as a prefix to the quotechar. It defaults to . On output, if doublequote is and no escapechar is set, is raised if a quotechar is found in a field. A one-character string used by the writer to escape the delimiter if quoting is set to and the quotechar if doublequote is . On reading, the escapechar removes any special meaning from the following character. It defaults to , which disables escaping. Changed in version 3.11: An empty escapechar is not allowed. The string used to terminate lines produced by the . It defaults to . The is hard-coded to recognise either or as end-of-line, and ignores lineterminator. This behavior may change in the future. A one-character string used to quote fields containing special characters, such as the delimiter or quotechar, or which contain new-line characters. It defaults to . Changed in version 3.11: An empty quotechar is not allowed. Controls when quotes should be generated by the writer and recognised by the reader. It can take on any of the QUOTE_* constants and defaults to . When , spaces immediately following the delimiter are ignored. The default is . When , raise exception on bad CSV input. The default is .\n\nThe simplest example of reading a CSV file: The corresponding simplest possible writing example is: Since is used to open a CSV file for reading, the file will by default be decoded into unicode using the system default encoding (see ). To decode a file using a different encoding, use the argument of open: The same applies to writing in something other than the system default encoding: specify the encoding argument when opening the output file. A slightly more advanced use of the reader — catching and reporting errors: And while the module doesn’t directly support parsing strings, it can easily be done:"
    },
    {
        "link": "https://codecademy.com/article/python-csv-file",
        "document": "A complete guide on working with CSV files in Python including read, write and basic manipulation operations\n\nImagine you are a Data Analyst at a startup. You regularly receive data from many sources. To manage the data, you start by storing it in a CSV file and processing it using a programming language such as Python.\n\nE-commerce and Inventory Management: CSV files help manage product listings and update inventory to allow data to be coordinated in bulk.\n\nCustomer Relationship Management (CRM): CSV files are used to manage and analyze data, such as managing contact lists, campaign data, and customer management.\n\nSpreadsheet Applications: CSV files allow easy data manipulation and sharing using various spreadsheet applications, such as Microsoft Excel and Google Sheets.\n\nData Analysis: CSV files are used to analyze data and to manipulate datasets for analysis.\n\nCSV files are extensively used across various applications and platforms. Some of the advantages of CSV files are listed below:\n\nIn this tutorial, we’ll cover how to read, write, and manipulate CSV files using Python.\n\nCSV, Comma Separated Values, is a plain text file format used to store structured tabular data. In a CSV file, a line represents a row in a table. Each line consists of a comma-separated value, representing a column in a row. A CSV file is saved with a .csv extension.\n\nBI Data Analysts use Python and SQL to query, analyze, and visualize data — and Tableau and Excel to communicate findings. Try it for free\n\nBefore you start working with CSV files in Python, it’s crucial to set up your environment properly.\n\nIf you don’t have Python installed on your system, visit this link to install it. To work with CSV files in Python, we will use the CSV module part of the standard library (no need to install it). We import the CSV module like so:\n\nNow we have the environment ready to use the module. Let’s learn what operations we can perform.\n\nOverview of basic File Handling Operations supported by Python for CSV Files\n\nWe can perform operations like adding a new column or filtering out the data using a Python program.\n\nFirst, let’s learn the basic operations like opening, reading, and writing the CSV files.\n\nLet’s see how we can open a CSV file using Python. A CSV file can be opened using the built-in function with the appropriate mode like (‘r’ for reading, ‘w’ for writing, or ‘a’ for appending). It’s better to use the statement that automatically handles the closing of the file even if any error occurs.\n\nLet’s look at an example to understand how we can open CSV files with Python. In a CSV file named , we have the following data:\n\nThe following code opens the file using the function and with read mode.\n\nThen we use the function to skip the header row and a loop to iterate over each row in the CSV file:\n\nTo see how we can read CSV files with Python, let’s look at an example. In a CSV file named , we have the following information:\n\nWe write a Python script to read this CSV file and print its contents like so:\n\nIn this code, we create a CSV reader object using , which reads a CSV file and returns each row as a list of strings.\n\nNext, we read the header of the CSV file using the function which is used to retrieve the next item from an iterator. A header in a CSV file is the first row that contains the names of the columns, providing a label for each column’s data.\n\nThen, we loop through the remaining rows in the CSV file, printing each row as a list of strings. This approach allows us to easily read and process CSV data in Python.\n\nHow to Write to a CSV File in Python?\n\nTo write the data into a CSV file, we first open the file in write mode using the statement and then create a object using the to allow us to write the data into the file.\n\nTo understand it more concisely, let’s look at an example. In a CSV file named , we have the following information:\n\nHere’s the code snippet that opens the file and defines a list containing all the data that is to be written into the CSV file.\n\nThen, the object writes the data into the output.csv file by passing the list containing the header row and all subsequent data rows as arguments to the function:\n\nHow to Manipulate and Analyze Data using CSV Files?\n\nData manipulation and analysis are important skills to have for any data analyst or scientist. In this section, we will take a look at basic data manipulation in Python.\n\nThe following are some data analysis things we can do with the CSV module in Python\n\nFiltering data involves selecting rows that meet certain criteria. For example, we might want to filter rows where the age of the employees is greater than 25.\n\nHere’s how we can filter the data for that:\n\nAdding a new column involves creating additional data based on the existing columns or with new data. For instance, we might want to add a column that calculates the age of each employee next year.\n\nHere’s how you can add a new column:\n\nThis loop iterates over each row in the data list. In each row, it adds a new key-value pair where the key is ‘age_next _year’ and the value is the current age incremented by one. This creates a new column in the dataset.\n\nWe’ve successfully used the module to perform some basic operations on the files.\n\nWe explored CSV files and the module in this tutorial. Let’s recap what we’ve discussed:\n• CSV files provide a standardized format for storing tabular data, ensuring compatibility across various platforms and applications.\n• Data manipulation operations such as filtering rows and adding new columns can be easily performed using Python’s csv module.\n• Python’s simplicity and versatility make it a powerful tool for handling CSV files, facilitating seamless integration into data analysis workflows.\n\nThese were some basics of working with CSV files using Python. For more advanced data analysis tasks, libraries like Pandas can be integrated with Python to enhance CSV file processing capabilities."
    },
    {
        "link": "https://dev.to/devasservice/guide-to-pythons-csv-module-32ie",
        "document": "Working with data is an inevitable part of programming, and as someone who often finds themselves knee-deep in various file formats, I’ve always appreciated how Python simplifies the whole process.\n\nOne such file format that comes up regularly, particularly in data analysis, is the CSV file.\n\nThe CSV, or Comma-Separated Values, is a popular data exchange format due to its simplicity.\n\nLuckily, Python comes with a built-in module called csv, which makes working with these files remarkably efficient.\n\nIn this article, I’ll break down how the csv module works in Python, from basic usage to more advanced techniques that can save you tons of time when processing data.\n\nBefore diving into the csv module, let’s start with a basic understanding of what a CSV file is.\n\nA CSV file is essentially a plain text file where each line represents a row of data, and each value is separated by a comma (or sometimes other delimiters like tabs).\n\nHere's a quick example of what it might look like:\n\n\n\nYou might wonder why you'd need the csv module when CSV files are just text files that could theoretically be read using Python's standard file handling methods.\n\nWhile this is true, CSV files can have complexities—like embedded commas, line breaks within cells, and different delimiters—that are tricky to handle manually.\n\nThe csv module abstracts all of this, letting you focus on your data.\n\nThe most common operation you'll perform on a CSV file is reading its contents.\n\nThe csv.reader() function in the module is an easy-to-use tool for that.\n\nHere's a step-by-step guide on how to do it.\n\nThis is the simplest way to read a CSV file.\n\nThe csv.reader() returns an iterable, where each iteration gives you a list representing a row of the file.\n\nHandling Headers\n\n Most CSV files come with headers in the first row, like column names.\n\nIf you don’t need these headers, you can simply skip the first row when iterating:\n\n\n\nSometimes, I’m working with files that contain a mix of useful and irrelevant data, and I find myself skipping rows based on more than just the header.\n\nYou can do this easily within the for loop.\n\nDictReader: A More Intuitive Way to Read CSV Files\n\n If your CSV file has headers, the csv.DictReader() is another fantastic option that reads each row as a dictionary, with the keys being the column names:\n\n\n\nThis approach can make your code more readable and intuitive, especially when working with large datasets.\n\nFor example, accessing row['Name'] feels much clearer than dealing with index-based access like row[0].\n\nOnce you’ve read and processed your data, chances are you'll want to save or export it.\n\nThe csv.writer() function is your go-to tool for writing to CSV files.\n\nThe writer.writerows() function takes a list of lists and writes them to the CSV file, where each inner list represents a row of data.\n\nDictWriter: A Cleaner Way to Write CSV Files\n\n Just as we have DictReader for reading CSV files into dictionaries, we have DictWriter for writing dictionaries to a CSV.\n\nThis method can be particularly handy when you want to specify your column names explicitly.\n\n\n\nUsing DictWriter, you get a nice, clean interface to write dictionaries to CSV while keeping your code readable and concise.\n\nBy default, the CSV module uses commas to separate values, but sometimes you might be working with files that use other delimiters, such as tabs or semicolons.\n\nThe csv module provides an easy way to handle these cases by specifying the delimiter argument.\n\n\n\nI’ve come across CSV files that use semicolons instead of commas—usually from European sources—and it’s comforting to know that Python’s csv module handles this with ease.\n\nWhether it's commas, tabs, or any other delimiter, the csv module has got you covered.\n\nWhat if your data contains commas within fields, quotes, or even line breaks?\n\nThe CSV module automatically handles such cases by using quoting mechanisms.\n\nYou can also control how quoting works using the quoting parameter.\n\n\n\nIn this example, QUOTE_ALL ensures that every field is wrapped in quotes.\n\nOther quoting options include csv.QUOTE_MINIMAL, csv.QUOTE_NONNUMERIC, and csv.QUOTE_NONE, giving you full control over how your CSV data is formatted.\n\nOver the years, I’ve come to rely on the CSV format as a lightweight, efficient way to move data around, and Python’s csv module has been a trusty companion in that journey.\n\nWhether you’re dealing with simple spreadsheets or complex, multi-line data fields, this module makes the process feel intuitive and effortless.\n\nWhile working with CSVs may seem like a mundane task at first, it’s a gateway to mastering data manipulation.\n\nIn my experience, once you’ve conquered CSVs, you'll find yourself confidently tackling larger, more complex formats like JSON or SQL databases. After all, everything starts with the basics."
    },
    {
        "link": "https://medium.com/@romulo.gatto/advanced-file-handling-and-csv-processing-860359c243d5",
        "document": "When working with data in Python, efficient file handling and processing is crucial. In this guide, we will explore advanced techniques for file handling and specifically focus on the processing of Comma-Separated Values (CSV) files using Python.\n\nCSV files are a common format for storing tabular data, making it easy to exchange information between different systems. Python provides powerful tools to handle CSV files effectively, extracting valuable insights from the data they contain.\n\nIn this tutorial, you will learn how to:\n\nPython’s built-in module allows us to easily read from or write to CSV files by providing high-level functions that simplify the process.\n\nTo read a CSV file named , you can use the following code snippet:\n\nThe above code opens the specified file in reading mode ( ) using a context manager ( statement)…"
    }
]