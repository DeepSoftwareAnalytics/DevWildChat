[
    {
        "link": "https://developer.wordpress.org/reference/functions/wp_remote_get",
        "document": "Performs an HTTP request using the GET method and returns its response.\n\nUse to get the response body.\n\nUse to get the HTTP status code for the response.\n\nUse related functions in to get other parameters such as headers.\n\nSee method located in for the format of the array returned by"
    },
    {
        "link": "https://tommcfarlin.com/wp_remote_get",
        "document": "When it comes to working with remote requests on the server side, there are usually two solutions that I end up seeing.\n\nIn fact, there are two solutions that I’ve typically ended up using:\n\nBoth of these functions generally work well; however, in our experience with Standard, we’ve had less than stellar experience especially when it comes to budget hosts.\n\nThis is where comes into play. In short, is a simple WordPress API function that’s used to retrieve data from a specified URL using the HTTP GET method.\n\nOf course, as with most API methods, there’s a little more to it than that.\n\nBut first, I want to note that my general thought process, as it relates to WordPress, is as follows:\n• None If a function exists in the WordPress API for a given task, use it\n• Otherwise, look for a similar function in PHP\n• And if that doesn’t work, write my own\n\nRarely – if ever – have I had to write my own. WordPress usually has something available and, if not, PHP has you covered 9 times out of 10.\n\nThe challenge, though, is knowing how to find functions like this in the WordPress Codex. Honestly, it’s not always easy.\n\nIn fact, I went for a long time without using , but I think I finally stumbled across when one afternoon while going through Rarst’s Query Posts website.\n\nSo anyway, if you’re in the business of writing plugins, themes, or application-related code that needs to make a remote request, here’s how you can go about doing it using .\n\nAssuming that your URL is ‘http://foo.com’, then you’d simply do something like this:\n\nEasy enough, right? But here’s the thing: The request can fail, and in those cases you should be prepared to handle that.\n\nFirst, you can check to see if the request failed by using the is_wp_error function. If it did fail, then you can proceed by trying to use . If that fails, then you can use , and if that fails, you may simply be out of luck.\n\n\n\nAll joking aside, here’s how an implementation of the logic may look:\n\nNotice above that we define a function to initialize and set the proper parameters. Next, we define a get_response function is that responsible for working through the various ways that we can make a request and grab the response.\n\nThe last thing to notice is that if the request is successful using , then an array will actually be returned. Though you may care to examine, say, the headers, the example above has us examining the body; otherwise, the other functions will return the data of the body.\n\nAs mentioned in the comments and according to the WordPress source code, the WP_HTTP object will actually do the following:\n\nIn my experience with building Standard, we’ve actually not had a 100% success with , but we’ve had to fall back to and, sometimes, .\n\nBut here’s what’s interesting: the HTTP API clearly uses cURL. Unfortunately, I’ve not done enough investigation as to know why may fail, but the cURL function above has proven successful.\n\nI suspect that it may have to do with the exact cURL parameters or some other set of configuration but, again, that’s pure speculation (as I hate admitting that :)).\n\nAs important as I think that it is to understand the various strategies that come with dealing with remote requests, I think that it’s just as useful to have libraries available to help make our jobs easier.\n\nLuckily, thanks to pointers from Ryan McCue, George Mamadashvili, Andrey Savchenko, and Bronson Quick, it is easier thanks to the WP HTTP API. This particular article gives a break down of all of the HTTP API methods that are available in WordPress for making HTTP requests, so be sure to review this when you’re looking to manage more advanced request options."
    },
    {
        "link": "https://deliciousbrains.com/wordpress-http-api-requests",
        "document": "Sometimes your WordPress site needs to talk to other services around the web. This almost exclusively happens using the HTTP protocol. A common example is when your WordPress installation contacts the wordpress.org servers to check for new versions of plugins, themes, and WordPress core itself. In this article, we take a closer look at the built-in HTTP functions that WordPress offers to make these requests, and show why it’s almost always a good idea to use those instead of PHP functions.\n\nHTTP requests are very common in WordPress plugins and themes. Any plugin that interacts with an external service is bound to make some HTTP requests here and there: adding subscribers to your Mailchimp list, sending emails via Amazon SES, or offloading images to Amazon S3.\n\nDoing It Wrong – Using PHP Functions\n\nPHP itself offers a couple of different ways to make HTTP requests. You could work directly with the Network functions for your HTTP requests using , and , but you would end up wasting time and reinventing a lot of wheels for no good reason.\n\nSlightly better would be to use one of the file reading functions that can handle PHP’s HTTP protocol wrapper. This includes the slightly cumbersome as well as the much easier and functions. A simple one-liner will actually get you quite far:\n\nBut before you stick this code into your WordPress plugin or child theme, please be aware that many hosting providers explicitly disable opening URLs this way. What works in your local development environment may not work in your production environment.\n\nBesides, just because it’s possible to get content from an Internet URL using the PHP functions doesn’t mean that’s the best approach in day-to-day development. Just adding the seemingly innocent requirement of specifying a header in the HTTP request makes the above example much more complicated (example from Stack Overflow):\n\nNot so simple any more. And then consider that this example doesn’t have any error handling in place. So unless you are 100% sure that the remote server will politely reply back (hint: you’re not), you’ll have to add more code to wrap that elusively simple before it’s usable in production code.\n\nSince making HTTP requests using raw PHP is a bit clumsy, it should be no surprise that there are dozens of helper libraries that make creating HTTP requests easier.\n\nIn the broader PHP world, the one outside of WordPress that relies on Composer for dependency management, Guzzle, and Httpful are among the most popular libraries for handling HTTP requests but there are literally dozens of others to choose from, each with their own strengths and weaknesses.\n\nIn the world of WordPress, we need to be a bit careful before using Composer libraries, especially if we’re going to ship this code to other WordPress users. There are two primary reasons for this.\n\nFirst and foremost there’s a real risk that you or your users end up in some version of the Composer Dependency Hell. In short, that is when another plugin on the same WordPress installation uses the same dependency that your plugin does, but that plugin uses a different version of that dependency.\n\nWordPress has a deterministic way of loading plugins. While it’s technically possible to hack the plugin order, it’s very much discouraged. Besides, whatever tricks you play to force your plugin to load first, other developers can play too. For these reasons, you will never know if your plugin is going to use the versions of the dependency that you shipped, or some other, perhaps incompatible, version.\n\nThere are ways to work around this using the php-scoper tool that wraps all Composer dependencies in your own PHP namespace. You can go down that route but the seemingly simple idea to use a Composer package to manage HTTP requests suddenly turned into a much bigger problem that is probably also altering your build process.\n\nOn our own product WP Offload Media, we use third-party libraries from the supported storage providers (Amazon AWS, Digital Ocean, etc.) that in turn use the Guzzle HTTP library. To avoid compatibility issues with other plugins using Guzzle, we are using php-scoper to wrap all of those dependencies in a separate namespace.\n\nThe other reason we should think twice before using a third-party library for HTTP requests is that it will short circuit the WordPress filtering process.\n\nOne of the fine qualities of WordPress is that so many things can be customized via actions and filters, and making HTTP requests is no exception. We’ll go into more detail in the next section, but giving site owners the opportunity to modify HTTP requests to suit their special needs is inherently good. You shouldn’t remove this feature unless you have a really good reason.\n\nSay Hello to wp_remote_get, wp_remote_post and Friends\n\nSince 2009, WordPress has shipped with its own built-in functions for dealing with HTTP requests, namely , and , one function for each of the HTTP verbs GET, POST and HEAD. These three global functions all work as wrappers around the WP_Http class that in turn uses the Requests library. We’ve actually written a little bit about the Requests library before in our post about how WordPress uses cURL to make HTTP requests.\n\nUsing can be as simple as:\n\nThere are plenty of reasons why you should prefer using the functions in the family. Here are the ones I think are most important.\n\nThey Are Always There\n\nThe functions have been around in WordPress almost since the beginning, so there’s absolutely no need to worry about them not being present.\n\nSeveral important functions in WordPress core, such as plugin installations and automatic updates, rely on these functions to be there and just work. Which they do. So there is no real reason to add third-party libraries for HTTP requests. You already have access to a good and reliable library.\n\nThey Are Very Capable\n\nYou can access pretty much all features of the HTTP protocol by passing in additional arguments via the second parameter of these functions.\n\nYou can add headers, change the user agent string, force a specific version of the HTTP protocol, etc. You can also specify your own location for SSL certificates, disable SSL certificate verification, modify request waiting time (time out), or even add HTTP verbs if you need to. We’ll actually look at adding wrappers for two HTTP verbs later in this article.\n\nHere’s an example where I modify the HTTP request a bit before sending it off to the remote server:\n\nThe complete list of valid arguments aren’t completely documented anywhere, but can be found in the source file for the HTTP class itself or in this helpful comment.\n\nIn short, , and are capable of handling most use cases for HTTP requests that I can think of. There are very few situations where you absolutely need to use a third-party HTTP library in WordPress.\n\nUsing the underlying Requests library, it’s even possible to use built-in functions to do multiple requests at the same time, but that’s a little bit out of scope for this blog post.\n\nThey Are Easy to Customize\n\nDuring the execution of an HTTP request, all functions will call different WordPress filters that allow you and others to modify the exact behavior or even block external URLs from ever being requested.\n\nThis means that not only can you control your own HTTP requests in great detail, you can also interfere with HTTP requests made by other plugins, or even WordPress core itself.\n\nImagine you are responsible for a couple of internal WordPress installations at a big company. To comply with internal IT security rules, you need to hide the internal site URL that is automatically added to the user agent string in HTTP requests. How would you accomplish this?\n\nWell, and all its friends will trigger the filter before the request is sent off, so we can change this using a simple WordPress filter:\n\nSome site owners may have the need to block HTTP traffic to external URLs altogether. All requests that are made using , or will respect the and the constants. We’ve written a bit about these in our documentation for WP Migrate.\n\nIf defined, these two constants will allow a site owner to stop all outgoing traffic, but optionally also allow a set of exceptions:\n\nA request to any other host will now return a ´WP_Error´:\n\nBy using the built-in HTTP functions, your users get all this low-level control of HTTP requests without you having to write a single line of extra code. How great is that!!?\n\nA neat feature of the Requests library that sets it apart from a few of those linked to above is that it is transport agnostic. More specifically in the case of HTTP requests, it’s not dependent on the cURL module being installed on the web server.\n\nThe Requests library prefers to use cURL, but in the unlikely event that cURL isn’t present, it can fall back to using instead.\n\nEither way, the Requests library is going to get the job done, giving you one less dependency to test, document, or worry about.\n\nWhat About wp_remote_put and wp_remote_delete?\n\nIf you’ve done a bit of work with remote APIs and know your way around the HTTP verbs you may have noticed that so far I haven’t mentioned or . Since we have built-in implementations for GET, POST and HEAD, clearly there should be an implementation for PUT and DELETE as well. Right?\n\nWell, no. The WordPress Core team hasn’t implemented all the standard HTTP verbs just yet. But there’s an ongoing discussion about adding them in the WordPress issue tracker, so it just might happen in a future release.\n\nIf you need those functions sooner, the modular nature of the class, combined with the wrapper function, makes it very easy to add these two in your own code:\n\nNote that wrapping these function declarations in ´function_exists()´ is important because there’s a very real possibility that another plugin on your site may already have implemented them. It’s also a good safeguard if they are actually added in a future version of WordPress.\n\nI hope this has been a good introduction to how and why you should use the built-in HTTP functions in WordPress, rather than using a third-party library or rolling your own.\n\nAs we’ve seen, WordPress comes with a great HTTP API baked in, which is well documented and maintained. There are multiple advantages to using it over any alternatives. These advantages extend not only to you as a developer, but also to WordPress site administrators, and the entire WordPress ecosystem.\n\nDo you have questions about the HTTP functions? Did I miss any important aspect or feature, or do you have any tips? Let me know in the comments below."
    },
    {
        "link": "https://tommcfarlin.com/remote-requests-wp_remote_get",
        "document": "If you’re read any of my previous posts on retrieving remote files, then you know that old habits die hard as I often use rather than .\n\nSo, as one does when blogging, I thought it would be helpful to share a simple example of how to use in your day-to-day work.\n\nThe post below is merely a snippet of how to use it. That is, it won’t show how to designed, say, a class around it or a UI that allows users to upload a file. But this should be enough to get things started.\n\nAnd I’ll include how to take the API documentation around it and understand how to leverage it when using a function like this.\n\nThough I don’t always use the WordPress API (which is usually because, again, old habits carry over or because I’m unaware of a function), I try.\n\nAnd I firmly believe that if you’re working in an application’s particular environment and said application provides an API for something, then you should use it.\n\nHow To Read The Docs\n\nIf you’re familiar with how to leverage documentation, then you can skip this section.\n\nWith that said, here’s what the documentation around says:\n\nYou can read more on both this page in the Codex and this page in the Developer Resources. But before actually using the function, it’s important to understand what it accepts and what it returns.\n\nAnd the function accepts two parameters:\n• the URL to which the request is being made,\n• the set of arguments required for the request (which is outside the scope of this post).\n\nAnd wp_remote_get returns mixed results based on the outcome of the request. As per the Developer Resources:\n\nAt this point, we know what the function does, what it accepts, and what it returns. So we have enough to go on regarding setting up a simple example.\n\nWith all of the above in place, here’s a simple of example of how to retrieve a file from a given URL. I’m assuming the URL is on your local server (because I don’t want to get into requesting information from other servers in this post) which is why the domain as the TLD of dot-local.\n\nThe comments should explain what’s up, but I’ll offer a few more thoughts after that.\n\nThe most important things note are as follows:\n• Check the headers to make sure they are set. If not, then there’s no need to proceed with grabbing the body of the file.\n• If there is an error, then we need to handle that gracefully.\n• If all else checks out, then we’re ready to write the file to disk. I’m using PHP’s file functions to do this. It’s a little outside the scope of the post but should be easy to understand if you study the links below.\n\nUltimately, using affords you a lot of functionality wrapped in an easy-to-use function."
    },
    {
        "link": "https://developer.wordpress.org/apis/making-http-requests",
        "document": "Very often we need to make HTTP requests from our theme or plugin, for example when we need to fetch data from an external API. Luckily WordPress has many helper functions to help you do that.\n\nIn this section, you will learn how to properly make HTTP requests and handle their responses.\n\nHere’s an example of what you’re going to see\n\nIn the next articles you’ll see a detailed explanation on how to make the requests:\n• GETting data from an external service\n\nIf you’re just looking for the available helper functions, here they are:\n\nThe functions below are the ones you will use to retrieve a URL.\n• : Retrieves a URL using the GET HTTP method.\n• : Retrieves a URL using either the default GET or a custom HTTP method that you specify.\n\nThe other helper functions deal with retrieving different parts of the response. These make usage of the API very simple and are the preferred method for processing response objects.\n• – Retrieves just the body from the response.\n• – Retrieve a single header by name from the raw response.\n• – Retrieve only the headers from the raw response.\n• – Retrieve the response code for the HTTP response. This should be 200, but could be 4xx or even 3xx on failure.\n• – Retrieve only the response message from the raw response."
    },
    {
        "link": "https://exchangerate-api.com/docs/php-currency-api",
        "document": "We offer an easy to use, accurate and reliable exchange rate API for PHP that's perfect for both personal and professional use.\n\nFetching exchange rates using our PHP currency conversion API is as easy as making GET requests. This means you can easily integrate our API into your PHP project however you'd prefer. No complex dependency hassles.\n\nOur API returns JSON responses that are fast to parse and easily human-readable. PHP has high performance native library functions for handling JSON so you'll be able to access our data without much work at all.\n\nFor more details on the different types of request we support please see our Main Documentation.\n\nAlternatively simply use the PHP library code below to get started as fast as you can copy & paste!\n\nYou'll need to sign up for a free account to receive your API key. Visit this link to get started.\n\nThis is a sample JSON response from a request with USD as the base currency code:\n\nPlease see our main documentation for further information on our different available request types & error response details.\n\nPlease email us if you'd like to submit a code example."
    },
    {
        "link": "https://abstractapi.com/guides/other/currency-conversion-php",
        "document": "How to use the API?\n\nTo get started with this API, you need to create an account with Abstract.\n\nUpon successful registration, you need to log in and access your dashboard. To access the API, look out for Exchange rates under the Lookup category in the dashboard.\n\nAfter clicking the Exchange rates option, you will get another screen where you will see your API key and some very useful sample codes on how to use the Exchange rate API. Let’s make a quick API call using Postman to get the live exchange rate of USD against over 150 countries' currencies.\n\nTo ensure a proper response from the API, make sure to replace the query parameter ‘api_key’ with the Abstract Key provided to you after signup.\n\nUsing Abstract Currency Exchange and Forex API with PHP\n\nLet’s put the Currency Exchange and Forex API to some good use by creating a simple demo API in PHP.\n\nTo set up the PHP development and runtime environment, you can install XAMPP. Download and install the XAMPP package according to your operating system. Once the installation is finished, browse the installation path for Xampp and access the ‘htdocs’ subdirectory. This is the root directory containing the PHP code.\n\nCreate another subdirectory within ‘htdocs’, named ‘api’, and then create an empty file ‘live.php’ inside it. This will be the path for accessing the demo API for live currency rates.\n\nThe PHP Code for Getting Currency Rates\n\n\n\nOpen the file 'live.php' inside your favorite code editor and copy the following code.\n\n\n\n \n\n/**\n\n* This file is used to get the latest and live exchange rates of currencies.\n\n*/\n\n\n\nheader('Content-type: application/json');\n\n\n\n// Get post request data and convert the value to an //associative array\n\n\n\n$request = json_decode(file_get_contents('php://input'), true);\n\n\n\n// for the live api the only constant value is base currency, so let's ensure you passed that at least\n\n\n\nif(!isset($request['base'])) {\n\n echo json_encode(array('status' => false, 'message' => 'Invalid request'));\n\n exit;\n\n}\n\n\n\n//lets add our API key to the request\n\n$request['api_key'] = '\n\nSave the file and ensure that the placeholder “<Your_Abstract_key>” is replaced by your actual API key.\n\nThis demo API just acts as a PHP interface for the Currency Exchange and Forex API. It forwards the request from the API consumer to the Currency Exchange and Forex API and relays the response of Currency Exchange and Forex API back to the consumer. Internally it relies on the PHP curl library to invoke the Currency Exchange and Forex API.\n\nTo test the demo API, you need to run it within a web server. Run the default php server using the command ‘php -S localhost:8000’. Then you should be able to access this API via the URL ‘http://localhost:8000/api/live.php’.\n\nThis is the same API response that you got earlier for the Currency Exchange and Forex API. The only difference is that this time it is returned via the demo API written in PHP.\n\nUse Cases for Abstract Currency Exchange and Forex API\n\nThis API is handy for E-Commerce websites serving visitors from other countries, regardless of the platform it is running on (e.g., SAP spartacus).. With the help of this API, websites can present currency conversion rates to display prices in the visitors’ local currency.\n\nThis API can help international import and export businesses by helping them determine the selling and buying prices to book profits from different products and commodities. Currency conversion is also useful for forex traders, offering the ability to track changes in exchange rate valuations in real-time. even when not at the trading desk.\n\nThe Currency Exchange and Forex API also facilitate conversion between fiat and cryptocurrencies, thus giving a boost to the crypto economy.\n\nCurrency conversion allows the price measure of one currency to be converted to another currency. Currency conversion is an important procedure in cross-border money exchange, forex trading as well as online transactions. Nowadays, even conversion to and from cryptocurrency is a frequent currency conversion operation performed on several online platforms that accept cryptocurrencies such as Bitcoin and Ethereum.\n\nWhat Is the Best Way to perform Currency Conversion?\n\nThe best way to convert Currency conversion is by using the Abstract’s Exchange Rate and Currency Converter API, which gives you the exchange value of over 150 currencies with over 10,000 currency pairs. This API is a reliable source of data from trusted partners to provide the most accurate currency exchange rates.\n\nHow Do You Perform Currency Conversion using PHP?\n\nYou can perform currency conversion using PHP by making a request to Abstract’s Exchange Rate and Currency Converter API with the help of the PHP curl library."
    },
    {
        "link": "https://exchangeratesapi.io/documentation",
        "document": "With over 15 exchange rate data sources, the Exchangerates API is delivering exchanging rates data for more than 170 world currencies. This API has several endpoints, where each of them serves a different purpose, use case. The endpoints include functionalities like receiving the latest exchange rates information for a specific set, or for all currencies; conversion from one to another currency; receiving data Time-series for multiple or for one currency, and preserving the API daily for the fluctuation data. In this document, you will find out about the API structure, the methods, and the potential errors and code examples. If you still have questions and doubts, please do not hesitate to contact us, our team will do their best to help you.\n\nThe delivered exchange rates with the API, are by default connected to the Euro. The data gets returned in a standard JSON format and easily can be reparsed in any programming language. Example Response: See below an example of an API response that provides information about several world currencies that are commonly used, all in connection with the Euro currency and time-stamped with time information of the collected information. As we can see from the example above, when it is queried for exchange rates in real-time, the API response always contains a object which is a standard UNIX timestamp that shows the time when the provided exchange rate information was collected. Also, we have a object which contains the short currency code of the currency, have an object which contains the when the given exchange rate information was collected, and object that contains the exchange rate data. Below, in the Endpoints section, we will discuss the API response structure more in detail.\n\nYou can request new Exchangerates API data only in cases if there are changes into the rates data since your last API response, this can be done with HTTP ETags. An ETag is a part of the HTTP protocol and one of the several mechanisms used for cache validation. The ETag is an identifier assigned to a data resource in a server, and if that resource is ever updated at the server, the ETag is changed. Whenever a resource is requested (via its URL), the data and ETag are retrieved and stored in the Web cache, and the ETag is sent along with subsequent requests. If the ETag at the server has not changed, a \"Not Modified\" message is returned, and the cached data is used. (Definition by pcmag.com) Step 1 The primary request sent to Exchangerates API will create an object that will contain a unique ETag key and a object containing the exact date and time at which the data was last modified. This data, along with the entire API response, must be cached in order for ETags to work. Step 2 When you will make another API request, be sure to include the HTTP header abd set ut to your previously generated ETag value. Moreover, you will need to add the HTTP header to your API request containing the date and time data from your last request. Step 3 Based on if your result set has updated or not, since your last API request, the API will return:\n• same results as your initial API request along with a HTTP header which indicates that no change has happened. In this case, the size of the API response will be very small 0.2kb;\n• or new results containing a completely new set of and objects that will indicate that new data has been accessed. In this case, the size of your API response will be normal.\n\nWith the fluctuation API endpoint, you can receive information about the currency’s on a day-to-day basis. To be able to use this feature, add the and and select which currencies (symbols) you would like to receive info for from the API. Please note that the maximum allowed timeframe is 365 days. [required] The start date of your preferred fluctuation timeframe. [required] The end date of your preferred fluctuation timeframe. [optional] Enter the three-letter currency code of your preferred base currency. \n\n Returns true or false depending on whether or not your API request has succeeded. Returns true if a request to the fluctuation endpoint is made. The start date of your time frame. The end date of your time frame. Returns the three-letter currency code of the base currency used for this request. Returns exchange rate data for the currencies you have requested. Returns the exchange collected on your start date. Returns the exchange collected on your end date. Returns the change (decimal number) of the given currency rate between your start and end date. Returns the percentage change of the given currency rate between your start and end date.\n\nEnsuring our customers achieve success is paramount to what we do at APILayer. For this reason, we will be rolling out our Business Continuity plan guaranteeing your end users will never see a drop in coverage. Every plan has a certain amount of API calls that you can make in the given month. However, we would never want to cut your traffic or impact user experience negatively for your website or application in case you get more traffic. What is an overage? An overage occurs when you go over a quota for your API plan. When you reach your API calls limit, we will charge you a small amount for each new API call so we can make sure there will be no disruption in the service we provide to you and your website or application can continue running smoothly. Prices for additional API calls will vary based on your plan. See table below for prices per call and example of an overage billing. Why does APILayer have overage fees? Overage fees allow developers to continue using an API once a quota limit is reached and give them time to upgrade their plan based on projected future use while ensuring API providers get paid for higher usage. How do I know if I will be charged for overages? When you are close to reaching your API calls limit for the month, you will receive an automatic notification (at 75%, 90% and 100% of your monthly quota). However, it is your responsibility to review and monitor for the plan’s usage limitations. You are required to keep track of your quota usage to prevent overages. You can do this by tracking the number of API calls you make and checking the dashboard for up-to-date usage statistics. How will I be charged for my API subscription? You will be charged for your monthly subscription plan, plus any overage fees applied. Your credit card will be billed after the billing period has ended. What happens if I don’t have any overage fees? In this case, there will be no change to your monthly invoice. Only billing cycles that incur overages will see any difference in monthly charges. The Business Continuity plan is an insurance plan to be used only if needed and guarantees your end users never see a drop in coverage from you. What if I consistently have more API calls than my plan allows? If your site consistently surpasses the set limits each month, you may face additional charges for the excess usage. Nevertheless, as your monthly usage reaches a certain threshold, it becomes more practical to consider upgrading to the next plan. By doing so, you ensure a smoother and more accommodating experience for your growing customer base. I would like to upgrade my plan. How can I do that? You can easily upgrade your plan by going to your Dashboard and selecting the new plan that would be more suitable for your business needs. Additionally, you may contact your Account Manager to discuss a custom plan if you expect a continuous increase in usage.\n\nUpgrade your APIlayer subscription with our exclusive Platinum Support, an exceptional offering designed to enhance your business’ API management journey. With Platinum Support, you gain access to a host of premium features that take your support experience to a whole new level. Option for quarterly briefing call with product Management Priority Email Support: Experience unrivaled responsiveness with our priority email support. Rest assured that your inquiries receive top-priority attention, ensuring swift resolutions to any issues. Unlimited Communication: Communication is key, and with Platinum Support, you enjoy unlimited access to our support team. No matter how complex your challenges are, our experts are here to assist you every step of the way. Priority Bug Review and Fixes: Bugs can be a headache, but not with Platinum Support. Benefit from accelerated bug review and fixes, minimizing disruptions and maximizing your API performance. Dedicated Account Team: We understand the value of personalized attention. That's why Platinum Support grants you a dedicated account team, ready to cater to your specific needs and provide tailored solutions. Quarterly Briefing Call with Product Team: Stay in the loop with the latest updates and insights from our Product team. Engage in a quarterly briefing call to discuss new features, enhancements, and upcoming developments. Priority Roadmap Input: Your input matters! As a Platinum Support subscriber, your feature requests receive top priority, shaping our product roadmap to align with your evolving requirements. Don't settle for the standard when you can experience the exceptional. Upgrade to Platinum Support today and supercharge your APIlayer experience!"
    },
    {
        "link": "https://rapidapi.com/blog/currency-exchange-api-with-php-python-ruby-javascript-examples",
        "document": "The Currency Exchange API allows developers to add real-time exchange rate information from 19 supported currencies into their software applications. Currency Exchange is a SOAP API that uses the Simple Object Access Protocol and XML to return values from input queries.\n\nSign up for a free RapidAPI account to use the API with code snippets, endpoint testing, and continual uptime monitoring facilities. The service is free to use through RapidAPI with an API key. Developers can utilize the Currency Exchange API to pull real-time values for exchange rates into their applications.\n\nThis tutorial will review the basic code snippets required for use with PHP, Python, Ruby, and JavaScript applications. RapidAPI supports 19 popular programming languages with code auto-generation facilities aimed at software developers.\n\nThe Currency Exchange API is a service created by NTTSG Global in Singapore as a means to demonstrate the functionality of the Kong Konnect platform and to provide an easy-to-use system for retrieving dynamic currency exchange rate information. The Currency Exchange API returns a single value in plain text over XML that can be used to input dynamic text into websites and mobile applications. Developers can receive exchange rate quotes in US dollars, Euros, British Sterling, Yen, and other currencies.\n\nIn order to use the Currency Exchange API, programmers will need to build the dynamic values for the trading quotes into application displays with support for international monetary symbols. The API can be used to build tables of price displays with real-time values or to provide data for custom charts and graphs. Since the Currency Exchange API only returns the latest or current price for each Forex value, developers who seek to build charts from the service will need to use their own storage for historical data with timestamps. The API does not provide trading charts for international currencies that can be embedded as widgets in financial services applications or blogs.\n\n2. What is the Currency Exchange API?\n\nThe Currency Exchange API returns live values with the latest market rates from Forex trading services. There is support for 19 different currencies. Developers submit the API query in their applications every time a page is loaded to return the current value. There are no default settings for the API variables. Developers must specify the target currency for exchange rates and the currency for the pricing reference on each API call.\n\nThe supported currencies using the “GET listquotes” API call with RapidAPI are:\n\nThe variables listed above can be used interchangeably in the Currency Exchange API to build whatever pair combination is required for your applications. Because the service only returns live market values, developers will need to build their own database storage for price values if they require historical data references for charts. In programming, the use of live prices for exchange rates across multiple base currencies is easy to script into websites, mobile applications, PWAs, etc. using the Currency API code snippets.\n\n3. How does the Currency Exchange API work?\n\nThe Currency Exchange API is built through the Kong Konnect platform. After signing up for a RapidAPI account, developers can use an auto-generated API key to access the currency exchange service for the requirements of their software applications. Programmers can build tables and charts with exchange rates listed for 19 major world currencies. The latest market value will be retrieved on each page load for websites and mobile applications that require dynamic content. Publishers can build with Node.js or Ajax for streaming Forex quotes.\n\nA common example would be where the developer requires the current market rates for the Euro exchange rate listed in U.S. dollars. There are easy options to use the Currency Exchange API to retrieve the latest market prices for any of the 19 currencies. Each of the supported currencies can also be used as a price base. In this manner, international developers can price exchange rates in their local currency or implement geolocation detection for dynamic user displays in a web browser. Developers can also use Cron to retrieve values at fixed times for historical chart references.\n\nThe Currency Exchange API is based on SOAP standards and returns prices in plain text over XML. The service operates with 100% uptime and an average latency of 460 ms on the RapidAPI platform. The main API command is the “GET exchange” call which is used to specify the currencies for the exchange rates. Developers will need to include both their RapidAPI key and the two variables for the currency pair in each API call.\n\n4. Who is the Currency Exchange API for exactly?\n\nThe Currency Exchange API is designed for programmers that need a quick and easy way to insert dynamic values for exchange rates into their web pages and mobile applications. The service is best suited for software requirements that need a current market rate for Forex values displayed on a static page that is refreshed with every reload. The Currency Exchange API does not support charts with historical data.\n\nDevelopers building with open source CMS scripts can use PHP snippets below to call the Currency Exchange API to create custom display pages or insert tables of currency exchange rates into their applications. Web publishers can use the PHP code to add support for the Currency Exchange API to WordPress, Drupal, or Joomla pages. Python developers working with Django, Flask, or other app frameworks can add the API script to their code easily with snippets. Developers will need to add the appropriate currency symbols for each value, as the API only returns the numeric prices in plain text.\n\nThe Currency Exchange API is intended for software developers who prefer to use a free service through RapidAPI. The RapidAPI interface guarantees a standard level of functionality over time that is ideal for small business requirements, startup companies, and independent publishers. Experienced developers may be able to use the API queries with their own database storage for historical value references. The Currency Exchange API provides real-time exchange rates that are validated at the time of each page load individually.\n\n5. Tutorial: How to Connect to the Currency Exchange API\n\nTo connect to the Currency Exchange API and import live exchange rate values to a website or mobile application, first sign in to RapidAPI and navigate to the resource page. Under the “Endpoints” tab, the API Playground contains a reference table with a drop-down menu listing all of the supported programming languages. The Currency Exchange API has code snippets available for 19 of the most popular programming languages for software development, including PHP, Python, Ruby, & JavaScript.\n\nFor PHP applications and websites, there are four different methods that the code can be input into a web page. Developers can use cUrl, HTTP, or Unirest request.\n\nTo embed the Currency Exchange API with cUrl in PHP for the currency pair USD-to-EUR:\n\nTo embed the Currency Exchange API with an HTTP request in PHP:\n\nUse an alternative HTTP method with the Currency Exchange API in PHP:\n\nAdd the Currency Exchange API to your PHP code with a Unirest request:\n\nThere is no difference in the endpoint construction no matter which code snippet is used. Make sure to replace the placeholder text with your custom API key from RapidAPI in order for the request to process. This is automated in the API Playground.\n\nFor Python applications and websites, there are three different methods that the Currency Exchange API code can be input into web pages and mobile applications. Developers can use the HTTP client, an import request, or a Unirest command to embed the functionality in any required display page.\n\nTo embed the Currency Exchange API with the HTTP Client in Python:\n\nTo add the Currency Exchange API with a Python import request:\n\nTo embed the Currency Exchange API with a Unirest command in Python:\n\nMake sure to replace the placeholder text with your custom API key from RapidAPI.\n\nFor Ruby applications and websites, there are two different methods that the Currency Exchange API code can be input into a web page or mobile application. Developers can use a net::HTTP request or a Unirest command to retrieve the latest market rates.\n\nTo embed the Currency Exchange API with a net::HTTP request in Ruby:\n\nTo embed the Currency Exchange Calculator API with a Unirest command in Ruby:\n\nMake sure to replace the placeholder text with your custom API key from RapidAPI.\n\nFor JavaScript applications and websites, there are four different methods that the code can be input into a web page or mobile application. Developers can use jQuery, fetch, an XML HTTP request, or Axios to build displays for exchange rates in the application.\n\nTo embed the Currency Exchange API with jQuery in JavaScript:\n\nTo insert the Currency Exchange API with fetch in JavaScript:\n\nTo add the Currency Exchange API with an XML HTTP request in JavaScript:\n\nTo use the Currency Exchange API with Axios in JavaScript:\n\nMake sure to replace the placeholder text with your custom API key from RapidAPI.\n\nThe reference endpoint for the Currency Exchange API is related to the “GET listquotes” command. By using the following PHP code or the functionally equivalent snippet from the API Playground in Python, Ruby, JavaScript, etc.:\n\nThe Currency Exchange API will return the list of supported currency codes:\n\nDevelopers can use the values for the various currencies to create over 340 different endpoints for exchange rate values. The RapidAPI service hosts the code snippets for 19 different programming languages, where the endpoint for each request is the same.\n\nTo implement the endpoint for specific currency pairs, use the variables above with the code from the tutorial section. For example, the endpoint for the U.S. dollar to Euro exchange rate using the “GET exchange” command is:\n\nThe endpoint for the Euro to U.S. dollar exchange rate using the “GET exchange” command is:\n\nIn each instance, the value returned by XML from the SOAP API is in plain text. Developers will need to add the appropriate monetary symbols ($/€) and any required CSS styling using div, span, or paragraph statements in their application code.\n\nUse the following monetary symbols in the application code to support currency values:\n\nThe Currency Exchange API does not return the monetary symbol with the “GET exchange” command, so developers will need to add it to the display of their code.\n\nThere are many API services that offer exchange rates and Forex trading information. Some of the most popular currency exchange API services in the marketplace are:\n• Exchange Rate API: Supports the conversion of 160 currencies for exchange rate trading applications. –\n• Currency Converter API: Real-time information on 150 currencies with 100 requests per minute. –\n• Currency Layer API: A REST API with trading data on 168 currencies and precious metal prices. –\n• Exchange Rates API: High volume API service that scales to enterprise web traffic levels with a focus on delivery speed. –\n• XE Currency Data API: Paid subscription plans with SDK for programmers and 7 day free trial. –\n\nProgramming teams with a high volume of user requests in support of applications will need to subscribe to a paid API service. Most free plans only support up to 100 user requests per minute. Make sure the service supports the required currency pairs and distinguish between service providers on the inclusion of historical information with charts. The latency of API services can slow down your application runtime speeds.\n\n8. What are the benefits of the Currency Exchange API?\n\nThe Currency Exchange API provides real-time financial information for exchange rates that can be used to build custom website displays and mobile applications. Some of the recognized user benefits of the Currency Exchange API service are:\n• None Developers can list current exchange rates in tables or embed individual values in web pages for dynamic user displays based on geolocation data.\n• None Travel websites can keep up-to-date information on different currencies on their app pages to support clients with custom destination content.\n• None Programmers can use the values returned from API calls to display chart information that is useful to Forex traders.\n• None API results can be stored in a database or spreadsheet for historical price references and technical analysis.\n\nThe main advantages of the Currency Exchange API are that exchange rate values update quickly with accurate results and that the service is free to use in any type of commercial or non-commercial application without restriction. The price of similar services can cost thousands of dollars per year depending on the scale of requests from user pages. The limitation of 100 API calls per minute is sufficient for most of the software application requirements from independent developers & small businesses.\n\nThe uptime of the Currency Exchange API service is 100% on RapidAPI, with low latency that will support apps coded in most of the popular web and mobile programming languages. It is easy to use the code snippets provided by RapidAPI to quickly insert real-time information on exchange rates into application display pages.\n\nFor more information on using the Currency Exchange API to build custom software applications, please reference the following articles:\n\nTo learn more about SOAP APIs, the resources listed below are recommended:\n• What is SOAP: Formats, Protocols, Message Structure, and How SOAP is Different from REST:\n\nAlthough it is not required to understand all of the details behind SOAP API design to use the Currency Exchange service, it is helpful for developer reference.\n\nThe Currency Exchange API is easy for programmers to implement in website and mobile application development with code snippets for PHP, Python, Ruby, JavaScript, and other languages available at RapidAPI. Use the code to embed exchange rate information for 19 currencies with the free service that supports up to 100 user requests per minute. The Currency Exchange API has low latency and a 100% uptime score. Look at the other API services if your project requires a higher volume of requests or support for historical information in chart displays.\n\nThe Currency Exchange API is recommended for financial applications, Forex trading, travel websites, and stock market blog publications. Developers can use geolocation information from the web browser to further customize results for local users. SOAP APIs are reliable for platform automation and are a popular solution to provide dynamic results with real-time trading information in Forex applications. Make sure to style the XML data with CSS and the proper currency symbols to match the design of your website or branded mobile app. Best practice is to build demo apps and MVPs using the Currency Exchange API, then upgrade to a paid subscription service for Forex trading data to support higher rates of web traffic in production if required by demand."
    },
    {
        "link": "https://tradermade.com/tutorials/how-to-use-the-currency-conversion-api-with-php-python-r-c-golang-javascript-examples-on-our-website",
        "document": "The currency conversion API is a crucial tool for developers. It allows you to add real-time Forex data retrieval features to your apps and websites, thereby enhancing the user experience. This tutorial provides a range of examples demonstrating how to use our currency rate API with different programming languages. Let's begin by exploring the service and the API.\n\nWhat is the Currency Conversion API Service?\n\nCurrency exchange API provides instant, up-to-date exchange rates with a simple request. Integrate them into your app or website for a seamless user experience. Developers can supercharge their apps with real-time currency conversion!\n\nOur convert currency API offers developers a hassle-free way to integrate live exchange rates into their projects. With a quick HTTP request, you can get the data you need as a response, empowering you to keep your financial solutions updated ahead of time.\n\nOur real time currency converter API service aims to assist developers in keeping users updated about the latest conversion rates. Our exchange rates APIsupports numerous currencies and thus helps developers enrich their apps and websites with excellent data retrieval features, including historical rates.\n\nThe API for currency exchange helps in many other ways. Developers can build:\n\nWe provide aggregated and curated forex data. It can be an excellent reference feed to make informed trading decisions.\n\nAlso Read:How Our Currency Conversion API Makes Your Lives Easy\n\nCurrency exchange APIs offer an elegant solution for enriching your applications with dynamic currency conversion features. These APIs function as powerful intermediaries, instantaneously retrieving real-time exchange rates upon request.\n\nOur API for currency conversion free provides real-time currency data, helping developers add data retrieval features. Integration is straightforward, requiring developers to specify the base and target currencies.\n\nThe API then acts as a conduit, transmitting a request and delivering a response containing the most up-to-date conversion rate data. The API response will contain the conversion rate data. You can parse this data and display the converted amount within your app's interface.\n\nThis seamless process empowers developers to integrate valuable functionality, enhancing user experience for the users navigating international transactions.\n\n1) You can set up websites and apps to retrieve the real-time currency conversion value. You can also get the value of a desired currency in the local currency.\n\n2) You need to deploy geological detection of dynamic user displays in web browsers. For historical chart references, you can get the foreign exchange rate for specific times.\n\nAlso, Read our exclusive tutorial to create a real-time currency converter in Python:\n\nBuild Your First Currency Converter in Python\n\nHow to Use the API Currency Exchange Through Various Popular Programming Languages?\n\nOur free currency exchange rate API (with a monthly limit of 1000 API requests) provides access to up-to-date, accurate, and reliable conversion rates for a wide range of currency pairs. This practical solution has a user-friendly setup process, requiring only a free API key for activation. Obtaining your key is simple—justsign up for a free API key.\n\nTo empower developers of all backgrounds, we offer a comprehensive array of code examples encompassing various popular programming languages. These examples are conveniently catalogued within ourData Documentation Page, readily accessible via the vertical menu positioned on the left-hand side, providing you with the support you need for seamless integration.\n\nThis streamlined approach ensures seamless integration of real-time currency conversion functionality into your application, enhancing the user experience for those engaged in international transactions.\n\nLet us glance at the example snippets, like currency converter API PHP and currency API Python. These examples, readily available for your reference, help programmers add data retrieval features to their websites and applications:\n\nThe PHP snippet helps developers looking to build\n\nAlso, publishers can use the PHP code. It helps add support to the currency exchange API for web page platforms. (like WordPress, Drupal, and Jumla)\n\nBelow is an example showing converting exchange rates data using PHP (CURL):\n\nThe Python snippets help developers working on Django, flask, and other frameworks. They can add API scripts to their code.\n\nBelow is an example to get live exchange rates data using Python:\n\nSee our tutorial on Fetch Forex API with Python and Pandas.\n\nBelow is an example to get live exchange rates data using R:\n\nSee our detailed tutorial: Learn how to get live and historical forex data using R language.\n\nBelow is an example to get live exchange rates data using Golang:\n\nFor further explanation, see our tutorials: Get live forex data and parse REST JSON API with GoLang.\n\nBelow is an example to get live exchange rates data using C#:\n\nFor further explanation, see our tutorials: Get live forex data and parse REST JSON API with C#.\n\nBelow is an example to get historical exchange rates data using JavaScript, Axios, and NodeJS:\n\nFor further explanation, see our tutorials: Get live forex data and parse REST JSON API with JavaScript, Axios, and NodeJS.\n\nBelow is an example to get historical exchange rates data using fetch:\n\nBelow is an example to get historical exchange rates data using jQuery:\n\nThis tutorial covers various examples in popular programming languages to help you access and use our market data. Our free currency conversion API provides free currency conversion for you to start with (up to 1000 requests a month). We hope the examples covered here will help developers proficient in many programming languages extract the desired results conveniently.\n\nIf you have any technical queries or suggestions, please contact our market data experts through live chat or email."
    },
    {
        "link": "https://stackoverflow.com/questions/56574860/how-to-fix-wp-remote-get-error-get-value-from-an-array",
        "document": "I want to get each on WordPress from the array while calling an external Api. I used . While doing the loop with the array, I got this error:\n\nTo debug the error, I tried echoing first one by providing an index. I did exact same thing in two ways but one works and the other one doesn't. The only difference is that, one way uses , while other one uses the response as an array without calling any api.\n\nWhere is the error coming from?\n\nFrom 2nd way, I get output Aktia Pankki1, which is what I expect also from the 1st way but I get this message:"
    },
    {
        "link": "https://wordpress.stackexchange.com/questions/17773/is-wp-error-and-handling-errors",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://deliciousbrains.com/wordpress-http-api-requests",
        "document": "Sometimes your WordPress site needs to talk to other services around the web. This almost exclusively happens using the HTTP protocol. A common example is when your WordPress installation contacts the wordpress.org servers to check for new versions of plugins, themes, and WordPress core itself. In this article, we take a closer look at the built-in HTTP functions that WordPress offers to make these requests, and show why it’s almost always a good idea to use those instead of PHP functions.\n\nHTTP requests are very common in WordPress plugins and themes. Any plugin that interacts with an external service is bound to make some HTTP requests here and there: adding subscribers to your Mailchimp list, sending emails via Amazon SES, or offloading images to Amazon S3.\n\nDoing It Wrong – Using PHP Functions\n\nPHP itself offers a couple of different ways to make HTTP requests. You could work directly with the Network functions for your HTTP requests using , and , but you would end up wasting time and reinventing a lot of wheels for no good reason.\n\nSlightly better would be to use one of the file reading functions that can handle PHP’s HTTP protocol wrapper. This includes the slightly cumbersome as well as the much easier and functions. A simple one-liner will actually get you quite far:\n\nBut before you stick this code into your WordPress plugin or child theme, please be aware that many hosting providers explicitly disable opening URLs this way. What works in your local development environment may not work in your production environment.\n\nBesides, just because it’s possible to get content from an Internet URL using the PHP functions doesn’t mean that’s the best approach in day-to-day development. Just adding the seemingly innocent requirement of specifying a header in the HTTP request makes the above example much more complicated (example from Stack Overflow):\n\nNot so simple any more. And then consider that this example doesn’t have any error handling in place. So unless you are 100% sure that the remote server will politely reply back (hint: you’re not), you’ll have to add more code to wrap that elusively simple before it’s usable in production code.\n\nSince making HTTP requests using raw PHP is a bit clumsy, it should be no surprise that there are dozens of helper libraries that make creating HTTP requests easier.\n\nIn the broader PHP world, the one outside of WordPress that relies on Composer for dependency management, Guzzle, and Httpful are among the most popular libraries for handling HTTP requests but there are literally dozens of others to choose from, each with their own strengths and weaknesses.\n\nIn the world of WordPress, we need to be a bit careful before using Composer libraries, especially if we’re going to ship this code to other WordPress users. There are two primary reasons for this.\n\nFirst and foremost there’s a real risk that you or your users end up in some version of the Composer Dependency Hell. In short, that is when another plugin on the same WordPress installation uses the same dependency that your plugin does, but that plugin uses a different version of that dependency.\n\nWordPress has a deterministic way of loading plugins. While it’s technically possible to hack the plugin order, it’s very much discouraged. Besides, whatever tricks you play to force your plugin to load first, other developers can play too. For these reasons, you will never know if your plugin is going to use the versions of the dependency that you shipped, or some other, perhaps incompatible, version.\n\nThere are ways to work around this using the php-scoper tool that wraps all Composer dependencies in your own PHP namespace. You can go down that route but the seemingly simple idea to use a Composer package to manage HTTP requests suddenly turned into a much bigger problem that is probably also altering your build process.\n\nOn our own product WP Offload Media, we use third-party libraries from the supported storage providers (Amazon AWS, Digital Ocean, etc.) that in turn use the Guzzle HTTP library. To avoid compatibility issues with other plugins using Guzzle, we are using php-scoper to wrap all of those dependencies in a separate namespace.\n\nThe other reason we should think twice before using a third-party library for HTTP requests is that it will short circuit the WordPress filtering process.\n\nOne of the fine qualities of WordPress is that so many things can be customized via actions and filters, and making HTTP requests is no exception. We’ll go into more detail in the next section, but giving site owners the opportunity to modify HTTP requests to suit their special needs is inherently good. You shouldn’t remove this feature unless you have a really good reason.\n\nSay Hello to wp_remote_get, wp_remote_post and Friends\n\nSince 2009, WordPress has shipped with its own built-in functions for dealing with HTTP requests, namely , and , one function for each of the HTTP verbs GET, POST and HEAD. These three global functions all work as wrappers around the WP_Http class that in turn uses the Requests library. We’ve actually written a little bit about the Requests library before in our post about how WordPress uses cURL to make HTTP requests.\n\nUsing can be as simple as:\n\nThere are plenty of reasons why you should prefer using the functions in the family. Here are the ones I think are most important.\n\nThey Are Always There\n\nThe functions have been around in WordPress almost since the beginning, so there’s absolutely no need to worry about them not being present.\n\nSeveral important functions in WordPress core, such as plugin installations and automatic updates, rely on these functions to be there and just work. Which they do. So there is no real reason to add third-party libraries for HTTP requests. You already have access to a good and reliable library.\n\nThey Are Very Capable\n\nYou can access pretty much all features of the HTTP protocol by passing in additional arguments via the second parameter of these functions.\n\nYou can add headers, change the user agent string, force a specific version of the HTTP protocol, etc. You can also specify your own location for SSL certificates, disable SSL certificate verification, modify request waiting time (time out), or even add HTTP verbs if you need to. We’ll actually look at adding wrappers for two HTTP verbs later in this article.\n\nHere’s an example where I modify the HTTP request a bit before sending it off to the remote server:\n\nThe complete list of valid arguments aren’t completely documented anywhere, but can be found in the source file for the HTTP class itself or in this helpful comment.\n\nIn short, , and are capable of handling most use cases for HTTP requests that I can think of. There are very few situations where you absolutely need to use a third-party HTTP library in WordPress.\n\nUsing the underlying Requests library, it’s even possible to use built-in functions to do multiple requests at the same time, but that’s a little bit out of scope for this blog post.\n\nThey Are Easy to Customize\n\nDuring the execution of an HTTP request, all functions will call different WordPress filters that allow you and others to modify the exact behavior or even block external URLs from ever being requested.\n\nThis means that not only can you control your own HTTP requests in great detail, you can also interfere with HTTP requests made by other plugins, or even WordPress core itself.\n\nImagine you are responsible for a couple of internal WordPress installations at a big company. To comply with internal IT security rules, you need to hide the internal site URL that is automatically added to the user agent string in HTTP requests. How would you accomplish this?\n\nWell, and all its friends will trigger the filter before the request is sent off, so we can change this using a simple WordPress filter:\n\nSome site owners may have the need to block HTTP traffic to external URLs altogether. All requests that are made using , or will respect the and the constants. We’ve written a bit about these in our documentation for WP Migrate.\n\nIf defined, these two constants will allow a site owner to stop all outgoing traffic, but optionally also allow a set of exceptions:\n\nA request to any other host will now return a ´WP_Error´:\n\nBy using the built-in HTTP functions, your users get all this low-level control of HTTP requests without you having to write a single line of extra code. How great is that!!?\n\nA neat feature of the Requests library that sets it apart from a few of those linked to above is that it is transport agnostic. More specifically in the case of HTTP requests, it’s not dependent on the cURL module being installed on the web server.\n\nThe Requests library prefers to use cURL, but in the unlikely event that cURL isn’t present, it can fall back to using instead.\n\nEither way, the Requests library is going to get the job done, giving you one less dependency to test, document, or worry about.\n\nWhat About wp_remote_put and wp_remote_delete?\n\nIf you’ve done a bit of work with remote APIs and know your way around the HTTP verbs you may have noticed that so far I haven’t mentioned or . Since we have built-in implementations for GET, POST and HEAD, clearly there should be an implementation for PUT and DELETE as well. Right?\n\nWell, no. The WordPress Core team hasn’t implemented all the standard HTTP verbs just yet. But there’s an ongoing discussion about adding them in the WordPress issue tracker, so it just might happen in a future release.\n\nIf you need those functions sooner, the modular nature of the class, combined with the wrapper function, makes it very easy to add these two in your own code:\n\nNote that wrapping these function declarations in ´function_exists()´ is important because there’s a very real possibility that another plugin on your site may already have implemented them. It’s also a good safeguard if they are actually added in a future version of WordPress.\n\nI hope this has been a good introduction to how and why you should use the built-in HTTP functions in WordPress, rather than using a third-party library or rolling your own.\n\nAs we’ve seen, WordPress comes with a great HTTP API baked in, which is well documented and maintained. There are multiple advantages to using it over any alternatives. These advantages extend not only to you as a developer, but also to WordPress site administrators, and the entire WordPress ecosystem.\n\nDo you have questions about the HTTP functions? Did I miss any important aspect or feature, or do you have any tips? Let me know in the comments below."
    },
    {
        "link": "https://wordpress.stackexchange.com/questions/223399/errors-on-a-single-host-using-wp-remote-get-unless-sslverify-is-set-to-false",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://tommcfarlin.com/remote-requests-wp_remote_get",
        "document": "If you’re read any of my previous posts on retrieving remote files, then you know that old habits die hard as I often use rather than .\n\nSo, as one does when blogging, I thought it would be helpful to share a simple example of how to use in your day-to-day work.\n\nThe post below is merely a snippet of how to use it. That is, it won’t show how to designed, say, a class around it or a UI that allows users to upload a file. But this should be enough to get things started.\n\nAnd I’ll include how to take the API documentation around it and understand how to leverage it when using a function like this.\n\nThough I don’t always use the WordPress API (which is usually because, again, old habits carry over or because I’m unaware of a function), I try.\n\nAnd I firmly believe that if you’re working in an application’s particular environment and said application provides an API for something, then you should use it.\n\nHow To Read The Docs\n\nIf you’re familiar with how to leverage documentation, then you can skip this section.\n\nWith that said, here’s what the documentation around says:\n\nYou can read more on both this page in the Codex and this page in the Developer Resources. But before actually using the function, it’s important to understand what it accepts and what it returns.\n\nAnd the function accepts two parameters:\n• the URL to which the request is being made,\n• the set of arguments required for the request (which is outside the scope of this post).\n\nAnd wp_remote_get returns mixed results based on the outcome of the request. As per the Developer Resources:\n\nAt this point, we know what the function does, what it accepts, and what it returns. So we have enough to go on regarding setting up a simple example.\n\nWith all of the above in place, here’s a simple of example of how to retrieve a file from a given URL. I’m assuming the URL is on your local server (because I don’t want to get into requesting information from other servers in this post) which is why the domain as the TLD of dot-local.\n\nThe comments should explain what’s up, but I’ll offer a few more thoughts after that.\n\nThe most important things note are as follows:\n• Check the headers to make sure they are set. If not, then there’s no need to proceed with grabbing the body of the file.\n• If there is an error, then we need to handle that gracefully.\n• If all else checks out, then we’re ready to write the file to disk. I’m using PHP’s file functions to do this. It’s a little outside the scope of the post but should be easy to understand if you study the links below.\n\nUltimately, using affords you a lot of functionality wrapped in an easy-to-use function."
    }
]