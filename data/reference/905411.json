[
    {
        "link": "https://create.roblox.com/docs/luau",
        "document": "Luau is the scripting language creators use in Roblox Studio. It is a fast, small, safe, gradually typed embeddable scripting language derived from Lua 5.1.\n\nThe Script Editor in Studio supports Luau with autocompletion, syntax highlighting, static linting, type checking, and script analysis. It also shows documentation and function signatures for members of the Roblox Engine API.\n• None represents non-existence or nothingness. It's different from any other value or data type. represents non-existence or nothingness. It's different from any other value or data type. represents non-existence or nothingness. It's different from any other value or data type.\n• None , or , have a value of either or . , or, have a value of eitheror , or, have a value of eitheror\n• None are sequences of characters, such as letters, numbers, and symbols. are sequences of characters, such as letters, numbers, and symbols. are sequences of characters, such as letters, numbers, and symbols.\n• None are . are are or of any value except\n\nLuau is dynamically typed by default. Variables, function parameters, and return values can be any data type. This helps you write code faster because you don't need to provide types for each piece of data. You can still declare explicit types for variables in Luau and enable strict type checking to make type issues obvious and easy to locate.\n\nYou can also implement the following data structures using primitive data types:\n• None are Last-In-First-Out collections of items that you can implement using tables. are Last-In-First-Out collections of items that you can implement using tables. are Last-In-First-Out collections of items that you can implement using tables.\n• None are First-In-First-Out collections of items that you can implement using tables. are First-In-First-Out collections of items that you can implement using tables. are First-In-First-Out collections of items that you can implement using tables.\n• None are tables with advanced configurations that can achieve functionalities such as storing pairs of keys and values and calculating arithmetic operations. are tables with advanced configurations that can achieve functionalities such as storing pairs of keys and values and calculating arithmetic operations. are tables with advanced configurations that can achieve functionalities such as storing pairs of keys and values and calculating arithmetic operations.\n\nIn Luau, variables and functions can have global and local scope within a script. Luau has logical, relational, and compound assignment operators. You can use control structures and functions to control when Luau executes code. Many operators and variable assignments perform type coercion to change values to the types that Luau expects."
    },
    {
        "link": "https://create.roblox.com/docs/scripting",
        "document": "Scripts are plain text files that let you add custom, dynamic behavior to your experiences. You can use scripts to trigger in-game events, respond to player input, save player data, create leaderboards, spawn enemies, control NPC behavior, and much, much more.\n\nThis section is for creators with some coding experience who want to know the specifics of scripting in Roblox. If you've never written code before and want an introduction to programming, see Coding fundamentals, which covers concepts like variables, functions, conditionals, loops, and arrays. For a more guided, step-by-step approach, see the Basic gameplay tutorial.\n\nRoblox scripts use the Luau programming language, which is derived from Lua 5.1.\n• None Compared to Lua 5.1, Luau adds performance enhancements and many useful features, including an optional typing system, string interpolation, and generalized iteration for tables.\n• None All valid Lua 5.1 code is valid Luau code, but the opposite is not true.\n\nMost books and online resources for Lua are still broadly applicable to Luau. For a detailed summary of differences, see Compatibility in the Luau documentation. For language syntax, see the Luau reference.\n\nLuau is gradually typed, so you don't need to specify a type when you create a variable. You can use type() to check object type:\n\nLuau has global and local scopes, but it's almost always better to declare variables and functions locally with the local keyword:\n\nLua uses nil to represent nonexistence or nothingness, which evaluates as false in conditional statements:\n\nAs you might have noticed, -- starts a one-line comment. --[[]] creates a block comment:\n\nTables are the generic term for arrays and dictionaries. Arrays are one-based rather than zero-based, so the first item is [1]. You declare arrays and dictionaries with a single set of curly braces:\n\nYou can iterate over tables using for loops with the ipairs() function for arrays and the pairs() function for dictionaries, but Luau also lets you omit these functions for cleaner syntax:\n• None In Roblox Studio, hover over ServerScriptService in the Explorer window and click +.\n• None Right-click the script and rename it to HelloScript.\n• None Double-click the script to open it in the Script Editor.\n• None Add the following code to the file:\n• None Ensure that the Output window is open.\n\nA big part of adapting to a new development environment is configuring it to meet your needs and understanding the tools at your disposal:\n• None The section of lets you adjust quality of life features like font, colors, indentation, autocomplete, brackets, and tooltips. You might also want to enable dark mode in the section.\n• None or and clicking on a function or variable takes you to its declaration in your codebase (or its online documentation). Using Holdingorand clicking on a function or variable takes you to its declaration in your codebase (or its online documentation). Using can help you navigate larger projects.\n• None menu to enable and . The window is the most basic tool for understanding the behavior of your scripts. Use themenu to enableand\n• None The window shows a summary of errors and warnings, but you might find its utility limited; the Script Editor already highlights these issues as you type.\n• None or . Use and . Logging capabilities are minimal, with no concept of log levels likeor. Useand\n\nFor more information about configuring Studio for scripting, see Script Editor. For information on using your favorite text editor and version control system, see External tools.\n• None In Roblox Studio, add a script to ReplicatedStorage in the Explorer window and rename it to OhNo.\n• None Add the following code to the file:\n• None Note how the output is no different than when you ran your first script.\n\nTo understand why the script didn't run, see Script Types and Locations."
    },
    {
        "link": "https://create.roblox.com/docs/tutorials/use-case-tutorials/scripting/basic-scripting/intro-to-scripting",
        "document": "In Introduction to Roblox Studio, you learned how to create and manipulate parts in Roblox Studio. In this tutorial, you'll learn how to apply a script to parts to make a platform appear and disappear. You can use this in a platforming experience to span a gap, challenging users to time their jumps carefully to get to the other side.\n\nFirst off, you need a Part to act as the platform. Making and moving parts should be familiar to you from Introduction to Roblox Studio. You don't need a complicated world aside from the platform — you just need a gap that your users can't easily jump across.\n• None Insert a Part and rename it to DisappearingPlatform.\n• None Resize it to large enough for a user to jump on.\n• None Move it to a proper location so that you can reach it and jump on it when testing your experience.\n• None Set the Anchored property to true in the Properties window.\n\nCode in Roblox is written in a language called Luau which you can put in scripts within various containers in the Explorer. If you put a script under a Part, Roblox will run the script's code when the part is loaded into the game.\n• None Hover over the DisappearingPlatform part in the Explorer window and click the + button to insert a new script into the platform. Rename your new script as Disappear.\n\nIt's a good idea to start off your script by making a variable for the platform. A variable is a name associated with a value. Once a variable is created, it can be used again and again. You can change the value as needed.\n\nIn Luau, a variable is created as follows: local variableName = variableValue.\n\nThe term local means that the variable is only going to be used in the block of the script where it's declared. The = sign is used to set the value of the variable. Names for variables are typically written in camel case. This is lowercase with every word following the first being capitalized, justLikeThis.\n\nCopy the following code to create a variable for the platform called platform, where the value is script.Parent.\n\nTime to make the platform disappear. It's always best to group code for achieving a specific action into a function. A function is a named block of code that helps you organize your code and use it in multiple places without writing it again. Create a function in the script and call it disappear.\n\nThe first new line declares the function — it indicates the start of the function and names it as disappear. The code for a function goes between the first line and end.\n\nThe parentheses are for including additional information as needed. You'll learn more about passing information to functions in a later course.\n\nWhen the platform disappears, it needs to be invisible and users need to fall through it — but you can't just destroy the platform since it needs to reappear later.\n\nParts have various properties that can be used here. Remember that you can see a part's properties if you select it and look at the Properties window.\n\nA part can be made invisible by changing the Transparency property. Transparency can be a value between 0 and 1, where 1 is fully transparent and therefore invisible.\n\nThe CanCollide property determines if other parts (and users) can pass right through the part. If you set it to false, users will fall through the platform.\n\nJust like script.Parent, properties are accessed using a dot. Values are assigned using an equals sign.\n• None In the disappear function, set the CanCollide property of the platform to false.\n• None On the line following, set the Transparency property to 1.\n\nOnce you've declared a function, you can run it by writing its name with parentheses next to it. For example, disappear() will run the disappear function. This is known as calling a function.\n• None Call the disappear function at the end of the script.\n• None Test the code by pressing the Play button. If your code works, the platform should have disappeared by the time the user spawns into the game.\n\nYou can easily make the platform reappear by writing a function that does the exact opposite of the disappear function.\n• None Delete the disappear() line from the script.\n• None In the function body, set the CanCollide property to true and the Transparency property to 0.\n\nThe platform should be constantly disappearing and reappearing, with a few seconds between each change. It's impossible to write an infinite number of function calls — fortunately, with a while loop, you don't have to.\n\nA while loop runs the code inside it for as long as the statement after while remains true. This particular loop needs to run forever, so the statement should just be true. Create a while true loop at the end of your script.\n\nIn the while loop, you need to write code to wait a few seconds between the platform disappearing and reappearing.\n\nThe built-in function task.wait() can be used for this. In the parentheses the number of seconds to wait is needed: for example task.wait(3).\n\nThree seconds is a sensible starting point for the length of time between each platform state.\n• None In the while loop, call the function with in the parentheses.\n• None Call the function again with in the parentheses.\n\nThe code for the platform is now complete! Test your code now and you should find that the platform disappears after three seconds and reappears three seconds later in a loop.\n\nYou could duplicate this platform to cover a wider gap, but you need to change the wait times in each script. Otherwise, the platforms will all disappear at the same time and users will never be able to cross."
    },
    {
        "link": "https://devforum.roblox.com/t/lua-scripting-starter-guide/394618",
        "document": "Picking up programming and learning it for the first time works just like any other hobby–art, music, sports, photography, etc.–although, it may be difficult to know where to start as a beginner, especially if you’ve never had experience with it up until now. When I was younger, it was very difficult for me to get into programming as tutorials for a younger, completely unexperienced audience was rare. Although there was plenty of content available, I still had a hard time understanding the material or just got lost in the sea of information that was given to me. There are still plenty of places on either Youtube or other parts of the internet where beginners can learn, but I’ve specifically compiled this list so that you have a neat, simple page you can refer to if you feel lost, or don’t know where to go after searching for tutorials. Becoming an experienced programmer from scratch will not be easy, it will take a lot of effort and more importantly time to become an expert. I say this because many developers I’ve personally known, whether rookies or professionals, tend to bail halfway through their project or goal. Do not lose hope when things don’t come as quickly as you expected, patience is crucial. What sets poor and excellent students isn’t necessarily intelligence, but their willingness to put in work and always seeking new ways to become better at what they do. Think of this article as a legend for Lua, similar to the page in a large book that highlight specific terms or character in the book that the reader might not recognize. When you finish this guide, your ability to code things will be limited, but you should have a much easier time understanding tutorials on more advanced topics. Ultimately, I hope this article can help you get started, or at least guide you through your journey through programming.\n\nP.S. I’ve tried to make this tutorial as kid-friendly as possible, if it is still difficult to read or understand, please DM me on any platform and I’ll try my best fix it. Specific examples are appreciated.\n\nChances are, if you’ve ever played a game, you’ve wondered how it was made. How does a sword go from unequipped to swinging in just a matter of seconds? Why? How is this app able to stream the movies I select? How is the website we’re currently on even able to operate?\n\nComputer programming is an essential part of modern life, as it determines and allows for many technologies we use on a daily basis to operate. However, all code is not written in the same way, rather, there are distinct languages, or ways of writing code. In fact, you might already be familiar with the names of various programming languages, including but not limited to JavaScript or Python.\n\nIn this tutorial, we’ll be covering Lua, the official language of Roblox which can be used to create a variety of different games for users to play.\n\nIn this tutorial, we’ll be using a specific format to write, input, and receive the result of our script. To use a format identical to mine, click on View in the upper left side of your screen, then make sure you have selected and have the following settings:\n\nYour screen should look something similar to this\n\nScripts can be inserted almost everywhere, for the sake of keeping this tutorial short, head over to Model on the top panel and browse to the far left and click on Script, which will generate a script that we can use for our tutorial.\n\nPrint is a built-in function which prints out whatever statement you decide to give it. This can be either number or strings, which we’ll cover in this section. You’ll notice that once you launch a script, there is already a print function automatically typed out for you. This code always comes with your scripts, so we’ll erase it to continue with the next step.\n\nType out print in all lowercase letters. If print is typed incorrectly or typed with any capitals, the program will not recognize the command and will not run it. Add a pair of parenthesis after, studio should automatically add the second one. Make sure there is no space in between print and the parenthesis otherwise Lua will not be able to read it.\n\nNext, we need to add a string in-between the parenthesis so that we don’t just print empty space. A string is any character or words inside of a pair of quotes, such as “Hello World!” For our tutorial, we’ll be adding the string “YellowNoobs!” for the program to print.\n\nYou may replace \"YellowNoobs\" with any other text you wish as long as it is in-between the parenthesis (\"\"), the end result should look something like this,\n\nIf you want to include quotation marks in your quote, you can also use a pair of single quotes (’’) and put the double parenthesis, or vice-versa for single quotes to be printed.\n\nPrint also works for numbers and equations, which it’ll automatically simplify in the output. But before we write out our problem, we need to find the symbols needed to get the right answer.\n\nArithmetic operators are basically all the tools we use in programming to indicate a relationship between numbers. This sounds complicated, but it’s just what we call the symbols we use to add, subtract, multiply, and divide numbers.\n\nHere are the Arithmetic Operators used in Lua:\n\nNow, we’ll write our equation in-between the parenthesis, and paste it into the command bar once we’re ready to get the output. Feel free to mess around with the operators to get the hang of it.\n\nIf we put our code into the command bar we’ll get 81 instead. This is the answer to the equation, and Lua does this because it’s a simplified version, or answer to the problem we originally printed. An important thing to keep in mind is that Lua completes the math using the Order of Operations, meaning it starts with exponents, then division and multiplication, and finally addition and subtraction.\n\nTake this piece of code for example,\n\nWhile you may be tempted to say the answer is 12, since you add 1 + 5, getting 6 and multiplying it by 2, this is wrong. Instead, you multiply 5 and 2 first, then add 1, getting 11. This is a rule of both math and programming, so practice the concept until you can avoid printing the wrong number.\n\nIn order to combine two or more separate values together, you can use concatenation in the print function. We’ll still use the same format, but will add two periods or dots after each string. Do not place this inside of the string, otherwise Lua will interpret it as part of the string and produce an error.\n\nIf we paste this into the command bar, the output will show us a full statement as if it was a single string, meaning the concatenation was successful.\n\nNow that you’ve learned how to make a script, you’ll learn what variables are and how to make your own. Variables are considered vital because they save a lot of time and save you time and make your scripts simpler to review. They can be booleans, numbers, strings, or practically anything you want to assign a name to.\n\nIf you’re struggling to understand the concept of a variable, you can compare it to a nickname you might give someone who’s name may be too tedious to pronounce. Although it is not their birthname, calling them by their nickname will still get their attention as they’ve been given and called by it before.\n\nBelow, I’ve given an example of a variable. The term “variable” will be used interchangeably with the string “YellowNoobs!” whenever we use it in the script. If we put the variable inside of the print command, it will print the text assigned to it. Since the variable is identical to the string we assigned it, we do not need any quotes around the variable name. If you put quotes around a variable name, Lua will interpret it as a string, and print the actual name rather than the value.\n\nIf we copy and paste the code into the input, the output will print our statement.\n\nIt is necessary that you define your variables before using them in your code. Since Lua reads code from top to bottom, it will not know what the variable stands for when it executes the print function. If we paste the code into our command bar, we’ll get the output nil, which means nothing or no data.\n\nWhenever we define the variable, its scope covers all of the code below in the script. Variable scope is just another word for when the variable can be accessed in your script.\n\nThere are two types of variables which you’ll hear about, local and global. The variables we’ve made in this tutorial so far have been global variables, which means they can be accessed in all code below inside the script. Local variables will be covered later in this tutorial, but in simplest terms, they have a much more limited scope.\n\nVariables do not only have to be named “variable” when assigned to a given piece of code. In fact, your variables have to be different names in order for the program to recognize which variable you want it to use in the script.\n\nWhile you can almost freely name your variables, there are a few restrictions that exist inside Lua.\n\nYou can use:\n\nYou can not use:\n• Capital letters as the first letter of the variable (Not required, but common practice)\n• Numbers as the first letter of the variable\n\nComments are a simple green text that organize and give context to your lines of code, which can be a useful tool for yourself or others if you plan on sharing it.\n\nCreating comments is extremely easy, add - - and then your text after you are finished. It should appear something like this.\n\nIf you want your comment to cover more than one line, insert brackets, with your text inside.\n\nAny text attached to the comment will not be executed by the program, and will only be seen by the reader. This green text is helpful in case you want to find a specific piece of code in your script. Comments are also crucial if you plan on sharing your scripts and want the reader to understand what certain commands do. Besides context, you can use comments to credit yourself for your script, or write out directions that the user who uses your script might want to see.\n\nIf you want to change the settings (such as the transparency, or invisibility) of an object in the workspace, you have to write down the specifics before Lua knows what you want it to do.\n\nSo, if we want to change the transparency of the baseplate, we first need to define that the baseplate is inside game.Workspace, with game being the game we’re working on and workspace being the place where baseplate and the rest of our parts are stored. Then, we write the object we’ll be changing (baseplate) and the setting that we want to change (its transparency), and then assign a value to it. If we want it to be fully invisible, we’ll set the value to one, lowering this amount will make it so that it’s semi-transparent.\n\nIn the end, this should make the baseplate completely invisible if we run the code or play the game. Keep in mind that we can change the properties of object in Studio as long as you define it correctly in the code.\n\nWhen you’re writing a sequence of code that needs to be repeated, it may be a little tedious and also messy to write it out several times. Functions are a tool in Lua that we can use to put lines of different code in, which can be repeated and manipulated a lot easier by us. The functions in this segment are not to be confused with the built-in functions of Lua, such as print.\n\nTo define a function, we need to write function and then assign it a name. Then, add a pair of parenthesis after your function name without any spacing in-between, and press enter. I’ll be naming my function printStuff, but you can name yours differently.\n\nNow, we need to write our code for our function to actually execute it. You’ll notice that when you press enter after writing your function, you’ll automatically get end. This statement is here so that you can end, or close off your function, otherwise Lua would get an error.\n\nI want to print several strings, so I’ll insert the several sequences of code inside my function.\n\nWe now have our function, however, nothing will be happen since we haven’t written the command to execute it. We need to type the function name on the next line, and Lua will print our strings.\n\nNow, Lua will execute our code. If we paste all of the content into the command bar, we’ll see that our function is successful. It’s important to note that just like variables, functions need to defined before we actually execute them in our code, otherwise we’ll just get nil.\n\nWhen we covered local variables previously in our tutorial, I mentioned that the scope of it was much more limited. Whereas global variables can be accessed anywhere in our script after being defined, local variables are limited to a block.\n\nSo what is a code block? An example is basically the indented sequence of code that we see in our function. I’ll attach comments to the parts that are a part of the block of code for a visual demonstration.\n\nYou can also tell if something is a block by the small arrow that appears to the left. If you look closely, the arrow facing down next to function is indicating that the block is being shown, and when it is facing up, it means it is closed.\n\nIf we try to print the local variable outside the block, we’ll get nil since the variable can’t be accessed.\n\nA handy feature of functions is the ability to manipulate the variables with ease. You might’ve already noticed the pair of parenthesis when we define the function, and the two other parenthesis when we execute it. These are the spaces where we put our arguments and parameters.\n\nEvery time we execute a function, we might want to change certain parts of the code each time. Parameters are used to tell Lua which variables (and thus any information) inside the function you want to change. They are established when we first define our function, and are placed in-between the first pair of parenthesis on the same line. Make sure to not define the variable you’ll be changing inside of your function, otherwise the parameter will not work.\n\nNow that we’ve defined the parameter, we need to write an argument for the function to be properly executed. An argument is the value we assign the code when executing it. It comes inside our next pair of parenthesis, and can be changed every time we execute the function separately. We’ll print a string and a number, and the program should treat the argument as the variable in the function.\n\nNow if we put it in the output, the two values should be successfully printed.\n\nArguments and parameters aren’t just limited to a single pair, in fact there can be as many as you want. In order to add another pair, separate each parameter and argument by a comma with the next one you want in your function.\n\nNow if we paste it into our command bar, the output should print both statements in the order we gave them. It is important that you put the arguments and parameters in the same order or you will assign the wrong value to the variable. Also, you always have to define your parameters when you execute your function, otherwise Lua will not know what to assign to the variables.\n\nYou might’ve already noticed that below the option to create a script, there is something called a local script. This tutorial won’t go too in-depth about them, but offer a broad summary about its purpose.\n\nLocal scripts are scripts that only affect the user’s client rather than the server. A user’s client is basically what they see, rather than the whole server. So whereas you might be seeing something, your friend playing the same game as you might see something completely different. In comparison, scripts that affect the server are seen by everyone, and not just the individual’s client.\n\nThe concept is a bit difficult to describe by text, and I still can’t do it justice by talking about it in depth, so I urge you to look at this video by TheDevKing to get a better idea of what local scripts are capable of.\n\nYou might’ve heard this word in math class and it is related. Booleans in scripting are the conditions true or false.\n\nWhen comparing values you’ll get a Boolean as well, although you can simply write true or false too.\n\nRelational operators are the operators used to compare values with one another.\n• Equal to, not to be confused with equal which simply assigns something rather than comparing two values: ==\n• Not equal to, which is true if the values are not equal: ~=\n• Greater than or equal to: >=\n• Less than or equal to: <=\n\nNow, let’s take a look at some numbers and see if they represent a true or false boolean\n\nThe first one is false, since the value can only be greater than, and not equal to the other. The next one is true as the values are equal to one another. The last is clearly false, since 8 is not less than the number 2.\n\nIf statements make it so that specific commands only happen if the condition is met, it will execute the code.\n\nFor example, if 5 > 1 the Output will print “Congratulations” since 5 > 1 is true. If the script said 5 < 1 then the script will not print “Congratulations” in Output.\n\nThis is equivalent to saying true instead and will still print our string.\n\nSometimes, our code needs to be repeated in order to produce an outcome we’re looking for. Loops are statements that allow us to repeat code multiple times. They come in several different forms, which we’ll cover in this section of the tutorial.\n\nWhile loops repeat sequences of code while the statement is true. However, when the condition is false, it will not execute the code block. For example, while a variable is less than a certain value, it will continue to print out a string we decide to give it. This is just one of countless things you can do with a while loop, so feel free to get creative if you’re feeling ambitious.\n\nFor our while loop, we’ll assign a number to our variable, x. Afterwards, we go on the next line and write while. This helps Lua understand that it is a while loop, so that when the condition is true, it’ll execute the code block. The do you see after our boolean is simply telling Lua to execute the block of code that is part of the loop when the condition is true.\n\nIn this code, I defined my variable as 10 and made it so that the while loop would continue to run until it was no longer less than a 100. Each time it runs the code, I made it so that it would add 10 to the variable, meaning that once it ran several times, it would no longer execute the code since the condition is false.\n\nNotice the string being printed after the loop. This is not executed until the loop is finished, so not attaching it to the loop can be used to tell us when the loop is finished.\n\nFor loops are able to loop as many times as the user wants. First, we define a variable for the loop, and assign it to a starting and ending value. The loop will continue to repeat until the starting value reaches the end value. While the amount the starting value increases is by 1, you can change it by adding a comma after the end value. Below, is an example of a for loop.\n\nOur loop will now print 1, 6, 11, 16 all the way until 21 where it will stop since it can not go past 25.\n\nHere is the format for the for loop.\n\nA repeat loop repeats the statements assigned to it until a following condition is true.\n\nUnlike a while loop, it runs the statements first before checking if the condition is true.\n\nWriting break at the end of a loop will end the loop if a condition is true. In the example below, break is used to break out of an infinite loop that otherwise keeps running because it is always true.\n\nThis could also work if instead of true we wrote while x < 200 do. The result would be that the loop would end early, ending when x reaches 100 rather than 200.\n\nYou may also hear the term nested loop, which is used to describe a loop with another loop inside of it.\n\nTables are used for storing large sets of data that you might use while creating your script. With tables, you can access and manipulate the data easy, which can come in handy later on. In this section, you’ll be learning about just a single type of tables, arrays.\n\nArrays are simply a list of values compiled in a table. This can include strings, numbers, booleans, functions–pretty much anything that can be used outside the script. To make an array, start by assigning a name of your own to the table.\n\nAfter this first step, you need to assign the data to the table. Assign the table to the data by adding an “=” in between, and write a pair of curly brackets (the second bracket will be automatically typed for you).\n\nNext, you can place all of your values inside of the array. For this tutorial, we’ll place a few strings and numbers together, but you can add more variety to your table if you’re following along. Make sure to separate each value by adding commas in-between them.\n\nIf we want to print specific parts of our array, we can use the index to get what we want. Each value in our array has an index, or number assigned to it. The first value is 1, second value is 2, third value is 3, etc. To print a specific part of our array, we put our table name in the print function, then follow it up with the index of the value, in-between brackets ([]).\n\nIn the end, this should print out our first string, “Hello World” in the output.\n\nWhere Else Can I Learn About Scripting?\n\nThere are many other places to learn, but the sources listed above have helped me with learning or adapting to Lua.\n\nWhat is the Difference Between Input and Output?\n\nInput is the code given to the engine, while output is the received/finished command. For example, print(“YellowNoobs!”) is a input while YellowNoobs is the output.\n\nStopping exploiters isn’t a beginner issue, it is a little more advanced than what we’ve discussed so far. Throughout your scripting career, you’ll realize that the main reason for exploits is due to poor and weak scripts that hackers are able to bypass.\n\nOne feature that Roblox automatically now applies to all games is FilteringEnabled, which prevents hackers from messing with the server itself. To learn more about how it works, you can watch the following video by AlvinBlox,\n\nWhy does Studio Automatically Indent for me?\n\nTechnically, indenting is not necessary, but it is extremely helpful and keeps your code organized. For example, through indents, you can see where your code blocks are. Not only that, but it looks much cleaner. Writing without proper indentation would give both you and the programmers reviewing your code a headache to read.\n\nHow do I become better?\n\nPractice, practice makes perfect, no exceptions. Learning to program unique things by yourself is always something you should strive to achieve as a developer.\n\nThat’s it, the basic tutorial is now finally finished! Hopefully, now you’ll have a far easier time being able to understand new concepts and can use this as a reference whenever you feel stuck.\n\nIf you have any other questions or feedback, please reply in the comments below, good luck!"
    },
    {
        "link": "https://luau.org",
        "document": "In addition to a completely custom front end that implements parsing, linting and type checking, Luau runtime features new bytecode, interpreter and compiler that are heavily tuned for performance. Luau interpreter can be competitive with LuaJIT interpreter depending on the program. An optional component for manual Just-In-Time compilation is also available for x64 and arm64 platforms, which can considerably speed up certain programs. We continue to optimize the runtime and rewrite portions of it to be even more efficient. While our overall goal is to minimize the amount of time programmers spend tuning performance, some details about the performance characteristics are provided for inquisitive minds."
    },
    {
        "link": "https://create.roblox.com/docs/sound/objects",
        "document": "Audio playback occurs through Sound objects which emit audio within an experience. Roblox assigns each audio asset a unique ID that you can assign to Sound objects to play a specific sound effect or music track. You can either set this audio to play automatically at runtime, or trigger it to play from scripts.\n\nTo modify playback of multiple Sound objects, you can assign them to a sound group and control the entire group's volume, as well as apply dynamic effects.\n\nThere are three locations you can create a Sound object, and each location determines how audio emits and volume changes in relation to the user's position within the experience.\n\nPositional audio is audio that users can only hear near a specific position within the experience. There are two types of positional audio you can utilize: volumetric and point source.\n\nVolumetric audio is the most realistic audio option, as it dynamically changes depending on the user's position to the audio source. For example, if the user is within a BasePart with a child Sound object, audio plays all around the user, similar to music in headphones playing at the same volume in each speaker. When the user exits the part, audio gradually decreases in volume and becomes more directional per speaker, moving around the user's head when their listener rotates. For information on the properties that control how loud your audio is at different distances from the part, see RollOffMinDistance and RollOffMaxDistance.\n\nThe size of the BasePart also affects the audio's volume, as larger BaseParts produce a wider area in which users can hear the audio and when a user navigates away from a large BasePart, volume decreases slower. The following example displays a BasePart that is the size of a city with a Sound object playing ambient audio. Users A and B experience the audio differently: user B is closer to the large BasePart, and they mostly hear the audio around the same loudness in both speakers. Conversely, user A is further away from the city, so the audio they hear is quieter and more directional than user B, playing at differing loudness in each of their speakers.\n\nVolumetric audio is useful for any audio that needs to be immersive around a user and change dynamically depending on the user's position, such as a concert stage or ambience zones like rainfall. When you experiment with placing a Sound object on BaseParts of different sizes and positions from users, you can hear how immersive volumetric audio can be.\n• None In the Properties window, navigate to the VolumetricAudio property, then set it to Enabled.\n• None In the Explorer window, hover over a BasePart, then click the ⊕ button. A contextual menu displays.\n• None In the Properties window, navigate to the SoundId property and input a valid audio asset ID.\n• None (Optional) If you want the audio to start playing when the experience begins, enable the Playing property.\n\nContrary to volumetric audio, point source audio only emits from a single point source. This type of audio is useful for explosions, impact noises, electronic devices, and dialogue.\n• None In the window, hover over an attachment, truss, wedge, or corner wedge, then click the ⊕ button. A contextual menu displays.\n• None window, navigate to the property and input a valid In thewindow, navigate to theproperty and input a valid\n• None If you want the audio to start playing when the experience begins, enable the property.\n\nBackground audio plays at the same volume no matter where the user travels within your experience. This type of audio is useful for music that you want to play for users, especially when you want to create a soundtrack of multiple audio files.\n\nIt's best to keep all Sound objects for background audio in a single location of the Workspace for organization purposes as you continue to add and edit audio within your experience. The following example stores the new Sound object under the SoundService container, as this service determines how Sound objects play in experiences.\n• None In the window, hover over , then click the ⊕ button. A contextual menu displays.\n• None window, navigate to the property and input a valid In thewindow, navigate to theproperty and input a valid\n• None If you want the audio to start playing when the experience begins, enable the property.\n• None If this object is the only track you want to play in the place, enable its property. If thisobject is the only track you want to play in the place, enable itsproperty.\n\nSound object properties work together to influence how users experience your audio, such as:\n• None How loud they hear specific audio individually and in relation to one another ( ).\n• None How they perceive volume when they move away from the audio source ( , and\n• None What part of the audio they can listen to ( ).\n• None How fast and at what pitch they hear it ( ).\n• None If the audio automatically replays upon completion ( ).\n\nThe Volume property allows you to set the volume of your audio anywhere from 0 (silence) to 10 (booming). If you want to change the volume of multiple Sound objects at once, parent them under a sound group.\n\nRollOffMinDistance and RollOffMaxDistance determine the range of how a user perceives volume from positional audio. For volumetric audio, RollOffMinDistance is the minimum distance in studs that audio begins to decrease in volume when the client's listener moves away from the parent BasePart, and RollOffMaxDistance property is the maximum distance in studs that a client's listener can hear audio from the surface of the object.\n\nFor point source audio, RollOffMinDistance and RollOffMaxDistance work similarly to volumetric audio, but the roll off distance these properties control doesn't surround the object, it only influences the distance outward from the point source.\n\nThe RollOffMode property allows you to decide how audio fades as the distance between the user's listener and the Sound object's parent increases. You can set this property to one of four values of the Enum.RollOffMode enum.\n\nThe PlaybackSpeed property allows you to determine the speed your audio plays. For example, if you set the PlaybackSpeed to a value of 2, your audio plays twice as fast and one octave higher in pitch. Similarly, if you set it to a value of 0.5, your audio plays twice as slow and one octave lower in pitch.\n\nThe TimePosition property displays, in seconds, what position within the audio sample a user is currently hearing. This property is useful for either only playing a section of the audio sample, or triggering an event to occur once audio reaches a specific position. For example, the following code sample causes a particle emitter to emit a white ring particle above a part within a limited time range of an audio track.\n\nThe Looped property allows you to repeat audio after it has finished playing. When set to true, the Sound object's audio plays again. This is useful to apply to background audio to ensure your experience never has abrupt silence.\n\nAside from auto-playing audio through the Sound object's Playing property, you can play audio contextually from a LocalScript by calling Play() on the corresponding Sound object. For example:\n\nAlternatively, if the place will feature multiple tracks, you can play a specific track from a LocalScript:\n\nYou can play interface audio for GuiObjects such as buttons by hooking up a Sound object to the Activated event listener. This lets you provide auditory feedback to users, such as when they hover over or press it.\n\nTo play a Sound object's audio when a user activates a TextButton or ImageButton:\n• None or , then click the ⊕ button. A contextual menu displays. In the window, hover over theor, then click the ⊕ button. A contextual menu displays.\n• None or a with set to . From the menu, insert either aor awithset to\n• None with the name of a object located inside the container. Paste the following code into the script, then replacewith the name of aobject located inside thecontainer."
    },
    {
        "link": "https://devforum.roblox.com/t/new-audio-api-beta-elevate-sound-and-voice-in-your-experiences/2848873/78",
        "document": "So let’s say, hypothetically, what if every bird in our games were actually government spy drones?\n\nThough jokes aside, i really appreciate we are finally getting these sorts of audio features (even though i would have to say those should have been released a bit more closely to the release of voice chat).\n\n However i do have one nitpick that i have with many other audio systems outside of roblox too… That being the fact that pitch shifting just sucks! I’m not sure about the entire details of why it does, but most software seem to have some really poor pitch shifting that either takes ages to compile (for still poor quality) or just straight up butchers the entire audio. I have seen game’s and even some mobile apps capable of proper real time pitch shifting without any sort of audio degradation and artifacting. Would it be possible to have some proper pitch shifting (that wont nuke audio quality) on roblox too?\n\nAlso, i’ve noticed there are no volume properties for any of the new instances?? Why is this such basic and crucial feature missing? (I think i found it?)"
    },
    {
        "link": "https://devforum.roblox.com/t/psa-best-practices-for-game-metadata/764558/25",
        "document": "The article mentions that your game may be “demoted” if it contains lots of spammed words. How do you determine if a description’s words are irrelevant?\n\nI know many games that use this method to be placed high in the game search. Will old games which used this practice no longer show up in game searches?\n\nAre you turning this practice on it’s head, by prioritizing game descriptions with few repeated words?\n\nRather than being a descriptivist, are you instead enforcing this change using the algorithm to become prescriptivist?\n\nYou say it’s only a recommendation of best practices, yet you clearly tell us the game will be punished through the metadata rather than community choice.\n\nIf it’s really only a recommendation, then is the demotion or lower-ranking of a game purely determined by whether a not a community approves, and the algorithm depends on that, or does it skip straight to the game search?\n\nAnyways, thank you!"
    },
    {
        "link": "https://devforum.roblox.com/t/sound-objects-should-be-inversetapered-by-default/2443115",
        "document": "Today, new Sound objects come with their RollOffMode set to Inverse. The problem is that Inverse never reaches a volume of zero once you reach the edge of that sound objects RollOffMaxDistance. This causes an audible “pop in” and “pop out” as you move in and out of reach of any given sound.\n\nAs seen here, InverseTapered would be the most desirable default setting and something I find myself changing every time I add a new sound object, if I can remember. To this day I still find sounds in Jailbreak that we missed and are still set to Inverse. InverseTapered allows sounds to fade out to silence and fade in to being audible. Additionally it has the closest profile to Inverse.\n\nAs a RobloxDev, this change would bring great peace of mind to my projects while also making future experiences on Roblox sound better."
    },
    {
        "link": "https://roblox.fandom.com/wiki/Audio",
        "document": "Audio is an asset type as well as a category on the Creator Marketplace. Audio assets are played through Sound or AudioPlayer objects. Users can upload audio files through the Create page with a limit on how many they can upload per 30 days.\n\nUnlike other assets on the marketplace, audio assets are more restricted in how they are used across experiences. Each audio asset has a sharing setting which, if set to private, will disallow the asset from being accessed on other experiences except for the asset's listed experiences. Each asset also has a distribution setting which allows the asset to be displayed on the marketplace if turned on. Roblox currently does not allow users to change any of these settings. However, if their asset is private, they can select and grant experiences access to their asset, which must either be owned by the asset's creator or be accessible to the creator with granted permissions.\n\nAny user can upload .mp3, .ogg, .flac, or .wav audio files with a limit to how much files they can upload per month. Non-ID verified creators can upload up to 10 audios per month. ID-verified creators can upload 100. Some developers were given a limit of 2,000 uploads per month. Audio files must have a length of at most 7 minutes.\n\nRoblox does not allow audio files containing copyrighted content. Roblox also does not allow certain types of audio:[1]\n• Excessively loud audio (\"Do not upload excessively loud audio to Roblox.\")\n• Distorted sound, usually voice (\"Uploading distorted audio files is not permitted. Please make sure your files can be easily and clearly heard.\")\n• Using one's own voice (\"We're sorry, but audio featuring your voice or other personal information is not allowed on Roblox.\")\n• Adult content (\"Adult content is not tolerated on Roblox.\")\n• Anything that is against the rules (\"This audio file contains content that is inappropriate for Roblox.\")\n\nAn audio asset can be used in a Sound object using the asset's ID. Public assets can be played. For a private asset, however, an experience must be given access by the asset's creator in order to play it.\n\nRoblox doesn't provide a built-in feature to download any audio from the Creator Marketplace. However, third-party tools (such as the BTRoblox browser extension) allow downloading of audio.\n\nThe game client was previously able to play Impulse Tracker module (IT) files. There are two IT files known to be on Roblox, all of which are uploaded by Shedletsky as audio assets: WindOfFjords in 2007 and TheGreatStrategy in 2008.\n\nBefore 2009, it was possible to upload audio files unmoderated and without limit.\n\nFrom 2009 to 2013, audio files were only able to be uploaded to the catalog by administrators; most of which were provided by Roblox, RobloSam, or clockwork. The latter two still have most of their uploaded audio available on their profiles to this day.\n\nOn September 25, 2013, Roblox introduced a system where players can upload their MP3 files on Roblox by purchasing them with Robux. This allowed for a broader plethora of audio to be used in places. The system however only allowed 15 seconds of audio and cost users 250 Robux per audio asset,[2] allegedly set up to prevent misuse of the feature. However, a loophole was discovered shortly afterward, in which players could technically upload a full song by speeding it up to the point where the song's duration is lower than 15 seconds, and creators could tweak the pitch to be lowered at a specific value (usually predetermined by the uploader in the description), for the full song to play normally, although losing some quality.\n\nIn early 2014, Roblox's sound engine was changed so that audio is now more reliable in playback. Playback is nearly guaranteed, even if the audio asset hasn't been preloaded.\n\nOn January 15, 2014, Roblox increased the sound limit to 120 seconds, 8 times the length of the previous limit, and the cost decreased by 60% to 100 Robux, allowing longer audio to be uploaded for a lower price. The update proved to be successful, as it reduced the hassle of uploading multiple short samples of long audio and also reduced the complications that came with the pricing.[3]\n\nOn March 18, 2015, Roblox allowed uploading of OGG files, which have more seamlessness looping than MP3 files.\n\nOn September 26, 2016, the sound limit was increased to 6 minutes, while the cost would be changed to a dynamic pricing system.\n\nOn October 6, 2016, the dynamic pricing system and limit of 6 minutes would be temporarily retired while some issues would be fixed. About a week later, the dynamic pricing system and limit of 6 minutes were returned.[4]\n\nOn December 1, 2016, the sound limit was increased to 7 minutes.\n\nOn an unknown date in late 2018, the cost for audio was changed to 35 Robux instead of 75 for audio lengths ranging from 59 seconds to 2 minutes. Later in 2019, the cost for that length is now 70 Robux.\n\nIn late 2019, it was known in a DevForum post that the game client was no longer supporting IT files.[5]\n\nOn March 9, 2022, Roblox replaced price limitations with a monthly limit to how many audio files users can upload and allowed free uploading as well. Users who have been ID verified are allowed to upload 100 files per month. Some other users are allowed to upload more than 100 files per month. All other users are allowed to upload 10 files per month. Prior to the new limitations, audio that had a length of under 10 seconds would cost 20 Robux, 10 to 59 seconds would cost 35 Robux, 1 to 2 minutes would cost 70 Robux, and the rest would cost 350 Robux.\n\nRoblox also announced privacy changes that on March 22, 2022, all new audio uploaded will be Private and all existing audio with a length of over 6 seconds will be set to Private. Audio assets uploaded by Roblox Roblox is a notable creator or influencer verified by Roblox Corporation. Learn more. and Monstercat Monstercat is a notable creator or influencer verified by Roblox Corporation. Learn more. will remain Public. Private audio cannot be used/played if the user/group did not upload the audio. Roblox recommends developers review and replace their audio. Roblox also added Audio Discovery Plugin to Roblox Studio which assists in finding and replacing audio.[6]\n\nOn March 17, 2022, Roblox announced an update to the audio privacy changes. Roblox will have a team to keep most sound effects public, even if it's longer than 6 seconds. Roblox will also be adding \"asset permissions\" for audio, which allows users to grant permissions for which experiences can use them, or for all experiences.[7]\n\nOn the same day, Roblox also announced that users can fill out a survey to help Roblox suit the limit to the frequency and quantity of uploads to the user's needs in the future. Roblox is also announcing privacy for other asset types.\n\nOn May 23, 2024, it was announced that the ability to make new sound effects public (if under 10 seconds long) was added.[8] Creators wishing to upload public sounds need to apply to be an Audio Distributor, requiring them to be ID and age verified. In order for the audio to be playable, it currently needs to be added to the user's inventory in the Creator Hub.\n\nRoblox automatically searches through all audio assets for any copyrighted material, and also partnered with other companies to provide users with licensed music and sound effects. Previously, users were able to upload copyrighted audio with little to no penalty since the upload system was introduced, which had left Roblox at a risk of being sued for copyright infringement.\n\nOn May 30, 2018, Roblox announced on the DevForum that they would begin an automated process to remove all audio that contains any copyrighted material not licensed to Roblox on June 18. Audio that is removed for copyright has its name and description replaced with \"(Removed for copyright)\" and does not impact the uploader's moderation history. Roblox recommends developers to only use their own audio, Roblox's licensed audio or non-copyrighted audio, and also to replace any copyrighted audio that they do not have the license to use with the aforementioned audio.[9]\n\nOriginally, audios that were removed for copyright would be replaced with one of the ten songs selected by Roblox when played inside an experience. However, this is no longer the case, and removed audios will not play anything.\n\nRoblox has stated that the main reason for this is to give the Corporation itself better first impressions to future companies that they want to work with. Similar to the Pokémon Brick Bronze takedown, if an artist or record label found out that their music was being used by a site or user without permission (especially for monetary gain) then it would most likely lead to a lawsuit if action was not taken by the host.\n\nFollowing the introduction of copyright removal, many users began to upload audio that was modified in a way that bypassed Roblox's content identification system, typically by changing the pitch or adding an audio clip at the beginning.\n\nThis decision has been criticized for being quite sudden, and concerns over playable audio using custom Boombox passes in games have also been raised. Some argued that there would be no concrete way to prevent users from uploading copyrighted material, and that games which rely on copyrighted music would be heavily crippled by the mass removal of audio.\n\nRoblox has been giving out refunds to users who had uploaded copyrighted audio that was later removed by the automatic process. On July 4, 2018, a bug which refunded users more than the amount they spent to upload their removed audios caused many users to be falsely terminated by Roblox.[10] According to Roblox, this was later fixed,[11] although the terminations the bug caused sparked conversation about Roblox moderation within the developer community, notably in this devforum post by Cindering.\n\nOn June 9, 2021, Roblox was sued by the National Music Publishers' Association for copyright infringement for allegedly allowing the unauthorized use of copyrighted songs.[12]\n\nAfter the lawsuit though not moderated; audios by the National Music Publishers' Association will no longer play in-game and will bring up error 46 in the client and attempting to search artist names on the audio tab in the Library will be blocked but not censored.\n\nSome users have suspected that this is the reason why all accessories that allowed users to play custom audio were taken offsale in early 2021.\n\nIn late May 2018, Roblox signed a license agreement with APM Music, a music company that produces and licenses soundtracks for usage in films, TV shows, video games, and commercials. Soon afterward, thousands of APM Music tracks were uploaded onto the Library by Roblox Roblox is a notable creator or influencer verified by Roblox Corporation. Learn more., allowing developers various free music of any style for their experience without the risk of copyright infringement (given if they only use up to 250 per experience).[9]\n\nThese music tracks have been licensed for use in other video games as well. One example is the track \"Ghost\" from APM Music, created in 2004 and was also used in Plankton's Robotic Revenge back in 2013. Another example is \"Fatal Error\" from APM Music, used in the Skylanders series as the theme of the villain character Wolfgang. Another example again is \"Wild Card\" from APM Music, used as the default theme of the Create a Superstar from WWE Smackdown VS Raw 2011. Both songs can be found in the audio marketplace.\n\nMany people complained that they have been getting copyright claims (Content ID claims) from the licensed music in their videos due to the fact that these music are copyrighted. Copyright claims are sometimes confused with copyright strikes, as copyright claims render them unable to monetize their videos. Roblox stated in a help article that they allow users to post videos containing this music in their videos with instructions on how to dispute a copyright claim. The music, however, can only be used in Roblox gameplay videos.\n\nThe description for APM Music tracks is organized with this order:\n• the description of the track under \"quotes\";\n• the duration of the track in seconds (normally, for commercial purposes, many songs have cut versions to 60\" and 30\");\n• genre: there are many genres on Roblox, such as Club/Electronica, Jazz, Pop, etc.;\n• library: shows the library of the track. The most known are from Bruton, KPM and Sonoton;\n• the album info that you can search on the APM website;\n• and the \"Courtesy of APM Music\" phrase;\n\nComposer names are not included in the description, but can be found by searching on APM Music.\n\nOn June 22, 2018, the Roblox profile uploaded adult content in the form of audio. This likely occurred because the audio clip was improperly tagged as safe by APM Music, the source of the audio. After the audio was found by the community, Roblox transferred its ownership to a random inactive account and later deleted the audio. Along with the audio in question, the Roblox profile uploaded a safe version.\n\nOn March 9, 2022, a similar incident occurred when multiple songs that contained swear words in the title were uploaded to the Roblox account without being filtered or censored. Shortly after the audios were found by the community, the song titles were changed to \"[ Content Removed ]\" and the descriptions were removed.\n\nOn July 25, 2020, in addition to APM Music, Roblox also partnered with Monstercat so that their music can also be used freely in Roblox.[13] Music tracks are uploaded by Monstercat Monstercat is a notable creator or influencer verified by Roblox Corporation. Learn more. instead of Roblox.\n\nOn March 9, 2022, Roblox announced that they will partner with other music companies, such as Nettwerk Music Group and Position Music, by March 22.[6]\n\nOn March 17, 2022, Roblox partnered with Pro Sound Effects to provide developers with sound effects. These sound effects are uploaded by Roblox and always end with \"(SFX)\".[7]\n\nBypassed audios, or user-uploaded audio that contains inappropriate content, have commonly been found on the Roblox platform for as long as users could upload their own audios. Usually, bypassed audios are a product of faulty moderation, but there have also been bugs that allowed audio to be uploaded without being reviewed by moderation.\n\nBefore 2016, Sound objects could have a negative pitch, allowing audios to play in reverse. Because of this, many users uploaded inappropriate audios in reverse in hopes that it would be approved by moderation so that it could be played in reverse in-game.[14]\n\nIn 2014, a bug was discovered that allowed users to upload audio as a plugin to evade moderation. This bug caused many bypassed audios to be uploaded, although the bug was quickly fixed. However, a similar bug was discovered with RenderMeshes which caused more bypassed audios to be uploaded until the bug was eventually patched fully on April 26, 2017.\n\nUsers have continued to find more ways to bypass audio, including slowing and speeding up audios so that they create an inappropriate sound by changing the pitch of the audio in an experience, or leaving sections of silence in their audio in an attempt to trick moderation into approving the asset. In some cases, inappropriate audio has been uploaded directly and is still approved by Roblox moderation.\n\nBeyond inappropriate sounds, there are many excessively loud or \"ear-blaster\" audios that get uploaded and approved even though they are against the Roblox Community Guidelines. These audios are commonly used in experiences where players can enter a custom audio ID to play (e.g. with a Boombox gear).\n\nOn March 22, 2022, all existing audios longer than 6 seconds (except those uploaded by Roblox Roblox is a notable creator or influencer verified by Roblox Corporation. Learn more.) were made private as a part of Roblox's effort to allow creators to \"control the availability, manner of distribution, and value of their creations.\" Private audios can only be used in experiences that are owned by the uploader or have been authorized to use the audio by the uploader.[6]\n\nAlong with this change, Roblox uploaded over 100,000 more licensed songs and sound effects to the audio library for use across the platform. The licensed audio was sourced from many partners, including Monstercat, APM, Pro Sound Effects, Nettwerk Music Group, and Position Music.[7]\n\nAdditionally, Roblox implemented a new system for audio uploads, giving all users a limited number of free audio uploads per month. Under the new system, non-ID verified creators could upload up to 10 audios per month, whereas ID-verified creators could upload 100. Additionally, some developers were given a limit of 2,000 uploads per month, but it is unknown what the criteria to receive this limit is, or if this is just random between players.\n\nThe changes to audio privacy were highly controversial within the developer community and the greater Roblox community, as evidenced by the replies to the original Developer Forum announcement, which received over 4,000 replies in 7 days. Many users were concerned about the impact these changes would have on their own game and things like the Boombox gears. Some also speculated that this change was forced due to Roblox's lawsuit with the National Music Publishers' Association, although this has not been confirmed by Roblox.\n\nDue to the timing for the announcement of audio privacy changes being just a few days after Pokémon BrickBronze got taken down for copyright, many people put two-and-two together and blamed BrickBronze for being responsible. This was later proven to be false, although the connection periodically surfaces from time to time.\n\nOn May 23rd of 2024 Audio Distribution was released, allowing eligible users to upload audios to the marketplace. In order to be eligible you must submit your ID to Roblox's verification platform which can be done at the settings page of the creator hub. Upon verifying your ID you must also agree to owning the content you are uploading, granting Roblox a license to use your content, and confirming any 3rd parties rights are not being infringed by your upload. You can also be eligible if the audio was created before the audio privacy and upload changes on March 22, 2022.\n\nThis section is a trivia section. Please relocate any relevant information into other sections of the article.\n• There is a bug where some audio files stop playing after a couple of seconds when played on the website and android app.\n• There is a bug where an audio file won't play at all, usually with .ogg sound files.\n• The longest song on Roblox before September 25, 2013, was Mubarek - Resist (rmx).\n• The songs WindOfFjords and TheGreatStrategy were IT files taken from The Mod Archive, from here and here respectively."
    }
]