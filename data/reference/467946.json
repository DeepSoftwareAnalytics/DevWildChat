[
    {
        "link": "https://dev.mysql.com/doc/connector-net/en/connector-net-connections-string.html",
        "document": "The object is configured using a connection string. A connection string contains several key-value pairs, separated by semicolons. In each key-value pair, the option name and its corresponding value are joined by an equal sign. For the list of option names to use in the connection string, see Section 4.5, “Connector/NET Connection Options Reference”.\n\nThe following is a sample connection string:\n\nIn this example, the object is configured to connect to a MySQL server at , with a user name of and a password of . The default database for all statements will be the database.\n\nAfter you have created a connection string it can be used to open a connection to the MySQL server. The following code is used to create a object, assign the connection string, and open the connection. MySQL Connector/NET can also connect using the native Windows authentication plugin. See Section 4.4, “Connector/NET Authentication” for details. You can further extend the authentication mechanism by writing your own authentication plugin. See Section 5.8, “Writing a Custom Authentication Plugin” for details. MySql.Data.MySqlClient.MySqlConnection conn; string myConnectionString; myConnectionString = \"server=127.0.0.1;uid=root;\" + \"pwd=12345;database=test\"; try { conn = new MySql.Data.MySqlClient.MySqlConnection(); conn.ConnectionString = myConnectionString; conn.Open(); } catch (MySql.Data.MySqlClient.MySqlException ex) { MessageBox.Show(ex.Message); } Dim conn As New MySql.Data.MySqlClient.MySqlConnection Dim myConnectionString as String myConnectionString = \"server=127.0.0.1;\" _ & \"uid=root;\" _ & \"pwd=12345;\" _ & \"database=test\" Try conn.ConnectionString = myConnectionString conn.Open() Catch ex As MySql.Data.MySqlClient.MySqlException MessageBox.Show(ex.Message) End Try You can also pass the connection string to the constructor of the class: MySql.Data.MySqlClient.MySqlConnection conn; string myConnectionString; myConnectionString = \"server=127.0.0.1;uid=root;\" + \"pwd=12345;database=test\"; try { conn = new MySql.Data.MySqlClient.MySqlConnection(myConnectionString); conn.Open(); } catch (MySql.Data.MySqlClient.MySqlException ex) { MessageBox.Show(ex.Message); } Dim myConnectionString as String myConnectionString = \"server=127.0.0.1;\" _ & \"uid=root;\" _ & \"pwd=12345;\" _ & \"database=test\" Try Dim conn As New MySql.Data.MySqlClient.MySqlConnection(myConnectionString) conn.Open() Catch ex As MySql.Data.MySqlClient.MySqlException MessageBox.Show(ex.Message) End Try After the connection is open, it can be used by the other Connector/NET classes to communicate with the MySQL server.\n\nData used by applications can be stored on multiple MySQL servers to provide high availability. Connector/NET provides a simple way to specify multiple hosts in a connection string for cases in which multiple MySQL servers are configured for replication and you are not concerned about the precise server your application connects to in the set. For an example of how to configure multiple hosts with replication, see Using Replication & Load balancing. Starting in Connector/NET 8.0.19, both classic MySQL protocol and X Protocol connections permit the use of multiple host names and multiple endpoints (a pair) in a connection string or URI scheme. For example: An updated failover approach selects the target for connection first by priority order, if provided, or random order when no priority is specified. If the attempted connection to a selected target is unsuccessful, Connector/NET selects a new target from the list until no more hosts are available. If enabled, Connector/NET uses connection pooling to manage unsuccessful connections (see Section 4.2, “Managing a Connection Pool in Connector/NET”).\n\nWhen multiple MySQL instances provide the same service in your installation, you can apply DNS Service (SRV) records to provide failover, load balancing, and replication services. DNS SRV records remove the need for clients to identify each possible host in the connection string, or for connections to be handled by an additional software component. They can also be updated centrally by administrators when servers are added or removed from the configuration or when their host names are changed. DNS SRV records can be used in combination with connection pooling, in which case connections to hosts that are no longer in the current list of SRV records are removed from the pool when they become idle. For information about DNS SRV support in MySQL, see Connecting to the Server Using DNS SRV Records. A service record is a specification of data managed by your domain name system that defines the location (host name and port number) of servers for the specified services. The record format defines the priority, weight, port, and target for the service as defined in the RFC 2782 specification (see https://tools.ietf.org/html/rfc2782). In the following SRV record example with four server targets (for ), Connector/NET uses the server selection order of , , , and . Name TTL Class Priority Weight Port Target _mysql._tcp.foo.abc.com. 86400 IN SRV 0 5 3306 foo1.abc.com _mysql._tcp.foo.abc.com. 86400 IN SRV 0 10 3306 foo2.abc.com _mysql._tcp.foo.abc.com. 86400 IN SRV 10 5 3306 foo3.abc.com _mysql._tcp.foo.abc.com. 86400 IN SRV 20 5 3306 foo4.abc.com To open a connection using DNS SRV records, add the connection option to your connection string. For example: For additional usage examples and restrictions for both classic MySQL protocol and X Protocol, see Options for Both Classic MySQL Protocol and X Protocol."
    },
    {
        "link": "https://mysqlconnector.net/tutorials/connect-to-mysql",
        "document": "How to Connect to MySQL from .NET Core\n\nThis tutorial will teach you how to connect to MySQL from .NET Core using C#.\n\nFirst, install the MySqlConnector NuGet package. From a command prompt, run:\n\nOr right-click your project, choose Manage NuGet Packages…, in the Search box enter , and install the package in your project.\n\nReplace the values in that string with the appropriate settings for your database. For more advanced settings, see Connection Options.\n\nIf you are using ASP.NET Core, your connection string will usually be stored in :\n\nIf using ASP.NET Core, you will want to register a database connection in :\n\nRecommended Install MySqlConnector.DependencyInjection via . Then add the following to :\n\nThe advantage of using is that it will automatically integrate with logging, and also register and with the service collection.\n\n4. Open and Use the Connection\n\nIn ASP.NET Core, the object will be dependency-injected into your class. For other kinds of projects, you may need to explicitly create the connection:\n\nYou can then open the connection and execute a query:"
    },
    {
        "link": "https://dev.mysql.com/doc/connector-net/en",
        "document": "This manual describes how to install and configure MySQL Connector/NET, the connector that enables .NET applications to communicate with MySQL servers, and how to use it to develop database applications.\n\nFor notes detailing the changes in each release of Connector/NET, see MySQL Connector/NET Release Notes.\n\nFor legal information, including licensing information, see the Preface and Legal Notices.\n\nFor help with using MySQL, please visit the MySQL Forums, where you can discuss your issues with other MySQL users."
    },
    {
        "link": "https://dev.mysql.com/blog-archive/getting-started-with-asp-net-core-and-mysql-connectornet",
        "document": "This tutorial shows how to read information from MySQL Sakila database in an ASP.NET Core application using Connector/NET Core to explore the possibility to run this application on any .NET Core supported environment as Windows, Linux, and Mac.\n\nThe first step is to create an ASP.NET Core Web Application (.NET Core) type project and name it MvcSakilaCore\n\nNote: the project name should not contain spaces\n\nThe new project will be created:\n\nStop the running application to add some code.\n\nCreate a new folder named “Models” where it will store the database access:\n\nIn order to use MySQL Connector/NET it’s required to add its nuget package.\n\nIn Solution Explorer, right-click MvcSakilaCore project > Manage NuGet Packages…\n\n In the NuGet dialog, Browse “MySql.Data” package using version 6.10.0 or above:\n\nAdd your connection string in the appsettings.json file:\n\nFor this example a Film class will be used. It contains the database fields as properties we want to show in our application.\n\nCreate a new SakilaContext class that will contains the connections and Sakila database entities:\n\nIn order to be able to use our SakilaContext it’s required to register the instance as a service in our application. To do this add the code line in the Startup.cs file:\n\nIn Solution Explorer, right-click Controllers > Add > New Item… > MVC Controller Class\n\n Name the controller FilmsController:\n\nChange the FilmsController code to this:\n\nIn Solution Explorer, right click Views > Films > Add > New Item… > ASP.NET > MVC View Page\n\nAdd the following code into the new Index.cshtml view file:\n\nBefore run the application, add the Films path to the running url.\n\nRun the application (press F5) and the Films list should be displayed:"
    },
    {
        "link": "https://ironpdf.com/blog/net-help/csharp-mysql-connection",
        "document": "Test in production without watermarks.\n\nWorks wherever you need it to."
    },
    {
        "link": "https://stackoverflow.com/questions/6642609/mysql-query-to-retrieve-data-with-column-names",
        "document": "I am writing some tool which has to retrieve column names of the retrieved data set when any query is applied to it.\n\nIf you're familiar with phpMyAdmin, you would realize the SQL pane does what is it runs your query and shows result with the column names. I wonder how hard the query would be, it always results in column names and what's actually the programming behind the scene? Is it like, it analyzes the query and then find table names from it and then first retrieve column names using query and then the data?\n\nIs there any better way?\n\nUPDATED Sorry for incomplete information, I think I must say I am using MySQL connector for .NET and am using C#."
    },
    {
        "link": "https://geeksforgeeks.org/mysql-describe-table",
        "document": "MySQL is an open-source relational database management system (RDBMS). It is one of the most popular databases globally, known for its reliability, and scalability. MySQL is designed to run on various operating systems, including Windows, Linux, macOS, and more. It is known for its high performance, quick retrieval, and efficient storage.\n\nIt provides robust security features, including user authentication, access control, and data encryption. In this article, we will understand how to use the DESCRIBE TABLE command using steps to follow, examples, and so on.\n\nThe statement, also commonly written as or , is a MySQL command used to retrieve metadata about a table. It offers a better way to view essential information about the columns within a specified table, such as the data type, nullability, and key constraints. displays information about primary and foreign key constraints, providing insights into the relationships between tables.\n\nUnderstanding the structure of databases is important for good database handling and development. In MySQL, the­ DESCRIBE TABLE command is helpful. It gives us detailed info about a table's structure and attributes.\n\nHow To Describe a Table In MySQL?\n\nThe DESCRIBE TABLE command in MySQL is a use­ful Data Definition Language (DDL) command. It's good for inspecting the structure of a table. It shows users about columns, data types, constraints, and other attributes. It give­s an overall look at how the table­ is structured. To understand the DESCRIBE TABLE in MYSQL we should know SQL Data Types, SQL Types of Indexes, and SQL Types of Keys.\n\nExecuting the­ DESCRIBE TABLE statement is simple. First, ope­n a MySQL command-line interface or a database­ management tool(WorkBench).\n\nThen, run the following command:\n\nExplanation: This command will return a result containing information about the specified table.\n\nThe output of the DESCRIBE statement includes columns like:\n• Null : whether the column allows NULL values or not.\n• Default : the default value set in the column.\n• Extra the: additional information about the column.\n\nHow to Display Table Information in MySQL Workbench?\n\nIn MySQL Workbench, you can view table information by:\n• MySQL Workbench and connect to the database.\n• table you want to describe. \n\n\n\nLet's see the visual representation of How to Display Table Information in MySQL Workbench\n\nWe have two tables named student, fees with some columns.\n\nLet's perform the DESCRIBE TABLE command in the student table and understand the output.\n\nLet's understand the output of each column in the table, including its data type, nullability, constraints, and default values:\n• student_id : This is shown as type int. The NO shows it cannot be NULL primary key (PRI) . As Extra its have auto_increment\n• first_name varchar(50) column, it can be­ up to 50 characters in length. The NO shows it cannot be NULL.\n• last_name : same as per the first_name column.\n• date_of_birth : This column is of type of date NULL field is marked as YES, meaning it allows NULL values.\n• email varchar(100) type­ column, it can be­ up to 100 characters in length. The NULL field is marked as YES, meaning it stores NULL values. The UNI\n• Registration_date timestamp column. It can have NULL CURRENT_TIMESTAMP DEFAULT_GENERATED set automatically default values using the current timestamp when we add a new row.\n• is_active : This column is of type tinyint(1), it allows NULL values, and the default value is 1.\n\nLet's perform the DESCRIBE TABLE command in the fees table and understand the output.\n• fee_id : This column is a type of int. The NULL value field is NO, so it can't be empty. As a primary key (PRI) . As Extra its have auto_increment\n• student_id : This column is of type int. It stores NULL values. MUL means it's part of multiple indexes. This column has a foreign key referencing to the student_id\n• amount : This column is a type of decimal. It can have up to 8 digits in total, 2 being after the dot. The NULL value field is NO, so it can't be empty.\n• payment_date : This column is a type of date. It stores NULL values. MUL means it’s part of multiple indexes.\n\nAnother way to get table information is using the SHOW COLUMNS command.\n\nThis command gives details similar to the DESCRIBE statement.\n\nBoth \"SHOW COLUMNS FROM student\" and \"DESCRIBE stude­nt\" provide details on the \"student\" table­ but in different ways. \"SHOW COLUMNS FROM student\" pre­sents details in table form. It shows the fie­ld name, and data type if it allows null, key, de­fault value, and more. Alternative­ly, \"DESCRIBE student\" offers a simple list. This simple list may not show relevant info, unlike \"SHOW COLUMNS.\" There­fore, it's up to the user to se­lect either a de­tailed table or a simple list. But, in most cases, both commands will show similar results.\n\nMySQL table structure knowledge is good for database handling. You can understand it using commands like DESCRIBE, and SHOW COLUMNS, and tools like MySQL Workbench. This will show you table parts like column names, data types, and constraints. This article shows easy instructions for these commands. It helps make managing data more efficient.\n\nWhat is the purpose of the\n\nHow do you use the\n\nWhat do the"
    },
    {
        "link": "https://dev.mysql.com/doc/connector-net/en/connector-net-programming-mysqlcommand.html",
        "document": "The MySqlCommand class represents a SQL statement to execute against a MySQL database. Class methods enable you to perform the following database operations:\n\nCommand-based database operations can run within a transaction, if needed. For a short tutorial demonstrating how and when to use the , , and methods, see Section 6.1.2, “The MySqlCommand Object”.\n\nAn instance of can be organized to execute as a prepared statement for faster excecution and reuse, or as a stored procedure. A flexible set of class properties permits you to package MySQL commands in several forms. The remainder of this section describes following properties:\n\nThe class provides the and properties that you may combine to create the type of SQL statements needed for your project. The property is interpreted differently, depending on how you set the property. The following types are permitted: The default type, , is used for executing queries and other SQL commands. See Section 6.1.2, “The MySqlCommand Object” for usage examples. If is set to , set to the name of the stored procedure to access. For use-case examples of the property with type , see Section 5.5, “Creating and Calling Stored Procedures”. If is set to , all rows and columns of the named table are returned when you call one of the execute methods. In effect, this command performs a on the table specified. The property is set to the name of the table to query. This usage is illustrated by the following code snippet:\n\nAs of Connector/NET 8.0.26, an instance of can be organized to execute simple Transact-SQL statements or stored procedures, both can be used in a prepared statement for faster execution and reuse. The component must be installed on the server (see Prerequisites for Using Query Attributes) before attributes can be searched for and used on the server side.\n• None Prior to MySQL Server 8.0.23: no support for query attributes.\n• None MySQL Server 8.0.23 to 8.0.24: support for query attributes in regular statements only.\n• None MySQL Server 8.0.25 and higher: support for query attributes in both regular and prepared statements. If you send query attribute metadata to a server that does not support query attributes, the attempt is logged by the connector but no error is emitted. Like parameters, attributes must be named. Unlike a parameter, an attribute represents an object from the underlying query, such as a field or table. Connector/NET does not check or enforce whether your attribute names are unique. Parameters and attributes can be combined together in commands without restrictions. You can declare an attritue name and value directly by using the method to create an instance of that is exposed in a collection through the object within . For example, to declare a single attribute named , use the following C# syntax: Alternatively, you can declare a variable of type to hold your attribute name and value. Both forms persist the attribute after the query is executed, until the method is called on the object. The next snippet declares two attributes named and as variables and . MySqlCommand myCommand = new MySqlCommand(); myCommand.Connection = myConnection; MySqlAttribute mySqlAttribute1 = new MySqlAttribute(\"qa1\", \"qaValue\"); MySqlAttribute mySqlAttribute2 = new MySqlAttribute(\"qa2\", 2); myCommand.Attributes.SetAttribute(mySqlAttribute1); myCommand.Attributes.SetAttribute(mySqlAttribute2); With attribute names and values defined, a statement specifying attributes can be sent to the server. The following statement includes the loadable function that is used to retrieve the two attributes decared previously and then prints the results. For more readable and convenient syntax, the symbol is used in this example to identify string literals as interpolated strings. myCommand.CommandText = $\"SELECT mysql_query_attribute_string('{mySqlAttribute1.AttributeName}') AS attr1,\" + $\"mysql_query_attribute_string('{mySqlAttribute2.AttributeName}') AS attr2\"; using (var reader = myCommand.ExecuteReader()) { while (reader.Read()) { Console.WriteLine($\"Attribute1 Value: {reader.GetString(0)}\"); Console.WriteLine($\"Attribute2 Value: {reader.GetString(1)}\"); } } /* Output: Attribute1 Value: qaValue Attribute2 Value: 2 */ The following code block shows the same process for setting attributes and retrieving the results using Visual Basic syntax. Public Sub CreateMySqlCommandWithQueryAttributes(ByVal myConnection As MySqlConnection) Dim myCommand As MySqlCommand = New MySqlCommand() myCommand.Connection = myConnection Dim mySqlAttribute1 As MySqlAttribute = New MySqlAttribute(\"qa1\", \"qaValue\") Dim mySqlAttribute2 As MySqlAttribute = New MySqlAttribute(\"qa2\", 2) myCommand.Attributes.SetAttribute(mySqlAttribute1) myCommand.Attributes.SetAttribute(mySqlAttribute2) myCommand.CommandText = $\"SELECT mysql_query_attribute_string('{mySqlAttribute1.AttributeName}') AS attr1,\" & $\"mysql_query_attribute_string('{mySqlAttribute2.AttributeName}') AS attr2\" Using reader = myCommand.ExecuteReader() While reader.Read() Console.WriteLine($\"Attribute1 Value: {reader.GetString(0)}\") Console.WriteLine($\"Attribute2 Value: {reader.GetString(1)}\") End While End Using End Sub\n\nCommands can have a timeout associated with them. This feature is useful as you may not want a situation were a command takes up an excessive amount of time. A timeout can be set using the property. The following code snippet sets a timeout of one minute: The default value is 30 seconds. Avoid a value of 0, which indicates an indefinite wait. To change the default command timeout, use the connection string option . Connector/NET supports timeouts that are aligned with how Microsoft handles . This property is the cumulative timeout for all network reads and writes during command execution or processing of the results. A timeout can still occur in the method after the first row is returned, and does not include user processing time, only IO operations. Further details on this can be found in the relevant Microsoft documentation."
    },
    {
        "link": "https://dev.mysql.com/doc/mysql/en/features.html",
        "document": "This section describes some of the important characteristics of the MySQL Database Software. In most respects, the roadmap applies to all versions of MySQL. For information about features as they are introduced into MySQL on a series-specific basis, see the “In a Nutshell” section of the appropriate Manual:\n• None Tested with a broad range of different compilers.\n• None Works on many different platforms. See https://www.mysql.com/support/supportedplatforms/database.html.\n• None Tested with Purify (a commercial memory leakage detector) as well as with Valgrind, a GPL tool (https://valgrind.org/).\n• None Designed to be fully multithreaded using kernel threads, to easily use multiple CPUs if they are available.\n• None Uses very fast B-tree disk tables ( ) with index compression.\n• None Designed to make it relatively easy to add other storage engines. This is useful if you want to provide an SQL interface for an in-house database.\n• None Executes very fast joins using an optimized nested-loop join.\n• None Implements in-memory hash tables, which are used as temporary tables.\n• None Implements SQL functions using a highly optimized class library that should be as fast as possible. Usually there is no memory allocation at all after query initialization.\n• None Provides the server as a separate program for use in a client/server networked environment.\n• None Full operator and function support in the list and clause of queries. For example: mysql> SELECT CONCAT(first_name, ' ', last_name) -> FROM citizen -> WHERE income/dependents > 10000 AND age > 30;\n• None Full support for SQL and clauses. Support for group functions ( , , , , , , and ).\n• None Support for and with both standard SQL and ODBC syntax.\n• None Support for aliases on tables and columns as required by standard SQL.\n• None Support for , , , and to return the number of rows that were changed (affected), or to return the number of rows matched instead by setting a flag when connecting to the server.\n• None Support for MySQL-specific statements that retrieve information about databases, storage engines, tables, and indexes. Support for the database, implemented according to standard SQL.\n• None An statement to show how the optimizer resolves a query.\n• None Independence of function names from table or column names. For example, is a valid column name. The only restriction is that for a function call, no spaces are permitted between the function name and the “ ” that follows it. See Section 11.3, “Keywords and Reserved Words”.\n• None You can refer to tables from different databases in the same statement.\n• None Support for large databases. We use MySQL Server with databases that contain 50 million records. We also know of users who use MySQL Server with 200,000 tables and about 5,000,000,000 rows.\n• None Support for up to 64 indexes per table. Each index may consist of 1 to 16 columns or parts of columns. The maximum index width for tables is either 767 bytes or 3072 bytes. See Section 17.21, “InnoDB Limits”. The maximum index width for tables is 1000 bytes. See Section 18.2, “The MyISAM Storage Engine”. An index may use a prefix of a column for , , , or column types.\n• None Clients can connect to MySQL Server using several protocols:\n• None Clients can connect using TCP/IP sockets on any platform.\n• None On Windows systems, clients can connect using named pipes if the server is started with the system variable enabled. Windows servers also support shared-memory connections if started with the system variable enabled. Clients can connect through shared memory by using the option.\n• None On Unix systems, clients can connect using Unix domain socket files.\n• None MySQL client programs can be written in many languages. A client library written in C is available for clients written in C or C++, or for any language that provides C bindings.\n• None APIs for C, C++, Eiffel, Java, Perl, PHP, Python, Ruby, and Tcl are available, enabling MySQL clients to be written in many languages. See Chapter 31, Connectors and APIs.\n• None The Connector/ODBC (MyODBC) interface provides MySQL support for client programs that use ODBC (Open Database Connectivity) connections. For example, you can use MS Access to connect to your MySQL server. Clients can be run on Windows or Unix. Connector/ODBC source is available. All ODBC 2.5 functions are supported, as are many others. See MySQL Connector/ODBC Developer Guide.\n• None The Connector/J interface provides MySQL support for Java client programs that use JDBC connections. Clients can be run on Windows or Unix. Connector/J source is available. See MySQL Connector/J Developer Guide.\n• None MySQL Connector/NET enables developers to easily create .NET applications that require secure, high-performance data connectivity with MySQL. It implements the required ADO.NET interfaces and integrates into ADO.NET aware tools. Developers can build applications using their choice of .NET languages. MySQL Connector/NET is a fully managed ADO.NET driver written in 100% pure C#. See MySQL Connector/NET Developer Guide.\n• None MySQL includes several client and utility programs. These include both command-line programs such as mysqldump and mysqladmin, and graphical programs such as MySQL Workbench.\n• None MySQL Server has built-in support for SQL statements to check, optimize, and repair tables. These statements are available from the command line through the mysqlcheck client. MySQL also includes myisamchk, a very fast command-line utility for performing these operations on tables. See Chapter 6, MySQL Programs.\n• None MySQL programs can be invoked with the or option to obtain online assistance."
    },
    {
        "link": "https://stackoverflow.com/questions/38693720/display-all-tables-describe-like-functionality",
        "document": "This expands upon an answer given Here. It adds the Character Set and Collation columns, and the same at the Database and Table-level. Included is barebones sorting on two choices: Alphabetical, and by tablesize, as calculated similar to here. I still think that concept needs some peer review. Rolando on DBA here was showing a method, and Rick James commented. It is not a simple calculation, and never incorporates non-static data such as and s. So feel free to improve upon that calculation and share it. Regardless, the tables will generally return in the desired sort order if by 'size'. I make no warranty to its accuracy whatsoever as it relates to InnoDB file size.\n\nIt allows for a stub for you to improve sort capabilities. For instance, by having another table for sort order joins based on Main Tables vs Supporting and Code Tables.\n\nSessions: This relies on the concept of a Session, which is just an instance of you calling the routines. Think of them as Snapshots that can be access later. The data at that point in time is contained in a Session snapshot. Might be useful as you alter tables. In particular, collation. Oh, and about collation, Foreign Key constraints often fail due to incorrect collation setups as developers cut and paste code from the internet (table-level and column-level character set and collation mismatches). That is why I threw that into this version.\n\nThe routines live in a database that houses the two stored procedures and some supporting tables (pretty much all session-based). About 5 tables.\n• The database name to describe all tables.\n• the parameter to hold the session #\n• boolean: do you want the data deleted from the reporting table at the end\n• boolean: should we auto-call the Pretty Printing stored procedure that generates -like output.\n• Sort order: 'size' or 'alpha'. In fact, anything but 'size' will result in 'alpha'.\n\nThe code is fairly well documented, short of turning it into 600 lines of code versus 400.\n\nThe routines are self-contained and self-referencing in the database. So call them explicitly from anywhere.\n\nNoteA: As for the examples above: Ex. 1 and 2 as similar, just a different sort order. These are your normal way of using it with just one call. The table size is always displays next to the tablename. Only with 'size' is it sorted descending on it. With the 4th parameter as True, it auto-calls the Pretty Printing Stored Proc at the end. Otherwise, a plain-Jane resultset is rendered. will be written to as it represents the Session # created. That is useful for manually calling the Pretty Printing stored proc shortly thereafter, wedging one of your routines in and using the data, or replaying the results months later (of the frozen snapshot). So, Ex. 3 is the case where you wish to retrieve data for output based on a call prior, having been fed back a Session #. Such as to the before mentioned examples 1 and 2 (wherein parameter #4 would have been False, however). Or, if you simply want to re-report on a prior data snapshot.\n\nThe suggested usage is to not delete the Session data after the calls. As such, leave parameter #3 as False, meaning do not delete.\n\nThe routines do not affect your data in any way. It only modifies datain the database.\n\nOutput: If the routine is run outside of command-line (such as in MySQL Workbench), a table wrapper column will surround the entirety of all of the tables generated for output. It has a column heading of '' (blank string). But it is still rather annoying. This is seen in Output1 shown below. However, if you the leverage command-line switches (skip column names and batch mode) such as with the following call:\n\n... it will generate a non wrapped output. More pleasing. Written to a file. See Output2 below.\n\nPerformance: It uses for the Pretty Printing. I normally laugh at the concept. But considering that these are infrequent calls and a minute or two would seem acceptable perhaps, I was pleased to find the performance to be under 10 seconds for a schema with 120 tables. Linux is much faster than Windows in my testing.\n\nTwo Stored Procedures (including the CREATE SCHEMA at top):\n\nOutput1 (showing wrapping/containing outer table). The two yellow highlighter pieces are the table names.\n\nOutput2 (Command-line using switches) which remove the outer wrapping table. See example above in Output section for usage. Effective allows for PRINT like commands in MySQL."
    }
]