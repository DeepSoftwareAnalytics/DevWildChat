[
    {
        "link": "https://pyautogui.readthedocs.io",
        "document": "PyAutoGUI lets your Python scripts control the mouse and keyboard to automate interactions with other applications. The API is designed to be simple. PyAutoGUI works on Windows, macOS, and Linux, and runs on Python 2 and 3. To install with pip, run . See the Installation page for more details. The source code is available on: https://github.com/asweigart/pyautogui\n• Moving the mouse and clicking in the windows of other applications.\n• Sending keystrokes to applications (for example, to fill out forms).\n• Take screenshots, and given an image (for example, of a button or checkbox), and find it on the screen.\n• Locate an application’s window, and move, resize, maximize, minimize, or close it (Windows-only, currently). Here’s a YouTube video of a bot automatically playing the game Sushi Go Round. The bot watches the game’s application window and searches for images of sushi orders. When it finds one, it clicks the ingredient buttons to make the sushi. It also clicks the phone in the game to order more ingredients as needed. The bot is completely autonomous and can finish all seven days of the game. This is the kind of automation that PyAutoGUI is capable of.\n\n# Get the size of the primary monitor. # Get the XY position of the mouse. # Move the mouse to XY coordinates and click it. # Find where button.png appears on the screen and click it. # Move the mouse 400 pixels to the right of its current position. # Use tweening/easing function to move mouse over 2 seconds. # type with quarter-second pause in between each key # Press the Esc key. All key names are in pyautogui.KEY_NAMES # Press the Shift key down and hold it. 'This is the message to display.' # Make an alert box appear and pause the program until OK is clicked. This example drags the mouse in a square spiral shape in MS Paint (or any graphics drawing program): The benefit of using PyAutoGUI, as opposed to a script that directly generates the image file, is that you can use the brush tools that MS Paint provides.\n\nQ: Can PyAutoGUI work on Android, iOS, or tablet/smartphone apps. A: Unfortunately no. PyAutoGUI only runs on Windows, macOS, and Linux. A: No, right now PyAutoGUI only handles the primary monitor. A: No, but this is a feature that’s on the roadmap. Q: Can PyAutoGUI do keylogging, or detect if a key is currently pressed down? A: No, PyAutoGUI cannot do this currently."
    },
    {
        "link": "https://pyautogui.readthedocs.io/en/latest/keyboard.html",
        "document": "The primary keyboard function is . This function will type the characters in the string that is passed. To add a delay interval in between pressing each character key, pass an int or float for the keyword argument. # prints out \"Hello world!\" with a quarter second delay after each character You can only press single-character keys with , so you can’t press the Shift or F1 keys, for example.\n\nTo press these keys, call the function and pass it a string from the such as , , . See KEYBOARD_KEYS. The function is really just a wrapper for the and functions, which simulate pressing a key down and then releasing it up. These functions can be called by themselves. For example, to press the left arrow key three times while holding down the Shift key, call the following: To press multiple keys similar to what does, pass a list of strings to . For example: Or you can set how many presses : To add a delay interval in between each press, pass an int or float for the keyword argument.\n\nTo make holding a key convenient, the function can be used as a context manager and passed a string from the such as , , , and this key will be held for the duration of the context block. See KEYBOARD_KEYS.\n\nTo make pressing hotkeys or keyboard shortcuts convenient, the can be passed several key strings which will be pressed down in order, and then released in reverse order. This code: To add a delay interval in between each press, pass an int or float for the keyword argument."
    },
    {
        "link": "https://pyautogui.readthedocs.io/en/latest/mouse.html",
        "document": "Locations on your screen are referred to by X and Y Cartesian coordinates. The X coordinate starts at 0 on the left side and increases going right. Unlike in mathematics, the Y coordinate starts at 0 on the top and increases going down. The pixel at the top-left corner is at coordinates 0, 0. If your screen’s resolution is 1920 x 1080, the pixel in the lower right corner will be 1919, 1079 (since the coordinates begin at 0, not 1). The screen resolution size is returned by the function as a tuple of two integers. The current X and Y coordinates of the mouse cursor are returned by the function. Here is a short Python 3 program that will constantly print out the position of the mouse cursor: Here is the Python 2 version: To check if XY coordinates are on the screen, pass them (either as two integer arguments or a single tuple/list arguments with two integers) to the function, which will return if they are within the screen’s boundaries and if not. For example:\n\nThe function will move the mouse cursor to the X and Y integer coordinates you pass it. The value can be passed for a coordinate to mean “the current mouse cursor position”. For example: # moves mouse to X of 100, Y of 200. # moves mouse to X of 100, Y of 500. # moves mouse to X of 600, Y of 500. Normally the mouse cursor will instantly move to the new coordinates. If you want the mouse to gradually move to the new location, pass a third argument for the duration (in seconds) the movement should take. For example: # moves mouse to X of 100, Y of 200 over 2 seconds If you want to move the mouse cursor over a few pixels relative to its current position, use the function. This function has similar parameters as . For example: # moves mouse to X of 100, Y of 200.\n\nPyAutoGUI’s and functions have similar parameters as the and functions. In addition, they have a keyword which can be set to , , and for which mouse button to hold down while dragging. For example: # drag mouse to X of 100, Y of 200 while holding down left mouse button # drag mouse to X of 300, Y of 400 over 2 seconds while holding down left mouse button # drag the mouse left 30 pixels over 2 seconds while holding down the right mouse button\n\nTweening is an extra feature to make the mouse movements fancy. You can probably skip this section if you don’t care about this. A tween or easing function dictates the progress of the mouse as it moves to its destination. Normally when moving the mouse over a duration of time, the mouse moves directly towards the destination in a straight line at a constant speed. This is known as a linear tween or linear easing function. PyAutoGUI has other tweening functions available in the module. The function can be passed for the 4th argument to , , , and functions to have the mouse cursor start off moving slowly and then speeding up towards the destination. The total duration is still the same as the argument passed to the function. The is the reverse: the mouse cursor starts moving fast but slows down as it approaches the destination. The will overshoot the destination and “rubber band” back and forth until it settles at the destination. These tweening functions are copied from Al Sweigart’s PyTweening module: https://pypi.python.org/pypi/PyTweening https://github.com/asweigart/pytweening This module does not have to be installed to use the tweening functions. If you want to create your own tweening function, define a function that takes a single float argument between (representing the start of the mouse travelling) and (representing the end of the mouse travelling) and returns a float value between and .\n\nThe function simulates a single, left-button mouse click at the mouse’s current position. A “click” is defined as pushing the button down and then releasing it up. For example: To combine a call before the click, pass integers for the and keyword argument: # move to 100, 200, then click the left mouse button. To specify a different mouse button to click, pass , , or for the keyword argument: To do multiple clicks, pass an integer to the keyword argument. Optionally, you can pass a float or integer to the keyword argument to specify the amount of pause between the clicks in seconds. For example: # double-click the left mouse button, but with a quarter second pause in between clicks ## triple-click the right mouse button with a quarter second pause in between clicks As a convenient shortcut, the function will perform a double click of the left mouse button. It also has the optional , , , and keyword arguments. For example: There is also a function with similar optional keyword arguments. The function has optional and keyword arguments.\n\nMouse clicks and drags are composed of both pressing the mouse button down and releasing it back up. If you want to perform these actions separately, call the and functions. They have the same , , and . For example: # does the same thing as a left-button mouse click # press the right button down # move the mouse to 100, 200, then release the right button up.\n\nThe mouse scroll wheel can be simulated by calling the function and passing an integer number of “clicks” to scroll. The amount of scrolling in a “click” varies between platforms. Optionally, integers can be passed for the the and keyword arguments to move the mouse cursor before performing the scroll. For example: # move mouse cursor to 100, 200, then scroll up 10 \"clicks\" On OS X and Linux platforms, PyAutoGUI can also perform horizontal scrolling by calling the hscroll() function. For example: The function is a wrapper for , which performs vertical scrolling."
    },
    {
        "link": "https://readthedocs.org/projects/pyautogui/downloads/pdf/latest",
        "document": ""
    },
    {
        "link": "https://pyautogui.readthedocs.io/en/latest/quickstart.html",
        "document": "This is a quickstart reference to using PyAutoGUI. PyAutoGUI is cross-platform GUI automation module that works on Python 2 & 3. You can control the mouse and keyboard as well as perform basic image recognition to automate tasks on your computer.\n\nAll the keyword arguments in the examples on this page are optional.\n\nPyAutoGUI works on Windows/Mac/Linux and on Python 2 & 3. Install from PyPI with .\n\nXY coordinates have 0, 0 origin at top left corner of the screen. X increases going right, Y increases going down. If is 0 or unspecified, movement is immediate. Note: dragging on Mac can’t be immediate. Calling just clicks the mouse once with the left button at the mouse’s current location, but the keyword arguments can change that: The keyword argument can be , , or . All clicks can be done with , but these functions exist for readability. Keyword args are optional: Positive scrolling will scroll up, negative scrolling will scroll down: Individual button down and up events can be called separately:\n\nKey presses go to wherever the keyboard cursor is at function-calling time. # useful for entering text, newline is Enter A list of key names can be passed too: The full list of key names is in . Keyboard hotkeys like Ctrl-S or Ctrl-Shift-1 can be done by passing a list of key names to : Individual button down and up events can be called separately:\n\nIf you need to pause the program until the user clicks OK on something, or want to display some information to the user, the message box functions have similar names that JavaScript has: 'This displays some text with an OK button.' 'This displays text and has an OK and Cancel button.' 'This lets the user type in a string and press OK.' 'This is what I typed in.' The function will return if the user clicked Cancel.\n\nPyAutoGUI uses Pillow/PIL for its image-related data. On Linux, you must run to use the screenshot features. # returns a Pillow/PIL Image object, and saves it to a file If you have an image file of something you want to click on, you can find it on the screen with . # returns (left, top, width, height) of first place it is found The function will return a generator for all the locations it is found on the screen: The function just returns the XY coordinates of the middle of where the image is found on the screen: These functions return if the image couldn’t be found on the screen. Note: The locate functions are slow and can take a full second or two."
    },
    {
        "link": "https://geeksforgeeks.org/keyboard-module-in-python",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/69792108/how-do-i-use-the-python-keyboard-module-to-detect-a-key-press",
        "document": "There are usually many different ways to code something. Some are better than others. In a problem that is based on keyboard input, like your cash register/adding machine project, I would go with an event-driven approach. Your sample code represents a polling approach. It can work, but it may not be as efficient.\n\nI've never used the keyboard module before, but I did some quick research and came up with the below program, which may give you guidance. Every time a key in the keyboard is pressed, the routine is triggered. Digits are stored, and the Enter key causes an addition and then clearing of the stored digits."
    },
    {
        "link": "https://stackoverflow.com/questions/6348952/handling-keyboard-events-in-python",
        "document": "Would the cmd module suit your needs? It handles command-line history through the arrow keys, for instance, as well as completion.\n\nIf you need to catch a single key, there is a cross-platform recipe for this (see also Python read a single character from the user on StackOverflow)."
    },
    {
        "link": "https://thepythoncode.com/article/control-keyboard-python",
        "document": "Before we get started, have you tried our new Python Code Assistant? It's like having an expert coder at your fingertips. Check it out!\n\nIn this tutorial, you will learn how to use the keyboard module to control your computer keyboard in Python; this is, of course, useful for many tasks, such as enabling us to automate various routine desktop tasks, building reinforcement learning agents, and much more.\n\nRelated: How to Send Emails in Python.\n\nWe will be using the keyboard module, let's install it:\n\nAlright, open up a Python interactive shell or a Jupyter notebook/lab and follow along.\n\nThis module provides us with the function that enables us to register a hotkey that replaces one typed text with another. For instance, let's replace the text to the email address :\n\nNow execute this line of code, open up any text editor, and write followed by a space. You'll see the magic!\n\nSecond, you can also invoke a callback every time a hotkey is pressed:\n\nrefers to the buttons CTRL, ALT, and the P character pressed at once, so whenever these buttons are pressed at once, the callback will get called. In this case, it will just print a simple message, but you can make anything you want, such as desktop shortcuts.\n\nYou can also check whether a button is actually pressed:\n\nNext, you can also simulate key presses using the function:\n\nThis will press and release the space button. In fact, there is an equivalent function that does the same thing.\n\nYou can also pass multi-keys:\n\nThe operator means we press both buttons at the same time. You can also use multi-step hotkeys:\n\nBut what if you want to press a specific key but you don't want to release it? Well, and functions come into play:\n\nSo this will press the CTRL button and then release it. You can do anything in between, such as sleep for a few seconds, etc.\n\nAnother alternative is the function itself; it has two parameters, and which both default to . If you only want to press the key with , you can simply use to not release the key.\n\nBut now, what if you want to write a long text and not just click specific buttons? would be inefficient. Luckily for us, the function does exactly that: it sends artificial keyboard events to the OS, simulating the typing of a given text; let's try it out:\n\nSetting the delay to 0.1 indicates 0.1 seconds to wait between key presses; this will look fancy, like in hacking movies!\n\nYou can do many more cool things with this module, such as recording keyboard events using function and playing them again using function:\n\nI passed to method to record key presses and releases until I press the button, and then we play these events again using the method.\n\nYou can explore what the list contains by simply printing it, or you may use to get typed strings:\n\nHere is what I typed:\n\nAnother interesting function is function, which accepts a callback that is executed whenever a key is released:\n\nThis will print anything you press on your keyboard. For more information about how to use this function to build a keylogger for educational purposes, check this tutorial.\n\nFinally, if you want to remove all keyboard hooks in use, including hotkeys, abbreviations, etc:\n\nI just introduced the module to you; please check the documentation or just type in a Python interactive shell to learn other functionalities and methods.\n\nYou can also take full control of your mouse. The author of this module made another one for handling the mouse!\n\nWith such modules, you can build desktop automation scripts, keyboard shortcuts, keyloggers (although the author isn't responsible), and much more!\n\nFeel free to visit this site if you want to get instant Python assignment help from experts. A team of Python programmers will do your Python homework with excellence.\n\nAlright, that's it. Check the full code here.\n\nLearn Also: How to Convert Python Files into Executables.\n\nWant to code smarter? Our Python Code Assistant is waiting to help you. Try it now!"
    },
    {
        "link": "https://discuss.python.org/t/using-keyboard-in-my-program/27348",
        "document": "The condition on line 5 will always be true because when you say value == \"this\" or \"that\" it’s interpreted as (value == \"this\") or \"that\" , and is treated as true. Try converting to lowercase and then doing a single comparison. On line 8 it’ll wait for you to maybe type something, but then press Enter. It’ll then check to see whether Escape is being pressed at that time, which is unlikely! The simplest fix would be to cancel if no user name is entered, i.e. just press Enter and nothing else.\n\nRegarding line 8, indeed the program was waiting for “Enter”, but the program gave an error that I entered the wrong user. I replaced Escape, to enter, but the program continued to work after entering enter I tried to replace the if == to if != and it worked. Very illogical (at least for me, but it worked)\n\nIn line 5, there is no way to do what you suggested to do, which is to convert sel_num to lowercase and then doing single comparison. I know that there is a function “lower” in python, but I don’t understand how to use it in my case, i tried to do something like that, I know this can’t work, but i tried. Any ideas what to do?\n\nI think it’s time to show us your current code again. Paste the text in\n\n between code fences: ``` your code goes here ``` There’s a button in the compose bar to make such a section. Also, put some debugging statements into your code. Eg, before the\n\n if-statement which tests , print out both the type and value of\n\n , for example: That may tell you what’s wrong and will give the rest of us some\n\n knowledge of exactly what you’re working with.\n\nOh, it really works! Thank you so much! Secondly, I want to finish it with a keyboard. Any ideas on how I can close my program using only the ‘ESC’ key? Currently, my program finishes when I press Enter, but it doesn’t work correctly. In the ‘if’ statement, I used ‘!=’ which means if I don’t press Enter, the program doesn’t close. However, when I use ‘==’, the program doesn’t recognize my input. Any ideas on how to fix that?"
    },
    {
        "link": "https://mimo.org/glossary/python/time-sleep",
        "document": "The Python function allows you to halt the execution of a program for a specified time. You can use to delay actions in your program, create timed pauses, or control the execution flow.\n\nHow to Use in Python\n\nThe function is part of Python's module. To use it, you first need to import the module. The function takes a single argument representing the number of seconds to delay the execution.\n\nTo use the function, you need to import Python's module. The function takes a single argument representing the number of seconds to halt the execution.\n\nWhen to Use Time Sleep in Python\n\nWhen interacting with APIs, you might need to limit the rate of requests to avoid being blocked. You can use to introduce a delay between API calls, ensuring you don't exceed the rate limit.\n\nIn this example, prevents the program from making too many requests too quickly.\n\nYou can use to add delays to scripts for automating tasks. Using such delays, you can mimic human behavior, prevent task overload, or wait for a resource to become available.\n\nIn this example, adds a 3-second delay to simulate a task taking time to complete.\n\nYou can also use to introduce a startup delay, e.g. if your program needs to wait for a different service to start.\n\nThis example adds a 5-second delay before continuing the program’s execution.\n\nExamples of Using in Python\n\nScripts to scrape web pages might use to avoid overwhelming the server or triggering anti-bot mechanisms.\n\nA countdown timer can be implemented using . This might be useful in a command-line interface or any scenario where you want to display a countdown.\n\nA countdown timer app might use , pausing the program for a second between each decrement.\n\nIn this example, the program counts from 5 to 0, pausing for 1 second between each number.\n\nA server monitoring program needs to check the status of several servers every few minutes to detect downtime. Using and threading, the program can run checks on multiple servers in parallel without overwhelming the system.\n\nThe function allows you to specify sleep intervals down to fractions of a second. Using floating-point numbers with gives you fine-grained control over timing.\n\nWhile helps introduce delays, it's important to remember that the function blocks the entire program from executing. During the sleep period, no other code will execute. To maintain responsiveness, consider using asynchronous programming with .\n\nAsynchronous is better suited for concurrent programming and non-blocking delays.\n\nYou can use to pause multi-threaded applications within individual threads without affecting other threads running in parallel.\n\nUsing in a separate thread keeps your main program responsive while introducing a delay in background tasks."
    },
    {
        "link": "https://stackoverflow.com/questions/92928/time-sleep-sleeps-thread-or-process",
        "document": "It will just sleep the thread except in the case where your application has only a single thread, in which case it will sleep the thread and effectively the process as well.\n\nThe python documentation on doesn't specify this however, so I can certainly understand the confusion!"
    },
    {
        "link": "https://realpython.com/python-sleep",
        "document": "Have you ever needed to make your Python program wait for something? Most of the time, you’d want your code to execute as quickly as possible. But there are times when letting your code sleep for a while is actually in your best interest.\n\nFor example, you might use a Python call to simulate a delay in your program. Perhaps you need to wait for a file to upload or download, or for a graphic to load or be drawn to the screen. You might even need to pause between calls to a web API, or between queries to a database. Adding Python calls to your program can help in each of these cases, and many more!\n\nIn this tutorial, you’ll learn how to add Python calls with:\n\nThis article is intended for intermediate developers who are looking to grow their knowledge of Python. If that sounds like you, then let’s get started!\n\nPython has built-in support for putting your program to sleep. The module has a function that you can use to suspend execution of the calling thread for however many seconds you specify. Here’s an example of how to use : If you run this code in your console, then you should experience a delay before you can enter a new statement in the REPL. Note: In Python 3.5, the core developers changed the behavior of slightly. The new Python system call will last at least the number of seconds you’ve specified, even if the sleep is interrupted by a signal. This does not apply if the signal itself raises an exception, however. You can test how long the sleep lasts by using Python’s module: python3 -m timeit -n 3 loops, best of 5: 3 sec per loop Here, you run the module with the parameter, which tells how many times to run the statement that follows. You can see that ran the statement 3 times and that the best run time was 3 seconds, which is what was expected. The default number of times that will run your code is one million. If you were to run the above code with the default , then at 3 seconds per iteration, your terminal would hang for approximately 34 days! The module has several other command line options that you can check out in its documentation. Let’s create something a bit more realistic. A system administrator needs to know when one of their websites goes down. You want to be able to check the website’s status code regularly, but you can’t query the web server constantly or it will affect performance. One way to do this check is to use a Python system call: Here you create , which takes a URL as its argument. The function then attempts to open that URL with . If there’s an or , then the program catches it and prints out the error. (In a live environment, you would log the error and probably send out an email to the webmaster or system administrator.) If no errors occur, then your code prints out that all is well. Regardless of what happens, your program will sleep for 60 seconds. This means that you only access the website once every minute. The URL used in this example is bad, so it will output the following to your console once every minute: Go ahead and update the code to use a known good URL, like . Then you can re-run it to see it work successfully. You can also try to update the code to send an email or log the errors. For more information on how to do this, check out Sending Emails With Python and Logging in Python.\n\nThere are times when you need to retry a function that has failed. One popular use case for this is when you need to retry a file download because the server was busy. You usually won’t want to make a request to the server too often, so adding a Python call between each request is desirable. Another use case that I’ve personally experienced is where I need to check the state of a user interface during an automated test. The user interface might load faster or slower than usual, depending on the computer I’m running the test on. This can change what’s on the screen at the moment my program is verifying something. In this case, I can tell the program to sleep for a moment and then recheck things a second or two later. This can mean the difference between a passing and failing test. You can use a decorator to add a Python system call in either of these cases. If you’re not familiar with decorators, or if you’d like to brush up on them, then check out Primer on Python Decorators. Let’s look at an example: is your decorator. It accepts a value and the number of times it should , which defaults to 3. Inside is another function, , which accepts the decorated function. Finally, the innermost function accepts the arguments and keyword arguments that you pass to the decorated function. This is where the magic happens! You use a loop to retry calling the function. If there’s an exception, then you call , increment the counter, and try running the function again. Now rewrite to use your new decorator: # Re-raise the exception for the decorator # Re-raise the exception for the decorator Here, you decorate with a of 3 seconds. You’ve also removed the original loop, as well as the old call to . The decorator now takes care of this. One other change you’ve made is to add a inside of the exception handling blocks. This is so that the decorator will work properly. You could write the decorator to handle these errors, but since these exceptions only apply to , you might be better off keeping the decorator the way it is. That way, it will work with a wider variety of functions. Note: If you’d like to brush up on exception handling in Python, then check out Python Exceptions: An Introduction. There are a few improvements that you could make to your decorator. If it runs out of retries and still fails, then you could have it re-raise the last error. The decorator will also wait 3 seconds after the last failure, which might be something you don’t want to happen. Feel free to try these out as an exercise!\n\nThere are also times when you might want to add a Python call to a thread. Perhaps you’re running a migration script against a database with millions of records in production. You don’t want to cause any downtime, but you also don’t want to wait longer than necessary to finish the migration, so you decide to use threads. Note: Threads are a method of doing concurrency in Python. You can run multiple threads at once to increase your application’s throughput. If you’re not familiar with threads in Python, then check out An Intro to Threading in Python. To prevent customers from noticing any kind of slowdown, each thread needs to run for a short period and then sleep. There are two ways to do this:\n• Use as before.\n• Use from the module. Let’s start by looking at . The Python Logging Cookbook shows a nice example that uses . Python’s module is thread-safe, so it’s a bit more useful than statements for this exercise. The following code is based on this example: Here, you use Python’s module to create two threads. You also create a logging object that will log the to stdout. Next, you start both threads and initiate a loop to log from the main thread every so often. You use to catch the user pressing + . Try running the code above in your terminal. You should see output similar to the following: As each thread runs and then sleeps, the logging output is printed to the console. Now that you’ve tried an example, you’ll be able to use these concepts in your own code. The module provides an that you can use like . However, has the added benefit of being more responsive. The reason for this is that when the event is set, the program will break out of the loop immediately. With , your code will need to wait for the Python call to finish before the thread can exit. The reason you’d want to use here is because is non-blocking, whereas is blocking. What this means is that when you use , you’ll block the main thread from continuing to run while it waits for the call to end. solves this problem. You can read more about how all this works in Python’s threading documentation. Here’s how you add a Python call with : In this example, you create and pass it to . (Recall that in the previous example, you instead passed a dictionary.) Next, you set up your loops to check whether or not is set. If it’s not, then your code prints a message and waits a bit before checking again. To set the event, you can press + . Once the event is set, will return and the loop will break, ending the program. Note: If you’d like to learn more about dictionaries, then check out Dictionaries in Python. Take a closer look at the code block above. How would you pass in a different sleep time to each worker thread? Can you figure it out? Feel free to tackle this exercise on your own!\n\nAsynchronous capabilities were added to Python in the 3.4 release, and this feature set has been aggressively expanding ever since. Asynchronous programming is a type of parallel programming that allows you to run multiple tasks at once. When a task finishes, it will notify the main thread. is a module that lets you add a Python call asynchronously. If you’re unfamiliar with Python’s implementation of asynchronous programming, then check out Async IO in Python: A Complete Walkthrough and Python Concurrency & Parallel Programming. Here’s an example from Python’s own documentation: In this example, you run and have it sleep for one second between two calls. Here’s a more compelling example from the Coroutines and Tasks portion of the documentation: In this code, you create a worker called that takes in the number of seconds to and the to print out. Then, you use Python’s keyword to wait for the code to run. is required here because has been marked as an function, so you can’t call it like you would a normal function. When you run this code, your program will execute 3 times. The code will wait for 1, 2, and 3 seconds, for a total wait time of 6 seconds. You can also rewrite the code so that the tasks run in parallel: Now you’re using the concept of tasks, which you can make with . When you use tasks in , Python will run the tasks asynchronously. So, when you run the code above, it should finish in 3 seconds total instead of 6.\n\nCommand-line applications aren’t the only place where you might need to add Python calls. When you create a Graphical User Interface (GUI), you’ll occasionally need to add delays. For example, you might create an FTP application to download millions of files, but you need to add a call between batches so you don’t bog down the server. GUI code will run all its processing and drawing in a main thread called the event loop. If you use inside of GUI code, then you’ll block its event loop. From the user’s perspective, the application could appear to freeze. The user won’t be able to interact with your application while it’s sleeping with this method. (On Windows, you might even get an alert about how your application is now unresponsive.) Fortunately, there are other methods you can use besides . In the next few sections, you’ll learn how to add Python calls in both Tkinter and wxPython. is a part of the Python standard library. It may not be available to you if you’re using a pre-installed version of Python on Linux or Mac. If you get an , then you’ll need to look into how to add it to your system. But if you install Python yourself, then should already be available. You’ll start by looking at an example that uses . Run this code to see what happens when you add a Python call the wrong way: Once you’ve run the code, press the button in your GUI. The button will stick down for three seconds as it waits for to finish. If the application had other buttons, then you wouldn’t be able to click them. You can’t close the application while it’s sleeping, either, since it can’t respond to the close event. To get to sleep properly, you’ll need to use : Here you create an application that is 400 pixels wide by 400 pixels tall. It has no widgets on it. All it will do is show a frame. Then, you call where is a reference to the object. takes two arguments:\n• The number of milliseconds to sleep\n• The method to call when the sleep is finished In this case, your application will print a string to stdout after 3 seconds. You can think of as the version of , but it also adds the ability to call a function after the sleep has finished. You could use this functionality to improve user experience. By adding a Python call, you can make the application appear to load faster and then start some longer-running process after it’s up. That way, the user won’t have to wait for the application to open. There are two major differences between wxPython and Tkinter:\n• wxPython has many more widgets.\n• wxPython aims to look and feel native on all platforms. The wxPython framework is not included with Python, so you’ll need to install it yourself. If you’re not familiar with wxPython, then check out How to Build a Python GUI Application With wxPython. In wxPython, you can use to add a Python call: Here, you subclass directly and then call . This function takes the same parameters as Tkinter’s :\n• The number of milliseconds to sleep\n• The method to call when the sleep is finished When you run this code, you should see a small blank window appear without any widgets. After 4 seconds, you’ll see the string printed to stdout. One of the benefits of using is that it’s thread-safe. You can use this method from within a thread to call a function that’s in the main wxPython application."
    },
    {
        "link": "https://analyticsvidhya.com/blog/2024/01/time-sleep-in-python",
        "document": "In the programming realm, precise timing is critical. Whether scripting, implementing timers, or simulating real-time processes, having control over code execution timing is indispensable. Enter the time.sleep() function in Python—an essential tool for introducing pauses in your code. This article delves into the intricacies of this potent function, covering advanced usage, common pitfalls, and troubleshooting techniques. Practical examples and use cases are provided to guide you in effectively leveraging time.sleep() in your projects.\n\nThe time.sleep() function, a built-in Python feature, enables you to halt code execution for a specified duration. It proves beneficial for introducing delays, synchronizing threads or processes, and simulating real-time processes, providing control over code timing and flow.\n\nThe syntax of the time.sleep() function is straightforward:\n\nIn the programming realm, precise timing is critical. Whether scripting, implementing timers, or simulating real-time processes, having control over code execution timing is indispensable. Enter the time.sleep() function in Python—an essential tool for introducing pauses in your code. This article delves into the intricacies of this potent function, covering advanced usage, common pitfalls, and troubleshooting techniques. Practical examples and use cases are provided to guide you in effectively leveraging time.sleep() in your projects.\n\nHere, “seconds” is the parameter specifying the delay duration in seconds, allowing for floating-point values for fractional seconds. For instance, time.sleep(2.5) pauses execution for 2.5 seconds.\n\nA primary use case of time.sleep() is inserting delays into your code. Consider a script requiring a pause before executing the next line.\n\nThis example introduces a 2-second delay before executing the second line, useful for creating pauses between actions or simulating real-world scenarios.\n\nAnother crucial aspect involves handling exceptions with time.sleep(). When encountering an exception, introducing a delay before retrying the operation can prevent system overload or further errors:\n\nHere, time.sleep(5) introduces a 5-second delay before attempting the operation again, beneficial for scenarios like network requests or database connections facing temporary issues.\n\nAn advanced use case involves implementing timers and delays using time.sleep(). For instance, creating a countdown timer displaying remaining time after each second:\n\nHere, time.sleep(1) introduces a 1-second delay between displaying each remaining time, showcasing the versatility of time.sleep() in timer implementation.\n\nTime.sleep() can be creatively used for animation effects by introducing delays between frames. For example, simulating the movement of a bouncing ball:\n\nIn this instance, time.sleep(0.5) introduces a 0.5-second delay between frames, creating a smooth animation effect.\n\nThe function proves useful in simulating real-time processes. Suppose you’re modeling the behavior of a traffic signal:\n\nHere, the loop with time.sleep() simulates a traffic signal’s behavior with delays between each signal change, adding a realistic touch to the simulation.\n\nTime.sleep() aids in synchronizing multiple threads or processes. In scenarios requiring coordinated actions, introducing delays using time.sleep() ensures synchronization:\n\nIn this example, time.sleep(2) introduces a 2-second delay between starting two threads, synchronizing their actions.\n\nWhile potent, time.sleep() may lead to unexpected behavior, especially if used in a loop without considering other operation times. To overcome this, use the time module’s time.perf_counter() to accurately measure elapsed time.\n\nExcessive delays can hinder code responsiveness. Analyze and determine optimal delay times to avoid making your code less efficient.\n\nConsider interruptions and signals when using time.sleep(). For example, use the signal module to gracefully handle keyboard interrupts (Ctrl+C) by catching the KeyboardInterrupt exception.\n\nDelaying script execution is a common use case. For example, introducing a 3-second delay before executing specific code:\n\nAnother practical use is creating a countdown timer, displaying remaining time after each second:\n\nSimulating user interaction is achievable using time.sleep(). For instance, automating actions on a website with delays between each action.\n\nImplementing a rate limiter is another practical use. For instance, limiting requests per second in a web scraping project:\n\nIn Python, time.wait() is another function for introducing delays. However, a crucial difference exists: time.sleep() pauses the current thread, while time.wait() halts the entire program. In most cases, time.sleep() is preferred for introducing delays.\n\nWhen dealing with multiple threads or processes, time.sleep() impact on overall performance should be considered. Inefficient resource utilization can be addressed by exploring alternatives such as threading.Timer or multiprocessing.Queue for delays without blocking other threads or processes.\n\nWhile time.sleep() is versatile, alternative approaches exist. For example, asyncio for asynchronous programming provides advanced features for managing delays and concurrency. Libraries like gevent and Twisted offer alternative ways to handle delays and asynchronous tasks.\n\nThis article delved into the Python time.sleep() function and its diverse use cases. By mastering time.sleep(), you gain control over the timing and flow of your Python programs, enhancing efficiency and responsiveness. Experiment with time.sleep() to unlock the full potential of your projects.\n\nIf you found this article informative, then please share it with your friends and comment below your queries and feedback. I have listed some amazing Python articles below for your reference:\n• Datetime in Python: A Comprehensive Guide to Working with Dates and Times"
    },
    {
        "link": "https://stackoverflow.com/questions/5114292/break-interrupt-a-time-sleep-in-python",
        "document": "I need to break from time.sleep() using ctrl c.\n\nIn the above code when the control enters time.sleep function an entire 60 seconds needs to elapsed for python to handled the CTRL C\n\nIs there any elegant way to do it. such that I can interrupt even when the control is in time.sleep function\n\nI was testing it on a legacy implementation which uses python 2.2 on windows 2000 which caused all the trouble . If I had used a higher version of python CTRL C would have interrupted the sleep() . I did a quick hack by calling sleep(1) inside a for loop . which temporarily fixed my issue"
    }
]