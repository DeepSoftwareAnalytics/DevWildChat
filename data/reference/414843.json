[
    {
        "link": "https://github.com/bumptech/glide/issues/3189",
        "document": "I need to showing image in round corner view. Can it possible to make round corner with glide library?\n\n If it is possible then how can we implement it?"
    },
    {
        "link": "https://stackoverflow.com/questions/45186181/glide-rounded-corner-transform-issue",
        "document": "As you can see in my answer here, it can also be achieved using Glide's Generated API. It takes some initial work but then gives you all the power of Glide with the flexibility to do anything because you write the actual code so I think it's a good solution for the long run. Plus, the usage is very simple and neat.\n\nThen create Glide's app module class to trigger the annotation processing:\n\nThen create the Glide extension which actually does the work. You can customize it to do whatever you want:\n\nAfter adding these files, build your project.\n\nThen use it in your code like this:"
    },
    {
        "link": "https://stackoverflow.com/questions/59290332/glide-different-rounded-corners-in-recyclerview",
        "document": "I try to load a bunch of images into RecyclerView with the help of Glide library (4.9.0). My code for this is like: ViewHolder\n\nBut when I scroll items, I see they have different rounded corners size like this\n\nDoes anyone know what's the problem? Thanks in advance!"
    },
    {
        "link": "https://github.com/bumptech/glide/issues/4638",
        "document": "If I don't load the source to the ImageView with Glide, I see corners are matched each other (see screenshot 1)\n\nBut when I using\n\nI see in some images the corners don't match (see screenshot 2)\n\nI don't understand why this is happening. I will be glad for any help.\n\nGlide load line / (if any) / list Adapter code (if any):"
    },
    {
        "link": "https://geeksforgeeks.org/image-loading-caching-library-android-set-2",
        "document": "Glide, like Picasso, can load and display images from many sources, while also taking care of caching and keeping a low memory impact when doing image manipulations. Official Google apps (like the app for Google I/O 2015) are using Glide. In this article, we’re going to explore the functionalities of Glide and why it’s superior in certain aspects.\n\nGlide is an Image Loader Library for Android developed by bumptech and is a library that is recommended by Google. It has been used in many Google open source projects including Google I/O 2014 official application. It provides animated GIF support and handles image loading/caching. Animated GIF support is currently not implemented in Picasso. Yes, images play a major role in making the UI of an App more interactive and user-friendly too. So, as an Android Developer, we should take care of using images in App. We should handle the different aspects of an image like the slow unresponsive image, memory issues, loading errors, and many more. If you are not handling these aspects in your application, then your app will make a bad impression on your users.\n\nHow to Use Glide Android Library?\n\nFor using Glide in the android project, we have to add the dependency in build.gradle.kts file. So, For adding dependency open app/build.gradle file in the app folder in your Android project and add the following lines inside it.\n\nNow sync your gradle once again. If you get any type of error then you may check the error on stackoverflow.\n\nNow add Internet Permission inside the AndroidManifest.xml file. Open the manifest.xml file and add the following line.\n\nAdd the following in the activity_main.xml file\n\nNow Navigate to the MainActivity file and Add the following code block to the onCreate() method.\n\n\n\nIn the first line, we are getting the ImageView instance from the layout. And then load the image from the above remote URL using Glide library.\n\nFor any real-time application, we must think of all possible cases. In the above code, we just store the image from the server link into the imageView.There are some more cases.\n\nHere we are using Glide to fetch a remote image and overriding(resizing) it using before displaying it in an image view.\n\nIf your application relies on remote assets, then it’s important to add a fallback in the form of a placeholder image. The placeholder image is shown immediately and replaced by the remote image when Glide has finished fetching it.\n\nWe already saw how the placeholder method works, but there’s also an error method that accepts a placeholder image. Glide will try to download the remote image three times and display the error placeholder image if it was unable to fetch the remote asset."
    },
    {
        "link": "https://geeksforgeeks.org/how-to-use-picasso-image-loader-library-in-android",
        "document": "Picasso is open source and one of the widely used image download libraries in Android. It is created and maintained by Square. It is among the powerful image download and caching library for Android. Picasso simplifies the process of loading images from external URLs and displays them on your application. For example, downloading an image from the server is one of the most common tasks in any application. And it needs quite a larger amount of code to achieve this via android networking API. By using Picasso, you can achieve this with a few lines of code.\n\nHow to Use Picasso Android Library?\n\nCreate an empty activity Android Studio project. Refer to Android | How to Create/Start a New Project in Android Studio? to know how to create an empty activity Android Studio project.\n\nFor using Picasso in the android project, we have to add a dependency in the app-level gradle file. So, For adding dependency open app/build.gradle file in the app folder in your Android project and add the following lines inside it. Add these lines inside dependencies{}.\n\nNow click on the “Sync Now” button. So that the Android Studio downloads the required dependency files. If you get any type of error then you may check the error on stackoverflow.\n\nNow add Internet Permission inside the AndroidManifest.xml file. Open the manifest.xml file and add the following line.\n\nOpen the layout file for the activity_main.xml file. We need to add an ImageView to the application’s main layout.\n\nNow Navigate to the MainActivity file and add the following block of code. In the first line, we are getting the ImageView instance from the layout. And then load the image from the remote URL mentioned in the Java/Kotlin code using the Picasso library.\n\nMore Functionalities of the Picasso Library\n\nFor any real-time application, we must think of all possible cases. In the above code, we just download the image from the server link. But how to display that image in the app.How to resize it and what if the image loading failed? We need to have another image showing an error message that image loading failed. This all matters for an app developer. The following code changes are made in the MainActivity file.\n\nHere we are using Picasso to fetch a remote image and resize it before displaying it in an ImageView.\n\nIf your application relies on remote assets, then it’s important to add a fallback in the form of a placeholder image. The placeholder image is shown immediately and replaced by the remote image when Picasso has finished fetching it.\n• None Picasso supports two types of placeholder images. We already saw how the placeholder method works, but there’s also an error method that accepts a placeholder image. Picasso will try to download the remote image three times and display the error placeholder image if it was unable to fetch the remote asset.\n• None The error image will be shown, in this case when there is no internet connectivity for the application. Instead of loading the image from the URL, the Picasso library shows the error image.\n\nIf you are not sure about the size of the image loaded from the remote server that what will be the size of the image. So in this code snippet image will make the image center cropped.\n\nTroubleshooting while loading an image using Picasso Library\n\nIf an image or set of images aren’t loading, make sure to check the Android monitor log in Android Studio. There’s a good chance you might see a java.lang.OutOfMemoryError “Failed to allocate a […] byte allocation with […] free bytes” or an Out of memory on a 51121168-byte allocation. This is quite common and means that you are loading one or more large images that have not been properly resized.\n\nFirst, you have to find which image(s) being loaded are likely causing this error. For any given Picasso call, we can fix this by one or more of the following approaches:\n• None Add an explicit width or height to the ImageView by setting layout_width=500dp in the layout file and then be sure to call fit() during your load: Picasso.with(…).load(imageUri).fit().into(…)\n• None Open up your static placeholder or error images and make sure their dimensions are relatively small (< 500px width). If not, resize those static images and save them back to your project.\n• None Try removing android:adjustViewBounds=”true” from your ImageView if present and if you are calling .fit() rather than using .resize(width, height)\n• None Call .resize(width, height) during the Picasso load and explicitly set a width or height for the image such as: \n\nPicasso.with(…).load(imageUri).resize(500, 0).into(…). By passing 0, the correct height is automatically calculated."
    },
    {
        "link": "https://guides.codepath.com/android/Displaying-Images-with-the-Picasso-Library",
        "document": "Displaying images is easiest using a third party library such as Picasso from Square which will download and cache remote images and abstract the complexity behind an easy to use DSL.\n\nBefore Using Picasso , do not forget to add internet permission in the manifest file .\n\nIt will allow your app to use internet for downloading images.\n\nNote: there is a bug with the current version of Picasso that prevents large images (i.e. 10MB) from being loaded, especially with newer camera phones that have larger resolutions. If you are experiencing this issue, you may need to upgrade to the Picasso 2.6.0 snapshot. See the troubleshooting guide to confirm.\n\nTo use this snapshot version, you need to add a custom separate Maven repo first:\n\nWe can then load a remote image into any with:\n\nIf you are using the latest version of Picasso (2.71828) then remember thatmethods is deprecated and is replaced withmethod\n\nWe can do more sophisticated work with Picasso configuring placeholders, error handling, adjusting size of the image, and scale type with:\n\nBe sure to use to resize the image before loading into the ImageView. Otherwise, you will consume extra memory, experience sluggish scrolling, or encounter out of memory issues if you render a lot of pictures. In addition to and , there is also other configuration options such as and .\n\nPlaceholder Note: Placeholders and error images are not resized and must be fairly small images. Open up your static placeholder or error images in your drawable folders and make sure that the dimensions of the images are relatively small (i.e < 500px width). If not, resize those static images first and save them back to the project.\n\nWe can resize an image with respect to the aspect ratio using and specifying 0 for the other dimension as outlined here:\n\nWe can combine resizing with certain transforms to make the image appear differently. For example, we can do a center cropping with:\n\nTransform options include (Crops an image inside of the bounds), (Centers an image inside of the bounds), (Attempt to resize the image to fit exactly into the target). See this post for more details.\n\nIf an image or set of images aren't loading, make sure to check the Android monitor log in Android Studio. There's a good chance you might see an or a Out of memory on a 51121168-byte allocation. . This is quite common and means that you are loading one or more large images that have not been properly resized.\n\nFirst, you have to find which image(s) being loaded are likely causing this error. For any given call, we can fix this by one or more of the following approaches:\n• Add an explicit width or height to the by setting in the layout file and then be sure to call during your load:\n• Call during the Picasso load and explicitly set a width or height for the image such as: . By passing 0, the correct height is automatically calculated.\n• Try removing from your if present if you are calling rather than using\n• Open up your static placeholder or error images and make sure their dimensions are relatively small (< 500px width). If not, resize those static images and save them back to your project.\n\nApplying these tips to all of your Picasso image loads should resolve any out of memory issues. As a fallback, you might want to open up your and then add to your manifest:\n\nNote that this is not generally a good idea, but can be used temporarily to trigger less out of memory errors.\n\nIf you experience errors loading images, you can attach a listener to the object to print the stack trace.\n\nWe can add a progress bar or otherwise handle callbacks for an image that is loading with:\n\nIf we wish to readjust the ImageView size after the image has been retrieved, we first define a object that governs how the Bitmap is handled:\n\nNext, we can use the with a Picasso call with:\n\nYou can still use all normal Picasso options like , , etc.\n\nNote: The object must be stored as a member field or method and cannot be an anonymous class otherwise this won't work as expected. The reason is that Picasso accepts this parameter as a weak memory reference. Because anonymous classes are eligible for garbage collection when there are no more references, the network request to fetch the image may finish after this anonymous class has already been reclaimed. See this Stack Overflow discussion for more details.\n\nIn other words, you are not allowed to do .\n\nWe can use this custom Target approach to create a staggered image view using .\n\nWe first need to replace the with the DynamicHeightImageView.java that enables us to update the width and height while still preserving the aspect ratio when new images are replaced with old recycled views. We can then set the ratio before the image has loaded if we already know the height:width ratio using as shown below:\n\nAlternatively, we can set the ratio after the bitmap has loaded if we don't know that ratio ahead of time. To avoid using an anonymous class, we will implement the interface on the ViewHolder class itself for RecyclerView. When the callback is fired, we will calculate and update the image aspect ratio:\n\nWith either of these approaches the staggered grid of images should now render as expected.\n\nYou can also use this third-party library for other transformations, such as blur, crop, color, and mask.\n\n\n\nTo do a rounded corner transformation, you would do the following:"
    },
    {
        "link": "https://stackoverflow.com/questions/58900434/how-to-implement-picasso-image-loading-library-in-android",
        "document": "I am new to android I have tried Glide library with YouTube tutorial, but I want to use Picasso library.\n\nCode I am using currently:"
    },
    {
        "link": "https://sitepoint.com/hassle-free-image-loading-in-android-with-picasso-from-square",
        "document": "\n• Picasso from Square is a simple, efficient library for image loading in Android, supporting memory and data optimization and reducing the need for boilerplate code.\n• Adding Picasso to an Android project involves including a specific line inside dependencies in build.gradle and syncing Gradle to download the library.\n• Picasso allows for various methods of image display, including resizing, center cropping, and setting image priorities. It can also use placeholders for larger images and skip cache lookup to optimize processing of a request.\n• Picasso’s features include automatic image recycling, download cancellation in an adapter, complex image transformations, and seamless display of images in different resolutions, making it a popular tool for Android developers.\n\nImages add flavor, character and delight to your app interfaces. Image loading in Android typically involves adding many lines of code boilerplate code. Picasso from Square is one of the simplest libraries to use and includes memory and data optimization, allowing you to choose not to save the images in cache after they are downloaded.\n\nIn this tutorial I will show how to download images from external locations, using a file path, image resource id or any URI in your Android application using Picasso.\n\nYou can find the project on GitHub. You can download the drawables used in the project here, make sure you add them to the drawables folder.\n\nNote: I am using version 2.5.2 of Picasso.\n\nCreate a new Project in Android Studio and add this line inside in build.gradle (Module: app):\n\nSync Gradle in your project to download the library.\n\nIn this project I am going to use a single activity class and layout resource file.\n\nThe interface of this sample application includes three s, inside a vertical-oriented linear layout. Each image will be downloaded, saved and displayed using a different method of the library.\n\nThe code for is below (don’t forget to change to your package name):\n\nThe first step is creating a reference in your Java code for each of the above . Add the following below the class declaration:\n\nBelow this code, create variables and give them the value of any image URI. Since you are using three s, an URI for each is needed:\n\nInside the method, create the references for the :\n\nThe simplest way to download an image, save it in device memory and display it is with this line of code, added below the image references:\n\nYou need to reference each instance of Picasso inside the application context, using . Then can accept a , , or of any image as a parameter. places the image in the center of the and uses to stretch the image according to the size. You can also use to set the explicit size of the downloaded image. The last method, , accepts the to display the image as a parameter.\n\nThis was the shortest line of code for displaying an image from an external source.\n\nThis is the shortest line of code to load an image, but Picasso lets you use different methods to better use network data, device memory and processor.\n\nA more customized example to do the same is:\n\nWith larger images, you can use a which displays a dummy image until the desired one has downloaded and ready to display. You can use the same technique to avoid empty s when loading encounters an error.\n\nBy skipping , Picasso avoids cache look up while processing a request. This can apply in cases when you are sure that the image cannot be found in cache. Use to not store the image in cache after it has downloaded.\n\nEach image can have its own : , or .\n\nYou are going to display the using a which has three main methods to determine the status of the image downloading process. Add this code after the previous Picasso calls:\n\nThe overridden methods of the allow you to better manage the process. You can set the parameters of these methods by calling them from outside of the . You can set the displayed when downloading fails using:\n\nThe next line creates an instance of Picasso, downloading the image located at IMAGE_2.\n\nYou will download the third image using a ‘Picasso Builder’. This will help distinguish where this image comes from. If the image is found in device memory or disk, Picasso won’t download it but use the currently available one. By creating a Builder, you can display Debug Indicators that show the image source.\n\nThe builder supports another method, called when an image load fails.\n\nThis time you are creating an instance of Picasso using the Builder. As this image is wide, you need to resize the image to keep the correct ratio. A placeholder can be a good element for the application user interface because we can never predict the connection speed and time required to download each image.\n\nIn this tutorial I showed you how easy the Picasso library is to configure and use allowing you to download, display and format images in a few lines of code.\n\nI hope you find it as easy to use as I do and if you have any comments or questions, please let me know below.\n\nFrequently Asked Questions (FAQs) about Hassle-Free Image Loading in Android with Picasso\n\nWhat is Picasso and why is it used in Android development? Picasso is a powerful image downloading and caching library for Android applications. It simplifies the process of displaying images from external locations, such as URLs, and reduces the amount of boilerplate code that developers need to write. Picasso automatically handles image recycling and download cancellation in an adapter, complex image transformations, and seamless display of images in different resolutions. It’s a go-to tool for many Android developers due to its simplicity and efficiency. How does Picasso compare to other image loading libraries? Picasso is known for its simplicity and ease of use. Unlike some other libraries, Picasso allows for hassle-free image loading with minimal setup or configuration. It also provides automatic memory and disk caching, which can significantly improve the performance of your app. However, other libraries like Glide or Fresco might offer more advanced features or better performance in certain scenarios. The choice of library often depends on the specific needs of your project. How do I add Picasso to my Android project? To add Picasso to your Android project, you need to include the following dependency in your build.gradle file: . After syncing your project with the Gradle files, you can start using Picasso to load images in your app. How can I load an image from a URL with Picasso? Loading an image from a URL with Picasso is straightforward. You just need to call the method with the URL of the image and then call the method with the ImageView where you want to display the image. Here’s an example: . Can I use Picasso to load images from resources or assets? Yes, Picasso can load images from resources or assets. To load an image from resources, you can use the method with the resource ID: . To load an image from assets, you need to create a pointing to the asset and pass it to the method: . Picasso automatically caches downloaded images in memory and on disk. This means that once an image has been downloaded, it can be displayed instantly the next time it’s needed, without requiring another network request. Picasso’s caching strategy is designed to balance memory usage and performance, ensuring that your app remains responsive and efficient. Yes, Picasso supports a variety of image transformations, such as resizing, cropping, or rotating images. You can apply transformations by calling the method with a object. Picasso also includes a few built-in transformations, like and , which can be used to adjust the size and aspect ratio of the image to fit the ImageView. What happens if Picasso fails to load an image? If Picasso fails to load an image, it will simply leave the ImageView empty. However, you can provide a placeholder image that will be displayed while the image is loading or if the loading fails. You can set a placeholder image by calling the method with the resource ID of the image: . Can I cancel an image load request with Picasso? Yes, you can cancel an image load request with Picasso. If you have an ImageView that is no longer in use, for example because the user has scrolled it off screen, you can cancel any pending load request for that ImageView by calling the method: . This can help to save resources and improve the performance of your app. Is Picasso suitable for large-scale or complex Android projects? Picasso is a powerful and flexible library that can be used in a wide range of Android projects, from simple apps to complex, large-scale projects. Its simplicity and ease of use make it a good choice for beginners, while its robust set of features and efficient performance make it suitable for more advanced or demanding use cases. However, for very large-scale or complex projects, other libraries like Glide or Fresco might offer more advanced features or better performance in certain scenarios."
    },
    {
        "link": "https://stackoverflow.com/questions/39571458/picasso-image-loading-and-resizing",
        "document": "will only the image once because it will be cached (specifically stored in the LruCache) unless the cache reached the maximum limit your cache will remove an image so that it can store new ones. Accessing the deleted image again will trigger another call but for those image that are still in cache Picasso will not need to perform a .\n\nIf you have a full control to your server it would be better if you can create an API that has customizable image-size-parameter. Let say you only need a thumbnail image therefore you will just provide the width-height of your image rather than downloading a large image which do not give benefits on thumbnails plus you save some bandwidth."
    },
    {
        "link": "https://stackoverflow.com/questions/2521959/how-to-scale-an-image-in-imageview-to-keep-the-aspect-ratio",
        "document": "In Android, I defined an 's to be (which takes up the full width of the phone). If the image I put to is bigger than the , Android will scale it, right? But what about the height? When Android scales the image, will it keep the aspect ratio? What I find out is that there is some white space at the top and bottom of the when Android scales an image which is bigger than the . Is that true? If yes, how can I eliminate that white space?"
    },
    {
        "link": "https://geeksforgeeks.org/imageview-scaletype-in-android-with-example",
        "document": "ScaleType is used for uniformly scaling the image bounds to the ImageView. Android ImageView provides various types of ScaleType for different configurations.\n\nNow, we will look at each of these ScaleType in detail. For exploring these scale types we will use the GeeksforGeeks logo as our image resource also set the background color of ImageView as black for the reference purpose.\n\nThis scale type will center the image inside the view. But, it does not perform any scale to the image. Below is the code for the CENTER scale type.\n\nThis scale type scale the image uniformly .i.e., maintain the image’s aspect ratio in order to make the dimensions(width and height) equal to or larger than the ImageView dimension.\n\nCENTER_INSIDE will center the image inside the ImageView container. This scale type does not match the image edge to the edge of the view.\n\nIt will scale the image from the center. FIT_CENTER makes sure that the image is completely fit inside the ImageView and the image’s vertical or the horizontal axis is going to be exactly the same as the view.\n\nIt is used to scale the image file to the end of the view(ImageView). This scale type scale the image from the end of the container.\n\nThis is used to scale the image to the start of the container. FIT_START scale the image from the start of the container.\n\nFIT_XY done the scaling using the fill attribute. It will fill the image from the X and Y coordinates of ImageView.\n\nIt is used to scale the image using the image matrix when drawing. It is recommended to use whenever you want to customize the way you want to rotate the image or scale the image etc.\n\nIn this example, we will perform scaling using the various scale type attributes on the click event listener of a button and shows the image with various scale type, and also toast a message for the name of the scale type.\n\nTo create a new project in Android Studio please refer to How to Create/Start a New Project in Android Studio. Note that select Java as the programming language.\n\nBefore moving further, we will add the following color attributes in our colors.xml resource file. Go to res > values > colors.xml and add them.\n\nIn this step, we will create the layout for our application. For this, we are using the buttons for various scale types. Below is the code for the activity_main.xml file.\n\nIn this step, we will initialize our ImageView and Buttons and attach a listener to them. On completion of the listener event, a toast message will be shown about the name of the scale type. We can also setup the scale type using java code. Below is the code for the MainActivity.java file."
    },
    {
        "link": "https://developer.android.com/reference/android/widget/ImageView.ScaleType",
        "document": "Options for scaling the bounds of an image to the bounds of this view.\n\nScale the image uniformly (maintain the image's aspect ratio) so that both dimensions (width and height) of the image will be equal to or larger than the corresponding dimension of the view (minus padding).\n\nScale the image uniformly (maintain the image's aspect ratio) so that both dimensions (width and height) of the image will be equal to or less than the corresponding dimension of the view (minus padding).\n\nCompares this enum with the specified object for order. Returns true if the specified object is equal to this enum constant. Returns the Class object corresponding to this enum constant's enum type. Returns the name of this enum constant, exactly as declared in its enum declaration. Returns the ordinal of this enumeration constant (its position in its enum declaration, where the initial constant is assigned an ordinal of zero). Returns the name of this enum constant, as contained in the declaration. Returns the enum constant of the specified enum class with the specified name. Creates and returns a copy of this object. Indicates whether some other object is \"equal to\" this one. Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. Returns the runtime class of this . Returns a hash code value for the object. Wakes up a single thread that is waiting on this object's monitor. Wakes up all threads that are waiting on this object's monitor. Causes the current thread to wait until it is awakened, typically by being notified or interrupted, or until a certain amount of real time has elapsed. Causes the current thread to wait until it is awakened, typically by being notified or interrupted, or until a certain amount of real time has elapsed. Causes the current thread to wait until it is awakened, typically by being notified or interrupted. Compares this object with the specified object for order.\n\nScale the image uniformly (maintain the image's aspect ratio) so that both dimensions (width and height) of the image will be equal to or larger than the corresponding dimension of the view (minus padding). The image is then centered in the view. From XML, use this syntax: .\n\nScale the image uniformly (maintain the image's aspect ratio) so that both dimensions (width and height) of the image will be equal to or less than the corresponding dimension of the view (minus padding). The image is then centered in the view. From XML, use this syntax: .\n\n[[[\"Easy to understand\",\"easyToUnderstand\",\"thumb-up\"],[\"Solved my problem\",\"solvedMyProblem\",\"thumb-up\"],[\"Other\",\"otherUp\",\"thumb-up\"]],[[\"Missing the information I need\",\"missingTheInformationINeed\",\"thumb-down\"],[\"Too complicated / too many steps\",\"tooComplicatedTooManySteps\",\"thumb-down\"],[\"Out of date\",\"outOfDate\",\"thumb-down\"],[\"Samples / code issue\",\"samplesCodeIssue\",\"thumb-down\"],[\"Other\",\"otherDown\",\"thumb-down\"]],[\"Last updated 2025-03-13 UTC.\"],[],[]]"
    },
    {
        "link": "https://stackoverflow.com/questions/6669764/scale-an-image-up-to-fill-entire-imageview-in-android",
        "document": "I'd like to scale an image up to take up the entire size of an ImageView. This is subtly different than using because fit_center will leave bands around the image if the image aspect ratio does not exactly match the ImageView's aspect ratio. Instead, I would like the image to get centered and scaled up to completely fill the enclosing view, with any excess chopped off.\n\nI'm able to accomplish this by computing my own custom image matrix during onCreate():\n\nThis works fine, but it seems like there must be an easier away. Does anyone know of a way to scale up an image in an ImageView while both preserving the aspect ratio of the image and fully filling in the ImageView?"
    },
    {
        "link": "https://medium.com/swlh/understanding-imageview-scaletype-2e06ca71f2ea",
        "document": "Open your phone and start any application. Can you see any app without any image? No right? We are fond of images, an app without images is like food without spices. SO we as a developer use imageView to show images in a particular view at a particular position for a given size.\n\nBut many times, we face various issues related to the scaling of the image i.e. either your image will be cropped or you will get your image left aligned and many other problems arise while scaling an image.\n\nIn this article, we will learn about the imageView scaling property. What are the types of image Scale Type and where to use which?\n\nI know most of the time we get confused in multiple scale types and then we apply all in our view and check which one fits us better.\n\nBelow is screenshots of all the scale type so you can understand how they differentiate the view."
    }
]