[
    {
        "link": "https://reddit.com/r/PowerShell/comments/yen3lk/setting_the_desktop_background_on_1011",
        "document": "As the title suggests I'm trying to set the desktop background via Powershell so we can deploy a company background - we have Intune but sadly the policy only works for enterprise users.\n\nSo I'm wondering has anyone got a successful script for this? It seems most scripts I've tried have either done nothing or only succeeded in turning the desktop black. I'm planning to bundle the background file into an MSI with the script if that makes any difference."
    },
    {
        "link": "https://reddit.com/r/PowerShell/comments/wpgjyc/script_to_change_wallpaper_and_lockscreen",
        "document": "First of all im new to powershell scripting. I am tasked to change the wallpaper and lockscreen for our pc's that are managed by intune. They are wanting to have the desktop wallpaper as a slideshow for a set of images that have been sent to us. I was thinking the location of this images will be under c:\\temp\\slideshowtest as a test. Once i have finished the script, i will be making this as an app that gets pushed out in Intune. Is this possible? can i get some help? Sorry in advance if its hard to understand! :D"
    },
    {
        "link": "https://forums.powershell.org/t/powershell-change-wallpaper-on-windows-10-for-current-logged-on-user/15197",
        "document": "This fully-configurable program automatically generates desktop backgrounds that include important information about the system."
    },
    {
        "link": "https://ninjaone.com/script-hub/wallpaper-management-in-windows-powershell",
        "document": "\n• Automate Wallpaper Changes: The script automates the process of setting desktop wallpapers across multiple user profiles in Windows environments.\n• Saves Time and Ensures Consistency: Ideal for IT professionals and MSPs managing multiple computers, ensuring uniformity and branding compliance.\n• Flexible Parameters: Supports customization with parameters for image URL, storage directory, and wallpaper style.\n• Immediate Effect Features: Includes options to replace transcoded wallpaper files and restart the Explorer for immediate change.\n• Versatility Across Windows Versions: Designed for Windows 7 and newer, though some features may vary in older versions.\n• Supports Common Image Formats: Compatible with popular image formats like JPG, PNG, BMP, and GIF.\n• Security Considerations: Involves modifying registry settings and system files; proper management of script permissions is crucial.\n• Comprehensive Testing Recommended: Test thoroughly in controlled environments before network-wide deployment.\n• Integrates with IT Management Tools: Can be seamlessly incorporated into IT management platforms like NinjaOne for efficient deployment and monitoring.\n• Document and Audit Script Usage: Maintain logs for script use to facilitate auditing and troubleshooting.\n\nChanging the desktop wallpaper across multiple user profiles in a Windows environment is a task that IT professionals often encounter. Whether for branding purposes, compliance, or simply refreshing the workspace, automating this process saves time and ensures consistency. PowerShell scripts have become indispensable tools in the IT toolkit, offering powerful and flexible solutions for such tasks.\n\nThe script in focus is designed to automate the process of setting desktop wallpapers for all user profiles on a Windows system. This capability is particularly valuable for IT professionals and Managed Service Providers (MSPs) who manage large numbers of computers. It allows for uniformity in corporate environments, ensuring that all users have the same background, which can be vital for branding or conveying important information.\n\nThe script operates in several stages:\n• Parameter Initialization: It begins by defining parameters such as the wallpaper URL, storage directory, and style (e.g., Fill, Fit, Stretch).\n• Pre-Execution Checks: Validates wallpaper style and checks for the existence of the specified image and directory.\n• Downloading the Wallpaper: If a URL is provided, the script downloads the image to the specified directory.\n• Setting Wallpaper for Each User: The script modifies registry settings for each user profile to change the wallpaper. It also handles special cases like System accounts.\n• Immediate Effect Options: Options to replace the transcoded wallpaper file and restart the Explorer process ensure that changes take effect immediately.\n\nImagine an IT admin at a large corporation needing to update the desktop backgrounds to a new company logo on all employee machines. Using this script, they can deploy the new wallpaper across the entire network, ensuring that every user, regardless of their individual settings, sees the updated branding.\n\nTraditionally, changing wallpapers across multiple profiles required manual adjustments or group policies. This script offers a more direct and flexible approach, especially useful in environments where group policies are not feasible or too cumbersome to implement.\n\nQ: Will this script work on all versions of Windows?\n\n A: The script is designed for Windows 7 and newer versions, but some features may not work on older versions like Windows 7 or Server 2008.\n\nQ: Can I use any image format as a wallpaper?\n\n A: The script supports common formats like JPG, PNG, BMP, and GIF.\n\nWhile this script offers convenience, it also highlights the need for careful management of script permissions and execution policies, as it involves modifying registry settings and system files, which could pose security risks if misused.\n• Test Thoroughly: Always test scripts in a controlled environment before deploying them network-wide.\n• Document Changes: Keep a log of when and how the script is used for auditing and troubleshooting purposes.\n\nIn a dynamic IT environment, tools like NinjaOne can significantly enhance the efficiency and effectiveness of tasks like deploying this PowerShell script. With its robust management and automation capabilities, NinjaOne can streamline the deployment process, making it simpler and more reliable for IT professionals to maintain consistent desktop environments across multiple user profiles. This alignment of automation and management reinforces the importance of integrating powerful tools like PowerShell scripts into broader IT management strategies."
    },
    {
        "link": "https://gist.github.com/s7ephen/714023",
        "document": "You signed in with another tab or window. Reload to refresh your session.\n\nYou signed out in another tab or window. Reload to refresh your session.\n\nYou switched accounts on another tab or window. Reload to refresh your session."
    },
    {
        "link": "https://learn.microsoft.com/en-us/answers/questions/93701/run-powershell-script-using-task-scheduler",
        "document": "Windows Server: A family of Microsoft server operating systems that support enterprise-level management, data storage, applications, and communications. PowerShell: A family of Microsoft task automation and configuration management frameworks consisting of a command-line shell and associated scripting language."
    },
    {
        "link": "https://reddit.com/r/PowerShell/comments/10samwe/whats_the_best_way_to_run_powershell_as_a",
        "document": "Per the subject, I want to run 3 scripts across the night and was wondering about scheduling this.\n\nIs it just a matter of creating tasks in Task Scheduler for Windows or is there another best practice for running Powershell scripts scheduled."
    },
    {
        "link": "https://andrebnassis.medium.com/automate-tasks-on-windows-with-task-scheduler-93dea7c66bce",
        "document": "Recently I had an idea to automate a task that I manually do every day after logging into my machine.\n\nTo automate, I use a PowerShell script with Windows Task Scheduler to call it every time I log in on Windows 10. The process is very simple and it works even if the script needs admin rights to run. Let me show you!\n\nIn my case, I always have to restart wsl2 on my Windows machine before open it (god knows why). So I created a file wsl_shutdown.ps1 with the following script on it:\n\nI know, the script is very simple and it doesn’t need any admin privileges to run. Furthermore, I could have achieved the same solution by just creating a batch script and inserting it over ‘%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup’ directory, right?\n\nSo, why are you doing this? Because I wanted a solution that I could use on every script, even those that require admin privileges to run. For example, I applied the same solution to a script that maps WSL2 ports with the following script:\n\nAnyway, we already have our wsl_shutdown.ps1 script. You can save it on any directory of your preference, just make sure to never delete it.\n\nNow we need to create a Task on our Task Scheduler that will run wsl_shutdown.ps1 every time I log in on my machine. So, let’s follow the process below:\n\nCreate a new Task with the following configurations:\n• Select Run only when user is logged on\n• Begin the task: At log on\n\nPS: replace ‘C:\\<path to file>’ with the path related to ‘wsl_shutdown.ps1’ script file\n• Make sure Allow task to be run on demand is checked.\n\nDone! Now, every time we log in, our script will be executed.\n\nPS: If for some reason you need to manually execute the script, you can also do it by opening Task Scheduler and running it.\n\nMany thanks! Hope you enjoy! Any feedback would be appreciated!"
    },
    {
        "link": "https://itprotoday.com/powershell/how-to-automate-powershell-scripts-with-windows-task-scheduler",
        "document": "Windows PowerShell scripts can be used to automate all manner of tasks within a Windows environment. However, for these automations to be truly useful, you may need to schedule them.\n\nIn my own organization, for example, I use PowerShell scripts to monitor storage array health, Hyper-V replication, and more. I also use a script that creates file-level backups of my unstructured data. While these scripts can be manually executed, it is far more practical to run them on a scheduled basis. That way, you don’t need to remember to run them.\n\nThe Windows Task Scheduler can schedule the execution of PowerShell scripts at specified times. Although the process of scheduling a PowerShell script isn’t overly complex, it may not be nearly as intuitive as you might assume. To illustrate this, let’s look at the steps for in creating a scheduled task that is not directly related to PowerShell.\n\nTo schedule a task using Task Schedule, follow these steps:\n\nFigure 1. Choose when you want to run the task.\n\nFigure 2. Enter the path to the executable that you want to run.\n\nAs straightforward as creating a scheduled task may seem, you can’t simply enter the path and filename of a PowerShell script directly. If you do so, the task will likely open the script for editing (depending on your computer’s configuration) and won’t execute the script.\n\nThis happens because Task Scheduler operates similarly to the Windows Run prompt. Since the Windows Run prompt links to the Windows Command environment, not to PowerShell, you can’t just enter the name of a PowerShell script into the Run prompt and expect it to execute.\n\nThe trick to solving this problem is to use the \"Start a Program\" interface shown in the figure above to launch PowerShell itself, not your PowerShell script. As you may recall in Step 6, this interface allows you to enter command line arguments, and, fortunately, PowerShell.exe just happens to accept a particular argument called File. Using the File argument, you can specify the path and filename of the PowerShell script you want to execute. Additionally, if you want the script to remain visible on screen while running, you can also use the NoExit argument. You can see an example of what this looks like in Figure 3.\n\nFigure 3. This is how you schedule a PowerShell script to run automatically."
    },
    {
        "link": "https://reddit.com/r/PowerShell/comments/xjugnl/running_powershell_script_with_windows_scheduled",
        "document": "I like using the ConvertFrom-SecureString and ConvertTo-SecureString cmdlets to save precious seconds in some of my scripts to save and retrieve credentials respectively, for authenticating against some resource.\n\nI also like being able to schedule certain PowerShell scripts to run on schedules using Windows Task Scheduler, where I often try to get my scripts to run using a dedicated 'service account' or under the host computer's own 'SYSTEM' context. This is basic IT 101, avoiding running such tasks under my own credentials of course.\n\nIt's when I COMBINE these two ideas that I'm running into difficulties.\n\nI've got a script that needs to authenticate against Microsoft Teams. The script works perfectly well to check for existence of my saved credentials file and read its credentials and authenticate, but that's when I'm running the script 'interactively' using PowerShell/ISE/7, when I set it up to run in Task Scheduler, irrespective of what context I choose to run it in, it doesn't seem to work properly.\n\nI'm going to continue troubleshooting (including trying to run my script using PsExec -s to run under SYSTEM context), but I thought I'd ask here if anyone has any 'gotchas' to pass onto me!\n\nThanks for your time everyone."
    },
    {
        "link": "https://stackoverflow.com/questions/5552368/windows-batch-file-script-to-pick-random-files-from-a-folder-and-move-them-to-an",
        "document": "(I'm assuming that your X is known beforehand – represented by the variable in the following code).\n\nSince you weren't adverse to a PowerShell solution:"
    },
    {
        "link": "https://reddit.com/r/PowerShell/comments/1cignyx/get_random_file_including_subdirectories",
        "document": "So I've been using this command:\n\nbut it won't pull any files from the subfolders. How do I make it pull from all the subfolders in the target directory?\n\nIf it isn't already obvious I am not a frequent powershell user so talk to me like I know nothing, haha. Thank you very much to anyone who can point me in the right direction."
    },
    {
        "link": "https://stackoverflow.com/questions/41924467/get-random-increased-randomness-help-powershell",
        "document": "I am in need of a little help as to increasing the randomness of get-random thus not repeating so often.\n\nI have been using this with powershell:\n\nMy application is to have a in home virtual television channel that randomly selects 1 file from multiple folders at 6am and plays them all day until midnight, powers off and starts up, repeating the process daily. The problem I am finding is that whatever the get-random command uses had a tendency to choose the exact same file often. Thus after months of running this script, I am seeing the exact same movies chosen day after day and some that are never chosen. I'm guessing because the get-random is using the clock as it's factor for choosing a number?\n\nIs there a way to increase the odds of getting a broader selection of files .mpg's in this instance and less of a repeat of the same .mpg's chosen?\n\nMy other option was to find a script that would keep track of the .mpg's chosen and \"mark\" them, or sort by date accessed and not play the same file twice, until all files of a particular folder have been played once; then \"unmarking\" all the files and starting over. To me that sounds like advanced scripting that I just don't have the knowledge to procure on my own.\n\nAny insight into my dilemma would be vastly appreciated. Any questions about my specifics to help you ascertain a conclusion to this query will be forthcoming.\n\n**maybe i want to know how to increase the random distribution? I'm looking for a way to have more variety in the files chosen day after day and less repeats."
    },
    {
        "link": "https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/get-random?view=powershell-7.5",
        "document": "The cmdlet gets a randomly selected number. If you submit a collection of objects to , it gets one or more randomly selected objects from the collection. Without parameters or input, a command returns a randomly selected 32-bit unsigned integer between 0 (zero) and . You can use the parameters of to specify the minimum and maximum values, the number of objects returned from a collection, or a seed number. doesn't ensure cryptographically secure randomness. The seed value is used for the current command and for all subsequent commands in the current session until you use SetSeed again or close the session. You can't reset the seed to its default value. Deliberately setting the seed results in non-random, repeatable behavior. It should only be used when trying to reproduce behavior, such as when debugging or analyzing a script that includes commands. Be aware that the seed value could be set by other code in the same session, such as an imported module.\n\nExample 2: Get a random integer between 0 and 99\n\nExample 3: Get a random integer between -100 and 99\n\nExample 5: Get a random integer from an array\n\nExample 6: Get several random integers from an array\n\nExample 8: Get a random non-numeric value\n\nExample 9: Use the SetSeed parameter\n\nThis example shows the effect of using the SetSeed parameter. Because SetSeed produces non-random behavior, it's typically used only to reproduce results, such as when debugging or analyzing a script. # Commands with the default seed are pseudorandom Get-Random -Maximum 100 -SetSeed 23 Get-Random -Maximum 100 Get-Random -Maximum 100 Get-Random -Maximum 100 32 25 93 95 # Commands with the same seed aren't random Get-Random -Maximum 100 -SetSeed 23 Get-Random -Maximum 100 -SetSeed 23 Get-Random -Maximum 100 -SetSeed 23 32 32 32 # SetSeed results in a repeatable series Get-Random -Maximum 100 -SetSeed 23 Get-Random -Maximum 100 Get-Random -Maximum 100 Get-Random -Maximum 100 32 25 93 95\n\nExample 12: Use the Count parameter\n\nExample 13: Use the InputObject parameter with an empty string or $null\n\nIn this example, the InputObject parameter specifies an array that contains an empty string ( ) and . returns either , empty string, or . The empty sting displays as a blank line and returns to a PowerShell prompt.\n\nSpecifies a collection of objects. gets randomly selected objects in random order from the collection up to the number specified by Count. Enter the objects, a variable that contains the objects, or a command or expression that gets the objects. You can also pipe a collection of objects to . Beginning in PowerShell 7, the InputObject parameter accepts arrays that can contain an empty string or . The array can be sent down the pipeline or as an InputObject parameter value.\n\nSpecifies a maximum value for the random number. returns a value that's less than the maximum (not equal). Enter an integer, a double-precision floating-point number, or an object that can be converted to an integer or double, such as a numeric string (\"100\"). The value of Maximum must be greater than (not equal to) the value of Minimum. If the value of Maximum or Minimum is a floating-point number, returns a randomly selected floating-point number. On a 64-bit computer, if the value of Minimum is a 32-bit integer, the default value of Maximum is Int32.MaxValue. If the value of Minimum is a double (a floating-point number), the default value of Maximum is Double.MaxValue. Otherwise, the default value is Int32.MaxValue.\n\nSpecifies a minimum value for the random number. Enter an integer, a double-precision floating-point number, or an object that can be converted to an integer or double, such as a numeric string (\"100\"). The default value is 0 (zero). The value of Minimum must be less than (not equal to) the value of Maximum. If the value of Maximum or Minimum is a floating-point number, returns a randomly selected floating-point number.\n\nSpecifies a seed value for the random number generator. When you use SetSeed, the cmdlet generates pseudorandom numbers, which isn't cryptographically secure. Setting the seed results in non-random behavior. It should only be used when trying to reproduce behavior, such as when debugging or analyzing a script that includes commands. This seed value is used for the current command and for all subsequent commands in the current session until you use SetSeed again or close the session. You can't reset the seed to its default value."
    },
    {
        "link": "https://reddit.com/r/PowerShell/comments/1cn4aur/powershell_script_to_open_random_file_in_a_folder",
        "document": "Hello I got this script copied from a very old reddit post 6 years old that was deleted.\n\nHope someone can help me modify it, i dont know code.\n\nfristly can I make this script executable without copying it into powershell?\n\nSecondly this script only opens content of that folder, not the subfolders. I would like it to open any files in the subdirectories.\n\nhelp would be appreciated."
    }
]