[
    {
        "link": "https://pygame.org/wiki/GettingStarted",
        "document": "Pygame requires Python; if you don't already have it, you can download it from python.org. It's recommended to run the latest python version, because it's usually faster and has better features than the older ones. Bear in mind that pygame has dropped support for python 2.\n\nThe best way to install pygame is with the pip tool (which is what python uses to install packages). Note, this comes with python in recent versions. We use the --user flag to tell it to install into the home directory, rather than globally.\n\nTo see if it works, run one of the included examples:\n\nIf it works, you are ready to go! If not there are more detailed, platform-specific instructions further down the page.\n\nYou could try:\n• Having a go at one of the tutorials.\n• Or dive right into the pygame Docs\n\nHopefully the installation instructions above worked for you. If not, please read some alternative installation methods, and extra details below.\n\nWheels are available for x86 and x64 architectures on Linux and Windows, and for x64 and arm64 on Mac. If pip doesn't find a wheel for your platform, it will try to compile pygame from source (see below).\n\npygame requires a \"newer\" pip. If pygame starts compiling from source and fails, first try upgrading pip.\n\nThis comes with pygame already installed on the default raspbian installation. However, it's an ancient version. Get a newer pygame...\n\nMake sure you install python with the \"Add python to PATH\" option selected. This means that python, and pip will work for you from the command line.\n\nThere is documentation with python for the \"windows installation steps\"\n\nIf you get 'PermissionError: [WinError 5] Access is denied', before starting the command prompt right click and \"Run as administrator\".\n\nIf your examples aren't running and you are using a recent version of Mac OS X; try this line to install pygame instead:\n\n(note the w on the end). If it doesn't work for you, please see the /wiki/MacCompile instructions.\n\nMany Linux and BSD distributions have their own packages of Pygame. These may have an older version of Pygame than the wheels, but have been carefully tested with other packages in that distribution.\n\nFreeBSD also has an active pygame package. While techinicaly it isn't binary, it is automatically built and installed by the ports manager. See the FreeBSD package page for more information. http://www.freebsdports.info/ports/devel/py-game.html\n\nGentoo has a builtin package for pygame. This is compiled for your system as it installs, similar to BSD, http://packages.gentoo.org/package/dev-python/pygame\n\nCompiling and installing pygame is handled by Python's distutils. Pygame also comes with some scripts to automatically configure the flags needed to build pygame. Use the \"setup.py\" script to start the installation.\n\nThe first time you run the setup script, it will call the \" \" script. This will build a \" \" file which stores all the information needed to compile. The \"config.py\" will do a good job of detecting what dependencies are available and where they are located. If it isn't perfect, it is easy to build your own, or edit the created \" \" text file. This \" \" file is a simple Makefile-like text file. It defines variables needed to use each dependency, and then enables all the pygame modules with found dependencies. If you have trouble compiling, you should be able to easily fix any problems inside the \" \" file.\n\nRunning the \" \" script will call distutils to build and install the pygame package. Distutils actually supports a wide variety of compile and install options. running \" \" will start to show you the different options available. You can change many things like install locations, compiler to use, and more. Calling the \"setup.py\" script with no arguments and it will just ask you if you want the default flags needed to compile and install.\n\nSome of the .c files are generated by Cython from .pyx files. Running \" \" will update them.\n\nUp to date instructions for compiling on Mac OS X can be found here: MacCompile"
    },
    {
        "link": "https://geeksforgeeks.org/how-to-install-pygame-in-windows",
        "document": "In this article, we will learn how to Install PyGame module of Python on Windows. PyGame is a library of python language. It is used to develop 2-D games and is a platform where you can set python modules to develop a game. It is a user-friendly platform that helps to build games quickly and easily.\n\nFollow the steps given below for the successful installation of Pygame\n\nIn order to install Pygame, Python must be installed already in your system. To check whether Python is installed or not in your system, open the command prompt and give the command as shown below.\n\nIf this command runs successfully, and we are able to get a Python version then we are good to go. Otherwise, we have to install Python in our system, to do this refer to How to install Python on Windows?\n\nPIP is a tool that is used to install python packages. PIP is automatically installed with Python 2.7. 9+ and Python 3.4+. Open the command prompt and enter the command shown below to check whether pip is installed or not.\n\nNote: Refer to How to install PIP on Windows ? for detailed information.\n\nTo install Pygame, open the command prompt and give the command as shown below:\n\nPygame is successfully installed as shown in the image above.\n\nStep 4: Check Whether PyGame is Working or not\n\nNow open a new terminal and import the Pygame library to see whether it is working fine or not in our system. The library is imported successfully means we got success.\n\nIn this way, we can install the pygame module in Python."
    },
    {
        "link": "https://discuss.python.org/t/how-to-install-pygame-for-dummies/45778",
        "document": "In this tutorial, you'll learn how to use a Python virtual environment to manage your Python projects. You'll also dive deep into the structure of virtual environments built using the venv module, as well as the reasoning behind using virtual..."
    },
    {
        "link": "https://artofproblemsolving.com/wiki/index.php/Getting_Started_With_Pygame?srsltid=AfmBOorNOXmwesnS_5Xh_wj1WaD60bnjHd1HdNBFIU4-TzaaSxbI8vAl",
        "document": "This how-to guide takes you through the process of installing Pygame, a set of Python modules designed for writing games. Note that in order to get Pygame to work, you need to have installed Python, version 3.2 or above. The introductory guide Getting Started With Python Programming takes you that process.\n\nInstalling Pygame on Windows, MacOS, and Ubuntu is slightly different. See below for specific instructions:\n\n1. Download and install pygame-1.9.2a0.win32-py3.2.msi (the second-to-last entry in the Windows section) from pygame.org. Again when you run the program, follow the instructions, using the defaults.\n\nNote: if you have an earlier version of Python (2.x or 3.0 or 3.1), you can download the version of pygame corresponding to that one instead. But we recommend using 3.2. You can have multiple versions of Python on your system.\n\n2. To make sure everything installed properly, start up IDLE (which can be found under Python 3.2 in the Start menu) and enter 'import pygame'. If you don't get any errors, everything worked.\n\n3. Download pygame-1.9.1release-python.org-32bit-py2.7-macosx10.3.mpkg.zip (the first entry in the macintosh section) from pygame.org.\n\nNote: if you installed a different version of Python, download pygame-1.9.2pre-py2.7-macosx10.7.mpkg.zip (the last entry) instead.\n\n\n\n 4. Click (double click in finder) on the file you downloaded to unzip it, and double click on the unzipped mpkg file that appears to run the installer. Follow the instructions to install pygame.\n\n5. Open up a terminal (Cmd+Space, then enter 'terminal' in the search box is the easiest way). In the terminal, type 'python2.7' and press enter. Python should start up, display the version as 2.7.2 (2.7.1 is fine too), and give you a prompt. At the python prompt, type 'import pygame'. If you don't get any errors, everything worked.\n\nIf you have Ubuntu 10.10 or older, it's strongly recommended you upgrade to 11.04 for this class, so you can use pygame with Python 2.7 (with 10.10 and older you need to use 2.6 or earlier, which will cause some minor problems).\n\n1. Open a terminal, and type 'sudo apt-get install idle pygame', enter your password and type 'y' at the prompts, if necessary.\n\n2. After the installation completes, enter 'python' in the terminal to launch Python. Verify that it's using version 2.7 or newer, then at the Python prompt enter 'import pygame'. If you don't get any errors, everything worked.\n\nPygame is in most package managers, installation will be similar to Ubuntu.\n\nThis guide was adapted from one kindly provided by an assistant of the Games Programming Course, Fall 2011."
    },
    {
        "link": "https://stackoverflow.com/questions/58421368/installing-pygame-when-i-have-2-different-python-versions-installed",
        "document": "I have two versions of python installed. 2.7 and 3.7.4. I want to install Pygame to 3.7 but am failing.\n\nI've tried multiple tutorials and methods but no luck. Python 2.7 has all the files but 3.7 has only exes but still works perfectly fine."
    },
    {
        "link": "https://pygame.org/docs",
        "document": "Welcome to pygame! Once you've got pygame installed ( or for most people), the next question is how to get a game loop running. Pygame, unlike some other libraries, gives you full control of program execution. That freedom means it is easy to mess up in your initial steps.\n\nHere is a good example of a basic setup (opens the window, updates the screen, and handles events)--\n\nHere is a slightly more fleshed out example, which shows you how to move something (a circle in this case) around on screen--\n\nFor more in depth reference, check out the Tutorials section below, check out a video tutorial (I'm a fan of this one), or reference the API documentation by module."
    },
    {
        "link": "https://pygame.org/docs/ref/pygame.html",
        "document": "This module is automatically imported into the pygame package and can be used to check which version of pygame has been imported.\n\nSome aspects of pygame's behaviour can be controlled by setting environment variables, they cover a wide range of the library's functionality. Some of the variables are from pygame itself, while others come from the underlying C SDL library that pygame uses.\n\nIn python, environment variables are usually set in code like this:\n\nOr to preserve users ability to override the variable:\n\nIf the variable is more useful for users of an app to set than the developer then they can set it like this:\n\nFor some variables they need to be set before initialising pygame, some must be set before even importing pygame, and others can simply be set right before the area of code they control is run.\n\nBelow is a list of environment variables, their settable values, and a brief description of what they do.\n\nThese variables are defined by pygame itself.\n\nThis sets the display where pygame will open its window or screen. The value set here will be used if set before calling Initialize a window or screen for display, and as long as no 'display' parameter is passed into Initialize a window or screen for display.\n\nThis forces set_mode() to use the SCALED display mode and, if \"photo\" is set, makes the scaling use the slowest, but highest quality anisotropic scaling algorithm, if it is available. Must be set before calling Initialize a window or screen for display.\n\nThis makes pygame use the SDL2 blitter for all alpha blending. The SDL2 blitter is sometimes faster than the default blitter but uses a different formula so the final colours may differ. Must be set before initialize all imported pygame modules is called.\n\nThis stops the welcome message popping up in the console that tells you which version of python, pygame & SDL you are using. Must be set before importing pygame.\n\nThis switches the pygame.font module to a pure freetype implementation that bypasses SDL_ttf. See the font module for why you might want to do this. Must be set before importing pygame.\n\nForces the library backend used in the camera module, overriding the platform defaults. Must be set before calling Module init.\n\nIn pygame 2.0.3, backends can be set programmatically instead, and the old OpenCV backend has been replaced with one on top of \"opencv-python,\" rather than the old \"highgui\" OpenCV port. Also, there is a new native Windows backend available.\n\nThese variables are defined by SDL.\n\nFor documentation on the environment variables available in pygame 1 try here. For Pygame 2, some selected environment variables are listed below.\n\nThis will make the pygame window open in the centre of the display. Must be set before calling Initialize a window or screen for display.\n\nThis allows control over the placement of the pygame window within the display. Must be set before calling Initialize a window or screen for display.\n\nOn some platforms there are multiple video drivers available and this allows users to pick between them. More information is available here. Must be set before calling initialize all imported pygame modules or Initialize the display module.\n\nOn some platforms there are multiple audio drivers available and this allows users to pick between them. More information is available here. Must be set before calling initialize all imported pygame modules or initialize the mixer module.\n\nBy default pygame apps disable screensavers while they are running. Setting this environment variable allows users or developers to change that and make screensavers run again.\n\nBy default SDL tries to disable the X11 compositor for all pygame apps. This is usually a good thing as it's faster, however if you have an app which doesn't update every frame and are using linux you may want to disable this bypass. The bypass has reported problems on KDE linux. This variable is only used on x11/linux platforms.\n\nBy default, when the window is not in focus, input devices do not get updated. However, using this environment variable it is possible to get joystick updates even when the window is in the background. Must be set before calling initialize all imported pygame modules or Initialize the joystick module.."
    },
    {
        "link": "https://scuba.cs.uchicago.edu/pygame/index.html",
        "document": "Welcome to pygame! Once you've got pygame installed ( or for most people), the next question is how to get a game loop running. Pygame, unlike some other libraries, gives you full control of program execution. That freedom means it is easy to mess up in your initial steps.\n\nHere is a good example of a basic setup (opens the window, updates the screen, and handles events)--\n\n# pygame.QUIT event means the user clicked X to close your window # fill the screen with a color to wipe away anything from last frame # flip() the display to put your work on screen\n\nHere is a slightly more fleshed out example, which shows you how to move something (a circle in this case) around on screen--\n\n# pygame.QUIT event means the user clicked X to close your window # fill the screen with a color to wipe away anything from last frame # flip() the display to put your work on screen # dt is delta time in seconds since last frame, used for framerate-\n\nFor more in depth reference, check out the Tutorials section below, check out a video tutorial (I'm a fan of this one), or reference the API documentation by module."
    },
    {
        "link": "https://stackoverflow.com/questions/45518572/opening-a-pygame-file-in-main-from-another-file-mygame",
        "document": "So i'm trying to open my game file by import mygame, butit does not seem to work'here is the code( i will explain more after the code)\n\nthis is the mygame file(just randomly copied a small pygame code, cause i only want to understand if this can actually be done)\n\nCONCLUSION: i only want to start the game if a trigger('game') is in the input of the main but in this case when i run the main the game opens first without the trigger. this is the other type of pygame which includes pygame.init() (also much easier to understand than the last one)"
    },
    {
        "link": "https://pygame.org/docs/ref/examples.html",
        "document": "These examples should help get you started with pygame. Here is a brief rundown of what you get. The source code for these examples is in the public domain. Feel free to use for your own projects.\n\nThere are several ways to run the examples. First they can be run as stand-alone programs. Second they can be imported and their methods called (see below). Finally, the easiest way is to use the python -m option:\n\nResources such as images and sounds for the examples are found in the pygame/examples/data subdirectory.\n\nYou can find where the example files are installed by using the following commands inside the python interpreter.\n\nOn each OS and version of Python the location will be slightly different. For example on Windows it might be in 'C:/Python26/Lib/site-packages/pygame/examples/' On Mac OS X it might be in '/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/pygame/examples/'\n\nYou can also run the examples in the python interpreter by calling each modules main() function.\n\nWe're always on the lookout for more examples and/or example requests. Code like this is probably the best way to start getting involved with python gaming.\n\nexamples as a package is new to pygame 1.9.0. But most of the examples came with pygame much earlier.\n\nA smoothscale example that resized an image on the screen. Vertical and horizontal arrow keys are used to change the width and height of the displayed image. If the convert_alpha option is True then the source image is forced to have source alpha, whether or not the original images does. If run_speed_test is True then a background timing test is performed instead of the interactive scaler. If is run as a program then the command line options are:"
    },
    {
        "link": "https://stackoverflow.com/questions/66029194/best-way-to-load-images-pygame",
        "document": "To give a quick and simple overview of what you could do, here's an example. You define an abstract class. Then, every \"scene\" in your game inherits from it. Each scene has a method that loads everything the scene needs (or might need).\n\nHere's roughly how a game loop would look like.\n\nThis is a basic starting point, but there are other ways to handle the situation, like having an asset manager that dynamically load and unload assets based on usage. However, these are quite complicated and will make development and debugging much harder. It's always best to keep things simple when you can. If you can load all images at the beginning of the program, then I'd suggest doing so.\n\nAlso, remember that there's nothing that's \"best\" or \"optimized\" as all you're doing is tradeoffs. If you're trying to optimize for memory, then you're often making your program slower. If you're optimizing for speed, then you're often making your program use more memory.\n\nIf you are loading things just when you need them, you're going to have a loading time switching between different views in your menu. This is often not something you want as the user expects it to be fast. Switching from the game to the menu, it's more forgiving to have a couple of extra ms. But if you feel you want to go the other way then different views in the menu could be considered different scenes."
    },
    {
        "link": "https://pygame.org/docs/ref/image.html",
        "document": "Load an image from a file source. You can pass either a filename, a Python file-like object, or a pathlib.Path. Pygame will automatically determine the image type (e.g., or bitmap) and create a new Surface object from the data. In some cases it will need to know the file extension (e.g., images should end in \".gif\"). If you pass a raw file-like object, you may also want to pass the original filename as the namehint argument. For alpha transparency, like in .png images, use the change the pixel format of an image including per pixel alphas method after loading so that the image has per pixel transparency.\n\nThis will save your Surface as either a , , , or image. If the filename extension is unrecognized it will default to . Both , and file formats create uncompressed files. You can pass a filename, a pathlib.Path or a Python file-like object. For file-like object, the image is saved to format unless a namehint with a recognizable extension is passed in. Changed in pygame 2.0.0: The parameter was added to make it possible to save other formats than to a file-like object. Saving to a file-like object with JPEG is possible.\n\nCreate a new Surface that shares pixel data directly from a buffer. This buffer can be bytes, a bytearray, a memoryview, a pygame object to export a surface buffer through an array protocol, or any object that supports the buffer protocol. This method takes similar arguments to create new Surface from a byte buffer, but is unable to vertically flip the source data.\n\nLoad an image from a file source. You can pass either a filename or a Python file-like object, or a pathlib.Path.\n\nIn case the image is being saved to a file-like object, this function uses the namehint argument to determine the format of the file being saved. Saves to in case the namehint was not specified while saving to a file-like object."
    },
    {
        "link": "https://stackoverflow.com/questions/20160477/loading-images-in-pygame",
        "document": "try adding the line right after\n\nIt appears you're filling over the background in the while loop.\n\nEDIT: here is a screenshot of it working (note changes circled in red)"
    },
    {
        "link": "https://reddit.com/r/pygame/comments/8f0ree/efficiently_load_images",
        "document": "Hello, I'm currently writing a simple pygame game that uses www.pokeapi.co to download resources and images for different Pokemon. I managed to get all the resources I need on disk, but my program requires that I have all of the information prepared at launch rather than throughout the game. This basically means I'm making 100 Pokemon at launch, with names, stats, and around 6 different images for forms and other stuff. This results in an annoyingly long load time as I construct the classes that hold the data (there is a Pokemon class that I use for each). Is there any way to avoid this load time? Is there some technique for game development that I'm missing here? This is my first coding project so I'm a bit lost. I've tried to use pickle and I managed to cut the launch time down by around 30% but it's still around 1.5 minutes every launch, and I have no doubt it will get worse as I try to add more 'mons. Pickle can't handle Surfaces either. I'm using thorpy to handle GUI stuff.\n\nLink to code: https://paste.ofcode.org/a8peQqtqsucCJWZ7JP9PnY Thanks in advance."
    },
    {
        "link": "https://reddit.com/r/pygame/comments/14siary/clarification_on_how_loading_images_work",
        "document": "If I do something like:\n\nThen is it loading the image every time self.image is called? Or does it only have to load the image the first time?\n\nI'm sure that it is the latter, but I just wanted to check. This seems like an easy question to answer so it will not take up really any time to answer. Sorry if this is a stupid question, hopefully I won't waste too much time."
    }
]