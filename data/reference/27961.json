[
    {
        "link": "https://docs.fivem.net/docs/scripting-manual/runtimes/lua",
        "document": "FiveM supports the general purpose programming language Lua as one of its scripting languages. Lua is a very easy language to learn, simple to use and fast to write. To use Lua, just use in your scripts file extensions.\n\nA modified version of Lua 5.3 is used in FiveM, called CfxLua. This version includes some of the modifications the Grit game engine introduced:\n\nTo learn more about Lua, read their official documentation.\n\nTo use Lua in your scripts, simply use the file extension. No additional configuration is required.\n\nBecause you might often have to deal with 'Jenkins one-at-a-time' hashes in GTA/RAGE, the Lua runtime has been extended to have support for compile-time generation of hash keys, similar to GET_HASH_KEY, however with zero runtime overhead.\n\nFiveM supports first-class vectors and quaternions in Lua. Vectors and quaternions are incredibly useful to represent things like positions, rotations or even colors. For performance reasons, vectors and quaternions are real data types in CfxLua, just like booleans, numbers and strings are.\n\nMany native functions return and accept vectors too. They're commonly used for world positions and standard euler rotations, so use them whenever you can. More about there here.\n\nFor usage and examples see their respective docs:\n\nYou can define exports by calling the global object:\n\nYou can also define an or entry in your resource manifest. Functions need to be global to be 'explicitly' exported. Note that these exports will only be available after the first scheduler tick.\n\nThe Lua runtime exposes some libraries on the global scope which you can use."
    },
    {
        "link": "https://docs.fivem.net/docs/scripting-manual/introduction/creating-your-first-script",
        "document": "Creating your first script in Lua\n\nGetting started with scripting for FiveM might be a tad overwhelming, given the wide range of possibilities and the sparsely spread documentation. In this quick and simple guide, we'll try to show you how to get started with a quick resource in Lua.\n\nA resource is, simply said, a collection of files that can be individually started, stopped and restarted. Your server-data folder (assuming you already installed a server) should have a folder already, with a few resources in them already.\n\nIf you're working on your own resources, you'll probably want to make a directory - this one will be ignored by Git when updating the server-data root. In there, we'll make a folder, since we're making, well, a gametype using the system.\n\nThat means you'll need to have a folder like this by now, assuming a Windows development system: . We'll call this folder from now on.\n\nA resource folder (you know, this you made above) will need a manifest to be detected by FiveM. Since this is a game type, it'll need some extra information as well to teach about the fact that this is a game type.\n\nMake a file called (this is always Lua, even if you'll be writing scripts in C#/JS later on) in your folder. In it, put the following text using your favorite text editor:\n\nAny new resource you make will probably want the latest game features. This is what the is for. You can read up on it elsewhere on this documentation site, if you ever feel the need to know more. To specify if this resource is for gta5, rdr3, or , you should use the variable.\n\nThe , on the other hand, tells that this, in fact, is a game type, and that it's called \"My awesome game type!\". If you're just making a 'standalone' add-on resource, you probably don't want to include a line.\n\nFinally, the indicates to the scripting runtime that the client should load a script, named . If this were a JS script, it'd say , or if it were C#, it'd probably be , but for now we're teaching Lua so just forget that.\n\nFinally, we should make a file called in the resource folder thing.\n\nTo learn more about resource manifest files, take a look at the resource manifest reference.\n\nIn this file, let's put the following content:\n\nThis is a tough one, especially if you're not used to the concept of first-class functions. You could also write it differently, using global/local functions - but that's just a bit odd.\n\nLet's go through this bit by bit, with an annotated version.\n\nA quick mention of the difference between client and server scripts: most of what you'll do in FiveM will be done using client scripts, since in current versions there's no interaction with game functionality in server scripts. Server scripts should be used to have scripted actions occur across clients (using client/server events), and to provide a 'source of trust' for various actions, such as storing/loading things in a persistent database.\n\nSince spawning a player is pretty much entirely game interaction, this happens on the client side. Every player that's joined will have a local instance of each client script running on their PC, with no shared variables or context between them.\n\nYou're probably hoping to be able to run this little example - well, hopefully you already have a running FXServer instance - if not, follow the guide for that.\n\nOnce you've started FXServer, execute the command in the console. This'll reread every single file for every resource you have installed, since you probably just started the server this isn't really needed but if you had the server running already this is just A Good Idea™ to do.\n\nFinally, execute in the console, and connect to your server using the FiveM client's handy button in developer mode (or just enter on the direct connect tab, or if you used the default port click this useful link on the PC you have FiveM installed on).\n\nOnce the game loads, you should see yourself spawning somewhere - hopefully on a big stage!\n\nKeep the game running (and maybe set it to borderless or windowed mode in the game options) and Alt-Tab out back into your code editor - we have more work to do!\n\nIt's silly to close your game and server and restart them both to iterate on your resource. Of course, you can restart your resource as well.\n\nLet's try some different spawn point.\n\nReplace the line (the first one) in with the following:\n\nThen, in your server console, execute the magical command . You should (again) see 'Welcome to the party!~' mentioned in your chat box, and end up on a pier instead of the stage.\n\nYou'll probably want to do more. For this, you're going to have to learn how to call natives, which has nothing to do with indigenous people and actually are a R* label for 'game-defined script functions'. There's a lot of intricacies involved in calling natives properly - for a full reference, see the special section for this - but we'll start simple for now.\n\nIn a stupid way of 'this trope again', we'll make a command that'll spawn a car. Locally. Because nobody cares about the server when they're starting out.\n\nAt the bottom of your , add this code:\n\nStarting already, we see a call to a function. We did not define that function. Well, we (as in, the FiveM team) did, but not when guiding you, the reader, through this wondrously written marvel of a guide. That means it must come from somewhere else!\n\nAnd, guess what, it's actually REGISTER_COMMAND! Click that link, and you'll be led to the documentation for this native. It looks a bit like this:\n\nWe'll mainly care about the name on the second line ( , as used in the Lua code above), and the arguments.\n\nAs you can see, the first argument is the command name. The second argument is a function that is the command handler, and the third argument is a boolean that specifies whether or not it should be a restricted command.\n\nThe function itself gets an argument that is the , which only really matters if you're running on the server (it'll be the client ID of the player that entered the command, a really useful thing to have), and an array of which are basically what you enter after the command like making end up being or being .\n\nSince we already know how to print a message to the chat box, we'll just pretend to spawn a vehicle by printing the name of the vehicle to the console.\n\nLet's restart the resource and see what happens. Run , then in the client chat box (default ) type . You'll see the chat box complain that you were too lazy to implement this. We'll show them that you're absolutely not lazy, and actually implement this now.\n\nThis is a lot of boilerplate code, and we'll want to do this the right way since lots of people will copy this example, so it might look a bit overwhelming.\n\nBasically what we'll do is:\n• Check if the passed model is valid. It's no fun trying to spawn a 'potato' when there's no vehicle with that name.\n• Load the model. You'll need to explicitly manage every model you're using, these are the rules originally defined by R*.\n• Wait for the model to be loaded. Yes, the game will continue running asynchronously.\n• Figure out where the player is once it loaded.\n• Create the vehicle! Awesome, finally you get to be creative.\n• Put the player into the vehicle.\n• Clean up, since we are tidy people and 🚮 and all.\n\nReplace the bit you just pasted in with this, and don't worry we'll explain it before you can say 'lazy' twice:\n\nThis uses a LOT of natives. We'll link a few of them and explain the hard parts.\n\nWe started with checking the vehicle name. If it's (that is, not existent), we'll default to the . Either way, it's stored in a variable.\n\nThen, we check if the vehicle is in the CD image using IS_MODEL_IN_CDIMAGE. This basically means 'is this registered with the game'. We also check if it's a vehicle using IS_MODEL_A_VEHICLE. If either check fails, we tell the player and return from the command.\n\nNow, we call REQUEST_MODEL to load the actual vehicle model. This native takes a argument, but in Lua you can also just pass a string and it'll be converted to a hash. You'll often see people use (GET_HASH_KEY), but if the native is specified as taking a , you actually don't need this.\n\nStep 3: Waiting for the model to be loaded\n\nWe loop calls to HAS_MODEL_LOADED to check if loading succeeded. Since this is a loop and we're cooperatively multitasked, you'll have to give the game time to run as well - otherwise it'll never even finish loading and the game will unfortunately freeze. That's what the call is for - it waits for the specified amount of milliseconds, then returns right back into the script.\n\nOnce the model's loaded, we'll continue.\n\nPlayers' physical incarnations are identified by their , which is short for 'pedestrian'. This is a GTA term, and it usually means 'anything that lives and has legs'. We use PLAYER_PED_ID to get the local (basically, whoever is executing this command) player's ped.\n\nAfter we have the ped and store it in a variable, we get the position of the player ped using GET_ENTITY_COORDS. Since a ped is an entity (the same goes for vehicles and a few other things), this native is used for getting their position. This native, again, returns a , similar to how the was defined earlier.\n\nWe use CREATE_VEHICLE to, well, create a vehicle. In the meanwhile, we snuck in a call to get the player's heading using GET_ENTITY_HEADING, which makes the car spawn facing the same direction as the player.\n\nThe is a convention in entity creation natives to create the vehicle with a network object ( ), but not make it a mission object ( ). You usually want the former, or nobody else will see the vehicle - and you won't want the latter, since you're not writing a full R* mission script.\n\nStep 6: Setting the player into the vehicle\n\nSince we have a ped and a vehicle now, we can use SET_PED_INTO_VEHICLE to place the ped into the vehicle. As the documentation happens to say, is the driver seat of the vehicle.\n\nThe game likes it when you clean up after yourself, and as we're not doing anything with the vehicle or the model anymore in this script, we'll let the game manage it. This is what we use SET_ENTITY_AS_NO_LONGER_NEEDED and SET_MODEL_AS_NO_LONGER_NEEDED for.\n\nFinally, we tell the player to enjoy their new vehicle.\n\nIn your server console, (yeah you can split stuff with semicolons), and try in the game client (which should by now be really bored of respawning). You'll now have your very own Rocket Voltic!\n\nYou'll probably also want to write scripts that interact with the server. This section is still to be written. :-("
    },
    {
        "link": "https://forum.cfx.re/t/how-to-start-scripting-fivem-server/5309554",
        "document": "If you’re completely new to LUA or ANY programing languages, you’re going to want to keep a companion with you as you learn. Enter the lua programming manual:\n\n https://www.lua.org/pil/contents.html\n\n AND NO, YOU DON’T HAVE TO READ THE WHOLE BOOK…\n\n…Start with the lua programming manual chapters 2, 3, 4, 5, and 7.\n\nThese will cover 70% of the lua scripts you see in “releases”\n\nIt’ll seem overwhelming at first, but remember, this knowledge isn’t going anywhere. Come back in a few months and it’ll most likely be the same. Meaning use it as you need it, but go over the above chapters at LEAST once so that if you get lost, you won’t be COMPLETELY lost.\n\n (You’ll have remembered seeing it somewhere, and you’ll know how to ask for help if you need to)\n\nThat will give you a base - or the fundamentals.\n\nOnce you understand the general idea of the programming language (what does and can’t do, where it should be used, and where it should NOT be used), then you can start following along with tutorials\n\nPart 2: Try to keep up!\n\nNow that you have a base down, you can start learning about how it applies to fiveM.\n\n By this point you should have an idea of what functions are.\n\n FiveM uses many different functions for many different purposes. One of the most common types of GTAV-specific functions used are called “natives.”\n\nNatives are just a fancy word for functions. Specifically functions that make your GTA V game do cool shit. (I think that was a famous quote). There’s a lot of natives. Many you’ll use EVERY TIME YOU CREATE A SCRIPT. Many you’ll ignore and that’s okay.\n\n A full list of natives can be found here:\n\n MOSTLY FULL LIST OF NATIVES\n\nWith your foundational knowledge and knowledge of natives, you can start following along tutorials confidently.\n\nIf you’re someone who learns by reading, as @ChristopherM mentioned, you have:\n• Creating your first script in Lua - Cfx.re Docs\n• You also have many, forum posts.\n• And of course, google (BEWARE NON-OFFICIAL FIVEM SITES, exercise caution!)\n\nIf you are indeed a visual learner, the two best playlists by far have been:\n\nBoth are great and do a good job of providing the WHY which is very important (to me) when learning.\n\nGet caught up on whichever resource you resonate with most and move on to the next section.\n\n Note: you may need 2 or more resources if it doesn’t make sense. That’s okay. Be patient.\n\nNow you should have an idea of Lua Scripting, and LUA scripting as it pertains to fiveM and GTA V. You should have a general idea of what the language does and can’t do, and more or less what GTA V can and can’t do as well.\n\n You should also be familiar with events, and a few other topics.\n\nThe advanced beginners will be familiar with engine limitations, less documented features like promises, state-bags, cross-resource dependencies, or Exports, and maybe even convars. If not, that’s okay.\n\nThe goal of part 3 is to bring an idea to life. This idea can be either:\n• a part of the game that rockstar fell short on (called a “Quality of life fix”),\n• a feature that would make the game more enjoyable\n• something that you and your friends can enjoy together.\n\nIt doesn’t have to be ambitious or a huge project. Think of a simple script.\n\nIf you can’t immediately think of something, meditate on it for a few days. For me, it started with fixing aircraft handling. Another one was a script that allowed you to see the physical edge of the default map so you don’t fly out too far.\n\nIt doesn’t have to be that basic, but it also doesn’t have to be crazy huge. Start with something you KNOW you can do. Something you may get tripped up on a little, but that you know is possible. I’m a bit embarrassed on the above post, but I’ve come a long way and am proud of that I didn’t stop being ‘annoying’ about learning!\n\nLastly, don’t worry about making it performant, or perfect. Just make it work.\n\nPart 4 involves optimization. You should know about the basics, and how to become somewhat useful by this point. BUT YOU CAN DO MORE!\n\nFor part 4, I want you to improve your scripts in terms of quality, performance, SECURITY, and consistency.\n\nFor example, when it comes to the player experience, FRAMERATE actually matters. For example, when calculating points, if you calculate points every frame, then players with higher fps will get more points than players with lower fps\n\nYou’ll also want to work on reducing the run-time of your existing scripts. The runtime is how much of the CPU’s time your client AND SERVER scripts you’re using.\n\nBut wetter, how do I know what my script performance is?\n\nThat’s where you’ll want to use tools like the profiler and the resource monitor to observe how long your script is taking to run, and seeing if it can be reduced to the acceptable 0-4ms rate.\n\nThere’s also the security aspect. You should NEVER, EVER, EVER trust the client because the data that the client sends may be intentionally wrong at best, and malicious at worst.\n\n For security, the question is:\n• Not only: “How do I protect the server and sanitize the data coming from the client”\n\n but ALSO\n• How do I log what’s not legit so that I can manually or automatically take action later?\n\nThere are also other optimizations such as manually running math functions yourself instead of relying on natives, and a few other things. This can get pretty rabbit hole-y so don’t get lost.\n\nOnce you’re comfortable, try to find a free script here in the FiveM Releases section. See if there’s anywhere you can improve. Once you’ve improved 2-3 simple scripts, you can move on\n\nThe final part is where you put it all together.\n\nThis is where you come up with something ambitious. This can be a small party game, racing game, or a fivem system, or a demonstration of an experiment or something similar. It must combine what you know and have the intercommunication of at least two scripts working together.\n\nThis path isn’t the best, and leaves out things such as frameworks, infrastructure setup, interiors, proper logging practices, intermediate programming techniques, advanced programming techniques, however, this guide will hopefully take you from a straight-BEGINNER to a fairly moderate INTERMEDIATE / self sufficient programmer. But don’t feel obligated to take this path. The important part is that you find one that works for you if this isn’t it. Good luck!"
    },
    {
        "link": "https://docs.fivem.net/docs/scripting-reference",
        "document": "FiveM is a fantastic platform for developers of all skill levels to learn and grow. This page will provide comprehensive references for all things related to scripting.\n\nWe offer a variety of excellent tools to help you get started with your server. Here's a list of some key resources:\n\nFiveM supports C#, Lua, and JavaScript, allowing you the flexibility to create and modify your scripts. Here are some useful links to get you started:"
    },
    {
        "link": "https://lua.org/docs.html",
        "document": "The reference manuals for all versions of Lua are available online in English. Some are available in other languages and as a printed book.\n\nLua – an extensible extension language This paper was awarded the first prize (technological category) in the II Compaq Award for Research and Development in Computer Science in 1997. This award was a joint venture of Compaq Computer in Brazil, the Brazilian Ministry of Science and Technology, and the Brazilian Academy of Sciences."
    },
    {
        "link": "https://docs.fivem.net/docs/scripting-reference/runtimes/lua/functions/vector3",
        "document": "In FiveM's Lua runtime, vectors are real data types, just like numbers, bools and strings are. This means that will return . More about this in the Lua runtime manual.\n\nMany existing natives such as and already have first class support for vector3 values. For example, returns a vector3, whereas accepts one, instead of using individual values. See the second example below for a real world use of vector3, or read more about them in the Lua runtime manual and native functions manual.\n• x: A floating point number representing the value of your vector.\n• y: A floating point number representing the value of your vector.\n• z: A floating point number representing the value of your vector.\n\nSince many native functions already return and support vectors in Lua, you can do the following to push your vehicle forward 5 meters relative to its own axis:"
    },
    {
        "link": "https://docs.fivem.net/docs/scripting-manual/runtimes/lua",
        "document": "FiveM supports the general purpose programming language Lua as one of its scripting languages. Lua is a very easy language to learn, simple to use and fast to write. To use Lua, just use in your scripts file extensions.\n\nA modified version of Lua 5.3 is used in FiveM, called CfxLua. This version includes some of the modifications the Grit game engine introduced:\n\nTo learn more about Lua, read their official documentation.\n\nTo use Lua in your scripts, simply use the file extension. No additional configuration is required.\n\nBecause you might often have to deal with 'Jenkins one-at-a-time' hashes in GTA/RAGE, the Lua runtime has been extended to have support for compile-time generation of hash keys, similar to GET_HASH_KEY, however with zero runtime overhead.\n\nFiveM supports first-class vectors and quaternions in Lua. Vectors and quaternions are incredibly useful to represent things like positions, rotations or even colors. For performance reasons, vectors and quaternions are real data types in CfxLua, just like booleans, numbers and strings are.\n\nMany native functions return and accept vectors too. They're commonly used for world positions and standard euler rotations, so use them whenever you can. More about there here.\n\nFor usage and examples see their respective docs:\n\nYou can define exports by calling the global object:\n\nYou can also define an or entry in your resource manifest. Functions need to be global to be 'explicitly' exported. Note that these exports will only be available after the first scheduler tick.\n\nThe Lua runtime exposes some libraries on the global scope which you can use."
    },
    {
        "link": "https://forum.cfx.re/t/documented-fivem-lua-sdk/25957",
        "document": "This is a LUA SDK for the FiveM mod. Contribute to TanKode/fivem-lua-sdk development by creating an account on GitHub."
    },
    {
        "link": "https://docs.fivem.net/docs/scripting-manual/introduction/creating-your-first-script",
        "document": "Creating your first script in Lua\n\nGetting started with scripting for FiveM might be a tad overwhelming, given the wide range of possibilities and the sparsely spread documentation. In this quick and simple guide, we'll try to show you how to get started with a quick resource in Lua.\n\nA resource is, simply said, a collection of files that can be individually started, stopped and restarted. Your server-data folder (assuming you already installed a server) should have a folder already, with a few resources in them already.\n\nIf you're working on your own resources, you'll probably want to make a directory - this one will be ignored by Git when updating the server-data root. In there, we'll make a folder, since we're making, well, a gametype using the system.\n\nThat means you'll need to have a folder like this by now, assuming a Windows development system: . We'll call this folder from now on.\n\nA resource folder (you know, this you made above) will need a manifest to be detected by FiveM. Since this is a game type, it'll need some extra information as well to teach about the fact that this is a game type.\n\nMake a file called (this is always Lua, even if you'll be writing scripts in C#/JS later on) in your folder. In it, put the following text using your favorite text editor:\n\nAny new resource you make will probably want the latest game features. This is what the is for. You can read up on it elsewhere on this documentation site, if you ever feel the need to know more. To specify if this resource is for gta5, rdr3, or , you should use the variable.\n\nThe , on the other hand, tells that this, in fact, is a game type, and that it's called \"My awesome game type!\". If you're just making a 'standalone' add-on resource, you probably don't want to include a line.\n\nFinally, the indicates to the scripting runtime that the client should load a script, named . If this were a JS script, it'd say , or if it were C#, it'd probably be , but for now we're teaching Lua so just forget that.\n\nFinally, we should make a file called in the resource folder thing.\n\nTo learn more about resource manifest files, take a look at the resource manifest reference.\n\nIn this file, let's put the following content:\n\nThis is a tough one, especially if you're not used to the concept of first-class functions. You could also write it differently, using global/local functions - but that's just a bit odd.\n\nLet's go through this bit by bit, with an annotated version.\n\nA quick mention of the difference between client and server scripts: most of what you'll do in FiveM will be done using client scripts, since in current versions there's no interaction with game functionality in server scripts. Server scripts should be used to have scripted actions occur across clients (using client/server events), and to provide a 'source of trust' for various actions, such as storing/loading things in a persistent database.\n\nSince spawning a player is pretty much entirely game interaction, this happens on the client side. Every player that's joined will have a local instance of each client script running on their PC, with no shared variables or context between them.\n\nYou're probably hoping to be able to run this little example - well, hopefully you already have a running FXServer instance - if not, follow the guide for that.\n\nOnce you've started FXServer, execute the command in the console. This'll reread every single file for every resource you have installed, since you probably just started the server this isn't really needed but if you had the server running already this is just A Good Idea™ to do.\n\nFinally, execute in the console, and connect to your server using the FiveM client's handy button in developer mode (or just enter on the direct connect tab, or if you used the default port click this useful link on the PC you have FiveM installed on).\n\nOnce the game loads, you should see yourself spawning somewhere - hopefully on a big stage!\n\nKeep the game running (and maybe set it to borderless or windowed mode in the game options) and Alt-Tab out back into your code editor - we have more work to do!\n\nIt's silly to close your game and server and restart them both to iterate on your resource. Of course, you can restart your resource as well.\n\nLet's try some different spawn point.\n\nReplace the line (the first one) in with the following:\n\nThen, in your server console, execute the magical command . You should (again) see 'Welcome to the party!~' mentioned in your chat box, and end up on a pier instead of the stage.\n\nYou'll probably want to do more. For this, you're going to have to learn how to call natives, which has nothing to do with indigenous people and actually are a R* label for 'game-defined script functions'. There's a lot of intricacies involved in calling natives properly - for a full reference, see the special section for this - but we'll start simple for now.\n\nIn a stupid way of 'this trope again', we'll make a command that'll spawn a car. Locally. Because nobody cares about the server when they're starting out.\n\nAt the bottom of your , add this code:\n\nStarting already, we see a call to a function. We did not define that function. Well, we (as in, the FiveM team) did, but not when guiding you, the reader, through this wondrously written marvel of a guide. That means it must come from somewhere else!\n\nAnd, guess what, it's actually REGISTER_COMMAND! Click that link, and you'll be led to the documentation for this native. It looks a bit like this:\n\nWe'll mainly care about the name on the second line ( , as used in the Lua code above), and the arguments.\n\nAs you can see, the first argument is the command name. The second argument is a function that is the command handler, and the third argument is a boolean that specifies whether or not it should be a restricted command.\n\nThe function itself gets an argument that is the , which only really matters if you're running on the server (it'll be the client ID of the player that entered the command, a really useful thing to have), and an array of which are basically what you enter after the command like making end up being or being .\n\nSince we already know how to print a message to the chat box, we'll just pretend to spawn a vehicle by printing the name of the vehicle to the console.\n\nLet's restart the resource and see what happens. Run , then in the client chat box (default ) type . You'll see the chat box complain that you were too lazy to implement this. We'll show them that you're absolutely not lazy, and actually implement this now.\n\nThis is a lot of boilerplate code, and we'll want to do this the right way since lots of people will copy this example, so it might look a bit overwhelming.\n\nBasically what we'll do is:\n• Check if the passed model is valid. It's no fun trying to spawn a 'potato' when there's no vehicle with that name.\n• Load the model. You'll need to explicitly manage every model you're using, these are the rules originally defined by R*.\n• Wait for the model to be loaded. Yes, the game will continue running asynchronously.\n• Figure out where the player is once it loaded.\n• Create the vehicle! Awesome, finally you get to be creative.\n• Put the player into the vehicle.\n• Clean up, since we are tidy people and 🚮 and all.\n\nReplace the bit you just pasted in with this, and don't worry we'll explain it before you can say 'lazy' twice:\n\nThis uses a LOT of natives. We'll link a few of them and explain the hard parts.\n\nWe started with checking the vehicle name. If it's (that is, not existent), we'll default to the . Either way, it's stored in a variable.\n\nThen, we check if the vehicle is in the CD image using IS_MODEL_IN_CDIMAGE. This basically means 'is this registered with the game'. We also check if it's a vehicle using IS_MODEL_A_VEHICLE. If either check fails, we tell the player and return from the command.\n\nNow, we call REQUEST_MODEL to load the actual vehicle model. This native takes a argument, but in Lua you can also just pass a string and it'll be converted to a hash. You'll often see people use (GET_HASH_KEY), but if the native is specified as taking a , you actually don't need this.\n\nStep 3: Waiting for the model to be loaded\n\nWe loop calls to HAS_MODEL_LOADED to check if loading succeeded. Since this is a loop and we're cooperatively multitasked, you'll have to give the game time to run as well - otherwise it'll never even finish loading and the game will unfortunately freeze. That's what the call is for - it waits for the specified amount of milliseconds, then returns right back into the script.\n\nOnce the model's loaded, we'll continue.\n\nPlayers' physical incarnations are identified by their , which is short for 'pedestrian'. This is a GTA term, and it usually means 'anything that lives and has legs'. We use PLAYER_PED_ID to get the local (basically, whoever is executing this command) player's ped.\n\nAfter we have the ped and store it in a variable, we get the position of the player ped using GET_ENTITY_COORDS. Since a ped is an entity (the same goes for vehicles and a few other things), this native is used for getting their position. This native, again, returns a , similar to how the was defined earlier.\n\nWe use CREATE_VEHICLE to, well, create a vehicle. In the meanwhile, we snuck in a call to get the player's heading using GET_ENTITY_HEADING, which makes the car spawn facing the same direction as the player.\n\nThe is a convention in entity creation natives to create the vehicle with a network object ( ), but not make it a mission object ( ). You usually want the former, or nobody else will see the vehicle - and you won't want the latter, since you're not writing a full R* mission script.\n\nStep 6: Setting the player into the vehicle\n\nSince we have a ped and a vehicle now, we can use SET_PED_INTO_VEHICLE to place the ped into the vehicle. As the documentation happens to say, is the driver seat of the vehicle.\n\nThe game likes it when you clean up after yourself, and as we're not doing anything with the vehicle or the model anymore in this script, we'll let the game manage it. This is what we use SET_ENTITY_AS_NO_LONGER_NEEDED and SET_MODEL_AS_NO_LONGER_NEEDED for.\n\nFinally, we tell the player to enjoy their new vehicle.\n\nIn your server console, (yeah you can split stuff with semicolons), and try in the game client (which should by now be really bored of respawning). You'll now have your very own Rocket Voltic!\n\nYou'll probably also want to write scripts that interact with the server. This section is still to be written. :-("
    },
    {
        "link": "https://docs.coregames.com/api/vector3",
        "document": "A three-component vector that can represent a position or direction.\n\nVector3.Lerp is a function for finding a spot part-way between two vectors. When combined with a tick function or loop, we can use it to smoothly animate something moving between two points.\n\n-- Note: You generally would not want to call SetWorldPosition except in a client context. (Otherwise, -- it would \"jitter\" due to network lag.) If you want to do this kind of effect for objects on the server, -- consider using CoreObject:MoveTo() and similar functions!\n\nThere are several different ways to create Vector3s. You can directly specify the x, y, z coordinates, or you can feed it a Vector2 or Vector4 to pull coordinates from, or you can just give it a single number to apply to x y and z.\n\nThe Vector3 namespace includes a small selection of constants, for commonly used Vector3 values.\n\nA normalized vector is a vector who's magnitude (size) is equal to 1. Vector3 variables have a function, which returns this value. Its equivalent to dividing the vector by its own size, and is useful in linear algebra.\n\nDot Product and Cross Product are two other common linear algebra operations, which can be represented in Lua by the and operators respectively.\n\nHere is a sample that uses these operations to determine if an object is aimed within 15 degrees of a player.\n\n-- draw a line so we can see where it is \"looking\" -- Is the object facing the player? (And not 180 degrees the opposite direction?) -- When the vectors are normalized, (which these are), the dot product is equal to -- the cosine of the angle between the vectors. Which means it will be positive, -- if the two vectors aren't more than 90 degrees apart. This makes it a great way to check -- if something is \"generally facing\" something else! -- Here we check if the player is actually within 15 degrees of the aim. -- we can do this, because if the input vectors are normalized (which again, these are), -- then the output vector has a magnitude equal to the sin of the angle between them. -- So this makes it a really easy way to check if a vector is within a certain angle -- of another vector. (Especially if we combine it with the previous check to make sure\n\nMost arithmetic operators will work on Vector3s in straightforward ways.\n\n-- Adding and subtracting vectors is the same as adding or subtracting each of their components. -- You can also add or subtract a number and a vector - it will just add or subtract that -- Multiplication and Division work the same way: -- You can also just negate a vector:\n\nA lot of vector math requires knowing the magnitude of a vector - i. e. if you think of the vector as a point, how far away is it from (0, 0, 0)?\n\nIn Lua, you can get that value via the property. There is also the property, which is sometimes useful as a CPU optimization. Typically is used instead of in distance comparisons, because if , then .\n\nThis sample creates a healing aura around an object, that heals the player more, the closer they are to it.\n\nAfter creating a , we can read or write to its x, y, z components directly."
    }
]