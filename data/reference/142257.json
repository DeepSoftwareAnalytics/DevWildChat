[
    {
        "link": "https://mongodb.com/resources/products/compatibilities/mongodb-laravel-integration",
        "document": "Laravel’s Eloquent library allows us to map and perform database CRUD operations (Create, Read, Update, Delete) directly from the Laravel models.\n\nAssuming that we have a MongoDB collection called “posts,” an example document in the \"posts\" collection might look something like this:\n\nIf you are using MongoDB Atlas, you can use the Atlas Console to insert this document record directly into the database named “myappdb.”\n\nOur first step will be to create a Laravel model to represent the blog posts. From the project directory, run the following command:\n\nThis will create an App/Models/Post.php and an App/Http/Controllers/PostController.php file.\n\nHowever, for MongoDB, we want to extend the MongoDB Eloquent model, so we want to edit App/Models/Post.php. Our Post model ought to look like this:\n\nNote that when storing new data, Laravel will automatically create the collection in the MongoDB database for you. By default, the collection name is the plural of the model used (“posts” in this case). However, you can override that by setting a collection property on the model like this:\n\nIf you were using multiple databases, you would also want to specify the database connection name on the model as indicated above.\n\nNext, we can use our Post model to read and display our blog posts from the MongoDB database. First, let’s create a function in the PostController to get a blog post using a slug:\n\nIn the example above, we are just retrieving the post using its slug name. The MongoDB Eloquent models support all the standard Eloquent query methods, but they also support additional queries that are specific to MongoDB itself. For more details, see https://github.com/mongodb/laravel-mongodb.\n\nNext, let’s add the following line to the routes\\web.php file to create a route for the blog posts:\n\nDisplay the Data Using the Laravel View\n\nFinally, let’s add a view to format and style the blog post data for display. The view name needs to match the view that we use in our controller. We can do this by creating the file myapp/resources/views/post.blade.php with the following content:\n\nNow we can see our post at http://localhost:8000/post/first-blog-post.\n\nSave the Data into the MongoDB Database\n\nNow, let’s say you also wanted to create an API that you could use to create blog posts in your application. First, we would want to add a method in our PostController to store a post:\n\nNext, we want to configure a resource route for posts in App\\routes\\api.php:\n\nAnd finally, we can test our API by making a POST request to http://localhost:8000/api/posts. Here’s an example using the Postman app:\n\nWe can check the MongoDB database and see the blog post has been stored:\n\nWe should also be able to see the new post by going to http://localhost:8000/post/second-blog-post.\n\nAs you may have noticed, if a primary key is not specified on the model, the property _id is used as the primary key for each record.\n\nTo delete a record, we can use that id to find and delete records. Since we already defined a resource route for posts, we only need to add a destroy() method to the PostController:\n\nThen, we can issue a DELETE request to the API endpoint http://localhost:8000/api/posts/<post_id> to delete a post.\n\nWe have created APIs to create and delete blog posts. We may also want to create an API for updating blog posts. This is very similar to the previous examples. We just need to add a method to the PostController:\n\nNow, we can issue a PUT request to the API endpoint http://localhost:8000/api/posts/<post_id> with the updated content of the blog post."
    },
    {
        "link": "https://mongodb.com/developer/languages/php/laravel-mongodb-tutorial",
        "document": ""
    },
    {
        "link": "https://quora.com/How-do-you-create-REST-APIs-with-MongoDB-and-Laravel",
        "document": "Something went wrong. Wait a moment and try again."
    },
    {
        "link": "https://gist.github.com/dking1342/043893707f05df24640113de4bf1ac6a",
        "document": "Insert the extension in the file under the dynamic extensions. If a file is not there then search where any development or production php.ini files are being stored and copy to create a php.ini file.\n\nInsert the version you want to use but make sure that it is compatible with the Laravel version you are using.\n\nIn the file insert the following in the providers\n\nEdit the following to the file\n\nIn the file within the app/config folder the default connection will need to be changed. It should look like this\n\nIn the connections array add the mongodb driver\n\nGo to the root folder and run the command to create a new app\n\nThere will be a model and controller created along with a pre-made migration file.\n\nOpen the file in the app/models folder. It should look like this:\n\nCreate a new file for the responses that will be generated from the api. In the app/Models folder create a new file\n\nThe file should look like this\n\nGo to the migration file corresponding to the model in the database/migrations folder. It should have the name similar to create todos table. The file should look like this:\n\nIn the root folder run the command to migrate the files to the database\n\nLook at the database to see if the tables have loaded by using the command\n\nIf you are able to see the table and results from the query then everything went well.\n\nOpen the file in the app/Http/Controllers folder. The file should look like this with all the controllers for fetch requests.\n\nGo to the file in the routes folder. It will look like this:\n\nOpen the file in the app/Exceptions folder. You will want to edit the register function to have it look like this:\n\nThe file will need to have the following import to work properly\n\nThis will be an exception handler to take care of any routes not specified in the routes file.\n\nIn the terminal run the command:\n\nIf all goes well then you will be able to make API calls. Test out the GET, POST, PUT and DELETE methods. You can use curl, Postman or any other method you prefer.\n\nIn the root folder create the following files:\n\nThe Dockerfile should look like this:\n\nThe dockerignore file should look like this\n\nThe docker-compose file should look like this:\n\nGo to the file in the root directory and change it to reflect the changes to the host\n\nOpen and run the Docker daemon then run the command to start the container\n\nTo shut down the containers run the command"
    },
    {
        "link": "https://stackoverflow.com/questions/22355828/doing-http-requests-from-laravel-to-an-external-api",
        "document": "What I want is get an object from an API with a HTTP (eg, jQuery's AJAX) request to an external api. How do I start? I did research on Mr Google but I can't find anything helping.\n\nIm starting to wonder is this is even possible? In this post Laravel 4 make post request from controller to external url with data it looks like it can be done. But there's no example nor any source where to find some documentation.\n\nPlease help me out?"
    },
    {
        "link": "https://github.com/mongodb/laravel-mongodb",
        "document": "This package adds functionalities to the Eloquent model and Query builder for MongoDB, using the original Laravel API. This library extends the original Laravel classes, so it uses exactly the same methods.\n\nThis package was renamed to because of a transfer of ownership to MongoDB, Inc. It is compatible with Laravel 10.x. For older versions of Laravel, please refer to the old versions.\n\nReleases are created automatically and the resulting release tag is signed using the PHP team's GPG key. To verify the tag signature, download the key and import it using :\n\nThen, in a local clone, verify the signature of a given tag (e.g. ):\n\nThink you’ve found a bug in the library? Want to see a new feature? Please open a case in our issue management tool, JIRA:\n• Click Create - Please provide as much information as possible about the issue type and how to reproduce it.\n\nNote: All reported issues in JIRA project are public.\n\nFor general questions and support requests, please use one of MongoDB's Technical Support channels.\n\nIf you've identified a security vulnerability in a driver or any other MongoDB project, please report it according to the instructions in Create a Vulnerability Report.\n\nDevelopment is tracked in the PHPORM project in MongoDB's JIRA. Documentation for contributing to this project may be found in CONTRIBUTING.md."
    },
    {
        "link": "https://mongodb.com/docs/drivers/php/laravel-mongodb/current",
        "document": "Learn how to add the Laravel Integration to a Laravel web application, connect to MongoDB hosted on MongoDB Atlas, and begin working with data in the Quick Start section.\n\nLaravel MongoDB v5.0 introduces breaking changes that might affect how you upgrade your application from a v4.x version. Learn what changes you must make to your application to upgrade between major versions in the Upgrade Library Version section.\n\nSee fully runnable code examples and explanations of common MongoDB operations in the Usage Examples section.\n\nLearn how to use the Laravel Integration to work with MongoDB databases and collections in the Databases and Collections section.\n\nLearn how to report bugs, contribute to the library, and find more resources in the Issues & Help section.\n\nLearn about Laravel features that the Laravel Integration supports in the Laravel Feature Compatibility section.\n\nTo learn more about which versions of Laravel MongoDB and Laravel are compatible, see the Compatibility section."
    },
    {
        "link": "https://stackoverflow.com/questions/75577962/cant-install-jenssegers-mongodb-in-laravel-10",
        "document": "I am new to Laravel. I want to connect to MongoDB using Laravel 10 which require jenssegers/mongodb to be installed. When I run command in the terminal, I got error like this:\n\nNote that I use PHP 8.1.10 and download php_mongodb.dll (download from this link and it support PHP 7.3) to folder and add to file but it look like this module could not be found as show in the result above.\n\nThis is my composer.json:\n\nI had tried another command like , , , or similar but it didn't help.\n\nHow do I solve this problem? Any help would be appreciated."
    },
    {
        "link": "https://mongodb.com/resources/products/compatibilities/mongodb-laravel-integration",
        "document": "Laravel’s Eloquent library allows us to map and perform database CRUD operations (Create, Read, Update, Delete) directly from the Laravel models.\n\nAssuming that we have a MongoDB collection called “posts,” an example document in the \"posts\" collection might look something like this:\n\nIf you are using MongoDB Atlas, you can use the Atlas Console to insert this document record directly into the database named “myappdb.”\n\nOur first step will be to create a Laravel model to represent the blog posts. From the project directory, run the following command:\n\nThis will create an App/Models/Post.php and an App/Http/Controllers/PostController.php file.\n\nHowever, for MongoDB, we want to extend the MongoDB Eloquent model, so we want to edit App/Models/Post.php. Our Post model ought to look like this:\n\nNote that when storing new data, Laravel will automatically create the collection in the MongoDB database for you. By default, the collection name is the plural of the model used (“posts” in this case). However, you can override that by setting a collection property on the model like this:\n\nIf you were using multiple databases, you would also want to specify the database connection name on the model as indicated above.\n\nNext, we can use our Post model to read and display our blog posts from the MongoDB database. First, let’s create a function in the PostController to get a blog post using a slug:\n\nIn the example above, we are just retrieving the post using its slug name. The MongoDB Eloquent models support all the standard Eloquent query methods, but they also support additional queries that are specific to MongoDB itself. For more details, see https://github.com/mongodb/laravel-mongodb.\n\nNext, let’s add the following line to the routes\\web.php file to create a route for the blog posts:\n\nDisplay the Data Using the Laravel View\n\nFinally, let’s add a view to format and style the blog post data for display. The view name needs to match the view that we use in our controller. We can do this by creating the file myapp/resources/views/post.blade.php with the following content:\n\nNow we can see our post at http://localhost:8000/post/first-blog-post.\n\nSave the Data into the MongoDB Database\n\nNow, let’s say you also wanted to create an API that you could use to create blog posts in your application. First, we would want to add a method in our PostController to store a post:\n\nNext, we want to configure a resource route for posts in App\\routes\\api.php:\n\nAnd finally, we can test our API by making a POST request to http://localhost:8000/api/posts. Here’s an example using the Postman app:\n\nWe can check the MongoDB database and see the blog post has been stored:\n\nWe should also be able to see the new post by going to http://localhost:8000/post/second-blog-post.\n\nAs you may have noticed, if a primary key is not specified on the model, the property _id is used as the primary key for each record.\n\nTo delete a record, we can use that id to find and delete records. Since we already defined a resource route for posts, we only need to add a destroy() method to the PostController:\n\nThen, we can issue a DELETE request to the API endpoint http://localhost:8000/api/posts/<post_id> to delete a post.\n\nWe have created APIs to create and delete blog posts. We may also want to create an API for updating blog posts. This is very similar to the previous examples. We just need to add a method to the PostController:\n\nNow, we can issue a PUT request to the API endpoint http://localhost:8000/api/posts/<post_id> with the updated content of the blog post."
    },
    {
        "link": "https://mongodb.com/docs/drivers/php/laravel-mongodb/v4.x",
        "document": "Learn how to add the Laravel Integration to a Laravel web application, connect to MongoDB hosted on MongoDB Atlas, and begin working with data in the Quick Start section.\n\nSee fully runnable code examples and explanations of common MongoDB operations in the Usage Examples section.\n\nLearn how to report bugs, contribute to the library, and find more resources in the Issues & Help section.\n\nLearn about Laravel features that the Laravel Integration supports in the Laravel Feature Compatibility section.\n\nTo learn more about which versions of Laravel MongoDB and Laravel are compatible, see the Compatibility section.\n\nLearn what changes you must make to your application to upgrade versions in the Upgrade Library Version section."
    }
]