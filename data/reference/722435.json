[
    {
        "link": "https://stackoverflow.com/questions/578890/starting-external-process-from-asp-net",
        "document": "Here is a code snippet , hope this helps"
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.process?view=net-9.0",
        "document": "The following example uses an instance of the Process class to start a process.\n\nThe following example uses the Process class itself and a static Start method to start a process.\n\nThe following F# example defines a function that starts a process, captures all output and error information, and records the number of milliseconds that the process has run. The function has three parameters: the name of application to launch, the arguments to supply to the application, and the starting directory.\n\nThe code for the function was written by ImaginaryDevelopment and is available under the Microsoft Public License.\n\nA Process component provides access to a process that is running on a computer. A process, in the simplest terms, is a running app. A thread is the basic unit to which the operating system allocates processor time. A thread can execute any part of the code of the process, including parts currently being executed by another thread.\n\nThe Process component is a useful tool for starting, stopping, controlling, and monitoring apps. You can use the Process component, to obtain a list of the processes that are running, or you can start a new process. A Process component is used to access system processes. After a Process component has been initialized, it can be used to obtain information about the running process. Such information includes the set of threads, the loaded modules (.dll and .exe files), and performance information such as the amount of memory the process is using.\n\nThis type implements the IDisposable interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its Dispose method in a / block. To dispose of it indirectly, use a language construct such as (in C#) or (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the IDisposable interface documentation.\n\nThe process component obtains information about a group of properties all at once. After the Process component has obtained information about one member of any group, it will cache the values for the other properties in that group and not obtain new information about the other members of the group until you call the Refresh method. Therefore, a property value is not guaranteed to be any newer than the last call to the Refresh method. The group breakdowns are operating-system dependent.\n\nIf you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location. Otherwise, the system will not find the path. For example, if is not in your path, and you add it using quotation marks: , you must fully qualify any process in when starting it.\n\nA system process is uniquely identified on the system by its process identifier. Like many Windows resources, a process is also identified by its handle, which might not be unique on the computer. A handle is the generic term for an identifier of a resource. The operating system persists the process handle, which is accessed through the Handle property of the Process component, even when the process has exited. Thus, you can get the process's administrative information, such as the ExitCode (usually either zero for success or a nonzero error code) and the ExitTime. Handles are an extremely valuable resource, so leaking handles is more virulent than leaking memory.\n\nIn .NET Framework, the Process class by default uses Console encodings, which are typically code page encodings, for the input, output, and error streams. For example code, on systems whose culture is English (United States), code page 437 is the default encoding for the Console class. However, .NET Core may make only a limited subset of these encodings available. If this is the case, it uses Encoding.UTF8 as the default encoding.\n\nIf a Process object depends on specific code page encodings, you can still make them available by doing the following before you call any Process methods:\n• None Retrieve the EncodingProvider object from the CodePagesEncodingProvider.Instance property.\n• None Pass the EncodingProvider object to the Encoding.RegisterProvider method to make the additional encodings supported by the encoding provider available.\n\nThe Process class will then automatically use the default system encoding rather than UTF8, provided that you have registered the encoding provider before calling any Process methods."
    },
    {
        "link": "https://stackoverflow.com/questions/49028612/starting-detached-external-application-from-c-sharp",
        "document": "When start another process using class, newly created process is still associated with the one invoked the start command, which is in turn causing issues with monitoring software or even within the stirted application itself.\n\nSo the question is if it is possible to start an external binary detachad from the caller, as a fully standalone instance? (Like started directly)\n\nThere are some processes expected to be a subprocesses of a specific process.\n\nLike IE usually a subprocess of explorer.exe.\n\nBut started from C# app.exe with it is a subprocess of app.exe\n\nSo is it possible to attach it to expected explorer.exe?"
    },
    {
        "link": "https://medium.com/@jepozdemir/how-to-launch-and-control-processes-in-c-net-applications-4ae6565410d6",
        "document": "How to Launch and Control Processes in C#.NET Applications\n\nHave you ever wanted your .NET application to open another program, run a command-line tool, or interact with other processes? The class makes this possible. It’s a powerful feature in .NET that lets you launch, monitor, and manage processes programmatically.\n\nIn this guide, we’ll cover the essentials of using straightforward examples.\n\nThe class is part of the System.Diagnostics namespace in .NET.\n\nIt allows you to:\n\nYou can launch an external application or command using the method. Here’s how to open Notepad:\n\nThis will open Notepad on your machine. Some processes require arguments. For example, opening a specific file with Notepad:\n\nIf you need more control (e.g., hiding the window or redirecting input/output), use the class.\n\nLet’s dive into the advanced options that class provides.\n\nWhile you can start a process with the method alone, gives you more control. is another class in the namespace. It provides a way to configure various settings for a process before starting it. Think of it as a blueprint for launching a program.\n\nIt’s especially useful when:\n• Specify the program or file to execute.\n• Control how the new process behaves (e.g., visibility, window style).\n\nThink of it as a detailed instruction manual for launching a process.\n\nHere are some commonly used properties of :\n• FileName: Specifies the application or file to execute.\n• Arguments: Specifies the command-line arguments to pass to the program.\n• UseShellExecute: Indicates whether to use the operating system shell to start the process.\n• CreateNoWindow: Specifies whether to create a new window for the process.\n• RedirectStandardInput: Allows you to redirect the process’s input stream.\n• RedirectStandardOutput: Allows you to redirect the process’s output stream.\n• RedirectStandardError: Allows you to redirect the process’s error stream.\n• WorkingDirectory: Specifies the working directory for the process.\n\nHow to Use -ProcessStartInfo-\n\nHere’s how you can use step by step:\n\nCreate an instance of and set its properties as follows:\n\nThen, you are able to use the class to start the process.\n\nIn this example:\n• We create a object and set the property to .\n• Then, we create a object and link it to the .\n• Finally, we call to launch the process.\n\nSuppose we want to open a specific text file in Notepad. \n\nHere, the property is set to “example.txt”. This tells to open the file .\n\nYou can manage how much CPU time a process gets by setting its priority using the property after starting the process.\n\nSome tasks don’t need a visible window. For example, running a background script:\n\nNote that in this example, ensures no command window pops up. is required for hiding the window and enabling advanced options like redirection.\n\nYou can subscribe to the event to run code when a process ends. This is useful for scenarios where you want to perform cleanup or logging.\n\nSometimes, a process requires specific environmental variables to run correctly. You can set these directly using the property.\n\nYou can use the property to add or modify environment variables for the process. This is handy when working with tools that rely on specific configurations.\n\nSometimes, you may need to send data to a process after it has started. This is possible by redirecting the standard input.\n\nYou can also redirect the standard output of a process for logging or analysis. \n\nAssume that you want to run a command-line process (cmd.exe), capture its output (what it writes to the console), and then display that output in our application.\n\nIf you want to capture errors generated by the process, you can redirect the standard error.\n\nWant to see which processes are running on your system? You can use the method to inspect running processes. \n\nFor example, listing all currently running processes:\n\nThis lists all active processes with their names and IDs.\n\nIf you need to terminate a specific process, you can use the method.\n\nFor example, to stop an unwanted Notepad instance:\n\nThis code finds all instances of Notepad and terminates them.\n\nSample codes used here are available in the following GitHub repository:\n\nis a powerful class in the .NET Framework for starting and configuring processes. Whether you need to open a file, run a command-line utility, or interact with another program, gives you the flexibility to get the job done.\n\nStart experimenting with in your projects, and you’ll see how it can simplify tasks that involve external processes!"
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.process.start?view=net-9.0",
        "document": "This API is not CLS-compliant. Starts a process resource by specifying the name of an application, a set of command-line arguments, a user name, a password, and a domain and associates the resource with a new Process component. Public Shared Function Start (fileName As String, arguments As String, userName As String, password As SecureString, domain As String) As Process The name of an application file to run in the process. Command-line arguments to pass when starting the process. The user name to use when starting the process. A SecureString that contains the password to use when starting the process. The domain to use when starting the process. A new Process that is associated with the process resource, or if no process resource is started. Note that a new process that's started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its HasExited property already set to . In this case, the started process may have activated an existing instance of itself and then exited. No file name was specified. An error occurred when opening the associated file. The file specified in the could not be found. The sum of the length of the arguments and the length of the full path to the associated file exceeds 2080. The error message associated with this exception can be one of the following: \"The data area passed to a system call is too small.\" or \"Access is denied.\" The process object has already been disposed. This member is not supported on Linux or macOS (.NET Core only). Use this overload to create a new process and its primary thread by specifying its file name, command-line arguments, user name, password, and domain. The new process then runs the specified executable file in the security context of the specified credentials (user, domain, and password). Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see Validate All Inputs. When the executable file is located on a remote drive, you must identify the network share by using a uniform resource identifier (URI), not a linked drive letter. If the address of the executable file to start is a URL, the process is not started and is returned. This overload lets you start a process without first creating a new Process instance. The overload is an alternative to the explicit steps of creating a new Process instance, setting the FileName, Arguments, UserName, Password, and Domain properties of the StartInfo property, and calling Start for the Process instance. Similarly, in the same way that the Run dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the parameter. For example, you can set the parameter to either \"Notepad.exe\" or \"Notepad\". If the parameter represents an executable file, the parameter might represent a file to act upon, such as the text file in . The file name must represent an executable file in the Start overloads that have , , and parameters. Whenever you use Start to start a process, you might need to close it or you risk losing system resources. Close processes using CloseMainWindow or Kill. You can check whether a process has already been closed by using its HasExited property.\n\nThis API is not CLS-compliant. Starts a process resource by specifying the name of an application, a user name, a password, and a domain and associates the resource with a new Process component. Public Shared Function Start (fileName As String, userName As String, password As SecureString, domain As String) As Process The name of an application file to run in the process. The user name to use when starting the process. A SecureString that contains the password to use when starting the process. The domain to use when starting the process. A new Process that is associated with the process resource, or if no process resource is started. Note that a new process that's started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its HasExited property already set to . In this case, the started process may have activated an existing instance of itself and then exited. No file name was specified. There was an error in opening the associated file. The file specified in the could not be found. The process object has already been disposed. This member is not supported on Linux or macOS (.NET Core only). The following code example shows the use of this overload to start an executable file and also demonstrates the throwing of a Win32Exception when an attempt is made to start an application associated with a nonexecutable file. // NOTE: This example requires a text.txt file file in your Documents folder using System; using System.Diagnostics; using System.Security; using System.ComponentModel; class Example { static void Main() { Console.Write(\"Enter your domain: \"); string domain = Console.ReadLine(); Console.Write(\"Enter you user name: \"); string uname = Console.ReadLine(); Console.Write(\"Enter your password: \"); SecureString password = new SecureString(); ConsoleKeyInfo key; do { key = Console.ReadKey(true); // Ignore any key out of range. if (((int)key.Key) >= 33 && ((int)key.Key <= 90) && key.Key != ConsoleKey.Enter) { // Append the character to the password. password.AppendChar(key.KeyChar); Console.Write(\"*\"); } // Exit if Enter key is pressed. } while (key.Key != ConsoleKey.Enter); Console.WriteLine(); try { Console.WriteLine(\"\n\nTrying to launch NotePad using your login information...\"); Process.Start(\"notepad.exe\", uname, password, domain); } catch (Win32Exception ex) { Console.WriteLine(ex.Message); } string path = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + \"\\\\\"; try { // The following call to Start succeeds if test.txt exists. Console.WriteLine(\"\n\nTrying to launch 'text.txt'...\"); Process.Start(path + \"text.txt\"); } catch (Win32Exception ex) { Console.WriteLine(ex.Message); } try { // Attempting to start in a shell using this Start overload fails. This causes // the following exception, which is picked up in the catch block below: // The specified executable is not a valid application for this OS platform. Console.WriteLine(\"\n\nTrying to launch 'text.txt' with your login information...\"); Process.Start(path + \"text.txt\", uname, password, domain); } catch (Win32Exception ex) { Console.WriteLine(ex.Message); } finally { password.Dispose(); } } } // NOTE: This example requires a text.txt file file in your Documents folder open System open System.Diagnostics open System.Security open System.ComponentModel printf \"Enter your domain: \" let domain = stdin.ReadLine() printf \"Enter you user name: \" let uname = stdin.ReadLine() printf \"Enter your password: \" let password = new SecureString() let mutable key = Console.ReadKey(true) while key.Key <> ConsoleKey.Enter do // Ignore any key out of range. if int key.Key >= 33 && int key.Key <= 90 && key.Key <> ConsoleKey.Enter then // Append the character to the password. password.AppendChar key.KeyChar Console.Write \"*\" key <- Console.ReadKey(true) printfn \"\" try printfn \"\n\nTrying to launch NotePad using your login information...\" Process.Start(\"notepad.exe\", uname, password, domain) |> ignore with :? Win32Exception as ex -> printfn $\"{ex.Message}\" let path = Environment.GetFolderPath Environment.SpecialFolder.MyDocuments + @\"\\\" try // The following call to Start succeeds if test.txt exists. printfn \"\n\nTrying to launch 'text.txt'...\" Process.Start $\"{path}text.txt\" |> ignore with :? Win32Exception as ex -> printfn $\"{ex.Message}\" try try // Attempting to start in a shell using this Start overload fails. This causes // the following exception, which is picked up in the catch block below: // The specified executable is not a valid application for this OS platform. printfn \"\n\nTrying to launch 'text.txt' with your login information...\" Process.Start($\"{path}text.txt\", uname, password, domain) |> ignore with :? Win32Exception as ex -> printfn $\"{ex.Message}\" finally password.Dispose() ' This sample requires a text.txt file file in your documents folder. ' You'll also need to set the startup object in the project to Sub Main. Imports System.Diagnostics Imports System.Security Imports System.ComponentModel Module Program Sub Main() Console.Write(\"Enter your domain: \") Dim domain As String = Console.ReadLine() Console.Write(\"Enter you user name: \") Dim uname As String = Console.ReadLine() Console.Write(\"Enter your password: \") Dim password As New SecureString() Dim key As ConsoleKeyInfo Do key = Console.ReadKey(True) ' Ignore any key out of range. If key.Key >= 33 AndAlso key.Key <= 90 AndAlso key.Key <> ConsoleKey.Enter Then ' Append the character to the password. password.AppendChar(key.KeyChar) Console.Write(\"*\") End If ' Exit if Enter key is pressed. Loop While key.Key <> ConsoleKey.Enter Console.WriteLine() Try Console.WriteLine(vbCrLf + \"Trying to launch NotePad using your login information...\") Process.Start(\"notepad.exe\", uname, password, domain) Catch ex As Win32Exception Console.WriteLine(ex.Message) End Try Dim path As String = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + \"\\\" Try ' The following call to Start succeeds if test.txt exists. Console.WriteLine(vbCrLf + \"Trying to launch 'text.txt'...\") Process.Start(path + \"Text.txt\") Catch ex As Win32Exception Console.WriteLine(ex.Message) End Try Try ' Attempting to start in a shell using this Start overload fails. This causes ' the following exception, which is picked up in the catch block below: ' The specified executable is not a valid application for this OS platform. Console.WriteLine(vbCrLf + \"Trying to launch 'text.txt' with your login information...\") Process.Start(path + \"Text.txt\", uname, password, domain) Catch ex As Win32Exception Console.WriteLine(ex.Message) Finally password.Dispose() End Try End Sub End Module Use this overload to create a new process and its primary thread by specifying its file name, user name, password, and domain. The new process then runs the specified executable file in the security context of the specified credentials (user, domain, and password). Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see Validate All Inputs. When the executable file is located on a remote drive, you must identify the network share by using a uniform resource identifier (URI), not a linked drive letter. If the address of the executable file to start is a URL, the process is not started and is returned. This overload lets you start a process without first creating a new Process instance. The overload is an alternative to the explicit steps of creating a new Process instance, setting the FileName, UserName, Password, and Domain properties of the StartInfo property, and calling Start for the Process instance. Similarly, in the same way that the Run dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the parameter. For example, you can set the parameter to either \"Notepad.exe\" or \"Notepad\". If the parameter represents an executable file, the parameter might represent a file to act upon, such as the text file in . The file name must represent an executable file in the Start overloads that have , , and parameters. Whenever you use Start to start a process, you might need to close it or you risk losing system resources. Close processes using CloseMainWindow or Kill. You can check whether a process has already been closed by using its HasExited property.\n\nStarts a process resource by specifying the name of an application and a set of command-line arguments, and associates the resource with a new Process component. Public Shared Function Start (fileName As String, arguments As String) As Process The name of an application file to run in the process. Command-line arguments to pass when starting the process. A new Process that is associated with the process resource, or if no process resource is started. Note that a new process that's started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its HasExited property already set to . In this case, the started process may have activated an existing instance of itself and then exited. The or parameter is . An error occurred when opening the associated file. The file specified in the could not be found. The sum of the length of the arguments and the length of the full path to the process exceeds 2080. The error message associated with this exception can be one of the following: \"The data area passed to a system call is too small.\" or \"Access is denied.\" The process object has already been disposed. The PATH environment variable has a string containing quotes. The following example first spawns an instance of Internet Explorer and displays the contents of the Favorites folder in the browser. It then starts some other instances of Internet Explorer and displays some specific pages or sites. Finally it starts Internet Explorer with the window being minimized while navigating to a specific site. #using <System.dll> using namespace System; using namespace System::Diagnostics; using namespace System::ComponentModel; // Opens the Internet Explorer application. void OpenApplication(String^ myFavoritesPath) { // Start Internet Explorer. Defaults to the home page. Process::Start(\"IExplore.exe\"); // Display the contents of the favorites folder in the browser. Process::Start(myFavoritesPath); } // Opens urls and .html documents using Internet Explorer. void OpenWithArguments() { // URLs are not considered documents. They can only be opened // by passing them as arguments. Process::Start(\"IExplore.exe\", \"www.northwindtraders.com\"); // Start a Web page using a browser associated with .html and .asp files. Process::Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.htm\"); Process::Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.asp\"); } // Uses the ProcessStartInfo class to start new processes, // both in a minimized mode. void OpenWithStartInfo() { ProcessStartInfo^ startInfo = gcnew ProcessStartInfo(\"IExplore.exe\"); startInfo->WindowStyle = ProcessWindowStyle::Minimized; Process::Start(startInfo); startInfo->Arguments = \"www.northwindtraders.com\"; Process::Start(startInfo); } int main() { // Get the path that stores favorite links. String^ myFavoritesPath = Environment::GetFolderPath(Environment::SpecialFolder::Favorites); OpenApplication(myFavoritesPath); OpenWithArguments(); OpenWithStartInfo(); } using System; using System.Diagnostics; using System.ComponentModel; namespace MyProcessSample { class MyProcess { // Opens the Internet Explorer application. void OpenApplication(string myFavoritesPath) { // Start Internet Explorer. Defaults to the home page. Process.Start(\"IExplore.exe\"); // Display the contents of the favorites folder in the browser. Process.Start(myFavoritesPath); } // Opens urls and .html documents using Internet Explorer. void OpenWithArguments() { // url's are not considered documents. They can only be opened // by passing them as arguments. Process.Start(\"IExplore.exe\", \"www.northwindtraders.com\"); // Start a Web page using a browser associated with .html and .asp files. Process.Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.htm\"); Process.Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.asp\"); } // Uses the ProcessStartInfo class to start new processes, // both in a minimized mode. void OpenWithStartInfo() { ProcessStartInfo startInfo = new ProcessStartInfo(\"IExplore.exe\"); startInfo.WindowStyle = ProcessWindowStyle.Minimized; Process.Start(startInfo); startInfo.Arguments = \"www.northwindtraders.com\"; Process.Start(startInfo); } static void Main() { // Get the path that stores favorite links. string myFavoritesPath = Environment.GetFolderPath(Environment.SpecialFolder.Favorites); MyProcess myProcess = new MyProcess(); myProcess.OpenApplication(myFavoritesPath); myProcess.OpenWithArguments(); myProcess.OpenWithStartInfo(); } } } module processstartstatic open System open System.Diagnostics // Opens the Internet Explorer application. let openApplication (myFavoritesPath: string) = // Start Internet Explorer. Defaults to the home page. Process.Start \"IExplore.exe\" |> ignore // Display the contents of the favorites folder in the browser. Process.Start myFavoritesPath |> ignore // Opens urls and .html documents using Internet Explorer. let openWithArguments () = // url's are not considered documents. They can only be opened // by passing them as arguments. Process.Start(\"IExplore.exe\", \"www.northwindtraders.com\") |> ignore // Start a Web page using a browser associated with .html and .asp files. Process.Start(\"IExplore.exe\", @\"C:\\myPath\\myFile.htm\") |> ignore Process.Start(\"IExplore.exe\", @\"C:\\myPath\\myFile.asp\") |> ignore // Uses the ProcessStartInfo class to start new processes, // both in a minimized mode. let openWithStartInfo () = let startInfo = ProcessStartInfo \"IExplore.exe\" startInfo.WindowStyle <- ProcessWindowStyle.Minimized Process.Start startInfo |> ignore startInfo.Arguments <- \"www.northwindtraders.com\" Process.Start startInfo |> ignore // Get the path that stores favorite links. let myFavoritesPath = Environment.GetFolderPath Environment.SpecialFolder.Favorites openApplication myFavoritesPath openWithArguments () openWithStartInfo () Imports System.Diagnostics Imports System.ComponentModel Namespace MyProcessSample Class MyProcess ' Opens the Internet Explorer application. Public Sub OpenApplication(myFavoritesPath As String) ' Start Internet Explorer. Defaults to the home page. Process.Start(\"IExplore.exe\") ' Display the contents of the favorites folder in the browser. Process.Start(myFavoritesPath) End Sub ' Opens URLs and .html documents using Internet Explorer. Sub OpenWithArguments() ' URLs are not considered documents. They can only be opened ' by passing them as arguments. Process.Start(\"IExplore.exe\", \"www.northwindtraders.com\") ' Start a Web page using a browser associated with .html and .asp files. Process.Start(\"IExplore.exe\", \"C:\\myPath\\myFile.htm\") Process.Start(\"IExplore.exe\", \"C:\\myPath\\myFile.asp\") End Sub ' Uses the ProcessStartInfo class to start new processes, ' both in a minimized mode. Sub OpenWithStartInfo() Dim startInfo As New ProcessStartInfo(\"IExplore.exe\") startInfo.WindowStyle = ProcessWindowStyle.Minimized Process.Start(startInfo) startInfo.Arguments = \"www.northwindtraders.com\" Process.Start(startInfo) End Sub Shared Sub Main() ' Get the path that stores favorite links. Dim myFavoritesPath As String = Environment.GetFolderPath(Environment.SpecialFolder.Favorites) Dim myProcess As New MyProcess() myProcess.OpenApplication(myFavoritesPath) myProcess.OpenWithArguments() myProcess.OpenWithStartInfo() End Sub End Class End Namespace 'MyProcessSample Use this overload to start a process resource by specifying its file name and command-line arguments. The overload associates the resource with a new Process object. Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see Validate All Inputs. If the address of the executable file to start is a URL, the process is not started and is returned. This overload lets you start a process without first creating a new Process instance. The overload is an alternative to the explicit steps of creating a new Process instance, setting the FileName and Arguments members of the StartInfo property, and calling Start for the Process instance. Starting a process by specifying its file name and arguments is similar to typing the file name and command-line arguments in the dialog box of the Windows menu. Therefore, the file name does not need to represent an executable file. It can be of any file type for which the extension has been associated with an application installed on the system. For example the file name can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc if you have associated .doc files with a word processing tool, such as Microsoft Word. Similarly, in the same way that the dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the parameter. For example, you can set the parameter to either \"Notepad.exe\" or \"Notepad\". If the parameter represents an executable file, the parameter might represent a file to act upon, such as the text file in . If the parameter represents a command (.cmd) file, the parameter must include either a \" \" or \" \" argument to specify whether the command window exits or remains after completion. Unlike the other overloads, the overload of Start that has no parameters is not a member. Use that overload when you have already created a Process instance and specified start information (including the file name), and you want to start a process resource and associate it with the existing Process instance. Use one of the overloads when you want to create a new Process component rather than start a process for an existing component. Both this overload and the overload that has no parameters allow you to specify the file name of the process resource to start and command-line arguments to pass. If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location. Otherwise, the system will not find the path. For example, if is not in your path, and you add it using quotation marks: , you must fully qualify any process in when starting it. ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server. If you use the Start method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions. The process does not start in the same context as the client browser, and does not have access to the user desktop. Whenever you use Start to start a process, you might need to close it or you risk losing system resources. Close processes using CloseMainWindow or Kill. You can check whether a process has already been closed by using its HasExited property. A note about apartment states in managed threads is necessary here. When UseShellExecute is on the process component's StartInfo property, make sure you have set a threading model on your application by setting the attribute on the method. Otherwise, a managed thread can be in an state or put in the state, the latter of which conflicts with UseShellExecute being . Some methods require that the apartment state not be . If the state is not explicitly set, when the application encounters such a method, it defaults to , and once set, the apartment state cannot be changed. However, causes an exception to be thrown when the operating system shell is managing the thread.\n\nStarts a process resource by specifying the name of a document or application file and associates the resource with a new Process component. The name of a document or application file to run in the process. A new Process that is associated with the process resource, or if no process resource is started. Note that a new process that's started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its HasExited property already set to . In this case, the started process may have activated an existing instance of itself and then exited. An error occurred when opening the associated file. The file specified in the could not be found. The process object has already been disposed. The PATH environment variable has a string containing quotes. The following example first spawns an instance of Internet Explorer and displays the contents of the Favorites folder in the browser. It then starts some other instances of Internet Explorer and displays some specific pages or sites. Finally it starts Internet Explorer with the window being minimized while navigating to a specific site. #using <System.dll> using namespace System; using namespace System::Diagnostics; using namespace System::ComponentModel; // Opens the Internet Explorer application. void OpenApplication(String^ myFavoritesPath) { // Start Internet Explorer. Defaults to the home page. Process::Start(\"IExplore.exe\"); // Display the contents of the favorites folder in the browser. Process::Start(myFavoritesPath); } // Opens urls and .html documents using Internet Explorer. void OpenWithArguments() { // URLs are not considered documents. They can only be opened // by passing them as arguments. Process::Start(\"IExplore.exe\", \"www.northwindtraders.com\"); // Start a Web page using a browser associated with .html and .asp files. Process::Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.htm\"); Process::Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.asp\"); } // Uses the ProcessStartInfo class to start new processes, // both in a minimized mode. void OpenWithStartInfo() { ProcessStartInfo^ startInfo = gcnew ProcessStartInfo(\"IExplore.exe\"); startInfo->WindowStyle = ProcessWindowStyle::Minimized; Process::Start(startInfo); startInfo->Arguments = \"www.northwindtraders.com\"; Process::Start(startInfo); } int main() { // Get the path that stores favorite links. String^ myFavoritesPath = Environment::GetFolderPath(Environment::SpecialFolder::Favorites); OpenApplication(myFavoritesPath); OpenWithArguments(); OpenWithStartInfo(); } using System; using System.Diagnostics; using System.ComponentModel; namespace MyProcessSample { class MyProcess { // Opens the Internet Explorer application. void OpenApplication(string myFavoritesPath) { // Start Internet Explorer. Defaults to the home page. Process.Start(\"IExplore.exe\"); // Display the contents of the favorites folder in the browser. Process.Start(myFavoritesPath); } // Opens urls and .html documents using Internet Explorer. void OpenWithArguments() { // url's are not considered documents. They can only be opened // by passing them as arguments. Process.Start(\"IExplore.exe\", \"www.northwindtraders.com\"); // Start a Web page using a browser associated with .html and .asp files. Process.Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.htm\"); Process.Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.asp\"); } // Uses the ProcessStartInfo class to start new processes, // both in a minimized mode. void OpenWithStartInfo() { ProcessStartInfo startInfo = new ProcessStartInfo(\"IExplore.exe\"); startInfo.WindowStyle = ProcessWindowStyle.Minimized; Process.Start(startInfo); startInfo.Arguments = \"www.northwindtraders.com\"; Process.Start(startInfo); } static void Main() { // Get the path that stores favorite links. string myFavoritesPath = Environment.GetFolderPath(Environment.SpecialFolder.Favorites); MyProcess myProcess = new MyProcess(); myProcess.OpenApplication(myFavoritesPath); myProcess.OpenWithArguments(); myProcess.OpenWithStartInfo(); } } } module processstartstatic open System open System.Diagnostics // Opens the Internet Explorer application. let openApplication (myFavoritesPath: string) = // Start Internet Explorer. Defaults to the home page. Process.Start \"IExplore.exe\" |> ignore // Display the contents of the favorites folder in the browser. Process.Start myFavoritesPath |> ignore // Opens urls and .html documents using Internet Explorer. let openWithArguments () = // url's are not considered documents. They can only be opened // by passing them as arguments. Process.Start(\"IExplore.exe\", \"www.northwindtraders.com\") |> ignore // Start a Web page using a browser associated with .html and .asp files. Process.Start(\"IExplore.exe\", @\"C:\\myPath\\myFile.htm\") |> ignore Process.Start(\"IExplore.exe\", @\"C:\\myPath\\myFile.asp\") |> ignore // Uses the ProcessStartInfo class to start new processes, // both in a minimized mode. let openWithStartInfo () = let startInfo = ProcessStartInfo \"IExplore.exe\" startInfo.WindowStyle <- ProcessWindowStyle.Minimized Process.Start startInfo |> ignore startInfo.Arguments <- \"www.northwindtraders.com\" Process.Start startInfo |> ignore // Get the path that stores favorite links. let myFavoritesPath = Environment.GetFolderPath Environment.SpecialFolder.Favorites openApplication myFavoritesPath openWithArguments () openWithStartInfo () Imports System.Diagnostics Imports System.ComponentModel Namespace MyProcessSample Class MyProcess ' Opens the Internet Explorer application. Public Sub OpenApplication(myFavoritesPath As String) ' Start Internet Explorer. Defaults to the home page. Process.Start(\"IExplore.exe\") ' Display the contents of the favorites folder in the browser. Process.Start(myFavoritesPath) End Sub ' Opens URLs and .html documents using Internet Explorer. Sub OpenWithArguments() ' URLs are not considered documents. They can only be opened ' by passing them as arguments. Process.Start(\"IExplore.exe\", \"www.northwindtraders.com\") ' Start a Web page using a browser associated with .html and .asp files. Process.Start(\"IExplore.exe\", \"C:\\myPath\\myFile.htm\") Process.Start(\"IExplore.exe\", \"C:\\myPath\\myFile.asp\") End Sub ' Uses the ProcessStartInfo class to start new processes, ' both in a minimized mode. Sub OpenWithStartInfo() Dim startInfo As New ProcessStartInfo(\"IExplore.exe\") startInfo.WindowStyle = ProcessWindowStyle.Minimized Process.Start(startInfo) startInfo.Arguments = \"www.northwindtraders.com\" Process.Start(startInfo) End Sub Shared Sub Main() ' Get the path that stores favorite links. Dim myFavoritesPath As String = Environment.GetFolderPath(Environment.SpecialFolder.Favorites) Dim myProcess As New MyProcess() myProcess.OpenApplication(myFavoritesPath) myProcess.OpenWithArguments() myProcess.OpenWithStartInfo() End Sub End Class End Namespace 'MyProcessSample Use this overload to start a process resource by specifying its file name. The overload associates the resource with a new Process object. Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see Validate All Inputs. If the address of the executable file to start is a URL, the process is not started and is returned. This overload lets you start a process without first creating a new Process instance. The overload is an alternative to the explicit steps of creating a new Process instance, setting the FileName member of the StartInfo property, and calling Start for the Process instance. You can start a ClickOnce application by setting the parameter to the location (for example, a Web address) from which you originally installed the application. Do not start a ClickOnce application by specifying its installed location on your hard drive. Starting a process by specifying its file name is similar to typing the information in the dialog box of the Windows menu. Therefore, the file name does not need to represent an executable file. It can be of any file type for which the extension has been associated with an application installed on the system. For example the file name can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc if you have associated .doc files with a word processing tool, such as Microsoft Word. Similarly, in the same way that the dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the parameter. For example, you can set the parameter to either \"Notepad.exe\" or \"Notepad\". This overload does not allow command-line arguments for the process. If you need to specify one or more command-line arguments for the process, use the Process.Start(ProcessStartInfo) or Process.Start(String, String) overloads. Unlike the other overloads, the overload of Start that has no parameters is not a member. Use that overload when you have already created a Process instance and specified start information (including the file name), and you want to start a process resource and associate it with the existing Process instance. Use one of the overloads when you want to create a new Process component rather than start a process for an existing component. Both this overload and the overload that has no parameters allow you to specify the file name of the process resource to start. If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location. Otherwise, the system will not find the path. For example, if is not in your path, and you add it using quotation marks: , you must fully qualify any process in when starting it. ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server. If you use the Start method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions. The process does not start in the same context as the client browser, and does not have access to the user desktop. Whenever you use Start to start a process, you might need to close it or you risk losing system resources. Close processes using CloseMainWindow or Kill. You can check whether a process has already been closed by using its HasExited property. A note about apartment states in managed threads is necessary here. When UseShellExecute is on the process component's StartInfo property, make sure you have set a threading model on your application by setting the attribute on the method. Otherwise, a managed thread can be in an state or put in the state, the latter of which conflicts with UseShellExecute being . Some methods require that the apartment state not be . If the state is not explicitly set, when the application encounters such a method, it defaults to , and once set, the apartment state cannot be changed. However, causes an exception to be thrown when the operating system shell is managing the thread.\n\nStarts the process resource that is specified by the parameter containing process start information (for example, the file name of the process to start) and associates the resource with a new Process component. The ProcessStartInfo that contains the information that is used to start the process, including the file name and any command-line arguments. A new Process that is associated with the process resource, or if no process resource is started. Note that a new process that's started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its HasExited property already set to . In this case, the started process may have activated an existing instance of itself and then exited. No file name was specified in the parameter's FileName property. The UseShellExecute property of the parameter is and the RedirectStandardInput, RedirectStandardOutput, or RedirectStandardError property is also . The UseShellExecute property of the parameter is and the UserName property is not or empty or the Password property is not . The process object has already been disposed. An error occurred when opening the associated file. The file specified in the parameter's FileName property could not be found. The sum of the length of the arguments and the length of the full path to the process exceeds 2080. The error message associated with this exception can be one of the following: \"The data area passed to a system call is too small.\" or \"Access is denied.\" Method not supported on operating systems without shell support such as Nano Server (.NET Core only). The following example first spawns an instance of Internet Explorer and displays the contents of the Favorites folder in the browser. It then starts some other instances of Internet Explorer and displays some specific pages or sites. Finally it starts Internet Explorer with the window being minimized while navigating to a specific site. For additional examples of other uses of this method, refer to the individual properties of the ProcessStartInfo class. #using <System.dll> using namespace System; using namespace System::Diagnostics; using namespace System::ComponentModel; // Opens the Internet Explorer application. void OpenApplication(String^ myFavoritesPath) { // Start Internet Explorer. Defaults to the home page. Process::Start(\"IExplore.exe\"); // Display the contents of the favorites folder in the browser. Process::Start(myFavoritesPath); } // Opens urls and .html documents using Internet Explorer. void OpenWithArguments() { // URLs are not considered documents. They can only be opened // by passing them as arguments. Process::Start(\"IExplore.exe\", \"www.northwindtraders.com\"); // Start a Web page using a browser associated with .html and .asp files. Process::Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.htm\"); Process::Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.asp\"); } // Uses the ProcessStartInfo class to start new processes, // both in a minimized mode. void OpenWithStartInfo() { ProcessStartInfo^ startInfo = gcnew ProcessStartInfo(\"IExplore.exe\"); startInfo->WindowStyle = ProcessWindowStyle::Minimized; Process::Start(startInfo); startInfo->Arguments = \"www.northwindtraders.com\"; Process::Start(startInfo); } int main() { // Get the path that stores favorite links. String^ myFavoritesPath = Environment::GetFolderPath(Environment::SpecialFolder::Favorites); OpenApplication(myFavoritesPath); OpenWithArguments(); OpenWithStartInfo(); } using System; using System.Diagnostics; using System.ComponentModel; namespace MyProcessSample { class MyProcess { // Opens the Internet Explorer application. void OpenApplication(string myFavoritesPath) { // Start Internet Explorer. Defaults to the home page. Process.Start(\"IExplore.exe\"); // Display the contents of the favorites folder in the browser. Process.Start(myFavoritesPath); } // Opens urls and .html documents using Internet Explorer. void OpenWithArguments() { // url's are not considered documents. They can only be opened // by passing them as arguments. Process.Start(\"IExplore.exe\", \"www.northwindtraders.com\"); // Start a Web page using a browser associated with .html and .asp files. Process.Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.htm\"); Process.Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.asp\"); } // Uses the ProcessStartInfo class to start new processes, // both in a minimized mode. void OpenWithStartInfo() { ProcessStartInfo startInfo = new ProcessStartInfo(\"IExplore.exe\"); startInfo.WindowStyle = ProcessWindowStyle.Minimized; Process.Start(startInfo); startInfo.Arguments = \"www.northwindtraders.com\"; Process.Start(startInfo); } static void Main() { // Get the path that stores favorite links. string myFavoritesPath = Environment.GetFolderPath(Environment.SpecialFolder.Favorites); MyProcess myProcess = new MyProcess(); myProcess.OpenApplication(myFavoritesPath); myProcess.OpenWithArguments(); myProcess.OpenWithStartInfo(); } } } module processstartstatic open System open System.Diagnostics // Opens the Internet Explorer application. let openApplication (myFavoritesPath: string) = // Start Internet Explorer. Defaults to the home page. Process.Start \"IExplore.exe\" |> ignore // Display the contents of the favorites folder in the browser. Process.Start myFavoritesPath |> ignore // Opens urls and .html documents using Internet Explorer. let openWithArguments () = // url's are not considered documents. They can only be opened // by passing them as arguments. Process.Start(\"IExplore.exe\", \"www.northwindtraders.com\") |> ignore // Start a Web page using a browser associated with .html and .asp files. Process.Start(\"IExplore.exe\", @\"C:\\myPath\\myFile.htm\") |> ignore Process.Start(\"IExplore.exe\", @\"C:\\myPath\\myFile.asp\") |> ignore // Uses the ProcessStartInfo class to start new processes, // both in a minimized mode. let openWithStartInfo () = let startInfo = ProcessStartInfo \"IExplore.exe\" startInfo.WindowStyle <- ProcessWindowStyle.Minimized Process.Start startInfo |> ignore startInfo.Arguments <- \"www.northwindtraders.com\" Process.Start startInfo |> ignore // Get the path that stores favorite links. let myFavoritesPath = Environment.GetFolderPath Environment.SpecialFolder.Favorites openApplication myFavoritesPath openWithArguments () openWithStartInfo () Imports System.Diagnostics Imports System.ComponentModel Namespace MyProcessSample Class MyProcess ' Opens the Internet Explorer application. Public Sub OpenApplication(myFavoritesPath As String) ' Start Internet Explorer. Defaults to the home page. Process.Start(\"IExplore.exe\") ' Display the contents of the favorites folder in the browser. Process.Start(myFavoritesPath) End Sub ' Opens URLs and .html documents using Internet Explorer. Sub OpenWithArguments() ' URLs are not considered documents. They can only be opened ' by passing them as arguments. Process.Start(\"IExplore.exe\", \"www.northwindtraders.com\") ' Start a Web page using a browser associated with .html and .asp files. Process.Start(\"IExplore.exe\", \"C:\\myPath\\myFile.htm\") Process.Start(\"IExplore.exe\", \"C:\\myPath\\myFile.asp\") End Sub ' Uses the ProcessStartInfo class to start new processes, ' both in a minimized mode. Sub OpenWithStartInfo() Dim startInfo As New ProcessStartInfo(\"IExplore.exe\") startInfo.WindowStyle = ProcessWindowStyle.Minimized Process.Start(startInfo) startInfo.Arguments = \"www.northwindtraders.com\" Process.Start(startInfo) End Sub Shared Sub Main() ' Get the path that stores favorite links. Dim myFavoritesPath As String = Environment.GetFolderPath(Environment.SpecialFolder.Favorites) Dim myProcess As New MyProcess() myProcess.OpenApplication(myFavoritesPath) myProcess.OpenWithArguments() myProcess.OpenWithStartInfo() End Sub End Class End Namespace 'MyProcessSample Use this overload to start a process resource by specifying a ProcessStartInfo instance. The overload associates the resource with a new Process object. Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see Validate All Inputs. If the address of the executable file to start is a URL, the process is not started and is returned. This overload lets you start a process without first creating a new Process instance. Using this overload with a ProcessStartInfo parameter is an alternative to the explicit steps of creating a new Process instance, setting its StartInfo properties, and calling Start for the Process instance. Using a ProcessStartInfo instance as the parameter lets you call Start with the most control over what is passed into the call to start the process. If you need to pass only a file name or a file name and arguments, it is not necessary to create a new ProcessStartInfo instance, although that is an option. The only Process.StartInfo property that must be set is the FileName property. The FileName property does not need to represent an executable file. It can be of any file type for which the extension has been associated with an application that is installed on the system. For example, the FileName property can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc extension if you have associated .doc files with a word processing tool, such as Microsoft Word. You can start a ClickOnce application by specifying the location (for example, a Web address) from which you originally installed the application. Do not start a ClickOnce application by specifying its installed location on your hard drive. If the ProcessStartInfo.UserName and ProcessStartInfo.Password properties of the StartInfo instance are set, the unmanaged function is called, which starts the process in a new window even if the ProcessStartInfo.CreateNoWindow property value is or the ProcessStartInfo.WindowStyle property value is ProcessWindowStyle.Hidden. If the ProcessStartInfo.Domain property is , the ProcessStartInfo.UserName property must be in UPN format, user@DNS_domain_name. Unlike the other overloads, the overload of Start that has no parameters is not a member. Use that overload when you have already created a Process instance and specified start information (including the file name), and you want to start a process resource and associate it with the existing Process instance. Use one of the overloads when you want to create a new Process component rather than start a process for an existing component. Both this overload and the overload that has no parameters allow you to specify the start information for the process resource by using a ProcessStartInfo instance. If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location. Otherwise, the system will not find the path. For example, if is not in your path, and you add it using quotation marks: , you must fully qualify any process in when starting it. ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server. If you use the Start method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions. The process does not start in the same context as the client browser, and does not have access to the user desktop. Whenever you use Start to start a process, you might need to close it or you risk losing system resources. Close processes using CloseMainWindow or Kill. You can check whether a process has already been closed by using its HasExited property. A note about apartment states in managed threads is necessary here. When UseShellExecute is on the parameter, make sure you have set a threading model on your application by setting the attribute on the method. Otherwise, a managed thread can be in an state or put in the state, the latter of which conflicts with UseShellExecute being . Some methods require that the apartment state not be . If the state is not explicitly set, when the application encounters such a method, it defaults to , and once set, the apartment state cannot be changed. However, causes an exception to be thrown when the operating system shell is managing the thread.\n\nStarts (or reuses) the process resource that is specified by the StartInfo property of this Process component and associates it with the component. if a process resource is started; if no new process resource is started (for example, if an existing process is reused). No file name was specified in the Process component's StartInfo. The UseShellExecute member of the StartInfo property is while RedirectStandardInput, RedirectStandardOutput, or RedirectStandardError is . There was an error in opening the associated file. The process object has already been disposed. Method not supported on operating systems without shell support such as Nano Server (.NET Core only). The following example uses an instance of the Process class to start a process. #using <System.dll> using namespace System; using namespace System::Diagnostics; using namespace System::ComponentModel; int main() { Process^ myProcess = gcnew Process; try { myProcess->StartInfo->UseShellExecute = false; // You can start any process, HelloWorld is a do-nothing example. myProcess->StartInfo->FileName = \"C:\\\\HelloWorld.exe\"; myProcess->StartInfo->CreateNoWindow = true; myProcess->Start(); // This code assumes the process you are starting will terminate itself. // Given that it is started without a window so you cannot terminate it // on the desktop, it must terminate itself or you can do it programmatically // from this application using the Kill method. } catch ( Exception^ e ) { Console::WriteLine( e->Message ); } } using System; using System.Diagnostics; using System.ComponentModel; namespace MyProcessSample { class MyProcess { public static void Main() { try { using (Process myProcess = new Process()) { myProcess.StartInfo.UseShellExecute = false; // You can start any process, HelloWorld is a do-nothing example. myProcess.StartInfo.FileName = \"C:\\\\HelloWorld.exe\"; myProcess.StartInfo.CreateNoWindow = true; myProcess.Start(); // This code assumes the process you are starting will terminate itself. // Given that it is started without a window so you cannot terminate it // on the desktop, it must terminate itself or you can do it programmatically // from this application using the Kill method. } } catch (Exception e) { Console.WriteLine(e.Message); } } } } open System.Diagnostics try use myProcess = new Process() myProcess.StartInfo.UseShellExecute <- false // You can start any process, HelloWorld is a do-nothing example. myProcess.StartInfo.FileName <- @\"C:\\HelloWorld.exe\" myProcess.StartInfo.CreateNoWindow <- true myProcess.Start() |> ignore // This code assumes the process you are starting will terminate itself. // Given that it is started without a window so you cannot terminate it // on the desktop, it must terminate itself or you can do it programmatically // from this application using the Kill method. with e -> printfn $\"{e.Message}\" Imports System.Diagnostics Imports System.ComponentModel Namespace MyProcessSample Class MyProcess Public Shared Sub Main() Try Using myProcess As New Process() myProcess.StartInfo.UseShellExecute = False ' You can start any process, HelloWorld is a do-nothing example. myProcess.StartInfo.FileName = \"C:\\\\HelloWorld.exe\" myProcess.StartInfo.CreateNoWindow = True myProcess.Start() ' This code assumes the process you are starting will terminate itself. ' Given that it is started without a window so you cannot terminate it ' on the desktop, it must terminate itself or you can do it programmatically ' from this application using the Kill method. End Using Catch e As Exception Console.WriteLine((e.Message)) End Try End Sub End Class End Namespace Use this overload to start a process resource and associate it with the current Process component. The return value indicates that a new process resource was started. If the process resource specified by the FileName member of the StartInfo property is already running on the computer, no additional process resource is started. Instead, the running process resource is reused and is returned. You can start a ClickOnce application by specifying the location (for example, a Web address) from which you originally installed the application. Do not start a ClickOnce application by specifying its installed location on your hard drive. Using an instance of this object with untrusted data is a security risk. Use this object only with trusted data. For more information, see Validate All Inputs. If you are using Visual Studio, this overload of the Start method is the one that you insert into your code after you drag a Process component onto the designer. Use the window to expand the category and write the appropriate value into the property. Your changes will appear in the form's procedure. This overload of Start is not a method. You must call it from an instance of the Process class. Before calling Start, you must first specify StartInfo property information for this Process instance, because that information is used to determine the process resource to start. The other overloads of the Start method are members. You do not need to create an instance of the Process component before you call those overloads of the method. Instead, you can call Start for the Process class itself, and a new Process component is created if the process was started. Or, is returned if a process was reused. The process resource is automatically associated with the new Process component that is returned by the Start method. The StartInfo members can be used to duplicate the functionality of the dialog box of the Windows menu. Anything that can be typed into a command line can be started by setting the appropriate values in the StartInfo property. The only StartInfo property that must be set is the FileName property. The FileName property does not have to be an executable file. It can be of any file type for which the extension has been associated with an application that is installed on the system. For example, the FileName property can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc extension if you have associated .doc files with a word processing tool, such as Microsoft Word. In the command line, you can specify actions to take for certain types of files. For example, you can print documents or edit text files. Specify these actions using the Verb member of the StartInfo property. For other types of files, you can specify command-line arguments when you start the file from the dialog box. For example, you can pass a URL as an argument if you specify your browser as the FileName. These arguments can be specified in the StartInfo property's Arguments member. If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location. Otherwise, the system will not find the path. For example, if is not in your path, and you add it using quotation marks: , you must fully qualify any process in when starting it. ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server. If you use the Start method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions. The process does not start in the same context as the client browser, and does not have access to the user desktop. Whenever you use Start to start a process, you might need to close it or you risk losing system resources. Close processes using CloseMainWindow or Kill. You can check whether a process has already been closed by using its HasExited property. A note about apartment states in managed threads is necessary here. When UseShellExecute is on the process component's StartInfo property, make sure you have set a threading model on your application by setting the attribute on the method. Otherwise, a managed thread can be in an state or put in the state, the latter of which conflicts with UseShellExecute being . Some methods require that the apartment state not be . If the state is not explicitly set, when the application encounters such a method, it defaults to , and once set, the apartment state cannot be changed. However, causes an exception to be thrown when the operating system shell is managing the thread."
    },
    {
        "link": "https://stackoverflow.com/questions/10547195/using-process-start-in-a-wpf-application-to-invoke-another-wpf-application",
        "document": "I am trying to invoke one wpf application from another wpf application. The invoking wpf application makes the call\n\nNow in the invoked application, I try to retrieve the argument passed using\n\nHowever the arguments are not passed. why is this??\n\nI also tried an alternative method where in:\n\nHowever this did not work either!!! Please HELP!!"
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.process.start?view=net-9.0",
        "document": "This API is not CLS-compliant. Starts a process resource by specifying the name of an application, a set of command-line arguments, a user name, a password, and a domain and associates the resource with a new Process component. Public Shared Function Start (fileName As String, arguments As String, userName As String, password As SecureString, domain As String) As Process The name of an application file to run in the process. Command-line arguments to pass when starting the process. The user name to use when starting the process. A SecureString that contains the password to use when starting the process. The domain to use when starting the process. A new Process that is associated with the process resource, or if no process resource is started. Note that a new process that's started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its HasExited property already set to . In this case, the started process may have activated an existing instance of itself and then exited. No file name was specified. An error occurred when opening the associated file. The file specified in the could not be found. The sum of the length of the arguments and the length of the full path to the associated file exceeds 2080. The error message associated with this exception can be one of the following: \"The data area passed to a system call is too small.\" or \"Access is denied.\" The process object has already been disposed. This member is not supported on Linux or macOS (.NET Core only). Use this overload to create a new process and its primary thread by specifying its file name, command-line arguments, user name, password, and domain. The new process then runs the specified executable file in the security context of the specified credentials (user, domain, and password). Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see Validate All Inputs. When the executable file is located on a remote drive, you must identify the network share by using a uniform resource identifier (URI), not a linked drive letter. If the address of the executable file to start is a URL, the process is not started and is returned. This overload lets you start a process without first creating a new Process instance. The overload is an alternative to the explicit steps of creating a new Process instance, setting the FileName, Arguments, UserName, Password, and Domain properties of the StartInfo property, and calling Start for the Process instance. Similarly, in the same way that the Run dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the parameter. For example, you can set the parameter to either \"Notepad.exe\" or \"Notepad\". If the parameter represents an executable file, the parameter might represent a file to act upon, such as the text file in . The file name must represent an executable file in the Start overloads that have , , and parameters. Whenever you use Start to start a process, you might need to close it or you risk losing system resources. Close processes using CloseMainWindow or Kill. You can check whether a process has already been closed by using its HasExited property.\n\nThis API is not CLS-compliant. Starts a process resource by specifying the name of an application, a user name, a password, and a domain and associates the resource with a new Process component. Public Shared Function Start (fileName As String, userName As String, password As SecureString, domain As String) As Process The name of an application file to run in the process. The user name to use when starting the process. A SecureString that contains the password to use when starting the process. The domain to use when starting the process. A new Process that is associated with the process resource, or if no process resource is started. Note that a new process that's started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its HasExited property already set to . In this case, the started process may have activated an existing instance of itself and then exited. No file name was specified. There was an error in opening the associated file. The file specified in the could not be found. The process object has already been disposed. This member is not supported on Linux or macOS (.NET Core only). The following code example shows the use of this overload to start an executable file and also demonstrates the throwing of a Win32Exception when an attempt is made to start an application associated with a nonexecutable file. // NOTE: This example requires a text.txt file file in your Documents folder using System; using System.Diagnostics; using System.Security; using System.ComponentModel; class Example { static void Main() { Console.Write(\"Enter your domain: \"); string domain = Console.ReadLine(); Console.Write(\"Enter you user name: \"); string uname = Console.ReadLine(); Console.Write(\"Enter your password: \"); SecureString password = new SecureString(); ConsoleKeyInfo key; do { key = Console.ReadKey(true); // Ignore any key out of range. if (((int)key.Key) >= 33 && ((int)key.Key <= 90) && key.Key != ConsoleKey.Enter) { // Append the character to the password. password.AppendChar(key.KeyChar); Console.Write(\"*\"); } // Exit if Enter key is pressed. } while (key.Key != ConsoleKey.Enter); Console.WriteLine(); try { Console.WriteLine(\"\n\nTrying to launch NotePad using your login information...\"); Process.Start(\"notepad.exe\", uname, password, domain); } catch (Win32Exception ex) { Console.WriteLine(ex.Message); } string path = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + \"\\\\\"; try { // The following call to Start succeeds if test.txt exists. Console.WriteLine(\"\n\nTrying to launch 'text.txt'...\"); Process.Start(path + \"text.txt\"); } catch (Win32Exception ex) { Console.WriteLine(ex.Message); } try { // Attempting to start in a shell using this Start overload fails. This causes // the following exception, which is picked up in the catch block below: // The specified executable is not a valid application for this OS platform. Console.WriteLine(\"\n\nTrying to launch 'text.txt' with your login information...\"); Process.Start(path + \"text.txt\", uname, password, domain); } catch (Win32Exception ex) { Console.WriteLine(ex.Message); } finally { password.Dispose(); } } } // NOTE: This example requires a text.txt file file in your Documents folder open System open System.Diagnostics open System.Security open System.ComponentModel printf \"Enter your domain: \" let domain = stdin.ReadLine() printf \"Enter you user name: \" let uname = stdin.ReadLine() printf \"Enter your password: \" let password = new SecureString() let mutable key = Console.ReadKey(true) while key.Key <> ConsoleKey.Enter do // Ignore any key out of range. if int key.Key >= 33 && int key.Key <= 90 && key.Key <> ConsoleKey.Enter then // Append the character to the password. password.AppendChar key.KeyChar Console.Write \"*\" key <- Console.ReadKey(true) printfn \"\" try printfn \"\n\nTrying to launch NotePad using your login information...\" Process.Start(\"notepad.exe\", uname, password, domain) |> ignore with :? Win32Exception as ex -> printfn $\"{ex.Message}\" let path = Environment.GetFolderPath Environment.SpecialFolder.MyDocuments + @\"\\\" try // The following call to Start succeeds if test.txt exists. printfn \"\n\nTrying to launch 'text.txt'...\" Process.Start $\"{path}text.txt\" |> ignore with :? Win32Exception as ex -> printfn $\"{ex.Message}\" try try // Attempting to start in a shell using this Start overload fails. This causes // the following exception, which is picked up in the catch block below: // The specified executable is not a valid application for this OS platform. printfn \"\n\nTrying to launch 'text.txt' with your login information...\" Process.Start($\"{path}text.txt\", uname, password, domain) |> ignore with :? Win32Exception as ex -> printfn $\"{ex.Message}\" finally password.Dispose() ' This sample requires a text.txt file file in your documents folder. ' You'll also need to set the startup object in the project to Sub Main. Imports System.Diagnostics Imports System.Security Imports System.ComponentModel Module Program Sub Main() Console.Write(\"Enter your domain: \") Dim domain As String = Console.ReadLine() Console.Write(\"Enter you user name: \") Dim uname As String = Console.ReadLine() Console.Write(\"Enter your password: \") Dim password As New SecureString() Dim key As ConsoleKeyInfo Do key = Console.ReadKey(True) ' Ignore any key out of range. If key.Key >= 33 AndAlso key.Key <= 90 AndAlso key.Key <> ConsoleKey.Enter Then ' Append the character to the password. password.AppendChar(key.KeyChar) Console.Write(\"*\") End If ' Exit if Enter key is pressed. Loop While key.Key <> ConsoleKey.Enter Console.WriteLine() Try Console.WriteLine(vbCrLf + \"Trying to launch NotePad using your login information...\") Process.Start(\"notepad.exe\", uname, password, domain) Catch ex As Win32Exception Console.WriteLine(ex.Message) End Try Dim path As String = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + \"\\\" Try ' The following call to Start succeeds if test.txt exists. Console.WriteLine(vbCrLf + \"Trying to launch 'text.txt'...\") Process.Start(path + \"Text.txt\") Catch ex As Win32Exception Console.WriteLine(ex.Message) End Try Try ' Attempting to start in a shell using this Start overload fails. This causes ' the following exception, which is picked up in the catch block below: ' The specified executable is not a valid application for this OS platform. Console.WriteLine(vbCrLf + \"Trying to launch 'text.txt' with your login information...\") Process.Start(path + \"Text.txt\", uname, password, domain) Catch ex As Win32Exception Console.WriteLine(ex.Message) Finally password.Dispose() End Try End Sub End Module Use this overload to create a new process and its primary thread by specifying its file name, user name, password, and domain. The new process then runs the specified executable file in the security context of the specified credentials (user, domain, and password). Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see Validate All Inputs. When the executable file is located on a remote drive, you must identify the network share by using a uniform resource identifier (URI), not a linked drive letter. If the address of the executable file to start is a URL, the process is not started and is returned. This overload lets you start a process without first creating a new Process instance. The overload is an alternative to the explicit steps of creating a new Process instance, setting the FileName, UserName, Password, and Domain properties of the StartInfo property, and calling Start for the Process instance. Similarly, in the same way that the Run dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the parameter. For example, you can set the parameter to either \"Notepad.exe\" or \"Notepad\". If the parameter represents an executable file, the parameter might represent a file to act upon, such as the text file in . The file name must represent an executable file in the Start overloads that have , , and parameters. Whenever you use Start to start a process, you might need to close it or you risk losing system resources. Close processes using CloseMainWindow or Kill. You can check whether a process has already been closed by using its HasExited property.\n\nStarts a process resource by specifying the name of an application and a set of command-line arguments, and associates the resource with a new Process component. Public Shared Function Start (fileName As String, arguments As String) As Process The name of an application file to run in the process. Command-line arguments to pass when starting the process. A new Process that is associated with the process resource, or if no process resource is started. Note that a new process that's started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its HasExited property already set to . In this case, the started process may have activated an existing instance of itself and then exited. The or parameter is . An error occurred when opening the associated file. The file specified in the could not be found. The sum of the length of the arguments and the length of the full path to the process exceeds 2080. The error message associated with this exception can be one of the following: \"The data area passed to a system call is too small.\" or \"Access is denied.\" The process object has already been disposed. The PATH environment variable has a string containing quotes. The following example first spawns an instance of Internet Explorer and displays the contents of the Favorites folder in the browser. It then starts some other instances of Internet Explorer and displays some specific pages or sites. Finally it starts Internet Explorer with the window being minimized while navigating to a specific site. #using <System.dll> using namespace System; using namespace System::Diagnostics; using namespace System::ComponentModel; // Opens the Internet Explorer application. void OpenApplication(String^ myFavoritesPath) { // Start Internet Explorer. Defaults to the home page. Process::Start(\"IExplore.exe\"); // Display the contents of the favorites folder in the browser. Process::Start(myFavoritesPath); } // Opens urls and .html documents using Internet Explorer. void OpenWithArguments() { // URLs are not considered documents. They can only be opened // by passing them as arguments. Process::Start(\"IExplore.exe\", \"www.northwindtraders.com\"); // Start a Web page using a browser associated with .html and .asp files. Process::Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.htm\"); Process::Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.asp\"); } // Uses the ProcessStartInfo class to start new processes, // both in a minimized mode. void OpenWithStartInfo() { ProcessStartInfo^ startInfo = gcnew ProcessStartInfo(\"IExplore.exe\"); startInfo->WindowStyle = ProcessWindowStyle::Minimized; Process::Start(startInfo); startInfo->Arguments = \"www.northwindtraders.com\"; Process::Start(startInfo); } int main() { // Get the path that stores favorite links. String^ myFavoritesPath = Environment::GetFolderPath(Environment::SpecialFolder::Favorites); OpenApplication(myFavoritesPath); OpenWithArguments(); OpenWithStartInfo(); } using System; using System.Diagnostics; using System.ComponentModel; namespace MyProcessSample { class MyProcess { // Opens the Internet Explorer application. void OpenApplication(string myFavoritesPath) { // Start Internet Explorer. Defaults to the home page. Process.Start(\"IExplore.exe\"); // Display the contents of the favorites folder in the browser. Process.Start(myFavoritesPath); } // Opens urls and .html documents using Internet Explorer. void OpenWithArguments() { // url's are not considered documents. They can only be opened // by passing them as arguments. Process.Start(\"IExplore.exe\", \"www.northwindtraders.com\"); // Start a Web page using a browser associated with .html and .asp files. Process.Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.htm\"); Process.Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.asp\"); } // Uses the ProcessStartInfo class to start new processes, // both in a minimized mode. void OpenWithStartInfo() { ProcessStartInfo startInfo = new ProcessStartInfo(\"IExplore.exe\"); startInfo.WindowStyle = ProcessWindowStyle.Minimized; Process.Start(startInfo); startInfo.Arguments = \"www.northwindtraders.com\"; Process.Start(startInfo); } static void Main() { // Get the path that stores favorite links. string myFavoritesPath = Environment.GetFolderPath(Environment.SpecialFolder.Favorites); MyProcess myProcess = new MyProcess(); myProcess.OpenApplication(myFavoritesPath); myProcess.OpenWithArguments(); myProcess.OpenWithStartInfo(); } } } module processstartstatic open System open System.Diagnostics // Opens the Internet Explorer application. let openApplication (myFavoritesPath: string) = // Start Internet Explorer. Defaults to the home page. Process.Start \"IExplore.exe\" |> ignore // Display the contents of the favorites folder in the browser. Process.Start myFavoritesPath |> ignore // Opens urls and .html documents using Internet Explorer. let openWithArguments () = // url's are not considered documents. They can only be opened // by passing them as arguments. Process.Start(\"IExplore.exe\", \"www.northwindtraders.com\") |> ignore // Start a Web page using a browser associated with .html and .asp files. Process.Start(\"IExplore.exe\", @\"C:\\myPath\\myFile.htm\") |> ignore Process.Start(\"IExplore.exe\", @\"C:\\myPath\\myFile.asp\") |> ignore // Uses the ProcessStartInfo class to start new processes, // both in a minimized mode. let openWithStartInfo () = let startInfo = ProcessStartInfo \"IExplore.exe\" startInfo.WindowStyle <- ProcessWindowStyle.Minimized Process.Start startInfo |> ignore startInfo.Arguments <- \"www.northwindtraders.com\" Process.Start startInfo |> ignore // Get the path that stores favorite links. let myFavoritesPath = Environment.GetFolderPath Environment.SpecialFolder.Favorites openApplication myFavoritesPath openWithArguments () openWithStartInfo () Imports System.Diagnostics Imports System.ComponentModel Namespace MyProcessSample Class MyProcess ' Opens the Internet Explorer application. Public Sub OpenApplication(myFavoritesPath As String) ' Start Internet Explorer. Defaults to the home page. Process.Start(\"IExplore.exe\") ' Display the contents of the favorites folder in the browser. Process.Start(myFavoritesPath) End Sub ' Opens URLs and .html documents using Internet Explorer. Sub OpenWithArguments() ' URLs are not considered documents. They can only be opened ' by passing them as arguments. Process.Start(\"IExplore.exe\", \"www.northwindtraders.com\") ' Start a Web page using a browser associated with .html and .asp files. Process.Start(\"IExplore.exe\", \"C:\\myPath\\myFile.htm\") Process.Start(\"IExplore.exe\", \"C:\\myPath\\myFile.asp\") End Sub ' Uses the ProcessStartInfo class to start new processes, ' both in a minimized mode. Sub OpenWithStartInfo() Dim startInfo As New ProcessStartInfo(\"IExplore.exe\") startInfo.WindowStyle = ProcessWindowStyle.Minimized Process.Start(startInfo) startInfo.Arguments = \"www.northwindtraders.com\" Process.Start(startInfo) End Sub Shared Sub Main() ' Get the path that stores favorite links. Dim myFavoritesPath As String = Environment.GetFolderPath(Environment.SpecialFolder.Favorites) Dim myProcess As New MyProcess() myProcess.OpenApplication(myFavoritesPath) myProcess.OpenWithArguments() myProcess.OpenWithStartInfo() End Sub End Class End Namespace 'MyProcessSample Use this overload to start a process resource by specifying its file name and command-line arguments. The overload associates the resource with a new Process object. Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see Validate All Inputs. If the address of the executable file to start is a URL, the process is not started and is returned. This overload lets you start a process without first creating a new Process instance. The overload is an alternative to the explicit steps of creating a new Process instance, setting the FileName and Arguments members of the StartInfo property, and calling Start for the Process instance. Starting a process by specifying its file name and arguments is similar to typing the file name and command-line arguments in the dialog box of the Windows menu. Therefore, the file name does not need to represent an executable file. It can be of any file type for which the extension has been associated with an application installed on the system. For example the file name can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc if you have associated .doc files with a word processing tool, such as Microsoft Word. Similarly, in the same way that the dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the parameter. For example, you can set the parameter to either \"Notepad.exe\" or \"Notepad\". If the parameter represents an executable file, the parameter might represent a file to act upon, such as the text file in . If the parameter represents a command (.cmd) file, the parameter must include either a \" \" or \" \" argument to specify whether the command window exits or remains after completion. Unlike the other overloads, the overload of Start that has no parameters is not a member. Use that overload when you have already created a Process instance and specified start information (including the file name), and you want to start a process resource and associate it with the existing Process instance. Use one of the overloads when you want to create a new Process component rather than start a process for an existing component. Both this overload and the overload that has no parameters allow you to specify the file name of the process resource to start and command-line arguments to pass. If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location. Otherwise, the system will not find the path. For example, if is not in your path, and you add it using quotation marks: , you must fully qualify any process in when starting it. ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server. If you use the Start method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions. The process does not start in the same context as the client browser, and does not have access to the user desktop. Whenever you use Start to start a process, you might need to close it or you risk losing system resources. Close processes using CloseMainWindow or Kill. You can check whether a process has already been closed by using its HasExited property. A note about apartment states in managed threads is necessary here. When UseShellExecute is on the process component's StartInfo property, make sure you have set a threading model on your application by setting the attribute on the method. Otherwise, a managed thread can be in an state or put in the state, the latter of which conflicts with UseShellExecute being . Some methods require that the apartment state not be . If the state is not explicitly set, when the application encounters such a method, it defaults to , and once set, the apartment state cannot be changed. However, causes an exception to be thrown when the operating system shell is managing the thread.\n\nStarts a process resource by specifying the name of a document or application file and associates the resource with a new Process component. The name of a document or application file to run in the process. A new Process that is associated with the process resource, or if no process resource is started. Note that a new process that's started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its HasExited property already set to . In this case, the started process may have activated an existing instance of itself and then exited. An error occurred when opening the associated file. The file specified in the could not be found. The process object has already been disposed. The PATH environment variable has a string containing quotes. The following example first spawns an instance of Internet Explorer and displays the contents of the Favorites folder in the browser. It then starts some other instances of Internet Explorer and displays some specific pages or sites. Finally it starts Internet Explorer with the window being minimized while navigating to a specific site. #using <System.dll> using namespace System; using namespace System::Diagnostics; using namespace System::ComponentModel; // Opens the Internet Explorer application. void OpenApplication(String^ myFavoritesPath) { // Start Internet Explorer. Defaults to the home page. Process::Start(\"IExplore.exe\"); // Display the contents of the favorites folder in the browser. Process::Start(myFavoritesPath); } // Opens urls and .html documents using Internet Explorer. void OpenWithArguments() { // URLs are not considered documents. They can only be opened // by passing them as arguments. Process::Start(\"IExplore.exe\", \"www.northwindtraders.com\"); // Start a Web page using a browser associated with .html and .asp files. Process::Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.htm\"); Process::Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.asp\"); } // Uses the ProcessStartInfo class to start new processes, // both in a minimized mode. void OpenWithStartInfo() { ProcessStartInfo^ startInfo = gcnew ProcessStartInfo(\"IExplore.exe\"); startInfo->WindowStyle = ProcessWindowStyle::Minimized; Process::Start(startInfo); startInfo->Arguments = \"www.northwindtraders.com\"; Process::Start(startInfo); } int main() { // Get the path that stores favorite links. String^ myFavoritesPath = Environment::GetFolderPath(Environment::SpecialFolder::Favorites); OpenApplication(myFavoritesPath); OpenWithArguments(); OpenWithStartInfo(); } using System; using System.Diagnostics; using System.ComponentModel; namespace MyProcessSample { class MyProcess { // Opens the Internet Explorer application. void OpenApplication(string myFavoritesPath) { // Start Internet Explorer. Defaults to the home page. Process.Start(\"IExplore.exe\"); // Display the contents of the favorites folder in the browser. Process.Start(myFavoritesPath); } // Opens urls and .html documents using Internet Explorer. void OpenWithArguments() { // url's are not considered documents. They can only be opened // by passing them as arguments. Process.Start(\"IExplore.exe\", \"www.northwindtraders.com\"); // Start a Web page using a browser associated with .html and .asp files. Process.Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.htm\"); Process.Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.asp\"); } // Uses the ProcessStartInfo class to start new processes, // both in a minimized mode. void OpenWithStartInfo() { ProcessStartInfo startInfo = new ProcessStartInfo(\"IExplore.exe\"); startInfo.WindowStyle = ProcessWindowStyle.Minimized; Process.Start(startInfo); startInfo.Arguments = \"www.northwindtraders.com\"; Process.Start(startInfo); } static void Main() { // Get the path that stores favorite links. string myFavoritesPath = Environment.GetFolderPath(Environment.SpecialFolder.Favorites); MyProcess myProcess = new MyProcess(); myProcess.OpenApplication(myFavoritesPath); myProcess.OpenWithArguments(); myProcess.OpenWithStartInfo(); } } } module processstartstatic open System open System.Diagnostics // Opens the Internet Explorer application. let openApplication (myFavoritesPath: string) = // Start Internet Explorer. Defaults to the home page. Process.Start \"IExplore.exe\" |> ignore // Display the contents of the favorites folder in the browser. Process.Start myFavoritesPath |> ignore // Opens urls and .html documents using Internet Explorer. let openWithArguments () = // url's are not considered documents. They can only be opened // by passing them as arguments. Process.Start(\"IExplore.exe\", \"www.northwindtraders.com\") |> ignore // Start a Web page using a browser associated with .html and .asp files. Process.Start(\"IExplore.exe\", @\"C:\\myPath\\myFile.htm\") |> ignore Process.Start(\"IExplore.exe\", @\"C:\\myPath\\myFile.asp\") |> ignore // Uses the ProcessStartInfo class to start new processes, // both in a minimized mode. let openWithStartInfo () = let startInfo = ProcessStartInfo \"IExplore.exe\" startInfo.WindowStyle <- ProcessWindowStyle.Minimized Process.Start startInfo |> ignore startInfo.Arguments <- \"www.northwindtraders.com\" Process.Start startInfo |> ignore // Get the path that stores favorite links. let myFavoritesPath = Environment.GetFolderPath Environment.SpecialFolder.Favorites openApplication myFavoritesPath openWithArguments () openWithStartInfo () Imports System.Diagnostics Imports System.ComponentModel Namespace MyProcessSample Class MyProcess ' Opens the Internet Explorer application. Public Sub OpenApplication(myFavoritesPath As String) ' Start Internet Explorer. Defaults to the home page. Process.Start(\"IExplore.exe\") ' Display the contents of the favorites folder in the browser. Process.Start(myFavoritesPath) End Sub ' Opens URLs and .html documents using Internet Explorer. Sub OpenWithArguments() ' URLs are not considered documents. They can only be opened ' by passing them as arguments. Process.Start(\"IExplore.exe\", \"www.northwindtraders.com\") ' Start a Web page using a browser associated with .html and .asp files. Process.Start(\"IExplore.exe\", \"C:\\myPath\\myFile.htm\") Process.Start(\"IExplore.exe\", \"C:\\myPath\\myFile.asp\") End Sub ' Uses the ProcessStartInfo class to start new processes, ' both in a minimized mode. Sub OpenWithStartInfo() Dim startInfo As New ProcessStartInfo(\"IExplore.exe\") startInfo.WindowStyle = ProcessWindowStyle.Minimized Process.Start(startInfo) startInfo.Arguments = \"www.northwindtraders.com\" Process.Start(startInfo) End Sub Shared Sub Main() ' Get the path that stores favorite links. Dim myFavoritesPath As String = Environment.GetFolderPath(Environment.SpecialFolder.Favorites) Dim myProcess As New MyProcess() myProcess.OpenApplication(myFavoritesPath) myProcess.OpenWithArguments() myProcess.OpenWithStartInfo() End Sub End Class End Namespace 'MyProcessSample Use this overload to start a process resource by specifying its file name. The overload associates the resource with a new Process object. Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see Validate All Inputs. If the address of the executable file to start is a URL, the process is not started and is returned. This overload lets you start a process without first creating a new Process instance. The overload is an alternative to the explicit steps of creating a new Process instance, setting the FileName member of the StartInfo property, and calling Start for the Process instance. You can start a ClickOnce application by setting the parameter to the location (for example, a Web address) from which you originally installed the application. Do not start a ClickOnce application by specifying its installed location on your hard drive. Starting a process by specifying its file name is similar to typing the information in the dialog box of the Windows menu. Therefore, the file name does not need to represent an executable file. It can be of any file type for which the extension has been associated with an application installed on the system. For example the file name can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc if you have associated .doc files with a word processing tool, such as Microsoft Word. Similarly, in the same way that the dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the parameter. For example, you can set the parameter to either \"Notepad.exe\" or \"Notepad\". This overload does not allow command-line arguments for the process. If you need to specify one or more command-line arguments for the process, use the Process.Start(ProcessStartInfo) or Process.Start(String, String) overloads. Unlike the other overloads, the overload of Start that has no parameters is not a member. Use that overload when you have already created a Process instance and specified start information (including the file name), and you want to start a process resource and associate it with the existing Process instance. Use one of the overloads when you want to create a new Process component rather than start a process for an existing component. Both this overload and the overload that has no parameters allow you to specify the file name of the process resource to start. If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location. Otherwise, the system will not find the path. For example, if is not in your path, and you add it using quotation marks: , you must fully qualify any process in when starting it. ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server. If you use the Start method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions. The process does not start in the same context as the client browser, and does not have access to the user desktop. Whenever you use Start to start a process, you might need to close it or you risk losing system resources. Close processes using CloseMainWindow or Kill. You can check whether a process has already been closed by using its HasExited property. A note about apartment states in managed threads is necessary here. When UseShellExecute is on the process component's StartInfo property, make sure you have set a threading model on your application by setting the attribute on the method. Otherwise, a managed thread can be in an state or put in the state, the latter of which conflicts with UseShellExecute being . Some methods require that the apartment state not be . If the state is not explicitly set, when the application encounters such a method, it defaults to , and once set, the apartment state cannot be changed. However, causes an exception to be thrown when the operating system shell is managing the thread.\n\nStarts the process resource that is specified by the parameter containing process start information (for example, the file name of the process to start) and associates the resource with a new Process component. The ProcessStartInfo that contains the information that is used to start the process, including the file name and any command-line arguments. A new Process that is associated with the process resource, or if no process resource is started. Note that a new process that's started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its HasExited property already set to . In this case, the started process may have activated an existing instance of itself and then exited. No file name was specified in the parameter's FileName property. The UseShellExecute property of the parameter is and the RedirectStandardInput, RedirectStandardOutput, or RedirectStandardError property is also . The UseShellExecute property of the parameter is and the UserName property is not or empty or the Password property is not . The process object has already been disposed. An error occurred when opening the associated file. The file specified in the parameter's FileName property could not be found. The sum of the length of the arguments and the length of the full path to the process exceeds 2080. The error message associated with this exception can be one of the following: \"The data area passed to a system call is too small.\" or \"Access is denied.\" Method not supported on operating systems without shell support such as Nano Server (.NET Core only). The following example first spawns an instance of Internet Explorer and displays the contents of the Favorites folder in the browser. It then starts some other instances of Internet Explorer and displays some specific pages or sites. Finally it starts Internet Explorer with the window being minimized while navigating to a specific site. For additional examples of other uses of this method, refer to the individual properties of the ProcessStartInfo class. #using <System.dll> using namespace System; using namespace System::Diagnostics; using namespace System::ComponentModel; // Opens the Internet Explorer application. void OpenApplication(String^ myFavoritesPath) { // Start Internet Explorer. Defaults to the home page. Process::Start(\"IExplore.exe\"); // Display the contents of the favorites folder in the browser. Process::Start(myFavoritesPath); } // Opens urls and .html documents using Internet Explorer. void OpenWithArguments() { // URLs are not considered documents. They can only be opened // by passing them as arguments. Process::Start(\"IExplore.exe\", \"www.northwindtraders.com\"); // Start a Web page using a browser associated with .html and .asp files. Process::Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.htm\"); Process::Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.asp\"); } // Uses the ProcessStartInfo class to start new processes, // both in a minimized mode. void OpenWithStartInfo() { ProcessStartInfo^ startInfo = gcnew ProcessStartInfo(\"IExplore.exe\"); startInfo->WindowStyle = ProcessWindowStyle::Minimized; Process::Start(startInfo); startInfo->Arguments = \"www.northwindtraders.com\"; Process::Start(startInfo); } int main() { // Get the path that stores favorite links. String^ myFavoritesPath = Environment::GetFolderPath(Environment::SpecialFolder::Favorites); OpenApplication(myFavoritesPath); OpenWithArguments(); OpenWithStartInfo(); } using System; using System.Diagnostics; using System.ComponentModel; namespace MyProcessSample { class MyProcess { // Opens the Internet Explorer application. void OpenApplication(string myFavoritesPath) { // Start Internet Explorer. Defaults to the home page. Process.Start(\"IExplore.exe\"); // Display the contents of the favorites folder in the browser. Process.Start(myFavoritesPath); } // Opens urls and .html documents using Internet Explorer. void OpenWithArguments() { // url's are not considered documents. They can only be opened // by passing them as arguments. Process.Start(\"IExplore.exe\", \"www.northwindtraders.com\"); // Start a Web page using a browser associated with .html and .asp files. Process.Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.htm\"); Process.Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.asp\"); } // Uses the ProcessStartInfo class to start new processes, // both in a minimized mode. void OpenWithStartInfo() { ProcessStartInfo startInfo = new ProcessStartInfo(\"IExplore.exe\"); startInfo.WindowStyle = ProcessWindowStyle.Minimized; Process.Start(startInfo); startInfo.Arguments = \"www.northwindtraders.com\"; Process.Start(startInfo); } static void Main() { // Get the path that stores favorite links. string myFavoritesPath = Environment.GetFolderPath(Environment.SpecialFolder.Favorites); MyProcess myProcess = new MyProcess(); myProcess.OpenApplication(myFavoritesPath); myProcess.OpenWithArguments(); myProcess.OpenWithStartInfo(); } } } module processstartstatic open System open System.Diagnostics // Opens the Internet Explorer application. let openApplication (myFavoritesPath: string) = // Start Internet Explorer. Defaults to the home page. Process.Start \"IExplore.exe\" |> ignore // Display the contents of the favorites folder in the browser. Process.Start myFavoritesPath |> ignore // Opens urls and .html documents using Internet Explorer. let openWithArguments () = // url's are not considered documents. They can only be opened // by passing them as arguments. Process.Start(\"IExplore.exe\", \"www.northwindtraders.com\") |> ignore // Start a Web page using a browser associated with .html and .asp files. Process.Start(\"IExplore.exe\", @\"C:\\myPath\\myFile.htm\") |> ignore Process.Start(\"IExplore.exe\", @\"C:\\myPath\\myFile.asp\") |> ignore // Uses the ProcessStartInfo class to start new processes, // both in a minimized mode. let openWithStartInfo () = let startInfo = ProcessStartInfo \"IExplore.exe\" startInfo.WindowStyle <- ProcessWindowStyle.Minimized Process.Start startInfo |> ignore startInfo.Arguments <- \"www.northwindtraders.com\" Process.Start startInfo |> ignore // Get the path that stores favorite links. let myFavoritesPath = Environment.GetFolderPath Environment.SpecialFolder.Favorites openApplication myFavoritesPath openWithArguments () openWithStartInfo () Imports System.Diagnostics Imports System.ComponentModel Namespace MyProcessSample Class MyProcess ' Opens the Internet Explorer application. Public Sub OpenApplication(myFavoritesPath As String) ' Start Internet Explorer. Defaults to the home page. Process.Start(\"IExplore.exe\") ' Display the contents of the favorites folder in the browser. Process.Start(myFavoritesPath) End Sub ' Opens URLs and .html documents using Internet Explorer. Sub OpenWithArguments() ' URLs are not considered documents. They can only be opened ' by passing them as arguments. Process.Start(\"IExplore.exe\", \"www.northwindtraders.com\") ' Start a Web page using a browser associated with .html and .asp files. Process.Start(\"IExplore.exe\", \"C:\\myPath\\myFile.htm\") Process.Start(\"IExplore.exe\", \"C:\\myPath\\myFile.asp\") End Sub ' Uses the ProcessStartInfo class to start new processes, ' both in a minimized mode. Sub OpenWithStartInfo() Dim startInfo As New ProcessStartInfo(\"IExplore.exe\") startInfo.WindowStyle = ProcessWindowStyle.Minimized Process.Start(startInfo) startInfo.Arguments = \"www.northwindtraders.com\" Process.Start(startInfo) End Sub Shared Sub Main() ' Get the path that stores favorite links. Dim myFavoritesPath As String = Environment.GetFolderPath(Environment.SpecialFolder.Favorites) Dim myProcess As New MyProcess() myProcess.OpenApplication(myFavoritesPath) myProcess.OpenWithArguments() myProcess.OpenWithStartInfo() End Sub End Class End Namespace 'MyProcessSample Use this overload to start a process resource by specifying a ProcessStartInfo instance. The overload associates the resource with a new Process object. Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see Validate All Inputs. If the address of the executable file to start is a URL, the process is not started and is returned. This overload lets you start a process without first creating a new Process instance. Using this overload with a ProcessStartInfo parameter is an alternative to the explicit steps of creating a new Process instance, setting its StartInfo properties, and calling Start for the Process instance. Using a ProcessStartInfo instance as the parameter lets you call Start with the most control over what is passed into the call to start the process. If you need to pass only a file name or a file name and arguments, it is not necessary to create a new ProcessStartInfo instance, although that is an option. The only Process.StartInfo property that must be set is the FileName property. The FileName property does not need to represent an executable file. It can be of any file type for which the extension has been associated with an application that is installed on the system. For example, the FileName property can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc extension if you have associated .doc files with a word processing tool, such as Microsoft Word. You can start a ClickOnce application by specifying the location (for example, a Web address) from which you originally installed the application. Do not start a ClickOnce application by specifying its installed location on your hard drive. If the ProcessStartInfo.UserName and ProcessStartInfo.Password properties of the StartInfo instance are set, the unmanaged function is called, which starts the process in a new window even if the ProcessStartInfo.CreateNoWindow property value is or the ProcessStartInfo.WindowStyle property value is ProcessWindowStyle.Hidden. If the ProcessStartInfo.Domain property is , the ProcessStartInfo.UserName property must be in UPN format, user@DNS_domain_name. Unlike the other overloads, the overload of Start that has no parameters is not a member. Use that overload when you have already created a Process instance and specified start information (including the file name), and you want to start a process resource and associate it with the existing Process instance. Use one of the overloads when you want to create a new Process component rather than start a process for an existing component. Both this overload and the overload that has no parameters allow you to specify the start information for the process resource by using a ProcessStartInfo instance. If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location. Otherwise, the system will not find the path. For example, if is not in your path, and you add it using quotation marks: , you must fully qualify any process in when starting it. ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server. If you use the Start method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions. The process does not start in the same context as the client browser, and does not have access to the user desktop. Whenever you use Start to start a process, you might need to close it or you risk losing system resources. Close processes using CloseMainWindow or Kill. You can check whether a process has already been closed by using its HasExited property. A note about apartment states in managed threads is necessary here. When UseShellExecute is on the parameter, make sure you have set a threading model on your application by setting the attribute on the method. Otherwise, a managed thread can be in an state or put in the state, the latter of which conflicts with UseShellExecute being . Some methods require that the apartment state not be . If the state is not explicitly set, when the application encounters such a method, it defaults to , and once set, the apartment state cannot be changed. However, causes an exception to be thrown when the operating system shell is managing the thread.\n\nStarts (or reuses) the process resource that is specified by the StartInfo property of this Process component and associates it with the component. if a process resource is started; if no new process resource is started (for example, if an existing process is reused). No file name was specified in the Process component's StartInfo. The UseShellExecute member of the StartInfo property is while RedirectStandardInput, RedirectStandardOutput, or RedirectStandardError is . There was an error in opening the associated file. The process object has already been disposed. Method not supported on operating systems without shell support such as Nano Server (.NET Core only). The following example uses an instance of the Process class to start a process. #using <System.dll> using namespace System; using namespace System::Diagnostics; using namespace System::ComponentModel; int main() { Process^ myProcess = gcnew Process; try { myProcess->StartInfo->UseShellExecute = false; // You can start any process, HelloWorld is a do-nothing example. myProcess->StartInfo->FileName = \"C:\\\\HelloWorld.exe\"; myProcess->StartInfo->CreateNoWindow = true; myProcess->Start(); // This code assumes the process you are starting will terminate itself. // Given that it is started without a window so you cannot terminate it // on the desktop, it must terminate itself or you can do it programmatically // from this application using the Kill method. } catch ( Exception^ e ) { Console::WriteLine( e->Message ); } } using System; using System.Diagnostics; using System.ComponentModel; namespace MyProcessSample { class MyProcess { public static void Main() { try { using (Process myProcess = new Process()) { myProcess.StartInfo.UseShellExecute = false; // You can start any process, HelloWorld is a do-nothing example. myProcess.StartInfo.FileName = \"C:\\\\HelloWorld.exe\"; myProcess.StartInfo.CreateNoWindow = true; myProcess.Start(); // This code assumes the process you are starting will terminate itself. // Given that it is started without a window so you cannot terminate it // on the desktop, it must terminate itself or you can do it programmatically // from this application using the Kill method. } } catch (Exception e) { Console.WriteLine(e.Message); } } } } open System.Diagnostics try use myProcess = new Process() myProcess.StartInfo.UseShellExecute <- false // You can start any process, HelloWorld is a do-nothing example. myProcess.StartInfo.FileName <- @\"C:\\HelloWorld.exe\" myProcess.StartInfo.CreateNoWindow <- true myProcess.Start() |> ignore // This code assumes the process you are starting will terminate itself. // Given that it is started without a window so you cannot terminate it // on the desktop, it must terminate itself or you can do it programmatically // from this application using the Kill method. with e -> printfn $\"{e.Message}\" Imports System.Diagnostics Imports System.ComponentModel Namespace MyProcessSample Class MyProcess Public Shared Sub Main() Try Using myProcess As New Process() myProcess.StartInfo.UseShellExecute = False ' You can start any process, HelloWorld is a do-nothing example. myProcess.StartInfo.FileName = \"C:\\\\HelloWorld.exe\" myProcess.StartInfo.CreateNoWindow = True myProcess.Start() ' This code assumes the process you are starting will terminate itself. ' Given that it is started without a window so you cannot terminate it ' on the desktop, it must terminate itself or you can do it programmatically ' from this application using the Kill method. End Using Catch e As Exception Console.WriteLine((e.Message)) End Try End Sub End Class End Namespace Use this overload to start a process resource and associate it with the current Process component. The return value indicates that a new process resource was started. If the process resource specified by the FileName member of the StartInfo property is already running on the computer, no additional process resource is started. Instead, the running process resource is reused and is returned. You can start a ClickOnce application by specifying the location (for example, a Web address) from which you originally installed the application. Do not start a ClickOnce application by specifying its installed location on your hard drive. Using an instance of this object with untrusted data is a security risk. Use this object only with trusted data. For more information, see Validate All Inputs. If you are using Visual Studio, this overload of the Start method is the one that you insert into your code after you drag a Process component onto the designer. Use the window to expand the category and write the appropriate value into the property. Your changes will appear in the form's procedure. This overload of Start is not a method. You must call it from an instance of the Process class. Before calling Start, you must first specify StartInfo property information for this Process instance, because that information is used to determine the process resource to start. The other overloads of the Start method are members. You do not need to create an instance of the Process component before you call those overloads of the method. Instead, you can call Start for the Process class itself, and a new Process component is created if the process was started. Or, is returned if a process was reused. The process resource is automatically associated with the new Process component that is returned by the Start method. The StartInfo members can be used to duplicate the functionality of the dialog box of the Windows menu. Anything that can be typed into a command line can be started by setting the appropriate values in the StartInfo property. The only StartInfo property that must be set is the FileName property. The FileName property does not have to be an executable file. It can be of any file type for which the extension has been associated with an application that is installed on the system. For example, the FileName property can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc extension if you have associated .doc files with a word processing tool, such as Microsoft Word. In the command line, you can specify actions to take for certain types of files. For example, you can print documents or edit text files. Specify these actions using the Verb member of the StartInfo property. For other types of files, you can specify command-line arguments when you start the file from the dialog box. For example, you can pass a URL as an argument if you specify your browser as the FileName. These arguments can be specified in the StartInfo property's Arguments member. If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location. Otherwise, the system will not find the path. For example, if is not in your path, and you add it using quotation marks: , you must fully qualify any process in when starting it. ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server. If you use the Start method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions. The process does not start in the same context as the client browser, and does not have access to the user desktop. Whenever you use Start to start a process, you might need to close it or you risk losing system resources. Close processes using CloseMainWindow or Kill. You can check whether a process has already been closed by using its HasExited property. A note about apartment states in managed threads is necessary here. When UseShellExecute is on the process component's StartInfo property, make sure you have set a threading model on your application by setting the attribute on the method. Otherwise, a managed thread can be in an state or put in the state, the latter of which conflicts with UseShellExecute being . Some methods require that the apartment state not be . If the state is not explicitly set, when the application encounters such a method, it defaults to , and once set, the apartment state cannot be changed. However, causes an exception to be thrown when the operating system shell is managing the thread."
    },
    {
        "link": "https://stackoverflow.com/questions/19969693/launch-wpf-application-using-process-start",
        "document": "I am attempting to launch a wpf application using . When I launch the process by double-clicking it in , it launches properly; however, when I try to use the following code snippet:\n\nMy WPF process flashes in the task manager briefly before immediately closing."
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.processstartinfo?view=net-9.0",
        "document": "The following code example demonstrates how to use the ProcessStartInfo class to start Internet Explorer. The destination URLs are provided as ProcessStartInfo arguments.\n\nProcessStartInfo is used together with the Process component. When you start a process using the Process class, you have access to process information in addition to that available when attaching to a running process.\n\nYou can use the ProcessStartInfo class for better control over the process you start. You must at least set the FileName property, either manually or using the constructor. The file name is any application or document. Here a document is defined to be any file type that has an open or default action associated with it. You can view registered file types and their associated applications for your computer by using the Folder Options dialog box, which is available through the operating system. The Advanced button leads to a dialog box that shows whether there is an open action associated with a specific registered file type.\n\nIn addition, you can set other properties that define actions to take with that file. You can specify a value specific to the type of the FileName property for the Verb property. For example, you can specify \"print\" for a document type. Additionally, you can specify Arguments property values to be command-line arguments to pass to the file's open procedure. For example, if you specify a text editor application in the FileName property, you can use the Arguments property to specify a text file to be opened by the editor.\n\nStandard input is usually the keyboard, and standard output and standard error are usually the monitor screen. However, you can use the RedirectStandardInput, RedirectStandardOutput, and RedirectStandardError properties to cause the process to get input from or return output to a file or other device. If you use the StandardInput, StandardOutput, or StandardError properties on the Process component, you must first set the corresponding value on the ProcessStartInfo property. Otherwise, the system throws an exception when you read or write to the stream.\n\nSet the UseShellExecute property to specify whether to start the process by using the operating system shell. If UseShellExecute is set to , the new process inherits the standard input, standard output, and standard error streams of the calling process, unless the RedirectStandardInput, RedirectStandardOutput, or RedirectStandardError properties, respectively, are set to .\n\nYou can change the value of any ProcessStartInfo property up to the time that the process starts. After you start the process, changing these values has no effect.\n\nInitializes a new instance of the ProcessStartInfo class without specifying a file name with which to start the process. Initializes a new instance of the ProcessStartInfo class, specifies an application file name with which to start the process, and specifies a set of command-line arguments to pass to the application. Initializes a new instance of the ProcessStartInfo class and specifies a file name such as an application or document with which to start the process. Gets a collection of command-line arguments to use when starting the application. Strings added to the list don't need to be previously escaped. Gets or sets the set of command-line arguments to use when starting the application. Gets or sets a value indicating whether to start the process in a new window. Gets or sets a value that identifies the domain to use when starting the process. If this value is , the UserName property must be specified in UPN format. Gets the environment variables that apply to this process and its child processes. Gets search paths for files, directories for temporary files, application-specific options, and other similar information. Gets or sets a value indicating whether an error dialog box is displayed to the user if the process cannot be started. Gets or sets the window handle to use when an error dialog box is shown for a process that cannot be started. Gets or sets the application or document to start. Gets or sets a value that indicates whether the Windows user profile is to be loaded from the registry. Gets or sets a secure string that contains the user password to use when starting the process. Gets or sets the user password in clear text to use when starting the process. Gets or sets a value that indicates whether the error output of an application is written to the StandardError stream. Gets or sets a value indicating whether the input for an application is read from the StandardInput stream. Gets or sets a value that indicates whether the textual output of an application is written to the StandardOutput stream. Gets or sets the preferred encoding for error output. Gets or sets the preferred encoding for standard input. Gets or sets the preferred encoding for standard output. Gets or sets the user name to use when starting the process. If you use the UPN format, , the Domain property must be . Gets or sets a value indicating whether to use the operating system shell to start the process. Gets or sets the verb to use when opening the application or document specified by the FileName property. Gets the set of verbs associated with the type of file specified by the FileName property. Gets or sets the window state to use when the process is started. When the UseShellExecute property is , gets or sets the working directory for the process to be started. When UseShellExecute is , gets or sets the directory that contains the process to be started. Determines whether the specified object is equal to the current object. (Inherited from Object) Gets the Type of the current instance. (Inherited from Object)"
    },
    {
        "link": "https://reddit.com/r/csharp/comments/1cdj230/interact_with_command_line_program_spawned_with",
        "document": "Thanks all. Solution: Indicated with comments in code,.\n\nIt serves my purposes well, Now I want to add the ability to gracefully and programmatically end an ongoing operation.\n\nIf I were using the actual command line I would simply hit the q key. Simply ending the process results in unpredictable behavior.\n\nSo my question is, how do I interact with the process to achieve described?\n\nThe following is an example of how I start a process.\n\nThanks for taking the time."
    }
]