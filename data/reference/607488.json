[
    {
        "link": "https://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html",
        "document": "\n• argument. The overall effect is exactly as if the argument were converted to a string by the method , and the characters of that string were then to this character sequence.\n• Appends the specified string to this character sequence. The characters of the argument are appended, in order, increasing the length of this sequence by the length of the argument. If is , then the four characters are appended. Let n be the length of this character sequence just prior to execution of the method. Then the character at index k in the new character sequence is equal to the character at index k in the old character sequence, if k is less than n; otherwise, it is equal to the character at index k-n in the argument .\n• to this sequence. The characters of the argument are appended, in order, to this sequence, increasing the length of this sequence by the length of the argument. If is , then the four characters are appended to this sequence. Let n be the length of this character sequence just prior to execution of the method. Then the character at index k in the new character sequence is equal to the character at index k in the old character sequence, if k is less than n; otherwise, it is equal to the character at index k-n in the argument .\n• . Appends the specified character sequence to this Depending on which class implements the character sequence , the entire sequence may not be appended. For instance, if is a then the subsequence to append is defined by the buffer's position and limit. - The character sequence to append. If is , then the four characters are appended to this Appendable.\n• to this sequence. Appends a subsequence of the specifiedto this sequence. Characters of the argument , starting at index , are appended, in order, to the contents of this sequence up to the (exclusive) index . The length of this sequence is increased by the value of . Let n be the length of this character sequence just prior to execution of the method. Then the character at index k in this character sequence becomes equal to the character at index k in this sequence, if k is less than n; otherwise, it is equal to the character at index k+start-n in the argument . If is , then this method appends characters as if the s parameter was a sequence containing the four characters . - the starting index of the subsequence to be appended. - the end index of the subsequence to be appended. - if is negative, or is greater than or is greater than\n• array argument to this sequence. Appends the string representation of thearray argument to this sequence. The characters of the array argument are appended, in order, to the contents of this sequence. The length of this sequence increases by the length of the argument. The overall effect is exactly as if the argument were converted to a string by the method , and the characters of that string were then to this character sequence. - the characters to be appended.\n• array argument to this sequence. Appends the string representation of a subarray of thearray argument to this sequence. Characters of the array , starting at index , are appended, in order, to the contents of this sequence. The length of this sequence increases by the value of . The overall effect is exactly as if the arguments were converted to a string by the method , and the characters of that string were then to this character sequence. - the characters to be appended. - the index of the first to append. - the number of s to append. - if or or\n• argument to the sequence. Appends the string representation of theargument to the sequence. The overall effect is exactly as if the argument were converted to a string by the method , and the characters of that string were then to this character sequence.\n• argument to this sequence. Appends the string representation of theargument to this sequence. The argument is appended to the contents of this sequence. The length of this sequence increases by . The overall effect is exactly as if the argument were converted to a string by the method , and the character in that string were then to this character sequence.\n• argument to this sequence. Appends the string representation of theargument to this sequence. The overall effect is exactly as if the argument were converted to a string by the method , and the characters of that string were then to this character sequence.\n• argument to this sequence. Appends the string representation of theargument to this sequence. The overall effect is exactly as if the argument were converted to a string by the method , and the characters of that string were then to this character sequence.\n• argument to this sequence. Appends the string representation of theargument to this sequence. The overall effect is exactly as if the argument were converted to a string by the method , and the characters of that string were then to this character sequence.\n• argument to this sequence. Appends the string representation of theargument to this sequence. The overall effect is exactly as if the argument were converted to a string by the method , and the characters of that string were then to this character sequence.\n• argument to this sequence. Appends the string representation of theargument to this sequence. The argument is appended to the contents of this sequence. The length of this sequence increases by . The overall effect is exactly as if the argument were converted to a array by the method and the character in that array were then to this character sequence.\n• Removes the characters in a substring of this sequence. The substring begins at the specified and extends to the character at index or to the end of the sequence if no such character exists. If is equal to , no changes are made. - if is negative, greater than , or greater than .\n• at the specified position in this sequence. This sequence is shortened by one . Removes theat the specified position in this sequence. This sequence is shortened by one Note: If the character at the given index is a supplementary character, this method does not remove the entire character. If correct handling of supplementary characters is required, determine the number of s to remove by calling , where is this sequence. - if the is negative or greater than or equal to .\n• Replaces the characters in a substring of this sequence with characters in the specified . The substring begins at the specified and extends to the character at index or to the end of the sequence if no such character exists. First the characters in the substring are removed and then the specified is inserted at . (This sequence will be lengthened to accommodate the specified String if necessary.) - if is negative, greater than , or greater than .\n• Inserts the string representation of a subarray of the array argument into this sequence. The subarray begins at the specified and extends s. The characters of the subarray are inserted into this sequence at the position indicated by . The length of this sequence increases by s. - position at which to insert subarray. - the index of the first in subarray to be inserted. - the number of s in the subarray to be inserted. - if is negative or greater than , or or are negative, or is greater than .\n• argument into this character sequence. Inserts the string representation of theargument into this character sequence. The overall effect is exactly as if the second argument were converted to a string by the method , and the characters of that string were then into this character sequence at the indicated offset. The argument must be greater than or equal to , and less than or equal to the length of this sequence. - if the offset is invalid.\n• Inserts the string into this character sequence. The characters of the argument are inserted, in order, into this sequence at the indicated offset, moving up any characters originally above that position and increasing the length of this sequence by the length of the argument. If is , then the four characters are inserted into this sequence. The character at index k in the new character sequence is equal to:\n• the character at index k in the old character sequence, if k is less than\n• the character at index k in the argument , if k is not less than but is less than\n• the character at index k in the old character sequence, if k is not less than The argument must be greater than or equal to , and less than or equal to the length of this sequence. - if the offset is invalid.\n• array argument into this sequence. Inserts the string representation of thearray argument into this sequence. The characters of the array argument are inserted into the contents of this sequence at the position indicated by . The length of this sequence increases by the length of the argument. The overall effect is exactly as if the second argument were converted to a string by the method , and the characters of that string were then into this character sequence at the indicated offset. The argument must be greater than or equal to , and less than or equal to the length of this sequence. - if the offset is invalid.\n• into this sequence. The characters of the argument are inserted, in order, into this sequence at the indicated offset, moving up any characters originally above that position and increasing the length of this sequence by the length of the argument s. The result of this method is exactly the same as if it were an invocation of this object's (dstOffset, s, 0, s.length()) method. If is , then the four characters are inserted into this sequence. - the sequence to be inserted - if the offset is invalid.\n• into this sequence. Inserts a subsequence of the specifiedinto this sequence. The subsequence of the argument specified by and are inserted, in order, into this sequence at the specified destination offset, moving up any characters originally above that position. The length of this sequence is increased by . The character at index k in this sequence becomes equal to:\n• the character at index k in this sequence, if k is less than\n• the character at index k in the argument , if k is greater than or equal to but is less than\n• the character at index k in this sequence, if k is greater than or equal to The argument must be greater than or equal to , and less than or equal to the length of this sequence. The start argument must be nonnegative, and not greater than . The end argument must be greater than or equal to , and less than or equal to the length of s. If is , then this method inserts characters as if the s parameter was a sequence containing the four characters . - the offset in this sequence. - the sequence to be inserted. - the starting index of the subsequence to be inserted. - the end index of the subsequence to be inserted. - if is negative or greater than , or or are negative, or is greater than or is greater than\n• argument into this sequence. Inserts the string representation of theargument into this sequence. The overall effect is exactly as if the second argument were converted to a string by the method , and the characters of that string were then into this character sequence at the indicated offset. The argument must be greater than or equal to , and less than or equal to the length of this sequence. - if the offset is invalid.\n• argument into this sequence. Inserts the string representation of theargument into this sequence. The overall effect is exactly as if the second argument were converted to a string by the method , and the character in that string were then into this character sequence at the indicated offset. The argument must be greater than or equal to , and less than or equal to the length of this sequence. - if the offset is invalid.\n• argument into this sequence. Inserts the string representation of the secondargument into this sequence. The overall effect is exactly as if the second argument were converted to a string by the method , and the characters of that string were then into this character sequence at the indicated offset. The argument must be greater than or equal to , and less than or equal to the length of this sequence. - if the offset is invalid.\n• argument into this sequence. Inserts the string representation of theargument into this sequence. The overall effect is exactly as if the second argument were converted to a string by the method , and the characters of that string were then into this character sequence at the indicated offset. The argument must be greater than or equal to , and less than or equal to the length of this sequence. - if the offset is invalid.\n• argument into this sequence. Inserts the string representation of theargument into this sequence. The overall effect is exactly as if the second argument were converted to a string by the method , and the characters of that string were then into this character sequence at the indicated offset. The argument must be greater than or equal to , and less than or equal to the length of this sequence. - if the offset is invalid.\n• argument into this sequence. Inserts the string representation of theargument into this sequence. The overall effect is exactly as if the second argument were converted to a string by the method , and the characters of that string were then into this character sequence at the indicated offset. The argument must be greater than or equal to , and less than or equal to the length of this sequence. - if the offset is invalid.\n• k such that: is . Returns the index within this string of the first occurrence of the specified substring. The integer returned is the smallest valuesuch that:is if the string argument occurs as a substring within this object, then the index of the first character of the first such substring is returned; if it does not occur as a substring, is returned.\n• for which: If no such value of k exists, then -1 is returned. Returns the index within this string of the first occurrence of the specified substring, starting at the specified index. The integer returned is the smallest valuefor which:If no such value ofexists, then -1 is returned. - the substring for which to search. - the index from which to start the search. the index within this string of the first occurrence of the specified substring, starting at the specified index.\n• . The returned index is the largest value k such that is true. Returns the index within this string of the rightmost occurrence of the specified substring. The rightmost empty string \"\" is considered to occur at the index value. The returned index is the largest valuesuch thatis true. - the substring to search for. if the string argument occurs one or more times as a substring within this object, then the index of the first character of the last such substring is returned. If it does not occur as a substring, is returned.\n• k such that: If no such value of k exists, then -1 is returned. Returns the index within this string of the last occurrence of the specified substring. The integer returned is the largest valuesuch that:If no such value ofexists, then -1 is returned. - the substring to search for. - the index to start the search from. the index within this sequence of the last occurrence of the specified substring.\n• n be the character length of this character sequence (not the length in values) just prior to execution of the method. Then the character at index k in the new character sequence is equal to the character at index n-k-1 in the old character sequence. Causes this character sequence to be replaced by the reverse of the sequence. If there are any surrogate pairs included in the sequence, these are treated as single characters for the reverse operation. Thus, the order of the high-low surrogates is never reversed. Letbe the character length of this character sequence (not the length invalues) just prior to execution of themethod. Then the character at indexin the new character sequence is equal to the character at indexin the old character sequence. Note that the reverse operation may result in producing surrogate pairs that were unpaired low-surrogates and high-surrogates before the operation. For example, reversing \"\\uDC00\\uD800\" produces \"\\uD800\\uDC00\" which is a valid surrogate pair.\n• Returns a string representing the data in this sequence. A new object is allocated and initialized to contain the character sequence currently represented by this object. This is then returned. Subsequent changes to this sequence do not affect the contents of the . a string representation of this sequence of characters.\n• the length of the sequence of characters currently represented by this object\n• Returns the current capacity. The capacity is the amount of storage available for newly inserted characters, beyond which an allocation will occur.\n• \n• Twice the old capacity, plus . If the argument is nonpositive, this method takes no action and simply returns. Note that subsequent operations on this object can reduce the actual capacity below that requested here. Ensures that the capacity is at least equal to the specified minimum. If the current capacity is less than the argument, then a new internal array is allocated with greater capacity. The new capacity is the larger of:If theargument is nonpositive, this method takes no action and simply returns. Note that subsequent operations on this object can reduce the actual capacity below that requested here.\n• Attempts to reduce storage used for the character sequence. If the buffer is larger than necessary to hold its current sequence of characters, then it may be resized to become more space efficient. Calling this method may, but is not required to, affect the value returned by a subsequent call to the method.\n• k less than , the character at index k in the new character sequence is the same as the character at index k in the old sequence if k is less than the length of the old character sequence; otherwise, it is the null character . In other words, if the argument is less than the current length, the length is changed to the specified length. Sets the length of the character sequence. The sequence is changed to a new character sequence whose length is specified by the argument. For every nonnegative indexless than, the character at indexin the new character sequence is the same as the character at indexin the old sequence ifis less than the length of the old character sequence; otherwise, it is the null character. In other words, if theargument is less than the current length, the length is changed to the specified length. If the argument is greater than or equal to the current length, sufficient null characters ( ) are appended so that length becomes the argument. The argument must be greater than or equal to . - if the argument is negative.\n• value in this sequence at the specified index. The first value is at index , the next at index , and so on, as in array indexing. Returns thevalue in this sequence at the specified index. The firstvalue is at index, the next at index, and so on, as in array indexing. The index argument must be greater than or equal to , and less than the length of this sequence. If the value specified by the index is a surrogate, the surrogate value is returned. - the index of the desired value. the value at the specified index. - if is negative or greater than or equal to .\n• values (Unicode code units) and ranges from to . Returns the character (Unicode code point) at the specified index. The index refers tovalues (Unicode code units) and ranges fromto If the value specified at the given index is in the high-surrogate range, the following index is less than the length of this sequence, and the value at the following index is in the low-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the value at the given index is returned. - the index to the values the code point value of the character at the - if the argument is negative or not less than the length of this sequence.\n• values (Unicode code units) and ranges from to Returns the character (Unicode code point) before the specified index. The index refers tovalues (Unicode code units) and ranges fromto If the value at is in the low-surrogate range, is not negative, and the value at is in the high-surrogate range, then the supplementary code point value of the surrogate pair is returned. If the value at is an unpaired low-surrogate or a high-surrogate, the surrogate value is returned. - the index following the code point that should be returned the Unicode code point value before the given index. - if the argument is less than 1 or greater than the length of this sequence.\n• Returns the number of Unicode code points in the specified text range of this sequence. The text range begins at the specified and extends to the at index . Thus the length (in s) of the text range is . Unpaired surrogates within this sequence count as one code point each. - the index to the first of the text range. - the index after the last of the text range. the number of Unicode code points in the specified text range - if the is negative, or is larger than the length of this sequence, or is larger than .\n• Returns the index within this sequence that is offset from the given by code points. Unpaired surrogates within the text range given by and count as one code point each. - the index to be offset the index within this sequence - if is negative or larger then the length of this sequence, or if is positive and the subsequence starting with has fewer than code points, or if is negative and the subsequence before has fewer than the absolute value of code points.\n• . The first character to be copied is at index ; the last character to be copied is at index . The total number of characters to be copied is . The characters are copied into the subarray of starting at index and ending at index: Characters are copied from this sequence into the destination character array. The first character to be copied is at index; the last character to be copied is at index. The total number of characters to be copied is. The characters are copied into the subarray ofstarting at indexand ending at index: - the array to copy the data into. - if any of the following is true:\n• the argument is greater than the argument.\n• . This sequence is altered to represent a new character sequence that is identical to the old character sequence, except that it contains the character at position . The character at the specified index is set to. This sequence is altered to represent a new character sequence that is identical to the old character sequence, except that it contains the characterat position The index argument must be greater than or equal to , and less than the length of this sequence. - the index of the character to modify. - if is negative or greater than or equal to .\n• Returns a new that contains a subsequence of characters currently contained in this character sequence. The substring begins at the specified index and extends to the end of this sequence. - if is less than zero, or greater than the length of this object.\n• Returns a new character sequence that is a subsequence of this sequence. An invocation of this method of the form behaves in exactly the same way as the invocation This method is provided so that this class can implement the behaves in exactly the same way as the invocationThis method is provided so that this class can implement the interface. - if or are negative, if is greater than , or if is greater than\n• Returns a new that contains a subsequence of characters currently contained in this sequence. The substring begins at the specified and extends to the character at index . - if or are negative or greater than , or is greater than ."
    },
    {
        "link": "https://docs.oracle.com/javase/8/docs/api?java/lang/StringBuilder.html",
        "document": "JavaScript is disabled on your browser.\n\nThis document is designed to be viewed using the frames feature. If you see this message, you are using a non-frame-capable web client. Link to Non-frame version."
    },
    {
        "link": "https://geeksforgeeks.org/stringbuilder-delete-in-java-with-examples",
        "document": "The delete(int start, int end) method of StringBuilder class removes the characters starting from index start to index end-1 from String contained by StringBuilder. This method takes two indexes as a parameter first start represents index of the first character and endIndex represents index after the last character of the substring to be removed from String contained by StringBuilder and returns the remaining String as StringBuilder Object.\n• start: index of the first character of the substring.\n• end: index after the last character of the substring.\n\nReturn Value: This method returns this StringBuilder object after removing the substring.\n\nException: This method throws StringIndexOutOfBoundsException if the start is less than zero, or start is larger than the length of String, or start is larger than end.\n\nBelow programs demonstrate the delete() method of StringBuilder Class:"
    },
    {
        "link": "https://download.java.net/java/early_access/valhalla/docs/api/java.base/java/lang/StringBuilder.html",
        "document": ""
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/api/java.lang.stringbuilder?view=net-android-34.0",
        "document": "A mutable sequence of characters. This class provides an API compatible with , but with no guarantee of synchronization. This class is designed for use as a drop-in replacement for in places where the string buffer was being used by a single thread (as is generally the case). Where possible, it is recommended that this class be used in preference to as it will be faster under most implementations.\n\nThe principal operations on a are the and methods, which are overloaded so as to accept data of any type. Each effectively converts a given datum to a string and then appends or inserts the characters of that string to the string builder. The method always adds these characters at the end of the builder; the method adds the characters at a specified point.\n\nFor example, if refers to a string builder object whose current contents are \" \", then the method call would cause the string builder to contain \" \", whereas would alter the string builder to contain \" \".\n\nIn general, if sb refers to an instance of a , then has the same effect as .\n\nEvery string builder has a capacity. As long as the length of the character sequence contained in the string builder does not exceed the capacity, it is not necessary to allocate a new internal buffer. If the internal buffer overflows, it is automatically made larger.\n\nInstances of are not safe for use by multiple threads. If such synchronization is required then it is recommended that be used.\n\nUnless otherwise noted, passing a argument to a constructor or method in this class will cause a to be thrown.\n\nPortions of this page are modifications based on work created and shared by the Android Open Source Project and used according to terms described in the Creative Commons 2.5 Attribution License."
    },
    {
        "link": "https://w3schools.com/java/java_user_input.asp",
        "document": "The class is used to get user input, and it is found in the package.\n\nTo use the class, create an object of the class and use any of the available methods found in the class documentation. In our example, we will use the method, which is used to read Strings:\n\nIn the example above, we used the method, which is used to read Strings. To read other types, look at the table below:\n\nIn the example below, we use different methods to read data of various types:\n\nNote: If you enter wrong input (e.g. text in a numerical input), you will get an exception/error message (like \"InputMismatchException\"). You can read more about exceptions and how to handle errors in the Exceptions chapter."
    },
    {
        "link": "https://theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/Java-Scanner-User-Input-example-String-next-int-long-char",
        "document": ""
    },
    {
        "link": "https://geeksforgeeks.org/scanner-class-in-java",
        "document": "In Java, Scanner is a class in java.util package used for obtaining the input of the primitive types like int, double, etc. and strings.\n\nUsing the Scanner class in Java is the easiest way to read input in a Java program, though not very efficient if you want an input method for scenarios where time is a constraint like in competitive programming.\n\nScanner class helps to take the standard input stream in Java. So, we need some methods to extract data from the stream. Methods used for extracting data are mentioned below:\n\nLet us look at the code snippet to read data of various data types.\n\nSometimes, we have to check if the next value we read is of a certain type or if the input has ended (EOF marker encountered).\n\nThen, we check if the scanner’s input is of the type we want with the help of hasNextXYZ() functions where XYZ is the type we are interested in. The function returns true if the scanner has a token of that type, otherwise false. For example, in the below code, we have used hasNextInt(). To check for a string, we use hasNextLine(). Similarly, to check for a single character, we use hasNext().charAt(0).\n\nLet us look at the code snippet to read some numbers from the console and print their mean.\n• None To create an object of Scanner class, we usually pass the predefined object System.in, which represents the standard input stream. We may pass an object of class File if we want to read input from a file.\n• None To read numerical values of a certain data type XYZ, the function to use is nextXYZ(). For example, to read a value of type short, we can use nextShort()\n• None To read strings, we use nextLine().\n• None To read a single character, we use next().charAt(0). next() function returns the next token/word in the input as a string and charAt(0) function returns the first character in that string.\n• None The Scanner class reads an entire line and divides the line into tokens. Tokens are small elements that have some meaning to the Java compiler. For example, Suppose there is an input string: How are you \n\n In this case, the scanner object will read the entire line and divides the string into tokens: “How”, “are” and “you”. The object then iterates over each token and reads each token using its different methods."
    },
    {
        "link": "https://programiz.com/java-programming/scanner",
        "document": "The class of the package is used to read input data from different sources like input streams, files, etc. Let's take an example.\n\nExample 1: Read a Line of Text Using Scanner\n\nIn the above example, notice the line\n\nHere, we have created an object of named .\n\nThe parameter is used to take input from the standard input. It works just like taking inputs from the keyboard.\n\nWe have then used the method of the class to read a line of text from the user.\n\nNow that you have some idea about , let's explore more about it.\n\nAs we can see from the above example, we need to import the package before we can use the class.\n\nTo learn more about importing packages, visit Java Packages.\n\nOnce we import the package, here is how we can create objects.\n\nHere, we have created objects of the class that will read input from InputStream, File, and String respectively.\n\nThe class provides various methods that allow us to read inputs of different types.\n\nIn the above example, we have used the method to read an integer value.\n\nIn the above example, we have used the method to read a floating-point value.\n\nIn the above example, we have used the method to read a string from the user.\n\nHere, we have provided the full name. However, the method only reads the first name.\n\nThis is because the method reads input up to the whitespace character. Once the whitespace is encountered, it returns the string (excluding the whitespace).\n\nIn the first example, we have used the method to read a string from the user.\n\nUnlike , the method reads the entire line of input including spaces. The method is terminated when it encounters a next line character, .\n\nTo learn more, visit Java Scanner skipping the nextLine().\n\nJava scanner can also be used to read the big integer and big decimal numbers.\n• - reads the big integer value from the user\n• - reads the big decimal value from the user\n\nIn the above example, we have used the and package to read and respectively.\n\nThe class reads an entire line and divides the line into tokens. Tokens are small elements that have some meaning to the Java compiler. For example,\n\nSuppose there is an input string:\n\nIn this case, the scanner object will read the entire line and divides the string into tokens: \"He\", \"is\" and \"22\". The object then iterates over each token and reads each token using its different methods.\n\nNote: By default, whitespace is used to divide tokens."
    },
    {
        "link": "https://java-programming.mooc.fi/part-1/3-reading",
        "document": ""
    }
]