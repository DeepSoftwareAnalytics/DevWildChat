[
    {
        "link": "https://platform.openai.com/docs/api-reference/introduction",
        "document": ""
    },
    {
        "link": "https://platform.openai.com/docs/api-reference",
        "document": ""
    },
    {
        "link": "https://platform.openai.com/docs/quickstart",
        "document": ""
    },
    {
        "link": "https://postman.com/devrel/openai/documentation/k25n3c8/openai-api",
        "document": ""
    },
    {
        "link": "https://platform.openai.com/docs/api-reference/chat",
        "document": ""
    },
    {
        "link": "https://make.com/en/help/tools/webhooks",
        "document": "Webhooks allow you to send data to Make over HTTPS. Webhooks create a URL that you can call from an external app or service, or from another Make scenario. Use webhooks to trigger the execution of scenarios.\n\nWebhooks usually act as instant triggers. Contrary to scheduled triggers, which periodically ask a given service for new data to be processed, webhooks execute the scenario immediately after the webhook URL receives a request.\n\nMake supports the following types of webhooks:\n\nTo create a webhook, you must insert the Custom webhook module to a scenario. Each scenario must use its own webhook. You can not use one webhook in multiple scenarios.\n• None Insert the Custom Webhook module from the Webhooks app.\n• None Set the webhook's name and other settings, then click Save. Make generates a URL and starts listening for requests to this URL. Send a request to this URL to have Make automatically determine the data structure for this webhook. See setting up webhook data structure below for more details. You can access the webhook's details and change the webhook's settings in the Webhooks section in the left menu. Optionally, you can let Make know what data structure to expect in the webhook request payload. Make can use data structures to validate the incoming data. If you do not set up a data structure, Make will pass the incoming data to subsequent modules in your scenario without any validation. To enable validating incoming data, set up the webhook's data structure in one of the following ways:\n• None Create a new data structure manually in the Data structures section. You can also use the following methods to let Make know what data structure to expect. Note that these methods do not enable data validation. The data structure set up in this way only helps with mapping the webhook data to subsequent modules in your scenario.\n• None Create a data structure immediately after creating the webhook by calling the webhook URL with sample data in the request body.\n• None Re-determine the data structure of an existing webhook going to the Webhook module settings, clicking Re-determine data structure, and calling the webhook URL with sample data in the request body. If you call the webhook URL to automatically determine or re-determine the data structure, Make does not create a reusable data structure in the Data structures section. The data structure determined in this way is stored internally with the particular webhook. In this case, Make does not validate incoming data.\n\nWhen a webhook receives a request, the system stores the request in the webhook's queue. Each webhook has its own queue. Go to the Webhooks section in the left menu to view all webhooks and their queues. If you are using instant webhooks, Make starts processing each request immediately as the request is received. By default, scenarios with instant webhooks are processed in parallel. Even if a previous scenario execution is still being processed, Make does not wait for its processing to complete. You can inspect all running executions in the scenario detail. Click an item in the list of running executions to view the graphical representation of that particular execution. The execution that is currently displayed is marked with an eye icon. To turn off parallel processing, open the settings of your scenario and select Sequential processing. With sequential processing enabled, Make waits until the previous execution is complete before starting the next one. Also, use sequential processing when you need to process your webhook requests in the order that they came in. If you are using scheduled webhooks, requests accumulate in the queue until the schedule criteria are met. When schedule criteria are met, Make processes the queued requests based on the Maximum number of results that you set for the webhook. For example, if your scenario is scheduled to run every hour and your Maximum number of results is set to the default value of 2, Make processes two items from the queue every hour. If your webhook queue is filling up with requests, increase the Maximum number of results or adjust the schedule to execute the scenario more often. Instant trigger modules have the Maximum number of cycles parameter instead of the Maximum number of results. Set the Maximum number of cycles in the instant trigger modules to get the same data processing behavior as is with webhooks and the Maximum number of results parameter. When data arrives to a webhook and the call is not processed instantly, Make stores it in the webhook processing queue. The limit for the number of webhook queue items depends on your usage allowance, which is a part of your subscription. For every 10,000 operations licensed per month, you can have up to 667 items in each webhook's queue. The maximum number is 10,000 items in the webhook's queue. When the webhook queue is full, Make rejects all incoming webhook data which is over the limit. Incoming webhook data is always stored in the queue regardless of the data is confidential option settings. As soon as the data is processed in a scenario, it is permanently deleted. To view the content of the queue, follow the steps below.\n• None Go to the Webhooks section in the left menu.\n• None Find the webhook whose queue you want to view.\n• None Click the specific webhook on the list to inspect its details.\n• None To see the webhook's queue, click Queue. You can also click the button with the truck icon on the Webhooks page.\n• None Click Detail by the webhook you want to inspect. You can see the parsed items. Make automatically deactivates webhooks that are not connected to any scenario for more than 5 days (120 hours). The hook return status code.\n• None Go to the Webhooks section in the menu on the left.\n• None Click the button with the truck icon to see the webhook's queue.\n• None Tick the box on the left in front of the entries you want to delete.\n• None To delete all, tick the first box on the left and then Delete all. You have deleted the incoming webhook item(s) from the queue. Make stores webhook logs for 3 days. For the organizations on the Enterprise plan,Make keeps the webhook logs for 30 days. Make deletes logs older than other retention limit. To view webhook logs, follow the steps below.\n• None Go to the Webhooks section in the menu on the left.\n• None Click the specific webhook on the list to inspect its details.\n• None\n• None Status of the webhook call (success, warning, error, or all) To filter the webhook logs by status, click the filter icon.\n• None Date and time of the incoming webhook To sort the webhook log by date and time, click the arrow.\n• None To see the detail of the specific webhook log, click Detail.\n• None Parsed items combine the query parameters and body of the webhook request in one bundle.\n\nMake supports the following formats of incoming data: If a webhook receives data in both the query string and either form data or JSON data at the same time, the system combines the data into a single bundle. If the request contains duplicate data in different formats, the query string takes precedence and overwrites the data that was received in the other formats. We recommend you do not duplicate data in query strings, form data, and JSON. In order to receive files encoded with , it is necessary to configure a data structure with a type field that contains the nested fields , and . The field is a type and contains the name of the uploaded file. The mime is a text type and contains a file in the [MIME] format. The field is a type and contains binary data for the file being transferred. To access the original JSON, open the webhook's settings and enable the JSON pass-through option: The maximum allowed webhook's payload size ( ) is 5 MB (5.242.880 bytes) regardless of the subscription tier.\n\nThe default response to a webhook call contains just a simple text, \"Accepted\". The response is returned to the webhook's caller right away during the execution of the Custom Webhook module. You can easily test it like this:\n• None Place the Custom Webhook module in your scenario.\n• None Add a new webhook in the module's configuration.\n• None Copy the webhook's URL to your clipboard.\n• None Run the scenario - the Custom Webhook module should be waiting for the webhook call (see on the right)\n• None Open a new browser window, paste the copied URL in the address bar and press Enter.\n• None The Custom Webhook module will be triggered and the browser will display the following page: These are default responses when the scenario does not contain the Webhook Response module: If you wish to customize the webhook's response, employ the module Webhook Response. The configuration of the module contains two fields: Status and Body. The Status field should contain HTTP response status codes like 2xx for Success (e.g. for OK), 3xx for Redirection (e.g. for Temporary Redirect), 4xx for Client errors (e.g. for Bad Request), etc. The Body field should contain anything that will be accepted by the webhook's call. It can be a simple text, HTML, XML, JSON, etc. It is advisable to set the header to the corresponding mime type: for plain text, for HTML, for JSON, for XML, etc. These are additional default responses when the scenario does contain the Webhook Response module: The timeout for sending a response is 180 seconds. If the response is not available within that period, Make returns a '200 Accepted' status."
    },
    {
        "link": "https://techflow.ai/blog/how-to-use-the-integromat-webhook",
        "document": "If you're serious about automation - don't miss out of the power of webhooks. A Webhook is the connector between systems for realtime action.\n\nMake (formerly Integromat) webhooks are a great way to connect any service to start your automations on Make (formerly Integromat) instantly when something happens on the other platform. This blog will show you how you can work with Integromat webhooks and other different hook types and what you can do with them.\n\nFirst off, create a simple webhook by creating a new scenario in Integromat, clicking on the plus symbol, and then searching for “Webhook”. There are a lot of different systems coming up if you search for webhooks, because all of these actually offer webhooks as a trigger, which means they can kick-start your automation instantly when something happens on that platform.\n\nScroll down and select “Webhooks”. Here we have two different types of triggers.\n\nOne is the Custom mailhook. This actually provides you with an email address where you can send an email to. You forward an email, then you can use advanced logic in your email system. For example, in Gmail, you can have filters that automatically forward emails coming from a specific person or have a specific subject line. You can forward them to this custom mailhook, and it will automatically start that automation and also append all the email details to that Webhook.\n\nYou could use that information received by the Webhook to automate cool things with it. You can learn more about these things in the free workshop, which you can access through this link. It’ll teach you how you can use these mailhooks to your advantage, and how you can extract any kind of information from the emails.\n\nBut for now, we want to focus on Custom webhooks. A webhook is basically a URL that you can send data to. So the official definition here is “A webhook in web development is a method of augmenting or altering the behavior of a web page or web application with custom callbacks. These callbacks may be maintained, modified, and managed by third party users and developers who may not necessarily be affiliated with the originating website application.”\n\nThat sounds awful, right? It's so boring. But here is my very short explanation. In simpler words, “a webhook is a URL that you can trigger and append data to it. The webhook ‘catches’ the data, processes it in a way that you want and can even send data back.” -Webhook Simpler Definition. So that is my personal, simple definition of what a webhook is and what it can do for you.\n\nLet's go into some examples first, and then I'll show you how to set this up because it might help you to understand what a webhook actually is. One good example is Shopify. You have all kinds of different events on Shopify. They could be articles, blogs, custom collections, comments, orders, pages, price rules, products, and smart collections.\n\nFor example, for articles, if the article was created, then you can send a notification to your system to take it out in that case and say “Hey, I got a new article. It was just created. I want to send it off to my social media” or something like that. So you get an instant notification when this event happens. There are other events that could trigger, i.e. published, unpublished, updated and more.\n\nOf course, the most important one is most likely orders. When an order is created, order is confirmed, order is filled, order is placed, etc., you can use all of them and send a notification to your system and kick-start your automation.\n\nIf you're using a booking service, then you can send yourself a notification if a new booking happened, and then you can, for example, add it as a task in your project management tool. You can send a notification to Slack. You can prepare automatically some folders or documents that you will need for that call. You can do all these things instantly!\n\nAnother example is ManyChat. ManyChat is used for chatbot creation to develop all kinds of different smart chatbots.\n\nHere you have an external request, which is basically a webhook where you send data to.\n\nPut the URL of your webhook here and then send data, such as, full contact data or specific custom fields. You can send the data to a particular scenario on Integromat, and then you can do automation based on that.\n\nThere’s also the “add a request for dynamic content” where you can put in a webhook and body.\n\nThe main difference between the two is that the external request just sends data off and the dynamic content sends data and waits for 10 seconds to receive data back, then you can do further automation with that.\n\nLet's get into how to set this up. We have the Custom webhook. Create a new one. Give it any name that you want.\n\nYou could check “Show advanced settings” and define the data structure. I recommend leaving it empty because Make (formerly Integromat) will automatically define the data structure. You could also get the request headers if you need them. There is also the “Get request HTTP method”. This is advanced, so you don't have to worry about that for now.\n\nYou can also use “JSON pass-through” if you want to modify the raw data of it. That's also not recommended in most cases, but I just wanted to mention them here, so you know that these options actually exist.\n\nNow when you click on Save, you get the URL which you can copy to your clipboard.\n\nAdd it to the location where you send the notification from. That could be in Shopify under notifications or that could be in your scheduling system.\n\nIn our case in ManyChat, it’s over here.\n\nClick on “Test the request” in ManyChat and back in Integromat it would say, “Successfully determined”.\n\nWhen you send data once to that webhook, Integromat knows what kind of data to expect, and only then can you map it to the other modules.\n\nTo test, add a Set Variable module. Search for Tools among the modules, then “Set variable”.\n\nThen we see that there's nothing from the webhook because you didn't send any data in the body. It just sent a notification but didn't attach any data.\n\nTry it again. This time, add full contact data.\n\nGo back to the webhook and click on the “Re-determine data structure” so Integromat knows what kind of data to expect.\n\nTest the request again with full contact data.\n\nOnce data is successfully determined in the Webhook module, you see all the variables that are available from ManyChat. You can use this data to map inside other modules and do whatever you want with it.\n\nFor example, use the ID field and map it inside the Set Variable module. Type in a text, Subscriber ID:, before the mapped field.\n\nRun the scenario once. Trigger it again by testing the request from ManyChat. You would see all the data coming in, and then you would see the subscriber ID and extracted ID value.\n\nThat way, you can automate anything! It runs instantly, which means it only runs when a notification is received, that is, when an event is happening. Only then will it continue and start your automation.\n\nThis is very helpful because Integromat is built based on operations. That means if you trigger the scenario based on a schedule, let's say at regular intervals every five minutes, then it would cost you one operation every five minutes, even if there's no data. But with Webbooks, then triggering the scenario happens instantly. You only use operations when there's an actual event.\n\nNow that we covered the webhooks, there's also the Webhook response. It is what we are using for the dynamic content here. We send data back, like a response to that webhook by default.\n\nIf you don't have this webhook response module set up, it sends back 200 and accepts it.\n\nRun it once and test the request again, then you would see the response is accepted and a 200, so that's everything that you would get back by default.\n\nIf you set up a webhook response, then you can set up something else. For example, 400 and Body is Failure.\n\nSo you got this 400 error code, a bad request, and the Response Body is failure so that way you can send data back.\n\nI've got a different tutorial on how to create a BMI calculator where I explain exactly how you can use the webhook response. For example, with HTML. If you call the URL, it will do some automation in the backend, send it back to you and display a nicely formatted website with all the information that you have gotten from your automation. It's super helpful and the response is very good. You just have to keep in mind that most services expire. That means they don't wait forever for the webhook response. In that case, you might think about using a different way of returning the data instead of having the webhook response.\n\nThat’s it! Use Webhooks wherever you can because they work instantly, and you don't have to put them on a schedule.\n\nAutomating your business doesn't have to be difficult. Make (formerly Integromat) can get you started! Integromat has plenty of ways you can automate your business. For example, you can create a workflow that can send out a mail merge to your customers upon purchasing. You can even get a job done automatically by setting up a workflow that can send out a request for quote and a mail merge to potential customers based on the information you input. With the ability to connect to Microsoft programs and Google apps, you'll be able to automate your business in no time! Are you tired of manually doing the same job over and over again? Are you looking for a more efficient way to run your business? If so, you're in the right place! Here at the Make Simplified Accelerator, we can teach you how to use the latest technology to automate your business! We can teach you how to use a process to understand the right steps to automate your product, the best coding language to implement, how to adapt it to your business, and more! We're confident that you will find our course to be the most useful one available, and we've got everything you need to succeed!"
    },
    {
        "link": "https://help.domotz.com/integrations/make-processing-webhook-events",
        "document": "If you have a Ubiquiti UISP Cloud Console you can unlock advanced features inside Domotz. Please refer to this guide..."
    },
    {
        "link": "https://community.make.com/t/secure-webhooks-how-to-do-this-in-integromat/1760",
        "document": "I would like to secure the webhooks in make.com so that only my app can connect to them. Obscure URLs aren’t really protection. I could just pass a username and password in the header and then check in the webhook that they are [resent but even that is not very secure as they could be stolen by anyone who could see the network connection. Is there a way to generate a key pair on integromat and then pass the public key to my app to connect with. There is no human interaction during the app connecting with make so that is a restriction. I want my webhook can only accessed from my website\n\nI usually try to use a combination of things to make it secure… Most likely, you know them all but I will mention it just in case:\n• Pass a token from my app and apply a filter on the link (so if I get incorrect token or id, I simply wont continue with the route)\n• Enable “Get request headers” and use Filter to allow or disallow based on certain header details (i.e user-agent etc).\n• Enable the IP restriction (you can use CIDR notation to whitelist multiple subnets). Let me know if you do find a better way to secure the webhook.\n\nI could just pass a username and password in the header and then check in the webhook that they are resent but even that is not very secure as they could be stolen by anyone who could see the network connection. Not fully addressing your question, but you could do as you’ve just outlined and not have it stolen as the data contained within the network connection would be encrypted. For example, making a POST request to the Webhook endpoint url: Will encrypt the JSON ( ). That could indeed contain a “secret token” that you then verify after the Webhook is received within Make.\n\n@ezz Would you be able to add an example of how you filter on header details? I’ve just started with Make as well and am having a hard time finding the right settings. Would be very much appreciated! EDIT: found an example here: How to secure my webhook with an APIKEY - #5 by ecomsilio"
    },
    {
        "link": "https://xray.tech/post/send-webhooks-make-integromat-tutorial",
        "document": "Make (formerly Integromat) offers extensive low-code functionality, making it one of the best automation tools available if you’re looking to build more sophisticated workflows.\n\nIn addition to a wide selection of pre-built modules for specific apps, Make also gives users several modules that can work with just about any software, like the HTTP module focused on sending requests to webhooks.\n\nWebhooks let you access an application’s API, transferring data that you can then use in another platform. With HTTP requests and Webhooks, you can connect your Make scenarios to additional automations in apps like Zapier or Airtable,\n\nIn this post, we’ll show you how to send HTTP requests in your Make scenarios step-by-step.\n\nFirst, you’ll need to add an “HTTP” module in Make.\n\nNote: don’t select the “webhooks” module. The webhook module is designed for receiving requests, while the HTTP module is Make’s approach to sending requests.\n\nSearch for “http”, select the appropriate module, and choose “Make a request”.\n\nTo fill in the URL and configure the rest of the module, you’ll need to consult the documentation for the app that you’re sending data to.\n\nTheir documentation or support guides will show you the appropriate URL, and how the data needs to be configured.\n\nFor example, we’re going to send data to an Airtable webhook in order to trigger an Airtable automation.\n\nIf we Google “Airtable webhooks”, we can easily find some relevant support docs. You could also search for “[your app] api”, or “[your app] docs” to find what you need.\n\nDesignate a URL to Send the Request To\n\nRefer to your app’s documentation to find the target URL you need to send your request to.\n\nWith Airtable, the docs indicate that we need to open a table, create an automation, and select “When Webhook Received” as the trigger.\n\nThen, we can see the URL we need in the “Automations” panel on the right hand side of the Airtable UI. We’ll copy it and paste it into our HTTP module in Make.\n\nNext, you’ll need to select an option from the Method menu. In most cases, you’ll need to choose “POST” to send data.\n\nIf you’re curious about what these other options are for, here’s a quick rundown:\n• PUT and PATCH are used to update data, and DELETE is used to delete data.\n\nYou can check the docs to confirm which method to use, but if your goal is to create new data, you’ll probably want to use POST.\n\nFill in Headers and Query String as Needed\n\nIn many cases, you’ll need to add a header to authenticate your request, but in this case, authentication is already handled by connecting Airtable to Make, so we’ll leave Headers blank.\n\nAdding a query string would let us filter results, but we won’t need one in this example.\n\nCheck your app’s documentation to find out how the body and content of your request need to be formatted.\n\nAirtable’s Docs specify that we need to format the content as a JSON object, so we’ll choose “Raw” as the Body type and “JSON” as the content type.\n\nNow you need to fill out the “Request content” field with the data you want to send.\n\nFor our Airtable example, we need to use JSON formatting for the data to be parsed correctly. You’ll often find examples of how to format your data in the support docs, so it’s often a good idea to start by copying and pasting those examples.\n\nWith your HTTP module fully configured, click “OK”, and then run your module once. You may also need to set your application to listen for incoming requests.\n\nYou should see that this module was successful. However, all that means is that sending the request was successful. You’ll need to check the app that you’re sending data to in order to confirm everything worked.\n\nAs you can see in the screenshot, Airtable received our request, with each piece of data parsed and formatted correctly. We can now build an automation in Airtable with the data sent through Make.\n\nWebhooks are a convenient way to send data from one platform to another as you’re building advanced, multi-part automations. You can even use them to avoid making overly complex branching paths within a single automation.\n\nHTTP modules are a versatile tool for constructing automated workflows, and setting them up only takes a quick Google search.\n\nIf you’d like to learn more about no-code and low-code automation with apps like Make and Zapier, check out our blog or our YouTube channel. You can also follow XRay on Twitter, Facebook, or LinkedIn."
    }
]