[
    {
        "link": "https://geeksforgeeks.org/crontab-in-linux-with-examples",
        "document": "Tired of manually running backups, updating logs, or restarting services on your Linux system? Imagine automating repetitive tasks so your system works for you even while you sleep. Enter crontab, Linux’s built-in job scheduler that empowers users to automate commands, scripts, and system operations with precision.\n\nIn this guide, you will learn how to use cron (the tool behind crontab) to schedule tasks by the minute, hour, or day. We’ll explain crontab’s syntax in plain language, walk you through practical examples (like automating backups or log updates), and share easy tips to avoid mistakes.\n\nLinux Crontab is a powerful utility that is used for Scheduling and Automating Tasks in Unix-like operating systems. It facilitates the users to run the scripts or Linux Commands at specified times and intervals. It is ideal for repetitive tasks such as system maintenance, backups, and updates.\n\nEach user can have their Crontab file, where they can define the scheduling commands that are to be executed. It helps in simplifying the task automation, enhancing the system efficiency and reliability. Crontab stands for “cron table,” because it uses the job scheduler cron to execute tasks; cron itself is named after “Chronos,” the Greek word for time.\n\nWhat is the Syntax of Linux Crontab?\n• None The Linux Crontab Format is represented by the following syntax:\n• None Let’s break down each field and discuss as follows:\n\nSpecifies the minute when the command will run Denotes the hour of the day when the command is scheduled to execute. Specifies the day of the month for the task. Indicates the month during which the command will be executed. Specifies the day of the week for the task. It is represented by numbers from 0 to 7, where both 0 and 7 correspond to Sunday. Represents the actual command or script that will run at the scheduled time.\n\nCrontab works by allowing the users to schedule tasks or commands that help to run automatically at specified times and intervals. The following are the points that discuss how the crontab will operate:\n• Crontab Configuration can maintain their crontab file that facilitates listing the commands or scripts that are to be executed as their schedule.\n• Time Specification : It uses a specific syntax for defining when the tasks should run. Its syntax includes the fields for minute, hour, day of the month, month, and day of the week.\n• Scheduled Execution ) will continuously check crontab files to determine if any scheduled tasks match the current time. When a match is found, it executes the specified command or script.\n• Logging and Notifications : Output from cron jobs is typically mailed to the user’s email by default. Users can redirect output to files or disable email notifications as needed.\n• System-wide and User-specific , while individual users manage their tasks using the\n\nWhat are Some Usage and Examples of Linux Crontab Jobs?\n\nThe following are some examples of cron jobs:\n• None The basic usage of cron is to execute a job in a specific time as shown below. This will execute the Full backup shell script (full-backup) on 10th June at 08:30 AM.\n• None The time field uses 24 hours format. So, for 8 AM use 8, and 8 PM use 20.\n• None 30 – 30th Minute 08 – 08 AM 10 – 10th Day 06 – 6th Month (June) * – Every day of the week\n• None View Current Logged-In User’s Crontab entries: To view your crontab entries type crontab -l from your Unix account.\n• None View Root Crontab entries: Login as root user (su – root) and do crontab -l.\n• None To view crontab entries of other Linux users: Login to root and use -u {username} -l.\n• None To edit a crontab entries, use crontab -e. By default, this will edit the currently logged-in user crontab.\n\n4. To Schedule a Job for Every Minute using Cron:\n• None Ideally, you may not have a requirement to schedule a job every minute. But understanding this example will help you understand the other examples.\n• None The * means all the possible units — i.e. every minute of every hour throughout the year. More than using this * directly, you will find it very useful in the following cases.\n• None When you specify */5 in the minute field means every 5 minutes. When you specify 0-10/2 in the minute field means every 2 minutes in the first 10 minutes. Thus the above convention can be used for all the other 4 fields.\n\n5. To Schedule a Job For More Than One Time (e.g. Twice a Day):\n• None The following script takes an incremental backup twice a day every day. This example executes the specified incremental backup shell script (incremental-backup) at 11:00 and 16:00 every day.\n• None The comma-separated value in a field specifies that the command needs to be executed at all the mentioned times.\n• None 00 – 0th Minute (Top of the hour) 11, 16 – 11 AM and 4 PM * – Every day * – Every month * – Every day of the week\n\n6. To Schedule a Job for a Certain Range of Time (e.g. Only on Weekdays):\n\nIf you wanted a job to be scheduled for every hour within a specific range of time then use the following.\n• None Cron Job every day during working hours: This example checks the status of the every day (including weekends) during the working hours 9 a.m – 6 p.m\n• None 00 – 0th Minute (Top of the hour) 09-18 – 9 am, 10 am, 11 am, 12 am, 1 pm, 2 pm, 3 pm, 4 pm, 5 pm, 6 pm * – Every day * – Every month * – Every day of the week\n• None Cron Job every weekday during working hours: This example checks the status of the database every weekday (i.e. excluding Sat and Sun) during the working hours 9 a.m – 6 p.m.\n• None 00 – 0th Minute (Top of the hour) 09-18 – 9 am, 10 am, 11 am, 12 am, 1 pm, 2 pm, 3 pm, 4 pm, 5 pm, 6 pm * – Every day * – Every month 1-5 -Mon, Tue, Wed, Thu and Fri (Every Weekday)\n\n7. To Schedule a Background Cron Job for Every 10 Minutes:\n• None Use the following, if you want to check the disk space every 10 minutes.\n• None It executes the specified command check-disk-space every 10 minutes throughout the year. But you may have a requirement of executing the command only during certain hours or vice versa.\n• None The above examples show how to do those things. Instead of specifying values in the 5 fields, we can specify them using a single keyword as mentioned below.\n• None There are special cases in which instead of the above 5 fields you can use @ followed by a keyword — such as reboot, midnight, yearly, or hourly.\n\n8. To Schedule a Job for the First Minute of Every Year Using @yearly:\n• None If you want a job to be executed on the first minute of every year, then you can use the @yearly cron keyword as shown below.\n• None This will execute the system annual maintenance using the annual-maintenance shell script at 00:00 on Jan 1st for every year.\n\n9. To Schedule a Cron Job Beginning of Every Month Using @monthly:\n• None It is similar to the @yearly as above. But executes the command monthly once using the @monthly cron keyword. This will execute the shell script tape-backup at 00:00 on the 1st of every month.\n\n10. To Schedule a Background Job Every Day Using @daily:\n• None Using the @daily cron keyword, this will do a daily log file cleanup using the cleanup-logs shell script at 00:00 every day.\n\n11. To Execute a Command after Every Reboot Using @reboot:\n• None Using the @reboot cron keyword, this will execute the specified command once after the machine gets booted every time.\n\nWhat are Some Features of Linux Crontab?\n\nThe following are the features of crontab:\n• Flexible Scheduling : The Crontab allows users to schedule tasks with a high degree of flexibility, specifying exact times, intervals, days of the week, and months for execution.\n• Automated Task Execution : It facilitates with automatic execution of commands or scripts without user intervention, making it ideal for repetitive tasks like backups, updates, and system maintenance.\n• User-specific Configuration : Through each user it can maintain their crontab file, allowing personalized scheduling of tasks tailored to individual needs and preferences.\n• Special Time Indicators , etc.) for commonly used schedules, simplifying the setup of recurring tasks.\n\nFrom the above extensive discussion, we can conclude that the ‘Crontab’ Command on Linux Distributions is one of the powerful tools that can be used to Automate Tasks on Linux. If you want to perform System Maintenance, Backups, and Updates then the Linux ‘Crontab’ Command should be used as we have discussed.\n\nWhat is cron in Linux?\n\nHow do I run a cron job every 5 minutes?\n\nHow to check if cron is running?\n\nWhat is a cron job example?\n\nHow do I start and stop a cron job in Linux?"
    },
    {
        "link": "https://redhat.com/en/blog/linux-cron-command",
        "document": "A skilled sysadmin knows when and how to programmatically schedule tasks to be executed at specific intervals, whether they're recurring or happen a set number of times. You can apply this skill in many scenarios, such as scheduling backups, collecting system logs periodically, or automating basic and repetitive tasks.\n\n[ Keep your most commonly used commands handy with the Linux commands cheat sheet. ]\n\nYou can schedule tasks in numerous ways, and in this article, I will focus on the utility. My colleague Ken previously wrote a great article about , so I recommend you check it out, as well as my previous article about the command, another way to schedule tasks in Linux.\n\nIn this article, I'll try to be as succinct, straightforward, and practical as possible, meaning I won't be able to explore all available options for .\n\nI'll cover a few basics before playing around with . First, also uses a daemon ( ) that reads different configuration files. There's a cron file for each user in the directory, and the file is system-wide. Every user manages their own scheduled jobs and configuration file.\n\nTo manipulate scheduled jobs, you can edit the file (for system-wide tasks) or create files inside the user's directory (for specific tasks) with the necessary parameters inside them. Below are the most common crontab parameters:\n• displays the current (jobs from the current user) on standard output.\n• removes the current (jobs from the current user).\n• edits the current (jobs from the current user) using the editor specified by the VISUAL or EDITOR environment variables. After you exit the editor, the modified is installed automatically.\n\nThe most important part of understanding how schedules work is knowing the syntax used in the file, as follows (taken from an empty default file):\n• Use x-y for a range: For example, place in the Days column for a job to run from Monday to Friday.\n• Use x,y for lists: For example, place in the Minutes column for a job to run at 5, 10, 11, 12, 13, and 17 minutes past the hour.\n• Use */x to indicate an interval of x: For example, place in the Minutes column to run a job every seven minutes.\n\n[ Want to test your sysadmin skills? Take a skills assessment today. ]\n\nStart by checking whether the current user has any scheduled jobs:\n\nTry an example\n\nSuppose you have a directory called , and you need it to be backed up incrementally close to the end of every day (11 pm) to the directory . And every Saturday, at noon, you need the to be fully backed up to the directory.\n\nThe following is the directory structure described above:\n\nNext, edit the file and add the necessary parameters to accomplish these tasks:\n\nAfter the scheduled job runs, this is the outcome (just a simulation):\n\nThis is a basic example so you can understand how works. I hope you can explore the utility more and find all the other possibilities it provides.\n\nKnowing how to schedule tasks and jobs in your systems is very important. Some system tasks are scheduled by default, so you must understand how they work. Also, you need to automate and schedule deferred and recurring jobs to run whenever necessary to accomplish programmable goals. The utility will help you with that, and it's a fundamental tool you need to have in your kit of utilities.\n\nI hope this and my related article on the utility aid you in understanding this topic and add to your general sysadmin knowledge."
    },
    {
        "link": "https://cloud.google.com/scheduler/docs/configuring/cron-job-schedules",
        "document": "Cron jobs are scheduled at recurring intervals, specified using a format based on unix-cron. You can define a schedule so that your job runs multiple times a day, or runs on specific days and months. (Although we no longer recommend its use, scheduling a job by creating a file is still supported for existing jobs.)\n\nCloud Scheduler also supports scheduling jobs using a more human-readable format. For more information, in this document, see Alternative job format.\n\nYou can use either the Google Cloud console, the Google Cloud CLI, or the Cloud Scheduler REST API to set your schedule.\n\nA schedule is defined using the unix-cron string format ( ) which is a set of five fields in a line, indicating when the job should be executed.\n\nThe time fields have the following format and possible values, and must follow this order:\n• None Minute: indicates how far past the top of the hour your job runs, in minutes. For example, if the minute is set to , then the job runs at the top of the hour (because that is 0 minutes after the hour). So if the hour is 8:00 AM, the job runs at 8:00 AM.\n• None Hour: indicates how far past midnight your job runs, in hours (rounded down to the nearest hour, because remaining minutes are indicated in the field). Midnight is and noon is . For example, if the hour is set to , then the job runs in the midnight hour (because that is 0 hours after midnight).\n• None Day of the month: indicates the calendar date of the month. For example, for the first day of the month. Cloud Scheduler does not support to mean the last day of the month.\n• None Month: indicates the month. Specify the month number or the first three letters of the month name in uppercase. For example, for January, or equivalently, .\n• None Day of the week: indicates the day of the week. For example, Monday is and Tuesday is . Either or can indicate Sunday. Specify the day of the week either by number or by the first three letters of the weekday name in uppercase (for example for Sunday).\n• This field is evaluated as an inclusive with the field, unless one of these fields is marked as unrestricted by the asterisk ( ). For example, if the day of the month is set to and the day of the week is set to , the job runs on the first day of the month and on every Saturday of the month, even if the first day of the month is not a Saturday. If the day of the week is unrestricted (set to ), the job runs only the first day of the month.\n\nTo match all values for a field, use the asterisk: . When a field is set to the asterisk, the field matches all valid values for that field whenever the other field conditions are satisfied. Setting a field to the asterisk is sometimes referred to as leaving the field unrestricted, because it is not restricted to a specific value.\n\nHere are two examples in which the minute field is left unrestricted:\n• : the job runs every minute of the midnight hour on January 1st and Mondays.\n• : the job runs every minute (of every hour, of every day of the month, of every month, every day of the week, because each of these fields is unrestricted too).\n\nThe asterisk is equivalent to a special case of a range, where the range starts at the first valid value for the field, and ends at the last valid value for the field (for example, for the minute field).\n\nTo match a range of values, specify your start and stop values, separated by a hyphen ( ). Don't include spaces in the range. Ranges are inclusive. The first number must be less than the second number. If you are using abbreviated names for the month or weekday (for example, instead of for the first month of the year), the first value must come earlier in the month or week than the second value.\n\nThe following equivalent examples run at midnight on Mondays, Tuesdays, Wednesdays, Thursdays, and Fridays (for all months):\n\nLists can contain any valid value for the field, including ranges. Specify your values, separated by a comma ( ). Don't include spaces in the list.\n• : the job runs at midnight and noon.\n• : the job runs in each of the first five minutes of every half hour (at the top of the hour and at half past the hour).\n\nYou can skip values in a range by specifying a rate at which to step through the range. This is sometimes referred to as using a step function (or step value or rate expression). To do so, specify the range, followed by the forward slash ( ) and the rate at which you want to skip through the range.\n\nYou can use the asterisk ( ) to indicate the range of all values for the field. When you use the asterisk, the first value in the range is: 0 for the minute, hour, and day of the week (Sunday) fields, and 1 for day of the month and the month fields.\n\nThe step value cannot be larger than the largest possible value for the field. The default step is 1, so the step function is the same as not using a step function at all.\n\nExample ranges that use step functions:\n• None : this is a valid step function for any field. For the minute field, it matches 0, 2, 4, ... , 58. For the hour, it matches 0, 2, 4, ... , 22. For the day of the month, it matches 1, 3, 5, ... , 31 (for a month with 31 days). For the month, it matches 1, 3, 5, ... , 11. For the day of the week, it matches 0, 2, 4, 6.\n• None : this is a valid step function for the minute and hour fields. It matches 0, 2, 4, ... , 12.\n• None : the job runs every two minutes.\n• None : the job runs every two hours, on the hour. The first run is at midnight. The last run is at noon.\n\nThe following table shows some sample cron job schedules and their description:\n\nYou can select the time zone for evaluating the schedule either in the Google Cloud console (on the Create a job page, select a Timezone from the list), or through the flag when you create the job.\n\nThe value of this field must be the time zone abbreviation used in the tz database. The default time zone is .\n\nFor some time zones, daylight saving time can cause jobs to run or not run unexpectedly. This is because Cloud Scheduler runs on wall clock time. In instances where a time can occur twice (such as the case when clocks go backwards) and your job is scheduled at this time, your scheduled job might observe execution anomalies.\n\nIf your job requires a very specific cadence, you might want to consider choosing a time zone that does not observe daylight saving time. Specifically, UTC is recommended for Cloud Scheduler to avoid the problem completely.\n\nYou can use a more human-readable time specification format known as groc that provides an alternative to cron expressions. For example, some recurring events might be awkward to specify using cron like the \"third Tuesday of every month.\" In such cases, you can instead use constructs like the following examples:\n\nFor more information about the syntax, see Defining the cron job schedule.\n\nNote that when specifying a job schedule using groc, you must use either the gcloud CLI or make a direct request to the Cloud Scheduler API."
    },
    {
        "link": "https://docs.gitlab.com/topics/cron",
        "document": "Cron syntax is used to schedule when jobs should run.\n\nYou may need to use a cron syntax string to create a pipeline schedule, or to prevent unintentional releases by setting a deploy freeze.\n\nCron scheduling uses a series of five numbers, separated by spaces:\n\nIn cron syntax, the asterisk ( ) means ’every,’ so the following cron strings are valid:\n• Run once an hour at the beginning of the hour:\n• Run once a week at midnight on Sunday morning:\n• Run once a month at midnight of the first day of the month:\n• Run once a month on the 22nd:\n• Run once a month on the 2nd Monday:\n• Run once a year at midnight of 1 January:\n• Run every other Sunday at 0900 hours:\n• Run twice a month at 3 AM, on the 1st and 15th of the month:\n• This syntax is from the fugit modulo extension\n\nFor complete cron documentation, refer to the crontab(5) — Linux manual page. This documentation is accessible offline by entering in a Linux or MacOS terminal.\n\nMore examples of how to write a cron schedule can be found at crontab.guru.\n\nGitLab uses to parse cron syntax strings on the server and cron-validator to validate cron syntax in the browser. GitLab uses to convert cron to human-readable strings in the browser."
    },
    {
        "link": "https://cronitor.io/guides/cron-jobs",
        "document": "If you’ve spent any time working on a operating system, chances are you’ve heard the term cron job, but for many developers cron jobs remain a source of confusion and painful mistakes.\n\nIn this article, you will learn more about the basics of cron, exploring the syntax for creating a cron job, as well as how to manage your cron jobs using the command. We’ll also review common mistakes that developers make when configuring cron jobs.\n\nA Cron Job is a Linux program that allows users to schedule the execution of a piece of software, often in the form of a shell script or a compiled executable. Cron is typically used when you have a task that needs to be run on a fixed schedule, and/or to automate repetitive tasks like downloading files or sending emails.\n\nAt its most basic level, a cron job is an entry written into a table called the cron table, otherwise known as the crontab for short. This entry contains a schedule and a command to be executed. The cron daemon (crond) looks for entries in the crontab to determine what jobs it should run, and when it should run them according to the specified schedule.\n\nNote: The examples below are run on the Ubuntu operating system. Different Linux OSs might use different package managers, but all other commands will work the same.\n\nMost standard installations of cron consists of two commands:\n• or , which is the daemon that runs the scheduling utility\n• , which is the command that allows you to edit the cron entries for your jobs\n\nWhen you talk about a daemon from a Linux perspective, it’s a program that is running in the background and is noninteractive. This means that the program does not accept any user input and doesn’t display output to the user. The word daemon is historically used in a Unix/Linux context and is not a universal term across different operating systems.\n\nThe daemon will be running under the root user. You can run the following command to see if cron is running:\n\nYou should see an output like this:\n\nIf you received no output from the command at all, either cron isn’t running or is not installed.\n\nOn Ubuntu you can quickly install cron by running the following command:\n\nIf you’re using something other than Ubuntu, you’ll need to run the equivalent command for your package manager.\n\nOnce cron is installed, remember to make sure it is enabled and running using the command provided by systemd:\n\nCron should now be running, and you should be able to see it if you again run the command shown above.\n\nA basic crontab entry looks something like this, with the cron job schedule first, followed by the command to run:\n\nAn asterisk (*) matches all values, so if you take a look at the example above, it specifies that /home/user/bin/somecommand.sh should be run at minutes 0-59 and hours 0-23 on days of the month 1-31 for months 1-12 on days of week 0-6 — or in other words \"every minute\".\n\nCron entries can also be configured to run at more complex times. If you want to run four times a day between Monday and Friday, you can use the step operator ( / ) and the range operator ( - ).\n\nThat entry will run your command every six hours starting at midnight — 12:00 a.m., 6:00 a.m., 12:00 p.m., and 6:00 p.m. — but only from Monday to Friday.\n\nIf you want to delve deeper into other complex scheduling examples, crontab.guru is a handy website for testing out the scheduling syntax, and translating them into plain english.\n\nOnce cron is running, it checks for crontab entries in the following files every minute:\n• /var/spool/cron/crontabs/$USER (where is the currently logged-in user)\n\nThe first file, /etc/crontab, is a system-generated file containing shortcut commands designed to check for cron table entries in the following directories: , , , and . There are a few other locations where cron jobs can be stored; to learn more about those, you can check out this post. For the purpose of this article, you will concentrate on creating new crontab entries for your user.\n\nYou can achieve this by using the command. From the terminal, enter edit mode for your user’s crontab using the following command:\n\nThe first time you run this command, the OS should ask you what editor you would like to use with a little menu like this:\n\nSelect the editor of your choice. If you’ve never used an editor on a Linux system before, go ahead and stick with the suggestion of using , as it’s an easy-to-use editor for the most part.\n\nOnce you’ve made your selection, the editor you’ve chosen will come up with the default crontab for your user, like this:\n\nCurrently, the file is empty, but you are now free to add a cron job entry to the bottom of the file.\n\nUp until now, you may have the impression that cron seems like quite a powerful tool and nothing can go wrong while using it. Right? Wrong.\n\nAny experienced system administrator who has spent any amount of time setting up cron jobs will tell you that cron jobs will and do fail all the time, for a myriad of reasons.\n\nHere’s an overview of some of the problems you could run into when setting up your cron jobs.\n\nIt’s not difficult to make a mistake with the cron syntax, especially if you haven’t worked with it before. Maybe you’ve swapped around the minutes and the hours part of the syntax. Again, you can always use the crontab.guru website to verify that your syntax is correct.\n\nAnother frequent occurrence is that your shell script works perfectly from the command line when you run it but it doesn’t seem to run from the cron entry. If your script invokes any environment variables, this is probably the cause. Cron does not load variables from files like .bashrc or bash_profile, so even if you’ve specified a common variable like , that variable isn’t defined when the cron daemon runs your job entry. You would either need to hard-code your variable values or manually load the values from files like .bashrc yourself.\n\nBy default, when you create a shell script, it does not have execute permissions:\n\nThe file is missing execute permissions. Give the file executable rights by running the following command:\n\nNow the output looks like this:\n\nThis should fix the missing execute permission that cron needs to be able to run the script.\n\nYour script can be incredibly resilient, yet when system resources are depleted, no amount of resilience is going to help your cron job run successfully. Unfortunately, the only way to prevent this is to stay on top of monitoring your servers for metrics like available disk space, available memory, and sufficient open files.\n\nYou might have a cron entry that runs quite frequently and successfully within seconds. For argument’s sake, maybe you’re running that script every minute. It’s highly possible that an outside variable can interfere with the job completing on time, causing the job to take more than a minute to complete. The cron daemon will happily spawn more copies of your script until you have a small army of them all running at the same time, thus depleting system resources. You’ll need to build in checks like lock files to make sure only a single copy of your script is running at any given time.\n\nFinally, external variables are beyond your control. If, for example, you have a script that pulls information from a REST API endpoint and something about the endpoint that you’re querying changes without notifying you, your cron job could be failing without your knowledge.\n\nAfter you’ve read about the multiple ways your cron jobs can fail, you’re probably wondering about the best way to keep an eye on them going forward.\n\nLet’s take a look at a few helpful options you have to best monitor your cron jobs.\n\nCron does have some system-level logging automatically in place.\n\nOn Debian and Ubuntu systems, in , the cron daemon reports when it gets started or restarted. On Redhat-based systems, the cron daemon writes log entries to with the same kind of information.\n\nThe daemon also reports when it ran your jobs with log entries like this:\n\nUnfortunately, cron does not report on the successes or failures of your scripts. It can’t even tell you if a job didn’t run in the first place.\n\nYou could write all of the measurement logic into the script that is running from the cron entry directly. That would entail logging events to your own log files or capturing the exit status of your script somewhere separately to be monitored by another process. You could also write any error messages that go to steddr to another error-logging file. This does add extra complexity to your script, though, because you would need to account for as many failure cases as possible.\n\nThankfully, there is an easier option. Yes, you could go through all the trouble of making sure each of your scripts can notify you when something goes wrong, or you could capture all script output to special log files.\n\nHowever, you could also take a look at Cronitor. Cronitor is a monitoring tool for your cron jobs, worker processes, and other services.\n\nYou can use their CronitorCLI software to automatically register all your cron jobs and make them visible and configurable from a single monitoring location on their website.\n\nHere’s how you can get started.\n\nBefore you install the CronitorCLI software, you need to find your API key. This key is what uniquely identifies your account and tells CronitorCLI which dashboard to send results and metrics to.\n\nNavigate to the settings page, and copy the API key that has the option CONFIGURE MONITORS set to Yes.\n\nNow you’re ready to install the CronitorCLI on your laptop or server.\n\nIt’s recommended that you install CronitorCLI into the system-wide binary directory in . This will allow you to run the commands without specifying the full path. You can install the binary in another location, but you would need to specify the full path every time you run the command.\n\nThe default configuration file for CronitorCLI is stored in , so you will need access to configure your instance of CronitorCLI.\n\nCopy the commands below to install CronitorCLI to your device:\n\nIf the installation instructions above do not work, it’s possible that the installation procedure has changed since this article was written. If that’s the case, consult Cronitor’s website for CronitorCLI installation instructions.\n\nThe commands above accomplish the following:\n• First, the command downloads the latest binary (compressed using gzip) from Cronitor’s website.\n• The command (with privileges) extracts the binary from the gzip file and copies it into .\n• The option tells the command which dashboard it should send metrics to.\n\nBe sure to replace with the key you copied from your Cronitor API keys page earlier.\n\nYou should see an output that looks something like this:\n\nYour output will of course be distinct from the example above because your API key will be different, and probably so will your location and hostname.\n\nThe easiest way to tell which cron jobs to monitor is to run the following command:\n\nThis command will run through all the available crontab entries and interactively ask you whether you want to add them to your Cronitor dashboard for monitoring.\n\nWhen it finds an entry, it will ask you to supply a job name for easy identification of the cron job on the Cronitor dashboard. If you don’t want to add a specific entry, just press Ctrl+C on that specific entry, and will continue scanning the rest of the available crontab entries for possible inclusion on your dashboard.\n\nIn the example below, there is a cron entry that pulls random facts about cats from an API and outputs it to a file for daily perusal. The output from should look like this. (Note that when the command discovers your cron job, it will ask you to name it so that it can be identified on your Cronitor dashboard. You can name it something short like “Cat Facts” for easy identification.)\n\nAlso note that in the example above, was not run with the command. If you only want to monitor your user’s crontab, you don’t need to run it with . If you want to monitor system-level crontab entries, you will need to run with .\n\nBack on the cronitor.io website, you should be greeted by the following message:\n\nIf you make any changes to your crontab entry—e.g., changing the schedule—you can just run again to update the statistics on cronitor.io.\n\nOnce a job has been successfully (or unsuccessfully) executed, you can see the status of your cron job on Cronitor:\n\nIf you click the Edit button for the specific job, you can set a few variables and thresholds:\n\nIn the example above, the max duration has been set to thirty seconds. This is a simple script that pulls some information from a website, so if it’s running for longer than thirty seconds, you’d want to know about it.\n\nYou can also edit the “Alert Settings” for your cron job:\n\nThis isn’t a mission-critical job (random cat facts, remember?), so as pictured, you only care if you haven’t received a new cat fact after five missed executions.\n\nIf, however, the script has failed after two executions, it means something is wrong—possibly because something beyond your control has changed. Maybe the operator of the website now expects you to pay a subscription fee to continue receiving your beloved cat facts, or the operator closed down their website completely because they now prefer dogs.\n\nIn any case, Cronitor can be used to monitor your cron jobs for any problem that might occur and give you insight into those problems so that you can investigate and fix issues wherever necessary.\n\nThere are a few other ways that your jobs could fail, or cause confusion. We've put together answers to some of the most common questions below."
    },
    {
        "link": "https://calcomsoftware.com/task-scheduler-windows-hardening-guide",
        "document": "Windows Task Scheduler, previously known as Scheduled Tasks, is a powerful job scheduler built into Microsoft Windows. Its primary function is to launch computer programs or scripts at specific times or intervals predetermined by the user. Introduced as System Agent in Microsoft Plus! for Windows 95, Task Scheduler Windows has evolved into a core component of the Windows operating system. In fact, it serves as the foundation for the Windows PowerShell scheduled jobs feature, which was introduced in PowerShell v3.\n\nComparable to the cron utility in Unix-like operating systems, Task Scheduler offers administrators a legitimate tool for automating various processes. Tasks can be scheduled to run at specific times, triggered when a certain event occurs, or executed repeatedly or once. With its user-friendly graphical user interface (GUI), the Windows Task Scheduler allows users to run scripts, launch applications, and perform various tasks both locally and remotely from another system.\n\nScheduled tasks are not limited to a single operating system, making them versatile and widely applicable across different environments. However, it’s essential to be aware of the location of scheduled tasks in the Windows Registry. The registry key for scheduled tasks is located in the SOFTWARE registry hive. This knowledge becomes particularly relevant when discussing potential abuse by attackers seeking to evade detection.\n\nTask Scheduler is available across multiple Windows versions, ensuring broad compatibility and accessibility for users.\n\nTask scheduler Windows typically include these versions and have Windows specifications such as task scheduler Windows 10:\n\nClient requires Windows Vista or later. Server requires Windows Server 2008 or later.\n\nWindows scheduled task techniques vary across several tactics of the MITRE ATT&CK framework including execution, persistence, and privilege escalation. Because of this, a defender’s approach to defending against attacks involving LotL tools must be multi-faceted. There are several ways an attacker can abuse scheduled tasks. Many of them are legitimate use cases such as:\n• Setting up scheduled tasks under the SYSTEM account to achieve persistence and enable lateral movement.\n• Bypassing User Access Control (UAC) through Task Scheduler by selecting “Run with highest privileges.”\n• Evading detection by disguising the process as trusted or signed.\n• Evading detection by deleting the Security Descriptor (SD) registry value using SYSTEM privileges.\n\nAttackers can also leverage various parameters with the “schtasks” command, such as change, delete, end, query, run, or create. These commands can be manipulated by attackers, disrupting the normal process of executing the tasks and potentially leading to system compromise. These seemingly harmless parameters grant attackers significant power to inflict damage on a system or network.\n\nFrom privilege escalation to the deployment of persistent malware, understanding task schedular Windows vulnerabilities is crucial for increasing the security of Windows-based systems. This includes vulnerabilities in the task scheduler library itself, which can be exploited if not properly secured.\n• Windows Task Scheduler Elevation of Privilege Vulnerability (CVE-2023-21541) The successful exploitation of this vulnerability could provide an attacker with SYSTEM privileges.\n• Silk Typhoon (previously HAFNIUM ) continues to be tracked with new activity being uncovered. The Zoho ManageEngine Rest API authentication bypass vulnerability was detected through collaboration between the Microsoft Detection and Response Team (DART) and the Microsoft Threat Intelligence Center (MSTIC) in a multi-stage attack scenario.\n\nAdversaries exploit the Windows Task Scheduler to perform task scheduling for executing malicious code, both initially and in a recurring manner. Accessing the Task Scheduler can be achieved through various means in Windows. The schtasks utility allows direct command-line execution, while the GUI interface within the Administrator Tools section of the Control Panel provides another access point. Additionally, adversaries have been known to use a .NET wrapper for the Windows Task Scheduler or leverage the Windows netapi32 library to create scheduled tasks.\n\nThe deprecated at utility could also be abused by adversaries (ex: At), though at.exe can not access tasks created with schtasks or the Control Panel.\n\nTo establish persistence, adversaries may utilize Windows Task Scheduler to run programs during system startup or at scheduled intervals. Furthermore, they may abuse it for remote execution as part of lateral movement or to execute processes under the context of a specific account, such as SYSTEM. Similar to System Binary Proxy Execution, adversaries exploit the Windows Task Scheduler to potentially mask one-time execution under signed or trusted system processes.\n\nTo evade detection, adversaries resort to creating “hidden” scheduled tasks that are not visible to defender tools and manual queries used for enumerating tasks. One method involves deleting the associated Security Descriptor (SD) registry value, which requires SYSTEM permissions for deletion, thus hiding the task from schtasks /query and the Task Scheduler. Alternatively, adversaries may employ alternate techniques to conceal tasks, such as modifying metadata like the Index value within associated registry keys.\n\nHardening the Windows Task Scheduler offers significant business benefits. By automating tasks and bolstering security, companies can drive efficiency, save time, and reduce costs associated with potential security breaches. This streamlined approach ensures consistent system performance, compliance with regulations, and a competitive edge in the market. It also allows strategic resource allocation, scalability, and long-term savings while enhancing employee satisfaction by minimizing manual tasks and fostering innovation. Find out more about Task Scheduler Windows Hardening here.\n\nYou can specify the security context for a task by specifying credentials in the ITaskFolder::RegisterTask or ITaskFolder::RegisterTaskDefinition (TaskFolder.RegisterTask or\n\nTaskFolder.RegisterTaskDefinition for scripting) methods or by assigning a principal to the Principal Property of ITaskDefinition (TaskDefinition.Principal for scripting). If a principal is created for a task definition, and then the task definition is registered using the RegisterTaskDefinition method with different credentials specified in the method parameters, then the credentials specified in the RegisterTaskDefinition method will overwrite the credentials in the principal. If a principal is created for a task definition using XML, and then the XML for the task is registered using the RegisterTask method with different credentials specified in the method parameters, then the credentials specified in the RegisterTask method will overwrite the credentials in the principal.\n\nYou specify a user account or group when registering a task or specifying the principle for a task. The security context of the user account or group is used for the security context of the task. In these methods and properties, you also define the logon type. The logon type is defined by one of the constants in the TASK_LOGON_TYPE enumeration.\n\nTasks registered with the TASK_LOGON_PASSWORD or TASK_LOGON_S4U flag will only launch if the specified user has the Logon as Batch privilege enabled. Administrators and Backup Operators group users have this privilege enabled by default.\n\nIt is important to ensure that as part of the credential defnition and configuring the operating system “Log os as a batch job” is set to ‘Administrators’. Task Scheduler is often used for administrative purposes. Therefore, its use should be restricted in high-security environments to prevent the misuse of system resources or to prevent attackers from launching malicious code after gaining user-level access to a system. Note that if the enterprise is using optional components (e.g., ASP.NET, IIS7), it may be necessary to assign this user right to additional accounts that are required by those components. If they are not assigned these rights, the components may not be able to run, which can impact functionality.\n\nUser Account Control (UAC) lets users exercise general functionality such as running programs and saving and modifying data without exposing administrative privileges. This mechanism plays a crucial role in the local security architecture, particularly in regulating task privileges and execution rights. By default, a task runs with low level privileges when UAC is turned on. Tasks can specify that they will run with elevated privileges or low privileges by setting a privilege level from the TASK_RUNLEVEL_TYPE enumeration for the RunLevel property of IPrincipal (Principal.RunLevel for scripting). The value of the RunLevel property determines the privilege level at which a task’s actions will be run. If a task’s actions must have elevated privileges to run, then you must set the RunLevel property to TASK_RUNLEVEL_HIGHEST. If a task is registered using the Administrators group for the security context of the task, then you must also set the RunLevel property to TASK_RUNLEVEL_HIGHEST if you want to run the task. If a task is registered using the Builtin\\Administrator account or the Local System or Local Service accounts, then the RunLevel property will be ignored. The property value will also be ignored if User Account Control (UAC) is turned off. The value of the RunLevel property doesn’t affect the permissions needed to run or delete a task.\n\nThe DACL file of the task can be changed, in which case the DACL defines which users have file write, read, execute, and delete permission. To set permissions for a task file, use the IRegisteredTask.SetSecurityDescriptor method or set the security descriptor when you register the task using the RegisterTask or RegisterTaskDefinition methods.\n\nA user must have WriteDAC permission in addition to the read/write permissions to update a task if the task update requires a change to the DACL for the task.\n\nKeep in mind that by default, a user who creates a task can read, update, delete, and run the task. Members of the Administrators group or the SYSTEM account can read, update, delete, and run any tasks. Members of the Users group, the LocalService account, and the NetworkService account can only read, update, delete, and run the tasks that they have created.\n\nReduce the Ability to Raise the Priority of a Scheduled Task\n\nRaising the priority of a task to “realtime” can cause a DOS attack against the system/application causing operational damage. Therfore it is highly recommended to take the following steps and reduce the ability to raise the priority of scheduled tasks.\n\nDescribes the best practices, location, values, policy management, and security considerations for the Increase scheduling priority security policy setting.\n\nVerify that only Administrators and Window Manager\\Window Manager Group have the Increase scheduling priority user right assigned to them.\n\nWhen a scheduled task is created, it is assigned a priority. This priority can be modified, authorized or unauthorized, to change it to a higher or lower priority. If a user, who is given this permission, increases the priority level of a process (e.g., to Real-Time), this would leave little processing time for all other processes and could lead to a Denial of Service (DoS) attack. To reduce the chance of an attacker modifying the priority of a scheduled task to a higher level, a Group Policy setting can be configured, under “Computer Configuration\\Policies\\Windows Settings\\Security Settings\\Local Policies\\User Rights Assignment\\Increase scheduling priority,” to allow only administrators to change this priority level\n\nTo mitigate risks associated with “at.exe”, it is recommended to implement the following-\n• Control User Permissions: Limiting access to “at.exe” involves managing user permissions. By default, regular users do not have permissions to access or use “at.exe.” Administrators, on the other hand, typically have the necessary permissions to utilize “at.exe.” It is crucial to ensure that only trusted individuals with appropriate privileges have access to this utility.\n\nGroup Policy Settings: To restrict access to “at.exe,” administrators can modify Group Policy settings. Specifically, the Group Policy setting “Computer Configuration\\Policies\\Windows Settings\\Security Settings\\Local Policies\\User Rights Assignment\\Access this computer from the network” can be adjusted to limit access to “at.exe” only to authorized users or groups.\n\nWhen it comes to the Windows OS, events are generated and stored in event logs for storage and review, including those associated with scheduled tasks. The Windows Task Scheduler Operational Event Log (“%SystemRoot\\Windows\\System32\\winevt\\Logs\\Microsoft-WindowsTaskScheduler%4Operational.evtx”) stores these events, as depicted in Figure 8.\n\nAs mentioned earlier, all activity related to scheduled tasks is logged in either the Windows Task Scheduler Operational Event Log or the Windows Security Event Log. Once the GPO setting for auditing object access events is activated, the system begins logging events. Here are some Event IDs that are useful to monitor during or before an incident:\n\nIt’s important to note that Windows does not enable auditing for these events by default. The mentioned GPO must be enabled to ensure event logging. Additionally, enabling this auditing feature may result in a large number of events being generated. Enterprises should ensure sufficient log storage capacity and establish retention policies. Storage requirements and retention policies will vary for each enterprise. Furthermore, it’s worth considering that scheduled tasks can also be created using PowerShell or Windows Management Instrumentation (WMI), which may require additional logging. CIS Controls provides separate documentation for protecting against attacks utilizing PowerShell and/or WMI."
    },
    {
        "link": "https://windowscentral.com/how-create-automated-task-using-task-scheduler-windows-10",
        "document": "On Windows 10, the Task Scheduler lets you create and run tasks automatically, and in this guide, I'll outline the steps to complete the process. Typically, the operating system and certain apps use the scheduler to automate maintenance tasks (such as disk defragmentation, disk cleanup, and updates). However, you can use it to automate your own tasks. For example, you can launch programs, run commands, and execute scripts at a specific time or trigger tasks when a specific event occurs.\n\nTask Scheduler monitors the system's time and events to execute the task as soon as the condition is met.\n\nWhen trying to use the scheduler app to run a task at a specific time or when an event occurs, you can create a task in at least two ways using the basic and advanced settings.\n\nIn this how-to guide, I will walk you through the steps to get started with the Task Scheduler experience to automate tasks on your computer.\n\nHow to create a basic task on Task Scheduler\n\nTo create a task with basic settings on Windows 10, use these steps:\n• Search for Task Scheduler, and click the top result to open the app.\n• Right-click the \"Task Scheduler Library\" branch and select the New Folder option.\n• Type a name for the folder – for example, MyTasks. (This step isn't required, but it's recommended to keep your tasks separate from the system and apps tasks.)\n• Expand the \"Task Scheduler Library\" branch and select the MyTasks folder.\n• In the \"Name\" setting, type a descriptive name for the task – for example, Notepad Launcher.\n• (Optional) In the \"Description\" setting, create a description for the task.\n• Quick note: Task Scheduler includes many triggers, including on a specific date, during startup, or when you or a particular user signs in. You'll have to configure additional parameters depending on what you're trying to accomplish. In this case, we'll select the option to run a task every month.\n• Using the \"Start\" settings, specify when the task should run and the time (very important).\n• Use the \"Monthly\" drop-down menu to choose the months of the year you want to run the task.\n• Use the \"Days\" or \"On\" drop-down menu to specify the days that the task will run.\n• Quick tip: Using the \"On\" setting may be your best option if you plan to run a task during a specific day of the week.\n• Select the Start a program option to launch an app, run a command, or execute a script file.\n• Quick note: The \"Send an e-mail\" and \"Display a message\" options have been deprecated, meaning they may or may not work because Microsoft is no longer maintaining them.\n• In the \"Program/script\" setting, specify the path for the app.\n• Quick tip: If you don't know the path of the app, click the \"Browse\" button to find it.\n• (Optional) In the \"Add arguments\" setting, you can specify arguments to run the task with special instructions.\n\nOnce you complete the steps, Task Scheduler will save the task and run automatically on the specified schedule and event triggers.\n\nHow to create an advanced task on Task Scheduler\n\nTo create a task using advanced settings on Windows 10, use these steps:\n• Search for Task Scheduler, and click the top result to open the app.\n• Right-click the \"Task Scheduler Library\" branch and select the New Folder option.\n• Type a name for the folder – for example, MyTasks.\n• Expand the \"Task Scheduler Library\" branch, and select the MyTasks folder.\n• In the \"Name\" setting, type a descriptive name for the task – for example, PowerShell First Script.\n• (Optional) In the \"Description\" setting, create a description for the task.\n• In the \"Security options\" section, configure which administrator account will run the task.\n• Quick tip: The default user should be fine if you use an account with administrative privileges. If you want to run a Command Prompt or PowerShell command, select the \"Run whether user is logged on or not\" option to prevent the command window from showing up when the task runs automatically, as it's likely that using the \"Hidden\" option won't work.\n• (Optional) Check the \"Run with highest privileges\" option if the task requires elevated privileges.\n• The \"Configure for\" settings should be left alone unless a different compatibility option is required.\n• Use the \"Begin the task\" drop-down menu to select one of the many triggers, including \"On a schedule,\" \"At startup,\" \"On workstation unlock,\" and many others. (I'll choose the \"On a schedule\" option for this guide.)\n• Using the \"Start\" settings, specify when the task should start running and the time (important).\n• Select the Monthly option from the left side.\n• Use the \"Months\" drop-down menu to select the months the task will run.\n• Use the \"Days\" or \"On\" drop-down menu to specify the days that the task will run.\n• Use the \"Action\" drop-down menu and select the \"Start a program\" option.\n• Under the \"Settings\" section, in the \"Program/script\" setting, specify the path for the application – for example, powershell.exe.\n• Quick tip: If you don't know the path of the app, click the Browse button to find it. Also, if it's a known application like PowerShell or Command Prompt, you only need to specify the file name.\n• (Optional) In the \"Add arguments\" setting, specify arguments to run the task with special instructions – for example -NoExit -ExecutionPolicy Bypass C:\\PATH\\TO\\SCRIPT\\first_script.ps1\n\nThe \"powershell.exe\" command and the above argument will run the script named \"first_script.ps1.\" The argument \"-ExecutionPolicy Bypass\" ensures that the script runs successfully, and the \"-NoExit\" argument will prevent the window from closing after running the script. You can learn more about creating a PowerShell script in this guide.\n• (Optional) The \"Settings\" app includes additional options that will directly affect the behavior of the task. It's not a requirement to change these settings, but it's a good idea to check the following options:\n• Run the task as soon as possible after a scheduled start is missed.\n• If the task fails, restart every. (Use this option with the default selections.)\n\nAfter you complete the steps, authenticate with your account credentials, and then the task will run automatically, according to the configurations.\n\nHow to run, edit, and delete a task on Task Scheduler\n\nOnce you've created the task, you can use these steps to view, edit, delete, or run:\n• Search for Task Scheduler, click the top result to open the experience.\n• Select the folder with your tasks.\n• To run a task on demand, right-click it and select the Run option.\n• To edit a task, right-click it and select the Properties options.\n• To delete a task, right-click it and select the Delete option.\n\nYou can also view the task information on the page, such as the triggers, when the task runs last, and when it'll run the next time.\n\nAlternatively, you can always select the task and use the \"Actions\" pane on the right to perform actions, such as run, end quickly, disable, and edit the job.\n\nFor more helpful articles, coverage, and answers to common questions about Windows 10 and Windows 11, visit the following resources:\n• Windows 11 on Windows Central — All you need to know\n• Windows 10 on Windows Central — All you need to know"
    },
    {
        "link": "https://usemotion.com/blog/task-scheduler",
        "document": "Picture this: you’re a manager with a massive to-do list, and it seems like you’ll never get it done. You’ve written out everything you need to accomplish, left sticky notes where you can see them, and even set alarms on your phone.\n\nAnd yet, you still manage to miss deadlines and have a hard time prioritizing your most important tasks.\n\nFortunately, a task scheduler can help. It’s a project management tool that’s perfect for lovers of to-do lists who have a lot of plates spinning and need help balancing them all.\n\nThis article will walk you through the ins and outs of using a task scheduler, including best practices for success.\n\nA task scheduler — not to be confused with the Windows software of the same name — is a project management tool that can help you stay organized. Most task schedulers will let you organize tasks according to their priority so that nothing slips through the cracks.\n\nThink of a task scheduler like a digital to-do list. The key difference is that, with software, you can easily share these scheduled tasks with a team, create alerts for when items are complete, and even automatically add actionable items to your calendar.\n\nTask scheduling is part of a wider agile project management methodology called scrum. Scrum has been shown to provide structure without micromanagement, and it also serves as a best practice for collaboration. In fact, it’s one of the best ways to handle complex projects as a team.\n\nA system that brings together task scheduling tools is also commonly called a task manager. Whether you want to use one to keep on top of your own tasks as a manager, or to manage your team’s deliverables, a task manager can help you with the following:\n• Understanding projects from the highest possible level\n\nLet’s take a look at these powerful functions in detail.\n\nThe biggest advantage of using a task manager to schedule tasks is that you can assign them according to their importance. This will help you ensure that the highest-priority tasks are taken care of first and that nothing slips through the cracks.\n\nPrioritizing scheduled tasks can be really helpful if you or someone on your team tends to jump around from assignment to assignment without a lot of direction. It can help provide clear structure based on urgency and due dates.\n\nUnderstanding projects from the highest possible level\n\nVisualizing what you need to accomplish from a bird’s-eye view makes understanding everything that you have on your plate easier. Additionally, seeing all of the steps that go into completing a specific project will help you remember them more easily.\n\nA task scheduler can help break down and simplify the execution of complex tasks, making them digestible and less overwhelming.\n\nMost task management software enables you to determine whether your workflow is, well, working. Did you complete everything on time? What about your team? If the answer is no, then it might be time to rethink how you assign tasks and deadlines.\n\nStudy your task scheduler after you’ve used it for 90 days, and then provide your team with feedback so that everyone can improve.\n\nWhy you should consider using a task scheduler\n\nNow that you know a few of the things that a task scheduler can assist with, you might already be thinking about using one. Let’s break down a little bit further how a task manager can help you become more organized — which happens to be the main reason that folks love them.\n\n‎If you have too much to do and find it difficult to stay focused and hit deadlines, a task scheduler is a highly effective productivity tool.\n\nAdditionally, this software can help you collaborate with other people because a task scheduler used in a team helps all members of the group maintain visibility on who’s doing what and where that task exists in the pipeline.\n\nAccording to a numbers compiled by GoRemotely:\n• 83% of employees already rely on technology for for collaboration\n• What’s more, communication facilitated by collaboration tools like a task scheduler can help retain top talent by 450%\n\nWith a task scheduler, you can guarantee that your team will have the tech that they need.\n\nWhat’s more, in a recent study of businesses that don’t prioritize project management, 67% of their projects failed due to poor project management. The same survey reported that 11.4% of investments were wasted because they weren’t managed properly.\n\nThese numbers are nothing to shake your head at. Consider using a task scheduler if you want to support your team in the best possible way. Based on the stats above, you just may be able to save a bit on your bottom line, too.\n\nHow to use a task scheduler: a full, step-by-step guide\n\nNow that we’ve sung the praises of a task scheduler, it’s time to learn how to use one yourself. Once you get the hang of them, they are very simple to use — especially if you opt to use one with an attractive and intuitive interface.\n\nPretty soon, you’ll be well on your way to creating the perfect daily schedule that will help you get through all of your tasks.\n\nStep 1: If you’re a manager, let your team know\n\nSolopreneurs and independent contractors, you can skip down to Step 2. However, if you’re a manager or business owner with a team to stay on top of, then keep reading!\n\n‎Before you make any major changes to the way that you work, you need to fill in your employees. You might get a bit of pushback from them — and this is totally normal since new things can take a bit of time to get used to. If you share all of the advantages of using a task scheduler, your employees will be more likely to get on board.\n\nInforming your team is especially important if you’re moving away from paper calendars and lists. You’ll use your new task manager to assign your team tasks, so they need to know what to expect.\n\nManuel Segura Pérez, Head of Project and Construction Management in the Engineering division at Repsol, says that communication is one of the top skills that managers should lean into:\n\nPérez also notes that personal connections are key. One way to establish your relationship with your team is to be transparent with them and keep them in the loop!\n\nStep 2: Determine the tasks you need to add to the scheduler\n\nYour team is on board, so now you need to figure out which tasks you want to add to the task manager. This may require a bit of work upfront, but it’s worth it in the end.\n\nHere are just a few examples of some tasks that you could add:\n• Specific tasks like creating graphics, copy, or other marketing tools\n\nYou can also include actionable items that need to be done to complete a project as a whole. Many task schedulers will have automation software in place that can assist with this, called event-based triggers.\n\nThis automation means that once one team member completes their assignments, the next round of tasks will be automatically assigned to the correct people.\n\nThere are even options with advanced features that will automatically add high-priority tasks to your schedule so you never miss a deadline again.\n\nOne best practice to note here is that you should always keep the names of the tasks simple so that they’re easy to scan. You can get into the nitty-gritty of everything required for an advanced task in a different section of the manager.\n\nStep 3: Enter each task into the scheduler\n\nYou’ve got your list of tasks and all of the helpful information that you’re going to include to guide your team. Remember that you can create basic tasks, one-off tasks, or recurring items — the sky’s the limit! You can also add time limits and deadlines in the advanced settings to keep distracted team members focused.\n\n‎Try to include the following on each task:\n• Duration: How long do you expect (or want) the task to take?\n• Importance: How important is the task?\n• Priority: Does the task need to be done ASAP, or is there a specific deadline?\n• Assigned to: Who is taking on the task?\n\nYou can either create tasks in batches on a Monday morning or make them as you go. Opt to do whatever works best for your business and employees. Just don’t forget to press the finish button when you’re done to save your work.\n\nSomething that makes our task manager so effective is one-click access from any browser. You won’t have to open it in a new window to “get things done.” Simply click and add the item to your task scheduler when it’s top of mind. This simple but seamless detail is yet another way that this helpful tool prevents things from slipping through the cracks.\n\nStep 4: Let the magic happen and do the work\n\nNow that the machine is in motion, it’s time to let the task scheduler work its magic by keeping you on track. You’ll likely notice that routine tasks get done quicker than ever before — which is the whole point of using this type of project management software!\n\nA task manager can also automatically schedule easy tasks into your day-to-day. Once you’ve been using it for some time, it will determine the optimal times for working. And this makes sense since some of us have more time in the mornings and others in the afternoons.\n\nOur task manager, in particular, can determine all of that for you. It can even schedule actionable items in between meetings on your busiest days.\n\nMotion can also reprioritize tasks for you if you get bogged down with a last-minute meeting or a work emergency pops up. Simply tell the task manager what’s going on in one click, and the tool will do the rest of the work for you.\n\nYou can also set up the tool so that a small banner appears at the top of your screen that tells you what you should be working on. That small push of accountability is all that many people need to stay on track!\n\nStep 5: Touch base with your team (and yourself)\n\nYou probably remember the importance of analyzing whether your workflow works. A task scheduler will help you with this, but you should also take a moment — after using it for a few weeks — to consider what worked and what didn’t. This idea can apply to those using it for tasks for themselves or those using it with their team.\n\n‎We recommend gathering feedback about 90 days after you’ve used your task scheduler. That will give you plenty of time to get used to it — and plenty of data to analyze.\n\nSolopreneurs, take a few moments to look at all of the tasks that you completed on time and any deadlines you missed. If you did miss deadlines, was it because you assigned yourself too much or because you didn’t use the task manager to the best of its ability?\n\nIf you’re a small business owner or a manager with a team, it’s all about communicating with your people. Plan to have 10–15-minute meetings with each employee so that they can share their feedback.\n\nWhen you take time out of your day to connect with your team members, you show them that you care about their experiences. This will be worth the extra effort, as everyone enjoys a stronger sense of belonging within their workplace.\n\nA task scheduler makes getting things done easier. With the ability to create one-off tasks, you’ll feel organized at work and won’t have to spend your free time stressing over missing assignments and deadlines. A task scheduler can help you get your life back — so what are you waiting for?\n\nA multi-functional task scheduler like Motion will take the headache out of managing tasks for your business."
    },
    {
        "link": "https://edgeuser.com/Knowledge/Knowledge-Base/administrative-windows-task-scheduler-setting-up-a-windows-task",
        "document": "The Edge automated functions, for example, Automated Postcard feature, syncing of databases, and TPW uploads, are triggered using the Windows® Task feature. \n\n \n\n While The Edge Support Team does not provide support for Windows functions, this tip sheet might be useful.\n\nTo configure a task using the Task Scheduler in Windows:\n• For Windows 10, click Start and type Task Scheduler.\n\n For Windows 8, click Start > All Programs > Administrative > Task Scheduler. \n\n For Windows 7, click Start > All Programs > Accessories > System Tools > Task Scheduler. \n\n \n\n The Task Scheduler will open:\n• Click on Create Basic Task.... The Create Basic Task Wizard will open.\n• Enter a Name and Description. The name and description are up to you; see our suggestion above.\n• Click Next. The Task Trigger area will appear.\n• Under When do you want the task to start?, make your selection. We will use Weekly.\n• To see detailed weekly options, click next. The weekly options will appear.\n• Select options for time to run and frequency. In this example, we have set it to run every Thursday evening after closing. This will allow you to review the results on Friday and make adjustments if necessary.\n• Select an action type: Start a Program. This task will start a program.\n• Click Next. You will be prompted to select a program to start.\n• Browse for and locate executable to be scheduled. Examples might include:\n\n \n\n a. For automated postcards, use Edge.exe with the argument –postcard. \n\n b. For TPW uploads: tpw.exe. \n\n c. Multistore database synchronization: Navigate to the folder that contains the TxClient program.\n• For Edge versions 6.0 & higher, the path is c:\\ProgramFiles(x86)\\ajsllc\\edge\\txclient.exe \n\n \n\n d. For SQL, the path is C:\\ProgramFiles (x86)\\ajsllc\\edge\\edgesqlbackup.bat.\n• Check the box for Open the properties dialog and then click Finish. The Properties window will open.\n• Select Run whether the user is logged on or not.\n• Make sure Do not store password is checked.\n• Make sure Run with highest privileges and Hidden are both checked.\n• You will be prompted for a user name and password. Make sure that the user name you provide has the proper security to run The Edge. This Windows User account should have Windows administrator privileges.\n\nOne of the most common problems we troubleshoot is when somebody changes the password to a user name that is used for scheduled tasks and then the scheduled task fails to run. It might be wise to create a new user name just for this purpose, and never change the password."
    },
    {
        "link": "https://blog.netwrix.com/how-to-automate-powershell-scripts-with-task-scheduler",
        "document": "Windows Task Scheduler enables users to schedule tasks to run at a specific date and time, on a defined schedule, or when triggered by certain events. This built-in tool of Windows operating systems helps improve efficiency and ensure reliable execution of repetitive tasks. In this blog, we will show you how to run a PowerShell script from Task Scheduler and how to create scheduled tasks using PowerShell.\n\nThe Task Scheduler library is a collection of all defined tasks, organized into folders. For each task, the GUI provides the following tabs:\n• General — The tasks’ name and description, the account it should run under, and other security options.\n• Triggers — The conditions that start a task, which can be time-based (e.g., daily, weekly), event-based (e.g., at system startup or user login), or custom\n• Actions — The operations executed when a task is triggered, such as starting a program.\n• Conditions — Criteria that control the execution of a task based on the state of the computer, such as only running when the computer is idle for a specific period\n• Settings — Additional configurations that determine how and when a task is run, such as restarting a task if it fails or stopping it if it runs longer than expected\n• History — A history of task executions, including start times, end times, and any errors or warnings encountered\n\nBenefits of using Task Scheduler for Automating PowerShell Scripts\n\nAutomating PowerShell scripts through the PowerShell Task Scheduler offers many benefits, including the following:\n• Time savings — When you run PowerShell scripts from Task Scheduler, you can save a considerable amount of time that would otherwise be spent on manual execution. This is particularly beneficial for scripts that need to run during off-hours.\n• Consistency — Automation reduces the risk of human errors. A scheduled PowerShell script will execute exactly the same operations in the same order every time.\n• Reliability — With Task Scheduler, you can ensure that critical maintenance tasks, such as backup and cleanup routines, are executed regularly. This increases the system’s reliability and reduces the risk of data loss or system failures.\n• Resource efficiency — By scheduling scripts to run during periods of low system utilization, you can ensure that intensive tasks do not degrade system performance during peak hours.\n• Flexibility — Task Scheduler offers a variety of scheduling options, including the ability to run tasks at system startup, on logon, when idle or in response to specific events. This level of control enables you to tailor script execution to your specific requirements.\n• Error handling — You can configure scheduled tasks to attempt a rerun if a script fails, send emails upon task completion or failure, and write event logs. This enables timely troubleshooting and keeps you informed about the health of automated processes.\n• Security — With Task Scheduler, PowerShell scripts can run under specific user accounts, including those with elevated privileges, without requiring the user to be logged on. This helps ensures that sensitive tasks are executed securely and allows for the automation of scripts that require higher privileges. However, since adversaries can exploit scheduled and triggered tasks for malicious purposes, you should leverage an auditing or tracking system to monitor tasks for potential abuse. Netwrix Enterprise Auditor is a good example of a tool that can mitigate malicious activity.\n• Integration and extensibility — Scheduling PowerShell scripts allows for sophisticated automation scenarios that can react to system events, orchestrate multiple tasks and more.\n• Management of complex workflows — Task Scheduler can manage complex workflows, such as chaining tasks together or using conditional logic based on the success or failure of a prior task. This is invaluable for scenarios where multiple, interdependent tasks need to be carefully orchestrated.\n• Ease of use — Despite its powerful features, Task Scheduler has an intuitive graphical interface that simplifies the process of setting up and managing automated tasks. For more advanced users, Task Scheduler can also be configured and managed using command-line tools or PowerShell cmdlets.\n\nBefore scheduling a PowerShell script with Task Scheduler, make sure the script is saved with the extension .ps1 and that it has been tested to ensure it functions correctly.\n\nThen take the following steps:\n• Open Task Scheduler: Press Win + R, type taskschd.msc to the Run dialog and press Enter.\n• In the Actions pane on the right, click Create Task.\n• On the General tab, do the following:\n• Enter a name and description for your task.\n• Configure the appropriate security options. For example, selecting Run whether user is logged on or not will ensure the task runs even if you are not logged in. If the script requires administrative rights, check Run with highest privileges.\n\nClick OK to save your changes.\n• Go to the Triggers tab and click New. In the New Trigger pane, choose the following:\n• When the task should begin\n• The frequency at which it should run, such as once, daily or weekly\n• Any additional options you need, such as stopping the task if it runs longer than the time you specify\n\nClick OK to save your changes.\n• Go to the Actions tab.Click New to set up a new action to run your PowerShell script:\n• In the Add arguments field, enter the following, making sure to specify the full path to your script: -File C:\\Scripts\\scriptname.ps1\n• In the Start in field, specify the directory where the script, if needed. This is typically not required unless your script relies on relative paths.\n\nClick OK to save your changes\n• Click OK and go to the Conditions tab. St any conditions under which the task should run. For example, you can specify that the task should run only if the computer is on AC power or only if it is connected to a specific network. Click OK to save your selections.\n• Next, go to the Settings tab and configure the following:\n• Allow task to be run on demand — Check this if you want to be able to manually run the task.\n• If the task fails — Specify what should happen if the task fails, such as restarting the task.\n• Stop the task if it runs longer than — Set a time limit if applicable.\n• If the task is already running — Choose what should happen if the task is triggered but it is already running.\n• Click OK to finalize your task. You will be prompted to enter credentials for the user account under which the task will run.\n\nTo control script execution and visibility when using Task Scheduler, you can use the following parameters in the Add arguments field of the Action tab:\n• NoExit — Add this parameter to prevent the PowerShell or command prompt window from closing automatically after the script has run. This option is useful for debugging or when you want the console window to stay open to check the output directly.\n• Command — Use this parameter to specify the full path of a script to execute and any necessary arguments.\n\nFor example, you might specify the following in the Add arguments field:\n\nRedirecting Output to a Text File or Other Destinations to Log Script Activity\n\nHere are some common issues that can prevent your scheduled tasks from running as expected and how to resolve them.\n\nTask will not start or run.\n• Make sure the user account running the task has the necessary permissions to execute the task and access any files or directories referenced by the task.\n• Double-check the task’s configuration settings, such as the trigger settings, action parameters and conditions.\n• If the task uses a specific user account to run, check whether the password has been changed and update it for the task if necessary.\n• Check for conditions that might prevent the task from running, such as that it will run only if the computer is idle for a specific time. If the task is scheduled to run during idle times or when the computer is not in use, power settings like sleep or hibernation mode can prevent execution. Adjust power settings to ensure the system remains active for the task to run.\n• Check whether there is enough memory, CPU or disk space available for the task to run smoothly.\n• If the task involves running a script, ensure the script runs correctly outside of Task Scheduler. Consider how environment variables, paths or permissions might differ in the two situations.\n\nLook up the error code provided in the task’s history or event log to get current information on the issue and how to resolve it.\n\nTask runs but does nothing.\n• Verify that the action set for the task, e.g., starting a program, is configured correctly.\n• If the script is not executing due to policy restrictions, consider adding the -ExecutionPolicy Bypass argument to override the system’s execution policy and allow the script to run.\n• Make sure paths to executable files or scripts are correct, and any command-line arguments are properly specified.\n• If the task should output to a file or other destination, ensure the paths are correct and the running account has the necessary write permissions.\n\nBelow are some practical use cases for common administrative tasks that you might want to automate using Windows Task Scheduler, along with sample scripts.\n\nThe following script can be used to back up a folder in C drive to a folder in local D drive:\n\nTo update software or system components automatically, use this script:\n\nTo send reminders about upcoming events to an email distribution list, use this script:\n\nTo automatically run security scans to detect malware or vulnerabilities, use this script:\n\nThis script removes temporary files from the specified directories:\n\nTo restart a service, such as a web server or Microsoft SQL server service, you can use commands like the following:\n\nYou can schedule more complex PowerShell scripts as well. As illustrated in the examples below, it’s a best practice to include comments that describe the purpose of the various sections of a script.\n\nThis script provides a quick overview of disk space usage:\n\nTo track system performance over time, you can use this PowerShell script to log CPU usage, memory usage and disk space to a file:\n\nBefore you modify or delete one or more scheduled tasks, you might want to review all existing tasks. To see the list of tasks, simply run the Get-ScheduledTask cmdlet.\n\nTo modify a task, right-click on it and select Properties, as shown below. Then edit the required settings and click OK to save your changes.\n\nTo delete a scheduled task, right-click on it, select Delete and confirm the action.\n\nTo create scheduled tasks, you have another option in addition to Task Scheduler: PowerShell. Creating and managing scheduled tasks directly from the PowerShell interface scheduling can significantly enhance productivity, accuracy and session reliability, especially when managing remote systems through a CimSession.\n\nBelow are some of the main PowerShell commands used to create and manage scheduled tasks:\n• New-ScheduledTaskPrincipal — Stores the user account under which the task will run\n\nAdvantages of Using PowerShell for Managing Scheduling Tasks\n\nThe benefits of using PowerShell to run scheduled tasks include the following:\n• Ease of use — It’s easy to specify complex triggers, conditions and actions.\n• Flexibility — You can write and execute sophisticated scripts that can perform a wide range of tasks, from simple file cleanups to intricate system diagnostics and repairs.\n• Time savings — Using a PowerShell scheduled task to run a PowerShell script eliminates the need to manually perform repetitive or complex tasks.\n• Easier troubleshooting — PowerShell scripts can log detailed information about errors or even attempt to rectify them automatically.\n• Remote execution — Scheduled tasks can be executed and throttled across multiple machines. This is particularly beneficial in larger network environments.\n• Security — PowerShell includes many security features, such as execution policy and signed scripts, to help ensure that only authorized scripts run on your system.\n• Efficiency — Using PowerShell for scheduling tasks usually consumes less system resources than third-party automation tools.\n• Adaptability — Scheduled tasks in PowerShell can be easily modified, replicated or extended to meet evolving needs.\n\nA PowerShell script for creating a scheduled task includes the following elements:\n• $action — This specifies what the task will do, such as running a PowerShell script, launching an application or executing a command:\n• $trigger — This specifies when the task will run, such as at a specific time, daily or weekly, or based on system events:\n• $principal — This specifies the user account under which the task will run:\n• $settings — This includes options like how to handle task failures, conditions for running and behavior on battery power:\n• Register-ScheduledTask — This registers the task with the Task Scheduler:\n\nBelow you can see execution of the complete script:\n\nWhen you schedule tasks, whether it’s using Task Scheduler or PowerShell, be sure to pay attention to the following security concerns:\n• Permission management — Scheduled tasks run with the permissions of the account under which they are scheduled, so they can be abused. This risk is higher if the account has elevated access. Be sure to run scheduled tasks using accounts that have the minimum necessary permissions.\n• Script security — The scripts or executables called by scheduled tasks can themselves be vectors for security vulnerabilities. For example, malicious actors can replace or modify scripts stored in unprotected directories to execute harmful commands.\n• Process hijacking — If a scheduled task is predictable and runs with high privileges, an attacker might replace the script that the task is supposed to execute with malicious code.\n• Auditing and accountability — It’s essential to keep detailed logs of scheduled task creation, modification and execution in order to detect and respond to malicious activity.\n• Denial of service — By scheduling tasks that consume excessive system resources to run at critical times, an attacker could disrupt the host system’s ability to perform its intended functions.\n\nRunning Scripts with the Appropriate Security Context and the Implications of Using Highly Privileged Accounts\n\nTo minimize your attack surface, always run scripts under an account that has the least privilege necessary for the task, and avoid running scripts with administrative rights. To accomplish this, understand what resources, permissions and throttle limits a script requires. For example, does the script need to modify system files, access specific data or communicate over the network?\n\nIn addition, use execution policies to control the conditions under which scripts can run. For example, you can restrict the system to run scripts only if they are signed by a trusted publisher.\n\nFor scripts that need to run as a service, consider using a Windows managed service account (MSA) or group managed service account (gMSA), which are more secure because their passwords are automatically managed.\n\nTo maximize the benefits of using scheduled tasks, follow these best practices:\n• Make sure each task has a clear purpose. Document both what the task does and why it’s needed to help others who might work with the task in the future.\n• Establish clear naming conventions. To prevent confusion and improper task execution, ensure that each scheduled task has a unique taskpath.\n• Review and test. Carefully review scripts before running them, especially if they are obtained from external sources, with an eye for any suspicious code. Before deploying a scheduled task in a production environment, thoroughly test it in a staged or development environment. It is also a good practice to maintain a repository of approved scripts.\n• Implement error handling. Make sure every script can manage common errors gracefully and alert relevant team members when there’s an issue that needs attention.\n• Understand dependencies. If a task depends on external services or data, ensure there are checks for availability and graceful handling of outages or delays.\n• Consider resource usage. Look for ways to make tasks less resource-intensive, such as by modifying its logic or running frequency. Tasks should be run as frequently as necessary but not so often that they create performance issues. When choosing when tasks run, consider factors like other system activity and potential conflicts.\n• Pay attention to security. In addition to the security guidelines provided above, be sure to use appropriate authentication and authorization measures for tasks that require access to secure resources, and make sure that tasks do not inadvertently expose sensitive data.\n• Avoid relying on default settings for critical tasks. Customize task configurations to suit your specific needs.\n• Store scripts in a secure location. Make sure only users who need to run or modify the scripts have access.\n• Sign your scripts. Whenever possible, sign your scripts with a digital certificate issued by a trusted Certificate Authority (CA). This not only verifies the authorship of the script but also ensures that the script has not been tampered with since it was signed.\n• Implement monitoring and alerting. Logs are invaluable for diagnosing issues and understanding a task’s actions. Tools that notify administrators of unusual script activity or performance degradation enable quicker response.\n• Regularly review and update scheduled tasks. This includes updating any dependencies, adjusting schedules based on new business needs, and retiring tasks that are no longer necessary.\n\nWindows Task Scheduler enables business users and administrators to run PowerShell scripts at specific dates and times on a regular basis, such as daily or weekly, or when specific conditions are met. Automating tasks using Task Scheduler saves time while ensuring that tasks are performed accurately and reliably. More advanced users can use PowerShell to create and manage scheduled tasks.\n\nWhen scheduling scripts, make sure to follow best practices such as documenting the purpose of the task, using error handling and logging within the scripts, and using the least privilege principle to avoid excessive permissions, which can be a security threat if compromised and used by adversaries.\n\nWindows Task Scheduler is a built-in tool in the Windows operating system that enables users to schedule tasks and processes to run automatically. With Task Scheduler, you can set up tasks to run at a specified day and time or at a certain interval like daily or weekly.\n\nWhy should I use Task Scheduler to automate PowerShell scripts?\n\nBy choosing to run PowerShell scripts from Task Scheduler, you can automate repetitive tasks, which ensures that they are performed reliably and accurately without further effort on your part.\n\nPress Win + R to open the Run dialog. Type taskschd.msc and press Enter.\n\nHow do I create a new task in Task Scheduler?\n\nClick on Create Task in the Actions pane on the right side of the Task Scheduler window. Provide a name and description for the task; choose appropriate settings for the Action, Triggers, Conditions and Settings tabs; and click Save.\n\nWhat are the benefits of naming and describing a task?\n\nProviding a useful name and clear description that explains what the task does and why it is needed helps ensure that each task has a clear purpose and facilitates future maintenance by others who work with the task.\n\nHow do I determine the trigger for a scheduled task?\n\nOn the Trigger tab for a task, you can specify when the task should run, such as on schedule, at system startup or upon user logon, as well the repetition interval and other criteria.\n\nHow do I configure Task Scheduler to run a PowerShell script?\n• Go to the Actions tab, click New andselect Start a program from the dropdown menu.\n• In the Add arguments field, enter the following, replacing the argument InstallofSoftware.ps1 with the name of your script:\n\nHow can I set up tasks to run even when the user is not logged on?\n\nOn the General tab of the task, select the option Run whether a user is logged on or not.\n\nHow do I manage task privileges and ensure scripts stop after a specified duration?\n\nTasks have the privileges of the account they are run under. You can specify the account to run the task on the General tab.\n\nTo ensure a script stops after a given duration, on the Settings tab, select Stop the task if it runs longer than and choose the desired number of hours or days.\n\nYou can control script execution and visibility by adding the -NoExit or -Command parameter in the Add Argument field on the Action tab.\n\nWhat tips can help troubleshoot tasks that do not run as expected?\n\nPassword expiration or changes can cause a task to fail. Improperly configured or maliciously designed scheduled tasks (for example, tasks that consume excessive system resources) can lead to a denial of service on the host machine, hurting its availability and performance.\n\nHow do I modify an existing scheduled task?\n\nRight-click on the task in the Windows Task Scheduler library, select Properties and make the desired changes to the task’s settings.\n\nRight-click on the task in the Task Scheduler library and choose Delete.\n\nWhat are the advantages of using PowerShell for scheduling tasks?\n\nCompared to the Task Scheduler GUI, PowerShell provides more granular control over task configuration, error handling and logging, and makes it easier to define custom scheduling logic. PowerShell also enables you to schedule and run tasks on multiple remote systems from a central location.\n\nWhat are the New-ScheduledTaskTrigger and Register-ScheduledTask cmdlets used for?\n\nThe New-ScheduledTaskTrigger cmdlet is used to define triggers for the task, and the Register-ScheduledTask cmdlet is used to register the task with Windows Task Scheduler.\n\nWhat are the security implications of scheduled tasks?\n\nRunning a scheduled task with a highly privileged accounts increases security risks if the account is compromised, so always choose the account with the least privilege principle in mind.\n\nHow should I run scripts with the appropriate security context?\n\nMost important, run scripts under an account with the least privileges necessary to complete the task, and use managed service accounts (MSAs) or group managed service accounts (gMSAs) when appropriate. Consider using execution policies to allow restrict only scripts that are signed by a trusted publisher, and whenever possible, sign your scripts with a digital certificate issued by a trusted Certificate Authority.\n\nWhat are the best practices for organizing and managing scheduled tasks?\n\nKey best practices include storing scripts in a secure location with access permissions controlled and evaluating scripts in a test environment before implementing them in production."
    }
]