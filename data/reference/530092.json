[
    {
        "link": "https://threejs.org/docs/api/en/loaders/ObjectLoader.html",
        "document": "A loader for loading a JSON resource in the [link:https://github.com/mrdoob/three.js/wiki/JSON-Object-Scene-format-4 JSON Object/Scene format].\n\n\n\n This uses the [page:FileLoader] internally for loading files.\n\n[page:LoadingManager manager] — The [page:LoadingManager loadingManager] for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager].\n\n\n\n Creates a new [name].\n\nSee the base [page:Loader] class for common properties.\n\nSee the base [page:Loader] class for common methods.\n\n[page:String url] — the path or URL to the file. This can also be a [link:https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs Data URI].\n\n [page:Function onLoad] — Will be called when load completes. The argument will be the loaded [page:Object3D object].\n\n [page:Function onProgress] (optional) — Will be called while load progresses. The argument will be the ProgressEvent instance, which contains .[page:Boolean lengthComputable], .[page:Integer total] and .[page:Integer loaded]. If the server does not set the Content-Length header; .[page:Integer total] will be 0.\n\n [page:Function onError] (optional) — Will be called when load errors.\n\n\n\nBegin loading from url and call onLoad with the parsed response content.\n\n[page:Object json] — required. The JSON source to parse.\n\n\n\n [page:Function onLoad] — Will be called when parsed completes. The argument will be the parsed [page:Object3D object].\n\n\n\n Parse a `JSON` structure and return a three.js object. This is used internally by [page:.load]() but can also be used directly to parse a previously loaded JSON structure.\n\n[page:Object json] — required. The JSON source to parse.\n\n\n\n This is used by [page:.parse]() to parse any [page:BufferGeometry geometries] in the JSON structure.\n\n[page:Object json] — required. The JSON source to parse.\n\n\n\n This is used by [page:.parse]() to parse any materials in the JSON structure using [page:MaterialLoader].\n\n[page:Object json] — required. The JSON source to parse.\n\n\n\n This is used by [page:.parse]() to parse any animations in the JSON structure, using [page:AnimationClip.parse]().\n\n[page:Object json] — required. The JSON source to parse.\n\n\n\n This is used by [page:.parse]() to parse any images in the JSON structure, using [page:ImageLoader].\n\n[page:Object json] — required. The JSON source to parse.\n\n\n\n This is used by [page:.parse]() to parse any textures in the JSON structure.\n\n[page:Object json] — required. The JSON source to parse.\n\n [page:BufferGeometry geometries] — required. The geometries of the JSON.\n\n [page:Material materials] — required. The materials of the JSON.\n\n [page:AnimationClip animations] — required. The animations of the JSON.\n\n\n\n This is used by [page:.parse]() to parse any 3D objects in the JSON structure."
    },
    {
        "link": "https://stackoverflow.com/questions/13655092/using-three-js-jsonloader",
        "document": "Just can't see models imported into three.js scene. The geometry looks fine but the model isn't displaying no matter what material I apply to it.\n\nI'm new to WebGL so it's hard for me to diagnose, but my guess is that something is going wrong during the JSONLoader callback.\n\nThanks for all help."
    },
    {
        "link": "https://threejs.org/docs",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/45930473/how-to-properly-load-a-json-file-in-threejs",
        "document": "I would recommend to start with their editor: https://threejs.org/editor/\n\nHere you have GUI where you can import .json, .obj, etc. It is a quick way to see what have you done, you can add lights, play with materials, add custom scripts, etc. For example you can load some example, delete default objects, import your model, press play and if you like what you see just hit publish. It will download entire project which you can upload to your server and that can be the base for future work.\n\nFor a quick start it is perfect because it works and will motivate you to investigate and learn further.\n\nI know that this is not direct answer to the question but I've been there and it's frustrating to see all those loaders not working because you didn't select all the right check boxes when exporting from blender or whatever reason (there could be a lot of them).\n\nTry editor first, figure out how it works and move on. Just an advice"
    },
    {
        "link": "https://threejs.org/docs/api/en/loaders/Loader.html",
        "document": "[page:LoadingManager manager] — The [page:LoadingManager loadingManager] for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager].\n\nThe crossOrigin string to implement CORS for loading the url from a different domain that allows CORS. Default is `anonymous`.\n\nWhether the XMLHttpRequest uses credentials. See [page:.setWithCredentials]. Default is `false`.\n\nThe [page:LoadingManager loadingManager] the loader is using. Default is [page:DefaultLoadingManager].\n\nThe base path from which the asset will be loaded. Default is the empty string.\n\nThe base path from which additional resources like textures will be loaded. Default is the empty string.\n\nThe [link:https://developer.mozilla.org/en-US/docs/Glossary/Request_header request header] used in HTTP request. See [page:.setRequestHeader]. Default is empty object.\n\nThis method needs to be implemented by all concrete loaders. It holds the logic for loading the asset from the backend.\n\n[page:String url] — A string containing the path/URL of the file to be loaded.\n\n [page:Function onProgress] (optional) — A function to be called while the loading is in progress. The argument will be the ProgressEvent instance, which contains .[page:Boolean lengthComputable], .[page:Integer total] and .[page:Integer loaded]. If the server does not set the Content-Length header; .[page:Integer total] will be 0.\n\n\n\nThis method is equivalent to [page:.load], but returns a [link:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise Promise].\n\n[page:Function onLoad] is handled by [link:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve Promise.resolve] and [page:Function onError] is handled by [link:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject Promise.reject].\n\nThis method needs to be implemented by all concrete loaders. It holds the logic for parsing the asset into three.js entities.\n\n[page:String crossOrigin] — The crossOrigin string to implement CORS for loading the url from a different domain that allows CORS.\n\nWhether the XMLHttpRequest uses credentials such as cookies, authorization headers or TLS client certificates. See [link:https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials XMLHttpRequest.withCredentials].\n\n Note that this has no effect if you are loading files locally or from the same domain.\n\n[page:String path] — Set the base path for the asset.\n\n[page:String resourcePath] — Set the base path for dependent resources like textures.\n\n[page:Object requestHeader] - key: The name of the header whose value is to be set. value: The value to set as the body of the header.\n\n\n\n Set the [link:https://developer.mozilla.org/en-US/docs/Glossary/Request_header request header] used in HTTP request."
    },
    {
        "link": "https://threejs.org/docs/examples/en/controls/OrbitControls.html",
        "document": "Orbit controls allow the camera to orbit around a target.\n\n To use this, as with all files in the /examples directory, you will have to include the file separately in your HTML.\n\n[name] is an add-on, and must be imported explicitly. See [link:#manual/introduction/Installation Installation / Addons].\n\n[page:Camera object]: (required) The camera to be controlled. The camera must not be a child of another object, unless that object is the scene itself.\n\n\n\n [page:HTMLDOMElement domElement]: The HTML element used for event listeners. (optional)\n\nFires when the camera has been transformed by the controls.\n\nFires when an interaction was initiated.\n\nFires when an interaction has finished.\n\nSee the base [page:Controls] class for common properties.\n\nSet to true to automatically rotate around the target.\n\n Note that if this is enabled, you must call [page:.update] () in your animation loop. If you want the auto-rotate speed to be independent of the frame rate (the refresh rate of the display), you must pass the time `deltaTime`, in seconds, to [page:.update]().\n\nHow fast to rotate around the target if [page:.autoRotate] is true. Default is 2.0, which equates to 30 seconds per orbit at 60fps.\n\n Note that if [page:.autoRotate] is enabled, you must call [page:.update] () in your animation loop.\n\nThe damping inertia used if [page:.enableDamping] is set to `true`. Default is `0.05`.\n\n Note that for this to work, you must call [page:.update] () in your animation loop.\n\nSet to true to enable damping (inertia), which can be used to give a sense of weight to the controls. Default is false.\n\n Note that if this is enabled, you must call [page:.update] () in your animation loop.\n\nEnable or disable horizontal and vertical rotation of the camera. Default is true.\n\n Note that it is possible to disable a single axis by setting the min and max of the [page:.minPolarAngle polar angle] or [page:.minAzimuthAngle azimuth angle] to the same value, which will cause the vertical or horizontal rotation to be fixed at that value.\n\nEnable or disable zooming (dollying) of the camera.\n\nHow fast to pan the camera when the keyboard is used. Default is 7.0 pixels per keypress.\n\nHow fast to rotate the camera when the keyboard is used. Default is 1.\n\nThis object contains references to the keycodes for controlling camera panning. Default is the 4 arrow keys. controls.keys = { LEFT: 'ArrowLeft', //left arrow UP: 'ArrowUp', // up arrow RIGHT: 'ArrowRight', // right arrow BOTTOM: 'ArrowDown' // down arrow } See [link:https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code KeyboardEvent.code] for a full list of keycodes.\n\nHow far you can orbit horizontally, upper limit. If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI ). Default is Infinity.\n\nHow far you can dolly out ( [page:PerspectiveCamera] only ). Default is Infinity.\n\nHow far you can orbit vertically, upper limit. Range is 0 to Math.PI radians, and default is Math.PI.\n\nHow far you can zoom out ( [page:OrthographicCamera] only ). Default is Infinity.\n\nHow close you can get the target to the 3D [page:.cursor]. Default is 0.\n\nHow far you can move the target from the 3D [page:.cursor]. Default is Infinity.\n\nHow far you can orbit horizontally, lower limit. If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI ). Default is Infinity.\n\nHow far you can dolly in ( [page:PerspectiveCamera] only ). Default is 0.\n\nHow far you can orbit vertically, lower limit. Range is 0 to Math.PI radians, and default is 0.\n\nHow far you can zoom in ( [page:OrthographicCamera] only ). Default is 0.\n\nThis object contains references to the mouse actions used by the controls.\n\nUsed internally by the [page:.saveState] and [page:.reset] methods.\n\nDefines how the camera's position is translated when panning. If true, the camera pans in screen space. Otherwise, the camera pans in the plane orthogonal to the camera's up direction. Default is `true`.\n\nUsed internally by the [page:.saveState] and [page:.reset] methods.\n\nThe focus point of the controls, the [page:.object] orbits around this. It can be updated manually at any point to change the focus of the controls.\n\nThe focus point of the [page:.minTargetRadius] and [page:.maxTargetRadius] limits. It can be updated manually at any point to change the center of interest for the [page:.target].\n\nThis object contains references to the touch actions used by the controls.\n\nUsed internally by the [page:.saveState] and [page:.reset] methods.\n\nSetting this property to `true` allows to zoom to the cursor's position. Default is `false`.\n\nSee the base [page:Controls] class for common methods.\n\nGet the current horizontal rotation, in radians.\n\nGet the current vertical rotation, in radians.\n\nReturns the distance from the camera to the target.\n\nAdds key event listeners to the given DOM element. `window` is a recommended argument for using this method.\n\nReset the controls to their state from either the last time the [page:.saveState] was called, or the initial state.\n\nSave the current state of the controls. This can later be recovered with [page:.reset].\n\nUpdate the controls. Must be called after any manual changes to the camera's transform, or in the update loop if [page:.autoRotate] or [page:.enableDamping] are set. `deltaTime`, in seconds, is optional, and is only required if you want the auto-rotate speed to be independent of the frame rate (the refresh rate of the display)."
    },
    {
        "link": "https://stackoverflow.com/questions/71837313/how-to-write-a-custom-mouse-wheel-event-handler-in-orbitcontrols",
        "document": "I'm working on a WebGL application using ThreeJS and OrbitControls. How do I write and make use of a custom event handler for wheel spin events?\n\nI tried adding it as a listener:\n\nbut I suspect this adds my handler to a list of existing handlers (probably only one), and I'd have to remove the original handler. Not sure how to do that. And anyway, my handler never was called, which I checked for by adding a console.log(\"Wheel!\") line to my handler.\n\nAnother thing I tried is to replace the handleWheelMouse method in the controls object, like this:\n\nbut again the console.log line never executes.\n\nWhat is the right way to go about doing this?"
    },
    {
        "link": "https://threejs.org/docs#examples/en/controls/OrbitControls.mouseButtons",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/59776570/three-js-mousewheel-to-move-camera-up-down-instead-of-zoom-in-out",
        "document": "I don't have the details of your project but seems like you need implement your own stroller module.\n\nHow can I do that, Teo?\n\nWell, my young Padawan, we just need to implement a function that moves the camera up/down as you mentioned.\n\nSo, you mean that just add complexity?\n\nNow, if that is the only camera movement you need, then yupe it does.\n\nFirst, we add to listen the mouse wheel. Then we call method to prevent the zoom.\n\nNow, we calculate the scroll modifier . In this case, we use the delta in the Y-axis. For this example the value was so high so I divided by to have a more smooth scrolling.\n\nFinally, we add to prevent the scrolling out of bounds."
    },
    {
        "link": "https://github.com/yomotsu/camera-controls",
        "document": "A camera control for three.js, similar to THREE.OrbitControls yet supports smooth transitions and more features.\n• look in the point direction\n• rotate with time duration and easing (with gsap)\n• in react-three-fiber (drei official) (see doc)\n\n(The below code is for three.js users. If you use react-three-fiber (aka R3F), r3f-ready camera-controls is available on @react-three/drei\n\nYou must install three.js before using camera-controls. Not doing so will lead to runtime errors (undefined references to THREE).\n\nYou can then proceed to use CameraControls.\n\nNote: If you do not wish to use the entire three.js to reduce file size(tree-shaking for example), make a subset to install.\n• is a or to be controlled.\n• is a for draggable area. (optional. if domElement is omitted here, can be connect later with )\n\nIf your camera is Y-up, the Azimuthal angle will be the angle for y-axis rotation and the Polar angle will be the angle for vertical position.\n• A Zoom involves changing the lens focal length. In three.js, zooming is actually changing the camera FOV, and the camera is stationary (doesn't move).\n• A Dolly involves physically moving the camera to change the composition of the image in the frame.\n• Every 360 degrees turn is added to value, which is accumulative.\n\n , .\n\n Tip: How to normalize accumulated azimuthAngle?\n• Be aware colliderMeshes may decrease performance. The collision test uses 4 raycasters from the camera since the near plane has 4 corners.\n• If the Dolly distance is less (or over) than the (or ), will keep the distance and pushes the target position instead.\n\nCameraControls instance emits the following events.\n\n To subscribe, use .\n\n To unsubscribe, use .\n• (Mouse wheel control) does not emit and . uses scroll-event internally, and scroll-event happens intermittently. That means \"start\" and \"end\" cannot be detected.\n• Due to damping, will usually fire a few seconds after the camera appears to have stopped moving. If you want to do something (e.g. enable UI, perform another transition) at the point when the camera has stopped, you probably want the event. This can be fine tuned using the parameter. See the Rest and Sleep Example.\n• The default of is:\n• for Orthographic camera, and can't set .\n• The default of and is:\n• for Orthographic camera, and can't set and .\n\nRotate azimuthal angle(horizontal) and polar angle(vertical). Every value is added to the current value.\n\nIf you want to rotate only one axis, put a angle for the axis to rotate, and for another.\n\nRotate azimuthal angle(horizontal) to the given angle and keep the same polar angle(vertical) target.\n\nRotate polar angle(vertical) to the given angle and keep the same azimuthal angle(horizontal) target.\n\nRotate azimuthal angle(horizontal) and polar angle(vertical) to the given angle. Camera view will rotate over the orbit pivot absolutely:\n\nDolly in, but does not change the distance between the target and the camera, and moves the target position instead. Specify a negative value for dolly out.\n\nZoom in/out camera. The value is added to camera zoom.\n\n Limits set with and\n\nYou can also make zoomIn function using property. e.g.\n\nZoom in/out camera to given scale. The value overwrites camera zoom.\n\n Limits set with and\n\nLook in the given point direction.\n\nSet focal offset using the screen parallel coordinates. doesn't affect in Orthographic as with Dolly.\n\nFit the viewport to the box or the bounding box of the object, using the nearest axis. paddings are in unit. set to fill enter screen.\n\nFit the viewport to the sphere or the bounding sphere of the object.\n\nLook at the from the .\n\nSimilar to , but it interpolates between two states.\n\nSet angle and distance by given position. An alias of , without target change. Thus keep gazing at the current target\n\nSet the target position where gaze at. An alias of , without position change. Thus keep the same position.\n\nSet the boundary box that encloses the target of the camera. is in\n\nSet (or unset) the current viewport.\n\n Set this when you want to use renderer viewport and feature at the same time.\n\nSame as , but you can give it four numbers that represents a viewport instead:\n\nReturns the orbit center position, where the camera looking at.\n\nReturns the spherical coordinates of the orbit.\n\nReturns the focal offset, which is how much the camera appears to be translated in screen parallel coordinates.\n\nReset all rotation and position to default.\n\nUpdate camera position and directions. This should be called in your tick loop and returns if re-rendering is needed.\n\nWhen you change camera-up vector, run to sync.\n\nApply current camera-up direction to the camera.\n\n The orbit system will be re-initialized with the current position.\n\nDispose the cameraControls instance itself, remove all eventListeners.\n\nRemoves all listeners for the specified type.\n\nGet all state in JSON string\n\nReproduce the control state with JSON. is where anim or not in a boolean.\n\nIf you need a normalized accumulated azimuth angle (between 0 and 360 deg), compute with THREE.MathUtils.euclideanModulo e.g.:\n\nYou may rotate 380deg but actually, you expect to rotate -20deg.\n\n To get the absolute angle, use the below:\n\nAll methods that take the parameter return a can be used to create complex animations, for example:\n\nThis will rotate the camera, then dolly, and finally fit to the bounding sphere of the .\n\nThe speed and timing of transitions can be tuned using and .\n\nIf is , the promise will resolve immediately:\n\ncamera-controls used to use simple damping for its smooth transition. camera-controls v2 now uses SmoothDamp. one of the benefits of using SmoothDamp is, SmoothDamp transition can be controlled with smoothTime which is approximately the time it will take to reach the end position. Also, the Maximum speed of the transition can be set with .\n\nDue to the change, the following are needed. (if you haven't changed and in v1.x, nothing is needed)\n\nThis project exists thanks to all the people who contribute.\n• a npm registry up and running with a"
    }
]