[
    {
        "link": "https://support.microsoft.com/en-us/office/quick-start-create-a-macro-741130ca-080d-49f5-9471-1e5fb3d581a8",
        "document": "If you have tasks in Microsoft Excel that you do repeatedly, you can record a macro to automate those tasks. A macro is an action or a set of actions that you can run as many times as you want. When you create a macro, you are recording your mouse clicks and keystrokes. After you create a macro, you can edit it to make minor changes to the way it works. Suppose that every month, you create a report for your accounting manager. You want to format the names of the customers with overdue accounts in red, and also apply bold formatting. You can create and then run a macro that quickly applies these formatting changes to the cells you select.\n\nMacros and VBA tools can be found on the Developer tab, which is hidden by default, so the first step is to enable it. For more information, see Show the Developer tab.\n• In the Code group on the Developer tab, click Record Macro.\n• Optionally, enter a name for the macro in the Macro name box, enter a shortcut key in the Shortcut key box, and a description in the Description box, and then click OK to start recording.\n• Perform the actions you want to automate, such as entering boilerplate text or filling down a column of data. Take a closer look at the macro You can learn a little about the Visual Basic programming language by editing a macro. To edit a macro, in the Code group on the Developer tab, click Macros, select the name of the macro, and click Edit. This starts the Visual Basic Editor. See how the actions that you recorded appear as code. Some of the code will probably be clear to you, and some of it may be a little mysterious. Experiment with the code, close the Visual Basic Editor, and run your macro again. This time, see if anything different happens!\n• To learn more about creating macros, see Create or delete a macro.\n• To learn about how to run a macro, see Run a macro. Make sure the Developer tab is visible on the ribbon. By default, the Developer tab is not visible, so do the following:\n• In the Customize the Ribbon category, in the Main Tabs list, select the Developer check box, and then click Save.\n• Optionally, enter a name for the macro in the Macro name box, enter a shortcut key in the Shortcut key box, and a description in the Description box, and then click OK to start recording.\n• Perform the actions you want to automate, such as entering boilerplate text or filling down a column of data.\n• On the Developer tab, in the Code group, click Stop Recording. Take a closer look at the macro You can learn a little about the Visual Basic programming language by editing a macro. To edit a macro, in the Developer tab, click Macros, select the name of the macro, and click Edit. This starts the Visual Basic Editor. See how the actions that you recorded appear as code. Some of the code will probably be clear to you, and some of it may be a little mysterious. Experiment with the code, close the Visual Basic Editor, and run your macro again. This time, see if anything different happens!"
    },
    {
        "link": "https://learn.microsoft.com/en-us/office/vba/library-reference/concepts/getting-started-with-vba-in-office",
        "document": "Getting started with VBA in Office\n\nAre you facing a repetitive clean up of fifty tables in Word? Do you want a particular document to prompt the user for input when it opens? Are you having difficulty figuring out how to get your contacts from Microsoft Outlook into a Microsoft Excel spreadsheet efficiently?\n\nYou can perform these tasks and accomplish a great deal more by using Visual Basic for Applications (VBA) for Office—a simple, but powerful programming language that you can use to extend Office applications.\n\nThis article is for experienced Office users who want to learn about VBA and who want some insight into how programming can help them to customize Office.\n\nThe Office suite of applications has a rich set of features. There are many different ways to author, format, and manipulate documents, email, databases, forms, spreadsheets, and presentations. The great power of VBA programming in Office is that nearly every operation that you can perform with a mouse, keyboard, or a dialog box can also be done by using VBA. Further, if it can be done once with VBA, it can be done just as easily a hundred times. (In fact, the automation of repetitive tasks is one of the most common uses of VBA in Office.)\n\nBeyond the power of scripting VBA to accelerate every-day tasks, you can use VBA to add new functionality to Office applications or to prompt and interact with the user of your documents in ways that are specific to your business needs. For example, you could write some VBA code that displays a pop up message that reminds users to save a document to a particular network drive the first time they try to save it.\n\nThis article explores some of the primary reasons to leverage the power of VBA programming. It explores the VBA language and the out-of-the-box tools that you can use to work with your solutions. Finally, it includes some tips and ways to avoid some common programming frustrations and missteps.\n\nWhen to use VBA and why\n\nThere are several principal reasons to consider VBA programming in Office.\n\nVBA is effective and efficient when it comes to repetitive solutions to formatting or correction problems. For example, have you ever changed the style of the paragraph at the top of each page in Word? Have you ever had to reformat multiple tables that were pasted from Excel into a Word document or an Outlook email? Have you ever had to make the same change in multiple Outlook contacts?\n\nIf you have a change that you have to make more than ten or twenty times, it may be worth automating it with VBA. If it is a change that you have to do hundreds of times, it certainly is worth considering. Almost any formatting or editing change that you can do by hand, can be done in VBA.\n\nThere are times when you want to encourage or compel users to interact with the Office application or document in a particular way that is not part of the standard application. For example, you might want to prompt users to take some particular action when they open, save, or print a document.\n\nDo you need to copy all of your contacts from Outlook to Word and then format them in some particular way? Or, do you need to move data from Excel to a set of PowerPoint slides? Sometimes simple copy and paste does not do what you want it to do, or it is too slow. Use VBA programming to interact with the details of two or more Office applications at the same time and then modify the content in one application based on the content in another.\n\nDoing things another way\n\nVBA programming is a powerful solution, but it is not always the optimal approach. Sometimes it makes sense to use other ways to achieve your aims.\n\nThe critical question to ask is whether there is an easier way. Before you begin a VBA project, consider the built-in tools and standard functionalities. For example, if you have a time-consuming editing or layout task, consider using styles or accelerator keys to solve the problem. Can you perform the task once and then use CTRL+Y (Redo) to repeat it? Can you create a new document with the correct format or template, and then copy the content into that new document?\n\nOffice applications are powerful; the solution that you need may already be there. Take some time to learn more about Office before you jump into programming.\n\nBefore you begin a VBA project, ensure that you have the time to work with VBA. Programming requires focus and can be unpredictable. Especially as a beginner, never turn to programming unless you have time to work carefully. Trying to write a \"quick script\" to solve a problem when a deadline looms can result in a very stressful situation. If you are in a rush, you might want to use conventional methods, even if they are monotonous and repetitive.\n\nUsing code to make applications do things\n\nYou might think that writing code is mysterious or difficult, but the basic principles use every-day reasoning and are quite accessible. Microsoft Office applications are created in such a way that they expose things called objects that can receive instructions, in much the same way that a phone is designed with buttons that you use to interact with the phone. When you press a button, the phone recognizes the instruction and includes the corresponding number in the sequence that you are dialing. In programming, you interact with the application by sending instructions to various objects in the application. These objects are expansive, but they have their limits. They can only do what they are designed to do, and they will only do what you instruct them to do.\n\nFor example, consider the user who opens a document in Word, makes a few changes, saves the document, and then closes it. In the world of VBA programming, Word exposes a Document object. By using VBA code, you can instruct the Document object to do things such as Open, Save, or Close.\n\nThe following section discusses how objects are organized and described.\n\nDevelopers organize programming objects in a hierarchy, and that hierarchy is called the object model of the application. Word, for example, has a top-level Application object that contains a Document object. The Document object contains Paragraph objects and so on. Object models roughly mirror what you see in the user interface. They are a conceptual map of the application and its capabilities.\n\nThe definition of an object is called a class, so you might see these two terms used interchangeably. Technically, a class is the description or template that is used to create, or instantiate, an object.\n\nOnce an object exists, you can manipulate it by setting its properties and calling its methods. If you think of the object as a noun, the properties are the adjectives that describe the noun and the methods are the verbs that animate the noun. Changing a property changes some quality of appearance or behavior of the object. Calling one of the object methods causes the object to perform some action.\n\nThe VBA code in this article runs against an open Office application where many of the objects that the code manipulates are already up and running; for example, the Application itself, the Worksheet in Excel, the Document in Word, the Presentation in PowerPoint, the Explorer and Folder objects in Outlook. Once you know the basic layout of the object model and some key properties of the Application that give access to its current state, you can start to extend and manipulate that Office application with VBA in Office.\n\nIn Word, for example, you can change the properties and invoke the methods of the current Word document by using the ActiveDocument property of the Application object. This ActiveDocument property returns a reference to the Document object that is currently active in the Word application. \"Returns a reference to\" means \"gives you access to.\"\n\nThe following code does exactly what it says; that is, it saves the active document in the application.\n\nRead the code from left to right, \"In this Application, with the Document referenced by ActiveDocument, invoke the Save method.\" Be aware that Save is the simplest form of method; it does not require any detailed instructions from you. You instruct a Document object to Save and it does not require any more input from you.\n\nIf a method requires more information, those details are called parameters. The following code runs the SaveAs method, which requires a new name for the file.\n\nValues listed in parentheses after a method name are the parameters. Here, the new name for the file is a parameter for the SaveAs method.\n\nYou use the same syntax to set a property that you use to read a property. The following code executes a method to select cell A1 in Excel and then to set a property to put something in that cell.\n\nThe first challenge in VBA programming is to get a feeling for the object model of each Office application and to read the object, method, and property syntax. The object models are similar in all Office applications, but each is specific to the kind of documents and objects that it manipulates.\n\nIn the first line of the code snippet, there is the Application object, Excel this time, and then the ActiveSheet, which provides access to the active worksheet. After that is a term not as familiar, Range, which means \"define a range of cells in this way.\" The code instructs Range to create itself with just A1 as its defined set of cells. In other words, the first line of code defines an object, the Range, and runs a method against it to select it. The result is automatically stored in another property of the Application called Selection.\n\nThe second line of code sets the Value property of Selection to the text \"Hello World\", and that value appears in cell A1.\n\nThe simplest VBA code that you write might simply gain access to objects in the Office application that you are working with and set properties. For example, you could get access to the rows in a table in Word and change their formatting in your VBA script.\n\nThat sounds simple, but it can be incredibly useful; once you can write that code, you can harness all of the power of programming to make those same changes in several tables or documents, or make them according to some logic or condition. For a computer, making 1000 changes is no different from making 10, so there is an economy of scale here with larger documents and problems, and that is where VBA can really shine and save you time.\n\nNow that you know something about how Office applications expose their object models, you are probably eager to try calling object methods, setting object properties, and responding to object events. To do so, you must write your code in a place and in a way that Office can understand; typically, by using the Visual Basic Editor. Although it is installed by default, many users don't know that it is even available until it is enabled on the ribbon.\n\nAll Office applications use the ribbon. One tab on the ribbon is the Developer tab, where you access the Visual Basic Editor and other developer tools. Because Office does not display the Developer tab by default, you must enable it by using the following procedure:\n• None On the File tab, choose Options to open the Options dialog box.\n• None Choose Customize Ribbon on the left side of the dialog box.\n• None Under Choose commands from on the left side of the dialog box, select Popular Commands.\n• None Under Customize the Ribbon on the right side of the dialog box, select Main Tabs in the drop down list box, and then select the Developer checkbox.\n\nAfter you enable the Developer tab, it is easy to find the Visual Basic and Macros buttons.\n\nTo protect Office users against viruses and dangerous macro code, you cannot save macro code in a standard Office document that uses a standard file extension. Instead, you must save the code in a file with a special extension. For example you cannot save macros in a standard Word document with a .docx extension; instead, you must use a special Word Macro-Enabled Document with a .docm extension.\n\nWhen you open a .docm file, Office security might still prevent the macros in the document from running, with or without telling you. Examine the settings and options in the Trust Center on all Office applications. The default setting disables macro from running, but warns you that macros have been disabled and gives you the option to turn them back on for that document.\n\nYou can designate specific folders where macros can run by creating Trusted Locations, Trusted Documents, or Trusted Publishers. The most portable option is to use Trusted Publishers, which works with digitally signed documents that you distribute. For more information about the security settings in a particular Office application, open the Options dialog box, choose Trust Center, and then choose Trust Center Settings.\n\nWhen you choose the Macro button on the Developer tab, it opens the Macros dialog box, which gives you access to VBA subroutines or macros that you can access from a particular document or application. The Visual Basic button opens the Visual Basic Editor, where you create and edit VBA code.\n\nAnother button on the Developer tab in Word and Excel is the Record Macro button, which automatically generates VBA code that can reproduce the actions that you perform in the application. Record Macro is a terrific tool that you can use to learn more about VBA. Reading the generated code can give you insight into VBA and provide a stable bridge between your knowledge of Office as a user and your knowledge as a programmer. The only caveat is that the generated code can be confusing because the Macro editor must make some assumptions about your intentions, and those assumptions are not necessarily accurate.\n• None Open Excel to a new Workbook and choose the Developer tab in the ribbon. Choose Record Macro and accept all of the default settings in the Record Macro dialog box, including Macro1 as the name of the macro and This Workbook as the location.\n• None Choose OK to begin recording the macro. Note how the button text changes to Stop Recording. Choose that button the instant you complete the actions that you want to record.\n• None Choose cell B1 and type the programmer's classic first string: Hello World. Stop typing and look at the Stop Recording button; it is grayed out because Excel is waiting for you to finish typing the value in the cell.\n• None Choose cell B2 to complete the action in cell B1, and then choose Stop Recording.\n• None Choose Macros on the Developer tab, select Macro1 if it is not selected, and then choose Edit to view the code from Macro1 in the Visual Basic Editor.\n\nLooking at the code\n\nThe macro that you created should look similar to the following code.\n\nBe aware of the similarities to the earlier code snippet that selected text in cell A1, and the differences. In this code, cell B1 is selected, and then the string \"Hello World\" is applied to the cell that has been made active. The quotes around the text specify a string value as opposed to a numeric value.\n\nRemember how you chose cell B2 to display the Stop Recording button again? That action shows up as a line of code as well. The macro recorder records every keystroke.\n\nThe lines of code that start with an apostrophe and colored green by the editor are comments that explain the code or remind you and other programmers the purpose of the code. VBA ignores any line, or portion of a line, that begins with a single quote. Writing clear and appropriate comments in your code is an important topic, but that discussion is out of the scope of this article. Subsequent references to this code in the article don't include those four comment lines.\n\nWhen the macro recorder generates the code, it uses a complex algorithm to determine the methods and the properties that you intended. If you don't recognize a given property, there are many resources available to help you. For example, in the macro that you recorded, the macro recorder generated code that refers to the FormulaR1C1 property. Not sure what that means?\n\nSelect FormulaR1C1 in the recorded macro and press F1. The Help system runs a quick search, determines that the appropriate subjects are in the Excel Developer section of the Excel Help, and lists the FormulaR1C1 property. You can choose the link to read more about the property, but before you do, be aware of the Excel Object Model Reference link near the bottom of the window. Choose the link to view a long list of objects that Excel uses in its object model to describe the Worksheets and their components.\n\nChoose any one of those to see the properties and methods that apply to that particular object, along with cross references to different related options. Many Help entries also have brief code examples that can help you. For example, you can follow the links in the Borders object to see how to set a border in VBA.\n\nThe Borders code looks different from the recorded macro. One thing that can be confusing with an object model is that there is more than one way to address any given object, cell A1 in this example.\n\nSometimes the best way to learn programming is to make minor changes to some working code and see what happens as a result. Try it now. Open Macro1 in the Visual Basic Editor and change the code to the following.\n\nYou don't need to save the code to try it out, so return to the Excel document, choose Macros on the Developer tab, choose Macro1, and then choose Run. Cell A1 now contains the text Wow! and has a double-line border around it.\n\nFigure 3. Results of your first macro\n\nYou just combined macro recording, reading the object model documentation, and simple programming to make a VBA program that does something. Congratulations!\n\nDid not work? Read on for debugging suggestions in VBA.\n\nThe VBA community is very large; a search on the Web can almost always yield an example of VBA code that does something similar to what you want to do. If you cannot find a good example, try to break the task down into smaller units and search on each of those, or try to think of a more common, but similar problem. Starting with an example can save you hours of time.\n\nThat does not mean that free and well-thought-out code is on the Web waiting for you to come along. In fact, some of the code that you find might have bugs or mistakes. The idea is that the examples you find online or in VBA documentation give you a head start. Remember that learning programming requires time and thought. Before you get in a big rush to use another solution to solve your problem, ask yourself whether VBA is the right choice for this problem.\n\nProgramming can get complex quickly. It's critical, especially as a beginner, that you break the problem down to the smallest possible logical units, then write and test each piece in isolation. If you have too much code in front of you and you get confused or muddled, stop and set the problem aside. When you come back to the problem, copy out a small piece of the problem into a new module, solve that piece, get the code working, and test it to ensure that it works. Then move on to the next part.\n\nThere are two main types of programming errors: syntax errors, which violate the grammatical rules of the programming language, and run-time errors, which look syntactically correct, but fail when VBA attempts to execute the code.\n\nAlthough they can be frustrating to fix, syntax errors are easy to catch; the Visual Basic Editor beeps and flashes at you if you type a syntax error in your code.\n\nFor example, string values must be surrounded by double quotes in VBA. To find out what happens when you use single quotes instead, return to the Visual Basic Editor and replace the \"Wow!\" string in the code example with 'Wow!' (that is, the word Wow enclosed in single quotes). If you choose the next line, the Visual Basic Editor reacts. The error \"Compile error: Expected: expression\" is not that helpful, but the line that generates the error turns red to tell you that you have a syntax error in that line and as a result, this program will not run.\n\nChoose OK and change the text back to\"Wow!\".\n\nRuntime errors are harder to catch because the programming syntax looks correct, but the code fails when VBA tries to execute it.\n\nFor example, open the Visual Basic Editor and change the Value property name to ValueX in your Macro, deliberately introducing a runtime error since the Range object does not have a property called ValueX. Go back to the Excel document, open the Macros dialog box and run Macro1 again. You should see a Visual Basic message box that explains the run-time error with the text, \"Object doesn't support this property of method.\" Although that text is clear, choose Debug to find out more.\n\nWhen you return to the Visual Basic Editor, it is in a special debug mode that uses a yellow highlight to show you the line of code that failed. As expected, the line that includes the ValueX property is highlighted.\n\nYou can make changes to VBA code that is running, so change ValueX back to Value and choose the little green play button underneath the Debug menu. The program should run normally again.\n\nIt's a good idea to learn how to use the debugger more deliberately for longer, more complex programs. At a minimum, learn a how to set break-points to stop execution at a point where you want to take a look at the code, how to add watches to see the values of different variables and properties as the code runs, and how to step through the code line by line. These options are all available in the Debug menu and serious debugger users typically memorize the accompanying keyboard shortcuts.\n\nTo open the Developer Reference that is built into Office Help, open the Help reference from any Office application by choosing the question mark in the ribbon or by pressing F1. Then, to the right of the Search button, choose the dropdown arrow to filter the contents. Choose Developer Reference. If you don't see the table of contents in the left panel, choose the little book icon to open it, and then expand the Object Model Reference from there.\n\nFigure 4. Filtering on developer Help applies to all Office applications\n\nTime spent browsing the Object Model reference pays off. After you understand the basics of VBA syntax and the object model for the Office application that you are working with, you advance from guesswork to methodical programming.\n\nOf course the Microsoft Office Developer Center is an excellent portal for articles, tips, and community information.\n\nAll programmers get stuck sometimes, even after reading every reference article they can find and losing sleep at night thinking about different ways to solve a problem. Fortunately, the Internet has fostered a community of developers who help each other solve programming problems.\n\nAny search on the Web for \"office developer forum\" reveals several discussion groups. You can search on \"office development\" or a description of your problem to discover forums, blog posts, and articles as well.\n\nIf you have done everything that you can to solve a problem, don't be afraid to post your question to a developers forum. These forums welcome posts from newer programmers and many of the experienced developers are glad to help.\n\nThe following are a few points of etiquette to follow when you post to a developer forum:\n• None Before you post, look on the site for an FAQ or for guidelines that members want you to follow. Ensure that you post content that is consistent with those guidelines and in the correct section of the forum.\n• None Include a clear and complete code sample, and consider editing your code to clarify it for others if it is part of a longer section of code.\n• None Describe your problem clearly and concisely, and summarize any steps that you have taken to solve the problem. Take the time to write your post as well as you can, especially if you are flustered or in a hurry. Present the situation in a way that will make sense to readers the first time that they read the problem statement.\n• None Be polite and express your appreciation.\n\nGoing further with programming\n\nAlthough this article is short and only scratches the surface of VBA and programming, it is hopefully enough to get you started.\n\nThis section briefly discusses a few more key topics.\n\nIn the simple examples in this article you manipulated objects that the application had already created. You might want to create your own objects to store values or references to other objects for temporary use in your application. These are called variables.\n\nTo use a variable in VBA, must tell VBA which type of object the variable represents by using the Dim statement. You then set its value and use it to set other variables or properties.\n\nThe simple programs in this article execute one line at a time, from the top down. The real power in programming comes from the options that you have to determine which lines of code to execute, based on one or more conditions that you specify. You can extend those capabilities even further when you can repeat an operation many times. For example, the following code extends Macro1.\n\nType or paste the code into the Visual Basic Editor and then run it. Follow the directions in the message box that appears and change the text in cell A1 from Wow! to Yes! and run it again to see the power of looping. This code snippet demonstrates variables, branching and looping. Read it carefully after you see it in action and try to determine what happens as each line executes.\n\nAll of my Office applications: example code\n\nHere are a few scripts to try; each solves a real-world Office problem.\n\nBe aware that there are situations in which you might want to automate email in Outlook; you can use templates as well.\n\nBe aware that you can select a column of cells and run this macro to delete all rows in the selected column that have a blank cell.\n\nBe aware that this code loops through all of the slides and deletes all text boxes that don't have any text. The count variable decrements instead of increments because each time the code deletes an object, it removes that object from the collection, which reduces the count.\n\nBe aware that this code copies the currently open contact in Outlook into the open Word document. This code only works if there is a contact currently open for inspection in Outlook.\n\nHave questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback."
    },
    {
        "link": "https://learn.microsoft.com/en-us/office/vba/api/overview/excel",
        "document": "This reference contains conceptual overviews, programming tasks, samples, and references to help you develop Excel solutions.\n\nUse the table of contents in the navigation on the left to view the topics in the following sections:\n• None Object model reference: Provides reference materials for the Excel object model.\n\nHave questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback."
    },
    {
        "link": "https://microsoftpressstore.com/store/microsoft-excel-vba-and-macros-office-2021-and-microsoft-9780137521524",
        "document": "This eBook includes the following formats, accessible from your Account page after purchase:\n\nEPUB The open industry format known for its reflowable content and usability on supported mobile devices.\n\nPDF The popular standard, which reproduces the look and layout of the printed page.\n\nThis eBook requires no passwords or activation to read. We customize your eBook by discreetly watermarking it with your name, making it uniquely yours."
    },
    {
        "link": "https://support.microsoft.com/en-us/office/automate-tasks-with-the-macro-recorder-974ef220-f716-4e01-b015-3ea70e64937b",
        "document": "When you record a macro, the macro recorder records all the steps in Visual Basic for Applications (VBA) code. These steps can include typing text or numbers, clicking cells or commands on the ribbon or on menus, formatting cells, rows, or columns, or even importing data from an external source, say, Microsoft Access. Visual Basic Application (VBA) is a subset of the powerful Visual Basic programming language, and is included with most Office applications. Although VBA gives you the ability to automate processes within and between Office applications, it is not necessary to know VBA code or computer programming if the Macro Recorder does what you want. It is important to know that you when you record a macro, the Macro Recorder captures almost every move you make. So if you make a mistake in your sequence, for example, clicking a button that you did not intend to click, the Macro Recorder will record it. The resolution is to re-record the entire sequence, or modify the VBA code itself. This is why whenever you record something, it's best to record a process with which you're highly familiar. The more smoothly you record a sequence, the more efficiently the macro will run when you play it back. Macros and VBA tools can be found on the Developer tab, which is hidden by default, so the first step is to enable it. For more information, see Show the Developer tab. There are a few helpful things you should know about macros:\n• When you record a macro for performing a set of tasks in a range in Excel, the macro will only run on the cells within the range. So if you added an extra row to the range, the macro will not run the process on the new row, but only the cells within the range.\n• If you have planned a long process of tasks to record, plan to have smaller relevant macros instead of having one long macro.\n• It is not necessary that only tasks in Excel can be recorded in a macro. Your macro process can extend to other Office applications, and any other applications that support Visual Basic Application (VBA). For example, you can record a macro where you first update a table in Excel and then open Outlook to email the table to an email address.\n• On the Developer tab, in the Code group, click Record Macro.\n• In the Macro name box, enter a name for the macro. Make the name as descriptive as possible so you can quickly find it if you create more than one macro. Note: The first character of the macro name must be a letter. Subsequent characters can be letters, numbers, or underscore characters. Spaces cannot be used in a macro name; an underscore character works well as a word separator. If you use a macro name that is also a cell reference, you may get an error message that the macro name is not valid.\n• To assign a keyboard shortcut to run the macro, in the Shortcut key box, type any letter (both uppercase or lowercase will work) that you want to use. It is best to use Ctrl + Shift (uppercase) key combinations, because the macro shortcut key will override any equivalent default Excel shortcut key while the workbook that contains the macro is open. For instance, if you use Ctrl+Z (Undo), you will lose the ability to Undo in that Excel instance.\n• In the Store macro in list, select where you want to store the macro. In general, you’ll save your macro in the This Workbook location, but if you want a macro to be available whenever you use Excel, select Personal Macro Workbook . When you select Personal Macro Workbook, Excel creates a hidden personal macro workbook (Personal.xlsb) if it does not already exist, and saves the macro in this workbook.\n• In the Description box, optionally type a brief description of what the macro does. Although the description field is optional, it is recommended you enter one. Also, try to enter a meaningful description with any information that may be useful to you or other users who will be running the macro. If you create a lot of macros, the description can help you quickly identify which macro does what, otherwise you might have to guess.\n• Perform the actions that you want to record.\n• On the Developer tab, in the Code group, click Stop Recording . In the Developer tab, click Macros to view macros associated to a workbook. Or press Alt+ F8. This opens the Macro dialog box. Caution: Macros cannot be undone. Before you run a recorded macro for the first time, make sure that you’ve either saved the workbook where you want to run the macro, or better yet work on a copy of the workbook to prevent unwanted changes. If you run a macro and it doesn’t do what you want, you can close the workbook without saving it. Here's further information on working with macros in Excel. Read specific information on available security settings for macros, and their meaning. There are several different ways you can run a macro, such as using a shortcut key, graphic object, Quick Access Toolbar, a button, or even when opening a workbook. You use the Visual Basic Editor to edit the macros attached to a workbook. If a workbook contains a VBA macro that you would like to use elsewhere, you can copy the module that contains that macro to another open workbook by using the Microsoft Visual Basic Editor. Assign a macro to an object, shape or graphic\n• On a worksheet, right-click the object, graphic, shape, or the item to which you want to assign an existing macro, and then click Assign Macro.\n• In the Assign Macro box, click the macro that you want to assign. You can assign a macro to a graphic icon, and add it to Quick Access Toolbar, or the ribbon. You can assign macros to forms and ActiveX controls in a worksheet. Learn how to enable or disable macros in Office files. Find Help on using the Visual Basic Editor Learn how to find help on Visual Basic elements. Working with recorded code in the Visual Basic Editor (VBE) You can work with recorded code in the Visual Basic Editor (VBE) and add your own variables, control structures, and other code that the Macro Recorder cannot record. Since the macro recorder captures almost every step you take while recording, you can also clean up any unnecessary recorded code that serves no purpose in the macro. Reviewing your recorded code is a great way to learn or sharpen your VBA programming skills. For more information on modifying recorded code in an example, see Getting Started with VBA in Excel.\n\nThere are a few helpful things you should know about macros:\n• When you record a macro for performing a set of tasks in a range in Excel, the macro will only run on the cells within the range. So if you added an extra row to the range, the macro will not run the process on the new row, but only the cells within the original range.\n• If you have planned a long process of tasks to record, plan to have smaller relevant macros instead of having one long macro.\n• It is not necessary that only tasks in Excel can be recorded in a macro. Your macro process can extend to other Office applications, and any other applications that support Visual Basic Application (VBA). For example, you can record a macro where you first update a table in Excel and then open Outlook to email the table to an email address. Macros and VBA tools can be found on the Developer tab, which is hidden by default, so the first step is to enable it.\n• In the Customize the Ribbon category, in the Main Tabs list, select the Developer check box, and then click Save.\n• In the Macro name box, enter a name for the macro. Make the name as descriptive as possible, so you can quickly find it if you create more than one macro. Note: The first character of the macro name must be a letter. Subsequent characters can be letters, numbers, or underscore characters. Spaces cannot be used in a macro name; an underscore character works well as a word separator. If you use a macro name that is also a cell reference, you may get an error message that the macro name is not valid.\n• In the Store macro in list, select where you want to store the macro. In general, you’ll save your macro in the This Workbook location, but if you want a macro to be available whenever you use Excel, select Personal Macro Workbook. When you select Personal Macro Workbook, Excel creates a hidden personal macro workbook (PERSONAL.XLSB) if it does not already exist, and saves the macro in this workbook. Workbooks in that folder are opened automatically whenever Excel starts, and any code you have stored in the personal macro workbook will be listed in the Macro dialog, which is explained in the next section.\n• To assign a keyboard shortcut to run the macro, in the Shortcut key box, type any letter (both uppercase or lowercase will work) that you want to use. It is best to use key combinations that don't correspond to existing shortcut keys, as a macro shortcut key will override any equivalent default Excel shortcut key while the workbook that contains the macro is open.\n• In the Description box, optionally type a brief description of what the macro does. Although the description field is optional, it is recommended you enter one. It's helpful to enter a meaningful description with any information that may be useful to you or other users who will be running the macro. If you create a lot of macros, the description can help you quickly identify which macro does what, otherwise you might have to guess.\n• Perform the actions that you want to record. In the Developer tab, click Macros to view macros associated to a workbook. This opens the Macro dialog box. Note: Macros cannot be undone. Before you run a recorded macro for the first time, make sure that you’ve either saved the workbook where you want to run the macro, or better yet work on a copy of the workbook to prevent unwanted changes. If you run a macro and it doesn’t do what you want, you can close the workbook without saving it. Here's further information on working with macros in Excel. Learn to enable or disable macros in Excel for Mac. If a workbook contains a VBA macro that you would like to use elsewhere, you can copy the module that contains that macro to another open workbook by using the Microsoft Visual Basic Editor. Assign a macro to an object, shape or graphic\n• On a worksheet, right-click the object, graphic, shape, or the item to which you want to assign an existing macro, and then click Assign Macro.\n• In the Assign Macro box, click the macro that you want to assign. You can assign a macro to a graphic icon, and add it to Quick Access Toolbar, or the ribbon. You can assign macros to forms and ActiveX controls in a worksheet. On the Developer tab, click Visual Basic, or click the Tools menu > Macro > Visual Basic Editor…. Find Help on using the Visual Basic Editor Learn how to find help on Visual Basic elements."
    },
    {
        "link": "https://reddit.com/r/excel/comments/8zzecy/vba_comments_where_to_comment_and_other_best",
        "document": "Hi r/Excel. I'm pretty familiar with best practices involving the actual coding portion of VBA (indentations, easy to follow variable declarations, etc.) but realized I have no idea how and where to comment. Just had a few general discussion questions and wanted to hear some thoughts.\n• Where and how often do you usually comment in your code?\n• What types of things are necessary to comment on (eg. Do I have to explicitly state I'm starting a For loop every time; I've seen some people do that on StackOverflow but it seems like overkill)?\n• When you call another sub do you reference the module in the comments?\n• When writing your comments, what skill level in Excel do you assume your audience would have?\n• Are comments after your code on the same line, as opposed to above, frowned upon?"
    },
    {
        "link": "https://masterofficevba.com/vba-coding-constructs/maintainable-excel-vba-code-best-practices",
        "document": "This post is a companion to Best Practices for Excel VBA Code. It is a fuller version of the guidelines for writing maintainable Excel VBA code. It also touches on aspects of Excel VBA code flexibility and reusability.\n\nIt is common to see Excel VBA code with object names such as Chart1, Sheet1, ObjectA. Imagine how difficult it will be to read through such code in a few months or years.\n\nTo avoid that and ensure maintainable Excel VBA code, here are a few things you might want to adopt while naming ‘stuff’ in your projects:\n• Variable names should show the purpose, scope, and data type.\n• Name constants like variables, but capitalize the name part.\n• Name arrays like variables, but pluralize the name part and state the upper and lower bounds.\n• Name procedures using a [datatype]VerbNoun[Adjective] format. Functions will need a datatype prefix to make clear their return value type.\n• Name procedure arguments with datatypeVariableName_[IN][OUT][INOUT] format. The suffix prevents coding errors by clearly identifying whether the argument can:\n• Only be referenced by other variables (IN, i.e., right of ‘=’);\n• Itself only reference other variables (OUT, i.e., left of ‘=’);\n• Change default UserForm controls’ names before writing any code for them. The control type should be clear from the name.\n• Change default worksheets and workbooks’ names. Use more meaningful names, considering their purpose.\n\nSummarising critical data about significant modules, subroutines, and functions boost code readability and ensure maintainable Excel VBA code. This is not necessary for simple procedures.\n\nIt takes a lot of discipline. But you won’t get stung by the ‘had I known’ bug a few months or years down the line.\n\nI use the following header block on my projects, adapt it as required.\n\nUse both in-line (i.e., no code on the comment line) and end-of-line (placed at the end of code lines) comments. But do so sparingly, you shouldn’t aim to rewrite the code in English.\n\nDon’t comment on code that is clear by itself. Most code readers will be competent VBA programmers, so there’s no need to explain the code. Comment on the ‘why’ and not the ‘how’.\n• Add in-line comments to state what you’re about to do, what you have done so far, the reasoning behind decisions taken, any assumptions or need-to-knows.\n• Add end-of-line comments to state the ‘why’ of a line of code.\n\nIndenting and spacing your code makes no difference to computers. But it is essential to boosting human readability of the code and ensuring maintainable Excel VBA code.\n\nYou can indent using the space or tab keys. The default tab indent is four spaces, but you can change that in the Visual Basic Editor (VBE) as shown below. I agree with the commonly recommended indentation of three spaces.\n\nThe visual basic editor (VBE) automatically puts white space before and after operators (+, -, =, etc.). Separate large code blocks from other code by inserting a blank line between them.\n\nIndenting is excellent, but it doesn’t work well with heavily nested code blocks. The code block’s logic becomes harder to understand as nesting levels increase.\n\nThe code sample below illustrates proper code indentation and spacing.\n\n‘if not obvious, comment on what below block does and why it does it (not how!)\n\n‘if not obvious, comment on what below block does and why it does it (not how!) ‘if not obvious, comment on what below block does and why it does it (not how!) ‘if not obvious, comment on what below block does and why it does it (not how!) ‘if not obvious, comment on what below block does and why it does it (not how!) ‘enter your code here, add vertical space if the code block is lengthy ‘enter your code here, add vertical space if the code block is lengthy ‘enter your code here, add vertical space if the code block is lengthy ‘add a header block here, depending on complexity and length of the procedure ‘indent all lines b/w the subroutine or function start/end statements\n\nCareful Use of Exit For/Do in Nested Loops\n\nMid-loop exits boost efficiency, but code correctness and maintainability should always trump efficiency. In heavily nested loops, mid-loop exits usually lead to logic comprehension issues.\n\nPublic media adopts the thin-column format which is more natural for humans to read. It is good practice to keep code lines less than 120 characters.\n\nYou can do this by breaking long code lines into multiple lines, using the line continuation character, “_”.\n\nThere is no consensus limit on the vertical length of procedures. But more than 500 lines would be pushing it.\n\nUnconditionally branching from one code line to another may be handy at times, but the impact on readability is usually negative.\n\nMultiple GoTo statements make it harder to read, maintain and change your code, the exception being code for error handlers (On Error GoTo statement).\n\nIf you find that you need to repeat a code block, devise a procedure for it instead. Eliminating code clones makes it easier to maintain or change your code.\n\nKeep a definitive version of the procedure, so if you need to make changes or add more functionality, you will only need to do so in one place.\n\nThe DRY principle improves code reusability. You scope the procedures correctly, then use the Call statement to implement them wherever and whenever required in your code.\n\nGood neighbours help when needed but mind their own business otherwise (at least mine do). Your procedures should imitate this and focus on a single task.\n\nIf your procedure strays into doing more than its single primary job, you probably need a new one for that stray task.\n\nWhen your procedures tackle only one problem, you can edit, change, or add to them without crashing other parts of your code.\n\nUse Enumerations instead of Unchanging-Value Variables\n\nAvoid ‘magic numbers’, constants, and strings for variables with unchanging values. The first two impede readability while strings evaluate slowly.\n\nInstead, use meaningful enumerations to ensure maintainable Excel VBA code. The code sample below illustrates this."
    },
    {
        "link": "https://reddit.com/r/vba/comments/wzbxmx/vba_best_practices_discussion",
        "document": "I am still very new to VBA and I was wondering what are the best practices for organizing/structuring my projects. For instance, when should I create a new module instead of another submodule? My goal is to make my code more flexible and readable."
    },
    {
        "link": "http://bluetata.com/concise-excel-vba/CodingStandards.html",
        "document": "Always use Option Explicit as the first line in every code module. To switch this on automatically check Require Variable Declaration in Tools>Options>Editor.\n\nAvoid confusion over ByVal and ByRef. Be aware of the default for parameters being ByRef. Be explicit when passing parameters.\n• [Force] Only use ByRef where you intend to modify the parameter and pass the change back to the Caller.\n• [Force] Pass parameter ByVal if they are not to be changes\n• [Suggest] Explicitly use ByRef in an input parameter is to be changed, but watch for signs to redesign.\n\nPass by Value example:\n\nError handling must be used wherever practicable i.e. within each procedure. Use On Error Goto ErrHandler Handle errors where they occur. This may involve handling the error and raising it to the client code.\n\n[Force] Where global variables are used, they must all be defined in one module.\n\n[Force] Hard-coded(Magic) numbers and strings should be made into constants.\n\n[Force] Variables must be dimensioned on separate lines, and should specify a datatype (except where this is not possible – as when using certain scripting languages).\n\n[Suggest] All variables must be declared at the top of each procedure or module and must ideally be grouped so that all variable types are placed together.\n\n[Suggest] Variants may be used where appropriate (e.g. to hold arrays returned by a function, or where Nulls may be encountered), but alternative data types should be used where possible.\n\n[Suggest] Advoid using Variants data type unless absolutely necessary. Variants are slower then native types, when there’s large dataset or a big macro project.\n\n[Force] Where dates are displayed to users you should avoid ambiguous formats where either years or days vs. months might be confused (such as DD/MM/YY), however the ultimate decision maker on this issue is the customer.\n\nWhere dates are being handled “behind the scenes” care should be taken to avoid UK/US format confusion. Particular care should be taken when including UK-format dates in literal SQL strings (where the target Microsoft application may expect dates to be in US format). Where there is the slightest possibility of doubt pass the year, month and day parts separately into DateSerial, of format them in the universally acceptable ISO format YYYY-MM-DD.\n\nObject names are made up of four parts: prefix tag base name qualifier The four parts are assembled as follows: [prefixes]tag[BaseName][qualifier] Note: The brackets denote that these components are optional and are not part of the name.\n\nPrefixes and tags are always lowercase so your eye goes past them to the first uppercase letter where the base name begins. This makes the names more readable. The base and qualifier components begin with an uppercase letter.\n\nThe tag is the only required component, but in almost all cases the name will have the base name component since you need to be able to distinguish two objects of the same type.\n\n[suggest] To avoid defining an ambiguous variable, it is strongly suggest to use 3-letter abbreviations instead of using a single-letter abbreviations\n\nThe base name succinctly describes the object, not its class. That is, a base name for a variable for an invoice form must be InvoiceEntry not InvoiceForm as the tag will describe the object. The base name is composed in the form Noun[Verb]. For example, in the variable name blnColourMatch “ColourMatch” is the base name. Naming variables in this way helps to keep them grouped together in documentation and cross-referencing because they will be sorted together alphabetically.\n\nObject qualifiers may follow a name and further clarify names that are similar. Continuing with our previous example, if you kept two indexes to an array, one for the first item and one for the last this entails two qualified variables such as intColourMatchFirst and intColourMatchLast. Other examples of qualifiers:\n\n[Force] Array names must be prefixed with “a” or “arr”. The upper and lower bounds ofthe array must be declared explicitly (unless they’re not known at design-time).\n\nEach word must be capitalised and the words separated with an underscore. The base name must be a description of what the constant represents.\n\nAPI declarations must be laid out so that they are easily readable on the screen.\n\nIn VB you can call external procedures in DLLs when you know the entry point (the name of the function in the DLL). However, the caveat is that you can only declare the external procedure once. If you load a library that calls the same Windows API that your module calls, you will get the infamous error, “Tried to load module with duplicate procedure definition.”\n\n1 Classes which hold collections should have the same “C” prefix as any other classes, but should have a plural name (based on the type of objects held in the collection. E.g. a class to hold a single person would be named CPerson, whereas a collection of Person objects would be named CPersons.\n\nTags should not be prefixed to Function or Sub names, but should be appended to the parameters of these routines. For example:\n\nFunction return values should usually be held in a temporary variable and then assigned to the function variable at the end of the routine. This has two benefits. The code is not specific to the name of the function so portability is aided when cutting and pasting part of the function code elsewhere; also the value of the function variable may be used in calculations, otherwise a recursive call would be generated. Example:\n\nShould you find it useful, you may also prefix parameter names with arg to avoid confusion between variables passed as parameters and those local to the subroutine . Example:\n\nHowever, should you choose to adopt this standard it must be applied consistently across the entire project\n\nControls must be named with uniform prefixes strictly adhering to the following list.\n\nThe number of menu options can be great, so it is recommended that there be a standard for the names given to menus. The tag for any menu item whether an option or title is mnu. Prefixing must ideally continue beyond the initial prefix. The first prefix after mnu is the menu bar title followed by the option then any subsequent option.\n\nIf you include references to both ADO and DAO in the same project you must explicitly specify which object model you wish to use when declaring variables. Example:\n\nThe following is a suggested naming convention for use with MS Access objects – you may find it useful for larger Access projects which have many objects within the same database.\n\nWhen working in a VB or VBA design environment you must have the Tab Width set to 4 (see the Editor tab in Tools > Options). This is the default VB setting, and using it ensures compatibility when code is worked on by more than one person.\n\nCode must be indented consistently adhering to the following rules:\n• Declarations must not be indented.\n• On Error statements and line labels/numbers must not be indented.\n• Code within If-Else-EndIf, For-Next, Do While/Until and any other loops must be indented a further tab stop within the body.\n• Code between add/edit and update statements must be indented a further tab stop.\n• Case statements must be indented to one stop after the Select Case. Code following the Case statements must be indented a further Tab stop.\n• Code between With and End With statements must be indented by one tab stop.\n• Code within error trap must be indented by to one tab stop. Example\n• Code must be commented appropriately. The goal should be to improve understanding and maintainability of the code.\n• Comments should explain the reasoning behind the code. It may be obvious to the original developer what a piece of code does but somebody reading it may have no idea why it has to be there. When you write a piece of code, imagine someone else having to read through it 3 months later. Will it make sense to them?\n• Important variable declarations may include an inline comment describing the use of the variable being declared.\n• Comments for individual lines appear above, or of the code to which they refer.\n• The functional overview comment of a procedure may be indented one space to aid readability.\n• You can also add comments to your code with the keyword. However, the symbol are easier to use and require less space and memory.\n\nAvoid over-commenting code when doing maintenance work. Bear in mind the need to maintain overall clarity in the code, and remember that revision history should be taken care of by SourceSafe Make sure that any existing comments still make sense after you’ve made your changes - paying particular attention to any comments/explanations in the header of the routine. You are responsible for ensuring that all existing comments remain accurate (and that they still make sense) after your changes have been implemented. Although SourceSafe controls the history, It is handy to future users if new blocks of code are commented with the date, initials of developer and the CR number to aim future developers reading the code.\n\nWhen you include one or more routines written by other developers in your project you should ensure that any author (and assumption/purpose) information in the routine header is kept accurate. You should probably retain the original author’s name, but you must also include your own name if you have changed it in any way at all.\n\nThese are treated as a code IF statement would be. All code relating to the condition must be indented as if it was a normal IF block. These can be useful for including/excluding debug code etc. For example:\n\nConsistent error handlers must be implemented. The following error handler should be used:\n\nThe labels ErrHandler and ExitHere are used both for consistency across routines, and to facilitate easier copying and pasting of error handlers between routines."
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/program-structure/coding-conventions",
        "document": "Microsoft develops samples and documentation that follow the guidelines in this topic. If you follow the same coding conventions, you may gain the following benefits:\n• None Your code will have a consistent look, so that readers can better focus on content, not layout.\n• None Readers understand your code more quickly because they can make assumptions based on previous experience.\n• None You can copy, change, and maintain the code more easily.\n• None You help ensure that your code demonstrates \"best practices\" for Visual Basic.\n• None For information about naming guidelines, see Naming Guidelines topic.\n• None Do not use \"My\" or \"my\" as part of a variable name. This practice creates confusion with the objects.\n• None You do not have to change the names of objects in auto-generated code to make them fit the guidelines.\n• None Insert tabs as spaces, and use smart indenting with four-space indents.\n• None Use Pretty listing (reformatting) of code to reformat your code in the code editor. For more information, see Options, Text Editor, Basic (Visual Basic).\n• None Use only one statement per line. Don't use the Visual Basic line separator character ( ).\n• None Avoid using the explicit line continuation character \" \" in favor of implicit line continuation wherever the language allows it.\n• None Use only one declaration per line.\n• None If Pretty listing (reformatting) of code doesn't format continuation lines automatically, manually indent continuation lines one tab stop. However, always left-align items in a list.\n• None Add at least one blank line between method and property definitions.\n• None Put comments on a separate line instead of at the end of a line of code.\n• None Start comment text with an uppercase letter, and end comment text with a period.\n• None Insert one space between the comment delimiter ( ) and the comment text.\n• None Do not surround comments with formatted blocks of asterisks.\n• None When you use the method, use the default construct for new console applications, and use for command-line arguments. Sub Main() For Each argument As String In My.Application.CommandLineArgs ' Add code here to use the string variable. Next End Sub\n• None Use string interpolation to concatenate short strings, as shown in the following code.\n• None To append strings in loops, use the StringBuilder object. Dim longString As New System.Text.StringBuilder For count As Integer = 1 To 1000 longString.Append(count) Next\n\nDo not explicitly qualify the arguments ( and ) to event handlers. If you are not using the event arguments that are passed to an event (for example, , ), use relaxed delegates, and leave out the event arguments in your code:\n• Use rather than unsigned types, except where they are necessary.\n• None Use the short syntax when you initialize arrays on the declaration line. For example, use the following syntax. Do not use the following syntax. Dim letters2() As String = New String() {\"a\", \"b\", \"c\"}\n• None Put the array designator on the type, not on the variable. For example, use the following syntax: Do not use the following syntax:\n• None Use the { } syntax when you declare and initialize arrays of basic data types. For example, use the following syntax: Do not use the following syntax:\n\nUse the With Keyword\n\nWhen you make a series of calls to one object, consider using the keyword:\n\nUse the Try...Catch and Using Statements when you use Exception Handling\n\nDo not use .\n\nUse instead of Not ... Is Nothing .\n• None Use short instantiation. For example, use the following syntax: The preceding line is equivalent to this:\n• None Use object initializers for new objects instead of the parameterless constructor: Dim orderLog As New EventLog With { .Log = \"Application\", .Source = \"Application Name\", .MachineName = \"Computer Name\"}\n• None Use rather than :\n• None Use , and do not instantiate the delegate explicitly: Dim closeItem As New ToolStripMenuItem( \"Close\", Nothing, AddressOf ToolStripMenuItem1_Click) Me.MainMenuStrip.Items.Add(closeItem)\n• None When you define an event, use the short syntax, and let the compiler define the delegate: Public Event SampleEvent As EventHandler(Of SampleEventArgs) ' or Public Event SampleEvent(ByVal source As Object, ByVal e As SampleEventArgs)\n• None Do not verify whether an event is (null) before you call the method. checks for before it raises the event.\n\nCall members by using the class name, not from an instance variable.\n\nXML literals simplify the most common tasks that you encounter when you work with XML (for example, load, query, and transform). When you develop with XML, follow these guidelines:\n• None Use XML literals to create XML documents and fragments instead of calling XML APIs directly.\n• None Import XML namespaces at the file or project level to take advantage of the performance optimizations for XML literals.\n• None Use the XML axis properties to access elements and attributes in an XML document.\n• None Use embedded expressions to include values and to create XML from existing values instead of using API calls such as the method: Private Function GetHtmlDocument( ByVal items As IEnumerable(Of XElement)) As String Dim htmlDoc = <html> <body> <table border=\"0\" cellspacing=\"2\"> <%= From item In items Select <tr> <td style=\"width:480\"> <%= item.<title>.Value %> </td> <td><%= item.<pubDate>.Value %></td> </tr> %> </table> </body> </html> Return htmlDoc.ToString() End Function\n• Dim seattleCustomers = From cust In customers Where cust.City = \"Seattle\"\n• None Provide names for elements in a query to make sure that property names of anonymous types are correctly capitalized using Pascal casing: Dim customerOrders = From customer In customers Join order In orders On customer.CustomerID Equals order.CustomerID Select Customer = customer, Order = order\n• None Rename properties when the property names in the result would be ambiguous. For example, if your query returns a customer name and an order ID, rename them instead of leaving them as and in the result: Dim customerOrders2 = From cust In customers Join ord In orders On cust.CustomerID Equals ord.CustomerID Select CustomerName = cust.Name, OrderID = ord.ID\n• None Use type inference in the declaration of query variables and range variables:\n• Dim newyorkCustomers = From cust In customers Where cust.City = \"New York\" Select cust.LastName, cust.CompanyName\n• None Use clauses before other query clauses so that later query clauses operate on the filtered set of data: Dim newyorkCustomers2 = From cust In customers Where cust.City = \"New York\" Order By cust.LastName\n• None Use the clause to explicitly define a join operation instead of using the clause to implicitly define a join operation: Dim customerList2 = From cust In customers Join order In orders On cust.CustomerID Equals order.CustomerID Select cust, order"
    }
]