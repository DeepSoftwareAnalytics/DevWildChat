[
    {
        "link": "https://stackoverflow.com/questions/25561009/how-do-you-i-use-mandarin-characters-in-matplotlib",
        "document": "Here is a solution that works for me on Python 2.7 and Python 3.3, using both and methods with Chinese.\n\nis hard coded to a font file, while grabs a font by family name (but for I had to try a couple to find one that would work). Both of those are particular to my system, in that they reference fonts I have, so you quite likely will need to change them to reference fonts/paths on your system.\n\nThe font loaded by default doesn't seem to support Chinese characters, so it was primarily a font choice issue."
    },
    {
        "link": "https://beverly-wang0005.medium.com/how-to-display-chinese-character-in-matplotlib-dc444723681a",
        "document": "I met this issue (Chinese characters, or other non-ascii characters) recently when developing an App. It is not complicated to solve, but rewarding to elaborate the solution here considering my bad memory.\n\nYou can download the font file .ttf online, but the most safe and direct way is to find the font file that is already available in your operation system (Most fonts are available in OS).\n\nIn Windows, the font file is usually located at \\WINDOWS\\SYSTEM or \\WINDOWS\\FONTS. In MacOS, the font file is located at /System/Library/Fonts/. Heiti (STHeiti Medium.ttc) is the default Chinese font file in MacOS. However, it is in .ttc format and need to be converted to .ttf. The online converter is available at: https://transfonter.org/ttc-unpack\n\nAfter find and convert the file to the proper format, copy this file to a specific folder. You can copy it to a project folder (e.g. Desktop/Testproject/font) or to matplotlib font folder. To find matplotlib font folder, run the command to get location of matplotlib config file\n\nThe result looks like The font folder is …/matplotlib/mpl-data/fonts/ttf.\n\nSomehow, the following rebuilt command does not work for me as I kept meeting the issue below.\n\nBut when I check if the font file has been installed properly by:\n\nIt actually shows that Heiti font file has been installed properly. Given that, I can set the below properties before all the figure I plan to display.\n\nMethod 2: There is another way to work around, too.\n\nManually specify the font file location and set font properties and then specify font property in each figure element.\n\nThe figure will be:\n\nThis method will generate exactly the same figure as above."
    },
    {
        "link": "https://matplotlib.org/stable/users/explain/text/fonts.html",
        "document": "Go to the end to download the full example code.\n\nMatplotlib needs fonts to work with its text engine, some of which are shipped alongside the installation. The default font is DejaVu Sans which covers most European writing systems. However, users can configure the default fonts, and provide their own custom fonts. See Customizing text properties for details and Text with non-latin glyphs in particular for glyphs not supported by DejaVu Sans.\n\nMatplotlib also provides an option to offload text rendering to a TeX engine ( ), see Text rendering with LaTeX.\n\nFonts have a long (and sometimes incompatible) history in computing, leading to different platforms supporting different types of fonts. In practice, Matplotlib supports three font specifications (in addition to pdf 'core fonts', which are explained later in the guide): One of the oldest types, introduced by Adobe Similar to Type 1 in terms of introduction Newer than previous types, used commonly today, introduced by Apple Restricted subset of PostScript, charstrings are in bytecode Full PostScript language, allows embedding arbitrary code (in theory, even render fractals when rasterizing!) Adobe disabled support for authoring with Type 1 fonts in January 2023.\n• \n• None 42 is the Answer to Life, the Universe, and Everything!\n• None Matplotlib uses the external library fontTools to subset these types of fonts\n• \n• None OpenType is a new standard for digital type fonts, developed jointly by Adobe and Microsoft The PDF and PostScript formats support embedding fonts in files, allowing the display program to correctly render the text, independent of what fonts are installed on the viewer's computer and without the need to pre-rasterize the text. This ensures that if the output is zoomed or resized the text does not become pixelated. However, embedding full fonts in the file can lead to large output files, particularly with fonts with many glyphs such as those that support CJK (Chinese/Japanese/Korean). The solution to this problem is to subset the fonts used in the document and only embed the glyphs actually used. This gets both vector text and small files sizes. Computing the subset of the font required and writing the new (reduced) font are both complex problem and thus Matplotlib relies on fontTools and a vendored fork of ttconv. Currently Type 3, Type 42, and TrueType fonts are subsetted. Type 1 fonts are not. In addition to the ability to embed fonts, as part of the PostScript and PDF specification there are 14 Core Fonts that compliant viewers must ensure are available. If you restrict your document to only these fonts you do not have to embed any font information in the document but still get vector text. This is especially helpful to generate really lightweight documents:\n\nText can output to SVG in two ways controlled by (default: ):\n• None as a path ( ) in the SVG\n• None as string in the SVG with font styling on the element ( ) When saving via Matplotlib will compute the path of the glyphs used as vector paths and write those to the output. The advantage of doing so is that the SVG will look the same on all computers independent of what fonts are installed. However the text will not be editable after the fact. In contrast, saving with will result in smaller files and the text will appear directly in the markup. However, the appearance may vary based on the SVG viewer and what fonts are available.\n\nInternally, using a font in Matplotlib is a three step process:\n• None based on the object the methods on are used to select the closest \"best\" font Matplotlib is aware of (except for mode of SVG).\n• None the Python proxy for the font object is used by the backend code to render the text -- the exact details depend on the backend via . The algorithm to select the \"best\" font is a modified version of the algorithm specified by the CSS1 Specifications which is used by web browsers. This algorithm takes into account the font family name (e.g. \"Arial\", \"Noto Sans CJK\", \"Hack\", ...), the size, style, and weight. In addition to family names that map directly to fonts there are five \"generic font family names\" (serif, monospace, fantasy, cursive, and sans-serif) that will internally be mapped to any one of a set of fonts. Currently the public API for doing step 2 is (and that method on the global instance is aliased at the module level as ), which will only find a single font and return the absolute path to the font on the filesystem.\n\nThere is no font that covers the entire Unicode space thus it is possible for the users to require a mix of glyphs that cannot be satisfied from a single font. While it has been possible to use multiple fonts within a Figure, on distinct instances, it was not previous possible to use multiple fonts in the same instance (as a web browser does). As of Matplotlib 3.6 the Agg, SVG, PDF, and PS backends will \"fallback\" through multiple fonts in a single instance: \"There are 几个汉字 in between!\" The string \"There are 几个汉字 in between!\" rendered with 2 fonts. Internally this is implemented by setting The \"font family\" on objects to a list of font families. A (currently) private API extracts a list of paths to all of the fonts found and then constructs a single object that is aware of all of the fonts. Each glyph of the string is rendered using the first font in the list that contains that glyph. A majority of this work was done by Aitik Gupta supported by Google Summer of Code 2021."
    },
    {
        "link": "https://squash.io/how-to-use-matplotlib-for-chinese-text-in-python",
        "document": ""
    },
    {
        "link": "https://matplotlib.org/stable/users/explain/text/text_props.html",
        "document": "The base default font is controlled by a set of rcParams. To set the font for mathematical expressions, use the rcParams beginning with (see mathtext). Default font size in points. Relative font sizes ( , ) are computed against this size. Matplotlib can use font families installed on the user's computer, i.e. Helvetica, Times, etc. Font families can also be specified with generic-family aliases like ( ). To access the full list of available fonts: The mapping between the generic family aliases and actual font families (mentioned at default rcParams) is controlled by the following rcParams: If any of generic family names appear in , we replace that entry by all the entries in the corresponding rcParam mapping. For example: # This is effectively translated to: As of v2.0 the default font, DejaVu, contains glyphs for many western alphabets, but not other scripts, such as Chinese, Korean, or Japanese. To set the default font to be one that supports the code points you need, prepend the font name to (recommended), or to the desired alias lists. The generic family alias lists contain fonts that are either shipped alongside Matplotlib (so they have 100% chance of being found), or fonts which have a very high probability of being present in most systems. A good practice when setting custom font families is to append a generic-family to the font-family list as a last resort. You can also set it in your file: To control the font used on per-artist basis use the name, fontname or fontproperties keyword arguments documented in Text properties and layout. On linux, fc-list can be a useful tool to discover the font name; for example lists all of the fonts that support Chinese."
    },
    {
        "link": "https://stackoverflow.com/questions/48374379/display-foreign-language-in-matplotlib-in-virtual-env",
        "document": "I am working with matplotlib in Jupyter, and my data includes Korean characters. Matplotlib does not support Korean character yet, so I was advised to set character on matplotlib manually. Without setting the font, my sample graph displaces square empty boxes.\n\nFollowing few examples on the internet, here's what I have done.\n• Copy the font in my Font directory ('/Users/Library/Fonts')\n\nAnd I ran my matplotlib once more to see if it would turn out correctly, but I still get empty boxes.\n\nThis is the code I ran in Jupyter.\n\nAnd this is the error message.\n\nSo this is what I think I am doing wrong. I am not putting the font file in the right directory for my Jupyter, which is running on virenv on my machine. My question is where is this directory? I checked 'font_manager.py' file but I could not get much out of it. The file says that my OS font directory is indeed\n\nI appreciate any help! Thank you in advance!"
    },
    {
        "link": "https://python-graph-gallery.com/custom-fonts-in-matplotlib",
        "document": "Fonts are one of the most important aspects of a good visualization. Choosing the right font can make a huge difference in the readability and overall quality of a chart. The goal of this post is to show how to import and use custom fonts in Matplotlib.\n\nPyFonts is a python library that makes it super easy to load font for matplotlib. You can install it with and then use its function to load any font from the web. Check out the dedicated post on how to use PyFonts to learn more about it!\n\nIf you want to use a font that have locally, you have to ensure it's well installed on your computer. For example, if I want to find the font on my computer, I can use the following code:\n\nIf your prefer using your terminal, you can use the following command: This will return all the fonts that contain the word in their name.\n\nIf you don't have the font you want, you can download it from the internet using sites like Google font. Once downloaded, you generally will have to double-click on the font file (usually ending with , or similar) to install it on your computer.\n\nOnce you have found your font path, you can use it in your code. For example, if I want to use the font, both in normal and bold style, we can use the following code:\n\nOther way to define font in code Let's take an example with other fonts:\n• Hydrophilia Iced from Floodfonts. Here you can download a zipped folder that contains the font as both and types. Make sure you install the version for Matplotlib.\n• Special Elite. Available from Google Fonts here.\n• Download fonts from the sources listed above.\n• Install fonts on your system. Usually, double-click on the file and then click on the Install button in the window that pops up. Note that Matplotlib handles fonts in True Type Format , so make sure you install fonts ending in .\n• Clear matplotlib cache by running the following command on your terminal\n• If you're using a Jupyter notebook, this is a good time to restart it.\n• Run the following code to tell Matplotlib to look for fonts in your system (it will return a list with font paths)\n• Check the fonts are accesible by Matplotlib with The result should be a path to the font like the following What to do if it fails If the font is unreachable by Matplotlib you will have a message like Try with adding your font into the system library. Then, just repeat steps 2 to 6."
    },
    {
        "link": "https://matplotlib.org/stable/users/explain/text/fonts.html",
        "document": "Go to the end to download the full example code.\n\nMatplotlib needs fonts to work with its text engine, some of which are shipped alongside the installation. The default font is DejaVu Sans which covers most European writing systems. However, users can configure the default fonts, and provide their own custom fonts. See Customizing text properties for details and Text with non-latin glyphs in particular for glyphs not supported by DejaVu Sans.\n\nMatplotlib also provides an option to offload text rendering to a TeX engine ( ), see Text rendering with LaTeX.\n\nFonts have a long (and sometimes incompatible) history in computing, leading to different platforms supporting different types of fonts. In practice, Matplotlib supports three font specifications (in addition to pdf 'core fonts', which are explained later in the guide): One of the oldest types, introduced by Adobe Similar to Type 1 in terms of introduction Newer than previous types, used commonly today, introduced by Apple Restricted subset of PostScript, charstrings are in bytecode Full PostScript language, allows embedding arbitrary code (in theory, even render fractals when rasterizing!) Adobe disabled support for authoring with Type 1 fonts in January 2023.\n• \n• None 42 is the Answer to Life, the Universe, and Everything!\n• None Matplotlib uses the external library fontTools to subset these types of fonts\n• \n• None OpenType is a new standard for digital type fonts, developed jointly by Adobe and Microsoft The PDF and PostScript formats support embedding fonts in files, allowing the display program to correctly render the text, independent of what fonts are installed on the viewer's computer and without the need to pre-rasterize the text. This ensures that if the output is zoomed or resized the text does not become pixelated. However, embedding full fonts in the file can lead to large output files, particularly with fonts with many glyphs such as those that support CJK (Chinese/Japanese/Korean). The solution to this problem is to subset the fonts used in the document and only embed the glyphs actually used. This gets both vector text and small files sizes. Computing the subset of the font required and writing the new (reduced) font are both complex problem and thus Matplotlib relies on fontTools and a vendored fork of ttconv. Currently Type 3, Type 42, and TrueType fonts are subsetted. Type 1 fonts are not. In addition to the ability to embed fonts, as part of the PostScript and PDF specification there are 14 Core Fonts that compliant viewers must ensure are available. If you restrict your document to only these fonts you do not have to embed any font information in the document but still get vector text. This is especially helpful to generate really lightweight documents:\n\nText can output to SVG in two ways controlled by (default: ):\n• None as a path ( ) in the SVG\n• None as string in the SVG with font styling on the element ( ) When saving via Matplotlib will compute the path of the glyphs used as vector paths and write those to the output. The advantage of doing so is that the SVG will look the same on all computers independent of what fonts are installed. However the text will not be editable after the fact. In contrast, saving with will result in smaller files and the text will appear directly in the markup. However, the appearance may vary based on the SVG viewer and what fonts are available.\n\nInternally, using a font in Matplotlib is a three step process:\n• None based on the object the methods on are used to select the closest \"best\" font Matplotlib is aware of (except for mode of SVG).\n• None the Python proxy for the font object is used by the backend code to render the text -- the exact details depend on the backend via . The algorithm to select the \"best\" font is a modified version of the algorithm specified by the CSS1 Specifications which is used by web browsers. This algorithm takes into account the font family name (e.g. \"Arial\", \"Noto Sans CJK\", \"Hack\", ...), the size, style, and weight. In addition to family names that map directly to fonts there are five \"generic font family names\" (serif, monospace, fantasy, cursive, and sans-serif) that will internally be mapped to any one of a set of fonts. Currently the public API for doing step 2 is (and that method on the global instance is aliased at the module level as ), which will only find a single font and return the absolute path to the font on the filesystem.\n\nThere is no font that covers the entire Unicode space thus it is possible for the users to require a mix of glyphs that cannot be satisfied from a single font. While it has been possible to use multiple fonts within a Figure, on distinct instances, it was not previous possible to use multiple fonts in the same instance (as a web browser does). As of Matplotlib 3.6 the Agg, SVG, PDF, and PS backends will \"fallback\" through multiple fonts in a single instance: \"There are 几个汉字 in between!\" The string \"There are 几个汉字 in between!\" rendered with 2 fonts. Internally this is implemented by setting The \"font family\" on objects to a list of font families. A (currently) private API extracts a list of paths to all of the fonts found and then constructs a single object that is aware of all of the fonts. Each glyph of the string is rendered using the first font in the list that contains that glyph. A majority of this work was done by Aitik Gupta supported by Google Summer of Code 2021."
    },
    {
        "link": "https://stackoverflow.com/questions/70561033/how-do-i-render-multiple-languages-e-g-chinese-cyrillic-english-at-once-in",
        "document": "I am plotting statistics related to different translations of a word. Using python / matplotlib under Ubuntu I cannot get my legend to show all my languages.\n\nseems to do fine with various Unicode, but not Chinese. I get the following:\n\nHow can I get all my labels to show in one legend? If this is not possible, why not?"
    },
    {
        "link": "https://github.com/matplotlib/matplotlib/issues/15260",
        "document": "It is impossible to set more than one font in a legend making it impossible to label data in different languages, such as chinese, arabic and emojis, in the same legend. Allowing prop to accept lists of dictionaries would solve this issue.\n\nWhile it would be nice if matplotlib searched for fonts with support for unicode characters, simply allowing lists of fonts to be specified for each handle label, rather than enforcing using one font."
    }
]