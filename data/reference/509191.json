[
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_flexible_box_layout/Aligning_items_in_a_flex_container",
        "document": "Flexbox provides several properties to control alignment and spacing, with and being fundamental for centering elements. To center an element, we use the property to align the item on the cross axis, which in this case is the block axis running vertically. We use to align the item on the main axis, which in this case is the inline axis running horizontally. Change the size of the container or nested element in the code example below. The nested element always remains centered.\n\nThe property, set on the flex container, and the property, set on flex items, control the alignment of flex items on the cross axis. The cross axis runs down the columns if is and along the rows if is . In this basic flex example, we're using cross-axis alignment. When we add to a container, the child items become flex items arranged in a row. By default, they will all stretch to match the height of the tallest item, as that item defines the height of the items on the cross axis. If the flex container has a height set, the items will stretch to that height, regardless of how much content is in each item. The reason the items become the same height is that the initial value of , the property that controls alignment on the cross axis, is set to . We can use other values to control how the items align: In the example below, the value of is . Try the other values and see how the items align against each other in the flex container.\n\nThe property sets the property on all of the flex items as a group. This means you can explicitly declare the property to target a single item. The property accepts all of the same values as , plus a value of , which resets the value to that defined on the flex container. In this next live example, the flex container has , which means the items are all aligned to the start of the cross axis. Using the selector, the first item is set to . Another item with the class has set. Change the value of or change the values of on the individual items to see how this works.\n\nThus far, we have looked at alignment behavior when the defaults to while working in a language written top to bottom, with a horizontal main axis and vertical cross axis. Keeping the same writing mode, when the is changed to , the and properties will align the items to the left and right instead of top and bottom; these properties are still aligning items along the cross axis, but the cross axis is now horizontal! You can try this out in the example below, which has a flex container with yet otherwise is exactly the same as the previous example.\n\nAligning content on the cross axis with the property So far, we have focused on aligning items or individual items inside the area defined by a flex container containing a single line of flex items. When flex items are allowed to wrap across multiple lines, the property can be used to control the distribution of space between the lines, also known as packing flex lines. For to have an effect, the cross axis dimension (the height in this case) of the flex container must be greater than needed to display the items. It then works on all the items as a set. The values dictate what happens with the extra available space and the alignment of the entire set of items within it. The property takes the following values: In the live example below, the flex container has a height of , which is more than needed to display our items. The value of is , which means that the available space is shared out between the flex lines, which are placed flush with the start and end of the container on the cross axis. Try out the other values to see how the property works. Once again we can switch our to in order to see how this property behaves when we are working by column. As before, we need enough space in the cross axis to have some free space after displaying all of the items.\n\nNow that we have seen how alignment works on the cross axis, we can take a look at the main axis. Here we only have one property available to us — . This is because we are only dealing with items as a group on the main axis. With we control what happens with available space, should there be more space than is needed to display the items. In our initial example with on the container, the items display as a row and all line up at the start of the container. This is due to the initial value of being , which behaves as . Any available space is placed at the end of the items. The values aren't relevant in this dimension. Otherwise, the property accepts the same values as . In the example below, the value of is . The available space after displaying the items is distributed between the items. The left and right item line up flush with the start and end. If the main axis is in the block direction because is set to , then will distribute space between items in that dimension as long as there is space in the flex container to distribute.\n\nRemember that with all of these alignment methods, the values of and are writing mode-aware. If the value of is and the writing mode is left-to-right, as in English, the items will align starting at the left side of the container. However if the writing mode is right-to-left as in Arabic, the items will line up starting at the right side of the container. The live example below has the property set to to force a right-to-left flow for our items. You can remove this, or change the values of to see how flexbox behaves when the start of the inline direction is on the right.\n\nThe direction of of the line will also change if you change the property — for example, using instead of . In this next example, and define the direction and location of the items within the flex container. In a left to right language, the items line up on the left. Try changing to . You will see that the items now move to the right-hand side, and the visual order of the items is reversed. While this may all seem a little confusing, the rule to remember is that unless you do something to change it, flex items lay themselves out in the direction that words are laid out in the language of your document along the inline, row axis. and will be where the beginning of a sentence of text would start. You can switch them to display in the block direction for the language of your document by selecting . Then, and will be where the top of your first paragraph of text would start. If you change to one of the reverse values, they will lay themselves out from the end axis and in the reverse order to the way words are written in the language of your document. Then, and will change to the end of that axis — so to the location where your lines would wrap if working in rows, or at the end of your last paragraph of text in the block direction.\n\nWe don't have a or property available to us on the main axis as our items are treated as a group on that axis. However it is possible to do some individual alignment in order to separate an item or a group of items from others by using auto margins along with flexbox. A common pattern is a navigation bar where some key items are aligned to the right, with the main group on the left. You might think that this should be a use case for a property. However, consider the image below. As an example, take the following image with three items on one side and two on the other. If were to work on flex items and was set on item d, it would also change the alignment of item e that follows, which may or may not be what is intended. Instead, the d item can be pushed over using CSS margins. In this live example, item 4 is separated from the first three items by setting to , which consumes all the space it can in its axis. This is how centering a block with auto left and right works. Each side tries to take as much space as it can, and so the block is pushed into the middle. In this live example, the flex items are arranged in a row with the basic flex values, and the class , set on the fourth item, applies to that item. Try removing the class on the fourth item or adding the class to a different item to see how it works.\n\nTo create a gap between flex items, use the , , and properties. The property creates gaps between items in a row. The property creates gaps between flex lines when you have set to . The property is a shorthand that sets both and . The gaps between flex items or flex lines depend on the direction. If the property creates rows, the first value defines the gap between flex lines, and the second value defines the gap between items within each line. With columns (when is set to or ), the first value defines the gap between flex items, and the second value defines the gaps between flex lines."
    },
    {
        "link": "https://stackoverflow.com/questions/62400930/flexbox-vertically-centering-text-in-its-box",
        "document": "I'm trying to make tabs with labels that are sometimes two lines. I started out with a method, but switched to hoping to solve two problems: (1) get the tabs to fill the width of the container, and (2) vertically center the labels. Width-filling worked, but centering didn't.\n\nEverybody says and will do what I want, but they apparently act only on the boxes themselves, not the text inside them. To horizontally center the text, I can use , but there is nothing I can find that will center it vertically. One rumor mentioned but that also has no effect. Here is the Codepen I have been playing in: https://codepen.io/OsakaWebbie/pen/mdVrMYK All the lines with are things I tried in vain based on various rumors.\n\nWhat am I missing? (Sometimes I miss the days when we used tables for layout, in which this would be a piece of cake...)"
    },
    {
        "link": "https://stackoverflow.com/questions/25311541/how-to-vertically-align-text-inside-a-flexbox",
        "document": "Instead of using use .\n\nThere's no need to change or use .\n\nHere's your code, with one adjustment, to make it all work:\n\nThe property applies to flex items. Except your is not a flex item because its parent – the – does not have or applied.\n\nTherefore, the is not a flex container, the is not a flex item, and has no effect.\n\nThe property is similar to , except it applies to flex containers.\n\nSince the is a flex container, can be used to vertically center the child elements.\n\nThe property (on the container) sets the default value of (on the items). Therefore, means all flex items will be set to .\n\nBut you can override this default by adjusting the on individual items.\n\nFor example, you may want equal height columns, so the container is set to . However, one item must be pinned to the top, so it is set to .\n\nHow is the text a flex item?\n\nSome people may be wondering how a run of text...\n\nis a child element of the .\n\nThe reason is that text that is not explicitly wrapped by an inline-level element is algorithmically wrapped by an inline box. This makes it an anonymous inline element and child of the parent.\n\nThe flexbox specification provides for similar behavior.\n\nHence, the text in the is a flex item."
    },
    {
        "link": "https://philipwalton.github.io/solved-by-flexbox/demos/vertical-centering",
        "document": "The lack of good ways to vertically center elements in CSS has been a dark blemish on its reputation for pretty much its entire existence.\n\nWhat makes matters worse is the techniques that do work for vertical centering are obscure and unintuitive, while the obvious choices (like ) never seem to work when you need them.\n\nThe current landscape of vertical centering options ranges from negative margins to to ridiculous hacks involving full-height pseudo-elements. Yet even though these techniques sometimes get the job done, they don’t work in every situation. What if the thing you want to center is of unknown dimensions and isn’t the only child of its parent? What if you could use the pseudo-element hack, but you need those pseudo-elements for something else?\n\nWith Flexbox, you can stop worrying. You can align anything (vertically or horizontally) quite painlessly with the , , and properties.\n\nUnlike some of the existing vertical alignment techniques, with Flexbox the presence of sibling elements doesn’t affect their ability to be vertically aligned.\n\nView the full source for the component used in this demo on Github."
    },
    {
        "link": "https://refine.dev/blog/css-vertical-align",
        "document": "Vertically aligning contents in has always been a herculean task and has been described by many web developers as tricky to implement. However, modern has made available a number of ways to vertically align contents easily. Content alignment has never been easier at this time, and in this article, we'll look at different techniques to vertically align content using .\n\nMargins in are used to generate space around the borders of contents. Here are examples on how to easily vertically align contents with margins.\n\nUsing the property , You can vertically and horizontally align contents to the center. However, this is possible only when the following conditions are met:\n• The parent element should have a given .\n• The child element should have a specified .\n• The parent element should have either a display of or .\n\nA sample of this can be displayed below:\n\nFlexbox is a layout module that aims to simplify the process of designing flexible, responsive layout structures without the need for positioning or float. Unlike some other CSS frameworks, it is orientation agnostic and lets you automatically align and resize containers based on the height and width of the screen.\n\nHere are examples on how to effortlessly vertically align contents with flexbox.\n\nWith the CSS properties , and , we can vertically and horizontally align contents.\n\nWith the CSS properties , and , we can also vertically align contents. We will update the first example code to show this:\n\nThe CSS Grid Layout Module provides a two dimension grid-based layout system with rows and columns, allowing you to design web pages with ease.\n\nHere are examples on how to effortlessly vertically contents with flexbox.\n\nWith the CSS properties , and , we can also vertically align contents.\n\nWith the CSS properties , (which is a combination of and ), we can also vertically align contents.\n\nWe will update the code of the first example to show this:\n\nWith the CSS properties , , we can also vertically align contents.\n\nWe will update the code of the first example to show this:\n\nTables are a common and useful tool for displaying data on websites and web applications. It was the common method of presenting information in rows and columns before to the introduction of modules like and .\n\nHere are examples on how to vertically align contents with .\n\nUsing the property , , , You can vertically align contents to the center. However, this is possible only when the following conditions are met:\n• The parent element must have the property.\n• When the parent element must have a given .\n• The child element must have the property.\n• The child element must have the property.\n\nA sample of this can be displayed below:\n\nThe position property specify how an element is positioned in a document. Positioned elements' final positioning is determined by their , , , and properties.\n\nWe could use these positioning properties to vertically align contents.\n\nUsing the properties and and , You can vertically align contents to the center. However, this is possible only when the following conditions are met:\n• The parent element must have the property. This is to ensure that the positioning of the element occurs solely within the parent container and does not extend outside it.\n• The parent element should have a specified .\n• The child element must have the property\n• The child element should have the positioned properties:\n• The child element should have a specified as well.\n\nThe property repositions an element in both horizontal and vertical directions.\n\nWe will give examples on how to use the translate property.\n\nUsing the properties and and , You can vertically and horizontally align contents to the center. This has been a popular way to vertically align contents. However this is possible only when the following conditions are met:\n• The parent element must have the property.\n• The parent element should have a specified .\n• The child element must have the property.\n• The child element should have the positioned properties: .\n• The child element should have the translate property: . This property repositions the child element to fit into the center of the parent element.\n\nWe can vertically align items only using the properties and and ,\n\nWe will update the code of the first example to show this:\n\nThe property specifies the height of a line box. It's widely used to specify the spacing between lines of text. On block-level elements, it sets the minimum height of line boxes within them. On non-replaced inline items, it defines the height used to compute the line box height.\n\nWe will give examples on how to use the line-height property to vertically align contents.\n\nUsing the properties and , You can vertically align contents to the center. However this is possible only when the following conditions are met:\n• The parent element should have a specified .\n• The child element must have the property.\n• The of the parent element must be equal to the of the child element.\n\nThe attribute specifies how elements on a line are aligned. This property works to aligning elements only (and not elements).\n\nIn this example, with the display and the property, You can vertically align contents to the center. However this is possible only when the following conditions are met:\n• The parent element should have a specified . We do this to increase the line box so that the property uses to align the contents in the middle of that line-box.\n• The child element must have the property.\n\nIn this example, with the display and the property, You can vertically align contents to the center.\n\nThis type of alignment is usually called the ghost element alignment. This alignment employs using the display property on a ghost ( ) element of the parent element, inherits the parent's element full height, then sets the property for both the of the parent element and the child element.\n\nIn this article, we examined some CSS techniques for vertical alignment of contents. Using these techniques will make it easy to align contents vertically on your webpages or web applications."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_cascading_variables/Using_CSS_custom_properties",
        "document": "Custom properties (sometimes referred to as CSS variables or cascading variables) are entities defined by CSS authors that represent specific values to be reused throughout a document. They are set using the at-rule or by custom property syntax (e.g., ). Custom properties are accessed using the CSS function (e.g., ). Complex websites have very large amounts of CSS, and this often results in a lot of repeated CSS values. For example, it's common to see the same color used in hundreds of different places in stylesheets. Changing a color that's been duplicated in many places requires a search and replace across all rules and CSS files. Custom properties allow a value to be defined in one place, then referenced in multiple other places so that it's easier to work with. Another benefit is readability and semantics. For example, is easier to understand than the hexadecimal color , especially if the color is used in different contexts. Custom properties defined using two dashes ( ) are subject to the cascade and inherit their value from their parent. The at-rule allows more control over the custom property and lets you specify whether it inherits its value from a parent, what the initial value is, and the type constraints that should apply. Note: Variables do not work inside media queries and container queries. You can use the function in any part of a value in any property on an element. You cannot use for property names, selectors, or anything aside from property values, which means you can't use it in a media query or container query.\n\nUsing a prefix of two dashes ( ) A custom property prefixed with two dashes begins with , followed by the property name (e.g., ), and a property value that can be any valid CSS value. Like any other property, this is written inside a ruleset. The following example shows how to create a custom property and uses a value of : The selector given to the ruleset ( elements in the example above) defines the scope in which the custom property can be used. For this reason, a common practice is to define custom properties on the pseudo-class, so that it can be referenced globally: This doesn't always have to be the case: you maybe have a good reason for limiting the scope of your custom properties. Note: Custom property names are case sensitive — will be treated as a separate custom property to .\n\nFor some CSS declarations, it is possible to declare this higher in the cascade and let CSS inheritance solve this problem. For non-trivial projects, this is not always possible. By declaring a custom property on the pseudo-class and using it where needed throughout the document, a CSS author can reduce the need for repetition: /* Define --main-bg-color here */ :root { --main-bg-color: cornflowerblue; } /* For each class, set some colors */ .one { background-color: var(--main-bg-color); } .two { color: black; background-color: aquamarine; } .three { background-color: var(--main-bg-color); } .four { background-color: var(--main-bg-color); } .five { background-color: var(--main-bg-color); } This leads to the same result as the previous example, yet allows for one canonical declaration of the desired property value ( ), which is very useful if you want to change the value across the entire project later.\n\nA custom property defined using two dashes instead of always inherits the value of its parent. This is demonstrated in the following example: div { color: black; font-family: sans-serif; width: 75%; height: 80%; margin: 4px; border: 2px black solid; display: inline-block; } p { margin: 0; } .one { height: 250px; } .two { height: 80%; } .three { height: 40%; } .four { height: 40%; } The results of depending on inheritance are as follows:\n• : invalid value, which is the default value of a custom property defined in this way One aspect of custom properties that the examples above demonstrate is that they don't behave exactly like variables in other programming languages. The value is computed where it is needed, not stored and reused in other places of a stylesheet. For instance, you cannot set a property's value and expect to retrieve the value in a sibling's descendant's rule. The property is only set for the matching selector and its descendants.\n\nThe at-rule lets you explicitly state whether the property inherits or not. The following example creates a custom property using the at-rule. Inheritance is disabled, there's a data type defined, and an initial value of . The parent element sets to a value of and uses as a value for its background color. The child element also uses , and we would expect it to have the color if inheritance was enabled (or if it was defined using the double dash syntax). Because is set in the at-rule, and a value for the property is not declared within the scope, the initial value of is used instead of that would have been inherited from the parent:\n\nUsing the function, you can define multiple fallback values when the given variable is not yet defined; this can be useful when working with Custom Elements and Shadow DOM. The first argument to the function is the name of the custom property. The second argument to the function is an optional fallback value, which is used as the substitution value when the referenced custom property is invalid. The function accepts two parameters, assigning everything following the first comma as the second parameter. If the second parameter is invalid, the fallback will fail. For example: .one { /* Red if --my-var is not defined */ color: var(--my-var, red); } .two { /* pink if --my-var and --my-background are not defined */ color: var(--my-var, var(--my-background, pink)); } .three { /* Invalid: \"--my-background, pink\" */ color: var(--my-var, --my-background, pink); } Including a custom property as a fallback, as seen in the second example above ( ), is the correct way to provide more than one fallback with . You should be aware of the performance impact of this method, however, as it takes more time to parse through the nested variables. Note: The syntax of the fallback, like that of custom properties, allows commas. For example, defines a fallback of — anything between the first comma and the end of the function is considered a fallback value.\n\nFallbacks using the initial value Aside from using , the defined in the at-rule can be used as a fallback mechanism. In fact, we've already seen this in the inheritance section. The following example sets an initial value of to using the at-rule. In the ruleset following the at-rule, we want to set to , but there's a typo in the value name. The same is true for the third where we've used for the custom property that's expecting a valid value. Both and are invalid color values, so the initial value of is applied: @property --box-color { syntax: \"<color>\"; initial-value: cornflowerblue; inherits: false; } .one { --box-color: aquamarine; background-color: var(--box-color); } .two { --box-color: aqumarine; background-color: var(--box-color); } .three { --box-color: 2rem; background-color: var(--box-color); }\n\nEach CSS property can be assigned a defined set of values. If you try to assign a value to a property that is outside its set of valid values, it's considered invalid. When the browser encounters an invalid value for a regular CSS property (for example, a value of for the property), it discards the declaration, and elements are assigned the values that they would have had if the declaration did not exist. In the following example, we see what happens when a regular CSS declaration is invalid; is discarded and the previous rule is applied instead: However, when the values of custom properties are parsed, the browser doesn't yet know where they will be used, so it must consider nearly all values as valid. Unfortunately, these valid values can be used, via the functional notation, in a context where they might not make sense. Properties and custom variables can lead to invalid CSS statements, leading to the concept of valid at computed time. When the browser encounters an invalid substitution, then the initial or inherited value of the property is used. This example is just like the last one, except we use a custom property. The browser substitutes the value of in place of , but is not a valid property value for . After substitution, the property doesn't make sense., so the browser handles this situation in two steps:\n• Check if the property is inheritable. It is, but this doesn't have any parent with the property set. So we move on to the next step.\n• Set the value to its default initial value, which is black. For such cases, the at-rule can prevent unexpected results by allowing to define the initial value of the property:"
    },
    {
        "link": "https://css-tricks.com/a-complete-guide-to-custom-properties",
        "document": "Here are some basic examples that you’d expect to work, and do.\n\nSee that? They can be hex values, color functions, units of all kinds, and even strings of text.\n\nBut custom properties don’t have to be complete values like that. Let’s look at how useful it can be to break up valid CSS values into parts we can shove into custom properties.\n\nLet’s imagine you’re using a color function, say . Each color channel value in there can be its own custom property. That opens up a ton of possibilities, like changing the alpha value for a specific use case, or perhaps creating color themes.\n\nTake HSL color, for example. We can split it up into parts, then very easily adjust the parts where we want. Maybe we’re working with the background color of a button. We can update specific parts of its HSL makeup when the button is hovered, in focus, or disabled, without declaring on any of those states at all.\n\nBy breaking apart values like that, we can control parts of them in a way we never could before. Just look at how we didn’t need to declare all of the HSL arguments to style the hover, focus and disabled state of a button. We simply overrode specific HSL values when we needed to. Pretty cool stuff!\n\nAny property that supports multiple comma-separated values might be a good candidate for splitting values too, since there is no such thing as targeting just one value of a comma-separated list and changing it alone.\n\nSay you wanted to remove just one of many multiple backgrounds at a media query. You could do that with custom properties like this, making it a trivial task to swap or override backgrounds.\n\nThere are times when combining parts of values doesn’t work quite how you might hope. For example, you can’t make by smashing and together. It can be done though, by multiplying the raw number by a number value with a unit.\n\nYou’ve already seen it in action in many of the examples we’ve covered, but let’s put a point on it. Say we have a custom property set pretty “high up” (on the body), and then set again on a specific class. We use it on a specific component.\n\nThen say we’ve got practical HTML like this:\n\nThe “module” in the sidebar has a gray background because custom properties (like many other CSS properties) inherit through the HTML structure. Each module takes the value from the nearest “ancestor” where it’s been defined in CSS.\n\nSo, we have one CSS declaration but it’s doing different things in different contexts, thanks to the cascade. That’s just cool.\n\nThis plays out in other ways:\n\nMedia queries don’t change specificity, but they often come later (or lower) in the CSS file than where the original selector sets a value, which also means a custom property will be overridden inside the media query:\n\nMedia queries aren’t only for screen sizes. They can be used for things like accessibility preferences. For example, dark mode:\n\nYou’ll often see custom properties being set “at the root.” Here’s what that means:\n\nThere is no particularly compelling reason to define custom properties like that. It’s just a way of setting custom properties as high up as they can go. If you like that, that’s totally fine. I find it somehow more normal-feeling to apply them to the or selectors when setting properties I intend to make available globally, or everywhere.\n\nThere is also no reason you need to set variables at this broad of a scope. It can be just as useful, and perhaps more readable and understandable, to set them right at the level you are going to use them (or fairly close in the DOM tree).\n\nNote that setting a custom property on the module itself means that property will no longer inherit from an ancestor (unless we set the value to ). Like other inherited properties, there are sometimes reasons to specify them in place (at the global level), and other times we want to inherit them from context (at the component level). Both are useful. What’s cool about custom properties is that we can define them in one place, inherit them behind the scenes and apply them somewhere completely different. We take control of the cascade!\n\nApplying to the variable, makes it difficult to override the value of the variable, but we can still ignore it by changing the property.\n\nThe behavior of inside the values of custom properties is quite unusual. Stefan Judis documents it well, but the gist is:\n• Ultimately, is stripped from the value of the custom property.\n• But it is used when determining which value wins when it is set in multiple places.\n\nIf both of those selectors apply to an element, you might think the value would win because of the higher specificity, but really will win because of the , but then ultimately be applied without the . It’s a little funky to wrap your head around.\n\nIf applying the outside of the custom property, like the 2nd example two code blocks up, our variable remains low-specificity (easy to override), but it’s hard to change how that value will be applied to the itself because the entire declaration retains .\n\nHere we’re setting a transform function to a custom property, but there is a comma-separated second value of . That value will be used if is not set.\n\nAfter the first comma, any additional commas are part of the fallback value. That allows us to create fallbacks with comma-separated values inside them. For example, we can have one variable fall back to an entire stack of fonts:\n\nWe can also provide a series of variable fallbacks (as many as we want), but we have to nest them for that to work:\n\nIf is undefined, we try the . If that is also undefined, we finally fall back to .\n\nThis kind of thing is common:\n\nWe could also use that to calculate the hue of a complementary color:\n\ncan even be used with multiple custom properties:\n\nIt might look weird to see calculous-like math without a :\n\nThe trick is that as long as you eventually put it in a function, it works fine:\n\nThis might be useful if you’re doing quite a bit of math on your variables, and the wrapper becomes distracting or noisy in the code.\n\nIt’s sort of like you’re creating an actual CSS property and have the ability to define what it’s called, it’s syntax, how it interacts with the cascade, and its initial value.\n\nThis means that the browser knows what kind of value it is dealing with, rather than assuming everything is a string. That means you can animate things in ways you couldn’t otherwise.\n\nFor example, say you have a star-shaped icon that you want to spin around with and rotate with a . So you do this:\n\nThat actually won’t work, as the browser doesn’t know that and are valid angle values. You have to define them as an type with for that to work.\n\nThis can be a smidge confusing. Maybe not so much this:\n\nBut below, you’ll need a sharp eye to realize the fallback value is actually . The first comma separates the fallback, but all the rest is part of the value.\n\nLearn more about fallbacks above ⮑\n\nHere’s a few more favorite examples that show off advanced usage of custom properties:\n\nThink of queries and how when one thing changes (e.g. the width of the page) you can control multiple things. That’s kind of the idea with this trick. You change one custom property and control multiple things.\n\nThe trick is that the value of for a custom property will trigger a fallback, while an empty whitespace value will not. For the sake of explanation, it let’s define two globally-scoped custom properties, and :\n\nSay we have a “dark” variation class which sets a number of different properties. The default is , but can be flipped to whenever:\n\nNow you can use to conditinally set values that apply only when you’ve flipped to . Demo:\n\nLea Verou has a great writeup that covers all of this.\n\nIt’s totally legit to set a custom property in HTML with an inline style.\n\nThat will, like any inline style, have a very high level of specificity.\n\nThis can be super useful for when the HTML might have access to some useful styling information that would be too weird/difficult to put into a static CSS file. A good example of that is maintaining the aspect ratio of an element:\n\nNow I can set up some CSS to make a box of that exact size wherever I need to. The full writeup on that is here, but here’s CSS that uses trickery like the ol’ padded box applied to a pseudo element which pushes the box to the desired size:\n\nBut hey, these days, we have a native property in CSS, so setting that in the inline style might make more sense going forward.\n\nThere is no way to apply a style (or other pseudo classes/elements) with inline styles. That is, unless we get tricky with custom properties. Say we want custom hover colors on some boxes — we can pass that information in as a custom property:\n\nThen use it in CSS which, of course, can style a link’s hover state:\n\nHere’s an example of a red square that is positioned with custom properties, and JavaScript updates those custom property values with the mouse position:\n\nTypically you think of JavaScript passing values to CSS to use, which is probably 99% of usage here, but note that you can pass things from CSS to JavaScript as well. As we’ve seen, the value of a custom property can be fairly permissive. That means you could pass it a logical statement. For example:\n\nThen grab that value and execute it in JavaScript:\n\nCustom properties are different than preprocessor variables\n\nSo, do you even need to bother with native CSS custom properties then? Yes, you should. Here’s why in a nutshell:\n• Native CSS custom properties are more powerful then preprocessor variables. Their integration with the cascade in the DOM is something that preprocessor variables will never be able to do.\n• Native CSS custom properties are dynamic. When they change (perhaps via JavaScript, or with a media query), the browser repaints what it needs to. Preprocessor variables resolve to a value when they’re compiled and stay at that value.\n• Going with a native feature is good for the longevity of your code. You don’t need to preprocess native CSS.\n\nI cover this in much more detail in the article “What is the difference between CSS variables and preprocessor variables?”\n\nTo be totally fair, there are little things that preprocessor variables can do that are hard or impossible with custom properties. Say you wanted to strip the units off a value for example. You can do that in Sass but you’ll have a much harder time with custom properties in CSS alone.\n\nKinda. You can do this, with Sass just to pick one popular preprocessor:\n\nAll that’s doing is moving a Sass variable to a custom property. That could be useful sometimes, but not terribly. Sass will just make there, not process the custom property away.\n\nIf a browser doesn’t support custom properties, that’s that. You can’t force a browser to do what custom properties do by CSS syntax transformations alone. There might be some kind of JavaScript polyfill that parses your CSS and replicates it, but I really don’t suggest that.\n\nThe PostCSS Custom Properties plugin, though, does do CSS syntax transforms to help. What it does is figure out the value to the best of it’s ability, and outputs that along with the custom property. So like:\n\nWill output like this:\n\nThat means you get a value that hopefully doesn’t seem broken in browsers that lack custom property support, but does not support any of the fancy things you can do with custom properties and will not even attempt to try. I’m a bit dubious about how useful that is, but I think this is about the best you can do and I like the spirit of attempting to not break things in older browsers or newer browsers.\n\nAnother thing that is worth noting about the difference between is that with a CSS preprocessor, the variables are available only as you’re processing. Something like is meaningless in your HTML or JavaScript. But when you have custom properties in use, you can set inline styles that use those custom properties and they will work. Or you can use JavaScript to figure out their current values (in context), if needed.\n\nAside from some somewhat esoteric features of preprocessor variables (e.g. some math possibilities), custom properties are more capable and useful.\n\nThe main point of the shadow DOM is that it doesn’t “leak” styles in or out of it, offering style isolation in a way that nothing else offers, short of an . Styles do still cascade their way inside, I just can’t select my way inside. This means custom properties will slide right in there.\n\nAnother common occurrence of the shadow DOM is with SVG and the element.\n\nYou can preprocess for deeper browser support, with heavy limitations.\n\nIf you would like to write conditional CSS for when a browser supports custom properties or not:\n\nThanks to Miriam Suzanne for co-authoring this with me!"
    },
    {
        "link": "https://blog.logrocket.com/how-to-use-css-variables-like-a-pro",
        "document": "CSS offers many predefined standard key-value-based properties for styling semantic HTML elements. However, while designing webpages, developers often need to repetitively use the same values for properties in several segments of stylesheets — for example, while using a primary accent color for various webpage elements.\n\nCSS now supports using custom properties, also known as CSS variables, to avoid repetitive CSS property values. Like any popular programming language, CSS also implements variables for writing clean code with a productive assignment and retrieval syntax, scoping support, and fallback values.\n\nIn this tutorial, we’ll first demystify CSS variables and then build four simple projects that utilize them. Some basic CSS knowledge is required to follow along with this tutorial. Let’s dive in!\n\nCSS variables are user-defined values that can be reused throughout a stylesheet. They are also known as custom properties. The prefix and function is used to define and access CSS variables respectively:\n\nUnlike traditional CSS properties, CSS variables can be modified dynamically with JavaScript using ( ). CSS variables can be changed in one place and all elements using it update automatically. They can be defined within selectors or globally using ( ).\n\nOne of the most common use cases for CSS variables is managing websites in which numerous values are similar to those in the document. This helps to reduce the friction associated with refactoring or updating your code.\n\n: This article was updated by in March 2025 to include instructions on setting CSS variables dynamically with JavaScript, differentiate between CSS and SASS variables, and troubleshoot common developer issues with CSS variables.\n\nWhat we’ll build in this tutorial\n\nTo solidify our knowledge about CSS variables, we’ll build four very simple projects:\n• Button variations — This concept is popular in Bootstrap, where certain elements share CSS rules that give them a default design but are differentiated by colors or other properties\n• A responsive login form — We’ll display different layouts on desktop, tablet, and mobile screens\n\nEach project should provide insights into how we can use CSS variables to take care of a wide variety of use cases.\n\nAlso referred to as custom properties or cascading variables, CSS variables have myriad use cases.\n\nHow to declare and use CSS variables\n\nCSS variables can be declared in two ways ( prefix and at-rule).\n\nThe prefix declares variables in two ways (globally and locally). The former uses the selector to define global variables:\n\nWhile the latter defines a variable inside specific elements:\n\nHere, is only accessible inside . Global variables are accessible everywhere in the stylesheet.\n\nThe at-rule allows you to be more expressive with the definition of CSS variables by allowing you to define their type, control inheritance, and set default values which act as fallback. Using the at-rule ensures more predictable behavior.\n\nHere, is declared as a CSS variable that expects value. The property prevents it from being inherited by child elements, and sets a default color when no value is assigned.\n\nHow to use variables in CSS\n\nCSS variables can be applied to elements using the function:\n\nIf the value of is updated, all the elements using it will automatically change.\n\nLike traditional CSS properties, CSS variables follow standard property rules — i.e., they inherit, can be overridden, and adhere to the CSS specificity algorithm. The value of an element is inherited from its parent elements if no custom property is defined in a specific child element, as shown in the following example.\n\nIn this case, the selector inherits padding value from its direct parent, , with the value of rather than . You can use Chrome DevTools to see from where the specific CSS variable value gets inherited, as shown in the following preview:\n\nYou can use CSS variable inheritance to pass variable values from parent elements to child elements without re-declaring them in selectors. Also, overriding variable values is possible as traditional CSS properties.\n\nCSS cascade rules handle the precedence of CSS definitions that come from various sources.\n\n CSS variables also follow the standard cascade rules as any other standard properties. For example, if you use two selectors with the same specificity score, the variable assignment order will decide the value of a specific CSS variable.\n\nA variable assignment in a new CSS block typically overrides the existing precedence and re-assigns values to variables.\n\nThe above CSS selectors have the same specificity, so CSS uses cascading precedence to select the right value for elements. Here, we’ll get the color for the element since is in the last variable assignment. The color of the label may change based on the order of the above selectors.\n\nCSS variables also work with developer-defined cascade layers that use the at-rule. To demonstrate this, we can add some cascade layers to the above CSS snippet:\n\nYou can check how cascading rules overwrite variable values with Chrome DevTools:\n\nWhen using custom properties, you might reference a custom property that isn’t defined in the document. You can specify a fallback value to be used in place of that value.\n\nThe syntax for providing a fallback value is still the function. Send the fallback value as the second parameter of the function:\n\nDid you notice that I misspelled the value ? This should cause the value to be undefined, so the browser loads the fallback value, for the property.\n\nA comma-separated list is also accepted as a valid fallback value. For example, the following CSS definition loads as the fallback value for the gradient function:\n\nYou can also use variables as fallback values with nested functions. For example, the following definition loads from if it’s defined:\n\nNote that it’s generally not recommended to nest so many CSS functions due to performance issues caused by nested function parsing. Instead, try to use one fallback value with a readable variable name.\n\nIf your web app should work on older web browsers that don’t support custom properties, you can define fallback values outside of the function as follows:\n\nIf the browser doesn’t support CSS variables, the first property sets a fallback value. We’ll discuss browser compatibility in the upcoming section about browser support for the CSS variables feature.\n\nMeanwhile, custom properties can get invalid values due to developer mistakes. Let’s learn how the browser handles invalid variable assignments and how to override the default invalid assignment handling behavior:\n\nIn this snippet, the custom property was defined with a value of . Later, it was overridden with , which isn’t technically wrong. But when the browser substitutes the value of in place of , it tries to use a value of , which is not a valid property value for color in CSS.\n\nThe browser treats it as an invalid value and checks whether the color property is inheritable by a parent element. If it is, it uses it. Otherwise, it falls back to a default color (black in most browsers).\n\nThis process doesn’t bring the correct initial value defined in the selector block, so we have to define custom properties with the accepted type and initial value using the at-rule, as shown in the following code snippet:\n\nNow, the browser renders the expected text color even if we assign an invalid value within the selector.\n\nAs discussed in previous examples, it’s possible to create global CSS variables using either or at-rule. Also, creating local variables is possible by defining variables inside child element selectors. For example, a variable defined inside won’t be exposed to .\n\nHowever, if you define a variable inside a specific tag, it gets exposed to all elements that match the particular selector. What if you need to create a scoped variable that is only available for a targeted HTML segment?\n\nBy default, browsers won’t scope style tags even if we wrap them with elements like for creating scoped variables. The at-rule helps us implement scoped CSS variables with scoped style tags, as shown in the following HTML snippet:\n\nHere, the second style tag becomes scoped for the wrapped element because of the at-rule. So, the selector in the second style tag selects only buttons inside the parent element. As a result, is only available for the first button.\n\nThe first button gets the color for the background since the scoped style tag’s selector sets the variable. The second button gets the fallback background color since the scoped variable is not available in the global scope:\n\nLearn more about the at rule from the official MDN documentation. is still an experimental feature, so you can use the minimal library to create scoped CSS variables in production.\n\nBest practices for structuring CSS variables in projects\n\nVariables should be grouped logically as follows:\n\nFallback values should be used to ensure compatibility: If is not defined, will be used as a default. In CSS frameworks such as Bootstrap, variables make sharing a base design across elements much easier. Take the class, which turns an element’s background color to red and its own color to white. In this first project, you’ll build something similar. Get started with the first project by adding the following HTML document to a new file: The structure of this markup is pretty standard. Notice how each button element has two classes: the class and a second class. We’ll refer to the class, in this case, as the base class and the second class as the modifier class that consists of the prefix. Next, add the following style tag content to the above The class contains the base styles for all the buttons and the variations come in where the individual modifier classes get access to their colors, which are defined at the level of the document. This is extremely helpful not just for buttons, but for other elements in your HTML that can inherit the custom properties. For example, if tomorrow you decide the value for the custom property is too dull for a red color, you can easily switch it up to . Once you do so, voila — all elements using this custom property are updated with a single change! Here’s what your first project should look like: You can access the complete source code and see a live preview of this project from this CodePen. The method is used to set CSS variables dynamically with JavaScript, updating CSS variables in real-time without modifying the style sheet: This will update the variable, affecting all the elements that use it. To see the practical use case for this, we’ll build the second project “a light-and-dark theme”. The light theme will take effect by default unless the user already has their system set to a dark theme. On the page, we’ll create a toggle button that allows the user to switch between themes. First, add the following HTML structure into a new file: <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\" /> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /> <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" /> <title>CSS Variables - Theming</title> </head> <body> <header> <div class=\"container\"> <div class=\"container-inner\"> <a href=\"#\" class=\"logo\">My Blog</a> <div class=\"toggle-button-container\"> <label class=\"toggle-button-label\" for=\"checkbox\"> <input type=\"checkbox\" class=\"toggle-button\" id=\"checkbox\" /> <div class=\"toggle-rounded\"></div> </label> </div> </div> </div> </header> <article> <div class=\"container\"> <h1 class=\"title\">Title of article</h1> <div class=\"info\"> <div class=\"tags\"> <span>#html</span> <span>#css</span> <span>#js</span> </div> <span>1st February, 2024</span> </div> <div class=\"content\"> <p> Lorem ipsum dolor sit amet consectetur adipisicing elit. <a href=\"#\">Link to another url</a> Eius, saepe optio! Quas repellendus consequuntur fuga at. Consequatur sit deleniti, ullam qui facere iure, earum corrupti vitae laboriosam iusto eius magni, adipisci culpa recusandae quis tenetur accusantium eum quae harum autem inventore architecto perspiciatis maiores? Culpa, officiis totam! Rerum alias corporis cupiditate praesentium magni illo, optio nobis fugit. </p> <p> Eveniet veniam ipsa similique atque placeat dignissimos quos reiciendis. Odit, eveniet provident fugiat voluptatibus esse culpa ullam beatae hic maxime suscipit, eum reprehenderit ipsam. Illo facilis doloremque ducimus reprehenderit consequuntur cupiditate atque harum quaerat autem amet, et rerum sequi eum cumque maiores dolores. </p> </div> </div> </article> </body> </html> This snippet represents a simple blog page with a header, a theme toggle button, and a dummy article. Next, add the following style tag to add CSS definitions for the above HTML structure: <style> :root { --primary-color: #0d0b52; --secondary-color: #3458b9; --font-color: #424242; --bg-color: #ffffff; --heading-color: #292922; --white-color: #ffffff; } /* Layout */ * { padding: 0; border: 0; margin: 0; box-sizing: border-box; } html { font-size: 14px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; } body { background: var(--bg-color); color: var(--font-color); } .container { width: 100%; max-width: 768px; margin: auto; padding: 0 1rem; } .container-inner { display: flex; justify-content: space-between; align-items: center; } /* Using custom properties */ a { text-decoration: none; color: var(--primary-color); } p { font-size: 1.2rem; margin: 1rem 0; line-height: 1.5; } header { padding: 1rem 0; border-bottom: 0.5px solid var(--primary-color); } .logo { color: var(--font-color); font-size: 2rem; font-weight: 800; } .toggle-button-container { display: flex; align-items: center; } .toggle-button-container em { margin-left: 10px; font-size: 1rem; } .toggle-button-label { display: inline-block; height: 34px; position: relative; width: 60px; } .toggle-button-label .toggle-button { display: none; } .toggle-rounded { background-color: #ccc; bottom: 0; cursor: pointer; left: 0; position: absolute; right: 0; top: 0; transition: 0.4s; } .toggle-rounded:before { background-color: #fff; bottom: 4px; content: ''; height: 26px; left: 4px; position: absolute; transition: 0.4s; width: 26px; } input:checked+.toggle-rounded { background-color: #9cafeb; } input:checked+.toggle-rounded:before { transform: translateX(26px); } article { margin-top: 2rem; } .title { font-size: 3rem; color: var(--font-color); } .info { display: flex; align-items: center; margin: 1rem 0; } .tags { margin-right: 1rem; } .tags span { background: var(--primary-color); color: var(--white-color); padding: 0.2rem 0.5rem; border-radius: 0.2rem; } </style> This snippet can be divided into two main sections: the layout section and the custom properties section. The latter is what you should focus on. As you can see, the variables are applied above in the link, paragraph, heading, and article elements. The idea behind this approach is that, by default, the website uses a light theme, and when the box is checked, the values for the light theme get inverted to a dark variant. Since you can’t trigger these sitewide changes via CSS, JavaScript is critical here. In the next section, we’ll hook up the JavaScript code necessary to toggle between the light and dark themes. Alternatively, you could trigger a change automatically via CSS using the media query to detect whether the user requested a light or dark theme. In other words, you can directly update the website to use the dark variants of the light theme. Add the following snippet to all the CSS code you just wrote: We’re listening to the user’s device settings and adjusting the theme to dark if they’re already using a dark theme. Finally, add the following script segment to the above HTML document: <script> const toggleButton = document.querySelector('.toggle-button'); toggleButton.addEventListener('change', toggleTheme, false); const theme = { dark: { '--primary-color': '#325b97', '--secondary-color': '#9cafeb', '--font-color': '#e1e1ff', '--bg-color': '#000013', '--heading-color': '#818cab' }, light: { '--primary-color': '#0d0b52', '--secondary-color': '#3458b9', '--font-color': '#424242', '--bg-color': '#ffffff', '--heading-color': '#292922' } }; function toggleTheme(e) { if (e.target.checked) { useTheme('dark'); localStorage.setItem('theme', 'dark'); } else { useTheme('light'); localStorage.setItem('theme', 'light'); } } function useTheme(themeChoice) { document.documentElement.style.setProperty( '--primary-color', theme\\[themeChoice\\]['--primary-color'] ); document.documentElement.style.setProperty( '--secondary-color', theme\\[themeChoice\\]['--secondary-color'] ); document.documentElement.style.setProperty( '--font-color', theme\\[themeChoice\\]['--font-color'] ); document.documentElement.style.setProperty( '--bg-color', theme\\[themeChoice\\]['--bg-color'] ); document.documentElement.style.setProperty( '--heading-color', theme\\[themeChoice\\]['--heading-color'] ); } const preferredTheme = localStorage.getItem('theme'); if (preferredTheme === 'dark') { useTheme('dark'); toggleButton.checked = true; } else { useTheme('light'); toggleButton.checked = false; } </script> Now let’s break down the current state of the website. A user visits the page. The media query determines whether the user is using a light or dark theme. If it’s a dark theme, the website updates to use the dark variants of the custom properties. Let’s say a user isn’t using a dark theme or their OS doesn’t support a dark theme. The browser would default to the light theme, allowing the user to control that behavior by checking or unchecking the box. Depending on whether the box is checked or unchecked, the function is called to pass in the theme variant and save the user’s current selection to local storage. You’ll see why it’s saved in a minute. The function is where all the magic happens. Based on the theme variant passed, a lookup is performed on the constant and used to switch between light and dark modes. The last piece of the puzzle is persisting the current theme, which is achieved by reading the last preferred theme from local storage and setting it automatically when the user revisits the website. Here’s what your second project should look like: You may be thinking of a million other ways to achieve this. Feel free to go through the code and make as many changes as you see fit. You can access the complete source code and see a live preview of this project from this CodePen. In our third project, we’ll build a responsive login form that loads some adjustment values from CSS variables. Like the media query feature dynamically switches standard CSS properties, it also switches custom properties, so we can assign different values for variables within different responsive breakpoints. First, add the following content into a new HTML document: Here we created a simple login form that consists of two input elements and a button. Add the following style tag into this HTML document to style it properly: <style> /* --- desktops and common --- */ :root { --form-box-padding: 8px; --form-box-flex-gap: 8px; --form-input-font-size: 12px; } * { margin: 0; padding: 0; box-sizing: border-box; } .form-box { display: flex; justify-content: flex-end; gap: var(--form-box-flex-gap); padding: var(--form-box-padding); background-color: #333; text-align: center; } .form-box input, .form-box button { font-size: var(--form-input-font-size); padding: 8px; margin-right: 4px; } .form-box input { outline: none; border: none; } .form-box button { border: none; background-color: #edae39; } </style> The above CSS snippet styles the login form only for desktop devices, so it won’t adjust content responsively when you resize the browser, as shown in the following preview: We can simply make this page responsive by writing some styling adjustments — i.e., changing — inside media query breakpoints. For or -like values-based properties, we can use CSS variables instead of writing CSS properties repetitively to improve the readability and maintainability of CSS definitions. Look at the previous CSS snippet: you will notice three CSS variables. Change those variables with media query blocks and complete the responsive screen handling code using the following code snippet: /* --- tablets --- */ @media screen and (min-width: 601px) and (max-width: 900px) { :root { --form-box-padding: 20px 12px 20px 12px; --form-box-flex-gap: 12px; --form-input-font-size: 14px; } .form-box input, .form-box button { display: block; width: 100%; } } /* --- mobiles --- */ @media screen and (max-width: 600px) { :root { --form-box-padding: 24px; --form-box-flex-gap: 12px; --form-input-font-size: 20px; } .form-box { flex-direction: column; } .form-box input, .form-box button { display: block; } } The above code snippet adjusts the layout for mobile and tablet screens with some standard CSS properties and custom properties. For example, it uses a different mode, mode for several elements, and the following custom property values for mobile screens: Test this project by resizing the browser window: Try adjusting these CSS variables and creating new ones to improve this login screen further. You can use the same strategy to use CSS variables with container queries. Check the complete source code and see a live preview from this CodePen. Imagine that you need to create a colorful native checkbox list with multiple accent colors. Using different values for via the inline style attribute is undoubtedly time-consuming since you have to define colors yourself. Hence, you may create this checkbox list dynamically with JavaScript. However, what if this list gets rendered in a JavaScript-disabled environment, like inside a Markdown document? We can use CSS variables to generate JavaScript-free dynamic elements. Let’s create a colorful native checkbox list with CSS variables. Create a new HTML document and add the following style tag: Here, we calculate a dynamic color for the property using the color function. For the hue input parameter, we use the variable which gets a dynamically calculated value using the variable. This implementation lets us generate multiple colors by using different numbers for . Use the following HTML snippet to get multiple colorful native checkboxes: Here we set an index manually for the variable via inline style attributes to generate a dynamic accent color. This approach is more productive than setting colors yourself for each checkbox element. Look at the following preview of the fourth project: You can browse the complete source code and see a live preview from this CodePen. It’s possible to use the same strategy to generate JavaScript-free dynamic elements by adjusting any standard CSS property value, i.e., using to set dynamic image filter configurations. The following table will help you know when to use CSS variables and preprocessor variables: Can be dynamically modified at runtime Great for working with a large-scale project that benefits from functions, mixins, and nested styles Requires a pre-processor like Less or SASS Results in slightly higher runtime cost due to look up but mostly negligible in most cases No runtime cost, but may impact load time due to larger stylesheets. Can be modified easily with JavaScript Impossible to update with JavaScript because it requires recompilation CSS variables can be used with to make animations more dynamic and reusable without direct changes to the styles. However, they must be applied outside the since variables are not recognized in keyframes. :root { --btn-bg: #3498db; /* Default background color */ } button { background-color: var(--btn-bg); color: white; padding: 12px 24px; font-size: 16px; border: none; cursor: pointer; animation: pulse 1.5s infinite alternate; } @keyframes pulse { from { background-color: var(--btn-bg); } to { background-color: lighten(var(--btn-bg), 20%); } } The background color changes dynamically based on . Adjusting in instantly updates the animation color! Now, we can use JavaScript to update the CSS variable in real-time to animate the button’s color on hover or user interaction The button smoothly transitions between colors when hovered! According to the browser compatibility table of the official MDN documentation, the CSS variables feature is widely available in all popular browser versions released after April 2017. More specifically, browsers released this feature with the following versions: According to these statistics, using custom properties in production apps is possible since most users nowadays use up-to-date web browsers. However, it would be prudent to analyze your audience’s browser versions before using any new native CSS feature. Here are some common mistakes with CSS variables and how to fix them: Some older browsers, like IE11, do not support CSS variables, which can cause styling issues if a fallback is not provided. A common mistake is using without specifying an alternative. To prevent this, always include a fallback value inside , such as , ensuring that a default color is applied if the variable is unavailable. CSS variables cannot be used directly in media queries, as they are not evaluated in the same way as standard values. For example, defining a variable like in and attempting to use it inside will not work. Instead, media queries require fixed values, so it’s best to use predefined breakpoints directly, such as , to ensure proper functionality. CSS variables don’t work in all properties, especially those that require integer values like or . By building these simple projects, you can learn how to use CSS variables like a pro. You can use the attribute to apply CSS variables directly to an HTML element like this . Also, you can debug CSS variable issues using the browser DevTools. There’s certainly more to them than I explained, so feel free to mess around with the code to explore further. CSS variables help simplify the way you build websites and complex animations while still allowing you to write reusable and elegant code. Using CSS variables is also possible with React Native projects that run on the React Native Web renderer. How do I use variables in CSS? You can use variables in your CSS using the function to apply declared variables in your styles. When should I use CSS variables? Use CSS variables when you need global or reusable values like colors, font sizes, spacings, or themes. They are also useful when you need to avoid hard-coded repetition. In large projects, changing a value like a primary color in multiple places can be tedious. Using CSS variables makes the codebase maintainable. How do you initialize a variable in CSS? CSS variables can be declared using either the prefix or the at-rule. Is your frontend hogging your users' CPU? As web frontends get increasingly complex, resource-greedy features demand more and more from the browser. If you’re interested in monitoring and tracking client-side CPU usage, memory usage, and more for all of your users in production, try LogRocket. LogRocket is like a DVR for web and mobile apps, recording everything that happens in your web app, mobile app, or website. Instead of guessing why problems happen, you can aggregate and report on key frontend performance metrics, replay user sessions along with application state, log network requests, and automatically surface all errors. Modernize how you debug web and mobile apps — start monitoring for free."
    },
    {
        "link": "https://dev.to/gnwabumere/mastering-css-custom-properties-best-practices-for-efficient-styling-1h09",
        "document": "Mastering CSS Custom Properties: Best Practices for Efficient Styling\" focuses on leveraging CSS Custom Properties, commonly referred to as CSS variables, to elevate the quality of web design and development. These properties empower developers to establish reusable values in their stylesheets, enhancing code reusability, maintainability, and enabling the creation of dynamic styles for web projects. CSS Custom Properties have the capability to store diverse data types like colors, measurements, and strings, simplifying the management and modification of repetitive values throughout the entirety of the CSS document.\n\nCSS custom properties, also known as CSS variables, are highly valuable in contemporary web development, offering a multitude of advantages that enhance styling efficiency and effectiveness in web projects. These advantages include:\n• Promoting Modularity and Reusability: CSS custom properties empower developers to define values once and reuse them across different sections of a website, fostering structured code, simplifying updates, and ensuring design consistency throughout the entire site.\n• Dynamic Styling Flexibility: Custom properties in CSS are not static; they can be dynamically adjusted using JavaScript. This dynamic feature enables developers to create interactive elements and animations that respond to user actions, enhancing user engagement and interactivity.\n• Ensuring Consistency and Scalability: By utilizing custom properties to set standard design values such as colors, fonts, and spacing, developers establish a uniform design language across all website pages. Custom properties act as a design guideline, maintaining design coherence and facilitating scalability, making it easy to implement changes or introduce new features without disrupting the overall design.\n\nIn summary, CSS custom properties are essential in modern web development for fostering modularity, reusability, dynamic styling capabilities, consistency, and scalability in design, ultimately leading to more efficient and impactful styling practices that enhance the quality and performance of web projects.\n\nCSS Custom Properties, or CSS variables, are a valuable addition to modern web development, offering a way to manage and reuse styling values effectively. They enable the creation of reusable values for common properties like colors, fonts, sizes, and themes, which can be referenced across HTML elements. CSS variables are defined with a double dash (--) and can be used with the var() function.\n• Reusability: By defining and reusing values, CSS variables help minimize repetition, facilitating easier maintenance and updates.\n• Dynamic Styling: CSS variables can be modified at runtime using media queries, pseudo-classes, or JavaScript, enabling dynamic styling based on various conditions.\n• Consistency: By using CSS variables, developers can ensure consistent styling across projects, making it easier to maintain a unified design language.\n• Scalability: CSS variables allow developers to create scalable stylesheets by defining global and local variables that can be accessed and modified as needed.\n\nCSS variables are supported in all major browsers and can be utilized in various ways, such as defining global and local variables, altering values at runtime, and adhering to best practices for naming and organization. By harnessing the power of CSS variables, developers can create efficient, maintainable, and dynamic stylesheets for their web projects.\n\nScope and inheritance rules are essential concepts in programming languages that govern the visibility and accessibility of variables and functions within a program. Here is a rephrased explanation of the key concepts:\n• Definition: Scope defines the reach and accessibility of variables and functions within a program, preventing name collisions by allowing the same name to represent different objects in different contexts.\n• Scope Levels: Scope can vary from a single expression to the entire program, with levels such as global scope, local scope within functions, module scope, and block scope.\n• Scope Resolution: Programming languages follow rules to resolve names, such as the \"inner-to-outer context\" rule, which prioritizes the narrowest relevant context to prevent ambiguity and ensure correct variable access.\n• Variable Shadowing: When two identical names coexist in the same context, referring to different entities, the higher-priority name masks the lower-priority name, potentially causing logic errors.\n• Prototypal Inheritance: In languages like JavaScript, objects inherit properties and methods from their prototype objects, with the language searching the object itself and up the prototype chain until it finds the desired property.\n• Scope in Inheritance: Inheritance in languages like C++ and Ruby involves prototypical inheritance of properties and methods, with child scopes typically inheriting from parent scopes, subject to specific language constructs like directives or private methods.\n• Private Methods: Inheritance allows for the creation of private methods that are only accessible within a specific class or instance, controlling access and preventing direct external calls to sensitive functions.\n\nUnderstanding scope and inheritance rules is vital for writing efficient, maintainable, and error-free code. These concepts manage how variables and functions interact within a program, ensuring proper encapsulation, access control, and inheritance behavior.\n\nOrganizing custom properties in CSS is crucial for maintaining a well-structured and efficient stylesheet. By properly arranging custom properties, developers can improve code readability, reusability, and maintainability. Here are key points to help organize custom properties:\n• Assign descriptive and consistent names to custom properties, starting with two hyphens (--), followed by a meaningful name that reflects the property's purpose.\n• Use names like --primary-color, --font-size-large, or --button-background-color to make properties easy to understand.\n• Organize related custom properties based on their functionality or purpose, such as grouping color-related, typography, or spacing properties.\n• Create logical sections within your stylesheet to categorize custom properties, such as layout, colors, typography, or themes.\n• Define global custom properties at the root level (:root) for consistent usage across the entire project.\n• Use local custom properties within specific components or sections for unique values, preventing unintended side effects and enabling customization.\n• Add comments to custom properties to provide context and explanations for their usage.\n• Document custom properties systematically, outlining their intended use, accepted values, and dependencies.\n• Consolidate similar properties into reusable sets to avoid duplication and promote consistency.\n• Use custom properties to store repetitive values, reducing duplication and maintaining a DRY (Don't Repeat Yourself) codebase.\n\nBy following these guidelines, developers can effectively organize custom properties in CSS, leading to more structured stylesheets, easier maintenance, and improved scalability of web projects.\n\nHere are the best practices for naming conventions in CSS, rephrased for clarity:\n• Hyphen-Delimited Strings: Use hyphen-delimited strings (e.g., .red-box) instead of camel case (e.g., .redBox) for CSS classes to improve readability and align with CSS property names.\n• BEM Naming Convention: Adopt the BEM (Block Element Modifier) naming convention, which divides the user interface into small, reusable components with class names starting with the block name, followed by the element and modifier, using double underscores and double dashes, respectively.\n• Meaningful Prefixes: Prefix classes with strings like c- for components, o- for objects, u- for utilities, and is-/has for states to clearly communicate their purpose to developers.\n• Separate Parents from Children: Divide classes with multiple responsibilities into two separate properties to maintain clarity and organization.\n• Avoid Unsemantic Classes: Ensure that classes explicitly describe their properties for improved code readability and understandability.\n• Limit Words in Class Names: Keep class names self-descriptive with one or two words to facilitate code maintenance and avoid using more than two words for a given name to prevent complexity.\n\nBy adhering to these best practices for naming conventions in CSS, developers can create organized, maintainable, and readable stylesheets, promoting efficient code management and easier collaboration within projects.\n\nStrategies for grouping and organizing variables in CSS involve several best practices, including:\n• Maintain a Consistent Naming Convention: Ensure uniformity in naming variables using a consistent convention like hyphen-delimited strings to enhance code readability and coherence.\n• Grouping and Sequencing: Organize variables logically based on the project's structure and hierarchy. Group variables by categories such as layout, typography, colors, components, or media queries, and arrange them from general to specific or top to bottom for improved organization.\n• Utilize External Stylesheets and Imports: Modularize your code by utilizing external stylesheets and imports to streamline HTML documents, enhance code reusability, and simplify maintenance.\n• Harness Variables and Functions: Employ variables and functions in your CSS to eliminate redundancy, streamline code, and increase flexibility. Variables store values for widespread use, while functions perform calculations or transformations on these values.\n• Refer to a Style Guide or Framework: Consult a style guide or framework to ensure consistency, quality, and compatibility in your code. A style guide sets coding standards, while a framework offers pre-built code snippets and components for efficient web development.\n• Establish Logical Sections in Your Stylesheet: Arrange common styles at the beginning of your stylesheet, followed by more specific rules. This approach facilitates the application of consistent styling across various elements without the need for redundant rulesets.\n• Include Comments in Your CSS: Add descriptive comments to your CSS code to aid future developers in understanding and working with your code. Comments can also serve as reminders of specific decisions or tutorials followed during development.\n\nBy implementing these strategies, you can create a well-structured and easily maintainable CSS codebase that supports efficient navigation and modifications.\n\nCSS Modules enhance reusability and modularity in CSS, allowing for local scoping, preventing conflicts, and confining styles to specific components. Importing styles into individual components improves code clarity and maintenance. Modular CSS strategies foster well-organized, maintainable, and efficient CSS codebases, promoting reusability and modularity.\n\nCSS variables, or custom properties, enhance reusability and maintainability in CSS by defining reusable values within stylesheets. They store various data types, simplifying management and updating of repetitive values. CSS variables are particularly useful for managing design colors, streamlining global modifications, and enabling easy adjustments. Local variables can be used for specific component styles to prevent unintended consequences. Implementing these strategies results in dynamic, efficient, and easily maintainable web designs using CSS Custom Properties.\n\nModular strategies for scalable styling involve methodologies that organize and manage CSS code as projects grow complex. Techniques include the Modular Model for ease of management and code reuse, SMACSS for a consistent development approach, OOCSS for Object-Oriented CSS principles, and CSS Modules for self-contained, reusable styles. These methodologies promote reusability, maintainability, and scalability by categorizing CSS rules, enforcing naming conventions, and avoiding excessive nesting.\n\nCSS custom properties or CSS variables enable dynamic properties and responsive design by separating values from designs, simplifying management and adjustments. They can be combined with calculations for intricate designs. Media queries control CSS properties on different screen sizes, but maintaining them can be challenging. CSS variables can be used to store values and reassign them inside media queries, enhancing organization and understanding. Fluid layouts and percentage-based sizing ensure optimal display on various devices, and avoiding fixed values is crucial when implementing responsive design. These best practices help ensure a dynamic and responsive web design.\n\nUtilizing CSS variables, or custom properties, enables developers to create dynamic, reusable, and responsive designs in CSS. These defined entities reduce repetition by using a double dash prefix and the var() syntax. Custom properties can be scoped to specific elements or globally defined with the :root selector for flexibility. They allow for dynamic styling through JavaScript manipulation, enhancing user experiences. Best practices for naming, grouping, and providing fallback values are essential for readability, maintainability, and cross-browser compatibility. Custom properties aid in creating reusable design systems and simplifying responsive designs by defining design tokens for consistent styles. By following best practices, developers can establish a structured and maintainable CSS codebase for dynamic styling, reusable design systems, and responsive designs.\n\nCSS variables, or custom properties, can be employed in responsive design to separate values from designs, making them easier to manage and adjust. By combining CSS variables with mathematical calculations, developers can create dynamic and adaptable designs, such as managing color palettes, customizing components, and theming designs.\n\n In responsive design, CSS variables can be used to modify sizes and dimensions based on the viewport width using media queries. However, as projects grow in complexity, maintaining media queries can become challenging due to repeated selectors, properties, and media queries. To address these issues, custom properties can be utilized to declare variables that store values intended to change, which can then be reassigned inside media queries. This approach separates variable declarations from property declarations, making it easier to manage CSS properties on different screen sizes and maintain code readability and dryness.\n\n Moreover, custom properties can be used to create reusable design systems and simplify responsive designs. By defining a set of custom properties that represent design tokens, developers can apply consistent styles across a website, promoting efficiency, consistency, and scalability in the design process.\n\nCSS preprocessors extend CSS functionality with modern programming concepts like variables, mixins, and nesting. Popular ones include Sass, Less, and Stylus. They improve code organization and reusability. Preprocessors can be linked to HTML using link tags or style tags. Challenges include bloated CSS and compatibility issues. Best practices include avoiding overuse of features and testing in various browsers. Overall, preprocessors enhance CSS development by streamlining code and improving maintainability.\n\nBenefits of using CSS variables with preprocessors like Sass\n\nUsing CSS variables with preprocessors like Sass offers several benefits, including:\n• Efficient and maintainable code: By defining variables for frequently used values, such as colors or font sizes, developers can easily make changes across the project, reducing code repetition and improving maintainability.\n• Selector and rule nesting: This feature makes the CSS code more organized and easier to read.\n• Inheritance: Styles can be inherited from parent elements, allowing for more dynamic and flexible styles.\n• Math functions: Developers can use mathematical expressions to determine the width of an element relative to its parent or screen size.\n• Variable support: Sass allows for the use of variables, which store a value or a set of values that can be reused throughout Sass files. This is helpful for storing values like colors, fonts, or other frequently used values.\n• Mixins: Sass provides mixins, which are reusable blocks of code that can be included in other parts of the stylesheet. This is useful for defining common styles that are used in multiple places throughout the document.\n• Nesting: Nesting allows developers to group selectors together, making it easier to read and understand the code.\n• Modular architecture: CSS preprocessors enable a modular architecture, making it easier to manage larger projects. This is done by organizing the stylesheet into smaller, reusable modules that can be imported into other files as needed.\n\nBy utilizing these features, developers can write CSS in a more efficient and organized manner, making it easier to maintain and update.\n\nAchieving seamless integration and optimization involves employing a range of techniques and strategies. For data integration, methods such as manual integration, common storage integration, application-based integration, and middleware data integration are commonly used to consolidate data from various sources, ensure consistency, and facilitate unified data analysis.\n\nTo ensure smooth data integration and interoperability, it is essential to establish and enforce data standards and policies, design a robust data integration architecture, implement scalable solutions, validate integration results, and optimize processes. Optimization techniques include automation, orchestration, parallelization, partitioning, caching, indexing, and tuning.\n\nIn technology integration, seamless integration can enhance efficiency and cost-effectiveness. For instance, adopting a cloud-based project management tool can boost collaboration, reduce the need for physical meetings, and increase productivity. Successful technology integration can lead to cost savings, improved customer satisfaction, and a competitive advantage.\n\nTo achieve seamless technology integration, it is crucial to set clear goals, assess existing systems thoroughly, select technology solutions aligned with business needs, involve key stakeholders, and provide comprehensive training and support to employees.\n\nIn essence, seamless integration and optimization can be realized through diverse techniques and strategies, encompassing data integration, optimization methods, and technology integration practices. These approaches aim to consolidate data, ensure consistency, streamline analysis, enhance efficiency, and drive cost savings.\n\nThe search results do not provide specific case studies on mastering CSS custom properties and efficient styling best practices. However, they offer resources and recommendations on the topic, emphasizing naming conventions, JavaScript integration, and CSS custom properties. The resources include a blog post, a YouTube video, a LinkedIn article, and Smashing Magazine articles on CSS fundamentals, typography, selectors, and positioning.\n\nReal-world examples showcasing effective use of CSS custom properties are:\n• Storing computed values using the calc() method and updating them dynamically.\n• Defining custom properties for shorthand properties, such as animation, to adjust a single value for different elements.\n• Applying custom properties for repeated values, like consistent top padding, to simplify code and enhance maintainability.\n• Using custom properties in elements based on media queries to adjust padding values dynamically.\n• Employing custom properties for theming, such as defining theme-related values for consistent design.\n• Using custom properties to store values for dynamic CSS class selectors and properties.\n• Applying custom properties for fully dynamic calc() functions, eliminating the need for complicated JavaScript calculations.\n• Utilizing custom properties to create light or dark variations of a style, spacing tune-ups, and other dynamic changes.\n\nThese examples highlight the versatility and power of CSS custom properties in creating dynamic and maintainable stylesheets.\n\nAnalyzing the performance and maintainability benefits involves assessing how these aspects impact maintenance efficiency and system reliability.\n\nPerformance, concerning maintenance, encompasses responsiveness, stability, scalability, speed, and resource utilization in project management software. A high-performance system ensures tasks are swiftly and effectively completed, enhancing user experience and productivity. Conversely, maintainability focuses on the ease of conducting maintenance activities. It involves designing systems to facilitate straightforward and cost-effective maintenance tasks, reducing downtime and prolonging asset lifespan.\n\nThe advantages of evaluating performance and maintainability include:\n• Enhanced Reliability: Optimizing performance and maintainability results in increased system reliability, ensuring equipment functions as intended under specified conditions. This reliability leads to higher uptime, reduced failure risks, improved safety, and ultimately increased productivity and profitability.\n• Improved Asset Integrity: Performance and maintainability analysis aids in monitoring asset integrity, ensuring optimal asset performance while adhering to standards. This leads to enhanced product quality, decreased repair frequency, extended asset longevity, and improved customer satisfaction.\n• Effective Preventive Maintenance Strategy: Analyzing performance and maintainability enhances preventive maintenance strategies by identifying areas for enhancement and targeted activities. This proactive approach reduces unplanned downtime, minimizes reactive maintenance, and prepares organizations for potential repairs, ensuring operational continuity.\n• Cost Savings and Efficiency: Prioritizing performance and maintainability helps organizations reduce maintenance costs, enhance operational efficiency, and save resources. Improved reliability and maintainability result in fewer breakdowns, reduced repair times, and overall cost-effectiveness in maintenance operations.\n\nEvaluating the benefits of performance and maintainability enhances reliability, asset integrity, preventive maintenance strategies, cost savings, and operational efficiency. By focusing on these aspects, organizations can optimize maintenance processes, enhance asset performance, and achieve sustained success.\n\nEnsuring cross-browser compatibility is vital in web development to maintain consistent user experiences across diverse browsers, platforms, and devices. It involves creating web applications that function uniformly across browsers such as Mozilla Firefox, Safari, and Microsoft Edge. Common challenges include layout inconsistencies, JavaScript conflicts, and form control issues. Strategies for achieving cross-browser compatibility encompass using browser-friendly fonts, adhering to Web Content Accessibility Guidelines (WCAG), conducting accessibility testing, employing CSS resets, feature detection, and progressive enhancement. Thorough testing is essential to detect and resolve compatibility issues. Tools like Can I Use and MDN offer current browser support and technology information. Cross-browser compatibility guarantees a smooth user experience for all visitors, irrespective of their chosen browser.\n\nTo ensure compatibility with older browsers, developers can employ various strategies, including:\n• Progressive Enhancement: Prioritizing basic content and functionality that works on all browsers while progressively adding more advanced features. This ensures that users on any browser or device can access the website or web application.\n• Graceful Degradation: Designing web pages and applications with advanced features while providing fallbacks for browsers that don't support them. This approach allows developers to provide a richer experience for users on more modern browsers while ensuring a satisfactory experience for those on older browsers.\n• Utilizing Modern Web Standards and Technologies: Employing HTML5, CSS3, and JavaScript frameworks like React and Vue.js. These standards and technologies provide a future-proof web experience and improve performance, security, accessibility, and responsive design.\n• Thorough Testing on Relevant Browsers: Testing on popular and relevant browsers to detect and resolve compatibility issues. Tools like Modernizr can help detect whether a new feature is compatible with a browser and provide fallbacks for those that don't support it.\n• Updating Browsers and Operating Systems: Encouraging users to update their browsers and operating systems to the latest versions to improve compatibility and security.\n• Clearing Cache and Cookies: Clearing cache and cookies to resolve some compatibility issues.\n• Disabling Extensions and Add-ons: Disabling browser extensions and add-ons that may interfere with the website or web application's functionality.\n\nBy employing these strategies, developers can ensure compatibility with older browsers and provide a seamless user experience for all users, regardless of their browser or device.\n\nImplementing fallbacks for unsupported properties involves using techniques like CSS @supports and providing alternative styles for newer CSS properties that may not be fully supported across all browsers. By employing @supports, developers can test if a browser supports a specific property or property:value combination before applying it, allowing for graceful degradation when unsupported features are encountered. Furthermore, developers can define fallback styles that will be applied when newer CSS properties are not supported by certain browsers, ensuring a consistent user experience across different browser environments. These strategies help maintain cross-browser compatibility and ensure that websites or web applications function as intended across various browsers and devices.\n\nBest practices for optimizing performance when using CSS custom properties\n• Utilize Descriptive Naming: Opt for meaningful names for custom properties to enhance code clarity and maintainability.\n• Restrict Usage in Critical Areas: Avoid excessive use of custom properties in performance-sensitive sections like animations to reduce rendering and computational load.\n• Minimize Unnecessary Updates: Prevent unnecessary recalculations or updates of custom properties to mitigate performance impacts.\n• Verify Browser Compatibility: Ensure CSS custom properties are supported across browsers to maintain consistency.\n• Include Fallback Values: Provide fallback values using standard CSS properties for browsers lacking custom property support for graceful degradation.\n• Debugging and Optimization: Utilize browser developer tools for debugging, checking for conflicts, and adhering to syntax and naming conventions.\n• Limit Custom Property Count: Avoid an excessive number of custom properties to prevent performance degradation.\n• Opt for Efficient Selectors and Properties: Choose specific and efficient selectors and properties to enhance processing speed and rendering efficiency.\n• Optimize CSS File Size: Minify CSS files, compress using tools like Gzip, and remove unused styles to reduce file size and enhance loading speed.\n• Simplify Selectors: Keep selectors straightforward and targeted for improved performance.\n• Mobile Optimization: Employ media queries to tailor styles based on device characteristics for optimized performance on mobile devices.\n\nBy adhering to these guidelines and strategies, developers can enhance performance when utilizing CSS custom properties and reduce rendering overhead for more efficient web development practices.\n\nMastering CSS custom properties enhances efficient styling. These variables promote reusability and organization. Optimizing CSS performance involves considering file size, selectors, and animations/transitions. Best practices include separating logic from design, using custom properties for dynamic elements, and understanding the difference between dynamic and static variables. Implementing these strategies improves CSS performance, maintainability, and clarity, ultimately benefiting the user experience."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/CSS/--*",
        "document": "This feature is well established and works across many devices and browser versions. It’s been available across browsers since April 2017 .\n\nProperty names that are prefixed with , like , represent custom properties that contain a value that can be used in other declarations using the function.\n\nCustom properties are scoped to the element(s) they are declared on, and participate in the cascade: the value of such a custom property is that from the declaration decided by the cascading algorithm."
    }
]