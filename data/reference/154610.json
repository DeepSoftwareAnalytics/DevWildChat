[
    {
        "link": "https://stackoverflow.com/questions/13381384/modify-an-existing-excel-file-using-openpyxl-in-python",
        "document": "I am basically trying to copy some specific columns from a CSV file and paste those in an existing excel file[*.xlsx] using python. Say for example, you have a CSV file like this :\n\nSo, i wanted to copy the both col_3 and col_4 and paste those in col_8 and col_9 in an existing excel file [which is a .XLSX format]. I have tried this in various way to solve, but could not find out the exact way. i tried something like this :\n\nbut problem with this solution is it does not allow me to save as *.XLSX format which is strictly required for me.\n\nI have tried to use Openpyxl as it can handle *.XLSX format, but could not find out a way to modify the existing excel file. can anyone please help on this?\n\nDoubt : 1) Can we really read a whole column from a CSV file and store into an array/list using python? 2) Can we modify the existing excel file which is in .XLSX format using openpyxl or any other package?"
    },
    {
        "link": "https://pandas.pydata.org/docs/reference/api/pandas.ExcelWriter.html",
        "document": "Default is to use:\n• None xlsxwriter for xlsx files if xlsxwriter is installed otherwise openpyxl\n\nThe writer should be used as a context manager. Otherwise, call to save and close any opened file handles.\n\nPath to xls or xlsx or ods file. Engine to use for writing. If None, defaults to . NOTE: can only be passed as a keyword argument. File mode to use (write or append). Append does not work with fsspec URLs. Extra options that make sense for a particular storage connection, e.g. host, port, username, password, etc. For HTTP(S) URLs the key-value pairs are forwarded to as header options. For other URLs (e.g. starting with “s3://”, and “gcs://”) the key-value pairs are forwarded to . Please see and for more details, and for more examples on storage options refer here. How to behave when trying to write to a sheet that already exists (append mode only).\n• None new: Create a new sheet, with a name determined by the engine.\n• None replace: Delete the contents of the sheet before writing to it.\n• None overlay: Write contents to the existing sheet without first removing, but possibly over top of, the existing contents. Keyword arguments to be passed into the engine. These will be passed to the following functions of the respective engines:\n\nFor compatibility with CSV writers, ExcelWriter serializes lists and dicts to strings before writing.\n\nTo write to separate sheets in a single file:\n\nYou can set the date format or datetime format:\n\nYou can also append to an existing Excel file:\n\nHere, the parameter can be set to replace a sheet if it already exists:\n\nYou can also write multiple DataFrames to a single sheet. Note that the parameter needs to be set to :\n\nYou can store Excel file in RAM:\n\nYou can pack Excel file into zip archive:\n\nYou can specify additional arguments to the underlying engine:\n\nIn append mode, are passed through to openpyxl’s :"
    },
    {
        "link": "https://stackoverflow.com/questions/65395196/how-can-i-get-a-dataframe-to-overwrite-an-existing-excel-in-a-specific-cell-usin",
        "document": "As far as I can tell, you are doing multiple things at once which negate each other's effect. Why are youn even using openpyxl?\n\nYou load the workbook from the excel file with openpyxl and , then you override you excel file with the pandas DataFrame, at which point the output should be the one you want. But after that, you again override the excel file with the content of the loaded workbook which you loaded before the changes you made with pandas, which restores the excel file to its original state.\n\nGet rid of every line involving openpyxl and it should work.\n\nIf you want to modify your excel file with pandas, you don't need openpyxl, if you want to modify you excel with openpyxl, you don't need pandas."
    },
    {
        "link": "https://geeksforgeeks.org/change-value-in-excel-using-python",
        "document": "In this article, We are going to change the value in an Excel Spreadsheet using Python.\n\nopenpyxl is a Python library to read/write Excel xlsx/xlsm/xltx/xltm files. It was born from a lack of an existing library to read/write natively from Python the Office Open XML format. openpyxl is the library needed for the following task. You can install openpyxl module by using the following command in Python.\n• load_workbook(): function used to read the excel spreadsheet\n• workbook.active: points towards the active sheet in the excel spreadsheet\n• Start by opening the spreadsheet and selecting the main sheet\n• Write what you want into a specific cell\n\nBelow is the implementation:\n\nThis package provides a collection of utilities for working with Excel files. Since these utilities may require either or both of the xlrd and xlwt packages, they are collected together here, separate from either package.You can install xlwt/xlrd/xlutils modules by using the following command in Python\n• open_workbook(): function used to read the excel spreadsheet\n• Read the first sheet to write within the writable copy\n• Modify value at the desired location\n\nBelow is the implementation:"
    },
    {
        "link": "https://python.land/data-processing/process-excel-data-in-python-and-pandas",
        "document": "Spreadsheets are one of the most used file formats for storing tabular data in offices worldwide. The most famous software for creating and editing spreadsheets is Microsoft Excel. Hence, spreadsheets are also commonly called Excel files. There are several alternatives with which you can do similar things, like LibreOffice, which also supports reading and writing files in Excel format.\n\nBecause Excel files are so common around the office, you will eventually want to manipulate them programmatically! This tutorial shows how to create, read, update, and delete data in Excel files using Python. Please note that this article is not about using Python in Excel itself.\n\nHow to Process Excel Files with Python?\n\nTo process Excel data in Python, we will use the highly popular module. Pandas is a Python library for data manipulation and analysis. It offers data structures and operations for manipulating numerical tables and time series. To get started with Pandas, you can read the documentation and find tutorials on the official Pandas website. It provides a comprehensive guide to all the functionalities provided by Pandas.\n\nThe module works together with two other modules, and , to interact with Excel files. You can install the latest version of both of these modules with :\n\nAfter installing the above modules, we can write Python programs to process Excel data in Python in different ways, as discussed in the next sections.\n\nHow do you create an Excel file in Python?\n\nLet’s start with the basics. We will use the function to open a new Excel file. It has the following syntax:\n• The parameter takes the name of the Excel file that we want to open.\n• The parameter is used to specify the engine or module to process the Excel files. By default, it is set to None. You can set the engine parameter to or to use any of these modules to process Excel files.\n• The parameter is used to specify if we want to open the Excel file in write mode or append mode. By default, the parameter is set to and the function opens the file in write mode. You can set the mode parameter to to open the spreadsheet in the append mode. Note that the append mode doesn’t work with the “ engine. You need to use the module to open the file in append mode.\n• We use the if_sheet_exists parameter while updating an Excel sheet. The program runs into an error if we write a new sheet to the Excel file with the same name as an existing sheet. You can set the parameter to for replacing a sheet. Alternatively, you can set it to to create a new sheet with a number subscript if a sheet with the same name already exists.\n\nreturns an object just like the function returns a file object. We can use this object to process Excel data in Python.\n\nTo create an empty Excel file in Python using the module, follow these steps:\n• First, open an Excel file in write mode using the function. The function takes the name of the Excel file as the first input argument. Here, we will use the engine to open the file.\n• Next, we create an empty pandas dataframe using the function defined in the module.\n• Once we have the empty dataframe, we will use the method to convert it to an empty Excel file. The method takes the object returned by the function as its first input argument. It also takes the new sheet’s name as input to the parameter.\n• Finally, we will close the object using method to ensure the file is saved properly.\n\nHere’s the code to do so:\n\nAfter executing the above code, we get the following empty Excel file. You can observe that the sheet in the Excel file is named as we have set the parameter to in the method.\n\nOur next step is to fill the pandas dataframe with some data, as discussed in the following section.\n\nWe can use different approaches to create an Excel sheet with data in Python using pandas dataframes. We can create a pandas dataframe using a list of lists, a list of dictionaries, or by reading from a CSV file.\n\nCreate an Excel File Using a List of Lists in Python\n\nTo create an Excel file using a list of lists in Python, we will first create a pandas dataframe using the function. Here, we will pass the list of lists as the first input argument and a list of column names as input to the parameter.\n\nAfter executing the function, we get a pandas dataframe containing the data from the list of lists. Next, we can use the function to open an Excel file in write mode and export the pandas dataframe to an Excel sheet using the method.\n\nAfter execution of the above code, we get the following Excel file.\n\nThe above Excel file shows that the sheet contains an extra unnamed column with index counts. To avoid this, you can set the parameter to in the method. After this, you will get the Excel file with only the desired columns:\n\nIn the above code, we have set the parameter to False. Hence, we will get an Excel without the unnamed column:\n\nBy default, the data is written into the Excel sheet starting from the sheet’s first row and first column. If you want to shift rows while writing data to the Excel sheet, you can use the parameter in the method as shown below:\n\nThe parameter takes the row number starting from where the data should be written in the Excel file. For example, we have set the parameter to 3 in the above code. Hence, the data in the Excel file will be written starting from the fourth row of the sheet (remember, we programmers start counting at 0), leaving the first three rows empty. You can observe this in the following file.\n\nYou can also shift the output columns in the Excel sheet while writing data to the spreadsheet. For this, you can use the parameter in the method. The parameter takes the column number after which the data should be written, and writes the data to the Excel sheet starting from the specific column. You can observe this in the following example.\n\nIn the above code, we have set the parameter to 4. Hence, the data will be written to the Excel sheet starting from the fifth column as shown in the following file:\n\nOf course, you can also use the and parameters together to write data at a specific location in the Excel sheet, as shown below:\n\nIn this code, we have set the and parameters to 3 and 4, respectively. Hence, the data is written to the Excel sheet starting from the fourth row and fifth column, as demonstrated in the file below:\n\nCreate an Excel File Using a List of Dictionaries\n\nInstead of a list of lists, we can use a list of dictionaries to create an Excel file in Python. The function takes the list of dictionaries as input and returns a pandas dataframe. Here, values in each dictionary are put into a row, and the keys are converted into the column names in the dataframe.\n\nAfter creating the dataframe, you can write the data into an Excel file using the function and the method as shown below:\n\nIn the above code, we have used a dictionary instead of a list of lists to create the dataframe. Still, we get the same Excel file as the output:\n\nSince we can easily convert JSON to dictionaries with Python, you can also use the above method to convert (flat) JSON objects into Pandas dataframes, and, thus, into an Excel file.\n\nConvert a CSV File Into an Excel File in Python\n\nTo convert a CSV file into an Excel sheet, we will first read the CSV file into a pandas dataframe using the function. The function takes the filename of the CSV file as its input argument and returns a pandas dataframe.\n\nThen, we can export the pandas dataframe into an Excel file using the function and the method as shown in the following example.\n\nIn the above code, we have used the following CSV file.\n\nAfter executing the code, the output Excel file looks as follows.\n\nCreate an Excel File With Multiple Sheets in Python\n\nTo create an Excel file with multiple sheets in Python, follow these steps:\n• First, create multiple pandas dataframes using the function and a list of lists or dictionaries.\n• Next, open an Excel file in write mode using the function.\n• Once we get the object, we write all the dataframes into the Excel file as sheets using the method. Here, we have to give each sheet a different name.\n• Finally, we will close the object using the method.\n\nAfter executing the above steps, we can create an Excel file with multiple sheets:\n\nIn the above code, we first defined three lists of dictionaries that contain height, weight, and marks data. Then, we converted the list of dictionaries to pandas dataframes. Finally, we exported the dataframes to Excel sheets using the method. The output Excel file with multiple sheets looks as follows:\n\nMerge Multiple CSV Files Into an Excel File in Python\n\nWe can also merge multiple CSV files into an Excel file as sheets. For this, we will first read all the CSV files into pandas dataframes using the function. Then, we will write the dataframes as sheets into an Excel file using the ExcelWriter() function and the to_excel() function, as shown in the following example.\n\nWe have used the following CSV files in the above code as input:\n\nAfter executing the above code, the output Excel sheet looks as follows:\n\nHow to Read Excel Data in Python?\n\nTo read an Excel file in Python, we can use the function with the function defined in the pandas module. In some cases, we can directly use the function without using the function. Let’s take a look at all the use cases.\n\nTo read an Excel file into a pandas dataframe in Python, we will use the function. The function takes the path of the Excel file as its input argument and returns the Excel sheet as a pandas dataframe. You can observe this in the following example.\n\nIn the above code, we have used the following Excel file as input to the function.\n\nThe output of the program looks as follows.\n\nIf there are multiple sheets in the Excel file, the function only returns the first sheet in the Excel file as its output.\n\nRead an Excel File With Multiple Sheets in Python\n\nTo read sheets other than the first sheet from an Excel file with multiple sheets, we can use the parameter in the function.\n\nThe parameter takes the position or the name of the Excel sheet as its input argument. After execution, the function returns the sheet at the specified position or with the specified name as a dataframe.\n\nFor example, we can read the third sheet in the Excel file below by setting the parameter to 2.\n\nIf we know the sheet names in the Excel file, we can directly pass the sheet name to the parameter in the function:\n\nIn the above code, we have read the sheet from the Excel file. We get the following output:\n\nIf we don’t know the sheet names in an Excel file, we can obtain them using the function. The function takes the file name of the spreadsheet as its input argument and returns an object. This object contains the data from the spreadsheet and all its attributes.\n\nWe can get the name of all the sheets in the Excel file using the attribute of the object as shown below:\n\nYou can also use the function to read data from an Excel file in Python. For this, you can pass the object returned by the function to the function instead of the filename. The rest of the syntax remains the same as shown in the following example.\n\nIn this code, we have passed the ExcelFile object returned by the function to the function instead of the filename of the Excel file. Still, we get the same output as in the previous examples:\n\nRead Data From a Specific Column of a Sheet in the Excel File\n\nYou can use the usecols parameter in the read_excel() function to read data from a specific column of a sheet in an Excel file in Python. The usecols parameter takes a list containing the column names we want to read. After execution, the function returns a pandas dataframe containing the specified data from the given sheet. You can observe this in the following example.\n\nIn the above code, we have passed the list to the parameter. This causes the function only to read the Name column from the Excel sheet, as shown in the following output:\n\nIn this example, we have read only one column from the Excel sheet. To read two or more columns, you can put the desired column names in the list passed to the parameter.\n\nRead Data From a Single Row of a Sheet in the Excel File\n\nTo read data from a single row of an Excel sheet, we will first read the Excel sheet into a pandas dataframe using the function. Then, we will use the attribute of the pandas dataframe to get the row at the specified position, as shown below:\n\nWe used the attribute to read the row at index 2 of the dataframe. Hence, we get the third row of the Excel sheet as output:\n\nRead Data From a Specific Cell in an Excel Sheet\n\nTo read the data from a specific cell in a given Excel sheet using the pandas module in Python, we will first read the Excel sheet into a dataframe. Next, we will read the data from the given row and column of the dataframe, as shown below:\n\nIn this code, we created the pandas dataframe using the function. Then, we used the attribute to read the row at index 2 of the dataframe. Finally, we use the indexing operator to read the value in the column of the given row. After execution of the program, we get the following output:\n\nAlternatively, you can select the desired column first and then read the data in a specific row, as shown below:\n\nIn the above code, we first obtained the column from the dataframe using the indexing operator. Then, we used the attribute to get the data in the third row. The output is the same. Observe that I have also used the function to read the data instead of using the function directly.\n\nTo update an Excel file in Python using the pandas module, we will use the “openpyxl” module by using the engine parameter in the ExcelWriter() function. This will allow us to open the Excel files in append mode. After this, we can perform different update operations, as discussed in the following subsections.\n\nTo add an Excel sheet to an existing spreadsheet, we will first open the existing Excel file in append mode. For this, we will set the parameter to and the parameter to in the function. After this, we can append a dataframe into the spreadsheet using the method as shown below.\n\nWe have used the following Excel file as input:\n\nIn the above example, we create a dataframe from a list of dictionaries. Then, we write it to an existing Excel file using the method. After execution of the code, we get the following output file.\n\nIn the above example, the sheet name passed to the parameter in the method must not exist in the input Excel file. Otherwise, the program will run into a exception.\n\nAdd a Row or Column to a Sheet in an Excel File\n\nWe will use the following steps to add a row to an existing sheet in an Excel file in Python:\n• First, we open the Excel file in append mode using the function. Here, we will set the parameter to so that we can overwrite the existing sheet after adding a new row to it.\n• Next, we read the sheet we want to modify into a pandas dataframe using the method.\n• Once we get the data frame, we add a row to it using the function.\n• After adding a new row to the dataframe, we write back the dataframe to the Excel file using the method.\n• Finally, we close the object using the method.\n\nAfter executing the above statements, we can add a row to a sheet in an Excel file in Python as shown below.\n\nWe have used the following Excel file as input to the above code.\n\nAfter executing the program, we get the following Excel file as output.\n\nInstead of a row, you can also add a column to a sheet in an Excel file in Python. For example, we have added two columns, namely and , to the Excel sheet named as shown below:\n\nFor the above program, we used the following Excel file as input.\n\nOnce we execute the code, we get the following Excel file as the output.\n\nWe can use the following steps to duplicate a sheet in an Excel file in Python:\n• First, open the existing Excel file in append mode using the function. Here, we set the parameter to so that we can duplicate the existing sheet.\n• Next, we read the sheet we want to duplicate into a pandas dataframe using the method.\n• Once we get the data frame, we write back the dataframe to the Excel file using the method.\n• Finally, we close the object using the method.\n\nAfter executing the above steps, we get the duplicate sheet with the sheet name if the name of the existing sheet is . You can observe this in the following example:\n\nIn the above code, we passed the following Excel file as input:\n\nIn the program, we have created a duplicate of the sheet. Hence, we will get a sheet named in the output Excel file as shown below:\n\nTo rename a sheet in an Excel file in Python, we will use the module directly. For this, we will use the following steps.\n• First, we will open the Excel file using the function defined in the module. The function takes the filename of the Excel file as its input argument and returns the spreadsheet.\n• Next, we will select the desired sheet from the Excel file using the sheet name and the indexing operator.\n• After selecting the sheet, we will use the attribute of the Excel sheet to rename it. For renaming, we will assign the new sheet name to the attribute of the selected sheet.\n• Finally, we will save the modified Excel file using the method.\n\nIn code, this looks like:\n\nIn the above code, we have used the following Excel file as input.\n\nAfter renaming the sheet to , we get the following Excel file as output.\n\nWe can also perform delete operations on Excel data using the pandas and openpyxl modules. We can delete a sheet from an Excel file, a column from a sheet, or a row from a sheet in a given Excel file, as discussed in the following subsections.\n\nTo delete a sheet from an Excel file in Python, we will use the module. For this, we can use the following steps:\n• First, we will open the Excel file using the function.\n• Then, we will get the sheet we want to delete using the sheet name.\n• After this, we will invoke the method on the spreadsheet object returned by the function and pass the sheet we want to delete as its input argument. The method will delete the Excel sheet from the spreadsheet.\n• Finally, we will save the modified spreadsheet using the method.\n\nAfter executing the above steps, we can easily delete a sheet from an Excel file in Python as shown below.\n\nWe have given the below Excel file as input to the code.\n\nAfter deleting the sheet named from the Excel file, we get the following Excel file as output.\n\nDelete a Row or a Column From a Sheet in an Excel File\n\nTo delete a row from an Excel sheet in Python, we will use the following steps:\n• We will open the Excel file in append mode using the function. We will also set the parameter to so that we can overwrite an existing sheet after deleting a row.\n• Next, we will read the sheet from which we want to delete a row into a pandas dataframe.\n• Once we get the dataframe, we will delete the row from the dataframe using the method. The method, when invoked on a dataframe, takes a list of row indices to be deleted as its input argument. We will also set the parameter to 0 in the method to let the program know that we want to delete a row and not a column. The method will return the modified dataframe after deleting the given row.\n• Next, we will write back the dataframe to the Excel file using function.\n• Finally, we will close the object using the method.\n\nAfter executing the above steps, we can delete a row from a sheet in an Excel file in Python. You can observe this in the following example.\n\nThe following is the input Excel file to the above program:\n\nAfter deleting a row from the weight sheet, we get the following Excel file:\n\nInstead of a row, you can delete a column from a sheet in an Excel file using the pandas module in Python. For this, you can pass the list of column names you want to delete as the first input argument to the drop() method. You also need to set the axis parameter to 1 to let the program know you want to delete a column, as shown below:\n\nWe have given the following Excel file as input to the above program.\n\nAfter deleting the “Weight_lbs” column from the weight sheet, we get the following Excel file:\n\nWe will use the following steps to merge all the sheets of an Excel file into a CSV file in Python:\n• First, we will read the Excel file using the function.\n• Then, we will read all the sheets we want to merge into CSV into pandas dataframes.\n• Once we get the dataframes, we will merge them into a single dataframe using the function.\n• Finally, we will save the merged dataframe into a CSV file using the method.\n\nAfter executing the above steps, we will get the merged data from all the sheets in the Excel into a CSV file. You can observe this in the following example:\n\nIn the above code, if identically named columns are in each sheet, we will get a CSV file with one sheet where the columns are merged into one. For example, the following file contains three sheets with the same columns:\n\nIf we give the above Excel file as input to the program, we will get a CSV file as shown below:\n\nIf we have differently named columns in the sheets in the Excel file, the output CSV file contains the union of the columns in the Excel file. You can observe this in the following example:\n\nWe have given the following file as input to the above program:\n\nThe output CSV file is as follows:\n\nThis tutorial discussed different Excel file operations using Python and Pandas. Using these examples, you can automate tedious work in an office environment. We discussed how to create, read, update, and delete sheets in an Excel file and how to merge Excel sheets to CSV files and vice versa."
    },
    {
        "link": "https://realpython.com/openpyxl-excel-spreadsheets-python",
        "document": "Excel spreadsheets are one of those things you might have to deal with at some point. Either it’s because your boss loves them or because marketing needs them, you might have to learn how to work with spreadsheets, and that’s when knowing comes in handy!\n\nSpreadsheets are a very intuitive and user-friendly way to manipulate large datasets without any prior technical background. That’s why they’re still so commonly used today.\n\nIn this article, you’ll learn how to use openpyxl to:\n• Create simple or more complex spreadsheets, including adding styles, charts, and so on\n\nThis article is written for intermediate developers who have a pretty good knowledge of Python data structures, such as dicts and lists, but also feel comfortable around OOP and more intermediate level topics.\n\nIf you ever get asked to extract some data from a database or log file into an Excel spreadsheet, or if you often have to convert an Excel spreadsheet into some more usable programmatic form, then this tutorial is perfect for you. Let’s jump into the caravan! First things first, when would you need to use a package like in a real-world scenario? You’ll see a few examples below, but really, there are hundreds of possible scenarios where this knowledge could come in handy. You are responsible for tech in an online store company, and your boss doesn’t want to pay for a cool and expensive CMS system. Every time they want to add new products to the online store, they come to you with an Excel spreadsheet with a few hundred rows and, for each of them, you have the product name, description, price, and so forth. Now, to import the data, you’ll have to iterate over each spreadsheet row and add each product to the online store. Say you have a Database table where you record all your users’ information, including name, phone number, email address, and so forth. Now, the Marketing team wants to contact all users to give them some discounted offer or promotion. However, they don’t have access to the Database, or they don’t know how to use SQL to extract that information easily. What can you do to help? Well, you can make a quick script using that iterates over every single User record and puts all the essential information into an Excel spreadsheet. That’s gonna earn you an extra slice of cake at your company’s next birthday party! You may also have to open a spreadsheet, read the information in it and, according to some business logic, append more data to it. For example, using the online store scenario again, say you get an Excel spreadsheet with a list of users and you need to append to each row the total amount they’ve spent in your store. This data is in the Database and, in order to do this, you have to read the spreadsheet, iterate through each row, fetch the total amount spent from the Database and then write back to the spreadsheet. Here’s a quick list of basic terms you’ll see when you’re working with Excel spreadsheets: A Spreadsheet is the main file you are creating or working with. A Sheet is used to split different kinds of content within the same spreadsheet. A Spreadsheet can have one or more Sheets. A Column is a vertical line, and it’s represented by an uppercase letter: A. A Row is a horizontal line, and it’s represented by a number: 1. A Cell is a combination of Column and Row, represented by both an uppercase letter and a number: A1. Now that you’re aware of the benefits of a tool like , let’s get down to it and start by installing the package. For this tutorial, you should use Python 3.7 and openpyxl 2.6.2. To install the package, you can do the following: After you install the package, you should be able to create a super simple spreadsheet with the following code: The code above should create a file called in the folder you are using to run the code. If you open that file with Excel you should see something like this:\n\nLet’s start with the most essential thing one can do with a spreadsheet: read it. You’ll go from a straightforward approach to reading a spreadsheet to more complex examples where you read the data and convert it into more useful Python structures. Before you dive deep into some code examples, you should download this sample dataset and store it somewhere as : Download Dataset: Click here to download the dataset for the openpyxl exercise you’ll be following in this tutorial. This is one of the datasets you’ll be using throughout this tutorial, and it’s a spreadsheet with a sample of real data from Amazon’s online product reviews. This dataset is only a tiny fraction of what Amazon provides, but for testing purposes, it’s more than enough. Finally, let’s start reading some spreadsheets! To begin with, open our sample spreadsheet: In the code above, you first open the spreadsheet using , and then you can use to see all the sheets you have available to work with. After that, selects the first available sheet and, in this case, you can see that it selects Sheet 1 automatically. Using these methods is the default way of opening a spreadsheet, and you’ll see it many times during this tutorial. Now, after opening a spreadsheet, you can easily retrieve data from it like this: To return the actual value of a cell, you need to do . Otherwise, you’ll get the main object. You can also use the method to retrieve a cell using index notation. Remember to add to get the actual value and not a object: You can see that the results returned are the same, no matter which way you decide to go with. However, in this tutorial, you’ll be mostly using the first approach: . Note: Even though in Python you’re used to a zero-indexed notation, with spreadsheets you’ll always use a one-indexed notation where the first row or column always has index . The above shows you the quickest way to open a spreadsheet. However, you can pass additional parameters to change the way a spreadsheet is loaded. There are a few arguments you can pass to that change the way a spreadsheet is loaded. The most important ones are the following two Booleans:\n• read_only loads a spreadsheet in read-only mode allowing you to open very large Excel files.\n• data_only ignores loading formulas and instead loads only the resulting values. Now that you’ve learned the basics about loading a spreadsheet, it’s about time you get to the fun part: the iteration and actual usage of the values within the spreadsheet. This section is where you’ll learn all the different ways you can iterate through the data, but also how to convert that data into something usable and, more importantly, how to do it in a Pythonic way. There are a few different ways you can iterate through the data depending on your needs. You can slice the data with a combination of columns and rows: You can get ranges of rows or columns: # Get all cells from column A # Get all cells for a range of columns # Get all cells from row 5 # Get all cells for a range of rows You’ll notice that all of the above examples return a . If you want to refresh your memory on how to handle in Python, check out the article on Lists and Tuples in Python. There are also multiple ways of using normal Python generators to go through the data. The main methods you can use to achieve this are: Both methods can receive the following arguments: These arguments are used to set boundaries for the iteration: You’ll notice that in the first example, when iterating through the rows using , you get one element per row selected. While when using and iterating through columns, you’ll get one per column instead. One additional argument you can pass to both methods is the Boolean . When it’s set to , the values of the cell are returned, instead of the object: If you want to iterate through the whole dataset, then you can also use the attributes or directly, which are shortcuts to using and without any arguments: These shortcuts are very useful when you’re iterating through the whole dataset. Now that you know the basics of iterating through the data in a workbook, let’s look at smart ways of converting that data into Python structures. As you saw earlier, the result from all iterations comes in the form of . However, since a is nothing more than a that’s immutable, you can easily access its data and transform it into other structures. For example, say you want to extract product information from the spreadsheet and into a dictionary where each key is a product ID. A straightforward way to do this is to iterate over all the rows, pick the columns you know are related to product information, and then store that in a dictionary. Let’s code this out! First of all, have a look at the headers and see what information you care most about: This code returns a list of all the column names you have in the spreadsheet. To start, grab the columns with names: Lucky for you, the columns you need are all next to each other so you can use the and to easily get the data you want: Nice! Now that you know how to get all the important product information you need, let’s put that data into a dictionary: # Using the values_only because you want to return the cells' values # Using json here to be able to format the output for displaying later The code above returns a JSON similar to this: Here you can see that the output is trimmed to 2 products only, but if you run the script as it is, then you should get 98 products. To finalize the reading section of this tutorial, let’s dive into Python classes and see how you could improve on the example above and better structure the data. For this, you’ll be using the new Python Data Classes that are available from Python 3.7. If you’re using an older version of Python, then you can use the default Classes instead. So, first things first, let’s look at the data you have and decide what you want to store and how you want to store it. As you saw right at the start, this data comes from Amazon, and it’s a list of product reviews. You can check the list of all the columns and their meaning on Amazon. There are two significant elements you can extract from the data available: The Review has a few more fields: You can ignore a few of the review fields to make things a bit simpler. So, a straightforward implementation of these two classes could be written in a separate file : After defining your data classes, you need to convert the data from the spreadsheet into these new structures. Before doing the conversion, it’s worth looking at our header again and creating a mapping between columns and the fields you need: Let’s create a file where you have a list of all the field names and their column location (zero-indexed) on the spreadsheet: You don’t necessarily have to do the mapping above. It’s more for readability when parsing the row data, so you don’t end up with a lot of magic numbers lying around. Finally, let’s look at the code needed to parse the spreadsheet data into a list of product and review objects: \\ \\ # Using the read_only method since you're not gonna be editing the spreadsheet # Using the values_only because you just want to return the cell value # You need to parse the date from the spreadsheet into a datetime format After you run the code above, you should get some output like this: That’s it! Now you should have the data in a very simple and digestible class format, and you can start thinking of storing this in a Database or any other type of data storage you like. Using this kind of OOP strategy to parse spreadsheets makes handling the data much simpler later on. Before you start creating very complex spreadsheets, have a quick look at an example of how to append data to an existing spreadsheet. Go back to the first example spreadsheet you created ( ) and try opening it and appending some data to it, like this: # Start by opening the spreadsheet and selecting the main sheet # Write what you want into a specific cell Et voilà, if you open the new spreadsheet, you’ll see the following change:\n\nThere are a lot of different things you can write to a spreadsheet, from simple text or number values to complex formulas, charts, or even images. Previously, you saw a very quick example of how to write “Hello world!” into a spreadsheet, so you can start with that: The highlighted lines in the code above are the most important ones for writing. In the code, you can see that:\n• Line 5 shows you how to create a new empty workbook.\n• Lines 8 and 9 show you how to add data to specific cells.\n• Line 11 shows you how to save the spreadsheet when you’re done. Even though these lines above can be straightforward, it’s still good to know them well for when things get a bit more complicated. Note: You’ll be using the spreadsheet for some of the upcoming examples, so keep it handy. One thing you can do to help with coming code examples is add the following method to your Python file or console: It makes it easier to print all of your spreadsheet values by just calling . Before you get into the more advanced topics, it’s good for you to know how to manage the most simple elements of a spreadsheet. You already learned how to add values to a spreadsheet like this: There’s another way you can do this, by first selecting a cell and then changing its value: The new value is only stored into the spreadsheet once you call . The creates a cell when adding a value, if that cell didn’t exist before: # Before, our spreadsheet has only 1 row # Try adding a value to row 10 As you can see, when trying to add a value to cell , you end up with a tuple with 10 rows, just so you can have that test value. One of the most common things you have to do when manipulating spreadsheets is adding or removing rows and columns. The package allows you to do that in a very straightforward way by using the methods: Every single one of those methods can receive two arguments: Using our basic example again, let’s see how these methods work: # Insert 5 columns between column 2 (\"B\") and 3 (\"C\") # Insert a new row in the beginning # Insert 3 new rows in the beginning The only thing you need to remember is that when inserting new data (rows or columns), the insertion happens before the parameter. So, if you do , it inserts a new row before the existing first row. It’s the same for columns: when you call , it inserts a new column right before the already existing second column ( ). However, when deleting rows or columns, deletes data starting from the index passed as an argument. For example, when doing it deletes row , and when doing it deletes the third column ( ). Sheet management is also one of those things you might need to know, even though it might be something that you don’t use that often. If you look back at the code examples from this tutorial, you’ll notice the following recurring piece of code: This is the way to select the default sheet from a spreadsheet. However, if you’re opening a spreadsheet with multiple sheets, then you can always select a specific one like this: # Let's say you have two sheets: \"Products\" and \"Company Sales\" # You can select a sheet using its title You can also change a sheet title very easily: If you want to create or delete sheets, then you can also do that with and : # You can also define the position to create the sheet at # To remove them, just pass the sheet as an argument to the .remove() One other thing you can do is make duplicates of a sheet using : If you open your spreadsheet after saving the above code, you’ll notice that the sheet Products Copy is a duplicate of the sheet Products. Something that you might want to do when working with big spreadsheets is to freeze a few rows or columns, so they remain visible when you scroll right or down. Freezing data allows you to keep an eye on important rows or columns, regardless of where you scroll in the spreadsheet. Again, also has a way to accomplish this by using the worksheet attribute. For this example, go back to our spreadsheet and try doing the following: If you open the spreadsheet in your favorite spreadsheet editor, you’ll notice that row and columns and are frozen and are always visible no matter where you navigate within the spreadsheet. This feature is handy, for example, to keep headers within sight, so you always know what each column represents. Here’s how it looks in the editor: Notice how you’re at the end of the spreadsheet, and yet, you can see both row and columns and . You can use to add filters and sorts to your spreadsheet. However, when you open the spreadsheet, the data won’t be rearranged according to these sorts and filters. At first, this might seem like a pretty useless feature, but when you’re programmatically creating a spreadsheet that is going to be sent and used by somebody else, it’s still nice to at least create the filters and allow people to use it afterward. The code below is an example of how you would add some filters to our existing spreadsheet: # Check the used spreadsheet space using the attribute \"dimensions\" You should now see the filters created when opening the spreadsheet in your editor: You don’t have to use if you know precisely which part of the spreadsheet you want to apply filters to. Formulas (or formulae) are one of the most powerful features of spreadsheets. They gives you the power to apply specific mathematical equations to a range of cells. Using formulas with is as simple as editing the value of a cell. You can see the list of formulas supported by : Let’s add some formulas to our spreadsheet. Starting with something easy, let’s check the average star rating for the 99 reviews within the spreadsheet: If you open the spreadsheet now and go to cell , you should see that its value is: 4.18181818181818. Have a look in the editor: You can use the same methodology to add any formulas to your spreadsheet. For example, let’s count the number of reviews that had helpful votes: # The helpful votes are counted on column \"I\" You should get the number on your spreadsheet cell like so: You’ll have to make sure that the strings within a formula are always in double quotes, so you either have to use single quotes around the formula like in the example above or you’ll have to escape the double quotes inside the formula: . There are a ton of other formulas you can add to your spreadsheet using the same procedure you tried above. Give it a go yourself! Even though styling a spreadsheet might not be something you would do every day, it’s still good to know how to do it. Using , you can apply multiple styling options to your spreadsheet, including fonts, borders, colors, and so on. Have a look at the documentation to learn more. You can also choose to either apply a style directly to a cell or create a template and reuse it to apply styles to multiple cells. Let’s start by having a look at simple cell styling, using our again as the base spreadsheet: If you open your spreadsheet now, you should see quite a few different styles on the first 5 cells of column :\n• A2 with the text in bold\n• A3 with the text in red and bigger font size\n• A5 with a square border around the text Note: For the colors, you can also use HEX codes instead by doing . You can also combine styles by simply adding them to the cell at the same time: # Reusing the same styles from the example above Have a look at cell here: When you want to apply multiple styles to one or several cells, you can use a class instead, which is like a style template that you can use over and over again. Have a look at the example below: # Now let's apply this to all first row (header) cells If you open the spreadsheet now, you should see that its first row is bold, the text is aligned to the center, and there’s a small bottom border! Have a look below: As you saw above, there are many options when it comes to styling, and it depends on the use case, so feel free to check documentation and see what other things you can do. This feature is one of my personal favorites when it comes to adding styles to a spreadsheet. It’s a much more powerful approach to styling because it dynamically applies styles according to how the data in the spreadsheet changes. In a nutshell, conditional formatting allows you to specify a list of styles to apply to a cell (or cell range) according to specific conditions. For example, a widespread use case is to have a balance sheet where all the negative totals are in red, and the positive ones are in green. This formatting makes it much more efficient to spot good vs bad periods. Without further ado, let’s pick our favorite spreadsheet— —and add some conditional formatting. You can start by adding a simple one that adds a red background to all reviews with less than 3 stars: Now you’ll see all the reviews with a star rating below 3 marked with a red background: Code-wise, the only things that are new here are the objects and :\n• is quite similar to , which you already saw above, and it’s used to aggregate multiple styles such as fonts, borders, alignment, and so forth.\n• is responsible for selecting the cells and applying the styles if the cells match the rule’s logic. Using a object, you can create numerous conditional formatting scenarios. However, for simplicity sake, the package offers 3 built-in formats that make it easier to create a few common conditional formatting patterns. These built-ins are: The ColorScale gives you the ability to create color gradients: # Again, let's add this gradient to the star ratings, column \"H\" Now you should see a color gradient on column , from red to green, according to the star rating: You can also add a third color and make two gradients instead: # Again, let's add this gradient to the star ratings, column \"H\" This time, you’ll notice that star ratings between 1 and 3 have a gradient from red to yellow, and star ratings between 3 and 5 have a gradient from yellow to green: The IconSet allows you to add an icon to the cell according to its value: You’ll see a colored arrow next to the star rating. This arrow is red and points down when the value of the cell is 1 and, as the rating gets better, the arrow starts pointing up and becomes green: The package has a full list of other icons you can use, besides the arrow. Finally, the DataBar allows you to create progress bars: You’ll now see a green progress bar that gets fuller the closer the star rating is to the number 5: As you can see, there are a lot of cool things you can do with conditional formatting. Here, you saw only a few examples of what you can achieve with it, but check the documentation to see a bunch of other options. Even though images are not something that you’ll often see in a spreadsheet, it’s quite cool to be able to add them. Maybe you can use it for branding purposes or to make spreadsheets more personal. To be able to load images to a spreadsheet using , you’ll have to install : Apart from that, you’ll also need an image. For this example, you can grab the Real Python logo below and convert it from to using an online converter such as cloudconvert.com, save the final file as , and copy it to the root folder where you’re running your examples: Afterward, this is the code you need to import that image into the spreadsheet: # Let's use the hello_world spreadsheet since it has less data # A bit of resizing to not fill the whole spreadsheet with the logo You have an image on your spreadsheet! Here it is: The image’s left top corner is on the cell you chose, in this case, . Another powerful thing you can do with spreadsheets is create an incredible variety of charts. Charts are a great way to visualize and understand loads of data quickly. There are a lot of different chart types: bar chart, pie chart, line chart, and so on. has support for a lot of them. Here, you’ll see only a couple of examples of charts because the theory behind it is the same for every single chart type: Note: A few of the chart types that currently doesn’t have support for are Funnel, Gantt, Pareto, Treemap, Waterfall, Map, and Sunburst. For any chart you want to build, you’ll need to define the chart type: , , and so forth, plus the data to be used for the chart, which is called . Before you can build your chart, you need to define what data you want to see represented in it. Sometimes, you can use the dataset as is, but other times you need to massage the data a bit to get additional information. Let’s start by building a new workbook with some sample data: Now you’re going to start by creating a bar chart that displays the total number of sales per product: There you have it. Below, you can see a very straightforward bar chart showing the difference between online product sales online and in-store product sales: Like with images, the top left corner of the chart is on the cell you added the chart to. In your case, it was on cell . Note: Depending on whether you’re using Microsoft Excel or an open-source alternative (LibreOffice or OpenOffice), the chart might look slightly different. Try creating a line chart instead, changing the data a bit: With the above code, you’ll be able to generate some random data regarding the sales of 3 different products across a whole year. Once that’s done, you can very easily create a line chart with the following code: Here’s the outcome of the above piece of code: One thing to keep in mind here is the fact that you’re using when adding the data. This argument makes the chart plot row by row instead of column by column. In your sample data, you see that each product has a row with 12 values (1 column per month). That’s why you use . If you don’t pass that argument, by default, the chart tries to plot by column, and you’ll get a month-by-month comparison of sales. Another difference that has to do with the above argument change is the fact that our now starts from the first column, , instead of the second one. This change is needed because the chart now expects the first column to have the titles. There are a couple of other things you can also change regarding the style of the chart. For example, you can add specific categories to the chart: Add this piece of code before saving the workbook, and you should see the month names appearing instead of numbers: Code-wise, this is a minimal change. But in terms of the readability of the spreadsheet, this makes it much easier for someone to open the spreadsheet and understand the chart straight away. Another thing you can do to improve the chart readability is to add an axis. You can do it using the attributes and : This will generate a spreadsheet like the below one: As you can see, small changes like the above make reading your chart a much easier and quicker task. There is also a way to style your chart by using Excel’s default property. In this case, you have to choose a number between 1 and 48. Depending on your choice, the colors of your chart change as well: # You can play with this by choosing any number between 1 and 48 With the style selected above, all lines have some shade of orange: There is no clear documentation on what each style number looks like, but this spreadsheet has a few examples of the styles available. Here’s the full code used to generate the line chart with categories, axis titles, and style: There are a lot more chart types and customization you can apply, so be sure to check out the package documentation on this if you need some specific formatting. You already saw how to convert an Excel spreadsheet’s data into Python classes, but now let’s do the opposite. Let’s imagine you have a database and are using some Object-Relational Mapping (ORM) to map DB objects into Python classes. Now, you want to export those same objects into a spreadsheet. Let’s assume the following data classes to represent the data coming from your database regarding product sales: Now, let’s generate some random data, assuming the above classes are stored in a file: # Ignore these for now. You'll use them in a sec ;) By running this piece of code, you should get 5 products with 5 months of sales with a random quantity of sales for each month. Now, to convert this into a spreadsheet, you need to iterate over the data and append it to the spreadsheet: That’s it. That should allow you to create a spreadsheet with some data coming from your database. However, why not use some of that cool knowledge you gained recently to add a chart as well to display that data more visually? All right, then you could probably do something like this: Now we’re talking! Here’s a spreadsheet generated from database objects and with a chart and everything: That’s a great way for you to wrap up your new knowledge of charts! Even though you can use Pandas to handle Excel files, there are few things that you either can’t accomplish with Pandas or that you’d be better off just using directly. For example, some of the advantages of using are the ability to easily customize your spreadsheet with styles, conditional formatting, and such. But guess what, you don’t have to worry about picking. In fact, has support for both converting data from a Pandas DataFrame into a workbook or the opposite, converting an workbook into a Pandas DataFrame. Note: If you’re new to Pandas, check our course on Pandas DataFrames beforehand. First things first, remember to install the package: Now that you have some data, you can use to convert it from a DataFrame into a worksheet: You should see a spreadsheet that looks like this: If you want to add the DataFrame’s index, you can change , and it adds each row’s index into your spreadsheet. On the other hand, if you want to convert a spreadsheet into a DataFrame, you can also do it in a very straightforward way like so: Alternatively, if you want to add the correct headers and use the review ID as the index, for example, then you can also do it like this instead: # Set the first row as the columns for the DataFrame # Set the field \"review_id\" as the indexes for each row Using indexes and columns allows you to access data from your DataFrame easily: # Grab review with id \"R2EQL1V1L6E0C9\", using the index There you go, whether you want to use to prettify your Pandas dataset or use Pandas to do some hardcore algebra, you now know how to switch between both packages."
    },
    {
        "link": "https://openpyxl.readthedocs.io/en/3.1.3/tutorial.html",
        "document": "Install openpyxl using pip. It is advisable to do this in a Python virtualenv without system packages: There is support for the popular lxml library which will be used if it is installed. This is particular useful when creating large files. To be able to include images (jpeg, png, bmp,…) into an openpyxl file, you will also need the “pillow” library that can be installed with: or browse https://pypi.python.org/pypi/Pillow/, pick the latest version and head to the bottom of the page for Windows binaries. Sometimes you might want to work with the checkout of a particular version. This may be the case if bugs have been fixed but a release has not yet been made.\n\nThere is no need to create a file on the filesystem to get started with openpyxl. Just import the class and start work: A workbook is always created with at least one worksheet. You can get it by using the property: This is set to 0 by default. Unless you modify its value, you will always get the first worksheet by using this method. You can create new worksheets using the method: Sheets are given a name automatically when they are created. They are numbered in sequence (Sheet, Sheet1, Sheet2, …). You can change this name at any time with the property: Once you gave a worksheet a name, you can get it as a key of the workbook: You can review the names of all worksheets of the workbook with the attribute You can loop through worksheets You can create copies of worksheets within a single workbook: Only cells (including values, styles, hyperlinks and comments) and certain worksheet attributes (including dimensions, format and properties) are copied. All other workbook / worksheet attributes are not copied - e.g. Images, Charts. You also cannot copy worksheets between workbooks. You cannot copy a worksheet if the workbook is open in or mode.\n\nNow we know how to get a worksheet, we can start modifying cells content. Cells can be accessed directly as keys of the worksheet: This will return the cell at A4, or create one if it does not exist yet. Values can be directly assigned: There is also the method. This provides access to cells using row and column notation: When a worksheet is created in memory, it contains no . They are created when first accessed. Because of this feature, scrolling through cells instead of accessing them directly will create them all in memory, even if you don’t assign them a value. will create 100x100 cells in memory, for nothing. Ranges of cells can be accessed using slicing: Ranges of rows or columns can be obtained similarly: You can also use the method: For performance reasons the method is not available in read-only mode. If you need to iterate through all the rows or columns of a file, you can instead use the property: For performance reasons the property is not available in read-only mode. If you just want the values from a worksheet you can use the property. This iterates over all the rows in a worksheet but returns just the cell values: Both and can take the parameter to return just the cell’s value:\n\nOnce we have a , we can assign it a value: The simplest and safest way to save a workbook is by using the method of the object: This operation will overwrite existing files without warning. The filename extension is not forced to be xlsx or xlsm, although you might have some trouble opening it directly with another application if you don’t use an official extension. As OOXML files are basically ZIP files, you can also open it with your favourite ZIP archive manager. If required, you can specify the attribute , to save a workbook as a template: If you want to save the file to a stream, e.g. when using a web application such as Pyramid, Flask or Django then you can simply provide a : You should monitor the data attributes and document extensions for saving documents in the document templates and vice versa, otherwise the result table engine can not open the document. # Need to save with the extension *.xlsx # MS Excel will not open the document # If we need a template document, then we must specify extension as *.xltm. # MS Excel will not open the document"
    },
    {
        "link": "https://geeksforgeeks.org/saving-the-workbook-using-openpyxl",
        "document": "When working with Excel files in Python, the openpyxl library is a popular choice. It allows us to create, modify, and save Excel workbooks easily. In this article, we’ll go through how to create, update, and save a workbook using openpyxl, along with a small example project to demonstrate its functionality.\n\nBefore we begin, install the openpyxl sheet using the following command:\n\nIn openpyxl, a workbook is like an entire Excel file, while a worksheet is like a single sheet within that workbook.\n\nBuild a simple project that creates a new Excel workbook, adds some data to it, and then saves it.\n• None Add a sheet and populate it with some data.\n\nWhen we create a new workbook, it automatically comes with a default sheet named “Sheet”. We can access this sheet using Workbook.active property:\n\nWe can add data by specifying the cell and its value:\n\nTo save a work book, we can use the Workbook.save() method and pass the name.\n\nAfter finishing all the above steps, we get an excel file named example_project.xlsx in the current working directory.\n• None We start by creating a new workbook and accessing the active worksheet.\n• None The sheet is optionally renamed to “DataSheet”.\n• None We then add headers and some sample data to the sheet.\n• None The .append() method is used to add rows of data efficiently.\n• None Finally, the workbook is saved with the filename example_project.xlsx.\n\nRun the Python script, and an Excel file named example_project.xlsx will be created in the current working directory. Open the file to see the data added.\n\nIn conclusion, working with Excel files in Python becomes seamless with the openpyxl library, which provides an efficient way to create, modify, and save Excel workbooks. This article has walked you through the basic steps of setting up a workbook, adding data, and saving it with openpyxl, demonstrated through a simple project. By following the provided steps and understanding how workbooks and worksheets function, we can easily manage Excel files programmatically. Whether it's for small tasks or larger projects, openpyxl is a valuable tool for handling Excel files within your Python applications."
    },
    {
        "link": "https://stackoverflow.com/questions/13381384/modify-an-existing-excel-file-using-openpyxl-in-python",
        "document": "I am basically trying to copy some specific columns from a CSV file and paste those in an existing excel file[*.xlsx] using python. Say for example, you have a CSV file like this :\n\nSo, i wanted to copy the both col_3 and col_4 and paste those in col_8 and col_9 in an existing excel file [which is a .XLSX format]. I have tried this in various way to solve, but could not find out the exact way. i tried something like this :\n\nbut problem with this solution is it does not allow me to save as *.XLSX format which is strictly required for me.\n\nI have tried to use Openpyxl as it can handle *.XLSX format, but could not find out a way to modify the existing excel file. can anyone please help on this?\n\nDoubt : 1) Can we really read a whole column from a CSV file and store into an array/list using python? 2) Can we modify the existing excel file which is in .XLSX format using openpyxl or any other package?"
    },
    {
        "link": "https://datacamp.com/tutorial/python-excel-tutorial",
        "document": "Learn to import data into Python from various sources, such as Excel, SQL, SAS and right from the web."
    }
]