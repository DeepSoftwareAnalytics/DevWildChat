[
    {
        "link": "https://codewithsuraj.medium.com/html5-semantic-elements-enhancing-structure-and-accessibility-15675407b111",
        "document": "HTML5 introduces a range of semantic elements that provide clarity, structure, and meaning to web documents. These elements not only enhance the way content is displayed but also contribute to accessibility and SEO. In this article, we will explore HTML5’s semantic elements, provide practical examples, and discuss how they can be used to improve web development.\n\nSemantic HTML elements are essential for web development because they convey the meaning and structure of a web page’s content. They are crucial for accessibility, making it easier for assistive technologies and search engines to understand and interpret the content.\n\nHTML5 brings several semantic elements that help organize and structure content. Let’s look at some of the key ones:\n\nThe element typically contains introductory content, such as the website's logo, site title, and primary navigation.\n\nThe element is used to define navigation menus, both primary and secondary, allowing for better organization of the site's links.\n\nThe element encapsulates the primary content of a web page. Each page should contain only one element.\n\nThe element is a generic container for grouping related content. It helps in structuring the content and making it more meaningful.\n\nThe element represents a self-contained piece of content, such as a blog post, news article, or product listing.\n\nThe element is used for content that is tangentially related to the main content, such as sidebars, pull quotes, or advertisements.\n\nThe element represents the bottom section of a web page and often contains copyright information, links to terms and policies, and other footer content.\n• Improved Accessibility: Semantic elements assist screen readers and other assistive technologies in interpreting web content correctly.\n• Better SEO: Search engines understand the structure of semantic HTML, which can positively impact search rankings.\n• Consistency and Clarity: Semantic elements provide a consistent and clear way to structure content, making it easier for developers to work collaboratively.\n• Responsive Design: Properly structured content is essential for creating responsive web designs that adapt to various screen sizes and devices.\n\nBest Practices for Using Semantic Elements\n• Use Semantic Elements Appropriately: Choose the most suitable semantic element for the type of content you are structuring.\n• Create a Logical Structure: Nest elements in a logical and hierarchical order to represent the content’s relationships.\n• Prioritize Accessibility: Ensure your web pages are accessible to all users by using semantic elements and providing alternative text for media.\n• Test Across Browsers: Validate your HTML code and test it on various browsers and devices to ensure consistent rendering.\n• Regularly Update Content: Keep your content up to date and maintain the semantic structure as your website evolves.\n\nHTML5’s semantic elements are invaluable tools for structuring web content and enhancing both accessibility and SEO. By incorporating these elements into your web development process and adhering to best practices, you can create web pages that are more meaningful, user-friendly, and well-optimized. Mastering the use of semantic HTML is an essential skill for web developers striving to provide better experiences for all users while improving their websites’ search engine visibility.\n\nThank you for reading this blog post!\n\nI wish you all the best in your endeavors and hope you found this information helpful."
    },
    {
        "link": "https://w3schools.com/html/html5_semantic_elements.asp",
        "document": "A semantic element clearly describes its meaning to both the browser and the developer.\n\nExamples of non-semantic elements: and - Tells nothing about its content.\n\nExamples of semantic elements: , , and - Clearly defines its content.\n\nMany web sites contain HTML code like: <div id=\"nav\"> <div class=\"header\"> <div id=\"footer\"> to indicate navigation, header, and footer.\n\nIn HTML there are several semantic elements that can be used to define different parts of a web page:\n\nAccording to W3C's HTML documentation: \"A section is a thematic grouping of content, typically with a heading.\"\n\nExamples of where a element can be used:\n\nA web page could normally be split into sections for introduction, content, and contact information.\n\nAn article should make sense on its own, and it should be possible to distribute it independently from the rest of the web site.\n\nExamples of where the element can be used:\n\nCan we use the definitions to decide how to nest those elements? No, we cannot!\n\nSo, you will find HTML pages with elements containing elements, and elements containing elements.\n\nThe element represents a container for introductory content or a set of navigational links.\n• one or more heading elements (<h1> - <h6>)\n\nNote: You can have several elements in one HTML document. However, cannot be placed within a , or another element.\n\nThe element defines a footer for a document or section.\n\nYou can have several elements in one document.\n\nThe element defines some content aside from the content it is placed in (like a sidebar).\n\nThe content should be indirectly related to the surrounding content.\n\nThe tag specifies self-contained content, like illustrations, diagrams, photos, code listings, etc.\n\nThe tag defines a caption for a element. The element can be placed as the first or as the last child of a element.\n\nAccording to the W3C: \"A semantic Web allows data to be shared and reused across applications, enterprises, and communities.\"\n\nBelow is a list of some of the semantic elements in HTML."
    },
    {
        "link": "https://stackoverflow.com/questions/38715285/best-practices-on-usage-of-section-article-semantic-elements-in-html5",
        "document": "It's pretty much the first time I really use HTML5, I've done some research on article/section but I find the answers a little confusing.\n\nAn example is this statement:\n\nsection – Used for grouping together thematically-related content. Sounds like a div element, but it’s not. The div has no semantic meaning. Before replacing all your div’s with section elements, always ask yourself: “Is all of the content related?”\n\nBut I'm still not 100% sure if I'm using it correctly.\n\nI have made an example website, is this the correct use of section/article?\n\nI basically use as a sort of \"wrapper\" around every element on the frontpage. The I use for each element inside the .\n\nIs this the best practice?"
    },
    {
        "link": "https://theedigital.com/blog/what-is-semantic-html-and-why-you-should-use-it",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/16767617/semantic-html5-structure-versus-css-layout-needs",
        "document": "I have a web page like the following one:\n\nThe page structure is similar to one example in the current HTML5 draft: http://www.w3.org/html/wg/drafts/html/master/grouping-content.html#the-main-element and I think it is semantically correct.\n\nNow I would like to style this document using CSS. I would like to be the header at the top and footer at the bottom, which is, of course, easily doable. Inside the header I would like to put the logo to the right and the navigation in the center, which is also okay (e.g by using the flexible box layout model, which is in one or the other way supported by modern browsers, or by using floats).\n\nMy problems begin when I want to put the main's content heading (the h1 element) visually in the left of the header. I could do with position: absolute but such a layout is not very flexible and would break as soon as the header's or the heading's sizes change. The proposed CSS grid layout http://www.w3.org/TR/css3-grid-layout/ may be able to do exactly what I want but it is, as far as I know, only supported (somehow) in IE 10.\n\nOne simple and working solution would be to simply restructure my page:\n\nThis solution, while easily layoutable, however, has its full semantics only expressed via aria-* attributes and seems to go against the spirit of the HTML5 semantics (especially the main element).\n\nWhile my example page may be simple, you can easily imagine a more complicated one where the visual position of many more elements are not in the same order as the flow order of the HTML5 markup (and nested so that the flexible box layout order property won't suffice). How would you solve the problem? Rewrite the HTML5 markup with non-semantic elements (e.g. divs) so that it corresponds more to the visual layout and then exchange the non-semantic elements by semantic ones (e.g. footer or main) wherever possible with the new structure?"
    },
    {
        "link": "https://stackoverflow.com/questions/4069734/fixed-header-footer-with-scrollable-content",
        "document": "It works great for both known and unknown height elements. Make sure to set the outer div to and reset the default on . See the browser support tables.\n\nFor both known and unknown height elements. It also works in legacy browsers including IE8.\n\nIf header and footer are fixed height, you can use CSS .\n\nIf the header and footer are known height, and they are also percentage you can just do the simple math making them together of 100% height."
    },
    {
        "link": "https://css-tricks.com/couple-takes-sticky-footer",
        "document": "The purpose of a sticky footer is that it “sticks” to the bottom of the browser window. But not always, if there is enough content on the page to push the footer lower, it still does that. But if the content on the page is short, a sticky footer will still hang to the bottom of the browser window.\n\nNote that “sticky” here is exactly as described above. It’s not to be confused with which can be used to “stick” an element in place even if the page scrolls. Or, even more confusingly, it’s not either, which is liked fixed positioning inside of containers sort of.\n\nThere is negative bottom margins on wrappers\n\nThere was a wrapping element that held everything except the footer. It had a negative margin equal to the height of the footer. That was the basis of this one.\n\nSee the Pen Sticky Footer with calc(); by Chris Coyier (@chriscoyier) on CodePen.\n\nThis one required an extra element inside the content area (the “ “), to ensure that the negative margin didn’t pull the footer up and cover any content. The push was also clever because it very likely didn’t have any bottom margin of it’s own. If it did, that would have to be factored into the negative margins, and having those two numbers not in sync doesn’t look quite as nice.\n\nThere is negative top margins on footers\n\nThis technique did not require a push element, but instead, required an extra wrapping element around the content in which to apply matching bottom padding to. Again to prevent negative margin from lifting the footer above any content.\n\nSee the Pen Sticky Footer with Negative Margins 2 by Chris Coyier (@chriscoyier) on CodePen.\n\nKind of a wash between this technique and the previous one, as they both require extra otherwise unnecessary HTML elements.\n\nOne way to not need any extra elements is to adjust the wrappers height with calc(). Then there is not any overlapping going on, just two elements stacked on top of each other totaling 100% height.\n\nSee the Pen Sticky Footer with calc(); by Chris Coyier (@chriscoyier) on CodePen.\n\nNotice the 70px in the calc() vs. the 50px fixed height of the footer. That’s making an assumption. An assumption that the last item in the content has a bottom margin of 20px. It’s that bottom margin plus the height of the footer that need to be added together to subtract from the viewport height. And yeah, we’re using viewport units here as another little trick to avoid having to set 100% body height before you can set 100% wrapper height.\n\nThe big problem with the above three techniques is that they require fixed height footers. Fixed heights are generally a bummer in web design. Content can change. Things are flexible. Fixed heights are usually red flag territory. Using flexbox for a sticky footer not only doesn’t require any extra elements, but allows for a variable height footer.\n\nSee the Pen Sticky Footer with Flexbox by Chris Coyier (@chriscoyier) on CodePen.\n\nYou could even add a header above that or more stuff below. The trick with flexbox is either:\n• on the child you want to grow to fill the space (the content, in our case).\n• or, to push the child away as far as it will go from the neighbor (or whichever direction margin is needed).\n\nRemember we have a complete guide for all this flexbox stuff.\n\nGrid layout is even newer (and less widely supported) than flexbox. We have a complete guide for it too. You can also fairly easily use it for a sticky footer.\n\nThis demo should work in Chrome Canary or Firefox Developer Edition, and can probably be backported to the older version of grid layout for Edge:\n\nSee the Pen Sticky Footer with Grid by Chris Coyier (@chriscoyier) on CodePen."
    },
    {
        "link": "https://stackoverflow.com/questions/13788357/css-for-fixed-footer",
        "document": "I am writing this answer because I think it may help someone in the future. I am facing a problem even after defining the of the footer and for the body. The problem is if you have responsive website where the height of the footer dynamically changes based on screen size, you will have content overlapping. To solve that, I have used jQuery - Keep every setting same except for for and of footer.\n\nThis will always keep the footer at the bottom even when the footer height changes and there wil be no content over lapping."
    },
    {
        "link": "https://geeksforgeeks.org/how-to-create-footer-to-stay-at-the-bottom-of-a-web-page",
        "document": "A fixed footer remains at the bottom of the viewport, ensuring it stays visible regardless of page scrolling. Below are two methods to create a fixed footer:\n\nTo create a fixed footer using position: fixed, apply this property to the footer element in CSS. Set the bottom property to 0 to place the footer at the bottom of the viewport, ensuring it remains visible during scrolling.\n• section class defines content areas with a height of 300px, a background color, white text, and flexbox layout for centered alignment.\n• #footer element i s styled with position: fixed; and bottom: 0; to remain at the bottom of the viewport, with a height of 50px, full width, and a dark background.\n\nTo create a sticky footer with position: sticky, apply this property to the footer element in CSS. Set bottom: 0 to keep it at the bottom of its parent container, becoming fixed only when scrolling.\n• #footer element is styled with position: sticky; and bottom: 0;, causing it to remain at the bottom of the viewport as the user scrolls, until it reaches its original position in the document flow.\n• .section div has a height of 300px and distinct background colors, creating scrollable content areas above the footer.\n\nWhat is a fixed footer in web design?\n\nHow can I create a fixed footer using CSS?\n\nIs a fixed footer responsive on all devices?\n\nWhat are common issues when implementing a fixed footer?"
    },
    {
        "link": "https://sitepoint.com/community/t/fixed-footer-problem/64526",
        "document": "Yes, unlike position: fixed, sticky things are not fixed to the viewport, meaning whatever’s in the footer can actually be reached.\n\nSo, if you really want your footer to act like your header, then you probably do really want a fixed footer. I just wondered if the sticky footer would work for you better. This does mean the footer will always be on-screen. It will cover up content if the screen is too small, so you’ll still use the padding idea for the same way it was used in the sticky footer: it’ll let people scroll down to see the rest of the content, leaving some room for the footer to sit over without always covering content.\n\nI still can’t get to your menu in the header unless I make my screen huge. It just goes off-screen and is unreachable. Looks like you’re going for visitors with screens at least as big as 1024. While that’s not unreasonable, just be aware there’s more variety out there, plus the power users who minimise their browsers (they’ll figure out they need to enlarge their browsers real fast though so not a huge deal). Smaller screens are out there, popular, and won’t work with this page. Mobiles and pda’s who can’t zoom are out.\n\nThere are some terribly wrong things on this page. Half of the problem is the HTML5 junk: if you’re going to use it, use it. But if you have to double and triple your code just to get it working in all currently-used browsers, that’s a big hint NOT to use it. All you’re doing with this HTML5 is doubling and tripling your code. Lots and lots and lots of your code is doing NOTHING at all except sitting there, making it harder for you to find your errors and repeats. <nav> wrapping divs wrapping uls… the whole point of <nav> was to ul’s, but it’s pointless: it’s not more semantic than a ul, and screen readers still recognise <ul> as an unordered list, while still not knowing what a <nav> is.\n\nYour code is repeating itself, conflicting with itself, and generally acting like those cartoon characters who punch themselves in the face.\n\nYou have div id=“content” twice. The validator should have caught that. Always validate your code when you run into problems. You can still have problems and no invalid code, but so long as there is invalid code that you don’t know about, you’re wasting time bug-hunting.\n\nYou have stuff floated all over the place, but none of the containers are enclosing them! You set heights on the “par” things in your <section>, but the content inside is much, much taller! Which is why it’s a bad bad idea to set heights on things unless you know what’s going to happen (this is why the has min-height: 100% for the sticky footer).\n\nSo, what you ended up having was, main page content was NOT pushing down the footer. In a sticky footer, the content pushes the footer down, but if the content is shorter than the body (tall screen), the footer stays tucked at the bottom of the 100%-high page .\n\nIn order to get the sticky footer working for your page, I had to change many things. *edit but I ended up just using the fixed footer instead, based on our comments about scrolling\n\nFirst, I just went back to HTML4 because even though I have Firefox, there was too much unknown to me and I needed to be sure the HTML5 elements weren’t somehow causing the problem. I’m going to try to convert it back to HTML5 and see if it still works… it , but we’ll see. The stylesheet explicitly set the main tags to display: block, even though as far as I know those are already blocks, but maybe they don’t act the same when floated, etc. So for now I’ve made them divs because I know their behaviour.\n\nNext thing I did was removed that HTML5 stylesheet. I noticed you repeated a lot of stuff in your master stylesheet that should have worked from your HTML5 stylesheet. The problem is that you imported it incorrectly:\n\n you had comments above the line. In a CSS stylesheet, any MUST be first, before comments. That’s why you had to re-declare stuff.\n\nAnd, the reset in there is awful. It’s based on the one Eric Meyer is horribly ashamed of (if he isn’t, he should be). It’s an excellent example of lots and lots and lots of code that, other than making pages less accessible and making debugging harder, does absolutely nothing but take up bytes.\n\nI could rant further about that, but for now, I just took it out. You can add in anything from it that you find you need for a particular element, but you’re only shoving an arrow through your foot and holding yourself to the ground with that reset. Esp since it even removed Meyer’s warning to add “focus” styles back in… which not only does nobody do, but nobody seems to understand why it’s there and just think it’s ugly. I fixed this by leaving outline in, AND adding :focus to your :hover statements. Keyboarders wanna know where they are too.\n\nYou can keep the line that sets all the HTML5 elements to display: block. So far as I know, they’re already blocks, but maybe not all browsers recognise that, or maybe it’s for IE in conjunction with that Javascript you have?\n\nI’ve got a very small reset in my example.\n\nThen I took the <section> tag, made it a <div id=“section”> and let that box determine the width of the page.\n\nActually, you could do what I did on my horizontal site: I used ErikJ’s negative right margin trick. This way, as you add “par” divs, the width still extends… so you don’t have to set a width: 4000px, meaning the width will always adjust to the number of “par” divs you have! Just like a vertical page. Only issue with that is, there’s a limit to page widths and heights in Opera and Konqueror… and maybe other browsers. Your negative margin can’t exceed that amount (it’s the same amount you see in the Sticky Footer code, in teh hack for Opera from ErikJ… that’s Opera’s limit).\n\n *edit, did this in my version\n\nThen I made sure the really was 100% high (when you make someone 100% high, you don’t want to then add in top or bottom margins, padding or borders…). I think Paul’s version maybe gave the a negative top margin, but because you’re already getting weird with the header, I just did the sticky footer I’m more comfortable with: leave the alone and just pull the footer up with a negative top margin.\n\nYou had\n\n margin: -50px;\n\n that must’ve confused a lot of browsers. I think you meant\n\n margin : -50px;\n\n which makes sense for a sticky footer.\n\nSince I went ahead and made it fixed, none of this applies. I also removed the fixes for Opera and IE8 because I’m not sure if they’re needed for fixed footer stuff.\n\nI removed most of the positioning you had. General rule of thumb, if you want to keep your sanity and your hair, don’t go around positioning everything unless you’re being VERY funky. Fixed header and footer aren’t funky, really.\n\nSo what about the header? After making sure only existed once (instead of also inside the first <section> tag), and then making sure it enclosed its floats (using :after and a retarded way of triggering haslayout, but there are plenty of ways), then I just used more padding tricks.\n\nhas enough top padding to leave room for the fixed header, plus some for more room. Nobody will ever see it, because the header will be sitting right on top of it, or it’ll be offscreen.\n\nGonna see if I can HTML5 that. Even so, I dunno what that IE-javascript-thing does, but it’s bogus if it can’t make a regular HTML5 page work, cause I would just\n\n <nav>\n\n <li><a href=“foo”>First list item</a></li>\n\n …\n\n </nav>\n\nthat was the plan, anyway. Not wrapping several divs and other strange boxes around every menu.\n\nLet me know if you find an issue with the demo above… I didn’t boot up the windows machine, and IE is the one who’s most likely to have some problem with this.\n\nActually I remember IE6 has a problem with position: fixed. Paul O’B’s got a demo somewhere that works for IE6 though. It’ll need position: absolute unless your Javascript is fixing that for you."
    },
    {
        "link": "https://stackoverflow.com/questions/30725455/change-setinterval-value-dynamically",
        "document": "The trick is to not use , and to use in a loop instead.\n\nreads the timing value you give it once, schedules based on this timing, and forgets about it. The only thing you can do is if you've assigned your interval to a variable like .\n\nis much the same, except we can use it to manually loop on the same function. Manually looping allows us to change the timing of after each timeout.\n\nHere's a quick example. Moving the slider to the left makes the ticking faster, and to the right, slower.\n\nAs a side note: Using this pattern is almost always a better option than using . runs the chance that your function execution could take longer than the duration of the interval. This never happens with a looping if you call last in the function."
    },
    {
        "link": "https://stackoverflow.com/questions/62441811/how-to-change-innerhtml-every-few-seconds",
        "document": "A while loop that is always true just ties up the thread on your page; you need to tell it to wait and try again later.\n\nRecursion will create a stack but achieves your goal. Used setTimeout but the setInterval approach is probably a better way to go."
    },
    {
        "link": "https://geeksforgeeks.org/how-to-automatic-refresh-a-web-page-in-fixed-time",
        "document": "Automatically refreshing a web page at a fixed time interval is useful for keeping content up-to-date without requiring manual user intervention. This can be particularly helpful for displaying real-time information, such as news updates, live scores, or stock prices.\n\nThere are two main methods to achieve this: using the HTML <meta> tag or JavaScript’s setInterval() function. Let’s explore each method in detail, including their syntax and examples.\n\nThere are two methods to automatically refresh a web page in a fixed time:\n\nLet’s understand these two approaches in detail below. We will cover these methods with syntax and examples, to get a better understanding.\n\nThe tag in HTML can be used to automatically refresh a web page at specified intervals. By setting the http-equiv attribute to “refresh” and the content attribute to the desired time in seconds, the page will reload at the defined interval.\n\nExample: In this example the the <meta http-equiv=”refresh” content=”10″> tag automatically refreshes the webpage every 10 seconds, reloading the content without user interaction, as specified by the content=”10″ attribute.\n\nAn alternative method to implement automatic page refresh is by using JavaScript’s function. Until is called to stop it, will continuously invoke the specified function at regular intervals, effectively providing an auto-refresh behavior on the webpage.\n\nExample: In this example, the setInterval() method is used to call the autoRefresh() function every 2 seconds, causing the page to reload continuously at that interval.\n\nKey Differences Between Using <meta> Tag and setInterval()\n• <meta> Tag: Simple and easy to implement but less flexible. Once set, it cannot be easily modified without reloading the page.\n• setInterval(): Provides greater control and flexibility. You can adjust the refresh interval dynamically, stop the refresh with clearInterval(), or even add conditions to determine when the refresh should occur.\n• <meta> Tag: Works directly in HTML without needing any scripts, making it a straightforward option compatible with all browsers.\n• setInterval(): Requires JavaScript, so if JavaScript is disabled in the browser, this method will not work.\n• <meta> Tag: Simple but refreshes the entire page, which may be less efficient for larger or complex pages.\n• setInterval(): Can be more efficient if combined with AJAX to refresh only specific parts of the page instead of the whole page.\n\nBoth the <meta> tag and JavaScript’s setInterval() method provide easy ways to implement automatic page refreshes, each with its own advantages. The <meta> tag is ideal for basic use cases where simple and fixed intervals are sufficient. Meanwhile, setInterval() offers greater flexibility and control, making it suitable for more dynamic and complex applications."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval",
        "document": "This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015 . * Some parts of this feature may have varying levels of support.\n\nThe method of the interface repeatedly calls a function or executes a code snippet, with a fixed time delay between each call. This method returns an interval ID which uniquely identifies the interval, so you can remove it later by calling .\n\nA to be executed every milliseconds. The first execution happens after milliseconds. An optional syntax allows you to include a string instead of a function, which is compiled and executed every milliseconds. This syntax is not recommended for the same reasons that make using a security risk. The time, in milliseconds (thousandths of a second), the timer should delay in between executions of the specified function or code. Defaults to 0 if not specified. See Delay restrictions below for details on the permitted range of values. Additional arguments which are passed through to the function specified by func once the timer expires.\n\nThe returned is a numeric, non-zero value which identifies the timer created by the call to ; this value can be passed to to cancel the interval. It may be helpful to be aware that and share the same pool of IDs, and that and can technically be used interchangeably. For clarity, however, you should try to always match them to avoid confusion when maintaining your code. Note: The argument is converted to a signed 32-bit integer. This effectively limits to 2147483647 ms, roughly 24.8 days, since it's specified as a signed integer in the IDL.\n\nCode executed by runs in a separate execution context than the function from which it was called. As a consequence, the keyword for the called function is set to the (or ) object, it is not the same as the value for the function that called . See the following example (which uses instead of – the problem, in fact, is the same for both timers): myArray = [\"zero\", \"one\", \"two\"]; myArray.myMethod = function (sProperty) { alert(arguments.length > 0 ? this[sProperty] : this); }; myArray.myMethod(); // prints \"zero,one,two\" myArray.myMethod(1); // prints \"one\" setTimeout(myArray.myMethod, 1000); // prints \"[object Window]\" after 1 second setTimeout(myArray.myMethod, 1500, \"1\"); // prints \"undefined\" after 1.5 seconds // Passing the 'this' object with .call won't work // because this will change the value of this inside setTimeout itself // while we want to change the value of this inside myArray.myMethod. // In fact, it will be an error because setTimeout code expects this to be the window object: setTimeout.call(myArray, myArray.myMethod, 2000); // error: \"NS_ERROR_XPC_BAD_OP_ON_WN_PROTO: Illegal operation on WrappedNative prototype object\" setTimeout.call(myArray, myArray.myMethod, 2500, 2); // same error As you can see there are no ways to pass the object to the callback function in the legacy JavaScript.\n\nAll modern JavaScript runtimes (in browsers and elsewhere) support arrow functions, with lexical — allowing us to write if we're inside the method. If you need to support IE, use the method, which lets you specify the value that should be used as for all calls to a given function. That lets you easily bypass problems where it's unclear what will be, depending on the context from which your function was called.\n\nThe function is commonly used to set a delay for functions that are executed again and again, such as animations. You can cancel the interval using . If you wish to have your function called once after the specified delay, use .\n\nIt's possible for intervals to be nested; that is, the callback for can in turn call to start another interval running, even though the first one is still going. To mitigate the potential impact this can have on performance, once intervals are nested beyond five levels deep, the browser will automatically enforce a 4 ms minimum value for the interval. Attempts to specify a value less than 4 ms in deeply-nested calls to will be pinned to 4 ms. Browsers may enforce even more stringent minimum values for the interval under some circumstances, although these should not be common. Note also that the actual amount of time that elapses between calls to the callback may be longer than the given ; see Reasons for delays longer than specified for examples.\n\nEnsure that execution duration is shorter than interval frequency If there is a possibility that your logic could take longer to execute than the interval time, it is recommended that you recursively call a named function using . For example, if using to poll a remote server every 5 seconds, network latency, an unresponsive server, and a host of other issues could prevent the request from completing in its allotted time. As such, you may find yourself with queued up XHR requests that won't necessarily return in order. In these cases, a recursive pattern is preferred: In the above snippet, a named function is declared and is immediately executed. is recursively called inside after the logic has completed executing. While this pattern does not guarantee execution on a fixed interval, it does guarantee that the previous interval has completed before recursing."
    },
    {
        "link": "https://javascript.info/settimeout-setinterval",
        "document": "We may decide to execute a function not right now, but at a certain time later. That’s called “scheduling a call”.\n\nThere are two methods for it:\n• allows us to run a function once after the interval of time.\n• allows us to run a function repeatedly, starting after the interval of time, then repeating continuously at that interval.\n\nThese methods are not a part of JavaScript specification. But most environments have the internal scheduler and provide these methods. In particular, they are supported in all browsers and Node.js.\n\nFor instance, this code calls after one second:\n\nIf the first argument is a string, then JavaScript creates a function from it.\n\nSo, this will also work:\n\nBut using strings is not recommended, use arrow functions instead of them, like this:\n\nA call to returns a “timer identifier” that we can use to cancel the execution.\n\nIn the code below, we schedule the function and then cancel it (changed our mind). As a result, nothing happens:\n\nAs we can see from output, in a browser the timer identifier is a number. In other environments, this can be something else. For instance, Node.js returns a timer object with additional methods.\n\nAgain, there is no universal specification for these methods, so that’s fine.\n\nFor browsers, timers are described in the timers section of HTML Living Standard.\n\nThe method has the same syntax as :\n\nAll arguments have the same meaning. But unlike it runs the function not only once, but regularly after the given interval of time.\n\nTo stop further calls, we should call .\n\nThe following example will show the message every 2 seconds. After 5 seconds, the output is stopped:\n\nThere are two ways of running something regularly.\n\nOne is . The other one is a nested , like this:\n\nThe above schedules the next call right at the end of the current one .\n\nThe nested is a more flexible method than . This way the next call may be scheduled differently, depending on the results of the current one.\n\nFor instance, we need to write a service that sends a request to the server every 5 seconds asking for data, but in case the server is overloaded, it should increase the interval to 10, 20, 40 seconds…\n\nAnd if the functions that we’re scheduling are CPU-hungry, then we can measure the time taken by the execution and plan the next call sooner or later.\n\nNested allows to set the delay between the executions more precisely than .\n\nLet’s compare two code fragments. The first one uses :\n\nThe second one uses nested :\n\nFor the internal scheduler will run every 100ms:\n\nThe real delay between calls for is less than in the code!\n\nThat’s normal, because the time taken by ’s execution “consumes” a part of the interval.\n\nIt is possible that ’s execution turns out to be longer than we expected and takes more than 100ms.\n\nIn this case the engine waits for to complete, then checks the scheduler and if the time is up, runs it again immediately.\n\nIn the edge case, if the function always executes longer than ms, then the calls will happen without a pause at all.\n\nAnd here is the picture for the nested :\n\nThe nested guarantees the fixed delay (here 100ms).\n\nThat’s because a new call is planned at the end of the previous one.\n\nThere’s a special use case: , or just .\n\nThis schedules the execution of as soon as possible. But the scheduler will invoke it only after the currently executing script is complete.\n\nSo the function is scheduled to run “right after” the current script.\n\nFor instance, this outputs “Hello”, then immediately “World”:\n\nThe first line “puts the call into calendar after 0ms”. But the scheduler will only “check the calendar” after the current script is complete, so is first, and – after it.\n\nThere are also advanced browser-related use cases of zero-delay timeout, that we’ll discuss in the chapter Event loop: microtasks and macrotasks.\n\nZero delay is in fact not zero (in a browser) In the browser, there’s a limitation of how often nested timers can run. The HTML Living Standard says: “after five nested timers, the interval is forced to be at least 4 milliseconds.”. Let’s demonstrate what it means with the example below. The call in it re-schedules itself with zero delay. Each call remembers the real time from the previous one in the array. What do the real delays look like? Let’s see: let start = Date.now(); let times = []; setTimeout(function run() { times.push(Date.now() - start); // remember delay from the previous call if (start + 100 < Date.now()) alert(times); // show the delays after 100ms else setTimeout(run); // else re-schedule }); // an example of the output: // 1,1,1,1,9,15,20,24,30,35,40,45,50,55,59,64,70,75,80,85,90,95,100 First timers run immediately (just as written in the spec), and then we see . The 4+ ms obligatory delay between invocations comes into play. The similar thing happens if we use instead of : runs few times with zero-delay, and afterwards with 4+ ms delay. That limitation comes from ancient times and many scripts rely on it, so it exists for historical reasons. For server-side JavaScript, that limitation does not exist, and there exist other ways to schedule an immediate asynchronous job, like setImmediate for Node.js. So this note is browser-specific.\n• Methods and allow us to run the once/regularly after milliseconds.\n• To cancel the execution, we should call with the value returned by .\n• Nested calls are a more flexible alternative to , allowing us to set the time between executions more precisely.\n• Zero delay scheduling with (the same as ) is used to schedule the call “as soon as possible, but after the current script is complete”.\n• The browser limits the minimal delay for five or more nested calls of or for (after 5th call) to 4ms. That’s for historical reasons.\n\nPlease note that all scheduling methods do not guarantee the exact delay.\n\nFor example, the in-browser timer may slow down for a lot of reasons:\n• The browser tab is in the background mode.\n• The laptop is on battery saving mode.\n\nAll that may increase the minimal timer resolution (the minimal delay) to 300ms or even 1000ms depending on the browser and OS-level performance settings."
    }
]