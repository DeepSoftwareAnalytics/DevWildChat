[
    {
        "link": "https://stackoverflow.com/questions/29299574/responsive-size-font-awesome-icons",
        "document": "I'm using icons in my responsive website and want to display icons at different sizes depending on the screen resolution.\n\nIdeally I'd like to display the font awesome icons using a percentage of the containers width, i.e. 50% of the width, so they scale up and down. I know that I could probably do this just using svg icons, but I wanted to use , as I'm using it elsewhere in my site.\n\nI understand you can specify the size using classes, i.e. fa-lg or fa-2x. Would the best solution be to use classes to hide and display the various sizes depending on screen resolution, or can you get the icons to scale automatically using percentage?"
    },
    {
        "link": "https://stackoverflow.com/questions/14736496/use-font-awesome-icons-in-css",
        "document": "You can't use text as a background image, but you can use the or pseudo-classes to place a text character where you want it, without having to add all kinds of messy extra markup.\n\nBe sure to set on your actual text wrapper for the positioning to work.\n\nFont Awesome v5 uses other font names than older versions:\n\nNote that you should set the same font-weight property, too (seems to be 900).\n\nAnother way to find the font name is to right-click on a sample font awesome icon on your page and get the font name (the same way the utf-8 icon code can be found, but note that you can find it out on )."
    },
    {
        "link": "https://geeksforgeeks.org/how-to-include-social-media-icons-in-html",
        "document": "If you want to attach icons then you need a font-awesome CDN link. Social media could be very helpful in promoting and advertising your website. If your brand has social media accounts, it would be wise to give the website visitors an opportunity to join them and share your posts in their timelines.\n\nNote: You can either add Social Media icons as images( SVG, PNG ) or Font icons ( Font Awesome). In this article, explore both ways.\n\nFont Awesome Icons are a popular set of scalable vector icons that can be customized and easily integrated into web projects, enhancing visual appeal and user experience. To use Font Awesome Icons, add the following CDN link inside the <head> section.\n\nExample : In this example, we are using font awesome icon (Google Icons and Bootstrap Icons).\n\nGoogle Icons, similar to Font Awesome, provide a versatile array of scalable vector icons, enriching web design with easily customizable symbols .To use Google Icons, add the following link inside <head> section.\n\nExample: In this example we will see the design of icons using google icons with an example.\n\n\n\nIn this we can simply use downloaded svg or png images for better social media icons by downloading from google.\n\nNote: You can select SVG icon through various websites like heroicons, bootstrap icons etc. Bootstrap icon is used in below example\n\nExample: In this example, we will use social icons just by downloading from web."
    },
    {
        "link": "https://w3schools.com/html/html_responsive.asp",
        "document": "Responsive web design is about creating web pages that look good on all devices!\n\nA responsive web design will automatically adjust for different screen sizes and viewports.\n\nResponsive Web Design is about using HTML and CSS to automatically resize, hide, shrink, or enlarge, a website, to make it look good on all devices (desktops, tablets, and phones):\n\nTry it Yourself »\n\nTo create a responsive website, add the following tag to all your web pages:\n\nThis will set the viewport of your page, which will give the browser instructions on how to control the page's dimensions and scaling.\n\nHere is an example of a web page without the viewport meta tag, and the same web page with the viewport meta tag:\n\nResponsive images are images that scale nicely to fit any browser size.\n\nIf the CSS property is set to 100%, the image will be responsive and scale up and down:\n\nNotice that in the example above, the image can be scaled up to be larger than its original size. A better solution, in many cases, will be to use the property instead.\n\nIf the property is set to 100%, the image will scale down if it has to, but never scale up to be larger than its original size:\n\nThe HTML element allows you to define different images for different browser window sizes.\n\nResize the browser window to see how the image below changes depending on the width:\n\nThe text size can be set with a \"vw\" unit, which means the \"viewport width\".\n\nThat way the text size will follow the size of the browser window:\n\nIn addition to resize text and images, it is also common to use media queries in responsive web pages.\n\nWith media queries you can define completely different styles for different browser sizes.\n\nExample: resize the browser window to see that the three div elements below will display horizontally on large screens and stack vertically on small screens:\n\nA responsive web page should look good on large desktop screens and on small mobile phones.\n\nTry it Yourself »\n\nThey are free, and easy to use.\n\nW3.CSS is a modern CSS framework with support for desktop, tablet, and mobile design by default.\n\nW3.CSS is smaller and faster than similar CSS frameworks.\n\nW3.CSS is designed to be independent of jQuery or any other JavaScript library.\n\n<!DOCTYPE html>\n\n<html>\n\n<head>\n\n<title>W3.CSS</title>\n\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n<link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\">\n\n</head>\n\n<body>\n\n\n\n<div class=\"w3-container w3-green\">\n\n <h1>W3Schools Demo</h1> \n\n <p>Resize this responsive page!</p> \n\n</div>\n\n\n\n<div class=\"w3-row-padding\">\n\n <div class=\"w3-third\">\n\n <h2>London</h2>\n\n <p>London is the capital city of England.</p>\n\n <p>It is the most populous city in the United Kingdom,\n\n with a metropolitan area of over 13 million inhabitants.</p>\n\n </div>\n\n\n\n <div class=\"w3-third\">\n\n <h2>Paris</h2>\n\n <p>Paris is the capital of France.</p> \n\n <p>The Paris area is one of the largest population centers in Europe,\n\n with more than 12 million inhabitants.</p>\n\n </div>\n\n\n\n <div class=\"w3-third\">\n\n <h2>Tokyo</h2>\n\n <p>Tokyo is the capital of Japan.</p>\n\n <p>It is the center of the Greater Tokyo Area,\n\n and the most populous metropolitan area in the world.</p>\n\n </div>\n\n</div>\n\n\n\n</body>\n\n </html> Try it Yourself »\n\nTo learn more about W3.CSS, read our W3.CSS Tutorial.\n\nTo learn more about Bootstrap, go to our Bootstrap Tutorial."
    },
    {
        "link": "https://reddit.com/r/webdev/comments/18d7omx/any_clear_and_concise_guides_on_best_practice",
        "document": "Just looking for guides that help explain the best way to go about building a responsive website"
    },
    {
        "link": "https://firebase.google.com/docs/hosting/quickstart",
        "document": "If you are building server-rendered Angular or Next.js apps, check out next-generation Firebase App Hosting, a full-stack solution for modern web frameworks.\n\nSave and categorize content based on your preferences.\n\nStay organized with collections Save and categorize content based on your preferences.\n\nFirebase Hosting gives you a fast, secure, and reliable way to host your app's static assets (HTML, CSS, JavaScript, media files, etc.) as well as to serve dynamic content and host microservices.\n\nOur production-grade hosting is backed by a global content delivery network (CDN). Hosting serves your content over SSL, by default, and can be used with your own custom domain or on your project's subdomains at no cost on and .\n\nBefore you can set up Firebase Hosting, you need to create a Firebase project.\n\nVisit the Firebase CLI documentation to learn how to install the CLI or update to its latest version.\n\nTo connect your local project files to your Firebase project, run the following command from the root of your local project directory:\n\nDuring project initialization, from the Firebase CLI prompts:\n• None Select a Firebase project to connect to your local project directory. The selected Firebase project is your \"default\" Firebase project for your local project directory. To connect additional Firebase projects to your local project directory, set up project aliases.\n• None Specify a directory to use as your public root directory. This directory contains all your publicly served static files, including your file and any other assets that you want to deploy to Firebase Hosting.\n• None The default for the public root directory is called .\n• None You can specify your public root directory now or you can specify it later in your configuration file.\n• None If you select the default and don't already have a directory called , Firebase creates it for you.\n• None If you don't already have a valid file or file in your public root directory, Firebase creates them for you.\n• If you select to make a one-page app, then Firebase automatically adds rewrite configurations for you.\n\nAt the end of initialization, Firebase automatically creates and adds two files to the root of your local app directory:\n• None A configuration file that lists your project configuration. Learn more about this file on the configure hosting behavior page.\n\nTo deploy to your site, run the following command from the root of your local project directory:\n\nThis command deploys your Hosting content and config to the following Firebase-provisioned subdomains:\n\nLearn more about deploys and even locally testing your site.\n\nNow your site is ready to share with the world!\n• None Continue to improve your site. Test locally, share changes at a temporary preview URL, then deploy to your live site. Follow this step-by-step guide.\n• None Take a look at the full documentation for the Firebase CLI.\n• None\n• Set up budget alerts for your project in the console.\n• Monitor the Usage and billing dashboard in the console to get an overall picture of your project's usage across multiple Firebase services. You can also visit the Usage dashboard for more detailed usage information."
    },
    {
        "link": "https://firebase.google.com/docs/hosting",
        "document": "If you are building server-rendered Angular or Next.js apps, check out next-generation Firebase App Hosting, a full-stack solution for modern web frameworks.\n\nSave and categorize content based on your preferences.\n\nFirebase Hosting provides fast and secure hosting for your web app. Firebase Hosting is production-grade web content hosting for developers. With a single command, you can quickly deploy web apps to a global CDN (content delivery network). Though Firebase Hosting is optimized for static and single-page web apps, you can also pair Firebase Hosting with Cloud Functions or Cloud Run to build and host dynamic content and microservices on Firebase.\n\nZero-configuration SSL is built into , so content is always delivered securely. Each file that you upload is cached on SSDs at CDN edges around the world and served as gzip or Brotli. We auto-select the best compression method for your content. No matter where your users are, the content is delivered fast. Emulate and even share your changes before going live View and test your changes on a locally hosted URL and interact with an emulated backend. Share your changes with teammates using temporary preview URLs. Hosting also provides a GitHub integration for easy iterations of your previewed content. Deploy new versions with one command Using the Firebase CLI, you can get your app up and running in seconds. Command line tools let you add deployment targets into your build process. And if you need to undo the deploy, Hosting provides one-click rollbacks.\n\nHow does it work?\n\nWhether you are deploying a simple app landing page or a complex Progressive Web App (PWA), Hosting gives you the infrastructure, features, and tooling tailored to deploying and managing websites and apps.\n\nUsing the Firebase CLI, you deploy files from local directories on your computer to our Hosting servers. Beyond serving static content, you can use Cloud Functions for Firebase or Cloud Run to serve dynamic content and host microservices on your sites. All content is served over an SSL connection from the closest edge server on our global CDN.\n\nYou can also view and test your changes before going live. Using the Firebase Local Emulator Suite, you can emulate your app and backend resources at a locally hosted URL. You can also share your changes at a temporary preview URL and set up a GitHub integration for easy iterations during development.\n\nFirebase Hosting has lightweight hosting configuration options for you to build sophisticated PWAs. You can easily rewrite URLs for client-side routing, set up custom headers, and even serve localized content.\n\nFor serving your content, Firebase offers several domain and subdomain options:\n• None By default, every Firebase project has subdomains at no cost on the and domains. These two sites serve the same deployed content and configuration.\n• None You can create multiple sites if you have related sites and apps that serve different content but still share the same Firebase project resources (for example if you have a blog, admin panel, and public app).\n• None You can connect your own domain name to a Firebase-hosted site.\n\nFirebase automatically provisions SSL certificates for all your domains so that all your content is served securely.\n• None Continue to improve your site. Test locally, share changes at a temporary preview URL, then deploy to your live site. Follow this step-by-step guide."
    },
    {
        "link": "https://geeksforgeeks.org/setting-up-firebase-hosting-in-your-project",
        "document": "Firebase Hosting is a service by Google that allows you to host your web app quickly and securely. This article will guide you through the process of setting up Firebase Hosting for your project, from installing the necessary tools to deploying your app. By the end of this article, you'll have a live, secure website hosted on Firebase.\n\nSetting Up Firebase Hosting in Your Project\n\nFirebase Hosting provides a simple and effective way to host your web app, ensuring it is fast, secure, and available to users worldwide. This article will walk you through the steps needed to set up Firebase Hosting for your project, offering a comprehensive look at each step for better understanding. Whether you are a beginner or an experienced developer, this guide aims to provide all the information you need to get your project live.\n\nBefore you begin, ensure you have the following:\n• A Firebase account: You can sign up at Firebase \n\n\n\nHaving these prerequisites in place is crucial for the smooth setup of Firebase Hosting.\n\nSetting Up Firebase Hosting in Your Project\n\nThe Firebase CLI (Command Line Interface) allows you to interact with Firebase from your terminal. To install it, open your terminal or command prompt and run the following command:\n\nThis command installs the Firebase CLI globally on your computer. The Firebase CLI is essential as it provides a range of commands to manage your Firebase projects directly from the command line.\n\nNext, you need to log in to your Firebase account using the CLI. Run the following command:\n\nThis command will open a browser window where you can sign in with your Google account. After signing in, close the browser and return to the terminal.\n\nLogging in via the CLI is a secure way to authenticate and allows you to access your Firebase projects.\n\nNavigate to your project directory and initialize Firebase by running:\n\nThis command will start the setup process. Follow these steps:\n• Step 1: Select Features: You will be asked to select Firebase features. Use the arrow keys to navigate and the space bar to select \"Hosting: Configure files for Firebase Hosting and (optionally) set up GitHub Action deploys.\" Press Enter to continue.\n• Step 2: Select a Firebase Project: Next, choose a Firebase project. You can select an existing project or create a new one. Follow the prompts to complete the setup. Selecting the correct project is crucial as it determines where your files will be hosted.\n• Step 3: Public Directory: Specify the public directory that contains your static files. Enter public and press Enter. If this directory doesn’t exist, Firebase will create it for you. The public directory is where you place your website’s static files, such as HTML CSS JavaScript\n• Step 4: Single-Page App: If your app is a , answer 'Yes'. This ensures that all routes are served by your index.html file. If not, answer 'No'. This step is important for ensuring that your app's routing works correctly.\n• Step 5: GitHub Actions: If you want to enable automatic deployment through GitHub Actions, answer 'Yes'. Otherwise, answer 'No'. Integrating with GitHub Actions can automate your deployment process, making it easier to keep your site up to date.\n\nFirebase will upload your files to its servers and provide a URL where you can access your site. This confirms that your deployment was successful and provides links to your project console and live site. Deployment is the final step in making your site live and accessible to the world.\n\nLet's go through an example to see how it works.\n\nCreate a directory named my-firebase-project and navigate into it.\n\nIn the public directory, create an index.html file with the following content:\n\nRun firebase init in the root directory of your project and follow the prompts as described in the Initialize Firebase in Your Project section.\n\nAfter initializing Firebase, deploy your project with the firebase deploy command. The terminal will display the deployment status and the URL of your live site.\n\nThe firebase.json file created during initialization will look something like this:\n\nThis configuration ensures that all routes are redirected to index.html, which is typical for single-page applications. Understanding this configuration is key to customizing your Firebase Hosting setup.\n\nSetting up Firebase Hosting is simple and quick. By following this article, you can easily deploy your web app and make it accessible to users around the world. Firebase Hosting offers a secure, fast, and reliable way to host your static files.\n\nWith your project now live, you can focus on building and improving your app, knowing that Firebase Hosting provides a solid foundation for your web presence. The ease of use and robust features make Firebase Hosting an excellent choice for developers looking to deploy their web apps efficiently."
    },
    {
        "link": "https://scrrumlabs.medium.com/step-by-step-guide-for-firebase-hosting-5c3fb737c8b6",
        "document": "Firebase Hosting is a widely popular hosting platform used for web applications, static websites, and Single-Page Applications (SPAs). It offers a fast, secure, and dependable way to deploy web applications to a global Content Delivery Network (CDN) with just a few clicks.\n\nIn this blog post, we will go over the steps involved in setting up and deploying a web application using Firebase Hosting.\n\nStep 1: Create a Firebase Project To use Firebase Hosting, the first step is to create a Firebase project. To create a new Firebase project, head over to the Firebase Console and click on the “Add Project” button. Follow the prompts to create your project.\n\nStep 2: Install the Firebase CLI To use Firebase Hosting, you need to install the Firebase CLI (Command Line Interface). You can install it using npm (Node Package Manager) by running the following command in your terminal: npm install -g firebase-tools\n\nStep 3: Initialize your Firebase Project After installing the Firebase CLI, you need to initialize your Firebase project. To do this, navigate to your project directory in your terminal and run the following command:\n\nThis command will initiate a wizard that will guide you through the process of initializing your Firebase project.\n\nPrompt 1 : Are you ready to proceed? (Y/n)\n\nPrompt 2 : Which Firebase features do you want to set up for this directory?\n\nSelect : Hosting: Configure files for Firebase Hosting and (optionally) set up GitHub Action deploys\n\nSelect : Use an existing project (Because we have already created a project in the Firebase Console)\n\nSelect : Here, select your project created in the Firebase Console.\n\nPrompt 5 : What do you want to use as your public directory? (public)\n\nSelect : Click Enter, or if your project is built with any framework like Angular or React, then there must be a build folder (check output path). Type down the name of the folder.\n\nPrompt 6 : Configure as a single-page app (rewrite all URLs to /index.html)?\n\nSelect : Select ‘y’ only if you are using any framework like Angular, React, Vue, etc. Otherwise, select ‘N.’\n\nPrompt 7 : Set up automatic builds and deploys with GitHub?\n\nThat’s it! The Firebase initialization is done.\n\nIf you chose ‘y’ in Prompt 6, then: There must be a build folder in your project (e.g., dist). Check the output path in the JSON file. -> Ensure that firebase.json has the same folder in public as the outpath path.\n\nIf you chose ’N’ in Prompt 6, then: You’ll see a ‘public’ folder in your project that we created in Prompt 5. Inside that, you’ll find index.html and 404.html files. Delete those files and add all HTML, JS, CSS files of your project in the public folder by cutting and pasting.\n\nStep 4 : Deploy Your Web Application Once you have initialized your Firebase project, you are ready to deploy your web application to Firebase Hosting. To do this, build your web application and run the following command in your terminal:\n\nThis command will build your web application and deploy it to Firebase Hosting. Once the deployment is complete, you will be provided with a URL where you can access your web application.\n\nConclusion : Firebase Hosting is an excellent way to deploy web applications quickly and effortlessly. It provides a fast, secure, and reliable way to deploy web applications to a global CDN. By following the steps outlined in this blog post, you can get your web application up and running on Firebase Hosting in no time."
    },
    {
        "link": "https://stackoverflow.com/questions/48089650/how-do-i-host-on-firebase",
        "document": "Try initializing your project with the CLI as explained here: https://firebase.google.com/docs/cli/\n\nAs mentioned there \"The init command steps you through setting up your project directory, including asking which Firebase features you want to use.\" With the features correctly declared you will be able to run firebase deploy without any error"
    }
]