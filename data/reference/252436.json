[
    {
        "link": "https://github.com/mysqljs/mysql",
        "document": "\n• Closing all the connections in a pool\n• Getting the id of an inserted row\n• Getting the number of affected rows\n• Getting the number of changed rows\n\nThis is a Node.js module available through the npm registry.\n\nBefore installing, download and install Node.js. Node.js 0.6 or higher is required.\n\nInstallation is done using the command:\n\nFor information about the previous 0.9.x releases, visit the v0.9 branch.\n\nSometimes I may also ask you to install the latest version from Github to check if a bugfix is working. In this case, please do:\n\nThis is a node.js driver for mysql. It is written in JavaScript, does not require compiling, and is 100% MIT licensed.\n\nHere is an example on how to use it:\n\nFrom this example, you can learn the following:\n• Every method you invoke on a connection is queued and executed in sequence.\n• Closing the connection is done using which makes sure all remaining queries are executed before sending a quit packet to the mysql server.\n\nThanks goes to the people who have contributed code to this module, see the GitHub Contributors page.\n\nAdditionally I'd like to thank the following people:\n• Andrey Hristov (Oracle) - for helping me with protocol questions.\n• Ulf Wendel (Oracle) - for helping me with protocol questions.\n\nThe following companies have supported this project financially, allowing me to spend more time on it (ordered by time of contribution):\n• Transloadit (my startup, we do file uploading & video encoding as a service, check it out)\n\nIf you'd like to discuss this module, or ask questions about it, please use one of the following:\n• IRC Channel: #node.js (on freenode.net, I pay attention to any message including the term )\n\nThe recommended way to establish a connection is this:\n\nHowever, a connection can also be implicitly established by invoking a query:\n\nDepending on how you like to handle your errors, either method may be appropriate. Any type of connection error (handshake or network) is considered a fatal error, see the Error Handling section for more information.\n\nWhen establishing a connection, you can set the following options:\n• : The hostname of the database you are connecting to. (Default: )\n• : The port number to connect to. (Default: )\n• : The source IP address to use for TCP connection. (Optional)\n• : The path to a unix domain socket to connect to. When used and are ignored.\n• : The MySQL user to authenticate as.\n• : The password of that MySQL user.\n• : Name of the database to use for this connection (Optional).\n• : The charset for the connection. This is called \"collation\" in the SQL-level of MySQL (like ). If a SQL-level charset is specified (like ) then the default collation for that charset is used. (Default: )\n• : The timezone configured on the MySQL server. This is used to type cast server date/time values to JavaScript object and vice versa. This can be , , or an offset in the form or . (Default: )\n• : The milliseconds before a timeout occurs during the initial connection to the MySQL server. (Default: )\n• : Stringify objects instead of converting to values. (Default: )\n• : Allow connecting to MySQL instances that ask for the old (insecure) authentication method. (Default: )\n• : Determines if column values should be converted to native JavaScript types. (Default: )\n• : When dealing with big numbers (BIGINT and DECIMAL columns) in the database, you should enable this option (Default: ).\n• : Enabling both and forces big numbers (BIGINT and DECIMAL columns) to be always returned as JavaScript String objects (Default: ). Enabling but leaving disabled will return big numbers as String objects only when they cannot be accurately represented with [JavaScript Number objects] (https://tc39.es/ecma262/#sec-ecmascript-language-types-number-type) (which happens when they exceed the [-2^53, +2^53] range), otherwise they will be returned as Number objects. This option is ignored if is disabled.\n• : Force date types (TIMESTAMP, DATETIME, DATE) to be returned as strings rather than inflated into JavaScript Date objects. Can be / or an array of type names to keep as strings. (Default: )\n• : Prints protocol details to stdout. Can be / or an array of packet type names that should be printed. (Default: )\n• : Generates stack traces on to include call site of library entrance (\"long stack traces\"). Slight performance penalty for most calls. (Default: )\n• : Allow to use the modifier. (Default: )\n• : Allow multiple mysql statements per query. Be careful with this, it could increase the scope of SQL injection attacks. (Default: )\n• : List of connection flags to use other than the default ones. It is also possible to blacklist default ones. For more information, check Connection Flags.\n• : object with ssl parameters or a string containing name of ssl profile. See SSL options.\n\nIn addition to passing these options as an object, you can also use a url string. For example:\n\nNote: The query values are first attempted to be parsed as JSON, and if that fails assumed to be plaintext strings.\n\nThe option in the connection options takes a string or an object. When given a string, it uses one of the predefined SSL profiles included. The following profiles are included:\n• : this profile is for connecting to an Amazon RDS server and contains the certificates from https://rds.amazonaws.com/doc/rds-ssl-ca-cert.pem and https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem\n\nWhen connecting to other servers, you will need to provide an object with any of the following options:\n• : The certificate(s) to trust instead of the ones Node.js is configured to trust. This refers to the value of the certificate(s) and not a filename of the certificate(s). This is passed as the option for the underlying call (or underlying if using Node.js below 0.12).\n• : The client certificate to use in the SSL handshake. This is passed as the option for the underlying call (or underlying if using Node.js below 0.12).\n• : The ciphers to use to use in the SSL handshake instead of the default ones for Node.js. This is passed as the option for call (or underlying if using Node.js below 0.12).\n• : This is passed as the option for the underlying call.\n• : This is passed as the option for the underlying call.\n• : This is passed as the option for call (or underlying if using Node.js below 0.12).\n• : This is passed as the option for call (or underlying if using Node.js below 0.12).\n• : The server certificate is verified against the list of supplied CAs and the hostname, and if no match is found, the SSL connection will fail. (Default: )\n\nHere is a simple example:\n\nYou can also connect to a MySQL server without properly providing the appropriate CA to trust. You should not do this.\n\nIf, for any reason, you would like to change the default connection flags, you can use the connection option . Pass a string with a comma separated list of items to add to the default flags. If you don't want a default flag to be used prepend the flag with a minus sign. To add a flag that is not in the default list, just write the flag name, or prefix it with a plus (case insensitive).\n\nThe following flags are available:\n• - Enable protocol compression. This feature is not currently supported by the Node.js implementation so cannot be turned on. (Default off)\n• - Ability to specify the database on connection. (Default on)\n• - Send the found rows instead of the affected rows as . (Default on)\n• - Don't issue SIGPIPE if network failures. This flag has no effect on this Node.js implementation. (Default on)\n• - Let the parser ignore spaces before the in queries. (Default on)\n• - Indicates to the MySQL server this is an \"interactive\" client. This will use the interactive timeouts on the MySQL server and report as interactive in the process list. (Default off)\n• - Can use . This flag is controlled by the connection option . (Default on)\n• - Use the improved version of Old Password Authentication. (Default on)\n• - Can handle multiple resultsets for queries. (Default on)\n• - The client may send multiple statement per query or statement prepare (separated by ). This flag is controlled by the connection option . (Default off)\n• Special handling of ODBC behaviour. This flag has no effect on this Node.js implementation. (Default on)\n• - Uses the plugin authentication mechanism when connecting to the MySQL server. This feature is not currently supported by the Node.js implementation so cannot be turned on. (Default off)\n• - Uses the 4.1 protocol. (Default on)\n• - Can handle multiple resultsets for execute. (Default on)\n• - This is specific to the C client, and has no effect on this Node.js implementation. (Default off)\n• - Old flag for the 4.1 protocol. (Default on)\n• - Use SSL after handshake to encrypt data in transport. This feature is controlled though the connection option, so the flag has no effect. (Default off)\n• - Verify the server certificate during SSL set up. This feature is controlled though the connection option, so the flag has no effect. (Default off)\n• - Asks for the transaction status flags. (Default on)\n\nThere are two ways to end a connection. Terminating a connection gracefully is done by calling the method:\n\nThis will make sure all previously enqueued queries are still executed before sending a packet to the MySQL server. If a fatal error occurs before the packet can be sent, an argument will be provided to the callback, but the connection will be terminated regardless of that.\n\nAn alternative way to end the connection is to call the method. This will cause an immediate termination of the underlying socket. Additionally guarantees that no more events or callbacks will be triggered for the connection.\n\nUnlike the method does not take a callback argument.\n\nRather than creating and managing connections one-by-one, this module also provides built-in connection pooling using . Read more about connection pooling.\n\nCreate a pool and use it directly:\n\nThis is a shortcut for the -> -> code flow. Using is useful to share connection state for subsequent queries. This is because two calls to may use two different connections and run in parallel. This is the basic structure:\n\nIf you would like to close the connection and remove it from the pool, use instead. The pool will create a new connection the next time one is needed.\n\nConnections are lazily created by the pool. If you configure the pool to allow up to 100 connections, but only ever use 5 simultaneously, only 5 connections will be made. Connections are also cycled round-robin style, with connections being taken from the top of the pool and returning to the bottom.\n\nWhen a previous connection is retrieved from the pool, a ping packet is sent to the server to check if the connection is still good.\n\nPools accept all the same options as a connection. When creating a new connection, the options are simply passed to the connection constructor. In addition to those options pools accept a few extras:\n• : The milliseconds before a timeout occurs during the connection acquisition. This is slightly different from , because acquiring a pool connection does not always involve making a connection. If a connection request is queued, the time the request spends in the queue does not count towards this timeout. (Default: )\n• : Determines the pool's action when no connections are available and the limit has been reached. If , the pool will queue the connection request and call it when one becomes available. If , the pool will immediately call back with an error. (Default: )\n• : The maximum number of connections to create at once. (Default: )\n• : The maximum number of connection requests the pool will queue before returning an error from . If set to , there is no limit to the number of queued connection requests. (Default: )\n\nThe pool will emit an event when a connection is acquired from the pool. This is called after all acquiring activity has been performed on the connection, right before the connection is handed to the callback of the acquiring code.\n\nThe pool will emit a event when a new connection is made within the pool. If you need to set session variables on the connection before it gets used, you can listen to the event.\n\nThe pool will emit an event when a callback has been queued to wait for an available connection.\n\nThe pool will emit a event when a connection is released back to the pool. This is called after all release activity has been performed on the connection, so the connection will be listed as free at the time of the event.\n\nWhen you are done using the pool, you have to end all the connections or the Node.js event loop will stay active until the connections are closed by the MySQL server. This is typically done if the pool is used in a script or when trying to gracefully shutdown a server. To end all the connections in the pool, use the method on the pool:\n\nThe method takes an optional callback that you can use to know when all the connections are ended.\n\nOnce is called, and other operations can no longer be performed. Wait until all connections in the pool are released before calling . If you use the shortcut method , in place of → → , wait until it completes.\n\ncalls on every active connection in the pool. This queues a packet on the connection and sets a flag to prevent from creating new connections. All commands / queries already in progress will complete, but new commands won't execute.\n• : If , will attempt to reconnect when connection fails. (Default: )\n• : If connection fails, node's increases. When is greater than , remove a node in the . (Default: )\n• : If connection fails, specifies the number of milliseconds before another connection attempt will be made. If set to , then node will be removed instead and never re-used. (Default: )\n• : The default selector. (Default: )\n• : Select the first node available unconditionally.\n\nMySQL offers a changeUser command that allows you to alter the current user and other aspects of the connection without shutting down the underlying socket:\n\nThe available options for this feature are:\n• : The name of the new user (defaults to the previous one).\n• : The password of the new user (defaults to the previous one).\n• : The new charset (defaults to the previous one).\n• : The new database (defaults to the previous one).\n\nA sometimes useful side effect of this functionality is that this function also resets any connection state (variables, transactions, etc.).\n\nErrors encountered during this operation are treated as fatal connection errors by this module.\n\nYou may lose the connection to a MySQL server due to network problems, the server timing you out, the server being restarted, or crashing. All of these events are considered fatal errors, and will have the . See the Error Handling section for more information.\n\nRe-connecting a connection is done by establishing a new connection. Once terminated, an existing connection object cannot be re-connected by design.\n\nWith Pool, disconnected connections will be removed from the pool freeing up space for a new connection to be created on the next getConnection call.\n\nWith PoolCluster, disconnected connections will count as errors against the related node, incrementing the error code for that node. Once there are more than errors on a given node, it is removed from the cluster. When this occurs, the PoolCluster may emit a error if there are no longer any matching nodes for the pattern. The config can be set to restore offline nodes after a given timeout.\n\nThe most basic way to perform a query is to call the method on an object (like a , , or instance).\n\nThe simplest form of is , where a SQL string is the first argument and the second is a callback:\n\nThe second form comes when using placeholder values (see escaping query values):\n\nThe third form comes when using various advanced options on the query, like escaping query values, joins with overlapping column names, timeouts, and type casting.\n\nNote that a combination of the second and third forms can be used where the placeholder values are passed as an argument and not in the options object. The argument will override the in the option object.\n\nIf the query only has a single replacement character ( ), and the value is not , , or an array, it can be passed directly as the second argument to :\n\nCaution These methods of escaping values only works when the NO_BACKSLASH_ESCAPES SQL mode is disabled (which is the default state for MySQL servers).\n\nCaution This library performs client-side escaping, as this is a library to generate SQL strings on the client side. The syntax for functions like may look similar to a prepared statement, but it is not and the escaping rules from this module are used to generate a resulting SQL string. The purpose of escaping input is to avoid SQL Injection attacks. In order to support enhanced support like and formatting, this module will escape based on the shape of the passed in JavaScript value, and the resulting escaped string may be more than a single value. When structured user input is provided as the value to escape, care should be taken to validate the shape of the input to validate the output will be what is expected.\n\nIn order to avoid SQL Injection attacks, you should always escape any user provided data before using it inside a SQL query. You can do so using the , or methods:\n\nAlternatively, you can use characters as placeholders for values you would like to have escaped like this:\n\nMultiple placeholders are mapped to values in the same order as passed. For example, in the following query equals , equals , equals , and will be :\n\nThis looks similar to prepared statements in MySQL, however it really just uses the same method internally.\n\nCaution This also differs from prepared statements in that all are replaced, even those contained in comments and strings.\n\nDifferent value types are escaped differently, here is how:\n• Arrays are turned into list, e.g. turns into\n• Nested arrays are turned into grouped lists (for bulk inserts), e.g. turns into\n• Objects that have a method will have called and the returned value is used as the raw SQL.\n• Objects are turned into pairs for each enumerable property on the object. If the property's value is a function, it is skipped; if the property's value is an object, toString() is called on it and the returned value is used.\n• / are left as-is. MySQL does not support these, and trying to insert them as values will trigger MySQL errors until they implement support.\n\nThis escaping allows you to do neat things like this:\n\nAnd the method allows you to form complex queries with functions:\n\nTo generate objects with a method, the method can be used. This creates an object that will be left un-touched when using in a placeholder, useful for using functions as dynamic values:\n\nCaution The string provided to will skip all escaping functions when used, so be careful when passing in unvalidated input.\n\nIf you feel the need to escape queries by yourself, you can also use the escaping function directly:\n\nIf you can't trust an SQL identifier (database / table / column name) because it is provided by a user, you should escape it with , or like this:\n\nIt also supports adding qualified identifiers. It will escape both parts.\n\nIf you do not want to treat as qualified identifiers, you can set the second argument to in order to keep the string as a literal identifier:\n\nAlternatively, you can use characters as placeholders for identifiers you would like to have escaped like this:\n\nPlease note that this last character sequence is experimental and syntax might change\n\nWhen you pass an Object to or , is used to avoid SQL injection in object keys.\n\nYou can use mysql.format to prepare a query with multiple insertion points, utilizing the proper escaping for ids and values. A simple example of this follows:\n\nFollowing this you then have a valid, escaped query that you can then send to the database safely. This is useful if you are looking to prepare the query before actually sending it to the database. As mysql.format is exposed from SqlString.format you also have the option (but are not required) to pass in stringifyObject and timezone, allowing you provide a custom means of turning objects into strings, as well as a location-specific/timezone-aware Date.\n\nIf you prefer to have another type of query escape format, there's a connection configuration option you can use to define a custom format function. You can access the connection object if you want to use the built-in or any other connection function.\n\nHere's an example of how to implement another format:\n\nIf you are inserting a row into a table with an auto increment primary key, you can retrieve the insert id like this:\n\nWhen dealing with big numbers (above JavaScript Number precision limit), you should consider enabling option to be able to read the insert id as a string, otherwise it will throw an error.\n\nThis option is also required when fetching big numbers from the database, otherwise you will get values rounded to hundreds or thousands due to the precision limit.\n\nYou can get the number of affected rows from an insert, update or delete statement.\n\nYou can get the number of changed rows from an update statement.\n\n\"changedRows\" differs from \"affectedRows\" in that it does not count updated rows whose values were not changed.\n\nYou can get the MySQL connection ID (\"thread ID\") of a given connection using the property.\n\nThe MySQL protocol is sequential, this means that you need multiple connections to execute queries in parallel. You can use a Pool to manage connections, one simple approach is to create one connection per incoming http request.\n\nSometimes you may want to select large quantities of rows and process each of them as they are received. This can be done like this:\n\nPlease note a few things about the example above:\n• Usually you will want to receive a certain amount of rows before starting to throttle the connection using . This number will depend on the amount and size of your rows.\n• / operate on the underlying socket and parser. You are guaranteed that no more events will fire after calling .\n• You MUST NOT provide a callback to the method when streaming rows.\n• The event will fire for both rows as well as OK packets confirming the success of a INSERT/UPDATE query.\n• It is very important not to leave the result paused too long, or you may encounter The time limit for this is determined by the net_write_timeout setting on your MySQL server.\n\nAdditionally you may be interested to know that it is currently not possible to stream individual row columns, they will always be buffered up entirely. If you have a good use case for streaming large fields to and from MySQL, I'd love to get your thoughts and contributions on this.\n\nThe query object provides a convenience method that wraps query events into a Readable Stream object. This stream can easily be piped downstream and provides automatic pause/resume, based on downstream congestion and the optional . The parameter of the stream is set to and cannot be changed (if you need a byte stream, you will need to use a transform stream, like objstream for example).\n\nFor example, piping query results into another stream (with a max buffer of 5 objects) is simply:\n\nSupport for multiple statements is disabled for security reasons (it allows for SQL injection attacks if values are not properly escaped). To use this feature you have to enable it for your connection:\n\nOnce enabled, you can execute multiple statement queries like any other query:\n\nAdditionally you can also stream the results of multiple statement queries:\n\nIf one of the statements in your query causes an error, the resulting Error object contains a property which tells you which statement caused it. MySQL will also stop executing any remaining statements when an error occurs.\n\nPlease note that the interface for streaming multiple statement queries is experimental and I am looking forward to feedback on it.\n\nYou can call stored procedures from your queries as with any other mysql driver. If the stored procedure produces several result sets, they are exposed to you the same way as the results for multiple statement queries.\n\nWhen executing joins, you are likely to get result sets with overlapping column names.\n\nBy default, node-mysql will overwrite colliding column names in the order the columns are received from MySQL, causing some of the received values to be unavailable.\n\nHowever, you can also specify that you want your columns to be nested below the table name like this:\n\nOr use a string separator to have your results merged.\n\nSimple transaction support is available at the connection level:\n\nPlease note that beginTransaction(), commit() and rollback() are simply convenience functions that execute the START TRANSACTION, COMMIT, and ROLLBACK commands respectively. It is important to understand that many commands in MySQL can cause an implicit commit, as described in the MySQL documentation\n\nA ping packet can be sent over a connection using the method. This method will send a ping packet to the server and when the server responds, the callback will fire. If an error occurred, the callback will fire with an error argument.\n\nEvery operation takes an optional inactivity timeout option. This allows you to specify appropriate timeouts for operations. It is important to note that these timeouts are not part of the MySQL protocol, and rather timeout operations through the client. This means that when a timeout is reached, the connection it occurred on will be destroyed and no further operations can be performed.\n\nThis module comes with a consistent approach to error handling that you should review carefully in order to write solid applications.\n\nMost errors created by this module are instances of the JavaScript Error object. Additionally they typically come with two extra properties:\n• : String, contains the MySQL server error symbol if the error is a MySQL server error (e.g. ), a Node.js error code if it is a Node.js error (e.g. ), or an internal error code (e.g. ).\n• : Number, contains the MySQL server error number. Only populated from MySQL server error.\n• : Boolean, indicating if this error is terminal to the connection object. If the error is not from a MySQL protocol operation, this property will not be defined.\n• : String, contains the full SQL of the failed query. This can be useful when using a higher level interface like an ORM that is generating the queries.\n• : String, contains the five-character SQLSTATE value. Only populated from MySQL server error.\n• : String, contains the message string that provides a textual description of the error. Only populated from MySQL server error.\n\nFatal errors are propagated to all pending callbacks. In the example below, a fatal error is triggered by trying to connect to a blocked port. Therefore the error object is propagated to both pending callbacks:\n\nNormal errors however are only delegated to the callback they belong to. So in the example below, only the first callback receives an error, the second query works as expected:\n\nLast but not least: If a fatal errors occurs and there are no pending callbacks, or a normal error occurs which has no callback belonging to it, the error is emitted as an event on the connection object. This is demonstrated in the example below:\n\nNote: events are special in node. If they occur without an attached listener, a stack trace is printed and your process is killed.\n\ntl;dr: This module does not want you to deal with silent failures. You should always provide callbacks to your method calls. If you want to ignore this advice and suppress unhandled errors, you can do this:\n\nThis module is exception safe. That means you can continue to use it, even if one of your callback functions throws an error which you're catching using 'uncaughtException' or a domain.\n\nFor your convenience, this driver will cast mysql types into native JavaScript types by default. The default behavior can be changed through various Connection options. The following mappings exist:\n• BIT (last byte will be filled with 0 bits as necessary)\n\nNote text in the binary character set is returned as , rather than a string.\n• TIME (could be mapped to Date, but what date would be set?)\n• GEOMETRY (never used those, get in touch if you do)\n\nIt is not recommended (and may go away / change in the future) to disable type casting, but you can currently do so on either the connection:\n\nOr on the query level:\n\nYou can also pass a function and handle type casting yourself. You're given some column information like database, table and name and also type and length. If you just want to apply a custom type casting to a specific type you can do it and then fallback to the default.\n\nThe function is provided two arguments and and is expected to return the value for the given field by invoking the parser functions through the object.\n\nThe argument is a object and contains data about the field that need to be parsed. The following are some of the properties on a object:\n• - a string of the database the field came from.\n• - a string of the table the field came from.\n• - a string of the field name.\n• - a string of the field type in all caps.\n• - a number of the field length, as given by the database.\n\nThe argument is a that, when called, will return the default type conversion for the given field.\n\nWhen getting the field data, the following helper methods are present on the object:\n• - parse the field as a geometry value.\n\nThe MySQL protocol is a text-based protocol. This means that over the wire, all field types are represented as a string, which is why only string-like functions are available on the object. Based on the type information (like ), the type cast should convert the string field into a different JavaScript type (like a ).\n\nHere's an example of converting to boolean:\n\nWARNING: YOU MUST INVOKE the parser using one of these three field functions in your custom typeCast callback. They can only be called once.\n\nIf you are running into problems, one thing that may help is enabling the mode for the connection:\n\nThis will print all incoming and outgoing packets on stdout. You can also restrict debugging to packet types by passing an array of types to debug:\n\nto restrict debugging to the query and data packets.\n\nIf that does not help, feel free to open a GitHub issue. A good GitHub issue will have:\n• The minimal amount of code required to reproduce the problem (if possible)\n• As much debugging output and information about your environment (mysql version, node version, os, etc.) as you can gather.\n\nSecurity issues should not be first reported through GitHub or another public forum, but kept private in order for the collaborators to assess the report and either (a) devise a fix and plan a release date or (b) assert that it is not a security issue (in which case it can be posted in a public forum, like a GitHub issue).\n\nThe primary private forum is email, either by emailing the module's author or opening a GitHub issue simply asking to whom a security issues should be addressed to without disclosing the issue or type of issue.\n\nAn ideal report would include a clear indication of what the security issue is and how it would be exploited, ideally with an accompanying proof of concept (\"PoC\") for collaborators to work against and validate potentional fixes against.\n\nThis project welcomes contributions from the community. Contributions are accepted using GitHub pull requests. If you're not familiar with making GitHub pull requests, please refer to the GitHub documentation \"Creating a pull request\".\n\nFor a good pull request, we ask you provide the following:\n• Try to include a clear description of your pull request in the description. It should include the basic \"what\" and \"why\"s for the request.\n• The tests should pass as best as you can. See the Running tests section on how to run the different tests. GitHub will automatically run the tests as well, to act as a safety net.\n• The pull request should include tests for the change. A new feature should have tests for the new feature and bug fixes should include a test that fails without the corresponding code change and passes after they are applied. The command will generate a folder that contains HTML pages of the code coverage, to better understand if everything you're adding is being tested.\n• If the pull request is a new feature, please be sure to include all appropriate documentation additions in the file as well.\n• To help ensure that your code is similar in style to the existing code, run the command and fix any displayed issues.\n\nThe test suite is split into two parts: unit tests and integration tests. The unit tests run on any machine while the integration tests require a MySQL server instance to be setup.\n\nSet the environment variables , , , and . can also be used in place of and to connect over a UNIX socket. Then run .\n\nFor example, if you have an installation of mysql running on localhost:3306 and no password set for the user, run:\n• Support for encodings other than UTF-8 / ASCII"
    },
    {
        "link": "https://stackoverflow.com/questions/40141332/node-js-mysql-error-handling",
        "document": "I've read several examples for using mysql in node.js and I have questions about the error handling.\n\nMost examples do error handling like this (perhaps for brevity):\n\nThis causes the server to crash every time there's an sql error. I'd like to avoid that and keep the server running.\n\nMy code is like this:\n\nI'm not sure if this is the best way to handle it. I'm also wondering if there should be a in the query's block. Otherwise the connections might stay open and build up over time.\n\nI'm used to Java's or where I can \"cleanly\" catch any errors and close all my resources at the end. Is there a way to propagate the errors up and handle them all in one place?"
    },
    {
        "link": "https://sidorares.github.io/node-mysql2/docs",
        "document": "MySQL client for Node.js with focus on performance. Supports prepared statements, non-utf8 encodings, binary log protocol, compression, ssl much more.\n\nMySQL2 is free from native bindings and can be installed on Linux, Mac OS or Windows without any issues.\n\nWith MySQL2 you also get the prepared statements. With prepared statements MySQL doesn't have to prepare plan for same query every time, this results in better performance. If you don't know why they are important, please check these discussions:\n• How prepared statements can protect from SQL Injection attacks\n\nMySQL2 provides helper which will prepare and query the statement. You can also manually prepare / unprepare statement with / methods.\n\nConnection pools help reduce the time spent connecting to the MySQL server by reusing a previous connection, leaving them open instead of closing when you are done with them.\n\nThis improves the latency of queries as you avoid all of the overhead that comes with establishing a new connection.\n\nYou can use the pool in the same way as connections (using and ):\n\nAlternatively, there is also the possibility of manually acquiring a connection from the pool and returning it later:\n• Additionally, directly release the connection using the object:\n\nMySQL2 also support Promise API. Which works very well with ES7 async await.\n\nMySQL2 use default object available in scope. But you can choose which implementation you want to use.\n\nMySQL2 also exposes a function on Pools, so you can create a promise/non-promise connections from the same pool.\n\nMySQL2 exposes a function on Connections, to \"upgrade\" an existing non-promise connection to use promise.\n\nIf you have two columns with the same name, you might want to get results as an array rather than an object to prevent them from clashing. This is a deviation from the Node MySQL library.\n\nYou can enable this setting at either the connection level (applies to all queries), or at the query level (applies only to that specific query)."
    },
    {
        "link": "https://gosquared.com/blog/node-js-error-handling-callbacks-vs-promises",
        "document": "Error handling can be a drag, but it’s essential for the stability of your app. Naturally, I’m interested in ways to streamline the error handling process to make it as stable as it can be for the app whilst also being convenient for me to write.\n\nLately, I’ve been reading a lot about new features in ES6, such as generators, and that’s led me onto promises, an alternative method of asynchronous flow control to callbacks. I decided to look into the differences in how these different methods approach error handling, their strengths and weaknesses.\n\nThe main kind of errors we’re looking at here are I/O errors in asynchronous operations. These occur when an I/O operation fails to yield the expected results, sometimes due to some external problem outside of your program’s control. For example, we might be fetching data from a MySQL database, but our query contains an error:\n\nNotice that in this example we are using Node’s default style of using a callback to handle the result of the I/O. The first argument of the callback function is . This is the standard convention in Node, the one you should follow when writing your own async functions.\n\nThe first argument to callbacks should always be\n\nDevelopers new to Node sometimes forget to follow this convention which makes it very frustrating for other developers trying to work with their code, because they have no consistent point of reference to check whether the operation succeeded or not. But if the first parameter to our callback is reserved for errors then they can be checked before processing the results of each callback.\n\nIf is falsy (usually null), then the callback can carry on assuming the operation succeeded. Otherwise, it can deal with the error in an appropriate way, such as logging it along with any contextual information. It can then decide whether or not to carry on depending on the severity of the error or whether or not the resultant data is required to continue operation.\n\nLet’s implement some error handling for our query error:\n\nHere, we check if is present. If it is, we log the error and the query that triggered it then return from the function, stopping it from running any further.\n\nYou might have a collection of multiple async operations executing in parallel. How do we handle errors in any of those?\n\nOur favourite library for asynchronous flow control is async. Both and accept a collection of operations, and if any of them pass an error to its callback, async will immediately invoke your completion callback with the error:\n\nwill execute both and in parallel but if either or both fail it will invoke our completion callback with the error that occurred first.\n\nStandard callbacks are all well and good when we’re following Node’s convention, but it’s a little bit laborious to check the result of every operation, and this can quickly get messy when there are many nested callbacks each with their own error handling code.\n\nPromises are an alternative to callbacks for asynchronous control flow. They are viewed as a solution to the “pyramid of doom” indentation caused by nested callbacks, but they also have some useful error handling features.\n\nQ is a popular module to get you working with promises. In its README, Q describes the concept of promises:\n\nPromises allow us to chain operations together in a sequential manner, without the need for nesting. They also neatly encapsulate any results and errors raised within the chain. For example:\n\nCompare this to the callback-based equivalent:\n\nThe promises method is much more compact, clearer and quicker to write. If an error or exception occurs within any of the ops it is handled by the single handler. Having this single place to handle all errors means you don’t need to write error checking for each stage of the work.\n\nAdditionally, the promise chain has more robust protection against exceptions and runtime errors that could be thrown within operations. If an exception is thrown, it will be caught by your handler, or any intermediary error handlers passed to each step. In contrast, the callback method would crash the node process because it doesn’t encapsulate exceptions thrown in I/O callbacks. Catching exceptions like this allows you to gracefully handle the error in an appropriate way instead of crashing the process straight away.\n\nFurthermore, you can use Q’s long stack support to get more helpful stack traces that keep track of the call stack across asynchronous operations.\n\nOne slight disadvantage of promises is that in order to use them, you need to make any normal node callback-style code compatible with promise flow control. This usually involves passing the functions through an adapter to make it compatible with promises, such as Q’s .\n\nWe’ve spoken a lot about I/O errors during asynchronous flow control, but Node.js has another way of running handlers asynchronously: events.\n\nIn Node, an object can be made into an event emitter by inheriting the EventEmitter on its prototype. All core node modules that emit events such as or inherit from EventEmitter.\n\nWhen an event emitter encounters an error (e.g. a TCP socket abruptly disconnects), it will emit a special ‘error’ event. The ‘error’ event is special in Node because if there are no listeners on the event emitter for this event then the event emitter will throw an exception and this will crash the process.\n\nYou might be tempted to prevent exceptions being thrown by binding a listener to the ‘error’ event and logging it instead of crashing. This is potentially dangerous, because you usually can’t guarantee exactly where the error originated from and what all the consequences of it are. Usually the best thing to do is catch the error, log it, close any existing connections and gracefully restart your app.\n\nDo not use\n\nwas added to node for the purpose of catching errors and doing cleanup before the node process exits. Beware! This has quickly become an anti-pattern in Node. It loses the context of the exception, and is prone to hanging if your event handler doesn’t call .\n\nDomains were created as a more official way of capturing uncaught exceptions or stray ‘error’ events before they get to crash the process.\n\nWhile the domains API is still in unstable state and is subject to some criticism, it is still better than using . Read the docs for usage info.\n\nFurther reading on Q module and domains documentation."
    },
    {
        "link": "https://dev.mysql.com/blog-archive/introducing-connector-node-js-for-mysql-8-0",
        "document": "As you may have heard, MySQL 8.0 is now officially GA, and it comes with a bunch of additional goodies. Among those is the brand new Connector/Node.js, which is the official MySQL driver for Node.js and, currently, the only one with support for the latest server versions and features (such as the MySQL document store).\n\nConnector/Node.js is currently the only driver in the Node.js ecosystem that works out-of-the-box with the latest MySQL 8.0 series and implements the brand new X Protocol and X DevAPI, which unlocks exclusive server features such as the MySQL document store.\n\nIn a nutshell, the X Protocol is based on the Google Protocol Buffers serialization format, and provides a common interface for a different set of official connectors to bridge into the MySQL server via the X plugin, which contains the server-side implementation of the document store and a surrounding scaffolding ecosystem including things like common CRUD expression trees, bound parameters, or expectations and conditions for statement pipelining.\n\nThe X DevAPI is the common client-side API used by all connectors to abstract the details of the X Protocol. It specifies the common set of CRUD-style functions/methods used by all the official connectors to work with both document store collections and relational tables, a common expression language to establish query properties such as criteria, projections, aliases, and a standard set of additional database management features for handling things like transactions, indexes, etc.\n\nThe fact that most of these features share the same format and API between connectors, makes the X DevAPI a perfect fit for mordern polyglot development environments such as microservices, and the fact that they are based on a well-documented format allows advanced users to extend client-side implementations and build new middleware components or extensions tailor-made for their use case.\n\nAlthough, there are (most of the times) matching client APIs to work with relational tables, this overview will focus mostly on document-store related features. Check the official Connector/Node.js documentation or the X DevAPI user guide to get the full picture.\n\nWith Connector/Node.js, SSL/TLS is enabled by default for server TCP connections and, additionally, the server identity can be validated against a given certificate authority (CA).\n\nOf course you can explicitely override this behavior (at your own peril).\n\nLocal Unix sockets don’t use SSL/TLS since they don’t really benefit much from that level of security. At the same time, that removes the possibility of any additional performance overhead caused by the SSL/TLS handshake.\n\nIn the authentication realm, besides the traditional SHA1-based server authentication plugin, Connector/Node.js also supports the latest secure authentication plugins based on SHA-256. Of course you can always use your own custom server plugins, as long as the authentication data can be sent using one of the existing client-side authentication mechanisms (in the simplest form, via plain text).\n\nAdditional details about Connector/Node.js security can be found here.\n\nThe public API flows nicely from a single getSession() method. Whereas, when it comes the point of creating and issuing database operations, you get a nice fluent query builder where those operations are encapsulated in specialized and specific methods, which, compared to using raw SQL statements, brings benefits such as:\n• more readable, maintainable (and even testable) code\n• common standard between different programming languages and environments\n• an object with named properties (where it applies)\n\nBeing a good Node.js citizen, Connector/Node.js encapsulates all blocking I/O operations with asynchronous methods. Each method that sends a message to the MySQL server is expected to return a JavaScript Promise , which resolves to the specific result or fails with an error. This pattern also unlocks other platform abstractions such as the async/await syntax, making it even more flexible for the user than just using traditional error-first callbacks.\n\nSo, after building a query, it can be sent to the server via the execute() method. In turn, the method receives an optional callback as argument, which runs for each element in the result set. When using relational tables, an additional callback function can be used to tap into the given column metadata.\n\nOther methods, such as the ones that operate on a single instance of a connection, database object (be it a schema, table/collection, row, document, etc.) will return a Promise by themselves (dropping the extra call to execute() ). Some examples:\n\nWith MySQL 8.0, you get session-level consistency and document-level isolation via multiple database constructs, such as transactions, savepoints and row locking. This allows to encapsulate a set of operations (particularly DML) encompassing multiple documents or collections in a single atomic procedure within a given session.\n\nConnector/Node.js provides APIs to create, commit or rollback a transaction as well as to create, release or rollback to an intermediate savepoint within that transaction.\n\nIn the presence of concurrent transactions, the isolation level of each operation within the transaction, operating on a given document, can be determined using row locks.\n\nIf you are looking for a feature that is still not available on the X DevAPI, or simply something that does not fit the CRUD model, you can always resort to plain old SQL.\n\nIf you want to use Connector/Node.js in your own project or just want to play around with, download the latest version from npm:\n\nNew releases DO NOT follow semantic versioning, so, to avoid being affected by breaking changes, make sure you use –save-exact when pulling the package, particularly if you don’t have npm-shrinkwrap.json or package-lock.json files locking down your project’s dependencies.\n\nIf you are an advanced user, being an open source project, the code is hosted on the official GitHub repository and contributions are welcome, either in the form of bugs (Connector for Node.js category) or pull requests.\n\nAssuming you are running MySQL 8.0 with the default configuration and Node.js v8.0.0 or later (for async/await support), using Connector/Node.js and the MySQL document store in your project is as simple as follows:\n\nThese are just some of the highlights. Make sure you check out the official Connector/Node.js documentation or the X DevAPI user guide for usage examples and even more details on how to get started.\n\nPlease give it a try! Your feedback is more than welcome."
    },
    {
        "link": "https://expressjs.com/en/resources/middleware/session.html",
        "document": "This is a Node.js module available through the npm registry. Installation is done using the command:\n\nCreate a session middleware with the given .\n\nNote Session data is not saved in the cookie itself, just the session ID. Session data is stored server-side.\n\nNote Since version 1.5.0, the middleware no longer needs to be used for this module to work. This module now directly reads and writes cookies on / . Using may result in issues if the is not the same between this module and .\n\nWarning The default server-side session storage, , is purposely not designed for a production environment. It will leak memory under most conditions, does not scale past a single process, and is meant for debugging and developing.\n\nFor a list of stores, see compatible session stores.\n\naccepts these properties in the options object.\n\nSettings object for the session ID cookie. The default value is .\n\nThe following are options that can be set in this object.\n\nSpecifies the value for the attribute. By default, no domain is set, and most clients will consider the cookie to apply to only the current domain.\n\nSpecifies the object to be the value for the attribute. By default, no expiration is set, and most clients will consider this a “non-persistent cookie” and will delete it on a condition like exiting a web browser application.\n\nNote If both and are set in the options, then the last one defined in the object is what is used.\n\nNote The option should not be set directly; instead only use the option.\n\nSpecifies the value for the attribute. When truthy, the attribute is set, otherwise it is not. By default, the attribute is set.\n\nNote be careful when setting this to , as compliant clients will not allow client-side JavaScript to see the cookie in .\n\nSpecifies the (in milliseconds) to use when calculating the attribute. This is done by taking the current server time and adding milliseconds to the value to calculate an datetime. By default, no maximum age is set.\n\nNote If both and are set in the options, then the last one defined in the object is what is used.\n\nSpecifies the value for the attribute. When truthy, the attribute is set, otherwise it is not. By default, the attribute is not set.\n\nNote This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it.\n\nMore information about can be found in the proposal.\n\nSpecifies the value for the . By default, this is set to , which is the root path of the domain.\n\nSpecifies the to be the value for the attribute.\n• will set the attribute to .\n• will set the attribute to , the default priority when not set.\n• will set the attribute to .\n\nMore information about the different priority levels can be found in the specification.\n\nNote This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it.\n\nSpecifies the or to be the value for the attribute. By default, this is .\n• will set the attribute to for strict same site enforcement.\n• will not set the attribute.\n• will set the attribute to for lax same site enforcement.\n• will set the attribute to for an explicit cross-site cookie.\n• will set the attribute to for strict same site enforcement.\n\nMore information about the different enforcement levels can be found in the specification.\n\nNote This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it.\n\nNote There is a draft spec that requires that the attribute be set to when the attribute has been set to . Some web browsers or other clients may be adopting this specification.\n\nSpecifies the value for the attribute. When truthy, the attribute is set, otherwise it is not. By default, the attribute is not set.\n\nNote be careful when setting this to , as compliant clients will not send the cookie back to the server in the future if the browser does not have an HTTPS connection.\n\nPlease note that is a recommended option. However, it requires an https-enabled website, i.e., HTTPS is necessary for secure cookies. If is set, and you access your site over HTTP, the cookie will not be set. If you have your node.js behind a proxy and are using , you need to set “trust proxy” in express:\n\nFor using secure cookies in production, but allowing for testing in development, the following is an example of enabling this setup based on in express:\n\nThe option can also be set to the special value to have this setting automatically match the determined security of the connection. Be careful when using this setting if the site is available both as HTTP and HTTPS, as once the cookie is set on HTTPS, it will no longer be visible over HTTP. This is useful when the Express setting is properly setup to simplify development vs production configuration.\n\nFunction to call to generate a new session ID. Provide a function that returns a string that will be used as a session ID. The function is given as the first argument if you want to use some value attached to when generating the ID.\n\nThe default value is a function which uses the library to generate IDs.\n\nNOTE be careful to generate unique IDs so your sessions do not conflict.\n\nThe name of the session ID cookie to set in the response (and read from in the request).\n\nThe default value is .\n\nNote if you have multiple apps running on the same hostname (this is just the name, i.e. or ; different schemes and ports do not name a different hostname), then you need to separate the session cookies from each other. The simplest method is to simply set different s per app.\n\nTrust the reverse proxy when setting secure cookies (via the “X-Forwarded-Proto” header).\n\nThe default value is .\n• The “X-Forwarded-Proto” header will be used.\n• All headers are ignored and the connection is considered secure only if there is a direct TLS/SSL connection.\n• Uses the “trust proxy” setting from express\n\nForces the session to be saved back to the session store, even if the session was never modified during the request. Depending on your store this may be necessary, but it can also create race conditions where a client makes two parallel requests to your server and changes made to the session in one request may get overwritten when the other request ends, even if it made no changes (this behavior also depends on what store you’re using).\n\nThe default value is , but using the default has been deprecated, as the default will change in the future. Please research into this setting and choose what is appropriate to your use-case. Typically, you’ll want .\n\nHow do I know if this is necessary for my store? The best way to know is to check with your store if it implements the method. If it does, then you can safely set . If it does not implement the method and your store sets an expiration date on stored sessions, then you likely need .\n\nForce the session identifier cookie to be set on every response. The expiration is reset to the original , resetting the expiration countdown.\n\nThe default value is .\n\nWith this enabled, the session identifier cookie will expire in since the last response was sent instead of in since the session was last modified by the server.\n\nThis is typically used in conjuction with short, non-session-length values to provide a quick timeout of the session data with reduced potential of it occurring during on going server interactions.\n\nNote When this option is set to but the option is set to , the cookie will not be set on a response with an uninitialized session. This option only modifies the behavior when an existing session was loaded for the request.\n\nForces a session that is “uninitialized” to be saved to the store. A session is uninitialized when it is new but not modified. Choosing is useful for implementing login sessions, reducing server storage usage, or complying with laws that require permission before setting a cookie. Choosing will also help with race conditions where a client makes multiple parallel requests without a session.\n\nThe default value is , but using the default has been deprecated, as the default will change in the future. Please research into this setting and choose what is appropriate to your use-case.\n\nNote if you are using Session in conjunction with PassportJS, Passport will add an empty Passport object to the session for use after a user is authenticated, which will be treated as a modification to the session, causing it to be saved. This has been fixed in PassportJS 0.3.0\n\nThis is the secret used to sign the session ID cookie. The secret can be any type of value that is supported by Node.js (like a string or a ). This can be either a single secret, or an array of multiple secrets. If an array of secrets is provided, only the first element will be used to sign the session ID cookie, while all the elements will be considered when verifying the signature in requests. The secret itself should be not easily parsed by a human and would best be a random set of characters. A best practice may include:\n• The use of environment variables to store the secret, ensuring the secret itself does not exist in your repository.\n• Periodic updates of the secret, while ensuring the previous secret is in the array.\n\nUsing a secret that cannot be guessed will reduce the ability to hijack a session to only guessing the session ID (as determined by the option).\n\nChanging the secret value will invalidate all existing sessions. In order to rotate the secret without invalidating sessions, provide an array of secrets, with the new secret as first element of the array, and including previous secrets as the later elements.\n\nNote HMAC-256 is used to sign the session ID. For this reason, the secret should contain at least 32 bytes of entropy.\n\nThe session store instance, defaults to a new instance.\n\nControl the result of unsetting (through , setting to , etc.).\n\nThe default value is .\n• The session will be destroyed (deleted) when the response ends.\n• The session in the store will be kept, but modifications made during the request are ignored and not saved.\n\nTo store or access session data, simply use the request property , which is (generally) serialized as JSON by the store, so nested objects are typically fine. For example below is a user-specific view counter:\n\nTo regenerate the session simply invoke the method. Once complete, a new SID and instance will be initialized at and the will be invoked.\n\nDestroys the session and will unset the property. Once complete, the will be invoked.\n\nReloads the session data from the store and re-populates the object. Once complete, the will be invoked.\n\nSave the session back to the store, replacing the contents on the store with the contents in memory (though a store may do something else–consult the store’s documentation for exact behavior).\n\nThis method is automatically called at the end of the HTTP response if the session data has been altered (though this behavior can be altered with various options in the middleware constructor). Because of this, typically this method does not need to be called.\n\nThere are some cases where it is useful to call this method, for example, redirects, long-lived requests or in WebSockets.\n\nUpdates the property. Typically this is not necessary to call, as the session middleware does this for you.\n\nEach session has a unique ID associated with it. This property is an alias of and cannot be modified. It has been added to make the session ID accessible from the object.\n\nEach session has a unique cookie object accompany it. This allows you to alter the session cookie per visitor. For example we can set to to enable the cookie to remain for only the duration of the user-agent.\n\nAlternatively will return the time remaining in milliseconds, which we may also re-assign a new value to adjust the property appropriately. The following are essentially equivalent\n\nFor example when is set to (one minute), and 30 seconds has elapsed it will return until the current request has completed, at which time is called to reset to its original value.\n\nThe property returns the original (time-to-live), in milliseconds, of the session cookie.\n\nTo get the ID of the loaded session, access the request property . This is simply a read-only value set when a session is loaded/created.\n\nEvery session store must be an and implement specific methods. The following methods are the list of required, recommended, and optional.\n• Required methods are ones that this module will always call on the store.\n• Recommended methods are ones that this module will call on the store if available.\n• Optional methods are ones this module does not call at all, but helps present uniform stores to users.\n\nFor an example implementation view the connect-redis repo.\n\nThis optional method is used to get all sessions in the store as an array. The should be called as .\n\nThis required method is used to destroy/delete a session from the store given a session ID ( ). The should be called as once the session is destroyed.\n\nThis optional method is used to delete all sessions from the store. The should be called as once the store is cleared.\n\nThis optional method is used to get the count of all sessions in the store. The should be called as .\n\nThis required method is used to get a session from the store given a session ID ( ). The should be called as .\n\nThe argument should be a session if found, otherwise or if the session was not found (and there was no error). A special case is made when to act like .\n\nThis required method is used to upsert a session into the store given a session ID ( ) and session ( ) object. The callback should be called as once the session has been set in the store.\n\nThis recommended method is used to “touch” a given session given a session ID ( ) and session ( ) object. The should be called as once the session has been touched.\n\nThis is primarily used when the store will automatically delete idle sessions and this method is used to signal to the store the given session is active, potentially resetting the idle timer.\n\nThe following modules implement a session store that is compatible with this module. Please make a PR to add additional modules :)\n\ncluster-store A wrapper for using in-process / embedded stores - such as SQLite (via knex), leveldb, files, or memory - with node cluster (desirable for Raspberry Pi 2 and other multi-core embedded devices).\n\nconnect-memjs A memcached-based session store using memjs as the memcached client.\n\nconnect-session-knex A session store using Knex.js, which is a SQL query builder for PostgreSQL, MySQL, MariaDB, SQLite3, and Oracle.\n\nconnect-session-sequelize A session store using Sequelize.js, which is a Node.js / io.js ORM for PostgreSQL, MySQL, SQLite and MSSQL.\n\ndynamodb-store-v3 Implementation of a session store using DynamoDB backed by the AWS SDK for JavaScript v3.\n\nexpress-mysql-session A session store using native MySQL via the node-mysql module.\n\nexpress-oracle-session A session store using native oracle via the node-oracledb module.\n\nexpress-session-cache-manager A store that implements cache-manager, which supports a variety of storage types.\n\nexpress-session-rsdb Session store based on Rocket-Store: A very simple, super fast and yet powerfull, flat file database.\n\nnedb-session-store An alternate NeDB-based (either in-memory or file-persisted) session store.\n\nsession-pouchdb-store Session store for PouchDB / CouchDB. Accepts embedded, custom, or remote PouchDB instance and realtime synchronization.\n\nsessionstore A session store that works with various databases.\n\nA simple example using to store page views for a user.\n\nA simple example using to keep a user log in session.\n\nThis module uses the debug module internally to log information about session operations.\n\nTo see all the internal logs, set the environment variable to when launching your app ( , in this example):\n\nOn Windows, use the corresponding command;"
    },
    {
        "link": "https://dev.to/saint_vandora/how-to-implement-session-management-in-nodejs-applications-5emm",
        "document": "Session management is a crucial aspect of web application development, as it ensures that user data and preferences are stored securely and accurately. In this article, we will explore how to implement session management in Node.js applications.\n\nSession management is the process of managing user sessions within a web application. A session is a period of time in which a user interacts with an application, typically starting when the user logs in and ending when they log out. Session management ensures that user data, preferences, and session-related information are securely stored and managed.\n\nTo implement session management in Node.js applications, you need to use a session management middleware. A middleware is a function that sits between the client and the server, processing requests and responses.\n\nThe first step in implementing session management in Node.js applications is to install and configure the session middleware. There are several session middleware options available for Node.js, including , , and . You can install and configure these middleware options using .\n\nTo install express-session, we can run the following command:\n\n\n\nOnce installed, we can require it in our Node.js application and configure it as follows:\n\n\n\nIn the above code sample, we have initialized the express-session middleware with the following configuration options:\n• None secret: This option is used to set a secret key for the session. The secret key is used to sign the session ID cookie to prevent tampering.\n• None resave: This option determines whether the session should be saved to the store on every request. Setting this option to false can improve performance.\n• None saveUninitialized: This option determines whether to save uninitialized sessions. Setting this option to false can improve performance.\n\nOnce you have installed and configured the session middleware, the next step is to initialize it. Initialization involves creating a session object that stores user data and preferences. You can initialize the session middleware in your application's entry point, such as or .\n\n\n\nIn the above code sample, we have initialized the session middleware and accessed the session data using the object.\n\nThe session middleware stores session data in the server's memory or a separate session store, such as a Redis database. When a user logs in, the session middleware creates a session object and assigns it a unique ID. The session ID is then stored in a cookie on the user's browser. The session middleware uses the session ID to retrieve the session data from the server or session store.\n\n\n\nIn the above code sample, we have stored session data for an authenticated user using the object.\n\nTo ensure that session data is not stored indefinitely, it is essential to manage session timeouts. Session timeouts determine how long a session can remain idle before it is invalidated. You can set a timeout for a session by configuring the session middleware. When a session timeout occurs, the session middleware deletes the session data from the server or session store.\n\nWe can set the session timeout using the option when initializing the session middleware. The option is expressed in milliseconds and determines the maximum age of a session.\n\n\n\nIn the above code sample, we have set the session timeout to 60 seconds using the option.\n\nWhen a user logs out or the session expires, we need to destroy the session to ensure that session data is not stored indefinitely. We can destroy a session using the method.\n\n\n\nIn the above code sample, we have destroyed the session using the method.\n\nTo retrieve session data, we can access the object. The object is an object that contains session data.\n\n\n\nIn the above code sample, we have retrieved session data using the object.\n\nFinally, it is crucial to secure session data to prevent unauthorized access or tampering. You can secure session data by using secure cookies, encrypting session data, and implementing HTTPS encryption.\n\nSession management is a critical part of web application development. In this article, we have explored how to implement session management in Node.js applications using the express-session middleware. We have covered installing and configuring the session middleware, initializing the session middleware, storing session data, managing session timeouts, destroying sessions, and retrieving session data. By following the best practices outlined in this article, you can ensure that your Node.js applications are secure and reliable."
    },
    {
        "link": "https://geeksforgeeks.org/what-is-express-session-middleware-in-express",
        "document": "In the Express web application, the express-session middleware is mainly used for managing the sessions for the user-specific data. In this article, we will see the use of express-session middleware for session management in Express with practical implementation.\n\nThe express-session middleware allows the creation and storage of the session data used for authentication or user preferences. Using this middleware, we can properly maintain the stateful interaction between the Express.js server and the client. Using the sessions the security of the application is maintained and interaction with the user is increased.\n\nSteps to use express-session middleware in Express.js\n\nStep 1: In the first step, we will create the new folder by using the below command in the VS Code terminal.\n\nStep 2: After creating the folder, initialize the NPM using the below command. Using this the package.json file will be created.\n\nStep 3: Now, we will install the express dependency for our project using the below command.\n\nStep 4: As we need to use the express-session middleware, we need to install it using npm. So for this article, we will be using third-party middleware as a express-session. So install it using the below command.\n\nThe updated dependencies in package.json file will look like.\n\nExample: Write the following code in App.js file\n\nTo run the application, we need to start the server by using the below command."
    },
    {
        "link": "https://vijinvinod.medium.com/session-management-using-express-session-node-js-f658fa7762bb",
        "document": "Express Session is a middleware for Node.js that provides a simple way to manage sessions in an Express web application. It allows you to store information about a user’s session on the server-side, making it accessible across multiple requests.\n• This is a Node.js project. It uses NPM to manage its dependencies. You need to create a new project directory and initialize the node app using:\n\n2. Install Express and Express Session: To use Express Session, you first need to have Express installed in your project. You can install Express by running the following command in your terminal:\n\n3. Require Express Session in your Express application: In your server.js file, require the express-session module and use it in your Express application with the “ method. Here's an example of how to use Express Session in your application:\n\nThe “ method in Express is used to mount middleware functions at a specified path. In the case of the Express Session middleware, the method is used to initialize the Express Session module and make it available for use in the application.\n\nThe code “ is mounting the Express Session middleware with the options passed in the object. The options passed in the object include:\n\n: a string used to sign the session ID cookie.\n\n: a boolean value that determines whether the session should be saved even if it hasn't been modified. If set to , the session will only be saved if it has been modified.\n\n: a boolean value that determines whether a new, uninitialized session should be saved even if it has not been modified.\n\n: an object that contains options for the session ID cookie. For example, the property is set to , indicating that the cookie can be sent over an unencrypted connection.\n\nWith the “ method, the Express Session middleware is mounted for use in the application, allowing you to store and access session information in the object.\n\n4. Set values in the object: You can use the object to store information about a user's session. For example, after a user logs in, you can store their user ID in the session:\n\n5. Access values in the object: To access the values stored in the object, simply read the appropriate property. For example, to access the user ID stored in the session, you can use the following code:\n\n6. Destroy sessions: When a user logs out, it’s important to destroy their session to ensure that their information is no longer accessible on the server. To destroy a session, simply set the object to :\n\nSession management is a crucial aspect of web development and Express Session makes it easy to manage sessions in an Express application. By using sessions, you can store information about a user’s session on the server-side and access it across multiple requests. With the steps outlined in this blog, you should be able to implement session management in your own Express applications."
    },
    {
        "link": "https://github.com/expressjs/session",
        "document": "This is a Node.js module available through the npm registry. Installation is done using the command:\n\nCreate a session middleware with the given .\n\nNote Session data is not saved in the cookie itself, just the session ID. Session data is stored server-side.\n\nNote Since version 1.5.0, the middleware no longer needs to be used for this module to work. This module now directly reads and writes cookies on / . Using may result in issues if the is not the same between this module and .\n\nWarning The default server-side session storage, , is purposely not designed for a production environment. It will leak memory under most conditions, does not scale past a single process, and is meant for debugging and developing.\n\nFor a list of stores, see compatible session stores.\n\naccepts these properties in the options object.\n\nSettings object for the session ID cookie. The default value is .\n\nThe following are options that can be set in this object.\n\nSpecifies the value for the attribute. By default, no domain is set, and most clients will consider the cookie to apply to only the current domain.\n\nSpecifies the object to be the value for the attribute. By default, no expiration is set, and most clients will consider this a \"non-persistent cookie\" and will delete it on a condition like exiting a web browser application.\n\nNote If both and are set in the options, then the last one defined in the object is what is used.\n\nNote The option should not be set directly; instead only use the option.\n\nSpecifies the value for the attribute. When truthy, the attribute is set, otherwise it is not. By default, the attribute is set.\n\nNote be careful when setting this to , as compliant clients will not allow client-side JavaScript to see the cookie in .\n\nSpecifies the (in milliseconds) to use when calculating the attribute. This is done by taking the current server time and adding milliseconds to the value to calculate an datetime. By default, no maximum age is set.\n\nNote If both and are set in the options, then the last one defined in the object is what is used.\n\nSpecifies the value for the attribute. When truthy, the attribute is set, otherwise it is not. By default, the attribute is not set.\n\nNote This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it.\n\nMore information about can be found in the proposal.\n\nSpecifies the value for the . By default, this is set to , which is the root path of the domain.\n\nSpecifies the to be the value for the attribute.\n• will set the attribute to .\n• will set the attribute to , the default priority when not set.\n• will set the attribute to .\n\nMore information about the different priority levels can be found in the specification.\n\nNote This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it.\n\nSpecifies the or to be the value for the attribute. By default, this is .\n• will set the attribute to for strict same site enforcement.\n• will not set the attribute.\n• will set the attribute to for lax same site enforcement.\n• will set the attribute to for an explicit cross-site cookie.\n• will set the attribute to for strict same site enforcement.\n\nMore information about the different enforcement levels can be found in the specification.\n\nNote This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it.\n\nNote There is a draft spec that requires that the attribute be set to when the attribute has been set to . Some web browsers or other clients may be adopting this specification.\n\nSpecifies the value for the attribute. When truthy, the attribute is set, otherwise it is not. By default, the attribute is not set.\n\nNote be careful when setting this to , as compliant clients will not send the cookie back to the server in the future if the browser does not have an HTTPS connection.\n\nPlease note that is a recommended option. However, it requires an https-enabled website, i.e., HTTPS is necessary for secure cookies. If is set, and you access your site over HTTP, the cookie will not be set. If you have your node.js behind a proxy and are using , you need to set \"trust proxy\" in express:\n\nFor using secure cookies in production, but allowing for testing in development, the following is an example of enabling this setup based on in express:\n\nThe option can also be set to the special value to have this setting automatically match the determined security of the connection. Be careful when using this setting if the site is available both as HTTP and HTTPS, as once the cookie is set on HTTPS, it will no longer be visible over HTTP. This is useful when the Express setting is properly setup to simplify development vs production configuration.\n\nFunction to call to generate a new session ID. Provide a function that returns a string that will be used as a session ID. The function is given as the first argument if you want to use some value attached to when generating the ID.\n\nThe default value is a function which uses the library to generate IDs.\n\nNOTE be careful to generate unique IDs so your sessions do not conflict.\n\nThe name of the session ID cookie to set in the response (and read from in the request).\n\nThe default value is .\n\nNote if you have multiple apps running on the same hostname (this is just the name, i.e. or ; different schemes and ports do not name a different hostname), then you need to separate the session cookies from each other. The simplest method is to simply set different s per app.\n\nTrust the reverse proxy when setting secure cookies (via the \"X-Forwarded-Proto\" header).\n\nThe default value is .\n• The \"X-Forwarded-Proto\" header will be used.\n• All headers are ignored and the connection is considered secure only if there is a direct TLS/SSL connection.\n• Uses the \"trust proxy\" setting from express\n\nForces the session to be saved back to the session store, even if the session was never modified during the request. Depending on your store this may be necessary, but it can also create race conditions where a client makes two parallel requests to your server and changes made to the session in one request may get overwritten when the other request ends, even if it made no changes (this behavior also depends on what store you're using).\n\nThe default value is , but using the default has been deprecated, as the default will change in the future. Please research into this setting and choose what is appropriate to your use-case. Typically, you'll want .\n\nHow do I know if this is necessary for my store? The best way to know is to check with your store if it implements the method. If it does, then you can safely set . If it does not implement the method and your store sets an expiration date on stored sessions, then you likely need .\n\nForce the session identifier cookie to be set on every response. The expiration is reset to the original , resetting the expiration countdown.\n\nThe default value is .\n\nWith this enabled, the session identifier cookie will expire in since the last response was sent instead of in since the session was last modified by the server.\n\nThis is typically used in conjuction with short, non-session-length values to provide a quick timeout of the session data with reduced potential of it occurring during on going server interactions.\n\nNote When this option is set to but the option is set to , the cookie will not be set on a response with an uninitialized session. This option only modifies the behavior when an existing session was loaded for the request.\n\nForces a session that is \"uninitialized\" to be saved to the store. A session is uninitialized when it is new but not modified. Choosing is useful for implementing login sessions, reducing server storage usage, or complying with laws that require permission before setting a cookie. Choosing will also help with race conditions where a client makes multiple parallel requests without a session.\n\nThe default value is , but using the default has been deprecated, as the default will change in the future. Please research into this setting and choose what is appropriate to your use-case.\n\nNote if you are using Session in conjunction with PassportJS, Passport will add an empty Passport object to the session for use after a user is authenticated, which will be treated as a modification to the session, causing it to be saved. This has been fixed in PassportJS 0.3.0\n\nThis is the secret used to sign the session ID cookie. The secret can be any type of value that is supported by Node.js (like a string or a ). This can be either a single secret, or an array of multiple secrets. If an array of secrets is provided, only the first element will be used to sign the session ID cookie, while all the elements will be considered when verifying the signature in requests. The secret itself should be not easily parsed by a human and would best be a random set of characters. A best practice may include:\n• The use of environment variables to store the secret, ensuring the secret itself does not exist in your repository.\n• Periodic updates of the secret, while ensuring the previous secret is in the array.\n\nUsing a secret that cannot be guessed will reduce the ability to hijack a session to only guessing the session ID (as determined by the option).\n\nChanging the secret value will invalidate all existing sessions. In order to rotate the secret without invalidating sessions, provide an array of secrets, with the new secret as first element of the array, and including previous secrets as the later elements.\n\nNote HMAC-256 is used to sign the session ID. For this reason, the secret should contain at least 32 bytes of entropy.\n\nThe session store instance, defaults to a new instance.\n\nControl the result of unsetting (through , setting to , etc.).\n\nThe default value is .\n• The session will be destroyed (deleted) when the response ends.\n• The session in the store will be kept, but modifications made during the request are ignored and not saved.\n\nTo store or access session data, simply use the request property , which is (generally) serialized as JSON by the store, so nested objects are typically fine. For example below is a user-specific view counter:\n\nTo regenerate the session simply invoke the method. Once complete, a new SID and instance will be initialized at and the will be invoked.\n\nDestroys the session and will unset the property. Once complete, the will be invoked.\n\nReloads the session data from the store and re-populates the object. Once complete, the will be invoked.\n\nSave the session back to the store, replacing the contents on the store with the contents in memory (though a store may do something else--consult the store's documentation for exact behavior).\n\nThis method is automatically called at the end of the HTTP response if the session data has been altered (though this behavior can be altered with various options in the middleware constructor). Because of this, typically this method does not need to be called.\n\nThere are some cases where it is useful to call this method, for example, redirects, long-lived requests or in WebSockets.\n\nUpdates the property. Typically this is not necessary to call, as the session middleware does this for you.\n\nEach session has a unique ID associated with it. This property is an alias of and cannot be modified. It has been added to make the session ID accessible from the object.\n\nEach session has a unique cookie object accompany it. This allows you to alter the session cookie per visitor. For example we can set to to enable the cookie to remain for only the duration of the user-agent.\n\nAlternatively will return the time remaining in milliseconds, which we may also re-assign a new value to adjust the property appropriately. The following are essentially equivalent\n\nFor example when is set to (one minute), and 30 seconds has elapsed it will return until the current request has completed, at which time is called to reset to its original value.\n\nThe property returns the original (time-to-live), in milliseconds, of the session cookie.\n\nTo get the ID of the loaded session, access the request property . This is simply a read-only value set when a session is loaded/created.\n\nEvery session store must be an and implement specific methods. The following methods are the list of required, recommended, and optional.\n• Required methods are ones that this module will always call on the store.\n• Recommended methods are ones that this module will call on the store if available.\n• Optional methods are ones this module does not call at all, but helps present uniform stores to users.\n\nFor an example implementation view the connect-redis repo.\n\nThis optional method is used to get all sessions in the store as an array. The should be called as .\n\nThis required method is used to destroy/delete a session from the store given a session ID ( ). The should be called as once the session is destroyed.\n\nThis optional method is used to delete all sessions from the store. The should be called as once the store is cleared.\n\nThis optional method is used to get the count of all sessions in the store. The should be called as .\n\nThis required method is used to get a session from the store given a session ID ( ). The should be called as .\n\nThe argument should be a session if found, otherwise or if the session was not found (and there was no error). A special case is made when to act like .\n\nThis required method is used to upsert a session into the store given a session ID ( ) and session ( ) object. The callback should be called as once the session has been set in the store.\n\nThis recommended method is used to \"touch\" a given session given a session ID ( ) and session ( ) object. The should be called as once the session has been touched.\n\nThis is primarily used when the store will automatically delete idle sessions and this method is used to signal to the store the given session is active, potentially resetting the idle timer.\n\nThe following modules implement a session store that is compatible with this module. Please make a PR to add additional modules :)\n\ncluster-store A wrapper for using in-process / embedded stores - such as SQLite (via knex), leveldb, files, or memory - with node cluster (desirable for Raspberry Pi 2 and other multi-core embedded devices).\n\nconnect-memjs A memcached-based session store using memjs as the memcached client.\n\nconnect-session-knex A session store using Knex.js, which is a SQL query builder for PostgreSQL, MySQL, MariaDB, SQLite3, and Oracle.\n\nconnect-session-sequelize A session store using Sequelize.js, which is a Node.js / io.js ORM for PostgreSQL, MySQL, SQLite and MSSQL.\n\ndynamodb-store-v3 Implementation of a session store using DynamoDB backed by the AWS SDK for JavaScript v3.\n\nexpress-mysql-session A session store using native MySQL via the node-mysql module.\n\nexpress-oracle-session A session store using native oracle via the node-oracledb module.\n\nexpress-session-cache-manager A store that implements cache-manager, which supports a variety of storage types.\n\nexpress-session-rsdb Session store based on Rocket-Store: A very simple, super fast and yet powerfull, flat file database.\n\nnedb-session-store An alternate NeDB-based (either in-memory or file-persisted) session store.\n\nsession-pouchdb-store Session store for PouchDB / CouchDB. Accepts embedded, custom, or remote PouchDB instance and realtime synchronization.\n\nsessionstore A session store that works with various databases.\n\nA simple example using to store page views for a user.\n\nA simple example using to keep a user log in session.\n\nThis module uses the debug module internally to log information about session operations.\n\nTo see all the internal logs, set the environment variable to when launching your app ( , in this example):\n\nOn Windows, use the corresponding command;"
    },
    {
        "link": "https://npmjs.com/package/express-fileupload",
        "document": "This package is still very much supported and maintained. But the more help the better. If you're interested any of the following:\n\nWhen you upload a file, the file will be accessible from .\n• Your input's name field is foo:\n• In your express server request, you can access your uploaded file from :\n\nThe req.files.foo object will contain the following:\n• : A function to move the file elsewhere on your server. Can take a callback or return a promise.\n• : The mimetype of your file\n• : A buffer representation of your file, returns empty buffer in case useTempFiles option was set to true.\n• : A path to the temporary file in case useTempFiles option was set to true.\n• : A boolean that represents if the file is over the size limit\n\nNotes about breaking changes with MD5 handling:\n• Before 1.0.0, is an MD5 checksum of the uploaded file.\n• From 1.0.0 until 1.1.1, is a function to compute an MD5 hash (Read about it here.).\n• From 1.1.1 until 1.5.1, is reverted back to MD5 checksum value and also added full MD5 support in case you are using temporary files.\n• From 1.5.1 onward, still holds the checksum value, but the checksum is generated with the provided option. The property name remains for backwards compatibility.\n\nPass in Busboy options directly to the express-fileupload middleware. Check out the Busboy documentation here.\n\nUse temp files instead of memory for managing the upload process.\n\nYou can set option to to see some logging about upload process. In this case middleware uses and adds prefix for outputs. You can set a custom logger having method to the option.\n\nIt will show you whether the request is invalid and also common events triggered during upload. That can be really useful for troubleshooting and we recommend attaching debug output to each issue on Github.\n• says that was set to true and also shows you temp file name and path.\n• says that new upload started with field and file name .\n• shows current progress for each new data chunk.\n• means that no data came during .\n• Here finaly we see cleaning up of the temporary file because of upload timeout reached.\n\nPass in non-Busboy options directly to the middleware. These are express-fileupload specific options.\n\nLooking for additional maintainers. Please contact if you're interested. Pull Requests are welcome!\n\nBrian White for his stellar work on the Busboy Package and the connect-busboy Package"
    },
    {
        "link": "https://medium.com/@ionx/how-to-handle-file-uploads-with-node-js-and-express-a20c48d0b55d",
        "document": "To allow files to be uploaded, you will:\n• Create a web page with a form that allows the user to select a file to upload\n\nOf course, you will also want to do something with each uploaded file! In this tutorial, we’re going to write JavaScript code to display some information about the file, and also to scan it for malware using Verisys Antivirus API.\n\nVerisys Antivirus API is a language-agnostic REST API that allows you to easily add malware scanning to mobile apps, web apps and backend processing. By scanning user-generated content and file uploads, Verisys Antivirus API can stop dangerous malware at the edge, before it reaches your servers, applications — or end users.\n\nThe first step is to create and initialize a new Express project.\n• Open a terminal or command prompt, navigate to the directory where you want to store the project, and run the following commands:\n• The generated app should have the following directory structure:\n• Before we move on, make sure you are able to run the app and view it in a browser\n\nOn MacOS, Linux or Git Bash on Windows, run the app with this command:\n\nOr use this command for Windows:\n\nOr this command for Windows Powershell:\n\nThen navigate to http://localhost:3000 in your browser to access the app — you should see a page that looks like this:\n• Go ahead and stop the server by hitting at the command prompt\n• Next we’re going to add a few NPM packages:\n• We’ll add a package to deal with file uploads easier. There are several popular choices here, including Multer, Formidable and express-fileupload — they are all fairly similar, and for this tutorial, we’ll use\n• For this tutorial, we’re going to scan the file for malware using Verisys Antivirus API, and so we’ll add a package to make it easier to make external HTTP requests. Popular choices include Axios and node-fetch — for this article, we’ll use\n• We’ll also add the form-data package to allow working with multipart form data, which is used to perform file uploads\n\nBefore we write JavaScript code to handle the file upload, let’s create a simple web page that lets the end user select a file to upload.\n• Update the content of to contain the following:\n\nWe’ve added two forms to the page. When the File Upload form is submitted, the file will be sent to a route at - the next step is to create the route and route handler. We’ll get back to the Malware Scan form later.\n\nNow we’re going to add a route handler to process uploaded files, and then we’ll wire up the handler to the route.\n• Create file with the following content:\n\nThis simple handler will both print information about the file to the console and return it in as a web page, so you can see what has been received by your router.\n\nNext, we need to wire up this code to the route.\n• Update the content of to contain the following:\n\nWe’ve only added 2 lines to the default code provided by the Express generator (lines and above), telling Express to use our router for the route.\n\nNow we’re ready to test it! 🎉\n• Begin by starting your Node.js server using the same command as before\n• Open your browser and navigate to http://localhost:3000 — you should see a page that looks like this:\n• Use the File Upload form, Browse to select a file and press the Upload File button\n\nIf everything was set up correctly, you should see information about the file being printed to the console, and also shown in a web page."
    },
    {
        "link": "https://github.com/BaseMax/FileUploadExpressTS",
        "document": "This is a simple File Upload API built with Express.js and TypeScript. It allows users to upload and serve files, such as images or documents. You can customize this API for your specific needs and use it as a foundation for building file handling features in your applications.\n• Upload files (images, documents, etc.) to the server.\n\nBefore you begin, ensure you have met the following requirements:\n• Node.js and npm installed on your development machine.\n\nThe server will run on by default. You can customize the port and other settings in the configuration files.\n\nTo upload a file, make a POST request to /upload with a multipart/form-data body containing the file to be uploaded. You can use tools like curl, Postman, or any HTTP client library to interact with the API.\n\nReplace with the path to the file you want to upload.\n\nThe uploaded file will be stored on the server (the default storage location is uploads/), and you will receive a response with information about the uploaded file, including its URL.\n\nTo access the uploaded file, make a GET request to the provided URL.\n\nYou can customize the API's configuration by modifying the config.ts file. Here are some configuration options you can adjust:\n• : The directory where uploaded files are stored.\n• : The port on which the server listens.\n\nContributions are welcome! If you find a bug or have a suggestion for improvement, please open an issue or create a pull request.\n\nThis project is licensed under the MIT License. See the LICENSE file for details.\n\nRemember to replace placeholders like with your actual server URL and provide more specific usage instructions if needed. Additionally, update the file with the appropriate license for your project."
    },
    {
        "link": "https://stackoverflow.com/questions/23691194/node-express-file-upload",
        "document": "I'm using node v0.10.26 and express v4.2.0 and I'm pretty new to node. I've been beating my head against my desk for the past three or so hours trying to get a file upload form working with node. At this point I'm just trying to get req.files to not return undefined. My view looks like this var express = require('express'); var path = require('path'); var favicon = require('static-favicon'); var logger = require('morgan'); var cookieParser = require('cookie-parser'); var bodyParser = require('body-parser'); var routes = require('./routes/index'); var users = require('./routes/users'); var app = express(); // view engine setup app.set('views', path.join(__dirname, 'views')); app.set('view engine', 'hjs'); app.use(favicon()); app.use(logger('dev')); app.use(bodyParser.json()); app.use(bodyParser.urlencoded()); app.use(cookieParser()); app.use(express.static(path.join(__dirname, 'public'))); app.use('/', routes); app.use('/users', users); /// catch 404 and forward to error handler app.use(function(req, res, next) { var err = new Error('Not Found'); err.status = 404; next(err); }); /// error handlers // development error handler // will print stacktrace if (app.get('env') === 'development') { app.use(function(err, req, res, next) { res.status(err.status || 500); res.render('error', { message: err.message, error: err }); }); } // production error handler // no stacktraces leaked to user app.use(function(err, req, res, next) { res.status(err.status || 500); res.render('error', { message: err.message, error: {} }); }); module.exports = app; I saw somewhere that including and was supposed to help but I can't even launch my server if I add those lines."
    },
    {
        "link": "https://stackoverflow.com/questions/59345253/upload-error-using-express-fileupload-in-my-node-js-project",
        "document": "I am having error uploading my file. I get response that i have a file in my request body but it doesn't get uploaded"
    }
]