[
    {
        "link": "https://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpSession.html",
        "document": "Provides a way to identify a user across more than one page request or visit to a Web site and to store information about that user.\n\nThe servlet container uses this interface to create a session between an HTTP client and an HTTP server. The session persists for a specified time period, across more than one connection or page request from the user. A session usually corresponds to one user, who may visit a site many times. The server can maintain a session in many ways such as using cookies or rewriting URLs.\n\nThis interface allows servlets to\n• View and manipulate information about a session, such as the session identifier, creation time, and last accessed time\n• Bind objects to sessions, allowing user information to persist across multiple user connections\n\nWhen an application stores an object in or removes an object from a session, the session checks whether the object implements . If it does, the servlet notifies the object that it has been bound to or unbound from the session. Notifications are sent after the binding methods complete. For session that are invalidated or expire, notifications are sent after the session has been invalidated or expired.\n\nWhen container migrates a session between VMs in a distributed container setting, all session attributes implementing the interface are notified.\n\nA servlet should be able to handle cases in which the client does not choose to join a session, such as when cookies are intentionally turned off. Until the client joins the session, returns . If the client chooses not to join the session, will return a different session on each request, and will always return .\n\nSession information is scoped only to the current web application ( ), so information stored in one context will not be directly visible in another."
    },
    {
        "link": "https://digitalocean.com/community/tutorials/java-session-management-servlet-httpsession-url-rewriting",
        "document": "Session Management in Java Servlet Web Applications is a very interesting topic. Session in Java Servlet are managed through different ways, such as Cookies, HttpSession API, URL rewriting etc. This is the third article in the series of Web Applications tutorial in Java, you might want to check out earlier two articles too.\n\nThis article is aimed to explain about session management in servlets using different techniques and with example programs.\n• HTTP protocol and Web Servers are stateless, what it means is that for web server every request is a new request to process and they can’t identify if it’s coming from client that has been sending request previously. But sometimes in web applications, we should know who the client is and process the request accordingly. For example, a shopping cart application should know who is sending the request to add an item and in which cart the item has to be added or who is sending checkout request so that it can charge the amount to correct client. Session is a conversional state between client and server and it can consists of multiple request and response between client and server. Since HTTP and Web Server both are stateless, the only way to maintain a session is when some unique information about the session (session id) is passed between server and client in every request and response. There are several ways through which we can provide unique identifier in request and response.\n• User Authentication - This is the very common way where we user can provide authentication credentials from the login page and then we can pass the authentication information between server and client to maintain the session. This is not very effective method because it wont work if the same user is logged in from different browsers.\n• HTML Hidden Field - We can create a unique hidden field in the HTML and when user starts navigating, we can set its value unique to the user and keep track of the session. This method can’t be used with links because it needs the form to be submitted every time request is made from client to server with the hidden field. Also it’s not secure because we can get the hidden field value from the HTML source and use it to hack the session.\n• URL Rewriting - We can append a session identifier parameter with every request and response to keep track of the session. This is very tedious because we need to keep track of this parameter in every response and make sure it’s not clashing with other parameters.\n• Cookies - Cookies are small piece of information that is sent by web server in response header and gets stored in the browser cookies. When client make further request, it adds the cookie to the request header and we can utilize it to keep track of the session. We can maintain a session with cookies but if the client disables the cookies, then it won’t work.\n• Session Management API - Session Management API is built on top of above methods for session tracking. Some of the major disadvantages of all the above methods are:\n• Most of the time we don’t want to only track the session, we have to store some data into the session that we can use in future requests. This will require a lot of effort if we try to implement this.\n• All the above methods are not complete in themselves, all of them won’t work in a particular scenario. So we need a solution that can utilize these methods of session tracking to provide session management in all cases. That’s why we need Session Management API and J2EE Servlet technology comes with session management API that we can use.\n• Cookies are used a lot in web applications to personalize response based on your choice or to keep track of session. Before moving forward to the Servlet Session Management API, I would like to show how can we keep track of session with cookies through a small web application. We will create a dynamic web application ServletCookieExample with project structure like below image. Deployment descriptor web.xml of the web application is: Welcome page of our application is login.html where we will get authentication details from user. Here is the LoginServlet that takes care of the login request. package com.journaldev.servlet.session; import java.io.IOException; import java.io.PrintWriter; import javax.servlet.RequestDispatcher; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.Cookie; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; /** * Servlet implementation class LoginServlet */ @WebServlet(\"/LoginServlet\") public class LoginServlet extends HttpServlet { private static final long serialVersionUID = 1L; private final String userID = \"Pankaj\"; private final String password = \"journaldev\"; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { // get request parameters for userID and password String user = request.getParameter(\"user\"); String pwd = request.getParameter(\"pwd\"); if(userID.equals(user) && password.equals(pwd)){ Cookie loginCookie = new Cookie(\"user\",user); //setting cookie to expiry in 30 mins loginCookie.setMaxAge(30*60); response.addCookie(loginCookie); response.sendRedirect(\"LoginSuccess.jsp\"); }else{ RequestDispatcher rd = getServletContext().getRequestDispatcher(\"/login.html\"); PrintWriter out= response.getWriter(); out.println(\"<font color=red>Either user name or password is wrong.</font>\"); rd.include(request, response); } } } Notice the cookie that we are setting to the response and then forwarding it to LoginSuccess.jsp, this cookie will be used there to track the session. Also notice that cookie timeout is set to 30 minutes. Ideally there should be a complex logic to set the cookie value for session tracking so that it won’t collide with any other request. Notice that if we try to access the JSP directly, it will forward us to the login page. When we will click on Logout button, we should make sure that cookie is removed from client browser. There is no method to remove the cookie but we can set the maximum age to 0 so that it will be deleted from client browser immediately. When we run above application, we get response like below images.\n• Servlet API provides Session management through interface. We can get session from HttpServletRequest object using following methods. HttpSession allows us to set objects as attributes that can be retrieved in future requests.\n• HttpSession getSession() - This method always returns a HttpSession object. It returns the session object attached with the request, if the request has no session attached, then it creates a new session and return it.\n• HttpSession getSession(boolean flag) - This method returns HttpSession object if request has session else it returns null. Some of the important methods of HttpSession are:\n• String getId() - Returns a string containing the unique identifier assigned to this session.\n• Object getAttribute(String name) - Returns the object bound with the specified name in this session, or null if no object is bound under the name. Some other methods to work with Session attributes are , and .\n• long getCreationTime() - Returns the time when this session was created, measured in milliseconds since midnight January 1, 1970 GMT. We can get last accessed time with method.\n• setMaxInactiveInterval(int interval) - Specifies the time, in seconds, between client requests before the servlet container will invalidate this session. We can get session timeout value from method.\n• boolean isNew() - Returns true if the client does not yet know about the session or if the client chooses not to join the session.\n• void invalidate() - Invalidates this session then unbinds any objects bound to it. When we use HttpServletRequest getSession() method and it creates a new request, it creates the new HttpSession object and also add a Cookie to the response object with name JSESSIONID and value as session id. This cookie is used to identify the HttpSession object in further requests from client. If the cookies are disabled at client side and we are using URL rewriting then this method uses the jsessionid value from the request URL to find the corresponding session. JSESSIONID cookie is used for session tracking, so we should not use it for our application purposes to avoid any session related issues. Let’s see example of session management using HttpSession object. We will create a dynamic web project in Eclipse with servlet context as ServletHttpSessionExample. The project structure will look like below image. login.html is same like earlier example and defined as welcome page for the application in web.xml LoginServlet servlet will create the session and set attributes that we can use in other resources or in future requests. package com.journaldev.servlet.session; import java.io.IOException; import java.io.PrintWriter; import javax.servlet.RequestDispatcher; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.Cookie; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; /** * Servlet implementation class LoginServlet */ @WebServlet(\"/LoginServlet\") public class LoginServlet extends HttpServlet { private static final long serialVersionUID = 1L; private final String userID = \"admin\"; private final String password = \"password\"; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { // get request parameters for userID and password String user = request.getParameter(\"user\"); String pwd = request.getParameter(\"pwd\"); if(userID.equals(user) && password.equals(pwd)){ HttpSession session = request.getSession(); session.setAttribute(\"user\", \"Pankaj\"); //setting session to expiry in 30 mins session.setMaxInactiveInterval(30*60); Cookie userName = new Cookie(\"user\", user); userName.setMaxAge(30*60); response.addCookie(userName); response.sendRedirect(\"LoginSuccess.jsp\"); }else{ RequestDispatcher rd = getServletContext().getRequestDispatcher(\"/login.html\"); PrintWriter out= response.getWriter(); out.println(\"<font color=red>Either user name or password is wrong.</font>\"); rd.include(request, response); } } } Our LoginSuccess.jsp code is given below. <%@ page language=\"java\" contentType=\"text/html; charset=US-ASCII\" pageEncoding=\"US-ASCII\"%> <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"https://www.w3.org/TR/html4/loose.dtd\"> <html> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=US-ASCII\"> <title>Login Success Page</title> </head> <body> <% //allow access only if session exists String user = null; if(session.getAttribute(\"user\") == null){ response.sendRedirect(\"login.html\"); }else user = (String) session.getAttribute(\"user\"); String userName = null; String sessionID = null; Cookie[] cookies = request.getCookies(); if(cookies !=null){ for(Cookie cookie : cookies){ if(cookie.getName().equals(\"user\")) userName = cookie.getValue(); if(cookie.getName().equals(\"JSESSIONID\")) sessionID = cookie.getValue(); } } %> <h3>Hi <%=userName %>, Login successful. Your Session ID=<%=sessionID %></h3> <br> User=<%=user %> <br> <a href=\"CheckoutPage.jsp\">Checkout Page</a> <form action=\"LogoutServlet\" method=\"post\"> <input type=\"submit\" value=\"Logout\" > </form> </body> </html> When a JSP resource is used, container automatically creates a session for it, so we can’t check if session is null to make sure if user has come through login page, so we are using session attribute to validate request. CheckoutPage.jsp is another page and it’s code is given below. <%@ page language=\"java\" contentType=\"text/html; charset=US-ASCII\" pageEncoding=\"US-ASCII\"%> <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"https://www.w3.org/TR/html4/loose.dtd\"> <html> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=US-ASCII\"> <title>Login Success Page</title> </head> <body> <% //allow access only if session exists if(session.getAttribute(\"user\") == null){ response.sendRedirect(\"login.html\"); } String userName = null; String sessionID = null; Cookie[] cookies = request.getCookies(); if(cookies !=null){ for(Cookie cookie : cookies){ if(cookie.getName().equals(\"user\")) userName = cookie.getValue(); } } %> <h3>Hi <%=userName %>, do the checkout.</h3> <br> <form action=\"LogoutServlet\" method=\"post\"> <input type=\"submit\" value=\"Logout\" > </form> </body> </html> Our LogoutServlet code is given below. Notice that I am printing JSESSIONID cookie value in logs, you can check server log where it will be printing the same value as Session Id in LoginSuccess.jsp Below images shows the execution of our web application.\n• As we saw in last section that we can manage a session with HttpSession but if we disable the cookies in browser, it won’t work because server will not receive the JSESSIONID cookie from client. Servlet API provides support for URL rewriting that we can use to manage session in this case. The best part is that from coding point of view, it’s very easy to use and involves one step - encoding the URL. Another good thing with Servlet URL Encoding is that it’s a fallback approach and it kicks in only if browser cookies are disabled. We can encode URL with HttpServletResponse method and if we have to redirect the request to another resource and we want to provide session information, we can use method. We will create a similar project like above except that we will use URL rewriting methods to make sure session management works fine even if cookies are disabled in browser. ServletSessionURLRewriting project structure in eclipse looks like below image. package com.journaldev.servlet.session; import java.io.IOException; import java.io.PrintWriter; import javax.servlet.RequestDispatcher; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.Cookie; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; /** * Servlet implementation class LoginServlet */ @WebServlet(\"/LoginServlet\") public class LoginServlet extends HttpServlet { private static final long serialVersionUID = 1L; private final String userID = \"admin\"; private final String password = \"password\"; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { // get request parameters for userID and password String user = request.getParameter(\"user\"); String pwd = request.getParameter(\"pwd\"); if(userID.equals(user) && password.equals(pwd)){ HttpSession session = request.getSession(); session.setAttribute(\"user\", \"Pankaj\"); //setting session to expiry in 30 mins session.setMaxInactiveInterval(30*60); Cookie userName = new Cookie(\"user\", user); response.addCookie(userName); //Get the encoded URL string String encodedURL = response.encodeRedirectURL(\"LoginSuccess.jsp\"); response.sendRedirect(encodedURL); }else{ RequestDispatcher rd = getServletContext().getRequestDispatcher(\"/login.html\"); PrintWriter out= response.getWriter(); out.println(\"<font color=red>Either user name or password is wrong.</font>\"); rd.include(request, response); } } } <%@ page language=\"java\" contentType=\"text/html; charset=US-ASCII\" pageEncoding=\"US-ASCII\"%> <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"https://www.w3.org/TR/html4/loose.dtd\"> <html> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=US-ASCII\"> <title>Login Success Page</title> </head> <body> <% //allow access only if session exists String user = null; if(session.getAttribute(\"user\") == null){ response.sendRedirect(\"login.html\"); }else user = (String) session.getAttribute(\"user\"); String userName = null; String sessionID = null; Cookie[] cookies = request.getCookies(); if(cookies !=null){ for(Cookie cookie : cookies){ if(cookie.getName().equals(\"user\")) userName = cookie.getValue(); if(cookie.getName().equals(\"JSESSIONID\")) sessionID = cookie.getValue(); } }else{ sessionID = session.getId(); } %> <h3>Hi <%=userName %>, Login successful. Your Session ID=<%=sessionID %></h3> <br> User=<%=user %> <br> <!-- need to encode all the URLs where we want session information to be passed --> <a href=\"<%=response.encodeURL(\"CheckoutPage.jsp\") %>\">Checkout Page</a> <form action=\"<%=response.encodeURL(\"LogoutServlet\") %>\" method=\"post\"> <input type=\"submit\" value=\"Logout\" > </form> </body> </html> <%@ page language=\"java\" contentType=\"text/html; charset=US-ASCII\" pageEncoding=\"US-ASCII\"%> <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"https://www.w3.org/TR/html4/loose.dtd\"> <html> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=US-ASCII\"> <title>Login Success Page</title> </head> <body> <% String userName = null; //allow access only if session exists if(session.getAttribute(\"user\") == null){ response.sendRedirect(\"login.html\"); }else userName = (String) session.getAttribute(\"user\"); String sessionID = null; Cookie[] cookies = request.getCookies(); if(cookies !=null){ for(Cookie cookie : cookies){ if(cookie.getName().equals(\"user\")) userName = cookie.getValue(); } } %> <h3>Hi <%=userName %>, do the checkout.</h3> <br> <form action=\"<%=response.encodeURL(\"LogoutServlet\") %>\" method=\"post\"> <input type=\"submit\" value=\"Logout\" > </form> </body> </html> package com.journaldev.servlet.session; import java.io.IOException; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.Cookie; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; /** * Servlet implementation class LogoutServlet */ @WebServlet(\"/LogoutServlet\") public class LogoutServlet extends HttpServlet { private static final long serialVersionUID = 1L; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { response.setContentType(\"text/html\"); Cookie[] cookies = request.getCookies(); if(cookies != null){ for(Cookie cookie : cookies){ if(cookie.getName().equals(\"JSESSIONID\")){ System.out.println(\"JSESSIONID=\"+cookie.getValue()); } cookie.setMaxAge(0); response.addCookie(cookie); } } //invalidate the session if exists HttpSession session = request.getSession(false); System.out.println(\"User=\"+session.getAttribute(\"user\")); if(session != null){ session.invalidate(); } //no encoding because we have invalidated the session response.sendRedirect(\"login.html\"); } } When we run this project keeping cookies disabled in the browser, below images shows the response pages, notice the jsessionid in URL of browser address bar. Also notice that on LoginSuccess page, user name is null because browser is not sending the cookie send in the last response. If cookies are not disabled, you won’t see jsessionid in the URL because Servlet Session API will use cookies in that case."
    },
    {
        "link": "https://informit.com/articles/article.aspx?p=131027&seqNum=6",
        "document": "The Servlet API has its own built-in support for session tracking. The HttpSession object provides this functionality. In this section, I focus on four of the HttpSession's session tracking methods.\n\nThe first method is the setAttribute() method. The setAttribute() method binds a name/value pair to store in the current session. If the name already exists in the session, it is replaced. The method signature for setAttribute() is listed as follows:\n\nThe next method is the getAttribute() method, which is used to get an object that is stored in the session. The getAttribute() method takes a string representing the name that the desired object is bound to. Its signature is listed as follows:\n\nThe third session method returns an array of the current bound names stored in the session. This method is convenient if you want to remove all the current bindings in a session. Its signature is listed as follows:\n\nThe last session method is the removeAttribute() method. As its name suggests, it removes a binding from the current session. It takes a string parameter representing the name associated with the binding. Its method signature is listed as follows:\n\nNow that I have discussed the HttpSession object, let's take a look at an example of how to use it. In this example, you will service a request that contains a list of movies to add to a user's account. You will then parse the submitted list, add it to the customer's session, and redisplay it for approval. When the customer approves the list, they will click the Proceed to Checkout button to commit the transaction. Listing 5.4 contains the source for this example.\n\nTo invoke this servlet, you need to create an HTML file that will make a POST request containing a list of selected movies. The HTML file that contains this form is in Listing 5.5.\n\nTo see how this example works, load this HTML page in a browser. You should see a screen similar to Figure 5.2.\n\nWhen this page is loaded, select a couple of the movies in the list and click the Add Movies button. You should now see a screen containing the list of movies you selected. Figure 5.3 displays an example of this output.\n\nTo understand how this first part works, you need to examine the doPost() method. This is the method that services the POST request sent by your HTML document.\n\nThe first thing the doPost() method does is get the list of submitted movies from the request. It then tries to get a reference to the HttpSession object stored in the HttpServletRequest. This is done by calling the HttpServletRequest.getSession() method. The code snippet that performs this is listed in the following:\n\nThe getSession() method takes one parameter. This parameter is a Boolean value that, if true, tells the method to create an HttpSession if one doesn't exist.\n\nWhen you have a reference to the HttpSession object, you can add your movie list to it. You do this by calling the HttpSession.setAttribute() method, passing it the name \"Movies\" and the object to be bound to it: movies. The movie list is now stored in the client's session. The last thing you do in the doPost() method is redisplay the list of selected movies and ask the user to click Proceed to Checkout.\n\nNow you are going to look at the really cool part. Click the Proceed to Checkout button You shou.ld see a screen similar to Figure 5.4, which tells you \"Thank you for purchasing:\" and displays the movies you selected.\n\nFigure 5.4 The thank you screen.\n\nThe request performed by this form simply calls the same servlet using the GET method. If you look at the URL your browser now points to, you will notice there is no movie data encoded in the URL string.\n\nLook at the doGet() method to see exactly how this is done. The first thing you do is get a reference to the HttpSession object, which is done exactly as before with the getSession() method. When you have a reference to the session, you can get the list of movies stored in the session. You do this by calling the HttpSession.getAttribute() method, passing it the name bound to the movies object. The following code snippet shows how this is done:\n\nWhen you have the list of movies, thank the customer for the purchase and redisplay the list of ordered movies. That is all there is to it. As you have seen, the Servlet API provides you with a very elegant and simple-to-use method of maintaining persistent sessions."
    },
    {
        "link": "https://stackoverflow.com/questions/50261486/managing-session-and-request-attributes-in-servlet",
        "document": "I have a very simple JSP page where it has one search box and based off the input, in the search box, it will return a response with a submit button to get the following response.\n\nI noticed that whenever I use in my servlet to retrieve some request it returns null due to the request ending so I looked at the answers on here and started using instead. However, now I am stuck having session variables responses being set and it is causing my view to have old session data that isn't suppose to be there so now I have to use , whenever, I don't want that particular response data to be shown.\n\nIs there a better way to go about managing this instead of having to use , and ?"
    },
    {
        "link": "https://beginnersbook.com/2013/05/http-session",
        "document": "The object is used for session management. A session contains information specific to a particular user across the whole application. When a user enters into a website (or an online application) for the first time HttpSession is obtained via request.getSession(), the user is given a unique ID to identify his session. This unique ID can be stored into a cookie or in a request parameter.\n\nThe HttpSession stays alive until it has not been used for more than the timeout value specified in tag in deployment descriptor file( web.xml). The default timeout value is 30 minutes, this is used if you don’t specify the value in tag. This means that when the user doesn’t visit web application time specified, the session is destroyed by servlet container. The subsequent request will not be served from this session anymore, the servlet container will create a new session.\n\nThis is how you create a HttpSession object.\n\nYou can store the user information into the session object by using setAttribute() method and later when needed this information can be fetched from the session. This is how you store info in session. Here we are storing username, emailid and userage in session with the attribute name uName, uemailId and uAge respectively.\n\nThis First parameter is the attribute name and second is the attribute value. For e.g. uName is the attribute name and ChaitanyaSingh is the attribute value in the code above.\n\nTO get the value from session we use the getAttribute() method of HttpSession interface. Here we are fetching the attribute values using attribute names.\n\npublic void setAttribute(String name, Object value): Binds the object with a name and stores the name/value pair as an attribute of the HttpSession object. If an attribute already exists, then this method replaces the existing attributes.\n\npublic Object getAttribute(String name): Returns the String object specified in the parameter, from the session object. If no object is found for the specified attribute, then the getAttribute() method returns null.\n\npublic Enumeration getAttributeNames(): Returns an Enumeration that contains the name of all the objects that are bound as attributes to the session object.\n\npublic void removeAttribute(String name): Removes the given attribute from session.\n\nsetMaxInactiveInterval(int interval): Sets the session inactivity time in seconds. This is the time in seconds that specifies how long a sessions remains active since last request received from client.\n\nFor the complete list of methods, refer the official documentation."
    },
    {
        "link": "https://digitalocean.com/community/tutorials/java-session-management-servlet-httpsession-url-rewriting",
        "document": "Session Management in Java Servlet Web Applications is a very interesting topic. Session in Java Servlet are managed through different ways, such as Cookies, HttpSession API, URL rewriting etc. This is the third article in the series of Web Applications tutorial in Java, you might want to check out earlier two articles too.\n\nThis article is aimed to explain about session management in servlets using different techniques and with example programs.\n• HTTP protocol and Web Servers are stateless, what it means is that for web server every request is a new request to process and they can’t identify if it’s coming from client that has been sending request previously. But sometimes in web applications, we should know who the client is and process the request accordingly. For example, a shopping cart application should know who is sending the request to add an item and in which cart the item has to be added or who is sending checkout request so that it can charge the amount to correct client. Session is a conversional state between client and server and it can consists of multiple request and response between client and server. Since HTTP and Web Server both are stateless, the only way to maintain a session is when some unique information about the session (session id) is passed between server and client in every request and response. There are several ways through which we can provide unique identifier in request and response.\n• User Authentication - This is the very common way where we user can provide authentication credentials from the login page and then we can pass the authentication information between server and client to maintain the session. This is not very effective method because it wont work if the same user is logged in from different browsers.\n• HTML Hidden Field - We can create a unique hidden field in the HTML and when user starts navigating, we can set its value unique to the user and keep track of the session. This method can’t be used with links because it needs the form to be submitted every time request is made from client to server with the hidden field. Also it’s not secure because we can get the hidden field value from the HTML source and use it to hack the session.\n• URL Rewriting - We can append a session identifier parameter with every request and response to keep track of the session. This is very tedious because we need to keep track of this parameter in every response and make sure it’s not clashing with other parameters.\n• Cookies - Cookies are small piece of information that is sent by web server in response header and gets stored in the browser cookies. When client make further request, it adds the cookie to the request header and we can utilize it to keep track of the session. We can maintain a session with cookies but if the client disables the cookies, then it won’t work.\n• Session Management API - Session Management API is built on top of above methods for session tracking. Some of the major disadvantages of all the above methods are:\n• Most of the time we don’t want to only track the session, we have to store some data into the session that we can use in future requests. This will require a lot of effort if we try to implement this.\n• All the above methods are not complete in themselves, all of them won’t work in a particular scenario. So we need a solution that can utilize these methods of session tracking to provide session management in all cases. That’s why we need Session Management API and J2EE Servlet technology comes with session management API that we can use.\n• Cookies are used a lot in web applications to personalize response based on your choice or to keep track of session. Before moving forward to the Servlet Session Management API, I would like to show how can we keep track of session with cookies through a small web application. We will create a dynamic web application ServletCookieExample with project structure like below image. Deployment descriptor web.xml of the web application is: Welcome page of our application is login.html where we will get authentication details from user. Here is the LoginServlet that takes care of the login request. package com.journaldev.servlet.session; import java.io.IOException; import java.io.PrintWriter; import javax.servlet.RequestDispatcher; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.Cookie; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; /** * Servlet implementation class LoginServlet */ @WebServlet(\"/LoginServlet\") public class LoginServlet extends HttpServlet { private static final long serialVersionUID = 1L; private final String userID = \"Pankaj\"; private final String password = \"journaldev\"; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { // get request parameters for userID and password String user = request.getParameter(\"user\"); String pwd = request.getParameter(\"pwd\"); if(userID.equals(user) && password.equals(pwd)){ Cookie loginCookie = new Cookie(\"user\",user); //setting cookie to expiry in 30 mins loginCookie.setMaxAge(30*60); response.addCookie(loginCookie); response.sendRedirect(\"LoginSuccess.jsp\"); }else{ RequestDispatcher rd = getServletContext().getRequestDispatcher(\"/login.html\"); PrintWriter out= response.getWriter(); out.println(\"<font color=red>Either user name or password is wrong.</font>\"); rd.include(request, response); } } } Notice the cookie that we are setting to the response and then forwarding it to LoginSuccess.jsp, this cookie will be used there to track the session. Also notice that cookie timeout is set to 30 minutes. Ideally there should be a complex logic to set the cookie value for session tracking so that it won’t collide with any other request. Notice that if we try to access the JSP directly, it will forward us to the login page. When we will click on Logout button, we should make sure that cookie is removed from client browser. There is no method to remove the cookie but we can set the maximum age to 0 so that it will be deleted from client browser immediately. When we run above application, we get response like below images.\n• Servlet API provides Session management through interface. We can get session from HttpServletRequest object using following methods. HttpSession allows us to set objects as attributes that can be retrieved in future requests.\n• HttpSession getSession() - This method always returns a HttpSession object. It returns the session object attached with the request, if the request has no session attached, then it creates a new session and return it.\n• HttpSession getSession(boolean flag) - This method returns HttpSession object if request has session else it returns null. Some of the important methods of HttpSession are:\n• String getId() - Returns a string containing the unique identifier assigned to this session.\n• Object getAttribute(String name) - Returns the object bound with the specified name in this session, or null if no object is bound under the name. Some other methods to work with Session attributes are , and .\n• long getCreationTime() - Returns the time when this session was created, measured in milliseconds since midnight January 1, 1970 GMT. We can get last accessed time with method.\n• setMaxInactiveInterval(int interval) - Specifies the time, in seconds, between client requests before the servlet container will invalidate this session. We can get session timeout value from method.\n• boolean isNew() - Returns true if the client does not yet know about the session or if the client chooses not to join the session.\n• void invalidate() - Invalidates this session then unbinds any objects bound to it. When we use HttpServletRequest getSession() method and it creates a new request, it creates the new HttpSession object and also add a Cookie to the response object with name JSESSIONID and value as session id. This cookie is used to identify the HttpSession object in further requests from client. If the cookies are disabled at client side and we are using URL rewriting then this method uses the jsessionid value from the request URL to find the corresponding session. JSESSIONID cookie is used for session tracking, so we should not use it for our application purposes to avoid any session related issues. Let’s see example of session management using HttpSession object. We will create a dynamic web project in Eclipse with servlet context as ServletHttpSessionExample. The project structure will look like below image. login.html is same like earlier example and defined as welcome page for the application in web.xml LoginServlet servlet will create the session and set attributes that we can use in other resources or in future requests. package com.journaldev.servlet.session; import java.io.IOException; import java.io.PrintWriter; import javax.servlet.RequestDispatcher; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.Cookie; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; /** * Servlet implementation class LoginServlet */ @WebServlet(\"/LoginServlet\") public class LoginServlet extends HttpServlet { private static final long serialVersionUID = 1L; private final String userID = \"admin\"; private final String password = \"password\"; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { // get request parameters for userID and password String user = request.getParameter(\"user\"); String pwd = request.getParameter(\"pwd\"); if(userID.equals(user) && password.equals(pwd)){ HttpSession session = request.getSession(); session.setAttribute(\"user\", \"Pankaj\"); //setting session to expiry in 30 mins session.setMaxInactiveInterval(30*60); Cookie userName = new Cookie(\"user\", user); userName.setMaxAge(30*60); response.addCookie(userName); response.sendRedirect(\"LoginSuccess.jsp\"); }else{ RequestDispatcher rd = getServletContext().getRequestDispatcher(\"/login.html\"); PrintWriter out= response.getWriter(); out.println(\"<font color=red>Either user name or password is wrong.</font>\"); rd.include(request, response); } } } Our LoginSuccess.jsp code is given below. <%@ page language=\"java\" contentType=\"text/html; charset=US-ASCII\" pageEncoding=\"US-ASCII\"%> <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"https://www.w3.org/TR/html4/loose.dtd\"> <html> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=US-ASCII\"> <title>Login Success Page</title> </head> <body> <% //allow access only if session exists String user = null; if(session.getAttribute(\"user\") == null){ response.sendRedirect(\"login.html\"); }else user = (String) session.getAttribute(\"user\"); String userName = null; String sessionID = null; Cookie[] cookies = request.getCookies(); if(cookies !=null){ for(Cookie cookie : cookies){ if(cookie.getName().equals(\"user\")) userName = cookie.getValue(); if(cookie.getName().equals(\"JSESSIONID\")) sessionID = cookie.getValue(); } } %> <h3>Hi <%=userName %>, Login successful. Your Session ID=<%=sessionID %></h3> <br> User=<%=user %> <br> <a href=\"CheckoutPage.jsp\">Checkout Page</a> <form action=\"LogoutServlet\" method=\"post\"> <input type=\"submit\" value=\"Logout\" > </form> </body> </html> When a JSP resource is used, container automatically creates a session for it, so we can’t check if session is null to make sure if user has come through login page, so we are using session attribute to validate request. CheckoutPage.jsp is another page and it’s code is given below. <%@ page language=\"java\" contentType=\"text/html; charset=US-ASCII\" pageEncoding=\"US-ASCII\"%> <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"https://www.w3.org/TR/html4/loose.dtd\"> <html> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=US-ASCII\"> <title>Login Success Page</title> </head> <body> <% //allow access only if session exists if(session.getAttribute(\"user\") == null){ response.sendRedirect(\"login.html\"); } String userName = null; String sessionID = null; Cookie[] cookies = request.getCookies(); if(cookies !=null){ for(Cookie cookie : cookies){ if(cookie.getName().equals(\"user\")) userName = cookie.getValue(); } } %> <h3>Hi <%=userName %>, do the checkout.</h3> <br> <form action=\"LogoutServlet\" method=\"post\"> <input type=\"submit\" value=\"Logout\" > </form> </body> </html> Our LogoutServlet code is given below. Notice that I am printing JSESSIONID cookie value in logs, you can check server log where it will be printing the same value as Session Id in LoginSuccess.jsp Below images shows the execution of our web application.\n• As we saw in last section that we can manage a session with HttpSession but if we disable the cookies in browser, it won’t work because server will not receive the JSESSIONID cookie from client. Servlet API provides support for URL rewriting that we can use to manage session in this case. The best part is that from coding point of view, it’s very easy to use and involves one step - encoding the URL. Another good thing with Servlet URL Encoding is that it’s a fallback approach and it kicks in only if browser cookies are disabled. We can encode URL with HttpServletResponse method and if we have to redirect the request to another resource and we want to provide session information, we can use method. We will create a similar project like above except that we will use URL rewriting methods to make sure session management works fine even if cookies are disabled in browser. ServletSessionURLRewriting project structure in eclipse looks like below image. package com.journaldev.servlet.session; import java.io.IOException; import java.io.PrintWriter; import javax.servlet.RequestDispatcher; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.Cookie; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; /** * Servlet implementation class LoginServlet */ @WebServlet(\"/LoginServlet\") public class LoginServlet extends HttpServlet { private static final long serialVersionUID = 1L; private final String userID = \"admin\"; private final String password = \"password\"; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { // get request parameters for userID and password String user = request.getParameter(\"user\"); String pwd = request.getParameter(\"pwd\"); if(userID.equals(user) && password.equals(pwd)){ HttpSession session = request.getSession(); session.setAttribute(\"user\", \"Pankaj\"); //setting session to expiry in 30 mins session.setMaxInactiveInterval(30*60); Cookie userName = new Cookie(\"user\", user); response.addCookie(userName); //Get the encoded URL string String encodedURL = response.encodeRedirectURL(\"LoginSuccess.jsp\"); response.sendRedirect(encodedURL); }else{ RequestDispatcher rd = getServletContext().getRequestDispatcher(\"/login.html\"); PrintWriter out= response.getWriter(); out.println(\"<font color=red>Either user name or password is wrong.</font>\"); rd.include(request, response); } } } <%@ page language=\"java\" contentType=\"text/html; charset=US-ASCII\" pageEncoding=\"US-ASCII\"%> <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"https://www.w3.org/TR/html4/loose.dtd\"> <html> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=US-ASCII\"> <title>Login Success Page</title> </head> <body> <% //allow access only if session exists String user = null; if(session.getAttribute(\"user\") == null){ response.sendRedirect(\"login.html\"); }else user = (String) session.getAttribute(\"user\"); String userName = null; String sessionID = null; Cookie[] cookies = request.getCookies(); if(cookies !=null){ for(Cookie cookie : cookies){ if(cookie.getName().equals(\"user\")) userName = cookie.getValue(); if(cookie.getName().equals(\"JSESSIONID\")) sessionID = cookie.getValue(); } }else{ sessionID = session.getId(); } %> <h3>Hi <%=userName %>, Login successful. Your Session ID=<%=sessionID %></h3> <br> User=<%=user %> <br> <!-- need to encode all the URLs where we want session information to be passed --> <a href=\"<%=response.encodeURL(\"CheckoutPage.jsp\") %>\">Checkout Page</a> <form action=\"<%=response.encodeURL(\"LogoutServlet\") %>\" method=\"post\"> <input type=\"submit\" value=\"Logout\" > </form> </body> </html> <%@ page language=\"java\" contentType=\"text/html; charset=US-ASCII\" pageEncoding=\"US-ASCII\"%> <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"https://www.w3.org/TR/html4/loose.dtd\"> <html> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=US-ASCII\"> <title>Login Success Page</title> </head> <body> <% String userName = null; //allow access only if session exists if(session.getAttribute(\"user\") == null){ response.sendRedirect(\"login.html\"); }else userName = (String) session.getAttribute(\"user\"); String sessionID = null; Cookie[] cookies = request.getCookies(); if(cookies !=null){ for(Cookie cookie : cookies){ if(cookie.getName().equals(\"user\")) userName = cookie.getValue(); } } %> <h3>Hi <%=userName %>, do the checkout.</h3> <br> <form action=\"<%=response.encodeURL(\"LogoutServlet\") %>\" method=\"post\"> <input type=\"submit\" value=\"Logout\" > </form> </body> </html> package com.journaldev.servlet.session; import java.io.IOException; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.Cookie; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; /** * Servlet implementation class LogoutServlet */ @WebServlet(\"/LogoutServlet\") public class LogoutServlet extends HttpServlet { private static final long serialVersionUID = 1L; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { response.setContentType(\"text/html\"); Cookie[] cookies = request.getCookies(); if(cookies != null){ for(Cookie cookie : cookies){ if(cookie.getName().equals(\"JSESSIONID\")){ System.out.println(\"JSESSIONID=\"+cookie.getValue()); } cookie.setMaxAge(0); response.addCookie(cookie); } } //invalidate the session if exists HttpSession session = request.getSession(false); System.out.println(\"User=\"+session.getAttribute(\"user\")); if(session != null){ session.invalidate(); } //no encoding because we have invalidated the session response.sendRedirect(\"login.html\"); } } When we run this project keeping cookies disabled in the browser, below images shows the response pages, notice the jsessionid in URL of browser address bar. Also notice that on LoginSuccess page, user name is null because browser is not sending the cookie send in the last response. If cookies are not disabled, you won’t see jsessionid in the URL because Servlet Session API will use cookies in that case."
    },
    {
        "link": "https://geeksforgeeks.org/servlet-httpsession-login-and-logout-example",
        "document": "In general, the term “Session” in computing language, refers to a period of time in which a user’s activity happens on a website. Whenever you login to an application or a website, the server should validate/identify the user and track the user interactions across the application. To achieve this, Java Web Server supports the servlet standard session interface, called HttpSession, to perform all the session-related activities.\n\nJava servlets has HttpSession(I) in javax.servlet.http package. This interface provides a way to identify a user across more than one-page requests or visit a Website. Servlet container uses this interface to create a session between an HTTP client and an HTTP server and stores information about that user. It provides various methods to manipulate information about a session such as,\n• To bind a session object with a specified user.\n• To get the creation time.\n• To know the last time, the user had accessed the website in that session.\n• To invalidate the session etc.\n\nOnce the user login to the website, we need to create a new session. To do this, we need to use getSession() method in HttpServletRequest Interface.\n\nThis method returns the current session associated with this request. If the request does not have a session, it creates one. We can also create a session using getSession(boolean create) method in HttpServletRequest Interface.\n\nWe can pass the boolean parameters – true or false.\n\nThis method is the same as getSession(), where it returns the current session associated with this request. If the request does not have a session, it creates one.\n\nThis method returns the current session associated with this request. If the request does not have a session, it returns null.\n\nOnce the user requests to logout, we need to destroy that session. To do this, we need to use invalidate() method in HttpSession Interface.\n\nWhen this invalidate method is called on the session, it removes all the objects that are bound to that session.\n\nWe will create a basic Servlet program to display a welcome message for the validated users.\n• Under WEB-INF folder, create a JSP page – “login.jsp” to get the login credentials of the user.\n• Under src folder, create a Servlet – “LoginServlet.java” to process the login request and generate the response.\n• Under WEB-INF folder, create a JSP page – “welcome.jsp” to display the welcome message to the user.\n• Under src folder, create a Servlet – “LogoutServlet” to process the logout request and generate the response.\n• Run the program using “Run As -> Run on Server”.\n• In “login.jsp”, we have 2 fields, User Name, and Password.\n• User Name input type is specified as “text”, which means text field.\n• Password field input type is specified as “password” so that when the user enters the password field, it hides the letters as dots.\n• We have formed with action “login” and method “post” so that when this form is submitted, it maps with the LoginServlet which is having the same URL mapping, and executes the “doPost” method of that servlet.\n• In “LoginServlet.java”, we are using annotation “@WebServlet(“/login”)” to map the URL request. You can also specify this mapping for the servlet using Deployment descriptor – web.xml.\n• As we learned, get the session object of HttpSession. If the request does not have a session, it creates a session and returns it.\n• Here, we need to get the user details that are passed through the request, Name, and Password using “getParameter()” on the request object.\n• For simplicity, we are just validating the password field. So, the User name can be anything but the Password must be”geek”.\n• Validate the password and if it is correct, set this attribute value in session and redirect the page to display the welcome message.\n• If the entered password is incorrect, display an error message to the user in the login screen using the Print writer object.\n• On the Welcome page, display the user name and a welcome message.\n• We have a form with action “logout” and method “get” so that when this form is submitted, it maps with the LogotServlet which is having the same URL mapping, and executes the “doGet” method of that servlet.\n• Here also, we are using the annotation “@WebServlet(“/logout”)” to map the URL request.\n• When the user clicks on Logout, we need to destroy that session. So, call the “invalidate()” method on that session object.\n• For our understanding, we can print the session object value in the console to see if the session is invalidated.\n• As we learned, “getSession(false)” returns the current session on request if it exists, if not it returns null. So, after invalidating the session, it should print null in the console.\n• Finally, print the success message to the user.\n• Run the program on the server.\n• Enter the user name and password and click on Login.\n• Give the Password as “geek” as we are validating against it, if not it throws an error like below.\n• Enter the correct credentials and log in.\n• The User name which we set in the session object is displayed with a welcome message.\n• Now, if you check the console, it prints the session object values.\n• As you can see, “getSession()” returned the existing session object.\n• After the invalidate method, as there is no session, it returned “null”.\n\n1) In the above example, we have used the “invalidate()” method, you can also use the “removeAttribute(String name)” method in HttpSession Interface.\n\nThis method removes the object bound with the specified name, in this example – “user” from this session. If the session does not have an object bound with the specified name, it does nothing. So, instead of the “invalidate()” method, you can use the “removeAttribute(String)” to logout the user from the session.\n\n2) In the above example, we invalidated the session manually. If you want, you can also specify the session for time out automatically after being inactive for a defined time period.\n\nThis method specifies the time, in seconds, between client requests before the servlet container will invalidate this session. Here, as we specified the value “100”, the session will be invalidated after 100 seconds of inactive time from the user. Servlet container will destroy the session after 100 seconds of inactive – Session timeout.\n\nIn this way, you can maintain a session for a specific user/client and can implement Login and Logout for applications using HttpSession Interface methods based on the requirements."
    },
    {
        "link": "https://geeksforgeeks.org/session-management-in-java",
        "document": "Session is used to save user information momentarily on the server. It starts from the instance the user logs into the application and remains till the user logs out of the application or shuts down the machine. In both cases, the session values are deleted automatically. Hence, it functions as a temporary storage that can be accessed till the user is active in the application and can be accessed when the user requests a URI. This session is stored in binary values, hence maintaining the security aspect, and can be decoded only at the server end.\n\nKeeping track of the user's preferences over a website or an application as long as the user is logged into the system for a specific time is called Session Management. This lasts until they log out or their session expires. In simpler terms, it's like keeping a record of user activities when they simply surf the application so that from next time onwards, the user doesn't have to specify the preferences again.\n\nWhy is it Required?\n\nSessions are required because they perform multiple functions ranging from time management to security perspective. The following can be noted in this regard.\n• user authentication credentials in an encrypted format which can be passed in case of auto login.\n• None Since the values are encrypted, it can store sensitive information as well.\n• None Session values can be accessed in a short period cause they are stored on the client's end and thus it helps the server to respond faster\n• application access from multiple servers, thus securing the network.\n\nRole of Cookies and Other Tracking Mechanisms\n\nCookies and other tracking mechanisms play a crucial role in session management by helping applications remember the users through multiple interactions and their preferences and behavior. Below are some of the mechanisms through which they manage the task.\n• Identification: When the user logs into the system, an ID is generated. This is a unique identifier that is stored in the session cookie assigned to an individual user which identifies the user on their forthcoming visits.\n• Temporary Storage: The details stored in temporary in nature, such as login status and other session-specific data.\n• Automatic Logins: They store the user's authentication credentials which helps the user to not provide the credentials every a time they are logging into the system. It performs as an auto login where it will take the details from the session cookie and login to the platform. This can be performed with some time frame to identify the user or in simpler words, this can be stored for a specific time period to maintain security of the system.\n• Extended Recognition: Unlike session cookies which expires when the user closes browser, persistent cookies generally have a longer lifespan.\n• Personalization: Persistent cookies can store user preferences providing a personalized experience across multiple visits of the user to the platform.\n• User Activity Tracking: Websites may use JavaScript or pixels as tracking mechanisms to monitor the user's activity enhancing user experience and analytics.\n• Third-Party Cookies: For this very purpose, some websites prefer third-party cookies which are generally set by domains.\n• CSRF Tokens: Cookies can also store anti-CSRF (Cross-Site Request Forgery) tokens to prevent unauthorized actions, thus enhancing the overall security of the platform.\n• Secure and HttpOnly Flags: Cookies can also be marked with HttpOnly flag to prevent client-side scripts from accessing them which convey as secure to ensure they are only transmitted over secure (HTTPS) connections, thus reducing the risk of certain types of attacks.\n\nHow to Get a Session?\n\nWe can keep track of a client's session with the HttpSession object. In Java Servlets, the HttpSession interface provides a way to regulate the state/information about a user varying across multiple requests. It is a part of javax.servlet.http package and allows storing and retrieving the attributes about the user's information, providing a mechanism for session management.\n\nWe can use the getSession() method to create a HttpSession object. The getSession() method returns a session if it already exists or creates a new one, in case no session exists. The following snippet follows.\n\nUsing the parameterized getSession(boolean) method, it returns a new session if we pass the true parameter. The syntax will look something like this.\n\nFurther, to fetch a pre-existing session, one can pass false in the parameterized getSession() method.\n\nThis associates the specified value to the specified name in a particular session. This can be used to store data that needs to be managed across multiple requests.\n\nReturns the value which is associated with the specified name in the particular session. This is used to retrieve previously stored session attributes.\n\nIt removes the attribute with the specified name from the session.\n\nOnce the services are completed, it is necessary to destroy the session object. The syntax follows.\n\nIn the above example, the getSession() method is called on the HttpServletRequest object to retrieve the HttpSession. Once you have the HttpSession object, you can use its methods to set and retrieve session attributes.\n\nTo maintain the session between a web server and a web client, following methods can be used.\n\nTo address the client subsequent request, the web server assigns a unique session ID as a cookie to the web client so that for the next oncoming requests, this cookie can be passed and the server can identify its validity and can process the request.\n\nThis is not considered an efficient approach as it is browser dependent and some browser at times doesn't support a cookie. The general syntax follows.\n\nA web server can also pass a hidden HTML form field as an input element along with a unique session ID as follows.\n\nThis simply adds the name and value on each and every request which the client sends to the server and the response is received, the session_id value can be used to track different browser actions.\n\nSince clicking on a regular ankle tag (<a href=\"\">) hypertext link doesn't results into form submission, so this can's support general session tracking and so can't be an efficient way to handle the transmission of information.\n\nSimply appending the URL with some data or token as the session id which can be decoded at the server end, which can associate that data with its stored session values and can identify the legitimate request can be done by URL rewriting.\n\nThis appending can be done in the form of passing query parameters with a sessionid value. This can be accessed at the server side to identify the client request.\n\nThough this can help to maintain the information flow between the server and the client and would be independent of the browser, but this is generated dynamically. Thus, this will not be considered a choice for static pages.\n\nThe stages which a user session goes through right from its creation to its eventual expiration completes the session lifecycle. In the context of web applications, the lifecycle involves the management of user-specific data across multiple session requests. The key stages involved in the session lifecycle are described below.\n• Trigger: The session is created when the user logs into the application for the initial time.\n• Action: The servlet container creates a new session for the user using HttpSession attribute when the user logs in the platform for the first time. As no existing session is associated with the user, it creates a new one and generates a session ID which is stored as a cookie on the client's browser based on the system requirements.\n• Trigger: Once the session is created, the required attributes are set on the session using the servlets or the JSP page.\n• Action: The required attribute are named and stored using the setAttribute method of the HttpSession object which makes sure that this can be use across multiple locations.\n• Trigger: The user interacts with the web application, making additional requests.\n• Action: The session ID is now associated with each successive request, allowing the servlet container to map the request with the correct session. To retrieve the attributes associated to the particular session, use getAttribute method.\n• Trigger: The session can be invalidated explicitly by the application or automatically based on certain criteria as per the system requirements.\n• Action: We can invoke invalidate method to remove all the session attributes associated with that particular session. Further we can use a timeout concept which will invalidate the sessions automatically after a specified period of inactivity.\n• Trigger: We can set the session timeout, which is a defined maximum time of existence.\n• Action: Once the browsing is completed, we can remove the data and the user's preference based on the maximum inactive time interval.\n\nBelow example demonstrates creating a session, setting and retrieving attributes, and finally, invalidating the session.\n\nExplaination of the above Example:\n• None When a user accesses the servlet, the doGet method is called which retrieves the existing HttpSession associated with the request or creates a new one if it doesn't exist using the request.getSession() method.\n• None The servlet sets a session attribute named \"username\" to the value \"GFG\" using session.setAttribute.\n• None It retrieves the \"username\" attribute from the session using session.getAttribute and prints it in the HTTP response.\n• None Finally, the session.invalidate() method is called to invalidate the session.\n\nThe concept of session management becomes crucial when dealing with dynamic and large web applications. A session provides the details about the user's interactions with a site which can be managed using HttpSession interface in Java Servlets.\n\nSome of the session tracking mechanisms include cookies, URL rewriting and hidden form fields which are used to maintain continuity across multiple user requests. The HttpSession interface allows for the setting and retrieval of attributes in the particular session, making it possible to store user-related information. The lifecycle involves stages such as attribute setting, client interaction, session invalidation, and expiration, right from the creation till its expiration or invalidation ensuring the proper management of user sessions and thus securing the user's personal data."
    },
    {
        "link": "https://stackoverflow.com/questions/15325674/use-of-servlets-for-managing-state",
        "document": "HTTP is stateless. Meaning that the data returned by the server does not depend on any previous actions by the user. Cookies and other non-HTTP methods is what makes the web appear to be stateful, enabling user to for example log-in and out on websites.\n\nFor an application developers, it IS stateless always.\n\nFor end users it is appears to be statefull\n\nEach HTTP request results in a new invocation of a servlet (i.e., a thread calling the servlet’s service and doXxx methods), regardless of whether the connection is keep-alive or not.\n\nHttpSession object is used to set information related to a specific session say, the number of products in a cart for the current session. Note that session gets closed if the browser is closed or if you clear the cookies.\n\nHow does the webserver know that its the same session?\n\nWebservers sends a sessionId to the browser in the form of cookie. And, the browser sends the cookie having sessionId back to the server for subsequent requests.\n\nHow does the browser identifies which cookies to send for a link/request?\n\nIt is based on the these parameters. If the request matches these parameters the browser sends that particular cookie:\n\nDomain: The domain name to which the request is made.\n\nPath: If the context root path name is same.\n\nSecure: Server sends if the given cookie if it can be sent on this non-secure channel\n\nIf cookies are disabled then it uses URL-rewriting.\n\nIs it possible to retain the session even after the browser is closed and opened? Yes. The answer is cookie + DB + Googling :)"
    },
    {
        "link": "https://medium.com/@cyberblogger007/session-management-in-java-web-applications-4556f8c7ea52",
        "document": "In the context of a web application, a session refers to a user’s interaction with the application that is preserved across multiple HTTP requests.\n\nA single continuous interaction between the user and the application is called a session.\n\nSessions are useful for maintaining the state in a stateless environment like the web, where each request is treated as an independent transaction. For example, a web application might use a session to store the items in a user’s shopping cart as they navigate the website and add items to their cart. When the user is ready to checkout, the web application can retrieve the items from the user’s session and complete the transaction.\n\nHTTP (Hypertext Transfer Protocol) is a stateless protocol that does not maintain a session or connection between requests. This means that the server does not have any way to identify individual clients or track their interactions with the web application.\n\nWeb applications often use additional techniques such as cookies, HTTP sessions, hidden form fields, or URL rewriting to maintain a session or track user interactions. These techniques allow the server to identify the user and maintain a session by sending session information back and forth between the client and server.\n\nThere are mainly four techniques that can be used to manage sessions in a web application. Here is a brief overview of each technique:\n• Cookies: A cookie is a small piece of data that is stored on the user’s computer by the web browser. Cookies can be used to store session information, such as a session ID, and can be sent back to the server with subsequent requests. This allows the server to identify the user and maintain the session.\n\n2. HttpSessions: As I mentioned earlier, the HttpSession interface is a part of the Java Servlet API and provides methods for storing and retrieving information about a user’s session. When a user establishes a session with a web application, the server creates a new HttpSession object and assigns a unique session ID to the user. This session ID is then sent to the user’s browser in the form of a cookie, which the browser stores and includes with subsequent requests to the server.\n\n3. Hidden Form Fields: A hidden form field is a special type of form element that is not visible to the user. Hidden form fields can be used to store session information, such as a session ID, and can be sent back to the server when the user submits the form. This allows the server to identify the user and maintain the session.\n\n4. URL Rewriting: URL rewriting is a technique for maintaining a session by appending session information to the URL. For example, the server might append the session ID to the URL as a query string parameter. When the user clicks on a link or submits a form, the session information is sent back to the server in the URL. This allows the server to identify the user and maintain the session.\n\nBy using the above-mentioned session tracking techniques, the stateless HTTP can be made stateful."
    }
]