[
    {
        "link": "https://p5js.org/reference/p5/createCanvas",
        "document": "creates the main drawing canvas for a sketch. It should only be called once at the beginning of setup(). Calling more than once causes unpredictable behavior.\n\nThe first two parameters, and , are optional. They set the dimensions of the canvas and the values of the width and height system variables. For example, calling creates a canvas that's 900×500 pixels. By default, and are both 100.\n\nThe third parameter is also optional. If either of the constants or is passed, as in , then it will set the sketch's rendering mode. If an existing HTMLCanvasElement is passed, as in , then it will be used by the sketch.\n\nThe fourth parameter is also optional. If an existing HTMLCanvasElement is passed, as in , then it will be used by the sketch.\n\nNote: In WebGL mode, the canvas will use a WebGL2 context if it's supported by the browser. Check the webglVersion system variable to check what version is being used, or call to create a WebGL1 context."
    },
    {
        "link": "https://p5js.org/tutorials/get-started",
        "document": "Welcome to p5.js! New to p5.js and want to learn some basics for creating an interactive sketch? Follow this tutorial to create a simple interactive landscape. You will learn how to:\n• Add simple interactivity by having your sketch respond to the mouse pointer position\n• Use the p5.js reference pages to learn more\n\nBefore you begin you should be able to:\n• Log in to the p5.js Web Editor and save a new project\n• Create and save a new p5.js project in VS Code (or another code editor)\n\nFor a step-by-step guide to creating and saving projects in the p5.js Web Editor or VS Code, visit Setting Up Your Environment.\n\nStep 1: Name and save a new p5.js project\n• Create a new p5.js project, give it a name, and save it.\n• Log in to the p5.js Web Editor.\n• Name your project “Interactive Landscape” by clicking the pencil icon and typing “Interactive Landscape” into the text box that appears.\n• Confirm your project is saved by navigating to your gallery of saved sketches:\n• Your most recent sketches will appear at the top of the list of projects saved on your account.\n\nAll p5.js projects include the p5.js library and three files: , style.css, and . Make changes on the canvas by adding code to the sketch.js file. New p5.js projects begin with the following code in the sketch.js file:\n\nEvery sketch.js file begins with two main functions: and .\n\nFunctions are sequences of instructions that perform specific tasks.\n\nWhen the code in sketch.js is executed:\n• is called and runs one time. It can be used to set default values for your project.\n• Within the curly brackets ( ) for , creates an HTML canvas that is 400 pixels wide and 400 pixels high that you can see in the preview window.\n• is called directly after and executes the lines of code inside its curly brackets 60 times per second until the program is stopped or the function is called.\n• Within the curly brackets of , also known as the code block, the function sets the color of the canvas background. The default value (220) sets the color of the canvas to gray.\n\nVisit the p5.js reference pages for , , , and to learn more.\n\nStep 2: Change the size of the canvas\n• Change the size of the canvas so that it is 600 pixels wide and 400 pixels high by changing the arguments for . Press Play to see changes in the preview window.\n• Make sure you press the Play button or have the Auto-refresh box checked to update the canvas.\n\nYour code should look like this:\n• Write a comment that describes what does.\n\nYour code can look like this:\n\nUsing comments in your sketches can help you remember the purpose of each line of code. Since JavaScript can’t read comments, they are a great way to communicate your ideas to other people who explore your code, or to remind yourself of what your code is doing.\n• Use two forward slashes anywhere in the sketch ( ) to embed single line comments.\n\nsketch.js files are written in JavaScript, where each line of code is called a statement. Each statement ends with a semicolon ( ). It is best practice to add semicolons after every statement you write in the sketch.js file. You SHOULD NOT include a semicolon after curly brackets in functions and statements.\n\nFor more information about comments and statements, watch this video from The Coding Train.\n• Change the color of the canvas background to a sky blue color by changing the arguments in the function to .\n• Add comments to describe this line of code.\n• Have the Auto-refresh box checked to update the canvas automatically.\n\nYour code can look like this:\n\nand other p5.js commands, like shapes, are also functions. The function specifically changes the color of the background of the canvas. According to the p5.js reference page for , the three arguments seen in the code above represent values for red, green, and blue that correspond to the blue color seen on the canvas.\n\nThere are over 10 million combinations of numbers for red, green, and blue that correspond to colors you can use. These are known as RGB color codes. In the code above we see that the value for R is 135, the value for G is 206, and the value for B is 235. This corresponds to the light blue color shown on the canvas.\n• View this example to explore how changes in R, G, and B values in affect the color of the canvas.\n\nVisit the p5.js reference pages for background() and color to learn about more ways you can change the background color of the canvas.\n\nUse Google’s Color Picker to search for the code that can set the background to any color. Find the color you would like to use, copy the numbers in the box labeled RGB, and paste them into .\n• Draw a sun in the top-right corner of the canvas using the function.\n• Add a semicolon ( ) to end this line of code.\n• Add a comment that describes this line of code.\n\nYour code should look like this:\n\nSome shape functions, such as , use numbers that describe the horizontal location (x-coordinate), vertical location (y-coordinate), and size (width and height) of a circle. The x- and y-coordinates indicate the center point ( , ) of the circle (see diagram below).\n• The first argument in the function used in the code example above, the number 550, is the x-coordinate of the center point. This means that the center point is located 550 pixels to the right of the left edge of the canvas.\n• The second argument, the number 50, is the y-coordinate of the center point. This means that the center point is located 50 pixels below the top edge of the canvas.\n• The third argument, the number 100, is the size of the circle (width & height). This means that the circle is 50 pixels wide and 50 pixels high.\n\nVisit the p5.js reference page for to learn more.\n\nThe canvas comes with an invisible coordinate system that begins at a horizontal location of 0 and vertical location of 0 in the top-left corner.\n\nAs an object on the canvas moves to the right of this point, its horizontal location increases. As an object on the canvas moves down from this point, its vertical location increases. As an object moves to the left on the canvas, its x-coordinate decreases; as an object moves up on the canvas, its y-coordinate decreases. The following examples display values for the x- or y-coordinates of a circle as its position changes on the canvas:\n• This example displays the x-coordinate of a circle as it moves horizontally on the canvas.\n• This example displays the y-coordinate of a circle as it moves vertically on the canvas.\n\nThe maximum values for the horizontal and vertical position of the canvas are set by the function. The first number in is the x-coordinate of the right edge, and the second number is the y-coordinate of the bottom edge.\n\nLearn more about the HTML canvas coordinate system and shapes on this p5.js reference page.\n\nStep 6: Color shapes and outlines on the canvas\n• Color the sun by adding on the line above .\n• Color the outline of the sun by adding on the line above .\n• Change the thickness of the outline by adding on the line above .\n\nYour code should look like this:\n\nThe function sets the color for any shape on the canvas, and the function sets the color for lines and outlines. They both use the same arguments that uses. The code above uses an HTML color name as the arguments for and ; we can also use RGB and HEX color codes. The function uses a number to set the thickness for lines, outlines, and points that are below it; the default is 1 pixel. In the code above, sets the circle’s outline to 20 pixels.\n\nThe default value for is white. This means that if never appears in , all shapes will be white by default. To change the color of any shape on the canvas, you must call before drawing the shape. The default value for is black. To change the color and shape of the outline, and must be called before the shape is drawn. When drawing multiple shapes on the canvas, call , , and each time the color of a shape or outline changes.\n• See this sketch for an example.\n\nVisit the color reference page to learn more about , , and . Use the p5.js Web Editor’s color tool or Google’s Color Picker to search for color codes to use in , , and .\n\nStep 7: Draw and color more shapes on your canvas\n• Draw grass on the bottom half of the canvas:\n• Reset the values for the outline of shapes by adding and below the code for the sun.\n• Add a rectangle shape to your canvas using .\n• Add on the line above the rectangle statement to color the rectangle green.\n• Add a comment that describes the lines of code that create the grass.\n• (Optional) Add more details to your landscape using shapes and colors. Click on the shape functions below to learn how to include them in your sketch:\n\nuses numbers that describe the horizontal location (x-coordinate), vertical location (y-coordinate), width and height of a rectangle. The x- and y-coordinates (x, y) indicate the top left point of the rectangle (see the diagram below).\n• The first argument in the function used in the code example above, the number 0, is the x-coordinate. This means that the top left corner of the rectangle is on the left edge of the canvas.\n• The second argument, the number 200, is the y-coordinate. This means that the top left corner of the rectangle is 200 pixels below the top edge of the canvas.\n• The third argument, the number 600, is the width of the rectangle. This means that the rectangle is 600 pixels wide.\n• The fourth argument, the number 200, is the height of the rectangle. This means that the rectangle is 200 pixels tall.\n\nVisit the p5.js reference pages for , simple shapes, and color to learn more.\n• Add a flower emoji and a ladybug emoji (or any other emojis you like) to your landscape:\n• Draw a flower on the canvas using\n• Draw a ladybug on the canvas using\n• The emojis you select must be surrounded by quotation marks (for example, ).\n• See the following instructions on how to insert an emoji using your keyboard:\n• Adjust the size of the flower and ladybug using on the line before the emojis are drawn.\n• Add comments that describe the lines of code that create the flower and ladybug.\n• Make sure you press the Play button or have the Auto-refresh box checked to update the canvas.\n\nYour code should look like this:\n\nuses a string, which is any text within quotation marks ( ), and numbers that describe the x-coordinate and y-coordinate of the text. The x- and y-coordinates (x, y) indicate the bottom-left point of the text box (see the diagram below).\n• The first argument in the function used in the code example above, the string , is the text that will appear on the canvas. All strings used in p5.js must be within quotation marks ( ).\n• The second argument, the number 100, is the x-coordinate. This means that the bottom-left corner of the text box is 100 pixels to the right of the left edge of the canvas.\n• The third argument, the number 250, is the y-coordinate. This means that the bottom-left corner of the text box is 250 pixels below the top edge of the canvas.\n\nuses a number to describe the size, in pixels, for any function that appears after it is called. Be sure to use before you call the function if you wish to change the size of the text that appears on the canvas.\n• See this example for differences in text size.\n\nSince executes the code within the brackets over and over again, shapes are drawn on the canvas like layers. Code that appears first will be drawn first, and code that appears further down in will be drawn after. This is why we must set , , and before we add shapes or text to the canvas. p5.js needs to know the color or size of shapes and text before they are drawn. This also allows for overlapping shapes and can sometimes hide shapes behind others! Be sure to check the x- and y-coordinates of your shapes to see if they are behind other shapes.\n\nSee these sketches for examples of layering: overlapping shapes (hidden) and overlapping shapes\n\nVisit the reference pages for , , and to learn more.\n\nSome functions in p5.js need arguments that are string data types, while other functions need arguments that are number data types.\n• Strings: represented by text and always surrounded by quotation marks ( )\n• uses 3 numbers: a number that represents its x-coordinate, a number that represents its y-coordinate, and a number that represents its size in pixels.\n• uses a string that represents the text displayed, and 2 numbers: a number that represents its x-coordinate and a number that represents its y-coordinate.\n• , , and use both numbers and strings:\n• a string with an HTML color name or HEX color values\n• Change the x- and y-coordinate for the ladybug emoji to , .\n• Move your mouse pointer across the canvas and see how the ladybug follows your mouse pointer location!\n• Make sure you press the Play button or have the Auto-refresh box checked to update the canvas.\n• Add comments to describe how the ladybug can move with the mouse pointer.\n\nYour code should look like this:\n\nand are built-in variables that come with the p5.js library – they are referred to as system variables. Variables store values in them that can be used later in a sketch. They are also helpful to use when you know the value of something, such as x- and y-coordinates, is changing. and specifically store the x- and y-coordinates of the mouse pointer as it is dragged over the canvas. You can use and as any argument that requires a number!\n\nSee some of these examples of how you can use and in a sketch:\n• Display x- and y-coordinates of mouse (mouseX and mouseY)\n\nVisit the p5.js reference pages for and to learn more! Be sure to review the p5.js coordinate system by visiting the p5.js reference page for the canvas coordinate system and shapes. Explore other system variables included in the p5.js reference:\n• The width of the canvas\n• The height of the canvas\n• The previous x-coordinate of the mouse\n• The previous y-coordinate of the mouse\n\nIt is easy to spell function names wrong or forget a comma. Syntax rules help the computer interpret code. When a “rule” is broken, an error message will appear in the console (for example, if circle() is spelled wrong). These errors are commonly referred to as “bugs.” The console displays messages from the editor with details about any mistakes you might have made. When your code does not execute correctly, there might be a bug in your code! Visit the Field Guide to Debugging for examples of common errors and how to fix them.\n\nFor more information, watch this video from The Coding Train.\n• Begin your next sketch:\n• You can duplicate this template to help you place shapes and text on the canvas!\n• Click on the template link, click File, then Duplicate."
    },
    {
        "link": "https://p5js.org/reference",
        "document": ""
    },
    {
        "link": "https://github.com/processing/p5.js/wiki/p5.js-overview",
        "document": "p5.js is a JavaScript library that starts with the original goal of Processing—to make coding accessible for artists, designers, educators, and beginners—and reinterprets this for today's web.\n\nUsing the original metaphor of a software sketchbook, p5.js has a full set of drawing functionality. However, you're not limited to your drawing canvas, you can think of your whole browser page as your sketch! For this, p5.js has addon libraries that make it easy to interact with other HTML5 objects, including text, input, video, webcam, and sound.\n\np5.js is a new interpretation, not an emulation or port, and it is in active development. You can also read how this differs from processing.js, or about how this relates to Processing.\n\nPlease see the get started page for instructions for setting up your editing environment and project.\n\nThere are two main functions you will use in your program. The block runs once, and is typically used for initialization, or for creating a program that does not need a loop running code repeatedly. The block runs repeatedly, and is used for animation.\n\nFor your first \"Hello World\" program, create a block and add one line:\n\nIf you view this in your browser, you should see a single line.\n\nAdding a block enables you to incorporate animation. In the example below, a variable is updated every time runs, moving a circle across the screen.\n\nThere is a full set of 2D drawing methods, to create and styles graphics, text, and images. See the reference for the full listing, and the examples page.\n\nTo load p5 onto the page, either or is required (but not both), or you may use instance mode to have more control over when and how your sketch gets loaded.\n\nBy default, the drawing canvas has a size of 100x100. If you want to set a custom size, use the function. It is a good idea to always make this the first line in . The code below sets the canvas to size 600x400:\n\nwill create a new drawing canvas in the size specified and append it to the html page you are working with. If there is other content in the body of your html page, it will add on to the page after that, so you may not see it at the top of the window.\n\nThe canvas will also be affected by any existing CSS (styling) on the page, including default set by your browser. For example, a lot of browsers have a default padding around the end of the page. If you are noticing that your canvas isn't all the way at the upper left corner of your window, this is probably why. To fix this, you can add a line to the of your html file that overrides the default padding, like this:\n\nIf you would like to specify a location for the canvas, rather than appending directly to the end, you can use the method. In the of your html file, create a container where you would like your canvas to get inserted, with ID of your choice:\n\nThen use a variable to store a pointer to the canvas you created, and call on this variable:\n\nThe p5.js API provides a lot of functionality for creating graphics, but there is some native HTML5 Canvas functionality that is not exposed by p5. You can still call it directly using the variable , as in the example below. See this reference for the native canvas API.\n\np5.js has a set of methods for handling mouse and touch interaction. The list below shows how they relate conceptually.\n\nYou may notice with touch, unless you have defined a method, the screen may react with default touch behavior for your mobile device (i.e. your whole screen view may move around when you drag your finger). If you add an empty method, you should see this stop.\n\nMany browsers have default behaviors for various interactions. For example, touchMoved on a mobile device may result in dragging the whole window. To prevent these behaviors, add a line at the end of your defined functions.\n\nJS is single threaded and synchronous, meaning one line of code completes before the next one runs. However, there are asynchronous functions used that make the program flow faster. Loading images, external files, and URLs are generally handled by async functions. (Note: Loading files from the sketch folder will require that you are running a local server, see here for a tutorial about how to set one up on your computer.)\n\nAll of the load functions will accept a callback function as an optional last argument. In the following example, an image is drawn once it is loaded.\n\nCompare this to calling directly after , which ends up blank:\n\nAlternatively, you could use the function. If a block exists it runs first, then will wait until everything in there has completed before it gets run, so you can make use of things loaded in preload in setup and draw. Note that nothing else should be in preload besides load calls, all other initialization should happen in setup. No callbacks are required for load functions in preload.\n\nAs mentioned above, if your sketch has large media dependencies such as images, audio or videos, these should be loaded into your sketch using the function. Since loading large files can take some time, you might want to display a loading screen to your users. This will convey that your sketch is indeed running — it just has a lot of cool things to load first. To add a loading screen to your p5.js sketch, all you need to do is include an HTML element on your page with the id . It would look something like the following:\n\n<div id=\"p5_loading\" class=\"loadingclass\">this could be some sweet graphics loading lots of bits.</div>\n\nP5.js looks through your HTML to see if you have included an element with the id . P5.js will use this element and its content as the loading screen for your sketch. Since the loading element is included in your HTML, you can add any additional classes and/or style the element anyway you see fit.\n\nFor an example of a sketch using a loading screen refer to in the p5.js source.\n\nThere are a few variables and functions that make browser interaction easier, many more to come!\n\nYou should also be able to use any native JS functions in your p5.js sketch without a problem, the MDN JavaScript reference is a good place to learn more. Read the next section to learn how to make p5 play extra nice with the rest of your project.\n\nBy default, all p5.js functions are in the global namespace (i.e. bound to the window object), meaning you can call them simply , , etc. However, this might be inconvenient if you are mixing with other JS libraries (synchronously or asynchronously) or writing long programs of your own. p5.js currently supports two ways around this problem: \"instance mode\" and \"on-demand global mode\". In instance mode, all p5 functions are bound up in a single variable instead of polluting your global namespace.\n\nConsider a program like this:\n\nA conversion to \"instance mode\" looks like this:\n\nOptionally, you can specify a default container for the canvas and any other elements to append to with a second argument. You can give the ID of an element in your html, or an html node itself:\n\nNote that creating instances like this also allows you to have more than one p5 sketch on a single web page, as they will each be wrapped up with their own set up variables. Of course, you could use iframes to have multiple sketches in global mode.\n\nAnother option is on-demand global mode. To initialize on-demand global mode at any point in a web page's lifetime, simply call without any arguments. Calling p5 explicitly this way gives you more control over how your sketch is loaded, which is helpful when you’re working with other libraries.\n\nAlong these lines, on-demand global mode also allows p5 to be instantiated before page load, so folks who really want to work around the assigning variables using p5 functions and variables before setup limitation can write the following sorts of sketches:\n\nOne of the core ideas behind p5.js is that your sketch is not just the graphics canvas but the whole web page in your browser. For this reason, there is the p5.dom library that makes it easy to interact with other HTML5 objects, including text, hyperlink, image, input, video, audio, and webcam. There is also a p5.sound library that provides a friendly interface to HTML5 web audio API for loading, playing, and synthesizing sounds.\n\nLearn how to use these libraries or develop your own here.\n\nYou can use any editing environment you like, in addition, the p5.js web editor has been officially launched , you can try that out too. The p5.js web editor handles setting up projects and the server is set up internally for you. You can usually run p5.js sketches without a server, but it is required if you are doing certain things like loading external files. Here are the instructions for setting up a local server.\n\nThe main goal of Processing.js is to execute Processing files in HTML5, but not necessarily to write native HTML5. It supports a mixed syntax of Processing and JavaScript, where the JavaScript is not really meant to be consumed by the end-user. Processing.js is a port of Processing to JS, using regex to convert Java into JS. It is a good tool for those that want to run simple sketches on the web, however, it is quite opaque. It can be difficult for someone to understand how it works, how to fix things when it doesn't work, or how to modify or extend the library. As Processing.js says on their website, \"it's not magic, but almost.\"\n\nIn contrast, with p5 we are reimagining Processing's original goals in native JavaScript, in a way that is intended to be transparent and intuitive. It is easy to translate a sketch from Processing to p5 and the process of doing so begins to teach people the basics of JS. From there, they are able to begin writing native JS using a syntax that feels familiar but appropriate for the context. We are closely studying the decisions Processing has made, but also always questioning to see if there are design decisions that would make the library cleaner, stronger, and more intuitive.\n\nAdditionally, p5.js extends beyond canvas drawing to allow people to create, access and manipulate other HTML elements. Through this framework beginners begin to explore and understand HTML, JavaScript, and CSS, and the way they work together in the browser. p5.js will also have a system for people to contribute add-on modules to deal with things like audio, video, various input devices, and data. There is also an option to use p5 globally or instantiated within a namespace, so it can be compatible with other JS libraries.\n\nMost importantly, this project is in active development, with enthusiastic support and contributions from around the world. We have begun working with various schools and institutions to teach workshops and classes, in hopes of integrating it into curricula as a tool for understanding the web.\n\nWe are also putting a lot of energy into making the documentation clear, for developers as well as users. We'd like this to be a project that anyone feels welcome and empowered to be a part of, whether that's contributing documentation, writing code, teaching with it, or using it to create.\n\nThis project developed out of a Fellowship with the Processing Foundation exploring the future of Processing with JavaScript. Documentation of research in process and references is here.\n\nBy default, all p5.js functions are in the global namespace (i.e. bound to the window object), meaning you can call them simply , , etc. However, this might be inconvenient if you are mixing with other JS libraries or writing long programs of your own. To solve this problem, there is something we call \"instance mode\", where all p5 functions are bound up in a single variable instead of polluting your global namespace. See more info here.\n\nWell, technically, you can by using on-demand global mode. But that's a less common use of p5, so we'll explain that later and talk about the more common case first. In regular global mode, p5 variable and function names are not available outside , , , etc. (Except in the case where they are placed inside functions that are called by one of these methods.) What this means is that when declaring variables before , you will need to assign them values inside if you wish to use p5 functions. For example:\n\nThe explanation for this is a little complicated, but it has to do with the way the library is setup in order to support both global and instance mode. To understand what's happening, let's first look at the order things happen when a page with p5 is loaded (in global mode).\n• of HTML page loads (when this is complete, the onload event fires, which then triggers step 3).\n• p5 is started, all functions are added to the global namespace.\n\nSo the issue is that the scripts are loaded and evaluated before p5 is started, when it's not yet aware of the p5 variables. If we try to call them here, they will cause an error. However, when we use p5 function calls inside setup() and draw() this is ok, because the browser doesn't look inside functions when the scripts are first loaded. This is because the setup() and draw() functions are not called in the user code, they are only defined, so the stuff inside of them isn't run or evaluated yet.\n\nIt's not until p5 is started up that the setup() function is actually run (p5 calls it for you), and at this point, the p5 functions exist in the global namespace.\n\nWe mentioned on-demand global mode earlier. This mode is most useful when you're building a program that uses other libraries and you want to control how p5 is loaded on the page with the others. You can read more about it here. But another interesting use of on-demand global mode is the ability to call p5 explicitly and then use p5 functions outside of . Here's an example:\n\nYou may get a warning saying that p5.js has been imported twice, but things should still work as expected."
    },
    {
        "link": "https://openlab.citytech.cuny.edu/mtec1101-hd88-sp2022/files/2019/03/Make_Getting-Started-with-p5dotjs.pdf",
        "document": ""
    },
    {
        "link": "https://p5js.org/examples/shapes-and-color-shape-primitives",
        "document": "This program demonstrates the use of the basic shape primitive functions square(), rect(), ellipse(), circle(), arc(), line(), triangle(), and quad()."
    },
    {
        "link": "https://p5js.org/examples",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/64562382/p5-js-ellipse-and-rect-behavior",
        "document": "The alignment of the ellipse depends on the and the alignment of the rectangle depends on the . While the default rectangle mode is , the default ellipse mode is . Use the same mode for both shapes:"
    },
    {
        "link": "https://pdm.lsupathways.org/2_graphics/1_proceduraldrawing/1_lesson_1",
        "document": "p5.js allows us to create basic shapes with the use of the following functions:\n\nEach shape function requires a different set of arguments to be added when called. Typically, the first two arguments dictate the X and Y coordinate of a point of the shape’s placement on the canvas, while the following arguments dictate the shapes size:\n• ellipse(X location of the shape’s center, Y location of the shape’s center, Diameter (Total Width of the shape), Diameter (Total Height of the shape)\n• A perfect circle would use the same number for the third and fourth arguments.\n• rect(X location of the shape’s upper lefthand point, Y location of the shape’s upper lefthand point, Total Width of the shape, Total Height of the shape)\n• Since the shape is placed on the canvas by it’s upper lefthand corner, the location of the other corners of the square can be determined by the numbers used for the third and fourth arguments.\n• Example: calling would have the upper lefthand corner located at 50 X & 50 Y, and the upper righthand corner at 150 X & 50 Y, and the lower righthand corner at 150 X & 150 Y.\n• A perfect square would use the same number for the third and fourth argument.\n• triangle(X location of the shape’s first point, Y location of the shape’s first point, X location of the shape’s second point, Y location of the shape’s second point, X location of the shape’s third point, Y location of the shape’s third point)\n• Unlike ellipses and rectangles, p5.js draws triangles based on the coordinates of all three of the shape’s corner points. You can place these point coordinate pairs in any order you’d like, but it is best to imagine drawing the shape on the canvas moving from left to right or right to left in order to keep track of the point coordinates in your head. A good practice is leaving a comment in your code to identify the order of your corners.\n• line(_X location of of the first end of the line, Y location of the first end of the line, Y position of the second end of the line, Y position of the second end of the line)\n• Similarly to triangles, P5 draws a straight line based on the coordinates of the two end-points of the line. All of the methods for keeping track of the triangle corners can be applied to lines as well.\n• The line thickness and color can be customized with the and functions as shown below.\n• arc(X location of the shape’s center, Y location of the shape’s center, Total Width of the shape, Total Height of the shape, Start of the arc’s perimeter, Stop of the arc’s perimeter)\n• The first four arguments are the same as those used to create an ellipse.\n• The fifth argument states where to start drawing the outer perimeter of the circle. p5.js draws the perimeter counterclockwise, and the sixth argument tells the function at what point to stop drawing the perimeter.\n• Be default, p5.js requires radians (PI, QUARTER_PI, etc.) to be used for the fifth and sixth arguments of but it is a bit easier to use degrees (0-360). In order to use degrees instead, call before calling your function and p5.js will convert the fifth and sixth arguments properly.\n• Example: draws a half circle split vertically, with its center located at 120 X & 15 Y, 60 pixels wide and 60 pixels tall (if the entire circle was drawn), with a perimeter that starts at 90 degrees and extends counterclockwise stopping at 270 degrees.\n• By default, arcs are left “open” when drawn. To add a stroke outline to the flat edges of an arc (to the shape’s center), add the word PIE as an optional seventh argument to the function creating a pie-graph shape.\n• There are a total of three options for the arc’s optional seventh argument. In addition to PIE, the argument CHORD connects the connects the edges of the arc with a straight line that avoids the center of the shape. OPEN resets the arc to its default settings.\n\nAn example of these four basic shapes can be found in the code below. Try changing some of the arguments to see how this modifies the shape’s location or appearance:\n\nSee the Pen Example Code by LSU DDEM ( @lsuddem) on CodePen.\n\nThere are a few other function for drawing shapes in the p5 library. We won’t refer to them in this class, but feel free to check them out in the p5 reference page and see what you can make!\n\np5 draws shapes with a thin black outline by default. This outline is called the stroke, and it can be modified in a number of ways.\n\nThe function changes the color of all lines drawn after it is called. It can take either a string or RGB color values as arguments (in the next lesson), similar to the function.\n\nThe thickness of a shape’s stroke can be set with the function. It takes a single argument that sets the thickness in units of pixels.\n\nTo remove an outline from a shape entirely, use the function. You will then have to call again to set the values for the next shape you need with an outline.\n\nThe following code adds changeable stroke color and stroke weight to the same shapes from the previous code. Try adding the to different places in the code to see how it affects the shapes:\n\nSee the Pen Example Code by LSU DDEM ( @lsuddem) on CodePen.\n\nWe can create complex images by overlapping basic shapes, but we can also design our our shapes by connecting multiple vertices together. To do this, we first call the function, then one function with a pair of X & Y coordinates for the location of each angle point of our shape. These form the corners of the shape, just like the arguments of the function. Finally, we call the function to designate that we have completed our design. Similar to the function, p5 draws connects the coordinates in our functions in the order in which we code them, so take extra care to have a plan in place for working in a clockwise or counterclockwise order or you will have stroke outlines bisecting your finished shape. When in doubt, it is always a good idea to label the vertex points in a custom shape.\n\nLike the arc() function, the final line segment of our custom shape is left “open”. To add a final stroke and “close” the shape, we can add the word CLOSE as an argument in the function. (you can also add another vertex with the same location as the first instance of , but adding CLOSE as an argument is easier.)\n\nThe following code shows two custom shapes drawn using the , , , procedure:\n\nSee the Pen Example Code by LSU DDEM ( @lsuddem) on CodePen.\n\nThese shape functions can be used in various repetitions and combinations within P5 to create a near limitless variety of images, however this is not an exhaustive list of all available functions. Depending on the context of a particular assignment or your Final Integration Project you may need to utilize additional drawing functionality. Be sure to look at the P5 Reference material for detailed information on these and other functions within P5.\n\nBefore moving onto the next lesson, try and draw one of each of the shapes mentioned in this chapter. Give them all unique colors and outlines with fill() and stroke(). How creative can you get with the custom shape functions?"
    },
    {
        "link": "https://cratecode.com/info/p5js-drawing-shapes",
        "document": "There's an artist in all of us, and with the help of the p5.js library, you can awaken that artist and create stunning visuals right in your browser! Let's dive into the world of shapes and colors using p5.js.\n\nFirst things first - we need to get p5.js up and running. To begin, create an HTML file and include the p5.js library using a script tag. You can either download p5.js from the official website or use a CDN (Content Delivery Network) like this:\n\nNow, create a file in the same directory as your HTML file. This file is where we'll write our p5.js code.\n\nBefore we start drawing shapes, we need a canvas to draw on. p5.js makes this easy with the function. We also need to define two essential functions: and .\n\nThe function is called once when the program starts, and the function is called repeatedly, creating an animation loop.\n\nNow that we have our canvas, let's start drawing some shapes!\n\np5.js offers a wide range of primitives to draw shapes. In this guide, we'll cover rectangles, circles, and triangles.\n\nTo draw a rectangle, use the function, which requires four parameters: the x and y coordinates of the top-left corner, and the rectangle's width and height.\n\nDrawing circles is just as straightforward with the function. You'll need three parameters: the x and y coordinates of the circle's center and the diameter.\n\nTriangles are a bit more complex, as we need to specify the x and y coordinates of each vertex. The function takes six parameters: x1, y1, x2, y2, x3, and y3.\n\nOur shapes would look more vibrant with some colors and styles! p5.js allows you to customize the stroke (border color), fill, and stroke weight (border thickness).\n\nAnd there you have it - a guide to creating art with shapes using the p5.js library. It's just the tip of the iceberg, though, so be sure to explore the p5.js reference for more shape functions, colors, and styles. Happy coding and drawing!\n\nHow can I draw a rectangle or a square in p5.js? To draw a rectangle, use the function which takes four arguments: where and are the coordinates of the rectangle's top-left corner, and and are its width and height, respectively. For example: To draw a square, you can use the same function and set the width and height to be equal. For example:"
    }
]