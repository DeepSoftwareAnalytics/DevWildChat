[
    {
        "link": "https://python-geojson.readthedocs.io",
        "document": "\n• An implementation of the Python __geo_interface__ Specification\n\npython-geojson is compatible with Python 2.6, 2.7, 3.2, 3.3, and 3.4. It is listed on PyPi as ‘geojson’. The recommended way to install is via pip:\n\nAll of the GeoJSON Objects implemented in this library can be encoded and decoded into raw GeoJSON with the , , , and functions. This encoding/decoding functionality shown in the previous can be extended to custom classes using the interface described by the __geo_interface__ Specification.\n\nyields all coordinate tuples from a geometry or feature object. maps a function over all coordinate tuples and returns a geometry of the same type. Useful for translating a geometry in space or flipping coordinate order."
    },
    {
        "link": "https://pypi.org/project/geojson",
        "document": "A required part of this site couldn’t load. This may be due to a browser extension, network issues, or browser settings. Please check your connection, disable any ad blockers, or try using a different browser."
    },
    {
        "link": "https://geojson.readthedocs.io",
        "document": "\n• An implementation of the Python __geo_interface__ Specification\n\nAll of the GeoJSON Objects implemented in this library can be encoded and decoded into raw GeoJSON with the , , , and functions. Note that each of these functions is a wrapper around the core function with the same name, and will pass through any additional arguments. This allows you to control the JSON formatting or parsing behavior with the underlying core functions. This encoding/decoding functionality shown in the previous can be extended to custom classes using the interface described by the __geo_interface__ Specification. GeoJSON Object-based classes in this package have an additional attribute which rounds off coordinates to 6 decimal places (roughly 0.1 meters) by default and can be customized per object instance. Precision can be set at the package level by setting After setting the DEFAULT_PRECISION, coordinates will be rounded off to that precision with or . Following one of those with is a quick and easy way to scale down the precision of excessively precise, arbitrarily-sized GeoJSON data."
    },
    {
        "link": "https://conservancy.umn.edu/server/api/core/bitstreams/93ad01a6-a2d5-40b1-baba-653dc3fdd559/content",
        "document": ""
    },
    {
        "link": "https://medium.com/data-science/how-to-display-data-from-geojson-files-using-the-folium-python-library-f7284cb2a256",
        "document": "How to Display Data From GeoJSON Files Using the Folium Python Library\n\nFolium is an excellent python library that makes it easy to visualise geospatial data on interactive maps using the power of Leaflet.js. In my previous article, I covered how to display individual markers on a folium map, but we can use folium also display data that has been stored within a GeoJSON file.\n\nGeoJSON is a commonly used file format for storing geospatial data and uses JavaScript Object Notation. These files can store location data, shapes, points, surfaces, etc.\n\nWithin this article, we will see how to display polygons of UK North Sea oil and gas fields that have been stored within a GeoJSON file format.\n\nThe data for this article is sourced from data.gov.uk and is licenced under the Open Government Licence. The data can be viewed and downloaded from the following website.\n\nSetting up the Libraries and Displaying a Basic Folium Map"
    },
    {
        "link": "https://stackoverflow.com/questions/72337147/turn-geojson-feature-collection-into-geojson-list",
        "document": "I have used the geopandas Python library to create a feature collection of observations. I want to pass these features into the paquo library, specifically to the function. The documentation says that this takes a geojson list. How can I use Python to convert my feature collection into a geojson list?\n\nA small (or smaller) example of the geojson feature collection I am working with. This is currenlty stored in a file called and so I would like to load it, convert it into a json list and then pass it to the paquo function."
    },
    {
        "link": "https://stackoverflow.com/questions/16920700/building-a-geojson-with-python",
        "document": "I want to generate dynamically a geoJSON with a variable number of polygons. Example for 2 polygons:\n\nI have a function which gives me the list of coordinates for each polygon, so I can create a list of polygons, so I am able to build the geoJSON iterating it with a for loop.\n\nThe problem is that I don't see how to do it easily (I thought for example in returning the list as a string, but building the geoJSON as a string looks like a bad idea).\n\nI have been suggested this very pythonic idea:\n\nBut since I am adding a variable number of Polygons instead of a list of points, this solutions does not seem suitable. Or at least I don't know how to adapt it.\n\nI could build it as a string, but I'd like to do it in a smarter way. Any idea?"
    },
    {
        "link": "https://gis.stackexchange.com/questions/73768/converting-geojson-to-python-objects",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://github.com/jazzband/geojson",
        "document": "\n• An implementation of the Python __geo_interface__ Specification\n\ngeojson is compatible with Python 3.7 - 3.13. The recommended way to install is via pip:\n\nThis library implements all the GeoJSON Objects described in The GeoJSON Format Specification.\n\nAll object keys can also be used as attributes.\n\nThe objects contained in GeometryCollection and FeatureCollection can be indexed directly.\n\nVisualize the result of the example above here. General information about Point can be found in Section 3.1.2 and Appendix A: Points within The GeoJSON Format Specification.\n\nVisualize the result of the example above here. General information about MultiPoint can be found in Section 3.1.3 and Appendix A: MultiPoints within The GeoJSON Format Specification.\n\nVisualize the result of the example above here. General information about LineString can be found in Section 3.1.4 and Appendix A: LineStrings within The GeoJSON Format Specification.\n\nVisualize the result of the example above here. General information about MultiLineString can be found in Section 3.1.5 and Appendix A: MultiLineStrings within The GeoJSON Format Specification.\n\nVisualize the results of the example above here. General information about Polygon can be found in Section 3.1.6 and Appendix A: Polygons within The GeoJSON Format Specification.\n\nVisualize the result of the example above here. General information about MultiPolygon can be found in Section 3.1.7 and Appendix A: MultiPolygons within The GeoJSON Format Specification.\n\nVisualize the result of the example above here. General information about GeometryCollection can be found in Section 3.1.8 and Appendix A: GeometryCollections within The GeoJSON Format Specification.\n\nVisualize the results of the examples above here. General information about Feature can be found in Section 3.2 within The GeoJSON Format Specification.\n\nVisualize the result of the example above here. General information about FeatureCollection can be found in Section 3.3 within The GeoJSON Format Specification.\n\nAll of the GeoJSON Objects implemented in this library can be encoded and decoded into raw GeoJSON with the , , , and functions. Note that each of these functions is a wrapper around the core json function with the same name, and will pass through any additional arguments. This allows you to control the JSON formatting or parsing behavior with the underlying core json functions.\n\nThis encoding/decoding functionality shown in the previous can be extended to custom classes using the interface described by the __geo_interface__ Specification.\n\nGeoJSON Object-based classes in this package have an additional precision attribute which rounds off coordinates to 6 decimal places (roughly 0.1 meters) by default and can be customized per object instance.\n\nPrecision can be set at the package level by setting geojson.geometry.DEFAULT_PRECISION\n\nAfter setting the DEFAULT_PRECISION, coordinates will be rounded off to that precision with geojson.load or geojson.loads. Following one of those with geojson.dump is a quick and easy way to scale down the precision of excessively precise, arbitrarily-sized GeoJSON data.\n\nyields all coordinate tuples from a geometry or feature object.\n\nmaps a function over all coordinate values and returns a geometry of the same type. Useful for scaling a geometry.\n\nmaps a function over all coordinates and returns a geometry of the same type. Useful for changing coordinate order or applying coordinate transforms.\n\nmaps a function over each geometry in the input.\n\nmethod provides collection of errors when validation GeoJSON objects.\n\nTo build this project, run . To run the unit tests, run . To run the style checks, run (install flake8 if needed)."
    },
    {
        "link": "https://gis.stackexchange.com/questions/450915/converting-pandas-column-with-featurecollection-to-geojson",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    }
]