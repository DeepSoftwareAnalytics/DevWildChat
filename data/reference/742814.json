[
    {
        "link": "https://stackoverflow.com/questions/3108285/in-python-script-how-do-i-set-pythonpath",
        "document": "You don't set , you add entries to . It's a list of directories that should be searched for Python packages, so you can just append your directories to that list.\n\nIn fact, is initialized by splitting the value of on the path separator character ( on Linux-like systems, on Windows).\n\nYou can also add directories using , and that method will also take into account files existing within the directories you pass. (That would not be the case with directories you specify in .)"
    },
    {
        "link": "https://docs.python.org/3/using/cmdline.html",
        "document": "The CPython interpreter scans the command line and the environment for various settings."
    },
    {
        "link": "https://stackoverflow.com/questions/7850908/what-exactly-should-be-set-in-pythonpath",
        "document": "I'm going through and writing a setup doc for other developers at work for a python project and I've been reading up on the environment variable. I'm looking at my current development system and think I have a few things set wrong that is causing my IDE (IntelliJ) to behave incorrectly when looking up the python libraries.\n\nI've looked at the documentation here and here and I'm still unsure of what should actually be in the environment variable.\n\nMy current is set to . Should I also add the directories from ?\n\nBased on the below information, does not need to be set unless there are non-standard libraries that you want python to be able to find by default. For instance, when I install wxPython from the installer it will add its libraries to . I do set to the root of the python installation so that I can add it to my system environment variable so that I can run python from any where."
    },
    {
        "link": "https://bic-berkeley.github.io/psych-214-fall-2016/using_pythonpath.html",
        "document": "See the Python 3 docs for PYTHONPATH.\n\nThe PYTHONPATH variable has a value that is a string with a list of directories that Python should add to the sys.path directory list.\n\nThe main use of PYTHONPATH is when we are developing some code that we want to be able to import from Python, but that we have not yet made into an installable Python package (see: ).\n\nReturning to the example module and script in Where does Python look for modules?:\n\nAt the moment, on my machine, PYTHONPATH is empty:\n\nBefore we set PYTHONPATH correctly, will fail with:\n\nNow I set the PYTHONPATH environment variable value to be the path to the directory:\n\nYou probably don’t want to have to set PYTHONPATH every time you start up a terminal and run a Python script. Luckily, we can make the PYTHONPATH value be set for any terminal session, by setting the environment variable default. For example, let’s say I wanted add the directory to the PYTHONPATH: If you are on a Mac¶\n• None Open the file in your text editor – e.g. ;\n• None Add the following line to the end:\n• None Start again, to read in the new settings, and type this: It should show something like . If you are on Linux¶\n• None Open the file in your text editor – e.g. ;\n• None Add the following line to the end:\n• None Start your terminal application again, to read in the new settings, and type this: It should show something like . If you are on Windows¶ Got to the Windows menu, right-click on “Computer” and select “Properties”: From the computer properties dialog, select “Advanced system settings” on the left: From the advanced system settings dialog, choose the “Environment variables” button: In the Environment variables dialog, click the “New” button in the top half of the dialog, to make a new user variable: Give the variable name as and the value is the path to the directory. Choose OK and OK again to save this variable. Now open a Window (Windows key, then type and press Return). Type: to confirm the environment variable is correctly set. If you want your IPython sessions to see this new variable, you’ll have to restart your terminal and restart IPython so that it picks up from the environment settings. You can check the current setting of environment variables, using the dictionary. It contains all the defined environment variables of the shell that started Python. For example, you can check the value of the PYTHONPATH environment variable, if it is defined:"
    },
    {
        "link": "https://simplilearn.com/tutorials/python-tutorial/python-path",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/3701646/how-to-add-to-the-pythonpath-in-windows-so-it-finds-my-modules-packages",
        "document": "I tried adding C:\\My_Projects\\; to my Windows Path variable from the Windows GUI ( My Computer > Properties > Advanced System Settings > Environment Variables ). But it still doesn't read the coltrane module and generates this error:\n\nI have a directory which hosts all of my Django apps ( C:\\My_Projects ). I want to add this directory to my PYTHONPATH so I can call the apps directly.\n\nThis question already has answers here :\n\nYou know what has worked for me really well on windows. Just add the path as C:\\Python27 (or wherever you installed python) Then under system variables I create a new Variable called . In this variable I have This is the best way that has worked for me which I hadn't found in any of the docs offered. EDIT: For those who are not able to get it, Please add along with it. Else it will never work.\n\nThe PYTHONPATH environment variable is used by Python to specify a list of directories that modules can be imported from on Windows. When running, you can inspect the variable to see which directories will be searched when you import something. To set this variable from the Command Prompt, use: . To set this variable from PowerShell, use: just before you launch Python. Setting this variable globally through the Environment Variables settings is not recommended, as it may be used by any version of Python instead of the one that you intend to use. Read more in the Python on Windows FAQ docs.\n\nJust use the standard package , which was made for this job! and here is how (plagiating my own answer to my own question on the very same topic):\n• Create this folder if it does not exist yet:\n• Create a file (with exactly this filename, or it won't work) in this folder containing the content of , either manually or using something like the following code. Of course, you have to change to the correct path to your custom import location. And the next time you start Python, is present in your , without having to touch system-wide settings. Bonus: the above steps work on Linux, too! Why does this work? From the documentation of standard library package : [Then] an attempt is made to import a module named , which can perform arbitrary site-specific customizations. [...]. So if you create a module named anywhere in PYTHONPATH, package site will execute it at Python startup. And by calling , the can be safely extended to your liking.\n\nI got it worked in Windows 10 by following below steps. Under environment variables, you should only add it under PATH of \"System Variables\" and not under \"User Variables\". This is a great confusion and eats time if we miss it. Also, just try to navigate to the path where you got Python installed in your machine and add it to PATH. This just works and no need to add any other thing in my case.I added just below path and it worked. Most important, close command prompt, re-open and then re-try typing \"python\" to see the version details. You need to restart command prompt to see the version after setting up the path in environment variables. After restarting, you should be able to see the python prompt and below info when typing python in command prompt:\n\nBefore adding a path, its necessary to do some debugging, what path already exists. Let's say you have to execute Put the below lines in main.py file and notice what paths python interpreter is looking at: If you don't find the path that you need and want to add your path. Follow the below suggestions.\n• None First take note of what PYTHONPATH is already there. This is important if something goes terribly wrong.\n• None Set a temporary python path. Make sure to use CMD and not powershell.\n• None Start new terminal, start virtual environment and check if sys.path worked?"
    },
    {
        "link": "https://stackoverflow.com/questions/72033434/python-how-to-set-pythonpath-in-window-10",
        "document": "I'm trying to set pythonpath but when I follow in some example in other stackoverflow, I just get a red message or nothing happened.\n\nIn my picture, u can see, no my folder D:\\DemoPython\n\nDoes anyone have exactly how to set it?, please give me some examples or the exact answer would be better. Thank so much."
    },
    {
        "link": "https://realpython.com/add-python-to-path",
        "document": "You may need to add Python to if you’ve installed Python, but typing on the command line doesn’t seem to work. You may be getting a message saying that the term isn’t recognized, or you may end up with the wrong version of Python running.\n\nA common fix for these problems is adding Python to the environment variable. In this tutorial, you’ll learn how to add Python to . You’ll also learn about what is and why is vital for programs like the command line to be able to find your Python installation.\n\nThe steps that you’ll need to take to add something to will depend significantly on your operating system (OS), so be sure to skip to the relevant section if you’re only interested in this procedure for one OS.\n\nNote that you can use the following steps to add any program to , not just Python.\n\nHow to Add Python to on Windows The first step is to locate the directory in which your target Python executable lives. The path to the directory is what you’ll be adding to the environment variable. To find the Python executable, you’ll need to look for a file called . The Python executable could be in a directory in or in your folder, for instance. If the executable were in , then the path would typically look something like this: In your case, the part would be replaced by your currently logged-in user name. Once you’ve found the executable, make sure it works by double-clicking it and verifying that it starts up a Python REPL in a new window. If you’re struggling to find the right executable, you can use Windows Explorer’s search feature. The issue with the built-in search is that it’s painfully slow. To perform a super-fast full system search for any file, a great alternative is Everything: Those paths highlighted in yellow, namely those at and , would be ideal candidates to add to because they look like executables at the root level of an installation. Those highlighted in red wouldn’t be suitable because some are part of a virtual environment—you can see in the path—and some are shortcuts or internal Windows installations. You may also encounter Python executables that are installed within the folder for a different program. This is due to the fact that many applications bundle their own version of Python within them. These bundled Python installations would also be unsuitable. Once you’ve located your Python executable, open the Start menu and search for the Edit the system environment variables entry, which opens up a System Properties window. In the Advanced tab, click on the button Environment Variables. There you’ll see User and System variables, which you’ll be able to edit: In the section entitled User Variables, double-click on the entry that says Path. Another window will pop up showing a list of paths. Click the New button and paste the path to your Python executable there. Once that’s inserted, select your newly added path and click the Move Up button until it’s at the top. That’s it! You may need to reboot your computer for the changes to take effect, but you should now be able to call from the command line. For setting the environment variable from the command line, check out the section on Configuring Environment Variables in the Windows Python coding setup guide. You can also find instructions in the supplemental materials: Supplemental Code: Click here to download free supplemental code that’ll walk you through changing PATH across operating systems. You may also want to set up on your Linux or macOS machine, or perhaps you’re using Windows Subsystem for Linux (WSL). If so, read the next section for the procedure on UNIX-based systems.\n\nHow to Add Python to on Linux and macOS Since Python typically comes pre-installed on UNIX-based systems, the most common problem on Linux and macOS is for the wrong to run, rather than not finding any . That said, in this section, you’ll be troubleshooting not being able to run at all. Note: Depending on your particular system, you may have a program for Python 2, and a for Python 3. In other instances, both and will point to the same executable. The first step is locating your target Python executable. It should be a program that you can run by first navigating to the containing directory and then typing on the command line. You need to prepend the call to the Python executable with its relative path in the current folder ( ) because otherwise you’ll invoke whichever Python is currently recorded on your . As you learned earlier, this might not be the Python interpreter that you want to run. Often the Python executable can be found in the folder. But if Python is already in the folder, then it’s most likely already on because is automatically added by the system. If this is the case, then you may want to skip to the section on the order of paths within . Since you’re probably here because you’ve installed Python but it’s still not being found when you type on the command line, though, you’ll want to search for it in another location. Note: A great search utility for quickly searching large folders is fzf. It works from the command line and will search all files and folders within your current working directory. So you might search for from your home directory, for instance. fzf will then show you the paths that contain . That said, it might be that has been removed from altogether, in which case you might skip forward to the section on mangaging . Once you’ve located your Python executable and are sure it’s working, take note of the path for later. Now it’s time to start the process of adding it to your environment variable. First, you’ll want to navigate to your home folder to check out what configuration scripts you have available: You should see a bunch of configuration files that begin with a period ( ). These are colloquially known as dotfiles and are hidden from by default. One or two dotfiles get executed whenever you log in to your system, another one or two run whenever you start a new command-line session, and most others are used by other applications for configuration settings. You’re looking for the files that run when you start your system or a new command-line session. They’ll probably have names similar to these: The keywords to look for are profile and login. You should, in theory, only have one of these, but if you have more than one, you may need to read the comments in them to figure out which ones run on login. For example, file on Ubuntu will typically have the following comment: # This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login So, if you have but also , then you’ll want to use . You can also use a or file, which are scripts that run whenever you start a new command-line session. Run command (rc) files are common places to put configurations. Note: Pedantically speaking, rc files are generally for settings that affect the look and feel of your command-line prompt, not for configuring environment variables like . But you can use rc files for your configuration if you prefer. To add the Python path to the beginning of your environment variable, you’re going to be executing a single command on the command line. Use the following line, replacing with your actual path to the Python executable, and replace with the login script for your system: This command adds to the end of . The command prepends to the environment variable. It’s similar to the following operation in Python: Since is just a string separated by colons, prepending a value involves creating a string with the new path, a colon, then the old path. With this string, you set the new value of . To refresh your current command-line session, you can run the following command, replacing with whichever login script you’ve chosen: Now, you should be able to call from the command line directly. The next time you log in, Python should automatically be added to . If you’re thinking this process seems a bit opaque, you’re not alone! Read on for more of a deep dive into what’s going on.\n\nis an environment variable that contains a list of paths to folders. Each path in is separated by a colon or a semicolon—a colon for UNIX-based systems and a semicolon for Windows. It’s like a Python variable with a long string as its value. The difference is that is a variable accessible by almost all programs. Programs like the command line use the environment variable to find executables. For example, whenever you type the name of a program into the command line, the command line will search various places for the program. One of the places that the command line searches is . All the paths in need to be directories—they shouldn’t be files or executables directly. Programs that use take each directory in turn and search all the files within it. Subdirectories within directories in don’t get searched, though. So it’s no good just adding your root path to ! It’s also important to note that programs that use typically don’t search for anything except executables. So, you can’t use as a way to define shortcuts to commonly used files.\n\nUnderstanding the Importance of Order Within If you type into the command line, the command line will look in each folder in the environment variable for a executable. Once it finds one, it’ll stop searching. This is why you prepend the path to your Python executable to . Having the newly added path first ensures that your system will find this Python executable. A common issue is having a failed Python installation on your . If the corrupted executable is the first one that the command line comes across, then the command line will try and run that and then abort any further searching. The quick fix for this is just adding your new Python directory before the old Python directory, though you’d probably want to clean your system of the bad Python installation too. Reordering on Windows is relatively straightforward. You open the GUI control panel and adjust the order using the Move Up and Move Down buttons. If you’re on a UNIX-based operating system, however, the process is more involved. Read on to learn more.\n\nUsually, your first task when managing your is to see what’s in there. To see the value of any environment variable in Linux or macOS, you can use the command: Note that the symbol is used to tell the command line that the following identifier is a variable. The issue with this command is that it just dumps all the paths on one line, separated by colons. So you might want to take advantage of the command to translate colons into newlines: In this example, you can see that is present in . The ideal course of action would be to perform some archaeology and figure out where it gets added to , but for now, you just want to remove it by adding something to your login script . Since is a shell string, you don’t have access to convenient methods to remove parts of it, like you would if it were a Python list. That said, you can pipe together a few shell commands to achieve something similar: This command takes the list from the previous command and feeds it into , which, together with the switch, will filter out any lines containing the substring . Then you can translate the newlines back to colons, and you have a new and valid string that you use right away to replace your old string. Though this can be a handy command, the ideal solution would be to figure out where that bad path gets added. You could try looking at other login scripts or examine specific files in . In Ubuntu, for instance, there’s a file called , which typically defines a starting path for the system. In macOS, that might be . There can also be files and folders in that might contain startup scripts. The main difference between configurations in and in your home folder is that what’s in is system-wide, while whatever’s in your home folder will be scoped to your user. It can often involve a bit of archeology to track down where something gets added to your , though. So, you may want to add a line in your login or rc script that filters out certain entries from as a quick fix."
    },
    {
        "link": "https://docs.python.org/3/using/windows.html",
        "document": "This document aims to give an overview of Windows-specific behaviour you should know about when using Python on Microsoft Windows.\n\nUnlike most Unix systems and services, Windows does not include a system supported installation of Python. To make Python available, the CPython team has compiled Windows installers with every release for many years. These installers are primarily intended to add a per-user installation of Python, with the core interpreter and library being used by a single user. The installer is also able to install for all users of a single machine, and a separate ZIP file is available for application-local distributions.\n\nAs specified in PEP 11, a Python release only supports a Windows platform while Microsoft considers the platform under extended support. This means that Python 3.13 supports Windows 8.1 and newer. If you require Windows 7 support, please install Python 3.8.\n\nThere are a number of different installers available for Windows, each with certain benefits and downsides.\n\nThe full installer contains all components and is the best option for developers using Python for any kind of project.\n\nThe Microsoft Store package is a simple installation of Python that is suitable for running scripts and packages, and using IDLE or other development environments. It requires Windows 10 and above, but can be safely installed without corrupting other programs. It also provides many convenient commands for launching Python and its tools.\n\nThe nuget.org packages are lightweight installations intended for continuous integration systems. It can be used to build Python packages or run scripts, but is not updateable and has no user interface tools.\n\nThe embeddable package is a minimal package of Python suitable for embedding into a larger application.\n\nFour Python 3.13 installers are available for download - two each for the 32-bit and 64-bit versions of the interpreter. The web installer is a small initial download, and it will automatically download the required components as necessary. The offline installer includes the components necessary for a default installation and only requires an internet connection for optional features. See Installing Without Downloading for other ways to avoid downloading during installation. After starting the installer, one of two options may be selected:\n• None You will not need to be an administrator (unless a system update for the C Runtime Library is required or you install the Python Launcher for Windows for all users)\n• None Python will be installed into your user directory\n• None The Python Launcher for Windows will be installed according to the option at the bottom of the first page\n• None The standard library, test suite, launcher and pip will be installed\n• None If selected, the install directory will be added to your\n• None Shortcuts will only be visible for the current user Selecting “Customize installation” will allow you to select the features to install, the installation location and other options or post-install actions. To install debugging symbols or binaries, you will need to use this option. To perform an all-users installation, you should select “Customize installation”. In this case:\n• None You may be required to provide administrative credentials or approval\n• None Python will be installed into the Program Files directory\n• None The Python Launcher for Windows will be installed into the Windows directory\n• None Optional features may be selected during installation\n• None The standard library can be pre-compiled to bytecode\n• None If selected, the install directory will be added to the system\n• None Shortcuts are available for all users Windows historically has limited path lengths to 260 characters. This meant that paths longer than this would not resolve and errors would result. In the latest versions of Windows, this limitation can be expanded to approximately 32,000 characters. Your administrator will need to activate the “Enable Win32 long paths” group policy, or set to in the registry key . This allows the function, the module and most other path functionality to accept and return paths longer than 260 characters. After changing the above option, no further configuration is required. Changed in version 3.6: Support for long paths was enabled in Python. All of the options available in the installer UI can also be specified from the command line, allowing scripted installers to replicate an installation on many machines without user interaction. These options may also be set without suppressing the UI in order to change some of the defaults. The following options (found by executing the installer with ) can be passed into the installer: to install/uninstall without displaying any UI All other options are passed as , where the value is usually to disable a feature, to enable a feature, or a path. The full list of available options is shown below. The default custom install directory displayed in the UI Create file associations if the launcher is also installed. Prepend install and Scripts directories to and add to Append install and Scripts directories to and add to Create shortcuts for the interpreter, documentation and IDLE if installed. Install developer headers and libraries. Omitting this may lead to an unusable installation. Install and related files. Omitting this may lead to an unusable installation. Installs the launcher for all users. Also requires to be set to 1 Install standard library and extension modules. Omitting this may lead to an unusable installation. Only installs the launcher. This will override most other options. A custom message to display when the simplified install UI is used. For example, to silently install a default, system-wide Python installation, you could use the following command (from an elevated command prompt): To allow users to easily install a personal copy of Python without the test suite, you could provide a shortcut with the following command. This will display a simplified initial page and disallow customization: python-3.9.0.exe InstallAllUsers=0 Include_launcher=0 Include_test=0 SimpleInstall=1 SimpleInstallDescription=\"Just for me, no test suite.\" The options listed above can also be provided in a file named alongside the executable. This file specifies a list of options and values. When a value is provided as an attribute, it will be converted to a number if possible. Values provided as element text are always left as strings. This example file sets the same options as the previous example: Just for me, no test suite As some features of Python are not included in the initial installer download, selecting those features may require an internet connection. To avoid this need, all possible components may be downloaded on-demand to create a complete layout that will no longer require an internet connection regardless of the selected features. Note that this download may be bigger than required, but where a large number of installations are going to be performed it is very useful to have a locally cached copy. Execute the following command from Command Prompt to download all possible required files. Remember to substitute for the actual name of your installer, and to create layouts in their own directories to avoid collisions between files with the same name. You may also specify the option to hide the progress display. Once Python has been installed, you can add or remove features through the Programs and Features tool that is part of Windows. Select the Python entry and choose “Uninstall/Change” to open the installer in maintenance mode. “Modify” allows you to add or remove features by modifying the checkboxes - unchanged checkboxes will not install or remove anything. Some options cannot be changed in this mode, such as the install directory; to modify these, you will need to remove and then reinstall Python completely. “Repair” will verify all the files that should be installed using the current settings and replace any that have been removed or modified. “Uninstall” will remove Python entirely, with the exception of the Python Launcher for Windows, which has its own entry in Programs and Features. Everything described in this section is considered experimental, and should be expected to change in future releases. To install pre-built binaries with free-threading enabled (see PEP 703), you should select “Customize installation”. The second page of options includes the “Download free-threaded binaries” checkbox. Selecting this option will download and install additional binaries to the same location as the main Python install. The main executable is called , and other binaries either receive a suffix or a full ABI suffix. Python source files and bundled third-party dependencies are shared with the main install. The free-threaded version is registered as a regular Python install with the tag (with a or suffix as normal for those platforms). This allows tools to discover it, and for the Python Launcher for Windows to support . Note that the launcher will interpret (or a shebang) as “the latest 3.x install”, which will prefer the free-threaded binaries over the regular ones, while will not. If you use the short style of option, you may prefer to not install the free-threaded binaries at this time. To specify the install option at the command line, use . See Installing Without Downloading for instructions on pre-emptively downloading the additional binaries for offline install. The options to include debug symbols and binaries also apply to the free-threaded builds. Free-threaded binaries are also available on nuget.org.\n\nThe Microsoft Store package is an easily installable Python interpreter that is intended mainly for interactive use, for example, by students. To install the package, ensure you have the latest Windows 10 updates and search the Microsoft Store app for “Python 3.13”. Ensure that the app you select is published by the Python Software Foundation, and install it. Python will always be available for free on the Microsoft Store. If you are asked to pay for it, you have not selected the correct package. After installation, Python may be launched by finding it in Start. Alternatively, it will be available from any Command Prompt or PowerShell session by typing . Further, pip and IDLE may be used by typing or . IDLE can also be found in Start. All three commands are also available with version number suffixes, for example, as and as well as (where is the specific version you want to launch, such as 3.13). Open “Manage App Execution Aliases” through Start to select which version of Python is associated with each command. It is recommended to make sure that and are consistent with whichever version of is selected. Virtual environments can be created with and activated and used as normal. If you have installed another version of Python and added it to your variable, it will be available as rather than the one from the Microsoft Store. To access the new installation, use or . The launcher will detect this Python installation, but will prefer installations from the traditional installer. To remove Python, open Settings and use Apps and Features, or else find Python in Start and right-click to select Uninstall. Uninstalling will remove all packages you installed directly into this Python installation, but will not remove any virtual environments Because of restrictions on Microsoft Store apps, Python scripts may not have full write access to shared locations such as and the registry. Instead, it will write to a private copy. If your scripts must modify the shared locations, you will need to install the full installer. At runtime, Python will use a private copy of well-known Windows folders and the registry. For example, if the environment variable is , then when writing to will write to . When reading files, Windows will return the file from the private folder, or if that does not exist, the real Windows directory. For example reading returns the contents of plus the contents of . You can find the real path of any existing file using : When writing to the Windows Registry, the following behaviors exist:\n• None Reading from is allowed and results are merged with the file in the package.\n• None Writing to is not allowed if the corresponding key/value exists, i.e. modifying existing keys.\n• None Writing to is allowed as long as a corresponding key/value does not exist in the package and the user has the correct access permissions. For more detail on the technical basis for these limitations, please consult Microsoft’s documentation on packaged full-trust apps, currently available at docs.microsoft.com/en-us/windows/msix/desktop/desktop-to-uwp-behind-the-scenes\n\nThe nuget.org package is a reduced size Python environment intended for use on continuous integration and build systems that do not have a system-wide install of Python. While nuget is “the package manager for .NET”, it also works perfectly fine for packages containing build-time tools. Visit nuget.org for the most up-to-date information on using nuget. What follows is a summary that is sufficient for Python developers. The command line tool may be downloaded directly from , for example, using curl or PowerShell. With the tool, the latest version of Python for 64-bit or 32-bit machines is installed using: To select a particular version, add a . The output directory may be changed from , and the package will be installed into a subdirectory. By default, the subdirectory is named the same as the package, and without the option this name will include the specific version installed. Inside the subdirectory is a directory that contains the Python installation: In general, nuget packages are not upgradeable, and newer versions should be installed side-by-side and referenced using the full path. Alternatively, delete the package directory manually and install it again. Many CI systems will do this automatically if they do not preserve files between builds. Alongside the directory is a directory. This contains a MSBuild properties file that can be used in a C++ project to reference the Python install. Including the settings will automatically use the headers and import libraries in your build. The package information pages on nuget.org are www.nuget.org/packages/python for the 64-bit version, www.nuget.org/packages/pythonx86 for the 32-bit version, and www.nuget.org/packages/pythonarm64 for the ARM64 version Everything described in this section is considered experimental, and should be expected to change in future releases. Packages containing free-threaded binaries are named python-freethreaded for the 64-bit version, pythonx86-freethreaded for the 32-bit version, and pythonarm64-freethreaded for the ARM64 version. These packages contain both the and entry points, both of which run free threaded.\n\nThe embedded distribution is a ZIP file containing a minimal Python environment. It is intended for acting as part of another application, rather than being directly accessed by end-users. When extracted, the embedded distribution is (almost) fully isolated from the user’s system, including environment variables, system registry settings, and installed packages. The standard library is included as pre-compiled and optimized files in a ZIP, and , , and are all provided. Tcl/tk (including all dependents, such as Idle), pip and the Python documentation are not included. The embedded distribution does not include the Microsoft C Runtime and it is the responsibility of the application installer to provide this. The runtime may have already been installed on a user’s system previously or automatically via Windows Update, and can be detected by finding in the system directory. Third-party packages should be installed by the application installer alongside the embedded distribution. Using pip to manage dependencies as for a regular Python installation is not supported with this distribution, though with some care it may be possible to include and use pip for automatic updates. In general, third-party packages should be treated as part of the application (“vendoring”) so that the developer can ensure compatibility with newer versions before providing updates to users. The two recommended use cases for this distribution are described below. An application written in Python does not necessarily require users to be aware of that fact. The embedded distribution may be used in this case to include a private version of Python in an install package. Depending on how transparent it should be (or conversely, how professional it should appear), there are two options. Using a specialized executable as a launcher requires some coding, but provides the most transparent experience for users. With a customized launcher, there are no obvious indications that the program is running on Python: icons can be customized, company and version information can be specified, and file associations behave properly. In most cases, a custom launcher should simply be able to call with a hard-coded command line. The simpler approach is to provide a batch file or generated shortcut that directly calls the or with the required command-line arguments. In this case, the application will appear to be Python and not its actual name, and users may have trouble distinguishing it from other running Python processes or file associations. With the latter approach, packages should be installed as directories alongside the Python executable to ensure they are available on the path. With the specialized launcher, packages can be located in other locations as there is an opportunity to specify the search path before launching the application. Applications written in native code often require some form of scripting language, and the embedded Python distribution can be used for this purpose. In general, the majority of the application is in native code, and some part will either invoke or directly use . For either case, extracting the embedded distribution to a subdirectory of the application installation is sufficient to provide a loadable Python interpreter. As with the application use, packages can be installed to any location as there is an opportunity to specify search paths before initializing the interpreter. Otherwise, there is no fundamental differences between using the embedded distribution and a regular installation.\n\nTo run Python conveniently from a command prompt, you might consider changing some default environment variables in Windows. While the installer provides an option to configure the PATH and PATHEXT variables for you, this is only reliable for a single, system-wide installation. If you regularly use multiple versions of Python, consider using the Python Launcher for Windows. Windows allows environment variables to be configured permanently at both the User level and the System level, or temporarily in a command prompt. To temporarily set environment variables, open Command Prompt and use the set command: These changes will apply to any further commands executed in that console, and will be inherited by any applications started from the console. Including the variable name within percent signs will expand to the existing value, allowing you to add your new value at either the start or the end. Modifying by adding the directory containing python.exe to the start is a common way to ensure the correct version of Python is launched. To permanently modify the default environment variables, click Start and search for ‘edit environment variables’, or open System properties, Advanced system settings and click the Environment Variables button. In this dialog, you can add or modify User and System variables. To change System variables, you need non-restricted access to your machine (i.e. Administrator rights). Windows will concatenate User variables after System variables, which may cause unexpected results when modifying . The variable is used by all versions of Python, so you should not permanently configure it unless the listed paths only include code that is compatible with all of your installed Python versions. Besides using the automatically created start menu entry for the Python interpreter, you might want to start Python in the command prompt. The installer has an option to set that up for you. On the first page of the installer, an option labelled “Add Python to PATH” may be selected to have the installer add the install location into the . The location of the folder is also added. This allows you to type python to run the interpreter, and pip for the package installer. Thus, you can also execute your scripts with command line options, see Command line documentation. If you don’t enable this option at install time, you can always re-run the installer, select Modify, and enable it. Alternatively, you can manually modify the using the directions in Excursus: Setting environment variables. You need to set your environment variable to include the directory of your Python installation, delimited by a semicolon from other entries. An example variable could look like this (assuming the first two entries already existed):\n\nThe Python launcher for Windows is a utility which aids in locating and executing of different Python versions. It allows scripts (or the command-line) to indicate a preference for a specific Python version, and will locate and execute that version. Unlike the variable, the launcher will correctly select the most appropriate version of Python. It will prefer per-user installations over system-wide ones, and orders by language version rather than using the most recently installed version. The launcher was originally specified in PEP 397. System-wide installations of Python 3.3 and later will put the launcher on your . The launcher is compatible with all available versions of Python, so it does not matter which version is installed. To check that the launcher is available, execute the following command in Command Prompt: You should find that the latest version of Python you have installed is started - it can be exited as normal, and any additional command-line arguments specified will be sent directly to Python. If you have multiple versions of Python installed (e.g., 3.7 and 3.13) you will have noticed that Python 3.13 was started - to launch Python 3.7, try the command: If you want the latest version of Python 2 you have installed, try the command: If you see the following error, you do not have the launcher installed: 'py' is not recognized as an internal or external command, operable program or batch file. displays the currently installed version(s) of Python. The argument is the short form of the argument, which allows selecting a specific Python runtime, including those that may have come from somewhere other than python.org. Any runtime registered by following PEP 514 will be discoverable. The command lists all available runtimes using the format. When using the argument, specifying the Company will limit selection to runtimes from that provider, while specifying only the Tag will select from all providers. Note that omitting the slash implies a tag: The short form of the argument ( ) only ever selects from core Python releases, and not other distributions. However, the longer form ( ) will select from any. The Company is matched on the full string, case-insensitive. The Tag is matched on either the full string, or a prefix, provided the next character is a dot or a hyphen. This allows to match , but not . Tags are sorted using numerical ordering ( is newer than ), but are compared using text ( does not match ). If the launcher is run with no explicit Python version specification, and a virtual environment (created with the standard library module or the external tool) active, the launcher will run the virtual environment’s interpreter rather than the global one. To run the global interpreter, either deactivate the virtual environment, or explicitly specify the global Python version. Let’s create a test Python script - create a file called with the following contents From the directory in which hello.py lives, execute the command: You should notice the version number of your latest Python 2.x installation is printed. Now try changing the first line to be: Re-executing the command should now print the latest Python 3.x information. As with the above command-line examples, you can specify a more explicit version qualifier. Assuming you have Python 3.7 installed, try changing the first line to and you should find the 3.7 version information printed. Note that unlike interactive use, a bare “python” will use the latest version of Python 2.x that you have installed. This is for backward compatibility and for compatibility with Unix, where the command typically refers to Python 2. The launcher should have been associated with Python files (i.e. , , files) when it was installed. This means that when you double-click on one of these files from Windows explorer the launcher will be used, and therefore you can use the same facilities described above to have the script specify the version which should be used. The key benefit of this is that a single launcher can support multiple Python versions at the same time depending on the contents of the first line. If the first line of a script file starts with , it is known as a “shebang” line. Linux and other Unix like operating systems have native support for such lines and they are commonly used on such systems to indicate how a script should be executed. This launcher allows the same facilities to be used with Python scripts on Windows and the examples above demonstrate their use. To allow shebang lines in Python scripts to be portable between Unix and Windows, this launcher supports a number of ‘virtual’ commands to specify which interpreter to use. The supported virtual commands are: For example, if the first line of your script starts with The default Python or an active virtual environment will be located and used. As many Python scripts written to work on Unix will already have this line, you should find these scripts can be used by the launcher without modification. If you are writing a new script on Windows which you hope will be useful on Unix, you should use one of the shebang lines starting with . Any of the above virtual commands can be suffixed with an explicit version (either just the major version, or the major and minor version). Furthermore the 32-bit version can be requested by adding “-32” after the minor version. I.e. will request usage of the 32-bit Python 3.7. If a virtual environment is active, the version will be ignored and the environment will be used. Added in version 3.7: Beginning with python launcher 3.7 it is possible to request 64-bit version by the “-64” suffix. Furthermore it is possible to specify a major and architecture without minor (i.e. ). Changed in version 3.11: The “-64” suffix is deprecated, and now implies “any architecture that is not provably i386/32-bit”. To request a specific environment, use the new argument with the complete tag. Changed in version 3.13: Virtual commands referencing now prefer an active virtual environment rather than searching . This handles cases where the shebang specifies but is not present in the active environment. The form of shebang line has one further special property. Before looking for installed Python interpreters, this form will search the executable for a Python executable matching the name provided as the first argument. This corresponds to the behaviour of the Unix program, which performs a search. If an executable matching the first argument after the command cannot be found, but the argument starts with , it will be handled as described for the other virtual commands. The environment variable may be set (to any value) to skip this search of . Shebang lines that do not match any of these patterns are looked up in the section of the launcher’s .INI file. This may be used to handle certain commands in a way that makes sense for your system. The name of the command must be a single argument (no spaces in the shebang executable), and the value substituted is the full path to the executable (additional arguments specified in the .INI will be quoted as part of the filename). Any commands not found in the .INI file are treated as Windows executable paths that are absolute or relative to the directory containing the script file. This is a convenience for Windows-only scripts, such as those generated by an installer, since the behavior is not compatible with Unix-style shells. These paths may be quoted, and may include multiple arguments, after which the path to the script and any additional arguments will be appended. The shebang lines can also specify additional options to be passed to the Python interpreter. For example, if you have a shebang line: Then Python will be started with the option Two .ini files will be searched by the launcher - in the current user’s application data directory ( or ) and in the same directory as the launcher. The same .ini files are used for both the ‘console’ version of the launcher (i.e. py.exe) and for the ‘windows’ version (i.e. pyw.exe). Customization specified in the “application directory” will have precedence over the one next to the executable, so a user, who may not have write access to the .ini file next to the launcher, can override commands in that global .ini file. In some cases, a version qualifier can be included in a command to dictate which version of Python will be used by the command. A version qualifier starts with a major version number and can optionally be followed by a period (‘.’) and a minor version specifier. Furthermore it is possible to specify if a 32 or 64 bit implementation shall be requested by adding “-32” or “-64”. For example, a shebang line of has no version qualifier, while has a version qualifier which specifies only a major version. If no version qualifiers are found in a command, the environment variable can be set to specify the default version qualifier. If it is not set, the default is “3”. The variable can specify any value that may be passed on the command line, such as “3”, “3.7”, “3.7-32” or “3.7-64”. (Note that the “-64” option is only available with the launcher included with Python 3.7 or newer.) If no minor version qualifiers are found, the environment variable (where is the current major version qualifier as determined above) can be set to specify the full version. If no such option is found, the launcher will enumerate the installed Python versions and use the latest minor release found for the major version, which is likely, although not guaranteed, to be the most recently installed version in that family. On 64-bit Windows with both 32-bit and 64-bit implementations of the same (major.minor) Python version installed, the 64-bit version will always be preferred. This will be true for both 32-bit and 64-bit implementations of the launcher - a 32-bit launcher will prefer to execute a 64-bit Python installation of the specified version if available. This is so the behavior of the launcher can be predicted knowing only what versions are installed on the PC and without regard to the order in which they were installed (i.e., without knowing whether a 32 or 64-bit version of Python and corresponding launcher was installed last). As noted above, an optional “-32” or “-64” suffix can be used on a version specifier to change this behaviour.\n• None If no relevant options are set, the commands and will use the latest Python 2.x version installed and the command will use the latest Python 3.x installed.\n• None The command will not consult any options at all as the versions are fully specified.\n• None If , the commands and will both use the latest installed Python 3 version.\n• None If , the command will use the 32-bit implementation of 3.7 whereas the command will use the latest installed Python (PY_PYTHON was not considered at all as a major version was specified.)\n• None If and , the commands and will both use specifically 3.7 In addition to environment variables, the same settings can be configured in the .INI file used by the launcher. The section in the INI file is called and the key name will be the same as the environment variables without the leading prefix (and note that the key names in the INI file are case insensitive.) The contents of an environment variable will override things specified in the INI file.\n• None Setting is equivalent to the INI file containing:\n• None Setting and is equivalent to the INI file containing: If an environment variable is set (to any value), the launcher will print diagnostic information to stderr (i.e. to the console). While this information manages to be simultaneously verbose and terse, it should allow you to see what versions of Python were located, why a particular version was chosen and the exact command-line used to execute the target Python. It is primarily intended for testing and debugging. If an environment variable is set (to any value), the launcher will output the command it would have run, but will not actually launch Python. This may be useful for tools that want to use the launcher to detect and then launch Python directly. Note that the command written to standard output is always encoded using UTF-8, and may not render correctly in the console. If an environment variable is set (to any value), and the requested Python version is not installed but is available on the Microsoft Store, the launcher will attempt to install it. This may require user interaction to complete, and you may need to run the command again. An additional variable causes the launcher to always try to install Python, even if it is detected. This is mainly intended for testing (and should be used with ). The following exit codes may be returned by the Python launcher. Unfortunately, there is no way to distinguish these from the exit code of Python itself. The names of codes are as used in the sources, and are only for reference. There is no way to access or resolve them apart from reading this page. Entries are listed in alphabetical order of names. A was found but is corrupt. An install was started, but the command will need to be re-run after it completes. Unable to obtain command line from the operating system. A was required but not found.\n\nThese notes supplement the description at The initialization of the sys.path module search path with detailed Windows notes. When no file is found, this is how is populated on Windows:\n• None An empty entry is added at the start, which corresponds to the current directory.\n• None If the environment variable exists, as described in Environment variables, its entries are added next. Note that on Windows, paths in this variable must be separated by semicolons, to distinguish them from the colon used in drive identifiers ( etc.).\n• None Additional “application paths” can be added in the registry as subkeys of under both the and hives. Subkeys which have semicolon-delimited path strings as their default value will cause each path to be added to . (Note that all known installers only use HKLM, so HKCU is typically empty.)\n• None If the environment variable is set, it is assumed as “Python Home”. Otherwise, the path of the main Python executable is used to locate a “landmark file” (either or ) to deduce the “Python Home”. If a Python home is found, the relevant sub-directories added to ( , , etc) are based on that folder. Otherwise, the core Python path is constructed from the PythonPath stored in the registry.\n• None If the Python Home cannot be located, no is specified in the environment, and no registry entries can be found, a default path with relative entries is used (e.g. , etc). If a file is found alongside the main executable or in the directory one level above the executable, the following variations apply:\n• None If is an absolute path and is not set, this path is used instead of the path to the main executable when deducing the home location. The end result of all this is:\n• None When running , or any other .exe in the main Python directory (either an installed version, or directly from the PCbuild directory), the core path is deduced, and the core paths in the registry are ignored. Other “application paths” in the registry are always read.\n• None When Python is hosted in another .exe (different directory, embedded via COM, etc), the “Python Home” will not be deduced, so the core path from the registry is used. Other “application paths” in the registry are always read.\n• None If Python can’t find its home and there are no registry value (frozen .exe, some very strange installation setup) you get a path with some default, but relative, paths. For those who want to bundle Python into their application or distribution, the following advice will prevent conflicts with other installations:\n• None Include a file alongside your executable containing the directories to include. This will ignore paths listed in the registry and environment variables, and also ignore unless is listed.\n• None If you are loading or in your own executable, explicitly set before .\n• None Clear and/or overwrite and set before launching from your application.\n• None If you cannot use the previous suggestions (for example, you are a distribution that allows people to run directly), ensure that the landmark file ( ) exists in your install directory. (Note that it will not be detected inside a ZIP file, but a correctly named ZIP file will be detected instead.) These will ensure that the files in a system-wide installation will not take precedence over the copy of the standard library bundled with your application. Otherwise, your users may experience problems using your application. Note that the first suggestion is the best, as the others may still be susceptible to non-standard paths in the registry and user site-packages. Changed in version 3.6: Add file support and removes option from . Changed in version 3.6: Add as a potential landmark when directly adjacent to the executable. Deprecated since version 3.6: Modules specified in the registry under (not ) may be imported by . This finder is enabled on Windows in 3.6.0 and earlier, but may need to be explicitly added to in the future."
    },
    {
        "link": "https://simplilearn.com/tutorials/python-tutorial/python-path",
        "document": ""
    }
]