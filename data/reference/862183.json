[
    {
        "link": "https://reddit.com/r/SteamVR/comments/18o87pi/steamvr_error_109_not_initialized",
        "document": "I've been having an issue, and wanted to know if anyone here has had this issue as well or a solution, cause I can't seem to find one elsewhere; The only other posts I can find here on reddit and in other forums either all talk about the unity plugin and using it with development, or with Oculus headsets, which neither is the case for me, and are over 6 years old.\n\nEvery time I start SteamVR, my screen will flicker to black twice, then show this error:\n\nEvery so often, my laptop screen will flicker again, and my headset is completely black and just shows the idle blue lights. No amount of restarting SteamVR or my computer will fix this issue. The things I've currently tried so far are:\n• deleting the steamvr.vrsettings file in C:\\Program Files (x86)\\Steam\\config and then re-installing SteamVR again\n\nMy computer is an Alienware X17r1 laptop with an RTX 3080 and Intel 11th gen i9, and I use the Valve Index (I use a mini-DP adapter to connect it to my laptop)\n\nEDIT: The issue seemed to be fixed as soon as i downgraded from Windows 11 to Windows 10"
    },
    {
        "link": "https://discussions.unity.com/t/steamvr-error-109-issues/215115",
        "document": ""
    },
    {
        "link": "https://discussions.unity.com/t/unity-steamvr-not-initialized-109-fixed/250809",
        "document": ""
    },
    {
        "link": "https://github.com/ValveSoftware/steamvr_unity_plugin/issues/1012",
        "document": "Over the past couple of days I have been getting this warning when I try to run my SteamVR project (this never happened before). Unity just won't recognize that steam VR is running. I have no clue how to fix it because every time it goes away it's after I stop and start the game a could of times but this does not always fix the problem. SteamVR itself works just fine I can play games and even open the build of the same project. It's just a problem in the editor. This absolutely kills my productivity because it can go for hours in end (I have also had times where it went away in 5 minutes but like I said, I have no clue why)."
    },
    {
        "link": "https://challix.com/blogs/guides/how-to-fix-steamvr-error-code-109",
        "document": "If you're a virtual reality enthusiast like me, encountering SteamVR error code 109 can be incredibly frustrating, especially when you're all set to dive into an immersive experience.\n\nInstead of being transported to a virtual world, you’re stuck staring at a troublesome error message.\n\nBut don’t worry—I’m here to guide you through fixing this issue and getting you back into your VR adventures.\n\nIn this post, I’ll walk you through the common causes behind error 109 and offer practical, step-by-step solutions to resolve it.\n\nWhether you’re just starting out with VR or you've been using it for a while, this guide will help you tackle the problem and get back to enjoying your VR setup.\n\nSteamVR error code 109 typically occurs when your system has trouble communicating with your VR headset.\n\nThis issue usually prevents SteamVR from initializing properly, resulting in a black screen or no response when you try to launch the application.\n\nAlthough it may seem like a complex problem, error 109 is often caused by a few common factors, which we’ll go over to help you resolve the issue quickly.\n\nWhat Causes the SteamVR Error Code 109?\n\nThe 109 error code on SteamVR can be caused by several factors.\n\nOne of the most common culprits is outdated drivers, as VR requires up-to-date graphics and USB drivers to function correctly.\n\nIf your drivers are old or incompatible, it can lead to communication issues.\n\nAnother potential cause is hardware connection problems, such as loose or damaged cables, incorrect port usage, or faulty adapters, which can interfere with the connection between your headset and computer.\n\nSoftware conflicts, including background applications, antivirus programs, or even outdated SteamVR settings, may also disrupt the operation of SteamVR.\n\nAdditionally, misconfigured system settings, insufficient hardware specifications, or issues in the BIOS can contribute to the 109 error.\n\nFirst, try restarting everything. Sometimes, a simple reboot can resolve temporary glitches.\n\nClose SteamVR completely and relaunch it. You can try to reboot your computer to clear any system issues and refresh your resources.\n\nNext, check your hardware connections. Make sure that all cables, including USB and HDMI, are securely connected and free from damage.\n\nIf you suspect an issue, unplug and replug the cables, as this can help reestablish communication.\n\nIt’s also a good idea to avoid using adapters or extension cords, and instead plug your headset directly into the PC to eliminate potential interference.\n\nUpdating your drivers is another thing to try. Outdated graphics and USB drivers are often the cause of SteamVR issues.\n\nFor graphics drivers, update through the NVIDIA GeForce Experience or AMD Radeon Software. For USB drivers, check your motherboard or laptop manufacturer’s website for the latest updates.\n\nVerify your SteamVR settings so that they are correctly configured.\n\nNavigate to your Steam installation directory and delete the steamvr.vrsettings file to reset your configurations.\n\nAlso, check that you’re using the latest version of SteamVR by updating it if necessary.\n\nTesting with different USB ports can help resolve connection issues, as certain ports work better for VR headsets.\n\nTry plugging your headset into a USB 3.0 port if it’s currently in a USB 2.0 port, or vice versa.\n\nAvoid using USB hubs, as they can create power or data issues, and instead connect the headset directly to your PC.\n\nIf you suspect corrupted files, reinstall SteamVR. Uninstall it through your Steam Library, restart your PC, and then reinstall SteamVR from the Steam store.\n\nThis can often resolve lingering issues caused by damaged files.\n\nAnalyzing your system configuration is another important step.\n\nMake sure your PC meets the minimum specifications required for SteamVR, including a powerful dedicated GPU, at least 8GB of RAM (16GB is preferable), and a multi-core processor with VR capability.\n\nAlso, check your graphics settings and ensure that VR applications are assigned to use your dedicated GPU instead of integrated graphics.\n\nSoftware conflicts might also be contributing to the issue. Temporarily disable any antivirus software, as it can sometimes block VR processes.\n\nAdditionally, close unnecessary applications running in the background to free up resources for SteamVR.\n\nFor more advanced fixes, consider downgrading your graphics drivers. If updating drivers doesn’t work, rolling back to a previous version might resolve compatibility issues.\n\nYou should also check your BIOS settings to ensure that USB and PCI-E settings are optimized for VR.\n\nConsult your motherboard manual for guidance on making these adjustments. Updating Windows can also help resolve system-level bugs affecting SteamVR.\n\nIf none of these steps work, contacting Steam Support is your next option.\n\nProvide detailed information about your setup, including your PC specs (GPU, CPU, RAM), the troubleshooting steps you've already tried, and any error logs generated by SteamVR.\n\nSteam Support can offer personalized assistance for more complex issues.\n\nSteamVR error code 109 can seem overwhelming at first, but with a methodical approach, you can resolve it and get back to enjoying your favorite VR experiences.\n\nStart with the basics—like restarting and checking connections—and work your way through the steps I’ve outlined here.\n\nAlso Read: How to Connect Your Meta Quest 3 to a PC?"
    },
    {
        "link": "https://valvesoftware.github.io/steamvr_unity_plugin",
        "document": "Valve maintains a Unity plugin to smoothly interface SteamVR with Unity. With SteamVR developers can target one API that all the popular VR headsets can connect to. The modern SteamVR Unity Plugin manages three main things for developers: loading 3d models for VR controllers, handling input from those controllers, and estimating what your hand looks like while using those controllers. On top of managing those things we have an Interaction System example to help get your VR application off the ground. Providing concrete examples of interacting with the virtual world and our APIs.\n\nThe SteamVR runtime must be installed. This can be downloaded from Steam under the Tools category. Or by clicking here. As developers we strongly recommend that you opt-in to SteamVR beta so you can test new features and verify your application works with the latest versions of SteamVR.\n• None Follow the Quickstart guide on this site\n• None If you want to explore the Interaction System scene you'll need to open the SteamVR Input window (under the Window Menu), click yes to copy example jsons, then click Save and Generate to create input actions.\n• None For the most simple example of VR with tracked controllers see the sample scene at /SteamVR/Simple Sample\n• None For a more extensive example including picking up, throwing objects, and animated hands see the Interaction System example at /SteamVR/Interaction System/Samples/Interactions_Example\n\nThis website contains API level documentation. General overview articles that explain concepts at a high level. As well as couple tutorials around specific features.\n\nIf you're having trouble with the plugin the best place to discuss issues is our github here: https://github.com/ValveSoftware/steamvr_unity_plugin/issues/\n\nIf you'd like to discuss features, post guides, and give general feedback please post on the steam forum here: https://steamcommunity.com/app/250820/discussions/7/"
    },
    {
        "link": "https://docs.unity3d.com/Manual/VROverview.html",
        "document": "Get started with virtual reality and mixed realityMixed Reality (MR) combines its own virtual environment with the user’s real-world environment and allows them to interact with each other.\n\nSee in Glossary development in Unity.\n\nVirtual Reality (VR) and Mixed Reality (MR) both refer to extended reality experiences where specialized devices provide a way for the user to interact with a virtual environment.\n\nIn VR experiences, the environment is closed. This means that the user can’t see their surrounding environment, and can only see virtual content displayed on the screen. The user can only interact with virtual content, rather than their physical environment. VR experiences are often achieved with a headset (a Head-Mounted Display [HMD]), where a screen within the headset displays the virtual environment. VR experiences are fully immersive, and so are a good choice for creating immersive, story-driven experiences and gameplay.\n\nMR combines elements of the real and virtual environments, enabling users to see and interact with both simultaneously. MR relies on devices that are able to display a real-time view of the user’s surroundings, and blend the real-world view with virtual content. Some headsets, such as the Meta Quest 3, achieve MR through passthrough cameras, which capture the surrounding environment and display it on the screen. Other devices achieve MR without passthrough cameras, for example the Microsoft HoloLens devices are transparent glasses which project virtual content directly onto the lenses. MR is useful in situations where real-world integration is beneficial, such as training or educational experiences. You can also use MR to create social gaming experiences, or to enhance gameplay with locational information.\n\nNote: On some modern devices, you can develop an app that has both MRMixed Reality\n\nSee in Glossary and VR modes to allow the user to toggle between these modes within your app.\n\nVR and MR development shares common workflows and design considerations with any real-time 3D development in Unity. However, distinguishing factors include:\n• Richer user input: in addition to traditional button and joystick controllers, VR devices provide spatial head, controller, and hand and finger tracking (on supported platforms).\n• More intimate interaction with the environment: in conjunction with the possibilities of richer input, VR raises the expectations of much closer and physical interaction with the environment than typical 3D games and applications. Users expect to be able to pick things up and interact with objects in the environment. With head tracking, the camera \n\n A component which creates an image of a particular viewpoint in your scene. The output is either drawn to the screen or captured as a texture. More info can get much closer to the walls and other boundaries of the environment and can even pass through them.\n• User comfort concerns: many people experience motion sickness in VR when camera movement doesn’t match the movement of their head. You can mitigate the causes of motion sickness by maintaining a high frame rate, offering a range of locomotion options so that users can choose a mode they are comfortable with, and avoiding moving the camera independently of the user’s head tracking.\n\nTo get started with VR development, use the XR Plug-in Management system to install and enable XR provider plug-ins for the devices you want to support. Refer to XR Project set up for more information.\n\nA basic VR or MR sceneA Scene contains the environments and menus of your game. Think of each unique Scene file as a unique level. In each Scene, you place your environments, obstacles, and decorations, essentially designing and building your game in pieces. More info\n\nSee in Glossary should contain an XR Origin, which defines the 3D origin for tracking data. This collection of GameObjectsThe fundamental object in Unity scenes, which can represent characters, props, scenery, cameras, waypoints, and more. A GameObject’s functionality is defined by the Components attached to it. More info\n\nSee in Glossary and components also contains the main scene Camera and the GameObjects representing the user’s controllers. Refer to Set up an XR scene for instructions on setting up a basic VR scene.\n\nYou typically need a way for the user to move around and to interact with the 3D world you have created. The XR Interaction Toolkit provides components for creating interactions like selecting and grabbing objects. It also provides a customizable locomotion system. You can use the Input System in addition to or instead of the XRAn umbrella term encompassing Virtual Reality (VR), Augmented Reality (AR) and Mixed Reality (MR) applications. Devices supporting these forms of interactive applications can be referred to as XR devices. More info\n\nSee in Glossary Interaction Toolkit.\n\nMost of the features and APIs used for VR development in Unity are provided through packages. These packages include:\n\nVR and MR platforms are available as provider plug-ins by the XR Plug-inA set of code created outside of Unity that creates functionality in Unity. There are two kinds of plug-ins you can use in Unity: Managed plug-ins (managed .NET assemblies created with tools like Visual Studio) and Native plug-ins (platform-specific native code libraries). More info\n\nSee in Glossary Management system. To understand how to use the XR Plug-in Management system to add and enable provider plug-ins for your target platforms, refer to XR Project set up.\n\nThe following table describes the plug-ins available for VR and MR development, and the devices that they support:\n\nNote: Many headset makers are working toward using the OpenXR runtime as a standard. However, this process isn’t complete and there can be feature discrepancies between OpenXR and a headset maker’s own provider plug-in or SDK.\n\nThe XR Interaction Toolkit can make it easier and faster to develop VR applications. The XR Interaction Toolkit provides:\n• An XR Origin set up with controllers.\n• XR controller setups with Input System presets for basic interactions like select and grab.\n\nThe XR Core Utilities package contains software utilities used by other Unity XR plug-ins and packages. Typically, this package gets installed in your project as a dependency of other XR packages.\n\nThe Unity Input System package not only supports accessing user input from VR controller buttons and joysticks, but also provides access to XR tracking data and haptics. The Input System package is required if you use the XR Interaction Toolkit or the OpenXR provider plug-in.\n\nUnity provides templates for VR and MR development. These templates are accessible from the Unity Hub, and provide a sample scene pre-configured with the relevant packages and components to get started with VR and MR development.\n\nThe available VR and MR templates are:\n\nTo learn more about creating an XR project from a template, refer to Create an XR project.\n\nHand tracking is a feature that allows users to interact with a VR application using their hands. Hand tracking is supported by the XR Hands package.\n• The XR Hand Skeleton Driver component, which maps a set of Transforms to their corresponding hand joints \n\n A physics component allowing a dynamic connection between Rigidbody components, usually allowing some degree of movement such as a hinge. More info and updates those Transforms as tracking data is received.\n• The XR Hand Mesh Controller, which enables and disables a mesh \n\n The main graphics primitive of Unity. Meshes make up a large part of your 3D worlds. Unity supports triangulated or Quadrangulated polygon meshes. Nurbs, Nurms, Subdiv surfaces must be converted to polygons. More info as hand tracking is acquired or lost.\n• A HandVisualizer sample that demonstrates how to use the hand tracking API."
    },
    {
        "link": "https://github.com/ValveSoftware/steamvr_unity_plugin",
        "document": "Valve maintains a Unity plugin to smoothly interface SteamVR with Unity. With SteamVR developers can target one API that all the popular VR headsets can connect to. The modern SteamVR Unity Plugin manages three main things for developers: loading 3d models for VR controllers, handling input from those controllers, and estimating what your hand looks like while using those controllers. On top of managing those things we have an Interaction System example to help get your VR application off the ground. Providing concrete examples of interacting with the virtual world and our APIs.\n\nThe SteamVR runtime must be installed. This can be downloaded from Steam under the Tools category. Or by clicking here. As developers we strongly recommend that you opt-in to SteamVR beta so you can test new features and verify your application works with the latest versions of SteamVR.\n• This version of the SteamVR Unity Plugin is compatible and has been tested with Unity versions 5.4 - 2019.1\n\nDocumentation can be found online here: https://valvesoftware.github.io/steamvr_unity_plugin/\n• Follow the Quickstart guide on this site\n• If you want to explore the Interaction System scene you'll need to open the SteamVR Input window (under the Window Menu), click yes to copy example jsons, then click Save and Generate to create input actions.\n• For the most simple example of VR with tracked controllers see the sample scene at /SteamVR/Simple Sample\n• For a more extensive example including picking up, throwing objects, and animated hands see the Interaction System example at /SteamVR/Interaction System/Samples/Interactions_Example\n\nIf you're having trouble with the plugin the best place to discuss issues is our github here: https://github.com/ValveSoftware/steamvr_unity_plugin/issues/\n\nIf you'd like to discuss features, post guides, and give general feedback please post on the steam forum here: https://steamcommunity.com/app/250820/discussions/7/"
    },
    {
        "link": "https://valvesoftware.github.io/steamvr_unity_plugin/api/index.html",
        "document": "This is the class by class, member by member documentation for the SteamVR Unity Plugin. It is not complete. If you would like summary or example information for a specific class or member please post a request in the Issues section of the github repo.\n\nLocated in Assets/SteamVR/Resources you will find a SteamVR_Settings asset that has a couple setting on it you may find useful. Namely when the input system updates the actions. It also contains a boolean that decides whether to automatically enable VR for the project. If you have this plugin installed and are trying to disable VR you will need to uncheck this box first.\n\nThe Actions class will be generated for you when you hit \"Save and Generate\" in the SteamVR Input window. It gives you named access to all your actions. For example, if you have an action named Plant in the action set Farming you can access it through the actionset at SteamVR_Actions.Farming.Plant or just at the root of the class at SteamVR_Actions.Farming_Plant.\n\nHere is where most of the helper functions live to access your actions in code. You can get a reference to a specific action by name through a generic function or through a type-named function . You can also pass in the full path to the action: if you have a lot of actions or want the best performance. These classes are nice because they give you access to common events and faster data access. But if you'd rather just access the data directly instead of going through the action class you can use more familiar calls . Different than normal Unity input you'll need to pass in the Input Source you want to get the data from. That can be Any, or quite a number of more specific sources (LeftHand, RightHand, etc). Any will combine all sources (OR'd) in to one set of data.\n\nThis is the component that manages most of the input system in relation to unity events. You shouldn't generally need to interact with it besides making sure it's in your scenes and doesn't get accidentally deleted. It should be automatically added to a scene at runtime when one isn't found.\n\nThe pose behaviour component is what orients tracked objects. Add this to a GameObject to automatically set the position and rotation of the transform to match your tracked object (usually controllers). It also contains velocity data and a variety of helper functions for common orientation functions.\n\nUses SteamVR Skeleton Input to give you a hand that is our best guess of where each joint is at that time. Varies in accuracy depending on the controller and tracking system currently being used. This can also orient the GameObject inline with the controller. So you don't need a pose and a skeleton behaviour on the same object.\n\nThese are components designed to give you easy access to an action by the same name and a place to use UnityEvents if that is your preference. They also have some helpful functions designed around common scenarios for those actions. If you find yourself running into things you wish these helper components had, feel free to create an Issue on the github."
    },
    {
        "link": "https://discussions.unity.com/t/openxr-and-openvr-together/841675",
        "document": ""
    }
]