[
    {
        "link": "https://learn.microsoft.com/en-us/powershell/module/activedirectory/get-adcomputer?view=windowsserver2025-ps",
        "document": "The cmdlet gets a computer or performs a search to retrieve multiple computers. The Identity parameter specifies the Active Directory computer to retrieve. You can identify a computer by its distinguished name, GUID, security identifier (SID) or Security Accounts Manager (SAM) account name. You can also set the parameter to a computer object variable, such as or pass a computer object through the pipeline to the Identity parameter. To search for and retrieve more than one computer, use the Filter or LDAPFilter parameters. The Filter parameter uses the PowerShell Expression Language to write query strings for Active Directory. PowerShell Expression Language syntax provides rich type conversion support for value types received by the Filter parameter. For more information about the Filter parameter syntax, type about_ActiveDirectory_Filter. If you have existing Lightweight Directory Access Protocol (LDAP) query strings, you can use the LDAPFilter parameter. This cmdlet retrieves a default set of computer object properties. To retrieve additional properties use the Properties parameter. For more information about the how to determine the properties for computer objects, see the Properties parameter description.\n\nExample 1: Get specific computer that shows all properties\n\nExample 2: Get all computers with a name starting with a particular string\n\nExample 3: Gets all computers that have changed their password in specific time frame\n\nExample 4: Get computer accounts in a specific location using an LDAPFilter\n\nExample 5: Get all computer accounts using a filter\n\nExample 6: Get all computers with a name starting with Computer01 or Computer02\n\nExample 7: Get all computers with a name starting with a string AND password last set before 30 days\n\nSpecifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default. To specify this parameter, you can type a user name, such as or or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. You can also create a PSCredential object by using a script or by using the cmdlet. You can then set the Credential parameter to the PSCredential object. If the acting credentials do not have directory-level permission to perform the task, the cmdlet returns a terminating error.\n\nSpecifies a query string that retrieves Active Directory objects. This string uses the Windows PowerShell Expression Language syntax. The Windows PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, type about_ActiveDirectory_Filter. The following syntax uses Backus-Naur form to show how to use the Windows PowerShell Expression Language for this parameter. <value>::= <compare this value with an <attr> by using the specified <FilterOperator>> For a list of supported types for <value>, type . Wildcards other than , such as , are not supported by the Filter syntax. To query using LDAP query strings, use the LDAPFilter parameter.\n\nSpecifies an Active Directory computer object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are: The cmdlet searches the default naming context or partition to find the object. If the identifier given is a distinguished name, the partition to search is computed from that distinguished name. If two or more objects are found, the cmdlet returns a non-terminating error. This parameter can also get this object through the pipeline or you can set this parameter to a computer object instance.\n\nSpecifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated. In Active Directory Domain Services environments, a default value for Partition is set in the following cases:\n• If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.\n• If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.\n• If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain. In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Partition is set in the following cases:\n• If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.\n• If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.\n• If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.\n• If none of the previous cases apply, the Partition parameter will not take any default value.\n\nSpecifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set. Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk). To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. To retrieve properties and display them for an object, you can use the cmdlet associated with the object and pass the output to the cmdlet.\n\nSpecifies an Active Directory path to search under. When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive. When you run a cmdlet outside of an Active Directory provider drive against an Active Directory Domain Services target, the default value of this parameter is the default naming context of the target domain. When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target AD LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent object (nTDSDSA) for the AD LDS instance. If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value. When the value of the SearchBase parameter is set to an empty string and you are connected to a global catalog port, all partitions are searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a global catalog port, an error is thrown.\n\nReturns one or more computer objects. This Get-ADComputer cmdlet returns a default set of ADComputer property values. To retrieve additional ADComputer properties, use the Properties parameter of this cmdlet. To view the properties for an ADComputer object, see the following examples. To run these examples, replace with a computer identifier such as the SAM account name of your local computer. To get a list of the default set of properties of an ADComputer object, use the following command: To get a list of all the properties of an ADComputer object, use the following command:"
    },
    {
        "link": "https://4sysops.com/archives/get-adcomputer-display-computers-in-ou-or-ad-group-with-powershell",
        "document": "If you want to know the computer objects in a particular OU or group, you can work with the GUI tools Active Directory Users and Computers (ADUC) or Active Directory Administrative Center. However, PowerShell and dsquery are faster and more flexible.\n\nSay you want to find out which computers will be affected if you link a GPO to a certain OU. You could run the following dsquery command:\n\nThe result would be a list of computer names. If you omit the -o switch with the rdn value, you receive a list of Distinguished Names.\n\n\n\nIf you need further properties in addition to the name, or if you want to add a filter to the query, the Get-ADcomputer cmdlet is helpful. Like its counterpart Get-ADUser (which allows you to read user objects), you have to pass either the object name or a filter as parameter. If you want to display all computers, you can use -Filter with a wildcard:\n\nAs usual, you can add conditional statements to the filter to restrict the output. The following example would display all Windows 8.1 PCs provided you named the computers accordingly:\n\nTo limit the query to a particular OU, you need the additional parameter -SearchBase:\n\nThe search in a particular group follows a similar pattern:\n\nIf you want to list not only the default computer object attributes, you have to add -Properties * to the command."
    },
    {
        "link": "https://stackoverflow.com/questions/22721892/get-adcomputer-of-a-specific-organizational-unit-in-powershell",
        "document": "Using the active directory module I need to Get-ADComputer of all the computers in an specific OU and list all their properties.\n\nI tried something like this:"
    },
    {
        "link": "https://petri.com/get-adcomputer",
        "document": "The Get-ADComputer PowerShell cmdlet is a powerful tool for managing AD computers. It can be used to retrieve information about computer objects, search for computer objects based on specific criteria, and perform various actions on computer objects.\n\nWhat is Get-ADComputer used for?\n\nGet-ADComputer is a PowerShell cmdlet that retrieves one or more computers from Active Directory. It can be used to retrieve a single computer by specifying its distinguishedname, GUID, security identifier (SID), or SAMaccountname. Alternatively, it can be used to search for and retrieve multiple computers by using the Filter or LDAPFilter parameters. I’ll touch on those later on.\n\nWhether you’re a network administrator, IT professional, or just curious about your network’s computer infrastructure, Get-ADComputer can provide essential insights.\n\nIt is a powerful tool that can be used to perform a variety of tasks, such as:\n• Finding computers that meet specific criteria, such as operating system, location, or department\n\nThe Get-ADComputer cmdlet, part of the Active Directory module (RSAT), has a number of parameters that can be used to control its output. For example, the Identity parameter can be used to specify a specific computer object’s name or distinguished name. The Filter parameter can be used to search for computers that meet specific criteria. The Properties parameter can be used to specify the properties that should be returned for each computer object. We’ll dig deeper into these concepts soon.\n\nAnd here we are, delving deeper. Let’s go through some of the basic parameters used with Get-ADComputer.\n\nThe easiest way is to start with the basics. You can run this command to list ALL computer objects in your current AD domain. Use the ‘|’ (pipeline) command and ft (Format-Table name) to make things easy to read on screen.\n\nHere are all of the computers in my domain, including domain controllers.\n\nUsing -SearchBase to limit results to specific OUs in AD\n\nThe -SearchBase parameter is used to specify the distinguished name (DN) of the search base for the query. This is also sometimes described as changing the ‘searchscope’ of the command. This parameter limits the search to a specific Organizational Unit (OU) or its child OUs.\n\nHere is an example of how to use Get-ADComputer with the -SearchBase parameter.\n\nThis shows all the computer objects in the specified OU “Domain Member Servers”. Very helpful. And, as you know, PowerShell allows you to get this information and then optionally pipe this to, as an example, Set-ADComputer, and modify the same attributes on a small or large list of computer objects in one command!\n\nTo search for computer objects using the CN= attribute, you can use the -SearchBase parameter with the distinguished name (DN) of the search base for the query. Here is an example of how to use Get-ADComputer to retrieve all computer objects in the Computers container.\n\nThere we can see one computer object in the Computers container. We use ‘CN‘ because that stands for Container whereas ‘OU’ stands for Organizational Unit.\n\nAnother handy parameter is the -Properties parameter. It is used to specify the additional properties of the computer object that should be retrieved along with the default set of properties.\n\nLet me show you an example of how to use Get-ADComputer with the -Properties parameter.\n\nAll the pertinent attributes are at your fingertips. IP address, last logon time, operating system…very cool.\n\nLet me go into some more detail and depth around finding precisely what you need. As an IT Pro, you get pulled and pinged every day with specific queries from a variety of people in your environment. Hopefully, my examples will boost your efficiency when responding to said queries.\n\nRetrieve a list of computers in an Active Directory domain\n\nAgain, we can get a simple listing of all computer objects by using ‘-Filter *’ and piping it to Format-Table.\n\nThis displays all your computer objects in a simple table format. You can use this output to go a few levels deeper into specific computer objects or specific OUs.\n\nFiltering results based on the computer name\n\nLet’s narrow things down by specifying all computer objects that start with ‘WS19’…\n\nSo quick and easy. We used the -Filter command and checked for objects wherein the ‘Name’ attribute starts with ‘WS19’ with anything else after it. Say that three times fast.\n\nNext, I’ll show you some examples and methods of using ‘Sort-Object‘ in PowerShell to sort the output of your computer objects in AD.\n\nHelpful, helpful, helpful. I can tell you that at least ONE of your supervisors will ask for things to be nice and tidy… and sorted.\n\nLet’s sort them by the operating system.\n\nSo awesome. There is so much power here. It goes from Windows Server 2022 Datacenter all the way to Windows 10 Enterprise. Slick.\n\nTo export the results of Get-ADComputer to a CSV file, you can use the Export-CSV cmdlet, as you’ve seen before. Here is an example of how to use Get-ADComputer to retrieve all computers in the domain and export the results to a CSV file.\n\nI didn’t include a screenshot here as there is no output.\n\nThis command retrieves all your computer objects in the domain and it exports them to a CSV file named “Computers.csv” in the location specified in the ‘-Path’ parameter.\n\nHere’s a snippet from the produced CSV file. The sheer power of using Export-CSV is that you will almost always get a large dataset. You can filter later in Excel. But this will include specific attributes and concepts such as dnshostname, adsearchscope, userprincipalname, objectclass, os version, and more.\n\nLet me show you some more advanced queries to find more specific pieces of information inside your Active Directory domain.\n\nHow to filter for inactive computers using Get-AdComputer\n\nTo filter for inactive computers, you can use the LastLogonDate property and the Where-Object cmdlet. Here is an example of retrieving all inactive computers that have not logged on in the last 90 days.\n\nNice. This is the coolest thing. We get a listing of computer objects that haven’t logged into Active Directory in over 90 days using the date variable. We utilize the LastLogonDate and find objects ‘lt’ (less than) 90 days prior.\n\nYou can further refine your query results by using Select-Object to display only the properties you need. Let me show you some helpful examples here.\n\nThe default list of properties returned with Get-ADComputer does not include ‘OperatingSystem’, so I need to include that with the ‘-Properties’ parameter. And there we are.\n\nHere’s another useful one – you can also use LDAP queries. Here, we query your AD using the ‘LDAPFilter’ parameter to find all the ‘Server’ computer objects. This scans the operatingsystem attribute for anything with ‘server’ in the name.\n\nIf you have the need to retrieve the information from a specific domain controller in your environment, you can use the -Server parameter thusly.\n\nI know there are use cases where this would be useful, but, it is slightly more obscure and therefore is in the ‘Advanced’ section of my post.\n\nRetrieve a single computer or multiple computers by using various Get-AdComputer parameters\n\nIn conclusion, Get-ADComputer is a powerful cmdlet that can be used to retrieve computer objects from Active Directory. It can be used to retrieve a single computer or multiple computers by using various parameters such as -Identity, -Filter, -LDAPFilter, -SearchBase, and -Properties.\n\nSome advanced techniques include filtering for inactive computers, searching for computers in a specific OU and its child OUs, exporting results to a CSV file, and sorting results by one or more properties.\n\nIT Professionals can gain a great deal of value by using Get-ADComputer to perform various tasks such as retrieving computer information, generating reports, and automating administrative tasks. By leveraging the power of PowerShell and Get-ADComputer, IT professionals can save time and increase efficiency in their daily tasks."
    },
    {
        "link": "https://lazyadmin.nl/powershell/get-adcomputer",
        "document": "Need to export all computers from an OU, or look up a computer in your Active Directory? Or do you want to count how many computers you have? We can use the cmdlet in PowerShell to quickly extract computer information from the AD.\n\nThe Active Directory contains all the computers that are members of our domain. The management console is great to look up a single computer. But when you want to get details of single or multiple computers, then we need to use PowerShell.\n\nIn this article, we are going to take a look at how to use the cmdlet in PowerShell. I will also give you some useful examples when it comes to looking up and exporting AD computers. And as a bonus, if have added a complete script to export your Active Directory computers.\n\nTo be able to use the Get-ADComputer cmdlet in PowerShell you will need to have the Active Directory Module installed. By default, it’s installed on the domain controller, but on Windows 10 or 11 you will need to install it.\n\nYou can run the following PowerShell command in Windows 10 or 11 to install the module:\n\nFinding Computers with Get ADComputer in PowerShell\n\nThe Get-ADComputer cmdlet allows us to find computer objects in the Active Directory and extract information from them. The true power of this cmdlet is that it comes with different options to find those computer objects.\n\nWe have the following options when it comes to finding objects:\n• Identity – Find computers based on their name. This will return only a single computer\n• LDAPFilter – Use a LDAP query string to filter the computer objects\n• SearchBase – Specify the Active Directory path (OU) to search in\n• SearchScope – Specify how deep you want to search (base level, one level, or complete subtree)\n\nThe identity parameter is mainly used when you know the computer’s SAMAccountName (computer name). This allows you to select a single computer from the Active Directory and view the properties of the account.\n\nThis will return the basic properties of the computer. We can use the -properties parameter to retrieve more information from the computer. I will explain more about retrieving different properties later in the article, but if you want to see all possible information about a computer account, then use the following command:\n\nMost of the time when you want to retrieve computers from the Active Directory you want to narrow down the search base on OU. To do this we can use the -SearchBase parameter for the Get-ADComputer cmdlet. This allows us to specify the OU (distinguishedName) where we want to search.\n\nThe distinguishedName is the full path of the OU, which we write from the OU up the tree to the AD domain name.\n\nTake the following AD structure, we want to get all computers from the Amsterdam site:\n\nThe search base string, in this case, would be:\n\nThus to get all computers from the site Amsterdam, we can use the following PowerShell command:\n\nThe -SearchBase parameter will return all computers from the specified and nested OU’s. By using the -SearchScope parameter, we can specify how deep or not we want to search through the Active Directory tree.\n\nLet’s say we want to get all computers from Amsterdam, except the computers that are in stock:\n\nIf we would use the searchbase that we created earlier, then all computers, including those in stock, will be returned, a total of 15 computers.\n\nTo exclude the computers that are in Stock, we can use the SearchScope parameter. This allows us to limit the searchbase only to the current level:\n\nThe Get-ADComputer cmdlet is also a great way to find one or multiple computers in your AD. Although the computer object doesn’t contain a lot of information, we can still use a couple of the properties to filter on.\n\nLet’s take a look at a couple of commonly used examples to find computers:\n\nWe can find a computer based on a part of the computer name with the -like filter:\n\nNote the wildcard, this means that there can be something in front and after the word “workstation”.\n\nThe Active Directory also keeps track of all operating systems on the computers. So we can also get all computers that are running Windows 10 Pro for example:\n\nWe can also use multiple conditions, for example, to get all computers that running on Windows 10 or 11:\n\nWant to know how many inactive computers you have? We can filter the AD computers on the lastlogondate to extract all computers that are not used for the last 90 days for example.\n\nFor this, we first need to create a date variable, by taking the date from today and subtracting 90 days from it. We can then filter the AD Computers on the lastlogondate:\n\nAnother useful example is to get all disabled computers from the OU:\n\nAs mentioned earlier in the article, the computer object doesn’t contain a lot of useful properties (compared to a user object). But there is still some useful information that can be extracted from the object.\n\nWithout specifying the properties, you only get computer name and distinguishedname related information. But other properties that are useful are for example:\n\nTo get this information we can use the -properties parameter:\n\nExporting results in PowerShell to CSV is pretty common. We all use PowerShell often to retrieve information only to process it further in Excel. I have written a complete guide about the Export-CSV cmdlet, but I also want to give you a couple of useful examples when working with the Get-ADComputer cmdlet.\n\nTo simply export all AD Computer object we can use the following command:\n\nBut as you will notice this will give not really the results that you are looking for. It will include all computer objects, enabled and disabled, and not really the information that we need.\n\nSelect the properties that we need\n\nSo the first step is to specify the fields that we really want to export. For example, if we want to export the name, canonicalname, operatingsystem, and LastLogonDate we could use the following command:\n\nIf you want to export only enable computers, you can add a filter to the cmdlet:\n\nI have created a PowerShell script that will Export all AD Computers to CSV for you with the most commonly needed properties.\n\nWhen you run the script you specify a couple of options:\n• Specify the searchBase (OU), default whole Active Directory\n• Get enabled or disabled computers or both (default only enabled)\n\nThe script will get all the user accounts from the active directory if you don’t specify the searchBase (OU). It’s also possible to specify multiple OU’s:\n\nFollow these steps to export the AD Computers with the PowerShell script:\n• Download the complete Export AD Computers script from my Github\n• Open PowerShell and navigate to the script\n\nWhen complete, the script will automatically open Excel for you.\n\nThe Get ADComputer cmdlet is really useful when it comes to exacting computers out of the Active Directory. Using the searchbase parameter allows you to quickly select the computer that you need from the specified OU.\n\nTo Export the AD Computers to CSV you can try the script. You can easily change the properties that it retrieves to your own needs.\n\nIf you have any questions, just drop a comment below."
    },
    {
        "link": "https://learn.microsoft.com/en-us/powershell/module/activedirectory?view=windowsserver2025-ps",
        "document": "Reverts the previous migration phase of a migration to an delegated managed service account. If the migration process is currently in the start phase, the accounts will be unlinked from each other. If the migration is in the completed phase, it'll return back to the state in the start phase."
    },
    {
        "link": "https://varonis.com/blog/powershell-active-directory-module",
        "document": "Are you tired of managing Active Directory using the graphical interface? Then you might be interested in the Active Directory PowerShell module! This module gives you the ability to manage Active Directory using commands in PowerShell. Harnessing the module opens up the possibilities of automating management tasks like user creation and removal.\n\nGet the free PowerShell and Active Directory Video Course\n\nIn this post, you will learn more about the Active Directory PowerShell module, installing the module on different Windows operating systems, and importing the module into a PowerShell console. To follow along with this tutorial, you will need:\n• A computer with Windows Server 2008 or higher (this tutorial uses Windows Server 2019 Enterprise)\n\nWhat is the PowerShell Active Directory Module?\n\nThe Active Directory PowerShell module consolidates a group of cmdlets used to administer on-premises Active Directory. You use these cmdlets for domain management and managing users, groups, and objects.\n\nNeed to manage Azure Active Directory or Office 365? Check out Jeff Brown's article How to Connect to Office 365 PowerShell (Azure AD Modules)!\n\nWhile you can manage your environment using graphical interfaces (like Active Directory Users and Computers), PowerShell provides the ability to make changes at scale. You issue PowerShell commands that can iterate through a user list to modify an attribute much faster than the graphical interface.\n\nThe Active Directory PowerShell module is automatically installed on domain controllers in your environment. However, if you want to manage your Active Directory environment remotely, you need to install the module on your system. The following sections outline multiple ways to install the modules based on your operating system.\n\nInstalling the PowerShell module is not standardized across Microsoft's multiple Windows operating systems. Review the sections below and find the method that fits your scenario!\n\nThe procedure for installing the Active Directory PowerShell module depends on the Windows 10 version. To determine your version of Windows 10:\n• Click the Start button and search for \"settings.\" Select Settings from the search results.\n• In the Systems section, select About. On the right, look for the Windows specifications section and note the current Version.\n\n\n\nTo see a complete list of Windows 10 versions and release dates, check out this article from Microsoft:\n\nBefore Windows 10 version 1809, Microsoft made the Active Directory PowerShell module available through the Remote Server Administration Tools for Windows 10. This software install includes the module as well as several other remote management features.\n• On the Windows 10 system, open a Web browser and navigate to this address to download the RSAT Tools for Windows 10:https://www.microsoft.com/en-us/download/details.aspx?id=45520\n• Select your language, then click Download. On the file list page, select the x86 for 32-bit systems or x64 for 64-bit systems of the WS_1803 installer. Click Next.\n• Save the installer to a location on your system that you can locate again. Once finished, navigate to that location and open the installer.\n• The installer verifies that the update applies to your system, then prompts if you want to install the update. Click Yes.\n• On the update window, review the license terms, then click I Accept. Monitor the installation, and upon successful installation, click Restart Now.\n• Once the system has restarted, click the Start button and search for \"control panel.\" Select the Control Panel app from the search results.\n• In the Control Panel, click Programs, then Programs and Features. Depending on your view settings, Programs and Features may already be displayed.\n• In Programs and Features, select Turn Windows features on or off.\n• In the Windows Features window, navigate to Remote Server Administration Tools > Role Administration Tools > AD DS and AD LDS Tools.\n• If the Active Directory Module for Windows PowerShell does not have a checkmark next to its name, select the option, and click OK.\n\n\n\nInstallation for Windows 10 version 1809 and later\n\nIn October 2018, Microsoft released Windows 10 version 1809, which changed how you install the Active Directory PowerShell Module. The RSAT Tools for Windows 10 are now part of the operating system and are an optional installation feature. There are two installation methods available for these later versions.\n\nTo install the RSAT Tools using the Settings app:\n• Click the Start button and search for \"settings.\" Select Settings from the search results.\n• Select + Add a feature, then type \"Active Directory\" in the search bar. Select RSAT: Active Directory Domain Services and Lightweight Directory Services from the results, then click Install.\n\n\n\nA second option is to enable the same feature from Method 1 using PowerShell.\n• Click the Start button and search for \"powershell.\" Select Windows PowerShell from the search results.\n• In the PowerShell console, use the Add-WindowsCapability cmdlet to install the Active Directory RSAT tools. Specify the (Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0) and the parameter to use Windows Update to install the feature.\n\nWhile Windows 10 has different installation procedures based on version, Windows Server has maintained the same installation method across multiple versions. While this tutorial focuses on Windows Server 2019, these methods should be valid for other versions such as:\n• Click on Start and click Server Manager from the Start menu.\n• In Server Manager, click Manage in the upper right corner, then click Add Roles and Features.\n• In the Add Roles and Features Wizard, click Next if the Before you begin window is displayed. If not, proceed to the next step.\n• For the installation type, select the Role-based or feature-based installation option, then click Next.\n• For the server selection, select the Select a server from the server pool option, then select the server name from the server pool. Click Next.\n• On the Server Roles page, no changes need to be made. Click Next.\n• On the Features page, expand Remote Server Administration Tools > Role Administration Tools > AD DS and AD LDS Tools, then select Active Directory module for Windows Powershell. Once selected, click Next.\n• On the Confirmation page, click Install. Once the install completes successfully, click Close.\n• Click the Start button and search for \"powershell.\" Select Windows PowerShell from the search results.\n• In the PowerShell console, use the Install-WindowsFeature cmdlet to install the Active Directory PowerShell module. Specify the feature -Name (RSAT-AD-PowerShell) and add the -IncludeAllSubFeature parameter to add any child features.\n\nWhile there are many installation methods, there is only one way to import the module! The following steps are valid for both Windows 10 and all server versions. To import the Active Directory PowerShell module:\n• Click the Start button and search for \"powershell.\" Select Windows PowerShell from the search results.\n• To verify the module is available, run the Get-Module command specifying the (ActiveDirectory) and the parameter to search all modules installed on the system. If a result is returned like in the screenshot below, you are good to go!\n• Import the module using the Import-Module cmdlet, again specifying the module's name (ActiveDirectory) using the parameter.\n\nSuccess! You have installed and imported the Active Directory PowerShell module!\n\nWhat is Active Directory Module for PowerShell?\n\nThe Active Directory PowerShell module is a set of cmdlets used for managing Active Directory domains and objects. You can install the module on Windows operating systems like Windows 10 and Windows Server.\n\nHow do I import the Active Directory PowerShell module?\n\nUse the Import-Module cmdlet with the -Name ActiveDirectory parameter and value.\n\nHow do I install the Active Directory PowerShell module on Windows Server?\n\nIn a PowerShell console, run the command Install-WindowsFeature -Name \"RSAT-AD-PowerShell\" -IncludeAllSubFeature.\n\nThe Active Directory PowerShell module is a powerful tool for administrators. In this article, you learned how to install the module on non-domain controller systems for remote management. Next, explore all the commands in the module to see what tasks you can automate!\n\nWant to learn more about PowerShell scripting for Active Directory? Check out Michael Buckbee's article How to Get Started with PowerShell and Active Directory Scripting!"
    },
    {
        "link": "https://learn.microsoft.com/en-us/troubleshoot/windows-server/system-management-components/remote-server-administration-tools",
        "document": "RSAT enables IT administrators to remotely manage roles and features in Windows Server from a computer that is running Windows 10 and Windows 7 Service Pack 1.\n\nYou can't install RSAT on computers that are running Home or Standard editions of Windows. You can install RSAT only on Professional or Enterprise editions of the Windows client operating system. Unless the download page specifically states that RSAT applies to a beta, preview, or other prerelease version of Windows, you must be running a full (RTM) release of the Windows operating system to install and use RSAT. Some users have found ways of manually cracking or hacking the RSAT MSU to install RSAT on unsupported releases or editions of Windows. This behavior is a violation of the Windows end-user license agreement.\n\nInstalling RSAT is similar to installing Adminpak.msi in Windows 2000-based or Windows XP-based client computers. However, there's one major difference: in Windows 7, the tools aren't automatically available after you download and install RSAT. Enable the tools that you want to use by using Control Panel. To enable the tools, select Start > Control Panel > Programs and Features, and then select Turn Windows features on or off.\n\nIn the RSAT releases for Windows 10, tools are again all enabled by default. You can open Turn Windows features on or off to disable tools that you don't want to use for Windows 7.\n\nFor RSAT in Windows 7, you must enable the tools for the roles and features that you want to manage after you run the downloaded installation package.\n\nIf you have to install management tools in Windows Server 2012 R2 for specific roles or features that are running on remote servers, you don't have to install additional software. Start the Add Roles and Features Wizard in Windows Server 2012 R2 and later versions. Then, on the Select Features page, expand Remote Server Administration Tools, and then select the tools that you want to install. Complete the wizard to install your management tools.\n\nRSAT for Windows 10, version 1809 or later versions\n\nInstalling the RSAT Tools for Windows 10 version 1809 and later version is slightly different from earlier versions. RSAT is now part of the Operating System and can be added via Optional Features.\n\nTo enable the tools, select Start > Settings > Apps (if you're using Windows 10, version 22H2 or later versions, select System instead), and then select Optional features. After that, select the Add a feature panel and enter Remote in the search bar.\n• None Screencast: How to Install and Enable Microsoft RSAT (Remote Server Administration Tools) for Windows Vista"
    },
    {
        "link": "https://ninjaone.com/blog/powershell-active-directory-module",
        "document": "Managing Active Directory, the heart of Windows network infrastructure, comes with a unique set of challenges. From user account management to group policy configurations, the administrative tasks can be complex and time-consuming. That’s where PowerShell comes in, Microsoft’s powerful scripting language, which has become a game-changer for automating administrative tasks.\n\nIn this guide, we will introduce the PowerShell Active Directory Module, exploring what it is, its role in simplifying management tasks, and how to install and import it efficiently.\n\nWhat is the PowerShell Active Directory Module?\n\nThe PowerShell Active Directory Module is a set of commandlets, or cmdlets, that facilitate the management of Active Directory. Cmdlets are lightweight commands used in PowerShell for specific administrative tasks.\n\nThe Active Directory Module acts as a bridge between the Windows PowerShell environment and the directory service, providing administrators with a powerful toolset to automate and streamline tasks, as well as cleaning up Active Directory.\n\nPowerShell has evolved over the years, reflecting Microsoft’s commitment to improving the administrative experience for IT professionals. The Active Directory Module was initially introduced as a separate installation, but the module has become an integral part of Windows Server editions, making it more accessible and ensuring that the latest features are readily available.\n\nThe PowerShell Active Directory Module simplifies the management of Active Directory by providing a consistent and efficient scripting interface. Rather than relying on graphical user interfaces (GUIs), administrators can leverage PowerShell scripts to perform tasks such as creating user accounts, modifying group memberships, and managing organizational units.\n\nThis automation not only reduces the likelihood of human error but also significantly speeds up the execution of repetitive tasks, as well as freeing up time for other duties.\n\nIn PowerShell, understanding the distinction between installing, importing, and loading modules is crucial.\n• Install-Module: This command is used to download and install a module from an online repository like the PowerShell Gallery. It’s typically used when you want to add a new module to your system.\n• Import-Module: Once a module is installed, the Import-Module cmdlet is used to make its cmdlets available for use in the current PowerShell session. This is necessary to execute the cmdlets and leverage the functionality of the module.\n• Load-Module: The Load-Module cmdlet is used to load a module into the current session’s memory, making its cmdlets available for use without importing. This approach is beneficial when you want to keep the module in memory for an extended period or when dealing with large modules to minimize loading times.\n\nBefore installing the Active Directory PowerShell Module, ensure that your system meets the following requirements:\n• Operating system: Windows Server is recommended for server installations, while Windows 10 or Windows 11 are suitable for client installations.\n• PowerShell version: Ensure that you have PowerShell 5.1 or later installed on your system.\n• Remote Server Administration Tools (RSAT): Depending on your Windows version, you may need to install RSAT, which includes the Active Directory module.\n• Internet access: Ensure that your system has internet access to download the module from the PowerShell Gallery. If your system is behind a proxy, you may need to configure proxy settings for PowerShell.\n\nThe steps required to install the Active Directory PowerShell Module vary slightly depending on your Windows operating system version, with additional pop-ups and confirmation dialogues present in some versions.\n\nThese are the core steps:\n• Open PowerShell as administrator : Right-click the PowerShell icon and select “Run as Administrator” to open a PowerShell session with elevated privileges\n• Use Install-Module cmdlet: Execute the following command to install the Active Directory PowerShell Module: Install-Module -Name RSAT-AD-PowerShell\n• Confirm installation: Once the installation is complete, you may need to confirm that you want to install the module by typing ‘Y’ and pressing Enter.\n• Check the execution policy If you encounter issues with the installation due to execution policy restrictions, you may need to temporarily set it to allow script execution. Use the following command: Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\n\nOnce the module is installed, it needs to be imported into your PowerShell session before you can start using its cmdlets. Importing loads the module into memory, making its functionality available for execution:\n• Use Import-Module cmdlet : Execute the following command to import the Active Directory module: Import-Module RSAT-AD-PowerShell\n• Verify import: You can verify that the module has been successfully imported by running this simple cmdlet: Get-Command -Module RSAT-AD-PowerShell\n\nTo ensure that the Active Directory module is loaded automatically when you open a PowerShell session, you can add the import command to your PowerShell profile script. This script runs every time you open a new PowerShell session:\n• Check if a profile exists: Open PowerShell and run the following command to check if you have a profile script: Test-Path $Profile\n\nIf the command returns False, you need to create a profile (step 2). If it returns True, proceed to step 3.\n• Create a profile (if needed): If you don’t have a profile, create one using the following command: New-Item -Path $Profile -ItemType File -Force\n• Edit the profile script: Open your profile script in a text editor. You can use Notepad or any other code editor you prefer. Run the following command to open the profile in Notepad: notepad $Profile\n• Add Import-Module line: In the profile script, add the following line to import the Active Directory module. Ensure that the path specified matches the actual path where the module is installed: Import-Module -Name RSAT-AD-PowerShell\n\nThe PowerShell Active Directory Module is more than a tool – it transforms the way Active Directory tasks are approached. Armed with data gathered by advanced Active Directory management tools, it is easy to create scripts that maximize administrative efficiency.\n\nAs technology continues to evolve, leveraging tools like the PowerShell Active Directory Module becomes a necessity for administrators looking for ways to optimize their environments. Empower your scripts, automate your tasks, and let the PowerShell Active Directory Module be the foundation of your Active Directory management excellence."
    },
    {
        "link": "https://simeononsecurity.com/articles/active-directory-module-powershell-installation-usage-guide",
        "document": "In today’s digital landscape, managing and maintaining user accounts, security groups, and other resources in a Windows Active Directory (AD) environment requires efficient and streamlined processes. PowerShell, a powerful scripting language developed by Microsoft, offers the Active Directory module to facilitate AD administration tasks. This module provides a wide range of cmdlets that enable administrators to automate various operations and manage AD effectively. In this article, we will explore the installation and usage of the Active Directory module for PowerShell.\n\nInstallation of the Active Directory Module for PowerShell #\n\nTo begin using the Active Directory module for PowerShell, you need to ensure that it is installed on your system. The installation process may vary depending on your operating system. Here are the steps for installing the module on Windows 10, Windows 11, and Windows Server:\n• Run the following command to install the module:\n• Wait for the installation to complete. Once finished, you can start using the Active Directory module.\n• Run the following command to install the module:\n• Wait for the installation to complete. Once finished, you can start using the Active Directory module.\n\nOffline Systems get a bit more complicated. There are a few methods, however the one we recommend is through the use of the following script:\n\nBefore you can utilize the Active Directory module in PowerShell, you need to import it into your current session. Follow these steps to import the module:\n• Execute the following command to import the module:\n• The Active Directory module will be imported, and you can now access its cmdlets and functions.\n\nUsing the Active Directory Module for PowerShell #\n\nWith the Active Directory module imported, you can leverage its rich set of cmdlets to perform various administrative tasks. Let’s explore some commonly used cmdlets and their functionalities:\n\nTo effectively manage an Active Directory (AD) environment, it is crucial to retrieve information about various AD objects, such as users, groups, and organizational units (OUs). PowerShell provides powerful cmdlets that simplify the retrieval process.\n• None Get-ADUser : This cmdlet allows you to retrieve detailed information about AD users. You can obtain attributes like username, display name, email address, and more. For example, to retrieve all users whose usernames start with “johndoe,” you can run the following command: This command will return a list of user objects that match the specified filter.\n• None Get-ADGroup : With the Get-ADGroup cmdlet, you can fetch information about AD groups. It provides access to details such as group name, members, description, and more. For instance, to retrieve all security groups in the AD environment, you can execute the following command: This will provide a list of security groups in the Active Directory.\n• None Get-ADOrganizationalUnit : The Get-ADOrganizationalUnit cmdlet is used to retrieve information about AD OUs. It allows you to access properties like OU name, description, parent OU, and more. To fetch all OUs in the domain, you can use the following command: Running this command will display a list of all OUs in the Active Directory.\n\nBy utilizing these powerful cmdlets, you can easily retrieve specific information about AD users, groups, and OUs, enabling efficient administration and management of your Active Directory environment.\n\nThese cmdlets allow you to retrieve specific attributes, filter results, and perform advanced queries to fetch the desired information.\n\nWhen working with Active Directory (AD), the Active Directory module in PowerShell offers powerful cmdlets for creating and managing AD objects. Let’s explore some essential cmdlets for creating AD users, groups, and organizational units (OUs).\n• None New-ADUser : This cmdlet allows you to create a new AD user. You can specify attributes such as username, password, email address, and more. For example, to create a new user with the username “john.doe” and the display name “John Doe,” you can use the following command: This command will create a new user in the Active Directory.\n• None New-ADGroup : The New-ADGroup cmdlet enables you to create a new AD group. You can set properties such as group name, description, group scope, and more. To create a new group named “Marketing” with a description, you can execute the following command: This command will create a new group in the Active Directory.\n• None New-ADOrganizationalUnit : With the New-ADOrganizationalUnit cmdlet, you can create a new AD OU. You can specify properties like OU name, parent OU, and more. For example, to create a new OU named “Sales” under the “Departments” OU, you can run the following command: This command will create a new OU in the Active Directory hierarchy.\n\nBy leveraging these cmdlets, you can easily create new AD users, groups, and OUs with the desired properties and configurations, enabling efficient management of your Active Directory environment.\n\nWhen it comes to modifying the properties and attributes of existing Active Directory (AD) objects, the Active Directory module in PowerShell provides several useful cmdlets. Let’s explore these cmdlets for modifying AD users, groups, and organizational units (OUs).\n• None Set-ADUser : The Set-ADUser cmdlet allows you to modify properties of an AD user. You can update attributes such as display name, email address, telephone number, and more. For example, to change the telephone number of a user with the username “john.doe,” you can use the following command: This command will modify the telephone number of the specified user in the Active Directory.\n• None Set-ADGroup : With the Set-ADGroup cmdlet, you can modify properties of an AD group. You can update attributes like group description, membership, group scope, and more. To change the description of a group named “Marketing” to “Marketing Team,” you can execute the following command: This command will update the description of the specified group in the Active Directory.\n• None Set-ADOrganizationalUnit : The Set-ADOrganizationalUnit cmdlet allows you to modify properties of an AD OU. You can change attributes such as OU name, description, and more. For example, to modify the description of an OU named “Sales” to “Sales Department,” you can run the following command: This command will update the description of the specified OU in the Active Directory hierarchy.\n\nBy utilizing these cmdlets, you can easily modify the properties and attributes of AD objects, making necessary updates and adjustments to meet your organization’s requirements.\n\nIn addition to managing and administering Active Directory (AD) objects, the Active Directory module in PowerShell provides cmdlets specifically designed to handle security-related aspects of AD. These cmdlets empower administrators to efficiently manage user access, group memberships, and password-related tasks within the AD environment.\n\nHere are some commonly used security-related cmdlets:\n• None Add-ADGroupMember : This cmdlet allows you to add members to an AD group. By specifying the AD group and the user accounts or groups you want to add, you can easily manage access control. For example, to add a user named “JohnDoe” to the “Managers” group, you can use the following command:\n• None Remove-ADGroupMember : With this cmdlet, you can remove members from an AD group. By specifying the AD group and the user accounts or groups you want to remove, you can effectively manage group memberships. For instance, to remove a user named “JaneSmith” from the “Developers” group, you can use the following command:\n• None Set-ADUserPassword : This cmdlet enables you to set the password for an AD user. By specifying the user account and providing a new password, you can enforce password policies and ensure secure user authentication. Here’s an example of setting a new password for a user named “AmyJohnson”:\n\nBy utilizing these security-related cmdlets, administrators can effectively manage user access, group memberships, and password policies within the Active Directory environment.\n\nIn conclusion, the Active Directory module for PowerShell is a powerful tool that enables efficient and convenient management of Windows Active Directory. By installing and importing the module, you gain access to a comprehensive set of cmdlets that simplify various AD-related tasks.\n\nWith the Active Directory module, you can perform a wide range of operations such as retrieving information about AD objects, creating new objects, modifying properties, and managing security. This module empowers administrators to automate administrative tasks, streamline workflows, and ensure the smooth functioning of Active Directory environments.\n\nBy leveraging PowerShell and the Active Directory module, you can enhance your AD administration capabilities and improve the efficiency of AD management processes. Whether you are a system administrator, IT professional, or Active Directory manager, the Active Directory module equips you with the necessary tools to effectively manage your AD infrastructure.\n\nEmbrace the power of PowerShell and the Active Directory module to streamline your AD administration tasks, increase productivity, and maintain a secure and well-organized Active Directory environment."
    }
]