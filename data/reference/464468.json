[
    {
        "link": "https://zabbix.com/documentation/6.0/en/manual/api/reference/host/create",
        "document": "This method allows to create new hosts.\n\nThis method is only available to Admin and Super admin user types. Permissions to call the method can be revoked in user role settings. See User roles for more information.\n\nAdditionally to the standard host properties, the method accepts the following parameters.\n\nReturns an object containing the IDs of the created hosts under the property. The order of the returned IDs matches the order of the passed hosts.\n\nCreate a host called \"Linux server\" with an IP interface and tags, add it to a group, link a template to it and set the MAC addresses in the host inventory.\n\nCreate a host called \"SNMP host\" with an SNMPv3 interface with details.\n\nCreate a host called \"PSK host\" with PSK encryption configured. Note that the host has to be pre-configured to use PSK."
    },
    {
        "link": "https://zabbix.com/documentation/current/en/manual/api/reference/host/create",
        "document": "This method allows to create new hosts.\n\nThis method is only available to Admin and Super admin user types. Permissions to call the method can be revoked in user role settings. See User roles for more information.\n\nAdditionally to the standard host properties, the method accepts the following parameters.\n\nReturns an object containing the IDs of the created hosts under the property. The order of the returned IDs matches the order of the passed hosts.\n\nCreate a host called \"Linux server\" with an IP interface and tags, add it to a group, link a template to it and set the MAC addresses in the host inventory.\n\nCreate a host called \"SNMP host\" with an SNMPv3 interface with details.\n\nCreate a host called \"PSK host\" with PSK encryption configured. Note that the host has to be pre-configured to use PSK.\n\nCreate a host that will be monitored by proxy with ID \"1\".\n\nCreate a host that will be monitored by proxy group with ID \"1\"."
    },
    {
        "link": "https://zabbix.com/documentation/current/en/manual/api",
        "document": "The Zabbix API allows you to programmatically retrieve and modify configuration of Zabbix and provides access to historical data. It is widely used to:\n• create new applications to work with Zabbix;\n\nThe Zabbix API is an HTTP-based API, and it is shipped as a part of the web frontend. It uses the JSON-RPC 2.0 protocol, which means two things:\n• the API consists of a set of separate methods;\n• requests and responses between the clients and the API are encoded using the JSON format.\n\nFor more information about the protocol and JSON, see the JSON-RPC 2.0 specification and the JSON format homepage.\n\nFor more information about integrating Zabbix functionality into your Python applications, see the zabbix_utils Python library for Zabbix API.\n\nThe API consists of a number of methods that are nominally grouped into separate APIs. Each of the methods performs one specific task. For example, the method belongs to the host API and is used to create new hosts. Historically, APIs are sometimes referred to as \"classes\".\n\nOnce you have set up the frontend, you can use remote HTTP requests to call the API. To do that, you need to send HTTP POST requests to the file located in the frontend directory. For example, if your Zabbix frontend is installed under , an HTTP request to call the method may look like this:\n\nThe request must have the header set to one of these values: , or .\n\nThe request object contains the following properties:\n• - the version of the JSON-RPC protocol used by the API (Zabbix API implements JSON-RPC version 2.0);\n• - the parameters that will be passed to the API method;\n• - an arbitrary identifier of the request.\n\nIf the request is correct, the response returned by the API should look like this:\n\nThe response object, in turn, contains the following properties:\n• - the version of the JSON-RPC protocol;\n• - the data returned by the method;\n• - an identifier of the corresponding request.\n\nThe following section will walk you through some examples of usage in a greater detail.\n\nTo access any data in Zabbix, you need to either:\n• use an existing API token (created in Zabbix frontend or using the Token API);\n• use an authentication token obtained with the user.login method.\n\nFor example, if you wanted to obtain a new authentication token by logging in as a standard Admin user, then a JSON request would look like this:\n\nIf you provided the credentials correctly, the response returned by the API should contain the user authentication token:\n\nAll API requests require an authentication or an API token. You can provide the credentials by using the Authorization header in the request:\n\nSince Zabbix 7.2.1, the Authorization header is supported in cross-origin requests (CORS). Since Zabbix 7.2.5, Zabbix API accepts headers in a case-insensitive way (e.g., , , and are treated the same).\n\nA \"zbx_session\" cookie is used to authorize an API request from Zabbix UI performed using JavaScript (from a module or a custom widget).\n\nNow you have a valid user authentication token that can be used to access the data in Zabbix. For example, you can use the host.get method to retrieve the IDs, host names and interfaces of all the configured hosts:\n\nThe response object will contain the requested data about the hosts:\n\nNow, create a new item on the host \"Zabbix server\" using the data you have obtained from the previous request. This can be done using the item.create method:\n\nA successful response will contain the ID of the newly created item, which can be used to reference the item in the following requests:\n\nThus, if create methods accept arrays, you can add multiple triggers, for example, this one:\n\nThe successful response will contain the IDs of the newly created triggers:\n\nEnable an item by setting its status to \"0\":\n\nThe successful response will contain the ID of the updated item:\n\nEnable multiple triggers by setting their status to \"0\":\n\nThe successful response will contain the IDs of the updated triggers:\n\nUp to the present moment, everything you have tried has worked fine. But what would happen if you tried making an incorrect call to the API? Try to create another host by calling host.create but omitting the mandatory parameter:\n\nThe response will then contain an error message:\n\nIf an error has occurred, instead of the property, the response object will contain the property with the following data:\n\nErrors can occur in various cases, such as, using incorrect input values, a session timeout or trying to access non-existing objects. Your application should be able to gracefully handle these kinds of errors.\n\nTo simplify API versioning, since Zabbix 2.0.4, the version of the API matches the version of Zabbix itself. You can use the apiinfo.version method to find out the version of the API you are working with. This can be useful for adjusting your application to use version-specific features.\n\nZabbix guarantees feature backward compatibility inside a major version. When making backward incompatible changes between major releases, Zabbix usually leaves the old features as deprecated in the next release, and only removes them in the release after that. Occasionally, Zabbix may remove features between major releases without providing any backward compatibility. It is important that you never rely on any deprecated features and migrate to newer alternatives as soon as possible.\n\nNow, you have enough knowledge to start working with the Zabbix API, however, do not stop here. For further reading you are advised to have a look at the list of available APIs."
    },
    {
        "link": "https://zabbix.com/documentation/6.0/en/manual/api/changes_6.0",
        "document": "ZBX-25385 : Parameter is now supported only for Super admin type users.\n\n ZBX-25385 : Admin type users may now retrieve only the following Media type object properties: , , , , .\n\n ZBX-25385 : When requesting user-related information of media types, Admin type users may now retrieve only data about their own user.\n\n\n\nChanges:\n\n ZBX-19466 changed validation of object to be unique by combination of 2 properties: and .\n\n\n\nChanges:\n\n ZBXNEXT-7951 , : option for will now unlink missing templates (instead of unlink and clear).\n\n\n\nChanges:\n\n ZBXNEXT-7951 : the parameter can now be updated.\n\n\n\nChanges:\n\n ZBXNEXT-7951 : the parameter can now be updated.\n\n\n\nChanges:\n\n ZBXNEXT-7951 : the parameter can now be updated.\n\n\n\nChanges:\n\n ZBXNEXT-7951 : the parameter can now be updated.\n\n\n\nChanges:\n\n ZBXNEXT-7951 : the parameter can now be updated.\n\n\n\nChanges:\n\n ZBXNEXT-7951 : the parameter can now be updated.\n\n\n\nChanges:\n\n ZBXNEXT-7951 : the parameter can now be updated.\n\n\n\nChanges:\n\n ZBXNEXT-7951 : the parameter can now be updated.\n\n\n\nChanges:\n\n ZBXNEXT-7951 : the parameter can now be updated.\n\n\n\nChanges:\n\n ZBXNEXT-7951 : the parameter can now be updated.\n\n\n\nChanges:\n\n ZBXNEXT-7951 : the parameter can now be updated.\n\n\n\nChanges:\n\n ZBXNEXT-7951 : the parameter can now be updated.\n\n\n\nChanges:\n\n ZBXNEXT-7951 : the parameter can now be updated.\n\n\n\nChanges:\n\n ZBXNEXT-7971 , : increased max length of the \"url\" field to 2048 characters.\n\n\n\nChanges:\n\n ZBX-7706 : Graph availability doesn't depend on permissions to items specified in graph \"ymin_itemid\" and \"ymax_itemid\" fields.\n\n Graph having MIN or MAX Y axis linked to inaccessible items will still be accessible but MIN/MAX Y axis works the same way as if specified calculation method is \"Calculated\".\n\n\n\nChanges:\n\n ZBX-7706 : Graph prototype availability doesn't depend on permissions to items specified in graph prototype \"ymin_itemid\" and \"ymax_itemid\" fields.\n\n\n\nBug fixes:\n\n ZBX-19118 , : property is no longer required to create/update a HTTP agent type LLD rule.\n\n\n\nBug fixes:\n\n ZBX-19118 , : property is no longer required to create/update a HTTP agent type item.\n\n\n\nBug fixes:\n\n ZBX-19118 , : property is no longer required to create/update a HTTP agent type item prototype."
    },
    {
        "link": "https://zabbix.com/documentation/current/en/manual/api/reference",
        "document": "This section provides an overview of the functions provided by the Zabbix API and will help you find your way around the available classes and methods.\n\nThe Zabbix API allows you to access history and other data gathered during monitoring.\n\nManage dashboards and make scheduled reports based on them.\n\nRetrieve a list of server nodes and their status.\n\nRetrieve historical values gathered by Zabbix monitoring processes for presentation or further processing.\n\nRetrieve trend values calculated by Zabbix server for presentation or further processing.\n\nRetrieve events generated by triggers, network discovery and other Zabbix systems for more flexible situation management or third-party tool integration.\n\nRetrieve problems according to the given parameters.\n\nConfigure maps to create detailed dynamic representations of your IT infrastructure.\n\nThe Zabbix API allows you to access data gathered during service monitoring.\n\nManage services for service-level monitoring and retrieve detailed SLA information about any service.\n\nThe Zabbix API allows you to manage the configuration of your monitoring system.\n\nManage host groups, hosts and everything related to them, including host interfaces, host macros and maintenance periods.\n\nConfigure triggers to notify you about problems in your system. Manage trigger dependencies.\n\nEdit graphs or separate graph items for better presentation of the gathered data.\n\nManage templates and link them to hosts or other templates.\n\nConfigure low-level discovery rules as well as item, trigger and graph prototypes to monitor dynamic entities.\n\nManage network-level discovery rules to automatically find and monitor new hosts. Gain full access to information about discovered services and hosts.\n\nExport and import Zabbix configuration data for configuration backups, migration or large-scale configuration updates.\n\nConfigure web scenarios to monitor your web applications and services.\n\nThe Zabbix API allows you to manage the actions and alerts of your monitoring system.\n\nDefine actions and operations to notify users about certain events or automatically execute remote commands. Gain access to information about generated alerts and their receivers.\n\nConfigure and execute scripts to help you with your daily tasks.\n\nThe Zabbix API allows you to manage users of your monitoring system.\n\nAdd users that will have access to Zabbix, assign them to user groups and grant permissions. Make roles for granular management of user rights.\n\nWith the Zabbix API you can change administration settings of your monitoring system.\n\nTrack configuration changes each user has done.\n\nManage the proxies used in your distributed monitoring setup.\n\nRetrieve the version of the Zabbix API so that your application could use version-specific features."
    },
    {
        "link": "https://geeksforgeeks.org/response-json-python-requests",
        "document": "Python requests are generally used to fetch the content from a particular resource URL. Whenever we make a request to a specified URL through Python, it returns a response object. Now, this response object would be used to access certain features such as content, headers, etc. This article revolves around how to check the response.json() out of a response object. It is one of the most used methods in the requests module.\n\nHow to use response.json() using Python requests?\n\nresponse.json() is a part of the requests module in Python so, firstly we have to install the requests module in Python. response.json() is widely used to fetch data from APIs. In this article, we will explore how to use response.json() to load JSON data into Python objects.\n\nIn the below code, firstly we imported the requests module and then fetch the data from an API using requests.get() method and store in variable ‘response’. When we print the response it prints ‘<Response [200]>’ which is the HTTP code that indicates success. To print the JSON data fetched we have used json() method which prints the JSON data in the Python dictionary format as seen in the output. In this way, we can pas parse JSON responses in Python.\n\nIn the below code, we will parse the JSON data and print that data same as we access the keys and values of a dictionary. After making the get request to an API we store the JSON data in a variable “API_Data” using the response.json() method. Then we iterate over the JSON data using for loop and print the data by using the keys.\n\nHow to Pretty Print a JSON Object From Python Requests\n\nIn the below code, we will pretty print the JSON object that we got from an API using request.get() method. For that after converting the JSON object to the dictionary and stored into “response_dict” we will apply the json.dumps() method on data stored in “response_dict”. We will apply indentation on data by passing the argument “indent=4” and sorting the keys by setting “sort_keys=True” and then printing the data. We can see in the output that data is sorted in increasing order and with indentation.\n\nThere are many libraries to make an HTTP request in Python, which are httplib, urllib, httplib2, treq, etc., but requests are one of the best with cool features. If any attribute of requests shows NULL, check the status code using the below attribute.\n\nIf status_code doesn’t lie in the range of 200-29. You probably need to check the method begin used for making a request + the URL you are requesting for resources."
    },
    {
        "link": "https://requests.readthedocs.io/en/master/user/quickstart",
        "document": "Eager to get started? This page gives a good introduction in how to get started with Requests.\n\nFirst, make sure that:\n\nLet’s get started with some simple examples.\n\nMaking a request with Requests is very simple. Now, let’s try to get a webpage. For this example, let’s get GitHub’s public timeline: Now, we have a object called . We can get all the information we need from this object. Requests’ simple API means that all forms of HTTP request are as obvious. For example, this is how you make an HTTP POST request: Nice, right? What about the other HTTP request types: PUT, DELETE, HEAD and OPTIONS? These are all just as simple: That’s all well and good, but it’s also only the start of what Requests can do.\n\nYou often want to send some sort of data in the URL’s query string. If you were constructing the URL by hand, this data would be given as key/value pairs in the URL after a question mark, e.g. . Requests allows you to provide these arguments as a dictionary of strings, using the keyword argument. As an example, if you wanted to pass and to , you would use the following code: You can see that the URL has been correctly encoded by printing the URL: Note that any dictionary key whose value is will not be added to the URL’s query string. You can also pass a list of items as a value:\n\nWe can read the content of the server’s response. Consider the GitHub timeline again: Requests will automatically decode content from the server. Most unicode charsets are seamlessly decoded. When you make a request, Requests makes educated guesses about the encoding of the response based on the HTTP headers. The text encoding guessed by Requests is used when you access . You can find out what encoding Requests is using, and change it, using the property: If you change the encoding, Requests will use the new value of whenever you call . You might want to do this in any situation where you can apply special logic to work out what the encoding of the content will be. For example, HTML and XML have the ability to specify their encoding in their body. In situations like this, you should use to find the encoding, and then set . This will let you use with the correct encoding. Requests will also use custom encodings in the event that you need them. If you have created your own encoding and registered it with the module, you can simply use the codec name as the value of and Requests will handle the decoding for you.\n\nThere’s also a builtin JSON decoder, in case you’re dealing with JSON data: In case the JSON decoding fails, raises an exception. For example, if the response gets a 204 (No Content), or if the response contains invalid JSON, attempting raises . This wrapper exception provides interoperability for multiple exceptions that may be thrown by different python versions and json serialization libraries. It should be noted that the success of the call to does not indicate the success of the response. Some servers may return a JSON object in a failed response (e.g. error details with HTTP 500). Such JSON will be decoded and returned. To check that a request is successful, use or check is what you expect.\n\nIn the rare case that you’d like to get the raw socket response from the server, you can access . If you want to do this, make sure you set in your initial request. Once you do, you can do this: In general, however, you should use a pattern like this to save what is being streamed to a file: Using will handle a lot of what you would otherwise have to handle when using directly. When streaming a download, the above is the preferred and recommended way to retrieve the content. Note that can be freely adjusted to a number that may better fit your use cases. An important note about using versus . will automatically decode the and transfer-encodings. is a raw stream of bytes – it does not transform the response content. If you really need access to the bytes as they were returned, use .\n\nIf you’d like to add HTTP headers to a request, simply pass in a to the parameter. For example, we didn’t specify our user-agent in the previous example: Note: Custom headers are given less precedence than more specific sources of information. For instance:\n• None Authorization headers set with will be overridden if credentials are specified in , which in turn will be overridden by the parameter. Requests will search for the netrc file at , , or at the path specified by the environment variable.\n• None Authorization headers will be removed if you get redirected off-host.\n• None Proxy-Authorization headers will be overridden by proxy credentials provided in the URL.\n• None Content-Length headers will be overridden when we can determine the length of the content. Furthermore, Requests does not change its behavior at all based on which custom headers are specified. The headers are simply passed on into the final request. Note: All header values must be a , bytestring, or unicode. While permitted, it’s advised to avoid passing unicode header values.\n\nTypically, you want to send some form-encoded data — much like an HTML form. To do this, simply pass a dictionary to the argument. Your dictionary of data will automatically be form-encoded when the request is made: The argument can also have multiple values for each key. This can be done by making either a list of tuples or a dictionary with lists as values. This is particularly useful when the form has multiple elements that use the same key: There are times that you may want to send data that is not form-encoded. If you pass in a instead of a , that data will be posted directly. For example, the GitHub API v3 accepts JSON-Encoded POST/PATCH data: Please note that the above code will NOT add the header (so in particular it will NOT set it to ). If you need that header set and you don’t want to encode the yourself, you can also pass it directly using the parameter (added in version 2.4.2) and it will be encoded automatically: Note, the parameter is ignored if either or is passed.\n\nYou can set the filename, content_type and headers explicitly: If you want, you can send strings to be received as files: In the event you are posting a very large file as a request, you may want to stream the request. By default, does not support this, but there is a separate package which does - . You should read the toolbelt’s documentation for more details about how to use it. For sending multiple files in one request refer to the advanced section. It is strongly recommended that you open files in binary mode. This is because Requests may attempt to provide the header for you, and if it does this value will be set to the number of bytes in the file. Errors may occur if you open the file in text mode.\n\nWe can view the server’s response headers using a Python dictionary: The dictionary is special, though: it’s made just for HTTP headers. According to RFC 7230, HTTP Header names are case-insensitive. So, we can access the headers using any capitalization we want: It is also special in that the server could have sent the same header multiple times with different values, but requests combines them so they can be represented in the dictionary within a single mapping, as per RFC 7230: A recipient MAY combine multiple header fields with the same field name into one “field-name: field-value” pair, without changing the semantics of the message, by appending each subsequent field value to the combined field value in order, separated by a comma.\n\nYou can tell Requests to stop waiting for a response after a given number of seconds with the parameter. Nearly all production code should use this parameter in nearly all requests. Failure to do so can cause your program to hang indefinitely: is not a time limit on the entire response download; rather, an exception is raised if the server has not issued a response for seconds (more precisely, if no bytes have been received on the underlying socket for seconds). If no timeout is specified explicitly, requests do not time out.\n\nIn the event of a network problem (e.g. DNS failure, refused connection, etc), Requests will raise a exception. will raise an if the HTTP request returned an unsuccessful status code. If a request times out, a exception is raised. If a request exceeds the configured number of maximum redirections, a exception is raised. All exceptions that Requests explicitly raises inherit from . Ready for more? Check out the advanced section."
    },
    {
        "link": "https://stackoverflow.com/questions/16877422/whats-the-best-way-to-parse-a-json-response-from-the-requests-library",
        "document": "I'm using the python module to send a RESTful GET to a server, for which I get a response in JSON. The JSON response is basically just a list of lists.\n\nWhat's the best way to coerce the response to a native Python object so I can either iterate or print it out using ?"
    },
    {
        "link": "https://stackoverflow.com/questions/6386308/http-requests-and-json-parsing-in-python",
        "document": "I want to dynamically query Google Maps through the Google Directions API. As an example, this request calculates the route from Chicago, IL to Los Angeles, CA via two waypoints in Joplin, MO and Oklahoma City, OK:\n\nIt returns a result in the JSON format.\n\nHow can I do this in Python? I want to send such a request, receive the result and parse it."
    },
    {
        "link": "https://realpython.com/python-requests",
        "document": "The Requests library is the de facto standard for making HTTP requests in Python. It abstracts the complexities of making requests behind a beautiful, simple API so that you can focus on interacting with services and consuming data in your application.\n\nThroughout this tutorial, you’ll see some of the most useful features that Requests has to offer as well as ways to customize and optimize those features for different situations that you may come across. You’ll also learn how to use Requests in an efficient way as well as how to prevent requests to external services from slowing down your application.\n\nIn this tutorial, you’ll learn how to:\n• Make requests using the most common HTTP methods\n• Customize your requests’ headers and data using the query string and message body\n• Inspect data from your requests and responses\n• Configure your requests to help prevent your application from backing up or slowing down\n\nFor the best experience working through this tutorial, you should have basic general knowledge of HTTP. That said, you still may be able to follow along fine without it.\n\nIn the upcoming sections, you’ll see how you can install and use in your application. If you want to play with the code examples that you’ll see in this tutorial, as well as some additional ones, then you can download the code examples and work with them locally:\n\nEven though the Requests library is a common staple for many Python developers, it’s not included in Python’s standard library. There are good reasons for that decision, primarily that the library can continue to evolve more freely as a self-standing project. Note: Requests doesn’t support asynchronous HTTP requests directly. If you need async support in your program, you should try out AIOHTTP or HTTPX. The latter library is broadly compatible with Requests’ syntax. Because Requests is a third-party library, you need to install it before you can use it in your code. As a good practice, you should install external packages into a virtual environment, but you may choose to install into your global environment if you’re planning to use it across multiple projects. Whether you’re working in a virtual environment or not, you’ll need to install : Once has finished installing , you can use it in your application. Importing looks like this: Now that you’re all set up, it’s time to begin your journey through Requests. Your first goal will be learning how to make a request.\n\nA is a powerful object for inspecting the results of the request. Make that same request again, but this time store the return value in a variable so that you can get a closer look at its attributes and behaviors: In this example, you’ve captured the return value of , which is an instance of , and stored it in a variable called . You can now use to see a lot of information about the results of your request. The first bit of information that you can gather from is the status code. A status code informs you of the status of the request. For example, a status means that your request was successful, whereas a status means that the resource you were looking for wasn’t found. There are many other possible status codes as well to give you specific insights into what happened with your request. By accessing , you can see the status code that the server returned: returned , which means that your request was successful and the server responded with the data that you were requesting. Sometimes, you might want to use this information to make decisions in your code: With this logic, if the server returns a status code, then your program will print . If the result is a , then your program will print . Requests goes one step further in simplifying this process for you. If you use a instance in a conditional expression, then it’ll evaluate to if the status code was smaller than , and otherwise. Therefore, you can simplify the last example by rewriting the statement: In the code snippet above, you implicitly check whether the of is between and . If it’s not, then you raise an exception that includes the non-success status code in an f-string. Note: This truth value test is possible because is an overloaded method on . This means that the adapted default behavior of takes the status code into account when determining the truth value of the object. Keep in mind that this method is not verifying that the status code is equal to . The reason for this is that other status codes within the to range, such as and , are also considered successful in the sense that they provide some workable response. For example, the status code tells you that the response was successful, but there’s no content to return in the message body. So, make sure you use this convenient shorthand only if you want to know if the request was generally successful. Then, if necessary, you’ll need to handle the response appropriately based on the status code. Let’s say you don’t want to check the response’s status code in an statement. Instead, you want to use Request’s built-in capacities to raise an exception if the request was unsuccessful. You can do this using : If you invoke , then Requests will raise an for status codes between and . If the status code indicates a successful request, then the program will proceed without raising that exception. Now, you know a lot about how to deal with the status code of the response that you got back from the server. However, when you make a request, you rarely only care about the status code of the response. Usually, you want to see more. Next, you’ll see how to view the actual data that the server sent back in the body of the response. The response of a request often has some valuable information, known as a payload, in the message body. Using the attributes and methods of , you can view the payload in a variety of different formats. To see the response’s content in , you use : While gives you access to the raw bytes of the response payload, you’ll often want to convert them into a string using a character encoding such as UTF-8. will do that for you when you access : Because the decoding of to a requires an encoding scheme, Requests will try to guess the encoding based on the response’s headers if you don’t specify one. You can provide an explicit encoding by setting before accessing : If you take a look at the response, then you’ll see that it’s actually serialized JSON content. To get a dictionary, you could take the that you retrieved from and deserialize it using . However, a simpler way to accomplish this task is to use : The of the return value of is a dictionary, so you can access values in the object by key: You can do a lot with status codes and message bodies. But, if you need more information, like metadata about the response itself, then you’ll need to look at the response’s headers. The response headers can give you useful information, such as the content type of the response payload and a time limit on how long to cache the response. To view these headers, access : returns a dictionary-like object, allowing you to access header values by key. For example, to see the content type of the response payload, you can access : There’s something special about this dictionary-like headers object, though. The HTTP specification defines headers as case-insensitive, which means that you’re able to access these headers without worrying about their capitalization: Whether you use the key or , you’ll get the same value. Now that you’ve seen the most useful attributes and methods of in action, you already have a good overview of Requests’ basic usage. You can get content from the Internet and work with the response that you receive. But there’s more to the Internet than plain and straightforward URLs. In the next section, you’ll take a step back and see how your responses change when you customize your requests to account for query string parameters.\n\nAccording to the HTTP specification, , , and the less common requests pass their data through the message body rather than through parameters in the query string. Using Requests, you’ll pass the payload to the corresponding function’s parameter. takes a dictionary, a list of tuples, bytes, or a file-like object. You’ll want to adapt the data that send in the body of your request to the specific needs of the service that you’re interacting with. For example, if your request’s content type is , then you can send the form data as a dictionary: You can also send that same data as a list of tuples: If, however, you need to send JSON data, then you can use the parameter. When you pass JSON data via , Requests will serialize your data and add the correct header for you. Like you learned earlier, the httpbin service accepts test requests and responds with data about the requests. For instance, you can use it to inspect a basic request: You can see from the response that the server received your request data and headers as you sent them. Requests also provides this information to you in the form of a that you’ll inspect in more detail in the next section.\n\nAuthentication helps a service understand who you are. Typically, you provide your credentials to a server by passing data through the header or a custom header defined by the service. All the functions of Requests that you’ve seen to this point provide a parameter called , which allows you to pass your credentials: The request succeeds if the credentials that you pass in the tuple to are valid. When you pass your credentials in a tuple to the parameter, Requests applies the credentials using HTTP’s Basic access authentication scheme under the hood. You may wonder where the string that Requests set as the value for your header comes from. In short, it’s a Base64-encoded string of the username and password with the prefix :\n• First, Requests combines the username and password that you provided, putting a colon in between them. So for the username and password , this becomes .\n• Then, Requests encodes this string in Base64 using . The encoding converts the string to .\n• Finally, Requests adds in front of this Base64 string. This is how the final value for the header becomes in the example shown above. HTTP Basic authentication isn’t very secure, because you can decode the username and password from the Base64 string. That’s why it’s important to always send these requests over HTTPS, which provides an additional layer of security by encrypting the entire HTTP request. You could make the same request by passing explicit Basic authentication credentials using : Though you don’t need to be explicit for Basic authentication, you may want to authenticate using another method. Requests provides other methods of authentication out of the box, such as and . A real-world example of an API that requires authentication is GitHub’s authenticated user API. This endpoint provides information about the authenticated user’s profile. If you try to make a request without credentials, then you’ll see that the status code is : If you don’t provide authentication credentials when accessing a service that requires them, then you’ll get an HTTP error code as a response. To make a request to GitHub’s authenticated user API, you first need to generate a personal access token with the read:user scope. Then you can pass this token as the second element in a tuple to : Like you learned previously, this approach passes the credentials to , which expects a username and a password and sends the credentials as a Base64-encoded string with the prefix : This works, but it’s not the right way to authenticate with a Bearer token—and using an empty string input for the superfluous username is awkward. With Requests, you can supply your own authentication mechanism to fix that. To try this out, create a subclass of and implement : \"\"\"Attach an API token to the Authorization header.\"\"\" Here, your custom mechanism receives a token, then includes that token in the header of your request, also setting the recommended prefix to the string. You can now use this custom token authentication to make your call to GitHub’s authenticated user API: Your custom created a well-formatted string for the header. You can now use this more intuitive way of interacting with a token-based authentication scheme such as the one that parts of GitHub’s API require. Note: While you could construct the authentication string outside of a custom authentication class and pass it directly with , this appoach is discouraged because it can lead to unexpected behavior. When you attempt to set your authentication credentials directly using , then Requests may internally overwrite your input. This can happen, for example, if you have a file that provides authentication credentials. Requests will attempt to get the credentials from the file if you don’t provide an authentication method using . Bad authentication mechanisms can lead to security vulnerabilities. Unless a service requires a custom authentication mechanism for some reason, you’ll always want to use a tried-and-true auth scheme like the built-in Basic authentication or OAuth, for example through Requests-OAuthlib. While you’re thinking about security, consider dealing with SSL certificates using Requests.\n\nAnytime the data that you’re trying to send or receive is sensitive, security is important. The way that you communicate with secure sites over HTTP is by establishing an encrypted connection using SSL, which means that verifying the target server’s SSL certificate is critical. The good news is that Requests does this for you by default. However, there are some cases where you might want to change this behavior. If you want to disable SSL certificate verification, then you pass to the parameter of the request function: InsecureRequestWarning: Unverified HTTPS request is being made to host Requests even warns you when you’re making an insecure request to help you keep your data safe! Note: Requests uses a package called to provide certificate authorities. This lets Requests know which authorities it can trust. Therefore, you should update frequently to keep your connections as secure as possible. Now that you know how to make all sorts of HTTP requests using Requests, authenticated or not, you may wonder about how you can make sure that your program works as quickly as possible. In the next section, you’ll learn about a few ways that you can improve performance with the help of Requests.\n\nWhen using Requests, especially in a production application environment, it’s important to consider performance implications. Features like timeout control, sessions, and retry limits can help you keep your application running smoothly. When you make an inline request to an external service, your system will need to wait for the response before moving on. If your application waits too long for that response, requests to your service could back up, your user experience could suffer, or your background jobs could hang. By default, Requests will wait indefinitely on the response, so you should almost always specify a timeout duration to prevent these issues from happening. To set the request’s timeout, use the parameter. can be an integer or float representing the number of seconds to wait on a response before timing out: In the first request, the request will time out after 1 second. In the second request, the request will time out after 3.05 seconds. You can also pass a tuple to with the following two elements:\n• Connect timeout: The time it allows for the client to establish a connection to the server\n• Read timeout: The time it’ll wait on a response once your client has established a connection Both of these elements should be numbers, and can be of type or : If the request establishes a connection within 3.05 seconds and receives data within 5 seconds of the connection being established, then the response will be returned as it was before. If the request times out, then the function will raise a exception: \"The request did not time out\" Your program can catch the exception and respond accordingly. Until now, you’ve been dealing with high-level APIs such as and . These functions are abstractions of what’s going on when you make your requests. They hide implementation details, such as how connections are managed, so that you don’t have to worry about them. Underneath those abstractions is a class called . If you need to fine-tune your control over how requests are being made or improve the performance of your requests, you may need to use a instance directly. Sessions are used to persist parameters across requests. For example, if you want to use the same authentication across multiple requests, then you can use a session: In this code example, you use a context manager to ensure that the session releases the resources when it doesn’t need them anymore. In line 7, you log in using your custom . You only need to log in once per session, and then you can make multiple authenticated requests. Requests will persist the credentials while the session exists. You then make two requests to the authenticated user API in lines 9 and 10 using instead of . The primary performance optimization of sessions comes in the form of persistent connections. When your app makes a connection to a server using a , it keeps that connection around in a connection pool. When your app wants to connect to the same server again, it’ll reuse a connection from the pool rather than establishing a new one. When a request fails, you may want your application to retry the same request. However, Requests won’t do this for you by default. To apply this functionality, you need to implement a custom transport adapter. Transport adapters let you define a set of configurations for each service that you’re interacting with. For example, say you want all requests to to retry two times before finally raising a . You’d build a transport adapter, set its parameter, and mount it to an existing : In this example, you’ve set up your session so that it’ll retry a maximum of two times when your request to GitHub’s API doesn’t work as expected. When you mount the —in this case, —to , then will adhere to its configuration for each request to . Note: While the implementation shown above works, you won’t see any effect of the retry behavior unless there’s something wrong with your network connection or GitHub’s servers. If you want to play around with code that builds on top of this example, and you’d like to inspect when the retries happen, then you’re in luck. You can download the materials of this tutorial and take a look at : Get Your Code: Click here to download the free sample code that shows you how to use Python’s Requests library. The code in this file improves on the example shown above by using the underlying to further customize the retry functionality. It also adds logging to display debugging output, which gives you a chance to monitor when Python attempted the retries. Requests comes packaged with intuitive implementations for timeouts, transport adapters, and sessions that can help you keep your code efficient and your application resilient."
    }
]