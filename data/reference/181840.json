[
    {
        "link": "https://lodash.com/docs",
        "document": "The opposite of ; this method creates a function that invokes once it's called or more times.\n• (number): The number of calls before is invoked. Creates a function that invokes , with up to arguments, ignoring any additional arguments.\n• (Function): The function to cap arguments for. Creates a function that invokes , with the binding and arguments of the created function, while it's called less than times. Subsequent calls to the created function return the result of the last invocation.\n• (number): The number of calls at which is no longer invoked. Creates a function that invokes with the binding of and prepended to the arguments it receives.\n\n\n\nThe value, which defaults to in monolithic builds, may be used as a placeholder for partially applied arguments.\n\n\n\nNote: Unlike native , this method doesn't set the \"length\" property of bound functions.\n• (...*): The arguments to be partially applied. Creates a function that invokes the method at with prepended to the arguments it receives.\n\n\n\nThis method differs from by allowing bound functions to reference methods that may be redefined or don't yet exist. See Peter Michaux's article for more details.\n\n\n\nThe value, which defaults to in monolithic builds, may be used as a placeholder for partially applied arguments.\n• (Object): The object to invoke the method on.\n• (string): The key of the method.\n• (...*): The arguments to be partially applied. Creates a function that accepts arguments of and either invokes returning its result, if at least number of arguments have been provided, or returns a function that accepts the remaining arguments, and so on. The arity of may be specified if is not sufficient.\n\n\n\nThe value, which defaults to in monolithic builds, may be used as a placeholder for provided arguments.\n\n\n\nNote: This method doesn't set the \"length\" property of curried functions. This method is like except that arguments are applied to in the manner of instead of .\n\n\n\nThe value, which defaults to in monolithic builds, may be used as a placeholder for provided arguments.\n\n\n\nNote: This method doesn't set the \"length\" property of curried functions. Creates a debounced function that delays invoking until after milliseconds have elapsed since the last time the debounced function was invoked. The debounced function comes with a method to cancel delayed invocations and a method to immediately invoke them. Provide to indicate whether should be invoked on the leading and/or trailing edge of the timeout. The is invoked with the last arguments provided to the debounced function. Subsequent calls to the debounced function return the result of the last invocation.\n\n\n\nNote: If and options are , is invoked on the trailing edge of the timeout only if the debounced function is invoked more than once during the timeout.\n\n\n\nIf is and is , invocation is deferred until to the next tick, similar to with a timeout of .\n\n\n\nSee David Corbacho's article for details over the differences between and .\n• (number): The number of milliseconds to delay.\n• (boolean): Specify invoking on the leading edge of the timeout.\n• (number): The maximum time is allowed to be delayed before it's invoked.\n• (boolean): Specify invoking on the trailing edge of the timeout. Defers invoking the until the current call stack has cleared. Any additional arguments are provided to when it's invoked.\n• (...*): The arguments to invoke with. Invokes after milliseconds. Any additional arguments are provided to when it's invoked.\n• (number): The number of milliseconds to delay invocation.\n• (...*): The arguments to invoke with.\n• (Function): The function to flip arguments for. Creates a function that memoizes the result of . If is provided, it determines the cache key for storing the result based on the arguments provided to the memoized function. By default, the first argument provided to the memoized function is used as the map cache key. The is invoked with the binding of the memoized function.\n\n\n\nNote: The cache is exposed as the property on the memoized function. Its creation may be customized by replacing the constructor with one whose instances implement the method interface of , , , , and .\n• (Function): The function to have its output memoized.\n• (Function): The function to resolve the cache key. Creates a function that negates the result of the predicate . The predicate is invoked with the binding and arguments of the created function. Creates a function that is restricted to invoking once. Repeat calls to the function return the value of the first invocation. The is invoked with the binding and arguments of the created function. Creates a function that invokes with its arguments transformed. Creates a function that invokes with prepended to the arguments it receives. This method is like except it does not alter the binding.\n\n\n\nThe value, which defaults to in monolithic builds, may be used as a placeholder for partially applied arguments.\n\n\n\nNote: This method doesn't set the \"length\" property of partially applied functions.\n• (Function): The function to partially apply arguments to.\n• (...*): The arguments to be partially applied. This method is like except that partially applied arguments are appended to the arguments it receives.\n\n\n\nThe value, which defaults to in monolithic builds, may be used as a placeholder for partially applied arguments.\n\n\n\nNote: This method doesn't set the \"length\" property of partially applied functions.\n• (Function): The function to partially apply arguments to.\n• (...*): The arguments to be partially applied. Creates a function that invokes with arguments arranged according to the specified where the argument value at the first index is provided as the first argument, the argument value at the second index is provided as the second argument, and so on.\n• (Function): The function to rearrange arguments for. Creates a function that invokes with the binding of the created function and arguments from and beyond provided as an array.\n\n\n\nNote: This method is based on the rest parameter.\n• (Function): The function to apply a rest parameter to.\n• (number): The start position of the rest parameter. Creates a function that invokes with the binding of the create function and an array of arguments much like .\n\n\n\nNote: This method is based on the spread operator.\n• (Function): The function to spread arguments over.\n• (number): The start position of the spread. say = _ ( (who what) { Creates a throttled function that only invokes at most once per every milliseconds. The throttled function comes with a method to cancel delayed invocations and a method to immediately invoke them. Provide to indicate whether should be invoked on the leading and/or trailing edge of the timeout. The is invoked with the last arguments provided to the throttled function. Subsequent calls to the throttled function return the result of the last invocation.\n\n\n\nNote: If and options are , is invoked on the trailing edge of the timeout only if the throttled function is invoked more than once during the timeout.\n\n\n\nIf is and is , invocation is deferred until to the next tick, similar to with a timeout of .\n\n\n\nSee David Corbacho's article for details over the differences between and .\n• (number): The number of milliseconds to throttle invocations to.\n• (boolean): Specify invoking on the leading edge of the timeout.\n• (boolean): Specify invoking on the trailing edge of the timeout. Creates a function that accepts up to one argument, ignoring any additional arguments.\n• (Function): The function to cap arguments for. Creates a function that provides to as its first argument. Any additional arguments provided to the function are appended to those provided to the . The wrapper is invoked with the binding of the created function.\n• (*): The value to wrap."
    },
    {
        "link": "https://stackoverflow.com/questions/31740155/lodash-remove-duplicates-from-array",
        "document": "In LODASH versions lower than 4 you will find most of this function are not implemented same way. And opposite from version 4 _.uniq was modified. I personally had a project that was in transition for a few months (from V3 -> to V4).\n\nIf you run in same situation and you have a lot of functions to be updated. You can do it in stages and when you are done with transition you can come and fix it later. This is the trick i used to avoid downtime of the platform:\n\nAlso if you look at lodash documentation for most of this cases you can find migration of _.uniq from version lower than 4 can be performed with both functions: Both of them will bring same result. I personally was guessing which one to pick. In the end I picked this one: _.uniqBy(data, 'id')."
    },
    {
        "link": "https://geeksforgeeks.org/lodash-_-uniqby-method",
        "document": "Lodash _.uniqBy method is similar to _.uniq except that it accepts iteratee which is invoked for each element in an array to generate the criterion by which uniqueness is computed. The order of result values is determined by the order they occur in the array.\n• [iteratee=_.identity]: This parameter holds the iteratee invoked per element.\n• None This method is used to return the new duplicate free array.\n\nExample 1: In this example, we use Lodash _.uniqBy() method to remove the duplicate values from the array ensuring only unique values are left in the array.\n\nExample 2: In this example, we use Lodash _.uniqBy() method to remove the duplicate values of x based on properties.\n\nExample 3: In this example, we remove duplicate strings from an array using Lodash’s _.uniqBy() method.\n\nWhat does the _.uniqBy() method do in Lodash?\n\nHow do you use the _.uniqBy() method?\n\nWhat types of iteratees can _.uniqBy() accept?"
    },
    {
        "link": "https://lodash.com/docs/3.10.1",
        "document": "Creates an array of elements corresponding to the given keys, or indexes, of . Keys may be specified as individual arguments or as arrays of keys.\n• (Array|Object|string): The collection to iterate over.\n• (...(number|number[]|string|string[])): The property names or indexes of elements to pick, specified individually or in arrays. (Array): Returns the new array of picked elements. Creates an object composed of keys generated from the results of running each element of through . The corresponding value of each key is the number of times the key was returned by . The is bound to and invoked with three arguments:\n\n(value, index|key, collection).\n\n\n\nIf a property name is provided for the created style callback returns the property value of the given element.\n\n\n\nIf a value is also provided for the created style callback returns for elements that have a matching property value, else .\n\n\n\nIf an object is provided for the created style callback returns for elements that have the properties of the given object, else .\n• (Array|Object|string): The collection to iterate over. Checks if returns truthy for all elements of . The predicate is bound to and invoked with three arguments:\n\n(value, index|key, collection).\n\n\n\nIf a property name is provided for the created style callback returns the property value of the given element.\n\n\n\nIf a value is also provided for the created style callback returns for elements that have a matching property value, else .\n\n\n\nIf an object is provided for the created style callback returns for elements that have the properties of the given object, else .\n• (Array|Object|string): The collection to iterate over. (boolean): Returns if all elements pass the predicate check, else . Iterates over elements of , returning an array of all elements returns truthy for. The predicate is bound to and invoked with three arguments: (value, index|key, collection).\n\n\n\nIf a property name is provided for the created style callback returns the property value of the given element.\n\n\n\nIf a value is also provided for the created style callback returns for elements that have a matching property value, else .\n\n\n\nIf an object is provided for the created style callback returns for elements that have the properties of the given object, else .\n• (Array|Object|string): The collection to iterate over. Iterates over elements of , returning the first element returns truthy for. The predicate is bound to and invoked with three arguments: (value, index|key, collection).\n\n\n\nIf a property name is provided for the created style callback returns the property value of the given element.\n\n\n\nIf a value is also provided for the created style callback returns for elements that have a matching property value, else .\n\n\n\nIf an object is provided for the created style callback returns for elements that have the properties of the given object, else . This method is like except that it iterates over elements of from right to left. Performs a deep comparison between each element in and the source object, returning the first element that has equivalent property values.\n\n\n\nNote: This method supports comparing arrays, booleans, objects, numbers, objects, regexes, and strings. Objects are compared by their own, not inherited, enumerable properties. For comparing a single own or inherited property value see .\n• (Object): The object of property values to match. Iterates over elements of invoking for each element. The is bound to and invoked with three arguments:\n\n(value, index|key, collection). Iteratee functions may exit iteration early by explicitly returning .\n\n\n\nNote: As with other \"Collections\" methods, objects with a \"length\" property are iterated like arrays. To avoid this behavior or may be used for object iteration.\n• (Array|Object|string): The collection to iterate over. This method is like except that it iterates over elements of from right to left.\n• (Array|Object|string): The collection to iterate over. Creates an object composed of keys generated from the results of running each element of through . The corresponding value of each key is an array of the elements responsible for generating the key. The is bound to and invoked with three arguments:\n\n(value, index|key, collection).\n\n\n\nIf a property name is provided for the created style callback returns the property value of the given element.\n\n\n\nIf a value is also provided for the created style callback returns for elements that have a matching property value, else .\n\n\n\nIf an object is provided for the created style callback returns for elements that have the properties of the given object, else .\n• (Array|Object|string): The collection to iterate over. Checks if is in using for equality comparisons. If is negative, it's used as the offset from the end of .\n• (*): The value to search for.\n• (number): The index to search from. (boolean): Returns if a matching element is found, else . Creates an object composed of keys generated from the results of running each element of through . The corresponding value of each key is the last element responsible for generating the key. The iteratee function is bound to and invoked with three arguments:\n\n(value, index|key, collection).\n\n\n\nIf a property name is provided for the created style callback returns the property value of the given element.\n\n\n\nIf a value is also provided for the created style callback returns for elements that have a matching property value, else .\n\n\n\nIf an object is provided for the created style callback returns for elements that have the properties of the given object, else .\n• (Array|Object|string): The collection to iterate over. Invokes the method at of each element in , returning an array of the results of each invoked method. Any additional arguments are provided to each invoked method. If is a function it's invoked for, and bound to, each element in .\n• (Array|Object|string): The collection to iterate over.\n• (Array|Function|string): The path of the method to invoke or the function invoked per iteration.\n• (...*): The arguments to invoke the method with. Creates an array of values by running each element in through . The is bound to and invoked with three arguments: (value, index|key, collection).\n\n\n\nIf a property name is provided for the created style callback returns the property value of the given element.\n\n\n\nIf a value is also provided for the created style callback returns for elements that have a matching property value, else .\n\n\n\nIf an object is provided for the created style callback returns for elements that have the properties of the given object, else .\n\n\n\nMany lodash methods are guarded to work as iteratees for methods like , , , , , and .\n\n\n\nThe guarded methods are:\n\n , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , and\n• (Array|Object|string): The collection to iterate over. Creates an array of elements split into two groups, the first of which contains elements returns truthy for, while the second of which contains elements returns falsey for. The predicate is bound to and invoked with three arguments: (value, index|key, collection).\n\n\n\nIf a property name is provided for the created style callback returns the property value of the given element.\n\n\n\nIf a value is also provided for the created style callback returns for elements that have a matching property value, else .\n\n\n\nIf an object is provided for the created style callback returns for elements that have the properties of the given object, else .\n• (Array|Object|string): The collection to iterate over. Gets the property value of from all elements in .\n• (Array|Object|string): The collection to iterate over.\n• (Array|string): The path of the property to pluck. Reduces to a value which is the accumulated result of running each element in through , where each successive invocation is supplied the return value of the previous. If is not provided the first element of is used as the initial value. The is bound to and invoked with four arguments:\n\n(accumulator, value, index|key, collection).\n\n\n\nMany lodash methods are guarded to work as iteratees for methods like , , and .\n\n\n\nThe guarded methods are:\n\n , , , , , , and\n• (Array|Object|string): The collection to iterate over. This method is like except that it iterates over elements of from right to left.\n• (Array|Object|string): The collection to iterate over. The opposite of ; this method returns the elements of that does not return truthy for.\n• (Array|Object|string): The collection to iterate over. Gets a random element or random elements from a collection.\n• (number): The number of elements to sample. Creates an array of shuffled values, using a version of the Fisher-Yates shuffle. Gets the size of by returning its length for array-like values or the number of own enumerable properties for objects. Checks if returns truthy for any element of . The function returns as soon as it finds a passing value and does not iterate over the entire collection. The predicate is bound to and invoked with three arguments: (value, index|key, collection).\n\n\n\nIf a property name is provided for the created style callback returns the property value of the given element.\n\n\n\nIf a value is also provided for the created style callback returns for elements that have a matching property value, else .\n\n\n\nIf an object is provided for the created style callback returns for elements that have the properties of the given object, else .\n• (Array|Object|string): The collection to iterate over. (boolean): Returns if any element passes the predicate check, else . Creates an array of elements, sorted in ascending order by the results of running each element in a collection through . This method performs a stable sort, that is, it preserves the original sort order of equal elements. The is bound to and invoked with three arguments:\n\n(value, index|key, collection).\n\n\n\nIf a property name is provided for the created style callback returns the property value of the given element.\n\n\n\nIf a value is also provided for the created style callback returns for elements that have a matching property value, else .\n\n\n\nIf an object is provided for the created style callback returns for elements that have the properties of the given object, else .\n• (Array|Object|string): The collection to iterate over. This method is like except that it can sort by multiple iteratees or property names.\n\n\n\nIf a property name is provided for an iteratee the created style callback returns the property value of the given element.\n\n\n\nIf an object is provided for an iteratee the created style callback returns for elements that have the properties of the given object, else .\n• (Array|Object|string): The collection to iterate over.\n• (...(Function|Function[]|Object|Object[]|string|string[])): The iteratees to sort by, specified as individual values or arrays of values. This method is like except that it allows specifying the sort orders of the iteratees to sort by. If is unspecified, all values are sorted in ascending order. Otherwise, a value is sorted in ascending order if its corresponding order is \"asc\", and descending if \"desc\".\n\n\n\nIf a property name is provided for an iteratee the created style callback returns the property value of the given element.\n\n\n\nIf an object is provided for an iteratee the created style callback returns for elements that have the properties of the given object, else .\n• (Array|Object|string): The collection to iterate over.\n• (Function[]|Object[]|string[]): The iteratees to sort by. Performs a deep comparison between each element in and the source object, returning an array of all elements that have equivalent property values.\n\n\n\nNote: This method supports comparing arrays, booleans, objects, numbers, objects, regexes, and strings. Objects are compared by their own, not inherited, enumerable properties. For comparing a single own or inherited property value see .\n• (Object): The object of property values to match.\n\nThe opposite of ; this method creates a function that invokes once it's called or more times.\n• (number): The number of calls before is invoked. Creates a function that accepts up to arguments ignoring any additional arguments.\n• (Function): The function to cap arguments for. Creates a function that invokes , with the binding and arguments of the created function, while it's called less than times. Subsequent calls to the created function return the result of the last invocation.\n• (number): The number of calls at which is no longer invoked. Creates a function that invokes with the binding of and prepends any additional arguments to those provided to the bound function.\n\n\n\nThe value, which defaults to in monolithic builds, may be used as a placeholder for partially applied arguments.\n\n\n\nNote: Unlike native this method does not set the \"length\" property of bound functions.\n• (...*): The arguments to be partially applied. Binds methods of an object to the object itself, overwriting the existing method. Method names may be specified as individual arguments or as arrays of method names. If no method names are provided all enumerable function properties, own and inherited, of are bound.\n\n\n\nNote: This method does not set the \"length\" property of bound functions.\n• (Object): The object to bind and assign the bound methods to.\n• (...(string|string[])): The object method names to bind, specified as individual method names or arrays of method names. Creates a function that invokes the method at and prepends any additional arguments to those provided to the bound function.\n\n\n\nThis method differs from by allowing bound functions to reference methods that may be redefined or don't yet exist. See Peter Michaux's article for more details.\n\n\n\nThe value, which defaults to in monolithic builds, may be used as a placeholder for partially applied arguments.\n• (Object): The object the method belongs to.\n• (string): The key of the method.\n• (...*): The arguments to be partially applied. Creates a function that accepts one or more arguments of that when called either invokes returning its result, if all arguments have been provided, or returns a function that accepts one or more of the remaining arguments, and so on. The arity of may be specified if is not sufficient.\n\n\n\nThe value, which defaults to in monolithic builds, may be used as a placeholder for provided arguments.\n\n\n\nNote: This method does not set the \"length\" property of curried functions. This method is like except that arguments are applied to in the manner of instead of .\n\n\n\nThe value, which defaults to in monolithic builds, may be used as a placeholder for provided arguments.\n\n\n\nNote: This method does not set the \"length\" property of curried functions. Creates a debounced function that delays invoking until after milliseconds have elapsed since the last time the debounced function was invoked. The debounced function comes with a method to cancel delayed invocations. Provide an options object to indicate that should be invoked on the leading and/or trailing edge of the timeout. Subsequent calls to the debounced function return the result of the last invocation.\n\n\n\nNote: If and options are , is invoked on the trailing edge of the timeout only if the the debounced function is invoked more than once during the timeout.\n\n\n\nSee David Corbacho's article for details over the differences between and .\n• (number): The number of milliseconds to delay.\n• (boolean): Specify invoking on the leading edge of the timeout.\n• (number): The maximum time is allowed to be delayed before it's invoked.\n• (boolean): Specify invoking on the trailing edge of the timeout. Defers invoking the until the current call stack has cleared. Any additional arguments are provided to when it's invoked.\n• (...*): The arguments to invoke the function with. Invokes after milliseconds. Any additional arguments are provided to when it's invoked.\n• (number): The number of milliseconds to delay invocation.\n• (...*): The arguments to invoke the function with. Creates a function that returns the result of invoking the provided functions with the binding of the created function, where each successive invocation is supplied the return value of the previous. This method is like except that it creates a function that invokes the provided functions from right to left. Creates a function that memoizes the result of . If is provided it determines the cache key for storing the result based on the arguments provided to the memoized function. By default, the first argument provided to the memoized function is coerced to a string and used as the cache key. The is invoked with the binding of the memoized function.\n\n\n\nNote: The cache is exposed as the property on the memoized function. Its creation may be customized by replacing the constructor with one whose instances implement the method interface of , , and .\n• (Function): The function to have its output memoized.\n• (Function): The function to resolve the cache key. Creates a function that runs each argument through a corresponding transform function.\n• (...(Function|Function[])): The functions to transform arguments, specified as individual functions or arrays of functions. Creates a function that negates the result of the predicate . The predicate is invoked with the binding and arguments of the created function. Creates a function that is restricted to invoking once. Repeat calls to the function return the value of the first call. The is invoked with the binding and arguments of the created function. Creates a function that invokes with arguments prepended to those provided to the new function. This method is like except it does not alter the binding.\n\n\n\nThe value, which defaults to in monolithic builds, may be used as a placeholder for partially applied arguments.\n\n\n\nNote: This method does not set the \"length\" property of partially applied functions.\n• (Function): The function to partially apply arguments to.\n• (...*): The arguments to be partially applied. This method is like except that partially applied arguments are appended to those provided to the new function.\n\n\n\nThe value, which defaults to in monolithic builds, may be used as a placeholder for partially applied arguments.\n\n\n\nNote: This method does not set the \"length\" property of partially applied functions.\n• (Function): The function to partially apply arguments to.\n• (...*): The arguments to be partially applied. Creates a function that invokes with arguments arranged according to the specified indexes where the argument value at the first index is provided as the first argument, the argument value at the second index is provided as the second argument, and so on.\n• (Function): The function to rearrange arguments for.\n• (...(number|number[])): The arranged argument indexes, specified as individual indexes or arrays of indexes. Creates a function that invokes with the binding of the created function and arguments from and beyond provided as an array.\n\n\n\nNote: This method is based on the rest parameter.\n• (Function): The function to apply a rest parameter to.\n• (number): The start position of the rest parameter. Creates a function that invokes with the binding of the created function and an array of arguments much like .\n\n\n\nNote: This method is based on the spread operator.\n• (Function): The function to spread arguments over. say = _ ( (who what) { Creates a throttled function that only invokes at most once per every milliseconds. The throttled function comes with a method to cancel delayed invocations. Provide an options object to indicate that should be invoked on the leading and/or trailing edge of the timeout. Subsequent calls to the throttled function return the result of the last call.\n\n\n\nNote: If and options are , is invoked on the trailing edge of the timeout only if the the throttled function is invoked more than once during the timeout.\n\n\n\nSee David Corbacho's article for details over the differences between and .\n• (number): The number of milliseconds to throttle invocations to.\n• (boolean): Specify invoking on the leading edge of the timeout.\n• (boolean): Specify invoking on the trailing edge of the timeout. Creates a function that provides to the wrapper function as its first argument. Any additional arguments provided to the function are appended to those provided to the wrapper function. The wrapper is invoked with the binding of the created function.\n• (*): The value to wrap.\n\nAssigns own enumerable properties of source object(s) to the destination object. Subsequent sources overwrite property assignments of previous sources. If is provided it's invoked to produce the assigned values. The is bound to and invoked with five arguments:\n\n(objectValue, sourceValue, key, object, source).\n\n\n\nNote: This method mutates and is based on . return _ (value) ? other : value; Creates an object that inherits from the given object. If a object is provided its own enumerable properties are assigned to the created object.\n• (Object): The object to inherit from.\n• (Object): The properties to assign to the object. Assigns own enumerable properties of source object(s) to the destination object for all destination properties that resolve to . Once a property is set, additional values of the same property are ignored.\n\n\n\nNote: This method mutates . This method is like except that it recursively assigns default properties.\n\n\n\nNote: This method mutates . This method is like except that it returns the key of the first element returns truthy for instead of the element itself.\n\n\n\nIf a property name is provided for the created style callback returns the property value of the given element.\n\n\n\nIf a value is also provided for the created style callback returns for elements that have a matching property value, else .\n\n\n\nIf an object is provided for the created style callback returns for elements that have the properties of the given object, else . (*): Returns the key of the matched element, else . This method is like except that it iterates over elements of a collection in the opposite order.\n\n\n\nIf a property name is provided for the created style callback returns the property value of the given element.\n\n\n\nIf a value is also provided for the created style callback returns for elements that have a matching property value, else .\n\n\n\nIf an object is provided for the created style callback returns for elements that have the properties of the given object, else . (*): Returns the key of the matched element, else . Iterates over own and inherited enumerable properties of an object invoking for each property. The is bound to and invoked with three arguments: (value, key, object). Iteratee functions may exit iteration early by explicitly returning .\n• (Object): The object to iterate over. This method is like except that it iterates over properties of in the opposite order.\n• (Object): The object to iterate over. Iterates over own enumerable properties of an object invoking for each property. The is bound to and invoked with three arguments: (value, key, object). Iteratee functions may exit iteration early by explicitly returning .\n• (Object): The object to iterate over. This method is like except that it iterates over properties of in the opposite order.\n• (Object): The object to iterate over. Creates an array of function property names from all enumerable properties, own and inherited, of . (Array): Returns the new array of property names. Gets the property value at of . If the resolved value is the is used in its place.\n• (Array|string): The path of the property to get.\n• (*): The value returned if the resolved value is . (boolean): Returns if is a direct property, else . Creates an object composed of the inverted keys and values of . If contains duplicate values, subsequent values overwrite property assignments of previous values unless is . Creates an array of the own enumerable property names of .\n\n\n\nNote: Non-object values are coerced to objects. See the ES spec for more details. Creates an array of the own and inherited enumerable property names of .\n\n\n\nNote: Non-object values are coerced to objects. The opposite of ; this method creates an object with the same values as and keys generated by running each own enumerable property of through .\n• (Object): The object to iterate over. Creates an object with the same keys as and values generated by running each own enumerable property of through . The iteratee function is bound to and invoked with three arguments:\n\n(value, key, object).\n\n\n\nIf a property name is provided for the created style callback returns the property value of the given element.\n\n\n\nIf a value is also provided for the created style callback returns for elements that have a matching property value, else .\n\n\n\nIf an object is provided for the created style callback returns for elements that have the properties of the given object, else .\n• (Object): The object to iterate over. Recursively merges own enumerable properties of the source object(s), that don't resolve to into the destination object. Subsequent sources overwrite property assignments of previous sources. If is provided it's invoked to produce the merged values of the destination and source properties. If returns merging is handled by the method instead. The is bound to and invoked with five arguments: (objectValue, sourceValue, key, object, source). The opposite of ; this method creates an object composed of the own and inherited enumerable properties of that are not omitted.\n• (...((string|string[])|Function)): The function invoked per iteration or property names to omit, specified as individual property names or arrays of property names. Creates a two dimensional array of the key-value pairs for , e.g. . (Array): Returns the new array of key-value pairs. Creates an object composed of the picked properties. Property names may be specified as individual arguments or as arrays of property names. If is provided it's invoked for each property of picking the properties returns truthy for. The predicate is bound to and invoked with three arguments: (value, key, object).\n• (...((string|string[])|Function)): The function invoked per iteration or property names to pick, specified as individual property names or arrays of property names. This method is like except that if the resolved value is a function it's invoked with the binding of its parent object and its result is returned.\n• (Array|string): The path of the property to resolve.\n• (*): The value returned if the resolved value is . Sets the property value of on . If a portion of does not exist it's created.\n• (Array|string): The path of the property to set.\n• (*): The value to set. An alternative to ; this method transforms to a new object which is the result of running each of its own enumerable properties through , with each invocation potentially mutating the object. The is bound to and invoked with four arguments: (accumulator, value, key, object). Iteratee functions may exit iteration early by explicitly returning .\n• (Array|Object): The object to iterate over. Creates an array of the own enumerable property values of .\n\n\n\nNote: Non-object values are coerced to objects. Creates an array of the own and inherited enumerable property values of .\n\n\n\nNote: Non-object values are coerced to objects.\n\nAttempts to invoke , returning either the result or the caught error object. Any additional arguments are provided to when it's invoked. Creates a function that invokes with the binding of and arguments of the created function. If is a property name the created callback returns the property value for a given element. If is an object the created callback returns for elements that contain the equivalent object properties, otherwise it returns .\n• (*): The value to convert to a callback.\n• (*): The value to return from the new function. This method returns the first argument provided to it. Creates a function that performs a deep comparison between a given object and , returning if the given object has equivalent property values, else .\n\n\n\nNote: This method supports comparing arrays, booleans, objects, numbers, objects, regexes, and strings. Objects are compared by their own, not inherited, enumerable properties. For comparing a single own or inherited property value see .\n• (Object): The object of property values to match. Creates a function that compares the property value of on a given object to .\n\n\n\nNote: This method supports comparing arrays, booleans, objects, numbers, objects, regexes, and strings. Objects are compared by their own, not inherited, enumerable properties.\n• (Array|string): The path of the property to get.\n• (*): The value to match. Creates a function that invokes the method at on a given object. Any additional arguments are provided to the invoked method.\n• (Array|string): The path of the method to invoke.\n• (...*): The arguments to invoke the method with. The opposite of ; this method creates a function that invokes the method at a given path on . Any additional arguments are provided to the invoked method.\n• (...*): The arguments to invoke the method with. Adds all own enumerable function properties of a source object to the destination object. If is a function then methods are added to its prototype as well.\n\n\n\nNote: Use to create a pristine function to avoid conflicts caused by modifying the original.\n• (Object): The object of functions to add.\n• (boolean): Specify whether the functions added are chainable. Reverts the variable to its previous value and returns a reference to the function. A no-operation function that returns regardless of the arguments it receives. Creates a function that returns the property value at on a given object.\n• (Array|string): The path of the property to get. The opposite of ; this method creates a function that returns the property value at a given path on . Creates an array of numbers (positive and/or negative) progressing from up to, but not including, . If is not specified it's set to with then set to . If is less than a zero-length range is created unless a negative is specified.\n• (number): The start of the range.\n• (number): The end of the range.\n• (number): The value to increment or decrement by. (Array): Returns the new array of numbers. Create a new pristine function using the given object. Invokes the iteratee function times, returning an array of the results of each invocation. The is bound to and invoked with one argument; (index).\n• (number): The number of times to invoke . Generates a unique ID. If is provided the ID is appended to it.\n• (string): The value to prefix the ID with."
    },
    {
        "link": "https://stackoverflow.com/questions/47894456/lodash-filter-out-rougue-items-from-object",
        "document": "I am creating an object from a json file events.json using lodash map and uniqby.\n\nVery rarely I get an event that has a country other than \"United Kingdom\". I don't need them in the results, how would I go about 'not mapping' the events that are not in the \"United Kingdom\". Thanks\n\nI have looked at _.filter but am not sure of where to use it within the map function."
    },
    {
        "link": "https://moldstud.com/articles/p-lodash-and-typescript-best-practices-for-seamless-integration-and-improved-type-safety",
        "document": "Lodash and TypeScript: Best Practices for Seamless Integration and Improved Type Safety\n\nThis is the part where we explore the best practices for integrating Lodash with TypeScript to enhance type safety and ensure a seamless development experience.\n\nLodash offers a wide range of utility functions that can help developers write cleaner and more concise code. From array manipulation to object iteration, Lodash provides a rich set of tools that can save developers time and effort when working on their projects. By leveraging the power of Lodash, developers can focus on implementing business logic without having to reinvent the wheel for common tasks.\n\nBenefits of Using TypeScript with Lodash\n\nOne of the key advantages of using TypeScript with Lodash is the enhanced type safety that it provides. TypeScript is a superset of JavaScript that adds static typing to the language, allowing developers to catch potential bugs and errors at compile time rather than at runtime. By using TypeScript in conjunction with Lodash, developers can take advantage of the type definitions provided by the library to ensure that their code is robust and error-free.\n\nIn addition to improved type safety, TypeScript also offers better code navigation and editor support. With TypeScript, developers can benefit from features such as IntelliSense, which provides auto-completion and code suggestions in their editor. This can help developers write code faster and with fewer errors, leading to a more efficient development process.\n\nBest Practices for Integrating Lodash with TypeScript\n• Install Lodash and TypeScript type definitions: Before you can start using Lodash with TypeScript, you need to install the Lodash library and its corresponding type definitions. You can do this by running the following command in your project directory:\n• Use Lodash functions with type annotations: To take advantage of TypeScript's type checking capabilities, it is important to annotate the types of function parameters and return values when using Lodash functions. This can help catch type errors early on and ensure that your code is more robust.\n• Avoid using the implicit any type: TypeScript's any type should be used sparingly, as it can bypass the type checking that TypeScript provides. When using Lodash functions, make sure to explicitly specify the types of your variables to take full advantage of TypeScript's type checking features.\n• Avoid mixing Lodash's chain function with TypeScript's type inference: Lodash provides a chain function that allows you to chain multiple operations together. However, TypeScript's type inference may not work as expected when using this function. It is recommended to avoid using the chain function in TypeScript projects to prevent potential type inference issues.\n• Be cautious when using Lodash's utility functions with complex objects: While Lodash offers a wealth of utility functions for working with objects and arrays, it is important to be mindful of how these functions interact with complex data structures. Be sure to test your code thoroughly and consider edge cases when using Lodash functions to avoid unexpected behavior.\n\nBy following these best practices and avoiding common pitfalls, developers can seamlessly integrate Lodash with TypeScript to enhance type safety and improve the overall quality of their code. With the combined power of Lodash and TypeScript, developers can build reliable and efficient software applications that meet the demands of today's fast-paced development environment.\n\nAre you looking for professional software development services to help you leverage the full potential of Lodash and TypeScript in your projects? Contact us today to learn more about how our team of experienced developers can assist you in achieving your development goals."
    },
    {
        "link": "https://stackoverflow.com/questions/60750236/manipulation-of-array-of-object",
        "document": "How can I manipulate the specific object ? , here is my example.\n\nfirst I need to filter all the userTags that equal to\n\nI use Filter to not return the value of user_tags: null\n\nNow I need to get the tag_id in the beginning and return the data looks like this\n\nI hope you could help me in manipulating the data."
    },
    {
        "link": "https://stackoverflow.com/questions/25569255/find-and-modify-deeply-nested-object-in-javascript-array",
        "document": "I have an array of objects that can be of any length and any depth. I need to be able to find an object by its id and then modify that object within the array. Is there an efficient way to do this with either lodash or pure js?\n\nI thought I could create an array of indexes that led to the object but constructing the expression to access the object with these indexes seems overly complex / unnecessary\n\nedit1; thanks for all yours replies I will try and be more specific. i am currently finding the location of the object I am trying to modify like so. parents is an array of ids for each parent the target object has. ancestors might be a better name for this array. costCenters is the array of objects that contains the object I want to modify. this function recurses and returns an array of indexes that lead to the object I want to modify\n\nNow with this array of indexes how do I target and modify the exact object I want? I have tried this where ancestors is the array of indexes, costCenters is the array with the object to be modified and parent is the new value to be assigned to the target object\n\nthis is obviously just returning the unmodified costCenters array so the only other way I can see to target that object is to construct the expression like myObjects[idx1].children[2].grandchildren[3].ggranchildren[4].something = newValue. is that the only way? if so what is the best way to do that?"
    },
    {
        "link": "https://geeksforgeeks.org/how-to-use-lodash-package-for-array-manipulation-in-a-javascript-project",
        "document": "In this article, we’ll look at how to use lodash for array manipulation tasks like sorting, filtering, mapping, etc. The ‘lodash’ is a very important and useful npm package that provides a set of functions to work with arrays, strings, objects, etc. Working with arrays is an important task in a javascript project which can be done through the ‘lodash’ functions.\n\nHow to use ‘lodash’ Package for Array Manipulation in a JavaScript Project:\n\nInstallation: Before using this package, we have to install it first. Follow the given steps to install it.\n• Open the terminal and navigate to the same directory of the project.\n• Enter the given command to install the module.\n• After successful installation, a JSON file is added to the directory that contains all details about the installed modules or packages.\n\nImport the package: After installation, we can use this package in our project or JavaScript application. For using this, we have to import the installed package. Follow the given steps for this :\n• We have to use require function to import the installed module.\n• Pass the name of the module as an argument to require function.\n• After successful installation and importing of the module, we can use it in our project or application.\n• After successfully importing and writing the code, we have to run our javascript code file using the command shown below.\n• Here, index.js is the name of the file.\n\nSorting: Sorting is a common task in a javascript project which can be done by the available functions in lodash package. There is a function sortBy() which can sort the array and arrange it in ascending order.\n\nExample: In this example, we have imported the ‘lodash’ library using the require function and assign it to the lodash variable and we have created an array of numbers called numbers. This array contains 10 numbers. We then use the lodash.sortBy method to sort the numbers array in ascending order. This means that the smallest number will come first, followed by the second smallest number, and so on, until we reach the largest number. Finally, we log the sorted array to the console using the console.log function.\n\nFiltering: There are many functions available in ‘lodash’ package used for filtering purposes. Here’s an example of how to filter an array of numbers using the filter function:\n\nExample: Firstly, the code imports the ‘lodash’ library using the require() function and assigns it to a variable called lodash. Then, an array of numbers is created and assigned to the variable numbers. The lodash.filter() function is then used to filter the numbers array based on a condition. In this case, the condition is that the number must be even and the filtered numbers are then assigned to a new variable called filteredNumbers. Finally, the console.log() function is used to print the filteredNumbers array to the console.\n\nMapping: In mapping, the map() function is used to map the array of numbers. An example of this is given below:\n\nExample: In this example, firstly we have imported the module ‘lodash’ using the require function and then we have created an array of 10 numbers named numbers. Then we used the map method to map the number according to the condition given in the method. And at last, we have displayed the output."
    },
    {
        "link": "https://community.latenode.com/t/how-can-i-restructure-an-array-containing-objects/496",
        "document": "I’m trying to recreate an array that holds several objects with some modified properties. Each object within the main array needs to be altered or processed differently. Could you suggest a method or a JavaScript function for restructuring or transforming these objects effectively? Additionally, what are some potential tools or techniques that could assist during this transformation process?\n\nTo effectively transform or restructure an array of objects in JavaScript, you can utilize the powerful array method known as . The function is quite versatile, allowing you to iterate over each object within the array and apply transformations on-the-fly to generate a new array with your required changes. The method creates a new array populated with the results of calling a provided function on every element in the calling array. const originalArray = [ { id: 1, name: \"John\", age: 30 }, { id: 2, name: \"Jane\", age: 25 }, { id: 3, name: \"Doe\", age: 40 } ]; const transformedArray = originalArray.map(obj => { // Apply transformation logic return { ...obj, isActive: obj.age < 35, // Adding a new property based on existing properties name: obj.name.toUpperCase() // Modifying an existing property }; }); console.log(transformedArray); /* [ { id: 1, name: \"JOHN\", age: 30, isActive: true }, { id: 2, name: \"JANE\", age: 25, isActive: true }, { id: 3, name: \"DOE\", age: 40, isActive: false } ] */ In this example, each object is modified to include a new property , which is determined by a condition ( ). Additionally, the property is converted to uppercase to demonstrate altering existing properties.\n• Using Lodash: Lodash is a JavaScript utility library that provides additional functional utilities, such as , which can be more flexible for complex transformations.\n• Chaining with and other Array Methods: While is often the go-to for transformation, combining with other methods like can provide powerful data manipulation capabilities.\n• JSON Manipulation: If your objects involve complex nested structures, you might find JSON transformation functions useful—convert objects to JSON for manipulation and back.\n• TypeScript: If you’re using a TypeScript environment, leveraging type definitions and interfaces can provide a consistent transformation structure with compile-time checks, reducing potential errors. By utilizing alongside other array utilities and potentially integrating libraries like Lodash, you can transform and structure your arrays of objects with precision, allowing you flexibility in how you represent your data. This method keeps your code clean and concise, strengthening both readability and maintainability.\n\nHey there! If you’re aiming to tweak or reshape objects within an array in JavaScript, you’ve got some cool ways to get it done. One popular trick is using the method, which lets you loop through each object in your array and apply whatever changes you fancy. Here’s a quick example to get you started: const originalArray = [ { id: 1, name: \"John\", age: 30 }, { id: 2, name: \"Jane\", age: 25 }, { id: 3, name: \"Doe\", age: 40 } ]; const transformedArray = originalArray.map(obj => { // Make the changes you want return { ...obj, isActive: obj.age < 35, name: obj.name.toUpperCase() }; }); console.log(transformedArray); In this snippet, I added an field and altered the property to uppercase, just like that! If you want to explore more tools for transformations, try checking out libraries like Lodash for extra functions or TypeScript for some type-safety. Keeping your code tidy and efficient is always a win! If you need more help, just holler!\n\nWhen working with JavaScript, transforming an array of objects is a common task that can be efficiently handled with the built-in function. This function enables you to apply a specific transformation to each object within the array, thereby creating a new array with the desired changes. While previous posts have explored and some enhancements, let’s investigate another perspective to achieve effective data transformation. While is a well-known choice for transforming arrays, considering the method can provide additional flexibility by accumulating results in customized ways. Here’s how you can use for transformation: const originalArray = [ { id: 1, name: 'Charlie', age: 28 }, { id: 2, name: 'Dana', age: 32 }, { id: 3, name: 'Eve', age: 19 } ]; const transformedArray = originalArray.reduce((accumulator, obj) => { // Apply custom transformation logic const transformedObject = { ...obj, isAdult: obj.age >= 21, // Add property based on age name: `${obj.name} Doe` // Concatenate a string to the name property }; accumulator.push(transformedObject); return accumulator; }, []); console.log(transformedArray); /* [ { id: 1, name: 'Charlie Doe', age: 28, isAdult: true }, { id: 2, name: 'Dana Doe', age: 32, isAdult: true }, { id: 3, name: 'Eve Doe', age: 19, isAdult: false } ] */\n• Function: Accumulates a transformed version of the array by iterating over each object, allowing for complex aggregations or modifications.\n• Custom Logic: Like adding properties ( ) or concatenating strings ( ), provides opportunities for more intricate transformations.\n• Immutable Data Handling: The spread operator ( ) maintains data integrity by creating new objects rather than modifying originals.\n• Functional Libraries: Integrate libraries like Ramda or Lodash for more complex transformation scenarios that require comprehensive functional programming utilities.\n• Type-Safety with TypeScript: Implement interfaces and type-checking for cleaner, error-free transformations in TypeScript environments.\n• Utility Functions: Create reusable transformation functions for structure consistency across multiple parts of your application code. By utilizing alongside other techniques, you gain additional control over the transformation process, allowing for more tailored and efficient handling of arrays of objects in JavaScript. This method not only aligns with various use cases but also ensures that your codebase remains robust and maintainable.\n\nHi there! Use for straightforward object transformations in an array: const originalArray = [ { id: 1, name: \"Emma\", age: 22 }, { id: 2, name: \"Liam\", age: 29 }, ]; const transformedArray = originalArray.map(obj => ({ ...obj, role: \"user\", // Add a new property ageText: obj.age > 25 ? \"Over 25\" : \"25 or under\" // Modify properties based on condition })); console.log(transformedArray); /* [ { id: 1, name: \"Emma\", age: 22, role: \"user\", ageText: \"25 or under\" }, { id: 2, name: \"Liam\", age: 29, role: \"user\", ageText: \"Over 25\" } ] */ For complex transformations, check out Lodash or try for more flexibility.\n\nCertainly! When you’re looking to transform objects within an array in JavaScript, it’s valuable to consider versatile approaches that can cater to specific requirements. Here’s a simple yet effective way to handle this using JavaScript’s function, focusing on keeping it both efficient and practical. const exampleArray = [ { id: 1, name: 'Anna', age: 32 }, { id: 2, name: 'Luke', age: 27 } ]; // Transform objects using map const updatedArray = exampleArray.map(item => ({ ...item, // Example transformation: increase age by 5 and append 'Smith' to the name age: item.age + 5, name: `${item.name} Smith` })); console.log(updatedArray); /* [ { id: 1, name: 'Anna Smith', age: 37 }, { id: 2, name: 'Luke Smith', age: 32 } ] */\n• Map Function: Iterates over each object, facilitating modifications as needed.\n• Spread Operator: Ensures immutability by creating new objects while preserving existing properties.\n• Use libraries like Lodash for advanced transformations, such as nested object manipulation.\n• For complex logic, consider breaking it into smaller functions for clarity and reusability. By leveraging the function and these techniques, efficiently structuring your data becomes seamless, with code that remains straightforward and easy to maintain."
    }
]