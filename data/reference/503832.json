[
    {
        "link": "https://php.net/manual/en/mysqli.connect-errno.php",
        "document": "mysqli::$connect_errno -- mysqli_connect_errno — Returns the error code from last connect call This function has no parameters. An error code for the last connection attempt, if it failed. Zero means no error occurred. /* @ is used to suppress warnings */\n\n /* Use your preferred error logging method here */\n\n /* @ is used to suppress warnings */\n\n /* Use your preferred error logging method here */\n• None - Returns a description of the last connection error mysqli_connect_error() - Returns a description of the last connection error\n• None - Returns the error code for the most recent function call mysqli_errno() - Returns the error code for the most recent function call\n• None - Returns a string description of the last error mysqli_error() - Returns a string description of the last error\n\nThere are no user contributed notes for this page."
    },
    {
        "link": "http://w3schools.com/Php/func_mysqli_connect_errno.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://php.net/manual/en/mysqli.query.php",
        "document": "Warning If the query contains any variable input then parameterized prepared statements should be used instead. Alternatively, the data must be properly formatted and all strings must be escaped using the mysqli_real_escape_string() function. For non-DML queries (not INSERT, UPDATE or DELETE), this function is similar to calling mysqli_real_query() followed by either mysqli_use_result() or mysqli_store_result(). In the case where a statement is passed to mysqli_query() that is longer than of the server, the returned error codes are different depending on whether you are using MySQL Native Driver ( ) or MySQL Client Library ( ). The behavior is as follows:\n• on Linux returns an error code of 1153. The error message means .\n• on Windows returns an error code 2006. This error message means server has gone away .\n• on all platforms returns an error code 2006. This error message means server has gone away . Procedural style only: A mysqli object returned by mysqli_connect() or mysqli_init() The result mode can be one of 3 constants indicating how the result will be returned from the MySQL server. - returns a mysqli_result object with unbuffered result set. As long as there are pending records waiting to be fetched, the connection line will be busy and all subsequent calls will return error . To avoid the error all records must be fetched from the server or the result set must be discarded by calling mysqli_free_result(). (available with mysqlnd) - the query is performed asynchronously and no result set is immediately returned. mysqli_poll() is then used to get results from such queries. Used in combination with either or constant. Returns on failure. For successful queries which produce a result set, such as or , mysqli_query() will return a mysqli_result object. For other successful queries, mysqli_query() will return . If mysqli error reporting is enabled ( ) and the requested operation fails, a warning is generated. If, in addition, the mode is set to , a mysqli_sql_exception is thrown instead. /* If we have to retrieve large amount of data we use MYSQLI_USE_RESULT */\n\n /* Note, that we can't execute any functions which interact with the\n\n server until all records have been fully retrieved or the result\n\n set was closed. All calls will return an 'out of sync' error */\n\n /* If we have to retrieve large amount of data we use MYSQLI_USE_RESULT */\n\n /* Note, that we can't execute any functions which interact with the\n\n server until all records have been fully retrieved or the result\n\n set was closed. All calls will return an 'out of sync' error */\n\n The above examples will output something similar to: Table myCity successfully created. Select returned 10 rows. Fatal error: Uncaught mysqli_sql_exception: Commands out of sync; you can't run this command now in...\n• None - Performs one or more queries on the database mysqli_multi_query() - Performs one or more queries on the database\n• None - Frees the memory associated with a result mysqli_free_result() - Frees the memory associated with a result\n\nNUNTIUS ¶ This may or may not be obvious to people but perhaps it will help someone. \n\n \n\nWhen running joins in SQL you may encounter a problem if you are trying to pull two columns with the same name. mysqli returns the last in the query when called by name. So to get what you need you can use an alias. \n\n \n\nBelow I am trying to join a user id with a user role. in the first table (tbl_usr), role is a number and in the second is a text name (tbl_memrole is a lookup table). If I call them both as role I get the text as it is the last \"role\" in the query. If I use an alias then I get both as desired as shown below. \n\n \n\n \"SELECT a.uid, a.role AS roleid, b.role, \n\n FROM tbl_usr a \n\n INNER JOIN tbl_memrole b \n\n ON a.role = b.id \n\n \" In this situation I guess I could have just renamed the role column in the first table roleid and that would have taken care of it, but it was a learning experience. theyranos at gmail dot com ¶ \n\n\n\n1. You're trying to use a database object that you've already closed (as noted by ceo at l-i-e dot com). Reopen your database connection, or find the call to or and remove it.\n\n2. Your MySQLi object has been serialized and unserialized for some reason. Define a wakeup function to re-create your database connection. \n\n3. Something besides you closed your mysqli connection (in particular, see \n\n4. You mixed OOP and functional calls to the database object. (So, you have in the same program as ). The cryptic \"Couldn't fetch mysqli\" error message can mean any number of things, including:1. You're trying to use a database object that you've already closed (as noted by ceo at l-i-e dot com). Reopen your database connection, or find the call toorand remove it.2. Your MySQLi object has been serialized and unserialized for some reason. Define a wakeup function to re-create your database connection. http://php.net/__wakeup 3. Something besides you closed your mysqli connection (in particular, see http://bugs.php.net/bug.php?id=33772 4. You mixed OOP and functional calls to the database object. (So, you havein the same program as). petrus.jvr ¶ When calling multiple stored procedures, you can run into the following error: \"Commands out of sync; you can't run this command now\".\n\nThis can happen even when using the close() function on the result object between calls. \n\nTo fix the problem, remember to call the next_result() function on the mysqli object after each stored procedure call. See example below:\n\n\n\n xa at sagexa dot com ¶ \"In PHP 8.1, the default error handling behavior of the MySQLi extension has changed from silencing errors to throw an Exception on errors. \"\n\nThis is true even for the procedural use of mysqli, i.e. mysqli_query.\n\nHence, using if(!mysqli_query($c, $sql)) [...] is pointless.\n\nTo disable Exception throwing : mysqli_report(MYSQLI_REPORT_OFF); Anonymous ¶ Here is an example of a clean query into a html table\n\n\n\n<table>\n\n <tr>\n\n <th>First Name</th>\n\n <th>Last Name</th>\n\n <th>City</th>\n\n </tr>\n\n <tr>\n\n <td> </td>\n\n <td> </td>\n\n <td> </td>\n\n </tr>\n\n </table> Beeners ¶ Stored Procedures.\n\n\n\nUse mysqli_query to call a stored procedure that returns a result set. \n\n\n\nHere is a short example:\n\n\n\n I hope this saves someone some time. registrations at jdfoxmicro dot com ¶ I like to save the query itself in a log file, so that I don't have to worry about whether the site is live. \n\n \n\nFor example, I might have a global function: \n\n \n\n \n\nThen in my mysql function error trapper, something like this: \n\n \n\n \n\nI also include the remote IP, user agent, etc., but I left it out of these code samples. And have it e-mail me when an error is caught, too. \n\n \n\nJeff ceo at l-i-e dot com ¶ Translation:\n\n\"Couldn't fetch mysqli\"\n\n\n\nYou closed your connection and are trying to use it again.\n\n\n\nIt has taken me DAYS to figure out what this obscure error message means..."
    },
    {
        "link": "https://php.net/manual/en/mysqli.construct.php",
        "document": "mysqli::__construct -- mysqli::connect -- mysqli_connect — Open a new connection to the MySQL server Can be either a host name or an IP address. When passing , the value is retrieved from mysqli.default_host. When possible, pipes will be used instead of the TCP/IP protocol. The TCP/IP protocol is used if a host name and port number are provided together e.g. . Prepending host by opens a persistent connection. mysqli_change_user() is automatically called on connections opened from the connection pool. The MySQL username or to assume the username based on the mysqli.default_user ini option. The MySQL password or to assume the password based on the mysqli.default_pw ini option. The default database to be used when performing queries or . The port number to attempt to connect to the MySQL server or to assume the port based on the mysqli.default_port ini option. The socket or named pipe that should be used or to assume the socket based on the mysqli.default_socket ini option. Specifying the parameter will not explicitly determine the type of connection to be used when connecting to the MySQL server. How the connection is made to the MySQL database is determined by the parameter. mysqli::__construct() always returns an object which represents the connection to a MySQL Server, regardless of it being successful or not. mysqli_connect() returns an object which represents the connection to a MySQL Server, or on failure. mysqli::connect() returns on success or on failure. Prior to PHP 8.1.0, returns on success. If mysqli error reporting is enabled ( ) and the requested operation fails, a warning is generated. If, in addition, the mode is set to , a mysqli_sql_exception is thrown instead. now returns instead of on success. All parameters are now nullable. /* You should enable error reporting for mysqli before attempting to make a connection */\n\n /* You should enable error reporting for mysqli before attempting to make a connection */\n\n The above examples will output something similar to: If error reporting is disabled, the developer is responsible for checking and handling failures MySQLnd always assumes the server default charset. This charset is sent during connection hand-shake/authentication, which mysqlnd will use. Libmysqlclient uses the default charset set in the or by an explicit call to mysqli_options() prior to calling mysqli_real_connect(), but after mysqli_init(). Object-oriented style only: If the connection fails, an object is still returned. To check whether the connection failed, use either the mysqli_connect_error() function or the mysqli->connect_error property as in the preceding examples. If it is necessary to set options, such as the connection timeout, mysqli_real_connect() must be used instead. Calling the constructor with no parameters is the same as calling mysqli_init(). Error \"Can't create TCP/IP socket (10106)\" usually means that the variables_order configure directive doesn't contain character . On Windows, if the environment is not copied the environment variable won't be available and PHP will have problems loading Winsock.\n• None - Returns the error code from last connect call mysqli_connect_errno() - Returns the error code from last connect call\n• None - Returns a description of the last connection error mysqli_connect_error() - Returns a description of the last connection error\n\nfugyl13 at gmail dot com ¶ Note that on all >=Windows 7 Servers, a host name \"localhost\" will create a very expensive lookup (~1 Second). \n\n\n\nThat's because since Windows 7, the hosts file doesn't come with a preconfigured\n\n127.0.0.1 localhost\n\nanymore\n\n\n\nSo, if you notice a long connection creation, try \"127.0.0.1\" instead. andres at 21brains dot com ¶ Please do use set_charset(\"utf8\") after establishing the connection if you want to avoid weird string issues. I do not know why the documentation does not warn you about this kind of stuff.\n\n\n\nWe had a hard time figuring out what was going on since we were using mb_detect_encoding and it said everything was UTF-8, but of course the display was wrong. If we used iconv from ISO-8859-1 to UTF-8 the strings looked fine, even though everything in the database had the right collation. So in the end, it was the connection that was the filter and although the notes for this function mention default charsets, it almost reads as a sidenote instead of a central issue when dealing with UTF and PHP/MySQL. php at haravikk dot me ¶ Just wanted to add a note for anyone looking to use the MySQLi persistent connections feature; it's important to note that PHP opens and retains one connection per database user per process.\n\n\n\nWhat this means is that if you are hosting multiple applications, each with its own database user (as is good practice) then you will end up multiplying the number of connections that PHP may hold open.\n\n\n\nFor example, if you have PHP configured with a maximum of eight worker processes, and you regularly use four different database users, then your MySQL server will need to accept at LEAST a maximum of 32 connections, or else it will run out.\n\n\n\nHowever, if you would like to minimise the number of connections, what you can do is instead is to open the connection using a \"guest\" user (with no privileges except logging in) and then use ->change_user() to switch to a more privileged user, before switching back to the guest when you're done. Since all of the connections would therefore belong to the guest user, PHP should only maintain one per worker process. chris at ocproducts dot com ¶ There's a separate port parameter, unlike mysql_connect. However, using host:port on the host parameter does actually work.\n\n\n\nThere is a caveat. If the host is 'localhost' then the port is ignored, whether you use a port parameter or the implicit syntax I mentioned above. This is because 'localhost' will make it use unix sockets rather than TCP/IP. paul at mtnlist dot com ¶ If you want to connect via an alternate port (other than 3306), as you might when using an ssh tunnel to another host, using \"localhost\" as the hostname will not work. \n\n\n\nUsing 127.0.0.1 will work. Apparently, if you specify the host as \"localhost\", the constructor ignores the port specified as an argument to the constructor."
    },
    {
        "link": "https://tutorialspoint.com/php/php_function_mysqli_connect_errno.htm",
        "document": "During the attempt to connect to a MySQL server, if an occurs The mysqli_connect_errno() function returns the code of the error occurred (during the last connect call).\n\nPHP mysqli_connect_errno() function returns an integer value representing the code of the error from the last connection call, incase of a failure. If the connection was successful this function returns 0.\n\nThis function was first introduced in PHP Version 5 and works works in all the later versions.\n\nFollowing example demonstrates the usage of the mysqli_connect_errno() function (in procedural style) −\n\nThis will produce following result −\n\nIn object oriented style the syntax of this function is $con -> connect_errno. Following is the example of this function in object oriented style −\n\nThis will produce following result −\n\nFollowing example demonstrates the behaviour of the mysqli_connect_errno() function incase of a successful connection −\n\nThis will produce following result −\n\nThis will produce following result −"
    },
    {
        "link": "https://stackoverflow.com/questions/27837641/php-mysqli-best-practice-error-handling",
        "document": "I'm new to PHP and mysqli, and I've managed to connect to my MySQL database using this PHP code:\n\nI'm wondering about error handling: Is there a best practice for database error handling in PHP? I'm thinking something like:\n\nAnd there should be something similar to handle if the DB connection fails. Could anyone help me out with finding the best practice for database related error handling in PHP?\n\nEDIT: After reading comments, I've removed all '@'characters from my code, since they suppress the warnings that PHP produces."
    },
    {
        "link": "https://php.net/manual/en/mysqli.error.php",
        "document": "information at saunderswebsolutions dot com ¶ The mysqli_sql_exception class is not available to PHP 5.05\n\n\n\nI used this code to catch errors \n\n The problem with this is that valid values for $res are: a mysqli_result object , true or false\n\nThis doesn't tell us that there has been an error with the sql used.\n\nIf you pass an update statement, false is a valid result if the update fails.\n\n\n\nSo, a better way is:\n\n \n\nThis would output something like:\n\nUnexpected PHP error [mysqli::query() [<a href='function.query'>function.query</a>]: (42S22/1054): Unknown column 'XXname' in 'field list'] severity [E_WARNING] in [G:\\database.php] line [249]\n\n\n\nVery frustrating as I wanted to also catch the sql error and print out the stack trace. \n\n\n\nA better way is:\n\n\n\n Prints out something like:\n\nError No: 1054\n\nUnknown column 'XXname' in 'field list'\n\nQuery: \n\nSELECT XXname FROM customer_table\n\n\n\n#0 G:\\\\database.php(251): database->dbError('Unknown column ...', 1054, 'getQuery()', 'SELECT XXname F...')\n\n#1 G:\\data\\WorkSites\\1framework5\\tests\\dbtest.php(29): database->getString('SELECT XXname F...')\n\n#2 c:\\PHP\\includes\\simpletest\\runner.php(58): testOfDB->testGetVal()\n\n#3 c:\\PHP\\includes\\simpletest\\runner.php(96): SimpleInvoker->invoke('testGetVal')\n\n#4 c:\\PHP\\includes\\simpletest\\runner.php(125): SimpleInvokerDecorator->invoke('testGetVal')\n\n#5 c:\\PHP\\includes\\simpletest\\runner.php(183): SimpleErrorTrappingInvoker->invoke('testGetVal')\n\n#6 c:\\PHP\\includes\\simpletest\\simple_test.php(90): SimpleRunner->run()\n\n#7 c:\\PHP\\includes\\simpletest\\simple_test.php(498): SimpleTestCase->run(Object(HtmlReporter))\n\n#8 c:\\PHP\\includes\\simpletest\\simple_test.php(500): GroupTest->run(Object(HtmlReporter))\n\n#9 G:\\all_tests.php(16): GroupTest->run(Object(HtmlReporter))\n\n\n\nThis will actually print out the error, a stack trace and the offending sql statement. Much more helpful when the sql statement is generated somewhere else in the code.\n\nse (at) brainbits (dot) net ¶ The decription \"mysqli_error -- Returns a string description of the LAST error\" is not exactly that what you get from mysqli_error. You get the error description from the last mysqli-function, not from the last mysql-error.\n\n\n\nIf you have the following situation\n\n\n\nif (!$mysqli->query(\"SET a=1\")) {\n\n $mysqli->query(\"ROLLBACK;\")\n\n printf(\"Errormessage: %s\n\n\", $mysqli->error);\n\n}\n\n\n\nyou don't get an error-message, if the ROLLBACK-Query didn't failed, too. In order to get the right error-message you have to write:\n\n\n\nif (!$mysqli->query(\"SET a=1\")) {\n\n printf(\"Errormessage: %s\n\n\", $mysqli->error);\n\n $mysqli->query(\"ROLLBACK;\")\n\n}\n\ncallforeach at gmail dot com ¶ I had to set mysqli_report(MYSQLI_REPORT_ALL) at the begin of my script to be able to catch mysqli errors within the catch block of my php code.\n\n\n\nInitially, I used the below code to throw and subsequent catch mysqli exceptions\n\n\n\n I realized the exception was being thrown before the actual block was not being called 'm able to trap all mysqli errors\n\nasmith16 at littlesvr dot ca ¶ Please note that the string returned may contain data initially provided by the user, possibly making your code vulnerable to XSS. \n\n\n\nSo even if you escape everything in your SQL query using mysqli_real_escape_string(), make sure that if you plan to display the string returned by mysqli_error() you run that string through htmlspecialchars().\n\n\n\nAs far as I can tell the two escape functions don't escape the same characters, which is why you need both (the first for SQL and the second for HTML/JS)."
    },
    {
        "link": "https://stackoverflow.com/questions/73326155/php-error-handling-working-in-mysql-mysqli-but-not-pdo",
        "document": "It's a very common fallacy, that one needs a dedicated error handling code for PDO or Mysqli (or whatever else module for that matter). Least it should be even more specific, such as \"Mysqli connection\" handler, as it seems with your old mysqli code.\n\nIf you think of it, you don't really care whether it was exactly a database error that prevented the code form being executed correctly. There can be any other problem as well.\n\nAdmittedly, one hardly can expect any other problem from such a simple code but still, the code may grow, become more modular, perform more tasks - and therefore error out in any other part as well. Like, writing database credentials in the every file is a bit of waste. So it's natural to put them in a file and then just include it in the every other script that requires a database interaction. So this file may get corrupted which will has the same effect as a database error. And will need to be fixed as well.\n\nOr, if you're handling only the connection error, the problem can happen during the query execution as well (especially in your case, as the way the query is executed it will error out even if a customer will simply enter for example).\n\nWhat you really care for is whether the data has been stored correctly (and probably whether emails were sent as well) or not, no matter what could be the possible failure. This is being the exact reason, why I wrote in the article this warning against wrapping some specific part of code in a try-catch in order to report this particular error. As error reporting handler must be common for the entire code.\n\nAdmittedly, the simplest exception handling method is simply wrapping the entire code in a try catch block where the most generic exception type, namely , must be checked for. Not very reliable but simplest.\n\nThe key here is to wrap the entire code, not just some random part of it. But one shouldn't forget to set the exception mode for PDO, in order let the query execution errors to be caught in this block as well.\n\nNote that I substituted actual variables in the query with question marks, which is being correct way of using prepared statements, that otherwise become useless and render all your transition from mysqli fruitless (especially given that mysqli supports prepared statements as well).\n\nUnfortunately, PHP has two kinds of errors - exceptions and errors proper. And try-catch can catch only the former. In order to handle all kinds of errors, an error handler can be used. You can see a very basic example of one in my article on PHP error reporting.\n\nThe last note: sending an email every time an error occurs on the site is not the wisest move. Although in your case it could be justified, given PHP is only involved when a user submits a form, but on a regular site, where PHP is used to handle every page, it can lead to thousands emails. Or even in your case, spammers may target your forms and send thousands requests as well (which itself may cause some overflow error and therefore thousands emails in the inbox). Instead of sending emails manually, consider using a dedicated error monitoring software, such as Sentry. It will send only new errors, as well as aggregated error info."
    },
    {
        "link": "https://linkedin.com/advice/1/what-best-way-handle-mysqli-connection-error-skills-programming-szvec",
        "document": ""
    },
    {
        "link": "https://linkedin.com/advice/0/how-can-you-avoid-common-errors-when-using-mysqli-avzxc",
        "document": ""
    }
]