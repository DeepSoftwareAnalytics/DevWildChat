[
    {
        "link": "https://community.asterisk.org/t/sip-over-udp-and-tcp/69476",
        "document": "I have Asterisk 11.14.1. I have a mix of Cisco phones on the system. Using a mix of SCCP, SIP TCP, and SIP UDP. I also have a SIP trunk using UDP. The SCCP phones work fine and I have enabled SIP TCP and those phones work fine as well. The issue I’m having is with the Cisco 7961s. Even though in the config file, I specified to use UDP, when they connect, I get an error in the Asterisk log that status they only support UDP and cannot connect on TCP. Any ideas how I can get them working without breaking anything else.\n\nThanks. The TCP SIP phones are working fine. The Cisco 7961 only supports UDP SIP. The sip.config I posted is for the 7961. It seems to be ignoring the transport=UDP because the Asterisk logs states it’s trying to communicate over TCP but the phone only supports UDP. In sip_general_custom.conf I have tcpenable=yes tcpbindaddr=0.0.0.0. When I checked the asterisk server it was only listening on 5060 TCP, not UDP. I just checked again and it’s listening on both now. I’ll do some testing and get back to you.\n\nAll of the tcp ports show LISTEN and the UDP ports do not. Here is another output. All TCP ports show LISTEN or ESTABLISHED except for the UDP ports.\n\nI was under the impression that Cisco phones only supported TCP. Maybe some support both, but I doubt that any only do UDP. It seems that your “UDP” phone is actually trying to connect to using TCP, so isn’t a pure UDP phone.\n\nThis is what’s in the asterisk log when the phone tries to register: [2017-01-21 19:59:36] ERROR[32235]: chan_sip.c:16899 register_verify: ‘TCP’ is not a valid transport for ‘2225’. we only use ‘UDP’! ending call.\n\n [2017-01-21 19:59:36] NOTICE[32235]: chan_sip.c:28091 handle_request_register: Registration from ‘sip:2225@10.10.30.4’ failed for ‘10.10.30.15:27655’ - Device not configured to use this transport type\n\nAlso, when I first tried to register the phone, I think the issue was related to the firmware. The latest firmware for this phone causes it not to register, you have to use the previous version. This also caused confusion as well as TCP not being enabled in asterisk when I was first trying to register the SIP phones. This was an all SCCP system and I recently started adding SIP phones. I just tested and transport=tcp works for this as well. I’m not sure why I was so hung up on UDP."
    },
    {
        "link": "https://community.asterisk.org/t/sip-tcp-transport-issue/78952",
        "document": "Hello.\n\n I have Asterisk 13.22.00 (on the FreePBX) and use sip trunks to our sip peers with IP authorization instead on by “from field” for incoming calls. There is specific host specified and type is “friend” in the trunk sip settings. When using UDP transport, everything works fine, but if TCP is specified, Asterisk tries peer to be authorized by “from field” with “401 Unauthorized” message. It looks like asterisk doesn’t see that trunk. SIP channel driver is chan_sip. What can the issue be caused?\n\nYou should use type=peer, as type=friend allows other people to masquerade as your service provider. ITSPs never authorise. You should use remotesecret rather than secret, although older cook book approaches use insecure=invite, because remotesecret is a, relatively, recent feature. Other things to note are that TCP normally requires insecure=port, because different ports are used for each connection.\n\nHello, David, thanks for your reply.\n\n Asterisk operates inside VPN, so there is no masquerade problem. Here is my trunk sip settings: There are no “secrets” at all. It’s worth noting, everything worked with these settings before some FreePBX modules were updated. However, FreePBX is only Web GUI above Asterisk funtionality.\n\nFreePBX also includes a large amount of dialplan and AGI code, it not a general purpose configurator for Asterisk. insecure=invite is pointless if you do not have secret. I’d assume the source IP address is wrong, but you might want to check whether you have type=friend on local devices and the caller ID user part matches a local device name. Most system should have type=peer throughout.\n\nHere are completed log and sip debug: <— SIP read from TCP:YYY.YYY.YYY.YYY:36676 —>\n\n INVITE sip:101055@XXX.XXX.XXX.XXX;transport=TCP SIP/2.0\n\n Via: SIP/2.0/TCP YYY.YYY.YYY.YYY:5060;rport;branch=z9hG4bKPjadb40bdc-7d63-43a6-a1da-0e12e02cc5d6;alias\n\n From: sip:111102@**ZZZ.ZZZ.ZZZ.ZZZ**;tag=453d93d0-8c11-40c7-9a1f-5ffab335ce19\n\n To: sip:101055@XXX.XXX.XXX.XXX\n\n Contact: sip:111102@YYY.YYY.YYY.YYY:5060;transport=TCP\n\n Call-ID: ca10ee4b-f8a1-443e-9ead-f84a5d317b43\n\n CSeq: 30601 INVITE\n\n Allow: OPTIONS, INFO, SUBSCRIBE, NOTIFY, PUBLISH, INVITE, ACK, BYE, CANCEL, UPDATE, PRACK, REGISTER, MESSAGE, REFER\n\n Supported: 100rel, timer, replaces, norefersub\n\n Session-Expires: 1800\n\n Min-SE: 90\n\n X-Grandstream-Transport: trunk\n\n Max-Forwards: 70\n\n User-Agent: Grandstream UCM6510V1.4B 1.0.19.21\n\n Content-Type: application/sdp\n\n Content-Length: 250 <------------->\n\n > [2019-03-13 12:47:05] VERBOSE[11027] chan_sip.c: — (16 headers 13 lines) —\n\n > [2019-03-13 12:47:05] VERBOSE[11027] chan_sip.c: Sending to YYY.YYY.YYY.YYY:36676 (no NAT)\n\n > [2019-03-13 12:47:05] VERBOSE[11027][C-00000777] chan_sip.c: Sending to YYY.YYY.YYY.YYY:36676 (no NAT)\n\n > [2019-03-13 12:47:05] VERBOSE[11027][C-00000777] chan_sip.c: Using INVITE request as basis request - ca10ee4b-f8a1-443e-9ead-f84a5d317b43\n\n > [2019-03-13 12:47:05] VERBOSE[11027][C-00000777] chan_sip.c: No matching peer for ‘111102’ from ‘YYY.YYY.YYY.YYY:36676’\n\n > [2019-03-13 12:47:05] VERBOSE[11027][C-00000777] chan_sip.c:\n\n <— Reliably Transmitting (no NAT) to YYY.YYY.YYY.YYY:36676 —>\n\n SIP/2.0 401 Unauthorized\n\n Via: SIP/2.0/TCP YYY.YYY.YYY.YYY:5060;branch=z9hG4bKPjadb40bdc-7d63-43a6-a1da-0e12e02cc5d6;alias;received=YYY.YYY.YYY.YYY;rport=36676\n\n From: sip:111102@ZZZ.ZZZ.ZZZ.ZZZ;tag=453d93d0-8c11-40c7-9a1f-5ffab335ce19\n\n To: sip:101055@XXX.XXX.XXX.XXX;tag=as57f683f6\n\n Call-ID: ca10ee4b-f8a1-443e-9ead-f84a5d317b43\n\n CSeq: 30601 INVITE\n\n Server: FPBX-14.0.5.25(13.22.0)\n\n Allow: INVITE, ACK, CANCEL, OPTIONS, BYE, REFER, SUBSCRIBE, NOTIFY, INFO, PUBLISH, MESSAGE\n\n Supported: replaces, timer\n\n WWW-Authenticate: Digest algorithm=MD5, realm=“asterisk”, nonce=“5efd2852”\n\n Content-Length: 0 <------------>\n\n [2019-03-13 12:47:05] VERBOSE[11027][C-00000777] chan_sip.c: Scheduling destruction of SIP dialog ‘ca10ee4b-f8a1-443e-9ead-f84a5d317b43’ in 32000 ms (Method: INVITE)\n\n [2019-03-13 12:47:05] VERBOSE[11027] chan_sip.c:\n\n <— SIP read from TCP:YYY.YYY.YYY.YYY:36676 —>\n\n ACK sip:101055@XXX.XXX.XXX.XXX;transport=TCP SIP/2.0\n\n Via: SIP/2.0/TCP YYY.YYY.YYY.YYY:5060;rport;branch=z9hG4bKPjadb40bdc-7d63-43a6-a1da-0e12e02cc5d6;alias\n\n From: sip:111102@ZZZ.ZZZ.ZZZ.ZZZ;tag=453d93d0-8c11-40c7-9a1f-5ffab335ce19\n\n To: sip:101055@XXX.XXX.XXX.XXX;tag=as57f683f6\n\n Call-ID: ca10ee4b-f8a1-443e-9ead-f84a5d317b43\n\n CSeq: 30601 ACK\n\n Max-Forwards: 70\n\n User-Agent: Grandstream UCM6510V1.4B 1.0.19.21\n\n Content-Length: 0 It might seems IP ZZZ.ZZZ.ZZZ.ZZZ “from field” is wrong, but it works fine with UDP. Changing from “friend” to “peer” doesn’t solve the issue.\n\n Local phones with authorization and “type=friend” work fine with TCP.\n\nThere are two interfaces on sip peer: local - ZZZ and VPN - YYY. Peer operates with YYY through VPN. You mean, “field from” needs to be YYY? Yes, peer inserts into “from” a little incorrect address. But it doesn’t matter with UDP transport. Furthemore, I have another peer with “right from header” incoming invite requests, but the result is the same. And I don’t know, why.\n\nUnfortunately, the issue hasn’t solved so far. But, it seems the cause has been found. The “insecure=port” stopped work for non-udp after that specific update was implemented in 13.21 Asterisk version:\n\n https://issues.asterisk.org/jira/browse/ASTERISK-27457 And there is the explanation of that issue in the later asterisk release change log, that tried to resolve it: Prior to b2c4e8660a9c89d07041271371151779b7ec75f6 (ASTERISK_27457)\n\n insecure=port was the defacto standard. That commit also prevented\n\n insecure=port from being applied for sip/tcp or sip/tls. Into consideration there are three sets of behaviour: 1. \"previous\" - before the above commit. 2. \"current\" - post above commit, pre this one. 3. \"new\" - post this commit. The problem that the above commit tried to address was guests over TCP. It succeeded in doing that ***but broke transport!=udp with host!=dynamic.*** My Asterisk version is 13.22, so it’s between the issue came along and it was solved. But it has been solved in different way than before and on the later Asterisk version I still have the problem with tcp port insecure."
    },
    {
        "link": "https://voip-info.org/forum/threads/tcp-transport-for-endpoints.8606",
        "document": ""
    },
    {
        "link": "https://support.digium.com/s/article/How-to-use-SIP-over-TCP",
        "document": ""
    },
    {
        "link": "https://community.freepbx.org/t/sip-over-tcp/30525",
        "document": "I have been using SIP over UCP. I just installed a Pantech modem on my router, and it or Verizon appear unable to support UCP. I tried using TCP on my wired connection, and the SIP phones are unable to register. I unblocked the ports on my router. Is there anything I need to do on the FreePBX / Asterisk server to enable SIP traffic over TCP?\n\nYes, the extension is set to “All-TCP Primary”. There is a note to make sure the “SIP Asterisk Settings” are set correctly but I don’t see anything on that page to set. Any ideas?\n\nSorry to keep bugging you. I tried entering tcpenable = yes on the SIP settings page; I got an error message telling me to do so on the Advanced Settings page. I went through everything on that page, and couldn’t find it. I turned on “read only” settings, and it wasn’t there either. Is there a file I can put that in that won’t get overwritten by FreePBX?\n\nWhen I put it in Advanced SIP Settings, I got an error message to do it on the Advanced Page. And it wasn’t there! I’ll try the conf file and see it that works!"
    },
    {
        "link": "https://docs.asterisk.org/Deployment/Secure-Calling/Secure-Calling-Tutorial",
        "document": "So you'd like to make some secure calls.\n\nHere's how to do it, using Blink, a SIP soft client for Mac OS X, Windows, and Linux. You can find some brief instructions for installing Blink on Ubuntu on the wiki.\n\nThese instructions assume that you're running as the root user (sudo su -).\n\nTransport Layer Security (TLS) provides encryption for call signaling. It's a practical way to prevent people who aren't Asterisk from knowing who you're calling. Setting up TLS between Asterisk and a SIP client involves creating key files, modifying Asterisk's SIP configuration to enable TLS, creating a SIP peer that's capable of TLS, and modifying the SIP client to connect to Asterisk over TLS.\n\nFirst, let's make a place for our keys.\n\nNext, use the \"ast_tls_cert\" script in the \"contrib/scripts\" Asterisk source directory to make a self-signed certificate authority and an Asterisk certificate.\n• The \"-C\" option is used to define our host - DNS name or our IP address.\n• The \"-O\" option defines our organizational name.\n• The \"-d\" option is the output directory of the keys.\n• The \"-b\" option specifies the size of the private key file, default is 1024 unless on master branch.\n• You'll be asked to enter a pass phrase for /etc/asterisk/keys/ca.key, put in something that you'll remember for later.\n• This will create the /etc/asterisk/keys/ca.crt file.\n• You'll be asked to enter the pass phrase again, and then the /etc/asterisk/keys/asterisk.key file will be created.\n• The /etc/asterisk/keys/asterisk.crt file will be automatically generated.\n• You'll be asked to enter the pass phrase a third time, and the /etc/asterisk/keys/asterisk.pem will be created, a combination of the asterisk.key and asterisk.crt files.\n\nNext, we generate a client certificate for our SIP device.\n• The \"-m client\" option tells the script that we want a client certificate, not a server certificate.\n• The \"-c /etc/asterisk/keys/ca.crt\" option specifies which Certificate Authority (ourselves) that we're using.\n• The \"-k /etc/asterisk/keys/ca.key\" provides the key for the above-defined Certificate Authority.\n• The \"-C\" option, since we're defining a client this time, is used to define the hostname or IP address of our SIP phone\n• The \"-O\" option defines our organizational name.\n• The \"-d\" option is the output directory of the keys.\"\n• The \"-o\" option is the name of the key we're outputting.\n• The \"-b\" option specifies the size of the private key file, default is 1024 unless on master branch.\n• You'll be asked to enter the pass phrase from before to unlock /etc/asterisk/keys/ca.key.\n\nNow, let's check the keys directory to see if all of the files we've built are there. You should have:\n\nNext, copy the malcolm.pem and ca.crt files to the computer running the Blink soft client.\n\n!!! tip .p12 Client Certificates If your client requires a .p12 certificate file instead, you can generate that using openssl like:\n\nNow, let's configure Asterisk's PJSIP channel driver to use TLS.\n\nIn the pjsip.conf configuration file, you'll need to enable a TLS-capable transport. An example of one would resemble:\n\nNote the protocol, cert_file, priv_key_file, and method options. Here, we're using the TLS protocol, we're specifying the keys that we generated earlier for cert_file and priv_key_file and we're setting the method to SSLv23.\n\nNext, you'll need to configure a TLS-capable endpoint. An example of one would resemble:\n\nNote the media_encryption option for the endpoint. In this case, we've configured an endpoint that will be using SDES encryption for RTP.\n\nYou might be tempted to add a transport=transport-tlsto the endpoint but in pjproject versions at least as late as 2.4.5, this will cause issues like Connection refused in a few situations. Let pjproject do the transport selection on its own. If you still see issues, set rewrite_contact = yes in the endpoint configuration.\n\nOr, if you are using chan_sip, you can use the following to assist.\n\nIn the sip.conf configuration file, set the following:\n\nNext, you'll need to configure a SIP peer within Asterisk to use TLS as a transport type. Here's an example:\n\nNotice the transport option. The Asterisk SIP channel driver supports three types: udp, tcp and tls. Since we're configuring for TLS, we'll set that. It's also possible to list several supported transport types for the peer by separating them with commas.\n\nThen, we need to modify the Account Preferences, and under the SIP Settings, we need to set the outbound proxy to connect to the TLS port and transport type on our Asterisk server. In this case, there's an Asterisk server running on port 5061 on host 10.24.13.224.\n\nNow, we need to point the TLS account settings to the client certificate (malcolm.pem) that we copied to our computer.\n\nThen, we'll point the TLS server settings to the ca.crt file that we copied to our computer.\n\nPress \"close,\" and you should see Blink having successfully registered to Asterisk.\n\nDepending on your Asterisk CLI logging levels, you should see something like:\n\nNotice that we registered on port 5061, the TLS port.\n\nNow, make a call. You should see a small secure lockbox in your Blink calling window to indicate that the call was made using secure (TLS) signaling:\n\nIf the host or IP you used for the common name on your cert doesn't match up with your server then you may run into problems when your client is calling Asterisk. Make sure the client is configured to not verify the server against the cert.\n\nWhen calling from Asterisk to Blink or another client, you might run into an ERROR on the Asterisk CLI similar to this:\n\nThis is the opposite scenario, where Asterisk is acting as the client and by default attempting to verify the destination server against the cert.\n\nYou can set tlsdontverifyserver=yes in sip.conf to prevent Asterisk from attempting to verify the server.\n\nNow that we've got TLS enabled, our signaling is secure - so no one knows what extensions on the PBX we're dialing. But, our media is still not secure - so someone can snoop our RTP conversations from the wire. Let's fix that.\n\nSRTP support is provided by libsrtp. libsrtp has to be installed on the machine before Asterisk is compiled, otherwise you're going to see something like:\n\non your Asterisk CLI. If you do see that, install libsrtp (and the development headers), and then reinstall Asterisk (./configure; make; make install).\n\nWith that complete, let's first go back into our peer definition in sip.conf. We're going to add a new encryption line, like:\n\nNext, we'll set Blink to use SRTP:\n\nWe're making secure calls with TLS (signaling) and SRTP (media)."
    },
    {
        "link": "https://community.asterisk.org/t/pjsip-trying-to-use-tls-with-sdes/83394",
        "document": "i followed the secure calling tutorial in asterisk wiki in order to achieve tls with sdes encryption. so i was able to generate keys and certificates.\n\n then i configured tls and endpoints in pjsip.conf:\n\nand the other endpoint 44302 is similar.\n\n **anyway i used blink softphone then i configured TLS with port and added certificates ca.crt and client.pem **\n\n i was able to register the endpoints\n\n i made a call without setting sdes in blink and i remove encryption_mode from pjsip\n\n then the call worked fine\n\n **then i set encryption as sdes in blink and re-added encryption_mode=sdes **\n\n but when i make a call it always says 488 not acceptable and here is the logs:\n\n<— Received SIP request (1121 bytes) from TLS:192.168.133.146:51070 —>\n\n INVITE sip:44302@192.168.133.222 SIP/2.0\n\n Via: SIP/2.0/TLS 192.168.133.146:51070;rport;branch=z9hG4bKPje43b2e854153439f9b6dde0b452c6711;alias\n\n Max-Forwards: 70\n\n From: “44301” sip:44301@192.168.133.222;tag=4b66bb3fe5614065b7d02a12c9f143a7\n\n To: sip:44302@192.168.133.222\n\n Contact: sip:79528613@192.168.133.146:51081;transport=tls\n\n Call-ID: 56464b50b47947b9a6e2d25bea563ff3\n\n CSeq: 30160 INVITE\n\n Allow: SUBSCRIBE, NOTIFY, INVITE, ACK, BYE, CANCEL, UPDATE, MESSAGE, REFER\n\n Supported: replaces, norefersub, gruu\n\n User-Agent: Blink 3.2.0 (Windows)\n\n Content-Type: application/sdp\n\n Content-Length: 517\n\n<— Transmitting SIP response (591 bytes) to TLS:192.168.133.146:51070 —>\n\n SIP/2.0 401 Unauthorized\n\n Via: SIP/2.0/TLS 192.168.133.146:51070;rport=51070;received=192.168.133.146;branch=z9hG4bKPje43b2e854153439f9b6dde0b452c6711;alias\n\n Call-ID: 56464b50b47947b9a6e2d25bea563ff3\n\n From: “44301” sip:44301@192.168.133.222;tag=4b66bb3fe5614065b7d02a12c9f143a7\n\n To: sip:44302@192.168.133.222;tag=z9hG4bKPje43b2e854153439f9b6dde0b452c6711\n\n CSeq: 30160 INVITE\n\n WWW-Authenticate: Digest realm=“asterisk”,nonce=“1585895680/ea9aac9606c630b71bd4153b77e78525”,opaque=“33cd922350d34520”,algorithm=md5,qop=“auth”\n\n Server: Asterisk PBX certified/16.3-cert1\n\n Content-Length: 0\n\n<— Received SIP request (434 bytes) from TLS:192.168.133.146:51070 —>\n\n ACK sip:44302@192.168.133.222 SIP/2.0\n\n Via: SIP/2.0/TLS 192.168.133.146:51070;rport;branch=z9hG4bKPje43b2e854153439f9b6dde0b452c6711;alias\n\n Max-Forwards: 70\n\n From: “44301” sip:44301@192.168.133.222;tag=4b66bb3fe5614065b7d02a12c9f143a7\n\n To: sip:44302@192.168.133.222;tag=z9hG4bKPje43b2e854153439f9b6dde0b452c6711\n\n Call-ID: 56464b50b47947b9a6e2d25bea563ff3\n\n CSeq: 30160 ACK\n\n User-Agent: Blink 3.2.0 (Windows)\n\n Content-Length: 0\n\n<— Received SIP request (1418 bytes) from TLS:192.168.133.146:51070 —>\n\n INVITE sip:44302@192.168.133.222 SIP/2.0\n\n Via: SIP/2.0/TLS 192.168.133.146:51070;rport;branch=z9hG4bKPjedfdb54c1a0e4ef497b1a0df19d09563;alias\n\n Max-Forwards: 70\n\n From: “44301” sip:44301@192.168.133.222;tag=4b66bb3fe5614065b7d02a12c9f143a7\n\n To: sip:44302@192.168.133.222\n\n Contact: sip:79528613@192.168.133.146:51081;transport=tls\n\n Call-ID: 56464b50b47947b9a6e2d25bea563ff3\n\n CSeq: 30161 INVITE\n\n Allow: SUBSCRIBE, NOTIFY, INVITE, ACK, BYE, CANCEL, UPDATE, MESSAGE, REFER\n\n Supported: replaces, norefersub, gruu\n\n User-Agent: Blink 3.2.0 (Windows)\n\n Authorization: Digest username=“44301”, realm=“asterisk”, nonce=“1585895680/ea9aac9606c630b71bd4153b77e78525”, uri=\"sip:44302@192.168.133.222\", response=“3e33f0f09be2b651b1da4b4b7116d6f9”, algorithm=md5, cnonce=“09c015dab2db45dbb9ffc429cd98efdd”, opaque=“33cd922350d34520”, qop=auth, nc=00000001\n\n Content-Type: application/sdp\n\n Content-Length: 517\n\n== Setting global variable ‘SIPDOMAIN’ to ‘192.168.133.222’\n\n <— Transmitting SIP response (393 bytes) to TLS:192.168.133.146:51070 —>\n\n SIP/2.0 100 Trying\n\n Via: SIP/2.0/TLS 192.168.133.146:51070;rport=51070;received=192.168.133.146;branch=z9hG4bKPjedfdb54c1a0e4ef497b1a0df19d09563;alias\n\n Call-ID: 56464b50b47947b9a6e2d25bea563ff3\n\n From: “44301” sip:44301@192.168.133.222;tag=4b66bb3fe5614065b7d02a12c9f143a7\n\n To: sip:44302@192.168.133.222\n\n CSeq: 30161 INVITE\n\n Server: Asterisk PBX certified/16.3-cert1\n\n Content-Length: 0\n\n<— Transmitting SIP response (447 bytes) to TLS:192.168.133.146:51070 —>\n\n SIP/2.0 488 Not Acceptable Here\n\n Via: SIP/2.0/TLS 192.168.133.146:51070;rport=51070;received=192.168.133.146;branch=z9hG4bKPjedfdb54c1a0e4ef497b1a0df19d09563;alias\n\n Call-ID: 56464b50b47947b9a6e2d25bea563ff3\n\n From: “44301” sip:44301@192.168.133.222;tag=4b66bb3fe5614065b7d02a12c9f143a7\n\n To: sip:44302@192.168.133.222;tag=c33ba276-2cd9-43cc-9c51-ee7fbb6e47cd\n\n CSeq: 30161 INVITE\n\n Server: Asterisk PBX certified/16.3-cert1\n\n Content-Length: 0\n\n<— Received SIP request (429 bytes) from TLS:192.168.133.146:51070 —>\n\n ACK sip:44302@192.168.133.222 SIP/2.0\n\n Via: SIP/2.0/TLS 192.168.133.146:51070;rport;branch=z9hG4bKPjedfdb54c1a0e4ef497b1a0df19d09563;alias\n\n Max-Forwards: 70\n\n From: “44301” sip:44301@192.168.133.222;tag=4b66bb3fe5614065b7d02a12c9f143a7\n\n To: sip:44302@192.168.133.222;tag=c33ba276-2cd9-43cc-9c51-ee7fbb6e47cd\n\n Call-ID: 56464b50b47947b9a6e2d25bea563ff3\n\n CSeq: 30161 ACK\n\n User-Agent: Blink 3.2.0 (Windows)\n\n Content-Length: 0\n\n**and one more thing: **\n\nthere is always a subscribe signal which i dont understand why it is sent and it is not being authorized :\n\n<— Received SIP request (699 bytes) from TLS:192.168.133.146:51070 —>\n\n SUBSCRIBE sip:44301@192.168.133.222 SIP/2.0\n\n Via: SIP/2.0/TLS 192.168.133.146:51070;rport;branch=z9hG4bKPj2a83e3a4c5774c89b077a0d151506506;alias\n\n Max-Forwards: 70\n\n From: “44301” sip:44301@192.168.133.222;tag=b55fc3bc676e46578fac63ca3bf0d12d\n\n To: sip:44301@192.168.133.222\n\n Contact: sip:79528613@192.168.133.146:51081;transport=tls\n\n Call-ID: f6b7e45da6a44c04840750ebe5ec6ee1\n\n CSeq: 11021 SUBSCRIBE\n\n Event: message-summary\n\n Expires: 600\n\n Supported: 100rel, replaces, norefersub, gruu\n\n Accept: application/simple-message-summary\n\n Allow-Events: conference, message-summary, dialog, presence, presence.winfo, xcap-diff, dialog.winfo, refer\n\n User-Agent: Blink 3.2.0 (Windows)\n\n Content-Length: 0\n\n<— Transmitting SIP response (594 bytes) to TLS:192.168.133.146:51070 —>\n\n SIP/2.0 401 Unauthorized\n\n Via: SIP/2.0/TLS 192.168.133.146:51070;rport=51070;received=192.168.133.146;branch=z9hG4bKPj2a83e3a4c5774c89b077a0d151506506;alias\n\n Call-ID: f6b7e45da6a44c04840750ebe5ec6ee1\n\n From: “44301” sip:44301@192.168.133.222;tag=b55fc3bc676e46578fac63ca3bf0d12d\n\n To: sip:44301@192.168.133.222;tag=z9hG4bKPj2a83e3a4c5774c89b077a0d151506506\n\n CSeq: 11021 SUBSCRIBE\n\n WWW-Authenticate: Digest realm=“asterisk”,nonce=“1585895629/259f5f63ba466b1b169fa1e040a048a1”,opaque=“7096d73218097dde”,algorithm=md5,qop=“auth”\n\n Server: Asterisk PBX certified/16.3-cert1\n\n Content-Length: 0\n\n<— Received SIP request (996 bytes) from TLS:192.168.133.146:51070 —>\n\n SUBSCRIBE sip:44301@192.168.133.222 SIP/2.0\n\n Via: SIP/2.0/TLS 192.168.133.146:51070;rport;branch=z9hG4bKPjfc38c54f99df4d43aaae479d5289d48d;alias\n\n Max-Forwards: 70\n\n From: “44301” sip:44301@192.168.133.222;tag=b55fc3bc676e46578fac63ca3bf0d12d\n\n To: sip:44301@192.168.133.222\n\n Contact: sip:79528613@192.168.133.146:51081;transport=tls\n\n Call-ID: f6b7e45da6a44c04840750ebe5ec6ee1\n\n CSeq: 11022 SUBSCRIBE\n\n Event: message-summary\n\n Expires: 600\n\n Supported: 100rel, replaces, norefersub, gruu\n\n Accept: application/simple-message-summary\n\n Allow-Events: conference, message-summary, dialog, presence, presence.winfo, xcap-diff, dialog.winfo, refer\n\n User-Agent: Blink 3.2.0 (Windows)\n\n Authorization: Digest username=“44301”, realm=“asterisk”, nonce=“1585895629/259f5f63ba466b1b169fa1e040a048a1”, uri=\"sip:44301@192.168.133.222\", response=“9075b5eb08dc988b40de27bead8195c2”, algorithm=md5, cnonce=“e4a08bb680d94baa88d805220f46ca1b”, opaque=“7096d73218097dde”, qop=auth, nc=00000001\n\n Content-Length: 0\n\n<— Transmitting SIP response (445 bytes) to TLS:192.168.133.146:51070 —>\n\n SIP/2.0 404 Not Found\n\n Via: SIP/2.0/TLS 192.168.133.146:51070;rport=51070;received=192.168.133.146;branch=z9hG4bKPjfc38c54f99df4d43aaae479d5289d48d;alias\n\n Call-ID: f6b7e45da6a44c04840750ebe5ec6ee1\n\n From: “44301” sip:44301@192.168.133.222;tag=b55fc3bc676e46578fac63ca3bf0d12d\n\n To: sip:44301@192.168.133.222;tag=z9hG4bKPjfc38c54f99df4d43aaae479d5289d48d\n\n CSeq: 11022 SUBSCRIBE\n\n Server: Asterisk PBX certified/16.3-cert1\n\n Content-Length: 0\n\ni only posted for one endpoint which is 44301 but both are making the same subscribe method and eventually it says not found"
    },
    {
        "link": "https://hotkey404.com/secure-connection-with-media-encryption-srtp",
        "document": "In this article, you will learn how to encrypt communication, so that no one will be able to eavesdrop on conversations between extensions on Asterisk.\n\nWe will not describe how to generate certificates as this has already been explained in previous articles:\n• How to generate Let’s Encrypt certificate in CentOS 7/8\n\nInterestingly, even if your SIP communication is encrypted, unencrypted RTP traffic can still be intercepted. Secure connections are made possible by media encryption (SRTP)"
    },
    {
        "link": "https://community.freepbx.org/t/freepbx-12-w-asterisk-13-tls-srtp/25364",
        "document": "Am I missing something, or did the push to GUI SIP channel configuration (both chan_sip and pjsip) make implementing TLS/SRTP nearly impossible? Some of the hurdles to overcome:\n• PJSIP channel configuration (GUI) has no way to add a TLS transport, just UDP, TCP, and WS. You can add it in pjsip.custom.conf, more or less.\n• Similiar problem with chan_sip, but at least you can set custom properties via the GUI to accomplish the same thing\n• Configuring a device for PJSIP requires you to choose “Auto” transport, even if you want to enforce TLS, because that channel isn’t configured via the GUI.\n• Worse, there’s no longer a way to enforce chan_sip devices onto a TLS transport.\n• DTLS - All over the GUI, but I’m hard pressed to find any of my already-deployed devices able to use it.\n• With PJSIP the DTLS settings preclude the use of SRTP on the device. The device may connect via your manually-configured TCP transport, but when trying to INVITE with SRTP will always get a 488 response. (There is no PJSIP DTLS “SRTP” mode, just DTLS or not.) With a number of mobile/remote users, TLS/SRTP is a must-have, and is broken to the point of unusable in the current incarnation of FreePBX 12. Is this regression something the devs are working to correct in the very near term in the FPBX12 architecture, or would a series of patches submitted to the Jira be more productive?\n\nThat’s mainly my fault. Yes. The Sip settings for PJSIP were written before we had rolled in all the certificate management stuff, and I’d never gone back and plugged it all together. So yeah, that still needs to be done, and it fell off my radar. However, we didn’t really change anything in chan_sip to break stuff. It’s just as confusing and difficult as it always has been. PJSip will fix that, hopefully. would a series of patches submitted to the Jira be more productive? I’d love it if you would! Feel free to talk to us on IRC, too, and we can probably help you understand why we did things a certain way. (The certain way may be ‘because we were wrong’, too! We hang out on FreePBX and #freepbx-dev, but make sure you say our names so that our IRC clients alert us\n\nThat’s mainly my fault. Yes. The Sip settings for PJSIP were written before we had rolled in all the certificate management stuff, and I’d never gone back and plugged it all together. So yeah, that still needs to be done, and it fell off my radar. Kinda what I figured… I’ll see what I can roll together and get it up on Jira. However, we didn’t really change anything in chan_sip to break stuff. It’s just as confusing and difficult as it always has been. Fair enough, my apologies if it read that way. What I mean to say was that the device side transport selection is now broken on chan_sip devices, not necessarily the general chan_sip configuration. More generically, transport selection on devices is either too strict/literal (pjsip) or non-existent (chan_sip). Nothing some code can’t fix. I’d love it if you would! Feel free to talk to us on IRC, too, and we can probably help you understand why we did things a certain way. (The certain way may be ‘because we were wrong’, too! We hang out on FreePBX and #freepbx-dev, but make sure you say our names so that our IRC clients alert us I’ll pop by after I’ve had a chance to dive into the current code and see if I can divine some how/why before I put some code together and come up with a basic plan as to how it will work you all can be happy with.\n\nI have successfully gotten SRTP to work, but it took a heck of a long time, obviously because there’s nothing in the GUI, and good luck finding documentation. Someday I will get around to dishing out what I did. I’ve just been too dang busy, but the short end of it is that you’ll need to use the config addition documented in the Asterisk Wiki using . The setting needs to be specified for each PJSIP extension. If you can handle me piecemealing the instructions to you, feel free to private message me, but I will, at some point, post a guide on how to do this. For best results, use a SSL certificate from any known good issuing CA.\n\nOh gosh. Alright. I feel like I can breathe for a moment. I’m sorry for taking over 3 months to get back to this. You may have already figured it out, and 6.12.65-29 actually has an option in extensions for Media Encryption. But that doesn’t solve the entire issue. Hoping this will help others who haven’t quite figured it out yet. This assumes the following:\n• You already have an SSL certificate and a way to install the CA certificate on whatever device you’re using. (Bria on Mac is insanely picky on how the CA certificate is installed, hence this warning. Those of you who do not know how to get any of this stuff, please look up tutorials on using OpenSSL. Should be part of your sysadmin’s brain arsenal!)\n• You have the private key for your SSL certificate.\n• You are using PJSIP. There is a pretty good CHAN_SIP tutorial if you need it in the Asterisk documentation…but why are you still using CHAN_SIP? You will pretty much be working out of the whole time. The first file we will look at is . If you haven’t made any changes already, this file should be blank. Here is what you should add: Notice that the bind is on port 5061 - my understanding is that this is the standard TCP port for PJSIP TLS authentication (remember, you get UDP non-encrypted authentication by default). At this point, if you are using 6.12.65-29, you will notice that there is a Media Encryption option in whatever extension you are using. SRTP via in-SDP is what you are looking for. Now if you are not using -29, or if you are still having trouble, the Asterisk documentation mentions something about - but, the way FreePBX works, you can’t just throw that parameter in an extension. So you will need to add it later…the trick is where. The magic lies in this file: . Add this to the necessary extensions (where [100] is your extension): And at this point, it should work - when you restart Asterisk. You may have issues with RTP ports and such…but that you can adjust. Don’t forget to use a STUN server and fill out all the necessary network IPs if you are behind a firewall, etc. Again, my apologies for those who were depending on me for this - I know exactly how you feel. I’m also sure you know how busy life can get. Somebody call me out if this doesn’t work."
    },
    {
        "link": "https://community.freepbx.org/t/tls-encryption-using-raspbx-asterisk-16-freepbx-15-and-zoiper-on-android/78138",
        "document": "I’m trying to set up TLS encryption on my SIP server running RasPBX (Asterisk 16 & FreePBX 15). Unfortunately there’s not too much information online about a complete workflow on how this should be done. So far I did the following\n\nPorts 5060, 5061 are forwarded and my non encrypted extensions are working ok over UDP.\n\nFor the encrypted extension it throws Registration Failed error.\n\nHas anybody used Zoiper in this configuration?"
    }
]