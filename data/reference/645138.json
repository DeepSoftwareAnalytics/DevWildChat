[
    {
        "link": "https://arduino.cc/en/Reference/tone",
        "document": ""
    },
    {
        "link": "https://arduino.cc/en/Tutorial/PlayMelody",
        "document": ""
    },
    {
        "link": "https://arduino.cc/reference/tr/language/functions/advanced-io/tone",
        "document": "The Arduino Reference text is licensed under a Creative Commons Attribution-Share Alike 3.0 License.\n\nFind anything that can be improved? Suggest corrections and new documentation via GitHub.\n\nDoubts on how to use Github? Learn everything you need to know in this tutorial."
    },
    {
        "link": "https://arduinogetstarted.com/reference/tone",
        "document": "Generates a square wave of the specified frequency (and 50% duty cycle) on a pin. A duration can be specified, otherwise the wave continues until a call to noTone(). The pin can be connected to a piezo buzzer or other speaker to play tones.\n\nOnly one tone can be generated at a time. If a tone is already playing on a different pin, the call to tone() will have no effect. If the tone is playing on the same pin, the call will set its frequency.\n\nUse of the tone() function will interfere with PWM output on pins 3 and 11 (on boards other than the Mega).\n\nIt is not possible to generate tones lower than 31Hz. For technical details, see Brett Hagman's notes."
    },
    {
        "link": "https://thinkcrate.co/wp-content/uploads/2.-Arduino-Functions-Tone.pdf",
        "document": ""
    },
    {
        "link": "https://projecthub.arduino.cc/tmekinyan/playing-popular-songs-with-arduino-and-a-buzzer-546f4a",
        "document": "Latest commit to the master branch on Invalid date"
    },
    {
        "link": "https://circuitdigest.com/microcontroller-projects/playing-melodies-on-piezo-buzzer-using-arduino-tone-function",
        "document": "Arduino is an excellent way to simplify and speed up your microcontroller projects, thanks to its community of developers who have made almost everything look simple. There are lots of Arduino Projects out here for you to try and have fun. Some of your projects might need some sounds action to notify about something or just to impress the viewers. What if I told you that almost any theme songs that could be played on a piano can be mimicked on your Arduino with the help of a simple program and a cheap Piezo speaker?\n\nIn this tutorial we will learn how simple and easy it is to Play Melody on Piezo Buzzer or Speaker using the Arduino tone () function. At the end of this tutorial you will be able to play some famous tones of Pirates of Caribbean, Crazy Frog, Super Mario and Titanic. You will also learn how to play any piece of piano music with Arduino. Check the Video at the end.\n• Arduino (any version – UNO is used here)\n• Piezo Speaker/Buzzer or any other 8ohm speaker.\n\nBefore we can understand how a tone () works we should know how a Piezo buzzer works. We might have learnt about Piezo crystals in our school, it is nothing but a crystal which converts mechanical vibrations into electricity or vice versa. Here we apply a variable current (frequency) for which the crystal vibrates thus producing sound. Hence in order to make the Piezo buzzer to make some noise we have to make the Piezo electric crystal to vibrate, the pitch and tone of noise depends on how fast the crystal vibrates. Hence the tone and pitch can be controlled by varying the frequency of the current.\n\nOkay, so how do we get a variable frequency from Arduino? This is where the tone () function comes in. The tone () can generate a particular frequency on a specific pin. The time duration can also be mentioned if required. The syntax for tone () is\n\nThe values of pin can be any of your digital pin. I have used pin number 8 here. The frequency that can be generated depends on the size of the timer in your Arduino board. For UNO and most other common boards the minimum frequency that can be produced is 31Hz and the maximum frequency that can be produced is 65535Hz. However we humans can hear only frequencies between 2000Hz and 5000 Hz.\n\nNow, we know how to produce some noise using the arduino tone() function. But, how do we know what kind of tone will be generated for each frequency?\n\nArduino have given us a note table which equates each frequency to a specific musical note type. This note table was originally written by Brett Hagman, on whose work the tone() command was based. We will use this note table to play our themes. If you are someone familiar with sheet music you should be able to make some sense of this table, for others like me these are just another block of code.\n\nAbove code is given in pitches.h header file in this zip file, you just need to download and include this file in our Arduino code as given at the end this tutorial or use the code given in the zip file.\n\nTo play a decent melody using Arduino we should know what constitutes these melodies. The three main factors required to play a theme are\n\nWe have the pitches.h header file to play any note value, now we should find out its specific note duration to play it. Tempo is nothing but how fast the melody should be played. Once you know the Note value and Note duration you can use them with the tone() like\n\nFor the tones played in this tutorial I have given you the note Value and Note duration inside the “themes.h” header file using which you can play them in your projects. But if you have any specific tone in your mine and you want to play it in your project read on.... Else skip this topic and fall down to the next.\n\nTo play any specific tone you have to get the sheet music of that particular music and convert sheet music to Arduino sketch by reading the note value and note duration from it. If you are a musical student it would be a piece of cake for you, else spent some time and break you head like I did. But at the end of the day when your tone plays on the Piezo buzzer you will find your effort worth it.\n\nOnce you have the note value and note duration, load them into the program inside the “themes.h” header file as shown below\n\nThe above block of code shows the note value and note duration of “He is a Pirate” theme form the movie Pirates of the Caribbean. You can add your theme similarly like this.\n\nThe schematic of this Arduino Tone Generator Project project is shown in the figure below:\n\nThe connection is pretty simple we have a Piezo speaker which is connected to pin 8 and Ground of the Arduino through a 1K resistor. This 1k resistor is a current limiting resistor, which is used to keep the current within the safe limits. We also have four switches to select the required melody. One end of the switch is connected to ground and the other end is connected to pin 2, 3, 4 and 5 respectively. The switches will have pull up resistors enabled internally using the software. Since the circuit is pretty simple it can be connect using a bread board as shown below:\n\nOnce you have understood the concept, the Arduino program is pretty straight forward. The complete code is given at the end of the tutorial. If you are not familiar with adding header files you can download the code as a ZIP file from here and directly upload it to your Arduino.\n\nThe above two are the header files that have to be added. “pitches.h” is used to equate each musical note to a particular frequency and “themes.h” contains the note value and note duration of all the four tones.\n\nA function is created to play each tone when required. Here when the function Play_Pirates() is called the “He is a Pirate” tone will be played. This function consists of the tone function which produces the frequency at pin number 8. The noTone(8) is called to stop the music once it’s played. If you want to play your own tone, change the Pirates_note and Pirates_duration to the new note and duration values that you have saved in “themes.h” value\n\nThe pin 2, 3, 4 and 5 are used to select the particular tone to be played. These pins are held high by default using the internal pull up resistors by using the above line of code. When the button is pressed it is pulled down to ground.\n\nBelow block of code is used to play the song when a button is pressed. It reads the digital value of each button and when it gets low (zero) it assumes that the button is pressed and plays the respective tone by calling the required function.\n\nOnce your Code and Hardware is ready, simply burn the program into your Arduino and you should be able to play the tone by simply pressing the buttons. If you have any problems take a look at your serial monitor for debugging or use the comment section to report the problem and I will be happy to help you out.\n\nThe complete working of the project is shown in the video below. Hope you enjoyed the project and would use it in some of your project or create a new tone for your project. If yes feel free to share your work in the comment section."
    },
    {
        "link": "https://build-electronic-circuits.com/arduino-buzzer",
        "document": "In this quickstart tutorial, you’ll learn how to control a passive buzzer using your Arduino UNO to play a simple melody. By the end, you’ll have a basic understanding of how to incorporate sound into your Arduino projects.\n\nRefer to the schematic diagram provided to connect your passive buzzer to digital pin 8 on the Arduino board.\n\nThis is a very simple circuit to connect.\n• Connect one lead of the passive buzzer to the digital pin 8 on the Arduino.\n• Connect the other lead to a ground (GND) pin on the Arduino.\n\nCheck out the breadboard image below to see how you can connect this circuit to a breadboard.\n\nThe code uses the tone() function in Arduino to play tones. The function has three parameters; pin, frequency, and duration. The melody is defined through the array melody[], and the timing is controlled through the array noteDurations[].\n\nA in the melody array represents a rest or pause in the melody, and the corresponding duration values in determine the length of these pauses.\n\nCopy the code below into your Arduino IDE. This code will play a simple melody through the buzzer.\n• After uploading the code, the buzzer should play the melody.\n• If you don’t hear any sound, check your connections and ensure the buzzer is functional.\n• Verify that you have selected the correct board and port in the Arduino IDE before uploading.\n\nIn the code above, we only defined the frequencies of the notes that we needed for the melody. If you want to create other melodies, you might need other notes. Copy the code below and save it as pitches.h, then include this file in your code to have all notes available.\n\nWhen you have included the pitches.h file above, you can play a lot of different songs. Just update the arrays melody and noteDuration in the example code above. Below, I’ve listed a few common songs:\n\nI hope this tutorial was helpful. If you have any questions or suggestions, please leave a comment below!"
    },
    {
        "link": "https://arduino.cc/en/Tutorial/PlayMelody",
        "document": ""
    },
    {
        "link": "https://instructables.com/How-to-use-a-Buzzer-Arduino-Tutorial",
        "document": "How it works? It's simple, tone(buzzer, 1000) sends a 1KHz sound signal to pin 9, delay(1000) pause the program for one second and noTone(buzzer) stops the signal sound. The loop() routine will make this run again and again making a short beeping sound.\n\nTry downloading the codebender plugin and clicking on the Run on Arduino button to program your Arduino with this sketch. And that's it, you've programmed your Arduino board!\n\nYou can keep playing with that by clicking the \"Edit\" button and start making your own modifications to the code.\n\nFor example, try to change sound signal \"1000\" (1KHz) to \"500\" (500Hz) or delay time and see how it changes the program."
    }
]