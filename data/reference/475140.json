[
    {
        "link": "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil",
        "document": "Certutil.exe is a command-line program installed as part of Certificate Services. You can use certutil.exe to display certification authority (CA) configuration information, configure Certificate Services, and back up and restore CA components. The program also verifies certificates, key pairs, and certificate chains.\n\nIf is run on a certification authority without other parameters, it displays the current certification authority configuration. If is run on a non-certification authority without other parameters, the command defaults to running the command. Not all versions of certutil provide all of the parameters and options that this document describes. You can see the choices that your version of certutil provides by running or .\n\nParses and displays the contents of a file using Abstract Syntax Notation (ASN.1) syntax. File types include .CER, .DER and PKCS #7 formatted files.\n• RequestId is the numeric Request ID for the pending request.\n• AttributeString is the request attribute name and value pairs.\n• Names and values must be colon separated, while multiple names and value pairs must be newline separated. For example: where the sequence is converted to a newline separator.\n• requestID is the numeric Request ID for the pending request.\n• ExtensionName is the ObjectId string for the extension.\n• Flags sets the priority of the extension. is recommended, while sets the extension to critical, disables the extension, and does both.\n• If the last parameter is numeric, it's taken as a Long.\n• If the last parameter can be parsed as a date, it's taken as a Date.\n• If the last parameter starts with , the rest of the token is taken as the filename with binary data or an ascii-text hex dump.\n• If the last parameter is anything else, it's taken as a String.\n• SerialNumber is a comma-separated list of certificate serial numbers to revoke.\n• Reason is the numeric or symbolic representation of the revocation reason, including:\n\nDisplays the disposition of the current certificate.\n\nGets the default configuration string via ICertGetConfig.\n• CAMachineList is a comma-separated list of CA machine names. For a single machine, use a terminating comma. This option also displays the site cost for each CA machine.\n• InfoName indicates the CA property to display, based on the following infoname argument syntax:\n\nRetrieves the certificate for the certification authority.\n• Index is the CA certificate renewal index (defaults to most recent).\n\nRetrieves the certificate chain for the certification authority.\n• Index is the CA certificate renewal index (defaults to most recent).\n• Index is the CRL index or key index (defaults to CRL for most recent key).\n• delta is the delta CRL (default is base CRL).\n• dd:hh is the new CRL validity period in days and hours.\n• delta publishes the delta CRLs only (default is base and delta CRLs).\n• Use to ignore an outstanding renewal request, and to generate a new request.\n\nDumps the schema for the certificate.\n• The command defaults to the Request and Certificate table.\n• Log dumps the issued or revoked certificates, plus any failed requests.\n• csv provides the output using comma-separated values.\n• To display the StatusCode column for all entries, type\n• To display all columns for the last entry, type:\n• To display the RequestId and Disposition for three requests, type:\n• To display Row IDs Row IDs and CRL numbers for all Base CRLs, type:\n• Use for a date relative to the current time.\n• Templates contain Extended Key Usages (EKUs), which are object identifiers (OIDs) that describe how the certificate is used. Certificates don't always include template common names or display names, but they always contain the template EKUs. You can extract the EKUs for a specific certificate template from Active Directory and then restrict views based on that extension.\n• Request deletes the failed and pending requests, based on submission date.\n• Cert deletes the expired and revoked certificates, based on expiration date.\n• To delete failed and pending requests submitted by January 22, 2001, type:\n• To delete all certificates that expired by January 22, 2001, type:\n• To delete the certificate row, attributes, and extensions for RequestID 37, type:\n• To delete CRLs that expired by January 22, 2001, type:\n• BackupDirectory is the directory to store the backed up data.\n• Incremental performs an incremental backup only (default is full backup).\n• KeepLog preserves the database log files (default is to truncate log files).\n• BackupDirectory is the directory to store the backed up database files.\n• Incremental performs an incremental backup only (default is full backup).\n• KeepLog preserves the database log files (default is to truncate log files).\n\nBacks up the Active Directory Certificate Services certificate and private key.\n• BackupDirectory is the directory to store the backed up PFX file.\n• BackupDirectory is the directory containing the data to be restored.\n• BackupDirectory is the directory containing the database files to be restored.\n• BackupDirectory is the directory containing PFX file to be restored.\n• PFXFile is the PFX file to be restored.\n\nExports the certificates and private keys. For more information, see the parameter in this article.\n• CertificateStoreName is the name of the certificate store.\n• CertId is the certificate or CRL match token.\n• PFXFile is the PFX file to be exported.\n• Modifiers are the comma-separated list, which can include one or more of the following:\n• CryptoAlgorithm= specifies the cryptographic algorithm to use for encrypting the PFX file, such as or .\n• EncryptCert - Encrypts the private key associated with the certificate with a password.\n• ExportParameters -Exports the private key parameters in addition to the certificate and private key.\n• ExtendedProperties - Includes all extended properties associated with the certificate in the output file.\n• NoEncryptCert - Exports the private key without encrypting it.\n\nImports the certificates and private keys. For more information, see the parameter in this article.\n• CertificateStoreName is the name of the certificate store.\n• PFXFile is the PFX file to be imported.\n• Modifiers are the comma-separated list, which can include one or more of the following:\n• AT_KEYEXCHANGE - Changes the keyspec to key exchange.\n• AT_SIGNATURE - Changes the keyspec to signature.\n• ExportEncrypted - Exports the private key associated with the certificate with password encryption.\n• FriendlyName= - Specifies a friendly name for the imported certificate.\n• KeyDescription= - Specifies a description for the private key associated with the imported certificate.\n• KeyFriendlyName= - Specifies a friendly name for the private key associated with the imported certificate.\n• Pkcs8 - Uses PKCS8 format for the private key in the PFX file.\n• ProtectHigh - Specifies that a high-security password must be associated with the private key.\n• VSM - Stores the private key associated with the imported certificate in the Virtual Smart Card (VSC) container.\n• None CertificateStoreName is the certificate store name. For example:\n• None CertId is the certificate or CRL match token. This ID can be a:\n• Numeric cert index (0, 1, and so on)\n• Numeric CRL index (.0, .1, and so on)\n• Numeric CTL index (..0, ..1, and so on)\n• Key container name or CSP name\n\nMany of these identifiers might result in multiple matches.\n• OutputFile is the file used to save the matching certificates.\n• The option accesses a user store instead of a machine store.\n• MachineName is the remote machine name.\n\nAdds a certificate to the store. For more information, see the parameter in this article.\n• CertificateStoreName is the certificate store name.\n• InFile is the certificate or CRL file you want to add to the store.\n\nDeletes a certificate from the store. For more information, see the parameter in this article.\n• CertificateStoreName is the certificate store name.\n• CertId is the certificate or CRL match token.\n\nVerifies a certificate in the store. For more information, see the parameter in this article.\n• CertificateStoreName is the certificate store name.\n• CertId is the certificate or CRL match token.\n\nRepairs a key association or update certificate properties or the key security descriptor. For more information, see the parameter in this article.\n• None CertificateStoreName is the certificate store name.\n• None CertIdList is the comma-separated list of certificate or CRL match tokens. For more information, see the CertId description in this article.\n• None PropertyInfFile is the INF file containing external properties, including: [Properties] 19 = Empty ; Add archived property, OR: 19 = ; Remove archived property 11 = {text}Friendly Name ; Add friendly name property 127 = {hex} ; Add custom hexadecimal property _continue_ = 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f _continue_ = 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 2 = {text} ; Add Key Provider Information property _continue_ = Container=Container Name& _continue_ = Provider=Microsoft Strong Cryptographic Provider& _continue_ = ProviderType=1& _continue_ = Flags=0& _continue_ = KeySpec=2 9 = {text} ; Add Enhanced Key Usage property _continue_ = 1.3.6.1.5.5.7.3.2, _continue_ = 1.3.6.1.5.5.7.3.1,\n\nDumps the certificates store. For more information, see the parameter in this article.\n• None CertificateStoreName is the certificate store name. For example:\n• None CertId is the certificate or CRL match token. This can be a:\n• Numeric cert index (0, 1, and so on)\n• Numeric CRL index (.0, .1, and so on)\n• Numeric CTL index (..0, ..1, and so on)\n• Key container name or CSP name\n\nMany of these may result in multiple matches.\n• OutputFile is the file used to save the matching certificates.\n• The option accesses a user store instead of a machine store.\n• None CertificateStoreName is the certificate store name. For example:\n• None CertId is the certificate or CRL match token. This can be a:\n• Numeric cert index (0, 1, and so on)\n• Numeric CRL index (.0, .1, and so on)\n• Numeric CTL index (..0, ..1, and so on)\n• Key container name or CSP name\n\nMany of these might result in multiple matches.\n• OutputFile is the file used to save the matching certificates.\n• The option accesses a user store instead of a machine store.\n\nSpecifies that the certificate request file should be attested.\n• CertFile is the name of the certificate file to publish.\n• NTAuthCA publishes the certificate to the DS Enterprise store.\n• RootCA publishes the certificate to the DS Trusted Root store.\n• SubCA publishes the CA certificate to the DS CA object.\n• CrossCA publishes the cross-certificate to the DS CA object.\n• KRA publishes the certificate to the DS Key Recovery Agent object.\n• User publishes the certificate to the User DS object.\n• Machine publishes the certificate to the Machine DS object.\n• CRLfile is the name of the CRL file to publish.\n• DSCDPContainer is the DS CDP container CN, usually the CA machine name.\n• DSCDPCN is the DS CDP object CN based on the sanitized CA short name and key index.\n• Use to create a new DS object.\n\nSets the certificate templates that the Certificate Authority can issue.\n• The sign adds certificate templates to the CA's available template list.\n• The sign removes certificate templates from the CA's available template list.\n• SiteName is allowed only when targeting a single Certificate Authority.\n• The option targets a single Certificate Authority (default is all CAs).\n• The option can be used to override validation errors for the specified SiteName or to delete all CA site names.\n\nDisplays, adds, or deletes enrollment server URLs associated with a CA.\n• AuthenticationType specifies one of the following client authentication methods while adding a URL:\n• delete deletes the specified URL associated with the CA.\n• Priority defaults to if not specified when adding a URL.\n• Modifiers is a comma-separated list, which includes one or more of the following:\n• AllowRenewalsOnly only renewal requests can be submitted to this CA via this URL.\n• AllowKeyBasedRenewal allows use of a certificate that has no associated account in the AD. This applies only with ClientCertificate and AllowRenewalsOnly mode.\n• URL is the target URL. You can also use to match all entries or to match a URL prefix.\n• add adds a credential store entry. Using this option also requires the use of SSL credentials.\n• CRL runs on all cached CRL URLs only.\n• TaskName is the task to trigger.\n• AIKEnroll is the NGC AIK certificate enrollment task. (Defaults to the autoenrollment event).\n• SRKThumbprint is the thumbprint of the Storage Root Key\n\nDisplays information about the domain controller. The default displays DC certificates without verification.\n• CRYPT_DELETEKEYSET deletes all keys on the smart card.\n• KeyContainerName is the key container name for the key to verify. This option defaults to machine keys. To switch to user keys, use .\n• Using the sign refers to using the default key container.\n\nDeletes the Windows Hello container, removing all associated credentials that are stored on the device, including any WebAuthn and FIDO credentials.\n\nUsers need to sign out after using this option for it to complete.\n• KeyContainerName is the key container name for the key to verify. This option defaults to machine keys. To switch to user keys, use .\n• If no arguments are specified, each signing CA certificate is verified against its private key.\n• This operation can only be performed against a local CA or local keys.\n• CertFile is the name of the certificate to verify.\n• ApplicationPolicyList is the optional comma-separated list of required Application Policy ObjectIds.\n• IssuancePolicyList is the optional comma-separated list of required Issuance Policy ObjectIds.\n• CACertFile is the optional issuing CA certificate to verify against.\n• CrossedCACertFile is the optional certificate cross-certified by CertFile.\n• CRLFile is the CRL file used to verify the CACertFile.\n• IssuedCertFile is the optional issued certificate covered by the CRLfile.\n• Using ApplicationPolicyList restricts chain building to only chains valid for the specified Application Policies.\n• Using IssuancePolicyList restricts chain building to only chains valid for the specified Issuance Policies.\n• Using CACertFile verifies the fields in the file against CertFile or CRLfile.\n• If CACertFile isn't specified, the full chain is built and verified against CertFile.\n• If CACertFile and CrossedCACertFile are both specified, the fields in both files are verified against CertFile.\n• Using IssuedCertFile verifies the fields in the file against CRLfile.\n• Using DeltaCRLFile verifies the fields in the file against CertFile.\n• \n• AuthRootWU reads the AuthRoot CAB and matching certificates from the URL cache. Use to download from Windows Update instead.\n• DisallowedWU reads the Disallowed Certificates CAB and disallowed certificate store file from the URL cache. Use to download from Windows Update instead.\n• PinRulesWU reads the PinRules CAB from the URL cache. Use to download from Windows Update instead.\n• AuthRoot reads the registry-cached AuthRoot CTL. Use with and an untrusted CertFile to force the registry cached AuthRoot and Disallowed Certificate CTLs to update.\n• Disallowed reads the registry-cached Disallowed Certificates CTL. Use with and an untrusted CertFile to force the registry cached AuthRoot and Disallowed Certificate CTLs to update.\n• PinRules reads the registry cached PinRules CTL. Using has the same behavior as with PinRulesWU.\n• CTLFileName specifies the file or http path to the CTL or CAB file.\n• None CertDir specifies the folder containing certificates matching the CTL entries. Defaults to the same folder or website as the CTLobject. Using an http folder path requires a path separator at the end. If you don't specify AuthRoot or Disallowed, multiple locations are searched for matching certificates, including local certificate stores, crypt32.dll resources and the local URL cache. Use to download from Windows Update, as needed.\n• None CertFile specifies the certificate(s) to verify. Certificates are matched against CTL entries, displaying the results. This option suppresses most of the default output.\n• DestinationDir is the specified directory.\n\nThe following files are downloaded by using the automatic update mechanism:\n• authrootstl.cab contains the CTLs of non-Microsoft root certificates.\n• disallowedcertstl.cab contains the CTLs of untrusted certificates.\n• disallowedcert.sst contains the serialized certificate store, including the untrusted certificates.\n• None If you use a nonexistent local path or folder as the destination folder, you see the error: The system can't find the file specified. 0x80070002 (WIN32: 2 ERROR_FILE_NOT_FOUND)\n• None If you use a nonexistent or unavailable network location as the destination folder, you see the error: The network name can't be found. 0x80070043 (WIN32: 67 ERROR_BAD_NET_NAME)\n• None If your server can't connect over TCP port 80 to Microsoft Automatic Update servers, you receive the following error: A connection with the server couldn't be established 0x80072efd (INet: 12029 ERROR_INTERNET_CANNOT_CONNECT)\n• None If your server is unable to reach the Microsoft Automatic Update servers with the DNS name , you receive the following error: The server name or address couldn't be resolved 0x80072ee7 (INet: 12007 ERROR_INTERNET_NAME_NOT_RESOLVED).\n• None If you don't use the switch, and any of the CTL files already exist in the directory, you receive a file exists error: certutil: -syncWithWU command FAILED: 0x800700b7 (WIN32/HTTP: 183 ERROR_ALREADY_EXISTS) Certutil: Can't create a file when that file already exists.\n• None If there's a change in the trusted root certificates, you see: Warning! Encountered the following no longer trusted roots: <folder path>\\<thumbprint>.crt. Use \"-f\" option to force the delete of the above \".crt\" files. Was \"authrootstl.cab\" updated? If yes, consider deferring the delete until all clients have been updated.\n\nGenerates a store file that is synced with Windows Update.\n• SSTFile is the file to be generated that contains the Third Party Roots downloaded from Windows Update.\n\nGenerates a Certificate Trust List (CTL) file that contains a list of pinning rules.\n• XMLFile is the input XML file to be parsed.\n• CTLFile is the output CTL file to be generated.\n• SSTFile is the optional file to be created that contains all of the certificates used for pinning.\n• QueryFilesPrefix are optional Domains.csv and Keys.csv files to be created for database query.\n• The QueryFilesPrefix string is prepended to each created file.\n• The Domains.csv file contains rule name, domain rows.\n• The Keys.csv file contains rule name, key SHA256 thumbprint rows.\n\nDownloads the OCSP responses and writes to the directory.\n• CertificateDir is the directory of a certificate, store and PFX files.\n• OcspDir is the directory to write OCSP responses.\n• ThreadCount is the optional maximum number of threads for concurrent downloading. Default is 10.\n• Modifiers are comma separated list of one or more of the following:\n• ReadOcsp - Reads from OcspDir instead of writing.\n\nGenerates the HPKP header using certificates in a specified file or directory.\n• CertFileOrDir is the file or directory of certificates, which is the source of pin-sha256.\n• MaxAge is the max-age value in seconds.\n• Modifiers are comma separated list of one or more of the following:\n\nFlushes the specified caches in selected process, such as, lsass.exe.\n• None ProcessId is the numeric ID of a process to flush. Set to 0 to flush all processes where flush is enabled.\n• None CacheMask is the bit mask of caches to be flushed either numeric or the following bits:\n• None Modifiers are comma separated list of one or more of the following:\n• Show - Shows the caches being flushed. Certutil must be explicitly terminated.\n• None CurveName is the ECC Curve name.\n• None CurveParameters are one of the following:\n• None CurveOID is the ECC Curve OID and is one of the following:\n• CurveName is the ECC Curve name.\n• CurveName is the ECC Curve name.\n\nLists the cryptographic service providers (CSPs) installed on this machine for cryptographic operations.\n\nTests the CSPs installed on this machine.\n• None InFileList is the comma-separated list of certificate or CRL files to modify and re-sign.\n• None SerialNumber is the serial number of the certificate to create. The validity period and other options can't be present.\n• None CRL creates an empty CRL. The validity period and other options can't be present.\n• None OutFileList is the comma-separated list of modified certificate or CRL output files. The number of files must match infilelist.\n• None StartDate+dd:hh is the new validity period for the certificate or CRL files, including:\n• optional days and hours validity period If multiple fields are used, use a (+) or (-) separator. Use to start at the current time. Use to start at a fixed offset from the current time and a fixed validity period. Use to have no expiration date (for CRLs only).\n• None SerialNumberList is the comma-separated serial number list of the files to add or remove.\n• None ObjectIdList is the comma-separated extension ObjectId list of the files to remove.\n• None @ExtensionFile is the INF file that contains the extensions to update or remove. For example:\n• None HashAlgorithm is the name of the hash algorithm. This must only be the text preceded by the sign.\n• Using the minus sign (-) removes serial numbers and extensions.\n• Using the plus sign (+) adds serial numbers to a CRL.\n• You can use a list to remove both serial numbers and ObjectIds from a CRL at the same time.\n• Using the minus sign before AlternateSignatureAlgorithm allows you to use the legacy signature format.\n• Using the plus sign allows you to use the alternate signature format.\n• If you don't specify AlternateSignatureAlgorithm, the signature format in the certificate or CRL is used.\n\nCreates or deletes web virtual roots for an OCSP web proxy.\n\nAdds an Enrollment Server application and application pool if necessary for the specified Certificate Authority. This command doesn't install binaries or packages.\n• None addEnrollmentServer requires you to use an authentication method for the client connection to the Certificate Enrollment Server, including:\n• \n• AllowRenewalsOnly allows only renewal request submissions to the Certificate Authority through the URL.\n• AllowKeyBasedRenewal allows use of a certificate with no associated account in Active Directory. This applies when used with ClientCertificate and AllowRenewalsOnly mode.\n\nDeletes an Enrollment Server application and application pool if necessary for the specified Certificate Authority. This command doesn't install binaries or packages.\n• deleteEnrollmentServer requires you to use an authentication method for the client connection to the Certificate Enrollment Server, including:\n\nAdd a Policy Server application and application pool, if necessary. This command doesn't install binaries or packages.\n• addPolicyServer requires you to use an authentication method for the client connection to the Certificate Policy Server, including:\n• KeyBasedRenewal allows use of policies returned to the client containing keybasedrenewal templates. This option applies only for UserName and ClientCertificate authentication.\n\nDeletes a Policy Server application and application pool, if necessary. This command doesn't remove binaries or packages.\n• deletePolicyServer requires you to use an authentication method for the client connection to the Certificate Policy Server, including:\n• KeyBasedRenewal allows use of a KeyBasedRenewal policy server.\n\nDisplays the object identifier or sets a display name.\n• ObjectId is the ID to be displayed or to add to the display name.\n• GroupId is the GroupID number (decimal) that ObjectIds enumerate.\n• AlgId is the hexadecimal ID that objectID looks up.\n• AlgorithmName is the algorithm name that objectID looks up.\n• DisplayName displays the name to store in DS.\n• LanguageId is the language ID value (defaults to current: 1033).\n• Type is the type of DS object to create, including:\n\nDisplays the message text associated with an error code.\n• exit uses the first exit module's registry key.\n• template uses the template registry key (use for user templates).\n• enroll uses the enrollment registry key (use for user context).\n• ProgId uses the policy or exit module's ProgID (registry subkey name).\n• RegistryValueName uses the registry value name (use to prefix match).\n• value uses the new numeric, string, or date registry value or filename. If a numeric value starts with or , the bits specified in the new value are set or cleared in the existing registry value.\n• If a string value starts with or , and the existing value is a value, the string is added to or removed from the existing registry value. To force creation of a value, add to the end of the string value.\n• If the value starts with , the rest of the value is the name of the file containing the hexadecimal text representation of a binary value.\n• If it doesn't refer to a valid file, it's instead parsed as which is an optional date plus or minus optional days and hours.\n• If both are specified, use a plus sign (+) or minus sign (-) separator. Use for a date relative to the current time.\n• Use as a suffix to create a REG_QWORD value.\n• exit uses the first exit module's registry key.\n• template uses the template registry key (use for user templates).\n• enroll uses the enrollment registry key (use for user context).\n• ProgId uses the policy or exit module's ProgID (registry subkey name).\n• RegistryValueName uses the registry value name (use to prefix match).\n• Value uses the new numeric, string, or date registry value or filename. If a numeric value starts with or , the bits specified in the new value are set or cleared in the existing registry value.\n• If a string value starts with or , and the existing value is a value, the string is added to or removed from the existing registry value. To force creation of a value, add to the end of the string value.\n• If the value starts with , the rest of the value is the name of the file containing the hexadecimal text representation of a binary value.\n• If it doesn't refer to a valid file, it's instead parsed as which is an optional date plus or minus optional days and hours.\n• If both are specified, use a plus sign (+) or minus sign (-) separator. Use for a date relative to the current time.\n• Use as a suffix to create a REG_QWORD value.\n• exit uses the first exit module's registry key.\n• template uses the template registry key (use for user templates).\n• enroll uses the enrollment registry key (use for user context).\n• ProgId uses the policy or exit module's ProgID (registry subkey name).\n• RegistryValueName uses the registry value name (use to prefix match).\n• Value uses the new numeric, string or date registry value or filename. If a numeric value starts with or , the bits specified in the new value are set or cleared in the existing registry value.\n• If a string value starts with or , and the existing value is a value, the string is added to or removed from the existing registry value. To force creation of a value, add to the end of the string value.\n• If the value starts with , the rest of the value is the name of the file containing the hexadecimal text representation of a binary value.\n• If it doesn't refer to a valid file, it's instead parsed as which is an optional date plus or minus optional days and hours.\n• If both are specified, use a plus sign (+) or minus sign (-) separator. Use for a date relative to the current time.\n• Use as a suffix to create a REG_QWORD value.\n\nImports user keys and certificates into the server database for key archival.\n• UserKeyAndCertFile is a data file with user private keys and certificates that are to be archived. This file can be:\n• CertId is a KMS export file decryption certificate match token. For more information, see the parameter in this article.\n• imports certificates not issued by the Certificate Authority.\n• ExistingRow imports the certificate in place of a pending request for the same key.\n• imports certificates not issued by the Certificate Authority.\n\nThe Certificate Authority may also need to be configured to support foreign certificates by running .\n• script generates a script to retrieve and recover keys (default behavior if multiple matching recovery candidates are found, or if the output file isn't specified).\n• retrieve retrieves one or more Key Recovery Blobs (default behavior if exactly one matching recovery candidate is found, and if the output file is specified). Using this option truncates any extension and appends the certificate-specific string and the extension for each key recovery blob. Each file contains a certificate chain and an associated private key, still encrypted to one or more Key Recovery Agent certificates.\n• recover retrieves and recovers private keys in one step (requires Key Recovery Agent certificates and private keys). Using this option truncates any extension and appends the extension. Each file contains the recovered certificate chains and associated private keys, stored as a PFX file.\n• SearchToken selects the keys and certificates to be recovered, including:\n• RecoveryBlobOutFile outputs a file with a certificate chain and an associated private key, still encrypted to one or more Key Recovery Agent certificates.\n• OutputScriptFile outputs a file with a batch script to retrieve and recover private keys.\n• For retrieve, any extension is truncated and a certificate-specific string and the extensions are appended for each key recovery blob. Each file contains a certificate chain and an associated private key, still encrypted to one or more Key Recovery Agent certificates.\n• For recover, any extension is truncated and the extension is appended. Contains the recovered certificate chains and associated private keys, stored as a PFX file.\n• PFXOutFile is the name of the PFX output file.\n• Modifiers are comma separated lists of one or more of the following:\n• NoEncryptCert specifies to not encrypt the certificates.\n• The password specified on the command line must be a comma-separated password list.\n• If more than one password is specified, the last password is used for the output file. If only one password is provided or if the last password is , the user is prompted for the output file password.\n\nGets proof of a hash from a timestamp server.\n\nRetrieves the root certificates from the certificate store.\n\nRetrieves an event log entry and its cryptographic proof.\n• -<name_of_parameter> -? displays help content for the specified parameter.\n\nThis section defines all of the options you're able to specify, based on the command. Each parameter includes information about which options are valid for use.\n\nFor more examples of how to use this command, see the following articles:"
    },
    {
        "link": "https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc732443(v=ws.11)",
        "document": "Certutil.exe is a command-line program that is installed as part of Certificate Services. You can use Certutil.exe to dump and display certification authority (CA) configuration information, configure Certificate Services, backup and restore CA components, and verify certificates, key pairs, and certificate chains.\n\nWhen certutil is run on a certification authority without additional parameters, it displays the current certification authority configuration. When cerutil is run on a non-certification authority, the command defaults to running the certutil -dump verb.\n\nThe major sections in this document are:\n\nThe following table describes the verbs that can be used with the certutil command.\n• None For the syntax on using certutil with a specific verb, run certutil <verb> -?\n• None To send all of the certutil syntax into a text file, run the following commands:\n\nThe following table describes the notation used to indicate command-line syntax.\n\nAttributeString -- Request Attribute name and value pairs\n• None Multiple name, value pairs are newline separated.\n• None Each \"\n\n\" sequence is converted to a newline separator.\n\nFlags -- 0 is recommended. 1 makes the extension critical, 2 disables it, 3 does both.\n\nIf the last parameter is numeric, it is taken as a Long.\n\nIf it can be parsed as a date, it is taken as a Date.\n\nIf it starts with '@', the rest of the token is the filename containing binary data or an ascii-text hex dump.\n\nAnything else is taken as a String.\n• None Displays the site cost for each CA machine\n\nInfoName -- indicates the CA property to display (see below). Use \"*\" for all properties.\n\nIndex: CRL index or key index (defaults to CRL for newest key)\n\nPublish new CRLs [or delta CRLs only]\n\ndd:hh -- new CRL validity period in days and hours\n\ndelta -- delta CRLs only (default is base and delta CRLs)\n\nUse -f to ignore an outstanding renewal request, and generate a new request.\n\nTo display the StatusCode column for all entries: -out StatusCode\n\nTo display all columns for the last entry: -restrict \"RequestId==$\"\n\nTo display RequestId and Disposition for three requests: -restrict \"RequestId>=37,RequestId<40\" -out \"RequestId,Disposition\"\n\nTo display Row Ids and CRL Numbers for all Base CRLs: -restrict \"CRLMinBase=0\" -out \"CRLRowId,CRLNumber\" CRL\n\nUse \"now+dd:hh\" for a date relative to the current time\n\nTo delete failed and pending requests submitted by January 22, 2001: 1/22/2001 Request\n\nTo delete all certificates that expired by January 22, 2001: 1/22/2001 Cert\n\nTo delete the certificate row, attributes and extensions for RequestId 37: 37\n\nTo delete CRLs that expired by January 22, 2001: 1/22/2001 CRL\n\nBackupDirectory: directory containing data to be restored\n\nBackupDirectory: directory containing database files to be restored\n\nBackupDirectory: directory containing PFX file to be restored\n\nModifiers: Comma separated list of one or more of the following:\n• None NoCert: Do not import the certificate\n• None NoChain: Do not import the certificate chain\n• None NoRoot: Do not import the root certificate\n\nCertId: Certificate or CRL match token. This can be a serial number, an SHA-1 certificate, CRL, CTL or public key hash, a numeric cert index (0, 1, and so on), a numeric CRL index (.0, .1, and so on), a numeric CTL index (..0, ..1, and so on), a public key, signature or extension ObjectId, a certificate subject Common Name, an e-mail address, UPN or DNS name, a key container name or CSP name, a template name or ObjectId, an EKU or Application Policies ObjectId, or a CRL issuer Common Name. Many of these may result in multiple matches.\n\nUse -user to access a user store instead of a machine store.\n\nInFile: Certificate or CRL file to add to store.\n\nCertIdList: comma separated list of Certificate or CRL match tokens. See -store CertId description.\n\nCertId: Certificate or CRL match token. This can be a serial number, an SHA-1 certificate, CRL, CTL or public key hash, a numeric cert index (0, 1, and so on), a numeric CRL index (.0, .1, and so on), a numeric CTL index (..0, ..1, and so on), a public key, signature or extension ObjectId, a certificate subject Common Name, an e-mail address, UPN or DNS name, a key container name or CSP name, a template name or ObjectId, an EKU or Application Policies ObjectId, or a CRL issuer Common Name. Many of these may result in multiple matches.\n\nUse -user to access a user store instead of a machine store.\n\nCertId: Certificate or CRL match token. This can be a serial number, an SHA-1 certificate, CRL, CTL or public key hash, a numeric cert index (0, 1, and so on), a numeric CRL index (.0, .1, and so on), a numeric CTL index (..0, ..1, and so on), a public key, signature or extension ObjectId, a certificate subject Common Name, an e-mail address, UPN or DNS name, a key container name or CSP name, a template name or ObjectId, an EKU or Application Policies ObjectId, or a CRL issuer Common Name. Many of these may result in multiple matches.\n\nUse -user to access a user store instead of a machine store.\n\nDSCDPContainer: DS CDP container CN, usually the CA machine name\n\nDSCDPCN: DS CDP object CN, usually based on the sanitized CA short name and key index\n• None Use the -config option to target a single CA (Default is all CAs)\n• None SiteName is allowed only when targeting a single CA\n• None Use -f to override validation errors for the specified SiteName\n• None Use -f to delete all CA site names\n\nDisplay, add or delete enrollment server URLs associated with a CA\n\nAuthenticationType: Specify one of the following client authentication methods while adding a URL\n\ndelete: deletes the specified URL associated with the CA\n\nPriority: defaults to '1' if not specified when adding a URL\n\nModifiers -- Comma separated list of one or more of the following:\n• None AllowRenewalsOnly: Only renewal requests can be submitted to this CA via this URL\n• None AllowKeyBasedRenewal: Allows use of a certificate that has no associated account in the AD. This applies only with ClientCertificate and AllowRenewalsOnly Mode\n\n-f: use -f to delete all cache entries\n\nURL: target URL. Use * to match all entries. Use https://machine* to match a URL prefix.\n\nadd: add a Credential Store entry. SSL credentials must also be specified.\n\n-f: use -f to overwrite an entry or to delete multiple entries.\n\nCRL: operate on all cached CRL URLs only\n\nUse -f to force fetching a specific URL and updating the cache.\n\nDefault is to display DC certs without verification\n\nFor example, assume there is a domain named CPANDL with a domain controller named CPANDL-DC1. You could run the following command to a retrieve a list of domain controllers and their certificates that from CPANDL-DC1: certutil -dc cpandl-dc1 -dcinfo cpandl\n\nCRYPT_DELETEKEYSET: Delete all keys on the smart card\n\nKeyContainerName: key container name of the key to verify. Defaults to machine keys. Use -user for user keys.\n\nIf no arguments are specified, each signing CA cert is verified against its private key.\n\nThis operation can only be performed against a local CA or local keys.\n\nIf ApplicationPolicyList is specified, chain building is restricted to chains valid for the specified Application Policies.\n\nIf IssuancePolicyList is specified, chain building is restricted to chains valid for the specified Issuance Policies.\n\nIf CACertFile is specified, fields in CACertFile are verified against CertFile or CRLFile.\n\nIf CACertFile is not specified, CertFile is used to build and verify a full chain.\n\nIf CACertFile and CrossedCACertFile are both specified, fields in CACertFile and CrossedCACertFile are verified against CertFile.\n\nIf IssuedCertFile is specified, fields in IssuedCertFile are verified against CRLFile.\n\nIf DeltaCRLFile is specified, fields in DeltaCRLFile are verified against CRLFile.\n• None AuthRootWU: read AuthRoot CAB and matching certificates from the URL cache. Use -f to download from Windows Update instead.\n• None DisallowedWU: read Disallowed Certificates CAB and disallowed certificate store file from the URL cache. Use -f to download from Windows Update instead.\n• None AuthRoot: read registry cached AuthRoot CTL. Use with -f and a CertFile that is not already trusted to force updating the registry cached AuthRoot and Disallowed Certificate CTLs.\n• None Disallowed: read registry cached Disallowed Certificates CTL. -f has the same behavior as with AuthRoot.\n• None CTLFileName: file or http: path to CTL or CAB\n\nCertDir: folder containing certificates matching CTL entries. An http: folder path must end with a path separator. If a folder is not specified with AuthRoot or Disallowed, multiple locations will be searched for matching certificates: local certificate stores, crypt32.dll resources and the local URL cache. Use -f to download from Windows Update when necessary. Otherwise defaults to the same folder or web site as the CTLObject.\n\nCertFile: file containing certificate(s) to verify. Certificates will be matched against CTL entries, and match results displayed. Suppresses most of the default output.\n\nInFileList: comma separated list of Certificate or CRL files to modify and re-sign\n\nSerialNumber: Serial number of certificate to create. Validity period and other options must not be present.\n\nCRL: Create an empty CRL. Validity period and other options must not be present.\n\nOutFileList: comma separated list of modified Certificate or CRL output files. The number of files must match InFileList.\n\nStartDate+dd:hh: new validity period: optional date plus; optional days and hours validity period; If both are specified, use a plus sign (+) separator. Use \"now[+dd:hh]\" to start at the current time. Use \"never\" to have no expiration date (for CRLs only).\n\n@ExtensionFile: INF file containing extensions to update or remove:\n\nHashAlgorithm: Name of the hash algorithm preceded by a # sign\n\nA minus sign causes serial numbers and extensions to be removed. A plus sign causes serial numbers to be added to a CRL. When removing items from a CRL, the list may contain both serial numbers and ObjectIds. A minus sign before AlternateSignatureAlgorithm causes the legacy signature format to be used. A plus sign before AlternateSignatureAlgorithm causes the alternature signature format to be used. If AlternateSignatureAlgorithm is not specified then the signature format in the certificate or CRL is used.\n\nAdd an Enrollment Server application and application pool if necessary, for the specified CA. This command does not install binaries or packages. One of the following authentication methods with which the client connects to a Certificate Enrollment Server.\n• None AllowRenewalsOnly: Only renewal requests can be submitted to this CA via this URL\n• None AllowKeyBasedRenewal -- Allows use of a certificate that has no associated account in the AD. This applies only with ClientCertificate and AllowRenewalsOnly mode.\n\nDelete an Enrollment Server application and application pool if necessary, for the specified CA. This command does not remove binaries or packages. One of the following authentication methods with which the client connects to a Certificate Enrollment Server.\n\nAdd a Policy Server application and application pool if necessary. This command does not install binaries or packages. One of the following authentication methods with which the client connects to a Certificate Policy Server:\n• None KeyBasedRenewal: Only policies that contain KeyBasedRenewal templates are returned to the client. This flag applies only for UserName and ClientCertificate authentication.\n\nDelete a Policy Server application and application pool if necessary. This command does not remove binaries or packages. One of the following authentication methods with which the client connects to a Certificate Policy Server:\n• None ObjectId -- ObjectId to display or to add display name\n• None AlgId -- hexadecimal AlgId for ObjectId to look up\n• None AlgorithmName -- Algorithm Name for ObjectId to look up\n• None DisplayName -- Display Name to store in DS\n• None Type -- DS object type to create: 1 for Template (default), 2 for Issuance Policy, 3 for Application Policy\n\ntemplate: Use template registry key (use -user for user templates)\n\nenroll: Use enrollment registry key (use -user for user context)\n\nProgId: Use policy or exit module's ProgId (registry subkey name)\n\nRegistryValueName: registry value name (use \"Name*\" to prefix match)\n\nValue: new numeric, string or date registry value or filename. If a numeric value starts with \"+\" or \"-\", the bits specified in the new value are set or cleared in the existing registry value.\n\nIf a string value starts with \"+\" or \"-\", and the existing value is a REG_MULTI_SZ value, the string is added to or removed from the existing registry value. To force creation of a REG_MULTI_SZ value, add a \"\n\n\" to the end of the string value.\n\nIf the value starts with \"@\", the rest of the value is the name of the file containing the hexadecimal text representation of a binary value. If it does not refer to a valid file, it is instead parsed as [Date][+|-][dd:hh] -- an optional date plus or minus optional days and hours. If both are specified, use a plus sign (+) or minus sign (-) separator. Use \"now+dd:hh\" for a date relative to the current time.\n\nUse \"chain\\ChainCacheResyncFiletime @now\" to effectively flush cached CRLs.\n\ntemplate: Use template registry key (use -user for user templates)\n\nenroll: Use enrollment registry key (use -user for user context)\n\nProgId: Use policy or exit module's ProgId (registry subkey name)\n\nRegistryValueName: registry value name (use \"Name*\" to prefix match)\n\nValue: new numeric, string or date registry value or filename. If a numeric value starts with \"+\" or \"-\", the bits specified in the new value are set or cleared in the existing registry value.\n\nIf a string value starts with \"+\" or \"-\", and the existing value is a REG_MULTI_SZ value, the string is added to or removed from the existing registry value. To force creation of a REG_MULTI_SZ value, add a \"\n\n\" to the end of the string value.\n\nIf the value starts with \"@\", the rest of the value is the name of the file containing the hexadecimal text representation of a binary value. If it does not refer to a valid file, it is instead parsed as [Date][+|-][dd:hh] -- an optional date plus or minus optional days and hours. If both are specified, use a plus sign (+) or minus sign (-) separator. Use \"now+dd:hh\" for a date relative to the current time.\n\nUse \"chain\\ChainCacheResyncFiletime @now\" to effectively flush cached CRLs.\n\ntemplate: Use template registry key (use -user for user templates)\n\nenroll: Use enrollment registry key (use -user for user context)\n\nProgId: Use policy or exit module's ProgId (registry subkey name)\n\nRegistryValueName: registry value name (use \"Name*\" to prefix match)\n\nValue: new numeric, string or date registry value or filename. If a numeric value starts with \"+\" or \"-\", the bits specified in the new value are set or cleared in the existing registry value.\n\nIf a string value starts with \"+\" or \"-\", and the existing value is a REG_MULTI_SZ value, the string is added to or removed from the existing registry value. To force creation of a REG_MULTI_SZ value, add a \"\n\n\" to the end of the string value.\n\nIf the value starts with \"@\", the rest of the value is the name of the file containing the hexadecimal text representation of a binary value. If it does not refer to a valid file, it is instead parsed as [Date][+|-][dd:hh] -- an optional date plus or minus optional days and hours. If both are specified, use a plus sign (+) or minus sign (-) separator. Use \"now+dd:hh\" for a date relative to the current time.\n\nUse \"chain\\ChainCacheResyncFiletime @now\" to effectively flush cached CRLs.\n\nImport user keys and certificates into server database for key archival\n\nUserKeyAndCertFile -- Data file containing user private keys and certificates to be archived. This can be any of the following:\n\nUse -f to import certificates not issued by the CA.\n\nUse ExistingRow to import the certificate in place of a pending request for the same key.\n\nUse -f to import certificates not issued by the CA.\n\nThe CA may also need to be configured to support foreign certificate import: certutil -setreg ca\\KRAFlags +KRAF_ENABLEFOREIGN\n\nscript: generate a script to retrieve and recover keys (default behavior if multiple matching recovery candidates are found, or if the output file is not specified).\n\nretrieve: retrieve one or more Key Recovery Blobs (default behavior if exactly one matching recovery candidate is found, and if the output file is specified)\n\nrecover: retrieve and recover private keys in one step (requires Key Recovery Agent certificates and private keys)\n\nSearchToken: Used to select the keys and certificates to be recovered.\n\nCan be any of the following:\n\nRecoveryBlobOutFile: output file containing a certificate chain and an associated private key, still encrypted to one or more Key Recovery Agent certificates.\n\nOutputScriptFile: output file containing a batch script to retrieve and recover private keys.\n\nOutputFileBaseName: output file base name. For retrieve, any extension is truncated and a certificate-specific string and the .rec extension are appended for each key recovery blob. Each file contains a certificate chain and an associated private key, still encrypted to one or more Key Recovery Agent certificates. For recover, any extension is truncated and the .p12 extension is appended. Contains the recovered certificate chains and associated private keys, stored as a PFX file.\n\nThe password specified on the command line is a comma separated password list. If more than one password is specified, the last password is used for the output file. If only one password is provided or if the last password is \"*\", the user will be prompted for the output file password.\n\nThe password specified on the command line is a comma separated password list. If more than one password is specified, the last password is used for the output file. If only one password is provided or if the last password is \"*\", the user will be prompted for the output file password.\n\nThis section defines the options that you can specify with the command.\n\nFor some examples of how to use this command, see\n• None Certutil Examples for Managing Active Directory Certificate Services (AD CS) from the Command Line"
    },
    {
        "link": "https://github.com/MicrosoftDocs/windowsserverdocs/blob/main/WindowsServerDocs/administration/windows-commands/certutil.md",
        "document": "Certutil.exe is a command-line program installed as part of Certificate Services. You can use certutil.exe to display certification authority (CA) configuration information, configure Certificate Services, and back up and restore CA components. The program also verifies certificates, key pairs, and certificate chains.\n\nIf is run on a certification authority without other parameters, it displays the current certification authority configuration. If is run on a non-certification authority without other parameters, the command defaults to running the command. Not all versions of certutil provide all of the parameters and options that this document describes. You can see the choices that your version of certutil provides by running or .\n\nParses and displays the contents of a file using Abstract Syntax Notation (ASN.1) syntax. File types include .CER, .DER and PKCS #7 formatted files.\n• RequestId is the numeric Request ID for the pending request.\n• AttributeString is the request attribute name and value pairs.\n• Names and values must be colon separated, while multiple names and value pairs must be newline separated. For example: where the sequence is converted to a newline separator.\n• requestID is the numeric Request ID for the pending request.\n• ExtensionName is the ObjectId string for the extension.\n• Flags sets the priority of the extension. is recommended, while sets the extension to critical, disables the extension, and does both.\n• If the last parameter is numeric, it's taken as a Long.\n• If the last parameter can be parsed as a date, it's taken as a Date.\n• If the last parameter starts with , the rest of the token is taken as the filename with binary data or an ascii-text hex dump.\n• If the last parameter is anything else, it's taken as a String.\n• SerialNumber is a comma-separated list of certificate serial numbers to revoke.\n• Reason is the numeric or symbolic representation of the revocation reason, including:\n\nDisplays the disposition of the current certificate.\n\nGets the default configuration string via ICertGetConfig.\n• CAMachineList is a comma-separated list of CA machine names. For a single machine, use a terminating comma. This option also displays the site cost for each CA machine.\n• InfoName indicates the CA property to display, based on the following infoname argument syntax:\n\nRetrieves the certificate for the certification authority.\n• Index is the CA certificate renewal index (defaults to most recent).\n\nRetrieves the certificate chain for the certification authority.\n• Index is the CA certificate renewal index (defaults to most recent).\n• Index is the CRL index or key index (defaults to CRL for most recent key).\n• delta is the delta CRL (default is base CRL).\n• dd:hh is the new CRL validity period in days and hours.\n• delta publishes the delta CRLs only (default is base and delta CRLs).\n• Use to ignore an outstanding renewal request, and to generate a new request.\n\nDumps the schema for the certificate.\n• The command defaults to the Request and Certificate table.\n• Log dumps the issued or revoked certificates, plus any failed requests.\n• csv provides the output using comma-separated values.\n• To display the StatusCode column for all entries, type\n• To display all columns for the last entry, type:\n• To display the RequestId and Disposition for three requests, type:\n• To display Row IDs Row IDs and CRL numbers for all Base CRLs, type:\n• Use for a date relative to the current time.\n• Templates contain Extended Key Usages (EKUs), which are object identifiers (OIDs) that describe how the certificate is used. Certificates don't always include template common names or display names, but they always contain the template EKUs. You can extract the EKUs for a specific certificate template from Active Directory and then restrict views based on that extension.\n• Request deletes the failed and pending requests, based on submission date.\n• Cert deletes the expired and revoked certificates, based on expiration date.\n• To delete failed and pending requests submitted by January 22, 2001, type:\n• To delete all certificates that expired by January 22, 2001, type:\n• To delete the certificate row, attributes, and extensions for RequestID 37, type:\n• To delete CRLs that expired by January 22, 2001, type:\n• BackupDirectory is the directory to store the backed up data.\n• Incremental performs an incremental backup only (default is full backup).\n• KeepLog preserves the database log files (default is to truncate log files).\n• BackupDirectory is the directory to store the backed up database files.\n• Incremental performs an incremental backup only (default is full backup).\n• KeepLog preserves the database log files (default is to truncate log files).\n\nBacks up the Active Directory Certificate Services certificate and private key.\n• BackupDirectory is the directory to store the backed up PFX file.\n• BackupDirectory is the directory containing the data to be restored.\n• BackupDirectory is the directory containing the database files to be restored.\n• BackupDirectory is the directory containing PFX file to be restored.\n• PFXFile is the PFX file to be restored.\n\nExports the certificates and private keys. For more information, see the parameter in this article.\n• CertificateStoreName is the name of the certificate store.\n• CertId is the certificate or CRL match token.\n• PFXFile is the PFX file to be exported.\n• Modifiers are the comma-separated list, which can include one or more of the following:\n• CryptoAlgorithm= specifies the cryptographic algorithm to use for encrypting the PFX file, such as or .\n• EncryptCert - Encrypts the private key associated with the certificate with a password.\n• ExportParameters -Exports the private key parameters in addition to the certificate and private key.\n• ExtendedProperties - Includes all extended properties associated with the certificate in the output file.\n• NoEncryptCert - Exports the private key without encrypting it.\n\nImports the certificates and private keys. For more information, see the parameter in this article.\n• CertificateStoreName is the name of the certificate store.\n• PFXFile is the PFX file to be imported.\n• Modifiers are the comma-separated list, which can include one or more of the following:\n• AT_KEYEXCHANGE - Changes the keyspec to key exchange.\n• AT_SIGNATURE - Changes the keyspec to signature.\n• ExportEncrypted - Exports the private key associated with the certificate with password encryption.\n• FriendlyName= - Specifies a friendly name for the imported certificate.\n• KeyDescription= - Specifies a description for the private key associated with the imported certificate.\n• KeyFriendlyName= - Specifies a friendly name for the private key associated with the imported certificate.\n• Pkcs8 - Uses PKCS8 format for the private key in the PFX file.\n• ProtectHigh - Specifies that a high-security password must be associated with the private key.\n• VSM - Stores the private key associated with the imported certificate in the Virtual Smart Card (VSC) container.\n• CertificateStoreName is the certificate store name. For example:\n• CertId is the certificate or CRL match token. This ID can be a:\n• Numeric cert index (0, 1, and so on)\n• Numeric CRL index (.0, .1, and so on)\n• Numeric CTL index (..0, ..1, and so on)\n• Key container name or CSP name\n\nMany of these identifiers might result in multiple matches.\n• OutputFile is the file used to save the matching certificates.\n• The option accesses a user store instead of a machine store.\n• MachineName is the remote machine name.\n\nAdds a certificate to the store. For more information, see the parameter in this article.\n• CertificateStoreName is the certificate store name.\n• InFile is the certificate or CRL file you want to add to the store.\n\nDeletes a certificate from the store. For more information, see the parameter in this article.\n• CertificateStoreName is the certificate store name.\n• CertId is the certificate or CRL match token.\n\nVerifies a certificate in the store. For more information, see the parameter in this article.\n• CertificateStoreName is the certificate store name.\n• CertId is the certificate or CRL match token.\n\nRepairs a key association or update certificate properties or the key security descriptor. For more information, see the parameter in this article.\n• CertificateStoreName is the certificate store name.\n• CertIdList is the comma-separated list of certificate or CRL match tokens. For more information, see the CertId description in this article.\n• PropertyInfFile is the INF file containing external properties, including: [Properties] = Empty ; Add archived property, OR: = ; Remove archived property = {text}Friendly Name ; Add friendly name property = {hex} ; Add custom hexadecimal property _continue_ = 0a 0b 0c 0d 0e 0f _continue_ = 1a 1b 1c 1d 1e 1f = {text} ; Add Key Provider Information property _continue_ = Container=Container Name _continue_ = Provider=Microsoft Strong Cryptographic Provider _continue_ = ProviderType=1 _continue_ = Flags=0 _continue_ = KeySpec= = {text} ; Add Enhanced Key Usage property _continue_ = 1.3.6.1.5.5.7.3.2, _continue_ = 1.3.6.1.5.5.7.3.1,\n\nDumps the certificates store. For more information, see the parameter in this article.\n• CertificateStoreName is the certificate store name. For example:\n• CertId is the certificate or CRL match token. This can be a:\n• Numeric cert index (0, 1, and so on)\n• Numeric CRL index (.0, .1, and so on)\n• Numeric CTL index (..0, ..1, and so on)\n• Key container name or CSP name\n\nMany of these may result in multiple matches.\n• OutputFile is the file used to save the matching certificates.\n• The option accesses a user store instead of a machine store.\n• CertificateStoreName is the certificate store name. For example:\n• CertId is the certificate or CRL match token. This can be a:\n• Numeric cert index (0, 1, and so on)\n• Numeric CRL index (.0, .1, and so on)\n• Numeric CTL index (..0, ..1, and so on)\n• Key container name or CSP name\n\nMany of these might result in multiple matches.\n• OutputFile is the file used to save the matching certificates.\n• The option accesses a user store instead of a machine store.\n\nSpecifies that the certificate request file should be attested.\n• CertFile is the name of the certificate file to publish.\n• NTAuthCA publishes the certificate to the DS Enterprise store.\n• RootCA publishes the certificate to the DS Trusted Root store.\n• SubCA publishes the CA certificate to the DS CA object.\n• CrossCA publishes the cross-certificate to the DS CA object.\n• KRA publishes the certificate to the DS Key Recovery Agent object.\n• User publishes the certificate to the User DS object.\n• Machine publishes the certificate to the Machine DS object.\n• CRLfile is the name of the CRL file to publish.\n• DSCDPContainer is the DS CDP container CN, usually the CA machine name.\n• DSCDPCN is the DS CDP object CN based on the sanitized CA short name and key index.\n• Use to create a new DS object.\n\nSets the certificate templates that the Certificate Authority can issue.\n• The sign adds certificate templates to the CA's available template list.\n• The sign removes certificate templates from the CA's available template list.\n• SiteName is allowed only when targeting a single Certificate Authority.\n• The option targets a single Certificate Authority (default is all CAs).\n• The option can be used to override validation errors for the specified SiteName or to delete all CA site names.\n\nDisplays, adds, or deletes enrollment server URLs associated with a CA.\n• AuthenticationType specifies one of the following client authentication methods while adding a URL:\n• delete deletes the specified URL associated with the CA.\n• Priority defaults to if not specified when adding a URL.\n• Modifiers is a comma-separated list, which includes one or more of the following:\n• AllowRenewalsOnly only renewal requests can be submitted to this CA via this URL.\n• AllowKeyBasedRenewal allows use of a certificate that has no associated account in the AD. This applies only with ClientCertificate and AllowRenewalsOnly mode.\n• URL is the target URL. You can also use to match all entries or to match a URL prefix.\n• add adds a credential store entry. Using this option also requires the use of SSL credentials.\n• CRL runs on all cached CRL URLs only.\n• TaskName is the task to trigger.\n• AIKEnroll is the NGC AIK certificate enrollment task. (Defaults to the autoenrollment event).\n• SRKThumbprint is the thumbprint of the Storage Root Key\n\nDisplays information about the domain controller. The default displays DC certificates without verification.\n• CRYPT_DELETEKEYSET deletes all keys on the smart card.\n• KeyContainerName is the key container name for the key to verify. This option defaults to machine keys. To switch to user keys, use .\n• Using the sign refers to using the default key container.\n\nDeletes the Windows Hello container, removing all associated credentials that are stored on the device, including any WebAuthn and FIDO credentials.\n\nUsers need to sign out after using this option for it to complete.\n• KeyContainerName is the key container name for the key to verify. This option defaults to machine keys. To switch to user keys, use .\n• If no arguments are specified, each signing CA certificate is verified against its private key.\n• This operation can only be performed against a local CA or local keys.\n• CertFile is the name of the certificate to verify.\n• ApplicationPolicyList is the optional comma-separated list of required Application Policy ObjectIds.\n• IssuancePolicyList is the optional comma-separated list of required Issuance Policy ObjectIds.\n• CACertFile is the optional issuing CA certificate to verify against.\n• CrossedCACertFile is the optional certificate cross-certified by CertFile.\n• CRLFile is the CRL file used to verify the CACertFile.\n• IssuedCertFile is the optional issued certificate covered by the CRLfile.\n• Using ApplicationPolicyList restricts chain building to only chains valid for the specified Application Policies.\n• Using IssuancePolicyList restricts chain building to only chains valid for the specified Issuance Policies.\n• Using CACertFile verifies the fields in the file against CertFile or CRLfile.\n• If CACertFile isn't specified, the full chain is built and verified against CertFile.\n• If CACertFile and CrossedCACertFile are both specified, the fields in both files are verified against CertFile.\n• Using IssuedCertFile verifies the fields in the file against CRLfile.\n• Using DeltaCRLFile verifies the fields in the file against CertFile.\n• \n• AuthRootWU reads the AuthRoot CAB and matching certificates from the URL cache. Use to download from Windows Update instead.\n• DisallowedWU reads the Disallowed Certificates CAB and disallowed certificate store file from the URL cache. Use to download from Windows Update instead.\n• PinRulesWU reads the PinRules CAB from the URL cache. Use to download from Windows Update instead.\n• AuthRoot reads the registry-cached AuthRoot CTL. Use with and an untrusted CertFile to force the registry cached AuthRoot and Disallowed Certificate CTLs to update.\n• Disallowed reads the registry-cached Disallowed Certificates CTL. Use with and an untrusted CertFile to force the registry cached AuthRoot and Disallowed Certificate CTLs to update.\n• PinRules reads the registry cached PinRules CTL. Using has the same behavior as with PinRulesWU.\n• CTLFileName specifies the file or http path to the CTL or CAB file.\n• CertDir specifies the folder containing certificates matching the CTL entries. Defaults to the same folder or website as the CTLobject. Using an http folder path requires a path separator at the end. If you don't specify AuthRoot or Disallowed, multiple locations are searched for matching certificates, including local certificate stores, crypt32.dll resources and the local URL cache. Use to download from Windows Update, as needed.\n• CertFile specifies the certificate(s) to verify. Certificates are matched against CTL entries, displaying the results. This option suppresses most of the default output.\n• DestinationDir is the specified directory.\n\nThe following files are downloaded by using the automatic update mechanism:\n• authrootstl.cab contains the CTLs of non-Microsoft root certificates.\n• disallowedcertstl.cab contains the CTLs of untrusted certificates.\n• disallowedcert.sst contains the serialized certificate store, including the untrusted certificates.\n• If you use a nonexistent local path or folder as the destination folder, you see the error: The system can't find the file specified. 0x80070002 (WIN32: 2 ERROR_FILE_NOT_FOUND)\n• If you use a nonexistent or unavailable network location as the destination folder, you see the error: The network name can't be found. 0x80070043 (WIN32: 67 ERROR_BAD_NET_NAME)\n• If your server can't connect over TCP port 80 to Microsoft Automatic Update servers, you receive the following error: A connection with the server couldn't be established 0x80072efd (INet: 12029 ERROR_INTERNET_CANNOT_CONNECT)\n• If your server is unable to reach the Microsoft Automatic Update servers with the DNS name , you receive the following error: The server name or address couldn't be resolved 0x80072ee7 (INet: 12007 ERROR_INTERNET_NAME_NOT_RESOLVED).\n• If you don't use the switch, and any of the CTL files already exist in the directory, you receive a file exists error: certutil: -syncWithWU command FAILED: 0x800700b7 (WIN32/HTTP: 183 ERROR_ALREADY_EXISTS) Certutil: Can't create a file when that file already exists.\n• If there's a change in the trusted root certificates, you see: Warning! Encountered the following no longer trusted roots: <folder path>\\<thumbprint>.crt. Use \"-f\" option to force the delete of the above \".crt\" files. Was \"authrootstl.cab\" updated? If yes, consider deferring the delete until all clients have been updated.\n\nGenerates a store file that is synced with Windows Update.\n• SSTFile is the file to be generated that contains the Third Party Roots downloaded from Windows Update.\n\nGenerates a Certificate Trust List (CTL) file that contains a list of pinning rules.\n• XMLFile is the input XML file to be parsed.\n• CTLFile is the output CTL file to be generated.\n• SSTFile is the optional file to be created that contains all of the certificates used for pinning.\n• QueryFilesPrefix are optional Domains.csv and Keys.csv files to be created for database query.\n• The QueryFilesPrefix string is prepended to each created file.\n• The Domains.csv file contains rule name, domain rows.\n• The Keys.csv file contains rule name, key SHA256 thumbprint rows.\n\nDownloads the OCSP responses and writes to the directory.\n• CertificateDir is the directory of a certificate, store and PFX files.\n• OcspDir is the directory to write OCSP responses.\n• ThreadCount is the optional maximum number of threads for concurrent downloading. Default is 10.\n• Modifiers are comma separated list of one or more of the following:\n• ReadOcsp - Reads from OcspDir instead of writing.\n\nGenerates the HPKP header using certificates in a specified file or directory.\n• CertFileOrDir is the file or directory of certificates, which is the source of pin-sha256.\n• MaxAge is the max-age value in seconds.\n• Modifiers are comma separated list of one or more of the following:\n\nFlushes the specified caches in selected process, such as, lsass.exe.\n• ProcessId is the numeric ID of a process to flush. Set to 0 to flush all processes where flush is enabled.\n• CacheMask is the bit mask of caches to be flushed either numeric or the following bits:\n• Modifiers are comma separated list of one or more of the following:\n• Show - Shows the caches being flushed. Certutil must be explicitly terminated.\n• CurveName is the ECC Curve name.\n• CurveParameters are one of the following:\n• CurveOID is the ECC Curve OID and is one of the following:\n• CurveName is the ECC Curve name.\n• CurveName is the ECC Curve name.\n\nLists the cryptographic service providers (CSPs) installed on this machine for cryptographic operations.\n\nTests the CSPs installed on this machine.\n• InFileList is the comma-separated list of certificate or CRL files to modify and re-sign.\n• SerialNumber is the serial number of the certificate to create. The validity period and other options can't be present.\n• CRL creates an empty CRL. The validity period and other options can't be present.\n• OutFileList is the comma-separated list of modified certificate or CRL output files. The number of files must match infilelist.\n• StartDate+dd:hh is the new validity period for the certificate or CRL files, including:\n• optional days and hours validity period If multiple fields are used, use a (+) or (-) separator. Use to start at the current time. Use to start at a fixed offset from the current time and a fixed validity period. Use to have no expiration date (for CRLs only).\n• SerialNumberList is the comma-separated serial number list of the files to add or remove.\n• ObjectIdList is the comma-separated extension ObjectId list of the files to remove.\n• @ExtensionFile is the INF file that contains the extensions to update or remove. For example:\n• HashAlgorithm is the name of the hash algorithm. This must only be the text preceded by the sign.\n• Using the minus sign (-) removes serial numbers and extensions.\n• Using the plus sign (+) adds serial numbers to a CRL.\n• You can use a list to remove both serial numbers and ObjectIds from a CRL at the same time.\n• Using the minus sign before AlternateSignatureAlgorithm allows you to use the legacy signature format.\n• Using the plus sign allows you to use the alternate signature format.\n• If you don't specify AlternateSignatureAlgorithm, the signature format in the certificate or CRL is used.\n\nCreates or deletes web virtual roots for an OCSP web proxy.\n\nAdds an Enrollment Server application and application pool if necessary for the specified Certificate Authority. This command doesn't install binaries or packages.\n• addEnrollmentServer requires you to use an authentication method for the client connection to the Certificate Enrollment Server, including:\n• \n• AllowRenewalsOnly allows only renewal request submissions to the Certificate Authority through the URL.\n• AllowKeyBasedRenewal allows use of a certificate with no associated account in Active Directory. This applies when used with ClientCertificate and AllowRenewalsOnly mode.\n\nDeletes an Enrollment Server application and application pool if necessary for the specified Certificate Authority. This command doesn't install binaries or packages.\n• deleteEnrollmentServer requires you to use an authentication method for the client connection to the Certificate Enrollment Server, including:\n\nAdd a Policy Server application and application pool, if necessary. This command doesn't install binaries or packages.\n• addPolicyServer requires you to use an authentication method for the client connection to the Certificate Policy Server, including:\n• KeyBasedRenewal allows use of policies returned to the client containing keybasedrenewal templates. This option applies only for UserName and ClientCertificate authentication.\n\nDeletes a Policy Server application and application pool, if necessary. This command doesn't remove binaries or packages.\n• deletePolicyServer requires you to use an authentication method for the client connection to the Certificate Policy Server, including:\n• KeyBasedRenewal allows use of a KeyBasedRenewal policy server.\n\nDisplays the object identifier or sets a display name.\n• ObjectId is the ID to be displayed or to add to the display name.\n• GroupId is the GroupID number (decimal) that ObjectIds enumerate.\n• AlgId is the hexadecimal ID that objectID looks up.\n• AlgorithmName is the algorithm name that objectID looks up.\n• DisplayName displays the name to store in DS.\n• LanguageId is the language ID value (defaults to current: 1033).\n• Type is the type of DS object to create, including:\n\nDisplays the message text associated with an error code.\n• exit uses the first exit module's registry key.\n• template uses the template registry key (use for user templates).\n• enroll uses the enrollment registry key (use for user context).\n• ProgId uses the policy or exit module's ProgID (registry subkey name).\n• RegistryValueName uses the registry value name (use to prefix match).\n• value uses the new numeric, string, or date registry value or filename. If a numeric value starts with or , the bits specified in the new value are set or cleared in the existing registry value.\n• If a string value starts with or , and the existing value is a value, the string is added to or removed from the existing registry value. To force creation of a value, add to the end of the string value.\n• If the value starts with , the rest of the value is the name of the file containing the hexadecimal text representation of a binary value.\n• If it doesn't refer to a valid file, it's instead parsed as which is an optional date plus or minus optional days and hours.\n• If both are specified, use a plus sign (+) or minus sign (-) separator. Use for a date relative to the current time.\n• Use as a suffix to create a REG_QWORD value.\n• exit uses the first exit module's registry key.\n• template uses the template registry key (use for user templates).\n• enroll uses the enrollment registry key (use for user context).\n• ProgId uses the policy or exit module's ProgID (registry subkey name).\n• RegistryValueName uses the registry value name (use to prefix match).\n• Value uses the new numeric, string, or date registry value or filename. If a numeric value starts with or , the bits specified in the new value are set or cleared in the existing registry value.\n• If a string value starts with or , and the existing value is a value, the string is added to or removed from the existing registry value. To force creation of a value, add to the end of the string value.\n• If the value starts with , the rest of the value is the name of the file containing the hexadecimal text representation of a binary value.\n• If it doesn't refer to a valid file, it's instead parsed as which is an optional date plus or minus optional days and hours.\n• If both are specified, use a plus sign (+) or minus sign (-) separator. Use for a date relative to the current time.\n• Use as a suffix to create a REG_QWORD value.\n• exit uses the first exit module's registry key.\n• template uses the template registry key (use for user templates).\n• enroll uses the enrollment registry key (use for user context).\n• ProgId uses the policy or exit module's ProgID (registry subkey name).\n• RegistryValueName uses the registry value name (use to prefix match).\n• Value uses the new numeric, string or date registry value or filename. If a numeric value starts with or , the bits specified in the new value are set or cleared in the existing registry value.\n• If a string value starts with or , and the existing value is a value, the string is added to or removed from the existing registry value. To force creation of a value, add to the end of the string value.\n• If the value starts with , the rest of the value is the name of the file containing the hexadecimal text representation of a binary value.\n• If it doesn't refer to a valid file, it's instead parsed as which is an optional date plus or minus optional days and hours.\n• If both are specified, use a plus sign (+) or minus sign (-) separator. Use for a date relative to the current time.\n• Use as a suffix to create a REG_QWORD value.\n\nImports user keys and certificates into the server database for key archival.\n• UserKeyAndCertFile is a data file with user private keys and certificates that are to be archived. This file can be:\n• CertId is a KMS export file decryption certificate match token. For more information, see the parameter in this article.\n• imports certificates not issued by the Certificate Authority.\n• ExistingRow imports the certificate in place of a pending request for the same key.\n• imports certificates not issued by the Certificate Authority.\n\nThe Certificate Authority may also need to be configured to support foreign certificates by running .\n• script generates a script to retrieve and recover keys (default behavior if multiple matching recovery candidates are found, or if the output file isn't specified).\n• retrieve retrieves one or more Key Recovery Blobs (default behavior if exactly one matching recovery candidate is found, and if the output file is specified). Using this option truncates any extension and appends the certificate-specific string and the extension for each key recovery blob. Each file contains a certificate chain and an associated private key, still encrypted to one or more Key Recovery Agent certificates.\n• recover retrieves and recovers private keys in one step (requires Key Recovery Agent certificates and private keys). Using this option truncates any extension and appends the extension. Each file contains the recovered certificate chains and associated private keys, stored as a PFX file.\n• SearchToken selects the keys and certificates to be recovered, including:\n• RecoveryBlobOutFile outputs a file with a certificate chain and an associated private key, still encrypted to one or more Key Recovery Agent certificates.\n• OutputScriptFile outputs a file with a batch script to retrieve and recover private keys.\n• For retrieve, any extension is truncated and a certificate-specific string and the extensions are appended for each key recovery blob. Each file contains a certificate chain and an associated private key, still encrypted to one or more Key Recovery Agent certificates.\n• For recover, any extension is truncated and the extension is appended. Contains the recovered certificate chains and associated private keys, stored as a PFX file.\n• PFXOutFile is the name of the PFX output file.\n• Modifiers are comma separated lists of one or more of the following:\n• NoEncryptCert specifies to not encrypt the certificates.\n• The password specified on the command line must be a comma-separated password list.\n• If more than one password is specified, the last password is used for the output file. If only one password is provided or if the last password is , the user is prompted for the output file password.\n\nGets proof of a hash from a timestamp server.\n\nRetrieves the root certificates from the certificate store.\n\nRetrieves an event log entry and its cryptographic proof.\n• -<name_of_parameter> -? displays help content for the specified parameter.\n\nThis section defines all of the options you're able to specify, based on the command. Each parameter includes information about which options are valid for use.\n\nFor more examples of how to use this command, see the following articles:"
    },
    {
        "link": "https://sentinelone.com/blog/malware-living-off-land-with-certutil",
        "document": ""
    },
    {
        "link": "https://encryptionconsulting.com/exploring-the-hidden-switches-of-certutil-and-certreq",
        "document": "Enhance the security of your HSMs backed by the right expertise"
    },
    {
        "link": "https://stackoverflow.com/questions/15414678/how-to-decode-a-base64-string",
        "document": "I have a normal string in Powershell that is from a text file containing Base64 text; it is stored in . I am trying to decode it as such:\n\nThis works if was a Base64 string created in Powershell (but it's not). And this does not work on the Base64 string that came from a file, simply ends up as something like .\n\nWhat am I missing? For example, could be which is Base64 for .\n\nIn a nutshell, is in a text file then put into a string in this Powershell code and I try to decode it but end up with etc."
    },
    {
        "link": "https://goayxh.medium.com/powershell-script-decode-base64-string-6ac8b3622582",
        "document": "Since computer talks using binary (numbers), the American Standard Code for Information Interchange (ASCII) decided to map a number to every letter, creating a standard that all computers can follow.\n\nThe Base64 algorithm dissects the original data in text format and encodes them in uppercase (A-Z) English letters, lowercase (a-z) English letters, 0–10 digits, “+” and “/” characters.\n\nAt the end of a base64 ended, you might see one or more “=” characters for padding purpose.\n\n$: echo \"Hooked on phonics worked for me\" | base64\n\n[System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes(\"Hooked on phonics worked for me\"))\n\n[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('SG9va2VkIG9uIHBob25pY3Mgd29ya2VkIGZvciBtZQo='))//we can swap out ASCII for UTF-8 if we prefer\n\nHere, you can see that this is a base64 encoded string compressed using GZip. Now, then we can use base64 and gunzip function in CyberChef to decode the string."
    },
    {
        "link": "https://stackoverflow.com/questions/53269099/powershell-base64-encoding-required",
        "document": "I want to execute base64 encoded commands in powershell. For example, I took a command from this github repo: https://gist.github.com/gfoss/ca6aa37f97fd400ff14f. Running the mimikatz one:\n\nIf I run it straight in a powershell prompt, it works correctly. Checking the base64 encoded version, I see that it also works correctly:\n\nHowever, Im not sure how that string was encoded. If I try to encode it in Linux, I get a different string (I just changed the quotes to prevent bash interpretating the $):\n\nThis encoding fails when I try to run it with powershell -enc.\n\nWhat encoding should I use to make the string completely compatible with powershell?"
    },
    {
        "link": "https://scriptwizards.net/base64-decoding-with-powershell",
        "document": "Base64 encoding is a common technique used to represent binary data in an ASCII string format. It’s often used for encoding data in various contexts, including email via MIME, storing complex data in XML or JSON, and encoding credentials in web development. Decoding base64 data is equally important to retrieve the original information. This guide will teach you the process of decoding a base64 string using PowerShell.\n\nBase64 encoding converts binary data into an ASCII string using a set of 64 different characters (A-Z, a-z, 0-9, +, /). This makes it suitable for transferring data over media that are designed to deal with text. However, to use the data in its original form, we need to decode it back from the base64 format.\n\nPowerShell provides a straightforward way to decode base64 strings using the method.\n\nSuppose you have a base64-encoded string and you want to decode it to reveal the original text. Let’s assume the base64 string is , which decodes to .\n\nHere’s the PowerShell script to decode this base64 string:\n\nDefining the Base64-Encoded String: The variable holds the base64-encoded string you want to decode.\n\nConverting Base64 String to Byte Array: The method converts the base64-encoded string into a byte array. This method takes the base64 string as input and returns an array of bytes.\n\nConverting Byte Array to Original String: The method converts the byte array back into the original string. This method takes a byte array as input and returns the corresponding string.\n\nOutputting the Decoded String: prints the decoded string to the console.\n\nDecoding base64 strings in PowerShell is a simple process that leverages the .NET framework’s built-in methods for converting base64-encoded data back into its original form. This can be particularly useful for handling encoded data in various applications, such as securely transmitting information or encoding configuration files."
    },
    {
        "link": "https://sans.org/blog/month-of-powershell-profile-hack-base64-encoding-decoding",
        "document": "As PowerShell power user James Honeycutt points out, PowerShell supports Base64 encoding and decoding of data:\n\nHere it is in text form:\n• : Reference the class by putting it inside square brackets; call the static method (static methods can be called using ; they are accessible without having to create a new instance of an object from a class, like ). Essentially, this take an array of byte values and converts it into a Unicode string object.\n• : Reference the class and call the static method.\n• : This variable represents the Base64 string to decode; to use this one-liner, you would have previously declared (where is the Base64 string you want to decode).\n\nIf you need to decode Base64 content often (for example, you work in threat intel, or malware analysis, or incident response), this is not terribly convenient to type. This is a good candidate to be summarized with a simple PowerShell function that you load in your default PowerShell profile.\n\nA PowerShell profile is a script that runs automatically when you launch PowerShell. It allows you to customize your environment to suit your needs, but it requires that you permit PowerShell script execution policy on your system (which is disabled by default, for silly reasons; you can change the policy to allow local script execution, but not allow scripts downloaded from the internet by running Set-ExecutionPolicy RemoteSigned -Force in an administrative PowerShell session).\n\nTo create a handy function to simply Base64 decoding, open your PowerShell profile in Notepad or your favorite editor using the $profile variable:\n\nNext, paste in the following functions to add ConvertFrom-Base64 and ConvertTo-Base64 as PowerShell commands:\n\nNext, reload your PowerShell profile using the & call operator (or, close and open a new PowerShell session):\n\nIn these simple functions, I am converting the data to ASCII strings, which is normally what I want. If you are working with data that needs another form of conversion (such as decompressing data), then I'll probably just copy-paste [System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String($EncodedText)) from my Obsidian notebook.\n\nReturn to Getting Started With PowerShell\n\np.s. My #monthofpowershell collaborator Mick Douglas is wrapping up his article on customizing your PowerShell profile in amazing ways. Stay tuned for that to publish soon!\n\nJoshua Wright is the author of SANS SEC504: Hacker Tools, Techniques, and Incident Handling, a faculty fellow for the SANS Institute, and a senior technical director at Counter Hack."
    }
]