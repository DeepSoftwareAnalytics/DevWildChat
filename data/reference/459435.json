[
    {
        "link": "https://openpyxl.readthedocs.io",
        "document": "It was born from lack of existing library to read/write natively from Python the Office Open XML format. All kudos to the PHPExcel team as openpyxl was initially based on PHPExcel.\n\nThis is an open source project, maintained by volunteers in their spare time. This may well mean that particular features or functions that you would like are missing. But things don’t have to stay that way. You can contribute the project Development yourself or contract a developer for particular features. Professional support for openpyxl is available from Clark Consulting & Research and Adimian. Donations to the project to support further development and maintenance are welcome. Bug reports and feature requests should be submitted using the issue tracker. Please provide a full traceback of any error you see and if possible a sample file. If for reasons of confidentiality you are unable to make a file publicly available then contact of one the developers. The repository is being provided by Octobus and Clever Cloud.\n\nAny help will be greatly appreciated, just follow those steps: 1. Please join the group and create a branch (https://foss.heptapod.net/openpyxl/openpyxl/) and follow the Merge Request Start Guide. for each independent feature, don’t try to fix all problems at the same time, it’s easier for those who will review and merge your changes ;-) 3. Don’t forget to add unit tests for your changes! (YES, even if it’s a one-liner, changes without tests will not be accepted.) There are plenty of examples in the source if you lack know-how or inspiration. 4. If you added a whole new feature, or just improved something, you can be proud of it, so add yourself to the AUTHORS file :-) 5. Let people know about the shiny thing you just implemented, update the docs! 6. When it’s done, just issue a pull request (click on the large “pull request” button on your repository) and wait for your code to be reviewed, and, if you followed all theses steps, merged into the main repository. For further information see Development There are several ways to contribute, even if you can’t code (or can’t code well):\n• None triaging bugs on the bug tracker: closing bugs that have already been closed, are not relevant, cannot be reproduced, …\n• None updating documentation in virtually every area: many large features have been added (mainly about charts and images at the moment) but without any documentation, it’s pretty hard to do anything with it\n• None proposing compatibility fixes for different versions of Python: we support 3.6, 3.7, 3.8 and 3.9."
    },
    {
        "link": "https://geeksforgeeks.org/python-reading-excel-file-using-openpyxl-module",
        "document": "Openpyxl is a Python library for reading and writing Excel (with extension xlsx/xlsm/xltx/xltm) files. The Openpyxl Module allows Python programs to read and modify Excel files. For example, users might have to go through thousands of rows and pick out a few handfuls of information to make small changes based on some criteria. Using Openpyxl module, these tasks can be done very efficiently and easily.\n\nUse this command to install openpyxl module\n\nProgram to Print the Particular Cell Value"
    },
    {
        "link": "https://openpyxl.readthedocs.io/en/3.1.3/tutorial.html",
        "document": "Install openpyxl using pip. It is advisable to do this in a Python virtualenv without system packages: There is support for the popular lxml library which will be used if it is installed. This is particular useful when creating large files. To be able to include images (jpeg, png, bmp,…) into an openpyxl file, you will also need the “pillow” library that can be installed with: or browse https://pypi.python.org/pypi/Pillow/, pick the latest version and head to the bottom of the page for Windows binaries. Sometimes you might want to work with the checkout of a particular version. This may be the case if bugs have been fixed but a release has not yet been made.\n\nThere is no need to create a file on the filesystem to get started with openpyxl. Just import the class and start work: A workbook is always created with at least one worksheet. You can get it by using the property: This is set to 0 by default. Unless you modify its value, you will always get the first worksheet by using this method. You can create new worksheets using the method: Sheets are given a name automatically when they are created. They are numbered in sequence (Sheet, Sheet1, Sheet2, …). You can change this name at any time with the property: Once you gave a worksheet a name, you can get it as a key of the workbook: You can review the names of all worksheets of the workbook with the attribute You can loop through worksheets You can create copies of worksheets within a single workbook: Only cells (including values, styles, hyperlinks and comments) and certain worksheet attributes (including dimensions, format and properties) are copied. All other workbook / worksheet attributes are not copied - e.g. Images, Charts. You also cannot copy worksheets between workbooks. You cannot copy a worksheet if the workbook is open in or mode.\n\nNow we know how to get a worksheet, we can start modifying cells content. Cells can be accessed directly as keys of the worksheet: This will return the cell at A4, or create one if it does not exist yet. Values can be directly assigned: There is also the method. This provides access to cells using row and column notation: When a worksheet is created in memory, it contains no . They are created when first accessed. Because of this feature, scrolling through cells instead of accessing them directly will create them all in memory, even if you don’t assign them a value. will create 100x100 cells in memory, for nothing. Ranges of cells can be accessed using slicing: Ranges of rows or columns can be obtained similarly: You can also use the method: For performance reasons the method is not available in read-only mode. If you need to iterate through all the rows or columns of a file, you can instead use the property: For performance reasons the property is not available in read-only mode. If you just want the values from a worksheet you can use the property. This iterates over all the rows in a worksheet but returns just the cell values: Both and can take the parameter to return just the cell’s value:\n\nOnce we have a , we can assign it a value: The simplest and safest way to save a workbook is by using the method of the object: This operation will overwrite existing files without warning. The filename extension is not forced to be xlsx or xlsm, although you might have some trouble opening it directly with another application if you don’t use an official extension. As OOXML files are basically ZIP files, you can also open it with your favourite ZIP archive manager. If required, you can specify the attribute , to save a workbook as a template: If you want to save the file to a stream, e.g. when using a web application such as Pyramid, Flask or Django then you can simply provide a : You should monitor the data attributes and document extensions for saving documents in the document templates and vice versa, otherwise the result table engine can not open the document. # Need to save with the extension *.xlsx # MS Excel will not open the document # If we need a template document, then we must specify extension as *.xltm. # MS Excel will not open the document"
    },
    {
        "link": "https://realpython.com/openpyxl-excel-spreadsheets-python",
        "document": "Excel spreadsheets are one of those things you might have to deal with at some point. Either it’s because your boss loves them or because marketing needs them, you might have to learn how to work with spreadsheets, and that’s when knowing comes in handy!\n\nSpreadsheets are a very intuitive and user-friendly way to manipulate large datasets without any prior technical background. That’s why they’re still so commonly used today.\n\nIn this article, you’ll learn how to use openpyxl to:\n• Create simple or more complex spreadsheets, including adding styles, charts, and so on\n\nThis article is written for intermediate developers who have a pretty good knowledge of Python data structures, such as dicts and lists, but also feel comfortable around OOP and more intermediate level topics.\n\nIf you ever get asked to extract some data from a database or log file into an Excel spreadsheet, or if you often have to convert an Excel spreadsheet into some more usable programmatic form, then this tutorial is perfect for you. Let’s jump into the caravan! First things first, when would you need to use a package like in a real-world scenario? You’ll see a few examples below, but really, there are hundreds of possible scenarios where this knowledge could come in handy. You are responsible for tech in an online store company, and your boss doesn’t want to pay for a cool and expensive CMS system. Every time they want to add new products to the online store, they come to you with an Excel spreadsheet with a few hundred rows and, for each of them, you have the product name, description, price, and so forth. Now, to import the data, you’ll have to iterate over each spreadsheet row and add each product to the online store. Say you have a Database table where you record all your users’ information, including name, phone number, email address, and so forth. Now, the Marketing team wants to contact all users to give them some discounted offer or promotion. However, they don’t have access to the Database, or they don’t know how to use SQL to extract that information easily. What can you do to help? Well, you can make a quick script using that iterates over every single User record and puts all the essential information into an Excel spreadsheet. That’s gonna earn you an extra slice of cake at your company’s next birthday party! You may also have to open a spreadsheet, read the information in it and, according to some business logic, append more data to it. For example, using the online store scenario again, say you get an Excel spreadsheet with a list of users and you need to append to each row the total amount they’ve spent in your store. This data is in the Database and, in order to do this, you have to read the spreadsheet, iterate through each row, fetch the total amount spent from the Database and then write back to the spreadsheet. Here’s a quick list of basic terms you’ll see when you’re working with Excel spreadsheets: A Spreadsheet is the main file you are creating or working with. A Sheet is used to split different kinds of content within the same spreadsheet. A Spreadsheet can have one or more Sheets. A Column is a vertical line, and it’s represented by an uppercase letter: A. A Row is a horizontal line, and it’s represented by a number: 1. A Cell is a combination of Column and Row, represented by both an uppercase letter and a number: A1. Now that you’re aware of the benefits of a tool like , let’s get down to it and start by installing the package. For this tutorial, you should use Python 3.7 and openpyxl 2.6.2. To install the package, you can do the following: After you install the package, you should be able to create a super simple spreadsheet with the following code: The code above should create a file called in the folder you are using to run the code. If you open that file with Excel you should see something like this:\n\nLet’s start with the most essential thing one can do with a spreadsheet: read it. You’ll go from a straightforward approach to reading a spreadsheet to more complex examples where you read the data and convert it into more useful Python structures. Before you dive deep into some code examples, you should download this sample dataset and store it somewhere as : Download Dataset: Click here to download the dataset for the openpyxl exercise you’ll be following in this tutorial. This is one of the datasets you’ll be using throughout this tutorial, and it’s a spreadsheet with a sample of real data from Amazon’s online product reviews. This dataset is only a tiny fraction of what Amazon provides, but for testing purposes, it’s more than enough. Finally, let’s start reading some spreadsheets! To begin with, open our sample spreadsheet: In the code above, you first open the spreadsheet using , and then you can use to see all the sheets you have available to work with. After that, selects the first available sheet and, in this case, you can see that it selects Sheet 1 automatically. Using these methods is the default way of opening a spreadsheet, and you’ll see it many times during this tutorial. Now, after opening a spreadsheet, you can easily retrieve data from it like this: To return the actual value of a cell, you need to do . Otherwise, you’ll get the main object. You can also use the method to retrieve a cell using index notation. Remember to add to get the actual value and not a object: You can see that the results returned are the same, no matter which way you decide to go with. However, in this tutorial, you’ll be mostly using the first approach: . Note: Even though in Python you’re used to a zero-indexed notation, with spreadsheets you’ll always use a one-indexed notation where the first row or column always has index . The above shows you the quickest way to open a spreadsheet. However, you can pass additional parameters to change the way a spreadsheet is loaded. There are a few arguments you can pass to that change the way a spreadsheet is loaded. The most important ones are the following two Booleans:\n• read_only loads a spreadsheet in read-only mode allowing you to open very large Excel files.\n• data_only ignores loading formulas and instead loads only the resulting values. Now that you’ve learned the basics about loading a spreadsheet, it’s about time you get to the fun part: the iteration and actual usage of the values within the spreadsheet. This section is where you’ll learn all the different ways you can iterate through the data, but also how to convert that data into something usable and, more importantly, how to do it in a Pythonic way. There are a few different ways you can iterate through the data depending on your needs. You can slice the data with a combination of columns and rows: You can get ranges of rows or columns: # Get all cells from column A # Get all cells for a range of columns # Get all cells from row 5 # Get all cells for a range of rows You’ll notice that all of the above examples return a . If you want to refresh your memory on how to handle in Python, check out the article on Lists and Tuples in Python. There are also multiple ways of using normal Python generators to go through the data. The main methods you can use to achieve this are: Both methods can receive the following arguments: These arguments are used to set boundaries for the iteration: You’ll notice that in the first example, when iterating through the rows using , you get one element per row selected. While when using and iterating through columns, you’ll get one per column instead. One additional argument you can pass to both methods is the Boolean . When it’s set to , the values of the cell are returned, instead of the object: If you want to iterate through the whole dataset, then you can also use the attributes or directly, which are shortcuts to using and without any arguments: These shortcuts are very useful when you’re iterating through the whole dataset. Now that you know the basics of iterating through the data in a workbook, let’s look at smart ways of converting that data into Python structures. As you saw earlier, the result from all iterations comes in the form of . However, since a is nothing more than a that’s immutable, you can easily access its data and transform it into other structures. For example, say you want to extract product information from the spreadsheet and into a dictionary where each key is a product ID. A straightforward way to do this is to iterate over all the rows, pick the columns you know are related to product information, and then store that in a dictionary. Let’s code this out! First of all, have a look at the headers and see what information you care most about: This code returns a list of all the column names you have in the spreadsheet. To start, grab the columns with names: Lucky for you, the columns you need are all next to each other so you can use the and to easily get the data you want: Nice! Now that you know how to get all the important product information you need, let’s put that data into a dictionary: # Using the values_only because you want to return the cells' values # Using json here to be able to format the output for displaying later The code above returns a JSON similar to this: Here you can see that the output is trimmed to 2 products only, but if you run the script as it is, then you should get 98 products. To finalize the reading section of this tutorial, let’s dive into Python classes and see how you could improve on the example above and better structure the data. For this, you’ll be using the new Python Data Classes that are available from Python 3.7. If you’re using an older version of Python, then you can use the default Classes instead. So, first things first, let’s look at the data you have and decide what you want to store and how you want to store it. As you saw right at the start, this data comes from Amazon, and it’s a list of product reviews. You can check the list of all the columns and their meaning on Amazon. There are two significant elements you can extract from the data available: The Review has a few more fields: You can ignore a few of the review fields to make things a bit simpler. So, a straightforward implementation of these two classes could be written in a separate file : After defining your data classes, you need to convert the data from the spreadsheet into these new structures. Before doing the conversion, it’s worth looking at our header again and creating a mapping between columns and the fields you need: Let’s create a file where you have a list of all the field names and their column location (zero-indexed) on the spreadsheet: You don’t necessarily have to do the mapping above. It’s more for readability when parsing the row data, so you don’t end up with a lot of magic numbers lying around. Finally, let’s look at the code needed to parse the spreadsheet data into a list of product and review objects: \\ \\ # Using the read_only method since you're not gonna be editing the spreadsheet # Using the values_only because you just want to return the cell value # You need to parse the date from the spreadsheet into a datetime format After you run the code above, you should get some output like this: That’s it! Now you should have the data in a very simple and digestible class format, and you can start thinking of storing this in a Database or any other type of data storage you like. Using this kind of OOP strategy to parse spreadsheets makes handling the data much simpler later on. Before you start creating very complex spreadsheets, have a quick look at an example of how to append data to an existing spreadsheet. Go back to the first example spreadsheet you created ( ) and try opening it and appending some data to it, like this: # Start by opening the spreadsheet and selecting the main sheet # Write what you want into a specific cell Et voilà, if you open the new spreadsheet, you’ll see the following change:\n\nThere are a lot of different things you can write to a spreadsheet, from simple text or number values to complex formulas, charts, or even images. Previously, you saw a very quick example of how to write “Hello world!” into a spreadsheet, so you can start with that: The highlighted lines in the code above are the most important ones for writing. In the code, you can see that:\n• Line 5 shows you how to create a new empty workbook.\n• Lines 8 and 9 show you how to add data to specific cells.\n• Line 11 shows you how to save the spreadsheet when you’re done. Even though these lines above can be straightforward, it’s still good to know them well for when things get a bit more complicated. Note: You’ll be using the spreadsheet for some of the upcoming examples, so keep it handy. One thing you can do to help with coming code examples is add the following method to your Python file or console: It makes it easier to print all of your spreadsheet values by just calling . Before you get into the more advanced topics, it’s good for you to know how to manage the most simple elements of a spreadsheet. You already learned how to add values to a spreadsheet like this: There’s another way you can do this, by first selecting a cell and then changing its value: The new value is only stored into the spreadsheet once you call . The creates a cell when adding a value, if that cell didn’t exist before: # Before, our spreadsheet has only 1 row # Try adding a value to row 10 As you can see, when trying to add a value to cell , you end up with a tuple with 10 rows, just so you can have that test value. One of the most common things you have to do when manipulating spreadsheets is adding or removing rows and columns. The package allows you to do that in a very straightforward way by using the methods: Every single one of those methods can receive two arguments: Using our basic example again, let’s see how these methods work: # Insert 5 columns between column 2 (\"B\") and 3 (\"C\") # Insert a new row in the beginning # Insert 3 new rows in the beginning The only thing you need to remember is that when inserting new data (rows or columns), the insertion happens before the parameter. So, if you do , it inserts a new row before the existing first row. It’s the same for columns: when you call , it inserts a new column right before the already existing second column ( ). However, when deleting rows or columns, deletes data starting from the index passed as an argument. For example, when doing it deletes row , and when doing it deletes the third column ( ). Sheet management is also one of those things you might need to know, even though it might be something that you don’t use that often. If you look back at the code examples from this tutorial, you’ll notice the following recurring piece of code: This is the way to select the default sheet from a spreadsheet. However, if you’re opening a spreadsheet with multiple sheets, then you can always select a specific one like this: # Let's say you have two sheets: \"Products\" and \"Company Sales\" # You can select a sheet using its title You can also change a sheet title very easily: If you want to create or delete sheets, then you can also do that with and : # You can also define the position to create the sheet at # To remove them, just pass the sheet as an argument to the .remove() One other thing you can do is make duplicates of a sheet using : If you open your spreadsheet after saving the above code, you’ll notice that the sheet Products Copy is a duplicate of the sheet Products. Something that you might want to do when working with big spreadsheets is to freeze a few rows or columns, so they remain visible when you scroll right or down. Freezing data allows you to keep an eye on important rows or columns, regardless of where you scroll in the spreadsheet. Again, also has a way to accomplish this by using the worksheet attribute. For this example, go back to our spreadsheet and try doing the following: If you open the spreadsheet in your favorite spreadsheet editor, you’ll notice that row and columns and are frozen and are always visible no matter where you navigate within the spreadsheet. This feature is handy, for example, to keep headers within sight, so you always know what each column represents. Here’s how it looks in the editor: Notice how you’re at the end of the spreadsheet, and yet, you can see both row and columns and . You can use to add filters and sorts to your spreadsheet. However, when you open the spreadsheet, the data won’t be rearranged according to these sorts and filters. At first, this might seem like a pretty useless feature, but when you’re programmatically creating a spreadsheet that is going to be sent and used by somebody else, it’s still nice to at least create the filters and allow people to use it afterward. The code below is an example of how you would add some filters to our existing spreadsheet: # Check the used spreadsheet space using the attribute \"dimensions\" You should now see the filters created when opening the spreadsheet in your editor: You don’t have to use if you know precisely which part of the spreadsheet you want to apply filters to. Formulas (or formulae) are one of the most powerful features of spreadsheets. They gives you the power to apply specific mathematical equations to a range of cells. Using formulas with is as simple as editing the value of a cell. You can see the list of formulas supported by : Let’s add some formulas to our spreadsheet. Starting with something easy, let’s check the average star rating for the 99 reviews within the spreadsheet: If you open the spreadsheet now and go to cell , you should see that its value is: 4.18181818181818. Have a look in the editor: You can use the same methodology to add any formulas to your spreadsheet. For example, let’s count the number of reviews that had helpful votes: # The helpful votes are counted on column \"I\" You should get the number on your spreadsheet cell like so: You’ll have to make sure that the strings within a formula are always in double quotes, so you either have to use single quotes around the formula like in the example above or you’ll have to escape the double quotes inside the formula: . There are a ton of other formulas you can add to your spreadsheet using the same procedure you tried above. Give it a go yourself! Even though styling a spreadsheet might not be something you would do every day, it’s still good to know how to do it. Using , you can apply multiple styling options to your spreadsheet, including fonts, borders, colors, and so on. Have a look at the documentation to learn more. You can also choose to either apply a style directly to a cell or create a template and reuse it to apply styles to multiple cells. Let’s start by having a look at simple cell styling, using our again as the base spreadsheet: If you open your spreadsheet now, you should see quite a few different styles on the first 5 cells of column :\n• A2 with the text in bold\n• A3 with the text in red and bigger font size\n• A5 with a square border around the text Note: For the colors, you can also use HEX codes instead by doing . You can also combine styles by simply adding them to the cell at the same time: # Reusing the same styles from the example above Have a look at cell here: When you want to apply multiple styles to one or several cells, you can use a class instead, which is like a style template that you can use over and over again. Have a look at the example below: # Now let's apply this to all first row (header) cells If you open the spreadsheet now, you should see that its first row is bold, the text is aligned to the center, and there’s a small bottom border! Have a look below: As you saw above, there are many options when it comes to styling, and it depends on the use case, so feel free to check documentation and see what other things you can do. This feature is one of my personal favorites when it comes to adding styles to a spreadsheet. It’s a much more powerful approach to styling because it dynamically applies styles according to how the data in the spreadsheet changes. In a nutshell, conditional formatting allows you to specify a list of styles to apply to a cell (or cell range) according to specific conditions. For example, a widespread use case is to have a balance sheet where all the negative totals are in red, and the positive ones are in green. This formatting makes it much more efficient to spot good vs bad periods. Without further ado, let’s pick our favorite spreadsheet— —and add some conditional formatting. You can start by adding a simple one that adds a red background to all reviews with less than 3 stars: Now you’ll see all the reviews with a star rating below 3 marked with a red background: Code-wise, the only things that are new here are the objects and :\n• is quite similar to , which you already saw above, and it’s used to aggregate multiple styles such as fonts, borders, alignment, and so forth.\n• is responsible for selecting the cells and applying the styles if the cells match the rule’s logic. Using a object, you can create numerous conditional formatting scenarios. However, for simplicity sake, the package offers 3 built-in formats that make it easier to create a few common conditional formatting patterns. These built-ins are: The ColorScale gives you the ability to create color gradients: # Again, let's add this gradient to the star ratings, column \"H\" Now you should see a color gradient on column , from red to green, according to the star rating: You can also add a third color and make two gradients instead: # Again, let's add this gradient to the star ratings, column \"H\" This time, you’ll notice that star ratings between 1 and 3 have a gradient from red to yellow, and star ratings between 3 and 5 have a gradient from yellow to green: The IconSet allows you to add an icon to the cell according to its value: You’ll see a colored arrow next to the star rating. This arrow is red and points down when the value of the cell is 1 and, as the rating gets better, the arrow starts pointing up and becomes green: The package has a full list of other icons you can use, besides the arrow. Finally, the DataBar allows you to create progress bars: You’ll now see a green progress bar that gets fuller the closer the star rating is to the number 5: As you can see, there are a lot of cool things you can do with conditional formatting. Here, you saw only a few examples of what you can achieve with it, but check the documentation to see a bunch of other options. Even though images are not something that you’ll often see in a spreadsheet, it’s quite cool to be able to add them. Maybe you can use it for branding purposes or to make spreadsheets more personal. To be able to load images to a spreadsheet using , you’ll have to install : Apart from that, you’ll also need an image. For this example, you can grab the Real Python logo below and convert it from to using an online converter such as cloudconvert.com, save the final file as , and copy it to the root folder where you’re running your examples: Afterward, this is the code you need to import that image into the spreadsheet: # Let's use the hello_world spreadsheet since it has less data # A bit of resizing to not fill the whole spreadsheet with the logo You have an image on your spreadsheet! Here it is: The image’s left top corner is on the cell you chose, in this case, . Another powerful thing you can do with spreadsheets is create an incredible variety of charts. Charts are a great way to visualize and understand loads of data quickly. There are a lot of different chart types: bar chart, pie chart, line chart, and so on. has support for a lot of them. Here, you’ll see only a couple of examples of charts because the theory behind it is the same for every single chart type: Note: A few of the chart types that currently doesn’t have support for are Funnel, Gantt, Pareto, Treemap, Waterfall, Map, and Sunburst. For any chart you want to build, you’ll need to define the chart type: , , and so forth, plus the data to be used for the chart, which is called . Before you can build your chart, you need to define what data you want to see represented in it. Sometimes, you can use the dataset as is, but other times you need to massage the data a bit to get additional information. Let’s start by building a new workbook with some sample data: Now you’re going to start by creating a bar chart that displays the total number of sales per product: There you have it. Below, you can see a very straightforward bar chart showing the difference between online product sales online and in-store product sales: Like with images, the top left corner of the chart is on the cell you added the chart to. In your case, it was on cell . Note: Depending on whether you’re using Microsoft Excel or an open-source alternative (LibreOffice or OpenOffice), the chart might look slightly different. Try creating a line chart instead, changing the data a bit: With the above code, you’ll be able to generate some random data regarding the sales of 3 different products across a whole year. Once that’s done, you can very easily create a line chart with the following code: Here’s the outcome of the above piece of code: One thing to keep in mind here is the fact that you’re using when adding the data. This argument makes the chart plot row by row instead of column by column. In your sample data, you see that each product has a row with 12 values (1 column per month). That’s why you use . If you don’t pass that argument, by default, the chart tries to plot by column, and you’ll get a month-by-month comparison of sales. Another difference that has to do with the above argument change is the fact that our now starts from the first column, , instead of the second one. This change is needed because the chart now expects the first column to have the titles. There are a couple of other things you can also change regarding the style of the chart. For example, you can add specific categories to the chart: Add this piece of code before saving the workbook, and you should see the month names appearing instead of numbers: Code-wise, this is a minimal change. But in terms of the readability of the spreadsheet, this makes it much easier for someone to open the spreadsheet and understand the chart straight away. Another thing you can do to improve the chart readability is to add an axis. You can do it using the attributes and : This will generate a spreadsheet like the below one: As you can see, small changes like the above make reading your chart a much easier and quicker task. There is also a way to style your chart by using Excel’s default property. In this case, you have to choose a number between 1 and 48. Depending on your choice, the colors of your chart change as well: # You can play with this by choosing any number between 1 and 48 With the style selected above, all lines have some shade of orange: There is no clear documentation on what each style number looks like, but this spreadsheet has a few examples of the styles available. Here’s the full code used to generate the line chart with categories, axis titles, and style: There are a lot more chart types and customization you can apply, so be sure to check out the package documentation on this if you need some specific formatting. You already saw how to convert an Excel spreadsheet’s data into Python classes, but now let’s do the opposite. Let’s imagine you have a database and are using some Object-Relational Mapping (ORM) to map DB objects into Python classes. Now, you want to export those same objects into a spreadsheet. Let’s assume the following data classes to represent the data coming from your database regarding product sales: Now, let’s generate some random data, assuming the above classes are stored in a file: # Ignore these for now. You'll use them in a sec ;) By running this piece of code, you should get 5 products with 5 months of sales with a random quantity of sales for each month. Now, to convert this into a spreadsheet, you need to iterate over the data and append it to the spreadsheet: That’s it. That should allow you to create a spreadsheet with some data coming from your database. However, why not use some of that cool knowledge you gained recently to add a chart as well to display that data more visually? All right, then you could probably do something like this: Now we’re talking! Here’s a spreadsheet generated from database objects and with a chart and everything: That’s a great way for you to wrap up your new knowledge of charts! Even though you can use Pandas to handle Excel files, there are few things that you either can’t accomplish with Pandas or that you’d be better off just using directly. For example, some of the advantages of using are the ability to easily customize your spreadsheet with styles, conditional formatting, and such. But guess what, you don’t have to worry about picking. In fact, has support for both converting data from a Pandas DataFrame into a workbook or the opposite, converting an workbook into a Pandas DataFrame. Note: If you’re new to Pandas, check our course on Pandas DataFrames beforehand. First things first, remember to install the package: Now that you have some data, you can use to convert it from a DataFrame into a worksheet: You should see a spreadsheet that looks like this: If you want to add the DataFrame’s index, you can change , and it adds each row’s index into your spreadsheet. On the other hand, if you want to convert a spreadsheet into a DataFrame, you can also do it in a very straightforward way like so: Alternatively, if you want to add the correct headers and use the review ID as the index, for example, then you can also do it like this instead: # Set the first row as the columns for the DataFrame # Set the field \"review_id\" as the indexes for each row Using indexes and columns allows you to access data from your DataFrame easily: # Grab review with id \"R2EQL1V1L6E0C9\", using the index There you go, whether you want to use to prettify your Pandas dataset or use Pandas to do some hardcore algebra, you now know how to switch between both packages."
    },
    {
        "link": "https://medium.com/@Bwhiz/a-comprehensive-guide-to-openpyxl-in-python-c882c482e7b1",
        "document": "In this article, I’ll introduce you to the OpenPyxl package in Python and show you how to carry out some basic Excel functionalities using this powerful tool.\n\nOpenPyxl is a powerful and versatile Python library designed for reading, writing, and manipulating Excel files (with the .xlsx extension). It is widely used in data analysis, automation, and reporting tasks, making it an essential tool for anyone who works with Excel in a Python environment. OpenPyxl is ideal for automating repetitive tasks, generating reports, or integrating Excel functionalities into larger Python applications.\n• Create and Edit Workbooks: Easily create new Excel workbooks or edit existing ones.\n• Read Data: Extract data from Excel files for analysis or processing.\n• Formatting: Apply various styles, such as fonts, colors, and borders, to cells for better presentation.\n• Merging Cells: Combine multiple cells into one for clearer data organization.\n• Formulas and Functions: Use Excel formulas and functions within your Python scripts.\n• Charts and Graphs: Create visual representations of your data directly in Excel.\n\nYou can install OpenPyxl using pip, the Python package manager, with the command below:\n\nIn this section I would go through some basic utilities of Openpyxl to help you get started with using the package.\n• How to import the library in your Python script:\n\nTo insert data into a cell using OpenPyxl, you just need to make a reference to any of the worksheets you created above, specify the cell you want to write to, and assign a value to it. An example is shown below:\n\nYou can also insert a Pandas DataFrame into a Worksheet.\n• Inserting DataFrame into Worksheet:\n\nTo insert a DataFrame directly into a worksheet you can use the function from the . An example is shown below:\n\nAn example of the worksheet ‘ws’ that we created with the data we’ve written to it is shown below.\n\nWe can also merge cells as well as color the cells using OpenPyxl.\n\nColoring cells in OpenPyxl involves using the class from the module.\n• Create a PatternFill Object:\n\nA PatternFill object defines the fill pattern for a cell. In the example shown below, it is used to fill a cell with a solid color.\n\nThe PatternFill class takes several parameters, but the main ones are:\n\n- start_color: The starting color (or the only color for a solid fill).\n\n- end_color: The ending color (which is the same as the starting color for a solid fill).\n\n- fill_type: The type of fill pattern. Common values are ‘solid’, ‘darkGrid’, ‘lightGrid’, etc.\n\nIn this example, FF224677 represents the color blue in hexadecimal RGB notation, and fill_type=”solid” specifies a solid fill pattern.\n• Apply the Fill to a Cell:\n\nTo apply the fill to a specific cell, assign the PatternFill object to the fill attribute of the cell.\n\nThe line of code above sets the fill of cell A1 in the worksheet ws1 to the blue color defined by the PatternFill object.\n\nPutting it all together\n\nIt’s time to put everything we have looked at together into a single Python script and see the output:\n\nThe output of the code above is shown as seen below:\n\nIn this article, we’ve explored the basic utilities of the OpenPyxl library for working with Excel files in Python. We’ve learned how to create a new workbook, insert data from a DataFrame, merge cells, and apply formatting such as coloring and text alignment.\n\nWhile we’ve covered fundamental functionalities that are commonly used in everyday tasks, OpenPyxl offers a wide range of advanced features and options for even more sophisticated Excel manipulation. To further expand your knowledge and take advantage of these advanced functionalities, I highly recommend exploring the official API documentation of OpenPyxl.\n\nIf you want to see how OpenPyxl can be integrated into a codebase that runs on an automated schedule, be sure to check out this repository:\n\nhttps://github.com/Bwhiz/Auto-Excel-Reports\n\nBy examining real-world examples and implementations, you’ll gain practical insights into leveraging OpenPyxl effectively within automated workflows."
    },
    {
        "link": "https://stackoverflow.com/questions/13509207/ms-word-r-w-in-python-python-docx-issue-and-win32com-references",
        "document": "Recently I'am experimenting with different API's for MS Word file management (writing for now). At this point I need just a simple writing python API. I tried win32com module which prove to be very robust with lack of examples for python online (very little knowledge of VB and C to be able to translate examples from MSDN).\n\nI tried to use python-docx but after install I am getting this traceback for any docx function.\n\nI had some problems with installation of lxml by source and by easy_install. It was checking for libxlm2 and libxslt binaries. I downloaded them and added environmental paths but the installation trough source or easy_install stopped every time.\n\nFinally I used unofficial python extension package from this site Link. Installation was fast and there was no errors in the end.\n\nIs there something I can do to make docx work and is there some python win32com related references online? I couldn't find any. (except MSDN(VB not python) and O'Reily's Python programming on win32)"
    },
    {
        "link": "https://stackoverflow.com/questions/15274601/opening-a-ms-word-file-in-pywin32",
        "document": "You need to open the file from the correct location.\n\nYou might try this:\n\nof course, remember to close the doc with doc.Close() and quit Word with Word.Quit() later."
    },
    {
        "link": "https://perfectdoc.studio/inspiration/how-to-generate-word-documents-in-python-a-step-by-step-tutorial",
        "document": "In today’s fast-paced world, there is a growing need to streamline the generation of Word documents. Creating these documents manually consumes a significant amount of time and can lead to errors. Moreover, managing a large number of documents can become overwhelming. Thankfully, automation has emerged as a valuable solution, allowing us to save time, eliminate mistakes, and work more efficiently. Bid farewell to the hassles of manual document creation and embrace automation to simplify and expedite your work. In the past, methods like mail merge and manual data entry were employed to automate document generation. While mail merge enables the merging of data from external sources into preexisting templates, it can be complex and lacks flexibility for customization. On the other hand, manual methods involve repetitive tasks, which often result in errors and wasted resources.\n\nFortunately, programmatic document generation presents a more efficient alternative. By harnessing the power of Python, we can automate the entire process. Python offers powerful libraries such as python-docx But, If you have limited knowledge of Python and run a business with the need to generate over 1000+ documents daily, relying solely on Python for document generation can be quite challenging. Fortunately, there’s another option: using document generation software like Perfect Doc Studio. This tool offers user-friendly interfaces that make document generation accessible to non-developers. It comes with pre-designed templates and drag-and-drop functionality, simplifying the process. Document generation software also supports various output formats, such as PDFs and Word documents, without the need for coding. Additionally, these solutions often integrate with data sources like databases and spreadsheets, automating data insertion into documents. While Python is powerful, these software options provide a faster and more intuitive way to generate documents for those without programming expertise. In this blog, we will delve into the numerous advantages of programmatic Word document generation and explore why Python stands out as an excellent choice. Join us on this exciting journey as we unlock the potential of automatic Python Word document generation. To learn about generating pdf documents using python In this blog, we will delve into the numerous advantages of programmatic Word document generation and explore why Python stands out as an excellent choice. Join us on this exciting journey as we unlock the potential of automatic Python Word document generation. To learn about generating pdf documents using python click here\n\nImagine you need to generate a set of invoices for your business. With normal word document generation, you would typically open a word processing application like Microsoft Word, create a blank document, and manually enter the invoice details such as customer name, address, items purchased, prices, and totals. You would format the text, add headers and footers, and save the document. This process would need to be repeated for each invoice, leading to a time-consuming and repetitive task. Now, let’s consider the same scenario but using Python word document generation. With Python, you can automate the process of generating invoices, saving time and effort. Here’s how it might work: The process involved in Automatic Word Document Generation Using Python\n\nThe process involved in automatic Word document generation using Python typically includes the following steps: Start by creating a template in a word processing application like Microsoft Word. Define the layout, formatting, and placeholders for dynamic content. For example, you can use <name> as a placeholder to be replaced with the actual name in the generated document. Once the template is ready, you must fetch the required data from a suitable source. This can be done using various techniques, such as: If the data is stored in a database, you can use Python’s database connectors (e.g., SQLite, MySQL, PostgreSQL) to fetch the data by executing SQL queries. Retrieve the necessary information, such as customer details, product information, or any relevant data needed for the document generation process. If the data is stored in CSV or Excel files, you can utilize libraries like pandas or openpyxl to read the data from the files into Python data structures, such as lists or DataFrames. Extract the required data for document generation from the loaded data. If the data is available on websites or accessible through APIs, you can use web scraping techniques with libraries like or interact with APIs using libraries like Requests to retrieve the necessary data. Parse the retrieved data and extract the relevant information for document generation. To perform Word document generation using Python, you’ll need to install the following libraries:\n• python-docx: This library allows you to programmatically create, modify, and generate Word documents. It provides a simple and intuitive interface for manipulating document structure, formatting, and content. You can install it using the pip package manager by running the command: pip install python-docx.\n• pandas: The Pandas library can be helpful if you’re working with data from external sources, such as CSV files or databases. It provides powerful data manipulation and analysis capabilities. You can install it by running: pip install pandas.\n• pywin32: For certain advanced functionalities, such as interacting with Microsoft Word’s COM (Component Object Model) interface, the pywin32 library is required. It enables Python to communicate with Microsoft Office applications. You can install it with: pip install pywin32.\n• docx-mailmerge: If you plan to utilize the mail merge feature for generating personalized documents, the docx-mailmerge library simplifies the process. It provides an easy way to merge data from external sources into document templates. Install it using: pip install docx-mailmerge.\n• PyPDF2: If you need to work with PDF documents and perform tasks like converting Word documents to PDF, the PyPDF2 library can assist you. It allows you to manipulate and extract content from PDF files. Install it with: pip install PyPDF2. You can install these libraries by running the corresponding pip commands in your command-line interface. By leveraging these libraries, you’ll have the necessary tools to automate Word document generation, customize the content, merge data, and perform various other tasks to meet your specific requirements. Save the generated document using the save() method of the Document class. You can specify the output file name and format. Additionally, you can export the document to other formats using the appropriate methods. For example, to save as PDF: Implement error-handling mechanisms to catch and handle any exceptions that may occur during the document generation process. You can use try-except blocks to handle specific exceptions and provide appropriate error messages. Additionally, consider incorporating logging to capture information about the generation process: To automate the document generation process, you can use various scheduling mechanisms like cron jobs or Windows Task Scheduler. Set up a scheduled task to run your Python script at specific intervals or trigger it based on events or conditions. For example, in a Linux environment, you can use cron jobs: crontab -e # Add an entry to schedule the script to run daily at 8 AM 0 8 * * * python /path/to/document_generation_script.py By following these steps and customizing the code snippets according to your specific requirements, you can automate Word document generation using Python. The entire process is demonstrated in this video: Once the template is ready, you must fetch the required data from a suitable source. This can be done using various techniques, such as:"
    },
    {
        "link": "https://reddit.com/r/Python/comments/bxx0ua/automating_ms_office_w_python_programming_via",
        "document": "Has anyone here had experience automating office applications using the Win32 COM library. If so, how was the learning curve to become proficient with it? How have projects been panning out w/ it?\n\nWith Python being available in the App store for users, I now have the chance to distribute Python scripts to automate MS office related tasks as I've previously been limited to VBA. I know there are options such as openpyxl, xlwings etc., however it looks like Win32 COM offers the best flexibility if you already have a good understanding of VBA. I'm planning on going through \"Python Programming on Win32\" by Mark Hammond but would appreciate any other resources others have used. There's also a great Youtube Series by Sigma Coding that I've been going through."
    },
    {
        "link": "https://learn.microsoft.com/en-us/answers/questions/1183617/how-to-fill-form-fields-in-word-automatically-with",
        "document": "Office: A suite of Microsoft productivity software that supports common business tasks, including word processing, email, presentations, and data management and analysis. Development: The process of researching, productizing, and refining new or existing technologies."
    },
    {
        "link": "https://reddit.com/r/Python/comments/bxx0ua/automating_ms_office_w_python_programming_via",
        "document": "Has anyone here had experience automating office applications using the Win32 COM library. If so, how was the learning curve to become proficient with it? How have projects been panning out w/ it?\n\nWith Python being available in the App store for users, I now have the chance to distribute Python scripts to automate MS office related tasks as I've previously been limited to VBA. I know there are options such as openpyxl, xlwings etc., however it looks like Win32 COM offers the best flexibility if you already have a good understanding of VBA. I'm planning on going through \"Python Programming on Win32\" by Mark Hammond but would appreciate any other resources others have used. There's also a great Youtube Series by Sigma Coding that I've been going through."
    },
    {
        "link": "https://stackoverflow.com/questions/659018/accessing-microsoft-automation-objects-from-python",
        "document": "I have a set of macros that I have turned into an add-in in excel. The macros allow me to interact with another program that has what are called Microsoft Automation Objects that provide some control over what the other program does. For example, I have a filter tool in the add-in that filters the list provided by the other program to match a list in the Excel workbook. This is slow though. I might have fifty thousand lines in the other program and want to filter out all of the lines that don't match a list of three thousand lines in Excel. This type of matching takes about 30-40 minutes. I have begun wondering if there is way to do this with Python instead since I suspect the matching process could be done in seconds.\n\nThanks- Based on the suggestion to look at Hammond's book I found out a number of resources. However, though I am still exploring it looks like many of these are old. For example, Hammond's book was published in 2000, which means the writing was finished almost a decade ago. Correction I just found the package called PyWin32 with a 2/2009 build.\n\nThis should get me started. Thanks"
    },
    {
        "link": "https://learn.microsoft.com/en-us/windows/python/scripting",
        "document": "Get started using Python on Windows for scripting and automation\n\nThe following is a step-by-step guide for setting up your developer environment and getting you started using Python for scripting and automating file system operations on Windows.\n\nWhen using Python to write scripts that perform file system operations, we recommend you install Python from the Microsoft Store. Installing via the Microsoft Store uses the basic Python3 interpreter, but handles set up of your PATH settings for the current user (avoiding the need for admin access), in addition to providing automatic updates.\n\nIf you are using Python for web development on Windows, we recommend a different setup using the Windows Subsystem for Linux. Find a walkthrough in our guide: Get started using Python for web development on Windows. If you're brand new to Python, try our guide: Get started using Python on Windows for beginners. For some advanced scenarios (like needing to access/modify Python's installed files, make copies of binaries, or use Python DLLs directly), you may want to consider downloading a specific Python release directly from python.org or consider installing an alternative, such as Anaconda, Jython, PyPy, WinPython, IronPython, etc. We only recommend this if you are a more advanced Python programmer with a specific reason for choosing an alternative implementation.\n\nTo install Python using the Microsoft Store:\n• None Go to your Start menu (lower left Windows icon), type \"Microsoft Store\", select the link to open the store.\n• None Once the store is open, select Search from the upper-right menu and enter \"Python\". Select which version of Python you would like to use from the results under Apps. We recommend using the most recent unless you have a reason not to (such as aligning with the version used on a pre-existing project that you plan to work on). Once you've determined which version you would like to install, select Get.\n• None Once Python has completed the downloading and installation process, open Windows PowerShell using the Start menu (lower left Windows icon). Once PowerShell is open, enter to confirm that Python3 has been installed on your machine.\n• None The Microsoft Store installation of Python includes pip, the standard package manager. Pip allows you to install and manage additional packages that are not part of the Python standard library. To confirm that you also have pip available to install and manage packages, enter .\n\nBy using VS Code as your text editor / integrated development environment (IDE), you can take advantage of IntelliSense (a code completion aid), Linting (helps avoid making errors in your code), Debug support (helps you find errors in your code after you run it), Code snippets (templates for small reusable code blocks), and Unit testing (testing your code's interface with different types of input).\n\nDownload VS Code for Windows and follow the installation instructions: https://code.visualstudio.com.\n\nYou will need to install the Microsoft Python extension in order to take advantage of the VS Code support features. Learn more.\n• None Open the VS Code Extensions window by entering Ctrl+Shift+X (or use the menu to navigate to View > Extensions).\n• None In the top Search Extensions in Marketplace box, enter: Python.\n• None Find the Python (ms-python.python) by Microsoft extension and select the green Install button.\n\nOpen the integrated PowerShell terminal in VS Code\n\nVS Code contains a built-in terminal that enables you to open a Python command line with PowerShell, establishing a seamless workflow between your code editor and command line.\n• None Open the terminal in VS Code, select View > Terminal, or alternatively use the shortcut Ctrl+` (using the backtick character). The default terminal should be PowerShell, but if you need to change it, use Ctrl+Shift+P to enter the command palette. Enter Terminal: Select Default Shell and a list of terminal options will display containing PowerShell, Command Prompt, WSL, etc. Select the one you'd like to use and enter Ctrl+Shift+` (using the backtick) to create a new terminal.\n• None Inside your VS Code terminal, open Python by entering:\n• None Try the Python interpreter out by entering: . Python will return your statement \"Hello World\".\n• None To exit Python, you can enter , , or select Ctrl-Z.\n\nIf you plan to collaborate with others on your Python code, or host your project on an open-source site (like GitHub), VS Code supports version control with Git. The Source Control tab in VS Code tracks all of your changes and has common Git commands (add, commit, push, pull) built right into the UI. You first need to install Git to power the Source Control panel.\n• None Download and install Git for Windows from the git-scm website.\n• None An Install Wizard is included that will ask you a series of questions about settings for your Git installation. We recommend using all of the default settings, unless you have a specific reason for changing something.\n• None If you've never worked with Git before, GitHub Guides can help you get started.\n\nExample script to display the structure of your file system directory\n\nCommon system administration tasks can take a huge amount of time, but with a Python script, you can automate these tasks so that they take no time at all. For example, Python can read the contents of your computer's file system and perform operations like printing an outline of your files and directories, moving folders from one directory to another, or renaming hundreds of files. Normally, tasks like these could take up a ton of time if you were to perform them manually. Use a Python script instead!\n\nLet's begin with a simple script that walks a directory tree and displays the directory structure.\n• None Create a directory for your project: , then open that directory: .\n• None Create a few directories to use with our example script:\n• None Create a few files within those directories to use with our script:\n• None Create a new python file in your python-scripts directory:\n• None Open your project in VS Code by entering:\n• None Open the VS Code File Explorer window by entering Ctrl+Shift+E (or use the menu to navigate to View > Explorer) and select the list-directory-contents.py file that you just created. The Microsoft Python extension will automatically load a Python interpreter. You can see which interpreter was loaded on the bottom of your VS Code window. Python is an interpreted language, meaning that it acts as a virtual machine, emulating a physical computer. There are different types of Python interpreters that you can use: Python 2, Python 3, Anaconda, PyPy, etc. In order to run Python code and get Python IntelliSense, you must tell VS Code which interpreter to use. We recommend sticking with the interpreter that VS Code chooses by default (Python 3 in our case) unless you have a specific reason for choosing something different. To change the Python interpreter, select the interpreter currently displayed in blue bar on the bottom of your VS Code window or open the Command Palette (Ctrl+Shift+P) and enter the command Python: Select Interpreter. This will display a list of the Python interpreters that you currently have installed. Learn more about configuring Python environments.\n• None Paste the following code into your list-directory-contents.py file and then select save: import os root = os.path.join('..', 'food') for directory, subdir_list, file_list in os.walk(root): print('Directory:', directory) for name in subdir_list: print('Subdirectory:', name) for name in file_list: print('File:', name) print()\n• None Open the VS Code integrated terminal (Ctrl+`, using the backtick character) and enter the src directory where you just saved your Python script:\n• None Run the script in PowerShell with: You should see output that looks like this:\n• None Use Python to print that file system directory output to it's own text file by entering this command directly in your PowerShell terminal:\n\nCongratulations! You've just written an automated systems administration script that reads the directory and files you created and uses Python to display, and then print, the directory structure to it's own text file.\n\nExample script to modify all files in a directory\n\nThis example uses the files and directories you just created, renaming each of the files by adding the file's last modified date to the beginning of the filename.\n• None Inside the src folder in your python-scripts directory, create a new Python file for your script:\n• None Open the update-filenames.py file, paste the following code into the file, and save it: os.getmtime returns a timestamp in ticks, which is not easily readable. It must be converted to a standard datetime string first. import datetime import os root = os.path.join('..', 'food') for directory, subdir_list, file_list in os.walk(root): for name in file_list: source_name = os.path.join(directory, name) timestamp = os.path.getmtime(source_name) modified_date = str(datetime.datetime.fromtimestamp(timestamp)).replace(':', '.') target_name = os.path.join(directory, f'{modified_date}_{name}') print(f'Renaming: {source_name} to: {target_name}') os.rename(source_name, target_name)\n• None Test your update-filenames.py script by running it: and then running your list-directory-contents.py script again:\n• None You should see output that looks like this: Renaming: ..\\food\\fruits\\banana.txt to: ..\\food\\fruits\\2019-07-18 12.24.46.385185_banana.txt Renaming: ..\\food\\fruits\\blueberry.txt to: ..\\food\\fruits\\2019-07-18 12.24.46.391170_blueberry.txt Renaming: ..\\food\\fruits\\strawberry.txt to: ..\\food\\fruits\\2019-07-18 12.24.46.389174_strawberry.txt Renaming: ..\\food\\fruits\\apples\\honeycrisp.txt to: ..\\food\\fruits\\apples\\2019-07-18 12.24.46.395160_honeycrisp.txt Renaming: ..\\food\\fruits\\oranges\\mandarin.txt to: ..\\food\\fruits\\oranges\\2019-07-18 12.24.46.398151_mandarin.txt Renaming: ..\\food\\vegetables\\carrot.txt to: ..\\food\\vegetables\\2019-07-18 12.24.46.402496_carrot.txt PS C:\\src\\python-scripting\\src> python3 .\\list-directory-contents.py ..\\food\\ Directory: ..\\food Subdirectory: fruits Subdirectory: vegetables Directory: ..\\food\\fruits Subdirectory: apples Subdirectory: oranges File: 2019-07-18 12.24.46.385185_banana.txt File: 2019-07-18 12.24.46.389174_strawberry.txt File: 2019-07-18 12.24.46.391170_blueberry.txt Directory: ..\\food\\fruits\\apples File: 2019-07-18 12.24.46.395160_honeycrisp.txt Directory: ..\\food\\fruits\\oranges File: 2019-07-18 12.24.46.398151_mandarin.txt Directory: ..\\food\\vegetables File: 2019-07-18 12.24.46.402496_carrot.txt\n• None Use Python to print the new file system directory names with the last-modified timestamp prepended to it's own text file by entering this command directly in your PowerShell terminal:\n\nHope you learned a few fun things about using Python scripts for automating basic systems administration tasks. There is, of course, a ton more to know, but we hope this got you started on the right foot. We've shared a few additional resources to continue learning below.\n• Python Docs: File and Directory Access: Python documentation about working with file systems and using modules for reading the properties of files, manipulating paths in a portable way, and creating temporary files.\n• Learn Python: String_Formatting tutorial: More about using the \"%\" operator for string formatting.\n• 10 Python File System Methods You Should Know: Medium article about manipulating files and folders With and .\n• The Hitchhikers Guide to Python: Systems Administration: An \"opinionated guide\" that offers overviews and best practices on topics related to Python. This section covers System Admin tools and frameworks. This guide is hosted on GitHub so you can file issues and make contributions."
    },
    {
        "link": "https://linkedin.com/pulse/automating-microsoft-apps-pythons-com-library-zach-fischer-yjhec",
        "document": "Harnessing the Power of COM Libraries in Python for Automated Workflows\n\nIn today's fast-paced world, automation is not just a luxury; it's a necessity for efficiency and scalability, especially in IT and administrative tasks. The Component Object Model (COM) libraries in Python open up a vast realm of possibilities for automating Windows applications, streamlining workflows in ways that were previously cumbersome or manual.\n\nPython's win32com.client module, part of the PyWin32 library, acts as a bridge to these COM objects, allowing Python scripts to interact with and control Windows applications like Excel, Outlook, and many others. This capability is a game-changer for IT professionals, data analysts, and administrative personnel looking to automate repetitive tasks such as data entry, email communications, report generation, and more.\n\nCOM is a Microsoft technology that allows inter-process communication and dynamic object creation in a networked environment. It's a cornerstone for automation in Windows, underpinning the automation interfaces of many Windows applications. Through COM, scripts can perform tasks like opening files, manipulating data, and sending emails, all without manual intervention.\n\nTo dive into automation with COM libraries, the first step is installing the PyWin32 package, which includes the win32com.client module. This module is the key to creating, accessing, and manipulating COM objects from Python.\n\nimport win32com.client as win32 excel = win32.gencache.EnsureDispatch('Excel.Application') excel.Visible = True # Makes the Excel window visible to the user workbook = excel.Workbooks.Open('path\\\\to\\\\your\\\\workbook.xlsx') # Perform operations on the workbook here excel.Quit() # Closes Excel\n\nThis snippet demonstrates the ease with which Python can interact with Excel, making it visible, performing tasks, and then closing it, all programmatically.\n\nWhile Excel automation is a common starting point, the win32com.client module's capabilities extend far beyond. You can automate email composition and sending in Outlook, create PowerPoint presentations, manipulate Access databases, and much more. The ability to automate these applications through Python scripts can significantly reduce manual data handling and improve efficiency.\n\nFor instance, automating email communications can streamline notifications, report distributions, and routine correspondences. Similarly, automating report generation in Excel from database queries can save hours of manual compilation and reduce the risk of errors.\n\nWhile COM automation with Python is powerful, it comes with its own set of challenges. Navigating the object models of complex applications like Excel and Outlook requires a good understanding of their structure and available methods. Additionally, since this automation technique relies on the applications being installed on the host system, it's primarily constrained to Windows environments.\n\nThe win32com.client library is a testament to Python's versatility and its capacity to interact with other applications in a Windows setting. By automating routine tasks, organizations and individuals can allocate their time and resources to more complex, value-adding activities. Whether you're automating data analysis reports in Excel, managing email communications in Outlook, or generating data visualizations in PowerPoint, the COM libraries in Python offer a robust toolkit for enhancing productivity and operational efficiency."
    },
    {
        "link": "https://pbpython.com/windows-com.html",
        "document": "The pywin32 package has been around for a very long time. In fact, the book that covers this topic was published in 2000 by Mark Hammond and Andy Robinson. Despite being 18 years old (which make me feel really old :), the underlying technology and concepts still work today. Pywin32 is basically a very thin wrapper of python that allows us to interact with COM objects and automate Windows applications with python. The power of this approach is that you can pretty much do anything that a Microsoft Application can do through python. The downside is that you have to run this on a Windows system with Microsoft Office installed. Before we go through some examples, make sure you have pywin32 installed on your system using or One other recommendation I would make is that you keep a link to Tim Golden’s page handy. This resource has many more details on how to use python on Windows for automation and other administration tasks.\n\nAll of these applications start with similar imports and process for activating an application. Here is a very short example of opening up Excel: Once you run this from the command line, you should see Excel open up. When you press ENTER, the application will close. There are a few key concepts to go through before we actually make this a more useful application. The first step is to import the win32 client. I’ve used the convention of importing it as to make the actual dispatch code a little shorter. The magic of this code is using to launch Excel. In this example, I use to create a static proxy. I recommend reading this article if you want to know more details about static vs. dynamic proxies. I have had good luck using this approach for the types of examples included in this article but will be honest - I have not widely experimented with the various dispatch approaches. Now that the excel object is launched, we need to explicitly make it visible by setting The win32 code is pretty smart and will close down excel once the program is done running. This means that if we just leave the code to run on its own, you probably won’t see Excel. I include the dummy prompt to keep Excel visible on the screen until the user presses ENTER. I include the final line of as a bit of a belt and suspenders approach. Strictly speaking win32 should close out Excel when the program is done but I decided to include to show how to force the application to close. This is the most basic approach to using COM. We can extend this in a number of more useful ways. The rest of this article will go through some examples that might be useful for your own needs.\n\nIn my day-to-day work, I frequently use pandas to analyze and manipulate data, then output the results in Excel. The next step in the process is to open up the Excel and review the results. In this example, we can automate the file opening process which can make it simpler than trying to navigate to the right directory and open a file. # Define the full path for the output file # In the real world, this would likely be much more involved # Open up Excel and make it visible This simple example expands on the earlier one by showing how to use the object to open up a file.\n\nAnother simple scenario where COM is helpful is when you want to attach a file to an email and send to a distribution list. This example shows how to do some data manipulation, open up a Outlook email, attach a file and leave it open for additional text before sending. # Define the full path for the output file # In the real world, this would likely be much more involved # The file needs to be a string not a path object This example gets a little more involved but the basic concepts are the same. We need to create our object (Outlook in this case) and create a new email. One of the challenging aspects of working with COM is that there is not a very consistent API. It is not intuitive that you create an email like this: It generally takes a little searching to figure out the exact API for the specific problem. Google and stackoverflow are your friends. Once the email object is created, you can add the recipient and CC list as well as attach the file. When it is all said and done, it looks like this: The email is open and you can add additional information and send it. In this example, I chose not to close out Outlook and let python handle those details.\n\nThe final example is the most involved but illustrates a powerful approach for blending the data analysis of python with the user interface of Excel. It is possible to build complex excel with pandas but that approach can be very laborious. An alternative approach would be to build up the complex file in Excel, then do the data manipulation and copy the data tab to the final Excel output. Here is an example of the Excel dashboard we want to create: Yes, I know that pie charts are awful but I can almost guarantee that someone is going to ask you to put one in the dashboard at some point in time! Also, this template had a pie chart and I decided to keep it in the final output instead of trying to figure out another chart. It might be helpful to take a step back and look at the basic process the code will follow: Let’s get started with the code. # Define the full path for the data file file # Define the full path for the final output file In the section we performed our imports, read in the data and defined all three files. Of note is that this process includes the step of summarizing the data with pandas and saving the data in an Excel file. We then re-open that file and copy the data into the template. It is a bit convoluted but this is the best approach I could figure out for this scenario. Next we perform the analysis and save the temp Excel file: # In the real world, this would likely be much more involved Now we use COM to merge the temp output file into our Excel dashboard tab and save a new copy: # Use com to copy the files around # Copy from the data file (select all data in A:D columns) # Must convert the path file object to a string for the save to work The code opens up Excel and makes sure it is not visible. Then it opens up the dashboard template and data files. It uses the to select all the data and then copies it into the template file. The final step is to save the template as a new file. This approach can be a very convenient shortcut when you have a situation where you want to use python for data manipulation but need a complex Excel output. You may not have an apparent need for it now but if you ever build up a complex Excel report, this approach is much simpler than trying to code the spreadsheet by hand with python.\n\nMy preference is to try to stick with python as much as possible for my day-to-day data analysis. However, it is important to know when other technologies can streamline the process or make the results have a bigger impact. Microsoft’s COM technology is a mature technology and can be used effectively through python to do tasks that might be too difficult to do otherwise. Hopefully this article has given you some ideas on how to incorporate this technique into your own workflow. If you have any tasks you like to use pywin32 for, let us know in the comments."
    }
]