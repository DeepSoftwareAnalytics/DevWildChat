[
    {
        "link": "https://gnu.org/software/emacs/manual/html_node/emacs/Format-of-ChangeLog.html",
        "document": "A change log entry starts with a header line that contains the current date, your name (taken from the variable ), and your email address (taken from the variable ). Aside from these header lines, every line in the change log starts with a space or a tab. The bulk of the entry consists of items, each of which starts with a line starting with whitespace and a star. Here are two entries, both dated in May 1993, with two items and one item respectively.\n\nOne entry can describe several changes; each change should have its own item, or its own line in an item. Normally there should be a blank line between items. When items are related (parts of the same change, in different places), group them by leaving no blank line between them.\n\nYou should put a copyright notice and permission notice at the end of the change log file. Here is an example:\n\nOf course, you should substitute the proper years and copyright holder."
    },
    {
        "link": "https://philnewton.net/blog/emacs-changelog-mode",
        "document": "There are usually two files I creat when starting a new project: a TODO.org file for organizing tasks, and a file for keeping tabs on what I've done. I don't limit myself to only writing about direct file changes; I also use it to keep notes about overall changes I've made.\n\nHere's a snippet from the CHANGELOG I use for this site:\n\nIt's not exactly thrilling stuff, but it's handy when looking over traffic numbers to see if any changes I made worked. Or not.\n\nworks fine without additional configuration, but there are a few options to tweak. I also wrote some functions to add projectile integration.\n\nConfiguring your name and email address Calling will insert a new date heading with your name and email address. There are two variables to modify what is inserted:\n• - The full name to use.\n• - The email address to use. Something like this will set both of variables: Emacs will attempt to figure your name or email if either of these are .\n\nI use projectile a lot, so I wanted to make it easier to add log entries from within a project. I wrote two functions for this: This opens the CHANGELOG file for the current projectile project. This works the same way as , but it automatically selects the project CHANGELOG instead of prompting for a file name. I added key bindings for both of these functions because I don't want to type that much:"
    },
    {
        "link": "https://gnu.huihoo.com/emacs/26.3/Format-of-ChangeLog.html",
        "document": "A change log entry starts with a header line that contains the current date, your name (taken from the variable ), and your email address (taken from the variable ). Aside from these header lines, every line in the change log starts with a space or a tab. The bulk of the entry consists of , each of which starts with a line starting with whitespace and a star. Here are two entries, both dated in May 1993, with two items and one item respectively.\n\nOne entry can describe several changes; each change should have its own item, or its own line in an item. Normally there should be a blank line between items. When items are related (parts of the same change, in different places), group them by leaving no blank line between them.\n\nYou should put a copyright notice and permission notice at the end of the change log file. Here is an example:\n\nOf course, you should substitute the proper years and copyright holder."
    },
    {
        "link": "https://gnu.org/software/emacs/manual/html_node/emacs/Change-Logs-and-VC.html",
        "document": "If you use RCS or CVS for a program with a file (see Change Logs), you can generate change log entries from the version control log entries of previous commits.\n\nNote that this only works with RCS or CVS. This procedure would be particularly incorrect on a modern changeset-based version control system, where changes to the file would normally be committed as part of a changeset. In that case, you should write the change log entries first, then pull them into the ‘ ’ buffer when you commit (see Features of the Log Entry Buffer).\n\nFor example, suppose the first line of is dated 1999-04-10, and that the only check-in since then was by Nathaniel Bowditch to on 1999-05-22 with log entry ‘ ’. Then inserts this entry:\n\nIf the version control log entry specifies a function name (in parenthesis at the beginning of a line), that is reflected in the entry. For example, if a log entry for is ‘ ’, the entry is:\n\nWhen adds several change log entries at once, it groups related log entries together if they all are checked in by the same author at nearly the same time. If the log entries for several such files all have the same text, it coalesces them into a single entry."
    },
    {
        "link": "https://emacsdocs.org/docs/emacs/Log-Buffer",
        "document": "When you tell VC to commit a change, it pops up a buffer named . In this buffer, you should write a log entry describing the changes you have made (see Why Version Control?). After you are done, type ( ) to exit the buffer and commit the change, together with your log entry.\n\nThe major mode for the buffer is Log Edit mode, a variant of Text mode (see Text Mode). On entering Log Edit mode, Emacs runs the hooks and (see Hooks).\n\nIn the buffer, you can write one or more header lines, specifying additional information to be supplied to the version control system. Each header line must occupy a single line at the top of the buffer; the first line that is not a header line is treated as the start of the log entry. For example, the following header line states that the present change was not written by you, but by another developer:\n\nApart from the ‘ ’ header, Emacs recognizes the headers ‘ ’ (a one-line summary of the changeset), ‘ ’ (a manually-specified commit time), and ‘ ’ (a reference to a bug fixed by the change). Not all version control systems recognize all headers. If you specify a header for a system that does not support it, the header is treated as part of the log entry.\n\nWhile in the buffer, the current VC fileset is considered to be the fileset that will be committed if you type . To view a list of the files in the VC fileset, type ( ). To view a diff of changes between the VC fileset and the version from which you started editing (see Old Revisions), type ( ).\n\nTo help generate ChangeLog entries, type ( ), to generate skeleton ChangeLog entries, listing all changed file and function names based on the diff of the VC fileset. Consecutive entries left empty will be combined by ( ).\n\nIf the VC fileset includes one or more files (see Change Log), type ( ) to pull the relevant entries into the buffer. If the topmost item in each was made under your user name on the current date, this command searches that item for entries matching the file(s) to be committed, and inserts them. If you are using CVS or RCS, see Change Logs and VC, for the opposite way of working—generating ChangeLog entries from the Log Edit buffer.\n\nTo abort a commit, just don’t type in that buffer. You can switch buffers and do other editing. As long as you don’t try to make another commit, the entry you were editing remains in the buffer, and you can go back to that buffer at any time to complete the commit.\n\nYou can also browse the history of previous log entries to duplicate a commit comment. This can be useful when you want to make several commits with similar comments. The commands , , and for doing this work just like the minibuffer history commands (see Minibuffer History), except that they are used outside the minibuffer."
    },
    {
        "link": "https://philnewton.net/blog/emacs-changelog-mode",
        "document": "There are usually two files I creat when starting a new project: a TODO.org file for organizing tasks, and a file for keeping tabs on what I've done. I don't limit myself to only writing about direct file changes; I also use it to keep notes about overall changes I've made.\n\nHere's a snippet from the CHANGELOG I use for this site:\n\nIt's not exactly thrilling stuff, but it's handy when looking over traffic numbers to see if any changes I made worked. Or not.\n\nworks fine without additional configuration, but there are a few options to tweak. I also wrote some functions to add projectile integration.\n\nConfiguring your name and email address Calling will insert a new date heading with your name and email address. There are two variables to modify what is inserted:\n• - The full name to use.\n• - The email address to use. Something like this will set both of variables: Emacs will attempt to figure your name or email if either of these are .\n\nI use projectile a lot, so I wanted to make it easier to add log entries from within a project. I wrote two functions for this: This opens the CHANGELOG file for the current projectile project. This works the same way as , but it automatically selects the project CHANGELOG instead of prompting for a file name. I added key bindings for both of these functions because I don't want to type that much:"
    },
    {
        "link": "https://stackoverflow.com/questions/826155/emacs-is-there-a-way-to-generate-a-skeleton-changelog-from-diff",
        "document": "I'd like to partly automate creation of GNU-style ChangeLog entries when working with source code in version control. The works with one file at a time and you have to visit the file to use it.\n\nWhat I'd like to see instead is to have some command that would take an output of (or have integration with VC modes so it could process etc) and to create all the skeleton entries at once.\n\nFor example, if shows\n\nBetter yet, if it could parse the changed files in some languages to an extent so it could offer:\n\nI have found this feature in Emacs manual, but I don't see how I could apply it here.\n\nEDIT: One answer suggested vc-update-change-log. Unfortunately it only supports CVS and it creates ChangeLog entries by querying the already-commited VC logs. Thus even if it supported svn and others, it would be impossible to commit the changes and the ChangeLog in the same commit.\n\nEDIT2: Apparently add-changelog-entry-other-window (C-x 4 a) works not only from visited file but from diff hunk involving that file too. (Source) This is almost what I am looking for. This together with elisp loop to iterate through all hunks should solve it."
    },
    {
        "link": "https://emacs.stackexchange.com/questions/13753/insert-changelog-entries-in-commit-message",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://jfearn.fedorapeople.org/en-US/RPM/4/html/RPM_Guide/ch09s06.html",
        "document": "The change log usually appears at the end of a spec file and is marked with %changelog. It holds messages for each significant change. You should add a change log entry for each major change to the application. For example, if you download a new version of the software you are packaging, add a change log entry for the new version:"
    },
    {
        "link": "https://docs.fedoraproject.org/en-US/packaging-guidelines/manual-changelog",
        "document": "This describes the traditional method of managing changelogs that provides a separate text log of user-visible changes independently of the git commit messages. This is an alternative for the recommended method with described in Changelogs. Every time you make changes, that is, whenever you increment the E-V-R of a package, add a changelog entry in the section. Changelog entries should provide a brief summary of the changes done to the package between releases. They must never simply contain an entire copy of the source entries. The same general rules should be followed as described in Changelogs. You must use one of the following formats: If you wish to \"scramble\" or \"obfuscate\" your email address in the changelog, you may do so, provided that it is still understandable by humans.\n\nIn some situations, it may be useful for packagers to have multiple changelog entries in the spec file, but not increment the release field for each one. There are two supported methods for doing this:\n\nIn this situation, you have added this changelog entry, but have not built the package yet: The next day, you make additional changes to the spec, and need to add a new changelog line, then you would update the existing date line for 1.0-1, and append any new notes, making the changelog look like this: %changelog * Nov 13 2010 Toshio Kuratomi <toshio_fedoraproject.org> - 1.0-1 - Fix spelling errors in package description - Add a patch to fix compilation problems on F15 Please remember that this is only acceptable if 1.0-1 has not yet been built. You can do this any number of times, until you actually build 1.0-1 in the buildsystem. Once you’ve done that, you must change the E-V-R and any new entries should be added as described in Changelogs.\n\nRepeat the old version release with a new entry In this situation, you have added this changelog entry, but have not built the package yet: The next day, you make additional changes to the spec, and need to add a new changelog line. Now, you can add an additional changelog item with the new date, but the same Version-Release, so your new changelog looks like this: %changelog * Nov 13 2010 Toshio Kuratomi <toshio_fedoraproject.org> - 1.0-1 - Add a patch to fix compilation problems on F15 * Nov 12 2010 Toshio Kuratomi <toshio_fedoraproject.org> - 1.0-1 - Fix spelling errors in package description Please remember that this is only acceptable if 1.0-1 has not yet been built. You can do this any number of times, until you actually build 1.0-1 in the buildsystem. Once you’ve done that, you must change the E-V-R and any new entries should be added as described in Changelogs."
    }
]