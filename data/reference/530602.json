[
    {
        "link": "https://keras.io/guides/sequential_model",
        "document": "Author: fchollet\n\n Date created: 2020/04/12\n\n Last modified: 2023/06/25\n\n Description: Complete guide to the Sequential model.\n\nWhen to use a Sequential model\n\nA model is appropriate for a plain stack of layers where each layer has exactly one input tensor and one output tensor.\n\nis equivalent to this function:\n\nA Sequential model is not appropriate when:\n• Your model has multiple inputs or multiple outputs\n• Any of your layers has multiple inputs or multiple outputs\n• You need to do layer sharing\n\nYou can create a Sequential model by passing a list of layers to the Sequential constructor:\n\nIts layers are accessible via the attribute:\n\nYou can also create a Sequential model incrementally via the method:\n\nNote that there's also a corresponding method to remove layers: a Sequential model behaves very much like a list of layers.\n\nAlso note that the Sequential constructor accepts a argument, just like any layer or model in Keras. This is useful to annotate TensorBoard graphs with semantically meaningful names.\n\nSpecifying the input shape in advance\n\nGenerally, all layers in Keras need to know the shape of their inputs in order to be able to create their weights. So when you create a layer like this, initially, it has no weights:\n\nIt creates its weights the first time it is called on an input, since the shape of the weights depends on the shape of the inputs:\n\nNaturally, this also applies to Sequential models. When you instantiate a Sequential model without an input shape, it isn't \"built\": it has no weights (and calling results in an error stating just this). The weights are created when the model first sees some input data:\n\nOnce a model is \"built\", you can call its method to display its contents:\n\nHowever, it can be very useful when building a Sequential model incrementally to be able to display the summary of the model so far, including the current output shape. In this case, you should start your model by passing an object to your model, so that it knows its input shape from the start:\n\nNote that the object is not displayed as part of , since it isn't a layer:\n\nModels built with a predefined input shape like this always have weights (even before seeing any data) and always have a defined output shape.\n\nIn general, it's a recommended best practice to always specify the input shape of a Sequential model in advance if you know what it is.\n\nWhen building a new Sequential architecture, it's useful to incrementally stack layers with and frequently print model summaries. For instance, this enables you to monitor how a stack of and layers is downsampling image feature maps:\n\nWhat to do once you have a model\n\nOnce your model architecture is ready, you will want to:\n• Train your model, evaluate it, and run inference. See our guide to training & evaluation with the built-in loops\n• Save your model to disk and restore it. See our guide to serialization & saving.\n\nOnce a Sequential model has been built, it behaves like a Functional API model. This means that every layer has an and attribute. These attributes can be used to do neat things, like quickly creating a model that extracts the outputs of all intermediate layers in a Sequential model:\n\nHere's a similar example that only extract features from one layer:\n\nTransfer learning consists of freezing the bottom layers in a model and only training the top layers. If you aren't familiar with it, make sure to read our guide to transfer learning.\n\nHere are two common transfer learning blueprint involving Sequential models.\n\nFirst, let's say that you have a Sequential model, and you want to freeze all layers except the last one. In this case, you would simply iterate over and set on each layer, except the last one. Like this:\n\nAnother common blueprint is to use a Sequential model to stack a pre-trained model and some freshly initialized classification layers. Like this:\n\nIf you do transfer learning, you will probably find yourself frequently using these two patterns.\n\nThat's about all you need to know about Sequential models!\n\nTo find out more about building models in Keras, see:\n• Guide to making new Layers & Models via subclassing"
    },
    {
        "link": "https://tensorflow.org/guide/keras/sequential_model",
        "document": "Save and categorize content based on your preferences.\n\nStay organized with collections Save and categorize content based on your preferences.\n\nWhen to use a Sequential model\n\nA model is appropriate for a plain stack of layers where each layer has exactly one input tensor and one output tensor.\n\nis equivalent to this function:\n\nA Sequential model is not appropriate when:\n• Your model has multiple inputs or multiple outputs\n• Any of your layers has multiple inputs or multiple outputs\n• You need to do layer sharing\n\nYou can create a Sequential model by passing a list of layers to the Sequential constructor:\n\nIts layers are accessible via the attribute:\n\nYou can also create a Sequential model incrementally via the method:\n\nNote that there's also a corresponding method to remove layers: a Sequential model behaves very much like a list of layers.\n\nAlso note that the Sequential constructor accepts a argument, just like any layer or model in Keras. This is useful to annotate TensorBoard graphs with semantically meaningful names.\n\nSpecifying the input shape in advance\n\nGenerally, all layers in Keras need to know the shape of their inputs in order to be able to create their weights. So when you create a layer like this, initially, it has no weights:\n\nIt creates its weights the first time it is called on an input, since the shape of the weights depends on the shape of the inputs:\n\nNaturally, this also applies to Sequential models. When you instantiate a Sequential model without an input shape, it isn't \"built\": it has no weights (and calling results in an error stating just this). The weights are created when the model first sees some input data:\n\nOnce a model is \"built\", you can call its method to display its contents:\n\nHowever, it can be very useful when building a Sequential model incrementally to be able to display the summary of the model so far, including the current output shape. In this case, you should start your model by passing an object to your model, so that it knows its input shape from the start:\n\nNote that the object is not displayed as part of , since it isn't a layer:\n\nA simple alternative is to just pass an argument to your first layer:\n\nModels built with a predefined input shape like this always have weights (even before seeing any data) and always have a defined output shape.\n\nIn general, it's a recommended best practice to always specify the input shape of a Sequential model in advance if you know what it is.\n\nWhen building a new Sequential architecture, it's useful to incrementally stack layers with and frequently print model summaries. For instance, this enables you to monitor how a stack of and layers is downsampling image feature maps:\n\nWhat to do once you have a model\n\nOnce your model architecture is ready, you will want to:\n• Train your model, evaluate it, and run inference. See our guide to training & evaluation with the built-in loops\n• Save your model to disk and restore it. See our guide to serialization & saving.\n• Speed up model training by leveraging multiple GPUs. See our guide to multi-GPU and distributed training.\n\nOnce a Sequential model has been built, it behaves like a Functional API model. This means that every layer has an and attribute. These attributes can be used to do neat things, like quickly creating a model that extracts the outputs of all intermediate layers in a Sequential model:\n\nHere's a similar example that only extract features from one layer:\n\nTransfer learning consists of freezing the bottom layers in a model and only training the top layers. If you aren't familiar with it, make sure to read our guide to transfer learning.\n\nHere are two common transfer learning blueprint involving Sequential models.\n\nFirst, let's say that you have a Sequential model, and you want to freeze all layers except the last one. In this case, you would simply iterate over and set on each layer, except the last one. Like this:\n\nAnother common blueprint is to use a Sequential model to stack a pre-trained model and some freshly initialized classification layers. Like this:\n\nIf you do transfer learning, you will probably find yourself frequently using these two patterns.\n\nThat's about all you need to know about Sequential models!\n\nTo find out more about building models in Keras, see:\n• Guide to making new Layers & Models via subclassing"
    },
    {
        "link": "https://kdnuggets.com/2018/06/basic-keras-neural-network-sequential-model.html",
        "document": "The approach basically coincides with Chollet's Keras 4 step workflow, which he outlines in his book \"Deep Learning with Python,\" using the MNIST dataset, and the model built is a Sequential network of Dense layers. A building block for additional posts.\n\nAs the title suggest, this post approaches building a basic Keras neural network using the Sequential model API. The specific task herein is a common one (training a classifier on the MNIST dataset), but this can be considered an example of a template for approaching any such similar task.\n\nThe approach basically coincides with Chollet's Keras 4 step workflow, which he outlines in his book \"Deep Learning with Python,\" and really amounts to little more than what can be found as an example in the early chapters of the book, or the official Keras tutorials.\n\nThe motivation for producing such a post is to use it is a foundational reference for a series of upcoming posts configuring Keras in a variety of different ways. This seemed a better idea than covering the same things over and over again at the start of each post. The content should be useful on its own for those who do not have experience approaching building a neural network in Keras.\n\n\n\n The dataset used is MNIST, and the model built is a Sequential network of Dense layers, intentionally avoiding CNNs for now.\n\nFirst are the imports and a few hyperparameter and data resizing variables.\n\nNext is a function for outputting some simple (but useful) metadata of our dataset. Since we will be using it a few times, it makes sense to put the few lines in a callable function. Reusable code is an end in and of itself :)\n\nNext we load our dataset (MNIST, using Keras' dataset utilities), and then use the function above to get some dataset metadata.\n\nTo feed MNIST instances into a neural network, they need to be reshaped, from a 2 dimensional image representation to a single dimension sequence. We also convert our class vector to a binary matrix (using ). This is accomplished below, after which the same function defined above is called again in order to show the effects of our data reshaping.\n\nBoth of the required data transformations have been accomplished. Now it's time to build, compile, and train a neural network. You can see more about this process in this previous post.\n\nThe only unorthodox (as far as using the Keras library standalone) step has been the use of the Live Loss Plot callback which outputs epoch-by-epoch loss functions and accuracies at the end of each epoch of training. Make sure you have installed Live Loss Plot prior to running the above code. We are also given the final loss and accuracy on our test dataset.\n\nAlmost done, but first let's output a summary of the neural network we built.\n\nThe full code is shown below:\n\nAs previously stated, this post doesn't cover anything innovative, but we will publish a series of upcoming posts using Keras which hopefully will be more interesting to the reader, and this common starting point should be beneficial for reference.\n\nAlso, for those looking for a streamlined approach to building neural networks using the Keras Sequential model, this post should serve as a basic guide to hitting all the important points along the way. What you do after training is up to you (at this point), but we will circle back around to this in the future as well.\n• Today I Built a Neural Network During My Lunch Break with Keras"
    },
    {
        "link": "https://machinelearningmastery.com/tutorial-first-neural-network-python-keras",
        "document": "Keras is a powerful and easy-to-use free open source Python library for developing and evaluating deep learning models.\n\nIt is part of the TensorFlow library and allows you to define and train neural network models in just a few lines of code.\n\nIn this tutorial, you will discover how to create your first deep learning neural network model in Python using Keras.\n\nKick-start your project with my new book Deep Learning With Python, including step-by-step tutorials and the Python source code files for all examples.\n• Update Feb/2017: Updated prediction example, so rounding works in Python 2 and 3.\n• Update Mar/2017: Updated example for the latest versions of Keras and TensorFlow.\n• Update Jul/2019: Expanded and added more useful resources.\n\nThere is not a lot of code required, but we will go over it slowly so that you will know how to create your own models in the future.\n\nThe steps you will learn in this tutorial are as follows:\n• Tie It All Together\n\nThis Keras tutorial makes a few assumptions. You will need to have:\n• Keras and a backend (Theano or TensorFlow) installed and configured\n\nIf you need help with your environment, see the tutorial:\n• How to Setup a Python Environment for Deep Learning\n\nCreate a new file called keras_first_network.py and type or copy-and-paste the code into the file as you go.\n\nThe first step is to define the functions and classes you intend to use in this tutorial.\n\nYou will use the NumPy library to load your dataset and two classes from the Keras library to define your model.\n\nThe imports required are listed below.\n\nYou can now load our dataset.\n\nIn this Keras tutorial, you will use the Pima Indians onset of diabetes dataset. This is a standard machine learning dataset from the UCI Machine Learning repository. It describes patient medical record data for Pima Indians and whether they had an onset of diabetes within five years.\n\nAs such, it is a binary classification problem (onset of diabetes as 1 or not as 0). All of the input variables that describe each patient are numerical. This makes it easy to use directly with neural networks that expect numerical input and output values and is an ideal choice for our first neural network in Keras.\n\nThe dataset is available here:\n\nDownload the dataset and place it in your local working directory, the same location as your Python file.\n\nSave it with the filename:\n\nTake a look inside the file; you should see rows of data like the following:\n\nYou can now load the file as a matrix of numbers using the NumPy function loadtxt().\n\nThere are eight input variables and one output variable (the last column). You will be learning a model to map rows of input variables (X) to an output variable (y), which is often summarized as y = f(X).\n\nThe variables can be summarized as follows:\n• Plasma glucose concentration at 2 hours in an oral glucose tolerance test\n\nOnce the CSV file is loaded into memory, you can split the columns of data into input and output variables.\n\nThe data will be stored in a 2D array where the first dimension is rows and the second dimension is columns, e.g., [rows, columns].\n\nYou can split the array into two arrays by selecting subsets of columns using the standard NumPy slice operator or “:”. You can select the first eight columns from index 0 to index 7 via the slice 0:8. We can then select the output column (the 9th variable) via index 8.\n\nYou are now ready to define your neural network model.\n\nNote: The dataset has nine columns, and the range 0:8 will select columns from 0 to 7, stopping before index 8. If this is new to you, then you can learn more about array slicing and ranges in this post:\n• How to Index, Slice, and Reshape NumPy Arrays for Machine Learning in Python\n\nModels in Keras are defined as a sequence of layers.\n\nWe create a Sequential model and add layers one at a time until we are happy with our network architecture.\n\nThe first thing to get right is to ensure the input layer has the correct number of input features. This can be specified when creating the first layer with the input_shape argument and setting it to for presenting the eight input variables as a vector.\n\nHow do we know the number of layers and their types?\n\nThis is a tricky question. There are heuristics that you can use, and often the best network structure is found through a process of trial and error experimentation (I explain more about this here). Generally, you need a network large enough to capture the structure of the problem.\n\nIn this example, let’s use a fully-connected network structure with three layers.\n\nFully connected layers are defined using the Dense class. You can specify the number of neurons or nodes in the layer as the first argument and the activation function using the activation argument.\n\nAlso, you will use the rectified linear unit activation function referred to as ReLU on the first two layers and the Sigmoid function in the output layer.\n\nIt used to be the case that Sigmoid and Tanh activation functions were preferred for all layers. These days, better performance is achieved using the ReLU activation function. Using a sigmoid on the output layer ensures your network output is between 0 and 1 and is easy to map to either a probability of class 1 or snap to a hard classification of either class with a default threshold of 0.5.\n\nYou can piece it all together by adding each layer:\n• The model expects rows of data with 8 variables (the input_shape=(8,) argument).\n• The first hidden layer has 12 nodes and uses the relu activation function.\n• The second hidden layer has 8 nodes and uses the relu activation function.\n• The output layer has one node and uses the sigmoid activation function.\n\nNote: The most confusing thing here is that the shape of the input to the model is defined as an argument on the first hidden layer. This means that the line of code that adds the first Dense layer is doing two things, defining the input or visible layer and the first hidden layer.\n\nNow that the model is defined, you can compile it.\n\nCompiling the model uses the efficient numerical libraries under the covers (the so-called backend) such as Theano or TensorFlow. The backend automatically chooses the best way to represent the network for training and making predictions to run on your hardware, such as CPU, GPU, or even distributed.\n\nWhen compiling, you must specify some additional properties required when training the network. Remember training a network means finding the best set of weights to map inputs to outputs in your dataset.\n\nYou must specify the loss function to use to evaluate a set of weights, the optimizer used to search through different weights for the network, and any optional metrics you want to collect and report during training.\n\nIn this case, use cross entropy as the loss argument. This loss is for a binary classification problems and is defined in Keras as “binary_crossentropy“. You can learn more about choosing loss functions based on your problem here:\n• How to Choose Loss Functions When Training Deep Learning Neural Networks\n\nWe will define the optimizer as the efficient stochastic gradient descent algorithm “adam“. This is a popular version of gradient descent because it automatically tunes itself and gives good results in a wide range of problems. To learn more about the Adam version of stochastic gradient descent, see the post:\n• Gentle Introduction to the Adam Optimization Algorithm for Deep Learning\n\nFinally, because it is a classification problem, you will collect and report the classification accuracy defined via the metrics argument.\n\nYou have defined your model and compiled it to get ready for efficient computation.\n\nNow it is time to execute the model on some data.\n\nYou can train or fit your model on your loaded data by calling the fit() function on the model.\n\nTraining occurs over epochs, and each epoch is split into batches.\n• Epoch: One pass through all of the rows in the training dataset\n• Batch: One or more samples considered by the model within an epoch before weights are updated\n\nOne epoch comprises one or more batches, based on the chosen batch size, and the model is fit for many epochs. For more on the difference between epochs and batches, see the post:\n• What is the Difference Between a Batch and an Epoch in a Neural Network?\n\nThe training process will run for a fixed number of epochs (iterations) through the dataset that you must specify using the epochs argument. You must also set the number of dataset rows that are considered before the model weights are updated within each epoch, called the batch size, and set using the batch_size argument.\n\nThis problem will run for a small number of epochs (150) and use a relatively small batch size of 10.\n\nThese configurations can be chosen experimentally by trial and error. You want to train the model enough so that it learns a good (or good enough) mapping of rows of input data to the output classification. The model will always have some error, but the amount of error will level out after some point for a given model configuration. This is called model convergence.\n\nThis is where the work happens on your CPU or GPU.\n\nNo GPU is required for this example, but if you’re interested in how to run large models on GPU hardware cheaply in the cloud, see this post:\n• How to Setup Amazon AWS EC2 GPUs to Train Keras Deep Learning Models\n\nYou have trained our neural network on the entire dataset, and you can evaluate the performance of the network on the same dataset.\n\nThis will only give you an idea of how well you have modeled the dataset (e.g., train accuracy), but no idea of how well the algorithm might perform on new data. This was done for simplicity, but ideally, you could separate your data into train and test datasets for training and evaluation of your model.\n\nYou can evaluate your model on your training dataset using the evaluate() function and pass it the same input and output used to train the model.\n\nThis will generate a prediction for each input and output pair and collect scores, including the average loss and any metrics you have configured, such as accuracy.\n\nThe evaluate() function will return a list with two values. The first will be the loss of the model on the dataset, and the second will be the accuracy of the model on the dataset. You are only interested in reporting the accuracy so ignore the loss value.\n\n6. Tie It All Together\n\nYou have just seen how you can easily create your first neural network model in Keras.\n\nLet’s tie it all together into a complete code example.\n\nYou can copy all the code into your Python file and save it as “keras_first_network.py” in the same directory as your data file “pima-indians-diabetes.csv“. You can then run the Python file as a script from your command line (command prompt) as follows:\n\nRunning this example, you should see a message for each of the 150 epochs, printing the loss and accuracy, followed by the final evaluation of the trained model on the training dataset.\n\nIt takes about 10 seconds to execute on my workstation running on the CPU.\n\nIdeally, you would like the loss to go to zero and the accuracy to go to 1.0 (e.g., 100%). This is not possible for any but the most trivial machine learning problems. Instead, you will always have some error in your model. The goal is to choose a model configuration and training configuration that achieve the lowest loss and highest accuracy possible for a given dataset.\n\nNote: If you try running this example in an IPython or Jupyter notebook, you may get an error.\n\nThe reason is the output progress bars during training. You can easily turn these off by setting verbose=0 in the call to the fit() and evaluate() functions; for example:\n\nNote: Your results may vary given the stochastic nature of the algorithm or evaluation procedure, or differences in numerical precision. Consider running the example a few times and compare the average outcome.\n\nWhat score did you get?\n\n Post your results in the comments below.\n\nNeural networks are stochastic algorithms, meaning that the same algorithm on the same data can train a different model with different skill each time the code is run. This is a feature, not a bug. You can learn more about this in the post:\n\nThe variance in the performance of the model means that to get a reasonable approximation of how well your model is performing, you may need to fit it many times and calculate the average of the accuracy scores. For more on this approach to evaluating neural networks, see the post:\n• How to Evaluate the Skill of Deep Learning Models\n\nFor example, below are the accuracy scores from re-running the example five times:\n\nYou can see that all accuracy scores are around 77%, and the average is 76.924%.\n\nThe number one question I get asked is:\n\nYou can adapt the above example and use it to generate predictions on the training dataset, pretending it is a new dataset you have not seen before.\n\nMaking predictions is as easy as calling the predict() function on the model. You are using a sigmoid activation function on the output layer, so the predictions will be a probability in the range between 0 and 1. You can easily convert them into a crisp binary prediction for this classification task by rounding them.\n\nAlternately, you can convert the probability into 0 or 1 to predict crisp classes directly; for example:\n\nThe complete example below makes predictions for each example in the dataset, then prints the input data, predicted class, and expected class for the first five examples in the dataset.\n\nRunning the example does not show the progress bar as before, as the verbose argument has been set to 0.\n\nAfter the model is fit, predictions are made for all examples in the dataset, and the input rows and predicted class value for the first five examples is printed and compared to the expected class value.\n\nYou can see that most rows are correctly predicted. In fact, you can expect about 76.9% of the rows to be correctly predicted based on your estimated performance of the model in the previous section.\n\nIf you would like to know more about how to make predictions with Keras models, see the post:\n• How to Make Predictions with Keras\n\nIn this post, you discovered how to create your first neural network model using the powerful Keras Python library for deep learning.\n\nSpecifically, you learned the six key steps in using Keras to create a neural network or deep learning model step-by-step, including:\n• How to define a neural network in Keras\n• How to compile a Keras model using the efficient numerical backend\n• How to train a model on data\n• How to evaluate a model on data\n• How to make predictions with the model\n\nDo you have any questions about Keras or about this tutorial?\n\n Ask your question in the comments, and I will do my best to answer.\n\nWell done, you have successfully developed your first neural network using the Keras deep learning library in Python.\n\nThis section provides some extensions to this tutorial that you might want to explore.\n• Tune the Model. Change the configuration of the model or training process and see if you can improve the performance of the model, e.g., achieve better than 76% accuracy.\n• Save the Model. Update the tutorial to save the model to a file, then load it later and use it to make predictions (see this tutorial).\n• Summarize the Model. Update the tutorial to summarize the model and create a plot of model layers (see this tutorial).\n• Separate, Train, and Test Datasets. Split the loaded dataset into a training and test set (split based on rows) and use one set to train the model and the other set to estimate the performance of the model on new data.\n• Plot Learning Curves. The fit() function returns a history object that summarizes the loss and accuracy at the end of each epoch. Create line plots of this data, called learning curves (see this tutorial).\n• Learn a New Dataset. Update the tutorial to use a different tabular dataset, perhaps from the UCI Machine Learning Repository.\n• Use Functional API. Update the tutorial to use the Keras Functional API for defining the model (see this tutorial).\n\nAre you looking for some more Deep Learning tutorials with Python and Keras?\n\nTake a look at some of these:\n• Regression Tutorial with the Keras Deep Learning Library in Python\n• How to Grid Search Hyperparameters for Deep Learning Models in Python With Keras\n\nHow did you go? Do you have any questions about deep learning?\n\n Post your questions in the comments below, and I will do my best to help."
    },
    {
        "link": "https://keras.io/api/models/sequential",
        "document": "# Note that you can also omit the initial `Input`.\n\n# In that case the model doesn't have any weights until the first call\n\n# to a training/evaluation method (since it isn't yet built):\n\n# Whereas if you specify an `Input`, the model gets built\n\n# continuously as you are adding layers:\n\n# When using the delayed-build pattern (no input shape specified), you can\n\n# choose to manually build your model by calling\n\n# Note that when using the delayed-build pattern (no input shape specified),\n\n# the model gets built the first time you call `fit`, `eval`, or `predict`,\n\n# or the first time you call the model on some input data.\n\n# This builds the model for the first time:"
    },
    {
        "link": "https://keras.io/api/losses",
        "document": "The purpose of loss functions is to compute the quantity that a model should seek to minimize during training.\n\nNote that all losses are available both via a class handle and via a function handle. The class handles enable you to pass configuration arguments to the constructor (e.g. ), and they perform reduction by default when used in a standalone way (see details below).\n\nThis is the class to subclass in order to create new custom losses.\n• reduction: Type of reduction to apply to the loss. In almost all cases this should be . Supported options are , , , or . sums the loss, and sum the loss and divide by the sample size, and sums the loss and divides by the sum of the sample weights. and perform no aggregation. Defaults to .\n• name: Optional name for the loss instance.\n• dtype: The dtype of the loss's computations. Defaults to , which means using . is a unless set to different value (via ). If a is provided, then the will be utilized.\n\nTo be implemented by subclasses:\n• : Contains the logic for loss calculation using , .\n\nA loss function is one of the two arguments required for compiling a Keras model:\n\nAll built-in loss functions may also be passed via their string identifier:\n\nLoss functions are typically created by instantiating a loss class (e.g. ). All losses are also provided as function handles (e.g. ).\n\nUsing classes enables you to pass configuration arguments at instantiation time, e.g.:\n• y_true: Ground truth values, of shape . For sparse loss functions, such as sparse categorical crossentropy, the shape should be\n• sample_weight: Optional acts as reduction weighting coefficient for the per-sample losses. If a scalar is provided, then the loss is simply scaled by the given value. If is a tensor of size , then the total loss for each sample of the batch is rescaled by the corresponding element in the vector. If the shape of is (or can be broadcasted to this shape), then each loss element of is scaled by the corresponding value of . (Note on : all loss functions reduce by 1 dimension, usually .)\n\nBy default, loss functions return one scalar loss value for each input sample in the batch dimension, e.g.\n\nHowever, loss class instances feature a constructor argument, which defaults to (i.e. average). Allowable values are \"sum_over_batch_size\", \"sum\", and \"none\":\n• \"sum_over_batch_size\" means the loss instance will return the average of the per-sample losses in the batch.\n• \"sum\" means the loss instance will return the sum of the per-sample losses in the batch.\n• \"none\" means the loss instance will return the full array of per-sample losses.\n\nNote that this is an important difference between loss functions like and default loss class instances like : the function version does not perform reduction, but by default the class instance does.\n\nWhen using , this difference is irrelevant since reduction is handled by the framework.\n\nHere's how you would use a loss class instance as part of a simple training loop:\n\nAny callable with the signature that returns an array of losses (one of sample in the input batch) can be passed to as a loss. Note that sample weighting is automatically supported for any such loss.\n\nLoss functions applied to the output of a model aren't the only way to create losses.\n\nWhen writing the method of a custom layer or a subclassed model, you may want to compute scalar quantities that you want to minimize during training (e.g. regularization losses). You can use the layer method to keep track of such loss terms.\n\nHere's an example of a layer that adds a sparsity regularization loss based on the L2 norm of the inputs:\n\nLoss values added via can be retrieved in the list property of any or (they are recursively retrieved from every underlying layer):\n\nThese losses are cleared by the top-level layer at the start of each forward pass – they don't accumulate. So always contain only the losses created during the last forward pass. You would typically use these losses by summing them before computing your gradients when writing a training loop.\n\nWhen using , such loss terms are handled automatically.\n\nWhen writing a custom training loop, you should retrieve these terms by hand from , like this:\n\nSee the documentation for more details."
    },
    {
        "link": "https://stackoverflow.com/questions/57840750/how-to-pass-weights-to-mean-squared-error-in-keras",
        "document": "I am trying to approach a regression problem, which is multi label with 8 labels for which i am using mean squared error loss, but the data set is imbalanced and i want to pass weights to the loss function.Currently i am compiling the model this way.\n\nCould someone please suggest if it is possible to add weights to mean squared error,if so, how could i do it?\n\nThe labels look like so"
    },
    {
        "link": "https://cnvrg.io/keras-custom-loss-functions",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/41707621/keras-mean-squared-error-loss-layer",
        "document": "I believe, after some conversations with coworkers, that I understand this situation and have a proper solution to the problem. Though I knew that Theano was providing lazy-evaluated tensor functions that were running the matrix operations on the GPU, what I did not realize was that Keras's loss functions are actually written in a way where the compiled theano execution graph is smart enough to cache certain values in order to properly back-propagate the loss values back throughout the network. Because of the type of network I'm creating, I dived into writing my own custom loss function without a completely understanding of how Theano actually treats the loss after it's been calculated by the function.\n\nFrom what I can tell, my concern was correct that Keras' use of the last axis is a problem. In my case, I have a fully-convolutional deep neural network and the input to the loss function is (x, 7, 16, 16) where the x is the size of the mini-batch. Normally, neural networks output a matrix where the first dimension is the mini-batch size and the second (usually last) dimension is the actual size of the output vector. Because of this, using the last axis in the output tensor to do the actual \"mean\" portion of the mean squared error is not correct. Instead, the axis should be 1 (in the case of zero-based indexing) because it's the 7 actual regression output features that need to be differentiated for back-propagation.\n\nI originally knew that the axis = -1 may not be correct and the reason I posted this question was because I couldn't quite explain why. It's been a long time since I've had to dive into the math behind the neural networks but when I finally did, I was able to resolve the gaps (I think). I'm posting this response here for future people who may experience this same problem or gap in their understanding of Theano's tensor framework."
    },
    {
        "link": "https://machinelearningmastery.com/custom-metrics-deep-learning-keras-python",
        "document": "The Keras library provides a way to calculate and report on a suite of standard metrics when training deep learning models.\n\nIn addition to offering standard metrics for classification and regression problems, Keras also allows you to define and report on your own custom metrics when training deep learning models. This is particularly useful if you want to keep track of a performance measure that better captures the skill of your model during training.\n\nIn this tutorial, you will discover how to use the built-in metrics and how to define and use your own metrics when training deep learning models in Keras.\n\nAfter completing this tutorial, you will know:\n• How Keras metrics work and how you can use them when training your models.\n• How to use regression and classification metrics in Keras with worked examples.\n• How to define and use your own custom metric in Keras with a worked example.\n\nKick-start your project with my new book Deep Learning With Python, including step-by-step tutorials and the Python source code files for all examples.\n\nThis tutorial is divided into 4 parts; they are:\n\nKeras allows you to list the metrics to monitor during the training of your model.\n\nYou can do this by specifying the “metrics” argument and providing a list of function names (or function name aliases) to the compile() function on your model.\n\nThe specific metrics that you list can be the names of Keras functions (like mean_squared_error) or string aliases for those functions (like ‘mse‘).\n\nMetric values are recorded at the end of each epoch on the training dataset. If a validation dataset is also provided, then the metric recorded is also calculated for the validation dataset.\n\nAll metrics are reported in verbose output and in the history object returned from calling the fit() function. In both cases, the name of the metric function is used as the key for the metric values. In the case of metrics for the validation dataset, the “val_” prefix is added to the key.\n\nBoth loss functions and explicitly defined Keras metrics can be used as training metrics.\n\nBelow is a list of the metrics that you can use in Keras on regression problems.\n\nThe example below demonstrates these 4 built-in regression metrics on a simple contrived regression problem.\n\nNote: Your results may vary given the stochastic nature of the algorithm or evaluation procedure, or differences in numerical precision. Consider running the example a few times and compare the average outcome.\n\nRunning the example prints the metric values at the end of each epoch.\n\nA line plot of the 4 metrics over the training epochs is then created.\n\nNote that the metrics were specified using string alias values [‘mse‘, ‘mae‘, ‘mape‘, ‘cosine‘] and were referenced as key values on the history object using their expanded function name.\n\nWe could also specify the metrics using their expanded name, as follows:\n\nWe can also specify the function names directly if they are imported into the script.\n\nYou can also use the loss functions as metrics.\n\nFor example, you could use the Mean squared Logarithmic Error (mean_squared_logarithmic_error, MSLE or msle) loss function as a metric as follows:\n\nBelow is a list of the metrics that you can use in Keras on classification problems.\n\nRegardless of whether your problem is a binary or multi-class classification problem, you can specify the ‘accuracy‘ metric to report on accuracy.\n\nBelow is an example of a binary classification problem with the built-in accuracy metric demonstrated.\n\nNote: Your results may vary given the stochastic nature of the algorithm or evaluation procedure, or differences in numerical precision. Consider running the example a few times and compare the average outcome.\n\nRunning the example reports the accuracy at the end of each training epoch.\n\nA line plot of accuracy over epoch is created.\n\nYou can also define your own metrics and specify the function name in the list of functions for the “metrics” argument when calling the compile() function.\n\nA metric I often like to keep track of is Root Mean Square Error, or RMSE.\n\nYou can get an idea of how to write a custom metric by examining the code for an existing metric.\n\nFor example, below is the code for the mean_squared_error loss function and metric in Keras.\n\nK is the backend used by Keras.\n\nFrom this example and other examples of loss functions and metrics, the approach is to use standard math functions on the backend to calculate the metric of interest.\n\nFor example, we can write a custom metric to calculate RMSE as follows:\n\nYou can see the function is the same code as MSE with the addition of the sqrt() wrapping the result.\n\nWe can test this in our regression example as follows. Note that we simply list the function name directly rather than providing it as a string or alias for Keras to resolve.\n\nNote: Your results may vary given the stochastic nature of the algorithm or evaluation procedure, or differences in numerical precision. Consider running the example a few times and compare the average outcome.\n\nRunning the example reports the custom RMSE metric at the end of each training epoch.\n\nAt the end of the run, a line plot of the custom RMSE metric is created.\n\nYour custom metric function must operate on Keras internal data structures that may be different depending on the backend used (e.g. tensorflow.python.framework.ops.Tensor when using tensorflow) rather than the raw yhat and y values directly.\n\nFor this reason, I would recommend using the backend math functions wherever possible for consistency and execution speed.\n\nThis section provides more resources on the topic if you are looking go deeper.\n\nIn this tutorial, you discovered how to use Keras metrics when training your deep learning models.\n• How Keras metrics works and how you configure your models to report on metrics during training.\n• How to use classification and regression metrics built into Keras.\n• How to define and report on your own custom metrics efficiently while training your deep learning models.\n\nDo you have any questions?\n\n Ask your questions in the comments below and I will do my best to answer."
    }
]