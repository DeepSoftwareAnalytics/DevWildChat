[
    {
        "link": "https://varonis.com/blog/port-scanning-techniques",
        "document": "A port scanner is a computer program that checks network ports for one of three possible statuses – open, closed, or filtered.\n\nPort scanners are valuable tools in diagnosing network and connectivity issues. However, attackers use port scanners to detect possible access points for infiltration and to identify what kinds of devices you are running on the network, like firewalls, proxy servers or VPN servers. Here, we’ll take you through the ins and outs of a port scanner, including:\n• Why you should run a port scan\n\nA port scanner sends a network request to connect to a specific TCP or UDP port on a computer and records the response.\n\nSo what a port scanner does is send a packet of network data to a port to check the current status. If you wanted to check to see if your web server was operating correctly, you would check the status of port 80 on that server to make sure it was open and listening.\n\nThe status helps network engineers diagnose network issues or application connectivity issues, or helps attackers find possible ports to use for infiltration into your network.\n\nA port is a virtual location where networking communication starts and ends (in a nutshell). For a more in-depth explanation, we need to establish a little background information. There are two kinds of network ports on each computer (65,536 of each for a total of 131,082 network ports):\n\nEach computer has an Internet Protocol (IP) address, which is how the network knows which computer to send packets to. If you send a packet to the IP address, the computer knows what port to route the packet to based on the application or packet contents. Each service running on the computer needs to “listen” on a designated port.\n\nThe first 1023 TCP ports are the well-known ports reserved for applications like FTP(21), HTTP(80), or SSH(22) and the Internet Assigned Numbers Authority (IANA) reserves these points to keep them standardized.\n\nTCP ports 1024 – 49151 are available for use by services or applications, and you can register them with IANA, so they are considered semi-reserved. Ports 49152 and higher are free to use.\n\nA port scanner sends a TCP or UDP network packet and asks the port about their current status. The three types of responses are below:\n• Open, Accepted: The computer responds and asks if there is anything it can do for you.\n• Closed, Not Listening: The computer responds that “This port is currently in use and unavailable at this time.”\n• Filtered, Dropped, Blocked: The computer doesn’t even bother to respond.\n\nPort scans generally occur early in the cyber kill chain, during reconnaissance and intrusion. Attackers use port scans to detect targets with open and unused ports that they can repurpose for infiltration, command and control, and data exfiltration or discover what applications run on that computer to exploit a vulnerability in that application.\n\nNmap is one of the most popular open-source port scanning tools available. Nmap provides a number of different port scanning techniques for different scenarios.\n\nThe simplest port scans are ping scans. A ping is an Internet Control Message Protocol (ICMP) echo request – you are looking for any ICMP replies, which indicates that the target is alive. A ping scan is an automated blast of many ICMP echo requests to different targets to see who responds. Ping scans aren’t technically port scanning techniques, as the best you can get back is that there is a computer on the other end, but it’s related and usually the first task before you do a port scan.\n\nAdministrators usually disable ICMP (ping) either on the firewall or on the router for external traffic, and they leave it open inside the network. It’s quick and easy to turn off this functionality and make it impossible to scout the network this way. However, ping is a useful troubleshooting tool, and turning it off makes tracking down network problems a little more difficult.\n\nOne of the more common and popular port scanning techniques is the TCP half-open port scan, sometimes referred to as an SYN scan. It’s a fast and sneaky scan that tries to find potential open ports on the target computer.\n\nSYN packets request a response from a computer, and an ACK packet is a response. In a typical TCP transaction, there is an SYN, an ACK from the service, and a third ACK confirming message received.\n\nThis scan is fast and hard to detect because it never completes the full TCP 3 way-handshake. The scanner sends an SYN message and just notes the SYN-ACK responses. The scanner doesn’t complete the connection by sending the final ACK: it leaves the target hanging.\n\nAny SYN-ACK responses are possibly open ports. An RST(reset) response means the port is closed, but there is a live computer here. No responses indicate SYN is filtered on the network. An ICMP (or ping) no response also counts as a filtered response.\n\nTCP half-open scans are the default scan in NMAP.\n\nThis port scanning technique is basically the same as the TCP Half-Open scan, but instead of leaving the target hanging, the port scanner completes the TCP connection.\n\nIt’s not as popular a technique as the TCP half-open. First, you have to send one more packet per scan, which increases the amount of noise you are making on the network. Second, since you complete the target’s connection, you might trip an alarm that the half-open scan wouldn’t.\n\nTarget systems are more likely to log a full TCP connection, and intrusion detection systems (IDS) are similarly more likely to trigger alarms on several TCP connections from the same host.\n\nThe advantage of the TCP connect scan is that a user doesn’t need the same level of privileges to run as they do to run the Half-open scan. TCP connect scans use the connection protocols any user needs to have to connect to other systems.\n\nUDP scans are slower than TCP scans, but there are plenty of exploitable UDP services that attackers can use, DNS exfiltration, for example. Defenders need to protect their UDP ports with the same voracity as their TCP ports.\n\nUDP scans work best when you send a specific payload to the target. For example, if you want to know if a DNS server is up, you would send a DNS request. For other UDP ports, the packet is sent empty. An ICMP unreachable response means the port is closed or filtered. If there is a service running, you might get a UDP response, which means the port is open. No response could mean that the port is open or filtered.\n\nOne more logical use of a UDP scan is to send a DNS request to UDP port 53 and see if you get a DNS reply. If you do get a response, you know that there is a DNS server on that computer. A UDP scan can be useful to scout for active services that way, and the Nmap port scanner is preconfigured to send requests for many standard services.\n\nTCP and UDP are the two most common protocols in use for Internet Protocol (IP) networks. Transmission Control Protocol (TCP) is a nice orderly transaction protocol: TCP sends each packet in order, complete with error checking, verification, and a 3-way handshake to confirm each packet is successful.\n\nUDP doesn’t have any error checking but tends to be faster. Live streaming and online video games often use UDP for this reason. UDP is a connectionless protocol, so programs that use UDP just send the data – and if you miss a packet, you will never get it again.\n\nSome port scans are easier to detect than others, so defenders need to know about these TCP flags that allow attackers to make their port scans difficult to detect.\n\nWhen you send a port scan with a packet and the FIN flag, you send the packet and not expecting a response. If you do get an RST, you can assume that the port is closed. If you get nothing back, that indicates the port is open. Firewalls are looking for SYN packets, so FIN packets slip through undetected.\n\nThe X-MAS scan sends a packet with the FIN, URG, and PUSH flags and expects an RST or no response, just like the FIN scan. There isn’t much practical use for this scan, but it does make the packet resemble a Christmas tree, so there is that.\n\nYou can also send packets with no flags, called a NULL packet, and the response is either an RST or nothing.\n\nThe good thing – for the hacker – about these scans is that they don’t usually show up in logs. More recent Intrusion Detection Software (IDS) and, of course, WireShark will catch these scans. The bad news is that if the target is a Microsoft OS, you will only see closed ports – but if you do find an open port, you can assume that it’s not a Windows machine. The most significant advantage of using these flags is that they can slip past firewalls, which makes the results more reliable.\n\nThe scans we discussed are the most common, but this is not an exhaustive list. Here are some more scans and the reasons to run them:\n• TCP Window scan: can differentiate open ports from closed ports but only works on a minority of systems\n• –scanflags: for the advanced user that wants to send their custom TCP flags in a scan, you can do that in Nmap\n\nThere are a few different techniques to detect port scans, which could be attempts to scan your network for vulnerabilities.\n\nOne is a dedicated port scan detector software application, like PortSentry or Scanlogd.\n\nNetcat includes port scanning functionality as well as the ability to create a simple chat server or program different packets for testing purposes.\n\nIntrusion detection systems (IDS) are another way to detect port scans. Look for an IDS that uses a wide variety of rules to detect the various kinds of port scans that aren’t merely threshold-based.\n\nWhy Should You Run a Port Scan?\n\nYou should run port scans proactively to detect and close all possible vulnerabilities that attackers might exploit.\n\nProactive port scanning is a good habit that you should repeat on a regular schedule. Also, review and audit all open ports to verify they are being used correctly and that any applications that do use open ports are secure and protected from known vulnerabilities.\n\nHere are some caveats to running port scans. Some services or computers might fail from a port scan. This is for internal systems more so than internet-facing systems, but it can happen.\n\nRunning port scans without authorization can be considered an aggressive action, and if you are on a shared network, you might scan a system that isn’t under your control, which isn’t good.\n\nPort scans are a critical part of building a good defense from cyberattacks. Attackers are using port scans, as well. You need to beat them to the punch and close down possible attack vectors and make their lives as difficult as possible.\n\nProtecting the perimeter is only part of the battle, however. You need to protect and monitor your data with the same vigilance you protect and monitor your ports. Varonis Data Security Platform helps you protect your data by building internal barriers to your most sensitive data and then monitoring all activity that could impact that data.\n\nCheck out our Live Cyber Attack lab to see how Varonis protects data from different attacks."
    },
    {
        "link": "https://nmap.org/book/man-port-scanning-techniques.html",
        "document": "SYN scan is the default and most popular scan option for good reasons. It can be performed quickly, scanning thousands of ports per second on a fast network not hampered by restrictive firewalls. It is also relatively unobtrusive and stealthy since it never completes TCP connections. SYN scan works against any compliant TCP stack rather than depending on idiosyncrasies of specific platforms as Nmap's FIN/NULL/Xmas, Maimon and idle scans do. It also allows clear, reliable differentiation between the , , and states. This technique is often referred to as half-open scanning, because you don't open a full TCP connection. You send a SYN packet, as if you are going to open a real connection and then wait for a response. A SYN/ACK indicates the port is listening (open), while a RST (reset) is indicative of a non-listener. If no response is received after several retransmissions, the port is marked as filtered. The port is also marked filtered if an ICMP unreachable error (type 3, code 0, 1, 2, 3, 9, 10, or 13) is received. The port is also considered open if a SYN packet (without the ACK flag) is received in response. This can be due to an extremely rare TCP feature known as a simultaneous open or split handshake connection (see ).\n\nTCP connect scan is the default TCP scan type when SYN scan is not an option. This is the case when a user does not have raw packet privileges. Instead of writing raw packets as most other scan types do, Nmap asks the underlying operating system to establish a connection with the target machine and port by issuing the system call. This is the same high-level system call that web browsers, P2P clients, and most other network-enabled applications use to establish a connection. It is part of a programming interface known as the Berkeley Sockets API. Rather than read raw packet responses off the wire, Nmap uses this API to obtain status information on each connection attempt. When SYN scan is available, it is usually a better choice. Nmap has less control over the high level call than with raw packets, making it less efficient. The system call completes connections to open target ports rather than performing the half-open reset that SYN scan does. Not only does this take longer and require more packets to obtain the same information, but target machines are more likely to log the connection. A decent IDS will catch either, but most machines have no such alarm system. Many services on your average Unix system will add a note to syslog, and sometimes a cryptic error message, when Nmap connects and then closes the connection without sending data. Truly pathetic services crash when this happens, though that is uncommon. An administrator who sees a bunch of connection attempts in her logs from a single system should know that she has been connect scanned.\n\nWhile most popular services on the Internet run over the TCP protocol, UDP services are widely deployed. DNS, SNMP, and DHCP (registered ports 53, 161/162, and 67/68) are three of the most common. Because UDP scanning is generally slower and more difficult than TCP, some security auditors ignore these ports. This is a mistake, as exploitable UDP services are quite common and attackers certainly don't ignore the whole protocol. Fortunately, Nmap can help inventory UDP ports. UDP scan is activated with the option. It can be combined with a TCP scan type such as SYN scan ( ) to check both protocols during the same run. UDP scan works by sending a UDP packet to every targeted port. For some common ports such as 53 and 161, a protocol-specific payload is sent to increase response rate, but for most ports the packet is empty unless the , , or options are specified. If an ICMP port unreachable error (type 3, code 3) is returned, the port is . Other ICMP unreachable errors (type 3, codes 0, 1, 2, 9, 10, or 13) mark the port as . Occasionally, a service will respond with a UDP packet, proving that it is . If no response is received after retransmissions, the port is classified as . This means that the port could be open, or perhaps packet filters are blocking the communication. Version detection ( ) can be used to help differentiate the truly open ports from the filtered ones. A big challenge with UDP scanning is doing it quickly. Open and filtered ports rarely send any response, leaving Nmap to time out and then conduct retransmissions just in case the probe or response were lost. Closed ports are often an even bigger problem. They usually send back an ICMP port unreachable error. But unlike the RST packets sent by closed TCP ports in response to a SYN or connect scan, many hosts rate limit ICMP port unreachable messages by default. Linux and Solaris are particularly strict about this. For example, the Linux 2.4.20 kernel limits destination unreachable messages to one per second (in ). Nmap detects rate limiting and slows down accordingly to avoid flooding the network with useless packets that the target machine will drop. Unfortunately, a Linux-style limit of one packet per second makes a 65,536-port scan take more than 18 hours. Ideas for speeding your UDP scans up include scanning more hosts in parallel, doing a quick scan of just the popular ports first, scanning from behind the firewall, and using to skip slow hosts.\n\nSCTP is a relatively new alternative to the TCP and UDP protocols, combining most characteristics of TCP and UDP, and also adding new features like multi-homing and multi-streaming. It is mostly being used for SS7/SIGTRAN related services but has the potential to be used for other applications as well. SCTP INIT scan is the SCTP equivalent of a TCP SYN scan. It can be performed quickly, scanning thousands of ports per second on a fast network not hampered by restrictive firewalls. Like SYN scan, INIT scan is relatively unobtrusive and stealthy, since it never completes SCTP associations. It also allows clear, reliable differentiation between the , , and states. This technique is often referred to as half-open scanning, because you don't open a full SCTP association. You send an INIT chunk, as if you are going to open a real association and then wait for a response. An INIT-ACK chunk indicates the port is listening (open), while an ABORT chunk is indicative of a non-listener. If no response is received after several retransmissions, the port is marked as filtered. The port is also marked filtered if an ICMP unreachable error (type 3, code 0, 1, 2, 3, 9, 10, or 13) is received.\n\nThese three scan types (even more are possible with the option described in the next section) exploit a subtle loophole in the TCP RFC to differentiate between and ports. Page 65 of RFC 793 says that “if the [destination] port state is CLOSED .... an incoming segment not containing a RST causes a RST to be sent in response.” Then the next page discusses packets sent to open ports without the SYN, RST, or ACK bits set, stating that: “you are unlikely to get here, but if you do, drop the segment, and return.” When scanning systems compliant with this RFC text, any packet not containing SYN, RST, or ACK bits will result in a returned RST if the port is closed and no response at all if the port is open. As long as none of those three bits are included, any combination of the other three (FIN, PSH, and URG) are OK. Nmap exploits this with three scan types: Does not set any bits (TCP flag header is 0) Sets the FIN, PSH, and URG flags, lighting the packet up like a Christmas tree. These three scan types are exactly the same in behavior except for the TCP flags set in probe packets. If a RST packet is received, the port is considered , while no response means it is . The port is marked if an ICMP unreachable error (type 3, code 0, 1, 2, 3, 9, 10, or 13) is received. The key advantage to these scan types is that they can sneak through certain non-stateful firewalls and packet filtering routers. Another advantage is that these scan types are a little more stealthy than even a SYN scan. Don't count on this though—most modern IDS products can be configured to detect them. The big downside is that not all systems follow RFC 793 to the letter. A number of systems send RST responses to the probes regardless of whether the port is open or not. This causes all of the ports to be labeled . Major operating systems that do this are Microsoft Windows, many Cisco devices, BSDI, and IBM OS/400. This scan does work against most Unix-based systems though. Another downside of these scans is that they can't distinguish ports from certain ones, leaving you with the response .\n\nWindow scan is exactly the same as ACK scan except that it exploits an implementation detail of certain systems to differentiate open ports from closed ones, rather than always printing when a RST is returned. It does this by examining the TCP Window field of the RST packets returned. On some systems, open ports use a positive window size (even for RST packets) while closed ones have a zero window. So instead of always listing a port as when it receives a RST back, Window scan lists the port as or if the TCP Window value in that reset is positive or zero, respectively. This scan relies on an implementation detail of a minority of systems out on the Internet, so you can't always trust it. Systems that don't support it will usually return all ports . Of course, it is possible that the machine really has no open ports. If most scanned ports are but a few common port numbers (such as 22, 25, 53) are , the system is most likely susceptible. Occasionally, systems will even show the exact opposite behavior. If your scan shows 1,000 open ports and three closed or filtered ports, then those three may very well be the truly open ones.\n\nTruly advanced Nmap users need not limit themselves to the canned scan types offered. The option allows you to design your own scan by specifying arbitrary TCP flags. Let your creative juices flow, while evading intrusion detection systems whose vendors simply paged through the Nmap man page adding specific rules! The argument can be a numerical flag value such as 9 (PSH and FIN), but using symbolic names is easier. Just mash together any combination of , , , , , and . For example, sets everything, though it's not very useful for scanning. The order these are specified in is irrelevant. In addition to specifying the desired flags, you can specify a TCP scan type (such as or ). That base type tells Nmap how to interpret responses. For example, a SYN scan considers no-response to indicate a port, while a FIN scan treats the same as . Nmap will behave the same way it does for the base scan type, except that it will use the TCP flags you specify instead. If you don't specify a base type, SYN scan is used.\n\nIP protocol scan allows you to determine which IP protocols (TCP, ICMP, IGMP, etc.) are supported by target machines. This isn't technically a port scan, since it cycles through IP protocol numbers rather than TCP or UDP port numbers. Yet it still uses the option to select scanned protocol numbers, reports its results within the normal port table format, and even uses the same underlying scan engine as the true port scanning methods. So it is close enough to a port scan that it belongs here. Besides being useful in its own right, protocol scan demonstrates the power of open-source software. While the fundamental idea is pretty simple, I had not thought to add it nor received any requests for such functionality. Then in the summer of 2000, Gerhard Rieger conceived the idea, wrote an excellent patch implementing it, and sent it to the announce mailing list (then called nmap-hackers). I incorporated that patch into the Nmap tree and released a new version the next day. Few pieces of commercial software have users enthusiastic enough to design and contribute their own improvements! Protocol scan works in a similar fashion to UDP scan. Instead of iterating through the port number field of a UDP packet, it sends IP packet headers and iterates through the eight-bit IP protocol field. The headers are usually empty, containing no data and not even the proper header for the claimed protocol. The exceptions are TCP, UDP, ICMP, SCTP, and IGMP. A proper protocol header for those is included since some systems won't send them otherwise and because Nmap already has functions to create them. Instead of watching for ICMP port unreachable messages, protocol scan is on the lookout for ICMP protocol unreachable messages. If Nmap receives any response in any protocol from the target host, Nmap marks that protocol as . An ICMP protocol unreachable error (type 3, code 2) causes the protocol to be marked as while port unreachable (type 3, code 3) marks the protocol . Other ICMP unreachable errors (type 3, code 0, 1, 9, 10, or 13) cause the protocol to be marked (though they prove that ICMP is at the same time). If no response is received after retransmissions, the protocol is marked\n\nAn interesting feature of the FTP protocol (RFC 959) is support for so-called proxy FTP connections. This allows a user to connect to one FTP server, then ask that files be sent to a third-party server. Such a feature is ripe for abuse on many levels, so most servers have ceased supporting it. One of the abuses this feature allows is causing the FTP server to port scan other hosts. Simply ask the FTP server to send a file to each interesting port of a target host in turn. The error message will describe whether the port is open or not. This is a good way to bypass firewalls because organizational FTP servers are often placed where they have more access to other internal hosts than any old Internet host would. Nmap supports FTP bounce scan with the option. It takes an argument of the form : @ : . is the name or IP address of a vulnerable FTP server. As with a normal URL, you may omit : , in which case anonymous login credentials (user: password: ) are used. The port number (and preceding colon) may be omitted as well, in which case the default FTP port (21) on is used. This vulnerability was widespread in 1997 when Nmap was released, but has largely been fixed. Vulnerable servers are still around, so it is worth trying when all else fails. If bypassing a firewall is your goal, scan the target network for port 21 (or even for any FTP services if you scan all ports with version detection) and use the NSE script. Nmap will tell you whether the host is vulnerable or not. If you are just trying to cover your tracks, you don't need to (and, in fact, shouldn't) limit yourself to hosts on the target network. Before you go scanning random Internet addresses for vulnerable FTP servers, consider that sysadmins may not appreciate you abusing their servers in this way."
    },
    {
        "link": "https://kentik.com/kentipedia/ping-command-in-network-troubleshooting-and-monitoring",
        "document": "Understanding the Ping Command in Network Troubleshooting and Monitoring\n\nComputer networks have become the backbone of nearly every business operation. As a network administrator or engineer, understanding the tools at your disposal for monitoring and troubleshooting these networks is crucial. This article focuses on the ping command, an integral tool in network troubleshooting and monitoring.\n\nPing, named for the sound of a returned sonar pulse, is a fundamental tool for testing connectivity in computer networks. It sends Internet Control Message Protocol (ICMP) Echo Request messages to a target host (the device being tested) and waits for a response. If the connection is sound, the host responds with an ICMP Echo Reply. The round-trip time (RTT), the duration for a request to reach the host and for the reply to return, indicates network latency and performance.\n\nDespite its simplicity, ping plays a significant role in network diagnostics. However, interpreting the results requires understanding of the factors influencing the round-trip time. Although often referred to as an acronym for “Packet Internet or Inter-Network Groper”, this is a “backronym” created after the fact and wasn’t the original intention of the name.\n\nWhile ping is a powerful tool, it’s also essential to understand its limitations. The round-trip time reported includes not just network latency, but also processing delay at the host and any delay introduced by intermediate devices like routers. Therefore, while it’s a useful indicator, it’s not the sole metric to rely upon for network performance.\n\nTo accurately interpret the results produced by the ping command, network administrators need to understand the journey an ICMP message takes and the various factors influencing its round-trip time. With this knowledge, ping becomes an invaluable tool in any network administrator’s toolkit for its ability to quickly diagnose connectivity issues and evaluate network performance. It forms the basis of more advanced network analysis and, despite its simplicity, plays a significant role in maintaining the smooth operation of modern networks.\n\nThe operation of the ping command is relatively straightforward, but the details are essential for understanding its use and limitations. When you issue a ping command to a specific address, your device is sending a series of ICMP Echo Request messages to that address. These messages are small data packets that ask for a response.\n\nThe ICMP protocol, a part of the Internet Protocol suite, is used by network devices like routers to send error messages and operational information. It’s crucial for network troubleshooting, which is where the ping tool comes in.\n\nOnce the ICMP Echo Request leaves your device, it travels through the network, passing through routers and switches until it reaches the destination host. At this point, several outcomes could happen:\n• If the host is available and accepts ICMP requests, it will receive the echo request and respond with an ICMP Echo Reply. This reply signals that the host is reachable, and the connection between your device and the host is stable.\n• If the host is offline or doesn’t accept ICMP requests, no reply will be received. After a certain period (timeout), your device assumes the echo request has failed, which is often an indication of a network problem.\n• If the echo request packet doesn’t reach the host within a certain time due to network latency, it will be discarded, and your device will be informed of the packet loss.\n\nThe return journey of the ICMP Echo Reply (or the lack thereof) provides vital information about the network. The time taken from sending the request to receiving a reply is measured and reported as the Round-Trip Time (RTT). This measurement is a direct reflection of the latency between your device and the target host. Lower RTT values indicate a faster, more responsive network connection, while higher values may signify potential network issues, such as congestion or improper configuration.\n\nHowever, it’s important to understand that the RTT also includes processing delay at the host and any delay introduced by intermediate devices like routers. Therefore, while a useful indicator, it’s not the sole metric to rely upon for network performance.\n\nThe ping command typically sends multiple echo requests (usually four) to calculate an average RTT. This process mitigates the impact of any anomalies in the network, such as temporary spikes in traffic, that might skew the results of a single echo request.\n\nUltimately, the ping command’s simplicity and the direct feedback it provides make it a fundamental tool in network troubleshooting and management. Whether you’re assessing network connectivity, diagnosing issues, or evaluating network performance, understanding how ping works is key to interpreting its output accurately and effectively.\n• ICMP (Internet Control Message Protocol): This is a supporting protocol in the Internet protocol suite that is used by network devices, like routers, to send error messages indicating that a requested service is not available or that a host or router could not be reached.\n• RTT (Round-Trip Time): This is the duration it takes for a signal to travel from a source to a destination, and for an acknowledgment of that signal to be returned to the source. In the context of ’ping’, it’s the time it takes for an ICMP Echo Request to reach the target host and for the ICMP Echo Reply to return.\n• TTL (Time to Live): This is a value in an IP packet that tells network routers whether or not the packet should be discarded. It prevents a packet from circulating indefinitely. Each router that a packet passes through decreases the TTL value by at least one. If the TTL reaches zero, the packet is discarded, and an ICMP “Time Exceeded” message is sent back to the origin.\n• Packet Loss: This refers to the situation where one or more data packets fail to reach their intended destination, typically a host or server. High levels of packet loss can negatively impact network performance and reliability.\n• IPv4 and IPv6: Internet Protocol version 4 (IPv4) and version 6 (IPv6) are versions of the internet protocol that are widely used in data communication over different kinds of networks. IPv6 was developed due to the anticipated exhaustion of addresses available in IPv4.\n• ICMPv6: This is the implementation of the Internet Control Message Protocol for IPv6. It includes more features and is more tightly integrated with IPv6 than ICMP is with IPv4.\n\nWhen you execute a ping command, the results are presented in a series of text lines representing the response to each ICMP echo request. Here’s an example of a ping command:\n\nIn some systems, ping might automatically default to IPv6 results. The results shown below are from the output of a ping command using IPv4. In systems where ping defaults to the IPv6 version, the -4 flag can be used to force the use of IPv4, for example:\n\nInterpreting the output of ping correctly is essential for understanding a network’s status and diagnosing any issues. Let’s break down a typical ping output:\n• Pinging: The command begins by stating what host it is pinging. It shows both the domain name and the corresponding IP address.\n• Reply from: Each subsequent line starts with “Reply from” followed by the IP address of the target host, signifying a successful echo reply. If a reply is not received within a certain timeframe, you’ll see a “Request timed out” message instead.\n• Bytes: The “bytes” value represents the size of the ICMP echo reply packet received. This size typically matches the size of the echo request packet sent, though it can vary depending on network conditions and configurations.\n• Time: This value represents the Round-Trip Time (RTT) for each ICMP echo request-reply pair, measured in milliseconds. It reflects the total time taken for the echo request to reach the target host and for the reply to return to the source.\n• TTL: The “TTL” (Time to Live) is a value in an IP packet that tells network routers whether or not the packet should be discarded. Each router that a packet passes through decreases the TTL value by at least one. If the TTL reaches zero, the packet is discarded, and an ICMP “Time Exceeded” message is sent back to the origin. The TTL in a ping response is the remaining TTL value from the original packet after reaching the target and returning. A lower-than-expected TTL can indicate a longer route or a misconfigured network device.\n• Ping statistics: At the end of the ping output, you’ll find a summary of the command’s results. This summary includes the total number of packets sent, received, and lost, providing an immediate overview of packet loss.\n• Approximate round trip times: The final lines of output give you the minimum, maximum, and average RTT for all echo requests. This data is particularly useful in gauging network performance and latency.\n\nUnderstanding the information contained within the ping output is crucial for diagnosing network problems, monitoring network performance, and ensuring connectivity. The more adept you become at interpreting ping outputs, the more effectively you can manage and troubleshoot your network.\n\nWith the expansion of the internet and an increasing number of connected devices, the Internet Protocol version 6 (IPv6) has been developed to replace the older IPv4. IPv6 has a vastly larger address space than IPv4, which helps accommodate the growing number of internet users and devices.\n\nWhen it comes to network troubleshooting and diagnostics, ping continues to be a valuable tool in IPv6 networks, just as it is in IPv4 networks. The ping command in IPv6 operates similarly to how it does in IPv4. However, there are some important distinctions to be aware of.\n\nThe ping command for IPv6 networks is typically ping6. Depending on the system or platform you’re using, ping may automatically use IPv6 if available. However, in some systems, ping6 must be used explicitly to send ICMP Echo Requests to IPv6 addresses. Here’s an example of a ping6 command:\n\nThe output from the ping6 command provides similar information as ping in IPv4 networks. It includes the round-trip time for ICMP Echo Requests and Replies, as well as any packet loss. However, you’ll see IPv6 addresses instead of IPv4 addresses.\n\nOne of the significant differences between IPv4 and IPv6 when it comes to the ping command is the ICMP version used. While IPv4 uses ICMP, IPv6 uses ICMPv6 (ICMP version 6). ICMPv6 includes more features and is more tightly integrated with IPv6 than ICMP is with IPv4.\n\nWhile the ping6 command is essential in IPv6 network troubleshooting, other tools can provide more detailed information about the IPv6 network path, such as traceroute6 or MTR. These tools, similar to their IPv4 counterparts, can help network administrators identify where packet loss or latency is occurring in an IPv6 network.\n\nDespite the differences between IPv4 and IPv6, the ping command continues to be a valuable tool for network troubleshooting and monitoring. As networks transition to IPv6, understanding how to use ping6 and interpret its output is crucial for effective network management.\n\nPing finds its use in several practical scenarios in network management:\n• : The simplest and most common use of ping is to verify that a machine can connect to a network resource, whether local or on the internet.\n• : By sending pings to various points in a network, a network engineer can identify where the problem lies.\n• : By comparing the RTT values, one can assess the latency in the network and identify possible performance issues.\n• : Regular ping tests can help monitor the overall health and performance of a network.\n\nThe ping tool serves as a frontline defense in network troubleshooting, helping to identify and resolve network connectivity issues. While its operation seems straightforward, knowing how to interpret the responses in various scenarios can prove invaluable.\n\nIn essence, a successful ping means that the network connection between the source and target is working correctly. However, an unsuccessful ping is where the troubleshooting begins. Here are several potential scenarios and their interpretations:\n• Request Timed Out: If you see this message, it usually means that there is no network connection to the host. This could be because the host is offline, there’s an issue with the network link, or a firewall is blocking the connection.\n• Destination Host Unreachable: This indicates that the remote server isn’t responding, which can be caused by several reasons such as a wrong IP address, issues with the routing table, or problems with the network interface.\n• Packet Loss: If you observe that some ping requests are successful while others are timing out, this can indicate a weak or unstable network connection, or network congestion.\n\nOnce an issue is identified, network engineers can then further diagnose the problem. For instance, if the host is unreachable, additional tests can be run to determine if the problem is on the local network or on the internet. Similarly, if there’s packet loss, further investigation might be required to pinpoint the source of network congestion.\n\nPing is often used in combination with other diagnostic tools for a more comprehensive network analysis. For example, a traceroute can be used in conjunction with ping to determine the network path and identify where packet loss is occurring. Similarly, tools like MTR combine the functionality of ping and traceroute to provide a continuous, real-time analysis of the network path.\n\nOne thing to note, however, is that some modern systems limit the response to ping ICMP requests or may not respond at all as a security measure. In such cases, ping may not provide accurate feedback on the network’s state.\n\nWhen using ping for troubleshooting, it’s important to understand its limitations and the context in which it’s used. Nonetheless, it continues to be an essential tool in a network engineer’s toolkit, providing quick and immediate feedback on network connectivity and performance.\n\nAs network environments grow increasingly complex, leveraging ping in your troubleshooting methodology can help reduce downtime and maintain network performance. Ultimately, your understanding of the ping command will augment your network troubleshooting capabilities, enabling you to rapidly diagnose and resolve network issues.\n\nIncorporating ping into your network management process provides several benefits:\n• : By continuously monitoring ping response times, network administrators can identify latency issues early and take corrective measures.\n• : Regular ping monitoring helps in the timely detection of network errors, enabling quick resolution and minimizing downtime.\n• : Ping is a quick way to test connectivity to network devices or internet resources.\n\nIn addition to these benefits, proactive ping monitoring can also facilitate the setting up of alerts based on specific ping behaviors for early detection and resolution of potential network issues. Some scenarios include:\n• : Administrators can set an alert to be triggered if the Round-Trip Time (RTT) of a ping exceeds a certain threshold. This helps maintain optimal network performance and user experience.\n• : These can indicate a complete loss of connectivity with a host or a network segment. Setting alerts for continuous failures aids in maintaining network uptime and quickly identifying points of failure.\n• : An excessive number of ICMP echo requests or unusual patterns can often be a precursor to a DDoS attack. Setting alerts for such anomalies can help detect and mitigate potential attacks before they affect the network’s performance.\n\nSetting up these alerts typically involves the use of network monitoring or network observability solutions that support ping and other network diagnostics tools. These platforms allow administrators to customize their alerting preferences based on their networks’ unique needs, including monitoring packet loss and latency in the cloud.\n\nAutomating ping tests allows for regular and reliable performance data, streamlining network management. Using synthetic monitoring tools like Kentik Synthetics offers a robust and versatile approach to this automation.\n\nSynthetic monitoring involves generating and observing traffic on your network to simulate user behavior, and Kentik Synthetics’ tests offer a diverse range of options tailored to your needs. These can range from testing internal network infrastructure, connectivity to external applications or services, and even targeted DNS testing.\n\nSpecifically, Kentik enables the automation of ping and traceroute tests through multiple test types, including Network Meshes and Grids, Network & Routing Tests, and Autonomous Tests.\n• Network Meshes & Grids test the performance of a network between specified agents, be they within your organization’s infrastructure or in Kentik’s global network. This can be particularly useful for assessing inter-connectivity and performance across disparate areas of your network.\n• Network & Routing Tests allow you to monitor performance from one or more chosen agents towards any IP address, hostname, SaaS service, or individual agent. This can help quickly identify and troubleshoot connectivity issues to specific services or endpoints.\n• Autonomous Tests offer a more intelligent approach, using actual traffic patterns on your network to guide testing. Kentik will analyze traffic patterns and intelligently select IPs to test from or towards, ensuring efficient use of resources and more targeted testing.\n\nAdditionally, synthetic monitoring enables automated alerting based on the results of these tests, providing immediate notification of any potential network performance issues. This facilitates prompt action to mitigate any impacts on user experience or service availability.\n\nThrough these capabilities, automating ping tests with Kentik Synthetics provides you with constant network performance insights, allows for early identification of network anomalies, and supports proactive management of your network health, resulting in improved service reliability and user satisfaction.\n\nWhile ping is a simple and effective tool for basic network diagnostics, it does have its limitations. For instance, it cannot diagnose all types of network problems, particularly those not related to connectivity. Ping operates at the Internet Control Message Protocol (ICMP) level, which means it can only inform us whether a host is reachable or not. It cannot provide information about higher-level issues such as problems with specific services or applications running on the host.\n\nAnother limitation is that ping requests can be blocked by firewalls or other network security measures. Some network administrators set their systems to ignore or drop ICMP Echo requests (the type of packet ping uses) as a defensive measure against certain types of network attacks. This can result in a host appearing to be down or unreachable when it is actually functioning normally, thereby providing false negatives.\n\nHowever, these limitations don’t mean that ping isn’t useful. Instead, they underline the importance of using ping in conjunction with other tools for a comprehensive assessment of network performance.\n\nOne such tool is traceroute, which shows the path that packets take from the source to the destination. Traceroute is useful when you’re trying to pinpoint network delays or find out where packets are being lost or dropped. It provides a hop-by-hop breakdown of the network path, giving more detailed insights into potential issues along the route.\n\nMTR (My Traceroute) is another valuable tool that combines the functionality of ping and traceroute. MTR sends a sequence of ICMP ECHO requests to the destination and simultaneously tracks the route that the packets take. It continually pings all the hops along the path, thereby providing a detailed, real-time analysis of network performance.\n\nEach of these tools provides a different perspective on the network, and using them together can help you paint a comprehensive picture of network health and performance. While ping is great for quick checks of network connectivity and latency, traceroute and MTR can help you dig deeper into problems and identify issues that ping might miss.\n\nHow Kentik Can Help with Network Troubleshooting and Management\n\nPing is a fundamental tool in the realm of network management, offering invaluable help in network monitoring and troubleshooting. Its effectiveness can be augmented with advanced tools and methodologies, like those provided by Kentik’s comprehensive network observability platform.\n\nTools like Kentik Synthetics offer automated, context-specific testing, providing a powerful means of automating ping and traceroute tests. With these tools and strategies, businesses can ensure a smooth, high-performing network that meets the demands of today’s applications. Discover the benefits of Kentik’s network observability platform for yourself — start a free trial or request a personalized demo today."
    },
    {
        "link": "https://medium.com/@Z3pH7/tryhackme-nmap-the-basics-cyber-security-101-thm-504597d69b37",
        "document": "Hey everyone! TryHackMe just announced the NEW Cyber Security 101 learning path, and there are tons of giveaways this time! This article might help you out, but I’ve kept the summary short for easy understanding. Enjoy hacking!\n\nImagine the scenario where you are connected to a network and using various network resources, such as email and web browsing. Two questions arise. The first is how we can discover other live devices on this network or on other networks. The second is how we can find out the network services running on these live devices; examples include SSH and web servers.\n\nOne approach is to do it manually. If asked to uncover which devices are live on the network, one can use basic tools such as , , or some other tool to check the 254 IP addresses. Although this network has 256 IP addresses, we counted 254 IP addresses because two are reserved. Each tool has its limitations. For example, won’t give any information if the target system’s firewall blocks ICMP traffic. Moreover, only works if your device is connected to the same network, i.e., over Ethernet or WiFi. In brief, this will be a significant waste of time without an advanced and reliable tool. With the right tools and enough time, one would have a list of the live hosts on a target network. We need a flexible tool that can handle the various scenarios.\n\nDiscovering the running services on a specific host is equally time-consuming if one relies on manual solutions or inefficient scripts. For instance, one can use to try one port after the other; however, with thousands of ports to scan, this can be a very time-consuming task, even if a script was created to automate the connection attempts.\n\nA very efficient solution that can solve the above two requirements and many more is the Nmap network scanner. Nmap is an open-source network scanner that was first published in 1997. Since then, plenty of features and options have been added. It is a powerful and flexible network scanner that can be adapted to various scenarios and setups.\n\nThis room aims to provide you with the basics necessary to use the Nmap scanner or simply . In particular, you will learn how to:\n• Distinguish the different types of port scans\n• Detect the versions of the running services\n\nThe user should be familiar with the TCP/IP model, the related concepts, and its various protocols. The following rooms provide the necessary knowledge to make the best use of this room:\n\nNmap can be used to discover which hosts are currently online on a network. Nmap allows you to specify targets in various ways:\n• IP range: Use a range like to scan multiple IP addresses.\n• IP subnet: Use CIDR notation (e.g., ) to scan all IPs in a subnet.\n• Hostname: Use a domain or host name (e.g., ) to target a specific machine.\n\nBefore we start, we should mention that Nmap uses multiple ways to specify its targets:\n• IP range using : If you want to scan all the IP addresses from 192.168.0.1 to 192.168.0.10, you can write\n• IP subnet using : If you want to scan a subnet, you can express it as , and this would be equivalent to\n• Hostname: You can also specify your target by hostname, for example,\n\nLet’s say you want to discover the online hosts on a network. Nmap offers the option, i.e., ping scan. However, don’t expect this to be limited like . Let’s see this in action.\n\nIn this context, we use the term “local” to refer to the network we are directly connected to, such as an Ethernet or WiFi network. In the first demonstration, we will scan the WiFi network to which we are connected. Our IP address is , and we are scanning the network. The command and its output are shown in the terminal below.\n\nThis will perform a ping scan and show you which devices are active on your local network. Nmap sends ARP requests to find devices on a local network. For remote networks, it uses ICMP echo requests (ping) and may also try SYN and ACK packets.\n\nConsider the case of a “remote” network. In this context, “remote” means that at least one router separates our system from this network. As a result, all our traffic to the target systems must go through one or more routers. Unlike scanning a local network, we cannot send an ARP request to the target.\n\nOur system has the IP address and belongs to the network. In the terminal below we scan the target network where there are two or more routers (hops) separate our local system from the target hosts.\n\nThe Nmap output shows that five hosts are up. But how did Nmap discover this? To learn more, let’s see some sample traffic generated by Nmap. In the screenshot below, we can see the responses from two hosts:\n• is live and responded to the ICMP echo (ping) request.\n• seems down. Nmap sent two ICMP echo (ping) requests, two ICMP timestamp requests, two TCP packets to port 443 with the SYN flag set, and two TCP packets to port 80 with the ACK flag set. The target didn’t respond to any. We observe several ICMP destination unreachable packets from the router.\n\nIt is worth noting that we can have more control over how Nmap discovers live hosts such as , , for TCP SYN, TCP ACK, and UDP discovery via the given ports. However, this is beyond the scope of this room.\n\nAs a final point, Nmap offers a list scan with the option . This scan only lists the targets to scan without actually scanning them. For example, will list the 256 targets that will be scanned. This option helps confirm the targets before running the actual scan.\n\nNmap can also be used to discover which services are listening on the live hosts by scanning for open ports. Common services include:\n\nTCP Scan:\n\nThe simplest way to check if a TCP port is open is to try to connect to it. This can be done with a connect scan using the option, which completes a full TCP three-way handshake.\n\nIn the screenshot below, our scanning machine has the IP address and the target system has TCP port 22 open and port 23 closed. In the part marked with 1, you can see how the TCP three-way handshake was completed and later torn down with a TCP RST-ACK packet by Nmap. The part marked with 2 shows a connection attempt to a closed port, and the target system responded with a TCP RST-ACK packet.\n\nSYN Scan (Stealth Scan):\n\nThe SYN scan ( ) is faster and less likely to be logged because it only sends the initial SYN packet and does not complete the handshake. This is useful for being stealthy.\n\nIn the screenshot below, we scan the same system with port 22 open. The part marked with 1 shows the listening service replying with a TCP SYN-ACK packet. However, Nmap responded with a TCP RST packet instead of completing the TCP three-way handshake. The part marked with 2 shows a TCP connection attempt to a closed port. In this case, the packet exchange is the same as in the connect scan.\n\nSome services, like DNS, use UDP instead of TCP. UDP does not require a handshake, making it more challenging to detect open ports, but Nmap can scan UDP ports using the option.\n\nNmap offers the option to scan for UDP services. Because UDP is simpler than TCP, we expect the traffic to differ. The screenshot below shows several ICMP destination unreachable (port unreachable) responses as Nmap sends UDP packets to closed UDP ports.\n\nNmap scans the most common 1,000 ports by default. However, this might not be what you are looking for. Therefore, Nmap offers you a few more options.\n• is for Fast mode, which scans the 100 most common ports (instead of the default 1000).\n• allows you to specify a range of ports to scan. For example, scans from port 10 to port 1024, while will scan all the ports between 1 and 25. Note that scans all the ports and is equivalent to and is the best option if you want to be as thorough as possible.\n\nOptionExplanation TCP connect scan – complete three-way handshake TCP SYN – only first step of the three-way handshake UDP scan Fast mode – scans the 100 most common ports Specifies a range of port numbers – scans all the ports\n\nNmap can also guess the operating system of a target using the -O option. It compares network responses to known fingerprints and outputs an estimated OS version.\n\nThat’s actually true. However, there is no perfectly accurate OS detector. The statement that it is between 4.15 and 5.8 is very close as the target host’s OS is 5.15.\n\nIf you want more detailed information about the services running on open ports, you can use version detection ( ). This helps identify the exact software and version running on a host.\n\nThe terminal output below shows an additional column called “VERSION”, indicating the detected SSH server version.\n\nWhat if you can have both , and some more in one option? That would be . This option enables OS detection, version scanning, and traceroute, among other things.\n\nWhen we run our port scan, such as using , there is a possibility that the target host does not reply during the host discovery phase (e.g. a host doesn’t reply to ICMP requests). Consequently, Nmap will mark this host as down and won’t launch a port scan against it. We can ask Nmap to treat all hosts as online and port scan every host, including those that didn’t respond during the host discovery phase. This choice can be triggered by adding the option.\n\nOptionExplanation OS detection Service and version detection OS detection, version detection, and other additions Scan hosts that appear to be down\n\nNmap allows you to control the speed of your scans to avoid detection or reduce the chance of being blocked by security tools. There are six timing templates you can use, from T0 (paranoid, very slow) to T5 (insane, very fast).\n\nIn the Nmap scans below, we launch a SYN scan targeting the 100 most common TCP ports, . We repeated the scan with different timings: T0, T1, T2, T3, and T4. In our lab setup, Nmap took different amounts of time to scan the 100 ports. The table below should give you an idea, but you will get different results depending on the network setup and target system.\n\nIn the following screenshots, we can see the time when Nmap sent the different packets. In this screenshot below, with the scan timing being , we can see that Nmap waited 5 minutes before moving to the next port.\n\nIn the screenshot below, Nmap waited 15 seconds between every two ports when we set the timing to .\n\nThen, the waiting dropped to 0.4 seconds for as shown below.\n\nFinally, in the default case, , Nmap appeared to be running as fast as it could, as shown below. It is worth repeating that this would look different on a different lab setup. However, in this particular case, Nmap considered the connection to the target to be fast and reliable, as no packet loss was incurred.\n\nA second helpful option is the number of parallel service probes. The number of parallel probes can be controlled with and . These options can be used to set a minimum and maximum on the number of TCP and UDP port probes active simultaneously for a host group. By default, will automatically control the number of parallel probes. If the network is performing poorly, i.e., dropping packets, the number of parallel probes might fall to one; furthermore, if the network performs flawlessly, the number of parallel probes can reach several hundred.\n\nA similar helpful option is the and . As the names indicate, they can control the minimum and maximum rates at which sends packets. The rate is provided as the number of packets per second. It is worth mentioning that the specified rate applies to the whole scan and not to a single host.\n\nThe last option we will cover in this task is . This option specifies the maximum time you are willing to wait, and it is suitable for slow hosts or hosts with slow network connections.\n\nOutput: Controlling What You See\n\nThis task focuses on two main features:\n• Choosing the file format to save the scan report\n\nThis command saves the scan results in three formats: , , and .\n\nThe best way to get more updates about what’s happening is to enable verbose output by adding . Consider the following terminal output showing the network scan repeated twice. In the first case, we opted for the default output verbosity.\n\nMost likely, the option is more than enough for verbose output; however, if you are still unsatisfied, you can increase the verbosity level by adding another “v” such as or even . You can also specify the verbosity level directly, for example, and . You can even increase the verbosity level by pressing “v” after the scan already started.\n\nIf all this verbosity does not satisfy your needs, you must consider the for debugging-level output. Similarly, you can increase the debugging level by adding one or more “d” or by specifying the debugging level directly. The maximum level is ; before choosing that, make sure you are ready for thousands of information and debugging lines.\n\nIn many cases, we would need to save the scan results. Nmap gives us various formats. The three most useful are normal (human-friendly) output, XML output, and grepable output, in reference to the command. You can select the scan report format as follows:\n• - -able output (useful for and )\n\nIn the terminal below, we can see an example of using the option. It resulted in three reports with the extensions , , and for normal, XML, and -able output.\n\nIn this room, we learned how to use Nmap to discover live hosts on any network. We also explored the common types of port scans and how we can use Nmap to find service version numbers. We also learned how to control the timing of the scan, and finally, we covered the different formats for saving Nmap scan results.\n\nIt is worth noting that it is best to run Nmap with privileges so that we can make use of all its features. Running Nmap with local user privileges will still work; however, you should expect many features to be unavailable. You get a minimal portion of Nmap’s power when running it as a local user. For instance, Nmap would automatically use SYN scan ( ) if you are running it with privileges and will default to connect scan ( ) if run as a local user. The reason is that crafting certain packets, such as sending a TCP SYN packet, requires root privileges."
    },
    {
        "link": "https://device42.com/blog/2023/03/29/nmap-host-discovery-the-ultimate-guide",
        "document": ""
    },
    {
        "link": "https://upguard.com/blog/best-open-port-scanners",
        "document": "The open ports in your hardware could be critical points of vulnerability if the services exposed to them are misconfigured or unpatched.\n\nUnfortunately, many organizations are currently exposing their sensitive resources through such malicious connections, heightening the risk of ransomware attacks, supply chain attacks, and data breaches.\n\nFortunately, there are free tools available that can detect all of the open ports in your ecosystem so that you can then assess the level of criticality of each exposure.\n\nIn this post, we discuss the 5 best free open port scanners you can start using today to check for open ports in your ecosystem.\n\n\n\nClick here to skip ahead to the list of free open port scanners.\n\n\n\nPort scanning is the process of analyzing the security of all ports in a network. It involves identifying open ports and also sending data packets to select ports on a host to identify any vulnerabilities in received data.\n\nSuch network reconnaissance should be completed regularly to identify and remediate vulnerabilities before they're discovered by cyberattackers.\n\nPort scanners are also used by cybercriminals to garnish vulnerability intelligence about a potential victim before launching a cyberattack.\n\nBecause many of these tools are freely accessible, you must assume that cybercriminals are using them to study your open ports. So they cannot be the only security controls protecting your network.\n\nThis is why free open port scanners should only be used by network administrators to determine the level of network visibility available to potential cyber attackers. For maximum security, all free port scanners should be supported with additional security solutions.\n\nTCP Port scanners can also help penetration testers determine which specific ports are accepting data so that they can be protected from compromise.\n\nShould Ports Be Open or Closed?\n\nWhen a port is open, data packets are permitted to flow in and out of your local network through that port. When a port is closed, all the traffic specific to that port is blocked, preventing it from entering the local network.\n\nThe status of a port (open or closed) can usually be controlled through a network firewall.\n\nIt might seem prudent, therefore, to close all network ports to prevent exploitation. But that would also prevent any devices essential to meeting business objectives from being networked.\n\nFor example, in order to facilitate the connection of remote computers to a business network, port 3389 needs to be open and forwarding to each remote device. Without this port in operation, the remote workforce model that's so essential in the world today would not be possible.\n\nAlso, emails are sent through the SMTP ports (ports 25, 465, and 587), so they need to be in operation.\n\nOpen ports aren't inherently dangerous. Security risks are introduced by the external services that communicate through them. So if a device or vendor linked to a network port has a poor security posture, that open port becomes dangerous and should be closed or filtered.\n\nWhen the security of connected services can be trusted, their corresponding ports can remain open.\n\nEvery port in a network transports a specific type of network traffic. Each of these ports is assigned a specific number so that they can be easily differentiated.\n\nThere are two types of network ports:\n\nWhat's the difference between UDP and TCP?\n\nThe TCP uses a handshake protocol. TCP also checks each data packet for errors. UDP doesn't include verification, error checking, nor any handshakes. Because of the extra processes, TCP is a slower protocol than UDP.\n\nPort numbers range from 0 - 65,535 forming a total of 65,536 ports. These ports are either TCP, UDP, or a combination of both. Because of this large range, port numbers are ranked by relevance to shorten the list of network options.\n\nPorts 1024-49151 are 'registered ports' which are designated for exclusive use by registered software corporations and applications.\n\nPorts 49152-65,536 are private ports that can be used by anyone.\n\nFor more detailed descriptions of the most common network port numbers, refer to this post.\n\nPort scanners send either a TCP or UDP data packet to a targeted port to request a status report.\n\nThere are three possible response options:\n• Open - The target responds with a packet indicating it is 'listening.' This means the port is open and actively accepting connections.\n• Closed - The target responds with a message indicating that it's in use and unavailable.\n• Filtered - The target does not respond. This usually means that the data request packet was filtered out or blocked by a firewall. For maximum security, closed ports should be blocked with a firewall.\n\nThere are 5 types of port scanning techniques.\n\nThis is the simplest type of port scan. This type of scan sends a blast of Internet Control Messaging Protocol (ICMP) requests to multiple web servers.\n\nAn ICMP reply indicates that data packets can be sent to a targeted IP address without any errors, demonstrating that the target is 'alive.'\n\nA ping scan is usually the first step before an official port scan because it indicates whether a computer is present on the other end.\n\nTo prevent external threats from discovering your assets through ping scans, ICMP should be disabled to external traffic through either a firewall or router settings.\n\nICMP should be left open to internal traffic so that it could still be used for network troubleshooting.\n\nThis is one of the most common types of port scanning techniques (sometimes referred to as a SYN scan).\n• The target responds with an ACK packet\n• An ACK packet confirms the response has been received.\n\nA TCP half open port scan doesn't send an ACK packet confirmation, and so doesn't complete the final stage of this handshake.\n\nWithout closing the loop, only a SYN-ACK data packet response is possible. This response indicates the presence of an open port.\n\nNo response is indicative of a filtered port.\n\nBecause this type of port scan does not complete a TCP handshake, it's very difficult to detect and rapidly scalable.\n\nUsers need a high level of access privilege to run TCP half open scans.\n\nA TCP connect port scan, goes a step further than the TCP half open scan and actually completes the TCP connection.\n\nTCP connect scans require lower user privileges to run, making it more accessible to potential threat actors.\n\nBut because this scanning technique actually completes TCP connections, they are easily detected by Intrusion Detection Systems (IDS). Intelligent cybercriminals are likely to, therefore, avoid this reconnaissance technique.\n\nUDP scans are used to identify active services.\n\nFor example, you can confirm if a DNS server is hosted on a computer by sending a DNS request packet to port 53 (which is a UDP port). A DNS reply confirms the presence of a DNS server.\n\nXMAS port scanning methods are used by cybercriminals because they are rarely included in network activity logs and less noticeable by firewalls.\n\nAfter a TCP 3-way handshake is complete, the client sends a FIN packet to indicate that no more data is available for transfer.\n\nAn XMAS scan sends data packets with the FIN flags turned on. No response indicated the pressence of an open port.\n\nAn RST response indicated the presence of a closed port.\n\nHow Do Cybercriminals Use Port Scanning to Prepare Cyberattacks?\n\nPort scanning is one of the most popular tools used by cyber attackers in reconnaissance campaigns.\n\nCybercriminals use port scanning to assess the state of security of a prospective victim prior to launching a cyberattack.\n\nThe key information they look for includes:\n• Whether a firewall is in use.\n• If there are any security vulnerabilities in the target network.\n• The degree of difficulty required to exploit each vulnerability.\n• Whether ports are opened, closed, or filtered.\n\nPort scanning responses reveal whether specific sectors of your network are cooperating with a hacker's prompts. This information can then be used to determine the level of cybersecurity of the targeted region.\n\nUnfortunately, it's not so easy to detect when you're being maliciously targeted with a port scanner. Advanced cybercriminals can use TCP protocol techniques to mask their activity with fake decoy traffic.\n\nBelow is a list of the 5 free open port scanning tool. Each listed option is supported with an embedded Youtube tutorial to help you understand how to use the software.\n\nNmap (short for Network Mapper) is one of the most popular free open-source port scanning tools available. It offers many different port scanning techniques including TCP half-open scans.\n• Can scan comprehensive networks housing tens of thousands of network devices.\n\nNmap can be downloaded for free by clicking here.\n\nTo learn how to scan for open ports with Nmap, refer to the following video tutorial\n\nWireshark is a free network sniffing tool that's used to detect malicious activity in network traffic. This tool can also be used to detect open ports.\n• Reveals request and reply streams in each port.\n• Allows users to follow and monitor data streams of interest.\n\nWireshark can be downloaded for free by clicking here.\n\nTo learn how to use Wireshark to scan for open ports, refer to the following video tutorial:\n• Does not need to be installed.\n\nAngry IP Scanner can be downloaded for free by clicking here.\n\nTo learn how to use Angry IP scanner to identify open ports, refer to the following video tutorial:\n\nNetCat is a free port scanning tool that uses the TCP/IP protocol across different connections.\n• Tunneling modes for both UDP and TCP.\n\nNetCat can be downloaded for free by clicking here.\n\nTo learn how to use NetCat to identify open ports, refer to the following video tutorial:\n\nAdvanced IP scanner is a windows solution that can analyze IP addresses and ports.\n• Provides access to resources shared between discovered devices through HTTP, HTTPS, FTP or even shared folders.\n\nAdvanced IP Scanner can be downloaded for free by clicking here.\n\nTo learn how to use Advanced IP Scanner to identify open ports, refer to the following video tutorial:\n\nThough port scanners are capable of discovering security risks, it's a legacy security control. For the most reliable exposure detection, an attack surface management solution like UpGuard should be implemented.\n\nUpGuard continuously scans both the internal and external threat landscape to discover and remediate vulnerabilities before they're exploited by cybercriminals. UpGuard can also detect and shut down data leaks linked to vendors to mitigate the chances of third-party data breaches."
    },
    {
        "link": "https://securitytrails.com/blog/best-port-scanners",
        "document": "Port scanners are some of the most useful tools when you are starting your security investigation on any remote or local network. Before jumping into the top five most popular port scanners tools used in the infosec field, let's learn what is a port scanner and learn how port scanners work.\n\nUsed by programmers, system and network administrators, these tools are applications designed to scan servers and hosts in order to check what available ports are being used for network communications.\n\nOnce the scan has finished, you can run other security penetration and exploit tests in order to verify how strong are the current security policies.\n\nA port scanner (also known as network scanner), is a software application used in cybersecurity and IT industries to scan networks, hosts, or IP addresses looking for open ports, closed ports, or filtered ports.\n\nPort scanners are among the top cybersecurity tools used by researchers, security teams, and ethical hackers to diagnose network issues, audit networks, run penetration testing, and perform vulnerability scanning tasks.\n\nAll port scanners operate in a very basic way:\n• Send a request to a remote or local TCP or UDP port\n• Record the response from the host as 'open', 'filtered', or 'closed'\n\nA popular use case of port scanning is to scan for 3306 port for example, after you installed and started MySQL server to see if it's showing as 'open'. In plain English, a port scanner works by sending network packets and waiting for a response.\n\nNmap stands for \"Network Mapper\", it is the most popular network discovery and port scanner in the history.\n\nIt's a free and open source application used by system administrators, devops and network engineers for security auditing on local and remote networks.\n\nAvailable for Linux, Windows and Mac OS, it can be run from the classic command line terminal, or by using a GUI interface.\n• Active Port scanning: allows you to scan and discover open ports on specific networks/hosts.\n• Host discovery: lets you identify potential hosts that are responding to network requests.\n• OS detection: used to discover operating system name and version, along with network details where the host is running.\n• Application version detection: nmap can also be used to determine what kind of apps are running and along with the version number.\n\nLet's see how Nmap can be installed on the most popular Linux distros, as well as for MacOS users:\n\nFor this we will use parameters, this will send ICMP and ARP packets to all possible addresses inside the 192.168.2.0/24 range.\n\nOnce finished will show you a resume revealing the devices found in that range.\n\nThis simple command will send various packets (ARP, ICMP, etc.) to every address within the range, and will report any devices that respond. The results will look similar to those in the example below:\n\nOnce you have a defined host to scan, you can go against a specific port range (between 1 and 65535), for example:\n\nAs you see here, we have ports 21, 80 and 443 open to the public.\n\nThis is just a tiny example of how nmap can be used to discover network services and scan remote ports, start reading our own Nmap Cheat Sheet guide to learn more advanced Nmap techniques.\n\nUnicornscan is the second most popular free port scanner after Nmap. It's widely known because of its asynchronous TCP and UDP scanning capabilities, along with non-common network discovery patterns that provide alternative ways to explore details about remote operating systems and services.\n\nThe best suggestion to run Unicornscan is to grab it from the free tools included at Kali Linux distribution, although you can also install it on the most popular Linux distros:\n\nLet's see what Unicornscan has to offer, for this we will type:\n\n, and we will get the full list of available options\n\nUnicornscan uses a really simple syntax. Let's try our first basic TCP SYN scan:\n\nNow we will scan the entire /24 range, but try to detect which one has telnet open (port 23):\n\nAnd if you want to send a fake the scan source IP address you just need to add the -s argument, as you see below:\n\nIn this case, we scanned the full /24 range that belongs to www.securitytrails.com IP range, and a service detection against 80 port.\n\nNeed more unicorn examples? The old beloved man page is always there to help you:\n\nAngry IP scanner is our third recommended port scan tool for network discovery. It's popular for its fast scanning speed thanks to its multi-thread approach separating each scan.\n\nIt's also free and multiplatform, available for Windows, Mac or Linux operating systems.\n• Scan for open ports on any remote network.\n\nAngry IP scanner can be installed on Windows, Linux, and MacOS, all the required packages can be downloaded from the official website.\n\nFrom there you will be launching a GUI that will help you to scan hosts from a friendly human interface:\n\nAs you see you will be able to specify an IP to scan, or even scan a random IP from the selector at the upper-right corner.\n\nHit start and let the fun begin. Once completed you will get the full stats including total scan time, average time per host, the number of hosts scanned, and how many are alive.\n\nNetcat is one of the oldest network tools in the \"Unixverse\", it's been there since 1995, and the last official version is from 2004. Although it has many forks and variants that work pretty well on modern operating systems, like ncat from the Nmap suite, or this alternative Netcat version from Mike Frysinger.\n\nWhile their creators always claimed that Netcat was just a read and write UDP / TCP tool, it can be used for a very wide range of objectives, like open remote connections, tunneling and proxying, run remote commands, as well as port scanning.\n• Forks available for Windows, Linux, and MacOS.\n\nAs you see, netcat was able to reach 22 port and establish the connection successfully.\n\nUDP port connections are also allowed with netcat, as you can see in the next example:\n\nNetcat also has the ability to open a remote backdoor on the target system for 5000ms, see below:\n\nThis will open the backdoor on port 54321 on the local system, then we will have to open a connection to gain system access:\n\nThis technique is widely used by penetration testers, and by malicious crackers.\n\nTake a look at option if you want to learn more examples about how to use netcat.\n\nZenmap is not a new port scanner, but the official NMAP Front End interface (GUI). For those who are not familiar with command line terminals, Nmap creators launched this GUI release that will allow you to scan remote hosts in a fancy and friendly way.\n\nAs we told before, Zenmap is just the front end human-friendly interface of Nmap, the classic network mapper that is present on almost every Linux distribution.\n\nZenmap has a pretty basic interface, that will allow you to run any scans like the command line version of Nmap, as you see in the following screenshot:\n\nIn the same way port scanners are useful tools to gather information about any target open ports, SecurityTrails is the perfect tool to integrate with your port scanner results, as it can reveal DNS server information, DNS records data associated with IPs and Domain names, technology used on web apps, as well as WHOIS and even DNS history.\n\nGet a free API account today to unveil the full power of our intelligence cyber-security platform. And if you find anything interesting, remember we also have a cool bug bounty program waiting for you!"
    },
    {
        "link": "https://dnsstuff.com/open-port-checkers-scanners",
        "document": ""
    },
    {
        "link": "https://discussions.apple.com/thread/2728186",
        "document": "Even this post is rather old, but it still comes up with the search results so I would like to reply a solution to the question.\n\nYou can open the Terminal in Mac (type terminal on Spotlight) and then use NetCat command by typing like a sample below to test your specific port like this replacing 1xx with your target IP address, then the port to check.\n\nor if you want to check a range of ports for example from port 1 to 53, just type\n\nNetCat is already a built-in command in Mac so no need to install anything."
    },
    {
        "link": "https://techtarget.com/searchsecurity/feature/How-to-use-Nmap-to-scan-for-open-ports",
        "document": "The Nmap network reconnaissance and security auditing tool, released in 1997, is one of the most basic and most used cybersecurity tools today. From its beginnings as an advanced port scanner, it evolved into a multifunctional tool with a family of useful projects that can discover weak passwords, scan IPv6 addresses, perform IP address geolocation, detect vulnerabilities and more.\n\nThe open source tool helps security pros, networking teams, sys admins and other IT personnel scan hosts, networks, applications, mainframes, Unix and Windows environments, supervisory control and data acquisition systems, and industrial control systems.\n\nPaulino Calderon, co-founder of Websec and part-time Nmap developer, wrote Nmap Network Exploration and Security Auditing Cookbook, Third Edition, published by Packt, to offer firsthand insights into using the multifaceted tool.\n\nIn this excerpt from Chapter 1, \"Nmap Fundamentals,\" Calderon shares a recipe on how to use Nmap to find open ports. Follow along to learn how to perform the quintessential Nmap task, and review Calderon's tips on Nmap port scan techniques, options that affect the scan behavior of Nmap and more. Download a PDF of Chapter 1 to read more.\n\nThis recipe describes how to use Nmap to determine the port states of a target, a process used to identify running services commonly referred to as port scanning. This is one of the tasks Nmap excels at, so it is important to learn about the essential Nmap options related to port scanning. How to do it... To launch a default scan, the bare minimum you need is a target. A target can be an IP address, a hostname, or a network range: The scan results will show all the host information obtained, such as the IPv4 (and IPv6 if available) address, reverse DNS name, and interesting ports with service names. All listed ports have a state. Ports marked as open or filtered are of special interest as they represent services running on the target host: Nmap scan report for scanme.nmap.org (45.33.32.156)\n\nHost is up (0.16s latency).\n\nOther addresses for scanme.nmap.org (not scanned):\n\n2600:3c01::f03c:91ff:fe18:bb2f\n\nNot shown: 995 closed ports PORT STATE SERVICE\n\n22/tcp open ssh 25/tcp filtered smtp 80/tcp open http\n\n9929/tcp open nping-echo 31337/tcp open Elite\n\nNmap done: 1 IP address (1 host up) scanned in 333.35 seconds The default Nmap scan returns a list of ports. In addition, it returns a service name from a database distributed with Nmap and the port state for each of the listed ports. Nmap categorizes ports into the following states:\n• Open: Open indicates that a service is listening for connections on this port.\n• Closed: Closed indicates that the probes were received, but it was concluded that there was no service running on this port.\n• Filtered: Filtered indicates that there were no signs that the probes were received and the state could not be established. This could indicate that the probes are being dropped by some kind of filtering.\n• Unfiltered: Unfiltered indicates that the probes were received but a state could not be established.\n• Open/Filtered: This indicates that the port was filtered or open, but the state could not be established.\n• Closed/Filtered: This indicates that the port was filtered or closed but the state could not be established. Even for this simple port scan, Nmap does many things in the background that can be configured as well. Nmap begins by converting the hostname to an IPv4 address using DNS name resolution. If you wish to use a different DNS server, use --dns-servers <serv1[,serv2],...>, or use -n if you wish to skip this step, as follows: Afterward, it performs the host discovery process to check whether the target is online (see the Finding online hosts recipe). To skip this step, use the no ping option, -Pn: Nmap then converts the IPv4 or IPv6 address back to a hostname using a reverse DNS query. Use -n to skip this step as well if you do not need that information: The previous command will launch either a SYN stealth scan or a TCP connect scan depending on the privileges of the user running Nmap.\n\nPort scanning is one of the most powerful features available, and it is important that we understand the different techniques and options that affect the scan behavior of Nmap. Running the simplest port scan command, nmap <target>, as a privileged user by default launches a SYN stealth scan, whereas unprivileged users that cannot create raw packets use the TCP connect scan technique. The difference between these two techniques is that a TCP connect scan uses the high-level connect() system call to obtain the port state information, meaning that each TCP connection is fully completed and therefore slower. SYN stealth scans use raw packets to send specially crafted TCP packets to detect port states with a technique known as half-open. Setting port ranges correctly during your scans is a task you often need to do when running Nmap scans. You can also use this to filter machines that run a service on a specific port, for example, finding all the SMB servers open in port 445. Narrowing down the port list also optimizes performance, which is very important when scanning multiple targets. There are several ways of using the Nmap -p option:\n• Alias for all ports from to :\n• Only ports registered in the Nmap services database: Nmap attempts to automatically detect your active network interface; however, there are some situations where it will fail or perhaps you will need to select a different interface in order to test networking issues. To force Nmap to scan using a different network interface, use the -e argument: This is only necessary if you have problems with broadcast scripts or see the WARNING: Unable to find appropriate interface for system route to message. In this recipe, we talked about the two default scanning methods used in Nmap: SYN stealth scan and TCP connect scan. However, Nmap supports several more advanced port scanning techniques. Use nmap -h or visit https://nmap.org/book/man-portscanning-techniques.html to learn more about them as Fyodor has done a fantastic job describing how they work in depth. Nmap supports several target formats that allow users to work with IP address ranges. The most common type is when we specify the target's IP or host, but it also supports the reading of targets from files and ranges, and we can even generate a list of random targets as we will see later. Any arguments that are not valid options are read as targets by Nmap. This means that we can tell Nmap to scan more than one range in a single command, as shown in the following command: There are several ways that we can handle IP ranges in Nmap: To scan the 192.168.1.1, 192.168.1.2, and 192.168.1.3 IP addresses, the following command can be used: We can also specify octet ranges using -. For example, to scan hosts 192.168.1.1, 192.168.1.2, and 192.168.1.3, we could use the expression 192.168.1.1-3, as shown in the following command: Octet range notation also supports wildcards, so we could scan from 192.168.1.0 to 192.168.1.255 with the expression 192.168.1.*: In addition, you may exclude hosts from the ranges by specifying the --exclude option, as shown next: Otherwise, you can write your exclusion list in a file using the --exclude-file option: The CIDR notation (pronounced cider) is a compact method for specifying IP addresses and their routing suffixes. This notation gained popularity due to its granularity when compared with classful addressing because it allows subnet masks of variable length. The CIDR notation is specified by an IP address and network suffix. The network or IP suffix represents the number of network bits. IPv4 addresses are 32-bit, so the network can be between 0 and 32. The most common suffixes are /8, /16, /24, and /32. To visualize it, take a look at the following CIDR-to-netmask conversions: For example, 192.168.1.0/24 represents the 256 IP addresses from 192.168.1.0 to 192.168.1.255. 50.116.1.121/8 represents all the IP addresses between 50.0-255.0-255.0-255. The /32 network suffix is also valid and represents a single IP address. The CIDR notation can also be used when specifying targets. To scan the 256 hosts in 192.168.1.0-255 using the CIDR notation, you will need the /24 suffix: Many times, we will need to work with multiple targets, but having to type a list of targets in the command line is not very practical. Fortunately, Nmap supports the loading of targets from an external file. Enter the list of targets into a file, each separated by a new line, tab, or space(s): To load the targets from the targets.txt file, use the Nmap -iL <filename> option: This feature can be combined with any scan option or method, except for exclusion rules set by --exclude or --exclude-file. The --exclude and --exclude-file options will be ignored when -iL is used. You can also use different target formats in the same file. In the following file, we specify an IP address and an IP range inside the same file: You can enter comments in your target list by starting the new line with the # character: Editor's note: This article has been updated to improve the reader experience. About the book author\n\nPaulino Calderon (@calderpwn on Twitter) is a published author and international speaker with more than 10 years of professional experience in network and application security. He co-founded Websec, a consulting firm securing applications, networks and digital assets operating in North America, in 2011. When he isn't traveling to security conferences or consulting for Fortune 500 companies with Websec, he spends peaceful days enjoying the beach in Cozumel, Mexico. His contributions have reached millions of users through Nmap, Metasploit, Open Web Application Security Project Mobile Security Testing Guide, OWASP Juice Shop and OWASP IoTGoat."
    }
]