[
    {
        "link": "https://mui.com/x/react-data-grid/master-detail?srsltid=AfmBOor7BQtqYV16d3SGCswufW8vGEcUJNaQkZ9WXx_bwubKf8BChcHq",
        "document": "The master detail feature allows expanding a row to display additional information inside a panel. To use this feature, pass a function to the prop with the content to be rendered inside the panel. Any valid React element can be used as the row detail, even another grid. By default, the detail panel height is 500px. You can customize it by passing a function to the prop. This function must return either a number or the string. If it returns a number, then the panel will use that value (in pixels) for the height. If it returns , then the height will be derived from the content. Both props are called with a object, which lets you return a different value for each row. To expand a row, click on the + icon or press inside the detail toggle column. Returning or as the value of will prevent the respective row from being expanded.\n\nAlways memoize the function provided to and . The Data Grid depends on the referential value of these props to cache their values and optimize the rendering. Like dynamic row height, you can also derive the detail panel height from its content. For this, pass a function to the prop returning , as below: The following example demonstrates this option in action:\n\nTo control which rows are expanded, pass a list of row IDs to the prop. Passing a callback to the prop can be used to detect when a row gets expanded or collapsed. On the other hand, if you only want to initialize the Data Grid with some rows already expanded, use the prop as follows:\n\nYou don't need to provide the content for detail panels upfront. Instead, you can load it lazily when the row is expanded. In the following example, the component is fetching the data on mount. This component is used by the prop to render the detail panel content.\n\nAs an alternative to the built-in row editing, a form component can be rendered inside the detail panel, allowing the user to edit the current row values. The following demo shows integration with react-hook-form, but other form libraries are also supported.\n\nTo change the icon used for the toggle, you can provide a different component for the icon slot as follow: If this is not sufficient, the entire toggle component can be overridden. To fully customize it, add another column with to your set of columns. The grid will detect that there is already a toggle column defined and it will not add another toggle in the default position. The new toggle component can be provided via in the same as any other column. By only setting the , is up to you to configure the remaining options (for example disable the column menu, filtering, sorting). To already start with a few suggested options configured, spread when defining the column. This approach can also be used to change the location of the toggle column, as shown below.\n\nAs any ordinary cell renderer, the prop is also available, and it corresponds to the state of the row: when expanded and when collapsed. To render a custom header for the detail panel column, use the property in the column definition. This property receives a object that contains (the column definition) and . The following example demonstrates how to render a custom header for the detail panel column: For a more advanced example check out the Expand or collapse all detail panels recipe. By default, the detail panel has a width that is the sum of the widths of all columns. This means that when a horizontal scrollbar is present, scrolling it will also scroll the panel content. To avoid this behavior, set the size of the detail panel to the outer size of the Data Grid. Use to get the latest dimension values. Finally, to prevent the panel from scrolling, set and . The following demo shows how this can be achieved. Notice that the toggle column is pinned to make sure that it will always be visible when the Data Grid is scrolled horizontally."
    },
    {
        "link": "https://mui.com/x/react-data-grid?srsltid=AfmBOorqKcEl1UHMYsL8zgKwuQhxwN1h2WlkcEcp4fniiiU9uK3bLKlG",
        "document": "A fast and extendable React data table and React data grid. It's a feature-rich component available with MIT or commercial licenses. The Data Grid component is built with React and TypeScript to provide a smooth UX for manipulating an unlimited set of data. It features an intuitive API for real-time updates as well as theming and custom templates—all with blazing-fast performance.\n\nThe Data Grid presents information in a structured format of rows and columns. The data is displayed in a user-friendly interface for efficient editing, reviewing, and analysis. Visit the installation guide to learn how to install the correct package version and dependencies. The component comes in three different versions, one available under MIT license and two available under commercial license. The MIT-licensed version (also referred to as the \"Community version\") is a stronger alternative to plain data tables. It's a clean abstraction with basic features like editing, pagination, column grouping, and single-column sorting and filtering.\n\nThe commercially licensed versions are available in two plans: Pro and Premium. The Pro plan extends the features available in the Community version to support more complex use cases. It adds features like advanced filtering, column pinning, column and row reordering, support for tree data, and virtualization to handle bigger datasets. The demo below displays 31 columns and 100,000 rows—over 3 million cells in total.\n\nThe Premium plan includes everything from Pro, as well as advanced features for data analysis and large dataset management, like row grouping with aggregation functions (such as sum and average) and the ability to export to Excel files. Visit the showcase page for a comprehensive overview of all features exclusive to this plan. The demo below groups rows by commodity name, and uses an aggregation function to calculate the sum of quantities for each group and in total (displayed in a summary row). You can experiment with grouping other columns in the columns' header menus. And since you're here, try exporting to Excel and copying and pasting data from-to Excel tables."
    },
    {
        "link": "https://purecode.ai/components/mui/data-grid-master-detail",
        "document": "Speed up front end development by using Purecode AI to generate all of your UI components. Skip manual effort. Automate part of your workflow."
    },
    {
        "link": "https://ag-grid.com/react-data-grid/master-detail",
        "document": "Master / Detail can be enabled using the grid option with detail rows configured using as shown below:\n\nThe example below shows a simple Master / Detail with all the above configured.\n• None The grid property is set. This tells the grid to allow expanding rows to display Detail Grids.\n• None The Cell Renderer on the first column in the Master Grid is set to . This tells the grid to use the Group Cell Renderer which in turn includes the expand / collapse functionality for that column.\n• None The Detail Cell Renderer parameter is set. This contains configuration for the Detail Grid, such as which columns to display and which grid features to enable inside the Detail Grid.\n• None A callback is provided via the Detail Cell Renderer parameter . This callback is called for each Detail Grid and sets the rows to display in each Detail Grid.\n\nWhen using Master / Detail the Master Grid must be using either the Client-Side or Server-Side Row Models. It is not supported with the Viewport or Infinite Row Models.\n\nThe Detail Grid on the other hand can use any Row Model.\n\nTop level Master Detail properties available on the Grid Options:\n\nDetail Cell Renderer parameters available on the object:"
    },
    {
        "link": "https://mui.com/x/react-data-grid/getting-started?srsltid=AfmBOooTruSZAD7SnGBxqD6kH8ubDYAjyxcHOLzbi-5_x8-xWmHZSyKh",
        "document": "Get started with the last React Data Grid you will need. Install the package, configure the columns, provide rows, and you are set. Using your favorite package manager, install or for the commercial version, or for the free community version.\n\nThe Data Grid package has a peer dependency on . If you are not already using it in your project, you can install it with:\n\nPlease note that react and react-dom are peer dependencies too: Material UI is using Emotion as a styling engine by default. If you want to use instead, run:\n\nTake a look at the Styled Components guide for more information about how to configure as the style engine. First, you have to import the component as below. To avoid name conflicts the component is named Data Grid Pro for the full-featured enterprise grid, and Data Grid for the free community version. Rows are key-value pair objects, mapping column names as keys with their values. You should also provide an property on each row to allow delta updates and better performance. Comparable to rows, columns are objects defined with a set of attributes of the interface. They are mapped to the rows through their property. You can import to see all column properties. Putting it together, this is all you need to get started, as you can see in this live and interactive demo:"
    },
    {
        "link": "https://mui.com/x/react-data-grid/row-selection?srsltid=AfmBOopDtgLzHJOkPwPkJnNLodXSUaBxp07bMuf607kc3XsgahuvP8l8",
        "document": "Row selection allows the user to select and highlight a single or multiple rows that they can then take action on. Single row selection comes enabled by default for the MIT Data Grid component. You can select a row by clicking it, or using the keyboard shortcuts. To unselect a row, hold the ( on MacOS) key and click on it.\n\nUse the prop to indicate if a row can be selected. It's called with a object and should return a boolean value. If not specified, all rows are selectable. In the demo below only rows with quantity above 50,000 can be selected:\n\nIf you provide a custom checkbox column to the Data Grid with the field, the Data Grid will not add its own. We strongly recommend to use the variable instead of re-defining all the custom properties yourself. In the following demo, the checkbox column has been moved to the right and its width has been increased to 100px.\n\nBy default, when you click the \"Select All\" checkbox, all rows in the Data Grid are selected. If you want to change this behavior and only select the rows that are currently visible on the page, you can use the prop.\n\nUsing the controlled selection with may result in selected rows being lost when the page is changed. This happens because the Data Grid cross-checks with the prop and only calls with existing row IDs. Depending on your server-side implementation, when the page changes and the new value for the prop does not include previously selected rows, the Data Grid will call with an empty value. To prevent this, enable the prop to keep the rows selected even if they do not exist. By using this approach, clicking in the Select All checkbox may still leave some rows selected. It is up to you to clean the selection model, using the prop. The following demo shows the prop in action:\n\nThe grid exposes a set of methods that enables all of these features using the imperative . To know more about how to use it, check the API Object section. Only use this API as the last option. Give preference to the props to control the Data Grid."
    },
    {
        "link": "https://stackoverflow.com/questions/66158526/programmatically-preselecting-a-row-in-material-uis-data-gridreact",
        "document": "I am currently creating a React web application and am using a DataGrid from google's Material-UI. The grid renders based on a selection of a select list(i.e if the select list is of fruits, and the user selects apples, a related DataGrid will render with info about apples. If the user selects another fruit, another related datagrid will render, similar to a Master/Detail relationship).\n\nSince DataGrid offers row selection, I would like to have the first row preselected every time the grid renders, including when the user first enters the page. Currently, the grid renders without any rows selected, and requires the user to click on a row in order to make a selection. I saw on that controlled selection may be possible(https://material-ui.com/components/data-grid/selection/#controlled-selection) although the documentation doesn't explain this in great detail.\n\nI also tried a hack from stackOverflow(Can I initialize the checkbox selection in a material-ui DataGrid?) but that did not seem to work either. I feel like this feature is easier to implement than i am making it out, and should be included out of the box. Thank you in advance!"
    },
    {
        "link": "https://stackoverflow.com/questions/66424752/get-row-item-on-checkbox-selection-in-mui-x-data-grid",
        "document": "I'm getting Data from API and displaying it using React MUI X . I have enabled check box selection and I want to get the specific cell items of the selected row and save them in a list.\n\nFor Example in the image below, if I click on the checkbox for the 1st row I want to get the \"current location\" added in a list and then if I click on the 2nd row I want current location of 2nd row added in the existing list.\n\nBelow is my current code\n\nBut I'm getting output like this\n\nI'm very new to React and I'm not sure how to get current Location's value for the selected rows and add it to a list."
    },
    {
        "link": "https://mui.com/x/react-data-grid/editing?srsltid=AfmBOoop7kWadPJuZlyrxNz4SDOnYlUxy1BsCDn8bcTZqZpI3k8waSBA",
        "document": "You can make a column editable by enabling the property in its column definition. This lets the user edit any cell from the specified columns. For example, with the code snippet below, users can edit cells in the column, but not in the column. The following demo shows an example of how to make all columns editable. Play with it by double-clicking or pressing on any cell.\n\nBy default, only one cell can be editable at a time. But you can let your user edit all cells in a row simultaneously. To enable this behavior, set the prop on the Data Grid to . Note that you still need to set the property in each column definition to specify which of them are editable; the same basic rules for cell editing also apply to row editing. The following demo illustrates how row editing works. The user can start and stop editing a row using the same actions as those provided for cell editing (for example double-clicking a cell).\n\nBy design, when changing the value of a cell all callbacks from other columns are also called. This lets you apply conditional validation where the value of a cell impacts the validation status of another cell in the same row. If you only want to run validation when the value has changed, check if the param is . For more details on how to use , please check the editing validation section. Each cell and row has two modes: and . When in mode, users can directly change the content of a cell or a row. When a cell is in mode, users can start editing a cell (or row if ) with any of the following actions:\n• None Pressing , or —note that the latter two options both delete any existing content\n• None Pressing any printable key, such as , , , or\n• None Calling passing the row ID and column field of the cell to be edited\n• None Calling passing the ID of the row (only available if ). You can also enter edit mode with a single click by following this recipe. When a cell is in mode, the user can stop editing with any of the following interactions:\n• None Pressing —this also reverts any changes made\n• None Pressing —this also saves any changes made\n• None Pressing —this also saves any changes made and moves the focus to the next cell in the same column\n• None Clicking outside the cell or row—this also saves any changes made\n• None Calling passing the row ID and column field of the cell that's been edited\n• None Calling passing the ID of the row (only possible if ). The interactions that start and stop trigger and events, respectively. For row editing, the events are and . You can control how these events are handled to customize editing behavior. For convenience, you can also listen to these events using their respective props: These events and props are called with an object containing the row ID and column field of the cell that is being edited. The object also contains a param that specifies which type of interaction caused the event to be fired—for instance, when a double-click initiates edit mode. The following demo shows how to prevent the user from exiting edit mode when clicking outside of a cell. To do this, the prop is used to check if the is . If that condition is true, it disables the default event behavior. In this context, the user can only stop editing a cell by pressing , or .\n\nWhen the user performs an action to stop editing, the callback is triggered. Use it to send the new values to the server and save them into a database or other storage method. The callback is called with three arguments:\n• The updated row with the new values returned by the .\n• The original values of the row before editing.\n• An object with additional properties such as . Please note that the must return the row object to update the Data Grid internal state. The value returned is used later as an argument on a call to . If you want to delete a row from the internal state of the Data Grid, you can return an additional property in the row object from the callback. This will remove the row from the internal state of the Data Grid. It is a more performant way to delete a row as compared to updating the prop or using API method because uses the under the hood which doesn't cause a full regeneration of the row tree. In the example above, is a function that determines whether a row should be deleted based on the updated row data. If returns , the row will be deleted from the Data Grid's internal state. If you need to cancel the save process on —for instance, when a database validation fails, or the user wants to reject the changes—there are two options:\n• Reject the promise so that the internal state is not updated and the cell remains in edit mode.\n• Resolve the promise with the second argument (original row before editing), so that the internal state is not updated, and the cell exits edit mode. The following demo implements the first option: rejecting the promise. Instead of validating while typing, it simulates validation on the server. If the new name is empty, the promise responsible for saving the row will be rejected, and the cell will remain in edit mode. The demo also shows that can pre-process the row model that will be saved into the internal state. Additionally, is called to display the error message. To exit edit mode, press or enter a valid name.\n\nThe second option—resolving the promise with the second argument—lets the user cancel the save process by rejecting the changes and exiting the edit mode. In this case, is resolved with the original value(s) of the row. The following demo shows how this approach can be used to ask for confirmation before sending the data to the server. If the user accepts the change, the internal state is updated with the values. But if the changes are rejected, the internal state remains unchanged, and the cell is reverted back to its original value. The demo also employs validation to prevent entering an empty name.\n\nValue parser and value setter You can use the property in the column definition to modify the value entered by the user—for example, to convert the value to a different format: You can use the property of the column definition to customize how the row is updated with a new value. This lets you insert a value from a nested object. It is called with an object containing the new cell value to be saved as well as the row that the cell belongs to. If you are already using a to extract the value from a nested object, then the will probably also be necessary. In the following demo, both the and the are defined for the Full name column. The capitalizes the value entered, and the splits the value and saves it correctly into the row model:\n\nIf the column definition sets a callback for the property, then it will be called each time a new value is entered into a cell from this column. This property lets you pre-process the props that are passed to the edit component. The callback is called with an object containing the following attributes:\n• : the row model containing the value(s) of the cell or row before entering edit mode\n• : the props, containing the value after the value parser, that are passed to the edit component\n• : determines if is different from the last time this callback was called Data validation is one type of pre-processing that can be done in this way. To validate the data entered, pass a callback to checking if is valid. If the new value is invalid, set to a truthy value and return the modified props, as shown in the example below. When the user tries to save the updated value, the change will be rejected if the error attribute is truthy (invalid). Changing inside the callback has no effect. To pre-process it, use a value parser. The demo below contains an example of server-side data validation. In this case, the callback returns a promise that resolves to the modified props. Note that the value passed to is passed directly to the edit component as the prop. While the promise is not resolved, the edit component will receive an prop with value equal to .\n\nYou can control the active mode using the props and (only works if ). The prop accepts an object containing the (and additional options) for a given column field, in a given row, as in the following example. The options accepted are the same available in and . For row editing, the props work in a similar manner. The options accepted are the same available in and . Additionally, the callback props and (only works if ) are available. Use them to update the respective prop. In the demo below, is used to control the mode of selected cell using the external buttons. For an example using row editing check the full-featured CRUD component.\n\nThe options passed to both model props only take effect when changes. Updating the params of a cell or row, but keeping the same , makes the cell or row to stay in the same mode. Also, removing one field or row ID from the object will not cause the missing cell or row to go to mode. Each of the built-in column types provides a component to edit the value of the cells. To customize column types, or override the existing components, you can provide a new edit component through the property in the column definition. This property works like the property, with the difference that it is rendered while cells are in edit mode. The property receives all params from , which extends . Additionally, the props added during pre-processing are also available in the params. These are the most important params to consider:\n• : contains the current value of the cell in edit mode, overriding the value from\n• : whether is being executed or not Once a new value is entered into the input, it must be sent to the Data Grid. To do this, pass the row ID, the column field, and the new cell value to a call to . The new value will be parsed and validated, and the prop will reflect the changes in the next render. It's important to also handle the accessibility of custom edit components. When a cell enters edit mode, an element must be focused to provide access via keyboard and for screen readers. Since multiple cells may be in edit mode at the same time, the prop will be on the cell that should have focus. Use this prop to focus the appropriate element. props GridRenderEditCellParams id value field hasFocus props apiRef ref React React hasFocus ref current hasFocus event React ChangeEvent HTMLInputElement newValue event target value apiRef current id field value newValue The following demo implements a custom edit component, based on the component from , for the Rating column.\n\nBy default, each call to triggers a new render. If the edit component requires the user to type a new value, re-rendering the Data Grid too often will drastically reduce performance. One way to avoid this is to debounce the API calls. You can use to handle debouncing by setting the param to a positive integer that defines a set time period in milliseconds. No matter how many times the API method is called, the Data Grid will only be re-rendered after that period of time has passed. When the Data Grid is only set to re-render after a given period of time has passed, the prop will not be updated on each call. To avoid a frozen UI, the edit component can keep the current value in an internal state and sync it once changes. Modify the edit component to enable this feature: const newValue = event.target.value; // The new value entered by the user An edit component has \"auto-stop\" behavior when it stops edit mode as soon as the value is changed. To picture better, imagine an edit component with a combo, created following the normal steps. By default, it would require two clicks to change the value of the cell: one click inside the cell to select a new value, and another click outside the cell to save. This second click can be avoided if the first click also stops the edit mode. To create an edit component with auto-stop, call after setting the new value. Since may do additional processing, you must wait for it to resolve before stopping the edit mode. Also, it is a good practice to check if has returned . It will be if set an error during validation. The following demo implements an edit component with auto-stop, based on a native component for the Role column."
    },
    {
        "link": "https://material-react-table.com/docs/guides/row-selection",
        "document": "Material React Table has a built-in row selection feature and makes it easy to manage the selection state yourself. This guide demonstrates how to enable row selection and customize the selection behavior.\n\nSelection checkboxes can be enabled with the table option.\n\nYou can also enable row selection conditionally per row with the same table option, but with a callback function instead of a boolean.\n\nBy default, when the user holds down the key and clicks a row, all rows between the last selected row and the clicked row will be selected. This can be disabled with the table option.\n\nThere are two ways to access the selection state. You can either manage the selection state yourself or read it from the table instance.\n\nThe row selection state is managed internally by default, but you will more than likely want to have access to that state yourself. Here is how you can simply get access to the row selection state, specifically:\n\nAlternatively, you can read the selection state directly from the instance like so:\n\nBy default, the for each row in the table is simply the index of the row in the table. You can override this and instruct Material React Table to use a more useful Row ID with the table option. For example, you may want something like this:\n\nAs rows get selected, the state will look like this:\n\nThis can be very useful when you are trying to read your selection state and do something with your data as the row selection changes.\n\nBy default, a row can only be selected by either clicking the checkbox or radio button in the column. If you want to be able to select a row by clicking anywhere on the row, you can add your own function to a table body row like this:\n\nBy default, if you enable selection for each row, there will also be a select all checkbox in the header of the checkbox column. It can be hidden with the table option.\n\nBy default, an alert banner will be show as rows are selected. You can use the table option to show the alert banner in the top toolbar, bottom toolbar, as an overlay in the table head, or hide it completely.\n\nBy default, the table option is set to , which means that multiple rows can be selected at once with a checkbox. If you want to only allow a single row to be selected at a time, you can set this table option to and a radio button will be used instead of a checkbox.\n\nThe selection checkboxes can be customized with the table option. Any prop that can be passed to a Mui Checkbox component can be specified here. For example, you may want to use a different color for the checkbox or use some logic to disable certain rows from being selected.\n\nYou may have a use case where you want to be able to select rows by clicking them, but you do not want to show any checkboxes or radio buttons. You can do this by implementing a row selection feature yourself while keeping the table option so that the default selection behavior is disabled.\n\nYou can combine the row pinning feature with the row selection feature to create a cool user experience where selected rows always stay within view."
    }
]