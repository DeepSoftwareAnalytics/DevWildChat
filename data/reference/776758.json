[
    {
        "link": "https://ruby-doc.org/stdlib-2.4.1/libdoc/time/rdoc/Time.html",
        "document": "When 'time' is required, is extended with additional methods for parsing and converting Times.\n\nThis library extends the class with the following conversions between date strings and objects:\n\nAll examples assume you have loaded with:\n\nAll of these examples were done using the EST timezone which is GMT-5.\n\nparse takes a string representation of a and attempts to parse it using a heuristic.\n\nAny missing pieces of the date are inferred based on the current date.\n\nWe can change the date used to infer our missing elements by passing a second object that responds to mon, day and year, such as Date, or DateTime. We can also use our own object.\n\nparse also accepts an optional block. You can use this block to specify how to handle the year component of the date. This is specifically designed for handling two digit years. For example, if you wanted to treat all two digit years prior to 70 as the year 2000+ you could write this:\n\nstrptime works similar to except that instead of using a heuristic to detect the format of the input string, you provide a second argument that describes the format of the string. For example:"
    },
    {
        "link": "https://docs.ruby-lang.org/en/2.4.0/Time.html",
        "document": "When 'time' is required, is extended with additional methods for parsing and converting Times. This library extends the class with the following conversions between date strings and objects: All examples assume you have loaded with: All of these examples were done using the EST timezone which is GMT-5. parse takes a string representation of a and attempts to parse it using a heuristic. Any missing pieces of the date are inferred based on the current date. We can change the date used to infer our missing elements by passing a second object that responds to , and , such as , or . We can also use our own object. parse also accepts an optional block. You can use this block to specify how to handle the year component of the date. This is specifically designed for handling two digit years. For example, if you wanted to treat all two digit years prior to 70 as the year 2000+ you could write this: strptime works similar to except that instead of using a heuristic to detect the format of the input string, you provide a second argument that describes the format of the string. For example: is an abstraction of dates and times. is stored internally as the number of seconds with fraction since the Epoch, January 1, 1970 00:00 UTC. Also see the library module . The class treats GMT (Greenwich Mean ) and UTC (Coordinated Universal ) as equivalent. GMT is the older way of referring to these baseline times but persists in the names of calls on POSIX systems. All times may have fraction. Be aware of this fact when comparing times with each other – times that are apparently equal when displayed may be different when compared. Since Ruby 1.9.2, implementation uses a signed 63 bit integer, Bignum or . The integer is a number of nanoseconds since the Epoch which can represent 1823-11-12 to 2116-02-20. When Bignum or is used (before 1823, after 2116, under nanosecond), works slower as when integer is used. All of these examples were done using the EST timezone which is GMT-5. You can create a new instance of with . This will use the current system time. is an alias for this. You can also pass parts of the time to such as year, month, minute, etc. When you want to construct a time this way you must pass at least a year. If you pass the year with nothing else time will default to January 1 of that year at 00:00:00 with the current system timezone. Here are some examples: You can also use gm, local and to infer GMT, local and UTC timezones instead of using the current system setting. You can also create a new time using which takes the number of seconds (or fraction of seconds) since the Unix Epoch. Working with an instance of Once you have an instance of there is a multitude of things you can do with it. Below are some examples. For all of the following examples, we will work on the assumption that you have done the following: What year was that again? Was it daylight savings at the time? How many seconds was that since the Unix Epoch? You can also do standard functions like compare two times.\n\nCreates a new object with the value given by , the given number of , or and since the Epoch. and can be an , , , or other . non-portable feature allows the offset to be negative on some systems. If a numeric argument is given, the result is in local time. static VALUE time_s_at(int argc, VALUE *argv, VALUE klass) { VALUE time, t; wideval_t timew; if (rb_scan_args(argc, argv, \"11\", &time, &t) == 2) { time = num_exact(time); t = num_exact(t); timew = wadd(rb_time_magnify(v2w(time)), wmulquoll(v2w(t), TIME_SCALE, 1000000)); t = time_new_timew(klass, timew); } else if (IsTimeval(time)) { struct time_object *tobj, *tobj2; GetTimeval(time, tobj); t = time_new_timew(klass, tobj->timew); GetTimeval(t, tobj2); TIME_COPY_GMT(tobj2, tobj); } else { timew = rb_time_magnify(v2w(num_exact(time))); t = time_new_timew(klass, timew); } return t; } Creates a object based on given values, interpreted as UTC (GMT). The year must be specified. Other values default to the minimum value for that field (and may be or omitted). Months may be specified by numbers from 1 to 12, or by the three-letter month names. Hours are specified on a 24-hour clock (0..23). Raises an if any values are out of range. Will also accept ten arguments in the order output by . and can have a fractional part. static VALUE time_s_mkutc(int argc, VALUE *argv, VALUE klass) { return time_utc_or_local(argc, argv, TRUE, klass); } Deserializes string by converting time since epoch to Same as , but interprets the values in the local time zone. static VALUE time_s_mktime(int argc, VALUE *argv, VALUE klass) { return time_utc_or_local(argc, argv, FALSE, klass); } Same as , but interprets the values in the local time zone. static VALUE time_s_mktime(int argc, VALUE *argv, VALUE klass) { return time_utc_or_local(argc, argv, FALSE, klass); } It is initialized to the current system time if no argument is given. Note: The new object will use the resolution available on your system clock, and may include fractional seconds. If one or more arguments specified, the time is initialized to the specified time. may have fraction if it is a rational. is the offset from UTC. It can be a string such as “+09:00” or a number of seconds such as 32400. static VALUE time_init(int argc, VALUE *argv, VALUE time) { if (argc == 0) return time_init_0(time); else return time_init_1(argc, argv, time); } Creates a new object for the current time. This is same as without arguments. Parses using ._parse and converts it to a object. If a block is given, the year described in is converted by the block. For example: If the upper components of the given time are broken or missing, they are supplied with those of . For the lower components, the minimum values (1 or 0) are assumed if broken or missing. For example: Since there are numerous conflicts among locally defined time zone abbreviations all over the world, this method is not intended to understand all of them. For example, the abbreviation “CST” is used variously as: -06:00 in America/Chicago, -05:00 in America/Havana, +08:00 in Asia/Harbin, +09:30 in Australia/Darwin, +10:30 in Australia/Adelaide, etc. Based on this fact, this method only understands the time zone abbreviations described in RFC 822 and the system time zone, in the order named. (i.e. a definition in RFC 822 overrides the system time zone definition.) The system time zone is taken from and . If the extracted time zone abbreviation does not match any of them, it is ignored and the given time is regarded as a local time. is raised if ._parse cannot extract information from or if the class cannot represent specified date. This method can be used as a fail-safe for other parsing methods as: A failure of should be checked, though. You must require 'time' to use this method. Parses as date-time defined by RFC 2822 and converts it to a object. The format is identical to the date format defined by RFC 822 and updated by RFC 1123. is raised if is not compliant with RFC 2822 or if the class cannot represent specified date. See for more information on this format. You must require 'time' to use this method. Parses using ._strptime and converts it to a object. If a block is given, the year described in is converted by the block. For example: Below is a list of the formatting options: Millisecond of the second (000..999) Second of the minute (00..60) Day of the week as a decimal, Monday being 1. (1..7) Week number of the current year, starting with the first Sunday as the first day of the first week (00..53) Week number of year according to ISO 8601 (01..53) Week number of the current year, starting with the first Monday as the first day of the first week (00..53) Day of the week (Sunday is 0, 0..6) Preferred representation for the date alone, no time Preferred representation for the time alone, no date Year which may include century, if provided Creates a object based on given values, interpreted as UTC (GMT). The year must be specified. Other values default to the minimum value for that field (and may be or omitted). Months may be specified by numbers from 1 to 12, or by the three-letter month names. Hours are specified on a 24-hour clock (0..23). Raises an if any values are out of range. Will also accept ten arguments in the order output by . and can have a fractional part. static VALUE time_s_mkutc(int argc, VALUE *argv, VALUE klass) { return time_utc_or_local(argc, argv, TRUE, klass); } The W3CDTF format is defined here: www.w3.org/TR/NOTE-datetime Parses as a dateTime defined by the Schema and converts it to a object. The format is a restricted version of the format defined by ISO 8601. is raised if is not compliant with the format or if the class cannot represent specified date. See for more information on this format. You must require 'time' to use this method. Return the number of seconds the specified time zone differs from UTC. time zones that include minutes, such as or will work, as will simpler hour-only time zones like or . Textual time zones listed in ZoneOffset are also supported. If the time zone does not match any of the above, will check if the local time zone (both with and without potential Daylight Saving Time changes being in effect) matches . Specifying a value for will change the year used to find the local time zone. If is unable to determine the offset, nil will be returned. Addition — Adds some number of seconds (possibly fractional) to time and returns that value as a new object. static VALUE time_plus(VALUE time1, VALUE time2) { struct time_object *tobj; GetTimeval(time1, tobj); if (IsTimeval(time2)) { rb_raise(rb_eTypeError, \"time + time?\"); } return time_add(tobj, time2, 1); } Difference — Returns a new object that represents the difference between time and , or subtracts the given number of seconds in from time. static VALUE time_minus(VALUE time1, VALUE time2) { struct time_object *tobj; GetTimeval(time1, tobj); if (IsTimeval(time2)) { struct time_object *tobj2; GetTimeval(time2, tobj2); return rb_Float(rb_time_unmagnify_to_float(wsub(tobj->timew, tobj2->timew))); } return time_add(tobj, time2, -1); } -1, 0, +1 or nil depending on whether is less than, equal to, or greater than . is returned if the two values are incomparable. static VALUE time_cmp(VALUE time1, VALUE time2) { struct time_object *tobj1, *tobj2; int n; GetTimeval(time1, tobj1); if (IsTimeval(time2)) { GetTimeval(time2, tobj2); n = wcmp(tobj1->timew, tobj2->timew); } else { return rb_invcmp(time1, time2); } if (n == 0) return INT2FIX(0); if (n > 0) return INT2FIX(1); return INT2FIX(-1); } Returns a hash, that will be turned into a object and represent this object. Returns the day of the month (1..n) for time. Returns if time occurs during Daylight Saving in its time zone. Returns if time and are both objects with the same seconds and fractional seconds. static VALUE time_eql(VALUE time1, VALUE time2) { struct time_object *tobj1, *tobj2; GetTimeval(time1, tobj1); if (IsTimeval(time2)) { GetTimeval(time2, tobj2); return rb_equal(w2v(tobj1->timew), w2v(tobj2->timew)); } return Qfalse; } Returns a new object representing time in local time (using the local time zone in effect for this process). If is given, it is used instead of the local time. can be given as a human-readable string (eg. ) or as a number of seconds (eg. ). static VALUE time_getlocaltime(int argc, VALUE *argv, VALUE time) { VALUE off; rb_scan_args(argc, argv, \"01\", &off); if (!NIL_P(off)) { off = utc_offset_arg(off); validate_utc_offset(off); time = time_dup(time); time_set_utc_offset(time, off); return time_fixoff(time); } return time_localtime(time_dup(time)); } Returns the offset in seconds between the timezone of time and UTC. static VALUE time_utc_offset(VALUE time) { struct time_object *tobj; GetTimeval(time, tobj); MAKE_TM(time, tobj); if (TIME_UTC_P(tobj)) { return INT2FIX(0); } else { return tobj->vtm.utc_offset; } } static VALUE time_gmtime(VALUE time) { struct time_object *tobj; struct vtm vtm; GetTimeval(time, tobj); if (TIME_UTC_P(tobj)) { if (tobj->tm_got) return time; } else { time_modify(time); } if (!gmtimew(tobj->timew, &vtm)) rb_raise(rb_eArgError, \"gmtime error\"); tobj->vtm = vtm; tobj->tm_got = 1; TIME_SET_UTC(tobj); return time; } Returns the offset in seconds between the timezone of time and UTC. static VALUE time_utc_offset(VALUE time) { struct time_object *tobj; GetTimeval(time, tobj); MAKE_TM(time, tobj); if (TIME_UTC_P(tobj)) { return INT2FIX(0); } else { return tobj->vtm.utc_offset; } } Returns the hour of the day (0..23) for time. Returns a string representing time. Equivalent to calling with the appropriate format string. static VALUE time_to_s(VALUE time) { struct time_object *tobj; GetTimeval(time, tobj); if (TIME_UTC_P(tobj)) return strftimev(\"%Y-%m-%d %H:%M:%S UTC\", time, rb_usascii_encoding()); else return strftimev(\"%Y-%m-%d %H:%M:%S %z\", time, rb_usascii_encoding()); } Returns if time occurs during Daylight Saving in its time zone. Converts time to local time (using the local time zone in effect for this process) modifying the receiver. If is given, it is used instead of the local time. static VALUE time_localtime_m(int argc, VALUE *argv, VALUE time) { VALUE off; rb_scan_args(argc, argv, \"01\", &off); if (!NIL_P(off)) { off = utc_offset_arg(off); validate_utc_offset(off); time_set_utc_offset(time, off); return time_fixoff(time); } return time_localtime(time); } Returns the day of the month (1..n) for time. Returns the minute of the hour (0..59) for time. Returns the month of the year (1..12) for time. Returns the month of the year (1..12) for time. Returns the number of nanoseconds for time. The lowest digits of and are different because IEEE 754 double is not accurate enough to represent the exact number of nanoseconds since the Epoch. The more accurate value is returned by . Returns a string which represents the time as date-time defined by RFC 2822: If is a UTC time, -0000 is used as zone. You must require 'time' to use this method. Rounds sub seconds to a given precision in decimal digits (0 digits by default). It returns a new object. should be zero or positive integer. static VALUE time_round(int argc, VALUE *argv, VALUE time) { VALUE ndigits, v, a, b, den; long nd; struct time_object *tobj; rb_scan_args(argc, argv, \"01\", &ndigits); if (NIL_P(ndigits)) ndigits = INT2FIX(0); else ndigits = rb_to_int(ndigits); nd = NUM2LONG(ndigits); if (nd < 0) rb_raise(rb_eArgError, \"negative ndigits given\"); GetTimeval(time, tobj); v = w2v(rb_time_unmagnify(tobj->timew)); a = INT2FIX(1); b = INT2FIX(10); while (0 < nd) { if (nd & 1) a = mul(a, b); b = mul(b, b); nd = nd >> 1; } den = quo(INT2FIX(1), a); v = mod(v, den); if (lt(v, quo(den, INT2FIX(2)))) return time_add(tobj, v, -1); else return time_add(tobj, sub(den, v), 1); } Returns the second of the minute (0..60) for time. Note: Seconds range from zero to 60 to allow the system to inject leap seconds. See en.wikipedia.org/wiki/Leap_second for further details. Formats time according to the directives in the given format string. The directives begin with a percent (%) character. Any text not listed as a directive will be passed through to the output string. The directive consists of a percent (%) character, zero or more flags, optional minimum field width, optional modifier and a conversion specifier as follows: - don't pad a numerical output _ use spaces for padding 0 use zeros for padding ^ upcase the result string # change case : use colons for %z The modifiers are “E” and “O”. They are ignored. Date (Year, Month, Day): %Y - Year with century if provided, will pad result at least 4 digits. -0001, 0000, 1995, 2009, 14292, etc. %C - year / 100 (rounded down such as 20 in 2009) %y - year % 100 (00..99) %m - Month of the year, zero-padded (01..12) %_m blank-padded ( 1..12) %-m no-padded (1..12) %B - The full month name (``January'') %^B uppercased (``JANUARY'') %b - The abbreviated month name (``Jan'') %^b uppercased (``JAN'') %h - Equivalent to %b %d - Day of the month, zero-padded (01..31) %-d no-padded (1..31) %e - Day of the month, blank-padded ( 1..31) %j - Day of the year (001..366) Time (Hour, Minute, Second, Subsecond): %H - Hour of the day, 24-hour clock, zero-padded (00..23) %k - Hour of the day, 24-hour clock, blank-padded ( 0..23) %I - Hour of the day, 12-hour clock, zero-padded (01..12) %l - Hour of the day, 12-hour clock, blank-padded ( 1..12) %P - Meridian indicator, lowercase (``am'' or ``pm'') %p - Meridian indicator, uppercase (``AM'' or ``PM'') %M - Minute of the hour (00..59) %S - Second of the minute (00..60) %L - Millisecond of the second (000..999) The digits under millisecond are truncated to not produce 1000. %N - Fractional seconds digits, default is 9 digits (nanosecond) %3N millisecond (3 digits) %6N microsecond (6 digits) %9N nanosecond (9 digits) %12N picosecond (12 digits) %15N femtosecond (15 digits) %18N attosecond (18 digits) %21N zeptosecond (21 digits) %24N yoctosecond (24 digits) The digits under the specified length are truncated to avoid carry up. Time zone: %z - Time zone as hour and minute offset from UTC (e.g. +0900) %:z - hour and minute offset from UTC with a colon (e.g. +09:00) %::z - hour, minute and second offset from UTC (e.g. +09:00:00) %Z - Abbreviated time zone name or similar information. (OS dependent) Weekday: %A - The full weekday name (``Sunday'') %^A uppercased (``SUNDAY'') %a - The abbreviated name (``Sun'') %^a uppercased (``SUN'') %u - Day of the week (Monday is 1, 1..7) %w - Day of the week (Sunday is 0, 0..6) ISO 8601 week-based year and week number: The first week of YYYY starts with a Monday and includes YYYY-01-04. The days in the year before the first week are in the last week of the previous year. %G - The week-based year %g - The last 2 digits of the week-based year (00..99) %V - Week number of the week-based year (01..53) Week number: The first week of YYYY that starts with a Sunday or Monday (according to %U or %W). The days in the year before the first week are in week 0. %U - Week number of the year. The week starts with Sunday. (00..53) %W - Week number of the year. The week starts with Monday. (00..53) Seconds since the Epoch: %s - Number of seconds since 1970-01-01 00:00:00 UTC. Literal string: %n - Newline character (\n\n) %t - Tab character (\\t) %% - Literal ``%'' character Combination: %c - date and time (%a %b %e %T %Y) %D - Date (%m/%d/%y) %F - The ISO 8601 date format (%Y-%m-%d) %v - VMS date (%e-%^b-%4Y) %x - Same as %D %X - Same as %T %r - 12-hour time (%I:%M:%S %p) %R - 24-hour time (%H:%M) %T - 24-hour time (%H:%M:%S) This method is similar to strftime() function defined in ISO C and POSIX. While all directives are locale independent since Ruby 1.9, %Z is platform dependent. So, the result may differ even if the same format string is used in other systems such as C. %z is recommended over %Z. %Z doesn't identify the timezone. For example, “CST” is used at America/Chicago (-06:00), America/Havana (-05:00), Asia/Harbin (+08:00), Australia/Darwin (+09:30) and Australia/Adelaide (+10:30). Also, %Z is highly dependent on the operating system. For example, it may generate a non ASCII string on Japanese Windows. i.e. the result can be different to “JST”. So the numeric time zone offset, %z, is recommended. %Y%m%d => 20071119 Calendar date (basic) %F => 2007-11-19 Calendar date (extended) %Y-%m => 2007-11 Calendar date, reduced accuracy, specific month %Y => 2007 Calendar date, reduced accuracy, specific year %C => 20 Calendar date, reduced accuracy, specific century %Y%j => 2007323 Ordinal date (basic) %Y-%j => 2007-323 Ordinal date (extended) %GW%V%u => 2007W471 Week date (basic) %G-W%V-%u => 2007-W47-1 Week date (extended) %GW%V => 2007W47 Week date, reduced accuracy, specific week (basic) %G-W%V => 2007-W47 Week date, reduced accuracy, specific week (extended) %H%M%S => 083748 Local time (basic) %T => 08:37:48 Local time (extended) %H%M => 0837 Local time, reduced accuracy, specific minute (basic) %H:%M => 08:37 Local time, reduced accuracy, specific minute (extended) %H => 08 Local time, reduced accuracy, specific hour %H%M%S,%L => 083748,000 Local time with decimal fraction, comma as decimal sign (basic) %T,%L => 08:37:48,000 Local time with decimal fraction, comma as decimal sign (extended) %H%M%S.%L => 083748.000 Local time with decimal fraction, full stop as decimal sign (basic) %T.%L => 08:37:48.000 Local time with decimal fraction, full stop as decimal sign (extended) %H%M%S%z => 083748-0600 Local time and the difference from UTC (basic) %T%:z => 08:37:48-06:00 Local time and the difference from UTC (extended) %Y%m%dT%H%M%S%z => 20071119T083748-0600 Date and time of day for calendar date (basic) %FT%T%:z => 2007-11-19T08:37:48-06:00 Date and time of day for calendar date (extended) %Y%jT%H%M%S%z => 2007323T083748-0600 Date and time of day for ordinal date (basic) %Y-%jT%T%:z => 2007-323T08:37:48-06:00 Date and time of day for ordinal date (extended) %GW%V%uT%H%M%S%z => 2007W471T083748-0600 Date and time of day for week date (basic) %G-W%V-%uT%T%:z => 2007-W47-1T08:37:48-06:00 Date and time of day for week date (extended) %Y%m%dT%H%M => 20071119T0837 Calendar date and local time (basic) %FT%R => 2007-11-19T08:37 Calendar date and local time (extended) %Y%jT%H%MZ => 2007323T0837Z Ordinal date and UTC of day (basic) %Y-%jT%RZ => 2007-323T08:37Z Ordinal date and UTC of day (extended) %GW%V%uT%H%M%z => 2007W471T0837-0600 Week date and local time and difference from UTC (basic) %G-W%V-%uT%R%:z => 2007-W47-1T08:37-06:00 Week date and local time and difference from UTC (extended) static VALUE time_strftime(VALUE time, VALUE format) { struct time_object *tobj; const char *fmt; long len; rb_encoding *enc; GetTimeval(time, tobj); MAKE_TM(time, tobj); StringValue(format); if (!rb_enc_str_asciicompat_p(format)) { rb_raise(rb_eArgError, \"format should have ASCII compatible encoding\"); } format = rb_str_new4(format); fmt = RSTRING_PTR(format); len = RSTRING_LEN(format); enc = rb_enc_get(format); if (len == 0) { rb_warning(\"strftime called with empty format string\"); return rb_enc_str_new(0, 0, enc); } else { VALUE str = rb_strftime_alloc(fmt, len, enc, &tobj->vtm, tobj->timew, TIME_UTC_P(tobj)); if (!str) rb_raise(rb_eArgError, \"invalid format: %\"PRIsVALUE, format); return str; } } The return value can be a rational number. The lowest digits of and are different because IEEE 754 double is not accurate enough to represent the rational number. The more accurate value is returned by . Returns a new object, one second later than time. is obsolete since 1.9.2 for time is not a discrete value. VALUE rb_time_succ(VALUE time) { struct time_object *tobj; struct time_object *tobj2; rb_warn(\"Time#succ is obsolete; use time + 1\"); GetTimeval(time, tobj); time = time_new_timew(rb_cTime, wadd(tobj->timew, WINT2FIXWV(TIME_SCALE))); GetTimeval(time, tobj2); TIME_COPY_GMT(tobj2, tobj); return time; } See the individual methods for an explanation of the valid ranges of each value. The ten elements can be passed directly to or to create a new object. Returns the value of time as a floating point number of seconds since the Epoch. Note that IEEE 754 double is not accurate enough to represent the number of nanoseconds since the Epoch. Returns the value of time as an integer number of seconds since the Epoch. Stores class name ( ) with number of seconds since epoch and number of microseconds for as string Returns the value of time as a rational number of seconds since the Epoch. This methods is intended to be used to get an accurate value representing the nanoseconds since the Epoch. You can use this method to convert time to another Epoch. static VALUE time_to_r(VALUE time) { struct time_object *tobj; VALUE v; GetTimeval(time, tobj); v = w2v(rb_time_unmagnify(tobj->timew)); if (!RB_TYPE_P(v, T_RATIONAL)) { v = rb_Rational1(v); } return v; } Returns a string representing time. Equivalent to calling with the appropriate format string. static VALUE time_to_s(VALUE time) { struct time_object *tobj; GetTimeval(time, tobj); if (TIME_UTC_P(tobj)) return strftimev(\"%Y-%m-%d %H:%M:%S UTC\", time, rb_usascii_encoding()); else return strftimev(\"%Y-%m-%d %H:%M:%S %z\", time, rb_usascii_encoding()); } static VALUE time_to_time(VALUE self) { return self; } Returns the number of nanoseconds for time. The lowest digits of and are different because IEEE 754 double is not accurate enough to represent the exact number of nanoseconds since the Epoch. The more accurate value is returned by . Returns the value of time as an integer number of seconds since the Epoch. Returns the number of microseconds for time. Returns the number of microseconds for time. static VALUE time_gmtime(VALUE time) { struct time_object *tobj; struct vtm vtm; GetTimeval(time, tobj); if (TIME_UTC_P(tobj)) { if (tobj->tm_got) return time; } else { time_modify(time); } if (!gmtimew(tobj->timew, &vtm)) rb_raise(rb_eArgError, \"gmtime error\"); tobj->vtm = vtm; tobj->tm_got = 1; TIME_SET_UTC(tobj); return time; } Returns the offset in seconds between the timezone of time and UTC. static VALUE time_utc_offset(VALUE time) { struct time_object *tobj; GetTimeval(time, tobj); MAKE_TM(time, tobj); if (TIME_UTC_P(tobj)) { return INT2FIX(0); } else { return tobj->vtm.utc_offset; } } This method converts a object to a String. The String contains the time in W3CDTF date/time format. The W3CDTF format is defined here: www.w3.org/TR/NOTE-datetime Returns an integer representing the day of the week, 0..6, with Sunday == 0. Returns a string which represents the time as a dateTime defined by Schema: where TZD is Z or [+-]hh:mm. If self is a UTC time, Z is used as TZD. [+-]hh:mm is used otherwise. specifies a number of digits to use for fractional seconds. Its default value is 0. You must require 'time' to use this method. Returns an integer representing the day of the year, 1..366. Returns the year for time (including the century). Returns the name of the time zone used for time. As of Ruby 1.8, returns “UTC'' rather than “GMT'' for UTC times. static VALUE time_zone(VALUE time) { struct time_object *tobj; GetTimeval(time, tobj); MAKE_TM(time, tobj); if (TIME_UTC_P(tobj)) { return rb_usascii_str_new_cstr(\"UTC\"); } if (tobj->vtm.zone == NULL) return Qnil; return time_zone_name(tobj->vtm.zone); }"
    },
    {
        "link": "https://stackoverflow.com/questions/14619494/how-to-understand-strptime-vs-strftime",
        "document": "I read the above answer and it is clear in its delineation of Time, DateTime and Date in Ruby.\n\nTime is packaged with Ruby. It is measured as seconds since January 1, 1970 UTC and is time-zone agnostic. More specifically, the Time class stores integer numbers, which presents the seconds intervals since the Epoch. We can think of this as Unix Time. It has some limitations. I read somewhere if stored as a 64-bit signed integer, it can represent dates between 1823-11-12 to 2116-02-20, but on my system it can represent dates outside this range. If you do not specify the timezone to use in the enviroment variable ENV['TZ'], then it will default to your system time found in /etc/localtime on Unix-like systems. When to use Time? It is useful for measuring time elapse or interpolating a timestamp into a string value.\n\nRails actually extends the Time class. It accomplishes this through ActiveSupport::TimeWithZone. It provides support for configurable time zones. Note Rails will always convert time zone to UTC before it writes to or reads from the database, no matter what time zone you set in the configuration file. In other words, it is the default behaviour of Rails that all your time will get saved into database in UTC format.\n\nTimeWithZone provides a lot of very useful helper methods:\n\nFor most cases, the Time with the time zone class from Rails’ ActiveSupport is sufficient. But sometimes you just need a date.\n\nJust as with the Time class, Ruby is packaged with the Date class. Simply require the time library:\n\nSince Date is part of Ruby, it by default uses the timezone defined in /etc/localtime on Unix-like systems, unless you modify the TZ environmental variable. Just as with the Time class, Rails extends the Date class. Use Date.current instead of Date.today to take advantage of ActiveSupport::TimeWithZone and use Rails-based timezone configurations.\n\nNow there is one more class available with regards to dates and times. DateTime is a subclass of Date and can easily handles date, hour, minute, second and offset. It is both available in Ruby (via require 'time') and in Rails (via require 'date'). Rails extends it with TimeZone capabilities just like with the Time class.\n\nI personally do not see a need for using DateTime in your applications, for you can use Time itself to represent dates and times, and you can use Date to represent dates.\n\nThe second part of the question was regarding strptime and strftime. Time, Date and DateTime all have the strptime and strftime methods. strptime parses the given string representation and creates an object. Here is an example:\n\nThis is useful if you have an application and a user submits a form and you are given a date and/or represented as a string. You will want to parse it into a Time or Date before you save it to the database.\n\nstrftime formats a date or time. So you call it on a Date or Time object:\n\nAnd you can use them together to first parse user input and then format it in a certain way, perhaps to output into a csv file:"
    },
    {
        "link": "https://ruby-doc.org/stdlib-2.6.1/libdoc/date/rdoc/DateTime.html",
        "document": "A subclass of that easily handles date, hour, minute, second, and offset.\n\ndoes not consider any leap seconds, does not track any summer time rules.\n\nA object is created with , , , , , , , , etc.\n\nThe last element of day, hour, minute, or second can be a fractional number. The fractional number's precision is assumed at most nanosecond.\n\nAn optional argument, the offset, indicates the difference between the local time and UTC. For example, represents ahead of 3 hours of UTC, represents behind of 5 hours of UTC. The offset should be -1 to +1, and its precision is assumed at most second. The default value is zero (equals to UTC).\n\nAn optional argument, the day of calendar reform ( ), denotes a Julian day number, which should be 2298874 to 2426355 or negative/positive infinity. The default value is (2299161=1582-10-15).\n\nA object has various methods. See each reference.\n\nIt's a common misconception that William Shakespeare and Miguel de Cervantes died on the same day in history - so much so that UNESCO named April 23 as World Book Day because of this fact. However, because England hadn't yet adopted the Gregorian Calendar Reform (and wouldn't until 1752) their deaths are actually 10 days apart. Since Ruby's class implements a proleptic Gregorian calendar and has no concept of calendar reform there's no way to express this with objects. This is where steps in:\n\nAlready you can see something is weird - the days of the week are different. Taking this further:\n\nThis shows that in fact they died 10 days apart (in reality 11 days since Cervantes died a day earlier but was buried on the 23rd). We can see the actual date of Shakespeare's death by using the method to convert it:\n\nSo there's an argument that all the celebrations that take place on the 23rd April in Stratford-upon-Avon are actually the wrong date since England is now using the Gregorian calendar. You can see why when we transition across the reform date boundary:\n\nAs you can see, if we're accurately tracking the number of solar years since Shakespeare's birthday then the correct anniversary date would be the 4th May and not the 23rd April.\n\nSo when should you use in Ruby and when should you use ? Almost certainly you'll want to use since your app is probably dealing with current dates and times. However, if you need to deal with dates and times in a historical context you'll want to use to avoid making the same mistakes as UNESCO. If you also have to deal with timezones then best of luck - just bear in mind that you'll probably be dealing with local solar times, since it wasn't until the 19th century that the introduction of the railways necessitated the need for Standard Time and eventually timezones."
    },
    {
        "link": "https://docs.ruby-lang.org/en/master/Time.html",
        "document": "Although its value can be expressed as a single numeric (see Epoch Seconds below), it can be convenient to deal with the value by parts:\n\nEpoch seconds is the exact number of seconds (including fractional subseconds) since the Unix Epoch, January 1, 1970.\n\nYou can retrieve that value exactly using method :\n\nOther retrieval methods such as and may return a value that rounds or truncates subseconds.\n\nA object derived from the system clock (for example, by method ) has the resolution supported by the system.\n\nConceptually, class uses a rational value to represent the number of seconds from Epoch, 1970-01-01 00:00:00 UTC. There are no boundary or resolution limitations. The value can be obtained using .\n\nThe class always uses the Gregorian calendar. I.e. the proleptic Gregorian calendar is used. Other calendars, such as Julian calendar, are not supported.\n\nThe implementation uses a signed 63 bit integer, (Bignum) object or Ratoinal object to represent a rational value. (The signed 63 bit integer is used regardless of 32 and 64 bit environments.) The value represents the number of nanoseconds from Epoch. The signed 63 bit integer can represent 1823-11-12 to 2116-02-20. When or object is used (before 1823, after 2116, under nanosecond), works slower than when the signed 63 bit integer is used.\n\nRuby uses the C function and to map between the number and 6-tuple (year,month,day,hour,minute,second). is used for local time and is used for UTC.\n\nand has no range limit, but the localtime and gmtime has range limits due to the C types and . If that limit is exceeded, Ruby extrapolates the localtime function.\n\ncan represent 1901-12-14 to 2038-01-19 if it is 32 bit signed integer, -292277022657-01-27 to 292277026596-12-05 if it is 64 bit signed integer. However on some platforms doesn’t supports negative (before 1970).\n\nhas tm_year member to represent years. ( means the year 1900.) It is defined as in the C standard. tm_year can represent years between -2147481748 to 2147485547 if is 32 bit.\n\nRuby supports leap seconds as far as if the C function and supports it. They use the tz database in most Unix systems. The tz database has timezones which supports leap seconds. For example, “Asia/Tokyo” doesn’t support leap seconds but “right/Asia/Tokyo” supports leap seconds. So, Ruby supports leap seconds if the TZ environment variable is set to “right/Asia/Tokyo” in most Unix systems.\n\nAll of these examples were done using the EST timezone which is GMT-5.\n\nYou can create a new instance of with . This will use the current system time. is an alias for this. You can also pass parts of the time to such as year, month, minute, etc. When you want to construct a time this way you must pass at least a year. If you pass the year with nothing else time will default to January 1 of that year at 00:00:00 with the current system timezone. Here are some examples:\n\nYou can also use and to infer local and UTC timezones instead of using the current system setting.\n\nYou can also create a new time using which takes the number of seconds (with subsecond) since the Unix Epoch.\n\nWorking with an Instance of\n\nOnce you have an instance of there is a multitude of things you can do with it. Below are some examples. For all of the following examples, we will work on the assumption that you have done the following:\n\nWhat year was that again?\n\nWas it daylight savings at the time?\n\nHow many seconds was that since the Unix Epoch?\n\nYou can also do standard functions like compare two times.\n\nHere, class provides methods that are useful for:\n• : Returns a new time from specified arguments (year, month, etc.), including an optional timezone value.\n• (aliased as ): Same as , except the timezone is the local timezone.\n• (aliased as ): Same as , except the timezone is UTC.\n• : Returns a new time based on seconds since epoch.\n• : Returns a new time based on the current system time.\n• (plus): Returns a new time increased by the given number of seconds.\n• (minus): Returns a new time decreased by the given number of seconds.\n• : Returns the year of the time.\n• (aliased as ): Returns the month of the time.\n• (aliased as ): Returns the day of the month.\n• : Returns the hours value for the time.\n• : Returns the minutes value for the time.\n• : Returns the seconds value for the time.\n• (aliased as ): Returns the number of microseconds in the subseconds value of the time.\n• (aliased as : Returns the number of nanoseconds in the subsecond part of the time.\n• : Returns the subseconds value for the time.\n• : Returns the integer weekday value of the time (0 == Sunday).\n• : Returns the integer yearday value of the time (1 == January 1).\n• : Returns the integer hash value for the time.\n• (aliased as and ): Returns the offset in seconds between time and UTC.\n• : Returns the float number of seconds since epoch for the time.\n• (aliased as ): Returns the integer number of seconds since epoch for the time.\n• : Returns the number of seconds since epoch for the time.\n• : Returns a string representation of the timezone of the time.\n• (aliased as ): Returns whether the time is UTC.\n• (aliased as ): Returns whether the time is DST (daylight saving time).\n• : Returns whether the time is a Sunday.\n• : Returns whether the time is a Monday.\n• : Returns whether the time is a Tuesday.\n• : Returns whether the time is a Wednesday.\n• : Returns whether the time is a Thursday.\n• : Returns whether the time is a Saturday.\n• : Returns whether the time is equal to another time.\n• (aliased as ): Returns the time as a string.\n• : Returns the time in detail as a string.\n• : Returns the time as a string, according to a given format.\n• : Returns a 10-element array of values from the time.\n• (aliased as ): Returns a new time converted to UTC.\n• (aliased as ): Converts time to UTC in place.\n• : Returns a hash of time components used in pattern-matching.\n• : Returns a new time with subseconds raised to a ceiling.\n• : Returns a new time with subseconds lowered to a floor.\n\nFor the forms of argument , see Timezone Specifiers.\n\nCertain methods accept arguments that specify timezones:\n\nThe value given with any of these must be one of the following (each detailed below):\n\nThe zone value may be a string offset from UTC in the form or , where:\n• is the 2-digit hour in the range .\n• is the 2-digit minute in the range .\n\nThe zone value may be a letter in the range or ; see List of military time zones:\n\nThe zone value may be an integer number of seconds in the range :\n\nThe zone value may be an object responding to certain timezone methods, an instance of Timezone and TZInfo for example.\n• Called when is invoked with as the value of positional argument or keyword argument .\n• Called when or is invoked with as the value for keyword argument , and when or is called with as the value for positional argument . The UTC offset will be calculated as the difference between the original time and the returned object as an . If the object is in fixed offset, its is also counted.\n\nA custom timezone class may have these instance methods, which will be called if defined:\n• Called when is invoked with a format involving . a string abbreviation for the timezone name.\n• Called when or is invoked with as the value for keyword argument , and when or is called with as the value for positional argument . whether the time is daylight saving time.\n• the string name of the timezone.\n\nA -like object is a container object capable of interfacing with timezone libraries for timezone conversion.\n\nThe argument to the timezone conversion methods above will have attributes similar to , except that timezone related attributes are meaningless.\n\nThe objects returned by and methods of the timezone object may be of the same class as their arguments, of arbitrary object classes, or of class .\n\nFor a returned class other than , the class must have the following methods:\n\nFor a returned , its components, decomposed in UTC, are interpreted as times in the specified timezone.\n\nIf the class (the receiver of class methods, or the class of the receiver of instance methods) has singleton method, this method is called to achieve the corresponding timezone object from a timezone name.\n\nFor example, using Timezone:\n\nYou can define this method per subclasses, or on the toplevel class."
    },
    {
        "link": "https://guides.rubyonrails.org/association_basics.html",
        "document": "Active Record associations allow you to define relationships between models. Associations are implemented as special macro style calls that make it easy to tell Rails how your models relate to each other, which helps you manage your data more effectively, and makes common operations simpler and easier to read.\n\nWhen you set up an association, Rails helps define and manage the Primary Key and Foreign Key relationships between instances of the two models, while the database ensures that your data stays consistent and properly linked.\n\nThis makes it easy to keep track of which records are related. It also adds useful methods to your models so you can work with related data more easily.\n\nConsider a simple Rails application with models for authors and books.\n\nWithout associations, creating and deleting books for that author would require a tedious and manual process. Here's what that would look like:\n\nTo add a new book for an existing author, you'd need to provide the value when creating the book.\n\nTo delete an author and ensure all their books are also deleted, you need to retrieve all the author's , loop through each to destroy it, and then destroy the author.\n\nHowever, with associations, we can streamline these operations, as well as others, by explicitly informing Rails about the relationship between the two models. Here's the revised code for setting up authors and books using associations:\n\nWith this change, creating a new book for a particular author is simpler:\n\nDeleting an author and all of its books is much easier:\n\nWhen you set up an association in Rails, you still need to create a migration to ensure that the database is properly configured to handle the association. This migration will need to add the necessary foreign key columns to your database tables.\n\nFor example, if you set up a association in the model, you would create a migration to add the column to the table:\n\nThis migration will add the column and set up the foreign key relationship in the database, ensuring that your models and database stay in sync.\n\nTo learn more about the different types of associations, you can read the next section of this guide. Following that, you'll find some tips and tricks for working with associations. Finally, there's a complete reference to the methods and options for associations in Rails.\n\nRails supports six types of associations, each with a particular use-case in mind.\n\nHere is a list of all of the supported types with a link to their API docs for more detailed information on how to use them, their method parameters, etc.\n\nIn the remainder of this guide, you'll learn how to declare and use the various forms of associations. First, let's take a quick look at the situations where each association type is appropriate.\n\nA association sets up a relationship with another model, such that each instance of the declaring model \"belongs to\" one instance of the other model. For example, if your application includes authors and books, and each book can be assigned to exactly one author, you'd declare the book model this way:\n\nThe corresponding migration might look like this:\n\nIn database terms, the association says that this model's table contains a column which represents a reference to another table. This can be used to set up one-to-one or one-to-many relations, depending on the setup. If the table of the other class contains the reference in a one-to-one relation, then you should use instead.\n\nWhen used alone, produces a one-directional one-to-one relationship. Therefore each book in the above example \"knows\" its author, but the authors don't know about their books. To setup a bi-directional association - use in combination with a or on the other model, in this case the Author model.\n\nHence, depending on the use case, you might also need to add a database-level foreign key constraint on the reference column, like this:\n\nThis ensures that even though allows to be NULL, when it's not NULL, it must still reference a valid record in the authors table.\n\nWhen you declare a association, the declaring class automatically gains numerous methods related to the association. Some of these are:\n\nWe'll discuss some of the common methods, but you can find an exhaustive list in the ActiveRecord Associations API.\n\nIn all of the above methods, is replaced with the symbol passed as the first argument to . For example, given the declaration:\n\nAn instance of the model will have the following methods:\n\nThe method returns the associated object, if any. If no associated object is found, it returns .\n\nIf the associated object has already been retrieved from the database for this object, the cached version will be returned. To override this behavior (and force a database read), call on the parent object.\n\nTo unload the cached version of the associated object—causing the next access, if any, to query it from the database—call on the parent object.\n\nThe method assigns an associated object to this object. Behind the scenes, this means extracting the primary key from the associated object and setting this object's foreign key to the same value.\n\nThe method returns a new object of the associated type. This object will be instantiated from the passed attributes, and the link through this object's foreign key will be set, but the associated object will not yet be saved.\n\nThe method takes it a step further and also saves the associated object once it passes all of the validations specified on the associated model.\n\nFinally, does the same, but raises if the record is invalid.\n\nThe method returns true if a new associated object has been assigned and the foreign key will be updated in the next save.\n\nThe method returns true if the previous save updated the association to reference a new associate object.\n\nYou can see if any associated objects exist by using the method:\n\nAssigning an object to a association does not automatically save either the current object or the associated object. However, when you save the current object, the association is saved as well.\n\nA association indicates that one other model has a reference to this model. That model can be fetched through this association.\n\nFor example, if each supplier in your application has only one account, you'd declare the supplier model like this:\n\nThe main difference from is that the link column (in this case ) is located in the other table, not the table where the is declared.\n\nThe corresponding migration might look like this:\n\nThe association creates a one-to-one match with another model. In database terms, this association says that the other class contains the foreign key. If this class contains the foreign key, then you should use instead.\n\nDepending on the use case, you might also need to create a unique index and/or a foreign key constraint on the supplier column for the accounts table. The unique index ensures that each supplier is associated with only one account and allows you to query in an efficient manner, while the foreign key constraint ensures that the in the table refers to a valid in the table. This enforces the association at the database level.\n\nThis relation can be bi-directional when used in combination with on the other model.\n\nWhen you declare a association, the declaring class automatically gains numerous methods related to the association. Some of these are:\n\nWe'll discuss some of the common methods, but you can find an exhaustive list in the ActiveRecord Associations API.\n\nLike with the references, in all of these methods, is replaced with the symbol passed as the first argument to . For example, given the declaration:\n\nEach instance of the model will have these methods:\n\nThe method returns the associated object, if any. If no associated object is found, it returns .\n\nIf the associated object has already been retrieved from the database for this object, the cached version will be returned. To override this behavior (and force a database read), call on the parent object.\n\nTo unload the cached version of the associated object—forcing the next access, if any, to query it from the database—call on the parent object.\n\nThe method assigns an associated object to this object. Behind the scenes, this means extracting the primary key from this object and setting the associated object's foreign key to the same value.\n\nThe method returns a new object of the associated type. This object will be instantiated from the passed attributes, and the link through this objects foreign key will be set, but the associated object will not yet be saved.\n\nThe method takes it a step further and also saves the associated object once it passes all of the validations specified on the associated model.\n\nFinally, does the same as above, but raises if the record is invalid.\n\nYou can see if any associated objects exist by using the method:\n\nWhen you assign an object to a association, that object is automatically saved to update its foreign key. Additionally, any object being replaced is also automatically saved, as its foreign key will change too.\n\nIf either of these saves fails due to validation errors, the assignment statement returns , and the assignment itself is canceled.\n\nIf the parent object (the one declaring the association) is unsaved (that is, returns ) then the child objects are not saved immediately. They will be automatically saved when the parent object is saved.\n\nIf you want to assign an object to a association without saving the object, use the method. This method creates a new, unsaved instance of the associated object, allowing you to work with it before deciding to save it.\n\nUse when you want to control the saving behavior of the associated objects for the model. This setting prevents the associated object from being saved automatically when the parent object is saved. In contrast, use when you need to work with an unsaved associated object and delay its persistence until you're ready.\n\nA association is similar to , but indicates a one-to-many relationship with another model. You'll often find this association on the \"other side\" of a association. This association indicates that each instance of the model has zero or more instances of another model. For example, in an application containing authors and books, the author model could be declared like this:\n\nestablishes a one-to-many relationship between models, allowing each instance of the declaring model ( ) to have multiple instances of the associated model ( ).\n\nThe corresponding migration might look like this:\n\nThe association creates a one-to-many relationship with another model. In database terms, this association says that the other class will have a foreign key that refers to instances of this class.\n\nIn this migration, the table is created with a column to store the names of authors. The table is also created, and it includes a association. This association establishes a foreign key relationship between the and tables. Specifically, the column in the table acts as a foreign key, referencing the column in the table. By including this association in the table, we ensure that each book is associated with a single author, enabling a association from the model. This setup allows each author to have multiple associated books.\n\nDepending on the use case, it's usually a good idea to create a non-unique index and optionally a foreign key constraint on the author column for the books table. Adding an index on the column improves query performance when retrieving books associated with a specific author.\n\nIf you wish to enforce referential integrity at the database level, add the option to the column declarations above. This will ensure that the in the books table must correspond to a valid in the table,\n\nThis relation can be bi-directional when used in combination with on the other model.\n\nWhen you declare a association, the declaring class gains numerous methods related to the association. Some of these are:\n\nWe'll discuss some of the common methods, but you can find an exhaustive list in the ActiveRecord Associations API.\n\nIn all of these methods, is replaced with the symbol passed as the first argument to , and is replaced with the singularized version of that symbol. For example, given the declaration:\n\nAn instance of the model can have the following methods:\n\nThe method returns a Relation of all of the associated objects. If there are no associated objects, it returns an empty Relation.\n\nThe method removes one or more objects from the collection by setting their foreign keys to .\n\nThe method removes one or more objects from the collection by running on each object.\n\nThe method removes all objects from the collection according to the strategy specified by the option. If no option is given, it follows the default strategy. The default strategy for associations is , and for associations is to set the foreign keys to .\n\nThe method returns a Relation of all of the associated objects, forcing a database read. If there are no associated objects, it returns an empty Relation.\n\nThe method makes the collection contain only the supplied objects, by adding and deleting as appropriate. The changes are persisted to the database.\n\nThe method makes the collection contain only the objects identified by the supplied primary key values, by adding and deleting as appropriate. The changes are persisted to the database.\n\nThe method returns an array of the ids of the objects in the collection.\n\nThe method returns if the collection does not contain any associated objects.\n\nThe method returns the number of objects in the collection.\n\nThe method finds objects within the collection's table.\n\nThe method finds objects within the collection based on the conditions supplied but the objects are loaded lazily meaning that the database is queried only when the object(s) are accessed.\n\nThe method checks whether an object meeting the supplied conditions exists in the collection's table.\n\nThe method returns a single or array of new objects of the associated type. The object(s) will be instantiated from the passed attributes, and the link through their foreign key will be created, but the associated objects will not yet be saved.\n\nThe method returns a single or array of new objects of the associated type. The object(s) will be instantiated from the passed attributes, the link through its foreign key will be created, and, once it passes all of the validations specified on the associated model, the associated object will be saved.\n\ndoes the same as , but raises if the record is invalid.\n\nWhen you assign an object to a association, that object is automatically saved (in order to update its foreign key). If you assign multiple objects in one statement, then they are all saved.\n\nIf any of these saves fails due to validation errors, then the assignment statement returns and the assignment itself is cancelled.\n\nIf the parent object (the one declaring the association) is unsaved (that is, returns ) then the child objects are not saved when they are added. All unsaved members of the association will automatically be saved when the parent is saved.\n\nIf you want to assign an object to a association without saving the object, use the method.\n\nA association is often used to set up a many-to-many relationship with another model. This association indicates that the declaring model can be matched with zero or more instances of another model by proceeding through a third model.\n\nFor example, consider a medical practice where patients make appointments to see physicians. The relevant association declarations could look like this:\n\nestablishes a many-to-many relationship between models, allowing instances of one model (Physician) to be associated with multiple instances of another model (Patient) through a third \"join\" model (Appointment).\n\nThe corresponding migration might look like this:\n\nIn this migration the and tables are created with a column. The table, which acts as the join table, is created with and columns, establishing the many-to-many relationship between and .\n\nYou could also consider using a composite primary key for the join table in the relationship like below:\n\nThe collection of join models in a association can be managed using standard association methods. For example, if you assign a list of patients to a physician like this:\n\nRails will automatically create new join models for any patients in the new list that were not previously associated with the physician. Additionally, if any patients that were previously associated with the physician are not included in the new list, their join records will be automatically deleted. This simplifies managing many-to-many relationships by handling the creation and deletion of the join models for you.\n\nThe association is also useful for setting up \"shortcuts\" through nested associations. This is particularly beneficial when you need to access a collection of related records through an intermediary association.\n\nFor example, if a document has many sections, and each section has many paragraphs, you may sometimes want to get a simple collection of all paragraphs in the document without having to manually traverse through each section.\n\nYou can set this up with a association as follows:\n\nWith specified, Rails will now understand:\n\nWhereas, if you had not set up a association, you would have needed to do something like this to get paragraphs in a document:\n\nA association sets up a one-to-one relationship with another model through an intermediary model. This association indicates that the declaring model can be matched with one instance of another model by proceeding through a third model.\n\nFor example, if each supplier has one account, and each account is associated with one account history, then the supplier model could look like this:\n\nThis setup allows a to directly access its through its .\n\nThe corresponding migration to set up these associations might look like this:\n\nA association creates a direct many-to-many relationship with another model, with no intervening model. This association indicates that each instance of the declaring model refers to zero or more instances of another model.\n\nFor example, consider an application with and models, where each assembly can contain many parts, and each part can be used in many assemblies. You can set up the models as follows:\n\nEven though a does not require an intervening model, it does require a separate table to establish the many-to-many relationship between the two models involved. This intervening table serves to store the related data, mapping the associations between instances of the two models. The table does not necessarily need a primary key since its purpose is solely to manage the relationship between the associated records. The corresponding migration might look like this:\n\nThe association creates a many-to-many relationship with another model. In database terms, this associates two classes via an intermediate join table that includes foreign keys referring to each of the classes.\n\nIf the join table for a association has additional columns beyond the two foreign keys, these columns will be added as attributes to records retrieved via that association. Records returned with additional attributes will always be read-only, because Rails cannot save changes to those attributes.\n\nWhen you declare a association, the declaring class gains numerous methods related to the association. Some of these are:\n\nWe'll discuss some of the common methods, but you can find an exhaustive list in the ActiveRecord Associations API.\n\nIn all of these methods, is replaced with the symbol passed as the first argument to , and is replaced with the singularized version of that symbol. For example, given the declaration:\n\nAn instance of the model can have the following methods:\n\nThe method returns a Relation of all of the associated objects. If there are no associated objects, it returns an empty Relation.\n\nThe method adds one or more objects to the collection by creating records in the join table.\n\nThe method removes one or more objects from the collection by deleting records in the join table. This does not destroy the objects.\n\nThe method removes one or more objects from the collection by deleting records in the join table. This does not destroy the objects.\n\nThe method removes every object from the collection by deleting the rows from the joining table. This does not destroy the associated objects.\n\nThe method makes the collection contain only the supplied objects, by adding and deleting as appropriate. The changes are persisted to the database.\n\nThe method makes the collection contain only the objects identified by the supplied primary key values, by adding and deleting as appropriate. The changes are persisted to the database.\n\nThe method returns an array of the ids of the objects in the collection.\n\nThe method returns if the collection does not contain any associated objects.\n\nThe method returns the number of objects in the collection.\n\nThe method finds objects within the collection's table.\n\nThe method finds objects within the collection based on the conditions supplied but the objects are loaded lazily meaning that the database is queried only when the object(s) are accessed.\n\nThe method checks whether an object meeting the supplied conditions exists in the collection's table.\n\nThe method returns a new object of the associated type. This object will be instantiated from the passed attributes, and the link through the join table will be created, but the associated object will not yet be saved.\n\nThe method returns a new object of the associated type. This object will be instantiated from the passed attributes, the link through the join table will be created, and, once it passes all of the validations specified on the associated model, the associated object will be saved.\n\nDoes the same as , but raises if the record is invalid.\n\nThe method returns a Relation of all of the associated objects, forcing a database read. If there are no associated objects, it returns an empty Relation.\n\nWhen you assign an object to a association, that object is automatically saved (in order to update the join table). If you assign multiple objects in one statement, then they are all saved.\n\nIf any of these saves fails due to validation errors, then the assignment statement returns and the assignment itself is cancelled.\n\nIf the parent object (the one declaring the association) is unsaved (that is, returns ) then the child objects are not saved when they are added. All unsaved members of the association will automatically be saved when the parent is saved.\n\nIf you want to assign an object to a association without saving the object, use the method.\n\nIf you want to set up a one-to-one relationship between two models, you can choose between a and a association. How do you know which one to choose?\n\nThe distinction lies in the placement of the foreign key, which goes on the table of the class declaring the association. However, it’s essential to understand the semantics to determine the correct associations:\n• : This association indicates that the current model contains the foreign key and is a child in the relationship. It references another model, implying that each instance of this model is linked to one instance of the other model.\n• : This association indicates that the current model is the parent in the relationship, and it owns one instance of the other model.\n\nFor example, consider a scenario with suppliers and their accounts. It makes more sense to say that a supplier has/owns an account (where the supplier is the parent) rather than an account has/owns a supplier. Therefore, the correct associations would be:\n• An account belongs to one supplier.\n\nHere is how you can define these associations in Rails:\n\nTo implement these associations, you'll need to create the corresponding database tables and set up the foreign key. Here's an example migration:\n\nRemember that the foreign key goes on the table of the class declaring the belongs_to association. In this case the table.\n\nRails offers two different ways to declare a many-to-many relationship between models: and . Understanding the differences and use cases for each can help you choose the best approach for your application's needs.\n\nThe association sets up a many-to-many relationship through an intermediary model (also known as a join model). This approach is more flexible and allows you to add validations, callbacks, and extra attributes to the join model. The join table needs a (or a composite primary key).\n• You need to add extra attributes or methods to the join table.\n• You require validations or callbacks on the join model.\n• The join table should be treated as an independent entity with its own behavior.\n\nThe association allows you to create a many-to-many relationship directly between two models without needing an intermediary model. This method is straightforward and is suitable for simple associations where no additional attributes or behaviors are required on the join table. For associations, you'll need to create a join table without a primary key.\n• The association is simple and does not require additional attributes or behaviors on the join table.\n• You do not need validations, callbacks, or extra methods on the join table.\n\nA slightly more advanced twist on associations is the polymorphic association. Polymorphic associations in Rails allow a model to belong to multiple other models through a single association. This can be particularly useful when you have a model that needs to be linked to different types of models.\n\nFor instance, imagine you have a model that can belong to either an or a , because each of these can have a profile picture. Here's how this could be declared:\n\nIn the context above, is a name chosen for the association. It's a symbolic name that represents the polymorphic association between the model and other models such as and . The important thing is to use the same name ( ) consistently across all associated models to establish the polymorphic association correctly.\n\nWhen you declare in the model, you're saying that a can belong to any model (like or ) through this association.\n\nYou can think of a polymorphic declaration as setting up an interface that any other model can use. This allows you to retrieve a collection of pictures from an instance of the model using . Similarly, you can retrieve a collection of pictures from an instance of the model using .\n\nAdditionally, if you have an instance of the model, you can get its parent via , which could be an or a .\n\nTo setup a polymorphic association manually you would need to declare both a foreign key column ( ) and a type column ( ) in the model:\n\nIn our example, could be the ID of either an or a , and is the name of the associated model's class, so either or .\n\nWhile creating the polymorphic association manually is acceptable, it is instead recommended to use or its alias and specify so that Rails knows that the association is polymorphic, and it automatically adds both the foreign key and type columns to the table.\n\nFor example, if you change the class name from to then you'd need to run a migration script to update the column in the table (or whichever table is affected) with the new class name. Additionally, you'll need to update any other references to the class name throughout your application code to reflect the change.\n\nRails can often infer primary key-foreign key relationships between associated models, but when dealing with composite primary keys, Rails typically defaults to using only part of the composite key, often the id column, unless explicitly instructed otherwise.\n\nIf you're working with composite primary keys in your Rails models and need to ensure the correct handling of associations, please refer to the Associations section of the Composite Primary Keys guide. This section provides comprehensive guidance on setting up and using associations with composite primary keys in Rails, including how to specify composite foreign keys when necessary.\n\nA self-join is a regular join, but the table is joined with itself. This is useful in situations where there is a hierarchical relationship within a single table. A common example is an employee management system where an employee can have a manager, and that manager is also an employee.\n\nConsider an organization where employees can be managers of other employees. We want to track this relationship using a single table.\n\nIn your Rails model, you define the class to reflect these relationships:\n\nsets up a one-to-many relationship where an employee can have many subordinates. Here, we specify that the related model is also ( ) and the foreign key used to identify the manager is .\n\nsets up a one-to-one relationship where an employee can belong to one manager. Again, we specify the related model as .\n\nTo support this relationship, we need to add a column to the table. This column references the of another employee (the manager).\n• ensures that the column references the column of the table.\n\nWith this setup, you can easily access an employee's subordinates and manager in your Rails application.\n\nTo get an employee's subordinates:\n\nTo get an employee's manager:\n\nSingle Table Inheritance (STI) is a pattern in Rails that allows multiple models to be stored in a single database table. This is useful when you have different types of entities that share common attributes and behavior but also have specific behaviors.\n\nFor example, suppose we have , , and models. These models will share fields like and , but each will have unique behaviors. They will also each have their own controller.\n\nFirst, we generate the base model with shared fields:\n\nHere, the field is crucial for STI as it stores the model name ( , , or ). STI requires this field to differentiate between the different models stored in the same table.\n\nNext, we generate the , , and models that inherit from Vehicle. These models won't have their own tables; instead, they will use the table.\n\nFor this, we can use the option, which will generate a model that inherits from the specified parent and without equivalent migration (since the table already exists).\n\nThis generates a model that inherits from :\n\nThis means that all behavior added to Vehicle is available for Car too, as associations, public methods, etc. Creating a car will save it in the table with \"Car\" as the field:\n\nRepeat the same process for and .\n\nThis will generate the following SQL:\n\nQuerying car records will search only for vehicles that are cars:\n\nYou can add specific behavior or methods to the child models. For example, adding a method to the model:\n\nNow you can call the method on a instance:\n\nEach model can have its own controller. For example, the :\n\nThere may be cases (like when working with a legacy database) where you need to override the name of the inheritance column. This can be achieved with the inheritance_column method.\n\nIn this setup, Rails will use the column to store the model type, allowing STI to function correctly with the custom column name.\n\nThere may be cases (like when working with a legacy database) where you need to disable Single Table Inheritance altogether. If you don't disable STI properly, you might encounter an error.\n\nTo disable STI, you can set the inheritance_column to .\n\nIn this configuration, Rails will treat the type column as a normal attribute and will not use it for STI purposes. This is useful if you need to work with a legacy schema that does not follow the STI pattern.\n\nThese adjustments provide flexibility when integrating Rails with existing databases or when specific customization is required for your models.\n\nworks best when there is little difference between subclasses and their attributes, but it includes all attributes of all subclasses in a single table.\n\nA disadvantage of this approach is that it can result in table bloat, as the table will include attributes specific to each subclass, even if they aren't used by others. This can be solved by using .\n\nAdditionally, if you’re using polymorphic associations, where a model can belong to more than one other model via a type and an ID, it could become complex to maintain referential integrity because the association logic must handle different types correctly.\n\nFinally, if you have specific data integrity checks or validations that differ between subclasses, you need to ensure these are correctly handled by Rails or the database, especially when setting up foreign key constraints.\n\nDelegated types solves the problem of table bloat via . This approach allows us to store shared attributes in a superclass table and have separate tables for subclass-specific attributes.\n\nTo use delegated types, we need to model our data as follows:\n• There is a superclass that stores shared attributes among all subclasses in its table.\n• Each subclass must inherit from the superclass, and will have a separate table for any additional attributes specific to it.\n\nThis eliminates the need to define attributes in a single table that are unintentionally shared among all subclasses.\n\nIn order to apply this to our example above, we need to regenerate our models.\n\nFirst, let's generate the base model which will act as our superclass:\n\nThen, we will generate new and models for delegation:\n\nAfter running the generators, our models should look like this:\n\nFirst, declare a in the superclass .\n\nThe parameter specifies the field to use for delegation, and include the types and as the delegate classes. The and fields store the subclass name and the record ID of the delegate subclass, respectively.\n\nNext, define a module to implement those delegated types by declaring the parameter in the association.\n\nInclude the created module in your subclass:\n\nWith this definition complete, our delegator now provides the following methods:\n\nWhen creating a new object, we can specify the subclass at the same time.\n\nWe can enhance our delegator by defining and using polymorphism on the subclasses. For example, to delegate the method from to it's subclasses:\n\nThis setup allows to delegate the method to its subclasses, where uses and uses a truncated version of .\n\nHere are a few things you should know to make efficient use of Active Record associations in your Rails applications:\n\nAll of the association methods are built around caching, which keeps the result of loaded associations for further operations. The cache is even shared across methods. For example:\n\nBut what if you want to reload the cache, because data might have been changed by some other part of the application? Just call on the association:\n\nWhen creating associations in Ruby on Rails models, it's important to avoid using names that are already used for instance methods of . This is because creating an association with a name that clashes with an existing method could lead to unintended consequences, such as overriding the base method and causing issues with functionality. For example, using names like or for associations would be problematic.\n\nAssociations are extremely useful, they are responsible for defining the relationships between models but they do not update your database schema. You are responsible for maintaining your database schema to match your associations. This usually involves two main tasks: creating foreign keys for associations and setting up the correct join table for and associations. You can read more about when to use a in the has many through vs has and belongs to many section.\n\nWhen you declare a association, you need to create foreign keys as appropriate. For example, consider this model:\n\nThis declaration needs to be backed up by a corresponding foreign key column in the books table. For a brand new table, the migration might look something like this:\n\nWhereas for an existing table, it might look like this:\n\nIf you create a association, you need to explicitly create the join table. Unless the name of the join table is explicitly specified by using the option, Active Record creates the name by using the lexical order of the class names. So a join between author and book models will give the default join table name of \"authors_books\" because \"a\" outranks \"b\" in lexical ordering.\n\nWhatever the name, you must manually generate the join table with an appropriate migration. For example, consider these associations:\n\nThese need to be backed up by a migration to create the table.\n\nYou can then fill out the migration and ensure that the table is created without a primary key.\n\nWe pass to because the join table does not represent a model. If you observe any strange behavior in a association like mangled model IDs, or exceptions about conflicting IDs, chances are you forgot to set when creating your migration.\n\nFor simplicity, you can also use the method :\n\nYou can read more about the method in the Active Record Migration Guides\n\nThe main difference in schema implementation between creating a join table for vs is that the join table for a requires an .\n\nBy default, associations look for objects only within the current module's scope. This feature is particularly useful when declaring Active Record models inside a module, as it keeps the associations scoped properly. For example:\n\nIn this example, both the and classes are defined within the same module ( ). This organization allows you to structure your models into folders based on their scope without needing to explicitly specify the scope in every association:\n\nIt is important to note that while model scoping helps organize your code, it does not change the naming convention for your database tables. For instance, if you have a model, the corresponding database table should still follow the naming convention and be named .\n\nHowever, if the and models are defined in different scopes, the associations will not work by default:\n\nTo associate a model with a model in a different namespace, you must specify the complete class name in your association declaration:\n\nBy explicitly declaring the option, you can create associations across different namespaces, ensuring the correct models are linked regardless of their module scope.\n\nIn Rails, it's common for associations between models to be bi-directional, meaning they need to be declared in both related models. Consider the following example:\n\nActive Record will attempt to automatically identify that these two models share a bi-directional association based on the association name. This information allows Active Record to:\n• None Since only one copy of the object is loaded, it helps to prevent inconsistencies.\n• None Automatic saving of associations in more cases:\n• None Validate the presence and absence of associations in more cases:\n\nSometimes, you might need to customize the association with options like or . When you do this, Rails might not automatically recognize the bi-directional association involving or options.\n\nCustom scopes on the opposite association also prevent automatic identification, as do custom scopes on the association itself unless is set to true.\n\nFor example, consider the following model declarations with a custom foreign key:\n\nDue to the option, Active Record will not automatically recognize the bi-directional association, which can lead to several issues:\n• None Execute needless queries for the same data (in this example causing N+1 queries): # This executes an author query for every book\n\nTo resolve these issues, you can explicitly declare bi-directional associations using the option:\n\nBy including the option in the association declaration, Active Record will recognize the bi-directional association and behave as described in the initial examples above.\n\nWhile Rails uses intelligent defaults that will work well in most situations, there may be times when you want to customize the behavior of the association references. Such customizations can be accomplished by passing options blocks when you create the association. For example, this association uses two such options:\n\nEach association supports numerous options which you can read more about in section of each association in the ActiveRecord Associations API. We'll discuss some of the common use cases below.\n\nIf the name of the other model cannot be derived from the association name, you can use the option to supply the model name. For example, if a book belongs to an author, but the actual name of the model containing authors is , you'd set things up this way:\n\nControls what happens to the associated object when its owner is destroyed:\n• , when the object is destroyed, will be called on its associated objects. This method not only removes the associated records from the database but also ensures that any defined callbacks (like and ) are executed. This is useful for performing custom logic during the deletion process, such as logging or cleaning up related data.\n• , when the object is destroyed, all its associated objects will be deleted directly from the database without calling their method. This method performs a direct deletion and bypasses any callbacks or validations in the associated models, making it more efficient but potentially leading to data integrity issues if important cleanup tasks are skipped. Use when you need to remove records quickly and are confident that no additional actions are required for the associated records.\n• : when the object is destroyed, an job is enqueued which will call destroy on its associated objects. Active Job must be set up for this to work. Do not use this option if the association is backed by foreign key constraints in your database. The foreign key constraint actions will occur inside the same transaction that deletes its owner.\n• causes the foreign key to be set to . Polymorphic type column is also nullified on polymorphic associations. Callbacks are not executed.\n• causes an exception to be raised if there is an associated record\n• causes an error to be added to the owner if there is an associated object\n\nDo not leave the option for associations with database constraints. Setting to is essential; otherwise, the foreign key of the associated object may be set to , preventing changes to it.\n\nWhen using on a scoped association, only the scoped objects are destroyed. For example, in a model defined as , calling destroy on a post will only delete published comments, leaving unpublished comments intact with a foreign key pointing to the deleted post.\n\nYou cannot use the option directly on a association. To manage deletions of join table records, handle them manually or switch to a association, which provides more flexibility and supports the option.\n\nBy convention, Rails assumes that the column used to hold the foreign key on this model is the name of the association with the suffix added. The option lets you set the name of the foreign key directly:\n\nBy default, Rails uses the column as the primary key for its tables. The option allows you to specify a different column as the primary key.\n\nFor example, if the table uses as the primary key instead of , and you want the table to reference as a foreign key ( ), you can configure it like this:\n\nWhen you execute , the record will have its value set to the value of .\n\ndoes not support the option. For this type of association, you can achieve similar functionality by using a join table with has_many association, which gives more flexibility and supports the option. You can read more about this in the section.\n\nIf you set the option to , then the or timestamp on the associated object will be set to the current time whenever this object is saved or destroyed:\n\nIn this case, saving or destroying a book will update the timestamp on the associated author. You can also specify a particular timestamp attribute to update:\n\ndoes not support the option. For this type of association, you can achieve similar functionality by using a join table with association. You can read more about this in the section.\n\nIf you set the option to , then new associated objects will be validated whenever you save this object. By default, this is : new associated objects will not be validated when this object is saved.\n\ndoes not support the option. For this type of association, you can achieve similar functionality by using a join table with has_many association. You can read more about this in the section.\n\nThe option specifies the name of the association that is the inverse of this association. See the bi-directional association section for more details.\n\nThe option specifies the source association type for a association that proceeds through a polymorphic association.\n\nEnforces strict loading every time an associated record is loaded through this association.\n\nThe can be found on a relationship. By convention, Rails assumes that the column in the join table used to hold the foreign key pointing to the other model is the name of that model with the suffix added. The option lets you set the name of the foreign key directly. For example:\n\nThe can be found on a relationship. If the default name of the join table, based on lexical ordering, is not what you want, you can use the option to override the default.\n\nScopes allow you to specify common queries that can be referenced as method calls on the association objects. This is useful for defining custom queries that are reused in multiple places in your application. For example:\n\nYou can use any of the standard querying methods inside the scope block. The following ones are discussed below:\n\nThe method lets you specify the conditions that the associated object must meet.\n\nYou can also set conditions via a hash:\n\nIf you use a hash-style , then record creation via this association will be automatically scoped using the hash. In this case, using or will create assemblies where the column has the value \"Seattle\".\n\nYou can use the method to specify second-order associations that should be eager-loaded when this association is used. For example, consider these models:\n\nIf you frequently retrieve representatives directly from suppliers ( ), then you can make your code somewhat more efficient by including representatives in the association from suppliers to accounts:\n\nIf you use , then the associated object will be read-only when retrieved via the association.\n\nThis is useful when you want to prevent the associated object from being modified through the association. For example, if you have a model that , you can use to prevent the author from being modified through the book:\n\nThe method lets you override the SQL clause used to retrieve data about the associated object. By default, Rails retrieves all columns.\n\nFor example, if you have an model with many s, but you only want to retrieve the of each book:\n\nNow, when you access an author's books, only the and columns will be retrieved from the table.\n\nIn this case, when you access a book's author, only the and columns will be retrieved from the table.\n\nand are associations that deal with collections of records, so you can use additional methods like , , , , and to customize the query used by the association.\n\nThe method supplies an attribute name to group the result set by, using a clause in the finder SQL.\n\nThe method lets you restrict the total number of objects that will be fetched through an association.\n\nThe method dictates the order in which associated objects will be received (in the syntax used by an SQL clause).\n\nThe method lets you override the SQL clause that is used to retrieve data about the associated objects. By default, Rails retrieves all columns.\n\nUse the method to keep the collection free of duplicates. This is mostly useful together with the option.\n\nIn the above case there are two readings and brings out both of them even though these records are pointing to the same article.\n\nIn the above case there are still two readings. However shows only one article because the collection loads only unique records.\n\nIf you want to make sure that, upon insertion, all of the records in the persisted association are distinct (so that you can be sure that when you inspect the association that you will never find duplicate records), you should add a unique index on the table itself. For example, if you have a table named and you want to make sure the articles can only be added to a person once, you could add the following in a migration:\n\nOnce you have this unique index, attempting to add the article to a person twice will raise an error:\n\nNote that checking for uniqueness using something like is subject to race conditions. Do not attempt to use to enforce distinctness in an association. For instance, using the article example from above, the following code would be racy because multiple users could be attempting this at the same time:\n\nYou can pass the owner of the association as a single argument to the scope block for even more control over the association scope. However, be aware that doing this will make preloading the association impossible.\n\nIn this example, the association of the model is scoped based on the status of the supplier.\n\nBy utilizing association extensions and scoping with the association owner, you can create more dynamic and context-aware associations in your Rails applications.\n\nThe option in Rails helps improve the efficiency of finding the number of associated objects. Consider the following models:\n\nBy default, querying results in a database call to perform a query. To optimize this, you can add a counter cache to the belonging model (in this case, ). This way, Rails can return the count directly from the cache without querying the database.\n\nWith this declaration, Rails will keep the cache value up to date, and then return that value in response to the method, avoiding the database call.\n\nAlthough the option is specified on the model with the declaration, the actual column must be added to the associated (in this case ) model. In this example, you need to add a column to the model:\n\nYou can specify a custom column name in the declaration instead of using the default . For example, to use :\n\nUsing counter caches on existing large tables can be troublesome. To avoid locking the table for too long, the column values must be backfilled separately from the column addition. This backfill must also happen before using ; otherwise, methods like , , etc., which rely on counter caches, may return incorrect results.\n\nTo backfill values safely while keeping counter cache columns updated with child record creation/removal and ensuring methods always get results from the database (avoiding potentially incorrect counter cache values), use . This setting ensures that methods always fetch results from the database, avoiding incorrect values from an uninitialized counter cache. If you need to specify a custom column name, use .\n\nIf for some reason you change the value of an owner model's primary key, and do not also update the foreign keys of the counted models, then the counter cache may have stale data. In other words, any orphaned models will still count towards the counter. To fix a stale counter cache, use .\n\nNormal callbacks hook into the life cycle of Active Record objects, allowing you to work with those objects at various points. For example, you can use a callback to cause something to happen just before an object is saved.\n\nAssociation callbacks are similar to normal callbacks, but they are triggered by events in the life cycle of a collection associated with an Active Record object. There are four available association callbacks:\n\nYou define association callbacks by adding options to the association declaration. For example:\n\nIn this example, the model has a association with . The callback is triggered before a book is added to the collection. If the method returns , the book is not added to the collection.\n\nBy using these association callbacks, you can customize the behavior of your associations, ensuring that specific actions are taken at key points in the life cycle of your collections.\n\nRead more about association callbacks in the Active Record Callbacks Guide\n\nRails provides the ability to extend the functionality of association proxy objects, which manage associations, by adding new finders, creators, or other methods through anonymous modules. This feature allows you to customize associations to meet the specific needs of your application.\n\nYou can extend a association with custom methods directly within the model definition. For example:\n\nIn this example, the method is added to the association of the model. This custom method allows you to find based on a specific prefix of the .\n\nIf you have an extension that should be shared by multiple associations, you can use a named extension module. For example:\n\nIn this case, the module is used to add a method to both the association in the model and the association in the model. This method retrieves records created within the last five days.\n\nExtensions can interact with the internals of the association proxy using the accessor. The provides three important attributes:\n• returns the object that the association is a part of.\n• returns the reflection object that describes the association.\n• returns the associated object for or , or the collection of associated objects for or .\n\nThese attributes allow extensions to access and manipulate the association proxy's internal state and behavior.\n\nHere's an advanced example demonstrating how to use these attributes in an extension:\n\nIn this example, the method performs a query on the association and logs the query details using the owner's logger. The method accesses the owner's logger via and the association's name via ."
    },
    {
        "link": "https://guides.rubyonrails.org/active_record_querying.html",
        "document": "What is the Active Record Query Interface?\n\nIf you're used to using raw SQL to find database records, then you will generally find that there are better ways to carry out the same operations in Rails. Active Record insulates you from the need to use SQL in most cases.\n\nActive Record will perform queries on the database for you and is compatible with most database systems, including MySQL, MariaDB, PostgreSQL, and SQLite. Regardless of which database system you're using, the Active Record method format will always be the same.\n\nCode examples throughout this guide will refer to one or more of the following models:\n\nTo retrieve objects from the database, Active Record provides several finder methods. Each finder method allows you to pass arguments into it to perform certain queries on your database without writing raw SQL.\n\nFinder methods that return a collection, such as and , return an instance of . Methods that find a single entity, such as and , return a single instance of the model.\n\nThe primary operation of can be summarized as:\n• Convert the supplied options to an equivalent SQL query.\n• Fire the SQL query and retrieve the corresponding results from the database.\n• Instantiate the equivalent Ruby object of the appropriate model for every resulting row.\n• Run and then callbacks, if any.\n\nActive Record provides several different ways of retrieving a single object.\n\nUsing the method, you can retrieve the object corresponding to the specified primary key that matches any supplied options. For example:\n\nThe SQL equivalent of the above is:\n\nThe method will raise an exception if no matching record is found.\n\nYou can also use this method to query for multiple objects. Call the method and pass in an array of primary keys. The return will be an array containing all of the matching records for the supplied primary keys. For example:\n\nThe SQL equivalent of the above is:\n\nIf your table uses a composite primary key, you'll need to pass find an array to find a single item. For instance, if customers were defined with as a primary key:\n\nThe SQL equivalent of the above is:\n\nTo find multiple customers with composite IDs, you would pass an array of arrays:\n\nThe SQL equivalent of the above is:\n\nThe method retrieves a record without any implicit ordering. For example:\n\nThe SQL equivalent of the above is:\n\nThe method returns if no record is found and no exception will be raised.\n\nYou can pass in a numerical argument to the method to return up to that number of results. For example\n\nThe SQL equivalent of the above is:\n\nThe method behaves exactly like , except that it will raise if no matching record is found.\n\nThe method finds the first record ordered by primary key (default). For example:\n\nThe SQL equivalent of the above is:\n\nThe method returns if no matching record is found and no exception will be raised.\n\nIf your default scope contains an order method, will return the first record according to this ordering.\n\nYou can pass in a numerical argument to the method to return up to that number of results. For example\n\nThe SQL equivalent of the above is:\n\nModels with composite primary keys will use the full composite primary key for ordering. For instance, if customers were defined with as a primary key:\n\nThe SQL equivalent of the above is:\n\nOn a collection that is ordered using , will return the first record ordered by the specified attribute for .\n\nThe SQL equivalent of the above is:\n\nThe method behaves exactly like , except that it will raise if no matching record is found.\n\nThe method finds the last record ordered by primary key (default). For example:\n\nThe SQL equivalent of the above is:\n\nThe method returns if no matching record is found and no exception will be raised.\n\nModels with composite primary keys will use the full composite primary key for ordering. For instance, if customers were defined with as a primary key:\n\nThe SQL equivalent of the above is:\n\nIf your default scope contains an order method, will return the last record according to this ordering.\n\nYou can pass in a numerical argument to the method to return up to that number of results. For example\n\nThe SQL equivalent of the above is:\n\nOn a collection that is ordered using , will return the last record ordered by the specified attribute for .\n\nThe SQL equivalent of the above is:\n\nThe method behaves exactly like , except that it will raise if no matching record is found.\n\nThe method finds the first record matching some conditions. For example:\n\nIt is equivalent to writing:\n\nThe SQL equivalent of the above is:\n\nNote that there is no in the above SQL. If your conditions can match multiple records, you should apply an order to guarantee a deterministic result.\n\nThe method behaves exactly like , except that it will raise if no matching record is found. For example:\n\nThis is equivalent to writing:\n\nWhen specifying conditions on methods like and , the use of will match against an attribute on the model. This is different from , where the ID passed in should be a primary key value.\n\nTake caution when using on models where is not the primary key, such as composite primary key models. For example, if customers were defined with as a primary key:\n\nHere, we might intend to search for a single record with the composite primary key , but Active Record will search for a record with an column of either 5 or 10, and may return the wrong record.\n\nWe often need to iterate over a large set of records, as when we send a newsletter to a large set of customers, or when we export data.\n\nThis may appear straightforward:\n\nBut this approach becomes increasingly impractical as the table size increases, since instructs Active Record to fetch the entire table in a single pass, build a model object per row, and then keep the entire array of model objects in memory. Indeed, if we have a large number of records, the entire collection may exceed the amount of memory available.\n\nRails provides two methods that address this problem by dividing records into memory-friendly batches for processing. The first method, , retrieves a batch of records and then yields each record to the block individually as a model. The second method, , retrieves a batch of records and then yields the entire batch to the block as an array of models.\n\nThe method retrieves records in batches and then yields each one to the block. In the following example, retrieves customers in batches of 1000 and yields them to the block one by one:\n\nThis process is repeated, fetching more batches as needed, until all of the records have been processed.\n\nworks on model classes, as seen above, and also on relations:\n\nas long as they have no ordering, since the method needs to force an order internally to iterate.\n\nIf an order is present in the receiver the behavior depends on the flag . If true, is raised, otherwise the order is ignored and a warning issued, which is the default. This can be overridden with the option , explained below.\n\nThe option allows you to specify the number of records to be retrieved in each batch, before being passed individually to the block. For example, to retrieve records in batches of 5000:\n\nBy default, records are fetched in ascending order of the primary key. The option allows you to configure the first ID of the sequence whenever the lowest ID is not the one you need. This would be useful, for example, if you wanted to resume an interrupted batch process, provided you saved the last processed ID as a checkpoint.\n\nFor example, to send newsletters only to customers with the primary key starting from 2000:\n\nSimilar to the option, allows you to configure the last ID of the sequence whenever the highest ID is not the one you need. This would be useful, for example, if you wanted to run a batch process using a subset of records based on and .\n\nFor example, to send newsletters only to customers with the primary key starting from 2000 up to 10000:\n\nAnother example would be if you wanted multiple workers handling the same processing queue. You could have each worker handle 10000 records by setting the appropriate and options on each worker.\n\nOverrides the application config to specify if an error should be raised when an order is present in the relation.\n\nSpecifies the primary key order (can be or ). Defaults to .\n\nThe method is similar to , since both retrieve batches of records. The difference is that yields batches to the block as an array of models, instead of individually. The following example will yield to the supplied block an array of up to 1000 customers at a time, with the final block containing any remaining customers:\n\nworks on model classes, as seen above, and also on relations:\n\nas long as they have no ordering, since the method needs to force an order internally to iterate.\n\nThe method accepts the same options as :\n\nJust like for , establishes how many records will be retrieved in each group. For example, retrieving batches of 2500 records can be specified as:\n\nThe option allows specifying the beginning ID from where records will be selected. As mentioned before, by default records are fetched in ascending order of the primary key. For example, to retrieve customers starting on ID: 5000 in batches of 2500 records, the following code can be used:\n\nThe option allows specifying the ending ID of the records to be retrieved. The code below shows the case of retrieving customers in batches, up to the customer with ID: 7000:\n\nThe option overrides the application config to specify if an error should be raised when a specific order is present in the relation.\n\nThe method allows you to specify conditions to limit the records returned, representing the -part of the SQL statement. Conditions can either be specified as a string, array, or hash.\n\nIf you'd like to add conditions to your find, you could just specify them in there, just like . This will find all books where the field value is 'Introduction to Algorithms'.\n\nNow what if that title could vary, say as an argument from somewhere? The find would then take the form:\n\nActive Record will take the first argument as the conditions string and any additional arguments will replace the question marks in it.\n\nIf you want to specify multiple conditions:\n\nIn this example, the first question mark will be replaced with the value in and the second will be replaced with the SQL representation of , which depends on the adapter.\n\nbecause of argument safety. Putting the variable directly into the conditions string will pass the variable to the database as-is. This means that it will be an unescaped variable directly from a user who may have malicious intent. If you do this, you put your entire database at risk because once a user finds out they can exploit your database they can do just about anything to it. Never ever put your arguments directly inside the conditions string.\n\nSimilar to the replacement style of params, you can also specify keys in your conditions string along with a corresponding keys/values hash:\n\nThis makes for clearer readability if you have a large number of variable conditions.\n\nAlthough condition arguments are automatically escaped to prevent SQL injection, SQL wildcards (i.e., and ) are not escaped. This may cause unexpected behavior if an unsanitized value is used in an argument. For example:\n\nIn the above code, the intent is to match titles that start with a user-specified string. However, any occurrences of or in will be treated as wildcards, leading to surprising query results. In some circumstances, this may also prevent the database from using an intended index, leading to a much slower query.\n\nTo avoid these problems, use to escape wildcard characters in the relevant portion of the argument:\n\nActive Record also allows you to pass in hash conditions which can increase the readability of your conditions syntax. With hash conditions, you pass in a hash with keys of the fields you want qualified and the values of how you want to qualify them:\n\nThis will generate SQL like this:\n\nThe field name can also be a string:\n\nIn the case of a belongs_to relationship, an association key can be used to specify the model if an Active Record object is used as the value. This method works with polymorphic relationships as well.\n\nHash conditions may also be specified in a tuple-like syntax, where the key is an array of columns and the value is an array of tuples:\n\nThis syntax can be useful for querying relations where the table uses a composite primary key:\n\nThis will find all books created yesterday by using a SQL statement:\n\nThis demonstrates a shorter syntax for the examples in Array Conditions\n\nBeginless and endless ranges are supported and can be used to build less/greater than conditions.\n\nThis would generate SQL like:\n\nIf you want to find records using the expression you can pass an array to the conditions hash:\n\nThis code will generate SQL like this:\n\nSQL queries can be built by :\n\nIn other words, this query can be generated by calling with no argument, then immediately chain with passing conditions. This will generate SQL like this:\n\nIf a query has a hash condition with non-nil values on a nullable column, the records that have values on the nullable column won't be returned. For example:\n\nconditions between two relations can be built by calling on the first relation, and passing the second one as an argument.\n\nconditions can be built by chaining conditions.\n\nconditions for the logical intersection between relations can be built by calling on the first relation, and passing the second one as an argument.\n\nTo retrieve records from the database in a specific order, you can use the method.\n\nFor example, if you're getting a set of records and want to order them in ascending order by the field in your table:\n\nYou could specify or as well:\n\nIf you want to call multiple times, subsequent orders will be appended to the first:\n\nYou can also order from a joined table\n\nBy default, selects all the fields from the result set using .\n\nTo select only a subset of fields from the result set, you can specify the subset via the method.\n\nFor example, to select only and columns:\n\nThe SQL query used by this find call will be somewhat like:\n\nBe careful because this also means you're initializing a model object with only the fields that you've selected. If you attempt to access a field that is not in the initialized record you'll receive:\n\nWhere is the attribute you asked for. The method will not raise the , so just be careful when working with associations because they need the method to function properly.\n\nIf you would like to only grab a single record per unique value in a certain field, you can use :\n\nThis would generate SQL like:\n\nYou can also remove the uniqueness constraint:\n\nTo apply to the SQL fired by the , you can specify the using and methods on the relation.\n\nYou can use to specify the number of records to be retrieved, and use to specify the number of records to skip before starting to return the records. For example\n\nwill return a maximum of 5 customers and because it specifies no offset it will return the first 5 in the table. The SQL it executes looks like this:\n\nwill return instead a maximum of 5 customers beginning with the 31st. The SQL looks like:\n\nTo apply a clause to the SQL fired by the finder, you can use the method.\n\nFor example, if you want to find a collection of the dates on which orders were created:\n\nAnd this will give you a single object for each date where there are orders in the database.\n\nThe SQL that would be executed would be something like this:\n\nTo get the total of grouped items on a single query, call after the .\n\nThe SQL that would be executed would be something like this:\n\nSQL uses the clause to specify conditions on the fields. You can add the clause to the SQL fired by the by adding the method to the find.\n\nThe SQL that would be executed would be something like this:\n\nThis returns the date and total price for each order object, grouped by the day they were ordered and where the total is more than $200.\n\nYou would access the for each order object returned like this:\n\nYou can specify certain conditions to be removed using the method. For example:\n\nThe SQL that would be executed:\n\nYou can also unscope specific clauses. For example, this will remove condition from the where clause:\n\nA relation which has used will affect any relation into which it is merged:\n\nYou can also override conditions using the method. For example:\n\nThe SQL that would be executed:\n\nThe method overrides an existing select statement. For example:\n\nThe SQL that would be executed:\n\nCompare this to the case where the clause is not used:\n\nthe SQL executed would be:\n\nThe method overrides the default scope order. For example if the class definition includes this:\n\nAnd you execute this:\n\nThe SQL that would be executed:\n\nYou can using the clause to specify a different way to order the books:\n\nThe SQL that would be executed:\n\nThe method reverses the ordering clause if specified.\n\nThe SQL that would be executed:\n\nIf no ordering clause is specified in the query, the orders by the primary key in reverse order.\n\nThe SQL that would be executed:\n\nThe method overrides an existing, named condition. For example:\n\nThe SQL that would be executed:\n\nIf the clause is not used, the where clauses are ANDed together:\n\nthe SQL executed would be:\n\nThe method overrides an existing, named condition. For example:\n\nThe SQL that would be executed:\n\nIf the clause is not used, the group clauses are combined together:\n\nthe SQL executed would be:\n\nThe method returns a chainable relation with no records. Any subsequent conditions chained to the returned relation will continue generating empty relations. This is useful in scenarios where you need a chainable response to a method or a scope that could return zero results.\n\nActive Record provides the method on a relation to explicitly disallow modification of any of the returned objects. Any attempt to alter a readonly record will not succeed, raising an exception.\n\nAs is explicitly set to be a readonly object, the above code will raise an exception when calling with an updated value of visits.\n\nLocking is helpful for preventing race conditions when updating records in the database and ensuring atomic updates.\n\nOptimistic locking allows multiple users to access the same record for edits, and assumes a minimum of conflicts with the data. It does this by checking whether another process has made changes to a record since it was opened. An exception is thrown if that has occurred and the update is ignored.\n\nIn order to use optimistic locking, the table needs to have a column called of type integer. Each time the record is updated, Active Record increments the column. If an update request is made with a lower value in the field than is currently in the column in the database, the update request will fail with an .\n\nYou're then responsible for dealing with the conflict by rescuing the exception and either rolling back, merging, or otherwise apply the business logic needed to resolve the conflict.\n\nThis behavior can be turned off by setting .\n\nTo override the name of the column, provides a class attribute called :\n\nPessimistic locking uses a locking mechanism provided by the underlying database. Using when building a relation obtains an exclusive lock on the selected rows. Relations using are usually wrapped inside a transaction for preventing deadlock conditions.\n\nThe above session produces the following SQL for a MySQL backend:\n\nYou can also pass raw SQL to the method for allowing different types of locks. For example, MySQL has an expression called where you can lock a record but still allow other queries to read it. To specify this expression just pass it in as the lock option:\n\nIf you already have an instance of your model, you can start a transaction and acquire the lock in one go using the following code:\n\nActive Record provides two finder methods for specifying clauses on the resulting SQL: and . While should be used for or custom queries, is used for queries using .\n\nThere are multiple ways to use the method.\n\nYou can just supply the raw SQL specifying the clause to :\n\nThis will result in the following SQL:\n\nActive Record lets you use the names of the associations defined on the model as a shortcut for specifying clauses for those associations when using the method.\n\nAll of the following will produce the expected join queries using :\n\nOr, in English: \"return a Book object for all books with reviews\". Note that you will see duplicate books if a book has more than one review. If you want unique books, you can use .\n\nOr, in English: \"return all books that have an author and at least one review\". Note again that books with multiple reviews will show up multiple times.\n\nOr, in English: \"return all books that have a review by a customer.\"\n\nOr, in English: \"return all authors that have books with reviews and have been ordered by a customer, and the suppliers for those books.\"\n\nSpecifying Conditions on the Joined Tables\n\nYou can specify conditions on the joined tables using the regular Array and String conditions. Hash conditions provide a special syntax for specifying conditions for the joined tables:\n\nThis will find all customers who have orders that were created yesterday, using a SQL expression to compare .\n\nAn alternative and cleaner syntax is to nest the hash conditions:\n\nFor more advanced conditions or to reuse an existing named scope, may be used. First, let's add a new named scope to the model:\n\nNow we can use to merge in the scope:\n\nThis will find all customers who have orders that were created yesterday, again using a SQL expression.\n\nIf you want to select a set of records whether or not they have associated records you can use the method.\n\nWhich means: \"return all customers with their count of reviews, whether or not they have any reviews at all\"\n\nThe and query methods let you select a set of records based on the presence or absence of an association.\n\nWhich means \"return all customers that have made at least one review\".\n\nWhich means \"return all customers that have not made any reviews\".\n\nEager loading is the mechanism for loading the associated records of the objects returned by using as few queries as possible.\n\nConsider the following code, which finds 10 books and prints their authors' last_name:\n\nThis code looks fine at the first sight. But the problem lies within the total number of queries executed. The above code executes 1 (to find 10 books) + 10 (one per each book to load the author) = 11 queries in total.\n\nActive Record lets you specify in advance all the associations that are going to be loaded.\n\nWith , Active Record ensures that all of the specified associations are loaded using the minimum possible number of queries.\n\nRevisiting the above case using the method, we could rewrite to eager load authors:\n\nThe above code will execute just 2 queries, as opposed to the 11 queries from the original case:\n\nActive Record lets you eager load any number of associations with a single call by using an array, hash, or a nested hash of array/hash with the method.\n\nThis loads all the customers and the associated orders and reviews for each.\n\nThis will find the customer with id 1 and eager load all of the associated orders for it, the books for all of the orders, and the author and supplier for each of the books.\n\nEven though Active Record lets you specify conditions on the eager loaded associations just like , the recommended way is to use joins instead.\n\nHowever if you must do this, you may use as you would normally.\n\nThis would generate a query which contains a whereas the method would generate one using the function instead.\n\nIf there was no condition, this would generate the normal set of two queries.\n\nIf, in the case of this query, there were no books for any authors, all the authors would still be loaded. By using (an INNER JOIN), the join conditions must match, otherwise no records will be returned.\n\nWith , Active Record loads each specified association using one query per association.\n\nRevisiting the N + 1 queries problem, we could rewrite to preload authors:\n\nThe above code will execute just 2 queries, as opposed to the 11 queries from the original case:\n\nWith , Active Record loads all specified associations using a .\n\nRevisiting the case where N + 1 was occurred using the method, we could rewrite to authors:\n\nThe above code will execute just 1 query, as opposed to the 11 queries from the original case:\n\nEager loading can prevent N + 1 queries but you might still be lazy loading some associations. To make sure no associations are lazy loaded you can enable .\n\nBy enabling strict loading mode on a relation, an will be raised if the record tries to lazily load any association:\n\nTo enable for all relations, change the flag to .\n\nTo send violations to the logger instead, change to .\n\nWe can also enable strict loading on the record itself by calling :\n\nalso takes a argument. Setting it to will only raise an error if an association that will lead to an N + 1 query is lazily loaded:\n\nWe can also enable strict loading for a single association by providing the option:\n\nScoping allows you to specify commonly-used queries which can be referenced as method calls on the association objects or models. With these scopes, you can use every method previously covered such as , and . All scope bodies should return an or to allow for further methods (such as other scopes) to be called on it.\n\nTo define a simple scope, we use the method inside the class, passing the query that we'd like to run when this scope is called:\n\nTo call this scope we can call it on either the class:\n\nOr on an association consisting of objects:\n\nScopes are also chainable within scopes:\n\nYour scope can take arguments:\n\nCall the scope as if it were a class method:\n\nHowever, this is just duplicating the functionality that would be provided to you by a class method.\n\nThese methods will still be accessible on the association objects:\n\nLike the other examples, this will behave similarly to a class method.\n\nHowever, there is one important caveat: A scope will always return an object, even if the conditional evaluates to , whereas a class method, will return . This can cause when chaining class methods with conditionals, if any of the conditionals return .\n\nIf we wish for a scope to be applied across all queries to the model we can use the method within the model itself.\n\nWhen queries are executed on this model, the SQL query will now look something like this:\n\nIf you need to do more complex things with a default scope, you can alternatively define it as a class method:\n\nBe aware that, when given in the format, query arguments cannot be converted to a for default attribute assignment. E.g.:\n\nJust like clauses, scopes are merged using conditions.\n\nWe can mix and match and conditions and the final SQL will have all conditions joined with .\n\nIf we do want the last clause to win then can be used.\n\nOne important caveat is that will be prepended in and conditions.\n\nAs you can see above the is being merged in both and conditions.\n\nIf we wish to remove scoping for any reason we can use the method. This is especially useful if a is specified in the model and should not be applied for this particular query.\n\nThis method removes all scoping and will do a normal query on the table.\n\nFor every field (also known as an attribute) you define in your table, Active Record provides a finder method. If you have a field called on your model for example, you get the instance method for free from Active Record. If you also have a field on the model, you also get method.\n\nYou can specify an exclamation point ( ) on the end of the dynamic finders to get them to raise an error if they do not return any records, like\n\nIf you want to find both by and , you can chain these finders together by simply typing \" \" between the fields. For example, .\n\nAn enum lets you define an Array of values for an attribute and refer to them by name. The actual value stored in the database is an integer that has been mapped to one of the values.\n• Create scopes that can be used to find all objects that have or do not have one of the enum values\n• Create an instance method that can be used to determine if an object has a particular value for the enum\n• Create an instance method that can be used to change the enum value of an object\n\nfor all possible values of an enum.\n\nFor example, given this declaration:\n\nThese scopes are created automatically and can be used to find all objects with or without a particular value for :\n\nThese instance methods are created automatically and query whether the model has that value for the enum:\n\nThese instance methods are created automatically and will first update the value of to the named value and then query whether or not the status has been successfully set to the value:\n\nFull documentation about enums can be found here.\n\nThe Active Record pattern implements Method Chaining, which allow us to use multiple Active Record methods together in a simple and straightforward way.\n\nYou can chain methods in a statement when the previous method called returns an , like , , and . Methods that return a single object (see Retrieving a Single Object Section) have to be at the end of the statement.\n\nThere are some examples below. This guide won't cover all the possibilities, just a few as examples. When an Active Record method is called, the query is not immediately generated and sent to the database. The query is sent only when the data is actually needed. So each example below generates a single query.\n\nThe result should be something like this:\n\nThe above should generate:\n\nIt's common that you need to find a record or create it if it doesn't exist. You can do that with the and methods.\n\nThe method checks whether a record with the specified attributes exists. If it doesn't, then is called. Let's see an example.\n\nSuppose you want to find a customer named \"Andy\", and if there's none, create one. You can do so by running:\n\nThe SQL generated by this method looks like this:\n\nreturns either the record that already exists or the new record. In our case, we didn't already have a customer named Andy so the record is created and returned.\n\nThe new record might not be saved to the database; that depends on whether validations passed or not (just like ).\n\nSuppose we want to set the 'locked' attribute to if we're creating a new record, but we don't want to include it in the query. So we want to find the customer named \"Andy\", or if that customer doesn't exist, create a customer named \"Andy\" which is not locked.\n\nWe can achieve this in two ways. The first is to use :\n\nThe second way is using a block:\n\nThe block will only be executed if the customer is being created. The second time we run this code, the block will be ignored.\n\nYou can also use to raise an exception if the new record is invalid. Validations are not covered on this guide, but let's assume for a moment that you temporarily add\n\nto your model. If you try to create a new without passing an , the record will be invalid and an exception will be raised:\n\nThe method will work just like but it will call instead of . This means that a new model instance will be created in memory but won't be saved to the database. Continuing with the example, we now want the customer named 'Nina':\n\nBecause the object is not yet stored in the database, the SQL generated looks like this:\n\nWhen you want to save it to the database, just call :\n\nIf you'd like to use your own SQL to find records in a table you can use . The method will return an array of objects even if the underlying query returns just a single record. For example you could run this query:\n\nprovides you with a simple way of making custom calls to the database and retrieving instantiated objects.\n\nhas a close relative called . will retrieve objects from the database using custom SQL just like but will not instantiate them. This method will return an instance of class and calling on this object would return you an array of hashes where each hash indicates a record.\n\ncan be used to pick the value(s) from the named column(s) in the current relation. It accepts a list of column names as an argument and returns an array of values of the specified columns with the corresponding data type.\n\nmakes it possible to replace code like:\n\nUnlike , directly converts a database result into a Ruby , without constructing objects. This can mean better performance for a large or frequently-run query. However, any model method overrides will not be available. For example:\n\nYou are not limited to querying fields from a single table, you can query multiple tables as well.\n\nFurthermore, unlike and other scopes, triggers an immediate query, and thus cannot be chained with any further scopes, although it can work with scopes already constructed earlier:\n\nOne way to avoid this is to the includes:\n\ncan be used to pick the value(s) from the named column(s) in the current relation. It accepts a list of column names as an argument and returns the first row of the specified column values ​​with corresponding data type. is a short-hand for , which is primarily useful when you already have a relation that is limited to one row.\n\nmakes it possible to replace code like:\n\ncan be used to pluck all the IDs for the relation using the table's primary key.\n\nIf you simply want to check for the existence of the object there's a method called . This method will query the database using the same query as , but instead of returning an object or collection of objects it will return either or .\n\nThe method also takes multiple values, but the catch is that it will return if any one of those records exists.\n\nIt's even possible to use without any arguments on a model or a relation.\n\nThe above returns if there is at least one customer with the 'Ryan' and otherwise.\n\nThe above returns if the table is empty and otherwise.\n\nYou can also use and to check for existence on a model or relation. will use SQL to determine if the item exists.\n\nThis section uses as an example method in this preamble, but the options described apply to all sub-sections.\n\nYou can also use various finder methods on a relation for performing complex calculations:\n\nIf you want to see how many records are in your model's table you could call and that will return the number. If you want to be more specific and find all the customers with a title present in the database you can use .\n\nFor options, please see the parent section, Calculations.\n\nIf you want to see the average of a certain number in one of your tables you can call the method on the class that relates to the table. This method call will look something like this:\n\nThis will return a number (possibly a floating-point number such as 3.14159265) representing the average value in the field.\n\nFor options, please see the parent section, Calculations.\n\nIf you want to find the minimum value of a field in your table you can call the method on the class that relates to the table. This method call will look something like this:\n\nFor options, please see the parent section, Calculations.\n\nIf you want to find the maximum value of a field in your table you can call the method on the class that relates to the table. This method call will look something like this:\n\nFor options, please see the parent section, Calculations.\n\nIf you want to find the sum of a field for all records in your table you can call the method on the class that relates to the table. This method call will look something like this:\n\nFor options, please see the parent section, Calculations.\n\nYou can run on a relation. EXPLAIN output varies for each database.\n\nmay yield this for MySQL and MariaDB:\n\nActive Record performs a pretty printing that emulates that of the corresponding database shell. So, the same query running with the PostgreSQL adapter would yield instead:\n\nEager loading may trigger more than one query under the hood, and some queries may need the results of previous ones. Because of that, actually executes the query, and then asks for the query plans. For example, running:\n\nmay yield this for MySQL and MariaDB:\n\nand may yield this for PostgreSQL:\n\nFor databases and adapters which support them (currently PostgreSQL, MySQL, and MariaDB), options can be passed to provide deeper analysis.\n\nUsing PostgreSQL, the following:\n\nUsing MySQL or MariaDB, the following:\n\nInterpretation of the output of EXPLAIN is beyond the scope of this guide. The following pointers may be helpful:"
    },
    {
        "link": "https://snapsheetclaims.com/11-ways-to-boost-your-activerecord-query-performance",
        "document": "ActiveRecord has lots of tools to help us simplify database interactions, but it's important to make sure our queries are still efficient and easy to understand as our apps get bigger. This article outlines all the ways you can make ActiveRecord queries simpler, faster, and easier to maintain. When necessary, we’ll dive into the limitations of each and what alternative performance technique can be used instead. Ever come across a website where all of the images, gifs, and text display a loading sign upon the initial load? If yes, you may have witnessed eager loading. Achieved through the includes method, eager loading is the process in which a query for one type of model also loads related model(s). In other words, eager loading ensures that your page’s model and all its associated models are loaded all at once. You have a Blog model with related Blog Post models. Your Blog Post models each have many Comment models. You want to show a list of blog posts with the number of comments for each post. Without eager loading, you might end up with slow performance due to additional queries fetching the comments for each blog post.\n\nlimit and offset help to \"paginate\" the loaded data, preventing all of it from being loaded into memory at once. where allows conditions to be applied to the data, filtering out records that do not match the conditions. Only the matching records are then loaded into memory. Use where when you need to filter records based on specific conditions. Use limit when you want to cap the number of records returned by a query to a specific number, such as for implementing pagination. Use offset when you want to skip a certain number of records from the beginning of the result set. This is commonly used in combination with limit for implementing pagination. Data Overload: Sometimes, even when querying with conditions or pagination, the number of records we are loading into memory at once is still too large. In cases with extremely large datasets, it is advisable to use batch processing to load records. Using ActiveRecord’s where, all, or find methods may not be the best way to query records when we’re dealing with large datasets. With large datasets, the performance is bound to decrease when we use these methods because all of the matching records are loaded into memory. Performance can be improved by processing records in smaller groups, AKA batch processing. This can be accomplished through Rails’ find_each, find_in_batches and in_batches methods. Note: The in_batches method was introduced in Rails 5.\n\nNewer Ruby versions have enhanced garbage collection, which helps reduce memory usage. Efficient memory usage can contribute to improved application performance, including the execution of ActiveRecord queries. Newer versions of Rails often come with performance enhancements, bug fixes, and optimizations in the ActiveRecord query interface. These improvements can lead to faster and more efficient query execution, reducing the time required to grab data from the database. Indexing in ActiveRecord improves query performance by creating data structures that enable the database engine to quickly locate and retrieve records. For instance, adding an index on the name column in a 'Product' model allows faster retrieval of a product by name, optimizing the performance of queries like Product.find_by(name:'Woody from Toy Story'). Implement an index in a database when dealing with large tables containing a substantial amount of records, especially if certain columns are frequently queried in the WHERE clause, involved in JOIN operations, or used for sorting and grouping. Focus on indexing critical parts of the application where query performance is important. Storage Requirements Increase: While indexes enhance read performance, it's essential to carefully choose which columns to index based on query patterns. Indexing increases storage requirements, as each index consumes additional disk space when used. When space and memory are limited, too many indexes can be a problem. Slower write speed: Storage requirements increasing also means slower write speed for INSERT / UPDATE / DELETE operations with indexes. Every insert, update, or delete operation on a table with indexes requires additional maintenance of those indexes. When a record is added or modified, the corresponding indexes must be updated to reflect the changes. For example, when a new record is inserted, the database must update the index to include the new entry. The more indexes there are, the more maintenance work is required for each insert operation. 10. Prefer these query methods over these:\n• None Prefer exists? over present? or any?: When checking the existence of records, using the exists? method is more efficient than present? because it avoids unnecessary record retrieval. It retrieves a boolean value unlike present? and any? which are fetching the actual records.\n• None Prefer size over count: In scenarios where you only need the number of records and not the actual records themselves, using the size method is more performant. size fetches the count directly from the database, while count retrieves all matching records and then counts them.\n• None Prefer pluck over select: When you only need specific attribute values from a query result, pluck is generally more efficient than select. pluck retrieves only the specified attribute values from the database, whereas select fetches the entire record object.\n• None Prefer find_by over where: If you expect a single record to match a condition, find_by is more performant than where. find_by stops searching and returns the first matching record, whereas where retrieves all matching records and then returns the first one. As we went over above, lazy loading can be a performance enhancer or a performance killer. When lazy loading happens in a loop, it’s called the “N+1 query problem”. The tools below can help us prevent N+1 queries. The Bullet gem is a well-known tool designed to boost your app’s performance by decreasing its query count. The bullet gem can detect N+1 query problems and suggest solutions for when eager loading of associations is optimal. This gem also helps identify unnecessary database queries and increased load times due to unused eager loaded associations. Finally, it can flag areas where additional indexes are beneficial and advise when counter cache usage is appropriate. With the Bullet gem installed and configured to log into the Bullet log file log/bullet.log, you can capture log entries that notify you when a query can be optimized. The entries below indicate whether eager loading is being used and should be avoided, or when it's not in use but should be.\n\nUse strict_loading mode if you only intend to eager load the query/record/association/model/application you enabled the mode for, and want to prevent any lazy loading on that particular query/record/association/model/application. Be careful not to enable strict_loading if you’re not 100% sure you intend on using eager loading on every part of the query/record/association/model/application it’s been enabled for. Otherwise, you’ll receive an unwanted ActiveRecord::StrictLoadingViolationError. Note that you can choose to switch off the StrictLoadingViolationError exception and log it instead. We all want our queries to be fast, but if we try to optimize our ActiveRecord queries too early, it can lead to complex SQL queries or custom caching mechanisms that add unnecessary complexity to our code, making it hard to read and maintain. Some queries just don’t have a significant impact on performance. Make sure to evaluate the real performance bottlenecks and optimize where it matters most. Regularly monitoring and profiling your Rails application, along with familiarizing yourself with traffic metrics, can help you identify areas for improvement. Consider a scenario where one request takes 4 seconds to complete and another takes 2 seconds. Even though both can be optimized, the first one is accessed only once a day, while the second is accessed 100 times a day. Although the second request isn't the slowest, it's the one users interact with more frequently and might need higher priority. Remember, speed is important, but it's not the only thing that matters. Make sure you optimize only where it counts, and keep your code clean and easy to read for future developers. Don't let optimization make your queries harder to understand!"
    },
    {
        "link": "https://iamtusharxo.medium.com/activerecord-querying-in-rails-a-comprehensive-guide-80928efe4a72",
        "document": "ActiveRecord, the ORM (Object-Relational Mapping) framework in Ruby on Rails, simplifies database interactions by allowing developers to work with databases using Ruby objects. One of the most powerful features of ActiveRecord is its querying interface, which enables developers to retrieve and manipulate data from the database effortlessly. In this guide, we’ll delve into ActiveRecord querying in detail, exploring its various methods, syntax, and best practices.\n\nActiveRecord querying involves retrieving data from the database using methods provided by ActiveRecord models. These methods allow developers to construct SQL queries dynamically without writing raw SQL. By leveraging Ruby’s expressive syntax, developers can build complex queries in a concise and readable manner.\n• and : Restricts the number of records returned and specifies the starting point for retrieval, respectively.\n\nThese examples demonstrate how ActiveRecord queries are constructed and their corresponding outputs, showcasing the versatility and power of ActiveRecord in interacting with databases within Ruby on Rails applications\n• Associations: ActiveRecord associations enable developers to retrieve associated records using methods like , , and .\n• Aggregations: Methods like , , , and allow developers to perform aggregate calculations on database columns.\n• Joins: ActiveRecord supports different types of joins, such as , , and , for fetching associated records efficiently.\n• Dynamic Finders: ActiveRecord provides dynamic finder methods like , , and for convenient record retrieval based on attribute values.\n• Use ActiveRecord Methods: Prefer using ActiveRecord methods over raw SQL to maintain consistency and leverage Rails conventions.\n• Optimize Queries: Avoid N+1 query problems by eager loading associations using or when fetching associated records.\n• Keep Queries Readable: Write clear and concise queries that are easy to understand and maintain.\n\nBuilding reliable and effective Rails applications requires a solid understanding of ActiveRecord queries. Through comprehension of its diverse techniques, phrasing, and optimal methodologies, developers can fully harness the capabilities of ActiveRecord to effortlessly engage with databases. ActiveRecord offers the resources required to manage database interactions elegantly and with ease, regardless of the complexity of the data manipulations or basic CRUD activities.’\n\nVisit Rails Guides for more Information on ActiveRecord — Rails-Guide"
    },
    {
        "link": "https://stackoverflow.com/questions/60204592/querying-associated-records-using-active-record",
        "document": "I have a model , which belongs to another model .\n\nI have two instances of tippani class, that belong to the same fiscal year.\n\nI want to get the instances of tippani class that belongs to the same fiscal year.\n\nI tried something like this:\n\nBut I get an error\n\nAlso, is there some query method, where I could get all the tippani instances, whose fiscal year is less than 2073 or some number.\n\nSomething like this:"
    }
]