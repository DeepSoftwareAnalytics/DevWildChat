[
    {
        "link": "https://stackoverflow.com/questions/27954480/cllocationmanager-authorizationstatus-callback",
        "document": "In my app I have a tab called \"Discover\". The Discover tab will use the users current location to find \"stuff\" near them. Instead of presenting the user with a generic Authorization Request (which typically gets declined, based on research), I present the user with a modal explaining what we're asking for. If they say yes, THEN the actual Authorization message pops up.\n\nHowever, the user still has the option to say no the prompt. Is there a way to add a callback to the prompt so that once the user selects an option I can see if they accepted or declined?\n\nI have tried this:\n\nAs expected, the \"println\" executes at the same time that the request prompt comes up, so I can't do it that way.\n\nThe problem is that if the user opts to not use Location Data, the content served will be different than if they had accepted.\n\nIdeally I'm hoping for a callback of some kind, but I'll take any logical direction at this point!"
    },
    {
        "link": "https://stackoverflow.com/questions/40951097/reevaluate-cllocationmanager-authorizationstatus-in-running-app-after-app-locati",
        "document": "Thanks to Thomas's advice below I've modified my code from the original request. I'm wondering if I'm trying to do something impossible or, if not, how I could accomplish this.\n\nIf the user hasn't authorized location services, I am prompting them via an alert with an \"Open Settings\" button to change the app's location settings. This works. But upon return from settings to app, I'd like to recognize if the change was made and activate location services. Can this be done? The closure below successfully gets the user to the app's settings, the user can make changes, and the user can return, but the closure fires when the user presses \"Open Settings\", which is before settings have been changed. BTW: If there's a better way to handle nudging the user to approve an app's currently unauthorized location prefs, I'd appreciate advice. Thanks!"
    },
    {
        "link": "https://medium.com/@ashidiqidimas/location-authorization-best-practices-and-how-to-build-it-reactively-using-combine-b220aa3bfa2c",
        "document": "To follow this tutorial, you only need basic knowledge of Swift. If you are not familiar with Combine, don’t worry; I will explain everything you need to know.\n\nMobile apps often need to access a user’s location to provide personalized and location-based services such as navigation, weather updates, and local recommendations. Location is sensitive information, so you need users’ authorization before you can access their location data.\n\nLocation permission is one of those topic that is easy to implement, but can be tricky to get it right. So in this blog, we’ll explore how to design a location authorization that puts user privacy in mind and how to build it reactively using Combine. If you’re only interest with the technical part, you can skip the design part and jump directly to the technical part.\n\nIn the documentation and Human Interface Guideline, Apple emphasizes that location permission is a serious matter and should not be taken lightly. Always remember that the systems will always show a prompt before you can access users’ location. So if you ask user’s location even though your app doesn’t have any feature that need user’s location, there is a high chance that they will deny the request and even delete your app.\n\nIf your app do have a feature that need user location, make sure that you make location request only when the user use the feature that need location access, not at app launch because users will misinterpret it and deny the request.\n\nUse Usage Description that Describe Why You Need Their Location\n\nWhen asking for location permission, you must provide an usage description string in info.plist with key `Privacy — Location When In Use Usage Description` or/and `Privacy — Location Always and When In Use Usage Description` according to what your app need.\n\nThe system will display an alert with the usage description string that you provide in the info.plist. Use active voice and a period at the end for the usage description string. Make sure the string clearly describe how your app reads user’s location and why your app need it.\n\nFor example, here is one of my app’s usage description string.\n\nEverything you need to know about location authorization layers\n\nLocation authorization is not as straightforward as it looks because it has multiple layers that determine the level of access and accuracy your app receives. In this section, we’ll explore those layers and how they affect your app.\n\nAccess Level\n\nIn iOS, location access has 2 levels:\n\n- When in Use\n\n This level is the preferred level because it respects your users’ privacy and has better battery life. This level let your app access user’s location when your app is in the foreground. If you enabled location updates in the Background Modes capability, you can still access the user’s location in the background, as long as the app is not terminated and the device’s location service is active.\n\n- Always\n\n This level let your app access user’s location even though the app is terminated. You must only request this level if your app needs to access users’ location in the background, since this can drain your users’ battery.\n\nTo learn more about app’s life cycle, visit Managing your app’s life cycle from Apple Developer.\n\nAuthorization Status\n\nThe enum defines a user’s response to your authorization request. It indicates whether your app can access the user’s location and the access level. You can access the authorization status from the property of an instance of or from the method of .\n\nHere are the cases of `CLAuthorizationStatus`:\n\n- \n\n This authorization status is the default value when users just installed your app and your app haven’t asked the user for location permission. When the authorization status is not determined, you can ask location permission using and methods of .\n\n- \n\n This authorization status allows you to use location service with Always access level.\n\n- \n\n This authorization status also allows you to use location service, but with When in Use access level.\n\n- \n\n If the authorization status is set to , you can’t access their location. Users can’t do anything about it, as their device has active restrictions like parental control.\n\n- \n\nIf the authorization status is set to , you won’t be able to access their location. You’ll get this status if the user denies your request, disables their device’s location service, or the device is in airplane mode. If you get this status, you can’t request location permission, but you can ask users to enable location permission in their device’s settings.\n\nAccuracy\n\n ’s property defined how accurate your app can get. If it is set to , you can only set to , which has 1–20 kilometers accuracy.\n\nLocation Service Enabled\n\nYou can check whether users have their device’s location service enabled or not through ’s method. If the location service is disabled, you will get authorization status of .\n\nFirst, open Xcode and create a new project with template iOS app. Then, click “Next”.\n\nOn the pop up, give a name for the Product Name that you want. For this tutorial, we will use SwiftUI for the interface and Swift for the language. Uncheck all the checkboxes on the pop-up. Then place the project anywhere you want.\n\nBefore we do anything, add “Privacy — Location When In Use Usage Description” key to info.plist and the usage description string. I will set it with “MyApp records your location during workout to provide location-based data to your running metrics.”\n\nAfter that, create 3 new files:\n\n- MainViewModel.swift with template Swift File\n\n- AuthorizationManager.swift with template Swift File\n\n- LocationFailedSheet.swift with template SwiftUI View\n\nCombine framework is Apple’s way of writing reactive code. As the name suggests, it lets you combining various kinds of asynchronous events like delegate pattern, , network call, and users’ gestures.\n\nCombine works with publisher-subsriber pattern. Publisher is a protocol for a type that can send a stream of values. Subscriber, in the other hand, is a protocol for a type that can receives value from Publisher if it has subscribed to a publisher, if a subscriber subscribed to a publisher, the subscriber will be notified when the publisher omits new values.\n\nYou can think of a publisher as a newspaper publisher company and subscribers as the newspaper’s consumer. When the company publishes a newspaper, it will send the newspaper and notified its consumer. Then the consumer can act to the newspaper, like read it or even cancel it.\n\nYou can create a custom Publisher, but in this case, we will use a because it’s simple to work with and fits our case like a glove. is a type that conforms to Subject protocol, which is a publisher that have a method that you can use to send values to its subscribers.\n\nLet’s put those knowledge in practice. First, open AuthorizationManager.swift file and import Combine and CoreLocation. Then, create class that inherits . So your AuthorizationManager.swift will look like this:\n\nclass will be responsible for everything related to location authorization. To achieve separation of concerns, we created an class instead of handling everything in the view model.\n\nYou might ask why needs to inherits . This is because will act as the delegate for , which requires the conforming object to inherit from .\n\nNow, let’s create a that our app’s main view model will listen to. Create the property in class:"
    },
    {
        "link": "https://developer.apple.com/documentation/corelocation/cllocationmanager",
        "document": "Please turn on JavaScript in your browser and refresh the page to view its content."
    },
    {
        "link": "https://developer.apple.com/documentation/corelocation/requesting-authorization-to-use-location-services",
        "document": "Please turn on JavaScript in your browser and refresh the page to view its content."
    },
    {
        "link": "https://developer.apple.com/documentation/corelocation/cllocationmanager/requestalwaysauthorization()",
        "document": "Please turn on JavaScript in your browser and refresh the page to view its content."
    },
    {
        "link": "https://developer.apple.com/documentation/corelocation/cllocationmanager",
        "document": "Please turn on JavaScript in your browser and refresh the page to view its content."
    },
    {
        "link": "https://stackoverflow.com/questions/64761582/detect-when-requestalwaysauthorization-not-called-ios-14",
        "document": "I am trying to request user's location using multi step process; However, when calling if it is not executed I would like to move to show a message.\n\nlet me explain better by showing my flow\n\nHere is my current flow\n• Request While in use\n• The user chooses -> Go to\n• the user chooses Allow While Using App -> Go to\n• Request\n• The user chooses Keep Only While Using -> Show error message (issue #1: I can't detect this)\n• The user chooses Change to Always Allow -> Show success message\n\nIf from the user chose I can't even call because calling it would result in nothing and even Apple states\n\nMy goal is if users selects from then should be skipped all together.\n\nif from is selected and from Keep Only while using is chosen then I would like to know that state.\n\nI know it can be done, I just don't know how. Here is an app that does what I am trying to achieve\n\nFrom the first image user chose Allow While Using App then Keep Only While Using and they are able to detect it or able to detect the fact that the dialogue appeared and they didn't move to the third image until the user responded.\n\nAnother scenario as follows:\n\nFrom the first image the user chose and from the 2nd image no matter what the user choose they will go to image 3 without displaying the always permission (keep in mind the 2nd image is not a real permission, its just buttons that made to trick the user); so they are able to tell the dialogue didn't appear or that the user chose from the previous step (one or the other and I can't do either one).\n\nObviously I cant record every combination and post as a gif, so if you would like to experiement the app name is\n\nSo the end goal is to be able to wait for the user to respond to the dialogue if it appears otherwise just move to the next screen.\n\nHere is what I have done, quoting from apple\n\nI thought maybe when requesting always I should also execute the delegate manually so to the function I added the line\n\nHowever, that obviously doesn't work because in the case that Allow While Using App was chosen from step and Change to Always Allow is chosen from step now the delegate will be called twice...\n\nThen I thought if I can detect the provisioning When in Use from step I might be able to bypass but I don't know how to do it.\n\nHere is a snippet of\n\nI hope I was able to explain what I want clearly"
    },
    {
        "link": "https://github.com/zoontek/react-native-permissions/issues/490",
        "document": "If we have location when in use permission, requesting location always permission always returns denied, probably because of this line: https://github.com/react-native-community/react-native-permissions/blob/4017cbf0861b562bb48888f76cfa7c9a62c68ffc/ios/LocationAlways/RNPermissionHandlerLocationAlways.m#L38\n\nApple's documentation is pretty clear about how you're allowed to call if the current authorization status is either or . Calling this when we already have when-in-use authorization will prompt the user to upgrade to \"always allow\" location permissions.\n\nBut in the library we're assuming that if we currently have when-in-use authorization, we're not allowed to ask for always authorization.\n\nI tested by manually calling in Objective-C after getting when-in-use authorization from -- and the upgrade prompt shows up just fine.\n\nThis should be an easy fix (as far as I can tell).\n\nDocumentation for that explains this: https://developer.apple.com/documentation/corelocation/cllocationmanager/1620551-requestalwaysauthorization?changes=latest_minor&language=objc"
    },
    {
        "link": "https://support.gimbal.com/hc/en-us/articles/360048828752-iOS-14-Location-Developer-Guide",
        "document": "With the introduction of iOS 14 there is a new set of terms that developers should learn. Things like Approximate vs. Precise Location will be important for developers to understand, that way key stakeholders can make informed decisions about how to shape the Product & User Experience. For more information about these changes, please visit our iOS 14 Guide.\n\n\n\nAlong with understanding what changes have been made, it's important to understand how to make those changes as well. In order to help, Gimbal is providing the key code snippets that will be important for iOS 14+ developers to implement.\n\nWhen In Use vs. Always Location\n\nWith the introduction of iOS 13, Apple created a flow that requires developers to ask for location permissions twice in order to receive Always Allow location data. After studying the impact of this over the past year, Gimbal has decided to recommend only requesting Always Allow if your app provides value to the end-user. Examples of this include a robust in-store mode, offering a unique BOPIS or Curbside experience, or any feature that requires tracking of that user's location for unique deals & offers. Even for apps that do request Always Allow location data, we still recommend only requesting this data when absolutely necessary. This means you should prompt your users for When In Use using the following code as part of CLLocationManager:\n\nThen, only once you've provided value to the end user and have a valid reason to request Always Allow, should you request Always Allow location data from the user. This is accomplished using the following code as part of CLLocationManager:\n\nApple is increasing app users' abilities to obfuscate their location data with a new feature called Precise Location. This is a toggle that allows users to turn their Precise Location to Off, which at a developer level returns a value of 1,000 - 10,000 meters of potential location data for that user. This data has no specific identifiers that would allow anyone to understand where exactly that user is at in relation to the region returned, and instead the developer receives just an Approximate value for that user's location. Understanding if a user has changed this location data is key to handling the user experience correctly. In order to listen for changes by the user, developers should implement the below code:\n\nAs part of that code, you'll notice there is a request for temporary access to a user's precise location data. This function is extremely valuable for instances when the user has turned the Precise: Off, however your app still needs accurate location information in order to facilitate a better user experience. This request, when granted, will provide Precise location data for that user for the rest of the app's session; once the app is terminated, either by the user or OS, this Precise location data will no longer be available. This request can be made more than once.\n\n\n\nLastly, if your app does include the request for temporary access to a user's location data, you will need to include a specific usage string in your app's info.plist. This will explain to the user why your app is requesting temporary access to the Precise location data, and helps provide a better user experience. The following is an example of a few reasons that might be included as part of a temporary request to the user's Precise location data:"
    }
]