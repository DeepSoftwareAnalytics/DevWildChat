[
    {
        "link": "https://medium.com/google-cloud/setup-and-invoke-cloud-functions-using-python-e801a8633096",
        "document": "Oh the fun I’ve had learning Cloud Functions. It has actually be fun while also frustrating and definitely enlightening to explore serverless services that are supposed to make things easy. Granted I’ve been around long enough to know there is always ramp up, even when it is simple.\n\nCloud Functions is a service that allows you to run code on Google Cloud servers without needing to deal with server configuration or scaling. It is a pay as you go approach that means you pay for what you use and that can help optimize costs. I’ve started using it for a couple functions that I need to run multiple times and that is where it can be very valuable. There was a learning curve especially when connecting different services and this post covers key learnings on these subjects.\n• Setting up Cloud Functions with an HTTP trigger and Python\n\nThis post assumes you have the gcloud SDK already installed locally and that you have a Google Cloud project setup. I’ve got previous posts that cover these topics. I used Python 3.7 in the function and a Mac for local development.\n\nIf you want to test your code before running in Cloud Functions then you can do that with Functions Framework for Python.\n\nInstall functions-framework with pip on your machine.\n\nDraft up a simple example that you can test like the following and label it main.py.\n\nTo simulate Cloud Functions, run functions-framework command in your terminal.\n\nThere are flags you can pass in to make adjustments like the name of the file ( — source) and the port it points to ( — port) for example. And use the — debug flag for more detailed help when developing.\n\nThen call curl to invoke it locally to see how the HTTP trigger works or run it in a browser window.\n\nThe top Stack Overflow response in the link is where I pulled the above code. Emulating Cloud Functions is especially valuable when you pull in packages and want to see how those packages will or will not work as well as checking connections to other services. Also, this is a good framework to use to test Cloud Run locally as well.\n\nThe following is an example of how to pass in parameters to a Cloud Function.\n\nUse this starter code to experiment and put that in a main.py file.\n\nIn order to test it you can use the curl command.\n\nOr you can pass the parameters with the following for Linux or Mac.\n\nOr you can call it in the browser with the same url.\n\nIf you want to run code in an actual Cloud Function you can use the Google Cloud Console to setup your function to run. You can also post up the code using gcloud SDK. For this post, I’m sticking to the UI but feel free to checkout this link for more info on launching from your terminal with gcloud.\n\nGo to the Google Cloud Console and the Cloud Functions dashboard. Select Create Function.\n\nFill out the name of the function to use in the URL for the HTTP Trigger. Also choose the Trigger to use. There are other trigger options but for this example I stuck with HTTP.\n\nThe url to invoke the function will post under URL in the image above. You can test it directly in the UI, curl it in your local terminal, run it through a browser or post a request through code.\n\nThe Authentication box is the tricky bit. If selected then anyone can make a call to the function. This is a way to test it and not deal with authentication, but be careful because it is open for anyone who finds the url (including bots) to call it and that can get costly since it is pay as you go. More on cost further down in the post. Note, it automatically is unselected and if you forget about it then you may go down the rabbit hole I did trying to figure out why I couldn’t invoke without authentication.\n\nIn Runtime select the language you want to code in for the function and code up your function accordingly under MAIN.PY. When using HTTP and Python, you have to accept a request object so you can pass in parameters. You also need to fill out the REQUIREMENTS.TXT tab with any requirements that you import that are not already part of Python’s standard package.\n\nIn Function to execute, put the name of the function in your code that the program needs to execute when it runs. There is sample code already there to help get you started.\n\nWhen you expand the Environment Variables, Networking, Timeouts and More, you will find under Networking the Ingress settings that state Allow all traffic. If you miss checking the box above for Allow unauthenticated invocations but make sure Allow all traffic is selected (which is the default) then it will still require authentication. This threw me off for a bit which I reiterate below.\n\nAlso a note about Timeouts is that the program defaults to 60 seconds, and you can get at most 9 minutes before the function will time out if it is waiting for a response to finish processing.\n\nOnce the function is setup, choose to Create and give it a few minutes to get the function launched on a server. When there is a green checked circle, it is ready to be run.\n\nYou can always go back and edit the function and Deploy it again if there are errors.\n\nAfter the function is setup, you can invoke/run the function. This step was more challenging for me than it needed to be because of the Authentication check box as mentioned and how Python requests handle the data vs json terms.\n\nWhen granting anyone access to the Cloud Function, you can leave off passing authentication parameters in your code and the following provide invoke examples.\n\nCurl an existing Cloud Function that takes in parameters.\n\nReplace MYPROJECT with your Google Cloud project id and FUNC NAME with the Cloud Function name as noted in setup.\n\nPython Code\n\nWhen calling the url inside a Python function, I used the requests package to apply the HTTP trigger and pass in parameters through the request.\n\nMake the request call to the Cloud Functions url.\n\nIf you are getting an error like “Your client does not have permission to the requested URL” it may not necessarily be the authorization despite what the error says. I found that the real issue above was that I was using the keyword data and not converting my param into json format. When I changed the input parameter from data to json it worked.\n\nThis is the code I was stuck on that did NOT work before I switched to json.\n\nThe reason data was not working was because my original code left off the ability to parse parameters passed in under the data flag. This was the code I was missing before I added it into the example at the start of the post.\n\nI can also leave off the above code out of my example and continue to use data=param if I convert the parameters into json with json.dump or if I pass in headers that clarify the content type as json.\n\nAs mentioned, I spent a good chunk of time down the auth rabbit hole because I thought for a while I did not have permission. A couple things on this point are that I didn’t actually have permission initially since I missed that Authentication checkbox but I also had some challenges getting the token to load in my Python code.\n\nTerminal\n\nI found pretty quickly the following example code that works to invoke my Cloud Function from my laptop and pulls in my default identity token since I have gcloud configured.\n\nPython Code\n\nWhen I went to try this out in Python that’s where it got challenging. Since my bash command worked, it helped me identify that loading the token into my code was part of the challenge.\n\nI experimented with google-auth and google-oauth packages. I even used os and subprocess packages to simply pull the token directly from the bash call. What I learned from trying all these things was I was not able to get a token to load with google-auth and google-oauth which is a problem for another time.\n\nOne of the errors I was getting as noted above was because I needed to swap data with json in the request call or fix how my parameters were configured.\n\nI was able to parse out my token with os and subprocess, and this is the subprocess command I ended up using.\n\nIs this a good way to do it? Debatable and most likely no. But it worked and I needed to move on to get other things done. Feedback always welcome and if I find a better way I’ll try to come back here and update.\n\nUse this code to make a request to the Cloud Function url using an authentication token and without params.\n\nUse this code to make a request to the Cloud Function url using an authentication token and with params.\n\nAfter requests runs you can check how it did. The following commands give insights on whether the token is incorrect and if the request responded with a 200 or a 500 or something in the 400 range codes.\n\nIf you missed that Authentication checkbox the first go around when setting up your function, you use these directions from the Managing Access via IAM to make it available for anyone to use it. Remember to be careful on this access and consider using it cases like testing the integration.\n• Click the checkbox next to the function on which you want to grant access.\n• Click Show Info Panel in the top right corner to show the Permissions tab.\n• In the New members field, type .\n• Select the role Cloud Functions > Cloud Functions Invoker from the Select a role drop-down menu.\n\nIf you are running Cloud Functions requests from a Google Cloud service, there are directions that show how to get a token by calling a metadata service. The docs under Authenticating Developers, Functions and End-users goes into more details. Below is one sample of some code you can use in Python.\n\nWhen I was trying to figure out the token locally, I tried metadata and had other errors that threw me off. “Max retries exceeded with url” and “Failed to establish a new connection”. This led me down a confused path thinking I needed to change a configuration in Cloud Functions. Bottom line, you have to be on a service that you can call it from like Cloud Compute.\n\nWhen building out something with multiple integrated services, it is good to break down the components and test them directly on each individual service when you can. I’ve shared above that Cloud Functions allows testing directly in the UI or from the command line. Use that if you are getting errors that aren’t clear. Also, use logging where you can. Google Cloud provides logging and you can see more about how to set that up to record into the Operations Logging service of the platform. Detailed logging is your friend and can help track down weird errors.\n\nIf you’ve read any of my previous posts, you may know that I like to start small and expand and do a little testing of integration locally whenever possible. That can be challenging when dealing with authentication, differences in configurations and not enough logging details. Start small, add logs, test each service individually and grow.\n\nLast but not least, remember to use return in your Cloud Function when using HTTP trigger. This will ensure that the function ends vs running until it timeout. You don’t want to pay for the time for it to timeout if it can finish the function more quickly.\n\nThe total cost of using Cloud Functions include how many times it is called, how long it runs, how many resources are provisioned and if any outbound network requests are made. So the equation is invocations + compute time + networking. The free tier gives 2M invocations per month, 1M seconds of free compute per month and 5GB free Internet egress traffic per month. After that, invocation is a flat rate of $0.4 per million, networking is a flat rate of $0.12 per GB and compute time is in tiers of $0.0000025 per GB-second or $0.00001 per GHz-second for tier 1. To learn more you can checkout the Pricing docs which provides more specific example and breakdown of cost.\n\nI stepped through setting up and invoking a Cloud Function using Python 3.7. I shared pitfalls that I experienced in the hopes that others who may hit these errors can find this and see how to navigate out of the problem faster than I did when searching. A key thing to keep in mind when using Cloud Functions is that it’s good to use when you need to make many, many calls to that function and the function can complete in less than 9 minutes; otherwise, you should look at something like Cloud Run."
    },
    {
        "link": "https://cloud.google.com/functions/1stgendocs/create-deploy-http-python-1st-gen",
        "document": "Cloud Functions (1st gen) has been renamed to Cloud Run functions (1st gen). Learn more about creating functions with Cloud Run\n\nSave and categorize content based on your preferences.\n\nCreate and deploy an HTTP Cloud Run function by using Python (1st gen)\n\nThis guide takes you through the process of writing a Cloud Run function using the Python runtime. There are two types of Cloud Run functions:\n• An HTTP function, which you invoke from standard HTTP requests.\n• An event-driven function, which you use to handle events from your Cloud infrastructure, such as messages on a Pub/Sub topic, or changes in a Cloud Storage bucket.\n\nThe sample shows how to create a simple HTTP function.\n• Sign in to your Google Cloud account. If you're new to Google Cloud, create an account to evaluate how our products perform in real-world scenarios. New customers also get $300 in free credits to run, test, and deploy workloads.\n• In the Google Cloud console, on the project selector page, select or create a Google Cloud project. Note: If you don't plan to keep the resources that you create in this procedure, create a project instead of selecting an existing project. After you finish these steps, you can delete the project, removing all resources associated with the project.\n• Make sure that billing is enabled for your Google Cloud project.\n• In the Google Cloud console, on the project selector page, select or create a Google Cloud project. Note: If you don't plan to keep the resources that you create in this procedure, create a project instead of selecting an existing project. After you finish these steps, you can delete the project, removing all resources associated with the project.\n• Make sure that billing is enabled for your Google Cloud project. Note: Need a command prompt? You can use the Google Cloud Shell. The Google Cloud Shell is a command line environment that already includes the Google Cloud CLI, so you don't need to install it. The Google Cloud CLI also comes preinstalled on Google Compute Engine Virtual Machines.\n• Prepare your development environment. Go to the Python setup guide\n• None Create a directory on your local system for the function code:\n• None Create a file in the directory with the following contents: The response text, or any set of values that can be turned into a This example function takes a name supplied in the HTTP request and returns a greeting, or \"Hello World!\" when no name is supplied. Note: by default. Use the file. Cloud Run functions looks for deployable functions inby default. Use the flag when deploying your function via to specify a different directory containing afile.\n\nDependencies in Python are managed with pip and expressed in a metadata file called . This file must be in the same directory as the file that contains your function code.\n\nYou don't need to create a to run this particular sample, but suppose you wanted to add your own dependencies. Here's how you would do it:\n• None Add the function's dependency, to your file, for example: # An example requirements file, add your dependencies below\n\nTo deploy the function with an HTTP trigger, run the following command in the directory:\n\nThe flag lets you reach the function without authentication. To require authentication, omit the flag.\n• None When the function finishes deploying, take note of the property or find it using the following command: It should look like this:\n• None Visit this URL in your browser. You should see a \"Hello World!\" message. Try passing a name in the HTTP request, for example by using the following URL: You should see the message \"Hello !\"\n\nLogs for Cloud Run functions are viewable using the Google Cloud CLI, and in the Cloud Logging UI.\n\nTo view logs for your function with the gcloud CLI, use the command, followed by the name of the function:\n\nThe output should resemble the following:\n\nYou can also view logs for Cloud Run functions from the Google Cloud console."
    },
    {
        "link": "https://cloud.google.com/functions/docs/get-started-in-cloud-run",
        "document": "Cloud Functions is now Cloud Run functions. Learn more about creating functions with Cloud Run\n\nSave and categorize content based on your preferences.\n\nWhen you deploy a new function to Google Cloud, use Cloud Run. This page provides access to quickstarts for deploying sample functions in Cloud Run using the Google Cloud console and the Google Cloud CLI. The quickstarts include steps for multiple programming languages, including Node.js, Python, Go, Java, Ruby, PHP, and .NET.\n\nCloud Run functions, formerly known as Cloud Functions (2nd gen), is the latest Google Cloud offering for deploying functions. You deploy functions as a service on Cloud Run, and configure the function to react to HTTP(S) requests or respond to events propagated by Eventarc-based triggers.\n\nCloud Run removes the work of managing servers, configuring software, updating frameworks, and patching operating systems. Google fully manages the software and infrastructure so that you only need to add code.\n\nUse Cloud Run to deploy an HTTP function using the Google Cloud console.\n\nDeploy an HTTP function using the gcloud CLI\n\nDeploy an HTTP function to gcloud CLI, by following the steps in the quickstarts for your preferred language:"
    },
    {
        "link": "https://codelabs.developers.google.com/codelabs/cloud-functions-python-http",
        "document": "Python is a popular open source programming language used by data scientists, web application developers, systems administrators, and more. Cloud Functions is an event-driven serverless compute platform. Cloud Functions allows you to write your code without worrying about provisioning resources or scaling to handle changing requirements. There are two types of Cloud Functions:\n• HTTP functions respond to HTTP requests. You'll build a couple in this codelab.\n• Background functions are triggered by events, like a message being published to Cloud Pub/Sub or a file being uploaded to Cloud Storage. We don't address this in this lab, but you can read more in the documentation. This codelab will walk you through creating your own Cloud Functions in Python. This codelab is intended for people who are somewhat familiar with Python and want to learn about Cloud Functions. There are explanations for all of the Python code, but they may not explain everything needed for someone completely new to Python. There is no assumed knowledge about Cloud Functions. In this codelab, you will publish a Cloud Function that, when invoked via HTTP, displays the \"Python Powered\" logo:\n• How to write an HTTP Cloud Function.\n• How to write an HTTP Cloud Function which takes arguments.\n• How to test an HTTP Cloud Function.\n• How to run a local Python HTTP server to try the function.\n• How to write an HTTP Cloud Function which returns an image.\n• Sign-in to the Google Cloud Console and create a new project or reuse an existing one. If you don't already have a Gmail or Google Workspace account, you must create one.\n• The Project name is the display name for this project's participants. It is a character string not used by Google APIs. You can always update it.\n• The Project ID is unique across all Google Cloud projects and is immutable (cannot be changed after it has been set). The Cloud Console auto-generates a unique string; usually you don't care what it is. In most codelabs, you'll need to reference your Project ID (typically identified as ). If you don't like the generated ID, you might generate another random one. Alternatively, you can try your own, and see if it's available. It can't be changed after this step and remains for the duration of the project.\n• For your information, there is a third value, a Project Number, which some APIs use. Learn more about all three of these values in the documentation. Caution: A project ID is globally unique and can't be used by anyone else after you've selected it. You are the only user of that ID. Even if a project is deleted, the ID can't be used again Note: If you use a Gmail account, you can leave the default location set to No organization. If you use a Google Workspace account, choose a location that makes sense for your organization.\n• Next, you'll need to enable billing in the Cloud Console to use Cloud resources/APIs. Running through this codelab won't cost much, if anything at all. To shut down resources to avoid incurring billing beyond this tutorial, you can delete the resources you created or delete the project. New Google Cloud users are eligible for the $300 USD Free Trial program. While Google Cloud can be operated remotely from your laptop, in this codelab you will be using Cloud Shell, a command line environment running in the Cloud. If this is your first time starting Cloud Shell, you're presented with an intermediate screen describing what it is. If you were presented with an intermediate screen, click Continue. It should only take a few moments to provision and connect to Cloud Shell. This virtual machine is loaded with all the development tools needed. It offers a persistent 5 GB home directory and runs in Google Cloud, greatly enhancing network performance and authentication. Much, if not all, of your work in this codelab can be done with a browser. Once connected to Cloud Shell, you should see that you are authenticated and that the project is set to your project ID.\n• Run the following command in Cloud Shell to confirm that you are authenticated: Note: The command-line tool is the powerful and unified command-line tool in Google Cloud. It comes preinstalled in Cloud Shell. You will notice its support for tab completion. You may be prompted to authenticate the first time you run a command. For more information, see gcloud command-line tool overview.\n• Run the following command in Cloud Shell to confirm that the gcloud command knows about your project: If it is not, you can set it with this command: Note: If you're completing this tutorial outside of Cloud Shell, follow Set up Application Default Credentials. Ensure the Cloud Functions and Cloud Build APIs are enabled Run the following command from Cloud Shell to make sure the Cloud Functions and Cloud Build APIs are enabled: Note: Cloud Build will be called by the command and will automatically build your code into a container image. From the Cloud Shell terminal, run the following commands: Check out the content of the source directory: You should have the following files:\n\nHTTP Cloud Functions in Python are written as regular Python functions. The function must accept a single argument, which is usually named . You can open the file with your preferred command line editor (nano, vim, or emacs). You can also open it in the Cloud Shell Editor after setting the source directory as a workspace: Let's deploy this function as an HTTP Cloud Function using the command: ... Deploying function (may take a while - up to 2 minutes)...done. availableMemoryMb: 256 ... entryPoint: FUNCTION_NAME httpsTrigger: url: https://REGION-PROJECT_ID.cloudfunctions.net/FUNCTION_NAME ...\n• : This specifies the language runtime. For Python, this can currently be , , , , or . See Runtimes.\n• : The function will be assigned an endpoint. HTTP requests (POST, PUT, GET, DELETE, and OPTIONS) to the endpoint will trigger function execution.\n• : The function will be public, allowing all callers, without checking authentication.\n• To learn more, see gcloud functions deploy. Did you get an error during deployment? Check the following:\n• Are the APIs enabled? Recheck the prior \"Setup and requirements\" step.\n• Be sure your working directory (where you're running from) is the directory containing the file.\n• Is the function name correct? It should be , the name of the Python function we're trying to deploy. To test the function, you can click the URL displayed in the command output above. You can also programmatically retrieve the URL and call the function with the following commands: You should get the following result:\n\nFunctions are more versatile when they accept arguments. Let's define a new function which supports a parameter: > - \"Hello {NAME}! 🚀\" if \"name=NAME\" is defined in the GET request ... Deploying function (may take a while - up to 2 minutes)...done. availableMemoryMb: 256 ... entryPoint: FUNCTION_NAME httpsTrigger: url: https://REGION-PROJECT_ID.cloudfunctions.net/FUNCTION_NAME ... To test the function, you can click the URL displayed in the command output above. You can also programmatically retrieve the URL and call the function with the following commands: You should get the default result: You're getting the default result because the argument isn't set. Add a parameter to the URL: This time, you'll get your custom response: Hello YOUR NAME! 🚀 The next step is to add unit tests to ensure your functions keep working as intended when the source code gets updated.\n\nHTTP Cloud Functions in Python are tested using the module from the standard library. There is no need to run an emulator or other simulation to test your function—just normal Python code. Here is what a test looks like for the and functions:\n• Python tests are written the same way as other Python files. They start with a set of imports, then define classes and functions.\n• The test declaration is of the form . It must be a class that inherits from .\n• The test class has methods, each of which must start with , which represent individual test cases.\n• Each test case tests one of our functions by mocking the parameter (i.e. replacing it with a fake object with the specific data required for the test).\n• After invoking each function, the test checks the HTTP response to be sure it was what we were expecting. As depends on , make sure the Flask framework is installed in your test environment: Installing Flask outputs a result similar to the following: The three unit tests should pass:\n• Check the error message for anything helpful.\n• Are you in the same directory as the and files? Next, you'll create a new function which returns the \"Python Powered\" logo.\n\nLet's make a new function a bit more entertaining by returning the \"Python Powered\" image for every request: The following listing shows the code to make it happen: ... Deploying function (may take a while - up to 2 minutes)...done. availableMemoryMb: 256 ... entryPoint: FUNCTION_NAME httpsTrigger: url: https://REGION-PROJECT_ID.cloudfunctions.net/FUNCTION_NAME ... To test the function, click the URL displayed in the command output above. If everything is working correctly, you will see the \"Python Powered\" logo in a new browser tab! Next, you'll create an app so that you can run and try your function locally before deployment.\n\nYou can run an HTTP function locally by creating a web app and calling your function in a route. You can add it in the same directory as your function. The file named has the following content:\n• It registers a route at the base URL which is handled with a function named .\n• The function then calls our function, passing it the current request. Make sure the Flask framework is installed in your development environment: Installing Flask outputs a result similar to the following: To run this application locally, run the following command: Now use the Cloud Shell Web Preview to test the web app in your browser. In Cloud Shell, click the \"Web Preview\" button and select \"Preview on port 8080\": Cloud Shell opens the preview URL on its proxy service in a new browser window. The web preview restricts access over HTTPS to your user account only. If everything is working properly, you should see the \"Python Powered\" logo!\n• Are you in the same directory as the , , and files?\n• Is the server started? Be sure to start it by running . It should print ."
    },
    {
        "link": "https://stackoverflow.com/questions/47376380/create-google-cloud-function-using-api-in-python",
        "document": "In the request body you have a dictionary \"CloudFunction\" inside the request. The content of \"CloudFunction\" should be directly in request.\n\nI recomend using \"Try this API\" to discover the structure of projects.locations.functions.create .\n\nand can't appear together. This is explained in Resorce Cloud Function:\n\nIn the rest of the answer I assume that you want to use . It requires you to pass it a URL returned to you by . See documentation:\n\nBut before passing it you need to upload a zip file to this URL:\n\nThis is the trickiest part:\n• None the case matters and it should be lowercase. Because the signature is calculated from a hash (here)\n• None you need 'content-type':'application/zip'. I deduced this one logically, because documentation doesn't mention it. (here)\n• None is obligatory for all requests for cloud storage and is assumed implicitly in this case. More on it here\n• None 104857600, the max in previous entry, is a magical number which I didn't found mentioned anywhere.\n\nI also assume that you want to use the . For a cloud function you can only choose one trigger field. Here it's said that trigger is a Union field. For httpsTrigger however that you can just leave it to be an empty dictionary, as its content do not affect the outcome. As of now.\n\nYou can safely use 'v1' instead of 'v1beta2' for .\n\nHere is a full working example. It would be to complicated if I presented it to you as part of your code, but you can easily integrate it.\n\nOpen and upload a zip file like following:"
    },
    {
        "link": "https://stackoverflow.com/questions/13147914/how-to-simulate-http-post-request-using-python-requests-module",
        "document": "This is the module that I'm trying to use and there is a form I'm trying to fill automatically. The reason I'd like to use Requests over Mechanize is because with Mechanize, I have to load the login page first before I can fill it out and submit, whereas with Requests, I can skip the loading stage and go straight to POSTing the message (hopefully). Basically, I'm trying to make the login process consume as little bandwidth as possible.\n\nMy second question is, after the login process and the redirection, is it possible to not fully download the whole page, but to only retrieve the page title? Basically, the title alone will tell me if the login succeeded or not, so I want to minimize bandwidth usage.\n\nI'm kind of a noob when it comes to HTTP requests and whatnot, so any help would be appreciated. FYI, this is for a school project.\n\nedit The first part of the question has been answered. My question now is for the second part"
    },
    {
        "link": "https://geeksforgeeks.org/get-post-requests-using-python",
        "document": "This post discusses two HTTP (Hypertext Transfer Protocol) request methods GET and POST requests in Python and their implementation in Python.\n\nHTTP is a set of protocols designed to enable communication between clients and servers. It works as a request-response protocol between a client and a server. A web browser may be the client, and an application on a computer that hosts a website may be the server. So, to request a response from the server, there are mainly two methods:\n• GET : To request data from the server.\n• POST : To submit data to be processed to the server.\n\nHere is a simple diagram that explains the basic concept of GET and POST methods.\n\nNow, to make HTTP requests in Python, we can use several HTTP libraries like:\n\nThe most elegant and simplest of the above-listed libraries is Requests. We will be using the requests library in this article. To download and install the Requests library, use the following command:\n\nThe above example finds the latitude, longitude, and formatted address of a given location by sending a GET request to the Google Maps API. An API (Application Programming Interface) enables you to access the internal features of a program in a limited fashion. And in most cases, the data provided is in JSON(JavaScript Object Notation) format (which is implemented as dictionary objects in Python!).\n\nThe URL for a GET request generally carries some parameters with it. For the requests library, parameters can be defined as a dictionary. These parameters are later parsed down and added to the base URL or the API endpoint. To understand the role of the parameter, try to print r.url after the response object is created. You will see something like this:\n\nThis is the actual URL on which the GET request is made\n\nHere we create a response object ‘r’ which will store the request-response. We use requests.get() method since we are sending a GET request. The two arguments we pass are URL and the parameters dictionary.\n\nNow, in order to retrieve the data from the response object, we need to convert the raw response content into a JSON-type data structure. This is achieved by using json() method. Finally, we extract the required information by parsing down the JSON-type object.\n\nThis example explains how to paste your source_code to pastebin.com by sending a POST request to the PASTEBIN API. First of all, you will need to generate an API key by signing up here and then accessing your API key here.\n\nHere again, we will need to pass some data to the API server. We store this data as a dictionary.\n\nHere we create a response object ‘r’ which will store the request-response. We use requests.post() method since we are sending a POST request. The two arguments we pass are the URL and the data dictionary.\n\nIn response, the server processes the data sent to it and sends the pastebin_URL of your source_code which can be simply accessed by r.text.\n\nrequests.post method could be used for many other tasks as well like filling and submitting the web forms, posting on your FB timeline using the Facebook Graph API, etc.\n\nHere are some important points to ponder upon:\n• None When the method is GET, all form data is encoded into the URL and appended to the action URL as query string parameters. With POST, form data appears within the message body\n• None In the GET method, the parameter data is limited to what we can stuff into the request line (URL). Safest to use less than 2K of parameters, some servers handle up to 64K.No such problem in the POST method since we send data in the message body of the HTTP request, not the URL.\n• None Only ASCII characters are allowed for data to be sent in the GET method. There is no such restriction in the POST method.\n• None GET is less secure compared to POST because the data sent is part of the URL. So, the GET method should not be used when sending passwords or other sensitive information.\n\nGET and POST Requests Using Python – FAQs\n\nWhat is GET and POST Request in Python?\n\nHow to Send a POST Request with Python Requests?\n\nHow Do You POST a Request to a Server in Python?\n\nHow to API Call in Python?"
    },
    {
        "link": "https://datacamp.com/tutorial/making-http-requests-in-python",
        "document": "Master the basics of data analysis with Python in just four hours. This online course will introduce the Python interface and explore popular packages."
    },
    {
        "link": "https://w3schools.com/python/ref_requests_post.asp",
        "document": "The method sends a POST request to the specified url.\n\nThe method is used when you want to send some data to the server.\n\nargs means zero or more of the named arguments in the parameter table below. Example:"
    },
    {
        "link": "https://digitalocean.com/community/tutorials/python-http-client-request-get-post",
        "document": "Python HTTP module defines the classes which provide the client-side of the HTTP and HTTPS protocols. In most of the programs, the HTTP module is not directly used and is clubbed with the module to handle URL connections and interaction with HTTP requests. Today we will learn how to use a Python HTTP client to fire HTTP request and then parse response status and get response body data.\n\nIn this post on python HTTP module, we will try attempting making connections and making HTTP requests like GET, POST and PUT. Let’s get started.\n\nWe will start with the simplest thing HTTP module can do. We can easily make HTTP connections using this module. Here is a sample program:\n\nLet’s see the output for this program: In this script, we connected to the URL on Port 80 with a specific timeout.\n\nNow, we will use HTTP client to get a response and a status from a URL. Let’s look at a code snippet:\n\nIn above script, we used a URL and checked the status with the connection object. Let’s see the output for this program: Remember to close a connection once you’re done with the connection object. Also, notice that we used a to establish the connection as the website is served over HTTPS protocol.\n\nWhen I first executed above program, I got following error related to SSL certificates.\n\nFrom the output, it was clear that it has to do something with the SSL certificates. But website certificate is fine, so it has to be something with my setup. After some googling, I found that on MacOS, we need to run file present in the Python installation directory to fix this issue. Below image shows the output produced by this command execution, it looks like it’s installing latest certificates to be used when making SSL connections. Note that I got this error on Mac OS. However, on my Ubuntu system, it worked perfectly fine.\n\nGetting the Header list from Response\n\nFrom the response we receive, the headers usually also contain important information about the type of data sent back from the server and the response status as well. We can get a list of headers from the response object itself. Let’s look at a code snippet which is a little-modified version of the last program:\n\nLet’s see the output for this program:\n\nWe can POST data to a URL as well with the HTTP module and get a response back. Here is a sample program:\n\nLet’s see the output for this program: Feel free to use the HTTP Bin library to try more requests.\n\nOf course, we can also perform a PUT request using the HTTP module itself. We will use the last program itself. Let’s look at a code snippet:\n\nLet’s see the output for this program:\n\nIn this lesson, we studied simple HTTP operations which can be done using . We can also create python http server using SimpleHTTPServer module. Reference: API Doc"
    }
]