[
    {
        "link": "https://brightcarbon.com/blog/how-to-use-vba-in-powerpoint",
        "document": "You can do some really cool things in Microsoft Office with just a few lines of Visual Basic for Applications (VBA) - from creating your own custom formula in Excel to correcting branded content in PowerPoint to merging address data for a mail campaign in Word. And sometimes you need to share that VBA solution with colleagues and clients, via the Internet. A change that Microsoft rolled out at the end of March 2022 tweaks the process required by Windows users to gain access to this active content."
    },
    {
        "link": "https://learn.microsoft.com/en-us/office/vba/library-reference/concepts/getting-started-with-vba-in-office",
        "document": "Getting started with VBA in Office\n\nAre you facing a repetitive clean up of fifty tables in Word? Do you want a particular document to prompt the user for input when it opens? Are you having difficulty figuring out how to get your contacts from Microsoft Outlook into a Microsoft Excel spreadsheet efficiently?\n\nYou can perform these tasks and accomplish a great deal more by using Visual Basic for Applications (VBA) for Office—a simple, but powerful programming language that you can use to extend Office applications.\n\nThis article is for experienced Office users who want to learn about VBA and who want some insight into how programming can help them to customize Office.\n\nThe Office suite of applications has a rich set of features. There are many different ways to author, format, and manipulate documents, email, databases, forms, spreadsheets, and presentations. The great power of VBA programming in Office is that nearly every operation that you can perform with a mouse, keyboard, or a dialog box can also be done by using VBA. Further, if it can be done once with VBA, it can be done just as easily a hundred times. (In fact, the automation of repetitive tasks is one of the most common uses of VBA in Office.)\n\nBeyond the power of scripting VBA to accelerate every-day tasks, you can use VBA to add new functionality to Office applications or to prompt and interact with the user of your documents in ways that are specific to your business needs. For example, you could write some VBA code that displays a pop up message that reminds users to save a document to a particular network drive the first time they try to save it.\n\nThis article explores some of the primary reasons to leverage the power of VBA programming. It explores the VBA language and the out-of-the-box tools that you can use to work with your solutions. Finally, it includes some tips and ways to avoid some common programming frustrations and missteps.\n\nWhen to use VBA and why\n\nThere are several principal reasons to consider VBA programming in Office.\n\nVBA is effective and efficient when it comes to repetitive solutions to formatting or correction problems. For example, have you ever changed the style of the paragraph at the top of each page in Word? Have you ever had to reformat multiple tables that were pasted from Excel into a Word document or an Outlook email? Have you ever had to make the same change in multiple Outlook contacts?\n\nIf you have a change that you have to make more than ten or twenty times, it may be worth automating it with VBA. If it is a change that you have to do hundreds of times, it certainly is worth considering. Almost any formatting or editing change that you can do by hand, can be done in VBA.\n\nThere are times when you want to encourage or compel users to interact with the Office application or document in a particular way that is not part of the standard application. For example, you might want to prompt users to take some particular action when they open, save, or print a document.\n\nDo you need to copy all of your contacts from Outlook to Word and then format them in some particular way? Or, do you need to move data from Excel to a set of PowerPoint slides? Sometimes simple copy and paste does not do what you want it to do, or it is too slow. Use VBA programming to interact with the details of two or more Office applications at the same time and then modify the content in one application based on the content in another.\n\nDoing things another way\n\nVBA programming is a powerful solution, but it is not always the optimal approach. Sometimes it makes sense to use other ways to achieve your aims.\n\nThe critical question to ask is whether there is an easier way. Before you begin a VBA project, consider the built-in tools and standard functionalities. For example, if you have a time-consuming editing or layout task, consider using styles or accelerator keys to solve the problem. Can you perform the task once and then use CTRL+Y (Redo) to repeat it? Can you create a new document with the correct format or template, and then copy the content into that new document?\n\nOffice applications are powerful; the solution that you need may already be there. Take some time to learn more about Office before you jump into programming.\n\nBefore you begin a VBA project, ensure that you have the time to work with VBA. Programming requires focus and can be unpredictable. Especially as a beginner, never turn to programming unless you have time to work carefully. Trying to write a \"quick script\" to solve a problem when a deadline looms can result in a very stressful situation. If you are in a rush, you might want to use conventional methods, even if they are monotonous and repetitive.\n\nUsing code to make applications do things\n\nYou might think that writing code is mysterious or difficult, but the basic principles use every-day reasoning and are quite accessible. Microsoft Office applications are created in such a way that they expose things called objects that can receive instructions, in much the same way that a phone is designed with buttons that you use to interact with the phone. When you press a button, the phone recognizes the instruction and includes the corresponding number in the sequence that you are dialing. In programming, you interact with the application by sending instructions to various objects in the application. These objects are expansive, but they have their limits. They can only do what they are designed to do, and they will only do what you instruct them to do.\n\nFor example, consider the user who opens a document in Word, makes a few changes, saves the document, and then closes it. In the world of VBA programming, Word exposes a Document object. By using VBA code, you can instruct the Document object to do things such as Open, Save, or Close.\n\nThe following section discusses how objects are organized and described.\n\nDevelopers organize programming objects in a hierarchy, and that hierarchy is called the object model of the application. Word, for example, has a top-level Application object that contains a Document object. The Document object contains Paragraph objects and so on. Object models roughly mirror what you see in the user interface. They are a conceptual map of the application and its capabilities.\n\nThe definition of an object is called a class, so you might see these two terms used interchangeably. Technically, a class is the description or template that is used to create, or instantiate, an object.\n\nOnce an object exists, you can manipulate it by setting its properties and calling its methods. If you think of the object as a noun, the properties are the adjectives that describe the noun and the methods are the verbs that animate the noun. Changing a property changes some quality of appearance or behavior of the object. Calling one of the object methods causes the object to perform some action.\n\nThe VBA code in this article runs against an open Office application where many of the objects that the code manipulates are already up and running; for example, the Application itself, the Worksheet in Excel, the Document in Word, the Presentation in PowerPoint, the Explorer and Folder objects in Outlook. Once you know the basic layout of the object model and some key properties of the Application that give access to its current state, you can start to extend and manipulate that Office application with VBA in Office.\n\nIn Word, for example, you can change the properties and invoke the methods of the current Word document by using the ActiveDocument property of the Application object. This ActiveDocument property returns a reference to the Document object that is currently active in the Word application. \"Returns a reference to\" means \"gives you access to.\"\n\nThe following code does exactly what it says; that is, it saves the active document in the application.\n\nRead the code from left to right, \"In this Application, with the Document referenced by ActiveDocument, invoke the Save method.\" Be aware that Save is the simplest form of method; it does not require any detailed instructions from you. You instruct a Document object to Save and it does not require any more input from you.\n\nIf a method requires more information, those details are called parameters. The following code runs the SaveAs method, which requires a new name for the file.\n\nValues listed in parentheses after a method name are the parameters. Here, the new name for the file is a parameter for the SaveAs method.\n\nYou use the same syntax to set a property that you use to read a property. The following code executes a method to select cell A1 in Excel and then to set a property to put something in that cell.\n\nThe first challenge in VBA programming is to get a feeling for the object model of each Office application and to read the object, method, and property syntax. The object models are similar in all Office applications, but each is specific to the kind of documents and objects that it manipulates.\n\nIn the first line of the code snippet, there is the Application object, Excel this time, and then the ActiveSheet, which provides access to the active worksheet. After that is a term not as familiar, Range, which means \"define a range of cells in this way.\" The code instructs Range to create itself with just A1 as its defined set of cells. In other words, the first line of code defines an object, the Range, and runs a method against it to select it. The result is automatically stored in another property of the Application called Selection.\n\nThe second line of code sets the Value property of Selection to the text \"Hello World\", and that value appears in cell A1.\n\nThe simplest VBA code that you write might simply gain access to objects in the Office application that you are working with and set properties. For example, you could get access to the rows in a table in Word and change their formatting in your VBA script.\n\nThat sounds simple, but it can be incredibly useful; once you can write that code, you can harness all of the power of programming to make those same changes in several tables or documents, or make them according to some logic or condition. For a computer, making 1000 changes is no different from making 10, so there is an economy of scale here with larger documents and problems, and that is where VBA can really shine and save you time.\n\nNow that you know something about how Office applications expose their object models, you are probably eager to try calling object methods, setting object properties, and responding to object events. To do so, you must write your code in a place and in a way that Office can understand; typically, by using the Visual Basic Editor. Although it is installed by default, many users don't know that it is even available until it is enabled on the ribbon.\n\nAll Office applications use the ribbon. One tab on the ribbon is the Developer tab, where you access the Visual Basic Editor and other developer tools. Because Office does not display the Developer tab by default, you must enable it by using the following procedure:\n• None On the File tab, choose Options to open the Options dialog box.\n• None Choose Customize Ribbon on the left side of the dialog box.\n• None Under Choose commands from on the left side of the dialog box, select Popular Commands.\n• None Under Customize the Ribbon on the right side of the dialog box, select Main Tabs in the drop down list box, and then select the Developer checkbox.\n\nAfter you enable the Developer tab, it is easy to find the Visual Basic and Macros buttons.\n\nTo protect Office users against viruses and dangerous macro code, you cannot save macro code in a standard Office document that uses a standard file extension. Instead, you must save the code in a file with a special extension. For example you cannot save macros in a standard Word document with a .docx extension; instead, you must use a special Word Macro-Enabled Document with a .docm extension.\n\nWhen you open a .docm file, Office security might still prevent the macros in the document from running, with or without telling you. Examine the settings and options in the Trust Center on all Office applications. The default setting disables macro from running, but warns you that macros have been disabled and gives you the option to turn them back on for that document.\n\nYou can designate specific folders where macros can run by creating Trusted Locations, Trusted Documents, or Trusted Publishers. The most portable option is to use Trusted Publishers, which works with digitally signed documents that you distribute. For more information about the security settings in a particular Office application, open the Options dialog box, choose Trust Center, and then choose Trust Center Settings.\n\nWhen you choose the Macro button on the Developer tab, it opens the Macros dialog box, which gives you access to VBA subroutines or macros that you can access from a particular document or application. The Visual Basic button opens the Visual Basic Editor, where you create and edit VBA code.\n\nAnother button on the Developer tab in Word and Excel is the Record Macro button, which automatically generates VBA code that can reproduce the actions that you perform in the application. Record Macro is a terrific tool that you can use to learn more about VBA. Reading the generated code can give you insight into VBA and provide a stable bridge between your knowledge of Office as a user and your knowledge as a programmer. The only caveat is that the generated code can be confusing because the Macro editor must make some assumptions about your intentions, and those assumptions are not necessarily accurate.\n• None Open Excel to a new Workbook and choose the Developer tab in the ribbon. Choose Record Macro and accept all of the default settings in the Record Macro dialog box, including Macro1 as the name of the macro and This Workbook as the location.\n• None Choose OK to begin recording the macro. Note how the button text changes to Stop Recording. Choose that button the instant you complete the actions that you want to record.\n• None Choose cell B1 and type the programmer's classic first string: Hello World. Stop typing and look at the Stop Recording button; it is grayed out because Excel is waiting for you to finish typing the value in the cell.\n• None Choose cell B2 to complete the action in cell B1, and then choose Stop Recording.\n• None Choose Macros on the Developer tab, select Macro1 if it is not selected, and then choose Edit to view the code from Macro1 in the Visual Basic Editor.\n\nLooking at the code\n\nThe macro that you created should look similar to the following code.\n\nBe aware of the similarities to the earlier code snippet that selected text in cell A1, and the differences. In this code, cell B1 is selected, and then the string \"Hello World\" is applied to the cell that has been made active. The quotes around the text specify a string value as opposed to a numeric value.\n\nRemember how you chose cell B2 to display the Stop Recording button again? That action shows up as a line of code as well. The macro recorder records every keystroke.\n\nThe lines of code that start with an apostrophe and colored green by the editor are comments that explain the code or remind you and other programmers the purpose of the code. VBA ignores any line, or portion of a line, that begins with a single quote. Writing clear and appropriate comments in your code is an important topic, but that discussion is out of the scope of this article. Subsequent references to this code in the article don't include those four comment lines.\n\nWhen the macro recorder generates the code, it uses a complex algorithm to determine the methods and the properties that you intended. If you don't recognize a given property, there are many resources available to help you. For example, in the macro that you recorded, the macro recorder generated code that refers to the FormulaR1C1 property. Not sure what that means?\n\nSelect FormulaR1C1 in the recorded macro and press F1. The Help system runs a quick search, determines that the appropriate subjects are in the Excel Developer section of the Excel Help, and lists the FormulaR1C1 property. You can choose the link to read more about the property, but before you do, be aware of the Excel Object Model Reference link near the bottom of the window. Choose the link to view a long list of objects that Excel uses in its object model to describe the Worksheets and their components.\n\nChoose any one of those to see the properties and methods that apply to that particular object, along with cross references to different related options. Many Help entries also have brief code examples that can help you. For example, you can follow the links in the Borders object to see how to set a border in VBA.\n\nThe Borders code looks different from the recorded macro. One thing that can be confusing with an object model is that there is more than one way to address any given object, cell A1 in this example.\n\nSometimes the best way to learn programming is to make minor changes to some working code and see what happens as a result. Try it now. Open Macro1 in the Visual Basic Editor and change the code to the following.\n\nYou don't need to save the code to try it out, so return to the Excel document, choose Macros on the Developer tab, choose Macro1, and then choose Run. Cell A1 now contains the text Wow! and has a double-line border around it.\n\nFigure 3. Results of your first macro\n\nYou just combined macro recording, reading the object model documentation, and simple programming to make a VBA program that does something. Congratulations!\n\nDid not work? Read on for debugging suggestions in VBA.\n\nThe VBA community is very large; a search on the Web can almost always yield an example of VBA code that does something similar to what you want to do. If you cannot find a good example, try to break the task down into smaller units and search on each of those, or try to think of a more common, but similar problem. Starting with an example can save you hours of time.\n\nThat does not mean that free and well-thought-out code is on the Web waiting for you to come along. In fact, some of the code that you find might have bugs or mistakes. The idea is that the examples you find online or in VBA documentation give you a head start. Remember that learning programming requires time and thought. Before you get in a big rush to use another solution to solve your problem, ask yourself whether VBA is the right choice for this problem.\n\nProgramming can get complex quickly. It's critical, especially as a beginner, that you break the problem down to the smallest possible logical units, then write and test each piece in isolation. If you have too much code in front of you and you get confused or muddled, stop and set the problem aside. When you come back to the problem, copy out a small piece of the problem into a new module, solve that piece, get the code working, and test it to ensure that it works. Then move on to the next part.\n\nThere are two main types of programming errors: syntax errors, which violate the grammatical rules of the programming language, and run-time errors, which look syntactically correct, but fail when VBA attempts to execute the code.\n\nAlthough they can be frustrating to fix, syntax errors are easy to catch; the Visual Basic Editor beeps and flashes at you if you type a syntax error in your code.\n\nFor example, string values must be surrounded by double quotes in VBA. To find out what happens when you use single quotes instead, return to the Visual Basic Editor and replace the \"Wow!\" string in the code example with 'Wow!' (that is, the word Wow enclosed in single quotes). If you choose the next line, the Visual Basic Editor reacts. The error \"Compile error: Expected: expression\" is not that helpful, but the line that generates the error turns red to tell you that you have a syntax error in that line and as a result, this program will not run.\n\nChoose OK and change the text back to\"Wow!\".\n\nRuntime errors are harder to catch because the programming syntax looks correct, but the code fails when VBA tries to execute it.\n\nFor example, open the Visual Basic Editor and change the Value property name to ValueX in your Macro, deliberately introducing a runtime error since the Range object does not have a property called ValueX. Go back to the Excel document, open the Macros dialog box and run Macro1 again. You should see a Visual Basic message box that explains the run-time error with the text, \"Object doesn't support this property of method.\" Although that text is clear, choose Debug to find out more.\n\nWhen you return to the Visual Basic Editor, it is in a special debug mode that uses a yellow highlight to show you the line of code that failed. As expected, the line that includes the ValueX property is highlighted.\n\nYou can make changes to VBA code that is running, so change ValueX back to Value and choose the little green play button underneath the Debug menu. The program should run normally again.\n\nIt's a good idea to learn how to use the debugger more deliberately for longer, more complex programs. At a minimum, learn a how to set break-points to stop execution at a point where you want to take a look at the code, how to add watches to see the values of different variables and properties as the code runs, and how to step through the code line by line. These options are all available in the Debug menu and serious debugger users typically memorize the accompanying keyboard shortcuts.\n\nTo open the Developer Reference that is built into Office Help, open the Help reference from any Office application by choosing the question mark in the ribbon or by pressing F1. Then, to the right of the Search button, choose the dropdown arrow to filter the contents. Choose Developer Reference. If you don't see the table of contents in the left panel, choose the little book icon to open it, and then expand the Object Model Reference from there.\n\nFigure 4. Filtering on developer Help applies to all Office applications\n\nTime spent browsing the Object Model reference pays off. After you understand the basics of VBA syntax and the object model for the Office application that you are working with, you advance from guesswork to methodical programming.\n\nOf course the Microsoft Office Developer Center is an excellent portal for articles, tips, and community information.\n\nAll programmers get stuck sometimes, even after reading every reference article they can find and losing sleep at night thinking about different ways to solve a problem. Fortunately, the Internet has fostered a community of developers who help each other solve programming problems.\n\nAny search on the Web for \"office developer forum\" reveals several discussion groups. You can search on \"office development\" or a description of your problem to discover forums, blog posts, and articles as well.\n\nIf you have done everything that you can to solve a problem, don't be afraid to post your question to a developers forum. These forums welcome posts from newer programmers and many of the experienced developers are glad to help.\n\nThe following are a few points of etiquette to follow when you post to a developer forum:\n• None Before you post, look on the site for an FAQ or for guidelines that members want you to follow. Ensure that you post content that is consistent with those guidelines and in the correct section of the forum.\n• None Include a clear and complete code sample, and consider editing your code to clarify it for others if it is part of a longer section of code.\n• None Describe your problem clearly and concisely, and summarize any steps that you have taken to solve the problem. Take the time to write your post as well as you can, especially if you are flustered or in a hurry. Present the situation in a way that will make sense to readers the first time that they read the problem statement.\n• None Be polite and express your appreciation.\n\nGoing further with programming\n\nAlthough this article is short and only scratches the surface of VBA and programming, it is hopefully enough to get you started.\n\nThis section briefly discusses a few more key topics.\n\nIn the simple examples in this article you manipulated objects that the application had already created. You might want to create your own objects to store values or references to other objects for temporary use in your application. These are called variables.\n\nTo use a variable in VBA, must tell VBA which type of object the variable represents by using the Dim statement. You then set its value and use it to set other variables or properties.\n\nThe simple programs in this article execute one line at a time, from the top down. The real power in programming comes from the options that you have to determine which lines of code to execute, based on one or more conditions that you specify. You can extend those capabilities even further when you can repeat an operation many times. For example, the following code extends Macro1.\n\nType or paste the code into the Visual Basic Editor and then run it. Follow the directions in the message box that appears and change the text in cell A1 from Wow! to Yes! and run it again to see the power of looping. This code snippet demonstrates variables, branching and looping. Read it carefully after you see it in action and try to determine what happens as each line executes.\n\nAll of my Office applications: example code\n\nHere are a few scripts to try; each solves a real-world Office problem.\n\nBe aware that there are situations in which you might want to automate email in Outlook; you can use templates as well.\n\nBe aware that you can select a column of cells and run this macro to delete all rows in the selected column that have a blank cell.\n\nBe aware that this code loops through all of the slides and deletes all text boxes that don't have any text. The count variable decrements instead of increments because each time the code deletes an object, it removes that object from the collection, which reduces the count.\n\nBe aware that this code copies the currently open contact in Outlook into the open Word document. This code only works if there is a contact currently open for inspection in Outlook.\n\nHave questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback."
    },
    {
        "link": "https://reddit.com/r/vba/comments/871tgv/vba_help_for_automating_powerpoint",
        "document": "I'm making a very long powerpoint, and I think it would be much more efficient if I can have a program that automatically inputs information onto it. This would mean that the program would create slides, move images, input text into text boxes/tables, etc. I'm a complete novice with coding. Any idea on how to get started? Any info would be much appreciated."
    },
    {
        "link": "https://breakingintowallstreet.com/kb/powerpoint/macros-in-powerpoint",
        "document": "are useful for tasks such as performing tricky alignments, fitting shapes within tables, and using Drawing Guides, rather than physical lines, to distribute shapes.\n\nBefore you start using macros or writing your own VBA code, you understand the fundamentals of PowerPoint: features like the Quick Access Toolbar, the Slide Master, Tables, and how to duplicate a shape.\n\nIt’s counterproductive to “automate” slides and presentations unless you first understand the key PowerPoint commands and shortcuts.\n\nIn this tutorial, we’ll walk you through how to create your first PowerPoint macro, which you can use to swap the positions of multiple shapes.\n\nThis code is simple, but it is also very useful because it typically takes several keyboard shortcuts and mouse drags to swap shapes manually, so an automated solution is a clear win.\n\nAnd amazingly, there is no built-in way to do this in the standard version of PowerPoint.\n\n0:58: Why Macros Are Useful in PowerPoint\n\nPowerPoint Macros and VBA in Excel vs. PowerPoint\n\nBefore jumping into the code, it’s worth asking two key questions:\n• What are the advantages and disadvantages of VBA and macros in Excel vs. PowerPoint?\n• What are good vs. bad use cases for macros in PowerPoint? In other words, what is the most effective way to spend your time automating your presentations?\n\nOn the first question, VBA in Excel is simpler to set up and use for quick macros.\n\nExcel has a macro recorder, so you can record your actions in a spreadsheet, review them in the VBA Editor, and modify the code to do what you want.\n\nAlso, assigning keyboard shortcuts to your macros is easy because you always select a keyboard shortcut when you record actions in the macro recorder.\n\nBy contrast, PowerPoint macros are more difficult to set up but are arguably more powerful.\n\nMost Excel macros function based on a selected range of cells in a single spreadsheet and automate processes like color-coding the cells or changing the decimal places.\n\nThat’s nice, but PowerPoint macros often change the entire presentation, including on normal slides and templates in the Slide Master.\n\nAlso, PowerPoint macros do not break the “Undo” command, so you can press Ctrl + Z (or ⌘ + Z on Mac) repeatedly, and it will work correctly with all macros.\n\nBut in Excel, macros break the Undo and Redo commands unless you build a workaround into your code, which can get very complicated.\n\nHere’s a summary of VBA in Excel vs. PowerPoint:\n\nReturning to the second question above – good vs. bad use cases for macros in PowerPoint – focus on macros that are simple to code and that automate actions you repeat a lot.\n\nFor example, swapping shapes is quite simple to code (5-10 minutes), and it saves you time because it’s cumbersome to swap shape positions manually. Plus, it’s a common task when editing presentations.\n\nOn the other hand, it’s silly to write a macro that “centers” a shape vertically and horizontally on a slide because the “Align Center” and “Align Middle” commands already do this, and it’s not especially common to center single shapes on a slide in corporate presentations.\n\nSomething like the Table of Contents macro in our full macro package, which is based on the Slide Master and custom layouts, is in the “maybe” category.\n\nIt saves you time, but it’s also complicated to code and test, and it doesn’t work 100% perfectly in all cases.\n\nPlus, you might only add the Table of Contents when you’re finished with a presentation, so this macro may be less useful than simpler shape manipulation commands.\n\nTo start writing your first macro, go to the “Trust Center” in PowerPoint (Alt, T, O in the PC version or ⌘ + , on Mac) and make sure the program will let you run macros:\n\nUse one of the settings above (the screens will look slightly different on the Mac) and make sure the “Developer Toolbar” in the ribbon menu is visible by going to “Customize Ribbon” within the Options menu:\n\nOnce you’ve done this, open the VBA Editor with Alt, L, V on the PC (there is no Mac shortcut, so navigate there manually) and insert a “module” and a “subroutine” to write a new macro:\n\nYou can call the new module “SwapShapes” and add a new subroutine with the same name on the right side of the screen:\n\nAfter you type “Sub SwapShapes()” VBA will automatically insert the “End Sub” at the end to indicate that your macro ends there.\n\nWith simple macros, you usually want to work with the shapes, slides, or text the user has selected.\n\nThat’s how this “Swap Shapes” macro will work: it will assume that the user has selected the shapes they want to swap, and then it will change their positions.\n\nFirst, you need to make sure the user has selected shapes, and if so, that they’ve selected 2 shapes rather than 1, 10, or 50 shapes:\n\n“IF” statements are the building blocks of all programming languages, including VBA.\n\nThey let you check conditions, such as the selection consisting of 2 shapes, and they take actions based on whether these conditions are true or false.\n\nThe ActiveWindow.Selection object in VBA contains whatever the user has selected (shapes, slides, text, or nothing at all), and it has “properties” for things like the selection type and the number of objects selected.\n\nYou can use the “IF” statements with ActiveWindow.Selection to check for these conditions.\n\nIf you’re unsure of an object’s properties, you can start typing its name followed by a “.” so that VBA displays a list of options.\n\nThe “=” operator is used for both assignments and equality checks in VBA, which is a bit confusing. But if it’s part of an “IF” statement, as it is here, it’s an equality check.\n\nThe MsgBox command is useful for testing the code as you move along and ensuring the “IF” statements work.\n\nNext, you need to save the first shape’s Top and Left positions and put them in “variables” that you can refer to later.\n\nThe “=” signs in the main part of the code are assignment operators because they’re not within “IF” statements.\n\nSo, they SET one shape’s Left and Top coordinates to the other shape’s Left and Top coordinates.\n\nAgain, it is confusing how “=” can check for equality in VBA and set the value of a variable; there is no easy answer other than “continued practice and exposure.”\n\nThe ActiveWindow.ShapeRange(1) part means: “Take the first shape the user has selected on the current slide.”\n\nYou can use ActiveWindow.ShapeRange(2) to refer to the second shape, which takes us into the next part: setting the first shape’s Top and Left positions to those of the second shape.\n\nIf you stopped here, you’d have a problem because you’ve now lost the first shape’s original Top and Left positions.\n\nThis is why you saved them in the tempLeft and tempTop variables: by saving these original positions in variables, you can now use them to change the second shape’s position.\n\nThis code properly swaps the positions of two shapes.\n\nHowever, you can make it more efficient by using a “With” statement, which also exists in Excel VBA, to remove the need to type ActiveWindow.Selection:\n\nWhen you type the “With ActiveWindow.Selection” line, anything that starts with a “.” between that and the “End With” is assumed to be part of ActiveWindow.Selection.\n\nSo, VBA “translates” a line like this:\n\nYou can now go into PowerPoint and test this macro with different shapes on the reference slides.\n\nTo do this, use the Alt, L, PM shortcut in the PC version (no Mac equivalent, so navigate to Developer in the ribbon menu and click on Macros), select “SwapShapes” and click “Run”:\n\nAs a final step, you can save this file as a macro-enabled presentation in the .pptm format:\n\nBy doing this, you’ll ensure that whoever opens the file next can still use this macro.\n\nThe Limitations of Macros in PowerPoint\n\nThis simple exercise, while useful, also reveals a few issues with macros in PowerPoint:\n\n1) Keyboard Shortcuts – There is no easy way to assign keyboard shortcuts to macros; you must activate them through the “Macros” menu in the Developer Toolbar.\n\n2) Macro-Enabled Files – While you can save macros with the above method, it is not ideal for sharing them or making them usable across different presentations.\n\n3) Code Constraints – It’s simple to write code that handles only 2 shapes, but it’s not immediately obvious how to extend it to manage multiple shapes.\n\nWe could fix these issues now or explore other enhancements, but the first two points above are surprisingly complicated to solve.\n\nSo, we’ll focus on point #3 and extend this macro to make it swap multiple shapes:\n\nAn Extension to Macros in PowerPoint: “Swap Multiple Shapes”\n\nYou can extend this macro to swap multiple shapes with a few simple changes.\n\nStart by changing the variable declarations and error checks at the top.\n\nWhen the user selects multiple shapes, you need to save the first shape’s positions, and you need to create a “counter variable” that tracks the shape # you’re currently on.\n\nFor example, if the user has selected 10 shapes, you need to know if you’re currently on shape #1, #2, #3, or #4-10 as you move through the selection and change each shape’s positions.\n\nAlso, you need to make sure the user has selected more than 1 shape – not necessarily just 2 shapes:\n\nNext, you need to “loop” through all the shapes the user has selected with a “For” statement.\n\nSo, if the user has selected 10 shapes, you need to move from shape #1 through shape #10 and change the position of each shape.\n\nYou can start by typing the syntax for this “For” loop:\n\nFor an example of how this works, continue assuming that the user has selected 10 shapes.\n\nIn this case, you should loop through shapes #1 – #9 and set each shape’s Left and Top positions to the next shape’s Left and Top positions.\n\nSo, Shape #1 Top should become Shape #2 Top, and Shape #2 Top should become Shape #3 Top.\n\nWhen you reach shape #10, you should set its Top and Left positions to those of the first shape.\n\nThis means you need to save shape #1’s Top and Left positions before starting this loop.\n\nYou can start by handling the case for shapes #1 – 9, or “everything before the final shape”:\n\nAs the next step, you can add a special case to save the first shape’s position before the “For” loop and set the last shape’s position equal to the first shape’s:\n\nYou can now test these changes on the reference slides and verify that this macro “rotates” multiple shapes:\n\nActivate the macro enough times, and the shapes will return to their original positions.\n\nMacros in PowerPoint: Beyond the Surface-Level Detail\n\nIf you’ve followed the steps above, you should have a “Multi-Shape Swap” macro you can use to rearrange your slides.\n\nBut this tutorial just scratches the surface; it represents ~30 minutes out of the 12-13 hours of VBA training in our full PowerPoint Pro course.\n\nYou can do far more with macros and VBA than simple shape manipulation – as shown in the video above, you can manipulate tables, combined table/shape designs, and even the Language properties of entire presentations.\n\nAnd you can automate the alignment, distribution, and formatting processes in many ways, including the clever use of Drawing Guides.\n\nYou can see the full set of macros in the course below:\n\nYou’ll gain access to the full package and all the detailed tutorials as soon as you sign up for the PowerPoint Pro course:"
    },
    {
        "link": "https://autovbax.com/learn/vba/powerpoint-macro-examples-tutorial.html",
        "document": "This is a complete guide to automating PowerPoint using VBA (Visual Basic for Applications) Macros. Below you will find many useful examples.\n\nThe Presentation with VBA code should be ‘Saved As’ PowerPoint Macro-Enabled Presentation (*.pptm)\n\nYou should to enable the Developer tab on the Ribbon before creating VBA code. To do so choose File -> Options then click on ‘Customize Ribbon’ and check the box next to ‘Developer’ tab in the right pane.\n\nThis is a simple example of a PowerPoint VBA Macro:\n\nIt saves the active presentation as a PDF. Each line of code does the following:\n• Creates variables for the PowerPoint name and PDF name\n• Assigns the active presentation name to pptName variable\n\nWhen VBA code is running within a PowerPoint Presentation, PowerPoint Application is the default application and it can be manipulated without explicitly reference. Create a New Presentation\n\nTo create a presentation, use the Add method of PowerPoint application.\n\nTo open a new and blank presentation use the Add method of Application.Presentations collection\n\nTo open a presentation which you have already created, use the Open method of Application.Presentations collection\n\nThe code above assumes that the presentation is in the same directory as the PowerPoint Presentation containing the code.\n\nYou should assign the presentation you open to a variable so that you can manipulate it as per your requirements.\n\nUse the reference ActivePresentation to manipulate the Presentation active in the GUI when the VBA code is executed.\n\nThe statement below will save the Active Presentation if it was saved before. It it has not been saved then you will be prompted with the ‘Save As’ dialog.\n\nThe statement below will close the Active Presentation even if it was not saved after the last edit.\n\nAssign Existing Presentation (by name) to Variable\n\nYou can move a slide from its old position to the new position\n\nYou can do something with each slide or go through all slides to find a few slides and do something about with using the code;\n\nLoop through All Shapes of Active Slide\n\nThe power of PowerPoint can be realized by using ‘Shapes.’ The code below loops through all the shapes on the current slide so that you can manipulate them as you want;\n\nLoop through All shapes in All Slides\n\nYou can loop through all the shapes in the presentation by adding a loop to go through all slides.\n\nLoop through All TextBoxes of Active Slide\n\nTextBoxes are the most often used Shape in PowerPoint presentations. You can loop through all the Text Boxes by adding a check for ‘Shape Type.’ TexBoxes have the shape type defined as the VBA constant msoTextBox (the numerical value of the constant is 17)\n\nLoop through All TextBoxes in All Slides\n\nAgain, you can loop through all the textboxes in the presentation by adding a loop to go through all slides.\n\nTo copy certain slides to a new presentations, first select the desired slides in the existing presentation and then run the code below;\n\nHere are some useful macro examples showing how to do tasks. These will also demonstrate the concepts described above.\n\nChange Font on All Slides in All TextBoxes\n\nChange Case From Upper to Normal in All TextBoxes\n\nToggle Case between Upper and Normal in All TextBoxes\n\nIn typography, a descender is the portion of a letter that extends below the baseline of a font. In most fonts, descenders are reserved for lowercase characters such as g, j, q, p, y, and sometimes f.\n\nWhen you underline text, it does not look nice under descenders. Here is the code to remove underline from all such characters g, j, p, q, and y in the whole Presentation.\n\nUse the code below to remove all animations set in a Presentation.\n\nYou can easily save Active Presentation in PDF format.\n\nYou can find and replace text in All TextBoxes of All Slides. After the fist instance of the text you want to find (defined by findWhat) you need to loop through the Find command to find other instances, if any.\n\nYou can export Current SLide (or any other slide) as a PNG or JPG (JPEG) or BMP image.\n\nIf you have multiple Slide Shows open at the same time then you can close all of them using the macro below.\n\nYou can also connect to PowerPoint though other applications (like Excel and Word). As as first step, you must refer to an instance of PowerPoint.\n\nThere are two ways of doing it – early binding and late binding .\n\nIn ‘Early Binding’ you must explicitly set a reference to ‘Microsoft PowerPoint 16 Object Library’ (for MS Office 2019) in the VBE (Visual Basic Editor) using the option Tools->References.\n\nIn ‘Late Binding’ application variable is declared as an object and VBA engine connects to the correct application at run time.\n\nAfter setting the reference to PowperPoint application, you may need to make it visible.\n\nYou can use all the methods to manipulate presentations, from within PowerPoint, described above from Excel by just adding the reference to PowerPoint created by you above.\n\nhas to be used liked this\n\nOnce you have completed what you wanted to do with the PowerPoint application you must close it and should release the reference.\n\nThis code will copy a range from Excel to PowerPoint:\n\nNote: It has been kept as simple as possible to show how a range from Excel can be copied to PowerPoint using VBA.\n\nWhat are macros in PPT?\n\nA Macro is a general term that refers to a set of programming instructions that automates tasks. PowerPoint (PPT) Macros automate tasks in PowerPoint using the VBA programming language.\n\nHow do I use VBA in PowerPoint?\n\nTo use VBA in PowerPoint, open the VBA Editor (ALT + F11 or Developer > Visual Basic).\n\nHow do I create a Macro in PowerPoint?\n\n1. Open the VBA Editor (ALT + F11 or Developer > Visual Basic)\n\n 2. Go to Insert > Module to create a Code Module\n\n 3. Type ‘Sub HelloWorld’ and press Enter\n\n 4. In between the lines ‘Sub HelloWorld’ and ‘End Sub’, type ‘MsgBox “Hello World!’\n\n 5. You’ve created a Macro!\n\n 6. Now press ‘F5’ to run the Macro"
    },
    {
        "link": "https://brightcarbon.com/blog/how-to-use-vba-in-powerpoint",
        "document": "You can do some really cool things in Microsoft Office with just a few lines of Visual Basic for Applications (VBA) - from creating your own custom formula in Excel to correcting branded content in PowerPoint to merging address data for a mail campaign in Word. And sometimes you need to share that VBA solution with colleagues and clients, via the Internet. A change that Microsoft rolled out at the end of March 2022 tweaks the process required by Windows users to gain access to this active content."
    },
    {
        "link": "https://stackoverflow.com/questions/25095541/controlling-powerpoint-using-excel-vba-minimize-etc",
        "document": "I just altered my code to make it compatible with all versions of office (hence independent of the PowerPoint 15.0 library). While the code works, I'm running into minor problems I need to address for my work. The code and error are given below. Would really appreciate the help. Thanks!\n\nThe old code with which the \"ppWindowMinimized\" worked\n\nI am facing the same error with the following statement as well for the new code:"
    },
    {
        "link": "https://packt.medium.com/working-with-powerpoint-in-excel-vba-92f0883d91dd",
        "document": "VBA is common to all the applications within the Office Suite. This means that data in an Excel spreadsheet can be automatically exported to PowerPoint as well.\n\nThe advantage of knowing how to use VBA to automate these tasks saves a lot of time. Instead of manually copying from Excel and pasting into PowerPoint, everything can be automated, using the appropriate procedures in VBA. Our book VBA Automation for Excel 2019 Cookbook addresses these topics.\n\nWe will cover the following recipes in this article:\n• Creating a new instance of PowerPoint\n• Creating presentations and slides\n• Adding text to textboxes\n• Copying Excel content into PowerPoint\n\nBy the end, you will be able to initiate a PowerPoint slideshow from within Excel.\n\n \n\nTechnical requirements\n\nThis cookbook was written and designed to be used with MS Office 2019 and MS Office 365, installed on either Windows 8, 8.1, or 10.\n\nIf your hardware and software meet these requirements, you are good to go.\n\nThe code for this book is stored at the following link: https://github.com/ PacktPublishing/VBA-Automation-for-Excel-2019-Cookbook.\n\nPlease visit the following link to check the CiA videos: https://bit.ly/3jQRvVk.\n\nCreating a new instance of PowerPoint\n\nThe process of setting a reference to the object library with Word is similar to that of PowerPoint. Hence, the same must be done with PowerPoint, or else Excel cannot communicate with PowerPoint at all.\n\nIn this recipe, we will be creating a new instance of PowerPoint from within Excel.\n\nGetting ready\n\nOpen Excel and activate a new workbook. Save the file as a macro-enabled file on your desktop and call it PPoint_Interaction.xlsm. Sheet1 should be active. Press Alt + F11 to switch to the VBA Editor, and then insert a new module.\n\nIt is a prerequisite that MS PowerPoint must also be installed on your computer in order for the instructions in this recipe to work effectively.\n\nHow to do it…\n\nHere is how to link PowerPoint to Excel:\n\n1. In the VBA Editor, click on Tools | References. The References — VBAProject dialog box will open:\n\n2. Scroll down the list of available references until you find Microsoft PowerPoint 16.0 Object Library:\n\n3. Once selected, click on OK to save the selection and also to close the dialog box.\n\n4. With the object library in place, we can initiate PowerPoint from within Excel. There are several ways of doing this, but for this recipe, we will be using this specific technique:\n\nSub CreatePPointSlides()\n\nDim PowPntApp As PowerPOint.Application \n\nSet PowPntApp = New PowerPoint.Application \n\nPowPntApp.Visible = True \n\nPowPntApp.Activate\n\nEnd Sub\n\n5. Test the Sub procedure by pressing F5. A new instance of PowerPoint will appear on your screen, with no presentation or slide active. Close the application once you know that the Sub procedure is working:\n\nWith the Microsoft PowerPoint object library enabled, it is possible to use PowerPoint keywords and methods within Excel.\n\nActions such as opening an instance of PowerPoint, which was previously not possible, can now be done.\n\n \n\nCreating presentations and slides\n\nOpening PowerPoint without opening a new presentation is not very useful. It stands to reason that a new presentation, with at least one slide, should be initiated together with the application.\n\nGetting ready\n\nWith Excel still open, make sure that PPoint_Interaction.xlsm is available.\n\nModule1 in the VBA Editor must be visible.\n\nHow to do it…\n\nHere are the steps to follow:\n\n1. Add the next lines of code to the Sub procedure to open a new presentation with a new slide:\n\nSub CreatePPointSlides()\n\nDim PowPntApp As PowerPoint.Application \n\nDim PowPntPrsnt As PowerPoint.Presentation \n\nDim PowPntSlide As PowerPoint.Slide\n\n2. If you now run the procedure, PowerPoint will open again, this time displaying not only a new presentation, but also a new slide.\n\n3. Close PowerPoint, but don’t save anything. Return to the VBA Editor in Excel.\n\nOpening a new instance of PowerPoint creates a new presentation as well as a new, empty slide. By using the appropriate VBA coding in Excel, the process can be automated.\n\nAdding text to textboxes\n\nIt’s all very well to know how to open PowerPoint, create presentations, and make a slide available. The next objective is to add text to the two available textboxes on Slide1.\n\nIn this recipe, we will be adding text to the textboxes on Slide1.\n\nGetting ready\n\nMake sure PPoint_Interaction.xlsm is still open, and that the VBA Editor is active.\n\n \n\nHow to do it…\n\nThese are the steps to enter and format text in PowerPoint:\n\n1. To add text to a PowerPoint presentation via Excel, add the following line of code:\n\nSub CreatePPointSlides()\n\nDim PowPntApp As PowerPoint.Application \n\nDim PowPntPrsnt As PowerPoint.Presentation \n\nDim PowPntSlide As PowerPoint.Slide\n\n2. Press F5. Running the Sub procedure will now result in a new instance of PowerPoint, with a new presentation and slide open:\n\n3. Each textbox will have its own line of text. Close PowerPoint without saving, since there is more code to add to our procedure in Excel.\n\nUsing the appropriate code will enable you to add customized text to individual textboxes on a slide.\n\nCopying Excel content into PowerPoint\n\nAutomatically copying content from Excel to PowerPoint saves a lot of time. What we need to do now is select data, copy it, and then paste that into yet another newly inserted slide.\n\nIn this recipe, we will be copying a table into PowerPoint.\n\nGetting ready\n\nMake sure that PPoint_Interaction.xlsm is still open. Activate Sheet1, and enter the following data:\n\nHow to do it…\n\nFollow these steps to copy text from Excel to PowerPoint:\n\n1. Before selecting anything in Excel, we need to insert a new blank slide in PowerPoint. Add the following lines of code:\n\nSub CreatePowPntShow()\n\nDim PowPntApp As PowerPoint.Application \n\nDim PowPntPrsnt As PowerPoint.Presentation\n\nDim PowPntSlide As PowerPoint.Slide\n\n2. Run the Sub procedure to check your coding. We know that the first part will work, but in this case, we need to check whether a second slide was inserted:\n\n3. To select the data in Excel, add the following line of code, directly below the previous entry. This will select the data on Sheet1 and then copy it:\n\n4. Once the data has been copied, it must be pasted into the current slide. Enter the next line of code, once again directly below the previous line of code:\n\n5. The last thing we need to do is close down the document, and finally, PowerPoint itself. Just add the following two lines in a new line after the filename:\n\nSelecting data in Excel, copying it, and then pasting it into PowerPoint can all be automated with VBA in Excel.\n\nThere’s more…\n\nAs a finishing touch, we can add code to create a unique filename for each PowerPoint presentation:\n\n1. We can create a unique name for the file every time it is saved. Add the following lines after .Shapes.Paste:\n\n2. Every time you run the procedure now, a new file with a unique name will be saved.\n\n3. The complete Sub procedure should look like this:\n\nSub CreatePPointSlides()\n\nDim PowPntApp As PowerPoint.Application \n\nDim PowPntPrsnt As PowerPoint.Presentation \n\nDim PowPntSlide As PowerPoint.Slide\n\nFollowing the instructions in this recipe will enable you to select information in Excel, copy it there, and then paste it into a specific slide in PowerPoint.\n\nTo read in depth here is the link of the book VBA Automation for Excel 2019 Cookbook by Mike Van Niekerk.\n\nSpecial 25% off at http://packt.live/3u1fPtG. Use discount code 25VBA (Promotion running from 10th February through 15th March)."
    },
    {
        "link": "https://reddit.com/r/vba/comments/871tgv/vba_help_for_automating_powerpoint",
        "document": "I'm making a very long powerpoint, and I think it would be much more efficient if I can have a program that automatically inputs information onto it. This would mean that the program would create slides, move images, input text into text boxes/tables, etc. I'm a complete novice with coding. Any idea on how to get started? Any info would be much appreciated."
    },
    {
        "link": "https://stackoverflow.com/questions/20327217/populating-powerpoint-slides-from-access-vba",
        "document": "i am trying to populate some text fields in a powerpoint file using the below code:\n\nMy issue is that this code only seems to set text in slide 3 (final slide in PPT). How do i loop through the slides so that each gets populated?"
    }
]