[
    {
        "link": "https://stackoverflow.com/questions/6863940/how-to-copy-sheets-to-another-workbook-using-vba",
        "document": "try this one\n\nor this one:\n\nHandle: If Err.Number = 9 Then MsgBox \"The sheet name does not exist. Please check spelling\" Else MsgBox \"An error has occurred.\" End If OpenBook.Close False Application.ScreenUpdating = True Application.DisplayAlerts = True End Sub"
    },
    {
        "link": "https://mrexcel.com/board/threads/vba-code-to-copy-data-from-one-workbook-to-another.1198191",
        "document": "\n• the active worksheet (where the button resides).\n• another worksheet in the workbook.\n• supposed to be a new worksheet.\n\nThe sample code that I wrote above should be able to do what you need with some changes.Instead of creating a new workbook (because I assumed that since you said \"new workbook\"), the active workbook, in fact, the active worksheet should be used (I think). Still, in the following modified code, I provided three different scenarios just in case;The destination sheet is:You can uncomment the one according to your situation. (Currently the ActiveSheet version is used below)However, I still can't see the \"same cells\" definition in the question. So, the sample code is only copying a single cell from each worksheet, J3. If the source range consists of multiple cells, then the code should be modified. Perhaps if you could also define the \"same cells\" then we could provide more help.Note: To use the XL2BB, select the range that you want to create a mini-sheet, then click on the button to generate the BB code."
    },
    {
        "link": "https://learn.microsoft.com/en-us/office/vba/api/excel.worksheet.copy",
        "document": "Copies the sheet to another location in the current workbook or a new workbook.\n\nIf you don't specify either Before or After, Microsoft Excel creates a new workbook that contains the copied Worksheet object. The newly created workbook holds the Application.ActiveWorkbook property and contains a single worksheet. The single worksheet retains the Name and CodeName properties of the source worksheet. If the copied worksheet held a worksheet code sheet in a VBA project, that is also carried into the new workbook.\n\nAn array selection of multiple worksheets can be copied to a new blank Workbook object in a similar manner.\n\nSource and Destination must be in the same Excel.Application instance, otherwise it will raise a runtime error '1004': No such interface supported, if something like was used, or a runtime error '1004': Copy method of Worksheet class failed, if something like was used.\n\nThis example copies Sheet1, placing the copy after Sheet3.\n\nThis example first copies Sheet1 to a new blank workbook, and then saves and closes the new workbook.\n\nThis example copies worksheets Sheet1, Sheet2, and Sheet4 to a new blank workbook, and then saves and closes the new workbook.\n\nHave questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback."
    },
    {
        "link": "https://stackoverflow.com/questions/40956465/vba-to-copy-module-from-one-excel-workbook-to-another-workbook",
        "document": "I am trying to copy a module from one excel workbook to another using VBA.\n\nFor some reason, this copies the module, but does not copy the VBA code inside, why?\n\nPlease can someone show me where i am going wrong?"
    },
    {
        "link": "https://mrexcel.com/board/threads/vba-to-move-groups-of-sheets-to-new-workbooks-and-save.1136239",
        "document": "I have a big excel workbook that I need to cut into 9 new workbooks (when manually doing this, I'm using move/copy so as to preserve integrity of the \"master\" file) and save down as a specific file name for each workbook. \n\n \n\n The process would go something like:\n\n grab set of tabs from master file, move/copy to new file, save as specific name, close new file.\n\n Go back to main file, repeat with second set of tabs, save as a different specific name, close, etc..\n\n \n\n The number of tabs I'm moving into each workbook varies (from 25 tabs in the biggest to 2 in the smallest. I'm guessing this would be very straightforward, but am struggling to understand how I grab the specifically named tabs (the names of which will always be the same for future versions). \n\n \n\n Any help is greatly appreciated. Please let me know if I can provide additional info to make easier."
    },
    {
        "link": "https://stackoverflow.com/questions/68019811/copy-a-sheet-from-a-workbook-to-another-with-vba",
        "document": "I'm still trying to copy a Sheet from a Workbook to another Workbook, It looks like an easy task but for some reasons I can't do it. For my tests I made a very basic files and codes : (My Sheet contain a simple Table and a button to run the macro, it's the only macro I have)\n\nCopying a Sheet to the same Workbook :\n\nThis test just creat a new sheet in the second workbook but didn't copy the content inside.\n\nI got the error message on the line (Workbooks.Open()) :\n\nJust copy pasting data of the Table Range to the Sheet of the other workbook.\n\nI got the error message on the line of the Workbooks.Open() :\n• None The Path of my file test2 is the good one each time.\n• None I'm working on Excel 2016 in my company computer but had already try to do the same on Microsoft 365 on my personal computer without any difference."
    },
    {
        "link": "https://reddit.com/r/vba/comments/nuio9h/vba_best_practices_cheat_sheet",
        "document": "Next week I will be teaching a VBA course. I am self taught, so now I'm kinda nervous my way of doing stuff is not \"best practices.\" Or honestly, that there are just better ways of doing stuff. Like, I know I'll teach coding logic: If statements, For each, do while, etc... you know what I mean. That's the easy part (to teach) . Now, specifically my code... like 90% of everything I do is copy paste from here or stackoverflow and then edit it to serve my purpose.\n\nAny advice on how to make my course a success? And where can I find like a nice \"Best practices\" or \"This is what vba should look like\" article/sheet/whatever."
    },
    {
        "link": "https://stackoverflow.com/questions/6863940/how-to-copy-sheets-to-another-workbook-using-vba",
        "document": "try this one\n\nor this one:\n\nHandle: If Err.Number = 9 Then MsgBox \"The sheet name does not exist. Please check spelling\" Else MsgBox \"An error has occurred.\" End If OpenBook.Close False Application.ScreenUpdating = True Application.DisplayAlerts = True End Sub"
    },
    {
        "link": "https://masterofficevba.com/vba-coding-constructs/best-practices-for-excel-vba-code",
        "document": "There are over a billion Microsoft Office users, including around 750 million Excel users. So it is not surprising that CEO, Satya Nadella, sees Excel as Microsoft’s prime consumer product. Excel VBA (Visual Basic for Applications) significantly boosts Excel’s capabilities. However, when misused, VBA can introduce a lot of problems in your Excel applications.\n\nIn this post, I summarise guidelines for writing high-quality Excel VBA code. The article derives from my personal experience and a host of credible sources.\n\nThe Software Quality Triangle (SQT) is often used to describe software quality. The backbone of high-quality software is a high-quality underlying code. So, the same attributes stated in the SQT also apply to code quality.\n\nNot all these attributes derive from Excel VBA code though. Excel VBA is a hosted language (Excel being the host), so some of these attributes derive from Excel itself. For instance:\n• Usability (ease of use) arises from both the application and Excel’s user interface (UI) and user experience (UX) design;\n• Portability (multi-platform use) depends on operating systems supporting Excel or VBA;\n• Testability (ease of testing) stems from software architecture rather than construction (coding).\n\nSo, we can say that a high-quality Excel VBA code is one that:\n• Does what was agreed or intended (no more, no less!) – correctness;\n• Does more with less (time/memory) – efficiency;\n• Doesn’t break things in the applications it interacts with – integrity;\n• Is usable in different contexts or for different purposes – reusability;\n\nThere are obvious benefits to writing high-quality Excel VBA code, here are a few:\n• Adding new features is easier, quicker, and cheaper;\n\nCoding best practices are consensus guidelines known to improve Excel VBA application quality. But, they are not holy-writ, and individual developers can pick those to adopt.\n\nThis article summarises these guidelines. The format is willfully concise, but you can access detailed posts on some of these guidelines by clicking on the headings.\n\nThe road to code correctness begins with a review of the application requirements. These requirements capture stakeholders’ agreement on what the application should do.\n\nRequirements are the basis for ranking correctness. The following guidelines help to improve your Excel VBA code’s correctness:\n• The application should not do more than required, neither should it do less;\n• Test the application thoroughly, as per the requirements;\n• If possible, get your code reviewed by your peers;\n• Adopt the best practices for Excel VBA coding.\n\nAdd Option Explicit atop modules, so undeclared variables filter out at compilation time. Otherwise, they execute as variant variables which may lead to unpredictable results.\n\nAssign Initial Values to Variables upon their Declaration\n\nTo prevent unexpected results, assign default values to variables immediately after declaring them. It is essential that the values you assign fit the variables’ purpose.\n\nUse Variant Variables Rarely or Not At All\n\nAvoid using Variant variables. They don’t validate assigned data types and are internally converted to other data types by VBA. By using specific variable types, you are more in control.\n\nWhen coding procedures, always add code that validates the arguments’ data type. This prevents incorrect argument data type errors.\n\nUse Enumerations to reduce variable assignment errors, whenever appropriate.\n\nNote the contrasts between the ByVal and ByRef keywords. This is critical when coding procedures (subroutines and functions).\n\nAlways compile VBA projects before running. This catches syntax and compilation errors before runtime.\n\nAlways add error handlers to procedures. This prevents users from getting confusing runtime error messages.\n\nAlways qualify object references and default properties fully. Otherwise, you rely on VBA internal rules which may lead to unexpected results.\n\nUse Exit For and Exit Do carefully. Specifically, always ensure the execution of all relevant lines of code before mid-loop exits.\n\nBreak Execution on All Errors while Coding\n\nSet Excel’s error-trapping setting to Break on All Errors. This allows you to catch both handled and unhandled errors while coding.\n\nAlways bind object variables at runtime (i.e. late binding). This prevents your code from crashing in the event that an early-bound object’s COM (Component Object Model) reference is not found on a user’s computer. Note that there are efficiency trade-offs to consider.\n\nAdopt a consistent and descriptive naming convention. This makes your code easier to understand in a few months or years (or if someone else reads it right now).\n\nAdd header blocks to major, lengthy, or complex code blocks. Header blocks summarise the essential information about the code block below it. This makes your code easier to understand.\n\nWrite Comments Properly and Use them Judiciously\n\nUse both in-line (i.e., full line) and end-of-line comments, but appropriately. Comment on the ‘why’ and not the ‘how’ of a code line or block.\n\nAdopt a consistent indentation and spacing style. This will boost your Excel VBA code’s readability to humans.\n\nAvoid mid-loop exits in heavily nested loops. As you can imagine, logic comprehension problems may arise for code readers.\n\nAdopt a Code-Writing format that is Easy on the Eye\n\nAvoid lengthy code lines or blocks. People find thin-column content easy to read, think of public media like magazines and newspapers. Adopt this format in your code.\n\nAvoid the GoTo statement. Branching between code lines may be handy at times (e.g. error handling), but it makes reading tougher.\n\nFollow the Don’t Repeat Yourself (DRY) principle. Editing or altering your code is easier when you only have to do it in one place.\n\nWrite de-coupled procedures. When procedures tackle a single task, editing or modifying them doesn’t impact code outside them. So, the code is more maintainable and flexible.\n\nAvoid using magic numbers, constants, or strings for variables with fixed values. The first two hinder readability, while strings eat up memory and run slow. Instead, use Enumerations.\n\nSpeed up garbage collection and prevent memory leaks by setting all unused objects’ references to Nothing.\n\nAvoid the Select and Activate object methods. Instead, explicitly reference the object property or method of interest.\n\nAvoid Repetitive Exchange of Data between Code and Excel\n\nExchange chunks of data between VBA code & Excel in one-shot. This is much faster than cell-by-cell transfer.\n\nUse the With statement to store qualified object references for use in with-blocks. This avoids object reference requalification.\n\nUse the Set statement to pass qualified object references to variables. This avoids reference requalification.\n\nAvoid loops when searching in ranges and arrays. Excel’s Range methods and worksheet functions help in this regard.\n\nAvoid loops when copying data between worksheet ranges. Instead, assign the destination range to the source range directly.\n\nAvoid Loops when Sorting Data in Ranges or Arrays\n\nAvoid loops when sorting data in ranges or arrays. Instead, use the Range object’s Sort method.\n\nIf You Must Use Loops, Use Smart Ones\n\nEnsure loops are smart. Refer to Guidelines for Efficient Excel VBA Code for more details.\n\nDeclare whole numeric data type variables as Long rather than Integer. This speeds up execution as VBA does not first convert them into Long type before use.\n\nIf a variable holds only whole numbers between 0 and 255, then declare it as Byte. This takes up less memory and boosts run speed.\n\nEliminate or Minimise the Use of Variants\n\nAvoid using Variants as they are bulky (memory-wise) and run slow.\n\nBind application-level objects early (at compile time). Compared to binding objects at runtime (i.e. late binding), this improves execution speed. Note that there are reliability trade-offs to consider relative to the magnitude of speed increase.\n\nUse ‘Index’ instead of ‘Name’ to Reference Collection Items\n\nUse ‘Index’ instead of ‘Name’ to reference Collection items for improved execution speed.\n\nInstead of Evaluating Strings use Enumerations\n\nUse Enumerations instead of strings. Strings are bulky (memory-wise) and run slow.\n\nUse vbNullString instead of “”\n\nUse vbNullString instead of an empty string, “”. vbNullString is a VB constant set to zero bytes and representing a zero-length string. It executes slightly faster than an empty string.\n\nBesides Microsoft Office applications, VBA also runs on other applications. These include ArcGIS, AutoCAD, CorelDraw, LibreOffice, Reflection, SolidWorks, MicroStation, and WordPerfect.\n\nYour Excel VBA code shouldn’t be a bull in a china shop. It shouldn’t break things in the applications it interacts with, including Excel itself.\n\nYour Excel VBA code should leave applications in the same state in which it found them. How you do this depends on the particular application.\n\nYou can interact with VBA-enabled applications from your Excel VBA code. You can also use .NET libraries written in any of the .NET programming languages (C# or VB). These are also known as Dynamic Linked Libraries (DLL).\n\nThis is an excellent interoperability feature of VBA that you should take advantage of. For example, why write code to create drawings from Excel shapes when you can interop with AutoCAD to do so.\n\nCheck out posts by Pragmateek, John Franco, and GeeksEngine to get started on VBA and .NET Library interoperability."
    },
    {
        "link": "https://learn.microsoft.com/en-us/office/vba/api/excel.worksheet.copy",
        "document": "Copies the sheet to another location in the current workbook or a new workbook.\n\nIf you don't specify either Before or After, Microsoft Excel creates a new workbook that contains the copied Worksheet object. The newly created workbook holds the Application.ActiveWorkbook property and contains a single worksheet. The single worksheet retains the Name and CodeName properties of the source worksheet. If the copied worksheet held a worksheet code sheet in a VBA project, that is also carried into the new workbook.\n\nAn array selection of multiple worksheets can be copied to a new blank Workbook object in a similar manner.\n\nSource and Destination must be in the same Excel.Application instance, otherwise it will raise a runtime error '1004': No such interface supported, if something like was used, or a runtime error '1004': Copy method of Worksheet class failed, if something like was used.\n\nThis example copies Sheet1, placing the copy after Sheet3.\n\nThis example first copies Sheet1 to a new blank workbook, and then saves and closes the new workbook.\n\nThis example copies worksheets Sheet1, Sheet2, and Sheet4 to a new blank workbook, and then saves and closes the new workbook.\n\nHave questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback."
    }
]