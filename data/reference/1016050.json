[
    {
        "link": "https://docs.djangoproject.com/en/5.1/ref/models/fields",
        "document": "This document contains all the API references of including the field options and field types Django offers.\n\nThe following arguments are available to all field types. All are optional. If , Django will store empty values as in the database. Default is . Avoid using on string-based fields such as and . If a string-based field has , that means it has two possible values for “no data”: , and the empty string. In most cases, it’s redundant to have two possible values for “no data;” the Django convention is to use the empty string, not . One exception is when a has both and set. In this situation, is required to avoid unique constraint violations when saving multiple objects with blank values. For both string-based and non-string-based fields, you will also need to set if you wish to permit empty values in forms, as the parameter only affects database storage (see ). When using the Oracle database backend, the value will be stored to denote the empty string regardless of this attribute. If , the field is allowed to be blank. Default is . Note that this is different than . is purely database-related, whereas is validation-related. If a field has , form validation will allow entry of an empty value. If a field has , the field will be required. can be used with fields having , but this will require implementing on the model in order to programmatically supply any missing values. A mapping or iterable in the format described below to use as choices for this field. If choices are given, they’re enforced by model validation and the default form widget will be a select box with these choices instead of the standard text field. If a mapping is given, the key element is the actual value to be set on the model, and the second element is the human readable name. For example: You can also pass a sequence consisting itself of iterables of exactly two items (e.g. ). The first element in each tuple is the actual value to be set on the model, and the second element is the human-readable name. For example: can also be defined as a callable that expects no arguments and returns any of the formats described above. For example: Passing a callable for can be particularly handy when, for example, the choices are:\n• None the result of I/O-bound operations (which could potentially be cached), such as querying a table in the same or an external database, or accessing the choices from a static file.\n• None a list that is mostly stable but could vary from time to time or from project to project. Examples in this category are using third-party apps that provide a well-known inventory of values, such as currencies, countries, languages, time zones, etc. Support for mappings and callables was added. Generally, it’s best to define choices inside a model class, and to define a suitably-named constant for each value: Though you can define a choices list outside of a model class and then refer to it, defining the choices and names for each choice inside the model class keeps all of that information with the class that uses it, and helps reference the choices (e.g, will work anywhere that the model has been imported). You can also collect your available choices into named groups that can be used for organizational purposes: The key of the mapping is the name to apply to the group and the value is the choices inside that group, consisting of the field value and a human-readable name for an option. Grouped options may be combined with ungrouped options within a single mapping (such as the option in this example). You can also use a sequence, e.g. a list of 2-tuples: Note that choices can be any sequence object – not necessarily a list or tuple. This lets you construct choices dynamically. But if you find yourself hacking to be dynamic, you’re probably better off using a proper database table with a . is meant for static data that doesn’t change much, if ever. A new migration is created each time the order of changes. For each model field that has set, Django will normalize the choices to a list of 2-tuples and add a method to retrieve the human-readable name for the field’s current value. See in the database API documentation. Unless is set on the field along with a then a label containing will be rendered with the select box. To override this behavior, add a tuple to containing ; e.g. . Alternatively, you can use an empty string instead of where this makes sense - such as on a . In addition, Django provides enumeration types that you can subclass to define choices in a concise way: These work similar to from Python’s standard library, but with some modifications:\n• None Enum member values are a tuple of arguments to use when constructing the concrete data type. Django supports adding an extra string value to the end of this tuple to be used as the human-readable name, or . The can be a lazy translatable string. Thus, in most cases, the member value will be a 2-tuple. See below for an example of subclassing choices using a more complex data type. If a tuple is not provided, or the last item is not a (lazy) string, the is automatically generated from the member name.\n• None A property is added on values, to return the human-readable name.\n• None A number of custom properties are added to the enumeration classes – , , , and – to make it easier to access lists of those separate parts of the enumeration. These property names cannot be used as member names as they would conflict.\n• None The use of is enforced to ensure that values cannot be defined multiple times. This is unlikely to be expected in choices for a field. Note that using , , or to access or lookup enum members work as expected, as do the and properties on the members. If you don’t need to have the human-readable names translated, you can have them inferred from the member name (replacing underscores with spaces and using title-case): Since the case where the enum values need to be integers is extremely common, Django provides an class. For example: It is also possible to make use of the Enum Functional API with the caveat that labels are automatically generated as highlighted above: [(1, 'First'), (2, 'Second'), (3, 'Third')] If you require support for a concrete data type other than or , you can subclass and the required concrete data type, e.g. for use with : There are some additional caveats to be aware of:\n• None Because an enumeration with a concrete data type requires all values to match the type, overriding the blank label cannot be achieved by creating a member with a value of . Instead, set the attribute on the class: Support for using enumeration types directly in the was added. The name of the database column to use for this field. If this isn’t given, Django will use the field’s name. If your database column name is an SQL reserved word, or contains characters that aren’t allowed in Python variable names – notably, the hyphen – that’s OK. Django quotes column and table names behind the scenes. The database-computed default value for this field. This can be a literal value or a database function, such as : More complex expressions can be used, as long as they are made from literals and database functions: Database defaults cannot reference other fields or models. For example, this is invalid: If both and are set, will take precedence when creating instances in Python code. will still be set at the database level and will be used when inserting rows outside of the ORM or when adding a new field in a migration. If a field has a without a set and no value is assigned to the field, a object is returned as the field value on unsaved model instances. The actual value for the field is determined by the database when the model instance is saved. If , a database index will be created for this field. Use the option instead. Where possible, use the option instead. In nearly all cases, provides more functionality than . may be deprecated in the future. The name of the database tablespace to use for this field’s index, if this field is indexed. The default is the project’s setting, if set, or the of the model, if any. If the backend doesn’t support tablespaces for indexes, this option is ignored. The default value for the field. This can be a value or a callable object. If callable it will be called every time a new object is created. The default can’t be a mutable object (model instance, , , etc.), as a reference to the same instance of that object would be used as the default value in all new model instances. Instead, wrap the desired default in a callable. For example, if you want to specify a default for , use a function: s can’t be used for field options like because they can’t be serialized by migrations. See that documentation for other caveats. For fields like that map to model instances, defaults should be the value of the field they reference ( unless is set) instead of model instances. The default value is used when new model instances are created and a value isn’t provided for the field. When the field is a primary key, the default is also used when the field is set to . The default value can also be set at the database level with . If , the field will not be displayed in the admin or any other . It will also be skipped during model validation. Default is . The argument lets you override the default messages that the field will raise. Pass in a dictionary with keys matching the error messages you want to override. Error message keys include , , , , , and . Additional error message keys are specified for each field in the Field types section below. These error messages often don’t propagate to forms. See Considerations regarding model’s error_messages. Extra “help” text to be displayed with the form widget. It’s useful for documentation even if your field isn’t used on a form. Note that this value is not HTML-escaped in automatically-generated forms. This lets you include HTML in if you so desire. For example: \"Please use the following format: <em>YYYY-MM-DD</em>.\" Alternatively you can use plain text and to escape any HTML special characters. Ensure that you escape any help text that may come from untrusted users to avoid a cross-site scripting attack. If , this field is the primary key for the model. If you don’t specify for any field in your model, Django will automatically add a field to hold the primary key, so you don’t need to set on any of your fields unless you want to override the default primary-key behavior. The type of auto-created primary key fields can be specified per app in or globally in the setting. For more, see Automatic primary key fields. implies and . Only one primary key is allowed on an object. The primary key field is read-only. If you change the value of the primary key on an existing object and then save it, a new object will be created alongside the old one. The primary key field is set to when an object. If , this field must be unique throughout the table. This is enforced at the database level and by model validation. If you try to save a model with a duplicate value in a field, a will be raised by the model’s method. This option is valid on all field types except and . Note that when is , you don’t need to specify , because implies the creation of an index. Like , but requires the field to be unique with respect to the month. A human-readable name for the field. If the verbose name isn’t given, Django will automatically create it using the field’s attribute name, converting underscores to spaces. See Verbose field names. A list of validators to run for this field. See the validators documentation for more information."
    },
    {
        "link": "https://stackoverflow.com/questions/1737017/django-auto-now-and-auto-now-add",
        "document": "Any field with the attribute set will also inherit and therefore will not show up in the admin panel. There has been talk in the past about making the and arguments go away, and although they still exist, I feel you're better off just using a custom method.\n\nSo, to make this work properly, I would recommend not using or and instead define your own method to make sure that is only updated if is not set (such as when the item is first created), and have it update every time the item is saved.\n\nI have done the exact same thing with other projects I have written using Django, and so your would look like this:\n\nThe reason why I just stick with overloading vs. relying on these field arguments is two-fold:\n• The aforementioned ups and downs with their reliability. These arguments are heavily reliant on the way each type of database that Django knows how to interact with treats a date/time stamp field, and seems to break and/or change between every release. (Which I believe is the impetus behind the call to have them removed altogether).\n• The fact that they only work on DateField, DateTimeField, and TimeField, and by using this technique you are able to automatically populate any field type every time an item is saved.\n• Use vs. , because it will return a TZ-aware or naive object depending on .\n\nTo address why the OP saw the error, I don't know exactly, but it looks like isn't even being populated at all, despite having . To me it stands out as a bug, and underscores item #1 in my little list above: and are flaky at best."
    },
    {
        "link": "https://docs.djangoproject.com/en/5.1/ref/models/instances",
        "document": "This document describes the details of the API. It builds on the material presented in the model and database query guides, so you’ll probably want to read and understand those documents before reading this one.\n\nThroughout this reference we’ll use the example blog models presented in the database query guide.\n\nTo create a new instance of a model, instantiate it like any other Python class: The keyword arguments are the names of the fields you’ve defined on your model. Note that instantiating a model in no way touches your database; for that, you need to . You may be tempted to customize the model by overriding the method. If you do so, however, take care not to change the calling signature as any change may prevent the model instance from being saved. Additionally, referring to model fields within may potentially result in infinite recursion errors in some circumstances. Rather than overriding , try using one of these approaches:\n• # do something with the book\n• # do something with the book The method can be used to customize model instance creation when loading from the database. The argument contains the database alias for the database the model is loaded from, contains the names of all loaded fields, and contains the loaded values for each field in . The are in the same order as the . If all of the model’s fields are present, then are guaranteed to be in the order expects them. That is, the instance can be created by . If any fields are deferred, they won’t appear in . In that case, assign a value of to each of the missing fields. In addition to creating the new model, the method must set the and flags in the new instance’s attribute. Below is an example showing how to record the initial values of fields that are loaded from the database: # Default implementation of from_db() (subject to change and could # customization to store the original field values on the instance # Check how the current values differ from ._loaded_values. For example, # prevent changing the creator_id of the model. (This example doesn't \"Updating the value of creator isn't allowed\" The example above shows a full implementation to clarify how that is done. In this case it would be possible to use a call in the method.\n\nIf you delete a field from a model instance, accessing it again reloads the value from the database: # Loads the field from the database If you need to reload a model’s values from the database, you can use the method. When this method is called without arguments the following is done:\n• None All non-deferred fields of the model are updated to the values currently present in the database.\n• None Any cached relations are cleared from the reloaded instance. Only fields of the model are reloaded from the database. Other database-dependent values such as annotations aren’t reloaded. Any attributes aren’t cleared either. The reloading happens from the database the instance was loaded from, or from the default database if the instance wasn’t loaded from the database. The argument can be used to force the database used for reloading. It is possible to force the set of fields to be loaded by using the argument. For example, to test that an call resulted in the expected update, you could write a test similar to this: # At this point obj.val is still 1, but the value in the database # was updated to 2. The object's updated value needs to be reloaded Note that when deferred fields are accessed, the loading of the deferred field’s value happens through this method. Thus it is possible to customize the way deferred loading happens. The example below shows how one can reload all of the instance’s fields when a deferred field is reloaded: # fields contains the name of the deferred field to be # If any deferred field is going to be loaded The argument allows using a different queryset than the one created from . It gives you more control over how the model is reloaded. For example, when your model uses soft deletion you can make to take this into account: You can cache related objects that otherwise would be cleared from the reloaded instance: You can lock the row until the end of transaction before reloading a model’s values: A helper method that returns a set containing the attribute names of all those fields that are currently deferred for this model.\n\nThere are four steps involved in validating a model:\n• None Validate the model as a whole - All four steps are performed when you call a model’s method. When you use a , the call to will perform these validation steps for all the fields that are included on the form. See the ModelForm documentation for more information. You should only need to call a model’s method if you plan to handle validation errors yourself, or if you have excluded fields from the that require validation. This method calls , , (if is ), and (if is ) in that order and raises a that has a attribute containing errors from all four stages. The optional argument can be used to provide a of field names that can be excluded from validation and cleaning. uses this argument to exclude fields that aren’t present on your form from being validated since any errors raised could not be corrected by the user. Note that will not be called automatically when you call your model’s method. You’ll need to call it manually when you want to run one-step model validation for your own manually created models. For example: # Do something based on the errors contained in e.message_dict. # Display them to a user, or handle them programmatically. The first step performs is to clean each individual field. This method will validate all fields on your model. The optional argument lets you provide a of field names to exclude from validation. It will raise a if any fields fail validation. The second step performs is to call . This method should be overridden to perform custom validation on your model. This method should be used to provide custom model validation, and to modify attributes on your model if desired. For instance, you could use it to automatically provide a value for a field, or to do validation that requires access to more than a single field: # Don't allow draft entries to have a pub_date. \"Draft entries may not have a publication date.\" # Set the pub_date for published items if it hasn't been set already. Note, however, that like , a model’s method is not invoked when you call your model’s method. In the above example, the exception raised by was instantiated with a string, so it will be stored in a special error dictionary key, . This key is used for errors that are tied to the entire model instead of to a specific field: To assign exceptions to a specific field, instantiate the with a dictionary, where the keys are the field names. We could update the previous example to assign the error to the field: # Don't allow draft entries to have a pub_date. \"Draft entries may not have a publication date.\" If you detect errors in multiple fields during , you can also pass a dictionary mapping field names to errors: Then, will check unique constraints on your model. How to raise field-specific validation errors if those fields don’t appear in a You can’t raise validation errors in for fields that don’t appear in a model form (a form may limit its fields using or ). Doing so will raise a because the validation error won’t be able to be associated with the excluded field. To work around this dilemma, instead override as it receives the list of fields that are excluded from validation. For example: \"Draft entries may not have a publication date.\" \"Set status to draft if there is not a publication date.\" This method is similar to , but validates uniqueness constraints defined via , , , , or on your model instead of individual field values. The optional argument allows you to provide a of field names to exclude from validation. It will raise a if any fields fail validation. s defined in the are validated by . Note that if you provide an argument to , any constraint involving one of the fields you provided will not be checked. Finally, will check any other constraints on your model. This method validates all constraints defined in . The optional argument allows you to provide a of field names to exclude from validation. It will raise a if any constraints fail validation.\n\nTo save an object back to the database, call : For details on using the and arguments, see Forcing an INSERT or UPDATE. Details about the argument can be found in the Specifying which fields to save section. If you want customized saving behavior, you can override this method. See Overriding predefined model methods for more details. The model save process also has some subtleties; see the sections below. Deprecated since version 5.1: Support for positional arguments is deprecated. If a model has an — an auto-incrementing primary key — then that auto-incremented value will be calculated and saved as an attribute on your object the first time you call : # Returns None, because b2 doesn't have an ID yet. # Returns the ID of your new object. There’s no way to tell what the value of an ID will be before you call , because that value is calculated by your database, not by Django. For convenience, each model has an named by default unless you explicitly specify on a field in your model. See the documentation for for more details. Regardless of whether you define a primary key field yourself, or let Django supply one for you, each model will have a property called . It behaves like a normal attribute on the model, but is actually an alias for whichever attribute is the primary key field for the model. You can read and set this value, just as you would for any other attribute, and it will update the correct field in the model. If a model has an but you want to define a new object’s ID explicitly when saving, define it explicitly before saving, rather than relying on the auto-assignment of the ID: If you assign auto-primary-key values manually, make sure not to use an already-existing primary-key value! If you create a new object with an explicit primary-key value that already exists in the database, Django will assume you’re changing the existing record rather than creating a new one. Given the above blog example, this example would override the previous record in the database: See How Django knows to UPDATE vs. INSERT, below, for the reason this happens. Explicitly specifying auto-primary-key values is mostly useful for bulk-saving objects, when you’re confident you won’t have primary-key collision. If you’re using PostgreSQL, the sequence associated with the primary key might need to be updated; see Manually-specifying values of auto-incrementing primary keys. What happens when you save?¶ When you save an object, Django performs the following steps:\n• None Emit a pre-save signal. The signal is sent, allowing any functions listening for that signal to do something.\n• None Preprocess the data. Each field’s method is called to perform any automated data modification that’s needed. For example, the date/time fields override to implement and .\n• None Prepare the data for the database. Each field’s method is asked to provide its current value in a data type that can be written to the database. Most fields don’t require data preparation. Simple data types, such as integers and strings, are ‘ready to write’ as a Python object. However, more complex data types often require some modification. For example, fields use a Python object to store data. Databases don’t store objects, so the field value must be converted into an ISO-compliant date string for insertion into the database.\n• None Insert the data into the database. The preprocessed, prepared data is composed into an SQL statement for insertion into the database.\n• None Emit a post-save signal. The signal is sent, allowing any functions listening for that signal to do something. Sometimes you’ll need to perform a simple arithmetic task on a field, such as incrementing or decrementing the current value. One way of achieving this is doing the arithmetic in Python like: If the old value retrieved from the database was 10, then the value of 11 will be written back to the database. The process can be made robust, avoiding a race condition, as well as slightly faster by expressing the update relative to the original field value, rather than as an explicit assignment of a new value. Django provides for performing this kind of relative update. Using , the previous example is expressed as: For more details, see the documentation on and their use in update queries. Specifying which fields to save¶ If is passed a list of field names in keyword argument , only the fields named in that list will be updated. This may be desirable if you want to update just one or a few fields on an object. There will be a slight performance benefit from preventing all of the model fields from being updated in the database. For example: The argument can be any iterable containing strings. An empty iterable will skip the save. A value of will perform an update on all fields. Specifying will force an update. When saving a model fetched through deferred model loading ( or ) only the fields loaded from the DB will get updated. In effect there is an automatic in this case. If you assign or change any deferred field value, the field will be added to the updated fields.\n\nThe method is called whenever you call on an object. Django uses in a number of places. Most notably, to display an object in the Django admin site and as the value inserted into a template when it displays an object. Thus, you should always return a nice, human-readable representation of the model from the method. The equality method is defined such that instances with the same primary key value and the same concrete class are considered equal, except that instances with a primary key value of aren’t equal to anything except themselves. For proxy models, concrete class is defined as the model’s first non-proxy parent; for all other models it’s simply the model’s class. The method is based on the instance’s primary key value. It is effectively . If the instance doesn’t have a primary key value then a will be raised (otherwise the method would return different values before and after the instance is saved, but changing the value of an instance is forbidden in Python. Define a method to tell Django how to calculate the canonical URL for an object. To callers, this method should appear to return a string that can be used to refer to the object over HTTP. While this code is correct and simple, it may not be the most portable way to to write this kind of method. The function is usually the best approach. One place Django uses is in the admin app. If an object defines this method, the object-editing page will have a “View on site” link that will jump you directly to the object’s public view, as given by . Similarly, a couple of other bits of Django, such as the syndication feed framework, use when it is defined. If it makes sense for your model’s instances to each have a unique URL, you should define . You should avoid building the URL from unvalidated user input, in order to reduce possibilities of link or redirect poisoning: If is this returns which, in turn, is a valid schema relative URL but not the expected . It’s good practice to use in templates, instead of hard-coding your objects’ URLs. For example, this template code is bad: This template code is much better: The logic here is that if you change the URL structure of your objects, even for something small like correcting a spelling error, you don’t want to have to track down every place that the URL might be created. Specify it once, in and have all your other code call that one place. The string you return from must contain only ASCII characters (required by the URI specification, RFC 3986 Section 2) and be URL-encoded, if necessary. Code and templates calling should be able to use the result directly without any further processing. You may wish to use the function to help with this if you are using strings containing characters outside the ASCII range.\n\nIn addition to , , a model object might have some of the following methods: For every field that has set, the object will have a method, where is the name of the field. This method returns the “human-readable” value of the field. For every and that does not have , the object will have and methods, where is the name of the field. This returns the next and previous object with respect to the date field, raising a exception when appropriate. Both of these methods will perform their queries using the default manager for the model. If you need to emulate filtering used by a custom manager, or want to perform one-off custom filtering, both methods also accept optional keyword arguments, which should be in the format described in Field lookups. Note that in the case of identical date values, these methods will use the primary key as a tie-breaker. This guarantees that no records are skipped or duplicated. That also means you cannot use those methods on unsaved objects. In most cases overriding or inheriting , , and should work as expected. Since they are added by the metaclass however, it is not practical to account for all possible inheritance structures. In more complex cases you should override to set the methods you need."
    },
    {
        "link": "https://docs.djangoproject.com/en/5.1/howto/custom-model-fields",
        "document": "The model reference documentation explains how to use Django’s standard field classes – , , etc. For many purposes, those classes are all you’ll need. Sometimes, though, the Django version won’t meet your precise requirements, or you’ll want to use a field that is entirely different from those shipped with Django. Django’s built-in field types don’t cover every possible database column type – only the common types, such as and . For more obscure column types, such as geographic polygons or even user-created types such as PostgreSQL custom types, you can define your own Django subclasses. Alternatively, you may have a complex Python object that can somehow be serialized to fit into a standard database column type. This is another case where a subclass will help you use your object with your models. Creating custom fields requires a bit of attention to detail. To make things easier to follow, we’ll use a consistent example throughout this document: wrapping a Python object representing the deal of cards in a hand of Bridge. Don’t worry, you don’t have to know how to play Bridge to follow this example. You only need to know that 52 cards are dealt out equally to four players, who are traditionally called north, east, south and west. Our class looks something like this: # Input parameters are lists of cards ('Ah', '9s', etc.) This is an ordinary Python class, with nothing Django-specific about it. We’d like to be able to do things like this in our models (we assume the attribute on the model is an instance of ): We assign to and retrieve from the attribute in our model just like any other Python class. The trick is to tell Django how to handle saving and loading such an object. In order to use the class in our models, we do not have to change this class at all. This is ideal, because it means you can easily write model support for existing classes where you cannot change the source code. You might only be wanting to take advantage of custom database column types and deal with the data as standard Python types in your models; strings, or floats, for example. This case is similar to our example and we’ll note any differences as we go along.\n\nLet’s start with model fields. If you break it down, a model field provides a way to take a normal Python object – string, boolean, , or something more complex like – and convert it to and from a format that is useful when dealing with the database. (Such a format is also useful for serialization, but as we’ll see later, that is easier once you have the database side under control). Fields in a model must somehow be converted to fit into an existing database column type. Different databases provide different sets of valid column types, but the rule is still the same: those are the only types you have to work with. Anything you want to store in the database must fit into one of those types. Normally, you’re either writing a Django field to match a particular database column type, or you will need a way to convert your data to, say, a string. For our example, we could convert the card data to a string of 104 characters by concatenating all the cards together in a predetermined order – say, all the north cards first, then the east, south and west cards. So objects can be saved to text or character columns in the database. All of Django’s fields (and when we say fields in this document, we always mean model fields and not form fields) are subclasses of . Most of the information that Django records about a field is common to all fields – name, help text, uniqueness and so forth. Storing all that information is handled by . We’ll get into the precise details of what can do later on; for now, suffice it to say that everything descends from and then customizes key pieces of the class behavior. It’s important to realize that a Django field class is not what is stored in your model attributes. The model attributes contain normal Python objects. The field classes you define in a model are actually stored in the class when the model class is created (the precise details of how this is done are unimportant here). This is because the field classes aren’t necessary when you’re just creating and modifying attributes. Instead, they provide the machinery for converting between the attribute value and what is stored in the database or sent to the serializer. Keep this in mind when creating your own custom fields. The Django subclass you write provides the machinery for converting between your Python instances and the database/serializer values in various ways (there are differences between storing a value and using a value for lookups, for example). If this sounds a bit tricky, don’t worry – it will become clearer in the examples below. Just remember that you will often end up creating two classes when you want a custom field:\n• None The first class is the Python object that your users will manipulate. They will assign it to the model attribute, they will read from it for displaying purposes, things like that. This is the class in our example.\n• None The second class is the subclass. This is the class that knows how to convert your first class back and forth between its permanent storage form and the Python form.\n\nWhen planning your subclass, first give some thought to which existing class your new field is most similar to. Can you subclass an existing Django field and save yourself some work? If not, you should subclass the class, from which everything is descended. Initializing your new field is a matter of separating out any arguments that are specific to your case from the common arguments and passing the latter to the method of (or your parent class). In our example, we’ll call our field . (It’s a good idea to call your subclass , so it’s easily identifiable as a subclass.) It doesn’t behave like any existing field, so we’ll subclass directly from : Our accepts most of the standard field options (see the list below), but we ensure it has a fixed length, since it only needs to hold 52 card values plus their suits; 104 characters in total. Many of Django’s model fields accept options that they don’t do anything with. For example, you can pass both and to a and it will ignore the parameter ( being set implies ). No error is raised in this case. This behavior simplifies the field classes, because they don’t need to check for options that aren’t necessary. They pass all the options to the parent class and then don’t use them later on. It’s up to you whether you want your fields to be more strict about the options they select, or to use the more permissive behavior of the current fields. The method takes the following parameters:\n• None : Used for related fields (like ). For advanced use only.\n• None : If , the field will not be serialized when the model is passed to Django’s serializers. Defaults to .\n• None : Only for index creation, if the backend supports tablespaces. You can usually ignore this option.\n• None : if the field was automatically created, as for the used by model inheritance. For advanced use only. All of the options without an explanation in the above list have the same meaning they do for normal Django fields. See the field documentation for examples and details. The counterpoint to writing your method is writing the method. It’s used during model migrations to tell Django how to take an instance of your new field and reduce it to a serialized form - in particular, what arguments to pass to to recreate it. If you haven’t added any extra options on top of the field you inherited from, then there’s no need to write a new method. If, however, you’re changing the arguments passed in (like we are in ), you’ll need to supplement the values being passed. returns a tuple of four items: the field’s attribute name, the full import path of the field class, the positional arguments (as a list), and the keyword arguments (as a dict). Note this is different from the method for custom classes which returns a tuple of three things. As a custom field author, you don’t need to care about the first two values; the base class has all the code to work out the field’s attribute name and import path. You do, however, have to care about the positional and keyword arguments, as these are likely the things you are changing. For example, in our class we’re always forcibly setting max_length in . The method on the base class will see this and try to return it in the keyword arguments; thus, we can drop it from the keyword arguments for readability: If you add a new keyword argument, you need to write code in that puts its value into yourself. You should also omit the value from when it isn’t necessary to reconstruct the state of the field, such as when the default value is being used: # Only include kwarg if it's not the default More complex examples are beyond the scope of this document, but remember - for any configuration of your Field instance, must return arguments that you can pass to to reconstruct that state. Pay extra attention if you set new default values for arguments in the superclass; you want to make sure they’re always included, rather than disappearing if they take on the old default value. In addition, try to avoid returning values as positional arguments; where possible, return values as keyword arguments for maximum future compatibility. If you change the names of things more often than their position in the constructor’s argument list, you might prefer positional, but bear in mind that people will be reconstructing your field from the serialized version for quite a while (possibly years), depending how long your migrations live for. You can see the results of deconstruction by looking in migrations that include the field, and you can test deconstruction in unit tests by deconstructing and reconstructing the field: You can override to customize attributes of a field that don’t affect a column definition. It’s used during model migrations to detect no-op operations. You can’t change the base class of a custom field because Django won’t detect the change and make a migration for it. For example, if you start with: and then decide that you want to use instead, you can’t change the subclass like this: Instead, you must create a new custom field class and update your models to reference it: As discussed in removing fields, you must retain the original class as long as you have migrations that reference it. As always, you should document your field type, so users will know what it is. In addition to providing a docstring for it, which is useful for developers, you can also allow users of the admin app to see a short description of the field type via the django.contrib.admindocs application. To do this provide descriptive text in a class attribute of your custom field. In the above example, the description displayed by the application for a will be ‘A hand of cards (bridge style)’. In the display, the field description is interpolated with which allows the description to incorporate arguments of the field. For example, the description for is: Once you’ve created your subclass, you might consider overriding a few standard methods, depending on your field’s behavior. The list of methods below is in approximately decreasing order of importance, so start from the top. Say you’ve created a PostgreSQL custom type called . You can subclass and implement the method, like so: Once you have , you can use it in any model, just like any other type: If you aim to build a database-agnostic application, you should account for differences in database column types. For example, the date/time column type in PostgreSQL is called , while the same column in MySQL is called . You can handle this in a method by checking the attribute. Current built-in vendor names are: , , , and . The and methods are called by Django when the framework constructs the statements for your application – that is, when you first create your tables. The methods are also called when constructing a clause that includes the model field – that is, when you retrieve data using QuerySet methods like , , and and have the model field as an argument. Some database column types accept parameters, such as , where the parameter represents the maximum column length. In cases like these, it’s more flexible if the parameter is specified in the model rather than being hard-coded in the method. For example, it wouldn’t make much sense to have a , shown here: # This is a silly example of hard-coded parameters. The better way of doing this would be to make the parameter specifiable at run time – i.e., when the class is instantiated. To do that, implement , like so: # This is a much more flexible example. Finally, if your column requires truly complex SQL setup, return from . This will cause Django’s SQL creation code to skip over this field. You are then responsible for creating the column in the right table in some other way, but this gives you a way to tell Django to get out of the way. The method is called by fields such as and that point to another field to determine their database column data types. For example, if you have an , you also need the foreign keys that point to that field to use the same data type: If your custom class deals with data structures that are more complex than strings, dates, integers, or floats, then you may need to override and . If present for the field subclass, will be called in all circumstances when the data is loaded from the database, including in aggregates and calls. is called by deserialization and during the method used from forms. As a general rule, should deal gracefully with any of the following arguments:\n• None An instance of the correct type (e.g., in our ongoing example). In our class, we’re storing the data as a field in the database, so we need to be able to process strings and in the . In , we need to also handle instances: \"\"\"Takes a string of cards and splits into a full hand.\"\"\" Notice that we always return a instance from these methods. That’s the Python object type we want to store in the model’s attribute. For , if anything goes wrong during value conversion, you should raise a exception. Since using a database requires conversion in both ways, if you override you also have to override to convert Python objects back to query values. If your custom field uses the , or types for MySQL, you must make sure that always returns a string type. MySQL performs flexible and unexpected matching when a query is performed on these types and the provided value is an integer, which can cause queries to include unexpected objects in their results. This problem cannot occur if you always return a string type from . Some data types (for example, dates) need to be in a specific format before they can be used by a database backend. is the method where those conversions should be made. The specific connection that will be used for the query is passed as the parameter. This allows you to use backend-specific conversion logic if it is required. For example, Django uses the following method for its : In case your custom field needs a special conversion when being saved that is not the same as the conversion used for normal query parameters, you can override . If you want to preprocess the value just before saving, you can use . For example, Django’s uses this method to set the attribute correctly in the case of or . If you do override this method, you must return the value of the attribute at the end. You should also update the model’s attribute if you make any changes to the value so that code holding references to the model will always see the correct value. Specifying the form field for a model field¶ To customize the form field used by , you can override . The form field class can be specified via the and arguments; the latter is used if the field has choices specified, the former otherwise. If these arguments are not provided, or will be used. All of the dictionary is passed directly to the form field’s method. Normally, all you need to do is set up a good default for the (and maybe ) argument and then delegate further handling to the parent class. This might require you to write a custom form field (and even a form widget). See the forms documentation for information about this. Continuing our ongoing example, we can write the method as: # This is a fairly standard way to set up some defaults # while letting the caller override them. This assumes we’ve imported a field class (which has its own default widget). This document doesn’t cover the details of writing custom form fields. If you have created a method, you don’t need to worry about – it won’t be used much. Sometimes, though, your database storage is similar in type to some other field, so you can use that other field’s logic to create the right column. No matter which database backend we are using, this will mean that and other SQL commands create the right column type for storing a string. If returns a string that is not known to Django for the database backend you are using – that is, it doesn’t appear in – the string will still be used by the serializer, but the default method will return . See the documentation of for reasons why this might be useful. Putting a descriptive string in as the type of the field for the serializer is a useful idea if you’re ever going to be using the serializer output in some other place, outside of Django. To customize how the values are serialized by a serializer, you can override . Using is the best way to get the field’s value prior to serialization. For example, since uses strings for its data storage anyway, we can reuse some existing conversion code: Writing a custom field can be a tricky process, particularly if you’re doing complex conversions between your Python types and your database and serialization formats. Here are a couple of tips to make things go more smoothly:\n• None Look at the existing Django fields (in django/db/models/fields/__init__.py) for inspiration. Try to find a field that’s similar to what you want and extend it a little bit, instead of creating an entirely new field from scratch.\n• None Put a method on the class you’re wrapping up as a field. There are a lot of places where the default behavior of the field code is to call on the value. (In our examples in this document, would be a instance, not a ). So if your method automatically converts to the string form of your Python object, you can save yourself a lot of work.\n\nIn addition to the above methods, fields that deal with files have a few other special requirements which must be taken into account. The majority of the mechanics provided by , such as controlling database storage and retrieval, can remain unchanged, leaving subclasses to deal with the challenge of supporting a particular type of file. Django provides a class, which is used as a proxy to the file’s contents and operations. This can be subclassed to customize how the file is accessed, and what methods are available. It lives at , and its default behavior is explained in the file documentation. Once a subclass of is created, the new subclass must be told to use it. To do so, assign the new subclass to the special attribute of the subclass. In addition to the above details, there are a few guidelines which can greatly improve the efficiency and readability of the field’s code.\n• None The source for Django’s own (in django/db/models/fields/files.py) is a great example of how to subclass to support a particular type of file, as it incorporates all of the techniques described above.\n• None Cache file attributes wherever possible. Since files may be stored in remote storage systems, retrieving them may cost extra time, or even money, that isn’t always necessary. Once a file is retrieved to obtain some data about its content, cache as much of that data as possible to reduce the number of times the file must be retrieved on subsequent calls for that information."
    },
    {
        "link": "https://stackoverflow.com/questions/2199013/how-can-my-django-model-datefield-add-30-days-to-the-provided-value",
        "document": "There is no need to implement custom save method.\n\nAlso doing this is absolutely wrong! It gets evaluated when you start your instance of django. If you use apache it will probably work, because on some configurations apache revokes your django application on every request, but still you can find you self some day looking through out your code and trying to figure out why this get calculated not as you expect.\n\nThe right way of doing this is to pass a callable object to default argument. It can be a datetime.today function or your custom function. Then it gets evaluated every time you request a new default value."
    },
    {
        "link": "https://stackoverflow.com/questions/2412770/good-ways-to-sort-a-queryset-django",
        "document": "I just wanted to illustrate that the built-in solutions (SQL-only) are not always the best ones. At first I thought that because Django's method accepts multiple arguments, you could easily chain them:\n\nBut, it does not work as you would expect. Case in point, first is a list of presidents sorted by score (selecting top 5 for easier reading):\n\nUsing Alex Martelli's solution which accurately provides the top 5 people sorted by :\n\nAnd now the combined call:\n\nAs you can see it is the same result as the first one, meaning it doesn't work as you would expect."
    },
    {
        "link": "https://forum.djangoproject.com/t/allowing-queries-to-be-ordered-by-model-methods/7405",
        "document": "As I’ve been working with Django queries, I can’t help but recognize how nice it would be to order queries by a model method, as model methods are meant to act like a field to their respective model. Obviously this cannot be, as the model methods are not actually columns in the model’s table. However, I have also discovered a workaround that could potentially turn into a solution.\n\nCurrently, I check if the field to be passed in to order_by is a field name or a model method name. If it is the name of a model method, then I do not include order_by in the query. Instead, I run:\n\nI am not sure what the performance hit of this is, but it works great in creating the illusion that the results were ordered by the model method field.\n\nTo implement this in to django, there would have to be a similar check to see if the field passed in is a field name or a model method name. It would then need to wait until all of the .order_by() calls are made as it is my understanding that it can be called several times thanks to Django’s lazy querying. Following the same logic, order_by could then perform a basic sort on the queryset as exemplified above as opposed to actually passing any fields in to the query.\n\nI am looking for thoughts and suggestions on this idea and the implementation, as I am currently looking in to how to do so."
    },
    {
        "link": "https://pixiebrix.com/blog/sort-django-queryset-by-custom-order",
        "document": "At PixieBrix, we discovered sorting a Django queryset by a custom order can be challenging. Choosing the wrong solution for your use case can cripple your application's performance.\n\nFor example, let’s take a simple model:\n\nOur query set goal is to order these items from high to low . For priority levels with multiple items, we'll also order by to keep the results consistent. The expected result should be the id’s in the following order:\n\nLet’s review some strategies for performing this sort. Then we’ll benchmark each one and discuss when to use them.\n\nDefinitely the most common approach I see in the wild but there are two big problems, which make this the slowest solution for large datasets:\n• Executes the sort in Python, instead of in the database, which is bad for performance.\n• Returns a list, instead of a queryset, so you can’t do any more work in the database, which is also bad for performance.\n\nConditional expressions let you to implement conditional logic into your database queries. This solution is faster than sorting in Python because the sort is done directly in the database.\n\nNote, is the same as but doesn’t return the field in the result (see docs).\n\nThe solution is quite verbose so I generally like to throw this into a custom model manager.\n\nThis allows us to write compact and easy to read queries:\n\nDatabase indexes will improve performance even further. The indexes you choose are dependent on your query workload. The index below will optimize the query. Note, we need to extract the class out of the model, otherwise Python will raise a exception.\n\nConditional expressions are powerful and can be used in queries with very advanced logic. See the docs for more examples.\n\nDjango lets you represent choices as integers in a database using the class (see Enumeration Types). Refactor the field like so:\n\nThis allows us to perform our sort in the database without the need of conditional expressions:\n\nSimilar to the last solution, an index can significantly improve performance:\n\nThis is the fastest and most straightforward solution but has some downfalls:\n• Requires you to perform a database migration if the order ever changes.\n• Represents strings as integers in the database, which can be confusing.\n• Doesn’t work for complex sorting logic, e.g. order records from high to low but move any item with \"urgent\" in the title to the top of the list.\n\nI took the following benchmarks (in seconds) using Python 3.11.1, Django 4.1 and PostgreSQL 15.1.\n\nAs you can see, any strategy is fine for small datasets. For large datasets, sorting in the database using is best. Conditional expressions are a good alternative if the sorting logic is complex. Always create an index when sorting large tables in the database."
    },
    {
        "link": "https://stackoverflow.com/questions/59156444/how-to-use-order-by-in-django-queryset",
        "document": "I apply order_by to a queryset and the results are mixed up. Is there any difference if I apply it to a queryset?\n\nThe table has three columns: Name Age Description Here is the code:\n\nHere only Age is sorted correctly. The match between these Age and Description is distorted. What is wrong here?"
    },
    {
        "link": "https://reddit.com/r/django/comments/szz035/best_way_to_sort_queryset_using_button",
        "document": "EDIT: I've figured it out. For anyone wondering, the approach I used was linking instead of button:\n• In views, get the value of the sort via if request.GET.get('sort') and if sort_by == 'name': data = Data.order_by('name')\n\nI want to sort my queryset by 1. date_created and 2. name using a dropdown. Both fields are in the model.\n\nRight now, I have it auto-sorted by date_created descending in the views file:\n\nBut I would like to sort by name descending when triggered by a button click on the main page.\n\nNew to Django, so I'm not sure how to approach this. None of my searches have yielded exactly what I'm looking for.\n\nThanks for any tips!"
    },
    {
        "link": "https://docs.djangoproject.com/en/5.1/ref/contrib/admin",
        "document": "One of the most powerful parts of Django is the automatic admin interface. It reads metadata from your models to provide a quick, model-centric interface where trusted users can manage content on your site. The admin’s recommended use is limited to an organization’s internal management tool. It’s not intended for building your entire front end around.\n\nThe admin has many hooks for customization, but beware of trying to use those hooks exclusively. If you need to provide a more process-centric interface that abstracts away the implementation details of database tables and fields, then it’s probably time to write your own views.\n\nIn this document we discuss how to activate, use, and customize Django’s admin interface.\n\nThe admin interface has the ability to edit models on the same page as a parent model. These are called inlines. Suppose you have these two models: You can edit the books authored by an author on the author page. You add inlines to a model by specifying them in a : Django provides two subclasses of and they are: The difference between these two is merely the template used to render them. shares many of the same features as , and adds some of its own (the shared features are actually defined in the superclass). The shared features are: The model which the inline is using. This is required. The name of the foreign key on the model. In most cases this will be dealt with automatically, but must be specified explicitly if there are more than one foreign key to the same parent model. This defaults to . Using your own formset can give you many possibilities of customization. Inlines are built around model formsets. The value for defaults to . This is what is passed through to when creating the formset for this inline. When writing custom validation for forms, be cautious of writing validation that relies on features of the parent model. If the parent model fails to validate, it may be left in an inconsistent state as described in the warning in Validation on a ModelForm. A list or tuple containing extra CSS classes to apply to the fieldset that is rendered for the inlines. Defaults to . As with classes configured in , inlines with a class will be initially collapsed using an expandable widget. using the class now use and elements, provided they define a . This controls the number of extra forms the formset will display in addition to the initial forms. Defaults to 3. See the formsets documentation for more information. For users with JavaScript-enabled browsers, an “Add another” link is provided to enable any number of additional inlines to be added in addition to those provided as a result of the argument. The dynamic link will not appear if the number of currently displayed forms exceeds , or if the user does not have JavaScript enabled. also allows you to customize the number of extra forms. This controls the maximum number of forms to show in the inline. This doesn’t directly correlate to the number of objects, but can if the value is small enough. See Limiting the number of editable objects for more information. also allows you to customize the maximum number of extra forms. This controls the minimum number of forms to show in the inline. See for more information. also allows you to customize the minimum number of displayed forms. By default, Django’s admin uses a select-box interface (<select>) for fields that are . Sometimes you don’t want to incur the overhead of having to select all the related instances to display in the drop-down. is a list of fields you would like to change into an widget for either a or : The template used to render the inline on the page. An override to the from the model’s inner class. An override to the from the model’s inner class. If this isn’t given and the is defined, Django will use + . Specifies whether or not inline objects can be deleted in the inline. Defaults to . Specifies whether or not inline objects that can be changed in the admin have a link to the change form. Defaults to . Returns a class for use in admin add/change views. is the parent object being edited or when adding a new parent. See the example for . Returns the number of extra inline forms to use. By default, returns the attribute. Override this method to programmatically determine the number of extra inline forms. For example, this may be based on the model instance (passed as the keyword argument ): Returns the maximum number of extra inline forms to use. By default, returns the attribute. Override this method to programmatically determine the maximum number of inline forms. For example, this may be based on the model instance (passed as the keyword argument ): Returns the minimum number of inline forms to use. By default, returns the attribute. Override this method to programmatically determine the minimum number of inline forms. For example, this may be based on the model instance (passed as the keyword argument ). Should return if adding an inline object is permitted, otherwise. is the parent object being edited or when adding a new parent. Should return if editing an inline object is permitted, otherwise. is the parent object being edited. Should return if deleting an inline object is permitted, otherwise. is the parent object being edited. The argument passed to methods is the parent object being edited or when adding a new parent. Working with a model with two or more foreign keys to the same parent model¶ It is sometimes possible to have more than one foreign key to the same model. Take this model for instance: If you wanted to display an inline on the admin add/change pages you need to explicitly define the foreign key since it is unable to do so automatically: By default, admin widgets for many-to-many relations will be displayed on whichever model contains the actual reference to the . Depending on your definition, each many-to-many field in your model will be represented by a standard HTML , a horizontal or vertical filter, or a widget. However, it is also possible to replace these widgets with inlines. Suppose we have the following models: If you want to display many-to-many relations using an inline, you can do so by defining an object for the relationship: There are two features worth noting in this example. Firstly - the class references . The attribute is a reference to the model that manages the many-to-many relation. This model is automatically created by Django when you define a many-to-many field. Secondly, the must manually exclude the field. Django displays an admin widget for a many-to-many field on the model that defines the relation (in this case, ). If you want to use an inline model to represent the many-to-many relationship, you must tell Django’s admin to not display this widget - otherwise you will end up with two widgets on your admin page for managing the relation. Note that when using this technique the signals aren’t triggered. This is because as far as the admin is concerned, is just a model with two foreign key fields rather than a many-to-many relation. In all other respects, the is exactly the same as any other. You can customize the appearance using any of the normal properties. When you specify an intermediary model using the argument to a , the admin will not display a widget by default. This is because each instance of that intermediary model requires more information than could be displayed in a single widget, and the layout required for multiple widgets will vary depending on the intermediate model. However, we still want to be able to edit that information inline. Fortunately, we can do this with inline admin models. Suppose we have the following models: The first step in displaying this intermediate model in the admin is to define an inline class for the model: This example uses the default values for the model, and limits the extra add forms to one. This could be customized using any of the options available to classes. Now create admin views for the and models: Finally, register your and models with the admin site: Now your admin site is set up to edit objects inline from either the or the detail pages. Using generic relations as an inline¶ It is possible to use an inline with generically related objects. Let’s say you have the following models: If you want to allow editing and creating an instance on the , add/change views you can use or (both subclasses of ) provided by . They implement tabular and stacked visual layouts for the forms representing the inline objects, respectively, just like their non-generic counterparts. They behave just like any other inline. In your for this example app: See the contenttypes documentation for more specific information.\n\nYou can override many of the templates which the admin module uses to generate the various pages of an admin site. You can even override a few of these templates for a specific app, or a specific model. The admin template files are located in the django/contrib/admin/templates/admin directory. In order to override one or more of them, first create an directory in your project’s directory. This can be any of the directories you specified in the option of the backend in the setting. If you have customized the option, be sure appears before so that your custom templates will be found by the template loading system before those that are included with . Within this directory, create sub-directories named after your app. Within these app subdirectories create sub-directories named after your models. Note, that the admin app will lowercase the model name when looking for the directory, so make sure you name the directory in all lowercase if you are going to run your app on a case-sensitive filesystem. To override an admin template for a specific app, copy and edit the template from the django/contrib/admin/templates/admin directory, and save it to one of the directories you just created. For example, if we wanted to add a tool to the change list view for all the models in an app named , we would copy to the directory of our project, and make any necessary changes. If we wanted to add a tool to the change list view for only a specific model named ‘Page’, we would copy that same file to the directory of our project. Because of the modular design of the admin templates, it is usually neither necessary nor advisable to replace an entire template. It is almost always better to override only the section of the template which you need to change. To continue the example above, we want to add a new link next to the tool for the model. After looking at we determine that we only need to override the block. Therefore here is our new : And that’s it! If we placed this file in the directory, our link would appear on the change form for all models within my_app. Templates which may be overridden per app or model¶ Not every template in may be overridden per app or per model. The following can: For those templates that cannot be overridden in this way, you may still override them for your entire project by placing the new version in your directory. This is particularly useful to create custom 404 and 500 pages. Some of the admin templates, such as are used to render custom inclusion tags. These may be overridden, but in such cases you are probably better off creating your own version of the tag in question and giving it a different name. That way you can use it selectively. If you wish to change the index, login or logout templates, you are better off creating your own instance (see below), and changing the , or properties.\n\nA Django administrative site is represented by an instance of ; by default, an instance of this class is created as and you can register your models and instances with it. If you want to customize the default admin site, you can override it. When constructing an instance of an , you can provide a unique instance name using the argument to the constructor. This instance name is used to identify the instance, especially when reversing admin URLs. If no instance name is provided, a default instance name of will be used. See Customizing the AdminSite class for an example of customizing the class. Templates can override or extend base admin templates as described in Overriding admin templates. The text to put at the top of each admin page, as a (a string). By default, this is “Django administration”. In older versions, was using an tag. The text to put at the end of each admin page’s (a string). By default, this is “Django site admin”. The URL for the “View site” link at the top of each admin page. By default, is . Set it to to remove the link. For sites running on a subpath, the method checks if the current request has set and uses that value if isn’t set to something other than . The text to put at the top of the admin index page (a string). By default, this is “Site administration”. Path to a custom template that will be used by the admin site main index view. Path to a custom template that will be used by the admin site app index view. The string to use for displaying empty values in the admin site’s change list. Defaults to a dash. The value can also be overridden on a per basis and on a custom field within a by setting an attribute on the field. See for examples. A boolean value that determines whether to show the navigation sidebar on larger screens. By default, it is set to . A boolean value that determines whether to add a final catch-all view to the admin that redirects unauthenticated users to the login page. By default, it is set to . Setting this to is not recommended as the view protects against a potential model enumeration privacy issue. Path to a custom template that will be used by the admin site login view. Subclass of that will be used by the admin site login view. Path to a custom template that will be used by the admin site logout view. Path to a custom template that will be used by the admin site password change view. Path to a custom template that will be used by the admin site password change done view. Returns a dictionary of variables to put in the template context for every page in the admin site. Includes the following variables and values by default:\n• None : a list of applications from the application registry available for the current user. Each entry in the list is a dict representing an application with the following keys:\n• None : the URL of the application index in the admin\n• None : a boolean indicating if displaying and accessing of the module’s index page is permitted for the current user\n• None : a list of the models available in the application Each model is a dict with the following keys:\n• None : class name of the model\n• None : plural name of the model\n• None : whether the current page is displayed in a popup window Returns a list of applications from the application registry available for the current user. You can optionally pass an argument to get details for a single app. Each entry in the list is a dictionary representing an application with the following keys:\n• None : the URL of the application index in the admin\n• None : a boolean indicating if displaying and accessing of the module’s index page is permitted for the current user\n• None : a list of the models available in the application\n• None : name of the application Each model is a dictionary with the following keys:\n• None : class name of the model\n• None : plural name of the model Lists of applications and models are sorted alphabetically by their names. You can override this method to change the default order on the admin index page. Returns if the user for the given has permission to view at least one page in the admin site. Defaults to requiring both and to be . Registers the given model class (or iterable of classes) with the given . defaults to (the default admin options). If keyword arguments are given – e.g. – they’ll be applied as options to the admin class. Raises if a model is abstract. and if a model is already registered. Unregisters the given model class (or iterable of classes). Returns an admin class for the given model class. Raises if a model isn’t registered. Returns a queryset for the related instances, shown on the site index page. This method can be overridden to filter the log entries by other criteria. The last step in setting up the Django admin is to hook your instance into your URLconf. Do this by pointing a given URL at the method. It is not necessary to use . In this example, we register the default instance at the URL If you’d like to set up your own admin site with custom behavior, you’re free to subclass and override or add anything you like. Then, create an instance of your subclass (the same way you’d instantiate any other Python class) and register your models and subclasses with it instead of with the default site. Finally, update to reference your subclass. Note that you may not want autodiscovery of modules when using your own instance since you will likely be importing all the per-app modules in your module. This means you need to put instead of in your setting. You can override the default by setting the attribute of a custom to the dotted import path of either a subclass or a callable that returns a site instance. Multiple admin sites in the same URLconf¶ You can create multiple instances of the admin site on the same Django-powered website. Create multiple instances of and place each one at a different URL. In this example, the URLs and feature separate versions of the admin site – using the instances and , respectively: instances take a single argument to their constructor, their name, which can be anything you like. This argument becomes the prefix to the URL names for the purposes of reversing them. This is only necessary if you are using more than one . Just like , provides a method that can be overridden to define additional views for the site. To add a new view to your admin site, extend the base method to include a pattern for your new view. Any view you render that uses the admin templates, or extends the base admin template, should set before rendering the template. It should be set to either if your view is on an or if your view is on a . You can add a password reset feature to the admin site by adding a few lines to your URLconf. Specifically, add these four patterns: (This assumes you’ve added the admin at and requires that you put the URLs starting with before the line that includes the admin app itself). The presence of the named URL will cause a “forgotten your password?” link to appear on the default admin log-in page under the password box.\n\nWhen an is deployed, the views provided by that site are accessible using Django’s URL reversing system. The provides the following named URL patterns: Each instance provides an additional set of named URLs: These named URLs are registered with the application namespace , and with an instance namespace corresponding to the name of the Site instance. So - if you wanted to get a reference to the Change view for a particular object (from the polls application) in the default admin, you would call: This will find the first registered instance of the admin application (whatever the instance name), and resolve to the view for changing instances in that instance. If you want to find a URL in a specific admin instance, provide the name of that instance as a hint to the reverse call. For example, if you specifically wanted the admin view from the admin instance named , you would need to call: For more details, see the documentation on reversing namespaced URLs. To allow easier reversing of the admin urls in templates, Django provides an filter which takes an action as argument: The action in the examples above match the last part of the URL names for instances described above. The variable can be any object which has an and attributes and is usually supplied by the admin views for the current model."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Server-side/Django/Admin_site",
        "document": "The Django admin application can use your models to automatically build a site area that you can use to create, view, update, and delete records. This can save you a lot of time during development, making it very easy to test your models and get a feel for whether you have the right data. The admin application can also be useful for managing data in production, depending on the type of website. The Django project recommends it only for internal data management (i.e. just for use by admins, or people internal to your organization), as the model-centric approach is not necessarily the best possible interface for all users, and exposes a lot of unnecessary detail about the models. All the configuration required to include the admin application in your website was done automatically when you created the skeleton project (for information about actual dependencies needed, see the Django docs here). As a result, all you must do to add your models to the admin application is to register them. At the end of this article we'll provide a brief demonstration of how you might further configure the admin area to better display our model data. After registering the models we'll show how to create a new \"superuser\", login to the site, and create some books, authors, book instances, and genres. These will be useful for testing the views and templates we'll start creating in the next tutorial.\n\nFirst, open admin.py in the catalog application (/django-locallibrary-tutorial/catalog/admin.py). It currently looks like this — note that it already imports : from django.contrib import admin # Register your models here. Register the models by copying the following text into the bottom of the file. This code imports the models and then calls to register each of them. Note: The lines above assume that you accepted the challenge to create a model to represent the natural language of a book (see the models tutorial article)! This is the simplest way of registering a model, or models, with the site. The admin site is highly customizable, and we'll talk more about the other ways of registering your models further down.\n\nLogging in and using the site To login to the site, open the /admin URL (e.g. ) and enter your new superuser userid and password credentials (you'll be redirected to the login page, and then back to the /admin URL after you've entered your details). This part of the site displays all our models, grouped by installed application. You can click on a model name to go to a screen that lists all its associated records, and you can further click on those records to edit them. You can also directly click the Add link next to each model to start creating a record of that type. Click on the Add link to the right of Books to create a new book (this will display a dialog much like the one below). Note how the titles of each field, the type of widget used, and the (if any) match the values you specified in the model. Enter values for the fields. You can create new authors or genres by pressing the + button next to the respective fields (or select existing values from the lists if you've already created them). When you're done you can press SAVE, Save and add another, or Save and continue editing to save the record. Note: At this point we'd like you to spend some time adding a few books, authors, languages, and genres (e.g. Fantasy) to your application. Make sure that each author and genre includes a couple of different books (this will make your list and detail views more interesting when we implement them later on in the article series). When you've finished adding books, click on the Home link in the top bookmark to be taken back to the main admin page. Then click on the Books link to display the current list of books (or on one of the other links to see other model lists). Now that you've added a few books, the list might look similar to the screenshot below. The title of each book is displayed; this is the value returned in the Book model's method that we specified in the last article. From this list you can delete books by selecting the checkbox next to the book you don't want, selecting the delete… action from the Action drop-down list, and then pressing the Go button. You can also add new books by pressing the ADD BOOK button. You can edit a book by selecting its name in the link. The edit page for a book, shown below, is almost identical to the \"Add\" page. The main differences are the page title (Change book) and the addition of Delete, HISTORY and VIEW ON SITE buttons (this last button appears because we defined the method in our model). Note: Clicking the VIEW ON SITE button raises a exception because the method attempts to a named URL mapping ('book-detail') that has not yet been defined. We'll define a URL mapping and associated view in Django Tutorial Part 6: Generic list and detail views. Now navigate back to the Home page (using the Home link in the breadcrumb trail) and then view the Author and Genre lists — you should already have quite a few created from when you added the new books, but feel free to add some more. What you won't have is any Book Instances, because these are not created from Books (although you can create a from a — this is the nature of the field). Navigate back to the Home page and press the associated Add button to display the Add book instance screen below. Note the large, globally unique Id, which can be used to separately identify a single copy of a book in the library. Create a number of these records for each of your books. Set the status as Available for at least some records and On loan for others. If the status is not Available, then also set a future Due back date. That's it! You've now learned how to set up and use the administration site. You've also created records for , , , and that we'll be able to use once we create our own views and templates.\n\nTo change how a model is displayed in the admin interface you define a ModelAdmin class (which describes the layout) and register it with the model. Let's start with the model. Open admin.py in the catalog application (/django-locallibrary-tutorial/catalog/admin.py). Comment out your original registration (prefix it with a #) for the model: Now add a new and registration as shown below. # Define the admin class class AuthorAdmin(admin.ModelAdmin): pass # Register the admin class with the associated model admin.site.register(Author, AuthorAdmin) Now we'll add classes for , and . We again need to comment out the original registrations: Now to create and register the new models; for the purpose of this demonstration, we'll instead use the decorator to register the models (this does exactly the same thing as the syntax): # Register the Admin classes for Book using the decorator @admin.register(Book) class BookAdmin(admin.ModelAdmin): pass # Register the Admin classes for BookInstance using the decorator @admin.register(BookInstance) class BookInstanceAdmin(admin.ModelAdmin): pass Currently all of our admin classes are empty (see ) so the admin behavior will be unchanged! We can now extend these to define our model-specific admin behavior.\n\nThe LocalLibrary currently lists all authors using the object name generated from the model method. This is fine when you only have a few authors, but once you have many you may end up having duplicates. To differentiate them, or just because you want to show more interesting information about each author, you can use list_display to add additional fields to the view. Replace your class with the code below. The field names to be displayed in the list are declared in a tuple in the required order, as shown (these are the same names as specified in your original model). Now navigate to the author list in your website. The fields above should now be displayed, like so: For our model we'll additionally display the and . The is a field (one-to-many) relationship, and so will be represented by the value for the associated record. Replace the class with the version below. Unfortunately we can't directly specify the field in because it is a (Django prevents this because there would be a large database access \"cost\" in doing so). Instead we'll define a function to get the information as a string (this is the function we've called above; we'll define it below). Note: Getting the may not be a good idea here, because of the \"cost\" of the database operation. We're showing you how because calling functions in your models can be very useful for other reasons — for example to add a Delete link next to every item in the list. Add the following code into your model (models.py). This creates a string from the first three values of the field (if they exist) and creates a that can be used in the admin site for this method. def display_genre(self): \"\"\"Create a string for the Genre. This is required to display genre in Admin.\"\"\" return ', '.join(genre.name for genre in self.genre.all()[:3]) display_genre.short_description = 'Genre' After saving the model and updated admin, open your website and go to the Books list page; you should see a book list like the one below: The model (and the model, if you defined one) both have a single field, so there is no point creating an additional model for them to display additional fields. Note: It is worth updating the model list to show at least the status and the expected return date. We've added that as a challenge at the end of this article!\n\nBy default, the detail views lay out all fields vertically, in their order of declaration in the model. You can change the order of declaration, which fields are displayed (or excluded), whether sections are used to organize the information, whether fields are displayed horizontally or vertically, and even what edit widgets are used in the admin forms. Note: The LocalLibrary models are relatively simple so there isn't a huge need for us to change the layout; we'll make some changes anyway however, just to show you how. Controlling which fields are displayed and laid out Update your class to add the line, as shown below: The attribute lists just those fields that are to be displayed on the form, in order. Fields are displayed vertically by default, but will display horizontally if you further group them in a tuple (as shown in the \"date\" fields above). In your website go to the author detail view — it should now appear as shown below: Note: You can also use the attribute to declare a list of attributes to be excluded from the form (all other attributes in the model will be displayed). You can add \"sections\" to group related model information within the detail form, using the fieldsets attribute. In the model we have information related to what the book is (i.e. , , and ) and when it will be available ( , ). We can add these to our class as shown below, using the property. Each section has its own title (or , if you don't want a title) and an associated tuple of fields in a dictionary — the format is complicated to describe, but fairly easy to understand if you look at the code fragment immediately above. Now navigate to a book instance view in your website; the form should appear as shown below:"
    },
    {
        "link": "https://w3schools.com/django/django_admin_include_members.php",
        "document": "To include the Member model in the admin interface, we have to tell Django that this model should be visible in the admin interface.\n\nThis is done in a file called , and is located in your app's folder, which in our case is the folder.\n\nOpen it, and it should look like this:\n\nInsert a couple of lines here to make the Member model visible in the admin page:\n\nNow go back to the browser ( ) and you should get this result:\n\nClick and see the five records we inserted earlier in this tutorial:\n\nIn the list in the screenshot above, we see \"Member object (1)\", \"Member object (2)\" etc. which might not be the data you wanted to be displayed in the list.\n\nIt would be better to display \"firstname\" and \"lastname\" instead.\n\nThis can easily be done by changing some settings in the and/or the files. You will learn more about this in the next chapter."
    },
    {
        "link": "https://realpython.com/customize-django-admin-python",
        "document": "The Django framework comes with a powerful administrative tool called admin. You can use it out of the box to quickly add, delete, or edit any database model from a web interface. But with a little extra code, you can customize the Django admin to take your admin capabilities to the next level.\n\nIn this tutorial, you’ll learn how to:\n\nThe Django admin provides a web-based interface for creating and managing database model objects. To see it in action, you’ll first need a Django project and some object models. Install Django inside a clean virtual environment: You first create a new Django project named with an app called . Then you migrate the authentication tables and create an administrator. Access to the Django admin screens is restricted to users with or flags, so you use the management command to create a . You also need to modify to include the new app named : The app directory will start with the following files inside: You’re interested in two of these files:\n• registers your models with the Django admin. To demonstrate the outcome when you customize the Django admin, you’ll need some models. Edit : These models represent students taking courses at a school. A has a and a in which it was offered. A has a first and last name and can take zero or more . A contains a percentage score that a received on a . Here’s a model diagram showing the relationships between the objects: The underlying table names in the database are slightly different from this, but they’re related to the models shown above. Each model that you want Django to represent in the admin interface needs to be registered. You do this in the file. Models from are registered in the corresponding file: You’re almost ready to go. Once you’ve migrated your database models, you can run the Django development server and see the results: ./manage.py makemigrations ./manage.py migrate ./manage.py runserver Watching for file changes with StatReloader Now visit to see your admin interface. You’ll be prompted to log in. Use the credentials you created with the management command. The admin home screen lists all the registered database models: You can now use the interface to create objects in your database. Clicking a model name will show you a screen listing all the objects in the database for that model. Here’s the list: The list starts out empty, like your database. Clicking ADD PERSON allows you to create a person in the database. Once you save, you’ll be returned to the list of objects: The good news is you’ve got an object. The bad news is tells you the of the object and nothing else. By default, the Django admin displays each object by calling on it. You can make this screen a little more helpful by adding a method to the class in : Adding changes the display to include the first and last name of the in the interface. You can refresh the screen to see the change: That’s a little better! Now you can see some information about the object. It’s a good idea to add similar methods to both the and the objects: You’ll want to have some data in your database to see the full effect of your customizations. You can have some fun and create your own data now, or you can skip the work and use a fixture. Expand the box below to learn how to load data using a fixture. Django lets you load data to and from the database in files called fixtures. Copy the following into a file named : Once you’ve created the file, you can use the Django management command to load it into your database: Your database now has some sample , , and objects. Now that you have some data to work with, you’re ready to start customizing Django’s admin interface.\n\nThe smart folks who created the Django framework not only built the admin, but they did it in such a way that you can customize it for your projects. When you registered the object earlier, it inherited from . Most of the customization you can do with the Django admin is done by modifying , and you sure can modify it! has over thirty attributes and almost fifty methods. You can use each one of these to fine-tune the admin’s presentation and control your objects’ interfaces. Every one of these options is described in detail in the documentation. To top it all off, the admin is built using Django’s templating interface. The Django template mechanism allows you to override existing templates, and because the admin is just another set of templates, this means you can completely change its HTML. Although it’s beyond the scope of this tutorial, you can even create multiple admin sites. That might seem like overkill, but it allows you to get fancy and define different sites for users with different permissions. The Django admin is split into three major areas: The app index lists your registered models. A change list is automatically created for each registered model and lists the objects for that model. When you add or edit one of those objects, you do so with a change form. In the earlier example, the app index showed the , , and objects. Clicking People shows the change lists for objects. On the change list page, clicking the object takes you to the change form to edit Buffy’s details.\n\nImplementing is a quick way to change the representation of a object from a meaningless string to understandable data. Since this representation will also show up in drop-downs and multi-selects, you definitely want to make it as easy to understand as possible. You can customize change list pages in far more ways than just modifying an object’s string representation. The attribute of an object specifies what columns are shown in the change list. This value is a tuple of attributes of the object being modeled. For example, in , modify as follows: The code above modifies your change list to display the and attributes for each object. Each attribute is shown in a column on the page: The two columns are clickable, allowing you to sort the page by the column data. The admin also respects the attribute of a section: Adding the attribute will default all queries on to be ordered by then . Django will respect this default order both in the admin and when fetching objects. The tuple can reference any attribute of the object being listed. It can also reference a method in the itself. Modify again: In the above code, you add a column to the admin that displays each student’s grade average. is called once for each object displayed in the list. The parameter is the object for the row being displayed. In this case, you use it to query the corresponding objects for the student, with the response averaged over . You can see the results here: Keep in mind that the average grade should really be calculated in the model object. You’ll likely want the data elsewhere, not just in the Django admin. If you had such a method, you could add it to the attribute. The example here shows what you can do in a object, but it probably isn’t the best choice for your code. By default, only those columns that are object attributes are sortable. is not. This is because sorting is performed by an underlying , not on the displayed results. There are ways of sorting these columns in some cases, but that’s beyond the scope of this tutorial. The title for the column is based on the name of the method. You can alter the title by adding an attribute to the method: By default, Django protects you from HTML in strings in case the string is from user input. To have the display include HTML, you must use : now has a custom title, , and is formatted to be in italics: Unfortunately, Django hasn’t yet added f-string support for , so you’re stuck with syntax.\n\nIt’s quite common for objects to reference other objects through the use of foreign keys. You can point at a method that returns an HTML link. Inside , modify the class as follows: This code causes the change list to have three columns:\n• The course name\n• The year in which the course was offered\n• A link displaying the number of students in the course You can see the resulting change in the following screenshot: When you click 2 Students, it takes you to the change list page with a filter applied. The filtered page shows only those students in , Buffy and Willow. Xander didn’t make it to university. The example code uses to look up a URL in the Django admin. You can look up any admin page using the following naming convention: This name structure breaks down as follows:\n• is the name of the app. For the example above, you use to get a reference to the change list page of the object in the app. Here are the available URL names: You can filter the change list page by adding a query string to the URL. This query string modifies the used to populate the page. In the example above, the query string filters the list to only those objects that have a matching value in . These filters support field lookups using double underscores ( ). You can access attributes of related objects as well as use filter modifiers like and . You can find the full details on what you can accomplish with the attribute in the Django admin documentation.\n\nIn addition to filtering data on the change list through the calling URL, you can also filter with a built-in widget. Add the attribute to the object in : The will display a new section on the page with a list of links. In this case, the links filter the page by year. The filter list is automatically populated with the values used by the objects in the database: Clicking a year on the right-hand side will change the list to include only objects with that value. You can also filter based on the attributes of related objects using the field lookup syntax. For example, you could filter objects by , showing the objects for only a certain year of courses. If you’re looking for more control over your filtering, then you can even create filter objects that specify the lookup attributes and the corresponding .\n\nFilters aren’t the only way to reduce the amount of data on the screen. Django admin also supports searching through the option, which adds a search box to the screen. You set it with a tuple containing the names of fields to be used for constructing a search query in the database. Anything the user types in the search box is used in an clause of the fields filtering the . By default, each search parameter is surrounded by signs, meaning if you search for , then any word with an inside will appear in the results. You can be more precise by specifying a modifier on the search field. Edit the in as follows: In the above code, searching is based on last name. The modifier restricts the search to last names that begin with the search parameter. Searching on provides the following results: Whenever a search is performed on a change list page, the Django admin calls your object’s method. It returns a with the search results. You can fine-tune searches by overloading the method and changing the . More details can be found in the documentation.\n\nYou can customize more than just the change list page. The screens used to add or change an object are based on a . Django automatically generates the form based on the model being edited. You can control which fields are included, as well as their order, by editing the option. Modify your object, adding a attribute: The Add and Change pages for now put the attribute before the attribute even though the model itself specifies the other way around: is responsible for creating the for your object. You can override this method to change the form. Add the following method to : \"First Name (Humans only!):\" Now, when the Add or Change page is displayed, the label of the field will be customized. Changing the label might not be sufficient to prevent vampires from registering as students. If you don’t like the that the Django admin created for you, then you can use the attribute to register a custom form. Make the following additions and changes to : The above code enforces additional validation on the Add and Change pages. objects have a rich validation mechanism. In this case, the field is being checked against the name . A prevents students with this name from registering: By changing or replacing the object, you can fully control the appearance and validation of the pages you use to add or change object pages.\n\nThe Django developers implemented the admin using the Django template mechanism. This made their job a little bit easier, but it also benefits you by allowing you to override the templates. You can fully customize the admin by changing the templates used to render pages. You can see all the templates used in the admin by looking inside the Django package in your virtual environment: The Django template engine has a defined order for loading templates. When it loads a template, it uses the first template that matches the name. You can override admin templates by using the same directory structure and file names. The admin templates come in two directories:\n• is for the model object pages.\n• is for password changes and logging in and out. To customize the logout page, you need to override the right file. The relative path leading to the file has to be the same as the one being overridden. The file you’re interested in is . Start by creating the directory in the project: Now tell Django about your new template directory inside your file. Look for the directive and add the folder to the list: # Add the templates directory to the DIR option: The template engine searches directories in the option before the application directories, so anything with the same name as an admin template will be loaded instead. To see this in action, copy the file into your directory, then modify it: You are now leaving Sunnydale You’ve now customized the logout page. If you click LOG OUT, then you’ll see the customized message: Django admin templates are deeply nested and not very intuitive, but you have full control over their presentation if you need it. Some packages, including Grappelli and Django Admin Bootstrap, have fully replaced the Django admin templates to change their appearance. Django Admin Bootstrap is not yet compatible with Django 3, and Grappelli only recently added support, so it may still have some issues. That being said, if you want to see the power of overriding admin templates, then check out those projects!"
    },
    {
        "link": "https://freecodecamp.org/news/how-to-set-up-a-django-admin-site",
        "document": "The Django admin site provides developers with a simple yet effective way to manage their models and build sustainable projects. It allows you to create, view, update, and remove records from your applications.\n\nIn this article, you will learn how to register your with your admin site, create your superuser account, log in and use your site, and customize your admin site.\n\nAs a developer, if you are thinking about building a Django project or are in the process of building a project, the Django admin site creation is the next step after your Django model creation.\n\nHow to Register Your Models\n\nRegister your models in your file. By registering your you enable Django to generate forms based on the information in the model. It also serves as a form of documentation for your project and allows you to manage data securely.\n\nBelow is how to register your :\n\nThe first line imports . It enables the Django admin for your project and allows you to access it at a specific URL (/admin/) in your web browser.\n\nThe second line of the code imports your , while the last four lines of code, call on the to register each of them.\n\nYour can be more or less, depending on how complex your project is.\n\nA superuser account allows you to log into the admin site, create records, and manage objects.\n\nThe following command will create a superuser account with full access to the admin site and all needed permissions:\n\nYou will receive a prompt to enter a username, email, and password. Once this command completes, you will have have a superuser account, and you can restart your development server and test your login details using the following command:\n\nWhen running these commands, ensure you are in the same directory as .\n\nHow to Log in and Use Your Site\n\nTo log into your site, open your URL( or http://127.0.0.1:8000/admin) in your browser. You will see a page that looks like this:\n\nEnter your superuser account details, click login, and you will see a new page that looks like this:\n\nThe new page above is the Django admin site that displays all registered models.\n\nClick the add link next to each model to start creating your records.\n\nAfter adding a record to a model, click on , , or to save your record. Your screen should look like the one below:\n\nThe 3 save options on the Django admin site.\n\nThe screenshots above only show examples of what the Django admin site looks like. According to your project's needs, your models and fields may look different from the examples in this article.\n\nHow to Customize your Admin Site\n\nDjango does a great job creating your admin site with the information from the models you register. It also allows you to customize your admin interface to suit your project's needs.\n\nThe following sections will show you how to carry out these customizations.\n\nA class represents a model in your admin interface. By registering this class, you can customize the behavior of a specific model in your admin interface. It also keeps your codebase organized and makes it easier to maintain:\n\nThe code snippet above defines and registers an empty admin class for the Author model.\n\nAlways comment out your original registration before registering a class.\n\nHow to Customize your List View\n\nConsidering the model above, if you have multiple authors or need to display additional information about your authors, the method allows you to customize your list view.\n\nBelow is an example of how to customize your interface using the method:\n\nThe code snippet above shows the class and a tuple of the field names you want to display in the list, in the order that you require them.\n\nYou must always specify these fields in your Django model ( file). Otherwise, they will not be displayed.\n\nThe result should be an interface like the one below:\n\nThe result of the list view customization.\n\nUsing this method, you can customize the list view of any model to suit he needs of your project.\n\nHow to Customize the Detail View\n\nDjango lays out the detail views vertically by default, in the order they are defined in the model. But you can change this to suit your needs, and decide which fields you want displayed or excluded.\n\nYou can do this by adding the attribute to your admin class. For example:\n\nThe field attribute in the code snippet above changes the order of your fields. now comes before . Fields display vertically by default, but by grouping them in a tuple (in the dates field) they now display horizontally.\n\nThe author detail view should now appear like this:\n\nThe result of the detail view customization.\n\nAlso, you can use the attribute to exclude/remove fields from the form.\n\nSetting up your Django admin site is important for managing your models effectively in your Django project. Knowing how to use and customize your Django interface improves the quality and maintainability of your project.\n\nThis article describes how to set up your admin site and how you can customize it to suit your project's needs. Happy Coding!"
    }
]