[
    {
        "link": "https://developer.android.com/training/data-storage/sqlite",
        "document": "Stay organized with collections Save and categorize content based on your preferences.\n\nSaving data to a database is ideal for repeating or structured data, such as contact information. This page assumes that you are familiar with SQL databases in general and helps you get started with SQLite databases on Android. The APIs you'll need to use a database on Android are available in the package.\n\nCaution: Although these APIs are powerful, they are fairly low-level and require a great deal of time and effort to use:\n• There is no compile-time verification of raw SQL queries. As your data graph changes, you need to update the affected SQL queries manually. This process can be time consuming and error prone.\n• You need to use lots of boilerplate code to convert between SQL queries and data objects. For these reasons, we highly recommended using the Room Persistence Library as an abstraction layer for accessing information in your app's SQLite databases.\n\nOne of the main principles of SQL databases is the schema: a formal declaration of how the database is organized. The schema is reflected in the SQL statements that you use to create your database. You may find it helpful to create a companion class, known as a contract class, which explicitly specifies the layout of your schema in a systematic and self-documenting way.\n\nA contract class is a container for constants that define names for URIs, tables, and columns. The contract class allows you to use the same constants across all the other classes in the same package. This lets you change a column name in one place and have it propagate throughout your code.\n\nA good way to organize a contract class is to put definitions that are global to your whole database in the root level of the class. Then create an inner class for each table. Each inner class enumerates the corresponding table's columns.\n\nNote: By implementing the interface, your inner class can inherit a primary key field called that some Android classes such as expect it to have. It's not required, but this can help your database work harmoniously with the Android framework.\n\nFor example, the following contract defines the table name and column names for a single table representing an RSS feed:\n\nOnce you have defined how your database looks, you should implement methods that create and maintain the database and tables. Here are some typical statements that create and delete a table:\n\nJust like files that you save on the device's internal storage, Android stores your database in your app's private folder. Your data is secure, because by default this area is not accessible to other apps or the user.\n\nThe class contains a useful set of APIs for managing your database. When you use this class to obtain references to your database, the system performs the potentially long-running operations of creating and updating the database only when needed and not during app startup. All you need to do is call or .\n\nNote: Because they can be long-running, be sure that you call or in a background thread. See Threading on Android for more information.\n\nTo use , create a subclass that overrides the and callback methods. You may also want to implement the or methods, but they are not required.\n\nFor example, here's an implementation of that uses some of the commands shown above:\n\nTo access your database, instantiate your subclass of :\n\nInsert data into the database by passing a object to the method:\n\nThe first argument for is simply the table name.\n\nThe second argument tells the framework what to do in the event that the is empty (i.e., you did not any values). If you specify the name of a column, the framework inserts a row and sets the value of that column to null. If you specify , like in this code sample, the framework does not insert a row when there are no values.\n\nThe methods returns the ID for the newly created row, or it will return -1 if there was an error inserting the data. This can happen if you have a conflict with pre-existing data in the database.\n\nTo read from a database, use the method, passing it your selection criteria and desired columns. The method combines elements of and , except the column list defines the data you want to fetch (the \"projection\"), rather than the data to insert. The results of the query are returned to you in a object.\n\nThe third and fourth arguments ( and ) are combined to create a WHERE clause. Because the arguments are provided separately from the selection query, they are escaped before being combined. This makes your selection statements immune to SQL injection. For more detail about all arguments, see the reference.\n\nTo look at a row in the cursor, use one of the move methods, which you must always call before you begin reading values. Since the cursor starts at position -1, calling places the \"read position\" on the first entry in the results and returns whether or not the cursor is already past the last entry in the result set. For each row, you can read a column's value by calling one of the get methods, such as or . For each of the get methods, you must pass the index position of the column you desire, which you can get by calling or . When finished iterating through results, call on the cursor to release its resources. For example, the following shows how to get all the item IDs stored in a cursor and add them to a list:\n\nTo delete rows from a table, you need to provide selection criteria that identify the rows to the method. The mechanism works the same as the selection arguments to the method. It divides the selection specification into a selection clause and selection arguments. The clause defines the columns to look at, and also allows you to combine column tests. The arguments are values to test against that are bound into the clause. Because the result isn't handled the same as a regular SQL statement, it is immune to SQL injection.\n\nThe return value for the method indicates the number of rows that were deleted from the database.\n\nWhen you need to modify a subset of your database values, use the method.\n\nUpdating the table combines the syntax of with the syntax of .\n\nThe return value of the method is the number of rows affected in the database.\n\nSince and are expensive to call when the database is closed, you should leave your database connection open for as long as you possibly need to access it. Typically, it is optimal to close the database in the of the calling Activity.\n\nThe Android SDK includes a shell tool that allows you to browse table contents, run SQL commands, and perform other useful functions on SQLite databases. For more information, see how to how to issue shell commands."
    },
    {
        "link": "https://developer.android.com/guide/components/fundamentals",
        "document": "Android apps can be written using Kotlin, the Java programming language, and C++ languages. The Android SDK tools compile your code along with any data and resource files into an APK or an Android App Bundle.\n\nAn Android package, which is an archive file with an suffix, contains the contents of an Android app required at runtime, and it is the file that Android-powered devices use to install the app.\n\nAn Android App Bundle, which is an archive file with an suffix, contains the contents of an Android app project, including some additional metadata that isn't required at runtime. An AAB is a publishing format and can't be installed on Android devices. It defers APK generation and signing to a later stage.\n\nWhen distributing your app through Google Play, for example, Google Play's servers generate optimized APKs that contain only the resources and code that are required by the particular device requesting installation of the app.\n\nEach Android app lives in its own security sandbox, protected by the following Android security features:\n• The Android operating system is a multi-user Linux system in which each app is a different user.\n• By default, the system assigns each app a unique Linux user ID, which is used only by the system and is unknown to the app. The system sets permissions for all the files in an app so that only the user ID assigned to that app can access them.\n• Each process has its own virtual machine (VM), so an app's code runs in isolation from other apps.\n• By default, every app runs in its own Linux process. The Android system starts the process when any of the app's components need to be executed, and then shuts down the process when it's no longer needed or when the system must recover memory for other apps.\n\nThe Android system implements the principle of least privilege. That is, each app, by default, has access only to the components that it requires to do its work and no more. This creates a very secure environment in which an app can't access parts of the system it is not given permission for.\n\nHowever, there are ways for an app to share data with other apps and for an app to access system services:\n• It's possible to arrange for two apps to share the same Linux user ID, in which case they are able to access each other's files. To conserve system resources, apps with the same user ID can also arrange to run in the same Linux process and share the same VM. The apps must also be signed with the same certificate.\n• An app can request permission to access device data such as the device's location, camera, and Bluetooth connection. The user has to explicitly grant these permissions. For more information about permissions, see Permissions on Android.\n\nThe rest of this document introduces the following concepts:\n• The core framework components that define your app.\n• The manifest file in which you declare the components and the required device features for your app.\n• Resources that are separate from the app code and that let your app gracefully optimize its behavior for a variety of device configurations.\n\nApp components are the essential building blocks of an Android app. Each component is an entry point through which the system or a user can enter your app. Some components depend on others.\n\nThere are four types of app components:\n\nEach type serves a distinct purpose and has a distinct lifecycle that defines how a component is created and destroyed. The following sections describe the four types of app components.\n\nAn activity is the entry point for interacting with the user. It represents a single screen with a user interface. For example, an email app might have one activity that shows a list of new emails, another activity to compose an email, and another activity for reading emails. Although the activities work together to form a cohesive user experience in the email app, each one is independent of the others. A different app can start any one of these activities if the email app allows it. For example, a camera app might start the activity in the email app for composing a new email to let the user share a picture. An activity facilitates the following key interactions between system and app:\n• Keeping track of what the user currently cares about—what is on-screen—so that the system keeps running the process that is hosting the activity.\n• Knowing which previously used processes contain stopped activities the user might return to and prioritizing those processes more highly to keep them available.\n• Helping the app handle having its process killed so the user can return to activities with their previous state restored.\n• Providing a way for apps to implement user flows between each other, and for the system to coordinate these flows. The primary example of this is sharing. You implement an activity as a subclass of the class. For more information about the class, see Introduction to activities. A service is a general-purpose entry point for keeping an app running in the background for all kinds of reasons. It is a component that runs in the background to perform long-running operations or to perform work for remote processes. A service does not provide a user interface. For example, a service might play music in the background while the user is in a different app, or it might fetch data over the network without blocking user interaction with an activity. Another component, such as an activity, can start the service and let it run or bind to it to interact with it. There are two types of services that tell the system how to manage an app: started services and bound services. Started services tell the system to keep them running until their work is completed. This might be to sync some data in the background or play music even after the user leaves the app. Syncing data in the background or playing music represent different types of started services, which the system handles differently:\n• Music playback is something the user is directly aware of, and the app communicates this to the system by indicating that it wants to be in the foreground, with a notification to tell the user that it is running. In this case, the system prioritizes keeping that service's process running, because the user has a bad experience if it goes away.\n• A regular background service is not something the user is directly aware of, so the system has more freedom in managing its process. It might let it be killed, restarting the service sometime later, if it needs RAM for things that are of more immediate concern to the user. Bound services run because some other app (or the system) has said that it wants to make use of the service. A bound service provides an API to another process, and the system knows there is a dependency between these processes. So if process A is bound to a service in process B, the system knows that it needs to keep process B and its service running for A. Further, if process A is something the user cares about, then it knows to treat process B as something the user also cares about. Because of their flexibility, services are useful building blocks for all kinds of higher-level system concepts. Live wallpapers, notification listeners, screen savers, input methods, accessibility services, and many other core system features are all built as services that applications implement and the system binds to when they run. A service is implemented as a subclass of . For more information about the class, see the Services overview. Note: If your app targets Android 5.0 (API level 21) or higher, use the class to schedule actions. JobScheduler has the advantage of conserving battery by optimally scheduling jobs to reduce power consumption and by working with the Doze API. For more information about using this class, see the reference documentation. A broadcast receiver is a component that lets the system deliver events to the app outside of a regular user flow so the app can respond to system-wide broadcast announcements. Because broadcast receivers are another well-defined entry into the app, the system can deliver broadcasts even to apps that aren't currently running. So, for example, an app can schedule an alarm to post a notification to tell the user about an upcoming event. Because the alarm is delivered to a in the app, there is no need for the app to remain running until the alarm goes off. Many broadcasts originate from the system, like a broadcast announcing that the screen is turned off, the battery is low, or a picture is captured. Apps can also initiate broadcasts, such as to let other apps know that some data is downloaded to the device and is available for them to use. Although broadcast receivers don't display a user interface, they can create a status bar notification to alert the user when a broadcast event occurs. More commonly, though, a broadcast receiver is just a gateway to other components and is intended to do a very minimal amount of work. For instance, a broadcast receiver might schedule a to perform some work based on an event using . Broadcast receivers often involve apps interacting with each other, so it's important to be aware of the security implications when setting them up. A broadcast receiver is implemented as a subclass of , and each broadcast is delivered as an object. For more information, see the class. A content provider manages a shared set of app data that you can store in the file system, in a SQLite database, on the web, or on any other persistent storage location that your app can access. Through the content provider, other apps can query or modify the data, if the content provider permits it. For example, the Android system provides a content provider that manages the user's contact information. Any app with the proper permissions can query the content provider, such as using , to read and write information about a particular person. It is tempting to think of a content provider as an abstraction on a database, because there is a lot of API and support built in to them for that common case. However, they have a different core purpose from a system-design perspective. To the system, a content provider is an entry point into an app for publishing named data items, identified by a URI scheme. Thus, an app can decide how it wants to map the data it contains to a URI namespace, handing out those URIs to other entities which can in turn use them to access the data. There are a few particular things this lets the system do in managing an app:\n• Assigning a URI doesn't require that the app remain running, so URIs can persist after their owning apps exit. The system only needs to make sure that an owning app is still running when it retrieves the app's data from the corresponding URI.\n• These URIs also provide an important fine-grained security model. For example, an app can place the URI for an image it has on the clipboard, but leave its content provider locked up so that other apps cannot freely access it. When a second app attempts to access that URI on the clipboard, the system can let that app access the data using a temporary URI permission grant so that it accesses the data only behind that URI, and nothing else in the second app. Content providers are also useful for reading and writing data that is private to your app and not shared. A content provider is implemented as a subclass of and must implement a standard set of APIs that enable other apps to perform transactions. For more information, see the Content providers developer guide.\n\nA unique aspect of the Android system design is that any app can start another app’s component. For example, if you want the user to capture a photo with the device camera, there's probably another app that does that—and your app can use it instead of developing an activity to capture a photo yourself. You don't need to incorporate or even link to the code from the camera app. Instead, you can start the activity in the camera app that captures a photo. When complete, the photo is even returned to your app so you can use it. To the user, it seems as if the camera is actually a part of your app.\n\nWhen the system starts a component, it starts the process for that app, if it's not already running, and instantiates the classes needed for the component. For example, if your app starts the activity in the camera app that captures a photo, that activity runs in the process that belongs to the camera app, not in your app's process. Therefore, unlike apps on most other systems, Android apps don't have a single entry point: there's no function.\n\nBecause the system runs each app in a separate process with file permissions that restrict access to other apps, your app can't directly activate a component from another app. However, the Android system can. To activate a component in another app, you deliver a message to the system that specifies your intent to start a particular component. The system then activates the component for you.\n\nAn asynchronous message called an intent activates three of the four component types: activities, services, and broadcast receivers. Intents bind individual components to each other at runtime. You can think of them as the messengers that request an action from other components, whether the component belongs to your app or another.\n\nAn intent is created with an object, which defines a message to activate either a specific component (an explicit intent) or a specific type of component (an implicit intent).\n\nFor activities and services, an intent defines the action to perform, such as to view or send something, and might specify the URI of the data to act on, among other things that the component being started might need to know.\n\nFor example, an intent might convey a request for an activity to show an image or to open a web page. In some cases, you can start an activity to receive a result, in which case the activity also returns the result in an . You can also issue an intent to let the user pick a personal contact and have it returned to you. The return intent includes a URI pointing to the chosen contact.\n\nFor broadcast receivers, the intent defines the broadcast announcement. For example, a broadcast to indicate that the device battery is low includes only a known action string that indicates battery is low.\n\nUnlike activities, services, and broadcast receivers, content providers are activated when targeted by a request from a . The content resolver handles all direct transactions with the content provider, and the component performing transactions with the provider calls methods on the object. This leaves a layer of abstraction for security reasons between the content provider and the component requesting information.\n\nThere are separate methods for activating each type of component:\n• You can start an activity or give it something new to do by passing an to or, when you want the activity to return a result, .\n• On Android 5.0 (API level 21) and higher, you can use the class to schedule actions. For earlier Android versions, you can start a service or give new instructions to an ongoing service by passing an to . You can bind to the service by passing an to .\n• You can initiate a broadcast by passing an to methods such as or .\n• You can perform a query to a content provider by calling on a .\n\nFor more information about using intents, see the Intents and Intent Filters document. The following documents provide more information about activating specific components: Introduction to activities, Services overview, , and Content providers.\n\nBefore the Android system can start an app component, the system must know that the component exists by reading the app's manifest file, . Your app declares all its components in this file, which is at the root of the app project directory.\n\nThe manifest does a number of things in addition to declaring the app's components, such as the following:\n• Identifies any user permissions the app requires, such as internet access or read-access to the user's contacts.\n• Declares the minimum API level required by the app, based on which APIs the app uses.\n• Declares hardware and software features used or required by the app, such as a camera, Bluetooth services, or a multitouch screen.\n• Declares API libraries the app needs to be linked against (other than the Android framework APIs), such as the Google Maps library.\n\nThe primary task of the manifest is to inform the system about the app's components. For example, a manifest file can declare an activity as follows:\n\nIn the element, the attribute points to resources for an icon that identifies the app.\n\nIn the element, the attribute specifies the fully qualified class name of the subclass, and the attribute specifies a string to use as the user-visible label for the activity.\n\nYou must declare all app components using the following elements:\n\nActivities, services, and content providers that you include in your source but don't declare in the manifest aren't visible to the system and, consequently, can never run. However, broadcast receivers can either be declared in the manifest or created dynamically in code as objects and registered with the system by calling .\n\nFor more about how to structure the manifest file for your app, see the App manifest overview.\n\nAs discussed in the Activate components section, you can use an to start activities, services, and broadcast receivers. You do this by explicitly naming the target component, using the component class name, in the intent. You can also use an implicit intent, which describes the type of action to perform and, optionally, the data you want to perform the action on. An implicit intent lets the system find a component on the device that can perform the action and start it. If there are multiple components that can perform the action described by the intent, the user selects which one to use.\n\nCaution: If you use an intent to start a , make sure that your app is secure by using an explicit intent. Using an implicit intent to start a service is a security hazard, because you can't be certain what service responds to the intent and the user can't see which service starts. Beginning with Android 5.0 (API level 21), the system throws an exception if you call with an implicit intent. Don't declare intent filters for your services.\n\nThe system identifies the components that can respond to an intent by comparing the intent received to the intent filters provided in the manifest file of other apps on the device.\n\nWhen you declare an activity in your app's manifest, you can optionally include intent filters that declare the capabilities of the activity so it can respond to intents from other apps. You do this by adding an element as a child of the component's declaration element.\n\nFor example, if you build an email app with an activity for composing a new email, you can declare an intent filter to respond to \"send\" intents to send a new email, as shown in the following example:\n\nIf another app creates an intent with the action and passes it to , the system might start your activity so the user can draft and send an email.\n\nFor more about creating intent filters, see the Intents and Intent Filters document.\n\nThere are a variety of devices powered by Android, and not all of them provide the same features and capabilities. To prevent your app from being installed on devices that lack features needed by your app, it's important that you clearly define a profile for the types of devices your app supports by declaring device and software requirements in your manifest file.\n\nMost of these declarations are informational only. The system doesn't read them, but external services such as Google Play do read them to provide filtering for users when they search for apps from their device.\n\nFor example, suppose your app requires a camera and uses APIs introduced in Android 8.0 (API level 26). You must declare these requirements. The values for and are set in your app module's file:\n\nNote: Don't set and directly in the manifest file, since they are overwritten by Gradle during the build process. For more information, see Specify API level requirements.\n\nYou declare the camera feature in your app's manifest file:\n\nWith the declarations shown in these examples, devices that do not have a camera or have an Android version lower than 8.0 can't install your app from Google Play. However, you can also declare that your app uses the camera, but does not require it. To do so, you set the attribute to , check at runtime whether the device has a camera, and disable any camera features as needed.\n\nMore information about how you can manage your app's compatibility with different devices is provided in the Device compatibility overview.\n\nAn Android app is composed of more than just code. It requires resources that are separate from the source code, such as images, audio files, and anything relating to the visual presentation of the app. For example, you can define animations, menus, styles, colors, and the layout of activity user interfaces with XML files.\n\nUsing app resources makes it easy to update various characteristics of your app without modifying code. Providing sets of alternative resources lets you optimize your app for a variety of device configurations, such as different languages and screen sizes.\n\nFor every resource that you include in your Android project, the SDK build tools define a unique integer ID, which you can use to reference the resource from your app code or from other resources defined in XML. For example, if your app contains an image file named (saved in the directory), the SDK tools generate a resource ID named . This ID maps to an app-specific integer, which you can use to reference the image and insert it in your user interface.\n\nOne of the most important aspects of providing resources separate from your source code is the ability to provide alternative resources for different device configurations.\n\nFor example, by defining UI strings in XML, you can translate the strings into other languages and save those strings in separate files. Then Android applies the appropriate language strings to your UI based on a language qualifier that you append to the resource directory's name, such as for French string values, and the user's language setting.\n\nAndroid supports many qualifiers for your alternative resources. The qualifier is a short string that you include in the name of your resource directories to define the device configuration those resources are used for.\n\nFor example, you can create different layouts for your activities depending on the device's screen orientation and size. When the device screen is in portrait (tall) orientation, you might want a layout with buttons arranged vertically, but when the screen is in landscape (wide) orientation, you might want the buttons aligned horizontally. To change the layout depending on the orientation, you can define two layouts and apply the appropriate qualifier to each layout's directory name. Then, the system automatically applies the appropriate layout depending on the current device orientation.\n\nFor more information about the different kinds of resources you can include in your application and how to create alternative resources for different device configurations, read the App resources overview. To learn more about best practices and designing robust, production-quality apps, see the Guide to app architecture.\n\nTo learn Android development using videos and code tutorials, see the Developing Android Apps with Kotlin Udacity course."
    },
    {
        "link": "https://stackoverflow.com/questions/15748558/android-developer-documentation-download",
        "document": "You can get it under $ANDROID_SDK/docs/. If it is not already there download it via the \"Documentation for Android SDK\" option.\n\nAlternatively you can download the source tree and link it up with your IDE."
    },
    {
        "link": "https://quora.com/Can-you-use-SQLite-from-an-Android-app-written-in-Java-without-learning-SQLite-directly",
        "document": "Something went wrong. Wait a moment and try again."
    },
    {
        "link": "https://geeksforgeeks.org/android-tutorial",
        "document": "In this Android Tutorial, we cover both basic and advanced concepts. So whether you are a fresher (graduate) or an experienced candidate with several years of Android Development experience, you can follow this Android tutorial to kick-start your journey in Android app development. Our Android Tutorial is designed to take you from zero to hero level. Beginners can follow this Android tutorial in a sequential order to grasp the basics of Android development.\n\nAndroid is the best-selling open-source Linux-based operating system among various mobile platforms across the globe. Hundreds of millions of mobile devices are powered by Android in more than 190 countries of the world. It conquered around 75% of the global market share by the end of 2020, and this trend is growing bigger every other day.\n• Object-Oriented Programming (OOP): Know about classes, objects, inheritance, polymorphism, and encapsulation.\n• None Best Way to Become Android Developer – A Complete Roadmap\n• None Java vs Kotlin in Android with Examples\n• None Download and Install Java Development Kit (JDK) on Windows, Mac, and Linux\n• None Guide to Install and Set up Android Studio\n• None Guide to Install and Setup IntelliJ IDEA for Android App Development\n• None Guide to Install and Setup Visual Studio for Android App Development\n• None How to Run the Android App on a Real Device?\n• None Different Types of Activities in Android Studio\n• None How to Create/Start a New Project in Android Studio?\n• None How to Clone Android Project from GitHub in Android Studio?\n• None How to Install Genymotion Emulator and Add its Plugin to Android Studio?\n• None How to Convert Kotlin Code to Java Code in Android Studio?\n• None How to Convert Java Code to Kotlin Code in Android Studio?\n• None How to Upload Project on GitHub from Android Studio?\n• None How to Request Permissions in Android Application?\n• None How to Create Classes in Android Studio?\n• None How to Install and Uninstall Plugins in Android Studio?\n• None How to Generate Signed Apk in Android Studio?\n• None How to Generate Unsigned (Shareable) Apk in Android Studio?\n• None How to Generate SHA1, MD5, and SHA-256 Keys in Android Studio?\n• None Services in Android with Example\n• None Content Providers in Android with Example\n• None Broadcast Receiver in Android With Example\n• None What is Context in Android?\n• None Bundle in Android with Example\n• None Activity State Changes In Android with Example\n• None How to Restore Data on Configuration Changed in Android using Bundles?\n• None Deep Linking in Android with Example\n• None LinearLayout and its Important Attributes with Examples in Android\n• None Align the Navigation Drawer and its Elements towards the Left or Right of the Screen\n• None How to Create Landscape Layout in Android Studio?\n• None Absolute Layout in Android with Example\n• None Difference Between LinearLayout and RelativeLayout in Android\n• TextView\n• None TextView widget in Android using Java with Examples\n• None Working With the TextView in Android\n• None What is the Difference Between “px”, “dip”, “dp” and “sp” in Android?\n• None How to Add a TextView with Rounded Corner in Android?\n• EditText\n• None EditText widget in Android using Java with Examples\n• None Working With the EditText in Android\n• None How to add Mask to an EditText in Android\n• ImageView\n• None How to create a Circular image view in Android without using any library?\n• None How to Create Circular ImageView in Android using CardView?\n• None How to Create a CircularImageView in Android using hdodenhof Library?\n• ListView\n• None Android Listview in Java with Example\n• ScrollView\n• None NestedScrollView in Android with Example\n• CardView\n• None CardView in Android With Example\n• None How to create an Expandable CardView in Android\n• None CardView using RecyclerView in Android with Example\n• GridView\n• None GridView in Android with Example\n• None GridView Using Custom ArrayAdapter in Android with Example\n• None GridView Using BaseAdapter in Android with Example\n• None Staggered GridView in Android with Example\n• Other Views\n• None Scratch Card View in Android with Example\n• None GalleryView in Android with Example\n• None TreeView in Android with Example\n• None ViewAnimator in Android with Example\n• None ViewSwitcher in Android with Example\n• None ViewStub in Android with Example\n• None SlidingDrawer in Android with Example\n• None How to add Radio Buttons in an Android Application?\n• None How to add a Toggle Button in an Android Application\n• None How to use CheckBox on Android\n• None Floating Action Button (FAB) in Android with Example\n• None Theming Floating Action Buttons in Android with Example\n• None How to create customized Buttons in Android with different shapes and colors\n• None What is Intent in Android?\n• None How to send data from one activity to the second activity\n• None How to open the dialer in Android through Intent?\n• None How to open Camera through Intent and display captured image\n• None How to send an Email from your Android App?\n• None How to make a phone call from your Android App?\n• None How to share a captured Image to another App on Android\n• None How to send messages on WhatsApp on Android\n• None How to send messages on WhatsApp on Android using Kotlin\n• None What is Toast and How to use it with Examples\n• None How to add a custom-styled Toast in Android\n• None How to add a custom-styled Toast in Android using Kotlin\n• None RecyclerView in Android with Example\n• None How to create a nested RecyclerView in Android\n• None How to Create RecyclerView with Multiple ViewType in Android?\n• None RecyclerView using ListView in Android With Example\n• None Pull to Refresh with RecyclerView in Android with Example\n• None RecyclerView as Staggered Grid in Android With Example\n• None RecyclerView using GridLayoutManager in Android With Example\n• None How to add a Bullet list in a RecyclerView in Android?\n• None How to insert Slide From Bottom animation in RecyclerView in Android\n• None How to Access any Component Outside RecyclerView from RecyclerView in Android?\n• None How to Improve RecyclerView Scrolling Performance in Android?\n• None How to Build a Facebook-Like Custom RecyclerView in Android?\n• None How to Build an Instagram-Like Custom RecyclerView in Android?\n• None How to Create a New Fragment in Android Studio?\n• None How to create Swipe Navigation in an Android App\n• None ViewPager Using Fragments in Android with Example\n• None TabHost in Android with Example\n• None ArrayAdapter in Android with Example\n• None SimpleAdapter in Android with Example\n• None SimpleExpandableListAdapter in Android with Example\n• None AdapterViewFlipper in Android with Example\n• None BaseExpandableListAdapter in Android with Example\n• None CustomArrayAdapter in Android with Example\n• None Custom SimpleAdapter in Android with Example\n• Spinner\n• None Spinner in Android with Example\n• None How to add Custom Spinner in android?\n• Alert Dialog\n• None Alert Dialog Box and How to create it\n• None How to create a custom AlertDialog in Android\n• None How to Create AlertDialog Box Using SweetAlert Dialog Library?\n• None How to Change the Position of AlertDialog in Android?\n• Switcher\n• None How to add Custom Switch using IconSwitch Library in android?\n• Android Notification\n• None Notifications in Android with Example\n• None How to Push Notification in Android?\n• None Create an Expandable Notification Containing Some Text in Android\n• None Create an Expandable Notification Containing a Picture in Android\n• Android Menu\n• None How to implement Options Menu in Android\n• None Context Menu in Android with Example\n• None Popup Menu in Android With Example\n• None How to Use Picasso Image Loader Library in Android?\n• None How to Use Glide Image Loader Library in Android Apps?\n• None Fresco Image Loading Library in Android with Example\n• None How to Use Universal Image Loader Library in Android?\n• None How to Use COIL Image Loader Library in Android Apps?\n• None How to display an Analog clock and a Digital clock\n• None PulseCountDown in Android with Example\n• None CountDownTimer in Android with Example\n• None Theming of Material Design EditText in Android with Example\n• None How to Use Material Text Input Layout in Android?\n• None Material Design Buttons in Android with Example\n• None More Functionalities of Material Design Date Picker in Android\n• None Theming Material Design Snackbars in Android with Example\n• None Material Design Components Chips in Android with Example\n• None What Are the Different Types of Bars Available on Android?\n• None ActionBar in Android with Example\n• None ToolBar in Android with Example\n• None Difference Between ActionBar and Toolbar in Android\n• None Difference Between AppBar, ActionBar, and Toolbar in Android\n• None How to Generate API Key for Using Google Maps in Android?\n• None How to Add Custom Marker to Google Maps in Android?\n• None How to Add Multiple Markers on Google Maps in Android?\n• None How to Use Different Types of Google Maps in Android?\n• None How to Add SearchView in Google Maps on Android?\n• None How to Add OnClickListner to Marker on Google Maps in Android?\n• None How to Draw Polyline in Google Maps in Android?\n• None How to Calculate Distance Between two Locations in Android?\n• None How to Draw a Track on Google Maps in Android?\n• None How to Add Dynamic Markers in Google Maps with Firebase Firstore?\n• None How to add a Pie Chart into an Android Application\n• None How to Create Group BarChart in Android?\n• None How to Create a BarChart in Android?\n• None Line Graph View in Android with Example\n• None How to Create a Scatter Chart in Android to Represent Data?\n• None Animation in Android with Example\n• None How to add fading TextView animation in Android\n• None How to add Lottie Animation in an Android app\n• None TextWriter in Android with Example\n• None LineAnimationView in Android with Example\n• None Implement Zoom In or Zoom Out in Android\n• None BungeeAnimation in Android with Example\n• None How to Create an Animated Splash Screen in Android?\n• None Interpolator in Android with Example\n• None How to Create Shine Effect in Android?\n• Firebase\n• None How to use Firebase UI Authentication Library in Android?\n• None How to Use Firebase Firestore as a Realtime Database in Android?\n• None How to Add Firebase Analytics to Android App in Android Studio?\n• None How to Create Dynamic Auto Image Slider in Android with Firebase?\n• None How to Create Dynamic WebView in Android with Firebase?\n• None How to Create Dynamic PDF Viewer in Android with Firebase?\n• Operation with Firebase Realtime Database\n• None Firebase RealTime Database with Operations in Android with Examples\n• None How to Save Data to the Firebase Realtime Database in Android?\n• None How to Retrieve Data from the Firebase Realtime Database in Android?\n• None How to Retrieve Data from Firebase Realtime Database in Android ListView?\n• None How to Create a Dynamic Audio Player in Android with Firebase Realtime Database?\n• None How to Create a Dynamic Video Player in Android with Firebase Realtime Database?\n• Operation with Firebase Firestore\n• None How to Create and Add Data to Firebase Firestore in Android?\n• None How to Read Data from Firebase Firestore in Android?\n• None How to Update Data in Firebase Firestore in Android?\n• None How to Delete Data from Firebase Firestore in Android?\n• None How to Create Dynamic Intro Slider in Android using Firebase Firestore?\n• None How to Create Dynamic Bottom Sheet Dialog in Android using Firebase Firestore?\n• None How to Display Dynamic AlertDialog in Android using Firebase Firestore?\n• None How to Create Dynamic ListView in Android using Firebase Firestore?\n• None How to Create Dynamic Horizontal RecyclerView in Android using Firebase Firestore?\n• None How to Create Dynamic GridView in Android using Firebase Firestore?\n• SQLite\n• None How to pre-populate database in Android using SQLite Database\n• Room DB\n• None How to Perform CRUD Operations in Room Database in Android?\n• Storage\n• None Internal Storage in Android with Example\n• None External Storage in Android with Example\n• None How to Save ArrayList to SharedPreferences in Android?\n• None How to Add Views Dynamically and Store Data in Arraylist in Android?\n• JSON and Volley\n• None How to Extract Data from JSON Array in Android using Volley Library?\n• Kotlin Coroutine\n• None runBlocking in Kotlin Coroutines with Example\n• None Getting Started with Paging Library v3 in Android using Kotlin Coroutines\n• JetPack Compose\n• None How to Create a New Project in Android Studio Canary Version with Jetpack Compose?\n• None MVC (Model View Controller) Architecture Pattern in Android with Example\n• None MVP (Model View Presenter) Architecture Pattern in Android with Example\n• None Difference Between MVC and MVVM Architecture Pattern in Android\n• None Difference Between MVC and MVP Architecture Pattern in Android\n• None Difference Between MVP and MVVM Architecture Pattern in Android\n• None Difference Between MVC, MVP, and MVVM Architecture Pattern in Android\n• None How to Publish Your Android App on Google Play Store?\n• None How to Publish Your Android App on Amazon App Store for Free?\n• None How to Integrate Google Admob Rewarded Video Ads in Android?\n• None How to Integrate Facebook Audience Network (FAN) Banner Ads in Android?\n• None How to Integrate Facebook Audience Network (FAN) Native Ads in Android?\n• None How to Integrate Facebook Audience Network (FAN) Interstitial Ads in Android?\n• None How to Integrate Facebook Audience Network (FAN) Rewarded Video Ads in Android?\n• None How to build a simple Calculator app using Android Studio?\n• None How to create a Stopwatch App using Android Studio\n• None How to Build a Simple Notes App in Android?\n• None How to Build Spin the Bottle Game Application in Android?\n• None How to Build a Tic Tac Toe Game in Android?\n• None How to create a Face Detection Android App using Machine Learning KIT on Firebase\n• None How to Build a Video Calling Android App with Jitsi Meet SDK?\n• None How to install Android Applications on Mobile Phones without USB Cables using Android Studio\n• None Tips to Prepare Your Android App For Launch in Google Play Store\n• None Top 7 Google Play Store Tips That You Should Try\n• None Top 8 Tips to Get Your Android App Featured on Google Play Store\n• None 8 Best Android Libraries That Every Android Developer Should Know\n• None How to Reduce APK Size in Android?\n• None 8 Must-Have Skills for Becoming an Android App Developer\n• None 7 Major Reasons Why Your Android App is Performing Slow – Must Read For Developers!\n• None How to create a Facebook login using an Android App?\n• None How to change Input Method Action Button in Android?\n• None How to Display the List of Sensors Present in an Android Device Programmatically?\n• None How to Check the Battery Level in Android Programmatically?\n• None How to Determine the Current Dock Type in Android?\n• None How to Check if the Android Device is in Dock State?\n• None How to Vibrate a Device Programmatically in Android?\n• None Input Events in Android with Example\n• None Session Management in Android with Example\n• None Include and Merge Tags in Android with Example\n• None How to Use Proguard to Reduce APK Size in Android?\n• None How to use R8 to Reduce APK Size in Android?\n• None Difference Between Proguard and R8 in Android\n• None Welcome to The Modern Android App Development\n\nIn conclusion, this Android tutorial serves as a comprehensive resource for beginners and experienced developers alike. By following the step-by-step instructions and leveraging the power of Android Studio, learners can acquire a solid foundation in Android app development. From understanding the fundamentals to exploring advanced concepts, this tutorial equips individuals with the necessary knowledge and skills to embark on their journey in the world of Android development. With continuous practice, staying updated with the latest trends, and actively engaging with the Android community, readers can unlock endless possibilities to create innovative and impactful mobile applications. Start your Android development journey today and embrace the opportunities that this dynamic platform offers.\n\nWhat is the salary of Android developer?\n\nWhich language is used for Android Development?\n\nWhat is XML file in Android?\n\nWhich language is best for app development?"
    },
    {
        "link": "https://stackoverflow.com/questions/44084253/best-way-to-perform-a-get-request-without-any-other-libraries",
        "document": "It looks like the Apache client is deprecated. Is there another way to make an http request without installing fancy libraries?\n\nShould I use the Apache client anyway? How do I import it? My Android Studio does not want to import HttpClient, HttpGet, ..."
    },
    {
        "link": "https://stackoverflow.com/questions/3505930/make-an-http-request-with-android",
        "document": "This is a very old answer. I definitely won't recommend Apache's client anymore. Instead use either:\n\nFirst of all, request a permission to access network, add following to your manifest:\n\nThen the easiest way is to use Apache http client bundled with Android:\n\nIf you want it to run on separate thread I'd recommend extending AsyncTask:\n\nYou then can make a request by:"
    },
    {
        "link": "https://reddit.com/r/androiddev/comments/3hr2w0/best_practices_for_http_requests",
        "document": "I have created a server that can handle http requests and want my android app to be able to GET, POST, etc. What are the best practices for handling requests?\n\nI have used AsyncTasks with all the HttpClient, HttpPost, HttpResponse, etc classes before. Performance seems to be fine.\n\nI have found about Android Volley and it seems to be specifically made for handling requests in the Android environment (?).\n\nShould I go ahead and start using Volley or are there better alternatives / community accepted practices for handling requests?"
    },
    {
        "link": "https://quora.com/Is-it-possible-to-create-an-API-without-using-any-framework-If-yes-then-how-can-we-do-that",
        "document": "Something went wrong. Wait a moment and try again."
    },
    {
        "link": "https://geeksforgeeks.org/how-to-make-an-http-request-with-android",
        "document": "How to Make an HTTP Request with Android?\n\nIn any Android Application, there is only so much a user can do without an internet connection. All modern Android Applications interact with resources available online or a backend-specific to the app. In this article, we will look at one of the ways through which we can retrieve and post resources online through HTTP Requests. We will use the Volley Library for handling HTTP requests.\n\nWe will be building a simple app in which we will use an ImageView for showing images of dogs and a button to get an image of another dog. Whenever the button will be pressed, a new HTTP request will be made for fetching a dog image and it will be displayed in the ImageView.\n\nTo create a new project in Android Studio please refer to How to Create/Start a New Project in Android Studio. The code for that has been given in both Java and Kotlin Programming Language for Android.\n\nNavigate to the Gradle Scripts > build.gradle(Module:app) and add the below dependency in the dependencies section.\n\n2. Glide Image Processing Library for Caching and Loading Images from the Image URL Retrieved from the HTTP Request.\n\nTo enable our app to make network calls, we need to tell the android system that our app requires the internet to work. We can do this by adding internet usage permission in the Android Manifest File.\n\nNavigate to app > manifests > AndroidManifest.xml and add the piece of code given below to the file.\n\nNavigate to the app > res > layout > activity_main.xml and add the below code to that file. Below is the code for the activity_main.xml file.\n\nGo to the MainActivity File and refer to the following code. Below is the code for the MainActivity File. Comments are added inside the code to understand the code in more detail."
    },
    {
        "link": "https://alexomegapy.com/post/network-requests-in-android-with-kotlin-and-jetpack-compose-a-guide-to-retrofit-volley-and-okhttp",
        "document": "The article compares three popular HTTP clients, Retrofit, Volley, and OkHttp for making network requests in Android apps developed with Kotlin and Jetpack Compose. It highlights the strengths and weaknesses of each client, providing guidance on selecting the best option based on project needs, and emphasizes the importance of asynchronous request handling and error management for a robust application.\n\nDeveloping an Android app frequently involves implementing some data fetching functionality and sending data to servers within the application (Coditive, 2024). This often means making network requests asynchronously and handling network errors. When using a combination of Kotlin and Jetpack Compose, several popular HTTP (Hypertext Transfer Protocol) clients can be used to perform network requests. This post explores three of the most commonly used clients: Retrofit, Volley, and OkHttp, and their strengths and weaknesses, and discusses when to use each one.\n\nThe most popular HTTP clients for making network requests while using Kotlin and Jetpack Compose are Retrofit, Volley, and OkHttp. HTTP client is a software that allows applications to communicate with web servers and APIs over the internet. It handles network requests, responses, and connections within the HTTP protocol system, including managing headers, methods (GET, POST, PUT, DELETE).\n\nRetrofit was developed by Square, and it is a type-safe HTTP client (Kostadinov, 2024). It is an abstraction that allows making API calls through declarative interfaces and handles parsing JSON into Java/Kotlin objects using libraries like Gson or Moshi. The table below lists and describes different aspects and features of Retrofit.\n\nVolley is another HTTP client developed by Google, it was designed in 2013 to make networking easier and faster in Android apps (Vartika02, 2025). It is well-suited for applications making frequent, small network requests. The table below lists and describes different aspects and features of Volley.\n\nOkHttp was developed by Square, it is a powerful and efficient HTTP client for Kotlin and Java, it was used as the foundation for both Retrofit and Volley (Gouda, 2024). It can also be used directly, providing more control on network requests than Retrofit and Volley. The table below lists and describes different aspects and features of OkHttp.\n\nEach client has its pros and its cons. When choosing the best client for the application developers need to consider factors such as the complexity of the project, the frequency of the requests, the size of the requests, and control vs. convenience to select the client that fits best with those needs. The table below compares the clients by key features and characteristics.\n\nNo matter what client is implemented within an application, network requests should never be executed on the main threads. Doing so can result in the app freezing and poor user experience. Best practices dictate the use of asynchronous mechanisms such as Kotlin Coroutines to avoid blocking the app's main thread. Kotlin Coroutine is a concurrency design pattern that simplifies code executing asynchronously (Android Developers, n.d.). The design provides several advantages including its lightweight nature, built-in cancellation support, and improved memory management.\n\nIn addition to implementing asynchronous mechanisms for executing network requests, it is essential to handle network errors properly to create an overall robust application and a good user experience. Strategies such as robust network exception handling, thorough testing, retry mechanisms, and user feedback should be implemented and designed when integrating network request mechanisms within the application.\n\nTo summarize, when developing an Android app with Kotlin and Jetpack Compose, common HTTP clients for integrating network requests are Retrofit, Volley, and OkHttp. Choosing the right HTTP client depends on the specific needs of the project. Regardless of the chosen library (client), developers need to implement asynchronous execution for network requests by using designs such as Kotlin Coroutines. This is essential for not freezing the app during network calls and for a good user experience. Additionally, implementing network error handling is also essential for building a robust application that can use network request mechanisms effectively. Therefore, understanding how to integrate HTTP clients with asynchronous programming and error handling is crucial for designing a successful Android development that incorporates network requests."
    },
    {
        "link": "https://stackoverflow.com/questions/16902716/comparison-of-android-networking-libraries-okhttp-retrofit-and-volley",
        "document": "Looking at the Volley perspective here are some advantages for your requirement:\n\nVolley, on one hand, is totally focused on handling individual, small HTTP requests. So if your HTTP request handling has some quirks, Volley probably has a hook for you. If, on the other hand, you have a quirk in your image handling, the only real hook you have is ImageCache. \"It’s not nothing, but it’s not a lot!, either\". but it has more other advantages like Once you define your requests, using them from within a fragment or activity is painless unlike parallel AsyncTasks\n• None The networking part isn’t just for images. Volley is intended to be an integral part of your back end. For a fresh project based off of a simple REST service, this could be a big win.\n• None NetworkImageView is more aggressive about request cleanup than Picasso, and more conservative in its GC usage patterns. NetworkImageView relies exclusively on strong memory references, and cleans up all request data as soon as a new request is made for an ImageView, or as soon as that ImageView moves offscreen.\n• None Performance. This post won’t evaluate this claim, but they’ve clearly taken some care to be judicious in their memory usage patterns. Volley also makes an effort to batch callbacks to the main thread to reduce context switching.\n• None Volley apparently has futures, too. Check out RequestFuture if you’re interested.\n• None If you’re dealing with high-resolution compressed images, Volley is the only solution here that works well.\n• None Volley can be used with Okhttp (New version of Okhttp supports NIO for better performance )\n\nProblems With Volley:\n\n Since Volley is new, few things are not supported yet, but it's fixed.\n• None status code 201 is taken as an error, Status code from 200 to 207 are successful responses now.(Fixed: https://github.com/Vinayrraj/CustomVolley) Update: in latest release of Google volley, the 2XX Status codes bug is fixed now!Thanks to Ficus Kirkpatrick!\n• None it's less documented but many of the people are supporting volley in github, java like documentation can be found here. On android developer website, you may find guide for Transmitting Network Data Using Volley. And volley source code can be found at Google Git\n• None To solve/change Redirect Policy of Volley Framework use Volley with OkHTTP (CommonsWare mentioned above)\n\nAlso you can read this Comparing Volley's image loading with Picasso\n\nIt's released by Square, This offers very easy to use REST API's (Update: Voila! with NIO support)\n• None Compared to Volley, Retrofit's REST API code is brief and provides excellent API documentation and has good support in communities! It is very easy to add into the projects.\n• None We can use it with any serialization library, with error handling.\n• None There are plenty of very good changes in Retrofit 2.0.0-beta2\n• None version 1.6 of Retrofit with OkHttp 2.0 is now dependent on Okio to support java.io and java.nio which makes it much easier to access, store and process your data using ByteString and Buffer to do some clever things to save CPU and memory. (FYI: This reminds me of the Koush's OIN library with NIO support!) We can use Retrofit together with RxJava to combine and chain REST calls using rxObservables to avoid ugly callback chains (to avoid callback hell!!).\n• None Memory related error handling functionality is not good (in older versions of Retrofit/OkHttp) not sure if it's improved with the Okio with Java NIO support.\n• None Minimum threading assistance can result call back hell if we use this in an improper way.\n\nAndroid Async vs Volley vs Retrofit performance benchmarks (milliseconds, lower value is better):\n\nIn all three tests with varying repeats (1 – 25 times), Volley was anywhere from 50% to 75% faster. Retrofit clocked in at an impressive 50% to 90% faster than the AsyncTasks, hitting the same endpoint the same number of times. On the Dashboard test suite, this translated into loading/parsing the data several seconds faster. That is a massive real-world difference. In order to make the tests fair, the times for AsyncTasks/Volley included the JSON parsing as Retrofit does it for you automatically. In the end, we decided to go with Retrofit for our application. Not only is it ridiculously fast, but it meshes quite well with our existing architecture. We were able to make a parent Callback Interface that automatically performs error handling, caching, and pagination with little to no effort for our APIs. In order to merge in Retrofit, we had to rename our variables to make our models GSON compliant, write a few simple interfaces, delete functions from the old API, and modify our fragments to not use AsyncTasks. Now that we have a few fragments completely converted, it’s pretty painless. There were some growing pains and issues that we had to overcome, but overall it went smoothly. In the beginning, we ran into a few technical issues/bugs, but Square has a fantastic Google+ community that was able to help us through it.\n\nWhen to use Volley?!\n\nWe can use Volley when we need to load images as well as consuming REST APIs!, network call queuing system is needed for many n/w request at the same time! also Volley has better memory related error handling than Retrofit!\n\nOkHttp can be used with Volley, Retrofit uses OkHttp by default! It has SPDY support, connection pooling, disk caching, transparent compression! Recently, it has got some support of java NIO with Okio library.\n\nNote: About streaming it depends on what type of streaming you want like RTSP/RTCP."
    },
    {
        "link": "https://medium.com/@erdi.koc/retrofit-and-okhttp-675d34eb7458",
        "document": "In Android, an OkHttp request refers to an HTTP request made using the OkHttp library. OkHttp is an open-source HTTP client developed by Square and is widely used for handling network operations in Android apps.\n\nTo make an HTTP request using OkHttp in Android, you typically follow these steps:\n• Add OkHttp to your project: To use OkHttp, you need to include the OkHttp library in your Android project. You can add it as a dependency in your app’s build.gradle file.\n\n2.Create an OkHttpClient: First, you need to create an instance of OkHttpClient, which manages the connection pool and other configuration settings.\n\n3.Create an HTTP request: Next, you create an HTTP request using the Request class. You can specify the URL, HTTP method (GET, POST, etc.), headers, and request body if needed.\n\n4.Execute the request asynchronously: To execute the request asynchronously, you can use the method on the OkHttpClient. This method takes a Callback as a parameter, which will be called when the request completes or encounters an error.\n\n5.Execute the request synchronously (optional): If you prefer to execute the request synchronously (blocking the current thread), you can use the method on the OkHttpClient. However, it's generally recommended to use asynchronous calls to avoid blocking the UI thread.\n\nIt’s important to note that network operations, including HTTP requests, should be performed on a background thread in Android, not on the main/UI thread. For asynchronous requests, OkHttp handles this internally by using background threads, and for synchronous requests, you should manually handle threading to avoid blocking the UI.\n\nRetrofit is a type-safe HTTP client library for Android and Java developed by Square. It simplifies the process of making network requests and interacting with RESTful APIs in your Android applications. Retrofit is built on top of OkHttp, another popular networking library by Square, and provides a higher-level abstraction to define API endpoints and handle responses in a type-safe manner.\n• Declarative API: Retrofit allows you to define your API endpoints as simple Java/Kotlin interfaces with annotations. You can specify the HTTP method, URL, query parameters, headers, and request body directly in the interface methods.\n• Type-Safe Requests and Responses: When defining your API interface, you can specify the expected response type, such as a model class representing the JSON response. Retrofit will automatically handle the JSON serialization and deserialization for you, providing you with type-safe response objects.\n• Integration with OkHttp: Retrofit uses OkHttp as its default HTTP client, which provides features like connection pooling, transparent GZIP, and asynchronous request execution.\n• Converter Support: Retrofit supports various converters, allowing you to serialize and deserialize data in different formats, such as JSON, XML, and others.\n• Easy Error Handling: Retrofit allows you to handle different types of errors gracefully, making it easier to deal with different server responses or network issues.\n• RxJava Integration: Retrofit provides built-in support for RxJava, enabling you to use the power of reactive programming when dealing with network calls.\n\nUsing Retrofit in Android typically involves the following steps:\n\nAdd Retrofit to your project: To use Retrofit, you need to include the Retrofit library in your Android project. You can add it as a dependency in your app’s build.gradle file.\n\nCreate a Retrofit instance: You need to create an instance of Retrofit using the Retrofit.Builder class and configure it with the base URL of your API.\n\nDefine your API interface: Create a Java/Kotlin interface that represents your API endpoints. Use annotations like @GET, @POST, @Query, @Body, etc., to specify the HTTP methods and parameters.\n\nCreate an instance of the API interface: Obtain an instance of the API interface using the Retrofit instance created earlier.\n\nMake network requests: Now, you can make network requests using the methods defined in your API interface. Retrofit will handle the request execution, response parsing, and error handling for you.\n\nRetrofit’s simplicity, type-safe nature, and seamless integration with OkHttp make it a popular choice among Android developers for handling network requests and consuming RESTful APIs.\n\nOkHttp and Retrofit are both popular libraries used in Android development to handle network requests, but they serve different purposes and have distinct functionalities. Here’s an overview of the differences between the two:\n• OkHttp: OkHttp is an open-source HTTP client for Android, Java, and Kotlin. It is developed by Square and is designed to make network connections and handle HTTP requests and responses. Some key features of OkHttp include:\n• HTTP Client: OkHttp is primarily an HTTP client library that allows you to send HTTP requests and receive responses asynchronously.\n• Low-level API: OkHttp provides a lower-level API for working directly with requests, responses, and connection pooling.\n• Network Interceptors: OkHttp allows you to add network interceptors, which can modify outgoing requests or incoming responses at a low level.\n• Connection Pooling: OkHttp automatically manages connection pooling, which can significantly improve the performance of multiple requests to the same host.\n• Async Request Execution: OkHttp supports asynchronous request execution, making it efficient for network calls on the main thread.\n\n2 . Retrofit: Retrofit, also developed by Square, is a type-safe HTTP client for Android and Java. It’s built on top of OkHttp and provides a higher-level abstraction to define API interfaces and make network requests. Key features of Retrofit include:\n• Declarative API: Retrofit allows you to define your API endpoints as simple Java/Kotlin interfaces with annotations, making it easy to describe the structure of your REST API.\n• Type-Safe Requests and Responses: With Retrofit, you can define the expected response model, and it will automatically deserialize the JSON response into Java/Kotlin objects.\n• Easy Integration with OkHttp: Retrofit uses OkHttp under the hood, so it inherits all the benefits of OkHttp, like connection pooling, async request execution, etc.\n• Converter Support: Retrofit supports various converters for serialization and deserialization, allowing you to use different formats (e.g., JSON, XML) for your data.\n• RxJava Integration: Retrofit provides built-in support for RxJava, allowing you to use RxJava’s powerful reactive programming capabilities.\n\nIn summary, OkHttp is a lower-level HTTP client that focuses on handling network connections and providing core HTTP functionalities, while Retrofit builds on top of OkHttp to offer a more user-friendly and high-level API for making RESTful API calls with type-safe responses. Many developers prefer to use Retrofit for its simplicity and ease of integration, especially when dealing with RESTful APIs."
    },
    {
        "link": "https://digitalocean.com/community/tutorials/retrofit-android-example-tutorial",
        "document": "Welcome to Retrofit Android Example Tutorial. Today we’ll use the Retrofit library developed by Square to handle REST API calls in our android application.\n\nRetrofit is type-safe REST client for Android and Java which aims to make it easier to consume RESTful web services. We’ll not go into the details of Retrofit 1.x versions and jump onto Retrofit 2 directly which has a lot of new features and a changed internal API compared to the previous versions. Retrofit 2 by default leverages OkHttp as the networking layer and is built on top of it. Retrofit automatically serialises the JSON response using a POJO(Plain Old Java Object) which must be defined in advanced for the JSON Structure. To serialise JSON we need a converter to convert it into Gson first. We need to add the following dependencies in our file.\n\nOkHttp dependency is already shipped with Retrofit 2 dependency. If you wish to use a separate OkHttp dependency, you should exclude the OkHttp dependency from Retrofit 2 as:\n• The logging-interceptor generates a log string of the entire response that’s returned.\n• There are other converters to parse the JSON to the necessary type. A few of them are listed below.\n\nAdd the permission to access internet in the AndroidManifest.xml file.\n\nInterceptors are a powerful mechanism present in OkHttp that can monitor, rewrite, and retry calls. Interceptors can be majorly divided into two categories:\n• Application Interceptors : To register an application interceptor, we need to call on\n• Network Interceptors : To register a Network Interceptor, invoke instead of\n\nThe method in the above code will be called every time while setting up a Retrofit interface. Retrofit provides with a list of annotations for each of the HTTP methods: . Let’s see how our class looks like.\n\nIn the above class, we’ve defined some methods that perform HTTP requests with annotation. calls . is the method name. is a Model POJO class for our response object that’s used to map the response parameters to their respective variables. These POJO class act as the method return type. A simple POJO class for is given below.\n\nannotation is used to specify the name of the field that’s in the JSON Response. Preview the POJO class and copy it into your Android Studio Project Structure. The POJO classes are wrapped into a typed Retrofit class. Note: A JSONArray is serialised a List of Objects in the POJO classes Method Parameters : There are a wide variety of possible options of parameters to pass inside a method:\n• - We can simply add a method parameter with @Query and a query parameter name, describing the type. To URL encode a query use the form:\n• - send data as form-urlencoded. This requires a annotation attached with the method. The parameter works only with a POST\n\nNote: @Field requires a mandatory parameter. In cases when @Field is optional, we can use @Query instead and pass a null value.\n\nThe pojo package defines four model classes for each of the API endpoint responses defined in the APIInterface.java class.\n\nThe above class is used to create the Response Body for the method\n\nThe is where we call each of the API endpoints defined in the Interface class and display each of the fields in a Toast/TextView.\n\nis used to instantiate the APIClient. To map the Model class to the response we use: Running the application would call each of the endpoints and display a Toast message for them accordingly. This brings an end to Retrofit android example tutorial. You can download the Android Retrofit example project from the link below."
    },
    {
        "link": "https://medium.com/@appdevinsights/okhttp-in-android-4c2771141f79",
        "document": "OkHttp is a popular open-source HTTP client for Android and Java applications. It simplifies the process of making HTTP requests and handling responses. Here’s a basic overview of using OkHttp in an Android application:\n\nHere are the key advantages to using OkHttp:\n• OkHttp supports the HTTP/2 and SPDY protocols, providing improved performance by allowing multiple requests and responses to be multiplexed over a single connection.\n\n2. Connection Pooling(reduces request latency in the absence of HTTP/2):\n• OkHttp automatically reuses and maintains a pool of connections, reducing the overhead of creating new connections for each request. This can significantly improve performance, especially for applications with frequent network requests.\n• OkHttp automatically handles GZIP compression and decompression, reducing the amount of data transferred over the network and improving efficiency.\n• Interceptors allow you to modify requests and responses at runtime. You can add custom interceptors to log, modify, or manipulate requests and responses before they are sent or received.\n• OkHttp allows you to set timeouts for various aspects of the network operations, such as connect timeout, read timeout, and write timeout. This helps in handling slow or unresponsive network conditions.\n• OkHttp provides automatic cookie handling, making it easy to manage and persist cookies across multiple requests. This is essential for maintaining stateful sessions in web applications.\n• OkHttp simplifies the process of sending multipart requests, which is useful for uploading files or sending complex data structures.\n• OkHttp includes support for WebSocket communication, allowing bidirectional communication between the client and server over a single, long-lived connection.\n• OkHttp allows you to customize TLS/SSL settings, enabling you to control certificate pinning, choose specific cipher suites, and configure other security-related parameters.\n• OkHttp provides built-in support for response caching, allowing you to cache responses locally and reduce the need to fetch the same data repeatedly from the server.\n• OkHttp simplifies asynchronous programming by providing a callback-based approach for handling responses. This helps prevent blocking the main thread and keeps the user interface responsive.\n• OkHttp supports various authentication mechanisms, including basic authentication and OAuth, making it suitable for a wide range of applications that require secure communication.\n\nHow to set up OkHttp\n\nTo use OkHttp in your Android project, you need to import it in the application-level Gradle file:\n\nYou need to request the permission in the file of your application if you would like to access network resources:\n\nSynchronous and asynchronous GET requests, as well as query parameters.\n\nThis is a synchronous way to execute the request with OkHttp. (You should run this on a non-UI thread, otherwise, you will have performance issues within your application and Android will throw an error)\n\nThe asynchronous version of this request provides you with a callback when the response was fetched or an error occurred.\n\nThe is used to construct a URL with the specified base URL and query parameters. The resulting is then used to build the final URL for the OkHttp request. The request is then made either synchronously or asynchronously, depending on your requirements\n\nNote that when making asynchronous requests, the callbacks are executed on a background thread, so you should avoid updating the UI directly from within the callback methods. If you need to update the UI, consider using the appropriate mechanisms such as in Android or other UI thread synchronization techniques.\n\nUploading a file using OkHttp in Kotlin involves creating a for the file and adding it to the request as a part. Below is an example demonstrating how to make a file upload request using OkHttp in Kotlin:\n• is used to create a part for the file.\n• The is used to build the request body with the file part.\n• The request is created using , specifying the URL and the request body.\n• The file is uploaded asynchronously using .\n\nIn OkHttp for Kotlin, you can cancel a request by using the object returned when making the request. The interface provides a method that can be used to cancel an ongoing request. Here's an example:\n\nIn OkHttp for Kotlin, you can set HTTP headers on a request using the method of the class. Here's an example of how to set an HTTP header in an OkHttp request:\n\nIn this example:\n• The method is used to set individual headers on the .\n• You can set multiple headers by calling multiple times.\n• The headers set in the are included in the HTTP request when it is sent.\n\nIn the example, we set the “Authorization” header with a bearer token and the “Content-Type” header with the value “application/json”. Adjust the headers based on your specific requirements.\n\nThis is applicable for both GET and POST requests. If you are making a POST request with a request body, make sure to include the appropriate “Content-Type” header for the type of data you are sending (e.g., “application/json” for JSON data).\n\nNow our sensitive data is only accessible if someone knows our username and password. But what if someone is listening on the network and tries to hijack our requests with a man-in-the-middle attack and fabricated certificates?\n\nOkHttp gives you an easy way to trust only your own certificate by using certificate pinner.\n\nCertificate pinning is a security measure used to ensure that the server’s SSL certificate matches a predefined set of cryptographic values. In OkHttp, you can implement certificate pinning using a . Here's how you can set up certificate pinning in an OkHttp request using Kotlin:\n\nWe’ve already covered some usage of . This class is useful if we would like to alter the default OkHttp client behavior.\n\nThere are some parameters worth mentioning:\n\nIf you are done with the WebSocket server-side implementation, you can connect to that endpoint and get real-time messaging up and running from an OkHttp client.\n\nWe can’t forget about testing. OkHttp delivers its own MockWebServer to help test HTTP and HTTPS network calls. It lets us specify which response to return to which request and verifies every part of that request.\n\nTo start, we need to import it via Gradle:\n\nHere are some important APIs:\n• : starts the mock web server on the local host\n• : queues a . This is a FIFO queue that ensures the requests will receive responses in order as there were queued\n• : an HTTP request that was received by the\n• : takes the next request arrived to the"
    }
]