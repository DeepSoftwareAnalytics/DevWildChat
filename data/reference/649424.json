[
    {
        "link": "https://exploreembedded.com/wiki/AVR_I/O_Register_Configuration",
        "document": "In this tutorial we are going to discuss the port configuration of AVR/Atmel controllers or in general Atmega family. In this tutorial we will be using Atmega32 as reference, same will be applicable to other Atmega series controllers.\n\nAt the end of this tutorial you will be familiar with the Atmega GPIO's and the associated registers for configuring and accessing the GPIO's.\n\n\n\nThe basic and important feature of any controllers is the number of gpio's available for connecting the peripherals. Atmega32 has 32-gpio's grouped into four 8-bit ports namely PORTA-PORTD as shown in the below image.\n\n\n\n As shown in the above image many I/O pins have 2-3 functions. If a pin is used for other function then it may not be used as a gpio.\n\nThough the gpio pins are grouped into 8-bit ports they can still be configured and accessed individually. \n\nEach Port is associated with 3 registers for direction configuration(Input/Output), read and write operation.\n\nnote: Here 'x' could be A,B,C,D so on depending on the number of ports supported by the controller.\n\n\n\n DDRx: Data Direction Register\n\n Before reading or writing the data from the ports, their direction needs to be set. Unless the PORT is configured as output, the data from the registers will not go to controller pins.\n\nThis register is used to configure the PORT pins as Input or Output. Writing 1's to DDRx will make the corresponding PORTx pins as output. Similarly writing 0's to DDRx will make the corresponding PORTx pins as Input.\n\nPORTx:\n\n This register is used to send the data to port pins. Writing 1's to PORTx will make the corresponding PORTx pins as HIGH. Similarly writing 0's to PORTx will make the corresponding PORTx pins as LOW.\n\n\n\n PINx:PORT Input Register\n\n This register is used to read the data from the port pins. Before reading the data from the port pins, the ports needs to be configured as Inputs.\n\nEnabling Internal Pull Up Resistors:\n\n Making the DDRx bits to 0 will configure the PORTx as Input. Now the corresponding bits in PORTx register can be used to enable/disable pull-up resistors associated with that pin.To enable pull-up resistor, set bit in PORTx to 1, and to disable set it to 0.\n\nAfter knowing how to configure the GPIO ports, its time to write a simple program to blink the Leds. \n\nBelow points needs to be considered for this example.\n• Include the io.h file as it has the definitions for all the PORT registers.\n• Include delay.h file to use the delay functions.\n• Configure the PORT as Output before writing any data to PORT pins.\n\nThe Explore Ultra AVR Kit comes with all the things required, not just for this experiment but for the entire series. And even if you think of migrating to PIC or Arduino, you'll have breakout boards that fit on to this, hence we believe it is a great investment for learning hands on Embedded Systems. The kit is fully open source, you may use the schematics, the design files and all of the source code and build something cool on your own. And when you do that do not forget to share with us what you've done. We would be happy to see you building something cool.\n\n\n\n Have a opinion, suggestion , question or feedback about the article let it out here!"
    },
    {
        "link": "https://ww1.microchip.com/downloads/en/devicedoc/atmel-8154-8-bit-avr-atmega16a_datasheet.pdf",
        "document": ""
    },
    {
        "link": "https://ww1.microchip.com/downloads/en/DeviceDoc/doc2466.pdf",
        "document": ""
    },
    {
        "link": "https://iuac.res.in/phoenix/docs/ATmega16.pdf",
        "document": ""
    },
    {
        "link": "https://docs.arduino.cc/retired/hacking/software/PortManipulation",
        "document": ""
    },
    {
        "link": "http://rjhcoding.com/avrc-bit-manip.php",
        "document": ""
    },
    {
        "link": "https://orvindemsy.medium.com/bit-operation-in-avr-microcontroller-5979eb5b78fc",
        "document": "We need to create a program (code) to deliver our instructions to MCU. For this AVR-based microcontrollers, the language we are using is called Embedded-C, which is basically the extension of C language, so if you have basic in C, that’s a plus.\n\nThere is something so basic yet important part in programming AVR in C, which is called the bit operation. In this tutorial, I will introduce you to some basic introduction to what bit is, the operator and how to operate it.\n\nAccording to this, a bit is a basic unit of information used in computing and digital communication, and yes I agree with this definition. It is the basic, the very basic, so basic that we could not understand it, why? Because it’s not a human language it’s a machine language.\n\nA bit is consist of zero’s and one’s combined together to achieved some instruction set that can be understood by the computer, I assume that you already know how to convert from binary to hexadecimal and vice versa, as it might be needed along with your AVR journey.\n\nThis is an example of writing 8-bits to declare the status of MCU’s pin.\n\nDon’t worry if you don’t get it now, we’ll get back to that later.\n\nIt is really important to understand how bits work and how to manipulate them in order to communicate well with the machine. There are six operators that I’m going to introduce in this article, they are AND, OR, XOR, INVERT, SHIFT RIGHT, and SHIFT LEFT. Each operator belongs to one symbol to represent them.\n\nAND, OR, XOR\n\nTo get you familiar with the basic logic of these operators here are some truth tables for those bitwise operators. An important thing to keep in mind is that bit value and logic value is different! You will see what it means later on.\n\nCOMPLIMENT\n\n~(10011010) = 01100101\n\nEach bit value is inverted to its opposite value.\n\nSHIFT LEFT\n\n1000 1111 << 4bits will produce 1111 000\n\nShift 4 bits to the left, notice the position of ‘1’ bit is replaced by ‘0’ as the bit is moving. This is a step by step process happened during the shifting.\n\nSHIFT RIGHT\n\n10001111 >> 4bits will produce 0000 1000\n\nThe same theory applies to right shifting. Shifting 4 bits to the right direction means replacing the position of bit ‘1’ with ‘0’ as the bit moves to the right.\n\nUsing bit to control pin in AVR MCU\n\nControlling bit is a way for the programmer to activate/deactivate certain pins in MCU. Following is a few examples on the syntax of bit operation in C plus their meanings.\n\nFirst, forget about the ‘PORTA’ we’ll get to that later, let’s just focus on the righthand side of the equation the ‘0b0001111’. The ‘0b’ means we will express the value of PORTA in binary, I suppose the ‘b’ means binary. Another way to express this value is by writing ‘0x’ which means ‘hexadecimal’, the above code then could be translated to ‘PORTA = 0x0F.’ (Again I assume that you understand binary to hexadecimal conversion).\n\nAnother important term here is MASK BIT, or simply MASK is the ‘0b00001111’. Mask define which bits we want to modify.\n\nSo far we’ve got.\n\nI highly recommend for beginners to start programming using the binary value since by expressing the value in binary you could clearly see which values assigned to which pin.\n\nNotice the use of ‘|=’ this symbols simply means PORTA = PORTA | 0b00001111. You will find operators symbol that is followed by ‘=’, just keep in mind what it means.\n\nSo far we’ve got.\n\nCan you guess what the above code will equal to? Yes, you are correct! (Answer: PORTA &= 0b11110000)\n\nWe will see later why using complement ‘~’ is preferred. So often, you will encounter if logic in your code, now let’s dig some codes that involve it.\n\nRemember earlier in this tutorial I mentioned about bit value and logic value? Now it’s time to take a look at these definitions. A bit value is literally the value of bit itself, e.g. 0 AND 1 will value as 0. But logic value consists of TRUE or FALSE. A statement will be TRUE if whatever written inside the if condition is fulfilled, otherwise it will be FALSE.\n\nThe ‘&’ operator is used to check a certain bit value in a PINA (again for now don’t get confused with the definition of PIN). Let’s focused on the bit. Suppose you want to check the first bit in PINA, therefore, you need to mask the first bit of PIN A with the appropriate mask which is ‘0x01’ or ‘0b00000001’. Let’s say the initial bit of PINA is ‘0b00000001’, so we have :\n\nI hope you get it what I mean by logic value by the explanation above. Often we will encounter the NOT symbol (!) inside if statement. Understanding of operator ! will deepen your knowledge on the logic behind if statement.\n\nNotice that on the table above, the logic value is TRUE if the value of the bit is 1 (bit it set), in short, we can say if a bit is 1 then the logic value is TRUE then do action 1. But can we reverse it? What if we want to do action 1 if the if statement is not fulfilled (FALSE or the bit is not set). Don’t worry, The ! NOT symbol comes to the rescue!\n\nThis is how you code it :\n\nLet’s create a similar table as above to simplify the explanation :\n\nThere are three ways of writing this logic that mean the same thing :\n\nFor beginners, I personally recommend writing with the second one as it is the easiest to grasp for beginners. Now pay attention to the second one, it’s written as :\n\nNow, you may be wondering, can we apply the same principle to the first example? Can we write\n\nif ((PINA & 0x01) == 1) instead of if (PINA & 0x01)\n\nI regret to inform you that the answer is no, we cannot. So, let’s just stick to the original one.\n\nThis is the end of the tutorial of bitwise operation. If you find anything wrong or something need to be edited please feel free to reach me out. Next, we will take a closer look at what is PIN, PORT and DDR in GPIO section. Here are some terms we’ve covered in this chapter.\n\nHere are some new words we covered in this session :"
    },
    {
        "link": "https://stackoverflow.com/questions/23752570/avrsetting-bits-in-c-microcontroller",
        "document": "I am trying to interface ATmega328 with an LCDI have written the following code\n\nthe enable pin is 28,how can i set and reset this pin?\n\ni am using atmel studio 6 with avrispmkii usb programmer"
    },
    {
        "link": "https://avrfreaks.net/s/topic/a5C3l000000UWpmEAG/t140008",
        "document": ""
    },
    {
        "link": "https://electronics.stackexchange.com/questions/640531/why-is-a-register-initialised-through-bitwise-operations-instead-of-a-binary-str",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    }
]