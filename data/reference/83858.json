[
    {
        "link": "https://developers.google.com/maps/documentation/javascript/infowindows",
        "document": "New basemap styling is coming soon to Google Maps Platform. This update to map styling includes a new default color palette, modernized pins, and improvements to map experiences and usability. All map styles will be automatically updated in March 2025. For more information on availability and how to opt in earlier, see New map style for Google Maps Platform\n\nSave and categorize content based on your preferences.\n\nStay organized with collections Save and categorize content based on your preferences.\n\nAn displays content (usually text or images) in a popup window above the map, at a given location. The info window has a content area and a tapered stem. The tip of the stem is attached to a specified location on the map. Info windows appear as a Dialog to screen readers.\n\nTypically you will attach an info window to a marker, but you can also attach an info window to a specific latitude/longitude, as described in the section on adding an info window below.\n\nBroadly speaking, info windows are a type of overlay. For information on other types of overlay, see Drawing on the map.\n\nThe constructor takes an object literal, which specifies the initial parameters for displaying the info window.\n\nThe object literal contains the following fields:\n• contains either a string of text or a DOM node to display in the info window.\n• contains an offset from the tip of the info window to the location on which the info window is anchored. In practice, you should not need to specify this field. You can leave it at the default value.\n• contains the at which this info window is anchored. Note: An may be attached either to a object (in which case its position is based on the marker's location) or on the map itself at a specified . One way of retrieving a is by using the Geocoding service. Opening an info window on a marker will automatically update the .\n• specifies the maximum width of the info window in pixels. By default, an info window expands to fit its content, and auto-wraps text if the info window fills the map. If you add a the info window will auto-wrap to enforce the specified width. If it reaches the maximum width and there is vertical room on the screen, the info window may expand vertically.\n\nThe content of the may contain a string of text, a snippet of HTML, or a DOM element. To set the content, either specify it within the or call on the explicitly.\n\nIf you wish to explicitly size the content, you can put it in a element and style the with CSS. You can use CSS to enable scrolling too. Note that if you do not enable scrolling and the content exceeds the space available in the info window, the content may spill out of the info window.\n\nWhen you create an info window, it is not displayed automatically on the map. To make the info window visible, you must call the method on the , passing an object literal specifying the following options:\n• specifies the map or Street View panorama on which to open.\n• contains an anchor point (for example a ). If the option is or undefined, the info window will open at its property.\n\n// This example displays a marker at the center of Australia. // When the user clicks the marker, an info window opens. \"<p><b>Uluru</b>, also referred to as <b>Ayers Rock</b>, is a large \" \"sandstone rock formation in the southern part of the \" \"(280 mi) by road. Kata Tjuta and Uluru are the two major \" \"features of the Uluru - Kata Tjuta National Park. Uluru is \" \"sacred to the Pitjantjatjara and Yankunytjatjara, the \" \"Aboriginal people of the area. It has many springs, waterholes, \" \"rock caves and ancient paintings. Uluru is listed as a World \" > > Note: Read the guide on using TypeScript and Google Maps. // This example displays a marker at the center of Australia. // When the user clicks the marker, an info window opens. \"<p><b>Uluru</b>, also referred to as <b>Ayers Rock</b>, is a large \" \"sandstone rock formation in the southern part of the \" \"(280 mi) by road. Kata Tjuta and Uluru are the two major \" \"features of the Uluru - Kata Tjuta National Park. Uluru is \" \"sacred to the Pitjantjatjara and Yankunytjatjara, the \" \"Aboriginal people of the area. It has many springs, waterholes, \" \"rock caves and ancient paintings. Uluru is listed as a World \" > Note: The JavaScript is compiled from the TypeScript snippet. View example\n\nThe following example sets the of an info window: view example.\n\nTo set focus on an info window, call its method. Consider using this method along with a event prior to setting focus. Calling this method on a non-visible info window will have no effect. Call to make an info window visible.\n\nBy default, an info window remains open until the user clicks the close control (a cross at top right of the info window), or presses the ESC key. You can also close the info window explicitly by calling its method.\n\nWhen an info window is closed, focus moves back to the element that was in focus prior to the info window being opened. If that element is unavailable, focus is moved back to the map. To override this behavior, you can listen to the event, and manually manage focus as shown in the following example:\n\nThere are a couple of ways to change the location of an info window:\n• Call on the info window, or\n• Attach the info window to a new marker using the method. Note: If you call without passing a marker, the will use the position specified upon construction through the object literal.\n\nThe class does not offer customization. Instead, see the customized popup example to see how to create a fully customized popup."
    },
    {
        "link": "https://developers.google.com/maps/documentation/javascript/reference",
        "document": "New basemap styling is coming soon to Google Maps Platform. This update to map styling includes a new default color palette, modernized pins, and improvements to map experiences and usability. All map styles will be automatically updated in March 2025. For more information on availability and how to opt in earlier, see New map style for Google Maps Platform\n\nSave and categorize content based on your preferences.\n\nStay organized with collections Save and categorize content based on your preferences.\n\nThis is an index of all the classes, methods, and interfaces in the Maps JavaScript API version 3.60 (weekly channel). This reference is kept up to date with the latest changes to the API.\n\nFor additional information see the Release Notes and Versioning. \n\nAlso see the reference documentation for version 3.59 (quarterly channel), version 3.58 and version 3.57.\n\nClick the name of any item to see detailed documentation."
    },
    {
        "link": "https://stackoverflow.com/questions/75901330/javascript-api-how-do-i-add-an-info-window-to-multiple-markers-on-google-maps",
        "document": "First you need a div containing your content and image. Going off the documentation - would just be a variable storing a string of HTML where you can create your image and text. Maybe you can store your contentString in another array and reference it in your array.\n\nPut these into a new array:\n\nThen add this array into your existing array:\n\nAssign a variable to each new marker then you will need to create a click event listener to attach onto each newly created marker.\n\nThen create a new instance of the InfoWindow class\n\nAnd finally use a click function to activate the infowindow on the marker you've just created (all within the for loop)\n\nFor reference I referred to these two pages in the Google docs: https://developers.google.com/maps/documentation/javascript/examples/infowindow-simple https://developers.google.com/maps/documentation/javascript/reference/info-window"
    },
    {
        "link": "https://stackoverflow.com/questions/5868903/marker-content-infowindow-google-maps",
        "document": "We've solved this, although we didn't think having the addListener outside of the for would make any difference, it seems to. Here's the answer:\n\nCreate a new function with your information for the infoWindow in it:\n\nThen call the function with the array ID and the marker you want to create:"
    },
    {
        "link": "https://groups.google.com/g/google-maps-js-api-v3/c/0zkvHcQ_CQE",
        "document": "Sign in to reply to author\n\nYou do not have permission to delete messages in this group\n\nEither email addresses are anonymous for this group or you need the view member email addresses permission to view the original message"
    },
    {
        "link": "https://developers.google.com/maps/documentation/javascript/best-practices",
        "document": "New basemap styling is coming soon to Google Maps Platform. This update to map styling includes a new default color palette, modernized pins, and improvements to map experiences and usability. All map styles will be automatically updated in March 2025. For more information on availability and how to opt in earlier, see New map style for Google Maps Platform\n\nThe Maps JavaScript API only works with a standard ECMAScript and W3C DOM environment. This means that modifying or overriding the behavior of the built-in classes and objects provided by the browser could make the Maps JavaScript API non-functional. Sometimes other libraries can conflict with the Maps JavaScript API by changing the behavior of the browser so that it is no longer a standard ECMAScript environment. The Maps JavaScript API is not compatible with those libraries.\n\nLibraries that are known to be incompatible with the Maps JavaScript API:\n\nSometimes it is possible to modify incompatible libraries to remove the non-standard overrides.\n\nWhen you add or customize a map with the Maps JavaScript API, some of the styles you apply to your webpage may override your map styles and cause CSS conflicts. If you use a CSS framework or a JavaScript component for styling, this might add additional CSS conflicts with your map styles.\n\nCSS frameworks and JavaScript styling components often use a CSS reset or a normalizer to handle rendering differences between browsers. Frameworks often use the element to scale the margins and borders of web page elements. This usually involves changing the default browser behavior from using to .\n\nThis type of CSS reset can cause CSS conflicts with the Maps JavaScript API because the API doesn’t support changes to the user agent stylesheet. Additional CSS conflicts can occur if the framework or component references CSS classes or DOM elements of the Maps JavaScript API.\n\nTo avoid these conflicts, we have several recommendations to consider.\n\nEmbedded and linked CSS is applied to your map before the Google maps styles. If all of your page styles are defined in embedded or linked CSS, follow the specificity rules to ensure that the correct styles are applied to your map.\n\nCommon CSS elements, such , , and can be overwritten by the styles of your page. One of the most common scenarios is when the attribute of the element is set to 100 percent. This can cause distorted or hidden map components, especially if you're using InfoWindow.\n\nTo fix this issue, you can update the element for your map so the attribute is set to . For example:\n\nDon't reference class names and internal DOM elements of the JavaScript Maps API. This is not supported and can cause breaking changes in your website without notice. Instead, we recommend that you create your own CSS classes as containers for your map.\n\nIf a CSS framework or JavaScript component uses these type of references, our box-sizing override recommendation might serve as a work-around.\n\nCSS box-sizing overrides provide a possible workaround for maps styling conflicts. This can be especially useful if you're using a CSS framework or JavaScript styling component. For example, if is set to , try the following:\n• Create a override that sets the element to .\n• Use for all elements other than your map.\n• Create a custom map container that resets the element to ."
    },
    {
        "link": "https://developers.google.com/maps/documentation/javascript/markers",
        "document": "New basemap styling is coming soon to Google Maps Platform. This update to map styling includes a new default color palette, modernized pins, and improvements to map experiences and usability. All map styles will be automatically updated in March 2025. For more information on availability and how to opt in earlier, see New map style for Google Maps Platform\n\nSave and categorize content based on your preferences.\n\nStay organized with collections Save and categorize content based on your preferences.\n\nA marker identifies a location on a map. By default, a marker uses a standard image. Markers can display custom images, in which case they are usually referred to as \"icons.\" Markers and icons are objects of type . You can set a custom icon within the marker's constructor, or by calling on the marker. See more about customizing the marker image.\n\nBroadly speaking, markers are a type of overlay. For information on other types of overlay, see Drawing on the map.\n\nMarkers are designed to be interactive. For example, by default they receive events, so you can add an event listener to bring up an info window displaying custom information. You can allow users to move a marker on the map by setting the marker's property to . For more information about draggable markers, see below.\n\nThe constructor takes a single object literal, specifying the initial properties of the marker.\n\nThe following fields are particularly important and commonly set when constructing a marker:\n• (required) specifies a identifying the initial location of the marker. One way of retrieving a is by using the Geocoding service.\n• (optional) specifies the on which to place the marker. If you do not specify the map on construction of the marker, the marker is created but is not attached to (or displayed on) the map. You may add the marker later by calling the marker's method.\n\nThe following example adds a simple marker to a map at Uluru, in the center of Australia:\n\nIn the above example, the marker is placed on the map at construction of the marker using the property in the marker options. Alternatively, you can add the marker to the map directly by using the marker's method, as shown in the example below:\n\nThe marker's will appear as a tooltip.\n\nIf you do not wish to pass any in the marker's constructor, instead pass an empty object in the last argument of the constructor.\n\nTo remove a marker from the map, call the method passing as the argument.\n\nNote that the above method does not delete the marker. It removes the marker from the map. If instead you wish to delete the marker, you should remove it from the map, and then set the marker itself to .\n\nIf you wish to manage a set of markers, you should create an array to hold the markers. Using this array, you can then call on each marker in the array in turn when you need to remove the markers. You can delete the markers by removing them from the map and then setting the array's to , which removes all references to the markers.\n\nYou can customize the visual appearance of markers by specifying an image file or vector-based icon to display instead of the default Google Maps pushpin icon. You can add text with a marker label, and use complex icons to define clickable regions, and set the stack order of markers.\n\nIn the most basic case, an icon can specify an image to use instead of the default Google Maps pushpin icon. To specify such an icon, set the marker's property to the URL of an image. The Maps JavaScript API will size the icon automatically.\n\nYou can use custom SVG vector paths to define the visual appearance of markers. To do this, pass a object literal with the desired path to the marker's property. You can define a custom path using SVG path notation, or use one of the predefined paths in google.maps.SymbolPath. The property is required in order for the marker to render correctly when the zoom level changes. Learn more about using Symbols to create vector-based icons for markers (and polylines).\n\nA marker label is a letter or number that appears inside a marker. The marker image in this section displays a marker label with the letter 'B' on it. You can specify a marker label as either a string or a object that includes a string and other label properties.\n\nWhen creating a marker, you can specify a property in the object. Alternatively, you can call on the Marker object to set the label on an existing marker.\n\nThe following example displays labeled markers when the user clicks on the map:\n\nYou can specify complex shapes to indicate regions that are clickable, and specify how the icons should appear relative to other overlays (their \"stack order\"). Icons specified in this manner should set their properties to an object of type .\n\nobjects define an image. They also define the of the icon, the of the icon (if the image you want is part of a larger image in a sprite, for example), and the where the icon's hotspot should be located (which is based on the origin).\n\nIf you are using a label with a custom marker, you can position the label with the property in the object.\n\n// The following example creates complex markers to indicate beaches near // Sydney, NSW, Australia. Note that the anchor is set to (0,32) to correspond // to the base of the flagpole. // Data for the markers consisting of a name, a LatLng and a zIndex for the // order in which these markers should display on top of each other. // Marker sizes are expressed as a Size of X,Y where the origin of the image // (0,0) is located in the top left of the image. // Origins, anchor positions and coordinates of the marker increase in the X // direction to the right and in the Y direction down. // This marker is 20 pixels wide by 32 pixels high. // The origin for this image is (0, 0). // The anchor for this image is the base of the flagpole at (0, 32). // Shapes define the clickable region of the icon. The type defines an HTML // <area> element 'poly' which traces out a polygon as a series of X,Y points. // The final coordinate closes the poly by connecting to the first coordinate. > Note: Read the guide on using TypeScript and Google Maps. // The following example creates complex markers to indicate beaches near // Sydney, NSW, Australia. Note that the anchor is set to (0,32) to correspond // to the base of the flagpole. // Data for the markers consisting of a name, a LatLng and a zIndex for the // order in which these markers should display on top of each other. // Marker sizes are expressed as a Size of X,Y where the origin of the image // (0,0) is located in the top left of the image. // Origins, anchor positions and coordinates of the marker increase in the X // direction to the right and in the Y direction down. // This marker is 20 pixels wide by 32 pixels high. // The origin for this image is (0, 0). // The anchor for this image is the base of the flagpole at (0, 32). // Shapes define the clickable region of the icon. The type defines an HTML // <area> element 'poly' which traces out a polygon as a series of X,Y points. // The final coordinate closes the poly by connecting to the first coordinate. Note: The JavaScript is compiled from the TypeScript snippet. View example\n\nUntil version 3.10 of the Maps JavaScript API, complex icons were defined as objects. The object literal was added in version 3.10, and replaces from version 3.11 onwards. object literals support the same parameters as , allowing you to easily convert a to an by removing the constructor, wrapping the previous parameters in 's, and adding the names of each parameter. For example:\n\nOptimization enhances performance by rendering many markers as a single static element. This is useful in cases where a large number of markers is required. By default, the Maps JavaScript API will decide whether a marker will be optimized. When there is a large number of markers, the Maps JavaScript API will attempt to render markers with optimization. Not all Markers can be optimized; in some situations, the Maps JavaScript API may need to render Markers without optimization. Disable optimized rendering for animated GIFs or PNGs, or when each marker must be rendered as a separate DOM element. The following example shows creating an optimized marker:\n\nYou can make a marker accessible by adding a click listener event, and setting to . The click listener causes the marker to have button semantics, which can be accessed using keyboard navigation, screen readers, and so on. Use the option to present accessible text for a marker.\n\nIn the following example, the first marker receives focus when tab is pressed; you can then use the arrow keys to move between markers. Press tab again to continue moving through the rest of the map controls. If a marker has an info window, you can open it by clicking the marker, or by pressing the enter key or space bar when the marker is selected. When the info window closes, focus will return to the associated marker.\n\nYou can animate markers so that they exhibit dynamic movement in a variety of different circumstances. To specify the way a marker is animated, use the marker's property, of type . The following values are supported:\n• indicates that the marker should drop from the top of the map to its final location when first placed on the map. Animation will cease once the marker comes to rest and will revert to . This type of animation is usually specified during creation of the .\n• indicates that the marker should bounce in place. A bouncing marker will continue bouncing until its property is explicitly set to .\n\nYou may initiate an animation on an existing marker by calling on the object.\n\nIf you have many markers, you might not want to drop them on the map all at once. You can make use of to space your markers' animations using a pattern like that shown below:\n\nTo allow users to drag a marker to a different location on the map, set to in the marker options.\n\nFor a fully-customized marker, see the customized popup example.\n\nFor further extensions of the Marker class, marker clustering and management, and overlay customization, see open source libraries."
    },
    {
        "link": "https://stackoverflow.com/questions/13187394/how-to-manage-and-handle-google-maps-markers",
        "document": "I am trying to solve a conundrum using google maps and js. I never worked with google maps and my knowledge of JS is limited.\n\nMy MAIN question is: How do I Create multiple independent markers on google map, store them into some sort of data structure and then delete particular markers when I need it?\n\nFor example, each marker has it's own id number, I get its lat and lon and them I use this function to add it to map:"
    },
    {
        "link": "https://mapsplatform.google.com/resources/blog/google-maps-platform-best-practices-optimization-and-performance-tips",
        "document": "Whether we’re talking about desktop browsers or the mobile web, users have come to expect web apps that give them what they want with smooth, fast UI performance. For JavaScript developers, this means optimizing performance becomes one of the biggest concerns. The difference between a site that lags or responds slowly and one that doesn’t is the difference between attracting and retaining users or losing them, and apps that deliver mapping or other location-based features are no exception. Recently I gave a talk on this topic, and I want to recap some of the tips I gave.\n\nUsing custom overlaysCustom overlays allow you to render custom geospatial data on top of the map that moves along with the map when the user drags or zooms. We see a lot of developers use this as a way of placing their own data, such as markers, on the maps. This is done in :\n\nThis is a perfectly good way to build a custom map, but if you’re going to do this, it’s important to know that every time the user pans or zooms the map, we redraw the basemap as well as call your to redraw your overlaid content. This is something you need to take into account if the logic for creating or updating your custom overlays is either compute heavy or blocking, since it can introduce some stuttering or lag into the overall map experience due to your code executing at the same time we are trying to redraw the map. Also, be sure to only execute the code you need in . Anything not needed to actually execute rendering should be done beforehand to keep your call as lightweight as possible.\n\nHere’s an example of a custom overlay that’s overlapping its rendering with the map rendering:\n\nAnother tip: create a better user experience by only adding or removing content when the map is stationary. A good best practice is to take advantage of events such as or that will tell you when the user is interacting with the map, so you can avoid making changes to your custom overlays while we are redrawing. The same goes for adding and removing markers from the map.\n\nHere’s what the earlier example looks like when we wait for the user interaction to complete:\n\nMuch better! Not only does the map perform better, you’ll also notice that we improved the user experience by only rendering markers in the view once the user stops panning.\n\n**Using markers**Another way developers can add data to the map while maintaining a performant implementation is through the use of markers. A marker identifies a location on a map. By default, markers added to the map use our standard red pin, but you can also use custom images. Let’s take a look at what a performant use of markers might look like.\n\nIn this example, we have a method that generates 1,000 geocodes within a bounding box:\n\nNext, we create some markers and add them to the map. Notice that we are specifying a custom .svg for the markers:\n\nNow take a look at what happens when we interact with the map:\n\nNotice how there is lag when we pan and zoom. Now, let’s make a simple change by switching to a raster image (in this case a png) for our markers in the `Icon` property of the code snippet above:\n\nNo more lag! Although in many cases svg images perform better on the web, we actually implement special optimizations for rendering custom markers with raster images when a large number (think multiple hundreds) of markers are being rendered all at once. So the takeaway here is to use raster images for better performance if you intend on putting a lot of markers on the map.\n\n**What else?**This covers just a couple of the things you can do to optimize your usage of the Maps JavaScript API, but there’s always more to be done depending on what’s important to your implementation. For example, marker clustering is a must for maps that display a lot of markers.\n\nFor more about the Maps JavaScript API, check out our docs. And if you missed my talk, check out the video to also learn more about what we have planned for Google Maps Platform."
    },
    {
        "link": "https://stackoverflow.com/questions/77428995/manipulate-markers-in-google-maps-javascript-api-v3",
        "document": "I am really struggling with the structure of the new Google Maps Javascript API.\n\nIn the tutorial for adding a map with a marker, the new structure wants to load the library, to load the relevant class(es):\n\nOK, so I wrap this in some sort of method to init the map\n\nNo problem.. but what happens if I want another method to add or manipulate a marker? Do I call again?\n\nI mean.. is this thing cached, or is it going to try to import code from the interweb every time? Why do I have to load just to get a class definition?\n\nThere is no top-level in the browser (yet), so the load of these classes needs to be scoped to a , which means they are not accessible outside that scope, like.. another function.\n\nHow are people doing this? The whole structure of this API seems bonkers to me.\n\nWhat I want to do is something like this:\n\nWhat is the best-practice guidance for using this [bonkers] API in this way?"
    }
]