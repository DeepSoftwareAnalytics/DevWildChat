[
    {
        "link": "https://stackoverflow.com/questions/76705388/python-telegram-bot-send-message-with-buttons",
        "document": "i'd like to send a message through telegram bot with buttons. Once button is pressed i need to know which button was that and then change the text that came with the button.\n\nI've almost found out how to do things separately but i can't unite them. To send a message with buttons i need either to write /start or have to press a menu button. I need those buttons to appear after the message without user having to press anything.\n\nThis is a script that i've found in the official description with added functions to send a message\n\nThe error that i receive after pressing on either Choice button:\n\nSilly me, changed query to query.data now everything works!"
    },
    {
        "link": "https://docs.python-telegram-bot.org/en/v21.9/telegram.inlinekeyboardbutton.html",
        "document": "This object represents one button of an inline keyboard.\n\nObjects of this class are comparable in terms of equality. Two objects of this class are considered equal, if their , , , , , , , and are equal.\n• None Exactly one of the optional fields must be used to specify type of the button.\n• None Mind that is not working as expected. Putting a game short name in it might, but is not guaranteed to work.\n• None If your bot allows for arbitrary callback data, in keyboards returned in a response from telegram, may be an instance of . This will be the case, if the data associated with the button was already deleted.\n• None Since Bot API 5.5, it’s now allowed to mention users by their ID in inline keyboards. This will only work in Telegram versions released after December 7, 2021. Older clients will display unsupported message.\n• None HTTP or tg:// url to be opened when the button is pressed. Links can be used to mention a user by their ID without using a username, if this is allowed by their privacy settings. Changed in version 13.9: You can now mention a user using .\n• None An URL used to automatically authorize the user. Can be used as a replacement for the Telegram Login Widget. Only links are allowed after Bot API 6.1.\n• None Data to be sent in a callback query to the bot when the button is pressed, UTF-8 - bytes. If the bot instance allows arbitrary callback data, anything can be passed. The value entered here will be available in .\n• None Description of the Web App that will be launched when the user presses the button. The Web App will be able to send an arbitrary message on behalf of the user using the method . Available only in private chats between a user and the bot. Not supported for messages sent on behalf of a Telegram Business account.\n• None If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot’s username and the specified inline query in the input field. May be empty, in which case just the bot’s username will be inserted. Not supported for messages sent on behalf of a Telegram Business account. This is similar to the parameter , but gives no control over which chats can be selected.\n• None If set, pressing the button will insert the bot’s username and the specified inline query in the current chat’s input field. May be empty, in which case only the bot’s username will be inserted. This offers a quick way for the user to open your bot in inline mode in the same chat - good for selecting something from multiple options. Not supported in channels and for messages sent on behalf of a Telegram Business account.\n• None Description of the button that copies the specified text to the clipboard.\n• None Description of the game that will be launched when the user presses the button This type of button must always be the first button in the first row.\n• None Specify , to send a Pay button. Substrings and in the buttons’s text will be replaced with a Telegram Star icon. This type of button must always be the first button in the first row and can only be used in invoice messages.\n• None If set, pressing the button will prompt the user to select one of their chats of the specified type, open that chat and insert the bot’s username and the specified inline query in the input field. Not supported for messages sent on behalf of a Telegram Business account. This is similar to , but gives more control on which chats can be selected. The PTB team has discovered that this field works correctly only if your Telegram client is released after April 20th 2023.\n\nOptional. Description of the Web App that will be launched when the user presses the button. The Web App will be able to send an arbitrary message on behalf of the user using the method . Available only in private chats between a user and the bot. Not supported for messages sent on behalf of a Telegram Business account.\n\nOptional. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot’s username and the specified inline query in the input field. May be empty, in which case just the bot’s username will be inserted. Not supported for messages sent on behalf of a Telegram Business account. This is similar to the parameter , but gives no control over which chats can be selected.\n\nOptional. If set, pressing the button will insert the bot’s username and the specified inline query in the current chat’s input field. May be empty, in which case only the bot’s username will be inserted. This offers a quick way for the user to open your bot in inline mode in the same chat - good for selecting something from multiple options. Not supported in channels and for messages sent on behalf of a Telegram Business account.\n\nOptional. If set, pressing the button will prompt the user to select one of their chats of the specified type, open that chat and insert the bot’s username and the specified inline query in the input field. Not supported for messages sent on behalf of a Telegram Business account. This is similar to , but gives more control on which chats can be selected. The PTB team has discovered that this field works correctly only if your Telegram client is released after April 20th 2023."
    },
    {
        "link": "https://stackoverflow.com/questions/63927835/how-to-use-telebot-module-to-create-an-inline-button-in-bot-window-which-if-cli",
        "document": "I am relatively new to python and I am trying to create a telegram bot using telebot, which will create a quiz-like game, and each user can create their own quiz-like game also. During the step by step process of creating this quiz by the user, at one point, I need them to send me a poll, just like how they create a new poll in a group. But there is no create poll button inside telegram bot as these buttons are generally found in groups and not in one-one chats. So I need to create an inline keyboard button, which upon clicking will let the users create a poll and send it to the bot. I have gone through the documentation in github and couldn't find anything useful for this.\n\nThis similar thing is implemented by telegram's own \"Quizbot\". I'll attach the screenshots from that bot for clarity. Please help me identify how to implement it in my bot.\n\nI am a noob to python and coding, so please help me with this problem.\n\nedit: I can send a poll to the bot if I am using telegram desktop and not from the phone. I want to know how to enable to use it in the phone."
    },
    {
        "link": "https://medium.com/@travilabs/building-a-simple-telegram-bot-with-buttons-using-python-0a16c52485c0",
        "document": "Creating a Telegram bot can be a rewarding experience, whether you’re building it for fun or to automate tasks. In this article, I’ll walk you through creating a basic Telegram bot with buttons using Python and the library.\n\nBefore we start, make sure you have the following:\n• Python Installed: Ensure that Python 3.7 or higher is installed on your system. You can download it from python.org.\n• Telegram Account: You’ll need a Telegram account to create and test your bot.\n• Bot Token: Obtain a bot token by creating a new bot through the BotFather on Telegram. You will receive a token to access the Telegram API.\n\nFirst, we’ll create a virtual environment to manage our project dependencies. This helps keep our project clean and avoids conflicts with other projects.\n\nOpen your terminal or command prompt and run the following commands:\n\nNext, install the library, which we'll use to interact with Telegram's API:\n\nThis command installs the latest version of the library.\n\nNow, let’s create the bot script. Open your favorite code editor and create a new file named . Copy and paste the following code into the file:\n\nLet’s break down the code to understand how it works.\n• : A standard Python library for logging messages, which helps us debug and monitor the bot's activity.\n• and : These are modules from the library used to build the bot and handle interactions.\n• : Replace with your actual bot token obtained from BotFather.\n• States ( , , ): These constants represent different stages in the conversation, helping us manage the flow.\n\nThis sets up logging with a specific format and level, allowing us to track information and errors.\n• Start Command: This handler is triggered when the user sends the command.\n• A keyboard is created with two inline buttons, “Option 1” and “Option 2”.\n• The user is prompted to choose an option, and the state is set to .\n\nButton Handler: This handles button clicks from the inline keyboard.\n• When a button is pressed, this handler determines which button was clicked based on .\n• The message is updated accordingly, and the state changes to or .\n\nCancel Handler: This allows users to cancel the operation.\n• Application Builder: Initializes the bot application with your token and configures timeout settings.\n• Conversation Handler: Manages the flow between different states using handlers for commands and messages.\n• Polling: The bot starts polling for updates from Telegram, listening for user interactions.\n\nMake sure your virtual environment is activated, and run your bot script using the following command:\n\nYour bot should now be running and waiting for interactions. Open Telegram, find your bot by username, and start a conversation with it using the command. You should see the options presented as inline buttons.\n\nIn this article, we created a basic Telegram bot with buttons using Python. We used the library to interact with the Telegram API, handle commands, and manage a simple conversation flow. This template can be expanded to add more complex interactions, additional states, and features tailored to"
    },
    {
        "link": "https://geeksforgeeks.org/keyboard-buttons-in-telegram-bot-using-python",
        "document": "One common way that we interact with the Telegram bot is through the use of keyboard buttons. These buttons give a convenient and intuitive way to input data and perform specific actions within the bot. Without keyboard buttons, we would have to manually type in commands or responses, which could be time-consuming and may lead to errors.\n\nKeyboard buttons also allow us to provide a more user-friendly and engaging experience for their users. By presenting users with clear and well-organized options, bots can guide users through complex workflows or help them quickly access the information or functionality they need.\n\nIn this article, we are going to see how to make keyboard buttons in Python with the help of the Aiogram framework.\n\nAiogram is an open-source asynchronous framework that uses asyncio and aiohttp for building telegram bots. It provides a user-friendly interface for TelegramBotApi, which makes bot development easier and faster. with the help of aiogram, we can easily implement a variety of bot functionality, including sending and receiving messages, managing user interactions with keyboard buttons, handling inline queries, and more.\n\nYou can install aiogram by using the below commands in the terminal:\n\nTypes of keyboard buttons in the Telegram Bot\n\nThere are two types of keyboard buttons that we can use to enable users to interact with the bot. They are as follows:\n\ni) ReplyKeyboardButton: This type of keyboard button is used to present a set of predefined options to the user in a reply keyboard. When the user clicks on a button, the labeled text is sent to the telegram bot as a message. It provides a simple and easy way to interact between the user and the Telegram bot.\n\nii) InlinekeyboardButton: This type of keyboard represents a button of an inline keyboard. These buttons are used to present a set of options to choose from for the users in an inline keyboard to perform a specific task. On clicking the button, the bot receives a callback.\n\nLet us see how to set up and get the API token for the Telegram Bot.\n\n1. Search for the BotFather bot by typing @BotFather in the search bar.\n\n2. Click on it to open the chat with BotFather. Then, click the “Start” button to interact with the BotFather.\n\n3. Enter the command “/newbot” to create a new bot. Then BotFather bot will guide you through the process of creating your bot, including giving your bot a name and a username.\n\nNote: The Username should always be unique and ends with “bot”.\n\n4. The above token shown in the image is going to use as a bot token and a key to access Telegram API. Make sure to copy the token and keep it safe.\n\nNote: The minimum version of Python required for using aiogram is Python 3.7 or later.\n\nYou can check the version of Python installed on your system by running the following command in your terminal or command prompt:\n\nLet us see how we can create Inline Keyboard Button in a Telegram Bot.\n\nIn this step, we import the required libraries for building InlineKeyboardButton using the aiogram library.\n• Bot: This class represents a Telegram bot and allows you to send messages, photos, videos, documents, and other types of content to Telegram users.\n• Dispatcher: This class is the central part of the aiogram library and handles incoming messages and updates from Telegram users.\n• executor: This module contains the functions that run the bot and handle incoming updates from Telegram.\n• types: This module contains all the types used in the aiogram library, such as Message, User, Chat, and CallbackQuery.\n• InlineKeyboardMarkup: This class is used to create inline keyboards in Telegram.\n• InlineKeyboardButton: This class represents a single button in an inline keyboard.\n\nStep 2: Put the token that you received from BotFather in the quotes\n\nIn this step, we create a Bot object and pass the bot token obtained from BotFather. we have already discussed how to get this bot token.\n\nIn this step, we are initializing the Dispatcher object with the Bot object that we created in the previous step. The Dispatcher object is responsible for processing incoming updates and connecting them to the appropriate handlers.\n\nIn this step, we are going to define two InlineKeyboardButton objects named button1 and button2 and add them to an InlineKeyboardMarkup object named keyboard_inline. The text attribute of each button sets the label displayed on the button, and the callback_data attribute is the data that the bot will receive when the button is pressed.\n\nIn this step, we are defining a message handler using the message_handler decorator. This handler is called whenever a user sends the “/start” command to the bot. The check function sends a message to the user with the text “hi! how are you”, and attaches the inline keyboard that we defined in the previous step using the reply_markup parameter.\n\nIn this step, we define a callback query handler using the callback_query_handler decorator. This handler is called whenever a user clicks one of the inline.\n\nIn this step, we start the bot using the start_polling method of the executor module. This method starts an infinite loop that listens for incoming updates from Telegram and passes them to the Dispatcher object for processing. The bot will continue to run until we do not terminate the program manually.\n\nHere is the entire code for InlineKeyboardButtons in Telegram Bot:\n\nLet us see how to create a Reply Keyboard Button in a Telegram Bot using the Aiogram framework.\n• Almost all modules imported for the ReplyKeyboardButton implementation are identical to Inlinekeyboards.\n• ReplyKeyboardButton is used for creating a custom keyboard with specific buttons to be sent as a reply to a user message.\n• bot setup and dispatcher are identical for both buttons.\n\nIn this step, we create a new ReplyKeyboardMarkup object and add two buttons to it with the add method. The resize_keyboard and one_time_keyboard parameters are set to True, which means that the keyboard will be resized to fit the user’s device and will only be shown once after the user selects a button.\n\nIn this step, we define a message handler function that is executed when the user sends a “/start” or “/help” command to the bot. The function sends a greeting message to the user with the reply keyboard that we created earlier.\n\nStep 5: Handling all other messages\n\n In this step, we define a message handler function that is executed for all other messages that the bot receives. The function checks the text of the user’s message and responds accordingly. If the user selected the first or second button on the reply keyboard, the bot sends a message that corresponds to the button. If the user typed any other message, the bot sends a message that includes the text of the user’s message.\n• This section is identical in both buttons, so you may refer to step 7 of InlineKeyboardButton.\n\nHere is the entire code for ReplyKeyboardButtons in Telegram Bot:"
    },
    {
        "link": "https://github.com/Badiboy/pyCryptomusAPI/blob/main/README.md",
        "document": "This library is developing for my personal needs, so it may not fully implement API. However I will continue to maintain it, so if you need some not implemented methods - just open an issue.\n\nEverything is as simple as the API itself.\n• Most methods return result as correspondent class, so you can access data as fields\n\nYou can also check tests.py."
    },
    {
        "link": "https://doc.cryptomus.com/business",
        "document": "On this page you can find out more information about the possibilities when working with the Cryptomus API. You can also see examples of requests and responses from the server\n\nIn this section you can find out the basic endpoint and basic parameters when requesting the API. Getting API keysInstructions on how to get payment and payout API key Request formatBasic information on how to make requests to the server\n\nThis section describes how to work with the SDK and third-party modules PHP SDKThis section describes how to work with the SDK and third-party modules SDKs and ModulesThis section describes how to work with the SDK and third-party modules"
    },
    {
        "link": "https://docs.coinpayments.com",
        "document": "Get Address of the Wallet by Id V2\n\nReturns currency and its current network fee on the blockchain V2\n\nGets a list of all possible currency conversions V2\n\nGet the required confirmations for each currency V2\n\nAddresses created via CoinPayments API are used as commercial addresses for commercial funds, e.g. gambler casino accounts. Hence, merchants require flexibility when accumulating and sweeping funds from such commercial addresses. UTXO addresses, by their nature, allow for accumulation of funds and, hence, reduction of network fees when withdrawing funds in bulk from such addresses. Thus, it is possible to assign UTXO addresses to the merchant (and merchant can assign specific address to a specific customer) for permanent use without any considerable loss in service fees when managing funds. As a result, CoinPayments refers to UTXO addresses created via API as permanent addresses. Account-based addresses created via CoinPayments API may be either temporary or permanent depending on the flag set up by the merchant when creating a new account-based address. CoinPayments randomly emits temporary account-based address to a merchant so that the merchant could obtain a commercial deposit from a customer. The address stays in merchant's use for a certain period of time set up by the CoinPayments admins. When the time period expires, the address returns to the pool of CoinPayments addresses. This time period is renewed in case the address is topped up again before the set time period runs out. If the address returns to the pool, the funds are automatically assigned to the corresponding merchant API wallet within which the address had been emitted. Consolidation of funds from addresses at the main wallet balance is CoinPayments responsibility in this design and allows for reduction in fees when sweeping wallet balance elsewhere. Nevertheless, some merchants might find it uncomfortable that addresses cannot be assigned permanently to specific customers. Hence, customer must always check for the correct address before sending funds to the merchant. The merchant can decide to use permanent account-based addresses if it is important to manage funds/balances deposited by their customers individually. For that, when creating a commercial wallet via API, merchant must enable the flag. Thus, all the addresses created within such wallet will be permanent. This will allow merchant to assign specific addresses to specific clients perpetually. Such design allows for better customer experience. Also, merchant can manage themselves when to sweep funds from addresses to the wallet balance and further. Address balance is always swept in full to reduce the amount of cases when a small amount of funds is stuck on the address because the fee for withdrawal equals or higher than the withdrawn amount. The tradeoff of the permanent address vs. temporary address design is fees. In order to be able to use the funds from permanent addresses, merchant first must consolidate addresses balances at some wallet balance without permanent addresses (either Primary UI balance of the currency or a wallet with temporary addresses). For this each new address created within the API wallet with permanent addresses must be activated. The activation fee is charged only once when the first withdrawal from the address takes place and the funds are swept from the address to the wallet balance. However, the network fee for further withdrawal of the consolidated funds is charged every time funds are withdrawn from the wallet. Although address activation fees lead to larger expenses at the first sweep, each repetitive withdrawal of consolidated funds from the wallet is still way cheaper compared to regular withdrawal from an account-based address."
    },
    {
        "link": "https://docs.cryptapi.io",
        "document": "CryptAPI.io is a cryptocurrency payment API It is designed with the intent to allow you to integrate multiple coin payments in your service with the least effort possible. There are no sign-ups, lengthy implementations or API keys required, it is as easy as a simple CURL request to create a new payment address. The only thing required is that you implement the logic on your server to handle the sent to your server when the transaction from the client is confirmed.\n\nThis method is used to generate a new address to give your clients, where they can send payments. Please make sure when sending a transaction you consult the minimum transfer value for the crypto/token you wish to use. If the value you send is bellow our minimums, CryptAPI will ignore the transaction. Before delving into the documentation, why not check if the libraries already have the functionality you need? It could save you time and effort in the long run! Notice: The length of this request can't surpass the characters! \n\n The parameter in this CryptAPI request refers to the unique identifier of the cryptocurrency to which you are making the request. It is included in the URL of the request and helps to specify the exact cryptocurrency that you want to retrieve data for. The ticker is typically a short code that uniquely identifies the cryptocurrency, token, and its blockchain. Theparameter in this CryptAPI request refers to the unique identifier of the cryptocurrency to which you are making the request. It is included in the URL of the request and helps to specify the exact cryptocurrency that you want to retrieve data for. The ticker is typically a short code that uniquely identifies the cryptocurrency, token, and its blockchain. For instance, the ticker for Bitcoin is , and the ticker for USDT over TRC-20 is . With this in mind, a request for USDT over TRC-20 would look like this:\n• Currently supported cryptocurrencies/tokens can be checked on the cryptocurrencies page. \n\n The URL where the callbacks will be sent to. Must be a valid URL. The URL where the callbacks will be sent to. Must be a valid URL.\n• The callback URL is a unique identifier that is used to generate a new . You can make your callback URL unique by adding parameters, such as . These will also be returned in the callbacks.\n• You can reuse callback URLs if you want to create a reusable deposit . However, if you change the , CryptAPI systems will not change the . You will need to change your callback URL to generate a new .\n• We advise you to URL encode the callback URL so that the parameters are not lost.\n• parameters that you add to the callback URL will be sent as , even if you enable the parameter.\n• It is advisable to store the callback URL when creating a new payment if you want to use the logs endpoint later.\n• For more information on callbacks, please refer to our callback documentation. \n\n Address(es) where the payment will be forwarded to. Address(es) where the payment will be forwarded to. If using multiple addresses (you may use up to addresses), you must use the following format . Percentages are set from 0.0001 (0.01%) to 1.0 (100%) and must add up to 1.00 (100%). Addresses must be valid for the ticker you are using. Otherwise, the API will reject the payment. For example, if you try to use a Bitcoin address while requesting a USDT TRC-20 address, the API will throw an error.\n• For multiple addresses the minimum value per transaction (see cryptocurrencies page) is multiplied by the following formula: , where N is the number of output addresses.\n• Check our knowledge base for more information about multi-address minimums. \n\n Set the parameter to to enable this feature. When enabled you will be notified of pending transactions (were sent by the customer but not yet confirmed by the blockchain). Set the parameter toto enable this feature. When enabled you will be notified of pending transactions (were sent by the customer but not yet confirmed by the blockchain).\n• To avoid receiving multiple callback requests, please ensure that the response to the callback request is a plain text response with the message .\n• For a comprehensive list of fields sent by CryptAPI, please refer to our pending callback documentation. \n\n To determine the number of blockchain confirmations required before receiving the \n\n Min: To determine the number of blockchain confirmations required before receiving the confirmed callback , you need to specify the desired value.Min: \n\n E-mail address to receive payment notifications\n• Before getting e-mail payment notifications, you must confirm your e-mail address here. \n\n Set this to to enable this feature. When enabled callback will be sent as . Set this toto enable this feature. When enabled callback will be sent as When disabled, will default to .\n• parameters you added to the URL will still be sent as .\n• Not compatible with the json parameter. \n\n Set this to to enable. If enabled the callback body will be sent as . Set this toto enable. If enabled the callback body will be sent as If disabled, will default to .\n• parameters you added to the URL will still be sent as .\n• Not compatible with the post parameter. \n\n Provides you with the ability to specify for forwarding funds to the designated Provides you with the ability to specify for forwarding funds to the designated . It determines the level of fees paid to the blockchain network and can impact the speed at which the transaction is confirmed.\n• This feature is only supported when using Bitcoin, Ethereum/ERC-20, and Litecoin. Priorities are different per currency/network.\n• The priorities applicable to each specific blockchain can be found in our knowledge base. \n\n This feature allows customers to make payments using any token supported by the CryptAPI, even if the token differs from the one initially specified by the user. This feature allows customers to make payments using any token supported by the CryptAPI, even if the token differs from the one initially specified by the user. However, it is important to ensure that your Wallet supports the tokens you expect customers to pay with, and that your system can handle price conversions. For instance, if a customer wants to receive 1000 USDT (or its equivalent), but a client sends 1000 TRX, your system should be able to handle this scenario.\n• Prior to enabling this parameter, make sure that the wallet you are using supports all the tokens supported by CryptAPI.\n• If you are using a deposit address from your preferred exchange to receive funds, it is advisable to leave this parameter disabled. This is because deposit addresses may sometimes differ between blockchains and tokens.\n• By default, this parameter is disabled. To enable it, use the value multi_token=1.\n• This feature is only available for TRC-20, and EVM-based blockchains.\n• If this parameter is disabled and the customer sends a different token than the one initially specified, CryptAPI will ignore those funds.\n• On unsupported blockchains, if this parameter is enabled, the API will not throw an error. Instead, it will simply ignore it.\n• For more information about this parameter, please refer to our knowledge base. \n\n When enabled, returns the converted value converted to FIAT in the callback, with the parameters When enabled, returns the converted value converted to FIAT in the callback, with the parameters and\n• By default, this parameter is disabled. To enable it, use .\n• The value of the fields are json-encoded. \n\n Address generated by CryptAPI. You must provide it to your customer in order to receive payments. \n\n Your address(es), where the payment will be forwarded to, should be the same address(es) you provided. \n\n The minimum transaction value coin. All the minimums can be found at our The minimum transaction value coin. All the minimums can be found at our cryptocurrencies page.\n\n\n\n This method provides valuable information and callbacks for addresses that are created through the This method provides valuable information and callbacks for addresses that are created through the endpoint. It allows users to retrieve a list of callbacks made at the specified parameter, allows to track payment activity and troubleshoot any issues that may arise. \n\n The parameter in this CryptAPI request refers to the unique identifier of the cryptocurrency to which you are making the request. It is included in the URL of the request and helps to specify the exact cryptocurrency that you want to retrieve data for. The ticker is typically a short code that uniquely identifies the cryptocurrency, token, and its blockchain. Theparameter in this CryptAPI request refers to the unique identifier of the cryptocurrency to which you are making the request. It is included in the URL of the request and helps to specify the exact cryptocurrency that you want to retrieve data for. The ticker is typically a short code that uniquely identifies the cryptocurrency, token, and its blockchain. For instance, the ticker for Bitcoin is , and the ticker for USDT over TRC-20 is . With this in mind, a request for USDT over TRC-20 would look like this:\n• Currently supported cryptocurrencies/tokens can be checked on the cryptocurrencies page. \n\n The URL of the callback. Must match the callback URL provided during the payment creation process. The URL of the callback. Must match the callback URL provided during the payment creation process.\n• It is recommended to store the URL when creating a new payment address if you plan to use this endpoint later.\n• It is advisable to URL encode the URL when making the request. However, if you are using one of our libraries, there is no need for URL encoding. List of payments sent to this callback. \n\n Your address(es), where the payment will be forwarded to, should be the same address(es) you provided. Your address(es), where the payment will be forwarded to, should be the same address(es) you provided. \n\n Status of the request. Should be `success` if the request didn't fail. \n\n Shows if you enabled the Shows if you enabled the pending callback when creating the address. Number of confirmations required before sending the confirmed callback. \n\n List of payments made to this address, together with the logs of the callbacks to your system. Your request couldn't be processed, please try again later No request or no payment callbacks found\n\n\n\n The parameter in this CryptAPI request refers to the unique identifier of the cryptocurrency to which you are making the request. It is included in the URL of the request and helps to specify the exact cryptocurrency that you want to retrieve data for. The ticker is typically a short code that uniquely identifies the cryptocurrency, token, and its blockchain. Theparameter in this CryptAPI request refers to the unique identifier of the cryptocurrency to which you are making the request. It is included in the URL of the request and helps to specify the exact cryptocurrency that you want to retrieve data for. The ticker is typically a short code that uniquely identifies the cryptocurrency, token, and its blockchain. For instance, the ticker for Bitcoin is , and the ticker for USDT over TRC-20 is . With this in mind, a request for USDT over TRC-20 would look like this:\n• Currently supported cryptocurrencies/tokens can be checked on the cryptocurrencies page. \n\n The payment address ( The payment address ( from our system). \n\n Value to request the user. Not mandatory and can be left empty. Value to request the user. Not mandatory and can be left empty.\n• If the value is left empty, the resulting QR code will only contain the address.\n• It's worth noting that the parameter might not work in most exchanges and some wallets (works with Trust and Exodus wallets). Some user wallets or exchanges will only read the address and will not process the value field (usually they paste the address and amount in the address field, causing confusion to the customer). Therefore, it is recommended to use the value field at your own discretion. \n\n Size of the QR Code image in pixels.\n\n Min: \n\n Max: \n\n Status of the request. Should be if the request didn't fail. \n\n Base64-encoded image of the QR Code. Here is an example of how to use this:\n\n You may use it in every situation where is supported, just don't forget to add before the . \n\n Payment URI useful if you want to make a clickable button.\n\n\n\n This method allows you to estimate blockchain fees to process a transaction. This method allows you to estimate blockchain fees to process a transaction.\n• This is an estimation only, and might change significantly when the transaction is processed. CryptAPI is not responsible if blockchain fees when forwarding the funds differ from this estimation. \n\n The parameter in this CryptAPI request refers to the unique identifier of the cryptocurrency to which you are making the request. It is included in the URL of the request and helps to specify the exact cryptocurrency that you want to retrieve data for. The ticker is typically a short code that uniquely identifies the cryptocurrency, token, and its blockchain. Theparameter in this CryptAPI request refers to the unique identifier of the cryptocurrency to which you are making the request. It is included in the URL of the request and helps to specify the exact cryptocurrency that you want to retrieve data for. The ticker is typically a short code that uniquely identifies the cryptocurrency, token, and its blockchain. For instance, the ticker for Bitcoin is , and the ticker for USDT over TRC-20 is . With this in mind, a request for USDT over TRC-20 would look like this:\n• Currently supported cryptocurrencies/tokens can be checked on the cryptocurrencies page. \n\n The number of addresses to forward the funds to. Should be the same you set in the The number of addresses to forward the funds to. Should be the same you set in the parameter.\n• Blockchain fees will increase with the number of addresses. \n\n This parameter enables you to specify the priority for forwarding funds to the given address. It determines the level of fees paid to the blockchain network and can impact the speed of transaction confirmation. It's important to note that the priority value varies depending on the currency/network. This parameter enables you to specify the priority for forwarding funds to the given. It determines the level of fees paid to the blockchain network and can impact the speed of transaction confirmation. It's important to note that the priority value varies depending on the currency/network.\n• You can refer to our knowledge base to find the specific priorities to use with this endpoint for each blockchain.\n• This feature is supported only when utilizing Bitcoin, Ethereum/ERC-20, and Litecoin. \n\n Estimated transaction cost in the blockchain’s native cryptocurrency.\n• For instance, transactions on the Bitcoin network will have fees estimated in BTC, whereas transactions using USDT on the TRC20 (Tron) network will have fees estimated in TRX.\n• You can also visit our cryptocurrencies page for a quick estimate of blockchain fees. \n\n Object with the estimated cost in various FIAT currencies. Object with the estimated cost in various FIAT currencies. Keys are the names of the currencies, values are the estimated costs. In case your desired FIAT currency is not included in the list of supported currencies, please don't hesitate to reach out to us so that we can add it to our service: Your request couldn't be processed, please try again later\n\nThis method allows for seamless conversion of prices between FIAT currencies and cryptocurrencies, as well as between different cryptocurrencies. Note:\n• Prices are fetched every 5 minutes from CoinMarketCap. \n\n The parameter in this CryptAPI request refers to the unique identifier of the cryptocurrency to which you are making the request. It is included in the URL of the request and helps to specify the exact cryptocurrency that you want to retrieve data for. The ticker is typically a short code that uniquely identifies the cryptocurrency, token, and its blockchain. Theparameter in this CryptAPI request refers to the unique identifier of the cryptocurrency to which you are making the request. It is included in the URL of the request and helps to specify the exact cryptocurrency that you want to retrieve data for. The ticker is typically a short code that uniquely identifies the cryptocurrency, token, and its blockchain. For instance, the ticker for Bitcoin is , and the ticker for USDT over TRC-20 is . With this in mind, a request for USDT over TRC-20 would look like this:\n• Currently supported cryptocurrencies/tokens can be checked on the cryptocurrencies page. \n\n The value that you intend to convert, using the cryptocurrency or token associated with the ticker you are utilizing. Specify the type of currency you wish to convert, whether it is a FIATs currency or a cryptocurrency. For a complete list of the cryptocurrencies we support, please refer to our cryptocurrencies page. In case your desired FIAT currency is not included in the list of supported currencies, please don't hesitate to reach out to us so that we can add it to our service: Converted value for the selected currencies. The exchange rate between the 2 currencies. Your request couldn't be processed, please try again later\n\nThese callbacks are dispatched by our API to your platform when a user sends a payment to the address generated by our system. Your platform should be ready to handle these callbacks which are requests made to the URL provided in the parameter. Each callback is sent with an additional header, . This is a base64-encoded 1024-bit RSA-SHA256 signature of the callback. The specific data signed depends on the type of callback you're receiving. For callbacks sent via GET, the entire request URL to your system (including all GET parameters) is signed. If the callback is sent via POST, then the entire body of the request is signed. The for verification can be retrieved from this this endpoint. Check our knowledge base to learn how to verify the callback with code samples. CryptAPI will stop sending callbacks under one of these two circumstances:\n• If the your system responds with an message or an HTTP 200 status code, indicating that the callback has been successfully received and processed.\n• In case your system fails to response successfully to the callback, our API will retry sending the callback in a specific timing. Regarding the timing of these callbacks, we employ an exponential backoff strategy. Initially, the system waits for 6 minutes before making the first retry attempt. With each subsequent attempt, this wait time doubles, hence increasing the time between attempts in an exponential manner until the transaction is older than 3 days. Every time funds are received in a generated address, callbacks are sent. If you are experiencing difficulties receiving our callbacks, it could be attributed to the following reasons:\n• Incorrect Token Sent: It is possible that you sent the wrong token to the address. For instance, if you created a USDt transaction but mistakenly sent TRX to the address, our system would disregard the transaction.\n• Unreachable Callback URL: The callback URL you provided in the parameter may not be accessible online. It is essential to ensure that the URL is reachable and functional.\n• Security System Interference: Your platform might have a security system, such as Cloudflare protection, in place. This security system could be preventing our callbacks from reaching your platform. Note: To avoid any issues with the callbacks, we strongly recommend whitelisting our server IPs. The IPs that should be whitelisted are: and\n\nCallback issued when a client's transaction has been confirmed by the network. \n\n This is an unique identifier to each payment your clients have made, so you can easily track any duplicate callbacks sent, in the case our system doesn't mark the callback as successful. \n\n Address generated by CryptAPI, where your customer sent the payment. \n\n Transaction hash of the payment forwarded to your address(es) by CryptAPI. \n\n Number of blockchain confirmations of the current transaction. Number of blockchain confirmations of the current transaction.\n• This parameter will only appear in the confirmed callback. \n\n This is the payment amount sent by your customer prior to deducting any fees. This is the payment amount sent by your customer prior to deducting any fees.\n• To get the amount after fees you should use this parameter: \n\n Converted value to various FIAT currencies of the Converted value to various FIAT currencies of the\n• This parameter will only be shown if added the parameter in the /create/ endpoint. \n\n Value forwarded to you, after fees deducted. \n\n Converted value to various FIAT currencies of the Converted value to various FIAT currencies of the\n• This parameter will only be shown if added the parameter in the /create/ endpoint. \n\n Ticker of the coin used for the payment: ['btc', 'bch', 'ltc'', 'eth', 'trx'] Ticker of the coin used for the payment: ['btc', 'bch', 'ltc'', 'eth', 'trx'] For ERC-20 (ETH) Tokens, this parameter will be + the ticker of the token, e.g For TRC-20 (Tron) Tokens, this parameter will be + the ticker of the token, e.g For BEP-20 (BSC) Tokens, this parameter will be + the ticker of the token, e.g For Polygon Tokens, this parameter will be + the ticker of the token, e.g \n\n Coin price in USD at the time of the callback. \n\n Being the confirmed callback, this value should be . Being the confirmed callback, this value should be Payment was confirmed by the blockchain. The callback will be marked as successful when it receives the following response from your server."
    }
]