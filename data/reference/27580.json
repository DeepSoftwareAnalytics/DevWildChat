[
    {
        "link": "https://doc.qt.io/qt-6/stylesheet-examples.html",
        "document": "We will now see a few examples to get started with using Qt Style Sheets.\n\nLet's start by setting yellow as the background color of all QLineEdits in an application. This could be achieved like this:\n\nIf we want the property to apply only to the QLineEdits that are children (or grandchildren or grand-grandchildren) of a specific dialog, we would rather do this:\n\nIf we want the property to apply only to one specific QLineEdit, we can give it a name using QObject::setObjectName() and use an ID Selector to refer to it:\n\nAlternatively, we can set the background-color property directly on the QLineEdit, omitting the selector:\n\nTo ensure a good contrast, we should also specify a suitable color for the text:\n\nIt might be a good idea to change the colors used for selected text as well:\n\nThere are many situations where we need to present a form that has mandatory fields. To indicate to the user that the field is mandatory, one effective (albeit esthetically dubious) solution is to use yellow as the background color for those fields. It turns out this is very easy to implement using Qt Style Sheets. First, we would use the following application-wide style sheet:\n\nThis means that every widget whose Qt property is set to true would have a yellow background.\n\nThen, for each mandatory field widget, we would simply create a property on the fly and set it to true. For example:\n\nThis time, we will show how to create a red QPushButton. This QPushButton would presumably be connected to a very destructive piece of code.\n\nFirst, we are tempted to use this style sheet:\n\nHowever, the result is a boring, flat button with no borders:\n\nWhat happened is this:\n• We have made a request that cannot be satisfied using the native styles alone (e.g., the Windows Vista theme engine doesn't let us specify the background color of a button).\n• Therefore, the button is rendered using style sheets.\n• We haven't specified any values for border-width and border-style, so by default we obtain a 0-pixel wide border of style .\n\nLet's improve the situation by specifying a border:\n\nThings look already a lot better. But the button looks a bit cramped. Let's specify some spacing between the border and the text using the padding. Additionally, we will enforce a minimum width, round the corners, and specify a larger font to make the button look nicer:\n\nThe only issue remaining is that the button doesn't react when we press it. We can fix this by specifying a slightly different background color and use a different border style.\n\nSubcontrols give access to the sub-elements of a widget. For example, a QPushButton associated with a menu (using QPushButton::setMenu()) has a menu indicator. Let's customize the menu indicator for the red push button:\n\nBy default, the menu indicator is located at the bottom-right corner of the padding rectangle. We can change this by specifying subcontrol-position and subcontrol-origin to anchor the indicator differently. We can also use top and left to move the indicator by a few pixels. For example:\n\nThis positions the to the center right of the QPushButton's padding rectangle (see subcontrol-origin for more information).\n\nSince red seems to be our favorite color, let's make the text in QLineEdit red by setting the following application-wide stylesheet:\n\nHowever, we would like to give a visual indication that a QLineEdit is read-only by making it appear gray:\n\nAt some point, our design team comes with the requirement that all QLineEdits in the registration form (with the object name ) to be brown:\n\nA few UI design meetings later, we decide that all our QDialogs should have brown colored QLineEdits:\n\nQuiz: What happens if we have a read-only QLineEdit in a QDialog? [Hint: The Conflict Resolution section above explains what happens in cases like this.]\n\nThis section provides examples to customize specific widgets using Style Sheets.\n\nThe background of any QAbstractScrollArea (Item views, QTextEdit and QTextBrowser) can be set using the background properties. For example, to set a background-image that scrolls with the scroll bar:\n\nIf the background-image is to be fixed with the viewport:\n\nStyling of a QCheckBox is almost identical to styling a QRadioButton. The main difference is that a tristate QCheckBox has an indeterminate state.\n\nWe will look at an example where the drop down button of a QComboBox appears \"merged\" with the combo box frame.\n\nThe pop-up of the QComboBox is a QAbstractItemView and is styled using the descendant selector:\n\nThe title bar and the buttons of a QDockWidget can be customized as follows:\n\nIf one desires to move the dock widget buttons to the left, the following style sheet can be used:\n\nA QFrame is styled using the The Box Model.\n\nLet us look at an example that moves the QGroupBox's title to the center.\n\nFor a checkable QGroupBox, use the {#indicator-sub}{::indicator} subcontrol and style it exactly like a QCheckBox (i.e)\n\nQHeaderView is customized as follows:\n\nThe frame of a QLineEdit is styled using the The Box Model. To create a line edit with rounded corners, we can set:\n\nThe password character of line edits that have QLineEdit::Password echo mode can be set using:\n\nThe background of a read only QLineEdit can be modified as below:\n\nThe background color of alternating rows can be customized using the following style sheet:\n\nTo provide a special background when you hover over items, we can use the ::item subcontrol. For example,\n\nThe separator of a QMainWindow can be styled as follows:\n\nIndividual items of a QMenu are styled using the 'item' subcontrol as follows:\n\nFor a more advanced customization, use a style sheet as follows:\n\nQMenuBar is styled as follows:\n\nThe QProgressBar's border, chunk, and text-align can be customized using style sheets. However, if one property or sub-control is customized, all the other properties or sub-controls must be customized as well.\n\nFor example, we change the border to grey and the chunk to cerulean.\n\nThis leaves the text-align, which we customize by positioning the text in the center of the progress bar.\n\nA margin can be included to obtain more visible chunks.\n\nIn the screenshot above, we use a margin of 0.5 pixels.\n\nA QPushButton is styled as follows:\n\nFor a QPushButton with a menu, use the ::menu-indicator subcontrol.\n\nThe indicator of a QRadioButton can be changed using:\n\nThe QScrollBar can be styled using its subcontrols like handle, add-line, sub-line, and so on. Note that if one property or sub-control is customized, all the other properties or sub-controls must be customized as well.\n\nThe scroll bar above has been styled in aquamarine with a solid grey border.\n\nThe left-arrow and right-arrow have a solid grey border with a white background. As an alternative, you could also embed the image of an arrow.\n\nIf you want the scroll buttons of the scroll bar to be placed together (instead of the edges) like on macOS, you can use the following stylesheet:\n\nThe scroll bar using the above stylesheet looks like this:\n\nTo customize a vertical scroll bar use a style sheet similar to the following:\n\nQSizeGrip is usually styled by just setting an image.\n\nYou can style horizontal slider as below:\n\nIf you want to change the color of the slider parts before and after the handle, you can use the add-page and sub-page subcontrols. For example, for a vertical slider:\n\nQSpinBox can be completely customized as below (the style sheet has commentary inline):\n\nA QSplitter derives from a QFrame and hence can be styled like a QFrame. The grip or the handle is customized using the ::handle subcontrol.\n\nWe can provide a background for the status bar and a border for items inside the status bar as follows:\n\nNote that widgets that have been added to the QStatusBar can be styled using the descendant declaration (i.e)\n\nFor the screenshot above, we need a stylesheet as follows:\n\nOften we require the tabs to overlap to look like below:\n\nFor a tab widget that looks like above, we make use of negative margins. Negative values draw the element closer to its neighbors than it would be by default. The resulting stylesheet looks like this:\n\nTo move the tab bar to the center (as below), we require the following stylesheet:\n\nThe tear indicator and the scroll buttons can be further customized as follows:\n\nSince Qt 4.6 the close button can be customized as follow:\n\nSuppose we'd like our selected item in QTableView to have bubblegum pink fade to white as its background.\n\nThis is possible with the selection-background-color property and the syntax required is:\n\nThe corner widget can be customized using the following style sheet\n\nThe QTableView's checkbox indicator can also be customized. In the following snippet the indicator in unchecked state is customized:\n\nThe background and the handle of a QToolBar is customized as below:\n\nThe tabs of the QToolBox are customized using the 'tab' subcontrol.\n\nThere are three types of QToolButtons.\n• The QToolButton has no menu. In this case, the QToolButton is styled exactly like QPushButton. See Customizing QPushButton for an example.\n• The QToolButton has a menu and has the QToolButton::popupMode set to QToolButton::DelayedPopup or QToolButton::InstantPopup. In this case, the QToolButton is styled exactly like a QPushButton with a menu. See Customizing QPushButton for an example of the usage of the menu-indicator pseudo state.\n• The QToolButton has its QToolButton::popupMode set to QToolButton::MenuButtonPopup. In this case, we style it as follows:\n\nQToolTip is customized exactly like a QLabel. In addition, for platforms that support it, the opacity property may be set to adjust the opacity.\n\nThe background color of alternating rows can be customized using the following style sheet:\n\nTo provide a special background when you hover over items, we can use the ::item subcontrol. For example,\n\nThe branches of a QTreeView are styled using the ::branch subcontrol. The following stylesheet color codes the various states when drawing a branch.\n\nColorful, though it is, a more useful example can be made using the following images:\n\nThe resulting tree view looks like this:\n\nThis section lists some common mistakes when using stylesheets.\n\nWhen styling a QPushButton, it is often desirable to use an image as the button graphic. It is common to try the background-image property, but this has a number of drawbacks: For instance, the background will often appear hidden behind the button decoration, because it is not considered a background. In addition, if the button is resized, the entire background will be stretched or tiled, which does not always look good.\n\nIt is better to use the border-image property, as it will always display the image, regardless of the background (you can combine it with a background if it has alpha values in it), and it has special settings to deal with button resizing.\n\nConsider the following snippet:\n\nThis will produce a button looking like this:\n\nThe numbers after the url gives the top, right, bottom and left number of pixels, respectively. These numbers correspond to the border and should not stretch when the size changes. Whenever you resize the button, the middle part of the image will stretch in both directions, while the pixels specified in the stylesheet will not. This makes the borders of the button look more natural, like this:"
    },
    {
        "link": "https://stackoverflow.com/questions/67212507/pyqt-how-to-use-the-setstylesheet-method-properly",
        "document": "if I use the method in order to change the style for a specific widget, the other ones placed inside it, changes their style, but I don't want it! I can bring you two example:\n\nwhen I change the border/background color for a frame (see the widgets placed inside it):\n\nor when I change the border color for a treeview widget (the scrolled treeview widget is became white):\n\nmy question is, how can I change the style of a specific widget without modifying the style of the other ones?\n\nin my first example, if I don't use the instruction I realized that the progress bar widget doesn't expand as before. see this screenshot:\n\nwhat is the issue?"
    },
    {
        "link": "https://doc.qt.io/qt-6/stylesheet-reference.html",
        "document": "Qt Style Sheets support various properties, pseudo-states, and subcontrols that make it possible to customize the look of widgets.\n\nThe following table lists the Qt widgets that can be customized using style sheets:\n\nThis section lists all the properties supported by Qt Style Sheets. Which values can be given to a property depend on the property's type. Unless otherwise specified, the following properties apply to all widgets. Properties marked with an asterisk * are specific to Qt and have no equivalent in CSS2 or CSS3. The Qt-specific properties are the following:\n\nThe property sets the , which is used to emphasize interactive UI elements. If this property is not set, it defaults to the color.\n\nThe alternate background color used in QAbstractItemView subclasses.\n\nIf this property is not set, the default value is whatever is set for the palette's AlternateBase role.\n\nSee also background and selection-background-color.\n\nShorthand notation for setting the background. Equivalent to specifying , , , and/or .\n\nThis property is supported by QAbstractItemView subclasses, QAbstractSpinBox subclasses, QCheckBox, QComboBox, QDialog, QFrame, QGroupBox, QLabel, QLineEdit, QMenu, QMenuBar, QPushButton, QRadioButton, QSplitter, QTextEdit, QToolTip, and plain QWidgets.\n\nOften, it is required to set a fill pattern similar to the styles in Qt::BrushStyle. You can use the background-color property for Qt::SolidPattern, Qt::RadialGradientPattern, Qt::LinearGradientPattern and Qt::ConicalGradientPattern. The other patterns are easily achieved by creating a background image that contains the pattern.\n\nSee also background-origin, selection-background-color, background-clip, background-attachment and alternate-background-color.\n\nThe background color used for the widget.\n\nThe background image used for the widget. Semi-transparent parts of the image let the shine through.\n\nWhether and how the background image is repeated to fill the rectangle.\n\nIf this property is not specified, the background image is repeated in both directions ( ).\n\nThe alignment of the background image within the rectangle.\n\nIf this property is not specified, the alignment is .\n\nDetermines whether the background-image in a QAbstractScrollArea is scrolled or fixed with respect to the viewport. By default, the background-image scrolls with the viewport.\n\nThe widget's rectangle, in which the is drawn.\n\nThis property specifies the rectangle to which the and are clipped.\n\nThis property is supported by QAbstractItemView subclasses, QAbstractSpinBox subclasses, QCheckBox, QComboBox, QDialog, QFrame, QGroupBox, QLabel, QPushButton, QRadioButton, QSplitter, QTextEdit, QToolTip, and plain QWidgets.\n\nIf this property is not specified, the default is .\n\nSee also background, background-origin and The Box Model.\n\nThe widget's background rectangle, to use in conjunction with and .\n\nThis property is supported by QAbstractItemView subclasses, QAbstractSpinBox subclasses, QCheckBox, QComboBox, QDialog, QFrame, QGroupBox, QLabel, QPushButton, QRadioButton, QSplitter, QTextEdit, QToolTip, and plain QWidgets.\n\nIf this property is not specified, the default is .\n\nSee also background and The Box Model.\n\nShorthand notation for setting the widget's border. Equivalent to specifying , , and/or .\n\nThis property is supported by QAbstractItemView subclasses, QAbstractSpinBox subclasses, QCheckBox, QComboBox, QFrame, QGroupBox, QLabel, QLineEdit, QMenu, QMenuBar, QPushButton, QRadioButton, QSplitter, QTextEdit, QToolTip, and plain QWidgets.\n\nShorthand notation for setting the widget's top border. Equivalent to specifying , , and/or .\n\nShorthand notation for setting the widget's right border. Equivalent to specifying , , and/or .\n\nShorthand notation for setting the widget's bottom border. Equivalent to specifying , , and/or .\n\nShorthand notation for setting the widget's left border. Equivalent to specifying , , and/or .\n\nThe color of all the border's edges. Equivalent to specifying , , , and .\n\nThis property is supported by QAbstractItemView subclasses, QAbstractSpinBox subclasses, QCheckBox, QComboBox, QFrame, QGroupBox, QLabel, QLineEdit, QMenu, QMenuBar, QPushButton, QRadioButton, QSplitter, QTextEdit, QToolTip, and plain QWidgets.\n\nIf this property is not specified, it defaults to color (i.e., the widget's foreground color).\n\nSee also border-style, border-width, border-image, and The Box Model.\n\nThe color of the border's top edge.\n\nThe color of the border's right edge.\n\nThe color of the border's bottom edge.\n\nThe color of the border's left edge.\n\nThe image used to fill the border. The image is cut into nine parts and stretched appropriately if necessary. See Border Image for details.\n\nThis property is supported by QAbstractItemView subclasses, QAbstractSpinBox subclasses, QCheckBox, QComboBox, QFrame, QGroupBox, QLabel, QLineEdit, QMenu, QMenuBar, QPushButton, QRadioButton, QSplitter, QTextEdit and QToolTip.\n\nSee also border-color, border-style, border-width, and The Box Model.\n\nThe radius of the border's corners. Equivalent to specifying , , , and .\n\nThis property is supported by QAbstractItemView subclasses, QAbstractSpinBox subclasses, QCheckBox, QComboBox, QFrame, QGroupBox, QLabel, QLineEdit, QMenu, QMenuBar, QPushButton, QRadioButton, QSplitter, QTextEdit, and QToolTip.\n\nIf this property is not specified, it defaults to 0.\n\nSee also border-width and The Box Model.\n\nThe radius of the border's top-left corner.\n\nThe radius of the border's top-right corner.\n\nThe radius of the border's bottom-right corner. Setting this property to a positive value results in a rounded corner.\n\nThe radius of the border's bottom-left corner. Setting this property to a positive value results in a rounded corner.\n\nThe style of all the border's edges.\n\nThis property is supported by QAbstractItemView subclasses, QAbstractSpinBox subclasses, QCheckBox, QComboBox, QFrame, QGroupBox, QLabel, QLineEdit, QMenu, QMenuBar, QPushButton, QRadioButton, QSplitter, QTextEdit, and QToolTip.\n\nIf this property is not specified, it defaults to .\n\nSee also border-color, border-style, border-image, and The Box Model.\n\nThe style of the border's top edge.\n\nThe style of the border's right edge.\n\nThe style of the border's bottom edge.\n\nThe style of the border's left edge.\n\nThe width of the border. Equivalent to setting , , , and .\n\nThis property is supported by QAbstractItemView subclasses, QAbstractSpinBox subclasses, QCheckBox, QComboBox, QFrame, QGroupBox, QLabel, QLineEdit, QMenu, QMenuBar, QPushButton, QRadioButton, QSplitter, QTextEdit, and QToolTip.\n\nSee also border-color, border-radius, border-style, border-image, and The Box Model.\n\nThe width of the border's top edge.\n\nThe width of the border's right edge.\n\nThe width of the border's bottom edge.\n\nThe width of the border's left edge.\n\nIf position is (the default), moves a subcontrol by a certain offset up; specifying is then equivalent to specifying .\n\nIf position is , the property specifies the subcontrol's bottom edge in relation to the parent's bottom edge (see also subcontrol-origin).\n\nSee also left, right, and top.\n\nThe layout of buttons in a QDialogButtonBox or a QMessageBox. The possible values are 0 (WinLayout), 1 (MacLayout), 2 (KdeLayout), 3 (GnomeLayout) and 5 (AndroidLayout).\n\nIf this property is not specified, it defaults to the value specified by the current style for the SH_DialogButtonLayout style hint.\n\nThe color used to render text.\n\nThis property is supported by all widgets that respect the QWidget::palette.\n\nIf this property is not set, the default is whatever is set for in the widget's palette for the QWidget::foregroundRole (typically black).\n\nSee also background and selection-color.\n\nWhether the buttons in a QDialogButtonBox show icons\n\nIf this property is set to 1, the buttons of a QDialogButtonBox show icons; if it is set to 0, the icons are not shown.\n\nSee the List of Icons section for information on how to set icons.\n\nShorthand notation for setting the text's font. Equivalent to specifying , , , and/or .\n\nThis property is supported by all widgets that respect the QWidget::font.\n\nIf this property is not set, the default is the QWidget::font.\n\nThe font size. In this version of Qt, only pt and px metrics are supported.\n\nThe weight of the font.\n\nThe color of the grid line in a QTableView.\n\nIf this property is not specified, it defaults to the value specified by the current style for the SH_Table_GridLineColor style hint.\n\nThe height of a subcontrol (or in some case, a widget).\n\nIf this property is not specified, it defaults to a value that depends on the subcontrol/widget and on the current style.\n\nThe icon that is used, for widgets that have an icon.\n\nThe only widget currently supporting this property is QPushButton.\n\nThe width and height of the icon in a widget.\n\nThe icon size of the following widgets can be set using this property.\n\nThe image that is drawn in the contents rectangle of a subcontrol.\n\nThe image property accepts a list of Urls or an . The actual image that is drawn is determined using the same algorithm as QIcon (i.e) the image is never scaled up but always scaled down if necessary. If a is specified, the image is scaled to the size of the contents rectangle.\n\nSetting the image property on sub controls implicitly sets the width and height of the sub-control (unless the image in a SVG).\n\nIn Qt 4.3 and later, the alignment of the image within the rectangle can be specified using image-position.\n\nThis property is for subcontrols only–we don't support it for other elements.\n\nIn Qt 4.3 and later, the alignment of the image image's position can be specified using relative or absolute position.\n\nIf position is (the default), moves a subcontrol by a certain offset to the right.\n\nIf position is , the property specifies the subcontrol's left edge in relation to the parent's left edge (see also subcontrol-origin).\n\nIf this property is not specified, it defaults to .\n\nSee also right, top, and bottom.\n\nIf this property is not specified, it defaults to the value specified by the current style for the SH_LineEdit_PasswordCharacter style hint.\n\nThe QLineEdit password mask delay in milliseconds before lineedit-password-character is applied to visible character.\n\nIf this property is not specified, it defaults to the value specified by the current style for the SH_LineEdit_PasswordMaskDelay style hint.\n\nThe widget's margins. Equivalent to specifying , , , and .\n\nThis property is supported by QAbstractItemView subclasses, QAbstractSpinBox subclasses, QCheckBox, QComboBox, QFrame, QGroupBox, QLabel, QLineEdit, QMenu, QMenuBar, QPushButton, QRadioButton, QSplitter, QTextEdit, and QToolTip.\n\nIf this property is not specified, it defaults to .\n\nSee also padding, spacing, and The Box Model.\n\nThis property is supported by QAbstractItemView subclasses, QAbstractSpinBox subclasses, QCheckBox, QComboBox, QFrame, QGroupBox, QLabel, QLineEdit, QMenu, QMenuBar, QPushButton, QRadioButton, QSizeGrip, QSpinBox, QSplitter, QStatusBar, QTextEdit, and QToolTip.\n\nThe value is relative to the contents rect in the box model.\n\nThis property is supported by QAbstractItemView subclasses, QAbstractSpinBox subclasses, QCheckBox, QComboBox, QFrame, QGroupBox, QLabel, QLineEdit, QMenu, QMenuBar, QPushButton, QRadioButton, QSizeGrip, QSpinBox, QSplitter, QStatusBar, QTextEdit, and QToolTip.\n\nThe value is relative to the contents rect in the box model.\n\nThe interaction behavior for text in a message box. Possible values are based on Qt::TextInteractionFlags.\n\nIf this property is not specified, it defaults to the value specified by the current style for the SH_MessageBox_TextInteractionFlags style hint.\n\nThis property is supported by QAbstractItemView subclasses, QAbstractSpinBox subclasses, QCheckBox, QComboBox, QFrame, QGroupBox, QLabel, QLineEdit, QMenu, QMenuBar, QPushButton, QRadioButton, QSizeGrip, QSpinBox, QSplitter, QStatusBar, QTextEdit, QToolButton, and QToolTip.\n\nIf this property is not specified, the minimum height is derived based on the widget's contents and the style.\n\nThe value is relative to the contents rect in the box model.\n\nThis property is supported by QAbstractItemView subclasses, QAbstractSpinBox subclasses, QCheckBox, QComboBox, QFrame, QGroupBox, QLabel, QLineEdit, QMenu, QMenuBar, QPushButton, QRadioButton, QSizeGrip, QSpinBox, QSplitter, QStatusBar, QTextEdit, QToolButton, and QToolTip.\n\nIf this property is not specified, the minimum width is derived based on the widget's contents and the style.\n\nThe value is relative to the contents rect in the box model.\n\nThe opacity for a widget. Possible values are from 0 (transparent) to 255 (opaque). For the moment, this is only supported for tooltips.\n\nIf this property is not specified, it defaults to the value specified by the current style for the SH_ToolTipLabel_Opacity style hint.\n\nThe outline drawn around the object's border.\n\nThe color of the outline. See also border-color\n\nThe outline's offset from the border of the widget.\n\nSpecifies the pattern used to draw the outline. See also border-style\n\nThe radius for the bottom-left rounded corner of the outline.\n\nThe radius for the bottom-right rounded corner of the outline.\n\nThe radius for the top-left corner of the outline.\n\nThe radius for the top-right rounded corner of the outline.\n\nThe widget's padding. Equivalent to specifying , , , and .\n\nThis property is supported by QAbstractItemView subclasses, QAbstractSpinBox subclasses, QCheckBox, QComboBox, QFrame, QGroupBox, QLabel, QLineEdit, QMenu, QMenuBar, QPushButton, QRadioButton, QSplitter, QTextEdit, and QToolTip.\n\nIf this property is not specified, it defaults to .\n\nSee also margin, spacing, and The Box Model.\n\nWhether the QTreeView paints alternating row colors for the empty area (i.e the area where there are no items)\n\nThe color used for the placeholder text of text editing widgets.\n\nIf this property is not set, the default value is whatever is set for the palette's PlaceholderText role.\n\nWhether offsets specified using left, right, top, and bottom are relative or absolute coordinates.\n\nIf this property is not specified, it defaults to .\n\nIf position is (the default), moves a subcontrol by a certain offset to the left; specifying is then equivalent to specifying .\n\nIf position is , the property specifies the subcontrol's right edge in relation to the parent's right edge (see also subcontrol-origin).\n\nSee also left, top, and bottom.\n\nThe background of selected text or items.\n\nThis property is supported by all widgets that respect the QWidget::palette and that show selection text.\n\nIf this property is not set, the default value is whatever is set for the palette's Highlight role.\n\nSee also selection-color and background.\n\nThe foreground of selected text or items.\n\nThis property is supported by all widgets that respect the QWidget::palette and that show selection text.\n\nIf this property is not set, the default value is whatever is set for the palette's HighlightedText role.\n\nSee also selection-background-color and color.\n\nControls whether selections in a QListView cover the entire row or just the extent of the text.\n\nIf this property is not specified, it defaults to the value specified by the current style for the SH_ItemView_ShowDecorationSelected style hint.\n\nThis property is supported by QCheckBox, checkable QGroupBoxes, QMenuBar, and QRadioButton.\n\nIf this property is not specified, the default value depends on the widget and on the current style.\n\nSee also padding and margin.\n\nThe origin rectangle of the subcontrol within the parent element.\n\nIf this property is not specified, the default is .\n\nThe alignment of the subcontrol within the origin rectangle specified by subcontrol-origin.\n\nIf this property is not specified, it defaults to a value that depends on the subcontrol.\n\nWhether tool tips are shown on window title bar buttons.\n\nHow much an animation should last (in milliseconds). A value equal to zero means that the animations will be disabled.\n\nIf this property is not specified, it defaults to the value specified by the current style for the SH_Widget_Animation_Duration style hint.\n\nThe alignment of text and icon within the contents of the widget.\n\nIf this value is not specified, it defaults to the value that depends on the native style.\n\nThis property is currently supported only by QPushButton and QProgressBar.\n\nIf position is (the default), moves a subcontrol by a certain offset down.\n\nIf position is , the property specifies the subcontrol's top edge in relation to the parent's top edge (see also subcontrol-origin).\n\nIf this property is not specified, it defaults to .\n\nSee also left, right, and bottom.\n\nThe width of a subcontrol (or a widget in some cases).\n\nIf this property is not specified, it defaults to a value that depends on the subcontrol/widget and on the current style.\n\nThe for the subcontrol or widget based on the chosen role.\n\nThe list of CSS properties that you want to apply Qt-specific styles on.\n\nIcons used in Qt can be customized using the following properties. Each of the properties listed in this section have the type Icon.\n\nNote that for icons to appear in buttons in a QDialogButtonBox, you need to set the dialogbuttonbox-buttons-have-icons property to true. Also, to customize the size of the icons, use the icon-size property.\n\nThe following table summarizes the syntax and meaning of the different property types.\n\nA border image is an image that is composed of nine parts (top left, top center, top right, center left, center, center right, bottom left, bottom center, and bottom right). When a border of a certain size is required, the corner parts are used as is, and the top, right, bottom, and left parts are stretched or repeated to produce a border with the desired size. See the CSS3 Draft Specification for details. Specifies the pattern used to draw a border. See the CSS3 Draft Specification for details. One to four occurrences of Brush, specifying the top, right, bottom, and left edges of a box, respectively. If the left color is not specified, it is taken to be the same as the right color. If the bottom color is not specified, it is taken to be the same as the top color. If the right color is not specified, it is taken to be the same as the top color. One to four occurrences of Length, specifying the top, right, bottom, and left edges of a box, respectively. If the left length is not specified, it is taken to be the same as the right length. If the bottom length is not specified, is it taken to be the same as the top length. If the right length is not specified, it is taken to be the same as the top length. Specifies a Color or a Gradient or an entry in the Palette. Specifies a color as RGB (red, green, blue), RGBA (red, green, blue, alpha), HSV (hue, saturation, value), HSVA (hue, saturation, value, alpha), HSL (hue, saturation, lightness), HSLA (hue, saturation, lightness, alpha) or a named color. The or syntax can be used with integer values between 0 and 255, or with percentages. The value of s, v, l and a in , or must all be in the range 0-255 or with percentages, the value of h must be in the range 0-359. The support for HSL(A) is available since 5.13. Note: The RGB colors allowed are the same as those allowed with CSS 2.1, as listed here. Specifies gradient fills. There are three types of gradient fills:\n• Radial gradients interpolate colors between a focal point and end points on a circle surrounding it. Gradients are specified in Object Bounding Mode. Imagine the box in which the gradient is rendered, to have its top left corner at (0, 0) and its bottom right corner at (1, 1). Gradient parameters are then specified as percentages from 0 to 1. These values are extrapolated to actual box coordinates at runtime. It is possible specify values that lie outside the bounding box (-0.6 or 1.8, for instance). Warning: The stops have to appear sorted in ascending order. A number followed by a measurement unit. The CSS standard recommends that user agents must ignore a declaration with an illegal value. In Qt, it is mandatory to specify measurement units. For compatibility with earlier versions of Qt, numbers without measurement units are treated as pixels in most contexts. The supported units are:\n• : the size of one point (i.e., 1/72 of an inch)\n• : the size relative to the font size of the element (e.g., 2em means 2 times the size of the font)\n• : the x-height of the font (i.e., the height of 'x') However, Qt is limited to font sizes in and and any other size must be in , or . Indicates which of four rectangles to use.\n• : The margin rectangle. The margin falls outside the border.\n• : The border rectangle. This is where any border is drawn.\n• : The padding rectangle. Unlike the margins, padding is located inside the border.\n• : The content rectangle. This specifies where the actual contents go, excluding any padding, border, or margin. These values correspond the Color roles in the widget's QPalette. One or two occurrences of Length. If only one length is specified, it is used as the radius of the quarter circle defining the corner. If two lengths are specified, the first length is the horizontal radius of a quarter ellipse, whereas the second length is the vertical radius. A value indicating the nature of repetition. is the name of a file on the local disk or stored using The Qt Resource System. Setting an image implicitly sets the width and height of the element.\n\nThe following pseudo-states are supported:\n\nThe following subcontrols are available:\n\nSee Customizing the QPushButton's Menu Indicator Sub-Control for an example of how to customize a subcontrol."
    },
    {
        "link": "https://stackoverflow.com/questions/4163740/qtreeview-with-drag-and-drop-support-in-pyqt",
        "document": "In PyQt 4 I would like to create a QTreeView with possibility to reorganize its structure with drag and drop manipulation.\n\nI have implemented my own model(QAbstractItemModel) for QTreeView so my QTreeView properly displays the data. Now I would like to add drag and drop support for tree's nodes to be able to move a node inside the tree from one parent to another one, drag-copy and so on, but I cannot find any complete tutorial how to achieve this. I have found few tutorials and hints for QTreeWidget, but not for QTreeView with custom model. Can someone point me where to look?"
    },
    {
        "link": "https://pythonguis.com/faq/pyqt-drag-drop-widgets",
        "document": "This week I had an interesting question from a reader of my PyQt5 book, about how to handle dragging and dropping of widgets in a container showing the dragged widget as it is moved.\n\nFirst, we'll implement the simple case which drags widgets without showing anything extra. Then we can extend it to answer the question. By the end of this quick tutorial we'll have a generic drag drop implementation which looks like the following.\n\nWe'll start with a simple application which creates a window using and places a series of widgets into it.\n\nYou can substitute for any other widget you like, e.g. . Any widget can have drag behavior implemented on it, although some input widgets will not work well as we capture the mouse events for the drag.\n\nIf you run this you should see something like this.\n\nThe series of in a horizontal layout.\n\nHere we're creating a window, but the widget is subclassed from , meaning you can add this widget to any other layout. See later for an example of a generic object sorting widget.\n\nobjects aren't usually draggable, so to handle the mouse movements and initiate a drag we need to implement a subclass. We can add the following to the top of the file.\n\nWe implement a which accepts the single parameter of the event. We check to see if the left mouse button is pressed on this event -- as it would be when dragging -- and then initiate a drag. To start a drag, we create a object, passing in to give us access later to the widget that was dragged. We also must pass in mime data. This is used for including information about what is dragged, particularly for passing data between applications. However, as here, it is fine to leave this empty.\n\nFinally, we initiate a drag by calling . As with dialogs starts a new event loop, blocking the main loop until the drag is complete. The parameter tells the drag handler what type of operation is happening, so it can show the appropriate icon tip to the user.\n\nYou can update the main window code to use our new class as follows.\n\nIf you run the code now, you can drag the buttons, but you'll notice the drag is forbidden.\n\nDragging of the widget starts but is forbidden.\n\nWhat's happening? The mouse movement is being detected by our object and the drag started, but the main window does not accept drag & drop.\n\nTo fix this we need to enable drops on the window and implement to actually accept them.\n\nIf you run this now, you'll see the drag is now accepted and you see the move icon. This indicates that the drag has started and been accepted by the window we're dragging onto. The icon shown is determined by the action we pass when calling .\n\nDragging of the widget starts and is accepted, showing a move icon.\n\nReleasing the mouse button during a drag drop operation triggers a on the widget you're currently hovering the mouse over (if it is configured to accept drops). In our case that's the window. To handle the move we need to implement the code to do this in our method.\n\nThe drop event contains the position the mouse was at when the button was released & the drop triggered. We can use this to determine where to move the widget to.\n\nTo determine where to place the widget, we iterate over all the widgets in the layout, until we find one who's position is greater than that of the mouse pointer. If so then when insert the widget directly to the left of this widget and exit the loop.\n\nIf we get to the end of the loop without finding a match, we must be dropping past the end of the existing items, so we increment one further (in the block below).\n\nThe effect of this is that if you drag 1 pixel past the start of another widget the drop will happen to the right of it, which is a bit confusing. To fix this we can adjust the cut off to use the middle of the widget using -- that is x + half of the width.\n\nThe complete working drag-drop code is shown below.\n\nWe now have a working drag & drop implementation. Next we'll move onto improving the UX by showing the drag visually. First we'll add support for showing the button being dragged next to the mouse point as it is dragged. That way the user knows exactly what it is they are dragging.\n\nQt's handler natively provides a mechanism for showing dragged objects which we can use. We can update our class to pass a pixmap image to and this will be displayed under the mouse pointer as the drag occurs. To show the widget, we just need to get a of the widget we're dragging.\n\nTo create the pixmap we create a object passing in the size of the widget this event is fired on with . This creates an empty pixmap which we can then pass into to render -- or draw -- the current widget onto it. That's it. Then we set the resulting pixmap on the object.\n\nIf you run the code with this modification you'll see something like the following --\n\nDragging of the widget showing the dragged widget.\n\nWe now have a working drag and drop behavior implemented on our window. We can take this a step further and implement a generic drag drop widget which allows us to sort arbitrary objects. In the code below we've created a new widget which can be added to any window.\n\nYou can add items -- instances of -- which you want to be sorted, as well as setting data on them. When items are re-ordered the new order is emitted as a signal .\n\nYou'll notice that when creating the item, you can set the label by passing it in as a parameter (just like for a normal which we've subclassed from). But you can also set a data value, which is the internal value of this item -- this is what will be emitted when the order changes, or if you call yourself. This separates the visual representation from what is actually being sorted, meaning you can use this to sort anything not just strings.\n\nIn the example above we're passing in the enumerated index as the data, so dragging will output (via the connected to ) something like:\n\nIf you remove the you'll see the labels emitted on changes.\n\nWe've also implemented orientation onto the using the Qt built in flags or . This setting this allows you sort items either vertically or horizontally -- the calculations are handled for both directions.\n\nIf you experiment with the drag-drop tool above you'll notice that it doesn't feel completely intuitive. When dragging you don't know where an item will be inserted until you drop it. If it ends up in the wrong place, you'll then need to pick it up and re-drop it again, using guesswork to get it right.\n\nWith a bit of practice you can get the hang of it, but it would be nicer to make the behavior immediately obvious for users. Many drag-drop interfaces solve this problem by showing a preview of where the item will be dropped while dragging -- either by showing the item in the place where it will be dropped, or showing some kind of placeholder.\n\nIn this final section we'll implement this type of drag and drop preview indicator.\n\nThe first step is to define our target indicator. This is just another label, which in our example is empty, with custom styles applied to make it have a solid \"shadow\" like background. This makes it obviously different to the items in the list, so it stands out as something distinct.\n\nWe've copied the contents margins from the items in the list. If you change your list items, remember to also update the indicator dimensions to match.\n\nThe drag item is unchanged, but we need to implement some additional behavior on our to add the target, control showing and moving it.\n\nFirst we'll add the drag target indicator to the layout on our . This is hidden to begin with, but will be shown during the drag.\n\nNext we modify the to show the drag target indicator. We show it by inserting it into the layout and then calling -- inserting a widget which is already in a layout will move it. We also hide the original item which is being dragged.\n\nIn the earlier examples we determined the position on drop by removing the widget being dragged, and then iterating over what is left. Because we now need to calculate the drop location before the drop, we take a different approach.\n\nIf we wanted to do it the same way, we'd need to remove the item on drag start, hold onto it and implement re-inserting at it's old position on drag fail. That's a lot of work.\n\nInstead, the dragged item is left in place and hidden during move.\n\nThe method finds the index where the drag target will be shown (or the item dropped when the mouse released). We'll implement that next.\n\nThe calculation of the drop location follows the same pattern as before. We iterate over the items in the layout and calculate whether our mouse drop location is to the left of each widget. If it isn't to the left of any widget, we drop on the far right.\n\nThe drop location is returned for use in the to place the drop target indicator.\n\nNext wee need to update the handler to ignore the drop target indicator. To do this we check against and skip if it is the same. With this change the method will work as expected.\n\nIf you run the code a this point the drag behavior will work as expected. But if you drag the widget outside of the window and drop you'll notice a problem: the target indicator will stay in place, but dropping the item won't drop the item in that position (the drop will be cancelled).\n\nTo fix that we need to implement a which hides the indicator.\n\nWith those changes, the drag-drop behavior should be working as intended. The complete code is shown below.\n\nIf you run this example on macOS you may notice that the widget drag preview (the created on ) is a bit blurry. On high-resolution screens you need to set the device pixel ratio and scale up the pixmap when you create it. Below is a modified class which does this.\n\nThat's it! We've created a generic drag-drop handled which can be added to any projects where you need to be able to reposition items within a list. You should feel free to experiment with the styling of the drag items and targets as this won't affect the behavior."
    },
    {
        "link": "https://forum.qt.io/topic/124028/display-custom-list-of-files-in-qtreeview-using-qfilesystemmodel-or-qabstractitemmodel",
        "document": "I'm building an open source PySide6 app based on the custom file browser in .\n\n I've already subclassed to display a custom column with some extra data.\n\nNow my goal is to display a specific subset of files (they can be located on different drives) in a treeview.\n\nTo simplify things imagine that I have a function:\n\nNow I need to display these files in my . I tried using and to filter out everything else and it worked. However on a relatively large number of files it's extremely slow and unusable. I'm pretty sure a simpler custom file tree would work faster because afaik tracks the folder state and runs other extra stuff that I can live without.\n\nI'm not sure how to solve this problem.\n\n I see basically 2 ways:\n• Somehow cut out what I don't need from .\n\n With this solution I don't fully understand how I do this. In particular, how do I fill the model with the data from my function? How do it use ?\n• Subclass .\n\n This solution is more or less clear, however, it's missing some of the important things that go with out of the box: I need the columns and the data it provides (name, size, type, modification date), I also need file/folder icons that I'm using with .\n\nSo basically I'd like to use a light-weighted version of without watching the file system and with my list of files."
    },
    {
        "link": "https://stackoverflow.com/questions/51338059/qfilesystemmodel-qtreeview-traverse-model-filesystem-tree-prior-to-view-e",
        "document": "I wish to create a widget for an app created with PyQt5. I want the user to be able to select any subset of the files within a filesystem hierarchy below a specified directory. I have extended the QFileSystemModel to allow checking the elements in the model roughly following this\n\nI wish the user to be able to modify the checked state of the contents of a directory when the directory is checked - even before the subdirectory has been expanded.\n\nSo that this:\n\n...does this 'under the hood' of the collapsed node in the tree view:\n\nThe problem I am facing is that the QTreeView - and seemingly the QFileSystemModel - are each, or together optimizing performance by only reporting model items which have been viewed already. Until I manually expand the subdirectories in the View, I cannot traverse the data in the Model.\n\nTo illustrate, I have added a print callback, and passed it to my (recursive) tree-traversal routine - to print how many children any index has. (See attached code.) Before I expand a subdir in the Tree View by double-clicking on it, it reports no children: Image 1 reports the following when I click on 'one':\n\n...but if I expand the view - as in Image 2, Then I see all the children, like this:\n\nHow may I induce the loading of the subdirectories, or the expansion of the model's reflection of the actual filesystem? How do I traverse the root path of the QFileSystemModel before the user clicks on the view widget?\n\nHere is my code:\n\nI have looked at several links here\n\n[1] - This did not change the behaviour\n\n[2] - This posed an alternative solution which doesn't work for my purposes\n\n[3] - This dealt with the same classes, but not the same issue"
    },
    {
        "link": "https://stackoverflow.com/questions/22083933/how-to-refresh-a-qfilesystemmodel-in-a-qtreeview-after-files-change-through-anot",
        "document": "I have a with a as the model. Files and directories load correctly.\n\nIn my application workflow, a different process copies and overwrites files on the file system.\n\nHowever, my does not update the item/row for the overwritten file (eg: the size and lastModified values for the file do not update to the new values).\n\nUsing the file path, I'm able to get a that DOES have the updated lastModified value. However, using that same path to grab the of the row's lastModified value results in it returning the old value.\n\nI've tried a few things (see below) to no avail.\n\nPLEASE let me know if you are aware of how to resolve this. Many Thanks! :)\n\nThe following I believe to be the steps that can mimic the issue.\n• None Setup a simple QTreeView that uses a QFileSystemModel as its model.\n• None Load the application and observe in it the file's Last Modified Date in the dir.\n• None Copy to a different directory, say\n• None Modify the file and save in\n• None Copy and Replace to overwrite the file in dir\n• None Observe the Last Modified Date in the application window\n\nResult: The Last Modified Date is not updated"
    },
    {
        "link": "https://qtcentre.org/threads/53173-Simple-QFileSystemModel-and-TreeView-Example",
        "document": "\n• * Expanding a node with a large number of subdirectories (say over 10,000) causes the UI to become unresponsive for ~8-10 seconds. On my system (Windows 7), for instance C:\\Windows\\winsxs can easily have 10k+ subdirectories. * Expanding a node with a large number of subdirectories (say over 10,000) causes the UI to become unresponsive for ~8-10 seconds. On my system (Windows 7), for instance C:\\Windows\\winsxs can easily have 10k+ subdirectories. I sure something is missing.\n\n \n\n * After expanding a large directory/node then collapsing this node as noted above, expanding other nodes (even nodes with only a few directories) becomes sluggish with a 2-3 second delay before the UI becomes responsive again. * After expanding a large directory/node then collapsing this node as noted above, expanding other nodes (even nodes with only a few directories) becomes sluggish with a 2-3 second delay before the UI becomes responsive again. I sure something is missing.\n\n \n\n I've also noticed that Windows Explorer can expand and navigate these structures instantly (with no detectable delay) so I'm most likely not doing something right here. Am I missing some optimization setting I should be turning on or am I expecting too much from QFileSystemModel? I've also noticed that Windows Explorer can expand and navigate these structures instantly (with no detectable delay) so I'm most likely not doing something right here. Am I missing some optimization setting I should be turning on or am I expecting too much from QFileSystemModel? It is very obvious not to wonder why the native applications can perform better. Don't expect a better performance (at-least in this case)\n\n \n\n I have no clue why, but that minor change seems to have resolved the performance problem. I have no clue why, but that minor change seems to have resolved the performance problem. There is clearly a difference between \"\" (nothing) and \"/\" (root directory)\n\n \n\n But now the items in the model for my treeView are unsorted.......perhaps the implementation of the sorting code in QFileSystemModel needs some work. But now the items in the model for my treeView are unsorted.......perhaps the implementation of the sorting code in QFileSystemModel needs some work. Enable sorting on the QTreeView\n\n \n\n If this is not solved, I will look at this some time next week When you know how to do it then you may do it wrong. \n\n When you don't know how to do it then it is not that you may do it wrong but you may not do it right.\n• C++ QT Applications are native applications. If they are not then I've been misinformed. C++ QT Applications are native applications. If they are not then I've been misinformed. Qt provides a consistent interface across the platforms, it uses the native APIs, using a wrapping/mapping mechanism (allowed as per C++, or interpreted by moc). Yes, you are right in making a statement that Qt Apps are native applications (in the way they execute), but they still differ from the application built on native technologies (frameworks), as for a simple reason that wrapping functionality brings in things that a cross-platform behavior needs. \n\n \n\n Clearly, do you know what the difference is? If I missed it in the documentation then my mistake. Clearly, do you know what the difference is? If I missed it in the documentation then my mistake. I can clearly see the difference between \"\"(nothing) and \"/\"(root). Please don't expect the documentation to mention all the invalid parameters that can be supplied.\n\n \n\n I'm on that path, as long as performance doesn't suffer for large data sets. I'm on that path, as long as performance doesn't suffer for large data sets. For sure there will be a performance degrade for large data sets. To avoid this one will need to implement a special mechanism to sort, like proxy models, sorting in a worker thread etc.\n\n \n\n I would prefer a pointer to documentation or a hint rather than solving this problem for me. I simply thought I would ask here in this \"friendly\" forum for newbies to see if this has already been solved by other friendly QT users. No point in re-inventing the wheel. I would prefer a pointer to documentation or a hint rather than solving this problem for me. I simply thought I would ask here in this \"friendly\" forum for newbies to see if this has already been solved by other friendly QT users. No point in re-inventing the wheel. First things first, sure this is a friendly forum (if I may speak on behalf). I said so as a friendly gesture to see at the post (if not solved). Sure I don't have time to re-invent the wheel When you know how to do it then you may do it wrong. \n\n When you don't know how to do it then it is not that you may do it wrong but you may not do it right.\n• Santosh,\n\n \n\n Thank you for your reply and your time spent helping me to understand this.\n\n \n\n Qt provides a consistent interface across the platforms, it uses the native APIs, using a wrapping/mapping mechanism (allowed as per C++, or interpreted by moc). Yes, you are right in making a statement that Qt Apps are native applications (in the way they execute), but they still differ from the application built on native technologies (frameworks), as for a simple reason that wrapping functionality brings in things that a cross-platform behavior needs. Qt provides a consistent interface across the platforms, it uses the native APIs, using a wrapping/mapping mechanism (allowed as per C++, or interpreted by moc). Yes, you are right in making a statement that Qt Apps are native applications (in the way they execute), but they still differ from the application built on native technologies (frameworks), as for a simple reason that wrapping functionality brings in things that a cross-platform behavior needs. Yes, I understand the need for a layer to enable a cross platform framework such as QT however an 8-10 second delay while my entire UI becomes unresponsive is not acceptable to me nor my end users. QT is such a well written API that I must assume I am doing something wrong, hence my original post. The documentation for QFileSystemModel clearly states:\n\n \n\n Unlike QDirModel(obsolete), QFileSystemModel uses a separate thread to populate itself so it will not cause the main thread to hang as the file system is being queried. Calls to rowCount() will return 0 until the model populates a directory. Unlike QDirModel(obsolete), QFileSystemModel uses a separate thread to populate itself so it will not cause the main thread to hang as the file system is being queried. Calls to rowCount() will return 0 until the model populates a directory. If this is the case, why is my UI unresponsive? Keep in mind my UI consists of a single QTreeView Widget.\n\n \n\n I can clearly see the difference between \"\"(nothing) and \"/\"(root). Please don't expect the documentation to mention all the invalid parameters that can be supplied. I can clearly see the difference between \"\"(nothing) and \"/\"(root). Please don't expect the documentation to mention all the invalid parameters that can be supplied. I agree with that. However, a well designed API will guard against invalid parameters. I see QT as a well designed API, hence my thought that I was doing something wrong.\n\n \n\n Also, I don't want to derail this thread but in the few weeks I've been lurking here and reading posts I've noticed some minor hostility toward those asking questions or trying to learn QT. As I'm evaluating QT for a commercial application, the community is very important to us, especially for an open source project like QT. Are there other sites you would recommend we visit to get a less narrow minded view of the QT community?\n\n \n\n Thanks,\n\n \n\n Zep\n• I know we have deviated a bit from the thread topic, but it could be informative to others forum users\n\n \n\n Again first thing is that we are dealing with Qt (cute) not QT.\n\n \n\n If this is the case, why is my UI unresponsive? Keep in mind my UI consists of a single QTreeView Widget. If this is the case, why is my UI unresponsive? Keep in mind my UI consists of a single QTreeView Widget. QTreeView depends on QAbstractItemModel. If the model does not provide data in time, or just goes for a hike for 8 to 10 seconds (just kidding), QTreeView has nothing else to do but to wait for whatever time it takes the model to return the data.\n\n \n\n I agree with that. However, a well designed API will guard against invalid parameters. I see QT as a well designed API, hence my thought that I was doing something wrong. I agree with that. However, a well designed API will guard against invalid parameters. I see QT as a well designed API, hence my thought that I was doing something wrong. I will say the well designed API did not crash on invalid parameter, it did sustain itself and the software reading the output has to appreciate that \n\n \n\n Also, I don't want to derail this thread but in the few weeks I've been lurking here and reading posts I've noticed some minor hostility toward those asking questions or trying to learn QT. Also, I don't want to derail this thread but in the few weeks I've been lurking here and reading posts I've noticed some minor hostility toward those asking questions or trying to learn QT. Well it all depends on how people take it. As far as I understand all such post(s) are to motivate the users to think/research/learn from the information, questions, discussions and off-course talks (like this post).\n\n \n\n As I'm evaluating QT for a commercial application, the community is very important to us, especially for an open source project like QT. As I'm evaluating QT for a commercial application, the community is very important to us, especially for an open source project like QT. Qt Commercial and Qt Project(open source) are very different when it comes to licensing. Please don't get confused between them.\n\n Are there other sites you would recommend we visit to get a less narrow minded view of the QT community? Are there other sites you would recommend we visit to get a less narrow minded view of the QT community? Obviously the project site http://qt-project.org/ When you know how to do it then you may do it wrong. \n\n When you don't know how to do it then it is not that you may do it wrong but you may not do it right."
    },
    {
        "link": "https://pythonspot.com/pyqt5-directory-view",
        "document": "PyQt can show a directory structure using a QTreeView. For the treeview to show as a directory tree, we need to set its model to a QFileSystemModel instance. That is achieved by calling the setModel method for the tree instance.\n\nWe can set additional options on the tree object: sorting enabled (setSortingEnabled), animation and indention.\n\nExample\n\nThe code below will add the directory view (QTreeView combined with QFileSystemModel) to a grid window. A layout needs to be set for the widget to be seen.\n\nThe path is specified using the models setRootPath() method, where the parameter is the full path to the directory. By default its the root.\n\nFor layout we use a qvboxlayout.\n\nIf you are new to programming Python PyQt, I highly recommend this book."
    }
]