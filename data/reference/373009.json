[
    {
        "link": "https://gnu.org/s/bash/manual/html_node/Command-Substitution.html",
        "document": "Command substitution allows the output of a command to replace the command itself. Command substitution occurs when a command is enclosed as follows:\n\nBash performs the expansion by executing in a subshell environment and replacing the command substitution with the standard output of the command, with any trailing newlines deleted. Embedded newlines are not deleted, but they may be removed during word splitting. The command substitution can be replaced by the equivalent but faster .\n\nWhen the old-style backquote form of substitution is used, backslash retains its literal meaning except when followed by ‘ ’, ‘ ’, or ‘ ’. The first backquote not preceded by a backslash terminates the command substitution. When using the form, all characters between the parentheses make up the command; none are treated specially.\n\nCommand substitutions may be nested. To nest when using the backquoted form, escape the inner backquotes with backslashes.\n\nIf the substitution appears within double quotes, word splitting and filename expansion are not performed on the results."
    },
    {
        "link": "https://geeksforgeeks.org/bash-script-command-substitution",
        "document": "In order to understand command substitution, let us first discuss substitution in shell scripts. Substitution is a functionality by following which we can instruct the shell to substitute the actual value of an expression.\n\nIn the program below we have firstly created variable str and assigned it with the value “GeeksforGeeks” and then substituted the value of the string str (“GeeksforGeeks”) in the echo command.\n\nCreating a script. (you can replace `mystript` with the desired name)\n\nThis article focuses on the command substitution technique used in a Bash script.\n\nThere are some sequences of characters that don’t represent their true nature but they have special meaning to the operating system and these sequences are known as escape sequences. When they are used in a command, they are replaced by actual values.\n\nCommand substitution is a mechanism that is followed by programmers in a bash script. In this mechanism, the output of a command replaces the command itself. Bash operates the expansion by executing a command and then replacing the command substitution with the standard output of the command. In simple words, the output of a UNIX command is bundled and then used as a command.\n\nTo understand it in a better way, let us consider an example. The seq command in Linux is used to print numbers from START to END in steps of INCREMENT.\n\nIn the below script we are printing numbers from 2 to 20 with a difference of 2. In other words, we are printing even numbers up to 20.\n\nCreating a script. (you can replace `main` with desired name)\n\nWe can use the output of the above command as a new command. Consider the below script,\n\nDuring the process of command substitution, the output of the command can be assigned to a variable, just like any other value.\n\nIn the below script we have assigned the result of the echo command to both the strings in variables, “varaiable1” and “variable2” respectively. Then we used these variables in the echo command.\n\nCreating a script. (you can replace `main` with desired name)\n\nIn the command substitution mechanism, If the output of a command that is being substituted contains any trailing newlines, then in that case the trailing newlines are deleted after the substitution. Note that embedded newlines are not deleted, but they might be removed during word splitting.\n\nIn this script, we are using the seq command. Now seq command prints numbers to the console and appends a newline character after each number is printed to the console.\n\nIn this script, we have used the result of the above command and substituted it in the command. As you can see in the output, numbers from 1 to 19 with the difference of 2 are printed to console. But this time they all are printed on the same line that is without any newline character.\n\nIn this article we discussed Bash Script – Command Substitution which is a useful trick that helps us take the result of one command and use it in another. We can store the command’s output in a variable or use it directly in a new command. It makes your scripts more flexible and efficient, automating tasks easily. Just remember that sometimes newlines may disappear from the output, so be careful with formatting. With command substitution, our Bash scripts become more powerful and can do things quickly and effectively."
    },
    {
        "link": "https://unix.stackexchange.com/questions/440088/what-is-command-substitution-in-a-shell",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "http://compciv.org/topics/bash/variables-and-substitution",
        "document": "An essential feature of programming is the ability to use a name or a label to refer to some other quantity: such as a value, or a command. This is commonly referred to as variables.\n\nVariables can be used, at the very least, to make code more readable for humans:\n\nHowever, variables really come into use in more advanced programming, when we're in a situation in which the actual values aren't known before executing a program. A variable acts as a placeholder that gets resolved upon actual execution time.\n\nFor example, imagine that contains a list of website addresses. The following routine reads each line (via , which isn't best practice…but will do for now) into a loop, which then downloads each URL:\n\nThe following command assigns to the variable named , and to\n\nUnlike most modern languages, Bash is pretty picky about the syntax for setting variables. In particular, no whitespace is allowed between the variable name, the equals sign, and the value.\n\nAll of these examples would cause Bash to throw an error:\n\nReferencing the value of a variable\n\nWhenever Bash encounters a dollar-sign, immediately followed by a word, within a command or in a double-quoted string, it will attempt to replace that token with the value of the named variable. This is sometimes referred to as expanding the variable, or parameter substitution:\n\nWhen a dollar-sign doesn't precede a variable name, or a variable reference is within single-quotes, Bash will interpret the string literally:\n\nVariables can be very useful for text-patterns that will be repeatedly used:\n\nIf your variable name butts up against a literal alphanumeric character, you can use this more verbose form, involving curly braces, to reference a variable's value:\n\nVariable names can contain a sequence of alphanumeric characters and underscores. For variables created by you, the user, they should start with either an alphabetical letter or an underscore (i.e. not a number):\n\nWhen we write functions and shell scripts, in which arguments are passed in to be processed, the arguments will be passed int numerically-named variables, e.g. , ,\n\nInside , commands will use to refer to , to , and for\n\nThe variable reference, , will expand to the current script's name, e.g.\n\nThe standard output of a command can be encapsulated, much like a value can be stored in a value, and then expanded by the shell.\n\nThis is known as command substitution. From the Bash documentation:\n\nAs an example, consider the seq command, which will print a sequence of numbers starting from the first argument to the second argument:\n\nWith command substitution, we can encapsulate the result of into a variable by enclosing the command with and , and pass it as an argument to another command:\n\nWhen a command is replaced by its standard output, that output, presumably just text, can be assigned to a variable like any other value:\n\nThe loss of newlines in command substitution\n\nEarlier, I quoted from the Bash documentation on command expansion. Here's an emphasized version of the excerpt:\n\nWhat does that mean? Consider being called normally, and then, via command substitution, and note the change in formatting:\n\nWhy do the newlines get removed during the command expansion? It's something we'll encounter later (and there's a section on it at the end of this tutorial) and deals with how Bash interprets space and newline characters during expansion. Anyway, it's worth noting the behavior for now, as it may be new to you if you're coming from another programming language.\n\nTo do basic calculations, you can enclose an expression inside :\n\nCheck the Bash documentation for the full set of arithmetic operators. Math at the command-line can be a bit clunky so we won't be focusing too much on it.\n\nAn aside: if you want to do more advanced math from the command line, use bc, which reads in from stdout and evaluates the expression:\n\nThis section covers more technical details of how Bash handles space characters when it does an exapansion. It's not necessary to memorize for the specific assignments in this class. However, as many of you are wont to copy and paste code directly from things you've seen on the Internet, it might be worth knowing all the different ways you could accidentally harm yourself, due to the way Bash handles spaces and newline characters.\n\nHere's the Bash documentation for the concept known as \"word-splitting\"\n\nThe global variable is what Bash uses to split a string of expanded into separate words…think of it as how Excel knows to split a CSV (comma-separated-values) text file into a spreadsheet: it assumes the commas separate the columns.\n\nLet's pretend that has been set to something arbitrary, like a capital . When Bash expands a variable that happens to contain a , the value of that variable will be split into separate words (and the literal will disappear):\n\nBy default, the variable is set to three characters: newline, space, and the tab. If you , you won't see anything because those characters…well, how do you see a space character if there aren't any visible characters?\n\nThe upshot is that you may see code snippets online in which the variable is changed to something like (which stands for the newline character).\n\nImagine a textfile that contains a bunch of lines of text that, for example, may refer to filenames:\n\nWhen Bash reads each line of the file, the default value of , which includes a space character, will cause Bash to treat the file named as two files, and , because the space character is used to split words.\n\nWith set to just the newline character, is treated as a single filename.\n\nThis concept will make sense when it comes to reading text files and operating on each line. I don't expect you to fully understand this, but only to be aware of it, just in case you are haphazardly copy-pasting code from the Internet.\n\nIn an ideal world, everyone would keep their string values short and without space/newline, or any other special characters. In that ideal world, the following unquoted variable reference would work just fine:\n\nBut when people start adding special characters to filenames, such as spaces, expanding variables, without the use of double quotes, can be dangerous.\n\nIn the following example, the programmer intends the file named to be deleted:\n\nHowever, when referenced without double-quotes, Bash sees as containing two separate values, and . The subsequent command will attempt to delete those two files, and not :\n\nAh, no harm done, you say, because those files didn't exist in the first place. OK, but what happens when someone puts a star (i.e. asterisk) into a filename? You're aware of what happens when you do and – the star acts as a wildcard, grabbing every file.\n\nSo you'll see the previous errors, since and don't exist. But in between those attempted deletions, will run on …so say bye-bye to every file in that directory.\n\nNotice how affects only the file that is named, .\n\nSo the main takeaway here is: double-quote your variable references whenever possible.\n\nExpanding a variable can lead to unexpected and sometimes catastrophic results if the variable contains special characters:\n\nExpanding a variable within double-quotes can prevent such problems:\n\nWho would do such a thing?\n\nYou might think, Who the hell puts star characters in their filenames? Well, besides people who really enjoy star-shaped symbols, malicious hackers and pranksters. And variables usually aren't just manually assigned by the result of human typing. As you've read above, sometimes the result of commands are stored in a variable. And if such commands are processing raw data, it's not unimaginable that the raw data, quite innocently, contains special characters that are destructive to certain Bash programs.\n\nFor the purposes of the CompCiv course, the assignments will try to stay far from untrusted sources of data. But keep in mind the dangers of just pasting in seemingly safe-looking code. Bash's syntax and behavior in handling strings is hard to fully comprehend, which is why developers use other languages for more complex applications.\n\nYou can read more about quoting variables. There's a lot of minutiae, but the main takeaway, besides general safety, is to have a general understanding how Bash, and any other programming environment, uses certain conventions and syntax rules to deal with the myriad ways that users want to pass around values in their programs."
    },
    {
        "link": "https://gnu.org/s/bash/manual/bash.html",
        "document": "This text is a brief description of the features that are present in the Bash shell (version 5.2, 19 September 2022). The Bash home page is http://www.gnu.org/software/bash/.\n\nThis is Edition 5.2, last updated 19 September 2022, of , for , Version 5.2.\n\nBash contains features that appear in other popular shells, and some features that only appear in Bash. Some of the shells that Bash has borrowed concepts from are the Bourne Shell ( ), the Korn Shell ( ), and the C-shell ( and its successor, ). The following menu breaks the features up into categories, noting which features were inspired by other shells and which are specific to Bash.\n\nThis manual is meant as a brief introduction to features found in Bash. The Bash manual page should be used as the definitive reference on shell behavior.\n\nNext: Indexes, Previous: Major Differences From The Bourne Shell, Up: Bash Features [Contents][Index] Copyright © 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc. http://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n• PREAMBLE The purpose of this License is to make a manual, textbook, or other functional and useful document free in the sense of freedom: to assure everyone the effective freedom to copy and redistribute it, with or without modifying it, either commercially or noncommercially. Secondarily, this License preserves for the author and publisher a way to get credit for their work, while not being considered responsible for modifications made by others. This License is a kind of “copyleft”, which means that derivative works of the document must themselves be free in the same sense. It complements the GNU General Public License, which is a copyleft license designed for free software. We have designed this License in order to use it for manuals for free software, because free software needs free documentation: a free program should come with manuals providing the same freedoms that the software does. But this License is not limited to software manuals; it can be used for any textual work, regardless of subject matter or whether it is published as a printed book. We recommend this License principally for works whose purpose is instruction or reference.\n• APPLICABILITY AND DEFINITIONS This License applies to any manual or other work, in any medium, that contains a notice placed by the copyright holder saying it can be distributed under the terms of this License. Such a notice grants a world-wide, royalty-free license, unlimited in duration, to use that work under the conditions stated herein. The “Document”, below, refers to any such manual or work. Any member of the public is a licensee, and is addressed as “you”. You accept the license if you copy, modify or distribute the work in a way requiring permission under copyright law. A “Modified Version” of the Document means any work containing the Document or a portion of it, either copied verbatim, or with modifications and/or translated into another language. A “Secondary Section” is a named appendix or a front-matter section of the Document that deals exclusively with the relationship of the publishers or authors of the Document to the Document’s overall subject (or to related matters) and contains nothing that could fall directly within that overall subject. (Thus, if the Document is in part a textbook of mathematics, a Secondary Section may not explain any mathematics.) The relationship could be a matter of historical connection with the subject or with related matters, or of legal, commercial, philosophical, ethical or political position regarding them. The “Invariant Sections” are certain Secondary Sections whose titles are designated, as being those of Invariant Sections, in the notice that says that the Document is released under this License. If a section does not fit the above definition of Secondary then it is not allowed to be designated as Invariant. The Document may contain zero Invariant Sections. If the Document does not identify any Invariant Sections then there are none. The “Cover Texts” are certain short passages of text that are listed, as Front-Cover Texts or Back-Cover Texts, in the notice that says that the Document is released under this License. A Front-Cover Text may be at most 5 words, and a Back-Cover Text may be at most 25 words. A “Transparent” copy of the Document means a machine-readable copy, represented in a format whose specification is available to the general public, that is suitable for revising the document straightforwardly with generic text editors or (for images composed of pixels) generic paint programs or (for drawings) some widely available drawing editor, and that is suitable for input to text formatters or for automatic translation to a variety of formats suitable for input to text formatters. A copy made in an otherwise Transparent file format whose markup, or absence of markup, has been arranged to thwart or discourage subsequent modification by readers is not Transparent. An image format is not Transparent if used for any substantial amount of text. A copy that is not “Transparent” is called “Opaque”. Examples of suitable formats for Transparent copies include plain ASCII without markup, Texinfo input format, LaTeX input format, or using a publicly available , and standard-conforming simple , PostScript or designed for human modification. Examples of transparent image formats include , and . Opaque formats include proprietary formats that can be read and edited only by proprietary word processors, or for which the and/or processing tools are not generally available, and the machine-generated , PostScript or produced by some word processors for output purposes only. The “Title Page” means, for a printed book, the title page itself, plus such following pages as are needed to hold, legibly, the material this License requires to appear in the title page. For works in formats which do not have any title page as such, “Title Page” means the text near the most prominent appearance of the work’s title, preceding the beginning of the body of the text. The “publisher” means any person or entity that distributes copies of the Document to the public. A section “Entitled XYZ” means a named subunit of the Document whose title either is precisely XYZ or contains XYZ in parentheses following text that translates XYZ in another language. (Here XYZ stands for a specific section name mentioned below, such as “Acknowledgements”, “Dedications”, “Endorsements”, or “History”.) To “Preserve the Title” of such a section when you modify the Document means that it remains a section “Entitled XYZ” according to this definition. The Document may include Warranty Disclaimers next to the notice which states that this License applies to the Document. These Warranty Disclaimers are considered to be included by reference in this License, but only as regards disclaiming warranties: any other implication that these Warranty Disclaimers may have is void and has no effect on the meaning of this License.\n• VERBATIM COPYING You may copy and distribute the Document in any medium, either commercially or noncommercially, provided that this License, the copyright notices, and the license notice saying this License applies to the Document are reproduced in all copies, and that you add no other conditions whatsoever to those of this License. You may not use technical measures to obstruct or control the reading or further copying of the copies you make or distribute. However, you may accept compensation in exchange for copies. If you distribute a large enough number of copies you must also follow the conditions in section 3. You may also lend copies, under the same conditions stated above, and you may publicly display copies.\n• COPYING IN QUANTITY If you publish printed copies (or copies in media that commonly have printed covers) of the Document, numbering more than 100, and the Document’s license notice requires Cover Texts, you must enclose the copies in covers that carry, clearly and legibly, all these Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on the back cover. Both covers must also clearly and legibly identify you as the publisher of these copies. The front cover must present the full title with all words of the title equally prominent and visible. You may add other material on the covers in addition. Copying with changes limited to the covers, as long as they preserve the title of the Document and satisfy these conditions, can be treated as verbatim copying in other respects. If the required texts for either cover are too voluminous to fit legibly, you should put the first ones listed (as many as fit reasonably) on the actual cover, and continue the rest onto adjacent pages. If you publish or distribute Opaque copies of the Document numbering more than 100, you must either include a machine-readable Transparent copy along with each Opaque copy, or state in or with each Opaque copy a computer-network location from which the general network-using public has access to download using public-standard network protocols a complete Transparent copy of the Document, free of added material. If you use the latter option, you must take reasonably prudent steps, when you begin distribution of Opaque copies in quantity, to ensure that this Transparent copy will remain thus accessible at the stated location until at least one year after the last time you distribute an Opaque copy (directly or through your agents or retailers) of that edition to the public. It is requested, but not required, that you contact the authors of the Document well before redistributing any large number of copies, to give them a chance to provide you with an updated version of the Document.\n• MODIFICATIONS You may copy and distribute a Modified Version of the Document under the conditions of sections 2 and 3 above, provided that you release the Modified Version under precisely this License, with the Modified Version filling the role of the Document, thus licensing distribution and modification of the Modified Version to whoever possesses a copy of it. In addition, you must do these things in the Modified Version:\n• Use in the Title Page (and on the covers, if any) a title distinct from that of the Document, and from those of previous versions (which should, if there were any, be listed in the History section of the Document). You may use the same title as a previous version if the original publisher of that version gives permission.\n• List on the Title Page, as authors, one or more persons or entities responsible for authorship of the modifications in the Modified Version, together with at least five of the principal authors of the Document (all of its principal authors, if it has fewer than five), unless they release you from this requirement.\n• State on the Title page the name of the publisher of the Modified Version, as the publisher.\n• Preserve all the copyright notices of the Document.\n• Add an appropriate copyright notice for your modifications adjacent to the other copyright notices.\n• Include, immediately after the copyright notices, a license notice giving the public permission to use the Modified Version under the terms of this License, in the form shown in the Addendum below.\n• Preserve in that license notice the full lists of Invariant Sections and required Cover Texts given in the Document’s license notice.\n• Include an unaltered copy of this License.\n• Preserve the section Entitled “History”, Preserve its Title, and add to it an item stating at least the title, year, new authors, and publisher of the Modified Version as given on the Title Page. If there is no section Entitled “History” in the Document, create one stating the title, year, authors, and publisher of the Document as given on its Title Page, then add an item describing the Modified Version as stated in the previous sentence.\n• Preserve the network location, if any, given in the Document for public access to a Transparent copy of the Document, and likewise the network locations given in the Document for previous versions it was based on. These may be placed in the “History” section. You may omit a network location for a work that was published at least four years before the Document itself, or if the original publisher of the version it refers to gives permission.\n• For any section Entitled “Acknowledgements” or “Dedications”, Preserve the Title of the section, and preserve in the section all the substance and tone of each of the contributor acknowledgements and/or dedications given therein.\n• Preserve all the Invariant Sections of the Document, unaltered in their text and in their titles. Section numbers or the equivalent are not considered part of the section titles.\n• Delete any section Entitled “Endorsements”. Such a section may not be included in the Modified Version.\n• Do not retitle any existing section to be Entitled “Endorsements” or to conflict in title with any Invariant Section. If the Modified Version includes new front-matter sections or appendices that qualify as Secondary Sections and contain no material copied from the Document, you may at your option designate some or all of these sections as invariant. To do this, add their titles to the list of Invariant Sections in the Modified Version’s license notice. These titles must be distinct from any other section titles. You may add a section Entitled “Endorsements”, provided it contains nothing but endorsements of your Modified Version by various parties—for example, statements of peer review or that the text has been approved by an organization as the authoritative definition of a standard. You may add a passage of up to five words as a Front-Cover Text, and a passage of up to 25 words as a Back-Cover Text, to the end of the list of Cover Texts in the Modified Version. Only one passage of Front-Cover Text and one of Back-Cover Text may be added by (or through arrangements made by) any one entity. If the Document already includes a cover text for the same cover, previously added by you or by arrangement made by the same entity you are acting on behalf of, you may not add another; but you may replace the old one, on explicit permission from the previous publisher that added the old one. The author(s) and publisher(s) of the Document do not by this License give permission to use their names for publicity for or to assert or imply endorsement of any Modified Version.\n• COMBINING DOCUMENTS You may combine the Document with other documents released under this License, under the terms defined in section 4 above for modified versions, provided that you include in the combination all of the Invariant Sections of all of the original documents, unmodified, and list them all as Invariant Sections of your combined work in its license notice, and that you preserve all their Warranty Disclaimers. The combined work need only contain one copy of this License, and multiple identical Invariant Sections may be replaced with a single copy. If there are multiple Invariant Sections with the same name but different contents, make the title of each such section unique by adding at the end of it, in parentheses, the name of the original author or publisher of that section if known, or else a unique number. Make the same adjustment to the section titles in the list of Invariant Sections in the license notice of the combined work. In the combination, you must combine any sections Entitled “History” in the various original documents, forming one section Entitled “History”; likewise combine any sections Entitled “Acknowledgements”, and any sections Entitled “Dedications”. You must delete all sections Entitled “Endorsements.”\n• COLLECTIONS OF DOCUMENTS You may make a collection consisting of the Document and other documents released under this License, and replace the individual copies of this License in the various documents with a single copy that is included in the collection, provided that you follow the rules of this License for verbatim copying of each of the documents in all other respects. You may extract a single document from such a collection, and distribute it individually under this License, provided you insert a copy of this License into the extracted document, and follow this License in all other respects regarding verbatim copying of that document.\n• AGGREGATION WITH INDEPENDENT WORKS A compilation of the Document or its derivatives with other separate and independent documents or works, in or on a volume of a storage or distribution medium, is called an “aggregate” if the copyright resulting from the compilation is not used to limit the legal rights of the compilation’s users beyond what the individual works permit. When the Document is included in an aggregate, this License does not apply to the other works in the aggregate which are not themselves derivative works of the Document. If the Cover Text requirement of section 3 is applicable to these copies of the Document, then if the Document is less than one half of the entire aggregate, the Document’s Cover Texts may be placed on covers that bracket the Document within the aggregate, or the electronic equivalent of covers if the Document is in electronic form. Otherwise they must appear on printed covers that bracket the whole aggregate.\n• TRANSLATION Translation is considered a kind of modification, so you may distribute translations of the Document under the terms of section 4. Replacing Invariant Sections with translations requires special permission from their copyright holders, but you may include translations of some or all Invariant Sections in addition to the original versions of these Invariant Sections. You may include a translation of this License, and all the license notices in the Document, and any Warranty Disclaimers, provided that you also include the original English version of this License and the original versions of those notices and disclaimers. In case of a disagreement between the translation and the original version of this License or a notice or disclaimer, the original version will prevail. If a section in the Document is Entitled “Acknowledgements”, “Dedications”, or “History”, the requirement (section 4) to Preserve its Title (section 1) will typically require changing the actual title.\n• TERMINATION You may not copy, modify, sublicense, or distribute the Document except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, or distribute it is void, and will automatically terminate your rights under this License. However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, receipt of a copy of some or all of the same material does not give you any rights to use it.\n• FUTURE REVISIONS OF THIS LICENSE The Free Software Foundation may publish new, revised versions of the GNU Free Documentation License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. See http://www.gnu.org/copyleft/. Each version of the License is given a distinguishing version number. If the Document specifies that a particular numbered version of this License “or any later version” applies to it, you have the option of following the terms and conditions either of that specified version or of any later version that has been published (not as a draft) by the Free Software Foundation. If the Document does not specify a version number of this License, you may choose any version ever published (not as a draft) by the Free Software Foundation. If the Document specifies that a proxy can decide which future versions of this License can be used, that proxy’s public statement of acceptance of a version permanently authorizes you to choose that version for the Document.\n• RELICENSING “Massive Multiauthor Collaboration Site” (or “MMC Site”) means any World Wide Web server that publishes copyrightable works and also provides prominent facilities for anybody to edit those works. A public wiki that anybody can edit is an example of such a server. A “Massive Multiauthor Collaboration” (or “MMC”) contained in the site means any set of copyrightable works thus published on the MMC site. “CC-BY-SA” means the Creative Commons Attribution-Share Alike 3.0 license published by Creative Commons Corporation, a not-for-profit corporation with a principal place of business in San Francisco, California, as well as future copyleft versions of that license published by that same organization. “Incorporate” means to publish or republish a Document, in whole or in part, as part of another Document. An MMC is “eligible for relicensing” if it is licensed under this License, and if all works that were first published under this License somewhere other than this MMC, and subsequently incorporated in whole or in part into the MMC, (1) had no cover texts or invariant sections, and (2) were thus incorporated prior to November 1, 2008. The operator of an MMC Site may republish an MMC contained in the site under CC-BY-SA on the same site at any time before August 1, 2009, provided the MMC is eligible for relicensing. ADDENDUM: How to use this License for your documents To use this License in a document you have written, include a copy of the License in the document and put the following copyright and license notices just after the title page: Copyright (C) . Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled ``GNU Free Documentation License''. If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts, replace the “with…Texts.” line with this: with the Invariant Sections being , with the Front-Cover Texts being , and with the Back-Cover Texts being . If you have Invariant Sections without Cover Texts, or some other combination of the three, merge those two alternatives to suit the situation. If your document contains nontrivial examples of program code, we recommend releasing these examples in parallel under your choice of free software license, such as the GNU General Public License, to permit their use in free software."
    },
    {
        "link": "https://unix.stackexchange.com/questions/48006/logical-and-in-a-bash-script",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://stackoverflow.com/questions/6270440/how-to-test-string-and-integer-equality-and-combine-with-logical-and-oper",
        "document": "What you've written actually almost works (it would work if all the variables were numbers), but it's not an idiomatic way at all.\n• parentheses indicate a subshell. What's inside them isn't an expression like in many other languages. It's a list of commands (just like outside parentheses). These commands are executed in a separate subprocess, so any redirection, assignment, etc. performed inside the parentheses has no effect outside the parentheses.\n• With a leading dollar sign, is a command substitution: there is a command inside the parentheses, and the output from the command is used as part of the command line (after extra expansions unless the substitution is between double quotes, but that's another story).\n• braces are like parentheses in that they group commands, but they only influence parsing, not grouping. The program prints 4, whereas prints 2. (Also braces require spaces around them and a semicolon before closing, whereas parentheses don't. That's just a syntax quirk.)\n• With a leading dollar sign, is a parameter expansion, expanding to the value of a variable, with possible extra transformations.\n• double parentheses surround an arithmetic instruction, that is, a computation on integers, with a syntax resembling other programming languages. This syntax is mostly used for assignments and in conditionals.\n• The same syntax is used in arithmetic expressions , which expand to the integer value of the expression.\n• double brackets surround conditional expressions. Conditional expressions are mostly built on operators such as to test if a variable is empty and to test if a file exists. There are also string equality operators: (beware that the right-hand side is a pattern, e.g. tests if starts with while tests if is exactly ), and the familiar , and operators for negation, conjunction and disjunction as well as parentheses for grouping. Note that you need a space around each operator (e.g. , not ), and a space or a character like both inside and outside the brackets (e.g. , not ).\n• single brackets are an alternate form of conditional expressions with more quirks (but older and more portable). Don't write any for now; start worrying about them when you find scripts that contain them.\n\nThis is the idiomatic way to write your test in bash:\n\nIf you need portability to other shells, this would be the way:"
    },
    {
        "link": "https://kyleshevlin.com/using-and-and-or-in-bash-scripts",
        "document": "I write about Bash so often you might start to think it’s all I do. It’s not, but considering I spend a good portion of my day in the terminal, I’m always on the look out for ways to make it a more efficient experience.\n\nRecently, I came upon a simple trick for bash scripts that just has to be shared. It involves the operators (AND) and (OR). In most cases, and are used for evaluation purposes, resulting in a boolean value (true or false).\n\nIn most languages, this would look something like this:\n\nSince we know that an requires both expressions to be true, we can use this knowledge to chain bash commands that we only want to run in succession if the first command was successful. For example:\n\nIf the terminal is able to successfully into the directory , then it will attempt to create the file . If it fails, no attempt at file creation will be made.\n\nIn other circumstances, we might want to try one command and then another if the first fails. In this case, the operator is our friend. I have specifically used this in a bash alias I’ve made for deploying a site. Depending upon what version of Capistrano is being used in a project, the terminal command syntax is different. Thus, we simply try one, and if it fails we try another.\n\nSo, you can see that you can quickly use these to construct larger scripts that can do a rudimentary form of error handling without a lot of effort. Often, I need to deploy the same feature branch of code to multiple environments. I made a bash function using the and operators like I’ve laid out here to do just that with one short command.\n\nHope this inspires you a bit and encourages you to create your own bash scripts for programmatically adding some efficiency into your development process."
    },
    {
        "link": "https://unix.stackexchange.com/questions/24684/confusing-use-of-and-operators",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://ioflood.com/blog/bash-if-and",
        "document": "Are you finding it challenging to grasp conditional logic in Bash? You’re not alone. Many developers find themselves puzzled when it comes to using ‘if’ and ‘and’ operators in Bash scripting, but we’re here to help.\n\nThink of Bash as a decision-making machine. The ‘if’ and ‘and’ operators are the gears that help it make choices. They allow you to create scripts that can make decisions based on certain conditions, making your scripts more dynamic and versatile.\n\nIn this guide, we’ll help you understand and master the use of ‘if’ and ‘and’ operators in Bash scripting. We’ll cover everything from the basics to more advanced techniques, as well as alternative approaches. We’ll also discuss common issues and their solutions.\n\nSo, let’s dive in and start mastering conditional logic in Bash!\n\nTL;DR: How Do I Use ‘if’ and ‘and’ in Bash Scripting?\n\nIn this example, we have a variable set to 15. The statement checks if is greater than 10 and less than 20. Since both conditions are true, the command echo 'Var is between 10 and 20' is executed, and the output is ‘Var is between 10 and 20’.\n\nUnderstanding the Basics of ‘If’ and ‘And’ in Bash Scripting\n\nTo understand the basic use of ‘if’ and ‘and’ in Bash scripting, let’s start with a simple script example. We’ll use ‘if’ and ‘and’ to check if a file exists and if it is readable. This is a common use case in Bash scripting, especially when dealing with file operations.\n\nIn this example, we have a variable set to ‘test.txt’. The statement checks if the file named ‘test.txt’ exists and if it is readable . If both conditions are true, the command echo 'The file exists and is readable' is executed, and the output is ‘The file exists and is readable’. If either of the conditions is false, the clause is executed, and the output is ‘The file does not exist or is not readable’.\n\nThe advantage of this approach is that it allows us to check for multiple conditions before executing a command. This can make our scripts more robust and prevent errors. However, a potential pitfall is that if we don’t properly handle the case where one or both of the conditions are false, our script might not behave as expected. In the next section, we’ll discuss more complex uses of ‘if’ and ‘and’ in Bash scripting.\n\nNow that we’ve covered the basics, let’s dive into more complex uses of ‘if’ and ‘and’ in Bash scripting. Specifically, we’ll explore how to use these operators in conjunction with the ‘or’ operator to create more complex conditional statements.\n\nLet’s imagine a scenario where we want to check if a file is either readable or writable. We can use ‘if’, ‘and’, and ‘or’ to accomplish this.\n\nIn this script, we’re checking if the file named ‘test.txt’ is either readable or writable . The operator represents ‘or’. If either condition is true, the command echo 'The file is either readable or writable' is executed, and the output is ‘The file is either readable or writable’. If neither condition is true, the clause is executed, and the output is ‘The file is neither readable nor writable’.\n\nThis example demonstrates the power of combining ‘if’, ‘and’, and ‘or’ in Bash scripting. By understanding and using these operators, you can create complex conditional statements that allow your scripts to make more nuanced decisions.\n\nWhile ‘if’ and ‘and’ are powerful tools in Bash scripting, there are other ways to handle conditional logic that you might find useful in certain situations. Let’s explore two of these alternatives: ‘case’ statements and the ‘[[ ]]’ test operator.\n\n‘Case’ statements provide a way to perform different actions based on the value of a variable. Here’s an example:\n\nIn this script, we’re using a ‘case’ statement to perform different actions based on the value of the variable. If is ‘Monday’, it echoes ‘Start of the work week.’. If is ‘Friday’, it echoes ‘End of the work week.’. For any other value, it echoes ‘It is not Monday or Friday.’.\n\n‘Case’ statements can be a more readable alternative to ‘if’ and ‘and’ when dealing with multiple conditions. However, they are less flexible and can’t handle complex conditions as ‘if’ and ‘and’ can.\n\nUsing the ‘[[ ]]’ Test Operator in Bash\n\nThe ‘[[ ]]’ test operator is a more modern, flexible alternative to the ‘[ ]’ test used in our previous examples. Here’s an example of how you might use it:\n\nThe ‘[[ ]]’ test operator allows us to use ‘&&’ (and) and ‘||’ (or) directly within the test, without needing to use separate ‘[ ]’ tests. It also handles variables and strings more reliably than the ‘[ ]’ test.\n\nHowever, ‘[[ ]]’ is not as portable as ‘[ ]’. It’s not supported by all Unix-like operating systems or older versions of Bash. Therefore, you should consider your target environment before deciding to use it.\n\nUsing ‘if’ and ‘and’ in Bash scripting can sometimes lead to unexpected results or errors. Let’s discuss some common issues you might encounter and how to resolve them.\n\nOne common pitfall is trying to use an uninitialized variable in a condition. Let’s see what happens in such a case:\n\nIn this example, we didn’t set a value for . When the statement tries to evaluate the conditions, it doesn’t know how to compare to 10 and 20, leading to a ‘unary operator expected’ error.\n\nTo prevent this, you should always ensure that your variables are initialized before using them in conditions. You could set a default value, or check if the variable is set using the ‘-v’ test:\n\nAnother common issue is using incorrect operators in your conditions. For example, using ‘&’ instead of ‘&&’ for the ‘and’ operator:\n\nIn this example, we used ‘&’ instead of ‘&&’. Bash interprets this as trying to run two commands in parallel, leading to errors. To fix this, always ensure you use the correct operators in your conditions.\n\nBash scripting is a powerful tool for automating tasks on Unix-like operating systems. It allows you to write scripts that can perform complex tasks, making your work more efficient and less error-prone.\n\nOne of the fundamental concepts in Bash scripting is conditional logic. This is the ability of a script to make decisions based on certain conditions. It’s like a traffic light: if the light is green, you go; if it’s red, you stop.\n\nIn Bash, conditional logic is implemented using various operators, with ‘if’ and ‘and’ being among the most commonly used. The ‘if’ operator allows you to specify a condition that must be met, and the ‘and’ operator allows you to specify multiple conditions that must all be met.\n\nHere’s a simple example that demonstrates this concept:\n\nIn this script, we’re using ‘if’ and ‘and’ to check if is greater than 10 and less than 20. If both conditions are met, the script echoes ‘Var is greater than 10 and less than 20’.\n\nUnderstanding and mastering conditional logic is crucial for writing effective Bash scripts. It allows you to create scripts that can adapt to different situations, making them more versatile and powerful. In the next section, we’ll explore how to apply these concepts in larger scripts or projects.\n\nExpanding Your Bash Toolkit: ‘If’ and ‘And’ in Larger Projects\n\nWhile our examples thus far have been relatively simple, the ‘if’ and ‘and’ operators play a crucial role in larger scripts or projects. They’re the building blocks for creating complex conditional logic, which is the heart of any dynamic script or program.\n\nIn larger projects, ‘if’ and ‘and’ often work hand-in-hand with other commands and functions to achieve more complex tasks. For instance, they can be used in conjunction with ‘for’ loops to perform certain actions on a series of items, or with ‘while’ loops to keep performing an action until a certain condition is met.\n\nHere’s an example of how you might use ‘if’ and ‘and’ in a larger script:\n\nIn this script, we’re using a ‘for’ loop to iterate over all ‘.txt’ files in the current directory. For each file, we use ‘if’ and ‘and’ to check if the file is readable and writable. If it is, we echo ‘Processing’ and the filename, and then we would add our processing commands. If the file is not readable or writable, we echo ‘Cannot process’ and the filename.\n\nFor more in-depth information about Bash scripting and conditional logic, consider checking out the following resources:\n• Advanced Bash-Scripting Guide: This is a comprehensive guide to Bash scripting that covers everything from the basics to more advanced topics.\n• None GNU Bash Manual: This is the official manual for Bash. It’s a bit dense, but it’s a great resource if you want to understand how everything works under the hood.\n• None Bash if && Statement: This guide from Diskinternals focuses on the “if &&” statement in Bash scripting.\n\nWrapping Up: Mastering ‘If’ and ‘And’ in Bash Scripting\n\nIn this comprehensive guide, we’ve explored the use of ‘if’ and ‘and’ operators in Bash scripting. These operators form the cornerstone of conditional logic in Bash, enabling your scripts to make decisions based on specific conditions.\n\nWe began with the basics, learning how to use ‘if’ and ‘and’ in a simple Bash script. We then delved into more advanced usage, exploring how to use these operators with other operators like ‘or’ to create more complex conditional statements.\n\nAlong the way, we also discussed common issues you might encounter when using ‘if’ and ‘and’ in Bash scripting, such as uninitialized variables and incorrect use of operators, providing you with solutions for each problem.\n\nWe also looked at alternative approaches to handling conditional logic in Bash, such as using ‘case’ statements and the ‘[[ ]]’ test operator. Here’s a quick comparison of these methods:\n\nWhether you’re just starting out with Bash scripting or you’re looking to level up your skills, we hope this guide has given you a deeper understanding of how to use ‘if’ and ‘and’ in Bash scripting.\n\nMastering these operators will allow you to create more dynamic and versatile Bash scripts. Keep practicing and experimenting, and you’ll soon become a pro at handling conditional logic in Bash. Happy scripting!"
    }
]