[
    {
        "link": "https://w3schools.com/jsref/prop_text_value.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://stackoverflow.com/questions/36786136/getting-html-dom-element-and-setting-it-to-a-value-of-a-input-tag",
        "document": "There is an element on my page with the id . I would like to get its value and pass it along to my tag.\n\nI am essentially trying to do something like this (doesn't work).\n\nIs there anyway to do this?\n\nThis is not only on load.\n\nEssentially, I have a bunch of textboxes grouped together in a form.\n\nThen I have another form with a button. When the user hits the button, I want my input tags' values be the current values entered in the textboxes.\n\nEDIT: Thanks all! Got it work. I essentially had to remove the \"value\" attribute of the input tags and then add an \"onclick\" attribute to my button and then call those javascript codes you guys provided me."
    },
    {
        "link": "https://geeksforgeeks.org/how-to-get-the-value-of-text-input-field-using-javascript",
        "document": "Get the Value of Text Input Field using JavaScript\n\nGetting the value of a text input field using JavaScript refers to accessing the current content entered by a user in an input element, such as <input> or <textarea>, by utilizing the value property. This allows for dynamic interaction and data manipulation in web forms.\n\nGetting the Value of a Text Input Field\n\nThe value property in JavaScript represents the current value of an input element, such as <input>, <textarea>, or <select>. It allows you to access and manipulate the text, number, or selected option within the input element.\n\nExample: Here, we are using the Value property to get the value of the text input field.\n• None An <input> element with the ID “myInput” is defined.\n• None A button with an onclick event handler is provided to trigger the getValue() function.\n• None The getValue() function retrieves the input element using getElementById(), accesses its value property to get the text entered by the user, and displays it in an alert.\n\nGetting the Value of a Textarea\n\nExample : Here, we are getting the text area value using value property.\n• None A <textarea> element with the ID “myTextarea” is defined.\n• None A button with an onclick event handler is provided to trigger the getValue() function.\n• None The getValue() function retrieves the <textarea> element using getElementById(), accesses its value property to get the text entered by the user, and displays it in an alert."
    },
    {
        "link": "https://shecodes.io/athena/77658-how-to-get-the-value-of-an-input-in-javascript",
        "document": "const toggleInfo = (index, event) => { setVisibleLightIndexes((prev) => { if (prev.includes(index)) { return prev.filter((i) => i !== index); } else { return [...prev, index]; } }); const clickedElement = event.target.closest(\".chauvetLights\"); if (clickedElement) { clickedElement.classList.toggle(\"expanded\"); } toggleBackgroundColor(event); }; TypeError: Cannot read properties of undefined (reading 'target') at k (home-OO3WpeNb.js:1:102576) at onClick (home-OO3WpeNb.js:1:104620) at Object.Em (index-h-qGlws7.js:38:9852) at km (index-h-qGlws7.js:38:10006) at Cm (index-h-qGlws7.js:38:10063) at Wa (index-h-qGlws7.js:38:31422) at fd (index-h-qGlws7.js:38:31839) at index-h-qGlws7.js:38:36751 at Vs (index-h-qGlws7.js:41:36768) at Df (index-h-qGlws7.js:38:8988)\n\nAdd a value attribute to both radio buttons. For convenience, set the button's value attribute to the same value as its id attribute."
    },
    {
        "link": "https://w3schools.com/jsref/dom_obj_text.asp",
        "document": "The Input Text object represents an HTML <input> element with type=\"text\".\n\nYou can access an <input> element with type=\"text\" by using getElementById():\n\nTip: You can also access <input type=\"text\"> by searching through the elements collection of a form.\n\nYou can create an <input> element with type=\"text\" by using the document.createElement() method:\n\nThe Input Text object also supports the standard properties and events."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById",
        "document": "The method of the interface returns an object representing the element whose property matches the specified string. Since element IDs are required to be unique if specified, they're a useful way to get access to a specific element quickly. If you need to get access to an element which doesn't have an ID, you can use to find the element using any selector. Note: IDs should be unique inside a document. If two or more elements in a document have the same ID, this method returns the first element found.\n\nUnlike some other element-lookup methods such as and , is only available as a method of the global object, and not available as a method on all element objects in the DOM. Because ID values must be unique throughout the entire document, there is no need for \"local\" versions of the function.\n\nIf there is no element with the given , this function returns . Note that the parameter is case-sensitive, so will return instead of the element because \"M\" and \"m\" are different for the purposes of this method. Elements not in the document are not searched by . When creating an element and assigning it an ID, you have to insert the element into the document tree with or a similar method before you can access it with : In non-HTML documents, the DOM implementation must have information on which attributes are of type ID. Attributes with the name \"id\" are not of type ID unless so defined in the document's DTD. The attribute is defined to be of ID type in the common cases of XHTML, XUL, and others. Implementations that do not know whether attributes are of type ID or not are expected to return ."
    },
    {
        "link": "https://w3schools.com/js/js_htmldom_elements.asp",
        "document": "This page teaches you how to find and access HTML elements in an HTML page.\n\nOften, with JavaScript, you want to manipulate HTML elements.\n\nTo do so, you have to find the elements first. There are several ways to do this:\n\nThe easiest way to find an HTML element in the DOM, is by using the element id.\n\nThis example finds the element with :\n\nIf the element is found, the method will return the element as an object (in element).\n\nIf the element is not found, element will contain .\n\nThis example finds all elements:\n\nThis example finds the element with , and then finds all elements inside :\n\nIf you want to find all HTML elements with the same class name, use .\n\n\n\nThis example returns a list of all elements with .\n\nIf you want to find all HTML elements that match a specified CSS selector (id, class names, types, attributes, values of attributes, etc), use the method.\n\n\n\nThis example returns a list of all elements with .\n\nThis example finds the form element with , in the forms collection, and displays all element values:\n\nThe following HTML objects (and object collections) are also accessible:"
    },
    {
        "link": "https://w3schools.com/jsref/met_document_getelementbyid.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://stackoverflow.com/questions/66955632/accessing-dom-element-using-document-name-and-document-id",
        "document": "So I am new to javascript, and I know how to access DOM elements using methods. But in one example I saw that it's possible to access elements directly using their name or like:\n\nWhich is very confusing to me. Google and online courses only say about , , and objects (and object collections). I really don't understand how this works. When I change to id for form it doesn't work\n\nAlso it seems like it only work with form and input, and not for paragraph or div. Am I missing some obvious things here? I'm sorry if my question is too basic."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API",
        "document": "This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015 . * Some parts of this feature may have varying levels of support.\n\nThe HTML DOM API is made up of the interfaces that define the functionality of each of the elements in HTML, as well as any supporting types and interfaces they rely upon. The functional areas included in the HTML DOM API include:\n• Access to and control of HTML elements via the DOM.\n• Access to and manipulation of form data.\n• Interacting with the contents of 2D images and the context of an HTML , for example to draw on top of them.\n• Management of media connected to the HTML media elements ( and ).\n• Dragging and dropping of content on webpages.\n• Supporting and connective interfaces for other APIs such as Web Components, Web Storage, Web Workers, WebSocket, and Server-sent events.\n\nThe Document Object Model (DOM) is an architecture that describes the structure of a ; each document is represented by an instance of the interface . A document, in turn, consists of a hierarchical tree of nodes, in which a node is a fundamental record representing a single object within the document (such as an element or text node). Nodes may be strictly organizational, providing a means for grouping other nodes together or for providing a point at which a hierarchy can be constructed; other nodes may represent visible components of a document. Each node is based on the interface, which provides properties for getting information about the node as well as methods for creating, deleting, and organizing nodes within the DOM. Nodes don't have any concept of including the content that is actually displayed in the document. They're empty vessels. The fundamental notion of a node that can represent visual content is introduced by the interface. An object instance represents a single element in a document created using either HTML or an XML vocabulary such as SVG. For example, consider a document with two elements, one of which has two more elements nested inside it: While the interface is defined as part of the DOM specification, the HTML specification significantly enhances it to add information specific to using the DOM in the context of a web browser, as well as to using it to represent HTML documents specifically. Among the things added to by the HTML standard are:\n• Support for accessing various information provided by the HTTP headers when loading the page, such as the location from which the document was loaded, cookies, modification date, referring site, and so forth.\n• Access to lists of elements in the document's block and body, as well as lists of the images, links, scripts, etc. contained in the document.\n• Support for interacting with the user by examining focus and by executing commands on editable content.\n• Event handlers for document events defined by the HTML standard to allow access to mouse and keyboard events, drag and drop, media control, and more.\n• Event handlers for events that can be delivered to both elements and documents; these presently include only copy, cut, and paste actions.\n\nThe interface has been further adapted to represent HTML elements specifically by introducing the interface, which all more specific HTML element classes inherit from. This expands the class to add HTML-specific general features to the element nodes. Properties added by include for example and . An HTML document is a DOM tree in which each of the nodes is an HTML element, represented by the interface. The class, in turn, implements , so every element is also a node (but not the other way around). This way, the structural features implemented by the interface are also available to HTML elements, allowing them to be nested within each other, created and deleted, moved around, and so forth. The interface is generic, however, providing only the functionality common to all HTML elements such as the element's ID, its coordinates, the HTML making up the element, information about scroll position, and so forth. In order to expand upon the functionality of the core interface to provide the features needed by a specific element, the class is subclassed to add the needed properties and methods. For example, the element is represented by an object of type . augments the type by adding properties such as and methods like to provide canvas-specific features. The overall inheritance for HTML element classes looks like this: As such, an element inherits the properties and methods of all of its ancestors. For example, consider a element, which is represented in the DOM by an object of type . The element, then, includes the anchor-specific properties and methods described in that class's documentation, but also those defined by and , as well as from and, finally, . Each level defines a key aspect of the utility of the element. From , the element inherits concepts surrounding the ability for the element to be contained by another element, and to contain other elements itself. Of special importance is what is gained by inheriting from : the ability to receive and handle events such as mouse clicks, play and pause events, and so forth. There are elements that share commonalities and thus have an additional intermediary type. For example, the and elements both present audiovisual media. The corresponding types, and , are both based upon the common type , which in turn is based upon and so forth. defines the methods and properties held in common between audio and video elements. These element-specific interfaces make up the majority of the HTML DOM API, and are the focus of this article. To learn more about the actual structure of the DOM, see Introduction to the DOM."
    }
]