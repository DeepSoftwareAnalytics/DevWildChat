[
    {
        "link": "https://docs.oracle.com/javase/8/docs/api/java/lang/String.html",
        "document": "\n• Returns the length of this string. The length is equal to the number of Unicode code units in the string. the length of the sequence of characters represented by this object.\n• if, and only if, . Returnsif, and only if, is if is , otherwise\n• value at the specified index. An index ranges from to . The first value of the sequence is at index , the next at index , and so on, as for array indexing. Returns thevalue at the specified index. An index ranges fromto. The firstvalue of the sequence is at index, the next at index, and so on, as for array indexing. If the value specified by the index is a surrogate, the surrogate value is returned. - the index of the value. the value at the specified index of this string. The first value is at index . - if the argument is negative or not less than the length of this string.\n• values (Unicode code units) and ranges from to . Returns the character (Unicode code point) at the specified index. The index refers tovalues (Unicode code units) and ranges fromto If the value specified at the given index is in the high-surrogate range, the following index is less than the length of this , and the value at the following index is in the low-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the value at the given index is returned. - the index to the values the code point value of the character at the - if the argument is negative or not less than the length of this string.\n• values (Unicode code units) and ranges from to Returns the character (Unicode code point) before the specified index. The index refers tovalues (Unicode code units) and ranges fromto If the value at is in the low-surrogate range, is not negative, and the value at is in the high-surrogate range, then the supplementary code point value of the surrogate pair is returned. If the value at is an unpaired low-surrogate or a high-surrogate, the surrogate value is returned. - the index following the code point that should be returned the Unicode code point value before the given index. - if the argument is less than 1 or greater than the length of this string.\n• Returns the number of Unicode code points in the specified text range of this . The text range begins at the specified and extends to the at index . Thus the length (in s) of the text range is . Unpaired surrogates within the text range count as one code point each. - the index to the first of the text range. - the index after the last of the text range. the number of Unicode code points in the specified text range - if the is negative, or is larger than the length of this , or is larger than .\n• Returns the index within this that is offset from the given by code points. Unpaired surrogates within the text range given by and count as one code point each. - the index to be offset the index within this - if is negative or larger then the length of this , or if is positive and the substring starting with has fewer than code points, or if is negative and the substring before has fewer than the absolute value of code points.\n• Copies characters from this string into the destination character array. The first character to be copied is at index ; the last character to be copied is at index (thus the total number of characters to be copied is ). The characters are copied into the subarray of starting at index and ending at index: - index of the first character in the string to copy. - index after the last character in the string to copy. - the start offset in the destination array. - If any of the following is true:\n• is greater than the length of this string\n• Copies characters from this string into the destination byte array. Each byte receives the 8 low-order bits of the corresponding character. The eight high-order bits of each character are not copied and do not participate in the transfer in any way. The first character to be copied is at index ; the last character to be copied is at index . The total number of characters to be copied is . The characters, converted to bytes, are copied into the subarray of starting at index and ending at index: - Index of the first character in the string to copy - Index after the last character in the string to copy - The start offset in the destination array - If any of the following is true:\n• is greater than the length of this String\n• into a sequence of bytes using the named charset, storing the result into a new byte array. Encodes thisinto a sequence of bytes using the named charset, storing the result into a new byte array. The behavior of this method when this string cannot be encoded in the given charset is unspecified. The class should be used when more control over the encoding process is required. - The name of a supported charset - If the named charset is not supported\n• into a sequence of bytes using the given Encodes thisinto a sequence of bytes using the given charset , storing the result into a new byte array. This method always replaces malformed-input and unmappable-character sequences with this charset's default replacement byte array. The class should be used when more control over the encoding process is required. - The Charset to be used to encode the\n• into a sequence of bytes using the platform's default charset, storing the result into a new byte array. Encodes thisinto a sequence of bytes using the platform's default charset, storing the result into a new byte array. The behavior of this method when this string cannot be encoded in the default charset is unspecified. The class should be used when more control over the encoding process is required.\n• Compares this string to the specified object. The result is if and only if the argument is not and is a object that represents the same sequence of characters as this object. - The object to compare this against if the given object represents a equivalent to this string, otherwise\n• Compares this string to the specified . The result is if and only if this represents the same sequence of characters as the specified . This method synchronizes on the . - The to compare this against if this represents the same sequence of characters as the specified , otherwise\n• Compares this string to the specified . The result is if and only if this represents the same sequence of char values as the specified sequence. Note that if the is a then the method synchronizes on it. - The sequence to compare this against if this represents the same sequence of char values as the specified sequence, otherwise\n• to another , ignoring case considerations. Two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. Compares thisto another, ignoring case considerations. Two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. Two characters and are considered the same ignoring case if at least one of the following is true:\n• The two characters are the same (as compared by the operator)\n• Applying the method to each character produces the same result\n• Applying the method to each character produces the same result - The to compare this against if the argument is not and it represents an equivalent ignoring case; otherwise\n• object is compared lexicographically to the character sequence represented by the argument string. The result is a negative integer if this object lexicographically precedes the argument string. The result is a positive integer if this object lexicographically follows the argument string. The result is zero if the strings are equal; returns exactly when the . Compares two strings lexicographically. The comparison is based on the Unicode value of each character in the strings. The character sequence represented by thisobject is compared lexicographically to the character sequence represented by the argument string. The result is a negative integer if thisobject lexicographically precedes the argument string. The result is a positive integer if thisobject lexicographically follows the argument string. The result is zero if the strings are equal;returnsexactly when the method would return This is the definition of lexicographic ordering. If two strings are different, then either they have different characters at some index that is a valid index for both strings, or their lengths are different, or both. If they have different characters at one or more index positions, let k be the smallest such index; then the string whose character at position k has the smaller value, as determined by using the < operator, lexicographically precedes the other string. In this case, returns the difference of the two character values at position in the two string -- that is, the value: If there is no index position at which they differ, then the shorter string lexicographically precedes the longer string. In this case, returns the difference of the lengths of the strings -- that is, the value: If there is no index position at which they differ, then the shorter string lexicographically precedes the longer string. In this case,returns the difference of the lengths of the strings -- that is, the value: - the to be compared. the value if the argument string is equal to this string; a value less than if this string is lexicographically less than the string argument; and a value greater than if this string is lexicographically greater than the string argument.\n• with normalized versions of the strings where case differences have been eliminated by calling on each character. Compares two strings lexicographically, ignoring case differences. This method returns an integer whose sign is that of callingwith normalized versions of the strings where case differences have been eliminated by callingon each character. Note that this method does not take locale into account, and will result in an unsatisfactory ordering for certain locales. The java.text package provides collators to allow locale-sensitive ordering. - the to be compared. a negative integer, zero, or a positive integer as the specified String is greater than, equal to, or less than this String, ignoring case considerations.\n• Tests if two string regions are equal. A substring of this object is compared to a substring of the argument other. The result is true if these substrings represent identical character sequences. The substring of this object to be compared begins at index and has length . The substring of other to be compared begins at index and has length . The result is if and only if at least one of the following is true:\n• is greater than the length of this object.\n• is greater than the length of the other argument.\n• There is some nonnegative integer k less than such that: k k - the starting offset of the subregion in this string. - the starting offset of the subregion in the string argument. - the number of characters to compare. if the specified subregion of this string exactly matches the specified subregion of the string argument; otherwise.\n• Tests if two string regions are equal. A substring of this object is compared to a substring of the argument . The result is if these substrings represent character sequences that are the same, ignoring case if and only if is true. The substring of this object to be compared begins at index and has length . The substring of to be compared begins at index and has length . The result is if and only if at least one of the following is true:\n• is greater than the length of this object.\n• is greater than the length of the other argument.\n• is and there is some nonnegative integer k less than such that:\n• is and there is some nonnegative integer k less than such that: and: - the starting offset of the subregion in this string. - the starting offset of the subregion in the string argument. - the number of characters to compare. if the specified subregion of this string matches the specified subregion of the string argument; otherwise. Whether the matching is exact or case insensitive depends on the argument.\n• Tests if the substring of this string beginning at the specified index starts with the specified prefix. - where to begin looking in this string. if the character sequence represented by the argument is a prefix of the substring of this object starting at index ; otherwise. The result is if is negative or greater than the length of this object; otherwise the result is the same as the result of the expression\n• Tests if this string starts with the specified prefix. if the character sequence represented by the argument is a prefix of the character sequence represented by this string; otherwise. Note also that will be returned if the argument is an empty string or is equal to this object as determined by the method.\n• Tests if this string ends with the specified suffix. if the character sequence represented by the argument is a suffix of the character sequence represented by this object; otherwise. Note that the result will be if the argument is the empty string or is equal to this object as determined by the method.\n• object is computed as using arithmetic, where is the ith character of the string, is the length of the string, and indicates exponentiation. (The hash value of the empty string is zero.) Returns a hash code for this string. The hash code for aobject is computed asusingarithmetic, whereis theth character of the string,is the length of the string, andindicates exponentiation. (The hash value of the empty string is zero.) a hash code value for this object.\n• occurs in the character sequence represented by this object, then the index (in Unicode code units) of the first such occurrence is returned. For values of in the range from 0 to 0xFFFF (inclusive), this is the smallest value k such that: is true. For other values of , it is the smallest value k such that: is true. In either case, if no such character occurs in this string, then is returned. Returns the index within this string of the first occurrence of the specified character. If a character with valueoccurs in the character sequence represented by thisobject, then the index (in Unicode code units) of the first such occurrence is returned. For values ofin the range from 0 to 0xFFFF (inclusive), this is the smallest valuesuch that:is true. For other values of, it is the smallest valuesuch that:is true. In either case, if no such character occurs in this string, thenis returned. the index of the first occurrence of the character in the character sequence represented by this object, or if the character does not occur.\n• Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index. If a character with value occurs in the character sequence represented by this object at an index no smaller than , then the index of the first such occurrence is returned. For values of in the range from 0 to 0xFFFF (inclusive), this is the smallest value k such that: is true. For other values of , it is the smallest value k such that: is true. In either case, if no such character occurs in this string at or after position , then is returned. is true. For other values of, it is the smallest valuesuch that:is true. In either case, if no such character occurs in this string at or after position, thenis returned. There is no restriction on the value of . If it is negative, it has the same effect as if it were zero: this entire string may be searched. If it is greater than the length of this string, it has the same effect as if it were equal to the length of this string: is returned. All indices are specified in values (Unicode code units). - the index to start the search from. the index of the first occurrence of the character in the character sequence represented by this object that is greater than or equal to , or if the character does not occur.\n• in the range from 0 to 0xFFFF (inclusive), the index (in Unicode code units) returned is the largest value k such that: is true. For other values of , it is the largest value k such that: is true. In either case, if no such character occurs in this string, then is returned. The is searched backwards starting at the last character. Returns the index within this string of the last occurrence of the specified character. For values ofin the range from 0 to 0xFFFF (inclusive), the index (in Unicode code units) returned is the largest valuesuch that:is true. For other values of, it is the largest valuesuch that:is true. In either case, if no such character occurs in this string, thenis returned. Theis searched backwards starting at the last character. the index of the last occurrence of the character in the character sequence represented by this object, or if the character does not occur.\n• in the range from 0 to 0xFFFF (inclusive), the index returned is the largest value k such that: is true. For other values of , it is the largest value k such that: is true. In either case, if no such character occurs in this string at or before position , then is returned. Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index. For values ofin the range from 0 to 0xFFFF (inclusive), the index returned is the largest valuesuch that:is true. For other values of, it is the largest valuesuch that:is true. In either case, if no such character occurs in this string at or before position, thenis returned. All indices are specified in values (Unicode code units). - the index to start the search from. There is no restriction on the value of . If it is greater than or equal to the length of this string, it has the same effect as if it were equal to one less than the length of this string: this entire string may be searched. If it is negative, it has the same effect as if it were -1: -1 is returned. the index of the last occurrence of the character in the character sequence represented by this object that is less than or equal to , or if the character does not occur before that point.\n• Returns the index within this string of the first occurrence of the specified substring. The returned index is the smallest value k for which: If no such value of k exists, then is returned. If no such value ofexists, thenis returned. - the substring to search for. the index of the first occurrence of the specified substring, or if there is no such occurrence.\n• Returns the index within this string of the first occurrence of the specified substring, starting at the specified index. The returned index is the smallest value k for which: If no such value of k exists, then is returned. If no such value ofexists, thenis returned. - the substring to search for. - the index from which to start the search. the index of the first occurrence of the specified substring, starting at the specified index, or if there is no such occurrence.\n• . Returns the index within this string of the last occurrence of the specified substring. The last occurrence of the empty string \"\" is considered to occur at the index value The returned index is the largest value k for which: If no such value of k exists, then is returned. If no such value ofexists, thenis returned. - the substring to search for. the index of the last occurrence of the specified substring, or if there is no such occurrence.\n• Returns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index. The returned index is the largest value k for which: If no such value of k exists, then is returned. If no such value ofexists, thenis returned. - the substring to search for. - the index to start the search from. the index of the last occurrence of the specified substring, searching backward from the specified index, or if there is no such occurrence.\n• Returns a string that is a substring of this string. The substring begins with the character at the specified index and extends to the end of this string. - if is negative or larger than the length of this object.\n• and extends to the character at index . Thus the length of the substring is . Returns a string that is a substring of this string. The substring begins at the specifiedand extends to the character at index. Thus the length of the substring is - if the is negative, or is larger than the length of this object, or is larger than .\n• Returns a character sequence that is a subsequence of this sequence. An invocation of this method of the form behaves in exactly the same way as the invocation behaves in exactly the same way as the invocation This method is defined so that the class can implement the interface. - if or is negative, if is greater than , or if is greater than\n• Concatenates the specified string to the end of this string. If the length of the argument string is , then this object is returned. Otherwise, a object is returned that represents a character sequence that is the concatenation of the character sequence represented by this object and the character sequence represented by the argument string. - the that is concatenated to the end of this . a string that represents the concatenation of this object's characters followed by the string argument's characters.\n• in this string with . Returns a string resulting from replacing all occurrences ofin this string with If the character does not occur in the character sequence represented by this object, then a reference to this object is returned. Otherwise, a object is returned that represents a character sequence identical to the character sequence represented by this object, except that every occurrence of is replaced by an occurrence of . \"mesquite in your cellar\".replace('e', 'o') returns \"mosquito in your collar\" \"the war of baronets\".replace('r', 'y') returns \"the way of bayonets\" \"sparring with a purple porpoise\".replace('p', 't') returns \"starring with a turtle tortoise\" \"JonL\".replace('q', 'x') returns \"JonL\" (no change) a string derived from this string by replacing every occurrence of with .\n• Tells whether or not this string matches the given regular expression An invocation of this method of the form str regex yields exactly the same result as the expression - the regular expression to which this string is to be matched if, and only if, this string matches the given regular expression - if the regular expression's syntax is invalid\n• Returns true if and only if this string contains the specified sequence of char values. - the sequence to search for true if this string contains , false otherwise\n• Replaces the first substring of this string that matches the given regular expression with the given replacement. An invocation of this method of the form str regex repl yields exactly the same result as the expression Note that backslashes ( ) and dollar signs ( ) in the replacement string may cause the results to be different than if it were being treated as a literal replacement string; see . Use to suppress the special meaning of these characters, if desired. - the regular expression to which this string is to be matched - the string to be substituted for the first match - if the regular expression's syntax is invalid\n• Replaces each substring of this string that matches the given regular expression with the given replacement. An invocation of this method of the form str regex repl yields exactly the same result as the expression Note that backslashes ( ) and dollar signs ( ) in the replacement string may cause the results to be different than if it were being treated as a literal replacement string; see . Use to suppress the special meaning of these characters, if desired. - the regular expression to which this string is to be matched - the string to be substituted for each match - if the regular expression's syntax is invalid\n• Replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence. The replacement proceeds from the beginning of the string to the end, for example, replacing \"aa\" with \"b\" in the string \"aaa\" will result in \"ba\" rather than \"ab\". - The sequence of char values to be replaced\n• Splits this string around matches of the given regular expression The array returned by this method contains each substring of this string that is terminated by another substring that matches the given expression or is terminated by the end of the string. The substrings in the array are in the order in which they occur in this string. If the expression does not match any part of the input then the resulting array has just one element, namely this string. When there is a positive-width match at the beginning of this string then an empty leading substring is included at the beginning of the resulting array. A zero-width match at the beginning however never produces such empty leading substring. The parameter controls the number of times the pattern is applied and therefore affects the length of the resulting array. If the limit n is greater than zero then the pattern will be applied at most n - 1 times, the array's length will be no greater than n, and the array's last entry will contain all input beyond the last matched delimiter. If n is non-positive then the pattern will be applied as many times as possible and the array can have any length. If n is zero then the pattern will be applied as many times as possible, the array can have any length, and trailing empty strings will be discarded. The string , for example, yields the following results with these parameters: An invocation of this method of the form str. regex n yields the same result as the expression - the result threshold, as described above the array of strings computed by splitting this string around matches of the given regular expression - if the regular expression's syntax is invalid\n• Splits this string around matches of the given regular expression This method works as if by invoking the two-argument method with the given expression and a limit argument of zero. Trailing empty strings are therefore not included in the resulting array. The string , for example, yields the following results with these expressions: the array of strings computed by splitting this string around matches of the given regular expression - if the regular expression's syntax is invalid\n• joined together with a copy of the specified . Note that if an element is null, then is added. Returns a new String composed of copies of thejoined together with a copy of the specifiedNote that if an element is null, thenis added. - the delimiter that separates each element - the elements to join together. a new that is composed of the separated by the - If or is\n• composed of copies of the joined together with a copy of the specified . For example, List<String> strings = new LinkedList<>(); strings.add(\"Java\");strings.add(\"is\"); strings.add(\"cool\"); String message = String.join(\" \", strings); //message returned is: \"Java is cool\" Set<String> strings = new LinkedHashSet<>(); strings.add(\"Java\"); strings.add(\"is\"); strings.add(\"very\"); strings.add(\"cool\"); String message = String.join(\"-\", strings); //message returned is: \"Java-is-very-cool\" Note that if an individual element is , then is added. Returns a newcomposed of copies of thejoined together with a copy of the specifiedNote that if an individual element is, thenis added. - a sequence of characters that is used to separate each of the in the resulting - an that will have its joined together. a new that is composed from the argument - If or is\n• to lower case using the rules of the given . Case mapping is based on the Unicode Standard version specified by the may be a different length than the original . Converts all of the characters in thisto lower case using the rules of the given. Case mapping is based on the Unicode Standard version specified by the class. Since case mappings are not always 1:1 char mappings, the resultingmay be a different length than the original Examples of lowercase mappings are in the following table: - use the case transformation rules for this locale\n• to lower case using the rules of the default locale. This is equivalent to calling . Converts all of the characters in thisto lower case using the rules of the default locale. This is equivalent to calling Note: This method is locale sensitive, and may produce unexpected results if used for strings that are intended to be interpreted locale independently. Examples are programming language identifiers, protocol keys, and HTML tags. For instance, in a Turkish locale returns , where '\\u0131' is the LATIN SMALL LETTER DOTLESS I character. To obtain correct results for locale insensitive strings, use .\n• to upper case using the rules of the given . Case mapping is based on the Unicode Standard version specified by the may be a different length than the original . Converts all of the characters in thisto upper case using the rules of the given. Case mapping is based on the Unicode Standard version specified by the class. Since case mappings are not always 1:1 char mappings, the resultingmay be a different length than the original Examples of locale-sensitive and 1:M case mappings are in the following table. - use the case transformation rules for this locale\n• to upper case using the rules of the default locale. This method is equivalent to . Converts all of the characters in thisto upper case using the rules of the default locale. This method is equivalent to Note: This method is locale sensitive, and may produce unexpected results if used for strings that are intended to be interpreted locale independently. Examples are programming language identifiers, protocol keys, and HTML tags. For instance, in a Turkish locale returns , where '\\u0130' is the LATIN CAPITAL LETTER I WITH DOT ABOVE character. To obtain correct results for locale insensitive strings, use .\n• Returns a string whose value is this string, with any leading and trailing whitespace removed. If this object represents an empty character sequence, or the first and last characters of character sequence represented by this object both have codes greater than (the space character), then a reference to this object is returned. Otherwise, if there is no character with a code greater than in the string, then a object representing an empty string is returned. Otherwise, let k be the index of the first character in the string whose code is greater than , and let m be the index of the last character in the string whose code is greater than . A object is returned, representing the substring of this string that begins with the character at index k and ends with the character at index m-that is, the result of . This method may be used to trim whitespace (as defined above) from the beginning and end of a string. A string whose value is this string, with any leading and trailing white space removed, or this string if it has no leading or trailing white space.\n• This object (which is already a string!) is itself returned.\n• Converts this string to a new character array. a newly allocated character array whose length is the length of this string and whose contents are initialized to contain the character sequence represented by this string.\n• Returns a formatted string using the specified format string and arguments. The locale always used is the one returned by . - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by . The behaviour on a argument depends on the conversion. - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification.\n• Returns a formatted string using the specified locale, format string, and arguments. - The locale to apply during formatting. If is then no localization is applied. - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by . The behaviour on a argument depends on the conversion. - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification\n• Returns the string representation of the argument. if the argument is , then a string equal to ; otherwise, the value of is returned.\n• Returns the string representation of the array argument. The contents of the character array are copied; subsequent modification of the character array does not affect the returned string. a that contains the characters of the character array.\n• array argument. Returns the string representation of a specific subarray of thearray argument. The argument is the index of the first character of the subarray. The argument specifies the length of the subarray. The contents of the subarray are copied; subsequent modification of the character array does not affect the returned string. a that contains the characters of the specified subarray of the character array. - if is negative, or is negative, or is larger than .\n• a that contains the characters of the specified subarray of the character array. - if is negative, or is negative, or is larger than .\n• a that contains the characters of the character array.\n• Returns the string representation of the argument. if the argument is , a string equal to is returned; otherwise, a string equal to is returned.\n• Returns the string representation of the argument. a string of length containing as its single character the argument .\n• argument. The representation is exactly the one returned by the method of one argument.\n• argument. The representation is exactly the one returned by the method of one argument.\n• argument. The representation is exactly the one returned by the method of one argument.\n• argument. The representation is exactly the one returned by the method of one argument.\n• A pool of strings, initially empty, is maintained privately by the class . When the intern method is invoked, if the pool already contains a string equal to this object as determined by the method, then the string from the pool is returned. Otherwise, this object is added to the pool and a reference to this object is returned. It follows that for any two strings and , is if and only if is . All literal strings and string-valued constant expressions are interned. String literals are defined in section 3.10.5 of the . a string that has the same contents as this string, but is guaranteed to be from a pool of unique strings."
    },
    {
        "link": "https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html",
        "document": "\n• Returns the length of this string. The length is equal to the number of Unicode code units in the string. the length of the sequence of characters represented by this object.\n• if, and only if, . Returnsif, and only if, is if is , otherwise\n• value at the specified index. An index ranges from to . The first value of the sequence is at index , the next at index , and so on, as for array indexing. Returns thevalue at the specified index. An index ranges fromto. The firstvalue of the sequence is at index, the next at index, and so on, as for array indexing. If the value specified by the index is a surrogate, the surrogate value is returned. - the index of the value. the value at the specified index of this string. The first value is at index . - if the argument is negative or not less than the length of this string.\n• values (Unicode code units) and ranges from to . Returns the character (Unicode code point) at the specified index. The index refers tovalues (Unicode code units) and ranges fromto If the value specified at the given index is in the high-surrogate range, the following index is less than the length of this , and the value at the following index is in the low-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the value at the given index is returned. - the index to the values the code point value of the character at the - if the argument is negative or not less than the length of this string.\n• values (Unicode code units) and ranges from to Returns the character (Unicode code point) before the specified index. The index refers tovalues (Unicode code units) and ranges fromto If the value at is in the low-surrogate range, is not negative, and the value at is in the high-surrogate range, then the supplementary code point value of the surrogate pair is returned. If the value at is an unpaired low-surrogate or a high-surrogate, the surrogate value is returned. - the index following the code point that should be returned the Unicode code point value before the given index. - if the argument is less than 1 or greater than the length of this string.\n• Returns the number of Unicode code points in the specified text range of this . The text range begins at the specified and extends to the at index . Thus the length (in s) of the text range is . Unpaired surrogates within the text range count as one code point each. - the index to the first of the text range. - the index after the last of the text range. the number of Unicode code points in the specified text range - if the is negative, or is larger than the length of this , or is larger than .\n• Returns the index within this that is offset from the given by code points. Unpaired surrogates within the text range given by and count as one code point each. - the index to be offset the index within this - if is negative or larger then the length of this , or if is positive and the substring starting with has fewer than code points, or if is negative and the substring before has fewer than the absolute value of code points.\n• Copies characters from this string into the destination character array. The first character to be copied is at index ; the last character to be copied is at index (thus the total number of characters to be copied is ). The characters are copied into the subarray of starting at index and ending at index: - index of the first character in the string to copy. - index after the last character in the string to copy. - the start offset in the destination array. - If any of the following is true:\n• is greater than the length of this string\n• Copies characters from this string into the destination byte array. Each byte receives the 8 low-order bits of the corresponding character. The eight high-order bits of each character are not copied and do not participate in the transfer in any way. The first character to be copied is at index ; the last character to be copied is at index . The total number of characters to be copied is . The characters, converted to bytes, are copied into the subarray of starting at index and ending at index: - Index of the first character in the string to copy - Index after the last character in the string to copy - The start offset in the destination array - If any of the following is true:\n• is greater than the length of this String\n• into a sequence of bytes using the named charset, storing the result into a new byte array. Encodes thisinto a sequence of bytes using the named charset, storing the result into a new byte array. The behavior of this method when this string cannot be encoded in the given charset is unspecified. The class should be used when more control over the encoding process is required. - The name of a supported charset - If the named charset is not supported\n• into a sequence of bytes using the given Encodes thisinto a sequence of bytes using the given charset , storing the result into a new byte array. This method always replaces malformed-input and unmappable-character sequences with this charset's default replacement byte array. The class should be used when more control over the encoding process is required. - The Charset to be used to encode the\n• into a sequence of bytes using the platform's default charset, storing the result into a new byte array. Encodes thisinto a sequence of bytes using the platform's default charset, storing the result into a new byte array. The behavior of this method when this string cannot be encoded in the default charset is unspecified. The class should be used when more control over the encoding process is required.\n• if and only if the argument is not and is a object that represents the same sequence of characters as this object. Compares this string to the specified object. The result isif and only if the argument is notand is aobject that represents the same sequence of characters as this object. - The object to compare this against if the given object represents a equivalent to this string, otherwise\n• . The result is if and only if this represents the same sequence of characters as the specified . This method synchronizes on the . Compares this string to the specified. The result isif and only if thisrepresents the same sequence of characters as the specified. This method synchronizes on the - The to compare this against if this represents the same sequence of characters as the specified , otherwise\n• . The result is if and only if this represents the same sequence of char values as the specified sequence. Note that if the is a then the method synchronizes on it. Compares this string to the specified. The result isif and only if thisrepresents the same sequence of char values as the specified sequence. Note that if theis athen the method synchronizes on it. - The sequence to compare this against if this represents the same sequence of char values as the specified sequence, otherwise\n• to another , ignoring case considerations. Two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. Compares thisto another, ignoring case considerations. Two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. Two characters and are considered the same ignoring case if at least one of the following is true:\n• The two characters are the same (as compared by the operator)\n• Calling on each character produces the same result Note that this method does not take locale into account, and will result in unsatisfactory results for certain locales. The class provides locale-sensitive comparison. - The to compare this against if the argument is not and it represents an equivalent ignoring case; otherwise\n• object is compared lexicographically to the character sequence represented by the argument string. The result is a negative integer if this object lexicographically precedes the argument string. The result is a positive integer if this object lexicographically follows the argument string. The result is zero if the strings are equal; returns exactly when the . Compares two strings lexicographically. The comparison is based on the Unicode value of each character in the strings. The character sequence represented by thisobject is compared lexicographically to the character sequence represented by the argument string. The result is a negative integer if thisobject lexicographically precedes the argument string. The result is a positive integer if thisobject lexicographically follows the argument string. The result is zero if the strings are equal;returnsexactly when the method would return This is the definition of lexicographic ordering. If two strings are different, then either they have different characters at some index that is a valid index for both strings, or their lengths are different, or both. If they have different characters at one or more index positions, let k be the smallest such index; then the string whose character at position k has the smaller value, as determined by using the operator, lexicographically precedes the other string. In this case, returns the difference of the two character values at position in the two string -- that is, the value: If there is no index position at which they differ, then the shorter string lexicographically precedes the longer string. In this case, returns the difference of the lengths of the strings -- that is, the value: If there is no index position at which they differ, then the shorter string lexicographically precedes the longer string. In this case,returns the difference of the lengths of the strings -- that is, the value: - the to be compared. the value if the argument string is equal to this string; a value less than if this string is lexicographically less than the string argument; and a value greater than if this string is lexicographically greater than the string argument.\n• with normalized versions of the strings where case differences have been eliminated by calling on each character. Compares two strings lexicographically, ignoring case differences. This method returns an integer whose sign is that of callingwith normalized versions of the strings where case differences have been eliminated by callingon each character. Note that this method does not take locale into account, and will result in an unsatisfactory ordering for certain locales. The class provides locale-sensitive comparison. - the to be compared. a negative integer, zero, or a positive integer as the specified String is greater than, equal to, or less than this String, ignoring case considerations.\n• Tests if two string regions are equal. A substring of this object is compared to a substring of the argument other. The result is true if these substrings represent identical character sequences. The substring of this object to be compared begins at index and has length . The substring of other to be compared begins at index and has length . The result is if and only if at least one of the following is true:\n• is greater than the length of this object.\n• is greater than the length of the other argument.\n• There is some nonnegative integer k less than such that: k k Note that this method does not take locale into account. The class provides locale-sensitive comparison. - the starting offset of the subregion in this string. - the starting offset of the subregion in the string argument. - the number of characters to compare. if the specified subregion of this string exactly matches the specified subregion of the string argument; otherwise.\n• Tests if two string regions are equal. A substring of this object is compared to a substring of the argument . The result is if these substrings represent character sequences that are the same, ignoring case if and only if is true. The substring of this object to be compared begins at index and has length . The substring of to be compared begins at index and has length . The result is if and only if at least one of the following is true:\n• is greater than the length of this object.\n• is greater than the length of the other argument.\n• is and there is some nonnegative integer k less than such that:\n• is and there is some nonnegative integer k less than such that: Note that this method does not take locale into account, and will result in unsatisfactory results for certain locales when is . The class provides locale-sensitive comparison. - the starting offset of the subregion in this string. - the starting offset of the subregion in the string argument. - the number of characters to compare. if the specified subregion of this string matches the specified subregion of the string argument; otherwise. Whether the matching is exact or case insensitive depends on the argument.\n• Tests if the substring of this string beginning at the specified index starts with the specified prefix. - where to begin looking in this string. if the character sequence represented by the argument is a prefix of the substring of this object starting at index ; otherwise. The result is if is negative or greater than the length of this object; otherwise the result is the same as the result of the expression\n• Tests if this string starts with the specified prefix. if the character sequence represented by the argument is a prefix of the character sequence represented by this string; otherwise. Note also that will be returned if the argument is an empty string or is equal to this object as determined by the method.\n• Tests if this string ends with the specified suffix. if the character sequence represented by the argument is a suffix of the character sequence represented by this object; otherwise. Note that the result will be if the argument is the empty string or is equal to this object as determined by the method.\n• object is computed as using arithmetic, where is the ith character of the string, is the length of the string, and indicates exponentiation. (The hash value of the empty string is zero.) Returns a hash code for this string. The hash code for aobject is computed asusingarithmetic, whereis theth character of the string,is the length of the string, andindicates exponentiation. (The hash value of the empty string is zero.) a hash code value for this object.\n• occurs in the character sequence represented by this object, then the index (in Unicode code units) of the first such occurrence is returned. For values of in the range from 0 to 0xFFFF (inclusive), this is the smallest value k such that: is true. For other values of , it is the smallest value k such that: is true. In either case, if no such character occurs in this string, then is returned. Returns the index within this string of the first occurrence of the specified character. If a character with valueoccurs in the character sequence represented by thisobject, then the index (in Unicode code units) of the first such occurrence is returned. For values ofin the range from 0 to 0xFFFF (inclusive), this is the smallest valuesuch that:is true. For other values of, it is the smallest valuesuch that:is true. In either case, if no such character occurs in this string, thenis returned. the index of the first occurrence of the character in the character sequence represented by this object, or if the character does not occur.\n• Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index. If a character with value occurs in the character sequence represented by this object at an index no smaller than , then the index of the first such occurrence is returned. For values of in the range from 0 to 0xFFFF (inclusive), this is the smallest value k such that: is true. For other values of , it is the smallest value k such that: is true. In either case, if no such character occurs in this string at or after position , then is returned. is true. For other values of, it is the smallest valuesuch that:is true. In either case, if no such character occurs in this string at or after position, thenis returned. There is no restriction on the value of . If it is negative, it has the same effect as if it were zero: this entire string may be searched. If it is greater than the length of this string, it has the same effect as if it were equal to the length of this string: is returned. All indices are specified in values (Unicode code units). - the index to start the search from. the index of the first occurrence of the character in the character sequence represented by this object that is greater than or equal to , or if the character does not occur.\n• in the range from 0 to 0xFFFF (inclusive), the index (in Unicode code units) returned is the largest value k such that: is true. For other values of , it is the largest value k such that: is true. In either case, if no such character occurs in this string, then is returned. The is searched backwards starting at the last character. Returns the index within this string of the last occurrence of the specified character. For values ofin the range from 0 to 0xFFFF (inclusive), the index (in Unicode code units) returned is the largest valuesuch that:is true. For other values of, it is the largest valuesuch that:is true. In either case, if no such character occurs in this string, thenis returned. Theis searched backwards starting at the last character. the index of the last occurrence of the character in the character sequence represented by this object, or if the character does not occur.\n• in the range from 0 to 0xFFFF (inclusive), the index returned is the largest value k such that: is true. For other values of , it is the largest value k such that: is true. In either case, if no such character occurs in this string at or before position , then is returned. Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index. For values ofin the range from 0 to 0xFFFF (inclusive), the index returned is the largest valuesuch that:is true. For other values of, it is the largest valuesuch that:is true. In either case, if no such character occurs in this string at or before position, thenis returned. All indices are specified in values (Unicode code units). - the index to start the search from. There is no restriction on the value of . If it is greater than or equal to the length of this string, it has the same effect as if it were equal to one less than the length of this string: this entire string may be searched. If it is negative, it has the same effect as if it were -1: -1 is returned. the index of the last occurrence of the character in the character sequence represented by this object that is less than or equal to , or if the character does not occur before that point.\n• Returns the index within this string of the first occurrence of the specified substring. The returned index is the smallest value for which: If no such value of exists, then is returned. If no such value ofexists, thenis returned. - the substring to search for. the index of the first occurrence of the specified substring, or if there is no such occurrence.\n• Returns the index within this string of the first occurrence of the specified substring, starting at the specified index. The returned index is the smallest value for which: If no such value of exists, then is returned. If no such value ofexists, thenis returned. - the substring to search for. - the index from which to start the search. the index of the first occurrence of the specified substring, starting at the specified index, or if there is no such occurrence.\n• . Returns the index within this string of the last occurrence of the specified substring. The last occurrence of the empty string \"\" is considered to occur at the index value The returned index is the largest value for which: If no such value of exists, then is returned. If no such value ofexists, thenis returned. - the substring to search for. the index of the last occurrence of the specified substring, or if there is no such occurrence.\n• Returns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index. The returned index is the largest value for which: If no such value of exists, then is returned. If no such value ofexists, thenis returned. - the substring to search for. - the index to start the search from. the index of the last occurrence of the specified substring, searching backward from the specified index, or if there is no such occurrence.\n• Returns a string that is a substring of this string. The substring begins with the character at the specified index and extends to the end of this string. - if is negative or larger than the length of this object.\n• and extends to the character at index . Thus the length of the substring is . Returns a string that is a substring of this string. The substring begins at the specifiedand extends to the character at index. Thus the length of the substring is - if the is negative, or is larger than the length of this object, or is larger than .\n• Returns a character sequence that is a subsequence of this sequence. An invocation of this method of the form behaves in exactly the same way as the invocation behaves in exactly the same way as the invocation This method is defined so that the class can implement the interface. - if or is negative, if is greater than , or if is greater than\n• Concatenates the specified string to the end of this string. If the length of the argument string is , then this object is returned. Otherwise, a object is returned that represents a character sequence that is the concatenation of the character sequence represented by this object and the character sequence represented by the argument string. - the that is concatenated to the end of this . a string that represents the concatenation of this object's characters followed by the string argument's characters.\n• in this string with . Returns a string resulting from replacing all occurrences ofin this string with If the character does not occur in the character sequence represented by this object, then a reference to this object is returned. Otherwise, a object is returned that represents a character sequence identical to the character sequence represented by this object, except that every occurrence of is replaced by an occurrence of . \"mesquite in your cellar\".replace('e', 'o') returns \"mosquito in your collar\" \"the war of baronets\".replace('r', 'y') returns \"the way of bayonets\" \"sparring with a purple porpoise\".replace('p', 't') returns \"starring with a turtle tortoise\" \"JonL\".replace('q', 'x') returns \"JonL\" (no change) a string derived from this string by replacing every occurrence of with .\n• Tells whether or not this string matches the given regular expression An invocation of this method of the form str regex yields exactly the same result as the expression - the regular expression to which this string is to be matched if, and only if, this string matches the given regular expression - if the regular expression's syntax is invalid\n• Returns true if and only if this string contains the specified sequence of char values. - the sequence to search for true if this string contains , false otherwise\n• Replaces the first substring of this string that matches the given regular expression with the given replacement. An invocation of this method of the form str regex repl yields exactly the same result as the expression Note that backslashes ( ) and dollar signs ( ) in the replacement string may cause the results to be different than if it were being treated as a literal replacement string; see . Use to suppress the special meaning of these characters, if desired. - the regular expression to which this string is to be matched - the string to be substituted for the first match - if the regular expression's syntax is invalid\n• Replaces each substring of this string that matches the given regular expression with the given replacement. An invocation of this method of the form str regex repl yields exactly the same result as the expression Note that backslashes ( ) and dollar signs ( ) in the replacement string may cause the results to be different than if it were being treated as a literal replacement string; see . Use to suppress the special meaning of these characters, if desired. - the regular expression to which this string is to be matched - the string to be substituted for each match - if the regular expression's syntax is invalid\n• Replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence. The replacement proceeds from the beginning of the string to the end, for example, replacing \"aa\" with \"b\" in the string \"aaa\" will result in \"ba\" rather than \"ab\". - The sequence of char values to be replaced\n• Splits this string around matches of the given regular expression The array returned by this method contains each substring of this string that is terminated by another substring that matches the given expression or is terminated by the end of the string. The substrings in the array are in the order in which they occur in this string. If the expression does not match any part of the input then the resulting array has just one element, namely this string. When there is a positive-width match at the beginning of this string then an empty leading substring is included at the beginning of the resulting array. A zero-width match at the beginning however never produces such empty leading substring. The parameter controls the number of times the pattern is applied and therefore affects the length of the resulting array.\n• None If the limit is positive then the pattern will be applied at most limit - 1 times, the array's length will be no greater than limit, and the array's last entry will contain all input beyond the last matched delimiter.\n• None If the limit is zero then the pattern will be applied as many times as possible, the array can have any length, and trailing empty strings will be discarded.\n• None If the limit is negative then the pattern will be applied as many times as possible and the array can have any length. The string , for example, yields the following results with these parameters: An invocation of this method of the form str. regex n yields the same result as the expression - the result threshold, as described above the array of strings computed by splitting this string around matches of the given regular expression - if the regular expression's syntax is invalid\n• Splits this string around matches of the given regular expression This method works as if by invoking the two-argument method with the given expression and a limit argument of zero. Trailing empty strings are therefore not included in the resulting array. The string , for example, yields the following results with these expressions: the array of strings computed by splitting this string around matches of the given regular expression - if the regular expression's syntax is invalid\n• joined together with a copy of the specified . Note that if an element is null, then is added. Returns a new String composed of copies of thejoined together with a copy of the specifiedNote that if an element is null, thenis added. - the delimiter that separates each element - the elements to join together. a new that is composed of the separated by the - If or is\n• composed of copies of the joined together with a copy of the specified . For example, List<String> strings = List.of(\"Java\", \"is\", \"cool\"); String message = String.join(\" \", strings); //message returned is: \"Java is cool\" Set<String> strings = new LinkedHashSet<>(List.of(\"Java\", \"is\", \"very\", \"cool\")); String message = String.join(\"-\", strings); //message returned is: \"Java-is-very-cool\" Note that if an individual element is , then is added. Returns a newcomposed of copies of thejoined together with a copy of the specifiedNote that if an individual element is, thenis added. - a sequence of characters that is used to separate each of the in the resulting - an that will have its joined together. a new that is composed from the argument - If or is\n• to lower case using the rules of the given . Case mapping is based on the Unicode Standard version specified by the may be a different length than the original . Converts all of the characters in thisto lower case using the rules of the given. Case mapping is based on the Unicode Standard version specified by the class. Since case mappings are not always 1:1 char mappings, the resultingmay be a different length than the original Examples of lowercase mappings are in the following table: - use the case transformation rules for this locale\n• to lower case using the rules of the default locale. This is equivalent to calling . Converts all of the characters in thisto lower case using the rules of the default locale. This is equivalent to calling Note: This method is locale sensitive, and may produce unexpected results if used for strings that are intended to be interpreted locale independently. Examples are programming language identifiers, protocol keys, and HTML tags. For instance, in a Turkish locale returns , where '\\u0131' is the LATIN SMALL LETTER DOTLESS I character. To obtain correct results for locale insensitive strings, use .\n• to upper case using the rules of the given . Case mapping is based on the Unicode Standard version specified by the may be a different length than the original . Converts all of the characters in thisto upper case using the rules of the given. Case mapping is based on the Unicode Standard version specified by the class. Since case mappings are not always 1:1 char mappings, the resultingmay be a different length than the original Examples of locale-sensitive and 1:M case mappings are in the following table. Examples of locale-sensitive and 1:M case mappings. Shows Language code of locale, lower case, upper case, and description. - use the case transformation rules for this locale\n• to upper case using the rules of the default locale. This method is equivalent to . Converts all of the characters in thisto upper case using the rules of the default locale. This method is equivalent to Note: This method is locale sensitive, and may produce unexpected results if used for strings that are intended to be interpreted locale independently. Examples are programming language identifiers, protocol keys, and HTML tags. For instance, in a Turkish locale returns , where '\\u0130' is the LATIN CAPITAL LETTER I WITH DOT ABOVE character. To obtain correct results for locale insensitive strings, use .\n• (the space character). Returns a string whose value is this string, with all leading and trailing space removed, where space is defined as any character whose codepoint is less than or equal to(the space character). If this object represents an empty character sequence, or the first and last characters of character sequence represented by this object both have codes that are not space (as defined above), then a reference to this object is returned. Otherwise, if all characters in this string are space (as defined above), then a object representing an empty string is returned. Otherwise, let k be the index of the first character in the string whose code is not a space (as defined above) and let m be the index of the last character in the string whose code is not a space (as defined above). A object is returned, representing the substring of this string that begins with the character at index k and ends with the character at index m-that is, the result of . This method may be used to trim space (as defined above) from the beginning and end of a string. a string whose value is this string, with all leading and trailing space removed, or this string if it has no leading or trailing space.\n• Returns a string whose value is this string, with all leading and trailing removed. If this object represents an empty string, or if all code points in this string are , then an empty string is returned. Otherwise, returns a substring of this string beginning with the first code point that is not a up to and including the last code point that is not a . This method may be used to strip from the beginning and end of a string. a string whose value is this string, with all leading and trailing white space removed\n• Returns a string whose value is this string, with all leading removed. If this object represents an empty string, or if all code points in this string are , then an empty string is returned. Otherwise, returns a substring of this string beginning with the first code point that is not a up to to and including the last code point of this string. This method may be used to trim from the beginning of a string. a string whose value is this string, with all leading white space removed\n• Returns a string whose value is this string, with all trailing removed. If this object represents an empty string, or if all characters in this string are , then an empty string is returned. Otherwise, returns a substring of this string beginning with the first code point of this string up to and including the last code point that is not a . This method may be used to trim from the end of a string. a string whose value is this string, with all trailing white space removed\n• if the string is empty or contains only . Returnsif the string is empty or contains only codepoints, otherwise if the string is empty or contains only codepoints, otherwise\n• Returns a stream of lines extracted from this string, separated by line terminators. A line terminator is one of the following: a line feed character (U+000A), a carriage return character (U+000D), or a carriage return followed immediately by a line feed (U+000D U+000A). A line is either a sequence of zero or more characters followed by a line terminator, or it is a sequence of one or more characters followed by the end of the string. A line does not include the line terminator. The stream returned by this method contains the lines from this string in the order in which they occur. This definition of line implies that an empty string has zero lines and that there is no empty line following a line terminator at the end of a string. This method provides better performance than split(\"\\R\") by supplying elements lazily and by faster search of new line terminators. the stream of lines extracted from this string\n• This object (which is already a string!) is itself returned.\n• zero-extending the values from this sequence. Any char which maps to a Returns a stream ofzero-extending thevalues from this sequence. Any char which maps to a surrogate code point is passed through uninterpreted. an IntStream of char values from this sequence\n• values which are then passed to the stream. Returns a stream of code point values from this sequence. Any surrogate pairs encountered in the sequence are combined as if by Character.toCodePoint and the result is passed to the stream. Any other code units, including ordinary BMP characters, unpaired surrogates, and undefined code units, are zero-extended tovalues which are then passed to the stream. an IntStream of Unicode code points from this sequence\n• Converts this string to a new character array. a newly allocated character array whose length is the length of this string and whose contents are initialized to contain the character sequence represented by this string.\n• Returns a formatted string using the specified format string and arguments. The locale always used is the one returned by with category specified. - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by . The behaviour on a argument depends on the conversion. - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification.\n• Returns a formatted string using the specified locale, format string, and arguments. - The locale to apply during formatting. If is then no localization is applied. - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by . The behaviour on a argument depends on the conversion. - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification\n• Returns the string representation of the argument. if the argument is , then a string equal to ; otherwise, the value of is returned.\n• Returns the string representation of the array argument. The contents of the character array are copied; subsequent modification of the character array does not affect the returned string. a that contains the characters of the character array.\n• array argument. Returns the string representation of a specific subarray of thearray argument. The argument is the index of the first character of the subarray. The argument specifies the length of the subarray. The contents of the subarray are copied; subsequent modification of the character array does not affect the returned string. a that contains the characters of the specified subarray of the character array. - if is negative, or is negative, or is larger than .\n• a that contains the characters of the specified subarray of the character array. - if is negative, or is negative, or is larger than .\n• a that contains the characters of the character array.\n• Returns the string representation of the argument. if the argument is , a string equal to is returned; otherwise, a string equal to is returned.\n• Returns the string representation of the argument. a string of length containing as its single character the argument .\n• argument. The representation is exactly the one returned by the method of one argument.\n• argument. The representation is exactly the one returned by the method of one argument.\n• argument. The representation is exactly the one returned by the method of one argument.\n• argument. The representation is exactly the one returned by the method of one argument.\n• A pool of strings, initially empty, is maintained privately by the class . When the intern method is invoked, if the pool already contains a string equal to this object as determined by the method, then the string from the pool is returned. Otherwise, this object is added to the pool and a reference to this object is returned. It follows that for any two strings and , is if and only if is . All literal strings and string-valued constant expressions are interned. String literals are defined in section 3.10.5 of the . a string that has the same contents as this string, but is guaranteed to be from a pool of unique strings.\n• times. Returns a string whose value is the concatenation of this string repeatedtimes. If this string is empty or count is zero then the empty string is returned. A string composed of this string repeated times or the empty string if this string is empty or count is zero - if the is negative."
    },
    {
        "link": "https://w3schools.com/java/java_ref_string.asp",
        "document": ""
    },
    {
        "link": "https://geeksforgeeks.org/string-class-in-java",
        "document": "String is a sequence of characters. In Java, objects of the String class are immutable which means they cannot be changed once created. In this article, we will learn about the String class in Java.\n\nExample of String Class in Java:\n\nThe above program creates a string using a literal and prints it.\n\nThere are two ways to create string in Java:\n\nExample of Creating String in Java\n\nConstruct a new String by decoding the byte array. It uses the platform’s default character set for decoding. Construct a new String by decoding the byte array. It uses the char_set for decoding. Construct a new string from the bytes array depending on the start_index(Starting location) and length(number of characters from starting location). Construct a new string from the bytes array depending on the start_index(Starting location) and length(number of characters from starting location).Uses char_set for decoding. Allocates a new String from the given Character array. Allocates a String from a given character array but choose count characters from the start_index. Allocates a String from a uni_code_array but choose count characters from the start_index. Allocates a new string from the string in s_buffer. Allocates a new string from the string in s_builder.\n\nLet us check these constructors using a example demonstrating the use of them.\n\nExample of String Constructor and String Methods\n\nBelow is the implementation of String Constructors and Methods in Java.\n\n\n\nFor Set – 2 you can refer: Java.lang.String class in Java | Set 2"
    },
    {
        "link": "https://stackoverflow.com/questions/19130527/want-to-make-left-and-right-trim-on-java-string",
        "document": "I have Java String which contain white space on both right and left side. I want to remove white space from both side.\n\nSomehow it doesn't remove white space. What is wrong with my code, please help me on that."
    },
    {
        "link": "https://theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/Java-Scanner-User-Input-example-String-next-int-long-char",
        "document": ""
    },
    {
        "link": "https://w3schools.com/java/java_user_input.asp",
        "document": "The class is used to get user input, and it is found in the package.\n\nTo use the class, create an object of the class and use any of the available methods found in the class documentation. In our example, we will use the method, which is used to read Strings:\n\nIn the example above, we used the method, which is used to read Strings. To read other types, look at the table below:\n\nIn the example below, we use different methods to read data of various types:\n\nNote: If you enter wrong input (e.g. text in a numerical input), you will get an exception/error message (like \"InputMismatchException\"). You can read more about exceptions and how to handle errors in the Exceptions chapter."
    },
    {
        "link": "https://medium.com/buzz-code/java-8-scanner-class-660b03d4bb91",
        "document": "Hi guys! So until the last time we’ve been practicing the two dimensional array. Today we’re gonna learn something new that you might find interesting!\n\nSo with the Scanner class you can type something in from the console.\n\nFirst you need to create the new Scanner class and then put it in the Scanner variable.\n\nHere, you see we’re passing the as a parameter, it is an standard inputStream, and that is typically keyboard. And then if you hit the ctrl+shift+O to import, we’re ready to go.\n\nSo I used method to let people know what to do. And then I declared the String and put the in the . Then I used method again to print what’s stored in the String .\n\nHere, because of the method, the code behind it doesn’t show up on the console yet, until you actually type something in on the console. The method doesn’t accept any parameter, and returns String type data which the user typed in. Also it returns the value when you hit the enter key.\n\nJust like this! And there is also a method which can get the integer numbers from the keyboard.\n\nYou see I put the after the method. This is called . We need to clear the buffer because we have to type enter even when we type integer numbers. And the program consider that line changing is another String data that it’s getting, so it can occur some problem. For instance, let’s say we have to get the numbers and the text from the users.\n\nIf I didn’t clear the buffer, will be automatically getting the line changer as its value. And this is not we want.\n\nBut if I cleared the buffer,\n\nIt will work very well like this.\n\nOkay, that’s all for today, and let’s do something fun with using Scanner class next time. Thank you for reading my post, see ya!"
    },
    {
        "link": "https://stackoverflow.com/questions/11871520/how-can-i-read-input-from-the-console-using-the-scanner-class-in-java",
        "document": "Basically, all I want is have the scanner read an input for the username, and assign the input to a String variable.\n\nHow could I read input from the console using the Scanner class? Something like this:\n• None is synchronized, so read operations on a BufferedReader can be safely done from multiple threads. The buffer size may be specified, or the default size(8192) may be used. The default is large enough for most purposes. readLine() « just reads data line by line from the stream or source. A line is considered to be terminated by any one these: \n\n, \\r (or) \\r\n• None breaks its input into tokens using a delimiter pattern, which by default matches whitespace(\\s) and it is recognised by . « Until the user enters data, the scanning operation may block, waiting for input. « Use Scanner(BUFFER_SIZE = 1024) if you want to parse a specific type of token from a stream. « A scanner however is not thread safe. It has to be externally synchronized. next() « Finds and returns the next complete token from this scanner. nextInt() « Scans the next token of the input as an int. String name = null; int number; java.io.BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); name = in.readLine(); // If the user has not entered anything, assume the default value. number = Integer.parseInt(in.readLine()); // It reads only String,and we need to parse it. System.out.println(\"Name \" + name + \"\\t number \" + number); java.util.Scanner sc = new Scanner(System.in).useDelimiter(\"\\\\s\"); name = sc.next(); // It will not leave until the user enters data. number = sc.nextInt(); // We can read specific data. System.out.println(\"Name \" + name + \"\\t number \" + number); // The Console class is not working in the IDE as expected. java.io.Console cnsl = System.console(); if (cnsl != null) { // Read a line from the user input. The cursor blinks after the specified input. name = cnsl.readLine(\"Name: \"); System.out.println(\"Name entered: \" + name); }\n\nThere are several ways to get input from the user. Here in this program we will take the Scanner class to achieve the task. This Scanner class comes under , hence the first line of the program is import java.util.Scanner; which allows the user to read values of various types in Java. The import statement line should have to be in the first line the java program, and we proceed further for code. in.nextInt(); // It just reads the numbers in.nextLine(); // It get the String which user enters To access methods in the Scanner class create a new scanner object as \"in\". Now we use one of its method, that is \"next\". The \"next\" method gets the string of text that a user enters on the keyboard. Here I'm using to get the String which the user enters. import java.util.Scanner; class GetInputFromUser { public static void main(String args[]) { int a; float b; String s; Scanner in = new Scanner(System.in); System.out.println(\"Enter a string\"); s = in.nextLine(); System.out.println(\"You entered string \" + s); System.out.println(\"Enter an integer\"); a = in.nextInt(); System.out.println(\"You entered integer \" + a); System.out.println(\"Enter a float\"); b = in.nextFloat(); System.out.println(\"You entered float \" + b); } }\n\nYou can make a simple program to ask for the user's name and print whatever the reply use inputs. Or ask the user to enter two numbers and you can add, multiply, subtract, or divide those numbers and print the answers for user inputs just like the behavior of a calculator. So there you need the Scanner class. You have to , and in the code you need to use: Scanner input = new Scanner(System.in); System.out.println(\"Please enter your name: \"); s = input.next(); // Getting a String value System.out.println(\"Please enter your age: \"); i = input.nextInt(); // Getting an integer System.out.println(\"Please enter your salary: \"); d = input.nextDouble(); // Getting a double See how this differs: , , According to a String, int and a double varies the same way for the rest. Don't forget the import statement at the top of your code.\n\nThere is a simple way to read from the console. Please find the below code: import java.util.Scanner; public class ScannerDemo { public static void main(String[] args) { Scanner sc = new Scanner(System.in); // Reading of Integer int number = sc.nextInt(); // Reading of String String str = sc.next(); } } For a detailed understanding, please refer to the below documents. Now let's talk about the detailed understanding of the Scanner class working: This is the constructor for creating the Scanner instance. Here we are passing the reference which is nothing but a . Here it opens the Pipe for console input. public InputStreamReader(InputStream in) { super(in); try { sd = StreamDecoder.forInputStreamReader(in, this, (String)null); // ## Check lock object } catch (UnsupportedEncodingException e) { // The default encoding should always be available throw new Error(e); } } By passing the System.in this code will opens the socket for reading from console.\n\nthis is wrong method, you have to make an integer or a string, i would like to prefer string, and then give a string any name that can be i that can be n or anything else, remember that you are giving name to username you can also give name username also, and the code is"
    },
    {
        "link": "https://geeksforgeeks.org/how-to-take-input-from-user-in-java",
        "document": "The most common way to take user input in Java is using Scanner class which is part of java.util package. The scanner class can read input from various sources like console, files or streams. This class was introduced in Java 5. Before that we use BufferedReader class(Introduced in Java 1.1). As a beginner, we will suggest to use Scanner class.\n\n\n\nFollow these steps to take user input using Scanner class:\n• Create the Scanner object System.in by passing it as an argument i.e. Scanner scn = new Scanner(System.in);\n• None Print a message to prompt for user input and you can use the various methods of Scanner class like nextInt(), nextLine(), next(), nextDouble etc according to your need.\n\nExample 1: Here, we are taking integer inputs from the user.\n\nScanner class provides some methods to read different data types:\n\nExample 2: Here, we are taking multiple user inputs like string, float, double etc. and using the above mentioned methods of Scanner Class.\n\nAnother method to take user input is using BufferedReader Class. It is a simple class that is used to read a sequence of characters. It provides several methods, including:\n\nWhat are the different ways to take input in Java?\n\nWhat happens when we use"
    }
]