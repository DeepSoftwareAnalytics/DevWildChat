[
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout/Basic_concepts_of_grid_layout",
        "document": "More than one item can be placed into a grid cell or area and they can partially overlap each other. This layering may then be controlled with the property. Grid is a powerful layout method that, when combined with other parts of CSS such as flexbox, can help you create layouts that are responsive, flexible, and accessible. It all starts by creating a grid in your grid container.\n\nWe create a grid container by declaring or on an element. As soon as we do this, all direct children of that element become grid items. In this example, we have a containing div with a class of . Nested inside are five child elements. We make the a grid container using . All the direct children are now grid items. In a web browser, you won't see any difference to how these items are displayed before turning them into a grid, as grid has created a single column grid for the items. If you inspect the grid in your browsers developer tools, you may see a small icon next to the value . Click this and, in most browsers, the grid on this element will be overlaid in the browser window. As you learn and then work with the CSS grid layout, your browser tools will give you a better idea of what is happening with your grids visually. If we want to start making this more grid-like we need to add column tracks.\n\nWhen creating our example grid, we specifically defined our column tracks with the property, with the grid creating rows as needed to fit the content. The columns define the explicit grid while the rows are part of the implicit grid. The explicit grid consists of rows and columns defined with or . The implicit grid extends the defined explicit grid when content is placed outside of that grid, such as into the rows by drawing additional grid lines. If you place something outside of the defined grid—or due to the amount of content, more grid tracks are needed—then the grid creates rows and columns in the implicit grid. These tracks will be auto-sized by default, resulting in their size being based on the content that is inside them. You can also define a set size for tracks created in the implicit grid with the and properties. In this example, we set , ensuring the tracks created in this implicit grid are tall.\n\nWhen setting up an explicit grid or defining the sizing for automatically created rows or columns we may want to give tracks a minimum size, but also ensure they expand to fit any content that is added. For example, we may want our rows to never collapse smaller than 100 pixels, but if our content stretches to 300 pixels in height, then we would like the row to stretch to that height. This is solved by the function. In this example, we use within the property value. By setting , automatically created rows will be a minimum of tall, and have a maximum of . Setting as the maximum value means the size will stretch to fit the content, sizing the row based on the cell with the tallest content. <div class=\"wrapper\"> <div>One</div> <div> Two <p>We have some more content.</p> <p>This makes me taller than 100 pixels.</p> </div> <div>Three</div> <div>Four</div> <div>Five</div> </div>\n\nThe following example demonstrates basic line-based placement; when placing an item, we target the line rather than the track. We explore this in greater detail in the grid layout using line-based placement guide. In this example, the first two items on our three column track grid are placed using the , , and properties. Working from left to right, the first item is placed against column line 1, and spans to column line 4, which in our case is the far-right line on the grid. It begins at row line 1 and ends at row line 3, therefore spanning two row tracks. The second item starts on grid column line 1, and spans one track. This is the default, so we do not need to specify the end line. It also spans two row tracks from row line 3 to row line 5. The other items will place themselves into empty spaces on the grid. Use the grid inspector in your developer tools to see how the items are positioned against the lines of the grid."
    },
    {
        "link": "https://css-tricks.com/snippets/css/complete-guide-grid",
        "document": "CSS Grid Layout (aka “Grid” or “CSS Grid”), is a two-dimensional grid-based layout system that, compared to any web layout system of the past, completely changes the way we design user interfaces. CSS has always been used to layout our web pages, but it’s never done a very good job of it. First, we used tables, then floats, positioning and inline-block, but all of these methods were essentially hacks and left out a lot of important functionality (vertical centering, for instance). Flexbox is also a very great layout tool, but its one-directional flow has different use cases — and they actually work together quite well! Grid is the very first CSS module created specifically to solve the layout problems we’ve all been hacking our way around for as long as we’ve been making websites. The intention of this guide is to present the Grid concepts as they exist in the latest version of the specification. So I won’t be covering the out-of-date Internet Explorer syntax (even though you can absolutely use Grid in IE 11) or other historical hacks.\n\nAs of March 2017, most browsers shipped native, unprefixed support for CSS Grid: Chrome (including on Android), Firefox, Safari (including on iOS), and Opera. Internet Explorer 10 and 11 on the other hand support it, but it’s an old implementation with an outdated syntax. The time to build with grid is now! To get started you have to define a container element as a grid with , set the column and row sizes with and , and then place its child elements into the grid with and . Similarly to flexbox, the source order of the grid items doesn’t matter. Your CSS can place them in any order, which makes it super easy to rearrange your grid with media queries. Imagine defining the layout of your entire page, and then completely rearranging it to accommodate a different screen width all with only a couple lines of CSS. Grid is one of the most powerful CSS modules ever introduced.\n\nBefore diving into the concepts of Grid it’s important to understand the terminology. Since the terms involved here are all kinda conceptually similar, it’s easy to confuse them with one another if you don’t first memorize their meanings defined by the Grid specification. But don’t worry, there aren’t many of them. The element on which is applied. It’s the direct parent of all the grid items. In this example is the grid container. The dividing lines that make up the structure of the grid. They can be either vertical (“column grid lines”) or horizontal (“row grid lines”) and reside on either side of a row or column. Here the yellow line is an example of a column grid line. The space between two adjacent grid lines. You can think of them as the columns or rows of the grid. Here’s the grid track between the second and third-row grid lines. The total space surrounded by four grid lines. A grid area may be composed of any number of grid cells. Here’s the grid area between row grid lines 1 and 3, and column grid lines 1 and 3. The children (i.e. direct descendants) of the grid container. Here the elements are grid items, but isn’t. The space between two adjacent row and two adjacent column grid lines. It’s a single “unit” of the grid. Here’s the grid cell between row grid lines 1 and 2, and column grid lines 2 and 3."
    },
    {
        "link": "https://w3schools.com/css/css_grid.asp",
        "document": "Try it Yourself »\n\nThe Grid Layout Module offers a grid-based layout system, with rows and columns.\n\nThe Grid Layout Module allows developers to easily create complex web layouts.\n\nThe Grid Layout Module makes it easier to design a responsive layout structure, without using float or positioning.\n\nThe CSS grid properties are supported in all modern browsers.\n\nThe CSS Grid Layout should be used for two-dimensional layout, with rows AND columns. The CSS Flexbox Layout should be used for one-dimensional layout, with rows OR columns.\n\nA grid layout consists of a parent element (the grid container), with one or more grid items.\n\nAll direct children of the grid container automatically become grid items.\n\nThe element becomes a grid container when its property is set to or ."
    },
    {
        "link": "https://iambryanhaney.medium.com/dynamic-fractal-image-grids-within-constant-sized-containers-49a48df4cf8a",
        "document": "This article utilizes React, but the techniques are frontend-agnostic.\n\nWhile working on a recent project, I needed to implement a CMS for an image gallery. In this gallery, multiple images may belong to the same item on display. I wireframed a handful of ideas, ultimately deciding that a compact layout, styled after the gallery itself, would be best. To achieve this, I turned to mathematics to create dynamic, fractal image grids within constant-sized containers.\n\nTo begin with, I created a standard grid to hold my cards. A dissection of CSS Grid is beyond the scope of this article, but a functional component follows.\n• First, the FractalGrid.js component. To begin with, our cards will be void of content. For later use, I have included several image urls randomly selected from Unsplash.com.\n\nWe now have a functional grid of empty cards.\n\nOur goal is to dynamically fill each card with a varying number of images in a consistent pattern. To fit them, we’ll need to shrink the images based on the total number present. How do we approach this? I began with pencil and paper.\n\nLet’s clean that up and map out the relationships.\n\nThough there are different bases, we can see that the properties of our grids share a common exponent based on the number of images present. We can calculate this common exponent by taking the log₄ of the number of images and rounding up. For example:\n• log₄(13 images) === 1.85, which rounds up to 2. Thus we will have 2² grid cells per side.\n• log₄(27 images) === 2.37, which rounds up to 3. Thus we will have 2³ grid cells per side.\n\nWe now have all the information we need to dynamically adjust our grid.\n\nFirst, we handle the width of the cells. We know how many columns we will need based on how many cells-per-side we’ve calculated\n\nWe could similarly use grid-template-rows to set our rows, but this will create empty rows that will affect vertical alignment. Instead, we can use grid-auto-rows and distribute the fractional value across our cells-per-side.\n\nAll that remains is to add our images; and with that, we have a functioning, fractal grid.\n\nIf we aren’t concerned with maintaining aspect ratios, and we’d instead prefer to fill the available space, we can set grid-auto-rows to 1fr.\n\nA fully functioning repository of the code in this article may be found at\n\nA demonstration of the originating project may be viewed here:"
    },
    {
        "link": "https://stackoverflow.com/questions/75439563/tailwind-css-how-to-make-responsive-grid-where-columns-dont-stretch-but-only",
        "document": "I have made an inline grid row that looks good on bigger screens. I am using tailwind classes to make columns take only the width of their content, so that they don't stretch to take the rest of the space available in the row:\n\nI use this component like this:\n\nHow can I make this columns stack when there is not enough width of the screen for all of the columns to be in one row?"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-emoji",
        "document": "This feature is not Baseline because it does not work in some of the most widely-used browsers.\n\nThe CSS property specifies the default presentation style for displaying emojis. Traditionally, this was done by appending a Variation Selector, for text and for emoji, to the emoji code point. Only emojis listed as contributing to a Unicode emoji presentation sequence are affected by this property.\n\nAllows a browser to choose how to display the emoji. This often follows the operating system setting. Renders the emoji as if it were using the unicode text variation selector ( ). Renders the emoji as if it were using the unicode emoji variation selector ( ). Renders the emoji in accordance with the Emoji presentation properties. If the or variation selector is present, then it will override this value setting.\n\nWhile the use of emojis may seem fun, you should consider their impact on accessibility, specifically for users with visual and cognitive impairments. Consider the following factors while using emojis:\n• Display on screen-readers: Screen-readers will read out the alt text of an emoji. Keep this in mind to consider the position of an emoji in the content. Repeated and overuse of emojis will have a detrimental effect on screen-reader users. It is better to use emojis than emoticons; emoticons will be read out as punctuation characters.\n• Contrast with background: When using emojis, consider their colors and how that will work with the background color, especially if you have background colors that can change, such as light/dark modes.\n• Intent of use: Do not use emojis to replace words because your understanding of the emoji meaning may differ from that of the users'. Also consider that emojis might have different meanings in different cultures and geographies. Our recommendation is to preferably limit usage to commonly known emojis.\n\nChanging the way an emoji is displayed This example shows how you can render an emoji in its or presentation. <p class=\"no-support\"> Your Browser does not support <code>font-variant-emoji</code>. This image shows how it is rendered with support. </p> <img class=\"no-support\" src=\"./font-variant-emoji-example.jpg\" alt=\"a telephone emoji show as text, black and white next to a telephone emoji shown as emoji full color and graphical representation\" /> @supports (font-variant-emoji: emoji) { .no-support { display: none; } .emojis { display: flex; flex-direction: row; justify-content: space-around; } .emoji > div { font-size: 2rem; } } @supports not (font-variant-emoji: emoji) { .emojis { display: none; } }"
    },
    {
        "link": "https://stackoverflow.com/questions/34594297/making-emojis-bigger-and-align-with-text",
        "document": "What it sounds like you want would be expressed by the following: vertically centered at a point half the x height of the font above the baseline. For that you need to address line-height.\n\nYour text and inline images will never align vertically if the image size exceeds the line-height of the font. You need to make the line-height of the font to be at least equal to the image height.\n\nExperiment with different line-heights and see where the images line up. If you get a good fit, you're done. If you still can't find get there, get yourself close and then give the image a pixel or two of margin or padding top or bottom where appropriate."
    },
    {
        "link": "https://shecodes.io/athena/3840-positioning-3-emojis-using-css-relative-positioning",
        "document": "how do you get a hover for a background but not a button\n\nWhat is SASS? What are the advantages of using it?\n\nI need a grid system that is 2 columns, but the second column has multiple rows and the first column does not\n\nHow to make the text scale down as the container get smaller"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/CSS/font-size",
        "document": "This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015 . * Some parts of this feature may have varying levels of support.\n\nSetting the font size in pixel values ( ) is a good choice when you need pixel accuracy. A px value is static. This is an OS-independent and cross-browser way of literally telling the browsers to render the letters at exactly the number of pixels in height that you specified. The results may vary slightly across browsers, as they may use different algorithms to achieve a similar effect. Font sizing settings can also be used in combination. For example, if a parent element is set to and its child element is set to , the child element displays larger than the parent element on the page. Note: Defining font sizes in is not accessible, because the user cannot change the font size in some browsers. For example, users with limited vision may wish to set the font size much larger than the size chosen by a web designer. Avoid using them for font sizes if you wish to create an inclusive design.\n\nUsing an value creates a dynamic or computed font size (historically the unit was derived from the width of a capital \"M\" in a given typeface.). The numeric value acts as a multiplier of the property of the element on which it is used. Consider this example: In this case, the font size of elements will be double the computed inherited by elements. By extension, a of equals the computed of the element on which it is used. If a has not been set on any of the 's ancestors, then will equal the default browser , which is usually . So, by default is equivalent to , and is equivalent to . If you were to set a of 20px on the element say, then on the elements would instead be equivalent to , and would be equivalent to . In order to calculate the equivalent for any pixel value required, you can use this formula: For example, suppose the of the of the page is set to . If the font-size you want is , then you should specify (because 12/16 = 0.75). Similarly, if you want a font size of , then specify (10/16 = 0.625); for , specify (22/16). The is a very useful unit in CSS since it automatically adapts its length relative to the font that the reader chooses to use. One important fact to keep in mind: em values compound. Take the following HTML and CSS: Assuming that the browser's default is 16px, the words \"outer\" would be rendered at 25.6px, but the word \"inner\" would be rendered at 40.96px. This is because the inner 's is 1.6em which is relative to its parent's , which is in turn relative to its parent's . This is often called compounding.\n\nvalues were invented in order to sidestep the compounding problem. values are relative to the root element, not the parent element. In other words, it lets you specify a font size in a relative fashion without being affected by the size of the parent, thereby eliminating compounding. The CSS below is nearly identical to the previous example. The only exception is that the unit has been changed to . Then we apply this CSS to the same HTML, which looks like this: In this example, the words \"outer inner outer\" are all displayed at 25.6px (assuming that the browser's has been left at the default value of 16px)."
    },
    {
        "link": "https://stackoverflow.com/questions/40425605/css-make-background-image-use-font-character",
        "document": "I'd like to use a font character (e.g. from font-awesome) as a background-image of an input element.\n\nMy guess is that I'll either save the character as an image or use the pseudo-element :after with content and adequate positioning to achieve this. Just wanted to see if there are better solutions. Like would it be possible to access the character in SVG and use inline SVG as content?\n\nI made a part solution with SVG (see https://jsfiddle.net/92h52e65/4/) but that still has the problem of using the correct font.\n\nFor this to work in IE and FF I had to use base64-encoding instead of utf8. I left the utf8 here to make it more readable."
    }
]