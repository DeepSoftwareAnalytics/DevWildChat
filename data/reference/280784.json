[
    {
        "link": "https://stackoverflow.com/questions/40600268/how-do-i-use-repr-with-multiple-arguments",
        "document": "There are a few people saying you should never add arguments to or but I disagree.\n\nFor example, if you want to display the string representation of a class's objects you would write a custom . But what if some of the objects were really long? Sometimes you may want to truncate those objects, sometimes you may want them in full.\n\nYou would call this simply using:\n\nNow, if your contains any objects whose length as a string is particularly long, (say you've got a large list of data) it will only print up to the 51st character.\n\nYou can add a lot more logic to how you want the truncated strings to be printed too.\n\nI would recommend having default arguments set to False in the dunder method. This means that unless explicitly asked for, the method can behave normally.\n\nI have used this when I wanted to print a class's objects both to the terminal and to a log file. I only wanted them printed in full to the log file, and a truncated version to the terminal so I wrote something similar to this."
    },
    {
        "link": "https://digitalocean.com/community/tutorials/python-str-repr-functions",
        "document": "In this article, you’ll learn about the special methods and that are defined in the Python data model. The and methods can be helpful in debugging Python code by logging or printing useful information about an object.\n\nPython special methods begin and end with a double underscore and are informally known as dunder methods. Dunder methods are the underlying methods for Python’s built-in operators and functions. You should avoid calling dunder methods directly, and instead implement the dunder methods in your class and then use the built-in functions that call them, such as and .\n\nWhat’s the difference between and ?\n\nThe method returns a human-readable, or informal, string representation of an object. This method is called by the built-in , , and functions. If you don’t define a method for a class, then the built-in object implementation calls the method instead.\n\nThe method returns a more information-rich, or official, string representation of an object. This method is called by the built-in function. If possible, the string returned should be a valid Python expression that can be used to recreate the object. In all cases, the string should be informative and unambiguous.\n\nIn general, the string is intended for users and the string is intended for developers.\n\nThe examples in this section call the and methods directly for demonstration purposes.\n\nThe class is a built-in Python class which has a default implementation of the and methods.\n\nThe following example code shows the strings returned by the default implementation of the and methods for a object:\n\nThe output shows that the function calls and returns a human-friendly string, while the function calls and returns a more information-rich string that can be used to recreate the object. In fact, you can use the function with the function to create a new object from the string:\n\nThe preceding example code creates the object from the string for , and then verifies that the values of both objects are equal.\n\nand Examples Using a New Class\n\nWhen you create a class, you should implement at least the method so that useful information is returned when built-in functions use .\n\nThe following class doesn’t implement the or methods:\n\nThe output when you use and is:\n\nThe preceding example demonstrates that the default implementation of for the object returns a string with only the class and the object in hexadecimal format, which is not very useful. Note that and return the same value, because calls when isn’t implemented.\n\nUpdate the Ocean class with implementations of the and methods:\n\nThe implementation of in the preceding example returns an easy-to-read string that provides the relevant details of the object for a user. The implementation of returns a string that’s a valid Python expression which could be used to recreate the object: . The example uses f-string formatting for the strings, but you can format the strings using any format supported by Python.\n\nIn this article, you explored the differences between the and the methods and implemented these special methods in a class, so that you didn’t need to call them directly. Learn more about working with strings in Python through our Python string tutorials."
    },
    {
        "link": "https://stackoverflow.com/questions/25278563/python-return-dictionary-in-separate-lines-in-repr-method",
        "document": "I'm need to return my dictionary generated in the class using repr method, and i want it to return in separate lines.\n\nIs there any way i can do it?\n\nsince i can't use \"pprint\" I don't know if there's any other way i can do it."
    },
    {
        "link": "https://geeksforgeeks.org/python-__repr__-magic-method",
        "document": "Python __repr__() is one of the magic methods that returns a printable representation of an object in Python that can be customized or predefined, i.e. we can also create the string representation of the object according to our needs.\n\nIn this example, we define a GFG class with three instance variables f_name, m_name, and l_name representing the first, middle, and last name of a person, respectively. The __repr__() method is defined to return a string representation of the instance in a format that can be used to recreate the object.\n\nIn this example, we define a GFG class with one instance variable name representing the name of a person. The __str__() method is defined to return a human-readable string representation of the instance, while the __repr__() method is defined to return a string representation of the instance that can be used to recreate the object.\n\nWhen we create an instance of the GFG class and call __str__() or __repr__() directly on the object, the respective method is called and returns a string that represents the object.\n\nYou can also read str() vs repr() in Python.\n\nIn this example, we define a subclass of tuple called MyTuple that overrides the __str__() and __repr__() methods. When we call Python str() or Python repr() on an instance of MyTuple, the custom __str__() and __repr__() methods are called, respectively.\n\n__str__() and __repr__() Examples Using a New Class\n\nIn this example, we define a Book class with three instance variables title, author, and pages representing the title, author, and number of pages of a book, respectively. The __str__() method is defined to return a string representation of the instance in a human-readable format, while the __repr__() method is defined to return a string representation of the instance that can be used to recreate the object.\n\nWhen we create an instance of the Book class and call str() on it, the __str__() method is called and returns a human-readable string that represents the object. When we call repr() on it, the __repr__() method is called and returns a string that represents the object in a way that it can be recreated.\n\nThis code creates a Color class with an __init__() method that takes a suffix parameter and sets an instance variable self. suffix to that value. It also sets another instance variable self. title to a string that includes the suffix. Finally, it defines an __repr__() method that returns a string representation of the object."
    },
    {
        "link": "https://geeksforgeeks.org/python-repr-function",
        "document": "Python repr() Function returns a printable representation of an object in Python. In other words, we can say that the Python repr() function returns a printable representation of the object by converting that object to a string.\n\nIn the code, repr(s) returns the string ‘Hello, Geeks.’ enclosed in single quotes. repr(2.0/11.0) calculates the division of 2.0 by 11.0 and returns the result as a string without any formatting or rounding.\n\nHere we assign an integer value of 10 to a variable x and the repr() of x is returning the value 10 as a string class.\n\nIn this example, we are using repr() on the list.\n\nIn this example, we are calling the repr() on the string object in Python.\n\nIn this example, we have created a set. The set includes numbers from 1 to 5 and we are calling the repr() on the set.\n\nIn this example, the Person class has a __repr__() method that returns a string representation of the Person object. The repr(person) call returns the string representation defined by the __repr__() method, which is then printed to the console.\n\nTo know the difference between str and repr Click here.\n\nCan you provide an example of using on a built-in data type?\n\nHow to customize the output of for a custom class?\n\nWhy is useful for debugging?\n\nHow to override the method in a class?\n\nWhat is the purpose of compared to ?\n\nPurpose: Provides an unambiguous representation of the object. It is meant for developers and debugging. Usage: The output of should be a valid Python expression that could be used to recreate the object, if possible. Purpose: Provides a readable, human-friendly string representation of the object. Usage: The output of is intended to be more user-friendly and suitable for display."
    },
    {
        "link": "https://stackoverflow.com/questions/62884503/what-are-the-best-practices-for-repr-with-collection-class-python",
        "document": "The official documentation outlines this as how you should handle __repr__:\n\nCalled by the repr() built-in function to compute the “official” string representation of an object. If at all possible, this should look like a valid Python expression that could be used to recreate an object with the same value (given an appropriate environment). If this is not possible, a string of the form <...some useful description...> should be returned. The return value must be a string object. If a class defines __repr__() but not __str__(), then __repr__() is also used when an “informal” string representation of instances of that class is required. This is typically used for debugging, so it is important that the representation is information-rich and unambiguous.\n\nLists, strings, sets, tuples and dictionaries all print out the entirety of their collection in their __repr__ method.\n\nYour current code looks to perfectly follow the example of what the documentation suggests. Though I would suggest changing your __init__ method so it looks more like this:\n\nYou generally want to avoid using mutable objects as default arguments. Technically because of the way your method is implemented using extend (which makes a copy of the list), it will still work perfectly fine, but Python's documentation still suggests you avoid this.\n\nIt is good programming practice to not use mutable objects as default values. Instead, use None as the default value and inside the function, check if the parameter is None and create a new list/dictionary/whatever if it is.\n\nIf you're interested in how another library handles it differently, the repr for Numpy arrays only shows the first three items and the last three items when the array length is greater than 1,000. It also formats the items so they all use the same amount of space (In the example below, 1000 takes up four spaces so 0 has to be padded with three more spaces to match).\n\nTo mimic this numpy array style you could implement a __repr__ method like this in your class:"
    },
    {
        "link": "https://stackoverflow.com/questions/10875442/possible-to-change-a-functions-repr-in-python",
        "document": "Yes, if you're willing to forgo the function actually being a function.\n\nFirst, define a class for our new type:\n\nAnd now we can define the repr along with the function:"
    },
    {
        "link": "https://labex.io/tutorials/python-how-to-customize-python-object-repr-420940",
        "document": "In Python programming, understanding and customizing object representation is crucial for creating more informative and readable code. This tutorial explores the powerful techniques of customizing object representations using the repr method, enabling developers to create more meaningful and insightful string representations of their objects.\n\n%%%%{init: {'theme':'neutral'}}%%%% flowchart RL python((\"Python\")) -.-> python/ModulesandPackagesGroup([\"Modules and Packages\"]) python((\"Python\")) -.-> python/ObjectOrientedProgrammingGroup([\"Object-Oriented Programming\"]) python((\"Python\")) -.-> python/FunctionsGroup([\"Functions\"]) python/FunctionsGroup -.-> python/function_definition(\"Function Definition\") python/FunctionsGroup -.-> python/arguments_return(\"Arguments and Return Values\") python/ModulesandPackagesGroup -.-> python/creating_modules(\"Creating Modules\") python/ObjectOrientedProgrammingGroup -.-> python/classes_objects(\"Classes and Objects\") subgraph Lab Skills python/function_definition -.-> lab-420940{{\"How to customize Python object repr\"}} python/arguments_return -.-> lab-420940{{\"How to customize Python object repr\"}} python/creating_modules -.-> lab-420940{{\"How to customize Python object repr\"}} python/classes_objects -.-> lab-420940{{\"How to customize Python object repr\"}} end"
    },
    {
        "link": "https://digitalocean.com/community/tutorials/python-str-repr-functions",
        "document": "In this article, you’ll learn about the special methods and that are defined in the Python data model. The and methods can be helpful in debugging Python code by logging or printing useful information about an object.\n\nPython special methods begin and end with a double underscore and are informally known as dunder methods. Dunder methods are the underlying methods for Python’s built-in operators and functions. You should avoid calling dunder methods directly, and instead implement the dunder methods in your class and then use the built-in functions that call them, such as and .\n\nWhat’s the difference between and ?\n\nThe method returns a human-readable, or informal, string representation of an object. This method is called by the built-in , , and functions. If you don’t define a method for a class, then the built-in object implementation calls the method instead.\n\nThe method returns a more information-rich, or official, string representation of an object. This method is called by the built-in function. If possible, the string returned should be a valid Python expression that can be used to recreate the object. In all cases, the string should be informative and unambiguous.\n\nIn general, the string is intended for users and the string is intended for developers.\n\nThe examples in this section call the and methods directly for demonstration purposes.\n\nThe class is a built-in Python class which has a default implementation of the and methods.\n\nThe following example code shows the strings returned by the default implementation of the and methods for a object:\n\nThe output shows that the function calls and returns a human-friendly string, while the function calls and returns a more information-rich string that can be used to recreate the object. In fact, you can use the function with the function to create a new object from the string:\n\nThe preceding example code creates the object from the string for , and then verifies that the values of both objects are equal.\n\nand Examples Using a New Class\n\nWhen you create a class, you should implement at least the method so that useful information is returned when built-in functions use .\n\nThe following class doesn’t implement the or methods:\n\nThe output when you use and is:\n\nThe preceding example demonstrates that the default implementation of for the object returns a string with only the class and the object in hexadecimal format, which is not very useful. Note that and return the same value, because calls when isn’t implemented.\n\nUpdate the Ocean class with implementations of the and methods:\n\nThe implementation of in the preceding example returns an easy-to-read string that provides the relevant details of the object for a user. The implementation of returns a string that’s a valid Python expression which could be used to recreate the object: . The example uses f-string formatting for the strings, but you can format the strings using any format supported by Python.\n\nIn this article, you explored the differences between the and the methods and implemented these special methods in a class, so that you didn’t need to call them directly. Learn more about working with strings in Python through our Python string tutorials."
    },
    {
        "link": "https://reddit.com/r/learnpython/comments/1dzr2zh/how_do_i_change_the_return_value_of_an_object",
        "document": "You know how integers return their own value, not <__main__.int object at 0x000002710AC9C8E0>? How would i make that happen with a custom object?\n\nI want to mimic the behaviour of the below:\n\nAs currrently my code behaves like this:\n\nAnd i would like it to behave like this:\n\nAs far as i'm aware, __str__ and __repr__ do not work, as they throw errors if they return a non-str value\n\nWhen __repr__ is called, it raises an error because it cannot return a non-string value. Is there a way to MAKE it return a non string value?\n\nACTUALLY NVM I'M PRETTY SURE I'M JUST DUMB"
    }
]