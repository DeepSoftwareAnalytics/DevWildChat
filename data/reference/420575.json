[
    {
        "link": "https://api.jquery.com/category/manipulation",
        "document": "Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element."
    },
    {
        "link": "https://api.jquery.com",
        "document": "Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first."
    },
    {
        "link": "https://api.jquery.com/category/version/3.5",
        "document": "Reduce the set of matched elements to the even ones in the set, numbered from zero."
    },
    {
        "link": "https://blog.jquery.com/2020/05/04/jquery-3-5-1-released-fixing-a-regression",
        "document": "I’ve never gotten to say this on a jQuery release, but May the 4th be with you! A short time ago in a galaxy exactly like this one, we released jQuery 3.5.0. We have a quick fix for a regression in that release.\n\nSpecifically, we had changed our internal data object to use instead of a plain object ( ). We did that to prevent collisions with keys on properties. However, this also meant that users (especially plugins) could no longer check what was in jQuery data with the native method, and it broke some code. We’ve reverted that change, but plan to put it back in jQuery 4.0. This change is the only code change in this release. Other changes include some minor updates to our docs and build system.\n\njQuery 3.5.0 included fixes for two security issues in jQuery’s DOM manipulation methods, as in , , and the others. Security advisories for both of these issues have been published on GitHub. While we provided all of the details on the first issue in the jQuery 3.5.0 blog post, we did not provide all of the details on the second and would like to do that in this post.\n\nThe second issue was very similar to the first. It was an XSS vulnerability that had to do with passing elements to jQuery’s DOM manipulation methods. Essentially, we’re using a regex to wrap elements with elements to ensure those elements get parsed correctly in old IE (IE <= 9 replaces any tags with their contents when inserted outside of a element).\n\nOur fix is to only apply this code where it is needed. Fortunately, because of the different parsing behavior in IE9, we can keep the fix in IE9 without exposing it to the same vulnerability as other browsers. Please upgrade when you get a chance to avoid these vulnerabilities.\n\nIf you haven’t yet upgraded to jQuery 3.5, have a look at the 3.5 Upgrade Guide. If you haven’t yet upgraded to jQuery 3+, first have a look at the 3.0 Upgrade Guide. Also, the jQuery Migrate plugin will help you to identify compatibility issues in your code.\n\nIf you can’t yet upgrade to 3.5+, Daniel Ruf has kindly provided patches for previous jQuery versions. Please try out this new release and let us know about any issues you experienced.\n\nYou can get the files from the jQuery CDN, or link to them directly:\n\nYou can also get this release from npm:\n\nSometimes you don’t need ajax, or you prefer to use one of the many standalone libraries that focus on ajax requests. And often it is simpler to use a combination of CSS and class manipulation for web animations. Along with the regular version of jQuery that includes the ajax and effects modules, we’ve released a “slim” version that excludes these modules. The size of jQuery is very rarely a load performance concern these days, but the slim build is about 6k gzipped bytes smaller than the regular version. These files are also available in the npm package and on the CDN:\n\nThese updates are already available as the current versions on npm and Bower. Information on all the ways to get jQuery is available at https://jquery.com/download/. Public CDNs receive their copies today, please give them a few days to post the files. If you’re anxious to get a quick start, use the files on our CDN until they have a chance to update.\n\nThank you to all of you who participated in this release by submitting patches, reporting bugs, or testing, including Pierre Grimaud, Michal Golebiowski-Owczarek, Ed S, vanillajonathan, and the whole jQuery team.\n• Update the link to the jsdom repository (f7fed7ee)\n• Use https for hyperlinks in README (763dd3fe)\n• Fix flakiness in the “jQuery.ajax() – JSONP – Same Domain” test (46ba70c5)"
    },
    {
        "link": "https://api.jquery.com/category/miscellaneous/dom-element-methods",
        "document": "Retrieve all the elements contained in the jQuery set, as an array."
    },
    {
        "link": "https://getbootstrap.com/docs/4.5/components/card",
        "document": "Bootstrap’s cards provide a flexible and extensible content container with multiple variants and options.\n\nA card is a flexible and extensible content container. It includes options for headers and footers, a wide variety of content, contextual background colors, and powerful display options. If you’re familiar with Bootstrap 3, cards replace our old panels, wells, and thumbnails. Similar functionality to those components is available as modifier classes for cards.\n\nCards are built with as little markup and styles as possible, but still manage to deliver a ton of control and customization. Built with flexbox, they offer easy alignment and mix well with other Bootstrap components. They have no by default, so use spacing utilities as needed.\n\nBelow is an example of a basic card with mixed content and a fixed width. Cards have no fixed width to start, so they’ll naturally fill the full width of its parent element. This is easily customized with our various sizing options.\n\nCards support a wide variety of content, including images, text, list groups, links, and more. Below are examples of what’s supported.\n\nThe building block of a card is the . Use it whenever you need a padded section within a card.\n\nCard titles are used by adding to a tag. In the same way, links are added and placed next to each other by adding to an tag.\n\nSubtitles are used by adding a to a tag. If the and the items are placed in a item, the card title and subtitle are aligned nicely.\n\nplaces an image to the top of the card. With , text can be added to the card. Text within can also be styled with the standard HTML tags.\n\nCreate lists of content in a card with a flush list group.\n\nMix and match multiple content types to create the card you need, or throw everything in there. Shown below are image styles, blocks, text styles, and a list group—all wrapped in a fixed-width card.\n\nCard headers can be styled by adding to elements.\n\nCards assume no specific to start, so they’ll be 100% wide unless otherwise stated. You can change this as needed with custom CSS, grid classes, grid Sass mixins, or utilities.\n\nUsing the grid, wrap cards in columns and rows as needed.\n\nUse our handful of available sizing utilities to quickly set a card’s width.\n\nUse custom CSS in your stylesheets or as inline styles to set a width.\n\nYou can quickly change the text alignment of any card—in its entirety or specific parts—with our text align classes.\n\nAdd some navigation to a card’s header (or block) with Bootstrap’s nav components.\n\nCards include a few options for working with images. Choose from appending “image caps” at either end of a card, overlaying images with card content, or simply embedding the image in a card.\n\nSimilar to headers and footers, cards can include top and bottom “image caps”—images at the top or bottom of a card.\n\nTurn an image into a card background and overlay your card’s text. Depending on the image, you may or may not need additional styles or utilities.\n\nUsing a combination of grid and utility classes, cards can be made horizontal in a mobile-friendly and responsive way. In the example below, we remove the grid gutters with and use classes to make the card horizontal at the breakpoint. Further adjustments may be needed depending on your card content.\n\nCards include various options for customizing their backgrounds, borders, and color.\n\nUse text and background utilities to change the appearance of a card.\n\nUse border utilities to change just the of a card. Note that you can put classes on the parent or a subset of the card’s contents as shown below.\n\nYou can also change the borders on the card header and footer as needed, and even remove their with .\n\nIn addition to styling the content within cards, Bootstrap includes a few options for laying out series of cards. For the time being, these layout options are not yet responsive.\n\nUse card groups to render cards as a single, attached element with equal width and height columns. Card groups start off stacked and use to become attached with uniform dimensions starting at the breakpoint.\n\nWhen using card groups with footers, their content will automatically line up.\n\nNeed a set of equal width and height cards that aren’t attached to one another? Use card decks.\n\nJust like with card groups, card footers in decks will automatically line up.\n\nUse the Bootstrap grid system and its classes to control how many grid columns (wrapped around your cards) you show per row. For example, here’s laying out the cards on one column, and splitting four cards to equal width across multiple rows, from the medium breakpoint up.\n\nChange it to and you’ll see the fourth card wrap.\n\nWhen you need equal height, add to the cards. If you want equal heights by default, you can set in Sass.\n\nCards can be organized into Masonry-like columns with just CSS by wrapping them in . Cards are built with CSS properties instead of flexbox for easier alignment. Cards are ordered from top to bottom and left to right.\n\nHeads up! Your mileage with card columns may vary. To prevent cards breaking across columns, we must set them to as isn’t a bulletproof solution yet.\n\nCard columns can also be extended and customized with some additional code. Shown below is an extension of the class using the same CSS we use—CSS columns— to generate a set of responsive tiers for changing the number of columns."
    },
    {
        "link": "https://getbootstrap.com/docs/4.0/components/card",
        "document": "Bootstrap’s cards provide a flexible and extensible content container with multiple variants and options.\n\nA card is a flexible and extensible content container. It includes options for headers and footers, a wide variety of content, contextual background colors, and powerful display options. If you’re familiar with Bootstrap 3, cards replace our old panels, wells, and thumbnails. Similar functionality to those components is available as modifier classes for cards.\n\nCards are built with as little markup and styles as possible, but still manage to deliver a ton of control and customization. Built with flexbox, they offer easy alignment and mix well with other Bootstrap components. They have no by default, so use spacing utilities as needed.\n\nBelow is an example of a basic card with mixed content and a fixed width. Cards have no fixed width to start, so they’ll naturally fill the full width of its parent element. This is easily customized with our various sizing options.\n\nCards support a wide variety of content, including images, text, list groups, links, and more. Below are examples of what’s supported.\n\nThe building block of a card is the . Use it whenever you need a padded section within a card.\n\nCard titles are used by adding to a tag. In the same way, links are added and placed next to each other by adding to an tag.\n\nSubtitles are used by adding a to a tag. If the and the items are placed in a item, the card title and subtitle are aligned nicely.\n\nplaces an image to the top of the card. With , text can be added to the card. Text within can also be styled with the standard HTML tags.\n\nCreate lists of content in a card with a flush list group.\n\nMix and match multiple content types to create the card you need, or throw everything in there. Shown below are image styles, blocks, text styles, and a list group—all wrapped in a fixed-width card.\n\nCard headers can be styled by adding to elements.\n\nCards assume no specific to start, so they’ll be 100% wide unless otherwise stated. You can change this as needed with custom CSS, grid classes, grid Sass mixins, or utilities.\n\nUsing the grid, wrap cards in columns and rows as needed.\n\nUse our handful of available sizing utilities to quickly set a card’s width.\n\nUse custom CSS in your stylesheets or as inline styles to set a width.\n\nYou can quickly change the text alignment of any card—in its entirety or specific parts—with our text align classes.\n\nAdd some navigation to a card’s header (or block) with Bootstrap’s nav components.\n\nCards include a few options for working with images. Choose from appending “image caps” at either end of a card, overlaying images with card content, or simply embedding the image in a card.\n\nSimilar to headers and footers, cards can include top and bottom “image caps”—images at the top or bottom of a card.\n\nTurn an image into a card background and overlay your card’s text. Depending on the image, you may or may not need additional styles or utilities.\n\nCards include various options for customizing their backgrounds, borders, and color.\n\nUse text and background utilities to change the appearance of a card.\n\nHeader Primary card title Some quick example text to build on the card title and make up the bulk of the card's content. Header Secondary card title Some quick example text to build on the card title and make up the bulk of the card's content. Header Success card title Some quick example text to build on the card title and make up the bulk of the card's content. Header Danger card title Some quick example text to build on the card title and make up the bulk of the card's content. Header Warning card title Some quick example text to build on the card title and make up the bulk of the card's content. Header Info card title Some quick example text to build on the card title and make up the bulk of the card's content. Header Light card title Some quick example text to build on the card title and make up the bulk of the card's content. Header Dark card title Some quick example text to build on the card title and make up the bulk of the card's content.\n\nUse border utilities to change just the of a card. Note that you can put classes on the parent or a subset of the card’s contents as shown below.\n\nHeader Primary card title Some quick example text to build on the card title and make up the bulk of the card's content. Header Secondary card title Some quick example text to build on the card title and make up the bulk of the card's content. Header Success card title Some quick example text to build on the card title and make up the bulk of the card's content. Header Danger card title Some quick example text to build on the card title and make up the bulk of the card's content. Header Warning card title Some quick example text to build on the card title and make up the bulk of the card's content. Header Info card title Some quick example text to build on the card title and make up the bulk of the card's content. Header Light card title Some quick example text to build on the card title and make up the bulk of the card's content. Header Dark card title Some quick example text to build on the card title and make up the bulk of the card's content.\n\nYou can also change the borders on the card header and footer as needed, and even remove their with .\n\nIn addition to styling the content within cards, Bootstrap includes a few options for laying out series of cards. For the time being, these layout options are not yet responsive.\n\nUse card groups to render cards as a single, attached element with equal width and height columns. Card groups use to achieve their uniform sizing.\n\nWhen using card groups with footers, their content will automatically line up.\n\nNeed a set of equal width and height cards that aren’t attached to one another? Use card decks.\n\nJust like with card groups, card footers in decks will automatically line up.\n\nCards can be organized into Masonry-like columns with just CSS by wrapping them in . Cards are built with CSS properties instead of flexbox for easier alignment. Cards are ordered from top to bottom and left to right.\n\nHeads up! Your mileage with card columns may vary. To prevent cards breaking across columns, we must set them to as isn’t a bulletproof solution yet.\n\nCard columns can also be extended and customized with some additional code. Shown below is an extension of the class using the same CSS we use—CSS columns— to generate a set of responsive tiers for changing the number of columns."
    },
    {
        "link": "https://getbootstrap.com/docs/4.3/components/card",
        "document": "Bootstrap’s cards provide a flexible and extensible content container with multiple variants and options.\n\nA card is a flexible and extensible content container. It includes options for headers and footers, a wide variety of content, contextual background colors, and powerful display options. If you’re familiar with Bootstrap 3, cards replace our old panels, wells, and thumbnails. Similar functionality to those components is available as modifier classes for cards.\n\nCards are built with as little markup and styles as possible, but still manage to deliver a ton of control and customization. Built with flexbox, they offer easy alignment and mix well with other Bootstrap components. They have no by default, so use spacing utilities as needed.\n\nBelow is an example of a basic card with mixed content and a fixed width. Cards have no fixed width to start, so they’ll naturally fill the full width of its parent element. This is easily customized with our various sizing options.\n\nCards support a wide variety of content, including images, text, list groups, links, and more. Below are examples of what’s supported.\n\nThe building block of a card is the . Use it whenever you need a padded section within a card.\n\nCard titles are used by adding to a tag. In the same way, links are added and placed next to each other by adding to an tag.\n\nSubtitles are used by adding a to a tag. If the and the items are placed in a item, the card title and subtitle are aligned nicely.\n\nplaces an image to the top of the card. With , text can be added to the card. Text within can also be styled with the standard HTML tags.\n\nCreate lists of content in a card with a flush list group.\n\nMix and match multiple content types to create the card you need, or throw everything in there. Shown below are image styles, blocks, text styles, and a list group—all wrapped in a fixed-width card.\n\nCard headers can be styled by adding to elements.\n\nCards assume no specific to start, so they’ll be 100% wide unless otherwise stated. You can change this as needed with custom CSS, grid classes, grid Sass mixins, or utilities.\n\nUsing the grid, wrap cards in columns and rows as needed.\n\nUse our handful of available sizing utilities to quickly set a card’s width.\n\nUse custom CSS in your stylesheets or as inline styles to set a width.\n\nYou can quickly change the text alignment of any card—in its entirety or specific parts—with our text align classes.\n\nAdd some navigation to a card’s header (or block) with Bootstrap’s nav components.\n\nCards include a few options for working with images. Choose from appending “image caps” at either end of a card, overlaying images with card content, or simply embedding the image in a card.\n\nSimilar to headers and footers, cards can include top and bottom “image caps”—images at the top or bottom of a card.\n\nTurn an image into a card background and overlay your card’s text. Depending on the image, you may or may not need additional styles or utilities.\n\nUsing a combination of grid and utility classes, cards can be made horizontal in a mobile-friendly and responsive way. In the example below, we remove the grid gutters with and use classes to make the card horizontal at the breakpoint. Further adjustments may be needed depending on your card content.\n\nCards include various options for customizing their backgrounds, borders, and color.\n\nUse text and background utilities to change the appearance of a card.\n\nHeader Primary card title Some quick example text to build on the card title and make up the bulk of the card's content. Header Secondary card title Some quick example text to build on the card title and make up the bulk of the card's content. Header Success card title Some quick example text to build on the card title and make up the bulk of the card's content. Header Danger card title Some quick example text to build on the card title and make up the bulk of the card's content. Header Warning card title Some quick example text to build on the card title and make up the bulk of the card's content. Header Info card title Some quick example text to build on the card title and make up the bulk of the card's content. Header Light card title Some quick example text to build on the card title and make up the bulk of the card's content. Header Dark card title Some quick example text to build on the card title and make up the bulk of the card's content.\n\nUse border utilities to change just the of a card. Note that you can put classes on the parent or a subset of the card’s contents as shown below.\n\nHeader Primary card title Some quick example text to build on the card title and make up the bulk of the card's content. Header Secondary card title Some quick example text to build on the card title and make up the bulk of the card's content. Header Success card title Some quick example text to build on the card title and make up the bulk of the card's content. Header Danger card title Some quick example text to build on the card title and make up the bulk of the card's content. Header Warning card title Some quick example text to build on the card title and make up the bulk of the card's content. Header Info card title Some quick example text to build on the card title and make up the bulk of the card's content. Header Light card title Some quick example text to build on the card title and make up the bulk of the card's content. Header Dark card title Some quick example text to build on the card title and make up the bulk of the card's content.\n\nYou can also change the borders on the card header and footer as needed, and even remove their with .\n\nIn addition to styling the content within cards, Bootstrap includes a few options for laying out series of cards. For the time being, these layout options are not yet responsive.\n\nUse card groups to render cards as a single, attached element with equal width and height columns. Card groups use to achieve their uniform sizing.\n\nWhen using card groups with footers, their content will automatically line up.\n\nNeed a set of equal width and height cards that aren’t attached to one another? Use card decks.\n\nJust like with card groups, card footers in decks will automatically line up.\n\nCards can be organized into Masonry-like columns with just CSS by wrapping them in . Cards are built with CSS properties instead of flexbox for easier alignment. Cards are ordered from top to bottom and left to right.\n\nHeads up! Your mileage with card columns may vary. To prevent cards breaking across columns, we must set them to as isn’t a bulletproof solution yet.\n\nCard columns can also be extended and customized with some additional code. Shown below is an extension of the class using the same CSS we use—CSS columns— to generate a set of responsive tiers for changing the number of columns."
    },
    {
        "link": "https://purecode.ai/components/bootstrap/filter",
        "document": "A Bootstrap Filter is a UI feature that allows users to filter or sort content using the Bootstrap framework. It utilizes a form control to capture the search input var value and manipulate the data displayed in a table. The filter function processes the value entered by the user, enabling real-time filtering. By implementing a searching feature, users can easily find relevant data within the table. The filtered results update dynamically in the HTML document as the value changes, providing an efficient user experience in a well-structured div. This function ensures that all relevant entries are displayed according to the user’s input. You can also create custom dropdown filters to refine the displayed content further, using resources like jQuery or Bootstrap. It is the best way to efficiently toggle between different views of the data. For more details, you can check the link to the document. The CSS can be customized to style the filtered content and ensure better visual appearance. This paragraph helps explain the features and benefits of using Bootstrap Filters and the filter function.\n\nHow to build a Bootstrap Filter using PureCode AI? Search 'Bootstrap Filter' on PureCode AI, customize your design and criteria, and use the generated HTML code to implement the filter in your project. You can set a var value in your form control to capture input. The function can filter data in the table based on the search criteria. Utilize CSS to style the div elements, ensuring a responsive layout for your element. With this setup, you can enhance user interaction by allowing them to dynamically searching through the data in your table. The function will also allow for additional searching options, improving the filtering process within the table and making the div elements more user-friendly. To further customize the filter, you can define a dropdown to allow users to select specific categories or parameters. This approach ensures that users can easily navigate through the data and find relevant information efficiently, ultimately enhancing the overall experience. You can also create toggle filters with links for users to quickly jump to desired sections of the table. The document object is used to manage these actions, enhancing interactivity. In this paragraph, you can see the various ways of integrating and customizing the Bootstrap filter.\n\nWhy do you need a Bootstrap Filter? It enhances the user experience by allowing users to easily navigate large datasets or lists by narrowing down content based on specific filters. The function enables the search feature, allowing users to input a value that filters the data displayed in the table. As users type in the search field, the function updates the table dynamically, showing only relevant data. The CSS styles applied to the div elements ensure that the table maintains a clean and organized layout. You can also define filters that match specific content types, creating a more personalized search experience. With each search, users can see their results in real-time, making it easy to interact with large sets of data and enhancing overall usability. Additionally, this feature allows for dropdown filters, which help narrow the search parameters. The best way to implement this is through the use of jQuery, where the filter function toggle between different search results as needed. This setup encourages efficient navigation through the table and ensures that users can find specific data quickly and effortlessly. HTML can be used to structure the table and the filter elements, and HTML can also be used to implement the dynamic updates based on user input.\n\nHow to add your custom theme for a Bootstrap Filter? Customize the design, such as colors and layout, through PureCode AI's 'Add a Theme' section and integrate these changes into the filter in your Bootstrap project. You can implement the function to manage data effectively, allowing users to search through the table efficiently. By adjusting the value of the search input, you can filter the data displayed in the table. Use a div to structure your layout for better visual organization. Additionally, you can enhance the function to ensure it processes data accurately, providing a seamless user experience with the table. You can link external stylesheet or define custom ones to further tweak the look of your filter and make it match your branding. The note here is that by using jQuery, you can create powerful filtering options, allowing for dynamic filtering of content."
    },
    {
        "link": "https://stackoverflow.com/questions/51444735/bootstrap-cardheader-with-buttons-on-the-right",
        "document": "I want to have a Cardheader with Some text on the left and two buttons on the right. This is my html:\n\nBut the two buttons get displayed below the h3 like this:"
    }
]