[
    {
        "link": "https://ng-bootstrap.github.io#/components/modal/api#NgbModalOptions",
        "document": ""
    },
    {
        "link": "https://ng-bootstrap.github.io",
        "document": ""
    },
    {
        "link": "https://getbootstrap.com/docs/5.1/components/modal",
        "document": "Use Bootstrap’s JavaScript modal plugin to add dialogs to your site for lightboxes, user notifications, or completely custom content.\n\nBefore getting started with Bootstrap’s modal component, be sure to read the following as our menu options have recently changed.\n• Modals are built with HTML, CSS, and JavaScript. They’re positioned over everything else in the document and remove scroll from the so that modal content scrolls instead.\n• Clicking on the modal “backdrop” will automatically close the modal.\n• Bootstrap only supports one modal window at a time. Nested modals aren’t supported as we believe them to be poor user experiences.\n• Modals use , which can sometimes be a bit particular about its rendering. Whenever possible, place your modal HTML in a top-level position to avoid potential interference from other elements. You’ll likely run into issues when nesting a within another fixed element.\n• Once again, due to , there are some caveats with using modals on mobile devices. See our browser support docs for details.\n• Due to how HTML5 defines its semantics, the HTML attribute has no effect in Bootstrap modals. To achieve the same effect, use some custom JavaScript:\n\nKeep reading for demos and usage guidelines.\n\nBelow is a static modal example (meaning its and have been overridden). Included are the modal header, modal body (required for ), and modal footer (optional). We ask that you include modal headers with dismiss actions whenever possible, or provide another explicit dismiss action.\n\nToggle a working modal demo by clicking the button below. It will slide down and fade in from the top of the page.\n\nWhen backdrop is set to static, the modal will not close when clicking outside it. Click the button below to try it.\n\nWhen modals become too long for the user’s viewport or device, they scroll independent of the page itself. Try the demo below to see what we mean.\n\nYou can also create a scrollable modal that allows scroll the modal body by adding to .\n\nAdd to to vertically center the modal.\n\nTooltips and popovers can be placed within modals as needed. When modals are closed, any tooltips and popovers within are also automatically dismissed.\n\nUtilize the Bootstrap grid system within a modal by nesting within the . Then, use the normal grid system classes as you would anywhere else.\n\nHave a bunch of buttons that all trigger the same modal with slightly different contents? Use and HTML attributes to vary the contents of the modal depending on which button was clicked.\n\nBelow is a live demo followed by example HTML and JavaScript. For more information, read the modal events docs for details on .\n\nToggle between multiple modals with some clever placement of the and attributes. For example, you could toggle a password reset modal from within an already open sign in modal. Please note multiple modals cannot be open at the same time—this method simply toggles between two separate modals.\n\nThe variable determines the transform state of before the modal fade-in animation, the variable determines the transform of at the end of the modal fade-in animation.\n\nIf you want for example a zoom-in animation, you can set .\n\nFor modals that simply appear rather than fade in to view, remove the class from your modal markup.\n\nIf the height of a modal changes while it is open, you should call to readjust the modal’s position in case a scrollbar appears.\n\nBe sure to add , referencing the modal title, to . Additionally, you may give a description of your modal dialog with on . Note that you don’t need to add since we already add it via JavaScript.\n\nEmbedding YouTube videos in modals requires additional JavaScript not in Bootstrap to automatically stop playback and more. See this helpful Stack Overflow post for more information.\n\nModals have three optional sizes, available via modifier classes to be placed on a . These sizes kick in at certain breakpoints to avoid horizontal scrollbars on narrower viewports.\n\nOur default modal without modifier class constitutes the “medium” size modal.\n\nAnother override is the option to pop up a modal that covers the user viewport, available via modifier classes that are placed on a .\n\nResponsive fullscreen modals are generated via the map and a loop in .\n\nThe modal plugin toggles your hidden content on demand, via data attributes or JavaScript. It also overrides default scrolling behavior and generates a to provide a click area for dismissing shown modals when clicking outside the modal.\n\nActivate a modal without writing JavaScript. Set on a controller element, like a button, along with a or to target a specific modal to toggle.\n\nDismissal can be achieved with the attribute on a button within the modal as demonstrated below:\n\nor on a button outside the modal using the as demonstrated below:\n\nOptions can be passed via data attributes or JavaScript. For data attributes, append the option name to , as in .\n\nActivates your content as a modal. Accepts an optional options .\n\nManually toggles a modal. Returns to the caller before the modal has actually been shown or hidden (i.e. before the or event occurs).\n\nManually opens a modal. Returns to the caller before the modal has actually been shown (i.e. before the event occurs).\n\nAlso, you can pass a DOM element as an argument that can be received in the modal events (as the property).\n\nManually hides a modal. Returns to the caller before the modal has actually been hidden (i.e. before the event occurs).\n\nManually readjust the modal’s position if the height of a modal changes while it is open (i.e. in case a scrollbar appears).\n\nDestroys an element’s modal. (Removes stored data on the DOM element)\n\nStatic method which allows you to get the modal instance associated with a DOM element\n\nStatic method which allows you to get the modal instance associated with a DOM element, or create a new one in case it wasn’t initialized\n\nBootstrap’s modal class exposes a few events for hooking into modal functionality. All modal events are fired at the modal itself (i.e. at the )."
    },
    {
        "link": "https://stackoverflow.com/questions/67924871/angular-ngbmodal-how-to-correctly-close-a-modal-window",
        "document": "I am working on an Angular application using NgbModal to handle modal. I have some doubts about how properly close a modal implemented with this component (untill now I always used PrimeNg instead ng-bootstrap).\n\nBasically I have done in this way (and it seems to works fine): into my TypeScript code I have something like this:\n\nBasically this method is called when a post is submitted. The setAddress() method save on the database (calling another service method) the form values. Then the modal was closed. It seems to works fine but I have the following doubt:\n\nAs you can see in order to close my modal I am using this dismissAll() method. Checking on the documentation: https://ng-bootstrap.github.io/#/components/modal/api\n\nIt also indicates a close() method that I can not use on my code. Trying:\n\nthe IDE says to me:\n\nWhy in the official documentation I have this method but not in my code? The first used method (dismissAll()) is it correct? It is working but I have some doubts related to this \"All\" into the method name. Why \"All\"? it let me think that it is closing all the modals and not only a single one (in my use case in my page there is only a single modal so it is indifferent but I am not sure that I am implementing the correct logic to close my modal)"
    },
    {
        "link": "https://stackoverflow.com/questions/53178873/ngbmodal-custom-class-styling",
        "document": "I have an Angular 6 app that I am trying to implement a modal window that slides in from the right side of the screen, like shown here: https://codepen.io/anon/pen/OayRVy\n\nBut, no matter what I try, I cannot override the positioning of the modal window. The only thing I have been able to change is things like the background color of the header/body.\n\nIf I inspect the HTML and in Chrome DevTools add a property to the container, it will do what I want. But, adding a\n\nto my .scss file for the component has no effect.\n\nCan anyone show me how to override the default bootstrap styling so I can force it to appear on the right side of the screen and take up 100% of the height?"
    },
    {
        "link": "https://getbootstrap.com/docs/5.0/forms/validation",
        "document": "Provide valuable, actionable feedback to your users with HTML5 form validation, via browser default behaviors or custom styles and JavaScript.\n\nWe are aware that currently the client-side custom validation styles and tooltips are not accessible, since they are not exposed to assistive technologies. While we work on a solution, we’d recommend either using the server-side option or the default browser validation method.\n• HTML form validation is applied via CSS’s two pseudo-classes, and . It applies to , , and elements.\n• Bootstrap scopes the and styles to parent class, usually applied to the . Otherwise, any required field without a value shows up as invalid on page load. This way, you may choose when to activate them (typically after form submission is attempted).\n• To reset the appearance of the form (for instance, in the case of dynamic form submissions using AJAX), remove the class from the again after submission.\n• As a fallback, and classes may be used instead of the pseudo-classes for server-side validation. They do not require a parent class.\n• Due to constraints in how CSS works, we cannot (at present) apply styles to a that comes before a form control in the DOM without the help of custom JavaScript.\n• All modern browsers support the constraint validation API, a series of JavaScript methods for validating form controls.\n• Feedback messages may utilize the browser defaults (different for each browser, and unstylable via CSS) or our custom feedback styles with additional HTML and CSS.\n• You may provide custom validity messages with in JavaScript.\n\nWith that in mind, consider the following demos for our custom form validation styles, optional server-side classes, and browser defaults.\n\nFor custom Bootstrap form validation messages, you’ll need to add the boolean attribute to your . This disables the browser default feedback tooltips, but still provides access to the form validation APIs in JavaScript. Try to submit the form below; our JavaScript will intercept the submit button and relay feedback to you. When attempting to submit, you’ll see the and styles applied to your form controls.\n\nCustom feedback styles apply custom colors, borders, focus styles, and background icons to better communicate feedback. Background icons for s are only available with , and not .\n\nNot interested in custom validation feedback messages or writing JavaScript to change form behaviors? All good, you can use the browser defaults. Try submitting the form below. Depending on your browser and OS, you’ll see a slightly different style of feedback.\n\nWhile these feedback styles cannot be styled with CSS, you can still customize the feedback text through JavaScript.\n\nWe recommend using client-side validation, but in case you require server-side validation, you can indicate invalid and valid form fields with and . Note that is also supported with these classes.\n\nFor invalid fields, ensure that the invalid feedback/error message is associated with the relevant form field using (noting that this attribute allows more than one to be referenced, in case the field already points to additional form text).\n\nTo fix issues with border radii, input groups require an additional class.\n\nValidation styles are available for the following form controls and components:\n• s and s with (including up to one in input groups)\n\nIf your form layout allows it, you can swap the classes for classes to display validation feedback in a styled tooltip. Be sure to have a parent with on it for tooltip positioning. In the example below, our column classes have this already, but your project may require an alternative setup.\n\nTwo mixins are combined together, through our loop, to generate our form validation feedback styles.\n\nThis is the validation Sass map from . Override or extend this to generate different or additional states.\n\nMaps of can contain three optional parameters to override tooltips and focus styles.\n\nUsed to iterate over map values to generate our validation styles. Any modifications to the above Sass map will be reflected in your compiled CSS via this loop.\n\nValidation states can be customized via Sass with the map. Located in our file, this Sass map is how we generate the default / validation states. Included is a nested map for customizing each state’s color, icon, tooltip color, and focus shadow. While no other states are supported by browsers, those using custom styles can easily add more complex form feedback.\n\nPlease note that we do not recommend customizing values without also modifying the mixin."
    },
    {
        "link": "https://getbootstrap.com/docs/5.3/forms/validation",
        "document": "Provide valuable, actionable feedback to your users with HTML5 form validation, via browser default behaviors or custom styles and JavaScript.\n\nWe are aware that currently the client-side custom validation styles and tooltips are not accessible, since they are not exposed to assistive technologies. While we work on a solution, we’d recommend either using the server-side option or the default browser validation method.\n• HTML form validation is applied via CSS’s two pseudo-classes, and . It applies to , , and elements.\n• Bootstrap scopes the and styles to parent class, usually applied to the . Otherwise, any required field without a value shows up as invalid on page load. This way, you may choose when to activate them (typically after form submission is attempted).\n• To reset the appearance of the form (for instance, in the case of dynamic form submissions using Ajax), remove the class from the again after submission.\n• As a fallback, and classes may be used instead of the pseudo-classes for server-side validation. They do not require a parent class.\n• Due to constraints in how CSS works, we cannot (at present) apply styles to a that comes before a form control in the DOM without the help of custom JavaScript.\n• All modern browsers support the constraint validation API, a series of JavaScript methods for validating form controls.\n• Feedback messages may utilize the browser defaults (different for each browser, and unstylable via CSS) or our custom feedback styles with additional HTML and CSS.\n• You may provide custom validity messages with in JavaScript.\n\nWith that in mind, consider the following demos for our custom form validation styles, optional server-side classes, and browser defaults.\n\nFor custom Bootstrap form validation messages, you’ll need to add the boolean attribute to your . This disables the browser default feedback tooltips, but still provides access to the form validation APIs in JavaScript. Try to submit the form below; our JavaScript will intercept the submit button and relay feedback to you. When attempting to submit, you’ll see the and styles applied to your form controls.\n\nCustom feedback styles apply custom colors, borders, focus styles, and background icons to better communicate feedback. Background icons for s are only available with , and not .\n\nNot interested in custom validation feedback messages or writing JavaScript to change form behaviors? All good, you can use the browser defaults. Try submitting the form below. Depending on your browser and OS, you’ll see a slightly different style of feedback.\n\nWhile these feedback styles cannot be styled with CSS, you can still customize the feedback text through JavaScript.\n\nWe recommend using client-side validation, but in case you require server-side validation, you can indicate invalid and valid form fields with and . Note that is also supported with these classes.\n\nFor invalid fields, ensure that the invalid feedback/error message is associated with the relevant form field using (noting that this attribute allows more than one to be referenced, in case the field already points to additional form text).\n\nTo fix issues with border radius, input groups require an additional class.\n\nValidation styles are available for the following form controls and components:\n• s and s with (including up to one in input groups)\n\nIf your form layout allows it, you can swap the classes for classes to display validation feedback in a styled tooltip. Be sure to have a parent with on it for tooltip positioning. In the example below, our column classes have this already, but your project may require an alternative setup.\n\nAs part of Bootstrap’s evolving CSS variables approach, forms now use local CSS variables for validation for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.\n\nThese variables are also color mode adaptive, meaning they change color while in dark mode.\n\nTwo mixins are combined, through our loop, to generate our form validation feedback styles.\n\nThis is the validation Sass map from . Override or extend this to generate different or additional states.\n\nMaps of can contain three optional parameters to override tooltips and focus styles.\n\nUsed to iterate over map values to generate our validation styles. Any modifications to the above Sass map will be reflected in your compiled CSS via this loop.\n\nValidation states can be customized via Sass with the map. Located in our file, this Sass map is how we generate the default / validation states. Included is a nested map for customizing each state’s color, icon, tooltip color, and focus shadow. While no other states are supported by browsers, those using custom styles can easily add more complex form feedback."
    },
    {
        "link": "https://getbootstrap.com/docs/5.1/forms/validation",
        "document": "Provide valuable, actionable feedback to your users with HTML5 form validation, via browser default behaviors or custom styles and JavaScript.\n\nWe are aware that currently the client-side custom validation styles and tooltips are not accessible, since they are not exposed to assistive technologies. While we work on a solution, we’d recommend either using the server-side option or the default browser validation method.\n• HTML form validation is applied via CSS’s two pseudo-classes, and . It applies to , , and elements.\n• Bootstrap scopes the and styles to parent class, usually applied to the . Otherwise, any required field without a value shows up as invalid on page load. This way, you may choose when to activate them (typically after form submission is attempted).\n• To reset the appearance of the form (for instance, in the case of dynamic form submissions using AJAX), remove the class from the again after submission.\n• As a fallback, and classes may be used instead of the pseudo-classes for server-side validation. They do not require a parent class.\n• Due to constraints in how CSS works, we cannot (at present) apply styles to a that comes before a form control in the DOM without the help of custom JavaScript.\n• All modern browsers support the constraint validation API, a series of JavaScript methods for validating form controls.\n• Feedback messages may utilize the browser defaults (different for each browser, and unstylable via CSS) or our custom feedback styles with additional HTML and CSS.\n• You may provide custom validity messages with in JavaScript.\n\nWith that in mind, consider the following demos for our custom form validation styles, optional server-side classes, and browser defaults.\n\nFor custom Bootstrap form validation messages, you’ll need to add the boolean attribute to your . This disables the browser default feedback tooltips, but still provides access to the form validation APIs in JavaScript. Try to submit the form below; our JavaScript will intercept the submit button and relay feedback to you. When attempting to submit, you’ll see the and styles applied to your form controls.\n\nCustom feedback styles apply custom colors, borders, focus styles, and background icons to better communicate feedback. Background icons for s are only available with , and not .\n\nNot interested in custom validation feedback messages or writing JavaScript to change form behaviors? All good, you can use the browser defaults. Try submitting the form below. Depending on your browser and OS, you’ll see a slightly different style of feedback.\n\nWhile these feedback styles cannot be styled with CSS, you can still customize the feedback text through JavaScript.\n\nWe recommend using client-side validation, but in case you require server-side validation, you can indicate invalid and valid form fields with and . Note that is also supported with these classes.\n\nFor invalid fields, ensure that the invalid feedback/error message is associated with the relevant form field using (noting that this attribute allows more than one to be referenced, in case the field already points to additional form text).\n\nTo fix issues with border radii, input groups require an additional class.\n\nValidation styles are available for the following form controls and components:\n• s and s with (including up to one in input groups)\n\nIf your form layout allows it, you can swap the classes for classes to display validation feedback in a styled tooltip. Be sure to have a parent with on it for tooltip positioning. In the example below, our column classes have this already, but your project may require an alternative setup.\n\nTwo mixins are combined together, through our loop, to generate our form validation feedback styles.\n\nThis is the validation Sass map from . Override or extend this to generate different or additional states.\n\nMaps of can contain three optional parameters to override tooltips and focus styles.\n\nUsed to iterate over map values to generate our validation styles. Any modifications to the above Sass map will be reflected in your compiled CSS via this loop.\n\nValidation states can be customized via Sass with the map. Located in our file, this Sass map is how we generate the default / validation states. Included is a nested map for customizing each state’s color, icon, tooltip color, and focus shadow. While no other states are supported by browsers, those using custom styles can easily add more complex form feedback.\n\nPlease note that we do not recommend customizing values without also modifying the mixin."
    },
    {
        "link": "https://w3schools.com/bootstrap5/bootstrap_form_validation.php",
        "document": "You can use different validation classes to provide valuable feedback to users. Add either or to the element, depending on whether you want to provide validation feedback before or after submitting the form. The input fields will have a green (valid) or red (invalid) border to indicate what's missing in the form. You can also add a or message to tell the user explicitly what's missing, or needs to be done before submitting the form."
    },
    {
        "link": "https://getbootstrap.com/docs/5.0/forms/overview",
        "document": "Examples and usage guidelines for form control styles, layout options, and custom components for creating a wide variety of forms.\n\nBootstrap’s form controls expand on our Rebooted form styles with classes. Use these classes to opt into their customized displays for a more consistent rendering across browsers and devices.\n\nBe sure to use an appropriate attribute on all inputs (e.g., for email address or for numerical information) to take advantage of newer input controls like email verification, number selection, and more.\n\nHere’s a quick example to demonstrate Bootstrap’s form styles. Keep reading for documentation on required classes, form layout, and more.\n\nBlock-level or inline-level form text can be created using .\n\nForm text below inputs can be styled with . If a block-level element will be used, a top margin is added for easy spacing from the inputs above.\n\nInline text can use any typical inline HTML element (be it a , , or something else) with nothing more than the class.\n\nAdd the boolean attribute on an input to prevent user interactions and make it appear lighter.\n\nAdd the attribute to a to disable all the controls within. Browsers treat all native form controls ( , , and elements) inside a as disabled, preventing both keyboard and mouse interactions on them.\n\nHowever, if your form also includes custom button-like elements such as , these will only be given a style of , meaning they are still focusable and operable using the keyboard. In this case, you must manually modify these controls by adding to prevent them from receiving focus and to signal their state to assistive technologies.\n\nEnsure that all form controls have an appropriate accessible name so that their purpose can be conveyed to users of assistive technologies. The simplest way to achieve this is to use a element, or—in the case of buttons—to include sufficiently descriptive text as part of the content.\n\nFor situations where it’s not possible to include a visible or appropriate text content, there are alternative ways of still providing an accessible name, such as:\n• Pointing to an existing element that can act as a label using\n• Explicitly setting the accessible name on an element using\n\nIf none of these are present, assistive technologies may resort to using the attribute as a fallback for the accessible name on and elements. The examples in this section provide a few suggested, case-specific approaches.\n\nWhile using visually hidden content ( , , and even content, which disappears once a form field has content) will benefit assistive technology users, a lack of visible label text may still be problematic for certain users. Some form of visible label is generally the best approach, both for accessibility and usability.\n\nMany form variables are set at a general level to be re-used and extended by individual form components. You’ll see these most often as and variables.\n\nvariables are shared global variables between our buttons and our form components. You’ll find these frequently reassigned as values to other component-specific variables."
    }
]