[
    {
        "link": "https://docs.unity.com",
        "document": "Docs and guides to work with the Unity ecosystem."
    },
    {
        "link": "https://docs.unity3d.com/2023.1/Documentation/Manual/index.html",
        "document": "Use the Unity Editor to create 2D and 3D games, apps, and experiences. Download the Editor at unity3d.com.\n\nThe Unity User Manual helps you learn how to use the Unity Editor and its associated services. You can read it from start to finish, or use it as a reference.\n\nIf it’s your first time using Unity, take a look at the introductory documentation on Working with Unity, and see the Unity Tutorials.\n\nAll of the Unity Editor’s 2D-specific features including gameplay, spritesA 2D graphic objects. If you are used to working in 3D, Sprites are essentially just standard textures but there are special techniques for combining and managing sprite textures for efficiency and convenience during development. More info\n\nSee in Glossary and physics.\n\nThe visual aspects of the Unity Editor including camerasA component which creates an image of a particular viewpoint in your scene. The output is either drawn to the screen or captured as a texture. More info\n\nSee in Glossary and lighting.\n\nSimulation of 3D motion, mass, gravity and collisionsA collision occurs when the physics engine detects that the colliders of two GameObjects make contact or overlap, when at least one has a Rigidbody component and is in motion. More info\n\nSee in Glossary.\n• None Unity Answers or Unity Forums - here you can ask questions and search answers.\n• None The Unity Knowledge Base - a collection of answers to questions posed to Unity’s Support teams.\n• None Tutorials - step by step video and written guides to using the Unity Editor.\n• None Asset Store help - help on Asset StoreA growing library of free and commercial assets created by Unity and members of the community. Offers a wide variety of assets, from textures, models and animations to whole project examples, tutorials and Editor extensions. More info\n\nSee in Glossary content sharing.\n\nIs a feature not working as you expect it to? It might be an existing Known Issue. Please check using the Issue Tracker at issuetracker.unity3d.com."
    },
    {
        "link": "https://discussions.unity.com/t/how-to-learn-c-for-unity/936408",
        "document": ""
    },
    {
        "link": "https://learn.unity.com/pathway/junior-programmer",
        "document": "Ready to code? This guided learning Pathway will take you from zero to job-ready!\n\nWelcome to Junior Programmer! Designed for anyone interested in learning to code or obtaining an entry-level Unity role, this pathway assumes a basic knowledge of Unity and has no math prerequisites. Junior Programmer prepares you to get Unity Certified so that you can demonstrate your job-readiness to employers.\n\nWe recommend that you have basic knowledge of Unity or complete Unity Essentials before starting this pathway.\n• None Improve simple code using the features of an IDE\n• None Create a portfolio, enabling you to pursue a job in real-time development\n• None Simplify code and make it reusable by correctly implementing the principles of inheritance and polymorphism\n• None Make code more secure and usable by correctly implementing the principles of abstraction and encapsulation, including the use of interfaces\n• None Write efficient, organized, and comprehensible code by correctly implementing the principles of object-oriented programming\n• None Create the scene flow in an application state\n• None Control the execution of code with common logic structures\n• None Write code that integrates into an existing system\n• None Cultivate a code style that is efficient and easy to read\n• None Diagnose and fix code that compiles, but fails to perform as expected\n• None Diagnose and fix the cause of an exception\n\nAfter completing this pathway, you will have the skills needed to qualify for the jobs linked below."
    },
    {
        "link": "https://udemy.com/course/unity-c-sharp-scripting?srsltid=AfmBOooTPYLMyi7nPxAUXs8RQPdhBYAj6n7SMiuqSFpLg99QvnWSq3b4",
        "document": "This Course will Teach You everything that you need to get started with C# scripting in Unity. You will learn step by step from scratch every feature of the C# language as well as how to implement it in Unity's API for building Games. All The Content works fine in Unity 6, Unity 2023, 2022 and older versions.\n\nList of Things You Will Learn:\n• None Create Ready To Use C# Scripts\n• None Apply Your C# Skills for Building Android / Mobile Games\n\nI have taught C# Scripting to thousands of people on my Youtube Channel: Charger Games. I love teaching complex concepts in a simple way, so even if you have no previous coding experience, no need to worry, I'm gonna teach you everything step by step in the perfect order.\n\nLearn the basic concepts, tools, and functions that you will need to build fully functional Games with C# and the Unity game engine.\n\nBuild a strong foundation in C# Scripting and Unity Game Development with this course.\n• None Get Started With C# programming\n• None Take Your C# Skills to the next level\n\nA Powerful Skill at Your Fingertips Learning the fundamentals of C# Scripting in Unity puts a powerful and very useful tool at your fingertips. Unity is free, easy to learn, has excellent documentation, and is the game engine used for building games.\n\nJobs in unity game development are plentiful, and being able to learn C# Scripting along with Unity game development will give you a strong background to more easily build awesome games.\n\nContent and Overview Suitable for beginning programmers, through this course of 100+ lectures and 20+ hours of content, you’ll learn all of the Unity C# Scripting fundamentals and establish a strong understanding of the concept behind C# programming. Each chapter closes with quizes, putting your new learned skills into practical use immediately.\n\nStarting with the installation of the Unity , Visual Studio , this course will take you through various C# language features and how to use them. By creating example C# Scripts, you’ll a establish a strong understanding of unity game development.\n\nWith these basics mastered, the course will take you through building different example games with unity to learn more about the process of creating mobile android games with unity.\n\nStudents completing the course will have the knowledge to create fully functional Games with C# or use their C# skills to Build any other useful thing that they want.\n\nComplete with working files, you’ll be able to work alongside the author as you work through each concept, and will receive a verifiable certificate of completion upon finishing the course."
    },
    {
        "link": "https://forums.unrealengine.com/t/best-practices-for-3d-asset-modeling-suggestions/6847",
        "document": ""
    },
    {
        "link": "https://dev.epicgames.com/documentation/en-us/unreal-engine/asset-management-in-unreal-engine",
        "document": ""
    },
    {
        "link": "https://reddit.com/r/unrealengine/comments/1j7z3aa/best_practices_for_organizing_assets_in_unreal",
        "document": "Hi everyone, I want to create a game using Unreal Engine, but before diving in, I want to organize my assets properly.\n\nFor example, I plan to have a Foliage folder with subfolders for Trees, Grass, and Ivy. Inside the Trees folder, I would further categorize assets into Short Trees, Flowers, and Houseplants, ensuring everything is neatly arranged.\n\nMy question is: Will structuring my assets this way have any impact on the game's performance or cause memory issues for players, Like for having too many subfolders loading time?"
    },
    {
        "link": "https://reddit.com/r/unrealengine/comments/jx77xj/my_personal_best_practices_for_unreal_engine",
        "document": "I'm the owner of a small indie game studio in Brazil and been working with Unreal Engine for 6 years now (since its public release in 2014) and I feel there is some general knowledge I've earned since then that I think it's worth sharing with you all.\n\nThis isn't supposed to be 'official best practices', but instead, some personal practices that proved to be successful to me, my team, and the projects I've worked on.\n\nThe items are displayed in no particular order. Also, the complexity of them is mixed, ranging from beginners to more advanced users.\n• Prefer Interfaces over Casting. Oftentimes we Cast an actor or component to the type we need in order to access its methods, but casting isn't only more expensive in terms of performance than Interfaces, but also it gets annoying and exhaustive to implement. Give Interfaces a try and you won't go back.\n• Use Components to share behavior. This might be one of my favorites. Pretty much, we rely too much on inheritance in order to share behavior among actors. Inheriting isn't necessarily wrong, but let's say your game has two types of Actors that Apply damage: turrets and characters. In this case, you could create a component called \"Damager\" and add it to the two Actors. Boom! The two Actors are applying damage without having to worry about who they inherit from.\n• Hide non-customizable properties of your Objects. When your Actors or Components have variables, you have the ability to hide them from the \"Details Pane\". Just click the variable you want to hide and look for the \"Advanced Display\" property they expose and check it. After that, you'll no longer see this variable visible in the Details Pane when tweaking that Actor or Component, or any other object. [1]\n• Stop \"Blueprint spaghetti\" by automatically aligning the wires. You created an awesome Blueprint full of nodes out and about. But it looks like a mess because of the wires. One thing that quickly improves this situation is by selecting two connected nodes and pressing \"Q\". [2]\n• Avoid storing persisted state in Components. This is more tied to games that allow players to save. No matter what plug-in you use or if you came up with your own saving technique/solution, persisting variables of Components can be a burden because most of the time you have to recreate the Component before loading the game and re-add the saved properties against them. Instead, prefer storing your persisted variables such as HP, Money, etc, in your Actors.\n• Use Box Collision over Sphere or Capsule whenever you can. 99% of the time you want colliders in your Actors, you don't need them to be Sphere or Capsule. Use Box instead. It has fewer polygons, thus requiring less from your GPU/CPU to existing. Although your eyes don't see these colliders in-game, they're there and your computer is aware of them. Of course, this is not what separates a well-optimized game from a clunky game, but is something.\n• Use Math Expressions to describe your math formulas. Do you know when you have those complicated calculations that spin around lots of variables and do lots of things? Well, you can describe those as you'd in the paper! Simply right-click your Blueprint's grid and type \"Add math expression\" [3] and click on the option that showed up. Then, write your formula [4] as you'd on paper and connect the dots [5]!\n• Use Tags! Unreal Engine provides an underrated built-in functionality called 'Tags' for almost every Object in your game. Just go to your Object details/defaults (by clicking the 'Class Defaults at the top of the Editor) and search for 'Tags' and an Array will show up. Click the \"plus\" button and start tagging it. [6] This is useful for when you need to cheaply and quickly specify what that Actor represents. Let's say you have a \"Treasure\" in your game that will glow when a Character gets close to it. Then you put a Collider in this Treasure, but you want it only to glow if it's a Character. So instead of getting the Actor that collided and casting it to check whether is a Character, you can just lookup for the tags of it and check if the tag 'Character' is in there [7]. Easier, cleaner, and cheaper (performance-wise).\n• Don't abuse Event Tick. This is quite a cliché, I know, but it's serious business. Event Tick is the lazy solution for most of your problems. Let's say you want to do something when your Character jumps. Instead of putting an \"if\" in your Event Tick to check whether the variable \"Is Jumping\" is true, prefer to create an Event Dispatcher called \"OnCharacterJumpStart\" (or whatever you like) when you hit the button to jump. Then, at the Object (Actor, Component, etc) you want to do something about the jump, \"Bind\" this event at someplace like BeginPlay. Now you're free from an exhaustive and clumsy Event Tick functionality. Although this example is pretty shallow for the given subject and we could go waaaay deeper, all that I'm saying is that most of the time you can avoid Event Tick by only being creative.\n• Choose SetTimerByEvent instead of Event Tick whenever you can. Event Tick runs on every frame of your GPU. I won't get deep into the math, but as a rule of thumb, if you need something to run at intervals greater than 0.01s, prefer `SetTimerByEvent`. 'Say you want something to run every 0.5s, go with SetTimerByEvent.\n• Use Lists! I'm pretty sure you're used to Arrays, right? You know, that \"type\" of data that stores various elements of the same item. Well, what if you could have an unsorted Array, but with \"named\" elements? To give you an example, 'say you are creating a multiplayer game and want to have a list of connected players. Instead of using an Array, you could use a List. Pretty much, every value you store in this List requires a unique \"key\", meaning it's harder for you to have duplicates, you can also easily and safely remove things from this List, as well as finding something on it is a breeze -- no more ForEachLoopWithBreak! In the example mentioned, you can have as a key the PlayerId as the key, and the value, a PlayerController. Want to remove a specific Player from this List? Alright, having the PlayerId in hands, just use the \"Remove\" method the List exposes and pass the key. Done. To create a variable of type List, simply click your variable, look up for the `Variable Type` property and select a primitive type (such as Integer, Float, String, etc.). Then click the small capsule after the type (where you click to make a variable an Array) and choose the very last option of it [8]. Last but not least, the more you use Lists, the more you see its benefits. So go ahead and play with them and you won't regret!\n• Don't pass actors in your Replicated Events (or RPCs). If you're creating a multiplayer game, you might be used to create Events that replicate. This to exchange data from your server to your clients and vice-versa. My advice here would be: don't exchange Actors. This is costly and directly impacts latency. If you send an Actor from your Client to your Server or vice-versa, prefer to exchange primitive data, such as Strings, Floats, Integers, etc. These types of data are way cheaper than an entire actor, not to mention this way enforces you to be more reliable on your implementations, improving data integrity among your sources (client and server). But hey, how do I tell the server I've changed these things, at this specific Actor? IDs! Create and keep unique IDs in your Actors, so when exchanging data, specify the ID of the Actor you want to change and then specify what to change.\n• Use SetGlobalTimeDilation to create neat effects. Do you know when you're playing that game that when you die or kill something, everything goes in slow motion? Well, this is one of the ways you do it. That's all that I have to say. Go ahead and play with it and see how magical tweaking this function might be. (Just go into any Actor, right-click the empty Blueprint grid and look for \"SetGlobalTimeDilation\".)\n• Package your game often. This is one of the things I put on the \"I wish I knew this earlier\" shelf. Those of you that are already familiar with Unreal and already packed something to distribute to production or even to your friends probably faced the nightmare that is a huge pile of errors when building that you don't see at development time. The longer you wait to package, the higher are the chances for you to have more and more packaging errors. So package often, fix the issues often, and stay clean and safe.\n• CTRL+SHIFT+F to find whatever you need. I've seen several YouTube videos as well as friends of mine trying to look up things buried in their code in the most non-optimal way, like by opening Blueprint by Blueprint, trying to find that method or variable, to only then change something. Just open any Blueprint and press CTRL+SHIFT+F and an \"Explorer\" window will show, prompting you to enter a text. This text is what you want to search, and the search will be performed against your entire codebase. Easy peasy, lemon squeezy.\n\nPhew, that's it! I have to say that I have much more to share, but time is against me right now. Later on, through a comment or through another post, I'd like to bring more to the table.\n\nNow, tell us what you think. Comment what are YOUR good practices, what you think I'm doing wrong, or anything that can sum up, and last but least, I really hope you enjoyed this ride so far. Cheers!"
    },
    {
        "link": "https://anchorpoint.app/blog/how-to-properly-reorganize-your-unreal-engine-project-structure",
        "document": "How to setup Multi User Editing in Unreal Engine 5.5 over the Internet\n\nLearn more about Unreal Multi-User Editing, how to use it with version control and how to set it up over the LAN and Internet."
    }
]