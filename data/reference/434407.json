[
    {
        "link": "https://samtools.github.io/bcftools/bcftools.html",
        "document": "The following options are common to many bcftools commands. See usage for specific commands to see if they apply. Files can be both VCF or BCF, uncompressed or BGZF-compressed. The file \"-\" is interpreted as standard input. Some tools may require tabix- or CSI-indexed files. Controls how to treat records with duplicate positions and defines compatible records across multiple input files. Here by \"compatible\" we mean records which should be considered as identical by the tools. For example, when performing line intersections, the desire may be to consider as identical all sites with matching positions (bcftools isec -c all), or only sites with matching variant type (bcftools isec -c snps -c indels), or only sites with all alleles identical (bcftools isec -c none). only records with identical REF and ALT alleles are compatible only records where some subset of ALT alleles match are compatible all records are compatible, regardless of whether the ALT alleles match or not. In the case of records with the same position, only the first will be considered and appear on output. any SNP records are compatible, regardless of whether the ALT alleles match or not. For duplicate positions, only the first SNP record will be considered and appear on output. all indel records are compatible, regardless of whether the REF and ALT alleles match or not. For duplicate positions, only the first indel record will be considered and appear on output. abbreviation of \"-c indels -c snps\" only records with identical ID column are compatible. Skip sites where FILTER column does not contain any of the strings listed in LIST. For example, to include only sites which have no filters set, use -f .,PASS. Do not append version and command line information to the output VCF header. When output consists of a single stream, write it to FILE rather than to standard output, where it is written by default. The file type is determined automatically from the file name suffix and in case a conflicting -O option is given, the file name suffix takes precedence. Output compressed BCF (b), uncompressed BCF (u), compressed VCF (z), uncompressed VCF (v). Use the -Ou option when piping between bcftools subcommands to speed up performance by removing unnecessary compression/decompression and VCF←→BCF conversion. The compression level of the compressed formats (b and z) can be set by by appending a number between 0-9. Comma-separated list of regions, see also -R, --regions-file. Overlapping records are matched even when the starting coordinate is outside of the region, unlike the -t/-T options where only the POS coordinate is checked. Note that -r cannot be used in combination with -R. Regions can be specified either on command line or in a VCF, BED, or tab-delimited file (the default). The columns of the tab-delimited file can contain either positions (two-column format: CHROM, POS) or intervals (three-column format: CHROM, BEG, END), but not both. Positions are 1-based and inclusive. The columns of the tab-delimited BED file are also CHROM, POS and END (trailing columns are ignored), but coordinates are 0-based, half-open. To indicate that a file be treated as BED rather than the 1-based tab-delimited file, the file must have the \".bed\" or \".bed.gz\" suffix (case-insensitive). Uncompressed files are stored in memory, while bgzip-compressed and tabix-indexed region files are streamed. Note that sequence names must match exactly, \"chr20\" is not the same as \"20\". Also note that chromosome ordering in FILE will be respected, the VCF will be processed in the order in which chromosomes first appear in FILE. However, within chromosomes, the VCF will always be processed in ascending genomic coordinate order no matter what order they appear in FILE. Note that overlapping regions in FILE can result in duplicated out of order positions in the output. This option requires indexed VCF/BCF files. Note that -R cannot be used in combination with -r. This option controls how overlapping records are determined: set to pos or 0 if the VCF record has to have POS inside a region (this corresponds to the default behavior of -t/-T); set to record or 1 if also overlapping records with POS outside a region should be included (this is the default behavior of -r/-R, and includes indels with POS at the end of a region, which are technically outside the region); or set to variant or 2 to include only true overlapping variation (compare the full VCF representation \" \" vs the true sequence variation \" \"). Comma-separated list of samples to include or exclude if prefixed with \"^.\" (Note that when multiple samples are to be excluded, the \"^\" prefix is still present only once, e.g. \"^SAMPLE1,SAMPLE2\".) The sample order is updated to reflect that given on the command line. Note that in general tags such as INFO/AC, INFO/AN, etc are not updated to correspond to the subset samples. bcftools view is the exception where some tags will be updated (unless the -I, --no-update option is used; see bcftools view documentation). To use updated tags for the subset in another command one can pipe from view into that command. For example: File of sample names to include or exclude if prefixed with \"^\". One sample per line. See also the note above for the -s, --samples option. The sample order is updated to reflect that given in the input file. The command bcftools call accepts an optional second column indicating ploidy (0, 1 or 2) or sex (as defined by --ploidy, for example \"F\" or \"M\"), for example: If the second column is not present, the sex \"F\" is assumed. With bcftools call -C trio, PED file is expected. The program ignores the first column and the last indicates sex (1=male, 2=female), for example: Similar as -r, --regions, but the next position is accessed by streaming the whole VCF/BCF rather than using the tbi/csi index. Both -r and -t options can be applied simultaneously: -r uses the index to jump to a region and -t discards positions which are not in the targets. Unlike -r, targets can be prefixed with \"^\" to request logical complement. For example, \"^X,Y,MT\" indicates that sequences X, Y and MT should be skipped. Yet another difference between the -t/-T and -r/-R is that -r/-R checks for proper overlaps and considers both POS and the end position of an indel, while -t/-T considers the POS coordinate only (by default; see also --regions-overlap and --targets-overlap). Note that -t cannot be used in combination with -T. Same -t, --targets, but reads regions from a file. Note that -T cannot be used in combination with -t. With the call -C alleles command, third column of the targets file must be comma-separated list of alleles, starting with the reference allele. Note that the file must be compressed and indexed. Such a file can be easily created from a VCF using: Same as --regions-overlap but for -t/-T. Use multithreading with INT worker threads. The option is currently used only for the compression of the output stream, only when --output-type is b or z. Default: 0. Automatically index the output files. FMT is optional and can be one of \"tbi\" or \"csi\" depending on output file format. Defaults to CSI unless specified otherwise. Can be used only for compressed BCF and VCF output.\n\nBgzip-compressed and tabix-indexed file with annotations. The file can be VCF, BED, or a tab-delimited file with mandatory columns CHROM, POS (or, alternatively, FROM and TO), optional columns REF and ALT, and arbitrary number of annotation columns. BED files are expected to have the \".bed\" or \".bed.gz\" suffix (case-insensitive), otherwise a tab-delimited file is assumed. Note that in case of tab-delimited file, the coordinates POS, FROM and TO are one-based and inclusive. When REF and ALT are present, only matching VCF records will be annotated. If the END coordinate is present in the annotation file and given on command line as \" \", then VCF records will be matched also by the INFO/END coordinate. If ID is present in the annotation file and given as \" \", then VCF records will be matched also by the ID column. \n\n \n\n When multiple ALT alleles are present in the annotation file (given as comma-separated list of alleles), at least one must match one of the alleles in the corresponding VCF record. Similarly, at least one alternate allele from a multi-allelic VCF record must be present in the annotation file. \n\n \n\n Missing values can be added by providing \".\" in place of actual value and using the missing value modifier with -c, such as \".TAG\". \n\n \n\n Note that flag types, such as \"INFO/FLAG\", can be annotated by including a field with the value \"1\" to set the flag, \"0\" to remove it, or \".\" to keep existing flags. See also -c, --columns and -h, --header-lines. Comma-separated list of columns or tags to carry over from the annotation file (see also -a, --annotations). If the annotation file is not a VCF/BCF, list describes the columns of the annotation file and must include CHROM, POS (or, alternatively, FROM,TO or BEG,END), and optionally REF and ALT. Unused columns which should be ignored can be indicated by \"-\". \n\n \n\n If the annotation file is a VCF/BCF, only the edited columns/tags must be present and their order does not matter. The columns ID, QUAL, FILTER, INFO and FORMAT can be edited, where INFO tags can be written both as \"INFO/TAG\" or simply \"TAG\", and FORMAT tags can be written as \"FORMAT/TAG\" or \"FMT/TAG\". The imported VCF annotations can be renamed as \"DST_TAG:=SRC_TAG\" or \"FMT/DST_TAG:=FMT/SRC_TAG\". \n\n \n\n To carry over all INFO annotations, use \"INFO\". To add all INFO annotations except \"TAG\", use \"^INFO/TAG\". By default, existing values are replaced. \n\n \n\n By default, existing tags are overwritten unless the source value is a missing value (i.e. \".\"). If also missing values should be carried over (and overwrite existing tags), use \".TAG\" instead of \"TAG\". To add annotations without overwriting existing values (that is, to add tags that are absent or to add values to existing tags with missing values), use \"+TAG\" instead of \"TAG\". These can be combined, for example \".+TAG\" can be used to add TAG even if the source value is missing but only if TAG does not exist in the target file; existing tags will not be overwritten. To append to existing values (rather than replacing or leaving untouched), use \"=TAG\" (instead of \"TAG\" or \"+TAG\"). To replace only existing values without modifying missing annotations, use \"-TAG\". As a special case of this, if position needs to be replaced, mark the column with the new coordinate as \"-POS\". (Note that in previous releases this used to be \"~POS\", now deprecated.) \n\n \n\n To match the record also by ID or INFO/END, in addition to REF and ALT, use \"~ID\" or \"~INFO/END\". Note that this works only for ID and POS, for other fields see the description of -i below. \n\n \n\n If the annotation file is not a VCF/BCF, all new annotations must be defined via -h, --header-lines. \n\n \n\n See also the -l, --merge-logic option. \n\n \n\n Summary of : CHROM,POS,TAG .. match by chromosome and position, transfer annotation from TAG CHROM,POS,-,TAG .. same as above, but ignore the third column of the annotation file CHROM,BEG,END,TAG .. match by region (BEG,END are synonymous to FROM,TO) CHROM,POS,REF,ALT .. match by CHROM, POS, REF and ALT DST_TAG:=SRC_TAG .. transfer the SRC_TAG using the new name DST_TAG INFO .. transfer all INFO annotations ^INFO/TAG .. transfer all INFO annotations except \"TAG\" TAG .. add or overwrite existing target value if source is not \".\" and skip otherwise +TAG .. add or overwrite existing target value only if it is \".\" .TAG .. add or overwrite existing target value even if source is \".\" .+TAG .. add new but never overwrite existing tag, regardless of its value; can transfer \".\" if target does not exist -TAG .. overwrite existing value, never add new if target does not exist =TAG .. do not overwrite but append value to existing tags ~FIELD .. use this column to match lines with -i/-e expression (see the description of -i below) ~ID .. in addition to CHROM,POS,REF,ALT match by also ID ~INFO/END .. in addition to CHROM,POS,REF,ALT match by also INFO/END Read the list of columns from a file (normally given via the -c, --columns option). \"-\" to skip a column of the annotation file. One column name per row, an additional space- or tab-separated field can be present to indicate the merge logic (normally given via the -l, --merge-logic option). This is useful when many annotations are added at once. exclude sites for which EXPRESSION is true. For valid expressions see EXPRESSIONS and the extension described in -i, --include below. continue even when parsing errors, such as undefined tags, are encountered. Note this can be an unsafe operation and can result in corrupted BCF files. If this option is used, make sure to sanity check the result thoroughly. Lines to append to the VCF header, see also -c, --columns and -a, --annotations. For example: assign ID on the fly. The format is the same as in the query command (see below). By default all existing IDs are replaced. If the format string is preceded by \"+\", only missing IDs will be set. For example, one can use include only sites for which EXPRESSION is true. For valid expressions see EXPRESSIONS. \n\n \n\n Additionally, the command bcftools annotate supports expressions updated from the annotation file dynamically for each record: # The field 'STR' from the -a file is required to match INFO/TAG in VCF. In the first example # the alleles REF,ALT must match, in the second example they are ignored. The option -k is required # to output also records that are not annotated. The third example shows the same concept with # a numerical expression. bcftools annotate -a annots.tsv.gz -c CHROM,POS,REF,ALT,SCORE,~STR -i'TAG={STR}' -k input.vcf bcftools annotate -a annots.tsv.gz -c CHROM,POS,-,-,SCORE,~STR -i'TAG={STR}' -k input.vcf bcftools annotate -a annots.tsv.gz -c CHROM,POS,-,-,SCORE,~INT -i'TAG>{INT}' -k input.vcf keep sites which do not pass -i and -e expressions instead of discarding them When multiple regions overlap a single record, this option defines how to treat multiple annotation values when setting tag in the destination file: use the first encountered value ignoring the rest (first); append allowing duplicates (append); append even if the appended value is missing, i.e. is a dot (append-missing); append discarding duplicate values (unique); sum the values (sum, numeric fields only); average the values (avg); use the minimum value (min) or the maximum (max). + Note that this option is intended for use with BED or TAB-delimited annotation files only. Moreover, it is effective only when either REF and ALT or BEG and END --columns are present . + Multiple rules can be given either as a comma-separated list or giving the option multiple times. This is an experimental feature. annotate sites which are present (\"+\") or absent (\"-\") in the -a file with a new INFO/TAG flag minimum overlap required as a fraction of the variant in the annotation -a file (ANN), in the target VCF file (:VCF), or both for reciprocal overlap (ANN:VCF). By default overlaps of arbitrary length are sufficient. The option can be used only with the tab-delimited annotation -a file and with BEG and END columns present. Controls how to match records from the annotation file to the target VCF. Effective only when -a is a VCF or BCF. The option replaces the former uninuitive --collapse. See Common Options for more. rename annotations according to the map in file, with \"old_name new_name\n\n\" pairs separated by whitespaces, each on a separate line. The old name must be prefixed with the annotation type: INFO, FORMAT, or FILTER. rename chromosomes according to the map in file, with \"old_name new_name\n\n\" pairs separated by whitespaces, each on a separate line. subset of samples to annotate, see also Common Options subset of samples to annotate. If the samples are named differently in the target VCF and the -a, --annotations VCF, the name mapping can be given as \"src_name dst_name\n\n\", separated by whitespaces, each pair on a separate line. use this option to keep memory requirements low with very large annotation files. Note, however, that this comes at a cost, only single overlapping intervals are considered in this mode. This was the default mode until the commit af6f0c9 (Feb 24 2019). List of annotations to remove. Use \"FILTER\" to remove all filters or \"FILTER/SomeFilter\" to remove a specific filter. Similarly, \"INFO\" can be used to remove all INFO tags and \"FORMAT\" to remove all FORMAT tags except GT. To remove all INFO tags except \"FOO\" and \"BAR\", use \"^INFO/FOO,INFO/BAR\" (and similarly for FORMAT and FILTER). \"INFO\" can be abbreviated to \"INF\" and \"FORMAT\" to \"FMT\". Automatically index the output file. FMT is optional and can be one of \"tbi\" or \"csi\" depending on output file format. # Remove three fields bcftools annotate -x ID,INFO/DP,FORMAT/DP file.vcf.gz # Remove all INFO fields and all FORMAT fields except for GT and PL bcftools annotate -x INFO,^FORMAT/GT,FORMAT/PL file.vcf # Add ID, QUAL and INFO/TAG, not replacing TAG if already present bcftools annotate -a src.bcf -c ID,QUAL,+TAG dst.bcf # Carry over all INFO and FORMAT annotations except FORMAT/GT bcftools annotate -a src.bcf -c INFO,^FORMAT/GT dst.bcf # Annotate from a tab-delimited file with six columns (the fifth is ignored), # first indexing with tabix. The coordinates are 1-based. tabix -s1 -b2 -e2 annots.tab.gz bcftools annotate -a annots.tab.gz -h annots.hdr -c CHROM,POS,REF,ALT,-,TAG file.vcf # Annotate from a tab-delimited file with regions (1-based coordinates, inclusive) tabix -s1 -b2 -e3 annots.tab.gz bcftools annotate -a annots.tab.gz -h annots.hdr -c CHROM,FROM,TO,TAG input.vcf # Annotate from a bed file (0-based coordinates, half-closed, half-open intervals) bcftools annotate -a annots.bed.gz -h annots.hdr -c CHROM,FROM,TO,TAG input.vcf # Transfer the INFO/END tag, matching by POS,REF,ALT and ID. This example assumes # that INFO/END is already present in the VCF header. bcftools annotate -a annots.tab.gz -c CHROM,POS,~ID,REF,ALT,INFO/END input.vcf # For (many) more examples see http://samtools.github.io/bcftools/howtos/annotate.html\n\nHaplotype aware consequence predictor which correctly handles combined variants such as MNPs split over multiple VCF records, SNPs separated by an intron (but adjacent in the spliced transcript) or nearby frame-shifting indels which in combination in fact are not frame-shifting. The output VCF is annotated with INFO/BCSQ and FORMAT/BCSQ tag (configurable with the -c option). The latter is a bitmask of indexes to INFO/BCSQ, with interleaved haplotypes. See the usage examples below for using the %TBCSQ converter in query for extracting a more human readable form from this bitmask. The construction of the bitmask limits the number of consequences that can be referenced per sample in the FORMAT/BCSQ tags. By default this is 15, but if more are required, see the --ncsq option. Note that the program annotates only records with a functional consequence and intergenic regions will pass through unchanged. The program requires on input a VCF/BCF file, the reference genome in fasta format (--fasta-ref) and genomic features in the GFF3 format downloadable from the Ensembl website (--gff-annot), and outputs an annotated VCF/BCF file. Currently, only Ensembl GFF3 files are supported. By default, the input VCF should be phased. If phase is unknown, or only partially known, the --phase option can be used to indicate how to handle unphased data. Alternatively, haplotype aware calling can be turned off with the --local-csq option. If conflicting (overlapping) variants within one haplotype are detected, a warning will be emitted and predictions will be based on only the first variant in the analysis. Symbolic alleles are not supported. They will remain unannotated in the output VCF and are ignored for the prediction analysis. use this custom tag to store consequences rather than the default BCSQ tag abbreviate protein-changing predictions to maximum of INT aminoacids. For example, instead of writing the whole modified protein sequence with potentially hundreds of aminoacids, with -B 1 only an abbreviated version such as 25E..329>25G..94 will be written. dump the parsed GFF into a gzipped FILE. Intended for debugging purposes, shows how is the input GFF viewed by the program. exclude sites for which EXPRESSION is true. For valid expressions see EXPRESSIONS. run even if some sanity checks fail. Currently the option enables skipping transcripts in malformatted GFFs with incorrect phase GFF3 annotation file (required), such as http://ftp.ensembl.org/pub/current_gff3/homo_sapiens/. The script gff2gff can help with conversion from non-standard GFF formats. An example of a minimal working GFF file: # The program looks for \"CDS\", \"exon\", \"three_prime_UTR\" and \"five_prime_UTR\" lines, # looks up their parent transcript (determined from the \"Parent=transcript:\" attribute), # the gene (determined from the transcript's \"Parent=gene:\" attribute), and the biotype # (the most interesting is \"protein_coding\"). # # Empty and commented lines are skipped, the following GFF columns are required # 1. chromosome # 2. IGNORED # 3. type (CDS, exon, three_prime_UTR, five_prime_UTR, gene, transcript, etc.) # 4. start of the feature (1-based) # 5. end of the feature (1-based) # 6. IGNORED # 7. strand (+ or -) # 8. phase (0, 1, 2 or .) # 9. semicolon-separated attributes (see below) # # Attributes required for # gene lines: # - ID=gene:<gene_id> # - biotype=<biotype> # - Name=<gene_name> [optional] # # transcript lines: # - ID=transcript:<transcript_id> # - Parent=gene:<gene_id> # - biotype=<biotype> # # other lines (CDS, exon, five_prime_UTR, three_prime_UTR): # - Parent=transcript:<transcript_id> # # Supported biotypes: # - see the function gff_parse_biotype() in bcftools/csq.c 1 ignored_field gene 21 2148 . - . ID=gene:GeneId;biotype=protein_coding;Name=GeneName 1 ignored_field transcript 21 2148 . - . ID=transcript:TranscriptId;Parent=gene:GeneId;biotype=protein_coding 1 ignored_field three_prime_UTR 21 2054 . - . Parent=transcript:TranscriptId 1 ignored_field exon 21 2148 . - . Parent=transcript:TranscriptId 1 ignored_field CDS 21 2148 . - 1 Parent=transcript:TranscriptId 1 ignored_field five_prime_UTR 210 2148 . - . Parent=transcript:TranscriptId include only sites for which EXPRESSION is true. For valid expressions see EXPRESSIONS. switch off haplotype-aware calling, run localized predictions considering only one VCF record at a time maximum number of per-haplotype consequences to consider for each site. The INFO/BCSQ column includes all consequences, but only the first INT will be referenced by the FORMAT/BCSQ fields. The default value is 15 which corresponds to one 32-bit integer per diploid sample, after accounting for values reserved by the BCF specification. Note that increasing the value leads to increased size of the output BCF. see Common Options. In addition, a custom tab-delimited plain text output can be printed (t). take GTs as is, create haplotypes regardless of phase (0/1 → 0|1) samples to include or \"-\" to apply all variants and ignore samples Automatically detect and unify chromosome naming conventions in the GFF, fasta and VCF, such as \"chrX\" vs \"X\". The chromosome names in the output VCF will match that of the input VCF. The default is to attempt the automatic translation. Automatically index the output file. FMT is optional and can be one of \"tbi\" or \"csi\" depending on output file format. # Basic usage bcftools csq -f hs37d5.fa -g Homo_sapiens.GRCh37.82.gff3.gz in.vcf -Ob -o out.bcf # Extract the translated haplotype consequences. The following TBCSQ variations # are recognised: # %TBCSQ .. print consequences in all haplotypes in separate columns # %TBCSQ{0} .. print the first haplotype only # %TBCSQ{1} .. print the second haplotype only # %TBCSQ{*} .. print a list of unique consequences present in either haplotype bcftools query -f'[%CHROM\\t%POS\\t%SAMPLE\\t%TBCSQ\n\n]' out.bcf # Two separate VCF records at positions 2:122106101 and 2:122106102 # change the same codon. This UV-induced C>T dinucleotide mutation # has been annotated fully at the position 2:122106101 with # - consequence type # - gene name # - ensembl transcript ID # - coding strand (+ fwd, - rev) # - amino acid position (in the coding strand orientation) # - list of corresponding VCF variants # The annotation at the second position gives the position of the full # annotation BCSQ=missense|CLASP1|ENST00000545861|-|1174P>1174L|122106101G>A+122106102G>A BCSQ=@122106101 # A frame-restoring combination of two frameshift insertions C>CG and T>TGG BCSQ=@46115084 BCSQ=inframe_insertion|COPZ2|ENST00000006101|-|18AGRGP>18AQAGGP|46115072C>CG+46115084T>TGG # Stop gained variant BCSQ=stop_gained|C2orf83|ENST00000264387|-|141W>141*|228476140C>T # The consequence type of a variant downstream from a stop are prefixed with * BCSQ=*missense|PER3|ENST00000361923|+|1028M>1028T|7890117T>C\n\nGenerate VCF or BCF containing genotype likelihoods for one or multiple alignment (BAM or CRAM) files. This is based on the original samtools mpileup command (with the -v or -g options) producing genotype likelihoods in VCF or BCF format, but not the textual pileup output. The mpileup command was transferred to bcftools in order to avoid errors resulting from use of incompatible versions of samtools and bcftools when using in the mpileup+bcftools call pipeline. Individuals are identified from the SM tags in the @RG header lines. Multiple individuals can be pooled in one alignment file, also one individual can be separated into multiple files. If sample identifiers are absent, each input file is regarded as one sample. Note that there are two orthogonal ways to specify locations in the input file; via -r region and -t positions. The former uses (and requires) an index to do random access while the latter streams through the file contents filtering out the specified regions, requiring no index. The two may be used in conjunction. For example a BED file containing locations of genes in chromosome 20 could be specified using -r 20 -t chr20.bed, meaning that the index is used to find chromosome 20 and then it is filtered for the regions listed in the BED file. Also note that the -r option can be much slower than -t with many regions and can require more memory when multiple regions and many alignment files are processed. Assume the quality is in the Illumina 1.3+ encoding. Include anomalous read pairs in variant calling, i.e. reads with flag PAIRED but not PROPER_PAIR set. By default such reads are discarded. List of input alignment files, one file per line [null] Disable probabilistic realignment for the computation of base alignment quality (BAQ). BAQ is the Phred-scaled probability of a read base being misaligned. Applying this option greatly helps to reduce false SNPs caused by misalignments. Coefficient for downgrading mapping quality for reads containing excessive mismatches. Mismatches are counted as a proportion of the number of aligned bases (\"M\", \"X\" or \"=\" CIGAR operations), along with their quality, to derive an upper-bound of the mapping quality. Original mapping qualities lower than this are left intact, while higher ones are capped at the new adjusted score. The exact formula is complex and likely tuned to specific instruments and specific alignment tools, so this option is disabled by default (indicated as having a zero value). Variables in the formulae and their meaning are defined below. Variable Meaning / formula M The number of matching CIGAR bases (operation \"M\", \"X\" or \"=\"). X The number of substitutions with quality >= 13. SubQ The summed quality of substitution bases included in X, capped at a maximum of quality 33 per mismatching base. ClipQ The summed quality of soft-clipped or hard-clipped bases. This has no minimum or maximum quality threshold per base. For hard-clipped bases the per-base quality is taken as 13. T SubQ - 10 * log10(M^X / X!) + ClipQ/5 Cap MAX(0, INT * sqrt((INT - T) / INT)) Some notes on the impact of this.\n• As the number of mismatches increases, the mapping quality cap reduces, eventually resulting in discarded alignments.\n• The starting INT value also acts as a hard cap on mapping quality, even when zero mismatches are observed.\n• Indels have no impact on the mapping quality. The intent of this option is to work around aligners that compute a mapping quality using a local alignment without having any regard to the degree of clipping required or consideration of potential contamination or large scale insertions with respect to the reference. A record may align uniquely and have no close second match, but having a high number of mismatches may still imply that the reference is not the correct site. However we do not recommend use of this parameter unless you fully understand the impact of it and have determined that it is appropriate for your sequencing technology. Run the BAQ algorithm on all reads, not just those in problematic regions. This matches the behaviour for Bcftools 1.12 and earlier. By default mpileup uses heuristics to decide when to apply the BAQ algorithm. Most sequences will not be BAQ adjusted, giving a CPU time closer to --no-BAQ, but it will still be applied in regions with suspected problematic alignments. This has been tested to work well on single sample data with even allele frequency, but the reliability is unknown for multi-sample calling and for low allele frequency variants so full BAQ is still recommended in those scenarios. At a position, read maximally INT reads per input file. Note that the original samtools mpileup command had a minimum value of 8000/n where n was the number of input files given to mpileup. This means that in samtools mpileup the default was highly likely to be increased and the -d parameter would have an effect only once above the cross-sample minimum of 8000. This behavior was problematic when working with a combination of single- and multi-sample bams, therefore in bcftools mpileup the user is given the full control (and responsibility), and an informative message is printed instead [250] The faidx-indexed reference file in the FASTA format. The file can be optionally compressed by bgzip. Reference is required by default unless the --no-reference option is set [null] Do not require the --fasta-ref option. list of read groups to include or exclude if prefixed with \"^\". One read group per line. This file can also be used to assign new sample names to read groups by giving the new sample name as a second white-space-separated field, like this: \"read_group_id new_sample_name\". If the read group name is not unique, also the bam file name can be included: \"read_group_id file_name sample_name\". If all reads from the alignment file should be treated as a single sample, the asterisk symbol can be used: \"* file_name sample_name\". Alignments without a read group ID can be matched with \"?\". NOTE: The meaning of bcftools mpileup -G is the opposite of samtools mpileup -G. A new EXPERIMENTAL indel calling model which aims to address some known deficiencies of the current indel calling algorithm. Specifically, it uses diploid reference consensus sequence. Note that in the current version it has the potential to increase sensitivity but at the cost of decreased specificity. Only works with short-read sequencing technologies. Another EXPERIMENTAL indel calling method, predating indels-2.0 in PR form, but merged more recently. It also uses a diploid reference consensus, but with added parameters and heuristics to optimise for a variety of sequencing platforms. This is usually faster and more accurate than the default caller and --indels-2.0, but has not been tested on non-diploid samples and samples without approximately even allele frequency. May be used to turn off --indels-cns mode when using one of the newer profiles that has this enabled by default. Minimum mapping quality for an alignment to be used [0] Minimum base quality for a base to be considered [13] Caps the base quality to a maximum value [60]. This can be particularly useful on technologies that produce overly optimistic high qualities, leading to too many false positives or incorrect genotype assignments. Only generate mpileup output in given regions. Requires the alignment files to be indexed. If used in conjunction with -l then considers the intersection; see Common Options As for -r, --regions, but regions read from FILE; see Common Options Ignore RG tags. Treat all reads in one alignment file as one sample. Skip reads with all of the FLAG bits set [null] Skip reads with any of the FLAG bits set. This option replaces and is synonymous to the deprecated --ff, --excl-flags [UNMAP,SECONDARY,QCFAIL,DUP] Skip reads with all of the FLAG bits unset. This option replaces and is synonymous to the deprecated --rf, --incl-flags [null] Skip reads with any of the FLAG bits unset [null] file of sample names to include or exclude if prefixed with \"^\". One sample per line. This file can also be used to rename samples by giving the new sample name as a second white-space-separated column, like this: \"old_name new_name\". If a sample name contains spaces, the spaces can be escaped using the backslash character, for example \"Not\\ a\\ good\\ sample\\ name\". Set the random number seed used when sub-sampling deep regions [0]. Comma-separated list of FORMAT and INFO tags to output. (case-insensitive, the \"FORMAT/\" prefix is optional, and use \"?\" to list available annotations on the command line) [null]: FORMAT/AD .. Allelic depth (Number=R,Type=Integer) FORMAT/ADF .. Allelic depths on the forward strand (Number=R,Type=Integer) FORMAT/ADR .. Allelic depths on the reverse strand (Number=R,Type=Integer) FORMAT/DP .. Number of high-quality bases (Number=1,Type=Integer) FORMAT/SP .. Phred-scaled strand bias P-value (Number=1,Type=Integer) FORMAT/SCR .. Number of soft-clipped reads (Number=1,Type=Integer) INFO/AD .. Total allelic depth (Number=R,Type=Integer) INFO/ADF .. Total allelic depths on the forward strand (Number=R,Type=Integer) INFO/ADR .. Total allelic depths on the reverse strand (Number=R,Type=Integer) INFO/SCR .. Number of soft-clipped reads (Number=1,Type=Integer) FORMAT/DV .. Deprecated in favor of FORMAT/AD; Number of high-quality non-reference bases, (Number=1,Type=Integer) FORMAT/DP4 .. Deprecated in favor of FORMAT/ADF and FORMAT/ADR; Number of high-quality ref-forward, ref-reverse, alt-forward and alt-reverse bases (Number=4,Type=Integer) FORMAT/DPR .. Deprecated in favor of FORMAT/AD; Number of high-quality bases for each observed allele (Number=R,Type=Integer) INFO/DPR .. Deprecated in favor of INFO/AD; Number of high-quality bases for each observed allele (Number=R,Type=Integer) output gVCF blocks of homozygous REF calls, with depth (DP) ranges specified by the list of integers. For example, passing 5,15 will group sites into two types of gVCF blocks, the first with minimum per-sample DP from the interval [5,15) and the latter with minimum depth 15 or more. In this example, sites with minimum per-sample depth less than 5 will be printed as separate records, outside of gVCF blocks. Write output to FILE, rather than the default of standard output. (The same short option is used for both --open-prob and --output. If -o's argument contains any non-digit characters other than a leading + or - sign, it is interpreted as --output. Usually the filename extension will take care of this, but to write to an entirely numeric filename use -o ./123 or --output 123.) The the previous Mann-Whitney U test score from version 1.12 and earlier. This is a probability score, but importantly it folds probabilities above or below the desired score into the same P. The new Mann-Whitney U test score is a \"Z score\", expressing the score as the number of standard deviations away from the mean (with zero being matching the mean). It keeps both positive and negative values. This can be important for some tests where errors are asymmetric. This option changes the INFO field names produced back to the ones used by the earlier Bcftools releases. For excample BQBZ becomes BQB. Automatically index the output file. FMT is optional and can be one of \"tbi\" or \"csi\" depending on output file format. Specify a platform specific configuration profile. Specifying the profile as \"list\" will list the available profile names and the parameters they change. There are profiles named after a release, which should be used if you wish to ensure forward compatibility of results. The non-versioned names (eg \"illumina\") will always point to the most recent set of parameters for that instrument type. The current values are: What to do with ambiguous indel reads that do not span an entire short tandem repeat region: discard ambiguous reads from calling and do not increment high-quality AD depth counters (drop), exclude from calling but increment AD counters proportionally (incAD), exclude from calling and increment the first value of the AD counter (incAD0) [drop] Coefficient for modeling homopolymer errors. Given an l-long homopolymer run, the sequencing error of an indel of size s is modeled as INT*s/l [500] Increasing this informs the caller that indels in long homopolymers are more likely genuine and less likely to be sequencing artifacts. Hence increasing tandem-qual will have higher recall and lower precision. Bcftools 1.12 and earlier had a default of 100, which was tuned around more error prone instruments. Note changing this may have a minor impact on SNP calling too. For maximum SNP calling accuracy, it may be preferable to adjust this lower again, although this will adversely affect indels. Skews the indel scores up or down, trading recall (low false-negative) vs precision (low false-positive) [1.0]. In Bcftools 1.12 and earlier this parameter didn’t exist, but had an implied value of 1.0. If you are planning to do heavy filtering of variants, selecting the best quality ones only (favouring precision over recall), it is advisable to set this lower (such as 0.75) while higher depth samples or where you favour recall rates over precision may work better with a higher value such as 2.0. Skews the likelihood of deletions over insertions. Defaults to an even distribution value of 1.0. Lower values imply a higher rate of false positive deletions (meaning candidate deletions are less likely to be real). Indel window size to use when assessing the quality of candidate indels. Note that although the window size approximately corresponds to the maximum indel size considered, it is not an exact threshold [110] Tunes the importance of indel sequence quality per depth. The final \"seqQ\" quality used is \"offset - 5*MIN(depth,20)\". [120] Use the lowest quality value within a homopolymer run, instead of the quality immediately adjacent to the indel. This may be important for unclocked instruments, particularly ones with a flow chemistry where runs of bases of identical type are incorporated together. Skip INDEL calling if the average per-sample depth is above INT [250] The maximum read length permitted by the BAQ algorithm [500]. Variants are still called on longer reads, but they will not be passed through the BAQ method. This limit exists to prevent excessively long BAQ times and high memory usage. Note if partial BAQ is enabled with -D then raising this parameter will likely not have a significant a CPU cost. Phred-scaled gap open sequencing error probability. Reducing INT leads to more indel calls. (The same short option is used for both --open-prob and --output. When -o’s argument contains only an optional + or - sign followed by the digits 0 to 9, it is interpreted as --open-prob.) [40] Apply -m and -F thresholds per sample to increase sensitivity of calling. By default both options are applied to reads pooled from all samples. Comma-delimited list of platforms (determined by @RG-PL) from which indel candidates are obtained. It is recommended to collect indel candidates from sequencing technologies that have low indel error rate such as ILLUMINA [all] Call SNPs and short INDELs, then mark low quality sites and sites with the read depth exceeding a limit. (The read depth should be adjusted to about twice the average read depth as higher read depths usually indicate problematic regions which are often enriched for artefacts.) One may consider to add -C50 to mpileup if mapping quality is overestimated for reads containing excessive mismatches. Applying this option usually helps for BWA-backtrack alignments, but may not other aligners.\n\nView, subset and filter VCF or BCF files by position and filtering expression. Convert between VCF and BCF. Former bcftools subset. drop individual genotype information (after subsetting if -s option is set) output the VCF header only (see also bcftools head) output both VCF header and records (this is the default, but the option is useful for explicitness or to reset the effects of -h or -H) compression level. 0 stands for uncompressed, 1 for best speed and 9 for best compression. -o, --output FILE: output file name. If not present, the default is to print to standard output (stdout). Automatically index the output file. FMT is optional and can be one of \"tbi\" or \"csi\" depending on output file format. remove the unseen allele <*> or <NON_REF> at variant sites when the option is given once (-A) or at all sites when the options is given twice (-AA). remove alleles not seen in the genotype fields from the ALT column. Note that if no alternate allele remains after trimming, the record itself is not removed but ALT is set to \".\". If the option -s or -S is given, removes alleles not seen in the subset. INFO and FORMAT tags declared as Type=A, G or R will be trimmed as well. do not (re)calculate INFO fields for the subset (currently INFO/AC and INFO/AN) see Common Options. Note that it is possible to create multiple subsets simultaneously using the split plugin. see Common Options. Note that it is possible to create multiple subsets simultaneously using the split plugin. Note that filter options below dealing with counting the number of alleles will, for speed, first check for the values of AC and AN in the INFO column to avoid parsing all the genotype (FORMAT/GT) fields in the VCF. This means that filters like --uncalled, --exclude-uncalled', or --min-af 0.1 will be calculated from INFO/AC and INFO/AN when available or FORMAT/GT otherwise. However, it will not attempt to use any other existing field, like INFO/AF for example. For that, use --exclude AF<0.1 instead. Also note that one must be careful when sample subsetting and filtering is performed in a single command because the order of internal operations can influence the result. For example, the -i/-e filtering is performed before sample removal, but the -P filtering is performed after, and some are inherently ambiguous, for example allele counts can be taken from the INFO column when present but calculated on the fly when absent. Therefore it is strongly recommended to spell out the required order explicitly by separating such commands into two steps. (Make sure to use the -O u option when piping!) minimum allele count (INFO/AC) of sites to be printed. Specifying the type of allele is optional and can be set to non-reference (nref, the default), 1st alternate (alt1), the least frequent (minor), the most frequent (major) or sum of all but the most frequent (nonmajor) alleles. maximum allele count (INFO/AC) of sites to be printed. Specifying the type of allele is optional and can be set to non-reference (nref, the default), 1st alternate (alt1), the least frequent (minor), the most frequent (major) or sum of all but the most frequent (nonmajor) alleles. exclude sites for which EXPRESSION is true. For valid expressions see EXPRESSIONS. include only sites with one or more homozygous (hom), heterozygous (het) or missing (miss) genotypes. When prefixed with ^, the logic is reversed; thus ^het excludes sites with heterozygous genotypes. include sites for which EXPRESSION is true. For valid expressions see EXPRESSIONS. print known sites only (ID column is not \".\") print sites with at least INT alleles listed in REF and ALT columns print sites with at most INT alleles listed in REF and ALT columns. Use -m2 -M2 -v snps to only view biallelic SNPs. print novel sites only (ID column is \".\") print sites where all samples are phased. Haploid genotypes are considered phased. Missing genotypes considered unphased unless the phased bit is set. exclude sites where all samples are phased minimum allele frequency (INFO/AC / INFO/AN) of sites to be printed. Specifying the type of allele is optional and can be set to non-reference (nref, the default), 1st alternate (alt1), the least frequent (minor), the most frequent (major) or sum of all but the most frequent (nonmajor) alleles. maximum allele frequency (INFO/AC / INFO/AN) of sites to be printed. Specifying the type of allele is optional and can be set to non-reference (nref, the default), 1st alternate (alt1), the least frequent (minor), the most frequent (major) or sum of all but the most frequent (nonmajor) alleles. print sites without a called genotype, i.e. print sites with all genotypes missing. Note that the missingness is determined from INFO/AN and AC tags when available to avoid parsing sample fields. exclude sites without a called genotype, i.e. print sites with at least one non-missing genotype. Note that the missingness is determined from INFO/AN and AC tags when available to avoid parsing sample fields. comma-separated list of variant types to select. Site is selected if any of the ALT alleles is of the type requested. Types are determined by comparing the REF and ALT alleles in the VCF record not INFO tags like INFO/INDEL or INFO/VT. Use --include to select based on INFO tags. comma-separated list of variant types to exclude. Site is excluded if any of the ALT alleles is of the type requested. Types are determined by comparing the REF and ALT alleles in the VCF record not INFO tags like INFO/INDEL or INFO/VT. Use --exclude to exclude based on INFO tags. print sites where only the subset samples carry an non-reference allele. Requires --samples or --samples-file. exclude sites where only the subset samples carry an non-reference allele"
    },
    {
        "link": "https://samtools.github.io/bcftools/howtos/query.html",
        "document": "The versatile command can be used to extract any VCF field. Combined with standard UNIX commands, this gives a powerful tool for quick querying of VCFs.\n\nBelow is a list of some of the most common tasks with explanation how it works. For a full list of options, see the manual page.\n\nIn this example, the option defines the output format. The string indicates that for each VCF line we want the POS column printed. The stands for a newline character, a notation commonly used in the world of computer programming. Any characters without a special meaning will be passed as is, so for example see this command and its output below:\n\nHere the character precedes the command we typed on the command line and below is the actual output that was printed. The part limited the output to the first three lines.\n\nAssuming the INFO/AF tag is present, we can refer to it using or, if unambiguous, using :\n\nIf AF annotation is not present but AN and AC are, we can compute the frequencies on the fly:\n\nBecause the AC tag can have multiple comma-separated values, we select the first one using the subscript . The outputs the first two fields unchanged and computes the fraction using the third and fourth.\n\nFORMAT tags can be extracted using the square brackets operator, which loops over all samples. For example, to print the GT field followed by PL field we can write:\n\nHere we used the tab character instead of space for a change. If we wanted to print GTs for all samples first followed by PLs for all samples rather than mixing the two types as above, we could write two bracket operators instead:\n\nWe welcome your feedback, please help us improve this page by either opening an issue on github or editing it directly and sending a pull request."
    },
    {
        "link": "http://htslib.org/doc/bcftools.html",
        "document": ""
    },
    {
        "link": "https://github.com/samtools/bcftools/issues/1631",
        "document": "When reading a sample file to list the samples in a VCF, the code calls function:\n\nThere is a missing check for the sample file to have correctly open. This line is missing after calling function :\n\nwhich can cause the code to segfault if the file is missing.\n\nSlightly related, it seems like and have support for exclusion with \"^\" prefix, this is not fully supported. As an example, this is code in :\n\nWhile this is code in :\n\nand this is code :\n\nBoth snippets of code do not take the possibility of exclusion into account.\n\nThis leads to inconsistent behavior, as shown in the following example:\n\nWith the last command producing no output (and potentially yielding a segfault).\n\nAlso the following behavior is slightly inconsistent: does not have the option as does but the behavior is not consistent:"
    },
    {
        "link": "https://biocomputix.com/post/bcftools-query-tutorial-examples",
        "document": "What is the bcftools query command?\n\nWhat are the command options for the bcftools query?\n\nTutorial: The most common examples of how to use bcftools query\n\nHow to list samples / IDs from the VCF file using the bcftools query command?\n\nHow to create a BED file using the bcftools query command?\n\nHow to select specific VCF columns and INFO and FORMAT fields?\n\nHow to quickly count the number of genetic variants in a VCF file?\n\nHow to select specific VCF columns and filter out rows based on the specific genomic region?\n\nHow to use the header option of the bcftools query command?\n\nHow to use the –allow-undef-tags option of the bcftools query command? \n\n\n\nHow to apply the filtering (include/exclude) parameter of the bcftools query command?\n\nHow to make bcftools query for a specific set of samples?\n\nAll the different types of filtering options introduced in previous examples such as selecting specific fields using the -f option, selecting for the specific genomic regions using the -r, and applying inclusion or exclusion criteria using the -i or -e parameter, can also be combined with -s samples parameter where the list of specific samples is provided for which bcftools query needs to be applied or providing the list of specific samples in the form of a file using -S sample file parameter. Here is an example below for one of the previous examples:"
    },
    {
        "link": "https://samtools.github.io/bcftools/bcftools.html",
        "document": "The following options are common to many bcftools commands. See usage for specific commands to see if they apply. Files can be both VCF or BCF, uncompressed or BGZF-compressed. The file \"-\" is interpreted as standard input. Some tools may require tabix- or CSI-indexed files. Controls how to treat records with duplicate positions and defines compatible records across multiple input files. Here by \"compatible\" we mean records which should be considered as identical by the tools. For example, when performing line intersections, the desire may be to consider as identical all sites with matching positions (bcftools isec -c all), or only sites with matching variant type (bcftools isec -c snps -c indels), or only sites with all alleles identical (bcftools isec -c none). only records with identical REF and ALT alleles are compatible only records where some subset of ALT alleles match are compatible all records are compatible, regardless of whether the ALT alleles match or not. In the case of records with the same position, only the first will be considered and appear on output. any SNP records are compatible, regardless of whether the ALT alleles match or not. For duplicate positions, only the first SNP record will be considered and appear on output. all indel records are compatible, regardless of whether the REF and ALT alleles match or not. For duplicate positions, only the first indel record will be considered and appear on output. abbreviation of \"-c indels -c snps\" only records with identical ID column are compatible. Skip sites where FILTER column does not contain any of the strings listed in LIST. For example, to include only sites which have no filters set, use -f .,PASS. Do not append version and command line information to the output VCF header. When output consists of a single stream, write it to FILE rather than to standard output, where it is written by default. The file type is determined automatically from the file name suffix and in case a conflicting -O option is given, the file name suffix takes precedence. Output compressed BCF (b), uncompressed BCF (u), compressed VCF (z), uncompressed VCF (v). Use the -Ou option when piping between bcftools subcommands to speed up performance by removing unnecessary compression/decompression and VCF←→BCF conversion. The compression level of the compressed formats (b and z) can be set by by appending a number between 0-9. Comma-separated list of regions, see also -R, --regions-file. Overlapping records are matched even when the starting coordinate is outside of the region, unlike the -t/-T options where only the POS coordinate is checked. Note that -r cannot be used in combination with -R. Regions can be specified either on command line or in a VCF, BED, or tab-delimited file (the default). The columns of the tab-delimited file can contain either positions (two-column format: CHROM, POS) or intervals (three-column format: CHROM, BEG, END), but not both. Positions are 1-based and inclusive. The columns of the tab-delimited BED file are also CHROM, POS and END (trailing columns are ignored), but coordinates are 0-based, half-open. To indicate that a file be treated as BED rather than the 1-based tab-delimited file, the file must have the \".bed\" or \".bed.gz\" suffix (case-insensitive). Uncompressed files are stored in memory, while bgzip-compressed and tabix-indexed region files are streamed. Note that sequence names must match exactly, \"chr20\" is not the same as \"20\". Also note that chromosome ordering in FILE will be respected, the VCF will be processed in the order in which chromosomes first appear in FILE. However, within chromosomes, the VCF will always be processed in ascending genomic coordinate order no matter what order they appear in FILE. Note that overlapping regions in FILE can result in duplicated out of order positions in the output. This option requires indexed VCF/BCF files. Note that -R cannot be used in combination with -r. This option controls how overlapping records are determined: set to pos or 0 if the VCF record has to have POS inside a region (this corresponds to the default behavior of -t/-T); set to record or 1 if also overlapping records with POS outside a region should be included (this is the default behavior of -r/-R, and includes indels with POS at the end of a region, which are technically outside the region); or set to variant or 2 to include only true overlapping variation (compare the full VCF representation \" \" vs the true sequence variation \" \"). Comma-separated list of samples to include or exclude if prefixed with \"^.\" (Note that when multiple samples are to be excluded, the \"^\" prefix is still present only once, e.g. \"^SAMPLE1,SAMPLE2\".) The sample order is updated to reflect that given on the command line. Note that in general tags such as INFO/AC, INFO/AN, etc are not updated to correspond to the subset samples. bcftools view is the exception where some tags will be updated (unless the -I, --no-update option is used; see bcftools view documentation). To use updated tags for the subset in another command one can pipe from view into that command. For example: File of sample names to include or exclude if prefixed with \"^\". One sample per line. See also the note above for the -s, --samples option. The sample order is updated to reflect that given in the input file. The command bcftools call accepts an optional second column indicating ploidy (0, 1 or 2) or sex (as defined by --ploidy, for example \"F\" or \"M\"), for example: If the second column is not present, the sex \"F\" is assumed. With bcftools call -C trio, PED file is expected. The program ignores the first column and the last indicates sex (1=male, 2=female), for example: Similar as -r, --regions, but the next position is accessed by streaming the whole VCF/BCF rather than using the tbi/csi index. Both -r and -t options can be applied simultaneously: -r uses the index to jump to a region and -t discards positions which are not in the targets. Unlike -r, targets can be prefixed with \"^\" to request logical complement. For example, \"^X,Y,MT\" indicates that sequences X, Y and MT should be skipped. Yet another difference between the -t/-T and -r/-R is that -r/-R checks for proper overlaps and considers both POS and the end position of an indel, while -t/-T considers the POS coordinate only (by default; see also --regions-overlap and --targets-overlap). Note that -t cannot be used in combination with -T. Same -t, --targets, but reads regions from a file. Note that -T cannot be used in combination with -t. With the call -C alleles command, third column of the targets file must be comma-separated list of alleles, starting with the reference allele. Note that the file must be compressed and indexed. Such a file can be easily created from a VCF using: Same as --regions-overlap but for -t/-T. Use multithreading with INT worker threads. The option is currently used only for the compression of the output stream, only when --output-type is b or z. Default: 0. Automatically index the output files. FMT is optional and can be one of \"tbi\" or \"csi\" depending on output file format. Defaults to CSI unless specified otherwise. Can be used only for compressed BCF and VCF output.\n\nBgzip-compressed and tabix-indexed file with annotations. The file can be VCF, BED, or a tab-delimited file with mandatory columns CHROM, POS (or, alternatively, FROM and TO), optional columns REF and ALT, and arbitrary number of annotation columns. BED files are expected to have the \".bed\" or \".bed.gz\" suffix (case-insensitive), otherwise a tab-delimited file is assumed. Note that in case of tab-delimited file, the coordinates POS, FROM and TO are one-based and inclusive. When REF and ALT are present, only matching VCF records will be annotated. If the END coordinate is present in the annotation file and given on command line as \" \", then VCF records will be matched also by the INFO/END coordinate. If ID is present in the annotation file and given as \" \", then VCF records will be matched also by the ID column. \n\n \n\n When multiple ALT alleles are present in the annotation file (given as comma-separated list of alleles), at least one must match one of the alleles in the corresponding VCF record. Similarly, at least one alternate allele from a multi-allelic VCF record must be present in the annotation file. \n\n \n\n Missing values can be added by providing \".\" in place of actual value and using the missing value modifier with -c, such as \".TAG\". \n\n \n\n Note that flag types, such as \"INFO/FLAG\", can be annotated by including a field with the value \"1\" to set the flag, \"0\" to remove it, or \".\" to keep existing flags. See also -c, --columns and -h, --header-lines. Comma-separated list of columns or tags to carry over from the annotation file (see also -a, --annotations). If the annotation file is not a VCF/BCF, list describes the columns of the annotation file and must include CHROM, POS (or, alternatively, FROM,TO or BEG,END), and optionally REF and ALT. Unused columns which should be ignored can be indicated by \"-\". \n\n \n\n If the annotation file is a VCF/BCF, only the edited columns/tags must be present and their order does not matter. The columns ID, QUAL, FILTER, INFO and FORMAT can be edited, where INFO tags can be written both as \"INFO/TAG\" or simply \"TAG\", and FORMAT tags can be written as \"FORMAT/TAG\" or \"FMT/TAG\". The imported VCF annotations can be renamed as \"DST_TAG:=SRC_TAG\" or \"FMT/DST_TAG:=FMT/SRC_TAG\". \n\n \n\n To carry over all INFO annotations, use \"INFO\". To add all INFO annotations except \"TAG\", use \"^INFO/TAG\". By default, existing values are replaced. \n\n \n\n By default, existing tags are overwritten unless the source value is a missing value (i.e. \".\"). If also missing values should be carried over (and overwrite existing tags), use \".TAG\" instead of \"TAG\". To add annotations without overwriting existing values (that is, to add tags that are absent or to add values to existing tags with missing values), use \"+TAG\" instead of \"TAG\". These can be combined, for example \".+TAG\" can be used to add TAG even if the source value is missing but only if TAG does not exist in the target file; existing tags will not be overwritten. To append to existing values (rather than replacing or leaving untouched), use \"=TAG\" (instead of \"TAG\" or \"+TAG\"). To replace only existing values without modifying missing annotations, use \"-TAG\". As a special case of this, if position needs to be replaced, mark the column with the new coordinate as \"-POS\". (Note that in previous releases this used to be \"~POS\", now deprecated.) \n\n \n\n To match the record also by ID or INFO/END, in addition to REF and ALT, use \"~ID\" or \"~INFO/END\". Note that this works only for ID and POS, for other fields see the description of -i below. \n\n \n\n If the annotation file is not a VCF/BCF, all new annotations must be defined via -h, --header-lines. \n\n \n\n See also the -l, --merge-logic option. \n\n \n\n Summary of : CHROM,POS,TAG .. match by chromosome and position, transfer annotation from TAG CHROM,POS,-,TAG .. same as above, but ignore the third column of the annotation file CHROM,BEG,END,TAG .. match by region (BEG,END are synonymous to FROM,TO) CHROM,POS,REF,ALT .. match by CHROM, POS, REF and ALT DST_TAG:=SRC_TAG .. transfer the SRC_TAG using the new name DST_TAG INFO .. transfer all INFO annotations ^INFO/TAG .. transfer all INFO annotations except \"TAG\" TAG .. add or overwrite existing target value if source is not \".\" and skip otherwise +TAG .. add or overwrite existing target value only if it is \".\" .TAG .. add or overwrite existing target value even if source is \".\" .+TAG .. add new but never overwrite existing tag, regardless of its value; can transfer \".\" if target does not exist -TAG .. overwrite existing value, never add new if target does not exist =TAG .. do not overwrite but append value to existing tags ~FIELD .. use this column to match lines with -i/-e expression (see the description of -i below) ~ID .. in addition to CHROM,POS,REF,ALT match by also ID ~INFO/END .. in addition to CHROM,POS,REF,ALT match by also INFO/END Read the list of columns from a file (normally given via the -c, --columns option). \"-\" to skip a column of the annotation file. One column name per row, an additional space- or tab-separated field can be present to indicate the merge logic (normally given via the -l, --merge-logic option). This is useful when many annotations are added at once. exclude sites for which EXPRESSION is true. For valid expressions see EXPRESSIONS and the extension described in -i, --include below. continue even when parsing errors, such as undefined tags, are encountered. Note this can be an unsafe operation and can result in corrupted BCF files. If this option is used, make sure to sanity check the result thoroughly. Lines to append to the VCF header, see also -c, --columns and -a, --annotations. For example: assign ID on the fly. The format is the same as in the query command (see below). By default all existing IDs are replaced. If the format string is preceded by \"+\", only missing IDs will be set. For example, one can use include only sites for which EXPRESSION is true. For valid expressions see EXPRESSIONS. \n\n \n\n Additionally, the command bcftools annotate supports expressions updated from the annotation file dynamically for each record: # The field 'STR' from the -a file is required to match INFO/TAG in VCF. In the first example # the alleles REF,ALT must match, in the second example they are ignored. The option -k is required # to output also records that are not annotated. The third example shows the same concept with # a numerical expression. bcftools annotate -a annots.tsv.gz -c CHROM,POS,REF,ALT,SCORE,~STR -i'TAG={STR}' -k input.vcf bcftools annotate -a annots.tsv.gz -c CHROM,POS,-,-,SCORE,~STR -i'TAG={STR}' -k input.vcf bcftools annotate -a annots.tsv.gz -c CHROM,POS,-,-,SCORE,~INT -i'TAG>{INT}' -k input.vcf keep sites which do not pass -i and -e expressions instead of discarding them When multiple regions overlap a single record, this option defines how to treat multiple annotation values when setting tag in the destination file: use the first encountered value ignoring the rest (first); append allowing duplicates (append); append even if the appended value is missing, i.e. is a dot (append-missing); append discarding duplicate values (unique); sum the values (sum, numeric fields only); average the values (avg); use the minimum value (min) or the maximum (max). + Note that this option is intended for use with BED or TAB-delimited annotation files only. Moreover, it is effective only when either REF and ALT or BEG and END --columns are present . + Multiple rules can be given either as a comma-separated list or giving the option multiple times. This is an experimental feature. annotate sites which are present (\"+\") or absent (\"-\") in the -a file with a new INFO/TAG flag minimum overlap required as a fraction of the variant in the annotation -a file (ANN), in the target VCF file (:VCF), or both for reciprocal overlap (ANN:VCF). By default overlaps of arbitrary length are sufficient. The option can be used only with the tab-delimited annotation -a file and with BEG and END columns present. Controls how to match records from the annotation file to the target VCF. Effective only when -a is a VCF or BCF. The option replaces the former uninuitive --collapse. See Common Options for more. rename annotations according to the map in file, with \"old_name new_name\n\n\" pairs separated by whitespaces, each on a separate line. The old name must be prefixed with the annotation type: INFO, FORMAT, or FILTER. rename chromosomes according to the map in file, with \"old_name new_name\n\n\" pairs separated by whitespaces, each on a separate line. subset of samples to annotate, see also Common Options subset of samples to annotate. If the samples are named differently in the target VCF and the -a, --annotations VCF, the name mapping can be given as \"src_name dst_name\n\n\", separated by whitespaces, each pair on a separate line. use this option to keep memory requirements low with very large annotation files. Note, however, that this comes at a cost, only single overlapping intervals are considered in this mode. This was the default mode until the commit af6f0c9 (Feb 24 2019). List of annotations to remove. Use \"FILTER\" to remove all filters or \"FILTER/SomeFilter\" to remove a specific filter. Similarly, \"INFO\" can be used to remove all INFO tags and \"FORMAT\" to remove all FORMAT tags except GT. To remove all INFO tags except \"FOO\" and \"BAR\", use \"^INFO/FOO,INFO/BAR\" (and similarly for FORMAT and FILTER). \"INFO\" can be abbreviated to \"INF\" and \"FORMAT\" to \"FMT\". Automatically index the output file. FMT is optional and can be one of \"tbi\" or \"csi\" depending on output file format. # Remove three fields bcftools annotate -x ID,INFO/DP,FORMAT/DP file.vcf.gz # Remove all INFO fields and all FORMAT fields except for GT and PL bcftools annotate -x INFO,^FORMAT/GT,FORMAT/PL file.vcf # Add ID, QUAL and INFO/TAG, not replacing TAG if already present bcftools annotate -a src.bcf -c ID,QUAL,+TAG dst.bcf # Carry over all INFO and FORMAT annotations except FORMAT/GT bcftools annotate -a src.bcf -c INFO,^FORMAT/GT dst.bcf # Annotate from a tab-delimited file with six columns (the fifth is ignored), # first indexing with tabix. The coordinates are 1-based. tabix -s1 -b2 -e2 annots.tab.gz bcftools annotate -a annots.tab.gz -h annots.hdr -c CHROM,POS,REF,ALT,-,TAG file.vcf # Annotate from a tab-delimited file with regions (1-based coordinates, inclusive) tabix -s1 -b2 -e3 annots.tab.gz bcftools annotate -a annots.tab.gz -h annots.hdr -c CHROM,FROM,TO,TAG input.vcf # Annotate from a bed file (0-based coordinates, half-closed, half-open intervals) bcftools annotate -a annots.bed.gz -h annots.hdr -c CHROM,FROM,TO,TAG input.vcf # Transfer the INFO/END tag, matching by POS,REF,ALT and ID. This example assumes # that INFO/END is already present in the VCF header. bcftools annotate -a annots.tab.gz -c CHROM,POS,~ID,REF,ALT,INFO/END input.vcf # For (many) more examples see http://samtools.github.io/bcftools/howtos/annotate.html\n\nHaplotype aware consequence predictor which correctly handles combined variants such as MNPs split over multiple VCF records, SNPs separated by an intron (but adjacent in the spliced transcript) or nearby frame-shifting indels which in combination in fact are not frame-shifting. The output VCF is annotated with INFO/BCSQ and FORMAT/BCSQ tag (configurable with the -c option). The latter is a bitmask of indexes to INFO/BCSQ, with interleaved haplotypes. See the usage examples below for using the %TBCSQ converter in query for extracting a more human readable form from this bitmask. The construction of the bitmask limits the number of consequences that can be referenced per sample in the FORMAT/BCSQ tags. By default this is 15, but if more are required, see the --ncsq option. Note that the program annotates only records with a functional consequence and intergenic regions will pass through unchanged. The program requires on input a VCF/BCF file, the reference genome in fasta format (--fasta-ref) and genomic features in the GFF3 format downloadable from the Ensembl website (--gff-annot), and outputs an annotated VCF/BCF file. Currently, only Ensembl GFF3 files are supported. By default, the input VCF should be phased. If phase is unknown, or only partially known, the --phase option can be used to indicate how to handle unphased data. Alternatively, haplotype aware calling can be turned off with the --local-csq option. If conflicting (overlapping) variants within one haplotype are detected, a warning will be emitted and predictions will be based on only the first variant in the analysis. Symbolic alleles are not supported. They will remain unannotated in the output VCF and are ignored for the prediction analysis. use this custom tag to store consequences rather than the default BCSQ tag abbreviate protein-changing predictions to maximum of INT aminoacids. For example, instead of writing the whole modified protein sequence with potentially hundreds of aminoacids, with -B 1 only an abbreviated version such as 25E..329>25G..94 will be written. dump the parsed GFF into a gzipped FILE. Intended for debugging purposes, shows how is the input GFF viewed by the program. exclude sites for which EXPRESSION is true. For valid expressions see EXPRESSIONS. run even if some sanity checks fail. Currently the option enables skipping transcripts in malformatted GFFs with incorrect phase GFF3 annotation file (required), such as http://ftp.ensembl.org/pub/current_gff3/homo_sapiens/. The script gff2gff can help with conversion from non-standard GFF formats. An example of a minimal working GFF file: # The program looks for \"CDS\", \"exon\", \"three_prime_UTR\" and \"five_prime_UTR\" lines, # looks up their parent transcript (determined from the \"Parent=transcript:\" attribute), # the gene (determined from the transcript's \"Parent=gene:\" attribute), and the biotype # (the most interesting is \"protein_coding\"). # # Empty and commented lines are skipped, the following GFF columns are required # 1. chromosome # 2. IGNORED # 3. type (CDS, exon, three_prime_UTR, five_prime_UTR, gene, transcript, etc.) # 4. start of the feature (1-based) # 5. end of the feature (1-based) # 6. IGNORED # 7. strand (+ or -) # 8. phase (0, 1, 2 or .) # 9. semicolon-separated attributes (see below) # # Attributes required for # gene lines: # - ID=gene:<gene_id> # - biotype=<biotype> # - Name=<gene_name> [optional] # # transcript lines: # - ID=transcript:<transcript_id> # - Parent=gene:<gene_id> # - biotype=<biotype> # # other lines (CDS, exon, five_prime_UTR, three_prime_UTR): # - Parent=transcript:<transcript_id> # # Supported biotypes: # - see the function gff_parse_biotype() in bcftools/csq.c 1 ignored_field gene 21 2148 . - . ID=gene:GeneId;biotype=protein_coding;Name=GeneName 1 ignored_field transcript 21 2148 . - . ID=transcript:TranscriptId;Parent=gene:GeneId;biotype=protein_coding 1 ignored_field three_prime_UTR 21 2054 . - . Parent=transcript:TranscriptId 1 ignored_field exon 21 2148 . - . Parent=transcript:TranscriptId 1 ignored_field CDS 21 2148 . - 1 Parent=transcript:TranscriptId 1 ignored_field five_prime_UTR 210 2148 . - . Parent=transcript:TranscriptId include only sites for which EXPRESSION is true. For valid expressions see EXPRESSIONS. switch off haplotype-aware calling, run localized predictions considering only one VCF record at a time maximum number of per-haplotype consequences to consider for each site. The INFO/BCSQ column includes all consequences, but only the first INT will be referenced by the FORMAT/BCSQ fields. The default value is 15 which corresponds to one 32-bit integer per diploid sample, after accounting for values reserved by the BCF specification. Note that increasing the value leads to increased size of the output BCF. see Common Options. In addition, a custom tab-delimited plain text output can be printed (t). take GTs as is, create haplotypes regardless of phase (0/1 → 0|1) samples to include or \"-\" to apply all variants and ignore samples Automatically detect and unify chromosome naming conventions in the GFF, fasta and VCF, such as \"chrX\" vs \"X\". The chromosome names in the output VCF will match that of the input VCF. The default is to attempt the automatic translation. Automatically index the output file. FMT is optional and can be one of \"tbi\" or \"csi\" depending on output file format. # Basic usage bcftools csq -f hs37d5.fa -g Homo_sapiens.GRCh37.82.gff3.gz in.vcf -Ob -o out.bcf # Extract the translated haplotype consequences. The following TBCSQ variations # are recognised: # %TBCSQ .. print consequences in all haplotypes in separate columns # %TBCSQ{0} .. print the first haplotype only # %TBCSQ{1} .. print the second haplotype only # %TBCSQ{*} .. print a list of unique consequences present in either haplotype bcftools query -f'[%CHROM\\t%POS\\t%SAMPLE\\t%TBCSQ\n\n]' out.bcf # Two separate VCF records at positions 2:122106101 and 2:122106102 # change the same codon. This UV-induced C>T dinucleotide mutation # has been annotated fully at the position 2:122106101 with # - consequence type # - gene name # - ensembl transcript ID # - coding strand (+ fwd, - rev) # - amino acid position (in the coding strand orientation) # - list of corresponding VCF variants # The annotation at the second position gives the position of the full # annotation BCSQ=missense|CLASP1|ENST00000545861|-|1174P>1174L|122106101G>A+122106102G>A BCSQ=@122106101 # A frame-restoring combination of two frameshift insertions C>CG and T>TGG BCSQ=@46115084 BCSQ=inframe_insertion|COPZ2|ENST00000006101|-|18AGRGP>18AQAGGP|46115072C>CG+46115084T>TGG # Stop gained variant BCSQ=stop_gained|C2orf83|ENST00000264387|-|141W>141*|228476140C>T # The consequence type of a variant downstream from a stop are prefixed with * BCSQ=*missense|PER3|ENST00000361923|+|1028M>1028T|7890117T>C\n\nGenerate VCF or BCF containing genotype likelihoods for one or multiple alignment (BAM or CRAM) files. This is based on the original samtools mpileup command (with the -v or -g options) producing genotype likelihoods in VCF or BCF format, but not the textual pileup output. The mpileup command was transferred to bcftools in order to avoid errors resulting from use of incompatible versions of samtools and bcftools when using in the mpileup+bcftools call pipeline. Individuals are identified from the SM tags in the @RG header lines. Multiple individuals can be pooled in one alignment file, also one individual can be separated into multiple files. If sample identifiers are absent, each input file is regarded as one sample. Note that there are two orthogonal ways to specify locations in the input file; via -r region and -t positions. The former uses (and requires) an index to do random access while the latter streams through the file contents filtering out the specified regions, requiring no index. The two may be used in conjunction. For example a BED file containing locations of genes in chromosome 20 could be specified using -r 20 -t chr20.bed, meaning that the index is used to find chromosome 20 and then it is filtered for the regions listed in the BED file. Also note that the -r option can be much slower than -t with many regions and can require more memory when multiple regions and many alignment files are processed. Assume the quality is in the Illumina 1.3+ encoding. Include anomalous read pairs in variant calling, i.e. reads with flag PAIRED but not PROPER_PAIR set. By default such reads are discarded. List of input alignment files, one file per line [null] Disable probabilistic realignment for the computation of base alignment quality (BAQ). BAQ is the Phred-scaled probability of a read base being misaligned. Applying this option greatly helps to reduce false SNPs caused by misalignments. Coefficient for downgrading mapping quality for reads containing excessive mismatches. Mismatches are counted as a proportion of the number of aligned bases (\"M\", \"X\" or \"=\" CIGAR operations), along with their quality, to derive an upper-bound of the mapping quality. Original mapping qualities lower than this are left intact, while higher ones are capped at the new adjusted score. The exact formula is complex and likely tuned to specific instruments and specific alignment tools, so this option is disabled by default (indicated as having a zero value). Variables in the formulae and their meaning are defined below. Variable Meaning / formula M The number of matching CIGAR bases (operation \"M\", \"X\" or \"=\"). X The number of substitutions with quality >= 13. SubQ The summed quality of substitution bases included in X, capped at a maximum of quality 33 per mismatching base. ClipQ The summed quality of soft-clipped or hard-clipped bases. This has no minimum or maximum quality threshold per base. For hard-clipped bases the per-base quality is taken as 13. T SubQ - 10 * log10(M^X / X!) + ClipQ/5 Cap MAX(0, INT * sqrt((INT - T) / INT)) Some notes on the impact of this.\n• As the number of mismatches increases, the mapping quality cap reduces, eventually resulting in discarded alignments.\n• The starting INT value also acts as a hard cap on mapping quality, even when zero mismatches are observed.\n• Indels have no impact on the mapping quality. The intent of this option is to work around aligners that compute a mapping quality using a local alignment without having any regard to the degree of clipping required or consideration of potential contamination or large scale insertions with respect to the reference. A record may align uniquely and have no close second match, but having a high number of mismatches may still imply that the reference is not the correct site. However we do not recommend use of this parameter unless you fully understand the impact of it and have determined that it is appropriate for your sequencing technology. Run the BAQ algorithm on all reads, not just those in problematic regions. This matches the behaviour for Bcftools 1.12 and earlier. By default mpileup uses heuristics to decide when to apply the BAQ algorithm. Most sequences will not be BAQ adjusted, giving a CPU time closer to --no-BAQ, but it will still be applied in regions with suspected problematic alignments. This has been tested to work well on single sample data with even allele frequency, but the reliability is unknown for multi-sample calling and for low allele frequency variants so full BAQ is still recommended in those scenarios. At a position, read maximally INT reads per input file. Note that the original samtools mpileup command had a minimum value of 8000/n where n was the number of input files given to mpileup. This means that in samtools mpileup the default was highly likely to be increased and the -d parameter would have an effect only once above the cross-sample minimum of 8000. This behavior was problematic when working with a combination of single- and multi-sample bams, therefore in bcftools mpileup the user is given the full control (and responsibility), and an informative message is printed instead [250] The faidx-indexed reference file in the FASTA format. The file can be optionally compressed by bgzip. Reference is required by default unless the --no-reference option is set [null] Do not require the --fasta-ref option. list of read groups to include or exclude if prefixed with \"^\". One read group per line. This file can also be used to assign new sample names to read groups by giving the new sample name as a second white-space-separated field, like this: \"read_group_id new_sample_name\". If the read group name is not unique, also the bam file name can be included: \"read_group_id file_name sample_name\". If all reads from the alignment file should be treated as a single sample, the asterisk symbol can be used: \"* file_name sample_name\". Alignments without a read group ID can be matched with \"?\". NOTE: The meaning of bcftools mpileup -G is the opposite of samtools mpileup -G. A new EXPERIMENTAL indel calling model which aims to address some known deficiencies of the current indel calling algorithm. Specifically, it uses diploid reference consensus sequence. Note that in the current version it has the potential to increase sensitivity but at the cost of decreased specificity. Only works with short-read sequencing technologies. Another EXPERIMENTAL indel calling method, predating indels-2.0 in PR form, but merged more recently. It also uses a diploid reference consensus, but with added parameters and heuristics to optimise for a variety of sequencing platforms. This is usually faster and more accurate than the default caller and --indels-2.0, but has not been tested on non-diploid samples and samples without approximately even allele frequency. May be used to turn off --indels-cns mode when using one of the newer profiles that has this enabled by default. Minimum mapping quality for an alignment to be used [0] Minimum base quality for a base to be considered [13] Caps the base quality to a maximum value [60]. This can be particularly useful on technologies that produce overly optimistic high qualities, leading to too many false positives or incorrect genotype assignments. Only generate mpileup output in given regions. Requires the alignment files to be indexed. If used in conjunction with -l then considers the intersection; see Common Options As for -r, --regions, but regions read from FILE; see Common Options Ignore RG tags. Treat all reads in one alignment file as one sample. Skip reads with all of the FLAG bits set [null] Skip reads with any of the FLAG bits set. This option replaces and is synonymous to the deprecated --ff, --excl-flags [UNMAP,SECONDARY,QCFAIL,DUP] Skip reads with all of the FLAG bits unset. This option replaces and is synonymous to the deprecated --rf, --incl-flags [null] Skip reads with any of the FLAG bits unset [null] file of sample names to include or exclude if prefixed with \"^\". One sample per line. This file can also be used to rename samples by giving the new sample name as a second white-space-separated column, like this: \"old_name new_name\". If a sample name contains spaces, the spaces can be escaped using the backslash character, for example \"Not\\ a\\ good\\ sample\\ name\". Set the random number seed used when sub-sampling deep regions [0]. Comma-separated list of FORMAT and INFO tags to output. (case-insensitive, the \"FORMAT/\" prefix is optional, and use \"?\" to list available annotations on the command line) [null]: FORMAT/AD .. Allelic depth (Number=R,Type=Integer) FORMAT/ADF .. Allelic depths on the forward strand (Number=R,Type=Integer) FORMAT/ADR .. Allelic depths on the reverse strand (Number=R,Type=Integer) FORMAT/DP .. Number of high-quality bases (Number=1,Type=Integer) FORMAT/SP .. Phred-scaled strand bias P-value (Number=1,Type=Integer) FORMAT/SCR .. Number of soft-clipped reads (Number=1,Type=Integer) INFO/AD .. Total allelic depth (Number=R,Type=Integer) INFO/ADF .. Total allelic depths on the forward strand (Number=R,Type=Integer) INFO/ADR .. Total allelic depths on the reverse strand (Number=R,Type=Integer) INFO/SCR .. Number of soft-clipped reads (Number=1,Type=Integer) FORMAT/DV .. Deprecated in favor of FORMAT/AD; Number of high-quality non-reference bases, (Number=1,Type=Integer) FORMAT/DP4 .. Deprecated in favor of FORMAT/ADF and FORMAT/ADR; Number of high-quality ref-forward, ref-reverse, alt-forward and alt-reverse bases (Number=4,Type=Integer) FORMAT/DPR .. Deprecated in favor of FORMAT/AD; Number of high-quality bases for each observed allele (Number=R,Type=Integer) INFO/DPR .. Deprecated in favor of INFO/AD; Number of high-quality bases for each observed allele (Number=R,Type=Integer) output gVCF blocks of homozygous REF calls, with depth (DP) ranges specified by the list of integers. For example, passing 5,15 will group sites into two types of gVCF blocks, the first with minimum per-sample DP from the interval [5,15) and the latter with minimum depth 15 or more. In this example, sites with minimum per-sample depth less than 5 will be printed as separate records, outside of gVCF blocks. Write output to FILE, rather than the default of standard output. (The same short option is used for both --open-prob and --output. If -o's argument contains any non-digit characters other than a leading + or - sign, it is interpreted as --output. Usually the filename extension will take care of this, but to write to an entirely numeric filename use -o ./123 or --output 123.) The the previous Mann-Whitney U test score from version 1.12 and earlier. This is a probability score, but importantly it folds probabilities above or below the desired score into the same P. The new Mann-Whitney U test score is a \"Z score\", expressing the score as the number of standard deviations away from the mean (with zero being matching the mean). It keeps both positive and negative values. This can be important for some tests where errors are asymmetric. This option changes the INFO field names produced back to the ones used by the earlier Bcftools releases. For excample BQBZ becomes BQB. Automatically index the output file. FMT is optional and can be one of \"tbi\" or \"csi\" depending on output file format. Specify a platform specific configuration profile. Specifying the profile as \"list\" will list the available profile names and the parameters they change. There are profiles named after a release, which should be used if you wish to ensure forward compatibility of results. The non-versioned names (eg \"illumina\") will always point to the most recent set of parameters for that instrument type. The current values are: What to do with ambiguous indel reads that do not span an entire short tandem repeat region: discard ambiguous reads from calling and do not increment high-quality AD depth counters (drop), exclude from calling but increment AD counters proportionally (incAD), exclude from calling and increment the first value of the AD counter (incAD0) [drop] Coefficient for modeling homopolymer errors. Given an l-long homopolymer run, the sequencing error of an indel of size s is modeled as INT*s/l [500] Increasing this informs the caller that indels in long homopolymers are more likely genuine and less likely to be sequencing artifacts. Hence increasing tandem-qual will have higher recall and lower precision. Bcftools 1.12 and earlier had a default of 100, which was tuned around more error prone instruments. Note changing this may have a minor impact on SNP calling too. For maximum SNP calling accuracy, it may be preferable to adjust this lower again, although this will adversely affect indels. Skews the indel scores up or down, trading recall (low false-negative) vs precision (low false-positive) [1.0]. In Bcftools 1.12 and earlier this parameter didn’t exist, but had an implied value of 1.0. If you are planning to do heavy filtering of variants, selecting the best quality ones only (favouring precision over recall), it is advisable to set this lower (such as 0.75) while higher depth samples or where you favour recall rates over precision may work better with a higher value such as 2.0. Skews the likelihood of deletions over insertions. Defaults to an even distribution value of 1.0. Lower values imply a higher rate of false positive deletions (meaning candidate deletions are less likely to be real). Indel window size to use when assessing the quality of candidate indels. Note that although the window size approximately corresponds to the maximum indel size considered, it is not an exact threshold [110] Tunes the importance of indel sequence quality per depth. The final \"seqQ\" quality used is \"offset - 5*MIN(depth,20)\". [120] Use the lowest quality value within a homopolymer run, instead of the quality immediately adjacent to the indel. This may be important for unclocked instruments, particularly ones with a flow chemistry where runs of bases of identical type are incorporated together. Skip INDEL calling if the average per-sample depth is above INT [250] The maximum read length permitted by the BAQ algorithm [500]. Variants are still called on longer reads, but they will not be passed through the BAQ method. This limit exists to prevent excessively long BAQ times and high memory usage. Note if partial BAQ is enabled with -D then raising this parameter will likely not have a significant a CPU cost. Phred-scaled gap open sequencing error probability. Reducing INT leads to more indel calls. (The same short option is used for both --open-prob and --output. When -o’s argument contains only an optional + or - sign followed by the digits 0 to 9, it is interpreted as --open-prob.) [40] Apply -m and -F thresholds per sample to increase sensitivity of calling. By default both options are applied to reads pooled from all samples. Comma-delimited list of platforms (determined by @RG-PL) from which indel candidates are obtained. It is recommended to collect indel candidates from sequencing technologies that have low indel error rate such as ILLUMINA [all] Call SNPs and short INDELs, then mark low quality sites and sites with the read depth exceeding a limit. (The read depth should be adjusted to about twice the average read depth as higher read depths usually indicate problematic regions which are often enriched for artefacts.) One may consider to add -C50 to mpileup if mapping quality is overestimated for reads containing excessive mismatches. Applying this option usually helps for BWA-backtrack alignments, but may not other aligners.\n\nView, subset and filter VCF or BCF files by position and filtering expression. Convert between VCF and BCF. Former bcftools subset. drop individual genotype information (after subsetting if -s option is set) output the VCF header only (see also bcftools head) output both VCF header and records (this is the default, but the option is useful for explicitness or to reset the effects of -h or -H) compression level. 0 stands for uncompressed, 1 for best speed and 9 for best compression. -o, --output FILE: output file name. If not present, the default is to print to standard output (stdout). Automatically index the output file. FMT is optional and can be one of \"tbi\" or \"csi\" depending on output file format. remove the unseen allele <*> or <NON_REF> at variant sites when the option is given once (-A) or at all sites when the options is given twice (-AA). remove alleles not seen in the genotype fields from the ALT column. Note that if no alternate allele remains after trimming, the record itself is not removed but ALT is set to \".\". If the option -s or -S is given, removes alleles not seen in the subset. INFO and FORMAT tags declared as Type=A, G or R will be trimmed as well. do not (re)calculate INFO fields for the subset (currently INFO/AC and INFO/AN) see Common Options. Note that it is possible to create multiple subsets simultaneously using the split plugin. see Common Options. Note that it is possible to create multiple subsets simultaneously using the split plugin. Note that filter options below dealing with counting the number of alleles will, for speed, first check for the values of AC and AN in the INFO column to avoid parsing all the genotype (FORMAT/GT) fields in the VCF. This means that filters like --uncalled, --exclude-uncalled', or --min-af 0.1 will be calculated from INFO/AC and INFO/AN when available or FORMAT/GT otherwise. However, it will not attempt to use any other existing field, like INFO/AF for example. For that, use --exclude AF<0.1 instead. Also note that one must be careful when sample subsetting and filtering is performed in a single command because the order of internal operations can influence the result. For example, the -i/-e filtering is performed before sample removal, but the -P filtering is performed after, and some are inherently ambiguous, for example allele counts can be taken from the INFO column when present but calculated on the fly when absent. Therefore it is strongly recommended to spell out the required order explicitly by separating such commands into two steps. (Make sure to use the -O u option when piping!) minimum allele count (INFO/AC) of sites to be printed. Specifying the type of allele is optional and can be set to non-reference (nref, the default), 1st alternate (alt1), the least frequent (minor), the most frequent (major) or sum of all but the most frequent (nonmajor) alleles. maximum allele count (INFO/AC) of sites to be printed. Specifying the type of allele is optional and can be set to non-reference (nref, the default), 1st alternate (alt1), the least frequent (minor), the most frequent (major) or sum of all but the most frequent (nonmajor) alleles. exclude sites for which EXPRESSION is true. For valid expressions see EXPRESSIONS. include only sites with one or more homozygous (hom), heterozygous (het) or missing (miss) genotypes. When prefixed with ^, the logic is reversed; thus ^het excludes sites with heterozygous genotypes. include sites for which EXPRESSION is true. For valid expressions see EXPRESSIONS. print known sites only (ID column is not \".\") print sites with at least INT alleles listed in REF and ALT columns print sites with at most INT alleles listed in REF and ALT columns. Use -m2 -M2 -v snps to only view biallelic SNPs. print novel sites only (ID column is \".\") print sites where all samples are phased. Haploid genotypes are considered phased. Missing genotypes considered unphased unless the phased bit is set. exclude sites where all samples are phased minimum allele frequency (INFO/AC / INFO/AN) of sites to be printed. Specifying the type of allele is optional and can be set to non-reference (nref, the default), 1st alternate (alt1), the least frequent (minor), the most frequent (major) or sum of all but the most frequent (nonmajor) alleles. maximum allele frequency (INFO/AC / INFO/AN) of sites to be printed. Specifying the type of allele is optional and can be set to non-reference (nref, the default), 1st alternate (alt1), the least frequent (minor), the most frequent (major) or sum of all but the most frequent (nonmajor) alleles. print sites without a called genotype, i.e. print sites with all genotypes missing. Note that the missingness is determined from INFO/AN and AC tags when available to avoid parsing sample fields. exclude sites without a called genotype, i.e. print sites with at least one non-missing genotype. Note that the missingness is determined from INFO/AN and AC tags when available to avoid parsing sample fields. comma-separated list of variant types to select. Site is selected if any of the ALT alleles is of the type requested. Types are determined by comparing the REF and ALT alleles in the VCF record not INFO tags like INFO/INDEL or INFO/VT. Use --include to select based on INFO tags. comma-separated list of variant types to exclude. Site is excluded if any of the ALT alleles is of the type requested. Types are determined by comparing the REF and ALT alleles in the VCF record not INFO tags like INFO/INDEL or INFO/VT. Use --exclude to exclude based on INFO tags. print sites where only the subset samples carry an non-reference allele. Requires --samples or --samples-file. exclude sites where only the subset samples carry an non-reference allele"
    },
    {
        "link": "http://barcwiki.wi.mit.edu/wiki/SOPs/vcf_manipulation",
        "document": "Create a VCF (​variant call format) file [with about any program that identifies variants], such as\n• samtools' mpileup+bcftools: # One file of mapped reads samtools mpileup -uf indexed_genome My_mapped_reads.bam | bcftools view -bvcg - >| My_mapped_reads.raw.bcf # Multiple files of mapped reads samtools mpileup -uf indexed_genome *.bam | bcftools view -bvcg - >| Multiple_samples.raw.bcf\n\nConvert from BCF (binary version of VCF) to VCF:\n\nMerge multiple VCF files -- works on raw VCF files but apparently not with those processed by vcf-annotate\n\nFor the last command, My_filters.txt contains a filter (such as an example one that calculates PLdiff values for 1/1 - 0/0 and 1/1 - 0/1, making sure that each difference is greater than 20). In this case, the filter is designed for selection, rather than filtering out. \n\n For more examples, go to ​vcf-annotate and click on \"Read even more\".\n\nSimilar sorts of tasks can be performed with ​SnpSift's filter command, like\n\nAnnotate variants with SNP IDs (if they overlap known SNPs)\n\nSee ​tabix for how to index BED or other file types. See ​vcf-annotate for details of last command.\n\nSort by chromosome and then coordinates\n\nValidate VCF file (for use with GATK, for example)\n\nConvert from VCF to bed (using the ​BEDOPS toolkit):\n\nExtract fields from a VCF file to a text, tab-separated format with the ​snpSift extractFields function\n\nExtract fields from a VCF file to a text, tab-separated file with the ​bcftools query function"
    },
    {
        "link": "http://htslib.org/doc/bcftools.html",
        "document": ""
    },
    {
        "link": "https://biostars.org/p/487816",
        "document": "I want to use bcftools, or any other non-hail way, to achieve below filtering on my vcf files ...\n\nI'm very new to the bioinformatics world and have used bcftools till now to do following tasks ...\n• normalization of vcf files ( via norm option of bcftools )\n• filtering samples from vcf file ( by passing -s and -S flags to view option of bcftools )\n• concatenating blocks of vcf files ( via concat option of bcftools )\n\nCan anyone please help me to achieve filtering for samples that have 95% of call rate?\n\nor at least break down the steps required to achieve it and I will try to decode the manual of bcftools to achieve those steps ..\n\nI tried finding solution in already answered question but didn't find a solution ... if someone has bookmarked the solution then please share that ...\n\nMay be this would help others too who don't want to use hail for basic filtering ...\n\nI would appreciate any help, any pointer ...\n\nps : if someone know a good video lecture or course that walks through some example scenarios with bcftools then please do share ..."
    },
    {
        "link": "https://manpages.ubuntu.com/manpages/focal/man1/bcftools.1.html",
        "document": ""
    }
]