[
    {
        "link": "https://medium.com/@nile.bits/simplify-and-optimize-the-ultimate-guide-to-c-code-refactoring-tools-e20c12bce851",
        "document": "In the fast-paced world of software development, writing clean and efficient code is of utmost importance. Complex and convoluted code can be difficult to maintain, debug, and enhance, leading to decreased productivity and increased frustration. This is where code refactoring comes into play. By restructuring existing code without changing its external behavior, refactoring improves code readability, maintainability, and performance. In this comprehensive guide, we will explore the top C# code refactoring tools that can help simplify and optimize your codebase.\n\n1.Visual Studio Refactoring Tools: Visual Studio, the popular integrated development environment (IDE) for C#, offers a wide range of built-in refactoring tools. Let‚Äôs take a look at some commonly used ones:\n\na) Extract Method: This refactoring tool allows you to extract a block of code into a separate method. It promotes code reusability and enhances readability by encapsulating a logical portion of code into a meaningful method.\n\nb) Rename: The Rename tool enables you to quickly and accurately rename variables, methods, classes, and other code elements throughout your project. It ensures consistency and makes your code more maintainable.\n\nc) Extract Interface: This tool allows you to extract an interface from an existing class, promoting loose coupling and making your code more testable and flexible.\n\n2. ReSharper: ReSharper, a popular third-party extension for Visual Studio, offers a plethora of advanced code refactoring tools. Let‚Äôs explore some of its key features:\n\na) Code Cleanup: ReSharper‚Äôs Code Cleanup feature allows you to define and apply code style and quality rules throughout your project. It ensures consistent code formatting, eliminates redundancies, and enforces best practices.\n\nb) Extract Variable: This refactoring tool helps you extract repeated code fragments into a variable, improving code readability and maintainability.\n\nc) Inline Variable: The Inline Variable feature allows you to eliminate unnecessary variable assignments by replacing them with their actual values. This improves code clarity and eliminates redundant code.\n\n3. Roslyn Refactorings: Roslyn, the open-source .NET compiler platform, provides a rich set of refactoring APIs that can be leveraged by various code analysis and refactoring tools. Let‚Äôs explore some useful Roslyn refactorings:\n\na) Simplify Names: This refactoring simplifies type and namespace names by removing unnecessary qualifiers, making your code more concise and readable.\n\nb) Use Implicit Type: The Use Implicit Type refactoring replaces explicit type declarations with the var keyword when the type can be inferred from the assignment. It reduces redundancy and improves code brevity.\n\n4. Refactoring Essentials: Refactoring Essentials is a free and open-source extension for Visual Studio that provides additional code refactorings and analyzers. Some noteworthy features include:\n\na) Convert ‚Äòforeach‚Äô to ‚ÄòLINQ‚Äô: This refactoring transforms a foreach loop into a LINQ query, enhancing code readability and promoting functional programming.\n\nb) Introduce Field from Parameter: This refactoring creates a private field from a method parameter, reducing parameter passing and improving code encapsulation.\n\nRefactoring code is essential for simplifying and optimizing your C# software. The tools discussed in this article, such as Visual Studio Refactoring Tools, ReSharper, Roslyn Refactorings, and Refactoring Essentials, offer significant capabilities that increase code readability, maintainability, and performance. You may improve your productivity, minimize defects, and create cleaner, more efficient code by utilizing these tools. Accept the power of refactoring and improve your C# development abilities."
    },
    {
        "link": "https://telerik.com/blogs/10-awesome-csharp-refactoring-tips",
        "document": "Though many easy-to-use resources are available to help with refactoring, you may not know about them. Check out these 10 tips to help you with efficient refactoring.\n\nSomething we can say with certainty is that where there is code creation, there will also be refactoring. After all, code written today is tomorrow‚Äôs legacy‚Äîespecially when it comes to Microsoft technologies like .NET that receive several updates every year.\n\nAs developers, we must always be aware of the latest improvements made in the technology that we work in to make the most of them. Creating something that won't be outdated in a few years or even months is impossible. Therefore, one more codebase becomes legacy and eligible for refactoring.\n\nFor us to be efficient in refactoring, several resources can help‚Äîsome just restructuring the code, others through the Visual Studio IDE. Keep reading to learn 10 tips for helping you with efficient refactoring.\n\nRefactoring is a technique that basically consists of performing small transformations to the code in a way that does not change its behavior. Although small, these transformations make code easier to maintain and are intended to improve an application‚Äôs performance.\n\nRefactoring is extremely important in a development team because it‚Äôs how programmers can demonstrate the real value of their performance in existing code. Plus, there are many short- and long-term benefits of refactoring code, such as:\n‚Ä¢ Agility: Well-written code makes it possible for developers to identify and resolve a problem in the code faster.\n‚Ä¢ User experience: With fewer crashes and better performance, the software becomes easier to use and brings a better experience to the end user.\n‚Ä¢ Modernization: Refactored code brings the possibility of modernizing libraries and putting the company that owns the code ahead of its competitors because it uses cutting-edge technologies already consolidated in the market.\n\nThe C# programming language has always been in constant evolution and, lately, Microsoft‚Äôs effort to transform C# into a language with less ceremony and better performance is notable.\n\nRegarding new systems, we‚Äôre free to use all the cutting-edge features made available by the latest versions of C#, but what about legacy code? That code was written when many of these features did not yet exist or were not used for some reason. In such cases, refactoring is necessary.\n\nThe following is a list of tips for refactoring code in C#. First, I‚Äôll share poorly written code, then how it would be possible to create a better refactored version. Some examples also highlight tips on how to use Visual Studio features to perform refactoring faster.\n\nYou can access the source code with all the examples at this link.\n\n1. Instead of Foreach, Use LINQ\n\nis one of the most common methods programmers use to filter a list of values. However, although its execution is efficient, its syntax usually pollutes the code, because to find a certain value within the list it is necessary to resort to some condition operators such as and for example. To make the code more readable, a great approach is to use the resources available in LINQ, as can be seen in the example below.\n\nüí° If you are using Visual Studio, you can use a resource available that does the refactoring work for you. Just place your cursor over the code and click on the lightbulb icon, and the option ‚ÄúConvert to LINQ‚Äù will appear. This makes it possible to preview the refactoring result, as seen in the image below:\n\nA very common problem encountered in refactorings is methods that have more than one responsibility‚Äîthat is, they are used to perform several actions, which makes the code confusing and difficult to understand. When we create methods that have a single responsibility, we can organize the code and make it cleaner and easier to understand.\n\nIn the example below, we have a method responsible for doing several things in the first version.\n\nFirst, a search is made to return all sellers. Then it checks if the mandatory fields of the new seller are filled in. If any of them is empty, an error message is returned. If not, it checks if this seller already exists in the list; if it already exists, an error message is returned, but if not, the new seller is added to the database.\n\nHere is the opportunity to create separate methods, each with its own responsibility.\n\nFor this, we will create three new methods. We will also change the name of the main method to make it more suitable for its main function.\n\nNote that in this new version, the responsibilities for each method were separated. We have a method to check if the seller already exists in the database and another method to validate the fields filled in. And, finally, we have a method to save the record if it has passed the previous validations. Thus, the code became much easier to understand and more cohesive through better-elaborated validations.\n\nAsynchronous programming has a big advantage in that running long tasks in the background is possible while faster ones are being completed. One scenario that can often take a considerable amount of time is transactions in databases, so it is always advisable to use asynchronous functions.\n\nIn the example below, we first have an example of synchronously updating records in the database. If there are few records in the database, this execution will probably be fast. But if there are many records, it may take time, and in this case the other operations will have to wait for to be started. That‚Äôs not very performant.\n\nBelow we can see the same method but done asynchronously. Note that we are using the ORM Entity Framework Core in this example, which has native asynchronous methods. In this way, persistence in the database becomes more performant because it does not lock other actions in the code.\n\nUsing constructors is considered a good practice. Through them, we manage to define default values, modify access and make more explicit the necessary values to instantiate a class‚Äîin addition to maintaining cleaner code when a class is called.\n\nNotice in the example below how classes are instantiated with no constructors. The class with the constructor is simpler because we do not need to declare the fields, just pass the values by parameter.\n\nüí° If you are using Visual Studio, generating the builder through a Quick Action is possible, as shown in the GIF below.\n\nand chains are very common in refactorings, and, although they work, they make the code dirty and difficult to understand. To avoid this kind of problem, an alternative is to use the native C# function, .\n\nWith , we manage to obtain the same result as , but in a more organized and easy-to-understand way. Below is the same example, first using the conditions and second using the .\n\nüí° In Visual Studio, it is possible to use a feature that automatically fills the entire structure. Just type the condition and click below, and the entire structure is created, as can be seen in the GIF below:\n\nInterfaces in C# are objects that represent contracts, guaranteeing that the behavior of the interface will be respected in the classes that implement them.\n\nIt is very common to find classes that do not implement interfaces in refactorings. To solve this problem, we can use a Visual Studio function called Extract Interface that automatically generates an interface based on the selected class, as shown in the example below:\n\nDespite being useful, variables are often unnecessary and pollute the code, making it more difficult to read.\n\nAlways consider if it is really necessary to use a variable‚Äîit is often possible to use the ternary operator (?) or some LINQ feature like the method for example, as seen in the example below:\n\nRenaming methods or variables can be time-consuming if you don‚Äôt know how to use the right resources. Imagine renaming a method that is used by dozens of classes. To streamline this task, a feature in Visual Studio will rename the object in all its references.\n\nJust right-click on the name you want to rename and choose ‚ÄúRename,‚Äù enter the new name and click ‚ÄúApply.‚Äù\n\nRemoving unnecessary instances is always a good practice in refactorings, as it leaves the code clean, with fewer lines.\n\nVisual Studio has a feature to facilitate removal. Just position the cursor over a that is not being used, click on the lightbulb icon, and choose the option ‚ÄúRemove unnecessary usings.‚Äù In the open window, you will have options for removal at the Document, Project or Solution level.\n\nAs developers, we often need to save time, and a very useful function in Visual Studio is that you can generate methods automatically. Just write your declaration and pass the input arguments, then click the lightbulb icon and choose the option ‚ÄúGenerate Method,‚Äù as shown in the GIF below:\n\nAs seen in the article, refactoring is an ever-present task in the day of software development, and to make this work easier there are many resources‚Äîespecially if you are using Visual Studio.\n\nSo, the next refactoring you do, don‚Äôt forget to review these tips and put them into practice."
    },
    {
        "link": "https://reddit.com/r/csharp/comments/fyvf1t/how_can_i_start_learning_c_code_optimization",
        "document": "I‚Äôm not really sure where to start. I can write C# code, but I want the surety of being able to write the best C# code for reasons I know. I can‚Äôt find a full tutorial on YouTube, only disjointed lectures and workshops (which have annoyingly long intros). So, do I need to buy a book for this? And what are the basic concepts‚ÄîIve heard about pointers a bit, and the heap. Do I need to learn memory management as well?"
    },
    {
        "link": "https://reddit.com/r/gamedev/comments/4gdwif/my_code_is_messy_i_need_tips_for_c_code",
        "document": "I've been developing in Unity for a few years now. I don't have any formal education when it comes to programming, and to me, my code looks messy and hard to read. Do you all have any tips or resources for keeping things organized? like how to format certain bits, or when it's good to break one big script into several?"
    },
    {
        "link": "https://softwareengineering.stackexchange.com/questions/202615/what-are-some-techniques-i-can-use-to-refactor-object-oriented-code-into-functio",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://docs.unity3d.com/6000.0/Documentation/Manual/scripting.html",
        "document": "Scripting in Unity refers to authoring your project‚Äôs functionality in code rather than through the Unity Editor UI(User Interface) Allows a user to interact with your application. Unity currently supports three UI systems. More info\n\nSee in Glossary. This allows you to go beyond what can be done in the Editor UI alone. Interacting directly with the public Unity APIs allows for finer control and a greater degree of customization.\n\nLearning to program in particular languages is beyond the scope of this section. However, there are many books, tutorials, and other resources for learning how to program with Unity. Refer to learn for further details.\n‚Ä¢ Unity Discussions also has common scripting questions and answers."
    },
    {
        "link": "https://docs.unity.com",
        "document": "Docs and guides to work with the Unity ecosystem."
    },
    {
        "link": "https://docs.unity3d.com/Manual/VisualStudioIntegration.html",
        "document": "Unity integrates with Microsoft Visual Studio through the Code Editor Package for Visual Studio. This package is pre-installed when you install Unity. If Visual Studio is installed at the time you install Unity, then Unity uses Visual Studio to open and edit scriptsA piece of code that allows you to create your own Components, trigger game events, modify Component properties over time and respond to user input in any way you like. More info\n\nSee in Glossary by default.\n\nUnity automatically uses Visual Studio as its default script editor if Visual Studio is installed when you install Unity, or if you install Visual Studio as part of the Unity installation process. You can install Visual Studio as a module into an existing Unity installation. For more information, see Downloading and installing Editors and modules with the Unity Hub.\n‚Ä¢ Go to Edit > Preferences (macOS: Unity > Settings) in the main menu to open the Preferences window.\n‚Ä¢ Click on the External Script Editor dropdown and select Microsoft Visual Studio. The appearance of this option changes depending on the version of Microsoft Visual Studio you have installed.\n\nA: The External Script Editor dropdown menu, which displays the name and version of the selected script editor.\n\nB: The name and version of the Unity package that integrates with the selected script editor.\n\nUnity uses Visual Studio‚Äôs C# compiler to compile scripts. When you use the Visual Studio Editor package with Visual Studio, both Unity and Visual Studio display details of any errors in your scripts.\n\nUnity automatically creates and maintains a Visual Studio .sln and .csproj file. You can control whether Unity generates .csproj files for certain elements of your project in the External Tools menu in the Preferences window, as in the above screenshot. Enable or disable the checkboxes to toggle whether Unity generates .csproj files for a given option.\n\nUnity regenerates the .sln and .csproj files in your project whenever a contributor makes changes to the state of a file, for example, editing an existing file or creating a new one. You can also add files to your solution from Visual Studio. Unity imports any new files, and the next time Unity creates the project files again, it creates them with the new files included."
    },
    {
        "link": "https://oreilly.com/videos/master-c-scripting/9781837027453",
        "document": "This course is your ultimate guide to mastering C# scripting for Unity, starting with essential setups and diving into advanced game development techniques. You'll begin with the fundamentals, such as creating scripts, understanding variables, and troubleshooting common challenges, ensuring a solid foundation. Progressively, you'll explore decision-making logic, functions, loops, and data structures in Unity.\n\nThe curriculum emphasizes hands-on learning through a variety of projects, including a 3D dodging game, 2D carrot collector, and even a dynamic endless runner. Each project builds your skills incrementally, focusing on scripting efficiency, game mechanics, and player interaction. By tackling both 2D and 3D game development, you'll gain versatility and confidence in Unity's diverse capabilities.\n\nFor those aiming to optimize performance and monetize games, the course delves into advanced concepts like object pooling, quaternions, and ad integration. With clear explanations, engaging projects, and practical tips, this course transforms you into a capable Unity developer ready to bring your game ideas to life.\n\nTo access the supplementary materials, scroll down to the 'Resources' section above the 'Course Outline' and click 'Supplemental Content.' This will either initiate a download or redirect you to GitHub.\n\nWhat you will learn\n‚Ä¢ Write and debug C# scripts for Unity projects\n‚Ä¢ Apply advanced Unity concepts like vectors, quaternions, and coroutines to create dynamic game elements\n\nThis course is ideal for aspiring game developers, Unity beginners, and intermediate users aiming to enhance their scripting skills. No prior programming knowledge is required, but familiarity with basic Unity tools is helpful. If you‚Äôre passionate about creating games, this course is for you.\n\nRaja Biswas: Raja Biswas has already taught game development and computer programming to thousands of people through his YouTube channel, Charger Games. Quite a lot of his viewers have published their first games after learning game development from his YouTube videos. While Raja has completed his diploma in engineering in computer science and technology, and a Bachelor of Engineering in IT, he has learned most of the stuff he knows from books and online tutorials."
    },
    {
        "link": "https://docs.unity.com/ugs/en-us/manual/cloud-code/manual/modules/how-to-guides/module-structure",
        "document": "A Cloud Code module is a simple .NET project that exposes the endpoints a game client can call. Modules adopt a similar paradigm as .NET class libraries. For example, a standard C# class might look like the following:\n\nOnce compiled, any reference to the class can only use the method.\n\nThis allows developers to choose the interface of their library through access modifiers. Cloud Code modules work in the same way, however they use the attribute instead.\n\nWith Cloud Code modules, you can create self-contained server-authoritative libraries. This allows you to run your game logic on the server, and call it from the client, which detaches the game logic from the client and increases security. Modules provide code reuse and provide an interface you can use to manage your game logic.\n\nA Cloud Code module project is a class library C# project. The project can also be part of a solution. The simplest project structure can look like this:\n\nOr, if in a solution, it can look like this:\n\nThe solution can also contain multiple projects that reference each other. This allows you to easily add test projects, and enables code reuse. The example below shows a valid project structure:\n\nHowever, only the main project can contain Cloud Code functions.\n\nRefer to Write unit tests to learn more about how to write unit tests for your Cloud Code module.\n\nRefer to Cloud Code limits to check what storage restrictions apply.\n\nAlthough the solution can contain multiple C# projects, you can have only one main project per module. The main project contains all your module entry points (functions with attributes).\n\nThe main project is also the project that you deploy to the Cloud Code service. You don't deploy the projects and dependencies that aren't referenced in the main project to the Cloud Code service.\n\nYou need to match the name of the main project to the name of the archive that you deploy to the Cloud Code service.\n\nThe simplest module project can have the following structure:\n\nThe sample below defines a Cloud Code module with a single function that returns the string :\n\nAs .NET projects, Cloud Code module projects also use NuGet to share packaged code.\n\nTo learn more about NuGet, refer to Microsoft documentation.\n\nCloud Code offers two packages that you can include in your modules:\n‚Ä¢ : this package contains the core functionality of Cloud Code, including the attribute. All Cloud Code modules require this package.\n‚Ä¢ : this is an optional package that contains the Unity Gaming Services APIs that you can use to interact with the Cloud Code service. You can use this package to call out to other Cloud Code SDKs, such as Cloud Save.\n\nFor more information, see the documentation on how to install and use NuGet packages in your project with Jetbrains Rider or Visual Studio.\n\nTo avoid issues with code structure, follow these guidelines.\n\nTo mark a method as a Cloud Code function and make it a viable Cloud Code module endpoint, use the attribute. You can only use Cloud Code function attributes in the main class of your modules.\n\nTo invoke the function, you need to call the name of the attribute.\n\nUse the structure below for the method signature of your module function.\n\nYou can use singleton pattern to integrate with Cloud Code C# packages and external service calls. Singleton patterns improve performance and scalability in Cloud Code and ensure that you don't create multiple instances of the same object.\n\nYou can use Dependency Injection to inject the and interfaces into your modules.\n\nYou can pass in parameters to your module functions.\n\nThis includes any primitive types, such as , , , and , as well as complex types, such as , , and .\n\nFor example, you can pass in a and a to your module function:\n\nDefine your module function with the same parameters:\n\nYou can also pass in any custom types that you define in your module project.\n\nFor example, you can pass in a JSON object to your module object:\n\nDefine a and classes and a function in your module project:\n\nCloud Code modules can use , , , and interfaces to expand the functionality of your modules.\n\nThe interface allows you to manage the dependencies of your modules. Learn more about it in the Dependency Injection documentation.\n\nThe interface provides a way to access the Cloud Code C# Client SDKs. You can use Dependency Injection to inject the into your modules.\n‚Ä¢ Define a class that implements the interface and add the as a singleton:\n‚Ä¢ Pass in the interface as a function parameter to your module functions.\n\nThe interface provides a way to access the Cloud Code C# Admin SDKs. You can use Dependency Injection to inject the into your modules.\n‚Ä¢ Define a class that implements the interface and add the as a singleton:\n‚Ä¢ Pass in the interface as a function parameter to your module functions.\n\nThe interface provides a way to send push notifications to players. You can use Dependency Injection to inject the into your modules.\n‚Ä¢ Define a class that implements the interface and add the as a singleton:\n‚Ä¢ Pass in the object as a function parameter to your module functions.\n\nTo learn more about how to send push messages from Cloud Code, refer to Push messages.\n\nTo make calls to other UGS services within your module, you can use the interface to get extra information about the current call. You can use the values below to access the service SDKs and see which player makes a request.\n‚Ä¢ : The project ID to which the caller was authenticated.\n‚Ä¢ : The player ID that executed the script. Note: the player ID isn't available when a service calls the script.\n‚Ä¢ : The environment ID of the module.\n‚Ä¢ : The environment name of the module.\n‚Ä¢ : The JSON Web Token (JWT) credential the player used to authenticate to Cloud Code.\n‚Ä¢ : The user ID of the service account. (Note: the user ID is not available when a service calls the script.)\n‚Ä¢ : The issuer or the service account token. (Note: the issuer is not available when a player calls the script). For instance, if Multiplay makes a call, the issuer is .\n‚Ä¢ : The Analytics User ID of the player. (Note: the analytic user ID is not available when a service calls the script.)\n‚Ä¢ : The Unity device installation ID of the player. (Note: the Unity installation ID is not available when a service calls the script.)\n\nYou can use the execution context to acquire the player ID and authenticate with different Unity Gaming Services. You can obtain the execution context through both the constructor of your class, and through any method with the attribute.\n\nFor example, you can use the execution context to call out to Cloud Save to retrieve player keys:\n\nThe and are JWTs and properties of the interface.\n\nYou can use these tokens to authenticate calls to other Unity Gaming Services from Cloud Code.\n\nAny Access Control rules that you configure affect the .\n\nThe sample below shows how you can use the to access an authenticated player's data with Cloud Save:\n\nTo access data for all players, you can use a and pass in a parameter for the :\n\nFor an in-depth explanation of the differences between the two tokens, refer to the Service and access tokens documentation.\n\nTo retrieve a Cloud Code module and its metadata, you can send a request to the Cloud Code service. The response is a JSON object with the following structure:\n\nTags are key-value pairs that you can attach to your Cloud Code modules. You can record any information you want in the tags, such as the version of the module, the author, or the commit hash if you use version control.\n\nModules can store up to 10 tags, and the maximum characters you can use per tag key and tag value is 128.\n\nSigned Download URL is a temporary URL that you can use to download the module archive."
    }
]