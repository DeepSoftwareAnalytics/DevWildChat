[
    {
        "link": "https://agilemodeling.com/style/usecasediagram.htm",
        "document": ""
    },
    {
        "link": "https://justinmind.com/blog/use-case-diagramm-beispiele",
        "document": "We use cookies to ensure that we give you the best experience on our website. for more information."
    },
    {
        "link": "https://geeksforgeeks.org/use-case-diagram",
        "document": "A Use Case Diagram in Unified Modeling Language (UML) is a visual representation that illustrates the interactions between users (actors) and a system. It captures the functional requirements of a system, showing how different users engage with various use cases, or specific functionalities, within the system. Use case diagrams provide a high-level overview of a system’s behavior, making them useful for stakeholders, developers, and analysts to understand how a system is intended to operate from the user’s perspective, and how different processes relate to one another. They are crucial for defining system scope and requirements.\n\nWhat is a Use Case Diagram in UML?\n\nA Use Case Diagram is a type of Unified Modeling Language (UML) diagram that represents the interaction between actors (users or external systems) and a system under consideration to accomplish specific goals. It provides a high-level view of the system's functionality by illustrating the various ways users can interact with it.\n\nWhen to apply Use Case Diagram?\n\nUse case diagrams are useful in several situations. Here’s when you should consider using them:\n• None When you need to gather and clarify user requirements, use case diagrams help visualize how different users interact with the system.\n• None If you’re working with diverse groups, including non-technical stakeholders, these diagrams provide a clear and simple way to convey system functionality.\n• None During the system design phase, use case diagrams help outline user interactions and plan features, ensuring that the design aligns with user needs.\n• None When defining what is included in the system versus what is external, use case diagrams help clarify these boundaries.\n\nUML notations provide a visual language that enables software developers, designers, and other stakeholders to communicate and document system designs, architectures, and behaviors in a consistent and understandable manner.\n\nActors are external entities that interact with the system. These can include users, other systems, or hardware devices. In the context of a Use Case Diagram, actors initiate use cases and receive the outcomes. Proper identification and understanding of actors are crucial for accurately modeling system behavior.\n\nUse cases are like scenes in the play. They represent specific things your system can do. In the online shopping system, examples of use cases could be \"Place Order,\" \"Track Delivery,\" or \"Update Product Information\". Use cases are represented by ovals.\n\nThe system boundary is a visual representation of the scope or limits of the system you are modeling. It defines what is inside the system and what is outside. The boundary helps to establish a clear distinction between the elements that are part of the system and those that are external to it. The system boundary is typically represented by a rectangular box that surrounds all the use cases of the system.\n\nIn a Use Case Diagram, relationships play a crucial role in depicting the interactions between actors and use cases. These relationships provide a comprehensive view of the system's functionality and its various scenarios. Let's delve into the key types of relationships and explore examples to illustrate their usage.\n\nThe Association Relationship represents a communication or interaction between an actor and a use case. It is depicted by a line connecting the actor to the use case. This relationship signifies that the actor is involved in the functionality described by the use case.\n• Association: A line connecting the \"Customer\" actor to the \"Transfer Funds\" use case, indicating the customer's involvement in the funds transfer process.\n\nThe Include Relationship indicates that a use case includes the functionality of another use case. It is denoted by a dashed arrow pointing from the including use case to the included use case. This relationship promotes modular and reusable design.\n• Include Relationship: The \"Compose Post\" use case includes the functionality of \"Add Image.\" Therefore, composing a post includes the action of adding an image.\n\nThe Extend Relationship illustrates that a use case can be extended by another use case under specific conditions. It is represented by a dashed arrow with the keyword \"extend.\" This relationship is useful for handling optional or exceptional behavior.\n• Extend Relationship: The \"Select Seat\" use case may extend the \"Book Flight\" use case when the user wants to choose a specific seat, but it is an optional step.\n\nThe Generalization Relationship establishes an \"is-a\" connection between two use cases, indicating that one use case is a specialized version of another. It is represented by an arrow pointing from the specialized use case to the general use case.\n• Generalization Relationship: Both \"Rent Car\" and \"Rent Bike\" are specialized versions of the general use case \"Rent Vehicle.\"\n\nHow to draw a Use Case diagram in UML?\n\nBelow are the main steps to draw use case diagram in UML:\n• Step 1: Identify Actors : Determine who or what interacts with the system. These are your actors. They can be users, other systems, or external entities.\n• Step 2: Identify Use Cases : Identify the main functionalities or actions the system must perform. These are your use cases. Each use case should represent a specific piece of functionality.\n• Step 3: Connect Actors and Use Cases : Draw lines (associations) between actors and the use cases they are involved in. This represents the interactions between actors and the system.\n• Step 4: Add System Boundary : Draw a box around the actors and use cases to represent the system boundary. This defines the scope of your system.\n• Step 5: Define Relationships : If certain use cases are related or if one use case is an extension of another, you can indicate these relationships with appropriate notations.\n• Step 6: Review and Refine : Step back and review your diagram. Ensure that it accurately represents the interactions and relationships in your system. Refine as needed.\n• Step 7: Validate : Share your use case diagram with stakeholders and gather feedback. Ensure that it aligns with their understanding of the system's functionality.\n\nLet's understand how to draw a Use Case diagram with the help of an Online Shopping System:\n• Relations:\n• None The Customer can browse products, add to the cart, and complete the checkout.\n• None The Admin can manage the inventory.\n\nBelow is the use case diagram of an Online Shopping System:\n\nSeveral tools and platforms are available to create and design Use Case Diagrams. These tools offer features that simplify the diagram creation process, facilitate collaboration among team members, and enhance overall efficiency. Here are some popular Use Case Diagram tools and platforms:\n• draw.io:\n• None Works offline and can be integrated with Google Drive, Dropbox, and others.\n• SmartDraw:\n• None Templates for different types of diagrams, including Use Case Diagrams.\n\nWhat are Common Mistakes while making Use Case Diagram?\n\nAvoiding common mistakes ensures the accuracy and effectiveness of the Use Case Diagram. Here are key points for each mistake:\n• None Adding too much detail can confuse people.\n• None Different names for the same elements create confusion.\n• None Failing to define the system’s limits makes its scope unclear.\n• None Treating the diagram as static can make it outdated and inaccurate.\n\nBest Practices for Use Case Diagram\n\nCrafting clear and effective Use Case Diagrams is essential for conveying system functionality and interactions. Here are some best practices to consider:\n• None Use Case Diagram focus on capturing the core functions of the system, avoiding extraneous details.\n• None They uses a uniform naming scheme for use cases and actors throughout the diagram to enhance clarity and prevent misunderstandings.\n• None They ensure uniformity in the appearance of elements such as ovals (for use cases), stick figures (for actors), and connecting lines to create a polished presentation.\n• None They help in organizing use cases into coherent groups that represent distinct modules or subsystems within the overall system.\n• None Use Case Diagrams adopt an iterative method, updating the diagram as the system changes or as new information emerges.\n\nWhat is the Purpose and Benefits of Use Case Diagrams?\n\nThe Use Case Diagram offers numerous benefits throughout the system development process. Here are some key advantages of using Use Case Diagrams:\n• None Use Case Diagrams offer a clear visual representation of a system’s functions and its interactions with external users. This representation helps stakeholders, including those without technical expertise, in grasping the system’s overall behavior.\n• None They establish a shared language for articulating system requirements, ensuring that all team members have a common understanding.\n• None Use Case Diagram illustrate the different ways users engage with the system, contributing to a thorough comprehension of its functionalities.\n• None In the design phase, Use Case Diagrams help outline how users (actors) will interact with the system. They support the planning of user interfaces and aid in structuring system functionalities.\n\nIn conclusion, a Use Case Diagram in UML serves as a powerful tool for capturing and visualizing the functional requirements and interactions within a system. By representing actors, use cases, and their relationships in a clear and concise manner, this diagram provides a high-level overview of the system's behavior.\n\nFAQs on Use Case Diagram in UML\n\nBelow are the main faqs on Use Case Diagram in UML:\n\nQ1: How do use case diagrams support agile methodologies?\n\nQ2: How does include and exclude relationships differ from each other in Use Case Diagram?\n\nQ3: How communication is improved among stakeholders using Use Case Diagram?\n\nQ4: What is the significance of system boundaries in use case diagrams?\n\nQ5: How do you prioritize use cases in a diagram?"
    },
    {
        "link": "https://justinmind.com/blog/use-case-diagramming-examples",
        "document": "We use cookies to ensure that we give you the best experience on our website. for more information."
    },
    {
        "link": "https://andrew.cmu.edu/course/90-754/umlucdfaq.html",
        "document": ""
    },
    {
        "link": "https://mode.com/blog/python-data-visualization-libraries",
        "document": "This piece has been updated by our Technical Content Writer, Chioma Dunkley.\n\nScroll through the Python Package Index and you'll find libraries for practically every data visualization need—from GazeParser for eye movement research to pastalog for realtime visualizations of neural network training. And while many of these libraries are intensely focused on accomplishing a specific task, some can be used no matter what your field.\n\nThis list is an overview of 12 interdisciplinary Python data visualization libraries, from the well-known to the obscure. Mode Python Notebooks support five libraries on this list - matplotlib, Seaborn, Plotly, pygal, and Folium - and more than 60 others that you can explore on our Notebook support page.\n\nWe hope these lists inspire you, and if you want to add a library that's not listed, use our instructions to install additional libraries or send a note to success [at] modeanalytics [dot com].\n\nmatplotlib is the O.G. of Python data visualization libraries. Despite being over a decade old, it's still the most widely used library for plotting in the Python community. It was designed to closely resemble MATLAB, a proprietary programming language developed in the 1980s.\n\nBecause matplotlib was the first Python data visualization library, many other libraries are built on top of it or designed to work in tandem with it during analysis. Some libraries like pandas and Seaborn are “wrappers” over matplotlib. They allow you to access a number of matplotlib’s methods with less code.\n\nWhile matplotlib is good for getting a sense of the data, it's not very\n\nuseful for creating publication-quality charts quickly and easily. As Chris Moffitt points out in his overview of Python visualization tools, matplotlib “is extremely powerful but with that power comes complexity.”\n\nmatplotlib has long been criticized for its default styles, which have a distinct 1990s feel. Its current release of matplotlib 3.5.3 still reflects this style.\n\nCreated by: John D. Hunter, available in Mode Where to learn more: matplotlib.org\n\nWant to brush up on your Python skills? Check out our tutorial to learn how to analyze and visualize data using Python.\n\nSeaborn harnesses the power of matplotlib to create beautiful charts in a few lines of code. The key difference is Seaborn's default styles and color palettes, which are designed to be more aesthetically pleasing and modern. Since Seaborn is built on top of matplotlib, you'll need to know matplotlib to tweak Seaborn's defaults.\n\nCreated by: Michael Waskom, available in Mode Where to learn more: http://web.stanford.edu/~mwaskom/software/seaborn/index.html\n\nPlotnine is a python implementation of ggplot2, an R plotting system, and concepts from The Grammar of Graphics. It's a powerful visualization package that you layer components to create a complete plot. For instance, you can start with axes, then add points, then a line, a trendline, etc. As a functional port of ggplot2, R programmers familiar with ggplot2 will find Plotnine easy to transition to.\n\nPlotnine is tightly integrated with pandas, so it's best to store your data in a DataFrame when using Plotnine.\n\nCreated by: Hassan Kibirige (Check out his interview with us.) Where to learn more: https://plotnine.readthedocs.io/en/stable/index.html\n\nLike ggplot, Bokeh is based on The Grammar of Graphics, but unlike ggplot, it's native to Python, not ported over from R. Its strength lies in the ability to create interactive, web-ready plots, which can be easily output as JSON objects, HTML documents, or interactive web applications. Bokeh also supports streaming and real-time data.\n\nBokeh provides three interfaces with varying levels of control to accommodate different user types. The highest level is for creating charts quickly. It includes methods for creating common charts such as bar plots, box plots, and histograms. The middle level has the same specificity as matplotlib and allows you to control the basic building blocks of each chart (the dots in a scatter plot, for example). The lowest level is geared toward developers and software engineers. It has no pre-set defaults and requires you to define every element of the chart.\n\nCreated by: Anaconda Where to learn more: http://bokeh.pydata.org/en/latest/\n\nWant to brush up on your Python skills? Check out our tutorial to learn how to analyze and visualize data using Python.\n\nLike Bokeh and Plotly, pygal offers interactive plots that can be embedded in the web browser. Its prime differentiator is the ability to output charts as SVGs. As long as you're working with smaller datasets, SVGs will do you just fine. But if you're making charts with hundreds of thousands of data points, they'll have trouble rendering and become sluggish.\n\nSince each chart type is packaged into a method and the built-in styles are pretty, it's easy to create a nice-looking chart in a few lines of code.\n\nCreated by: Florian Mounier Where to learn more: http://www.pygal.org/en/latest/index.html\n\nYou might know Plotly as one of the best data visualization tools, but did you also know you can access its capabilities from a Python notebook? Like Bokeh, Plotly's forte is making interactive plots, but it offers some charts you won't find in most libraries, like contour plots, dendrograms, and 3D charts.\n\nCreated by: Plotly, available in Mode Where to learn more: https://plot.ly/python/\n\ngeoplotlib is a toolbox for creating maps and plotting geographical data. You can use it to create a variety of map-types, like choropleths, heatmaps, and dot density maps. You must have Pyglet (an object-oriented programming interface) installed to use geoplotlib. Nonetheless, since most Python data visualization libraries don't offer maps, it's nice to have a library dedicated solely to them.\n\nCreated by: Andrea Cuttone Where to learn more: https://github.com/andrea-cuttone/geoplotlib\n\nGleam is inspired by R's Shiny package. It allows you to turn analyses into interactive web apps using only Python scripts, so you don't have to know any other languages like HTML, CSS, or JavaScript. Gleam works with any Python data visualization library. Once you've created a plot, you can build fields on top of it so users can filter and sort data.\n\nCreated by: David Robinson Where to learn more: https://github.com/dgrtwo/gleam\n\nDealing with missing data is a pain. missingno allows you to quickly gauge the completeness of a dataset with a visual summary, instead of trudging through a table. You can filter and sort data based on completion or spot correlations with a heatmap or a dendrogram.\n\nCreated by: Aleksey Bilogur Where to learn more: https://github.com/ResidentMario/missingno\n\nLeather's creator, Christopher Groskopf, puts it best: “Leather is the Python charting library for those who need charts now and don’t care if they’re perfect.” It's designed to work with all data types and produces charts as SVGs, so you can scale them without losing image quality. Since this library is relatively new, some of the documentation is still in progress. The charts you can make are pretty basic—but that's the intention.\n\nCreated by: Christopher Groskopf Where to learn more: https://leather.readthedocs.io/en/latest/index.html\n\nLike Seaborn, Altair is a declarative visualization library that allows you to create aesthetically pleasing graphs & charts; but unlike Seaborn which is based on Matplotlib, Atair is based on Vega and Vega-Lite. It is great for creating interactive visualizations easily and quickly. Its downsides are that it doesn’t look as nice as plotly or bokeh, and some users have mentioned experiencing difficulty when arranging its components.\n\nWhere to learn more: https://altair-viz.github.io/index.html\n\nFolium is an open-source library built on the data power of python and mapping capabilities of leaflet.js (a Javascript library). It allows you to visualize geospatial data. You can build a variety of interactive maps such as choropleth maps, scatter maps, bubble maps, heatmaps, etc. One powerful element of Folium are its various plugins like Markercluser, ScrollZoomToggler, DualMap that let you wrap leaflet maps and extend its functionality.\n\nWhere to learn more: https://github.com/python-visualization/folium\n\nThere are a ton of great evaluations and overviews of Python data visualization libraries out there. Check out some of our favorites:\n\nNo coding experience? No problem. Learn Python using real-world data with our free tutorial."
    },
    {
        "link": "https://geeksforgeeks.org/top-python-libraries-for-data-visualization",
        "document": "Data Visualization is an extremely important part of Data Analysis. After all, there is no better way to understand the hidden patterns and layers in the data than seeing them in a visual format! Don’t trust me? Well, assume that you analyzed your company data and found out that a particular product was consistently losing money for the company. Your boss may not pay that much attention to a written report but if you present a line chart with the profits as a red line that is consistently going down, then your boss may pay much more attention! This shows the power of Data Visualization!\n\nHumans are visual creatures and hence, data visualization charts like bar charts, scatterplots, line charts, geographical maps, etc. are extremely important. They tell you information just by looking at them whereas normally you would have to read spreadsheets or text reports to understand the data. Python is one of the most popular programming languages for data analytics as well as data visualization. There are several libraries available in recent years that create beautiful and complex data visualizations.\n\nBelow is the list of 8 best Python libraries that are highly being used for Data Visualization in 2024. Let’s understand the in-depth details of these Python libraries that are highly used for data visualization.\n\nThese libraries are so popular because they allow analysts and statisticians to create visual data models easily according to their specifications by conveniently providing an interface, and data visualization tools all in one place! The list explains some key features and applications that are being used to prepare data for visualization.\n\nMatplotlib is a data visualization library and 2-D plotting library of Python It was initially released in 2003 and it is the most popular and widely-used plotting library in the Python community. It comes with an interactive environment across multiple platforms. Matplotlib can be used in Python scripts, the Python and IPython shells, the Jupyter Notebook, web application servers, etc. It can be used to embed plots into applications using various GUI toolkits like Tkinter, GTK+, wxPython, Qt, etc. So you can use Matplotlib to create plots, bar charts, pie charts, histograms, scatterplots, error charts, power spectra, stemplots, and whatever other visualization charts you want! The Pyplot module also provides a MATLAB-like interface that is just as versatile and useful as MATLAB while being free and open source.\n\nPlotly is a free open-source graphing library that can be used to form data visualizations. Plotly (plotly.py) is built on top of the Plotly JavaScript library (plotly.js) and can be used to create web-based data visualizations that can be displayed in Jupyter notebooks or web applications using Dash or saved as individual HTML files. Plotly provides more than 40 unique chart types like scatter plots, histograms, line charts, bar charts, pie charts, error bars, box plots, multiple axes, sparklines, dendrograms, 3-D charts, etc. Plotly also provides contour plots, which are not that common in other data visualization libraries. In addition to all this, Plotly can be used offline with no internet connection.\n\nSeaborn is a Python data visualization library that is based on Matplotlib and closely integrated with the NumPy and pandas data structures. Seaborn has various dataset-oriented plotting functions that operate on data frames and arrays that have whole datasets within them. Then it internally performs the necessary statistical aggregation and mapping functions to create informative plots that the user desires. It is a high-level interface for creating beautiful and informative statistical graphics that are integral to exploring and understanding data. The Seaborn data graphics can include bar charts, pie charts, histograms, scatterplots, error charts, etc. Seaborn also has various tools for choosing colour palettes that can reveal patterns in the data.\n\nGgplot is a Python data visualization library that is based on the implementation of ggplot2 which is created for the programming language R. Ggplot can create data visualizations such as bar charts, pie charts, histograms, scatterplots, error charts, etc. using high-level API. It also allows you to add different types of data visualization components or layers in a single visualization. Once ggplot has been told which variables to map to which aesthetics in the plot, it does the rest of the work so that the user can focus on interpreting the visualizations and take less time in creating them. But this also means that it is not possible to create highly customized graphics in ggplot. Ggplot is also deeply connected with pandas so it is best to keep the data in DataFrames.\n\nAltair is a statistical data visualization library in Python. It is based on Vega and Vega-Lite which are a sort of declarative language for creating, saving, and sharing data visualization designs that are also interactive. Altair can be used to create beautiful data visualizations of plots such as bar charts, pie charts, histograms, scatterplots, error charts, power spectra, stemplots, etc. using a minimal amount of coding. Altair has dependencies which include Python 3.6, entry points, jsonschema, NumPy, Pandas, and Toolz which are automatically installed with the Altair installation commands. You can open Jupyter Notebook or JupyterLab and execute any of the code to obtain those data visualizations in Altair. Currently, the source for Altair is available on GitHub.\n\nBokeh is a data visualization library that provides detailed graphics with a high level of interactivity across various datasets, whether they are large or small. Bokeh is based on The Grammar of Graphics like ggplot but it is native to Python while ggplot is based on ggplot2 from R. Data visualization experts can create various interactive plots for modern web browsers using bokeh which can be used in interactive web applications, HTML documents, or JSON objects. Bokeh has 3 levels that can be used for creating visualizations. The first level focuses only on creating the data plots quickly, the second level controls the basic building blocks of the plot while the third level provides full autonomy for creating the charts with no pre-set defaults. This level is suited to data analysts and IT professionals that are well-versed in the technical side of creating data visualizations.\n\nPygal is a Python data visualization library that is made for creating sexy charts! (According to their website!) While Pygal is similar to Plotly or Bokeh in that it creates data visualization charts that can be embedded into web pages and accessed using a web browser, a primary difference is that it can output charts in the form of SVG or Scalable Vector Graphics. These SVGs ensure that you can observe your charts clearly without losing any of the quality even if you scale them. However, SVG’s are only useful with smaller datasets as too many data points are difficult to render and the charts can become sluggish.\n\nMost of the data visualization libraries don’t provide much support for creating maps or using geographical data and that is why geoplotlib is such an important Python library. It supports the creation of geographical maps in particular with many different types of maps available such as dot-density maps, choropleths, symbol maps, etc. One thing to keep in mind is that requires NumPy and pyglet as prerequisites before installation but that is not a big disadvantage. Especially since you want to create geographical maps and geoplotlib is the only excellent option for maps out there!\n\nIn conclusion, all these Python Libraries for Data Visualization are great options for creating beautiful and informative data visualizations. Each of these has its strong points and advantages so you can select the one that is perfect for your data visualization or project. For example, Matplotlib is extremely popular and well-suited to general 2-D plots while Geoplotlib is uniquely suited to geographical visualizations. So go on and choose your library to create a stunning visualization in Python!\n\nWhich Python library is best for data visualization?\n\nWhich library is most used for data visualization?"
    },
    {
        "link": "https://knowledgehut.com/blog/business-intelligence-and-visualization/python-data-visualization-libraries",
        "document": "Disclaimer: The content on the website and/or Platform is for informational and educational purposes only. The user of this website and/or Platform (User) should not construe any such information as legal, investment, tax, financial or any other advice. Nothing contained herein constitutes any representation, solicitation, recommendation, promotion or advertisement on behalf of upGrad and / or its Affiliates (including but not limited to its subsidiaries, associates, employees, directors, key managerial personnel, consultants, trainers, advisors).\n\nThe User is solely responsible for evaluating the merits and risks associated with use of the information included as part of the content. The User agrees and covenants not to hold upGrad and its Affiliates responsible for any and all losses or damages arising from such decision made by them basis the information provided in the course and / or available on the website and/or platform. upGrad reserves the right to cancel or reschedule events in case of insufficient registrations, or if presenters cannot attend due to unforeseen circumstances. You are therefore advised to consult a upGrad agent prior to making any travel arrangements for a workshop. For more details, please refer to the \n\n\n\nCSM®, CSPO®, CSD®, CSP®, A-CSPO®, A-CSM® are registered trademarks of Scrum Alliance®. upGrad Education Private Limited is a Registered Education Ally (REA) of Scrum Alliance®. PMP is a registered mark of the Project Management Institute, Inc. CAPM is a registered mark of the Project Management Institute, Inc. PMI-ACP is a registered mark of the Project Management Institute, Inc. PMI-RMP is a registered mark of the Project Management Institute, Inc. PMI-PBA is a registered mark of the Project Management Institute, Inc. PgMP is a registered mark of the Project Management Institute, Inc. PfMP is a registered mark of the Project Management Institute, Inc. upGrad Education Private Limited is a Premier Authorized Training Partner (ATP) of Project Management Institute, Inc. The PMI Premier Authorized Training Partner logo is a registered mark of the Project Management Institute, Inc. PMBOK is a registered mark of the Project Management Institute, Inc. ITIL®, PRINCE2®, PRINCE2 Agile®, AgileSHIFT® are registered trademarks of AXELOS Limited, used under permission of AXELOS Limited. The Swirl logo™ is a trademark of AXELOS Limited, used under the permission of AXELOS Limited. All rights reserved. COBIT® is a registered trademark of the Information Systems Audit and Control Association® (ISACA®). (ISC)2® is a registered trademark of International Information Systems Security Certification Consortium, Inc. CompTIA Authorized Training Partner, CMMI® is registered in the U.S. Patent and Trademark Office by Carnegie Mellon University. FRM®, GARP™, and Global Association of Risk Professionals™, are trademarks owned by the Global Association of Risk Professionals, Inc. Global Association of Risk Professionals, Inc. (GARP™) does not endorse, promote, review, or warrant the accuracy of the products or services offered by upGrad Education Private Limited for FRM® related information, nor does it endorse any pass rates claimed by the provider. Further, GARP is not responsible for any fees or costs paid by the user. IIBA®, the IIBA® logo, BABOK®, and Business Analysis Body of Knowledge® are registered trademarks owned by the International Institute of Business Analysis. upGrad Education Private Limited is an Endorsed Education Provider of IIBA®. Scaled Agile Framework® and SAFe® are registered trademarks of Scaled Agile, Inc.® upGrad Education Private Limited is a Platinum SPCT Partner of Scaled Agile, Inc®. upGrad Education Private Limited is an Authorized Training Partner of CertNexus. upGrad Education Private Limited is a Microsoft Partner. upGrad Education Private Limited is an AWS Training Partner (ATP). upGrad Education Private Limited is an ICAgile Member Training Organization. upGrad Education Private Limited is a Professional Training Network member of scrum.org. upGrad Education Private Limited is an Accredited Examination Centre of IASSC. upGrad Education Private Limited is a Registered Education Partner (REP) of the DevOps Institute (DOI). upGrad Education Private Limited is an ATO of PeopleCert. upGrad Education Private Limited is an Authorized Training Partner (ATP) and Accredited Training Center (ATC) of the EC-Council. upGrad Education Private Limited is a Bronze Licensed Training Organization of Kanban University."
    },
    {
        "link": "https://elise-deux.medium.com/the-list-of-graph-visualization-libraries-7a7b89aab6a6",
        "document": "Alchemy.js: a JavaScript graph drawing application built in D3 to get started with graph visualization applications. Most customization of the application takes place by overriding default configurations, rather than direct implementation via JavaScript.\n\nArbor.JS: a JavaScript graph visualization library released under MIT license using web workers and jQuery. It provides a force-directed layout algorithm plus abstractions for graph organization and screen refresh handling. You can use it with canvas, SVG, or positioned HTML elements. Last updated in 2012.\n\nccNetViz: a lightweight JavaScript library for large network graphs visualization using WebGL. It is an open source library available under GPLv3 License developed in the Helikar Lab.\n\nCola.JS: an open-source JavaScript library released under the MIT License to arrange HTML5 documents and diagrams using constraint-based optimization techniques. It works well with libraries like D3.js, svg.js, and Cytoscape.js. The core layout is based on a complete rewrite in JavaScript of the C++ LibCola library.\n\nCytoscape.js: a graph library, written in pure JS, with a permissive open source license (MIT) for the core Cytoscape.js library and all first-party extensions. It is used in commercial projects and open-source projects for both front-facing app use-cases and developer use-cases. It includes graph theory algorithms such as BFS or PageRank.\n\nD3.JS: a JavaScript library for manipulating documents based on data using HTML, SVG, and CSS. D3 combines visualization components and a data-driven approach to DOM manipulation.\n\nDagre-D3: a JavaScript library released under the MIT License to lay out directed graphs on the client-side. The Dagre-D3 library acts as a front-end to Dagre, providing actual rendering using D3.\n\nDracula Graph library: a JavaScript library released under the MIT License to display and layout interactive connected graphs and networks, along with various related algorithms from the field of graph theory. Just plain JavaScript and SVG.\n\nEl Grapho: a JavaScript WebGL graph data visualization framework to visualize and interact with large-graphs. It is released under the MIT License.\n\nG6: a JavaScript graph visualization framework released under the MIT License which provides a set of basic mechanisms, letting developers build graph visualization analysis application or graph visualization modeling application.\n\nGGraph: a graph visualization library for big data released under the Apache 2.0 License. It’s built on top D3 and extends the notion of nodes and links with groups of nodes.\n\nGraphGL: a JavaScript network visualization library released under the MIT License. It is designed for rendering large graphs in web browsers and dynamic graph exploration. It is suitable for static files (exported GraphML/GEXF files converted to JSON) and for dynamic files.\n\nGraphosaurus: a three-dimensional JavaScript static graph viewer powered by WebGL (three.js) released under the MPL License.\n\nH3Viewer: a JavaScript library providing layout and navigation of node-link graphs in 3D hyperbolic space. The library handles graphs up to 300,000 edges.\n\nJavaScript Diagram: a commercial JavaScript library for visualizing, creating, and editing interactive diagrams. It supports creating flowcharts, organizational charts, mind maps, and BPMN charts either through code or a visual interface.\n\nJavaScript InfoVis Toolkit: a Toolkit for creating Interactive Data Visualizations for the Web, released under the MIT License\n\nJointJS: a JavaScript diagramming library released under the MLP License 2.0 with features to support visualization and interaction with diagrams and graphs.\n\nJointJS+: A commercial diagramming library for advanced visual and No-Code/Low-Code applications that brings the best of HTML5 & SVG to create products.\n\nJS Graph it: a JavaScript library for graphs representation that allows you to connect your HTML elements using CSS classes to declare blocks, connectors, labels without Javascript code. JS Graph is released under the Apache 2.0 License\n\njsPlumb: a JavaScript graph library released under the MIT License to visually connect elements on their web pages. It uses SVG and runs on all browsers from IE9 and later.\n\nKeylines: a commercial JavaScript software development kit (SDK) for building applications to visualize and analyze complex connected data.\n\nmxGraph: a client-side JavaScript diagramming library, released under the Apache 2.0 License, that uses SVG and HTML for rendering. draw.io is an example that extends the functionality of this library.\n\nNeovisJs: a JavaScript graph library combining Neo4j and vis.js to produce graph visualizations in the browser with data from Neo4j. It can connect to Neo4j instance, specify labels and property to be displayed, specify Cypher query to populate.\n\nNetJSON: a JavaScript tool, released under BSD License, to leverage D3.js to visualize network topology using the NetJSON NetworkGraph format.\n\nOgma: a commercial JavaScript library for large-scale graph visualization and interaction, developed by Linkurious.\n\nPopoto.js: a JavaScript library built with D3.js designed to create visual query builder for Neo4j graph databases. The graph queries are translated into Cypher and run on the database. It is released under the GNU Public License.\n\nProcessing.JS: the JavaScript port of the Processing visual programming language. It allows web browsers to display animations, visual applications, games and other graphically rich content without any plug-ins.\n\nProtovis: a JavaScript library released under the BSD License, to compose custom views of data with simple marks such as bars and dots. Protovis is no longer under active development.\n\nSigma.JS: a JavaScript library released under the MIT license and dedicated to graph drawing. It lets developers publish networks on Web pages and integrate network exploration in rich Web applications.\n\nSoba: a JavaScript visualization toolkit released under the MIT license. Soba is a 2D plotting library integrated with Sushi written in JavaScript.\n\nVis.JS: is a JavaScript browser-based visualization library released under the Apache 2.0 License. The library enables manipulation of and interaction with large amounts of dynamic data.\n\nvisNetwork: VisNetwork is a Proprietary R package, using vis.js library for network visualization.\n\nVivaGraphJS: a graph drawing library for JavaScript designed to support different rendering engines and layout algorithms.\n\nyFiles for HTML: a commercial programming library for visualizing any kind of diagram, graph, or network.\n\nAfterGlow: a script written in Perl that assists with the visualization of log data. It reads CSV files and converts them into a graph. The latest version of AfterGlow 1.6.5 was released on 07/08/13.\n\nCircos: a software package in Perl for visualizing data and information. It displays data in a circular layout.\n\nDash Cytoscape: a Component Library for Dash aimed at facilitating network visualization in Python, wrapped around Cytoscape.js.\n\nDeep Graph Library: a Python package built for implementation of graph neural network model family, on top of existing DL frameworks.\n\nFlare: an ActionScript library for creating visualizations that run in the Adobe Flash Player. The toolkit supports data management, visual encoding, animation, and interaction techniques.\n\nGDToolkit (GDT): a C++ Graph Drawing Toolkit designed to manipulate several types of graph, and to automatically draw them according to many different aesthetic criteria and constraints.\n\nGrano: an open source Python tool for journalists and researchers who want to track networks of political or economic interest. It helps understand the most relevant relationships in investigations and merge data from different sources.\n\nGraph Stream: a Java library for the modeling and analysis of dynamic graphs. You can generate, import, export, measure, layout and visualize them.\n\nGraph Tool: a Python module for manipulation and statistical analysis of graphs. The core data structures and algorithms are implemented in C++.\n\nGraphviz: a variety of C software for drawing attributed graphs and implementing a handful of common graph layout algorithms. The Graphviz layout programs take descriptions of graphs in text language and make diagrams in image, SVG or PDF formats; or display in the browser.\n\nGraphvy: basic graph data exploration and visualization using Kivy and released under the MIT License.\n\nigraph: a collection of network analysis tools open source and free. igraph can be programmed in R, Python, Mathematica and C/C++.\n\nipysigma: a custom Jupyter widget library to display graphs using sigma.js, released under the Apache 2.0 License.\n\nJava Universal Network/Graph Framework (JUNG): a Java software library that provides a common language for the modeling, analysis, and visualization of data that can be represented as a graph or network.\n\nLargeViz: a C++ tool released under the Apache 2.0 License to visualize large-scale and high-dimensional data. It supports visualizing both high-dimensional feature vectors and networks.\n\nmultiNetX: a python package, released under the GNU Public License, for the manipulation and visualization of multilayer networks.\n\nMuxviz: a framework for the analysis and visualization of interconnected multilayer networks. It is released under the GNU General Public License v3.0.\n\nNodeBox: a Graph library in Python released under the GPL to visualize small graphs (<200 elements) with algorithms from NetworkX for betweenness centrality and eigenvector centrality.\n\nOGDF: a self-contained C++ class library for the automatic layout of diagrams. OGDF offers algorithms and data structures to use within your own applications or scientific projects. The library is available under the GNU General Public License.\n\nPy3Plex: a Python library released under the BSD License, providing algorithms for decomposition, visualization, and analysis of graph data.\n\nPyGraphistry: a Python visual graph analytics library to extract, transform, and load big graphs into Graphistry’s cloud-based graph explorer.\n\nQuickgraph: a C# open source tool providing generic directed/undirected graph data structures and algorithms for .NET. QuickGraph supports MSAGL, GLEE, and Graphviz to render the graphs, serialization to GraphML.\n\nSoNIA: a Java-based package for visualizing dynamic or longitudinal “network” data. It is released under the GNU GPL License.\n\nStatnet: an integrated set of R tools for the representation, visualization, analysis, and simulation of network data. It is released under GPL-3.\n\nTulip: an information visualization framework dedicated to the analysis and visualization of relational data. Written in C++ the framework enables the development of algorithms, visual encodings, interaction techniques, data models, and domain-specific visualizations.\n\nTom Sawyer Perspectives: a commercial graph SDK with a graphics-based design and preview environment. The platform integrates enterprise data sources with graph visualization, layout, and analysis technologies."
    },
    {
        "link": "https://stackoverflow.com/questions/18992184/java-plotting-library-like-pythons-matplotlib",
        "document": "I am looking for a java plotting library that might be as good as matplotlib is for python. I have done some research looking over SO questions, but many of them are outdated and a lot has changed in the few years since they were asked. The suggestions that come up lead to websites that at the surface seem to be offering good libraries but my needs are immediate and I cannot afford the time to use them all and find the best through experience.\n\nAnd so I am asking for your experience, can any of you recommend a graphing library that is to java as matplotlib is to python (in 2013)?"
    }
]