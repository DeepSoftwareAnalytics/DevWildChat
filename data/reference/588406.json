[
    {
        "link": "https://medium.com/@xhtmlchamps/best-practices-for-responsive-web-design-with-html5-and-css3-894c98bf5a15",
        "document": "Best Practices for Responsive Web Design with HTML5 and CSS3\n\nThe Best Practices Used for Developing Responsive Web Design with HTML5 and CSS3\n\nThe Responsive web design with HTML 5 and CSS3 are very useful for web developers who seek innovative techniques that deliver quick and intuitive interfacing with the modern mobile devices. Both the HTML5 and CSS3 are fully supported in all the modern browsers. Professional web developers can help in integrating these techniques to increase the performance. To say the proportion of advantages gained are tremendously huge.\n\nToday, internet users browse on various trendy devices like tablets and android phones. Every device of this array varies in screen dimensions, both in landscape and portrait viewing options. Although it has been a difficult task to develop a website with different orientations, these applications now help in creating responsive websites effortlessly.\n\nResponsive design with HTML5 and CSS3 helps designing functional websites. This web designing technique is now being adapted widely by different browsers and devices with varying viewpoints and changing layouts.\n\nHTML5 can be used as the frame to design responsive websites. It supports hugely in developing the most interactive websites throughout the process. This HTML5 responsive designing provides unique and consistent ways to develop websites. By perfectly planning, you can reduce redundancy and create high levels of transparency in the development stages.\n\nWhilst talking about CSS3, this is an extremely powerful source for designing responsive websites. CSS3 helps in creating a wide range of designs with same foundation easily. It, moreover, enables web designers to easily plan and create the simplest blueprint based on the foundation.\n\nBesides developing responsive websites, the most debating topics is about handling the images and making it responsive to all screen sizes. This emphasizes the need to optimize images in the website, making it responsive with maximum or minimum width.\n\nPractices for Responsive Web Designing with HTML5 and CSS3\n\nThere are three main components of responsive web designing with HTML5 and CSS3 and they include, flexible layout, media queries, flexible media.\n\nThis is the practice of building website layout with flexible grid that is capable of resizing it to any width. These grids are built using appropriate length units and are also used for declaring common grid with property values such as margin, padding or width.\n\nMedia queries are built as an extension and they are commonly found in media types when targeting. It provides the ability to point any specific styles for an individual browser and the circumstances of the device along with viewpoint width or orientation. Each media query includes media type with one or more expressions, which may include media features.\n\nAnother important aspect of responsive web designing includes flexible media. It is important that images and videos need to be scaled and change sizes according to media types, as viewpoint sizes changes with devices. The quickest way for achieving scalable media is to use max-width property with 100% value. This ensures that viewpoint gets smaller to any media and scales down accordingly to the container’s width.\n\nAbout Author: XhtmlChamps a Web Design and Development Company For Complete Web Solutions. We are experts in all kinds of digital solutions for your business beginning from website design and development to successfully marketing a website."
    },
    {
        "link": "https://blog.bluelupin.com/html5-css3-best-practices-for-modern-website-design-in-delhi",
        "document": "You were scrolling sites and finally decided to read this blog. What if you had found our website slow, cluttered with lots of information, and difficult to navigate?\n\nCertainly, you are not pleased, and most probably not willing to visit us again. This often happens to poorly designed websites.\n\nBut in the age of nicely designed pre-built templates, does custom coding for building a website from scratch matter? If your competitors use the same templates or formulas and apply little customization, developing your website uniquely with personalized features only to serve your audience will help your target audience recognize your brand over them.\n\nAlso, in a city like New Delhi, businesses fiercely compete online, and a subpar website can mean lost opportunities. This is why we tried to highlight in this blog a few handpicked best practices of CSS3 and HTML5 for crafting cutting-edge websites that should be followed by website design companies in New Delhi.\n\nHTML5 is needed to give websites a clear structure, make them faster, and allow easy use of videos and better accessibility. We have explained 7 best practices for not falling behind.\n\nSemantic HTML5 elements like <header>, <footer>, <main>, and <article> provide structure and meaning to web content. Unlike <div> and <span>, these elements describe the content’s purpose, making it more understandable for both developers and search engines.\n\nWhy It Matters: Semantic tags improve accessibility, as screen readers can interpret the content better. They also enhance SEO by helping search engines index the content accurately. For example, using <nav> for navigation menus ensures better usability.\n\nHTML5 introduces input types like email, date, number, and attributes like required, pattern, and max length, simplifying form validation without JavaScript.\n\nWhy It Matters: Modern forms are user-friendly and reduce errors during submission. For example, the required attribute ensures mandatory fields are filled, while the pattern enforces input formats. This improves data quality and user experience.\n\n3. Using the <picture> Element for Responsive Images\n\nThe <picture> element enables developers to serve images optimized for various screen sizes or resolutions, ensuring faster loading and better display quality.\n\nWhy It Matters: Responsive images save bandwidth and improve performance on mobile devices. For a website design company in New Delhi, where mobile internet is predominant, this ensures a seamless user experience.\n\nHTML5 eliminates the need for external plugins like Flash by introducing <audio> and <video> elements with built-in controls.\n\nWhy It Matters: These elements enhance performance, reduce dependency on third-party tools, and provide a consistent user experience. Including multiple formats ensures compatibility across all browsers.\n\nHTML5 combined with ARIA (Accessible Rich Internet Applications) roles ensures websites are usable by individuals with disabilities. ARIA roles like role=”button” or aria-label enhance interactivity.\n\nWhy It Matters: Accessibility is crucial for inclusivity and compliance with global standards. It also improves usability for all users by providing clearer navigation.\n\n6. Consistent Use of Lowercase and Quotation Marks\n\nMaintaining consistency in your HTML code by using lowercase for element names and enclosing attribute values in double quotation marks enhances readability and reduces errors. HTML is case-insensitive, but adopting a uniform style improves code maintenance and collaboration among developers.\n\nWhy It Matters: Consistent coding conventions make your HTML documents easier to read and maintain. They also help prevent potential issues that may arise from inconsistent casing or missing quotation marks, especially when integrating with other technologies or frameworks.\n\nSeparating structure (HTML), presentation (CSS), and behavior (JavaScript) is a fundamental principle in web development. Avoiding inline styles and scripts by placing CSS in external stylesheets and JavaScript in external scripts promotes a clear separation of concerns.\n\nWhy It Matters: This separation enhances code maintainability, reusability, and scalability. It also improves page load times, as external files can be cached by browsers, and makes it easier to apply site-wide changes.\n\nCSS3 makes websites look attractive, works smoothly on all devices, and adds cool animations and styles. These best of 7 CSS3 best practices will help a professional website design company in New Delhi provide better results to their clients.\n\nCSS3 media queries allow websites to adapt to different screen sizes, ensuring a consistent look and feel across devices.\n\nWhy It Matters: Responsive design is essential in New Delhi, where users access websites on various devices. Media queries enable developers to define breakpoints for customized layouts.\n\nFlexbox simplifies the creation of responsive layouts by aligning and distributing space within a container.\n\nWhy It Matters: Flexbox eliminates the need for complex float-based layouts. It’s ideal for navigation bars, grids, and content alignment.\n\nCSS Grid enables developers to design two-dimensional layouts with precise control over rows and columns.\n\nWhy It Matters: Grid layouts reduce the complexity of creating intricate page designs. Developers can design without relying on extra HTML elements or workarounds.\n\nCSS3 transitions add interactivity by creating smooth changes in styles, such as hover effects or focus states.\n\nWhy It Matters: Transitions make websites more interactive and visually engaging without heavy JavaScript.\n\nCSS variables allow developers to define reusable values for colors, fonts, and other properties, ensuring consistency across designs.\n\nWhy It Matters: Variables simplify maintenance. Updates to a single variable propagate throughout the stylesheet, reducing errors.\n\nOrganizing your CSS using a modular approach, such as the Block Element Modifier (BEM) methodology, enhances code maintainability and scalability. This approach involves breaking down your CSS into reusable components with clear and descriptive naming conventions.\n\nWhy It Matters: A modular approach prevents naming conflicts, reduces specificity issues, and makes it easier to manage and update styles as your project grows. It also facilitates collaboration among team members by providing a clear structure.\n\nMinifying your CSS files by removing unnecessary whitespace, comments, and formatting reduces file size, leading to faster page load times. Additionally, compressing CSS files using Gzip or Brotli further decreases file size during transmission.\n\nWhy It Matters: Smaller CSS files improve website performance by reducing the amount of data that needs to be downloaded. This is particularly important for users with slower internet connections or when accessing websites on mobile devices.\n\nFuture Predictions for HTML5 and CSS3 from a Leading Website Design Company in New Delhi\n\nThese innovations will further empower other website design companies in New Delhi to create groundbreaking web solutions.\n• CSS4 Features: Container queries and scoping for more flexible designs.\n\nBluelupin Technologies, a leading website design company in New Delhi, prioritizes user experience through expertly crafted, fast, responsive, and visually stunning websites ensuring seamless engagement and maximum impact. With website design and development expertise, Bluelupin specializes in delivering customized digital experiences that cater to your unique business needs. Their portfolio, which includes unique websites like Niwish, showcases their ability to combine innovation with user-centric design.\n\nWhether you need a feature-rich application or a responsive website tailored to your audience, Bluelupin ensures your website adheres to the best practices in HTML5 and CSS3 and leverages advanced technologies to give your website a competitive advantage in New Delhi’s bustling digital market.\n\n1. What is the use of HTML5 and CSS3?\n\nHTML5 provides the foundation for structuring website content and integrating features like multimedia, making websites faster and more functional, while CSS3 focuses on styling, enabling responsive designs and visually appealing layouts that work seamlessly across devices and browsers.\n\n2. How do web designers use HTML5 to create forms for websites?\n\nWeb designers use HTML5 to create forms by utilizing its advanced input types like email, date, and number, along with attributes like required, min, and max to ensure user-friendly, validated, and accessible forms without relying heavily on JavaScript for basic functionalities.\n\n3. What are the new features in HTML5 and CSS3?\n\nHTML5 introduces features like semantic elements, multimedia support (audio and video), and offline storage, while CSS3 adds advanced styling capabilities such as animations, transitions, gradients, and media queries for responsive design, making websites more interactive and visually engaging.\n\nImagine a website that immediately captures your attention with its speed, responsiveness, and stunning visuals while being easy to navigate. Behind such an experience lies the power of HTML5 and CSS3 which are essential for building modern websites.\n\nFor a website design company in New Delhi following these best practices is about crafting digital experiences that stand out in the online space where everyone’s competing for your attention. As technology evolves, keeping up with emerging trends ensures not just great websites but a strong future for your business."
    },
    {
        "link": "https://yashoraj.com/how-to-use-html5-and-css3-for-modern-web-development",
        "document": "In today’s digital age, creating a robust, visually appealing, and user-friendly website design company in patna is crucial for businesses and individuals alike. Two fundamental technologies that play a pivotal role in web development are HTML5 and CSS3. HTML5, the latest version of the HyperText Markup Language, and CSS3, the third version of Cascading Style Sheets, have revolutionized the way developers build and design websites. In this comprehensive guide, we will explore the ins and outs of using HTML5 and CSS3 for modern web development, covering essential features, best practices, and practical tips to help you create stunning websites.\n\nHTML5 is the standard markup language for creating web pages. It is the fifth major version of HTML and introduces several new features and enhancements over its predecessors. HTML5 provides a more structured and semantic approach to web development, making it easier for developers to create content that is both machine-readable and human-readable.\n• Semantic Elements: HTML5 introduces new semantic elements like , , , , and . These elements help define the structure of a webpage, making it more accessible and SEO-friendly.\n• Multimedia Support: HTML5 natively supports audio and video elements through and tags, eliminating the need for external plugins like Flash.\n• Canvas Element: The element allows developers to draw graphics on the fly using JavaScript, enabling the creation of dynamic and interactive web applications.\n• Geolocation API: HTML5 includes a Geolocation API that allows websites to access the user’s geographical location, enabling location-based services and personalized content.\n• Web Storage: HTML5 provides two types of web storage mechanisms: local storage and session storage. These mechanisms allow developers to store data on the client’s browser, improving performance and enabling offline capabilities.\n• CSS3 is the latest version of the Cascading Style Sheets language used for describing the presentation of a document written in HTML. CSS3 introduces a range of new features and capabilities, allowing developers to create visually stunning and responsive websites.\n• Selectors and Pseudo-Classes: CSS3 introduces new selectors and pseudo-classes, making it easier to target specific elements and apply styles based on their state.\n• Box Model Enhancements: CSS3 includes features like border-radius, box-shadow, and background gradients, allowing for more creative and visually appealing designs.\n• Transitions and Animations: CSS3 supports transitions and keyframe animations, enabling smooth and visually appealing animations without the need for JavaScript.\n• Flexbox and Grid Layouts: CSS3 introduces flexible box (Flexbox) and grid layouts, providing powerful tools for creating responsive and dynamic layouts.\n• Media Queries: Media queries in CSS3 allow developers to create responsive designs that adapt to different screen sizes and devices, ensuring a consistent user experience across platforms.\n\nNow that we have a solid understanding of the key features of HTML5 and CSS3, let’s dive into the process of building a modern website using these technologies. We will cover the essential steps and best practices to help you create a visually appealing, responsive, and SEO-friendly website.\n\nBefore diving into the code, it’s crucial to plan and design your website. This involves understanding your target audience, defining the purpose of your website, and creating a wireframe or mockup to visualize the layout and structure.\n\nUnderstanding your target audience is essential for creating a website that meets their needs and expectations. Consider factors such as age, gender, interests, and browsing habits to tailor your content and design accordingly.\n\nA wireframe is a visual representation of your website’s layout, showing the placement of key elements such as the header, navigation, content sections, and footer. Tools like Adobe XD, Figma, and Sketch can help you create detailed wireframes.\n\nWith a clear plan in place, it’s time to start coding. Begin by setting up the basic HTML5 structure for your website. Here’s a simple example:\n\nIn this example, we use HTML5 semantic elements like , , , , and to structure the content. This approach improves accessibility and SEO by providing clear and meaningful tags that describe the content.\n\nWith the HTML5 structure in place, it’s time to style your website using CSS3. Create a separate CSS file (e.g., ) and link it to your HTML document. Here’s an example of how to style the website:\n\nIn this example, we reset some default styles, set the body font and background color, and style the header, navigation, main content, sections, and footer. CSS3 allows for extensive customization, so feel free to adjust the styles to match your design preferences.\n\nTo ensure your website looks great on all devices, use CSS3 media queries to create a responsive design. Here’s an example:\n\nIn this example, we use a media query to adjust the navigation and main content padding for screens with a maximum width of 768px. This approach ensures that the website adapts to different screen sizes, providing a seamless user experience across devices.\n\nCSS3 transitions and animations can enhance the user experience by adding smooth and visually appealing effects. Here’s an example of how to add a simple transition effect to the navigation links:\n\nIn this example, we use the property to create a smooth color change effect when the user hovers over the navigation links. CSS3 animations can also be used to create more complex effects, such as keyframe animations for moving elements.\n\nSearch engine optimization (SEO) is crucial for improving your website’s visibility and ranking on search engines. HTML5 and CSS3 offer several features that can help optimize your website design for SEO.\n\nAs mentioned earlier, HTML5 introduces semantic elements that provide meaningful tags for your content. Using these elements helps search engines understand the structure and context of your content, improving SEO.\n\nImages play a significant role in web design, but they can also affect your website’s performance if not optimized properly. Use the element with the attribute to provide descriptive text for images, improving accessibility and SEO. Additionally, use modern image formats like WebP and optimize image sizes to reduce load times.\n\nA responsive design ensures that your website looks and functions well on all devices, improving user experience and SEO. Use CSS3 media queries and flexible layouts to create a responsive design that adapts to different screen sizes.\n\nMeta tags provide additional information about your webpage to search engines. Use the element to include meta tags for the title, description, and keywords. Here’s an example:\n\nTesting and debugging are essential steps in the web development process. Ensure that your website functions correctly and looks good on different browsers and devices. Use browser developer tools to inspect elements, debug CSS, and test responsiveness.\n\nDifferent browsers may render your website differently, so it’s crucial to test your website on popular browsers like Chrome, Firefox, Safari, and Edge. Use tools like BrowserStack or LambdaTest to test cross-browser compatibility.\n\nOptimize your website’s performance by minimizing HTTP requests, compressing files, and using caching mechanisms. Tools like Google PageSpeed Insights and GTmetrix can help you analyze and improve your website’s performance.\n\nHTML5 and CSS3 are powerful tools for modern web development, offering a range of features and capabilities that enable developers to create visually stunning, responsive, and SEO-friendly websites. By understanding and utilizing the key features of HTML5 and CSS3, following best practices, and continuously testing and optimizing your website, you can build a website that meets the needs of your audience and stands out in the competitive online landscape.\n\nWhether you’re a beginner or an experienced developer, mastering HTML5 and CSS3 is essential for creating modern web applications. Start by planning and designing your website, setting up the HTML5 structure, styling with CSS3, adding responsiveness, enhancing user experience with transitions and animations, optimizing for SEO, and thoroughly testing your website. With these steps, you’ll be well on your way to creating a successful and visually appealing website.\n\n1. Advance Support Ticket System\n\n2. Advocate Management System\n\n3. Courier and Logistics Management System\n\n4. CRM software pro version\n\n5. Ecommerce portal (multiple vendor) + admin panel\n\n6. Gym Management and Fitness Management\n\n7. Hospital Management System\n\n8. HR management system\n\n9. Matrimonial web portal + admin panel\n\n10. News portal with admin panel\n\n11. Tour and Travel portal with admin panel\n\n12. School management system pro version\n\n13. Real Estate system\n\n14. Project Management software (ultimate version)\n\n15. POS system for restaurants\n\n16. Point of sales system (POS)\n\n17. Pharmacy Management System\n\n18. Online job portal + admin panel\n\n19. Online exam web portal + admin panel\n\n20. Online classes and tutorial web portal + admin panel\n\nTop Website design company in Patna, For any kind of business website design and website development feel free to contact us on 7856915752"
    },
    {
        "link": "https://amazon.com/Responsive-Web-Design-HTML5-CSS/dp/1839211563",
        "document": "Enter the characters you see below\n\nSorry, we just need to make sure you're not a robot. For best results, please make sure your browser is accepting cookies."
    },
    {
        "link": "https://ewrdigital.com/blog/mastering-html5-css3-javascript-guide-web-developers",
        "document": "Mastering the Fundamentals: A Guide to HTML5, CSS3 and JavaScript for Web Developers\n\nIn the fast-evolving landscape of web development, one constant remains: the importance of mastering the fundamentals. HTML5, CSS3, and JavaScript form the backbone of modern web development, laying the groundwork for creating engaging, responsive, and dynamic user experiences. In this guide, we’ll delve into the essentials of HTML5, CSS3, and JavaScript, empowering web developers to build robust and innovative web applications.\n\nUnderstanding the Semantics: HTML5 introduced semantic elements that go beyond mere tags, providing a meaningful structure to web content. Dive into the significance of elements like , , , and , and discover how they enhance both readability and accessibility.\n\nForm Revolution: Explore the enhanced form capabilities of HTML5, including new input types, attributes, and the powerful element. Learn how to create more user-friendly and interactive forms while ensuring cross-browser compatibility.\n\nMultimedia Mastery: Delve into the multimedia features of HTML5, such as and , and understand how they enable seamless integration of rich media content. Explore best practices for optimizing multimedia elements for performance and accessibility.\n\nResponsive Design Principles: CSS3 introduced game-changing features like media queries, flexbox, and grid layouts. Uncover the principles of responsive design, exploring how to create layouts that adapt gracefully to various screen sizes and devices.\n\nTransitions and Animations: Learn how to breathe life into your web pages with CSS3 transitions and animations. Discover the art of creating smooth, visually appealing effects that enhance user engagement without compromising performance.\n\nCustomizing User Interfaces with CSS Variables: CSS variables empower developers to create more maintainable and dynamic stylesheets. Explore the benefits of using variables for consistent theming and easy style adjustments across a project.\n\nFoundations of JavaScript: Get acquainted with the basics of JavaScript, including variables, data types, and control structures. Establish a solid foundation for understanding more advanced concepts and building interactive web applications.\n\nDOM Manipulation and Events: Explore the Document Object Model (DOM) and learn how JavaScript interacts with HTML and CSS to dynamically update content and respond to user actions. Dive into event handling to create interactive and responsive user interfaces.\n\nAsynchronous JavaScript with Promises and Async/Await: Grasp the power of asynchronous programming in JavaScript using Promises and Async/Await. Understand how these features streamline code execution and enhance the responsiveness of web applications.\n\nThe Synergy of HTML5, CSS3, and JavaScript\n\nBuilding Interactive Web Pages: Combine your knowledge of HTML5, CSS3, and JavaScript to create interactive web pages. Understand how these technologies work seamlessly together to deliver a cohesive user experience.\n\nBest Practices for Cross-Browser Compatibility: Learn essential tips for ensuring your web applications perform consistently across various browsers. Address common challenges and employ strategies to maintain compatibility while taking advantage of the latest features.\n\nContinuous Learning: Web development is a dynamic field, and staying abreast of updates is crucial. Discover resources, communities, and best practices for continuous learning to ensure you remain at the forefront of web development.\n\nMastering the fundamentals of HTML5, CSS3, and JavaScript is not just about writing code; it’s about understanding the principles that underpin the web. By embracing these core technologies, web developers can unlock their full potential, creating web experiences that are not only functional but also delightful for users. So, embark on this journey of mastery, armed with the knowledge that the foundation you build today will shape the innovations of tomorrow."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox",
        "document": "The flexible box layout module (usually referred to as flexbox) is a one-dimensional layout model for distributing space between items and includes numerous alignment capabilities. This article gives an outline of the main features of flexbox, which we will explore in more detail in the rest of these guides. When we describe flexbox as being one-dimensional we are describing the fact that flexbox deals with layout in one dimension at a time — either as a row or as a column. This can be contrasted with the two-dimensional model of CSS Grid Layout, which controls columns and rows together.\n\nAnother vital area of understanding is how flexbox makes no assumption about the writing mode of the document. Flexbox doesn't just assume that all lines of text start at the top left of a document and run towards the right-hand side, with new lines appearing one under the other. Rather, it supports all writing modes, like other logical properties and values. You can read more about the relationship between flexbox and writing modes in a later article; however, the following description should help explain why we do not talk about left and right and top and bottom when we describe the direction that our flex items flow in. If the is and I am working in English, then the start edge of the main axis will be on the left, the end edge on the right. If I were to work in Arabic, then the start edge of my main axis would be on the right and the end edge on the left. In both cases the start edge of the cross-axis is at the top of the flex container and the end edge at the bottom, as both languages have a horizontal writing mode. After a while, thinking about start and end rather than left and right becomes natural, and will be useful to you when dealing with other layout methods such as CSS Grid Layout which follow the same patterns.\n\nWhile flexbox is a one dimensional model, it is possible to make flex items wrap across multiple lines. If you do this, you should consider each line as a new flex container. Any space distribution will happen across each line, without reference to the previous or subsequent lines. To cause wrapping behavior add the property with a value of . Now, if your items are too large to all display in one line, they will wrap onto another line. The live sample below contains items that have been given a . The total width of the items is too wide for the flex container. As is set to , the items wrap across multiple lines. If you set it to , which is the initial value, they will shrink to fit the container. They shrink because they are using initial flexbox values, including , that allows items to shrink. Using would cause an overflow if the items were not able to shrink, or could not shrink small enough to fit. Find out more about wrapping flex items in the guide Mastering wrapping of flex items.\n\nTo control the inline-size of each flex item, we target them directly via three properties: We will take a brief look at these properties below, but if you want more comprehensive information, take a look at the Controlling ratios of flex items on the main axis guide. Before we can make sense of these properties we need to consider the concept of available space. What we are doing when we change the value of these flex properties is to change the way that available space is distributed amongst our items. This concept of available space is also important when we come to look at aligning items. If we have three 100 pixel-wide items in a container which is 500 pixels wide, then the space we need to lay out our items is 300 pixels. This leaves 200 pixels of available space. If we don't change the initial values then flexbox will put that space after the last item. If we instead would like the items to grow and fill the space, then we need to have a method of distributing the leftover space between the items. The properties that we apply to the items themselves, enable dictating how that available space should be distributed among the sibling flex items.\n\nWith the property set to a positive integer, if there is available space, the flex item can grow along the main axis from its . Whether the item stretches to take up all the available space on that axis, or just a portion of the available space depends on if the other items are allowed to grow too and the value of their properties. Each item with a positive value consumes a portion of any available space based on their value. If we gave all of our items in the example above a value of 1 then the available space in the flex container would be equally shared between our items and they would stretch to fill the container on the main axis. If we give our first item a value of 2, and the other items a value of 1 each, there are a total of 4 parts; 2 parts of the available space will be given to the first item (100px out of 200px in the case of the example above) and 1 part each the other two (50px each out of the 200px total).\n\nWhere the property deals with adding space in the main axis, the property controls how it is taken away. If we do not have enough space in the container to lay out our items, and is set to a positive integer, then the item can become smaller than the . As with , different values can be assigned in order to cause one item to shrink faster than others — an item with a higher value set for will shrink faster than its siblings that have lower values. An item can shrink down to its size. This minimum size is taken into account while working out the actual amount of shrinkage that will happen, which means that has the potential to appear less consistent than in behavior. We'll therefore take a more detailed look at how this algorithm works in the article Controlling ratios of items along the main axis. Note: These values for and are proportions. Typically if we had all of our items set to and then wanted one item to grow at twice the rate, we would set that item to . However you could also use and if you wanted.\n\nYou will very rarely see the , , and properties used individually; instead they are combined into the shorthand. The shorthand allows you to set the three values in this order — , , . The live sample below allows you to test out the different values of the flex shorthand; remember that the first value is . Giving this a positive value means the item can grow. The second is — with a positive value the items can shrink, but only if their total values overflow the main axis. The final value is ; this is the value the items are using as their base value to grow and shrink from. .box > * { border: 2px solid rgb(96 139 168); border-radius: 5px; background-color: rgb(96 139 168 / 0.2); } .box { border: 2px dotted rgb(96 139 168); display: flex; } .one { flex: 1 1 auto; } .two { flex: 1 1 auto; } .three { flex: 1 1 auto; } There are also some predefined shorthand values which cover most of the use cases. You will often see these used in tutorials, and in many cases these are all you will need to use. The predefined values are as follows: The value is a CSS-wide keyword that represents the initial value for a property. Setting resets the item to the initial values of the three longhand properties, which is the same as . The initial value of is , so items will not grow larger than their size. The initial value of is , so items can shrink if they need to rather than overflowing. The initial value of is . Items will either use any size set on the item in the main dimension, or they will get their size from the content size. Using is the same as using ; this is similar to , except that the items can grow and fill the container as well as shrink if needed. Using will create fully inflexible flex items. It is as if you wrote . The items cannot grow or shrink and will be laid out using flexbox with a of . The shorthand you often see in tutorials is or and so on. This is the same as writing or and so on, respectively. The items get minimum size due to and then proportionally grow to fill the available space. In this case, the value of is redundant because the items start with minimum size — they're not given any size that could cause them to overflow the flex container. Try these shorthand values in the live sample below. .box > * { border: 2px solid rgb(96 139 168); border-radius: 5px; background-color: rgb(96 139 168 / 0.2); } .box { border: 2px dotted rgb(96 139 168); display: flex; } .one { flex: 1; } .two { flex: 1; } .three { flex: 1; }"
    },
    {
        "link": "https://w3schools.com/css/css3_flexbox_responsive.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://css-tricks.com/snippets/css/a-guide-to-flexbox",
        "document": "The (Flexible Box) module (a W3C Candidate Recommendation as of October 2017) aims at providing a more efficient way to lay out, align and distribute space among items in a container, even when their size is unknown and/or dynamic (thus the word “flex”). The main idea behind the flex layout is to give the container the ability to alter its items’ width/height (and order) to best fill the available space (mostly to accommodate to all kind of display devices and screen sizes). A flex container expands items to fill available free space or shrinks them to prevent overflow. Most importantly, the flexbox layout is direction-agnostic as opposed to the regular layouts (block which is vertically-based and inline which is horizontally-based). While those work well for pages, they lack flexibility (no pun intended) to support large or complex applications (especially when it comes to orientation changing, resizing, stretching, shrinking, etc.). Note: Flexbox layout is most appropriate to the components of an application, and small-scale layouts, while the Grid layout is intended for larger scale layouts.\n\nSince flexbox is a whole module and not a single property, it involves a lot of things including its whole set of properties. Some of them are meant to be set on the container (parent element, known as “flex container”) whereas the others are meant to be set on the children (said “flex items”). If “regular” layout is based on both block and inline flow directions, the flex layout is based on “flex-flow directions”. Please have a look at this figure from the specification, explaining the main idea behind the flex layout. Items will be laid out following either the (from to ) or the cross axis (from to ).\n• main axis – The main axis of a flex container is the primary axis along which flex items are laid out. Beware, it is not necessarily horizontal; it depends on the property (see below).\n• main-start | main-end – The flex items are placed within the container starting from main-start and going to main-end.\n• main size – A flex item’s width or height, whichever is in the main dimension, is the item’s main size. The flex item’s main size property is either the ‘width’ or ‘height’ property, whichever is in the main dimension.\n• cross axis – The axis perpendicular to the main axis is called the cross axis. Its direction depends on the main axis direction.\n• cross-start | cross-end – Flex lines are filled with items and placed into the container starting on the cross-start side of the flex container and going toward the cross-end side.\n• cross size – The width or height of a flex item, whichever is in the cross dimension, is the item’s cross size. The cross size property is whichever of ‘width’ or ‘height’ that is in the cross dimension.\n\nThis defines a flex container; inline or block depending on the given value. It enables a flex context for all its direct children. Note that CSS columns have no effect on a flex container. \n\nThis establishes the main-axis, thus defining the direction flex items are placed in the flex container. Flexbox is (aside from optional wrapping) a single-direction layout concept. Think of flex items as primarily laying out either in horizontal rows or vertical columns.\n• (default): left to right in ; right to left in\n• : right to left in ; left to right in\n• : same as but top to bottom\n• : same as but bottom to top By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property.\n• (default): all flex items will be on one line\n• : flex items will wrap onto multiple lines, from top to bottom.\n• : flex items will wrap onto multiple lines from bottom to top. There are some visual demos of here. This is a shorthand for the and properties, which together define the flex container’s main and cross axes. The default value is . \n\nThis defines the alignment along the main axis. It helps distribute extra free space leftover when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size. It also exerts some control over the alignment of items when they overflow the line.\n• (default): items are packed toward the start of the flex-direction.\n• : items are packed toward the end of the flex-direction.\n• : items are packed toward the start of the direction.\n• : items are packed toward the end of the direction.\n• : items are packed toward left edge of the container, unless that doesn’t make sense with the , then it behaves like .\n• : items are packed toward right edge of the container, unless that doesn’t make sense with the , then it behaves like .\n• : items are centered along the line\n• : items are evenly distributed in the line; first item is on the start line, last item on the end line\n• : items are evenly distributed in the line with equal space around them. Note that visually the spaces aren’t equal, since all the items have equal space on both sides. The first item will have one unit of space against the container edge, but two units of space between the next item because that next item has its own spacing that applies.\n• : items are distributed so that the spacing between any two items (and the space to the edges) is equal. Note that that browser support for these values is nuanced. For example, never got support from some versions of Edge, and start/end/left/right aren’t in Chrome yet. MDN has detailed charts. The safest values are , , and . There are also two additional keywords you can pair with these values: and . Using ensures that however you do this type of positioning, you can’t push an element such that it renders off-screen (e.g. off the top) in such a way the content can’t be scrolled too (called “data loss”). \n\nThis defines the default behavior for how flex items are laid out along the cross axis on the current line. Think of it as the version for the cross-axis (perpendicular to the main-axis).\n• / / : items are placed at the start of the cross axis. The difference between these is subtle, and is about respecting the rules or the rules.\n• / / : items are placed at the end of the cross axis. The difference again is subtle and is about respecting rules vs. rules.\n• : items are centered in the cross-axis\n• : items are aligned such as their baselines align The and modifier keywords can be used in conjunction with all the rest of these keywords (although note browser support), and deal with helping you prevent aligning elements such that the content becomes inaccessible. \n\nThis aligns a flex container’s lines within when there is extra space in the cross-axis, similar to how aligns individual items within the main-axis. Note: This property only takes effect on multi-line flexible containers, where is set to either or ). A single-line flexible container (i.e. where is set to its default value, ) will not reflect .\n• (default): items are packed in their default position as if no value was set.\n• / : items packed to the start of the container. The (more supported) honors the while honors the direction.\n• / : items packed to the end of the container. The (more support) honors the while end honors the direction.\n• : items evenly distributed; the first line is at the start of the container while the last one is at the end\n• : items evenly distributed with equal space around each line\n• : items are evenly distributed with equal space around them\n• : lines stretch to take up the remaining space The and modifier keywords can be used in conjunction with all the rest of these keywords (although note browser support), and deal with helping you prevent aligning elements such that the content becomes inaccessible. The property explicitly controls the space between flex items. It applies that spacing only between items not on the outer edges. The behavior could be thought of as a minimum gutter, as if the gutter is bigger somehow (because of something like ) then the gap will only take effect if that space would end up smaller. It is not exclusively for flexbox, works in grid and multi-column layout as well. \n\nBy default, flex items are laid out in the source order. However, the property controls the order in which they appear in the flex container. Items with the same revert to source order. \n\nThis defines the ability for a flex item to grow if necessary. It accepts a unitless value that serves as a proportion. It dictates what amount of the available space inside the flex container the item should take up. If all items have set to , the remaining space in the container will be distributed equally to all children. If one of the children has a value of , that child would take up twice as much of the space as either one of the others (or it will try, at least). This defines the ability for a flex item to shrink if necessary. This defines the default size of an element before the remaining space is distributed. It can be a length (e.g. 20%, 5rem, etc.) or a keyword. The keyword means “look at my width or height property” (which was temporarily done by the keyword until deprecated). The keyword means “size it based on the item’s content” – this keyword isn’t well supported yet, so it’s hard to test and harder to know what its brethren , , and do. If set to , the extra space around content isn’t factored in. If set to , the extra space is distributed based on its value. See this graphic. This is the shorthand for and combined. The second and third parameters ( and ) are optional. The default is , but if you set it with a single number value, like , that changes the to 0%, so it’s like setting . It is recommended that you use this shorthand property rather than set the individual properties. The shorthand sets the other values intelligently. \n\nThis allows the default alignment (or the one specified by ) to be overridden for individual flex items. Please see the explanation to understand the available values. Note that , and have no effect on a flex item.\n\nFlexbox requires some vendor prefixing to support the most browsers possible. It doesn’t just include prepending properties with the vendor prefix, but there are actually entirely different property and value names. This is because the Flexbox spec has changed over time, creating an “old”, “tweener”, and “new” versions. Perhaps the best way to handle this is to write in the new (and final) syntax and run your CSS through Autoprefixer, which handles the fallbacks very well. Alternatively, here’s a Sass to help with some of the prefixing, which also gives you an idea of what kind of things need to be done:\n\nLet’s start with a very very simple example, solving an almost daily problem: perfect centering. It couldn’t be any simpler if you use flexbox. .parent { display: flex; height: 300px; /* Or whatever */ } .child { width: 100px; /* Or whatever */ height: 100px; /* Or whatever */ margin: auto; /* Magic! */ } This relies on the fact a margin set to in a flex container absorb extra space. So setting a margin of will make the item perfectly centered in both axes. Now let’s use some more properties. Consider a list of 6 items, all with fixed dimensions, but can be auto-sized. We want them to be evenly distributed on the horizontal axis so that when we resize the browser, everything scales nicely, and without media queries. .flex-container { /* We first create a flex layout context */ display: flex; /* Then we define the flow direction and if we allow the items to wrap * Remember this is the same as: * flex-direction: row; * flex-wrap: wrap; */ flex-flow: row wrap; /* Then we define how is distributed the remaining space */ justify-content: space-around; } Done. Everything else is just some styling concern. Below is a pen featuring this example. Be sure to go to CodePen and try resizing your windows to see what happens. Let’s try something else. Imagine we have a right-aligned navigation element on the very top of our website, but we want it to be centered on medium-sized screens and single-columned on small devices. Easy enough. /* Large */ .navigation { display: flex; flex-flow: row wrap; /* This aligns items to the end line on main-axis */ justify-content: flex-end; } /* Medium screens */ @media all and (max-width: 800px) { .navigation { /* When on medium sized screens, we center it by evenly distributing empty space around items */ justify-content: space-around; } } /* Small screens */ @media all and (max-width: 500px) { .navigation { /* On small screens, we are no longer using row direction but column */ flex-direction: column; } } Let’s try something even better by playing with flex items flexibility! What about a mobile-first 3-columns layout with full-width header and footer. And independent from source order. .wrapper { display: flex; flex-flow: row wrap; } /* We tell all items to be 100% width, via flex-basis */ .wrapper > * { flex: 1 100%; } /* We rely on source order for mobile-first approach * in this case: * 1. header * 2. article * 3. aside 1 * 4. aside 2 * 5. footer */ /* Medium screens */ @media all and (min-width: 600px) { /* We tell both sidebars to share a row */ .aside { flex: 1 auto; } } /* Large screens */ @media all and (min-width: 800px) { /* We invert order of first sidebar and main * And tell the main element to take twice as much width as the other two sidebars */ .main { flex: 3 0px; } .aside-1 { order: 1; } .main { order: 2; } .aside-2 { order: 3; } .footer { order: 4; } }"
    },
    {
        "link": "https://charlesfreeborn.medium.com/how-to-build-a-responsive-nav-using-css-flexbox-3511cd936af9",
        "document": "No doubt the best way to learn how to code is by building things.\n\nOver the past 60 days, I have been showing up daily for an average of three hours per day, using the #100DaysOfCode challenge, in my quest to upskill, build web apps, and grow my confidence as a web developer.\n\nSo, beginning today, I am sharing here what I have learned (and currently learning) in learning about responsive web design — starting with building a responsive nav using CSS Flexbox.\n\nWhat do I hope to accomplish?\n\nHere’s what I will be building at the end of this tutorial. A responsive nav in mobile, tablet, and large screen view.\n\nThe nav will display as a column in a small screen device.\n\nI will be making use of the following CSS to accomplish this:\n• The media query to target the screen size.\n\nI begin first by importing the Google of and to the top of the stylesheet file.\n\nYou can select a Google font for use from here.\n\nThe imported font can then be used like so:\n\nNOTE: I used font even though I imported two font-family types from Google font.\n\nNext, I use CSS custom properties to define the colors I will be using.\n\nThis approach helps to make quick changes to the properties of the nav (or web app) like , , whenever you wish to.\n\nHerein, lies the application of CSS variables.\n\nNow I can style the background color of the body using CSS variables like so:\n\nNoticed, I don’t have to use the CSS color value on the , but the variable declared in the custom property.\n\nThe class is the parent of our nav. I am styling the container to a fixed height of 70px, setting the , and .\n\nThe CSS is used to create a flex container. Immediately we do , on the navbar class, all direct children of the class, become flex items.\n\nYou should see this on your screen at this point.\n\nNow we have to also target the child of the to make it a flexbox also.\n\nWe do this like so:\n\nWe can now use the justify-content property to align the items — , , — on the main axis.\n\nThe property takes either of these values — , , , .\n\nLearn more about justify-content on the MDN docs here.\n\nHere’s the other part of the codes to give the nav a visual appeal.\n\nAt this point, your nav should be like the cover image of this article, on your large screen.\n\nUsing media queries to target the small screen size\n\nMedia queries are a vital part of responsive web design. With media queries, you can target the viewport size of the user device screen and set styles accordingly.\n\nThe syntax for the media query looks like so:\n\nSo let’s target a small screen size of 390 and 767px, to make the nav responsive on a mobile device.\n\nYou can find the complete code on GitHub and of the nav on codepen below.\n\nThanks for reading and if you find this article inspiring, please give it some claps so others can see it and share it on Twitter.\n\nYou can find the complete code on GitHub\n\nYou can also follow me on Twitter."
    },
    {
        "link": "https://w3schools.com/css/css3_flexbox.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    }
]