[
    {
        "link": "https://leafletjs.com/reference.html",
        "document": "This reference reflects Leaflet 1.9.4. Check this list if you are using a different version of Leaflet.\n\nThe central class of the API — it is used to create a map on a page and manipulate it.\n\nL.Marker is used to display clickable/draggable icons on the map. Extends .\n\nBase model for L.Popup and L.Tooltip. Inherit from it for custom overlays like plugins.\n\nUsed to open popups in certain places of the map. Use Map.openPopup to open popups while making sure that only one popup is open at one time (recommended for usability), or use Map.addLayer to open as many as you want.\n\nUsed to display small texts on top of map layers.\n\nUsed to load and display tile layers on the map. Note that most tile servers require attribution, which you can set under . Extends .\n\nUsed to display WMS services as tile layers on the map. Extends .\n\nUsed to load and display a single image over specific bounds of the map. Extends .\n\nUsed to load and display a video player over specific bounds of the map. Extends .\n\nUsed to load, display and provide DOM access to an SVG file over specific bounds of the map. Extends .\n\nAn SVG overlay uses the element.\n\nAn abstract class that contains options and constants shared between vector overlays (Polygon, Polyline, Circle). Do not use it directly. Extends .\n\nNote that points you pass when creating a polygon shouldn't have an additional last point equal to the first one — it's better to filter out such points.\n\nIt's an approximation and starts to diverge from a real circle closer to poles (due to projection distortion).\n\nA circle of a fixed size with radius specified in pixels. Extends .\n\nAllows vector layers to be displayed with SVG. Inherits .\n\nDue to technical limitations, SVG is not available in all web browsers, notably Android 2.x and 3.x.\n\nAlthough SVG is not available on IE7 and IE8, these browsers support VML (a now deprecated technology), and the SVG renderer will fall back to VML in this case.\n\nVML was deprecated in 2012, which means VML functionality exists only for backwards compatibility with old versions of Internet Explorer.\n\nAllows vector layers to be displayed with . Inherits .\n\nDue to technical limitations, Canvas is not available in all web browsers, notably IE8, and overlapping geometries might not display properly in some edge cases.\n\nUsed to group several layers and handle them as one. If you add it to the map, any layers added or removed from the group will be added/removed on the map as well. Extends .\n\nExtended that makes it easier to do the same thing to all its member layers:\n• binds a popup to all of the layers at once (likewise with )\n• Events are propagated to the , so if the group has an event handler, it will handle events from any of the layers. This includes mouse events and custom events.\n\nRepresents a GeoJSON object or an array of GeoJSON objects. Allows you to parse GeoJSON data and display it on the map. Extends .\n\nGeneric class for handling a tiled grid of HTML elements. This is the base class for all tile layers and replaces . GridLayer can be extended to create a tiled grid of HTML elements like , or . GridLayer will handle creating and animating these DOM elements for you.\n\nRepresents a geographical point with a certain latitude and longitude.\n\nRepresents a point with and coordinates in pixels.\n\nRepresents an icon to provide when creating a marker.\n\nRepresents a lightweight icon for markers that uses a simple element instead of an image. Inherits from but ignores the and shadow options.\n\nA basic zoom control with two buttons (zoom in and zoom out). It is put on the map by default unless you set its option to . Extends .\n\nThe attribution control allows you to display attribution data in a small text box on a map. It is put on the map by default unless you set its option to , and it fetches attribution texts from layers with the method automatically. Extends Control.\n\nThe layers control gives users the ability to switch between different base layers and switch overlays on/off (check out the detailed example). Extends .\n\nA simple scale control that shows the scale of the current center of screen in metric (m/km) and imperial (mi/ft) systems. Extends .\n\nA namespace with static properties for browser/feature detection used by Leaflet internally.\n\nVarious utility functions, used by Leaflet internally.\n\nRepresents an affine transformation: a set of coefficients , , , for transforming a point of a form into and doing the reverse. Used by Leaflet in its projections code.\n\nVarious utility functions for polyline points processing, used by Leaflet internally to make polylines lightning-fast.\n\nUtility functions to work with the DOM events, used by Leaflet internally.\n\nUtility functions to work with the DOM tree, used by Leaflet internally.\n\nMost functions expecting or returning a also work for SVG elements. The only difference is that classes refer to CSS classes in HTML and SVG classes in SVG.\n\nUsed internally for panning animations, utilizing CSS3 Transitions for modern browsers and a timer fallback for IE6-9.\n\nA class for making DOM elements draggable (including touch support). Used internally for map and marker dragging. Only works for elements that were positioned with .\n\nL.Class powers the OOP facilities of Leaflet and is used to create almost all of the Leaflet classes documented here.\n\nIn addition to implementing a simple classical inheritance model, it introduces several special properties for convenient code organization — options, includes and statics.\n\nA set of methods shared between event-powered classes (like and ). Generally, events allow you to execute some function when something happens with an object (e.g. the user clicks on the map, causing the map to fire event).\n\nA set of methods from the Layer base class that all Leaflet layers use. Inherits all methods, options and events from .\n\nSome s can be made interactive - when the user interacts with such a layer, mouse events like and can be handled. Use the event handling methods to handle these events.\n\nL.Control is a base class for implementing map controls. Handles positioning. All other controls extend from this class.\n\nAn object with methods for projecting geographical coordinates of the world onto a flat surface (and back). See Map projection.\n\nBase class for vector renderer implementations ( , ). Handles the DOM container of the renderer, its bounds, and its zoom animation.\n\nA works as an implicit layer group for all s - the renderer itself can be added or removed to the map. All paths use a renderer, which can be implicit (the map will decide the type of renderer and use it automatically) or explicit (using the option of the path).\n\nDo not use this class directly, use and instead.\n\nWhenever a class inheriting from fires an event, a listener function will be called with an event argument, which is a plain object containing information about the event. For example:\n\nThe information available depends on the event type:\n\nGlobal switches are created for rare cases and generally make Leaflet to not detect a particular browser feature even if it's there. You need to set the switch as a global variable to true before including Leaflet on the page, like this:\n\nThis method restores the global variable to the original value it had before Leaflet inclusion, and returns the real Leaflet namespace so you can put it elsewhere, like this:\n\nA constant that represents the Leaflet version in use."
    },
    {
        "link": "https://leafletjs.com",
        "document": "Leaflet is the leading open-source JavaScript library for mobile-friendly interactive maps. Weighing just about , it has all the mapping features most developers ever need.\n\nLeaflet is designed with simplicity, performance and usability in mind. It works efficiently across all major desktop and mobile platforms, can be extended with lots of plugins, has a beautiful, easy to use and well-documented API and a simple, readable source code that is a joy to contribute to.\n\nHere we create a map in the div, add , and then add a marker with some text in a popup:\n\nLearn more with the quick start guide, check out other tutorials, or head straight to the API documentation. If you have any questions, take a look at the FAQ first."
    },
    {
        "link": "https://leafletjs.com/examples.html",
        "document": "Every tutorial here comes with step-by-step code explanation and is easy enough even for beginner JavaScript developers.\n\nA simple step-by-step guide that will quickly get you started with Leaflet basics, including setting up a Leaflet map (with OpenStreetMap tiles) on your page, working with markers, polylines and popups, and dealing with events.\n\nIn this tutorial, you’ll learn how to create a fullscreen map tuned for mobile devices like iPhone, iPad or Android phones, and how to easily detect and use the current user location.\n\nIn this pretty tutorial, you’ll learn how to easily define your own icons for use by the markers you put on the map.\n\nA guide to basic Leaflet accessibility - make your maps usable to persons of a wide range of abilities.\n\nIn this tutorial, you’ll learn how to create and interact with map vectors created from GeoJSON objects.\n\nA case study of creating a colorful interactive choropleth map of US States Population Density with GeoJSON and some custom controls. News websites will love this.\n\nA tutorial on how to manage groups of layers and use the layer switching control.\n\nA deeper look into what zoom levels are.\n\nA primer on , how to make maps with no concept of “latitude” or “longitude”.\n\nHow to integrate with WMS and TMS services from professional GIS software.\n\nHow the default map panes work to display overlays on top of tiles, and how to override that.\n\nLeaflet can help you display images, videos and SVG elements somewhere on the map.\n\nThe following tutorials cover how to create plugins for Leaflet, and are intended only for developers experienced in JavaScript:\n\nAn overview of Leaflet’s classes, class inheritance, and conventions.\n\nHow to extend layers or create new ones, using specific entry points for doing so.\n\nHow to extend or create non-layers."
    },
    {
        "link": "https://stackoverflow.com/questions/70018229/leaftlet-adding-feature-overlay-to-control-dynamically",
        "document": "I need to add a to the overlays list. I do add some overlays when instantiating the Leaflet map, but I now need to append a dynamically, ie. based on some run time conditions.\n\nCan someone please help with appending the leaflet control layers? I simply cannot figure whether that's even possible at all. I can add the new layer to the map, but not to the overlays control section. I have also managed to add this new layer dynamically to a new control, but I need to append it to the existing control.\n\nAs a side note, I am trying to use Polymer on top of Leaflet map."
    },
    {
        "link": "https://mourner.github.io/Leaflet/reference.html",
        "document": "The central class of the API — it is used to create a map on a page and manipulate it.\n\nYou can subscribe to the following events using these methods.\n\nThe same as zoom/pan options and additionally:\n\nMap properties include interaction handlers that allow you to control interaction behavior in runtime, enabling or disabling certain features such as dragging or touch zoom (see IHandler methods). Example:\n\nYou can also access default map controls like attribution control through map properties:\n\nPanes are DOM elements used to control the ordering of layers on the map. You can access panes with map.getPane or map.getPanesmethods. New panes can be created with the map.createPane method.\n\nEvery map has the following panes that differ only in zIndex.\n\nUsed to put markers on the map. Extends Layer.\n\nYou can subscribe to the following events using these methods.\n\nIn addition to shared layer methods like and and popup methods like you can also use the following methods:\n\nInteraction handlers are properties of a marker instance that allow you to control interaction behavior in runtime, enabling or disabling certain features such as dragging (see IHandler methods). Example:\n\nUsed to open popups in certain places of the map. Use Map#openPopup to open popups while making sure that only one popup is open at one time (recommended for usability), or use Map#addLayer to open as many as you want.\n\nIf you want to just bind a popup to marker click and then open it, it's really easy:\n\nPath overlays like polylines also have a method. Here's a more complicated way to open a popup on a map:\n\nIn addition to shared layer methods like and you can also use the following methods:\n\nUsed to load and display tile layers on the map. Extends Layer.\n\nA string of the following form:\n\nmeans one of the available subdomains (used sequentially to help with browser parallel requests per domain limitation; subdomain values are specified in options; , or by default, can be omitted), — zoom level, and — tile coordinates. can be used to add to the URL to load retina tiles.\n\nYou can use custom keys in the template, which will be evaluated from TileLayer options, like this:\n\nYou can subscribe to the following events using these methods.\n\nUsed to display WMS services as tile layers on the map. Extends TileLayer.\n\nUsed to load and display a single image over specific bounds of the map. Extends Layer.\n\nAn abstract class that contains options and constants shared between vector overlays (Polygon, Polyline, Circle). Do not use it directly. Extends Layer.\n\nYou can subscribe to the following events using these methods.\n\nIn addition to shared layer methods like and and popup methods like you can also use the following methods:\n\nA class for drawing polyline overlays on a map. Extends Path. Use Map#addLayer to add it to the map.\n\nYou can also pass a multi-dimensional array to represent a shape:\n\nYou can use Path options and additionally the following options:\n\nIn addition to Path methods like and , shared layer methods like and and popup methods like you can also use the following methods:\n\nA class for drawing polygon overlays on a map. Extends Polyline. Use Map#addLayer to add it to the map.\n\nNote that points you pass when creating a polygon shouldn't have an additional last point equal to the first one — it's better to filter out such points.\n\nYou can also pass an array of arrays of latlngs, with the first array representing the outer shape and the other arrays representing holes in the outer shape:\n\nAdditionally, you can pass a multi-dimensional array to represent a shape.\n\nIn addition to Path methods like and , Polyline mehtods like and , shared layer methods like and and popup methods like you can also use the following methods:\n\nA class for drawing rectangle overlays on a map. Extends Polygon. Use Map#addLayer to add it to the map.\n\nIn addition to Path methods like and , shared layer methods like and and popup methods like you can also use the following methods:\n\nA class for drawing circle overlays on a map. Extends CircleMarker. Use Map#addLayer to add it to the map.\n\nIn addition to Path methods like and , shared layer methods like and and popup methods like you can also use the following methods:\n\nA circle of a fixed size with radius specified in pixels. Extends Path. Use Map#addLayer to add it to the map.\n\nIn addition to Path methods like and , shared layer methods like and and popup methods like you can also use the following methods:\n\nUsed to group several layers and handle them as one. If you add it to the map, any layers added or removed from the group will be added/removed on the map as well. Extends Layer.\n\nExtended layerGroup that also has mouse events (propagated from members of the group) and a shared bindPopup method. Extends Layer.\n\nIn addition to shared layer methods like and and popup methods like you can also use the following methods:\n\nYou can subscribe to the following events using these methods.\n\nRepresents a GeoJSON object or an array of GeoJSON objects. Allows you to parse GeoJSON data and display it on the map. Extends FeatureGroup.\n\nEach feature layer created by it gets a property that links to the GeoJSON feature data the layer was created from (so that you can access its properties later).\n\nAdditionally accepts all Path options for polylines and polygons.\n\nIn addition to shared layer methods like and and popup methods like you can also use the following methods:\n\nGeneric class for handling a tiled grid of HTML elements. This is the base class for all tile layers and replaces .\n\nGridLayer can be extended to create a tiled grid of HTML Elements like , or .GridLayer will handle creating and animating these DOM elements for you.\n\nTo create a custom layer, extend GridLayer and impliment the method, which will be passed a Point object with the , , and (zoom level) coordinates to draw your tile.\n\nTile creation can also be asyncronous, this is useful when using a third-party drawing library. Once the tile is finsihed drawing it can be passed to the callback.\n\nRepresents a geographical point with a certain latitude and longitude.\n\nAll Leaflet methods that accept LatLng objects also accept them in a simple Array form and simple object form (unless noted otherwise), so these lines are equivalent:\n\nAll Leaflet methods that accept LatLngBounds objects also accept them in a simple Array form (unless noted otherwise), so the bounds example above can be passed like this:\n\nRepresents a point with x and y coordinates in pixels.\n\nAll Leaflet methods and options that accept Point objects also accept them in a simple Array form (unless noted otherwise), so these lines are equivalent:\n\nAll Leaflet methods that accept Bounds objects also accept them in a simple Array form (unless noted otherwise), so the bounds example above can be passed like this:\n\nRepresents an icon to provide when creating a marker.\n\nextends and is the blue icon Leaflet uses for markers by default.\n\nRepresents a lightweight icon for markers that uses a simple element instead of an image.\n\nBy default, it has a class and is styled as a little white square with a shadow.\n\nA basic zoom control with two buttons (zoom in and zoom out). It is put on the map by default unless you set its option to . Extends Control.\n\nThe attribution control allows you to display attribution data in a small text box on a map. It is put on the map by default unless you set its option to , and it fetches attribution texts from layers with method automatically. Extends Control.\n\nThe layers control gives users the ability to switch between different base layers and switch overlays on/off (check out the detailed example). Extends Control.\n\nAn object literal with layer names as keys and layer objects as values:\n\nThe layer names can contain HTML, which allows you to add additional styling to the items:\n\nYou can subscribe to the following events on the Map object using these methods.\n\nA simple scale control that shows the scale of the current center of screen in metric (m/km) and imperial (mi/ft) systems. Extends Control.\n\nA set of methods shared between event-powered classes (like Map and Marker). Generally, events allow you to execute some function when something happens with an object (e.g. the user clicks on the map, causing the map to fire event).\n\nLeaflet deals with event listeners by reference, so if you want to add a listener and then remove it, define it as a function:\n\nA set of methods inherited from the Layer base class that all Leaflet layers use.A set of methods inherited from the Layer base class that all Leaflet layers use. These methods provide convieniant ways of binding popups to any layer.Popups will also be automatically opened when the layer is clicked on and closed when the layer is removed from the map or another popup is opened.\n\nA namespace with properties for browser/feature detection used by Leaflet internally.\n\nVarious utility functions, used by Leaflet internally.\n\nRepresents an affine transformation: a set of coefficients , , , for transforming a point of a form into and doing the reverse. Used by Leaflet in its projections code.\n\nVarious utility functions for polyine points processing, used by Leaflet internally to make polylines lightning-fast.\n\nUtility functions to work with the DOM events, used by Leaflet internally.\n\nUtility functions to work with the DOM tree, used by Leaflet internally.\n\nUsed internally for panning animations, utilizing CSS3 Transitions for modern browsers and a timer fallback for IE6-9.\n\nYou can subscribe to the following events using these methods.\n\nA class for making DOM elements draggable (including touch support). Used internally for map and marker dragging. Only works for elements that were positioned with DomUtil#setPosition\n\nYou can subscribe to the following events using these methods.\n\npowers the OOP facilities of Leaflet and is used to create almost all of the Leaflet classes documented here.\n\nIn addition to implementing a simple classical inheritance model, it introduces several special properties for convenient code organization — , and .\n\nYou may have noticed that Leaflet objects are created without using the keyword. This is achieved by complementing each class with a lowercase factory method:\n\nThe factories are implemented very easily, and you can do this for your own classes:\n\nYou use to define new classes, but you can use the same method on any class to inherit from it:\n\nThis will create a class that inherits all methods and properties of the parent class (through a proper prototype chain), adding or overriding the ones you pass to . It will also properly react to :\n\nYou can call parent methods (including constructor) from corresponding child ones (as you do with calls in other languages) by accessing parent class prototype and using JavaScript's or :\n\nis a special property that unlike other objects that you pass to will be merged with the parent one instead of overriding it completely, which makes managing configuration of objects and default values convenient:\n\nThere's also , a method for conveniently merging options passed to constructor with the defauls defines in the class:\n\nis a special class property that merges all specified objects into the class (such objects are called mixins).\n\nYou can also do such includes in runtime with the method:\n\nis just a convenience property that injects specified object properties as the static properties of the class, useful for defining constants:\n\nIf you're a plugin developer, you often need to add additional initialization code to existing classes (e.g. editing hooks for ). Leaflet comes with a way to do it easily using the method:\n\nYou can also use the following shortcut when you just need to make one additional method call:\n\nWhen creating a plugin you may want your code to have access to the event methods. By extending the class you can create a class which inherits event-related methods like , and\n\nYou can still use the old-style `L.Mixin.Events` for backward compatibility.\n\nThe base class for all Leaflet layers that implements basic shared methods and functionality. Can be extended to create custom layers by extending and implementing the and methods.\n\nCustom layers should extend the base class. provides convenience methods for your layer like , and .\n\nThe most important things know about when implementing custom layers are Map viewreset event and latLngToLayerPoint method. is fired when the map needs to reposition its layers (e.g. on zoom), and is used to get coordinates for the layer's new position.\n\nAnother event often used in layer implementations is moveend which fires after any movement of the map (panning, zooming, etc.).\n\nAnother thing to note is that you'll usually need to add class to the DOM elements you create for the layer so that it hides during zoom animation. Implementing zoom animation for custom layers is a complex topic and will be documented separately in future, but meanwhile you can take a look at how it's done for Leaflet layers (e.g. ) in the source.\n\nEvery layer should extend from and implement the following methods:\n\nHere's how a custom layer implementation usually looks:\n\nClasses extending from will also inherit the following options:\n\nClasses extending from will also fire the following events:\n\nClasses extending from will also inherit the following methods:\n\nControls represents a UI element in one of the corners of the map. Implemented by zoom, attribution, scale and layers controls. Can be used to create custom controls by extending and implementing the and methods.\n\nEvery control in Leaflet should extend from Control class and additionally have the following methods:\n\nIf specify your own constructor for the control, you'll also probably want to process options properly:\n\nThis will allow you to pass options like when creating the control instances:\n\nClasses extending from will also inherit the following options:\n\nClasses extending from will also inherit the following methods:\n\nControl positions (map corner to put a control to) are set using strings. Margins between controls and the map border are set with CSS, so that you can easily override them.\n\nAn object with methods for projecting geographical coordinates of the world onto a flat surface (and back). See Map projection.\n\nLeaflet comes with a set of already defined projections out of the box:\n\nDefines coordinate reference systems for projecting geographical points into pixel (screen) coordinates and back (and to coordinates in other units for WMS services). See Spatial reference system.\n\nLeaflet comes with a set of already defined CRS to use out of the box:\n\nIf you want to use some obscure CRS not listed here, take a look at the Proj4Leaflet plugin.\n\nEvent object is an object that you recieve as an argument in a listener function when some event is fired, containing useful information about that event. For example:\n\nThe base event object. All other event objects contain these properties too.\n\nGlobal switches are created for rare cases and generally make Leaflet to not detect a particular browser feature even if it's there. You need to set the switch as a global variable to before including Leaflet on the page, like this:\n\nThis method restores the L global variable to the original value it had before Leaflet inclusion, and returns the real Leaflet namespace so you can put it elsewhere, like this:\n\nA constant that represents the Leaflet version in use."
    },
    {
        "link": "https://asmaloney.com/2014/01/code/creating-an-interactive-map-with-leaflet-and-openstreetmap",
        "document": "I’ve known for a while that the interactive map of the world showing some of my bloodstain pattern analysis software customers (edit 13 Oct 2024: page no longer available) was kind of slow. I also knew that I was using a very outdated version of Google’s for displaying the data. Yesterday I decided to take a look at it to see what I needed to do to fix it up.\n\nMy first stop was the Google page about moving to v3 of the API. Apparently I needed to get a new API key by signing up for something with my Google Account. Google has added usage limits and now tracks absolutely everything (yes, they probably did before, but now it’s more explicit). I also needed to consider whether or not I can use the maps on a commercial site.\n\nI don’t like hurdles, and I like simplicity, so I decided to look around for alternatives. I remembered looking at OpenStreetMap (OSM) several years ago when I originally built my map and deciding it wasn’t quite good enough. I decided to check it out again to see how they were doing. My how things change!\n\nBecause I’m a good lazy developer (by that I mean I avoid writing things when they already exist, are well-coded, and maintainable), my first thought was to grab a WordPress plugin and to use it for my map. I tried out the OSM – OpenStreetMap plugin. While it sort-of worked for what I was trying to do, it was not as customizable as I’d like, it seemed too heavy for one map on one site, and it tied me to WordPress (which my other site hasn’t moved to yet).\n\nMy next thought was to look for a JavaScript library with a nice API to integrate and handle most of the heavy lifting. Poking around the site, I ran across OpenLayers. It looked pretty powerful, and has a ton of stuff in its API. I downloaded it (10M?) and took a look but I really just wanted something simpler. Then I found Leaflet. Exactly what I needed. Small, simple, great documentation, and some really straightforward examples.\n\nEven though I had to brush up on some JavaScript, jQuery, and JSON concepts—things I rarely use— I ended up researching possibilities and replacing my Google Map with an OpenStreetMap/Leaflet version in just a couple of hours. It’s now much faster and simpler to customize.\n\nIn this article, I’ll step through an example that shows how to:\n• set up a simple map using the Leaflet JavaScript library\n• have the markers show some data when clicked\n\nAs an example, I’m going to create a map showing the countries I’ve lived in or travelled through for a month or more. The example consists of three files and two images:\n• maps/leaf-demo.js – JavaScript to create the map and populate it with markers\n• maps/markers.json – a list of markers with their latitude & longitude and a url to display\n• maps/images/pin24.png and pin48.png – the pin to display (one for normal display, one for retina)\n\nLet’s start by taking a look at the HTML.\n\nThis file starts out with standard HTML header stuff, so the first interesting lines are these:\n\nThese lines pull in the CSS and JavaScript libraries we need to display and work with the maps. In this example, we are linking to these files stored on a remote server using a . Another option would be to host these files ourselves, but the advantages of using these CDNs are:\n• lightens the load on your server\n• CDNs distribute the content so it’s closer to the user, resulting in faster downloads\n• browsers limit the number of HTTP requests to each host, so accessing multiple, different hosts allows fetching data in parallel, resulting in faster display of the page (we’ll see this idea again with the tiles which make up the map)\n• if a user has visited another site using the same script, it may already be in the user’s cache resulting in no download at all and faster display of the page\n\nThis example uses cdn.leafletjs.com to get the Leaflet CSS and library and ajax.googleapis.com to get the jQuery library. Note that leaving the protocol off the Google URL is not an error – this is a protocol relative URL (a.k.a. scheme-less URI).\n\nThe next interesting part of this HTML file is this div:\n\nWe’re creating a div called “map” with a height and a border. This is the div that is going to be filled in with our map when we create it in our JavaScript. If we do not specify a width, it will adjust the width of the map to the page dynamically.\n\nThe last part of this file is the key. This is where we load the JavaScript that does the work of setting up and displaying our map.\n\nThe first script is a JSON file with our marker information and the second is the code to setup and display our map. Note that the second script has to come after the map div is created so the JavaScript has something to target. In this case, we’re loading a local file, so let’s take a look at that next.\n\nOur initial JavaScript is pretty straightforward. All we are doing here is creating the map and adding a tile layer. The tile images are coming from the OpenStreetMap servers which are good for testing. Note that they say on their site:\n\nThis creates a new map, assigns it to the ‘map’ div and sets some options. In this case we are centering the initial view at 20° latitude and 5° longitude, setting the minimum zoom level to 2 and the default zoom level to 2. There are many other options you can set here to tweak the way you want your map displayed.\n\nThis code adds a layer to the map telling it what set of tiles to display and where to get them. There are several different servers you can use – or you can host your own.\n\nAgain, Leaflet has many options to use when creating a tileLayer. In our example, the first argument is the URL template so Leaflet knows how to fetch the tiles from the servers properly. Next is the attribution – this is what shows up in the bottom-right corner of the map. It is important that you add the right info here for proper attribution of the tile set.\n\nFinally we have a list of subdomains. This array of strings is substituted into the {s} portion of the URL template. Note that this list depends on the tile servers you are using. This option allows a browser to download from several servers at the same time (remember I mentioned this when explaining CDNs above?) which results in faster loading of the page and faster updates as the user drags around the map. One of the problems I had with the old Google solution is that it only used one server, so it was slow. This capability makes it much faster.\n\nOK, so now we have an interactive map we can drag around and zoom in and out. Let’s add some markers to it.\n\nAlthough it is possible to put the marker data right in with our JavaScript file, I like keeping my data in a separate file so it’s easy to swap out or update without modifying the main file.\n\nFor this example, I’m using JSON as a little database to store the country name, Wikipedia url, and longitude and latitude of each of the countries I’ve either lived in or travelled through for a month or more.\n\nTo read this data and add the markers to our map, I just loop over the array and call the Leaflet function to create markers:\n\nLeaflet’s markers offer many options for customization. In our example, we are creating a marker at a specific location, binding a simple popup to it, and adding it to our map. The latitude and longitude and the data to display in the popup (the country name and link to Wikipedia) are read from our JSON file.\n\nSo far, so good, but those markers are kind of big, so let’s swap them out for our own icons.\n\nI found a free pin icon over at clker.com that I thought would look good on this map. I played around a bit with different sizes and settled on a height of 24 pixels. I created two versions: the regular version with a height of 24 pixels and a double-sized version for retina displays with a height of 48 pixels. And of course I ran these through ImageOptim to compress them as much as possible.\n\nSince we are going to add our own icon, the code we did in the last section needs to be changed a bit. Here’s what we have now:\n\nIn this code, the first thing I’m doing is grabbing our URL and removing the file name so I can create a URL for the icons. Not being a JavaScript guru, I’m not 100% sure this is the best way to do this, and it feels hacky, but it does work. (If you know of a better way, please contact me!)\n\nThe next line declares a var myIcon to hold our new icon. Leaflet’s icon allows you to specify all sorts of things, but the key ones are the ones we use here. The iconUrl, iconRetinaUrl, and iconSize options are self-explanatory. The iconAnchor is the pixel location in the icon file that corresponds to the specific latitude and longitude. The popupAnchor specifies where the popup should be located relative to the iconAnchor.\n\nOne last thing to do with our new icon is actually apply it. To do that, we simply add it as an option when creating our markers {icon: myIcon} (line 24).\n\nHere’s our final result – an interactive map indicating the countries I’ve either lived in or travelled through for a month or more.\n\nIf you end up with too many markers on your map, consider using Leaflet.markercluster to cluster them!\n\nI hope this is useful to someone out there in internet-land!\n\nAs always, if you have suggestions on how to improve my code or make things easier, please comment below or feel free to contact me.\n\nProject Files: The files used in this example are available on GitHub. Note that the version on GitHub might look different that what is outlined here since it has been updated to use more recent versions of the libraries. I recommend using it instead of copying the code on this page.\n\nUpdate 12 July 2016: MapQuest discontinued the tile set I was using, so I switched to OpenStreetMap’s tiles. Note that these are useful only for testing. They say on their site:\n\nUpdate 12 July 2016: Updated example to use Leaflet 0.7.7 (no code changes, just including newer version of javascript)."
    },
    {
        "link": "https://leafletjs.com/examples/quick-start",
        "document": ""
    },
    {
        "link": "https://medium.com/@timndichu/getting-started-with-leaflet-js-and-react-rendering-a-simple-map-ef9ee0498202",
        "document": "Creating a Plain HTML, CSS, and JS Example with Leaflet\n\nIn this section, we’ll create a simple HTML page that includes the Leaflet.js library and demonstrates how to render a basic map, add a marker, and a popup.\n\nOpen up your favorite text editor and create a new HTML file (e.g., index.html) and set up the basic structure:\n\nNext, create a new JavaScript file called ‘app.js’ in the same directory as your HTML file. This is where we’ll write the code to render the map, add a marker, and a popup\n\nAt this point, if we open our index.html in a browser, we should be able to see a map with a marker.\n\nOkay, what did we just do?\n\nHere, we used the method to create a new map instance and pass in the ID of the HTML element ‘map’, which is the where our map will be rendered.\n\nThe method sets the initial view of the map, with the specified and , and a . The higher the zoom level, the closer the map will be displayed.\n\nAbove, we used the method to create a tile layer.\n\nA tile layer is a set of image tiles that make up the map’s visual representation. In this example, we’re using the OpenStreetMap tile layer provided by the URL . The {s}, {z}, {x}, and {y} are placeholders for subdomains, zoom level, and tile coordinates, respectively. Leaflet automatically replaces these placeholders to load the correct tiles as you pan and zoom the map.\n\nThe attribution option in the tile layer is used to give credit to OpenStreetMap contributors. Providing proper attribution is essential when using map data from third-party sources.\n\nTo add a marker to the map, we use the method and pass in the latitude and longitude as an array . The marker will be placed at this location on the map.\n\nNext, we bind a popup to the marker using the method. The popup content is the string “Hello, I’m a marker!”. The method is then used to display the popup immediately after adding the marker to the map.\n\nLeaflet provides various tile layers that you can use to change the appearance and style of your map. Apart from OpenStreetMap, you can use other providers like Mapbox, Stamen, Esri, and more.\n\nHere’s an example of how to use the Mapbox tile layer:\n\nTo use the Mapbox tile layer, you need to sign up for a Mapbox account and obtain an access token and map ID. Replace ‘your-mapbox-map-id’ and ‘your-mapbox-access-token’ with your actual Mapbox credentials"
    },
    {
        "link": "https://stackoverflow.com/questions/30316693/using-openstreet-map-in-website-with-leafletjs-to-display-heapmap",
        "document": "Is it possible to download OSM or embed OSM and use leafletjs on top of it to display heat map?\n\nI have searched a lot and could not find anything related. I wanted something like this form Google Maps.\n\nI did find the mapbox but we need to pay them. I need something open source."
    },
    {
        "link": "https://forum.bootstrapstudio.io/t/using-leaflet-for-openstreetmap-integration/6089",
        "document": "Beside my interest on how to make custom options in bootstrap available, I have some basic tips for openstreetmap integration available and plan of course to share it also online as a ready to use component. But as said, before I want to know, how to provide customizable components without any long instructions.\n\nOpenstreetmap integration is very straight forward (even I didn't get the preview in bootstrap studio app working, but in external preview works pretty well).\n\nAt any place you want to display a map (with location), place a **\n\nAdd the following css and js libraries to your project (I prefered to use lightweighted leaflet):\n\nThen you need craft your own - some simple - js to initiatlize the map (eg. RIGHT-CLICK Javascript in your Design pane and choose create osm-init.js):\n\nAttention: Take care on right order of your javascripts - osm-init.js should be after leaflet.js.\n\nOpen preview and have fun and some more fun on checking lot of options and other examples for displaying different layers and multiple popups, etc. !\n\nAs said, it would be a great opportunity for this usecase to have just 2-3 bss-data fields in the option pane (at least for the lat & long) ... but may be I provide the component just with some view instructions."
    }
]