[
    {
        "link": "https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Object.Destroy.html",
        "document": "Suggest a change Thank you for helping us improve the quality of Unity Documentation. Although we cannot accept all submissions, we do read each suggested change from our users and will make updates where applicable. Close For some reason your suggested change could not be submitted. Please <a>try again</a> in a few minutes. And thank you for taking the time to help us improve the quality of Unity Documentation. Close Switch to Manual\n\nThe object is destroyed immediately after the current Update loop, or seconds from now if a time is specified. If is a Component, this method removes the component from the GameObject and destroys it. If is a GameObject, it destroys the GameObject, all its components and all transform children of the GameObject. Actual object destruction is always delayed until after the current Update loop, but is always done before rendering.\n\n\n\nNote: When destroying MonoBehaviour scripts, Unity calls OnDisable and OnDestroy before the script is removed.\n\n\n\nAdditional resources: Object.DestroyImmediate"
    },
    {
        "link": "https://discussions.unity.com/t/how-to-check-if-a-gameobject-is-being-destroyed/822565",
        "document": ""
    },
    {
        "link": "https://docs.unity3d.com/6000.0/Documentation/Manual/class-GameObject.html",
        "document": "Unity’s GameObject class represents anything that can exist in a SceneA Scene contains the environments and menus of your game. Think of each unique Scene file as a unique level. In each Scene, you place your environments, obstacles, and decorations, essentially designing and building your game in pieces. More info\n\nSee in Glossary. GameObjects are the building blocks for scenes in Unity and act as a container for functional components which determine how the GameObject looks and what it does.\n\nThe GameObject class class provides a collection of methods which allow you to work with GameObjects in your code. These include methods for finding, making connections, and sending messages between GameObjects, adding or removing components attached to the GameObject, and setting values relating to their status within the scene.\n\nFor a complete reference of every member of the GameObject class, refer to the GameObject script reference.\n\nFor information on using GameObjects in the Scene and Hierarchy in the Unity Editor, refer to Introduction to GameObjects.\n\nAll GameObjects share a set of controls at the top of the InspectorA Unity window that displays information about the currently selected GameObject, asset or project settings, allowing you to inspect and edit the values. More info\n\nSee in Glossary relating to the GameObject’s status within the scene, and these can be controlled via the GameObject’s scripting API.\n\nGameObjects are active by default, but can be deactivated, which turns off all components attached to the GameObject. This generally means it will become invisible, and not receive any of the normal callbacks or events such as or .\n\nThe GameObject’s active status is represented by the checkbox to the left of the GameObject’s name. You can control this using .\n\nYou can also use to read the current active state of a GameObject. Use to read whether the GameObject is actually active in the scene. is necessary because whether a GameObject is actually active is determined by its own active state and the active state of all its parents. If any of its parents aren’t active, then it’s not active despite its own active setting.\n\nSome of Unity’s systems, such as Global IlluminationA group of techniques that model both direct and indirect lighting to provide realistic lighting results.\n\nSee in Glossary, Occlusion, Batching, Navigation, and Reflection ProbesA rendering component that captures a spherical view of its surroundings in all directions, rather like a camera. The captured image is then stored as a Cubemap that can be used by objects with reflective materials. More info\n\nSee in Glossary, rely on the static status of a GameObject. You can control which of Unity’s systems consider the GameObject to be static by using . For more information, refer to Static GameObjects.\n\nTags provide a way of marking and identifying types of GameObject in your scene and Layers provide a similar but distinct way of including or excluding groups of GameObjects from certain built-in actions, such as rendering or physics collisions.\n\nFor more information about how to use Tags and Layers in the editor, refer to the main user manual pages for TagsA reference word which you can assign to one or more GameObjects to help you identify GameObjects for scripting purposes. For example, you might define and “Edible” Tag for any item the player can eat in your game. More info\n\nSee in Glossary and LayersLayers in Unity can be used to selectively opt groups of GameObjects in or out of certain processes or calculations. This includes camera rendering, lighting, physics collisions, or custom calculations in your own code. More info\n\nSee in Glossary.\n\nYou can modify tag and layer values via script using the and properties. You can also check a GameObject’s tag efficiently by using the method, which includes validation of whether the tag exists, and doesn’t cause any memory allocation.\n\nYou can add or remove components at runtime, which can be useful for procedurally creating GameObjects, or modifying how a GameObject behaves. Note, you can also or script components, and some types of built-in component, via script without destroying them.\n\nThe best way to add a component at runtime is to use , specifying the type of component within angle brackets as shown. To remove a component, you must use method on the component itself.\n\nThe simplest case is where a script on a GameObject needs to access another Component attached to the same GameObject (remember, other scripts attached to a GameObject are also Components themselves). To do this, the first step is to get a reference to the Component instance you want to work with. This is done with the GetComponent method. Typically, you want to assign the Component object to a variable, which is done in using the following code. In this example the script is getting a reference to a RigidbodyA component that allows a GameObject to be affected by simulated gravity and other forces. More info\n\nSee in Glossary component on the same GameObject:\n\nOnce you have a reference to a Component instance, you can set the values of its properties much as you would in the Inspector:\n\nYou can also call methods on the Component reference, for example:\n\nNote: you can have multiple custom scriptsA piece of code that allows you to create your own Components, trigger game events, modify Component properties over time and respond to user input in any way you like. More info\n\nSee in Glossary attached to the same GameObject. If you need to access one script from another, you can use GetComponent as usual and just use the name of the script class (or the file name) to specify the Component type you want.\n\nIf you attempt to retrieve a Component type that hasn’t actually been added to the GameObject then GetComponent will return null. You will get a null reference error at runtime if you try to change any values on a null object.\n\nAlthough they sometimes operate in isolation, it’s common for scripts to keep track of other GameObjects, or more commonly, components on other GameObjects. For example, in a cooking game, a chef might need to know the position of the stove. Unity provides different ways to retrieve other objects, each appropriate to certain situations.\n\nLink to GameObjects with variables in the Inspector\n\nThe most straightforward way to find a related GameObject is to add a public GameObject variable to the script:\n\nThis variable will be visible in the Inspector, as a GameObject field.\n\nYou can now drag an object from the scene or Hierarchy panel onto this variable to assign it.\n\nThe GetComponent function and Component access variables are available for this object as with any other, so you can use code like the following:\n\nAdditionally, if you declare a public variable of a Component type in your script, you can drag any GameObject that has that Component attached onto it. This accesses the Component directly rather than the GameObject itself.\n\nLinking objects together with variables is most useful when you are dealing with individual objects that have permanent connections. You can use an array variable to link several objects of the same type, but the connections must still be made in the Unity editor rather than at runtime. It’s often convenient to locate objects at runtime and Unity provides two basic ways to do this, as described below.\n\nSometimes, a game Scene makes use of multiple GameObjects of the same type, such as collectibles, waypoints, and obstacles. These might need to be tracked by a particular script that supervises or reacts to them (for example, all waypoints might need to be available to a pathfinding script). Using variables to link these GameObjects is a possibility but it makes the design process tedious if each new waypoint has to be dragged to a variable on a script. Likewise, if a waypoint is deleted, then it’s a nuisance to have to remove the variable reference to the missing GameObject. In cases like this, it is often better to manage a set of GameObjects by making them all children of one parent GameObject. The child GameObjects can be retrieved using the parent’s Transform componentA Transform component determines the Position, Rotation, and Scale of each object in the scene. Every GameObject has a Transform. More info\n\nSee in Glossary (because all GameObjects implicitly have a Transform):\n\nYou can also locate a specific child object by name using the Transform.Find method:\n\nThis can be useful when a GameObject has a child GameObject that can be added and removed during gameplay. A tool or utensil that can be picked up and put down during gameplay is a good example of this.\n\nWhile editing your project you can set up references between GameObjects in the Inspector. However, sometimes it’s impossible to set these up in advance (for example, finding the nearest item to a character in your game, or making references to GameObjects that were instantiated after the Scene loaded). In these cases, you can find references and send messages between GameObjects at runtime.\n\nallows you to send out a call to a named method, without being specific about where that method should be implemented. You can use it to call a named method on every MonoBehaviour on a particular GameObject or any of its children. You can optionally choose to enforce that there must be at least one receiver (or an error is generated).\n\nis a little more specific, and only sends the call to a named method on the GameObject itself, and not its children.\n\nis similar, but sends out the call to a named method on the GameObject and all its parents.\n\nFind GameObjects by Name or Tag\n\nIt’s always possible to locate GameObjects anywhere in the Scene hierarchy as long as you have some information to identify them. Individual objects can be retrieved by name using the GameObject.Find function:\n\nAn object or a collection of objects can also be located by their tag using the GameObject.FindWithTag and GameObject.FindGameObjectsWithTag methods.\n\nFor example, in a cooking game with one chef character, and multiple stoves in the kitchen (each tagged “Stove”):\n\nYou can create and destroy GameObjects while your project is running. In Unity, a GameObject can be created using the Instantiate method which makes a new copy of an existing object.\n\nFor a full description and examples of how to instantiate GameObjects, see Instantiating Prefabs at Runtime.\n\nThe Destroy method destroys an object after the frame update has finished or optionally after a short time delay:\n\nNote that the Destroy function can destroy individual components and not affect the GameObject itself. A common mistake is to write and assume it destroys the GameObject the script is attached to:\n\nrepresents the script, and not the GameObject. It will actually just destroy the script component that calls it and leave the GameObject intact but with the script component removed.\n\nThe GameObject class offers script-based alternatives to the options available in Unity’s GameObject menu that allows you to create primitive objects.\n\nTo create instances of Unity’s built-in primitives, use GameObject.CreatePrimitive, which instantiates a primitive of the type that you specify. The available primitive types are Sphere, Capsule, Cylinder, Cube, Plane and QuadA primitive object that resembles a plane but its edges are only one unit long, it uses only 4 vertices, and the surface is oriented in the XY plane of the local coordinate space. More info\n\nSee in Glossary."
    },
    {
        "link": "https://aliemreonur.medium.com/instantiating-destroying-gameobjects-in-unity-9772d399d6aa",
        "document": "Hey! This is my 5th day on this journey. I actually wanted to observe my pace myself in order to design my end time more properly. Now you have it! I am aiming to build up the necessary skills in order to be an industry ready game developer in 120 days. So far so good, I will keep up the pace!\n\nI have always wondered how do we actually fire bullets in games. During my youth, I played Counter-Strike:Source for many years and I really felt like I was really firing a gun with a mag holding bullets (well, not a killer when you look at it now :) ).\n\nBullets are just an example of game object creation during runtime. So how do we create objects like bullets during gameplay?\n\nThe idea is simple, we simply create a new game object or use an existing in a pool and give it a speed.\n\nTo create a new object during runtime, we use “Instantiate” in Unity. With Instantiate, we are able to create a predetermined game objects as the game continues. So how are we going to predetermine these objects?\n\nThat’s where Prefabs come into play in Unity. Prefabs are basically predetermined game objects that are ready to be used.\n\nTo be organized, we should create a “Prefabs” folder in our Projects tab. Creating a prefab of a game object is just by dragging and dropping a game object to projects window.\n\nWe will notice that the game object we have created a prefab will now have a blue color in our Hieararchy.\n\nPrefabs are just templates that makes our lives easier. A prefab stores all of the information of an object up to the time it has been created as a prefab. If you are designing a game that has different game objects that share some amount of information, a prefab will be handy for you.\n\nIn order to use the created prefabs in a proper way, we need to know their logic behind it. For detailed information, you can check Unity’s documentation by clicking here.\n\nIf we change the properties of a game object via its prefab, it will be applied all of the game objects that exists on the scene. However, if we make a change on an existing game object in the scene, the prefab will not be updated automatically. Thus, making changes on a prefab is not the same as making changes on a clone existing in the scene view that is created from a prefab. This makes sense as we need to perceive the prefabs as templates. Luckily, Unity makes it possible to update the prefab that has changed from the scene view by using “override”.\n\nIf you ever want to apply the changes you have made to an instance of a prefab in the scene, you can simply update the prefab by clicking “Overrides — Apply All” from the inspector.\n\nUnity is clever for sure, but it needs our guidance to know the object that we want to instantiate during the runtime. Since we are building a Space Shooter game and our ship will fire lasers, we will instantiate lasers. First, we make a prefab of our lasers and place it under our Prefabs folder in the Projects panel to keep everything proper.\n\nSince we want the laser to be special to the Player script, we have defined a private GameObject variable with SerializeField attribute in order to manipulate it from the Inspector.\n\nPlease note that we should always drag and drop the prefab from the project tab, rather than the scene view, as I have mentioned earlier.\n\nAs our script now knows about the laser we are going to initiate, we can continue to coding. First of all, we need to decide when we want the laser to be initiated in the game view? For this game, we want our cube (Hey! It will be a spaceship OK?) to fire a capsule (Alright! LASER!) when we hit the Space Key.\n\nUnity has every possible scenario for key movements: pressing down, holding and leaving the button up. “Input.GetKeyDown” will be the function that we are going to use in this case.\n\nWith this code, we instantiate a laser gameobject, at the position of our player. Quaternion.identity is the part that defines the rotation of the instantiated object. Quaternion.identity simply means we want no rotation on the created object.\n\nIf you create a laser script and make the lasers move upwards once they are initiated, you will observe that they are being initiated at the center of our Player gameobject. In order to fix this, we need to find the optimal location to create the lasers by trial and error. In my case, the optimal solution has been as below:\n\nSuccess! You are now firing the lasers!\n\nIt is actually very simple to destroy the game objects in Unity. Simply by typing Destroy(gameObject). If you want to destroy the gameobject with a delay, we can state the seconds to count before destroying the game object by :\n\nFor instance, to destroy our game object if it takes damage with 1 life left, we will type :\n\nFor more information regarding Destroy, you can check Unity’s documentation here. A use case of Destroy will be included in my collisions and triggers article."
    },
    {
        "link": "https://discussions.unity.com/t/remove-gameobject-from-list-and-destroy/920812",
        "document": ""
    },
    {
        "link": "https://medium.com/unity-coder-corner/unity-state-based-buttons-48f88a054d5d",
        "document": "When I first started using Unity, I fell in love with the way that you could just make a button. No fuss, no issue, just right-click->UI->Button and you’re done. What more could you need? All a button does is get clicked right?\n\nLet’s take a moment and list out the 6 things a button can possibly do\n• A button can be toggled and have more than one state\n• A button could have text or an icon\n• A button’s text, icon, color, or shape can change with its state\n• A button can have a value\n\nThe Unity button can handle 4.5 out of 6 of those features. The 1 and a half features that it can’t handle is being able to be toggled and the ability for it to have a baked in value.\n\nSo you may be confused about the second part. It is true that a button can be set to a function which has a baked in value so you can get away with this. But take a moment and consider how you would make that system work when you want the value to change between states."
    },
    {
        "link": "https://discussions.unity.com/t/best-way-to-organize-onclick-events-for-unity-buttons/881227",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/47737716/unity-buttons-on-click",
        "document": "Hi so I have 4 buttons in a prefab I have a plus button a - button which I have set up so that when you click the + button it should edit the text in 2 of the other buttons to say Sell 10 and Buy 10 and when you click + again it will say Buy 20 and Sell 20 etc.\n\nThese buttons have been set up by adding a c# script to the main prefab and using the on_click function of the + and - buttons. The problem I am having is what is the best way to change the text of the other 2 buttons. As this prefab will be dynamically created to make 100-200x items in the shop page I was thinking of just creating 2 gameobjects in the script attached to the prefab and dragging both buttons to them but I am sure there must be a better way to just add the text components of the buttons.\n\nAny help would be greatly appreciated thanks.\n\nI have included some images to clarify:\n\nWhat I am looking for is the best practice so that when the + or - is clicked it updates both the buy and sell buttons to go from 10 to 100 or vice versa. This is a prefab and will be cloned 200-300 times so looking for the way to do this that will have the best performance."
    },
    {
        "link": "https://docs.unity3d.com/6000.0/Documentation/Manual/UIE-Click-Events.html",
        "document": "A ClickEvent occurs when the user clicks the left mouse button (or the first button on a pointing device) over a VisualElement.\n\nA click consists of a pointer down event followed by a pointer up event on the same VisualElement. The pointer is allowed to move between the two events, as long as the down and up events occur over the same VisualElement.\n\nThis event can be used to detect clicks on visual elementsA node of a visual tree that instantiates or derives from the C# class. You can style the look, define the behaviour, and display it on screen as part of the UI. More info\n\nSee in Glossary that aren’t buttons. For example, the implementation of the control uses the to show or hide the check mark, and to change the control’s value.\n\nThe base class for is PointerEventBase. For more information please also see the documentation on Pointer Events.\n\nThe has no unique properties, but inherits all properties from its base class. You can find a list of properties on the Pointer Events page.\n\nUnity sends this event when the left mouse button is clicked over a visual element.\n\n: The element underneath the mouse or pointing device when the click occurred.\n\nThe following example registers for a on a visual element:\n\nThe following example shows how to react to the ClickEvent on a colored visual element. When an element is clicked, its color will change to a new, random color.\n\nTo see the example in action, do the following:\n• Copy the example code into the C# script.\n• Under Window > UI Toolkit > Click Event Example, open the newly created Editor window."
    },
    {
        "link": "https://discussions.unity.com/t/how-do-you-handle-ui-with-a-lot-of-states-rules/783817",
        "document": ""
    }
]