[
    {
        "link": "https://learn.microsoft.com/en-us/visualstudio/ide/create-csharp-winform-visual-studio?view=vs-2022",
        "document": "Tutorial: Create a Windows Forms app in Visual Studio with C#\n\nIn this tutorial, you create a simple C# application that has a Windows-based user interface (UI). The app has a button that changes the text of a label. This simple app has all the components used for more complicated Windows Forms programs.\n\nFirst, create a C# application project. The project type comes with all the template files you need to create your application.\n\nAfter you select your C# project template and name your project, Visual Studio opens a form for you. A form is a Windows user interface. Create a Hello World application by adding controls to the form. Then run the app.\n• If you don't see the Toolbox option, you can open it from the menu bar. Select View > Toolbox or Ctrl+Alt+X.\n• None Select the Pin icon to dock the Toolbox window.\n• None Select the Button control and then drag it onto the form.\n• None In the Properties window, locate Text, change the name from Button1 to , and then select Enter. If you don't see the Properties window, you can open it from the menu bar. Select View > Properties Window or F4.\n• None In the Design section of the Properties window, change the name from Button1 to , and then select Enter. If you alphabetized the list in the Properties window, Button1 appears in the (DataBindings) section, instead. You can dock or anchor the controls on your form to help with automatic placement and sizing, when the form changes size. After you add a button control to create an action, add a label control to receive the text.\n• None Select the Label control from the Toolbox. Then drag it onto the form and drop it beneath the Click this button.\n• None In either the Design section or the (DataBindings) section of the Properties window, change the name of Label1 to . Then select Enter.\n• None In the Form1.cs [Design] window, double-click the Click this button to open the Form1.cs window. Alternatively, you can expand Form1.cs in Solution Explorer, and then choose View Code or select F7 from the shortcut menu on Form1.cs.\n• None In the Form1.cs window, after the private void line, type or enter as shown in the following screenshot.\n\nAfter you select your C# project template and name your project, Visual Studio opens a form for you. A form is a Windows user interface. Create a Hello World application by adding controls to the form. Then run the app.\n• If you don't see the Toolbox option, you can open it from the menu bar. Select View > Toolbox or Ctrl+Alt+X.\n• None Expand Common Controls and select the Pin icon to dock the Toolbox window.\n• None Select the Button control and then drag it onto the form.\n• None In the Properties window, locate Text. Change the name from button1 to , and then select Enter. If you don't see the Properties window, you can open it from the menu bar. Select View > Properties Window or F4.\n• None In the Design section of the Properties window, change the name from button1 to , and then select Enter. If you alphabetized the list in the Properties window, Button1 appears in the (DataBindings) section, instead. You can dock or anchor the controls on your form to help with automatic placement and sizing, when the form changes size. After you add a button control to create an action, add a label control to receive the text.\n• None Select the Label control from the Toolbox. Then drag it onto the form and drop it beneath the Click this button.\n• None In either the Design section or the (DataBindings) section of the Properties window, change the name of label1 to . Then select Enter.\n• None In the Form1.cs [Design] window, double-click the Click this button to open the Form1.cs window. Alternatively, you can expand Form1.cs in Solution Explorer, and then choose Form1.\n• None In the Form1.cs window, after the private void line, type or enter as shown in the following screenshot.\n• None Select the Start button to run the application. Several things happen. In the Visual Studio IDE, the Diagnostics Tools window opens, and an Output window opens, too. But outside of the IDE, a Form1 dialog box appears. It includes your Click this button and text that says label1.\n• None Select the Click this button in the Form1 dialog box. Notice that the label1 text changes to Hello World!.\n• None Close the Form1 dialog box to stop running the app.\n\nCongratulations on completing this tutorial. To learn more, continue with the following tutorial:\n\nOr try these other tutorials:"
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/events",
        "document": "Events enable a class or object to notify other classes or objects when something of interest occurs. The class that sends (or raises) the event is called the publisher and the classes that receive (or handle) the event are called subscribers.\n\nIn a typical C# Windows Forms or Web application, you subscribe to events raised by controls such as buttons and list boxes. You can use the Visual C# integrated development environment (IDE) to browse the events that a control publishes and select the ones that you want to handle. The IDE provides an easy way to automatically add an empty event handler method and the code to subscribe to the event. For more information, see How to subscribe to and unsubscribe from events.\n\nEvents have the following properties:\n• The publisher determines when an event is raised; the subscribers determine what action is taken in response to the event.\n• An event can have multiple subscribers. A subscriber can handle multiple events from multiple publishers.\n• Events that have no subscribers are never raised.\n• Events are typically used to signal user actions such as button clicks or menu selections in graphical user interfaces.\n• When an event has multiple subscribers, the event handlers are invoked synchronously when an event is raised. To invoke events asynchronously, see Calling Synchronous Methods Asynchronously.\n• In the .NET class library, events are based on the EventHandler delegate and the EventArgs base class.\n\nFor more information, see:\n• How to subscribe to and unsubscribe from events\n• How to publish events that conform to .NET Guidelines\n• How to raise base class events in derived classes\n\nFor more information, see Events in the C# Language Specification. The language specification is the definitive source for C# syntax and usage."
    },
    {
        "link": "https://geeksforgeeks.org/introduction-to-c-sharp-windows-forms-applications",
        "document": "Windows Forms is a Graphical User Interface(GUI) class library which is bundled in .Net Framework. Its main purpose is to provide an easier interface to develop the applications for desktop, tablet, PCs. It is also termed as the WinForms. The applications which are developed by using Windows Forms or WinForms are known as the Windows Forms Applications that runs on the desktop computer. WinForms can be used only to develop the Windows Forms Applications not web applications. WinForms applications can contain the different type of controls like labels, list boxes, tooltip etc.\n• First, open the Visual Studio then Go to File -> New -> Project to create a new project and then select the language as Visual C# from the left menu. Click on Windows Forms App(.NET Framework) in the middle of current window. After that give the project name and Click OK. Here the solution is like a container which contains the projects and files that may be required by the program.\n• After that following window will display which will be divided into three parts as follows:\n• Editor Window or Main Window: Here, you will work with forms and code editing. You can notice the layout of form which is now blank. You will double click the form then it will open the code for that.\n• Solution Explorer Window: It is used to navigate between all items in solution. For example, if you will select a file form this window then particular information will be display in the property window.\n• Properties Window: This window is used to change the different properties of the selected item in the Solution Explorer. Also, you can change the properties of components or controls that you will add to the forms.\n• Now to add the controls to your WinForms application go to Toolbox tab present in the extreme left side of Visual Studio. Here, you can see a list of controls. To access the most commonly used controls go to Common Controls present in Toolbox tab.\n• Now drag and drop the controls that you needed on created Form. For example, if you can add TextBox, ListBox, Button etc. as shown below. By clicking on the particular dropped control you can see and change its properties present in the right most corner of Visual Studio. In the above image, you can see the TextBox is selected and its properties like TextAlign, MaxLength etc. are opened in right most corner. You can change its properties’ values as per the application need. The code of controls will be automatically added in the background. You can check the Form1.Designer.cs file present in the Solution Explorer Window.\n• To run the program you can use an F5 key or Play button present in the toolbar of Visual Studio. To stop the program you can use pause button present in the ToolBar. You can also run the program by going to Debug->Start Debugging menu in the menubar.\n\nC# Windows Forms is a graphical user interface (GUI) framework that enables developers to create desktop applications for the Windows operating system. Windows Forms applications are created using the C# programming language and the .NET framework. They are built by dragging and dropping controls such as buttons, text boxes, labels, and other user interface elements onto a form.\n• The Windows Forms framework provides a rich set of controls that developers can use to build applications with. These controls are designed to provide a consistent and familiar user interface for Windows users. Developers can customize the appearance and behavior of these controls by setting various properties and handling events.\n• To create a Windows Forms application in C#, you can use Microsoft Visual Studio, which is an integrated development environment (IDE) that provides a visual designer to create and layout the user interface elements. The visual designer is a drag-and-drop interface for building your UI, and you can easily configure each control’s properties through a user-friendly interface.\n• In addition to the visual designer, Visual Studio also provides a code editor that enables developers to write the C# code for the application’s logic. Developers can handle events and perform tasks such as data validation, data manipulation, and business logic implementation.\n• Windows Forms applications are versatile and can be used to create various types of applications such as data entry, management, and reporting applications, as well as games and multimedia applications.\n\nOverall, Windows Forms applications provide an easy-to-use and familiar graphical user interface for Windows users, making it an ideal choice for building desktop applications that require a high degree of interactivity and user engagement."
    },
    {
        "link": "https://stackoverflow.com/questions/6442697/how-to-implement-a-in-program-documentation-in-c-sharp-winforms",
        "document": "For a student project we want to implement a help / documentation form.\n\nIn this form we want to display text and images that should describe / help with the application.\n\nThe information could be represented in some kind of FAQ with questions and answers. These questions could the grouped into different categories like: (General information, function X, function y, function z, ...)\n\nUnfortunately I don't know what would be a good way to implement / display this. The following possibilites come into my mind:\n• Create a PDF for each category, use a treeview for the category selection and display the PDF for the selected category\n• Use a richtext textbox in the design time and set the editable function to false in the runtime. (I do dislike this idea)\n\nI also think that updating the documentation will also be a issue. I guess I'd prefer to use an external program to write the documentation and to just include it into the program.\n\nHas anyone some advice on this issue? (C# 4.0, Winforms)"
    },
    {
        "link": "https://stackoverflow.com/questions/3940365/editor-for-end-user-documentation-in-c-sharp-winform-app",
        "document": "Great question. I like your idea of non-developers contributing to the end-user documentation.\n\nThis idea might motivate users and testers of your application to easily contribute to the documentation.\n\nThe first thing that comes to my mind, is using a some sort of wiki engine. You could build a simple function in your WinForm application, that fires up a browser and directs in to the wiki. You could use the context from which it is called to build up an url; e.g. . Here the name of the form (\"LoginForm\") is used in the url of a wiki page.\n\nAlternatively, you could simply use the embedded web browser control for WinForms to access the wiki. That would look something like:\n\nThis would be very easy to embed in your application.\n\nIn a controlled (office) environment, this would be very easy to set up. In you production environment it might be a bit more difficult, but still doable. It might leverage some end-user contributions too."
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/desktop/winforms/input-keyboard/validation?view=netdesktop-9.0",
        "document": "When users enter data into your application, you may want to verify that the data is valid before your application uses it. You may require that certain text fields not be zero-length, that a field formatted as a telephone number, or that a string doesn't contain invalid characters. Windows Forms provides several ways for you to validate input in your application.\n\nIf you need to require users to enter data in a well-defined format, such as a telephone number or a part number, you can accomplish this quickly and with minimal code by using the MaskedTextBox control. A mask is a string made up of characters from a masking language that specifies which characters can be entered at any given position in the text box. The control displays a set of prompts to the user. If the user types an incorrect entry, for example, the user types a letter when a digit is required, the control will automatically reject the input.\n\nThe masking language that is used by MaskedTextBox is flexible. It allows you to specify required characters, optional characters, literal characters, such as hyphens and parentheses, currency characters, and date separators. The control also works well when bound to a data source. The Format event on a data binding can be used to reformat incoming data to comply with the mask, and the Parse event can be used to reformat outgoing data to comply with the specifications of the data field.\n\nIf you want full programmatic control over validation, or need complex validation checks, you should use the validation events that are built into most Windows Forms controls. Each control that accepts free-form user input has a Validating event that will occur whenever the control requires data validation. In the Validating event-handling method, you can validate user input in several ways. For example, if you have a text box that must contain a postal code, you can do the validation in the following ways:\n• None If the postal code must belong to a specific group of zip codes, you can do a string comparison on the input to validate the data entered by the user. For example, if the postal code must be in the set , then you can use a string comparison to validate the data.\n• None If the postal code must be in a specific form, you can use regular expressions to validate the data entered by the user. For example, to validate the form or , you can use the regular expression . To validate the form , you can use the regular expression . For more information about regular expressions, see .NET Regular Expressions and Regular Expression Examples.\n• None If the postal code must be a valid United States Zip code, you could call a Zip code Web service to validate the data entered by the user.\n\nThe Validating event is supplied an object of type CancelEventArgs. If you determine that the control's data isn't valid, cancel the Validating event by setting this object's Cancel property to . If you don't set the Cancel property, Windows Forms will assume that validation succeeded for that control and raise the Validated event.\n\nFor a code example that validates an email address in a TextBox, see the Validating event reference.\n\nValidation is useful when you have bound your controls to a data source, such as a database table. By using validation, you can make sure that your control's data satisfies the format required by the data source, and that it doesn't contain any special characters such as quotation marks and back slashes that might be unsafe.\n\nWhen you use data binding, the data in your control is synchronized with the data source during execution of the Validating event. If you cancel the Validating event, the data won't be synchronized with the data source.\n\nSo when does a control's data get validated? This is up to you, the developer. You can use either implicit or explicit validation, depending on the needs of your application.\n\nThe implicit validation approach validates data as the user enters it. Validate the data by reading the keys as they're pressed, or more commonly whenever the user takes the input focus away from the control. This approach is useful when you want to give the user immediate feedback about the data as they're working.\n\nIf you want to use implicit validation for a control, you must set that control's AutoValidate property to EnablePreventFocusChange or EnableAllowFocusChange. If you cancel the Validating event, the behavior of the control will be determined by what value you assigned to AutoValidate. If you assigned EnablePreventFocusChange, canceling the event will cause the Validated event not to occur. Input focus will remain on the current control until the user changes the data to a valid format. If you assigned EnableAllowFocusChange, the Validated event won't occur when you cancel the event, but focus will still change to the next control.\n\nAssigning Disable to the AutoValidate property prevents implicit validation altogether. To validate your controls, you'll have to use explicit validation.\n\nThe explicit validation approach validates data at one time. You can validate the data in response to a user action, such as clicking a Save button or a Next link. When the user action occurs, you can trigger explicit validation in one of the following ways:\n• Call Validate to validate the last control to have lost focus.\n• Call ValidateChildren to validate all child controls in a form or container control.\n• Call a custom method to validate the data in the controls manually.\n\nDifferent Windows Forms controls have different defaults for their AutoValidate property. The following table shows the most common controls and their defaults.\n\nWhen a control maintains focus because the data it contains is invalid, it's impossible to close the parent form in one of the usual ways:\n\nHowever, in some cases, you might want to let the user close the form regardless of whether the values in the controls are valid. You can override validation and close a form that still contains invalid data by creating a handler for the form's FormClosing event. In the event, set the Cancel property to . This forces the form to close. For more information and an example, see Form.FormClosing."
    },
    {
        "link": "https://stackoverflow.com/questions/15430488/is-there-a-best-practice-way-to-validate-user-input",
        "document": "Subjectively, I think it would be better to provide instant feedback that the value the user entered is invalid. That way, they can immediately go back and fix it.\n\nI mean, think about it. The approach you propose would literally give them a giant list of problems at the end, which is not very user-friendly. Besides, how are they going to remember all of those problems to be able to go back and fix them one at a time? (Hint: they're not.)\n\nInstead, I recommend using the class to display any errors right next to the appropriate control. I talked a little bit more about this approach in my answer here and here.\n\nOf course, you'll still need to make sure upon final submission (clicking the OK/Submit button) that all the input is valid, but then that's just a simple case of checking for the presence of any errors.\n\nYes, the idea here is encapsulation. The Form class should only know about form stuff. It shouldn't be required to know what kind of input is/is not valid for all of your different controls.\n\nInstead, this validation logic should be placed elsewhere, such as in a class that stores your data. That class would expose public properties to get and set the data, and inside of the setter method, it would verify the data.\n\nThat means that all your Form has to do is call a setter method on your data class. The Form needs to know nothing about how to validate the data, or even what the data means, because the data class handles all of that.\n\nIf this is indeed the case, you will need to provide a constructor for the class that accepts as parameters all of the data it needs. The body of the constructor will then validate the specified data and throw an exception if any of it is invalid. The exception will prevent the class from being created, ensuring that no instance of a class that contains invalid data ever exists.\n\nSuch a class would probably not have setter methods at all—only getters.\n\nHowever, this is kind of an unusual requirement in the world of C# (however common it may be in C++). Generally, placing your validation code inside of the setters works just fine.\n\nWhy would that change anything? You still handle the validation inside of the private setters. If validation fails, you throw an exception. Because the constructor doesn't handle the exception, it continues bubbling up out of that method to the code that attempted to instantiate the object. If that code wants to handle the exception (e.g., to display an error message to the user), it can do so.\n\nGranted, throwing an exception in the case of invalid input is not necessarily a \"best practice\". The reason is that exceptions should generally be reserved for unexpected conditions, and users screwing up and providing you with invalid data is, well, to be expected. However:\n• This is the only option you have for data validation inside of a constructor, because constructors can't return values.\n• The cost of exception handling is basically negligible in UI code since modern computers can process exceptions faster than users can perceive on-screen changes."
    },
    {
        "link": "https://stackoverflow.com/questions/5435366/how-to-implement-control-validation-in-a-windows-forms-application",
        "document": "I am trying to better understand how validation works in a Windows Forms application. The internets are full of trivial examples, but I couldn't find a single non-trivial example explaining control validation. Anyway, thanks to SwDevMan81 and Hans Passant I am starting from a much better place than yesterday.\n\nThe \"real application\" has a dialog with many TextBox controls. Each of the controls implements the Validating event. As you can see in the example, ValidateChildren is called as a result of the Click event causing the Validating event to be sent to each of the controls. The app also uses an ErrorProvider control to give the user feedback. Yesterday, I did not understand how to use the Ok button Click event to perform this validation. Today, my dialog works as expected. Clicking the Ok button causes the ErrorProvider to do it's thing where a control is not valid and the dialog is not closing unexpectedly.\n\nSo while this seems to work, I am left feeling that that I \"colored outside of the lines\". Is there a \"best practice\" document/site for control validation in a Windows Forms application?\n\nOf the many things that are still confusing me, I am unable to find an explanation for the behavior of my dialog when the Ok button DialogResult property is set to return DialogResult.OK. Why does setting this property interfere with validation? (Try my example with and without that line, to see what I mean.)\n\nMy problems from yesterday (it would appear) stem mostly from not understanding the ValidateChildren method and from my setting the Ok button DialogResult property to DialogResult.OK. Setting this property to DialogResult.None seems to change some automatic behavior of the Form class.\n\nEdit: here is the final solution. I think it is easy to use while also fulfilling all the other requirements. I apologize in advance for how long this question ended up being. If I could show you all the real application, it would make more sense as to why this is so important. Anyway, thanks for helping this old dog learn a new trick.\n\nThe answer was to create one ErrorProvider for each control needing validation (vs. one ErrorProvider for the whole dialog. After that, it all was pretty simple.\n\nThis question is a follow up to one that I asked yesterday."
    },
    {
        "link": "https://medium.com/developer-rants/form-validation-in-windows-forms-with-c-b0b07284d962",
        "document": "Looks like we are turning into a C# blog. I promise I will continue the AI series later.\n\nForm validation is a somewhat complicated business on every platform, as it’s the first line of defense against the worst thing ever happened to software: users. Windows Forms offers a fairly straightforward way to ensure those meatbags won’t yank the controls like the stupid apes they are.\n\nStep 1: Tell your project about your intents\n\nTo enable form validations, right click on your project in Solution Explorer, and select Add… > Reference.\n\nThe Reference Manager apparars. Find and check , then click OK.\n\nStep 2: Define the form as a class\n\nRight click your project again, and now select Add… > Class. Name your new class, and define each form field as a public value. For example, here is form data for a simple user registration form.\n\nBy , we can now add simple constraints to each value, using modifiers. This class is a highly versatile data validation library, and it’s certainly beyond the scope of this article to explain every bit of it. However, let’s delve on a few details for a moment.\n\nFor example, the modifier is a reference to the object. In the above example, there are no arguments for either use, but you can actually add some:\n\nMost validators accept arguments. For further details, refer to the documentation.\n\nStep 3: Build your application\n\nThis is necessary for the next step.\n\nStep 4: Create a data source\n\nGo to your form, where the validation will take place. Click the Data sources tab on the left edge of the screen, and then click the Add new data source button.\n\nThe Data Source Configuration Wizard appears. Under the Where will the application get data from? question, click Object, then click Next >.\n\nOn the next list, open your project, and find the object you just created. Check the checkbox next to its name, and then click Finish.\n\nStep 5: Create form controls\n\nThe data source appears on the sidebar. Open it, and you’ll see the fields you just defined.\n\nClicking a dropdown next to a field’s name reveals a list of UI controls that can be used to input this value: , and others. If you aren’t satisfied with the options, click Customize… and you can configure which controls should be offered for various data types. You may need it because, for example, Visual Studio doesn’t think you may need a for numeric values.\n\nAfter selecting which field should use what UI component, just grab and drag each one to your form designer. Visual Studio will automatically generate the appropriate form element, complete with labels. They will be configured to the constraints you set (i.e. the range of numeric values).\n\nIf you wish to use existing form elements, you can pull a data source field over them to bind them to one. For example, grab in the list, drag it into the Designer, and drop it on a text field or combo box. It doesn’t matter if the control already has a property, the form binding won’t override it.\n\nStep 6: Adding form buttons\n\nA typical form always has a Submit button, and optionally, a Reset button. Let’s bring our form in some shape with these.\n\nFirst of all, our form needs to receive its default values. This is done in a single line, preferably in the form’s event:\n\nThis is also how you reset your form. You can bind the Reset button’s event to this method, if nothing else is going to happen here.\n\nBut wait a minute, where did this come from?\n\nIt’s the name of the instance of our data source in . Go to Form Designer, and you’ll see it on the bottom of the window. That’s where elements with no visual representation always appear.\n\nThe Submit button is a bit more complicated, because this is where validation will take place.\n\nFirst, we prepare the validation mechanism with the method. This causes every pending change to be applied to the underlying data source (exact words from the documentation).\n\nSecond, we create a variable, , to retrieve the current content of the form. Then we create as a validation context, and to retrieve potential validation errors.\n\nThird, we try to validate the object with . As a result, the list gets filled up (if there are any errors), and we show a with each error. While this may not be the best way to show them, it’s perfect for a simple demonstration.\n\nCongratulations, your validation now works! Barely, though.\n\nStep 8: Let’s take it up a (tiny) notch!\n\nYou might want to use your own error messages. You might want different error messages for different errors. Let’s go back to our class, and add some. For example, the field may have several validators. Let’s add custom error messages to each!\n\nYou might want to enable or disable the Submit button depending on whether there are any errors. This can be done by looking at :\n\nNaturally, if you want this, you need to run the validation every time any of the form controls change."
    },
    {
        "link": "https://reddit.com/r/csharp/comments/m0h6mm/windows_forma_validation_best_practices",
        "document": "How should I validate the input of multiple texboxes without making a mess?\n\nTo put it into context let's say you have a list of Person objects, (each person has a name and an age number), you can add a Person on the list via a button and 2 textbox in which you type the age and the name of the person.\n\nWhat would you do to check if the input is valid?\n\nWhat I used to do was adding a new object inside a try catch block and I would create a message box according to the exception that was thrown, in this case I would just parse the age into an int and if it failed it would go in a catch, in there I would check if the validation failed because the textbox was empty or because there was an invalid string\n\nSomeone said to me that what I was doing was not a good way to handle validation and I was suggested to use if else blocks, but I find that way even more messy and also slow, you end up with a lot of if else and the code is not as easy to understand as it was with one simple try with multiple catch blocks\n\nSo how would you handle this kind of validation problems?"
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/floating-point-numeric-types",
        "document": "The floating-point numeric types represent real numbers. All floating-point numeric types are value types. They are also simple types and can be initialized with literals. All floating-point numeric types support arithmetic, comparison, and equality operators.\n\nC# supports the following predefined floating-point types:\n\nIn the preceding table, each C# type keyword from the leftmost column is an alias for the corresponding .NET type. They are interchangeable. For example, the following declarations declare variables of the same type:\n\nThe default value of each floating-point type is zero, . Each of the floating-point types has the and constants that provide the minimum and maximum finite value of that type. The and types also provide constants that represent not-a-number and infinity values. For example, the type provides the following constants: Double.NaN, Double.NegativeInfinity, and Double.PositiveInfinity.\n\nThe type is appropriate when the required degree of precision is determined by the number of digits to the right of the decimal point. Such numbers are commonly used in financial applications, for currency amounts (for example, $1.00), interest rates (for example, 2.625%), and so forth. Even numbers that are precise to only one decimal digit are handled more accurately by the type: 0.1, for example, can be exactly represented by a instance, while there's no or instance that exactly represents 0.1. Because of this difference in numeric types, unexpected rounding errors can occur in arithmetic calculations when you use or for decimal data. You can use instead of when optimizing performance is more important than ensuring accuracy. However, any difference in performance would go unnoticed by all but the most calculation-intensive applications. Another possible reason to avoid is to minimize storage requirements. For example, ML.NET uses because the difference between 4 bytes and 16 bytes adds up for very large data sets. For more information, see System.Decimal.\n\nYou can mix integral types and the and types in an expression. In this case, integral types are implicitly converted to one of the floating-point types and, if necessary, the type is implicitly converted to . The expression is evaluated as follows:\n• If there is type in the expression, the expression evaluates to , or to in relational and equality comparisons.\n• If there is no type in the expression, the expression evaluates to , or to in relational and equality comparisons.\n\nYou can also mix integral types and the type in an expression. In this case, integral types are implicitly converted to the type and the expression evaluates to , or to in relational and equality comparisons.\n\nYou cannot mix the type with the and types in an expression. In this case, if you want to perform arithmetic, comparison, or equality operations, you must explicitly convert the operands either from or to the type, as the following example shows:\n\nYou can use either standard numeric format strings or custom numeric format strings to format a floating-point value.\n\nThe type of a real literal is determined by its suffix as follows:\n• The literal without suffix or with the or suffix is of type\n• The literal with the or suffix is of type\n• The literal with the or suffix is of type\n\nThe following code demonstrates an example of each:\n\nThe preceding example also shows the use of as a digit separator. You can use the digit separator with all kinds of numeric literals.\n\nYou can also use scientific notation, that is, specify an exponent part of a real literal, as the following example shows:\n\nThere is only one implicit conversion between floating-point numeric types: from to . However, you can convert any floating-point type to any other floating-point type with the explicit cast. For more information, see Built-in numeric conversions.\n\nFor more information, see the following sections of the C# language specification:"
    },
    {
        "link": "https://stackoverflow.com/questions/1008826/what-data-type-should-i-use-to-represent-money-in-c",
        "document": "For something quick and dirty, any of the floating point primitive types will do.\n\nThe problem with and is that neither of them can represent 1/10 accurately, occasionally resulting in surprising trillionths of a cent. You've probably heard of the infamous 10¢ + 20¢. More realistically, try calculating a 6% sales tax on three items valued at $39.99 each pre-tax.\n\nAlso, and have values like negative infinity and NaN that are of no use whatsoever for representing money. So , which can represent 1/10 precisely would seem to be the best choice.\n\nHowever, doesn't carry any information about what currency we're dealing with. Does the amount $29.89, for example, equal €29.89? Is $29.89 > €29.89? How do I make sure these amounts are displayed with the correct currency symbols?\n\nIf these sorts of details matter for your program, then you should either use a third-party library or create your own class (or whatever you want to call it).\n\nBut if that sort of thing doesn't matter to the program, you can just use a floating point type. Or maybe even integers (e.g., my blackjack implementation in Java asks the player to enter a wager in whole dollars)."
    },
    {
        "link": "https://stackoverflow.com/questions/36833469/decimal-vs-double-for-small-currency-numbers-that-only-get-stored-not-manipula",
        "document": "I'm writing a small application that accesses an SQL database to retrieve information about some local events, including their prices, and allows creation and editing of new events as well as exporting formatted and filtered lists of those events for printing etc.\n\nNow an event may have an entrance fee that is also represented in the data sets (MS SQL Server data type \"money\"), but I'm wondering which data type to use in my client application.\n\nI know that you should always use Decimal for currency calculations because of its high precision - but I'm not going to do any calculations, it will only get entered as number with two decimal places and stored to the database, and later it gets loaded again and displayed or exported into a printable document - no calculations that could accumulate inaccuracies.\n\nSo which data type would you use in this case? Still go for Decimal just because it's money and don't care about the memory etc? Or use Double instead as it would be precise enough? Alternatively I could probably store the price in Cents as Integer as well. What type should I go for?"
    },
    {
        "link": "https://bytehide.com/blog/decimal-csharp",
        "document": "Have you been tapping your fingers on the keyboard, continually baffled by the decimal data type in C#? Or are you just curious to know more about what it can do for you from an efficiency standpoint? Lucky for you, we’re about to unravel the mysteries of decimal in C#. Hold tight!\n\nUnderstanding the Decimal Type in C#\n\nC# has various data types, but if you deal with numbers that have digits after the decimal point, you’ve may well have encountered the ‘decimal’ type. It’s an appealing beast, so let’s get to know it better.\n\nDefinition: What is Decimal in C#?\n\nIn C#, ‘decimal’ is a data type used for storing floating-point numbers with a high level of precision. It, therefore, is a perfect candidate for financial and monetary calculations where you really don’t want errors to creep in.\n\nIn the above sample code, we’re declaring a decimal variable ‘salary’ and assigning it an initial value. Notice the ‘m’ at the end? That’s important. It tells C# that this is a decimal literal.\n\nThe decimal data type can handle way bigger numbers than you’d think – from 1.0 x 10^-28 to approximately 7.9 x 10^28. That’s one heck of a range, huh? Not just that, it can hold up to 28-29 significant digits and takes up 16 bytes.\n\nIt’s worth noting that due to its high precision and the range of values it can represent, the decimal type has a more significant overhead compared to float or double.\n\nPractical Use of Decimals in C#\n\nNow that we’ve got a grip on what the decimal type in C# is let’s whip it into action. It’s a pretty smooth operator.\n\nHow to Set Decimal Value in C#?\n\nSetting a decimal value in your C# code is straightforward. Just remember to put that little ‘m’ at the end of the value. It may seem like an extra step, but trust me, it’s a good habit to form.\n\nEasy, right? After this line of code, ‘price’ will store the value 15.99.\n\nDecimals really come into their own in real-world applications like banking, finance and data analysis.\n\nDecimal in C# Example\n\nSuppose you’re calculating the compound interest on a bank deposit, a decimal would be your trusty companion. It can handle calculations of interest rates and amounts up to twenty-nine decimal places accurately.\n\nWith this code, ‘compoundInterest’ will store the calculated compound interest. Notice we had to do some casting there, as Math.Pow() doesn’t support decimal.\n\nWhat’s neat about decimals is that while they’re all about precision, we can also make them look rather pretty too. Let’s explore that.\n\nC# offers inbuilt functionality for formatting decimal numbers that you can use to fit your specific needs.\n\nThis code snippet formats the decimal value ‘PI’ to two decimal places. Isn’t that snappy?\n\nWorking with Large Numbers: An Advantage of Decimal in C#\n\nOne major advantage of the decimal type in C# is that it allows for very precise arithmetic operations, particularly when working with large numbers. This is because decimals have a larger range and higher precision than float or double. This makes decimals an ideal choice for computations where precision is paramount, and even slightly off calculations may lead to significant errors.\n\nWhen to Use Decimal over Other Numeric Types\n\nHave you ever found yourself knee-deep in a mass of numbers? Do you have an accurate astronomical calculation or precision-critical scientific computation up your sleeve? Then, decimals offer a ray of hope in the vast digital universe of C#.\n\nOne application could be in a physics tutoring app, where the speed of light or Planck’s constant needs to be accurately represented. With their precision, decimals are a savvy choice.\n\nIn other numerical types such as float or double, rounding errors can subtly sneak into your calculations. This can wreak havoc if precise calculations are a necessity. Decimals, with their friendliness toward large numbers and high precision, nip this problem in the bud.\n\nOf course, there’s no lunch for free. The trade-off for this precision is slightly reduced performance and increased memory footprint compared to floating point types. But the accuracy gain is often well worth the price for certain use-cases.\n\nUsing decimals can be deceptively uncomplicated. Yet, it is worth appreciating the peculiarities and potential pitfalls that can come along when using this versatile data type.\n• Understand your requirement: It’s nice to have precision, but do you really need it? If your logic does not involve arithmetic that demands extreme precision, opt for less memory-consuming numeric types such as ‘int’, ‘float’, or ‘double’.\n• Efficiency: While the ‘decimal’ type is fine-tuned for high precision computations, remember that it is also a bit more resource-hungry. It occupies larger memory space and operations on decimal types are slower.\n• Casting: No data type is an island. When poking decimals with other data types, bear in mind that you may need a cast or two.\n\nRemember, understanding your tools and using them wisely is the hallmark of a good programmer. Happy Coding!\n\nWe’ve covered a lot of ground. From what decimal is, where and how to use it, to when to use it over other number types. You’re now geared up to take on any decimal-related problem in C#. So, is ‘decimal’ the hero of numeric types? In many situations, I’d say “Yes!”.\n\nRemember though, it’s a tool, just like any other data type. Use it well, and it can do wonders for your work."
    },
    {
        "link": "https://cardinalby.github.io/blog/post/best-practices/storing-currency-values-data-types",
        "document": "Repeatedly facing questions, debates, and mistakes related to storing and representing currency amounts, I decided to collect all facts and advice regarding this topic in one place. This article is not the final source of the truth, but it contains useful information that you should take into consideration when designing software.\n\nThere is standard that describes currency codes and their minor units. Data are also available in XML and CSV representations (following the links from the page).\n• A currency has a 3-letter code, a numeric code, and a name. A currency may have multiple listed locations.\n• Some currencies have exchange rates that are pegged (fixed) to another currency.\n• Minor unit is the smallest unit of a currency, e.g. 1 dollar equals 100 cents (with 2 decimals).\n• Most currencies have 2 decimals; some have none, and some have 3 decimals.\n• Mauritania and Madagascar do not use a decimal division of units, setting 1 ouguiya = 5 khoums, ariary = 5 iraimbilanja.\n• Cryptocurrencies can have up to 18 decimals (ETH).\n• The number of decimals can change over time due to inflation.\n• The same can happen because of redenomination, but a new currency code should be introduced.\n• For some currencies, there are no physical denominations for the minor unit.\n• Storing prices of small units of goods (probably as a result of conversion from another currency) can require using more decimals than are defined for a currency.\n• Obvious one: store currency amounts along with a link to the currency specification (foreign key in databases, a special class in programming languages) to interpret and operate with it correctly.\n• Storing a specification for a currency you should include:\n• Minimum accountable unit instead of or in addition to precision (see fact 5).\n• Lowest physical denomination of the currency if you deal with cash operations (see fact 9).\n• Ensure precision for currency amounts equals the max precision of all supported currencies.\n• Consider adding additional precision for operational needs: accumulators and intermediate calculations or for storing prices of small units of goods. For example, you may want to accumulate a 10 % fee from 1 cent operations, sum them up until they reach the minimum accountable unit (cent) and withdraw from a client.\n\nThere are different data types that can technically store money values. Let’s see how the listed requirements can be fulfilled by utilizing different data types.\n\nOne of the popular (Stripe approaches) is storing an integer number of minor units. Simply put, you store 5 $ as 500 cents. This way you can do accurate calculations and comparisons internally and then display the result formatting the number in a proper way as an amount of dollars.\n\nTaking into consideration the requirement about additional precision (let’s say 3 extra decimals) you will represent 5 $ as 500 000 of “micro units”, where 1 micro unit equals 1 000 cents.\n• It’s preferable to consider the precision beforehand.\n• It complicates the business logic of the application and introduces error-prone value conversions between units, micro-units and normal currency amounts that are presented to a user or external systems.\n• Due to the fact 7 (minor unit of a currency can change) or because of the need to add additional precision you may need to rescale all values in the future.\n• External systems you interact with can misinterpret the magnitude of an integer-represented value after rescaling:\n• 3rd-party services/customers which are not aware of the rescaling.\n• Your own services that can’t be immediately updated with the new definitions of the currencies (limitation of the deployment process, caches).\n• A message queue, or an event streaming platform where you can’t modify old messages during the rescaling process.\n• This problem can be solved by explicitly passing the scale of a number everywhere along with the number.\n\nIt’s a not-native data type that handles integers of arbitrary (or big enough) size and provides math operations on it. It’s the most suitable way of storing minor units or micro units. Don’t confuse it with SQL bigint that in fact is Int64.\n\nMost of the languages ( JavaScript, PHP, Go, Python, Java, C#, C++ ) support it natively or with 3rd-party libraries. To store these values in databases you should use Decimal column type with ( SQL databases, MongoDB ).\n\nFor correct (de)serialization you will probably need to use strings for compatibility between different implementations.\n\nUsually, more memory is required by BigInt type, compared to native integers, and computations take longer because CPUs don’t have hardware support for this data type.\n\nSome choose signed or unsigned Int64 (also referenced as BigInt in SQL, which can lead to confusion) for storing their cents or smaller subunits of currency. Even though it may seem to be sufficient for your use-case, I want to highlight the following issues with it:\n• It may not be sufficient for storing minimal units of cryptocurrencies (see fact 6) or values with extended precision (see requirement 5).\n• Some languages require casting to Float64 for math operations (Go). The problem is Float64 has only 52 bits of mantissa; it’s not enough to fit arbitrary Int64 value.\n• Not all programming languages support Int64 values:\n• Some languages (Java, PHP) do not support any unsigned integers.\n• JavaScript uses signed Float64 as an internal representation for the number data type. It means that even if one can serialize Int64 numbers to JSON in their backend application, by default a JavaScript application will overflow its number type trying to deserialize JSON containing this value.\n\nThe problem with support of Int64 in external systems can be mitigated by serializing Int64 to a string and using BigInt types to handle these values, but it reduces the benefits from using hardware-supported Int64 values.\n\nThis approach implies using a special Decimal numeric type that allows to store fractional decimal numbers accurately with the specified precision (maximum precision differs in different databases).\n\nMost languages ( JavaScript, PHP, Go, Python, Java, C#, C++ ) have built-in support or 3rd-party libraries for handling this data type. SQL databases offer own standard Decimal type.\n\nNote that there are 2 different types of decimal type implementations:\n• Decimal128 with limited number of significant digits (MongoDB, C#).\n• So-called BigDecimal type of arbitrary (or big enough) size (SQL Decimal, BigDecimal in Java) with different internal representations.\n\nThe performance concerns described above for BigInt are relevant for Decimal types as well.\n\nThe main advantages of using Decimals comparing to BigInts are:\n• No major overhead if values are already stored as Decimals in the database (you’ll do it anyway even with BigInts). Also, formatting BigInt values requires computations similar to those within Decimal type.\n• More intuitive representation of the values simplifies the business logic and formatting numbers to a human-readable format.\n• Changing minor units can be done by altering the precision of the decimal column in the database; you don’t have to rescale the values.\n• Value serialized to string naturally includes the information about precision. If you change the precision, it cannot be misinterpreted by external systems as in the case of BigInts.\n\nAs in the case of BigInt values, all serialization goes through decimal strings for compatibility between different libraries. Of course, serializing in the form of mantissa + exponent can be more efficient for performance-sensitive applications.\n\nHowever, you still need to keep track of minimal accountable units. Limiting the precision of Decimal in the database requires remembering about precision reserve for intermediate operations and accumulators.\n\nThe first rule here is “never use floating-point data types for storing money amounts”. Humans expect money calculations to be made in base 10, but floating-point arithmetic uses base 2 representation that can lead to results that are not expected in financial sense. The common example to illustrate the problem is . This rule is relevant for both programming languages and databases.\n\nEven though decimal representation also can’t store all amounts precisely (e.g. - read bonus part at the end), it’s expected by people, financial institutions and regulations.\n\nThis proprietary type of Microsoft SQL Server stores amounts as Int64 internally and is not recommended to use.\n\nRational number is a number that can be expressed as the fraction . In most applications, their use is not necessary, however, for some use cases, they are the only option for obtaining the desired precision.\n\nI can imagine a game or an expenses splitting application in which you need to take of , save it (to a database, message queue, or simply to memory) and later multiply it by . Using decimals (both Decimal type and BigInt type with the number of cents) can’t provide exact precision - the result will never be exactly . But using rational numbers, you can save the intermediate value as and later do simple arithmetic to get the value .\n\nOperations on non-decimal units, such as time and distance units, historical non-decimal currencies, calculating probabilities, etc., may be candidates for introducing rational numbers when absolute precision is required.\n\nThere is standard Fractions library in Python, big.Rat in Go and 3rd-party libraries in other languages: JavaScript, PHP, C#, C++.\n\nUnfortunately, the only database I know to be supporting rational numbers is PostgreSQL with pg_rational extension. Storing rational numbers in separate “numerator” and “denominator” columns limits the possibilities of math calculations directly in the database.\n\n👏 Thank you for reading\n\nAny comments, criticism, and sharing of your own experience would be appreciated!"
    }
]