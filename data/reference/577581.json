[
    {
        "link": "https://sthda.com/english/wiki/ggplot2-scatter-plots-quick-start-guide-r-software-and-data-visualization",
        "document": ""
    },
    {
        "link": "https://cran.r-project.org/web/packages/ggplot2/ggplot2.pdf",
        "document": ""
    },
    {
        "link": "https://ggplot2.tidyverse.org",
        "document": "ggplot2 is a system for declaratively creating graphics, based on The Grammar of Graphics. You provide the data, tell ggplot2 how to map variables to aesthetics, what graphical primitives to use, and it takes care of the details.\n\nIt’s hard to succinctly describe how ggplot2 works because it embodies a deep philosophy of visualisation. However, in most cases you start with , supply a dataset and aesthetic mapping (with ). You then add on layers (like or ), scales (like ), faceting specifications (like ) and coordinate systems (like ).\n\nggplot2 is now over 10 years old and is used by hundreds of thousands of people to make millions of plots. That means, by-and-large, ggplot2 itself changes relatively little. When we do make changes, they will be generally to add new functions or arguments rather than changing the behaviour of existing functions, and if we do make changes to existing behaviour we will do them for compelling reasons. If you are looking for innovation, look to ggplot2’s rich ecosystem of extensions. See a community maintained list at https://exts.ggplot2.tidyverse.org/gallery/.\n\nIf you are new to ggplot2 you are better off starting with a systematic introduction, rather than trying to learn from reading individual documentation pages. Currently, there are three good places to start:\n• None The Data Visualization and Communication chapters in R for Data Science. R for Data Science is designed to give you a comprehensive introduction to the tidyverse, and these two chapters will get you up to speed with the essentials of ggplot2 as quickly as possible.\n• None If you’d like to take an online course, try Data Visualization in R With ggplot2 by Kara Woo.\n• None If you’d like to follow a webinar, try Plotting Anything with ggplot2 by Thomas Lin Pedersen.\n• None If you want to dive into making common graphics as quickly as possible, I recommend The R Graphics Cookbook by Winston Chang. It provides a set of recipes to solve common graphics problems. If you’ve mastered the basics and want to learn more, read ggplot2: Elegant Graphics for Data Analysis. It describes the theoretical underpinnings of ggplot2 and shows you how all the pieces fit together. This book helps you understand the theory that underpins ggplot2, and will help you create new types of graphics specifically tailored to your needs."
    },
    {
        "link": "https://bioinformatics.ccr.cancer.gov/docs/data-visualization-with-r/Lesson3_plotcustomization",
        "document": "\n• Learn to customize your ggplot with labels, axes, text annotations, and themes.\n• Learn how to make and modify scatter plots to make fairly different overall plot representations.\n• Load a different data set using new load functions\n\nThe primary purpose of this lesson is to learn how to customize our ggplot2 plots. We will do this by focusing on different types of scatter plots.\n\nIn this lesson we will use two different sets of data. First, we will use data available with your base R installation, the iris data set, which is stored in object . These data include measurements from the petals and sepals of different Iris species including Iris setosa, versicolor, and virginica. See for more information about these data.\n\nSecond, we will use some more complicated bioinformatics data related to the RNAseq project introduced in Lesson 2.\n\nFirst, let's load our libraries using the library function, :\n\nNow, let's load the RNA data that we will use toward the end of this lesson. We will use the function to load tab delimited RNASeq data and the function to load the list of top genes.\n\nWe are returning to the core grammar of graphics concept introduced in Lesson 2. Remember, to create a plot all you you need are data, geom_function(s), and mapping arguments.\n\nHere is the basic template we left off with:\n\nHowever, there are additional components, highlighted in bold, that can be added to our core components to enable us to generate even more diverse plot types.\n\nWe will extend our basic template throughout this lesson as we make a variety of scatter plots and in lesson 4.\n\nBecause scatter plots involve mapping each data point, the geom function used is . We saw a fairly basic implementation of this in Lesson 2.\n\nLet's take another look at a simple scatter plot using the iris data. We can look at the relationship between petal length and petal width (i.e., variable association) for the various Iris species.\n\nThis code should look fairly familiar, with the exception of a new function, . This is a modification of the ggplot2 coordinate system.\n\nwith the default argument ensures that the units are represented equally in physical space on the plot. Because the x and y measurements were both taken in centimeters, it is good practice to make sure that the \"same mapping of data space to physical space is used.\" --- Holmes and Huber, 2021\n\nYou will not need to worry about the coordinate system of your plot in most cases, but it is likely you will need to mess with the coordinate system at some point in the future. Another commonly used coordinate function is , which allows you to flip the representation of the plot, for example, by switching bars in a bar plot from vertical to horizontal. See for more information.\n\nMany complex plots (e.g., PCA ordinations) are in their basic form a scatter plot. Here we are going to apply PCA to the iris data and generate a plot using ggplot2.\n\nPrincipal component analysis (PCA) is a linear dimension reduction method applied to highly dimensional data. The goal of PCA is to reduce the dimensionality of the data by transforming the data in a way that maximizes the variance explained. Read more here and here.\n\nWe can use the function to run PCA on the first four columns of the iris data. The function takes numeric data.\n\nThe object is a list of 5: the standard deviations of the principal components, a matrix of variable loadings, the scaling used, and the data projected on the principal components.\n\nTo plot the first two axes of variation along with species information, we will need to make a data frame with this information. The axes are in .\n\nThis is a decent plot showing us how the species relate based on characteristics of their sepals and petals. From this plot, we see that Iris virginica and Iris versicolor are more similar than Iris setosa.\n\nBut, the axes are missing the % explained variance. Let's add custom axes. We can do this with the and functions or the functions . But first we need to grab some information from our PCA analysis. Let's use . This function provides a summary of results for a variety of model fitting functions and methods.\n\nPC1 and PC2 combined account for 96% of variance in the data. We can add this information directly to our plot using custom axes labels.\n\nAdd a stat to our plot with .\n\nIn scatter plots, the raw data is the focus of the plot, but for many other plots, this is not the case. We will discuss statistical transformation more in lesson 4 and how they apply. However, you may wish to overlay a stat on your PCA. For example, ellipses are often added to PCA ordinations to emphasize group clustering with confidence intervals. By default, uses the bivariate t distribution, but this can be modified. Let's add ellipses with 95% confidence intervals to our plot.\n\nThe plot above is looking pretty good, but there are many more features that can be customized to make this publishable or fit a desired style. Changing non-data elements (related to axes, titles subtitles, gridlines, legends, etc.) of our plot can be done with . GGplot2 has a definitive default style that falls under one of their precooked themes, . is one of eight complete themes provided by ggplot2.\n\nWe can also specify and build a theme within our plot code or develop a custom theme to be reused across multiple plots. The theme function is the bread and butter of plot customization. Check out for a list of available parameters. There are many.\n\nLet's see how this works by changing the fonts and text sizes and dropping minor grid lines:\n\nYou may want to establish a custom theme for reuse with a number of plots. See this great tutorial by Madeline Pickens for steps on how to do that.\n\nWhen you have a lot of colors and you want to keep these colors consistent, you can use the following convenient functions to set a name attribute for a vector of colors.\n\nLet's do this for our iris species.\n\nWe can use this color palette for all plots of these three species to keep our figures consistent throughout a presentation or publication.\n\nPutting it all together\n\nWe now know enough to put our new skills to use to make a volcano plot from RNASeq data.\n\nLet's take a quick look at the data we loaded at the beginning of the lesson:\n\nSignificant differential expression was assigned based on an absolute log fold change greater than or equal to 2 and an FDR corrected p-value less than 0.05.\n\nLet's start our plot with the <DATA>, <GEOM_FUNCTION>, and <MAPPING>. We do not need to fix the coordinate system because we are working with two different values on the x and y and we don't need any special coordinate system modifications. Let's plot logFC on the x axis and the mutated column with our false discovery rate corrected p-values on the y-axis and set the significant p-values off from the non-significant by size and color. We can also go ahead and customize the size and color scales, since we have learned how to do that.\n\nThis is not exactly what we want so let's keep working.\n\nImmediately, you should notice that the figure is upside down compared to what we would expect from a volcano plot. there are two possible ways to fix this. We could transform the FDR corrected values by multiplying by -1 OR we could work with our axes scales. Aside from text modifications, we haven't yet changed the scaling of the axes. Let's see how we can modify the scale of the y-axis.\n\nTo change the y axis scale, we will need a specific function. These functions generally start with . In our case we want to reverse our axis so that increasingly negative is going in the positive direction rather than the negative direction. Luckily, there is a function to reverse our axis; see .\n\nThis looks pretty good, but we can tidy it up more by working with our legend guides and our theme.\n\nWe can modify many aspects of the figure legend using the function . Let's see how that works and go ahead and customize some theme arguments. Notice that the legend position is specified in .\n\nLastly, let's layer another geom function to label our top six differentially abundant genes based on significance. We can use from , which is a variation on .\n\nWe want to use this in a multi-panel figure in a later lesson, so let's go ahead and save it to a file that will hold a single R object (.rds).\n\nCode for PCA was adapted from Learning R through examples by Xijin Ge, Jianli Qi, and Rong Fan, 2021. Other sources for content included R4DS and Holmes and Huber, 2021."
    },
    {
        "link": "https://geeksforgeeks.org/comprehensive-guide-to-scatter-plot-using-ggplot2-in-r",
        "document": "In this article, we are going to see how to use scatter plots using ggplot2 in the R Programming Language.\n\nggplot2 package is a free, open-source, and easy-to-use visualization package widely used in R. It is the most powerful visualization package written by Hadley Wickham. This package can be installed using the R function install. packages().\n\nA Basic Scatterplot with ggplot2 in R uses dots to represent values for two different numeric variables and is used to observe relationships between those variables. To plot the scatterplot we will use we will be using the geom_point() function. Following is brief information about ggplot function, geom_point().\n\nBasic Scatterplot with ggplot2 in R with groups\n\nHere we will use distinguish the values by a group of data (i.e. factor level data). aes() function controls the color of the group and it should be factor variable.\n\nChanging color in Basic Scatterplot with ggplot2 in R\n\nHere we use aes() methods color attributes to change the color of the datapoints with specific variables.\n\nChanging Shape in Basic Scatterplot with ggplot2 in R\n\nTo change the shape of the datapoints we will use shape attributes with aes() methods.\n\nChanging the size aesthetic in Basic Scatterplot with ggplot2 in R\n\nTo change the aesthetic or datapoints we will use size attributes in aes() methods.\n\nLabel points in Basic Scatterplot with ggplot2 in R\n\nTo deploy the labels on the datapoint we will use label into the geom_text() methods.\n\nRegression lines in Basic Scatterplot with ggplot2 in R\n\nRegression models a target prediction value supported independent variables and mostly used for finding out the relationship between variables and forecasting. In R we can use the stat_smooth() function to smoothen the visualization.\n\n\n\n Using stat_mooth with loess mode in Basic Scatterplot with ggplot2 in R\n\ngeom_smooth() function to represent a regression line and smoothen the visualization.\n\nIn order to show the regression line on the graphical medium with help of geom_smooth() function, we pass the method as “loess” and the formula used as y ~ x.\n\ngeom_smooth with loess mode in Basic Scatterplot with ggplot2 in R\n\nThe intercept and slope can be easily calculated by the lm() function which is used for linear regression followed by coefficients().\n\nIntercept and slope in Basic Scatterplot with ggplot2 in R\n\nscale_fill_manual, scale_size_manual, scale_shape_manual, scale_linetype_manual, are builtin types which is assign desired colors to categorical data, we use one of them scale_color_manual() function, which is used to scale (map).\n\n\n\nChanging aesthetics in Basic Scatterplot with ggplot2 in R\n\nMarginal rugs to Basic Scatterplot with ggplot2 in R\n\nTo add marginal rugs to the scatter plot we will use geom_rug() methods.\n\nHere we will add marginal rugs into the scatter plot\n\nMarginal rugs in Basic Scatterplot with ggplot2 in R\n\nTo create density estimation in scatter plot we will use geom_density_2d() methods and geom_density_2d_filled() from ggplot2.\n\nUsing geom_density_2d_filled() to visualize the situation of color inside the datapoints\n\nstat_density_2d() can be also used to deploy the 2d density estimation.\n\nTo add a circle or ellipse around a cluster of data points, we use the stat_ellipse() function. This function automatically computes the circle/ellipse radius to draw around the cluster of points by categorical data."
    },
    {
        "link": "https://support.bioconductor.org/p/103979",
        "document": ""
    },
    {
        "link": "https://cran.r-project.org/web/packages/fdrtool/fdrtool.pdf",
        "document": ""
    },
    {
        "link": "https://support.bioconductor.org/p/83870",
        "document": "I am following the guide found here (http://www-huber.embl.de/users/klaus/Teaching/DESeq2Predoc2014.html) to estimate differential gene expression in my two-condition RNAseq dataset. When I look at my histogram of observed p-value statistics I end up with a plot like this:\n\nWhen I run fdrtool on this dataset the estimated empirical sigma is 1.176:\n\nWhen I look at the number of rejected hypotheses after running the fdrtool procedure the number is much smaller (27 rejections compared to 240 using the BH FDR adjustment directly).\n\n1) is it appropriate to use the fdrtool procedure when sigma is estimated to be >1? All of the examples I've seen thus far (including in the DESeq tutorials) focus on the case where sigma <1.\n\n2) if the answer to 1) is yes, what are some of the assumptions about the experiment and results that would make a sigma >1 need to be controlled with the more conservative (in this case) fdrtool correction?\n\nAny help would be greatly appreciated!"
    },
    {
        "link": "https://cran.r-project.org/package=fdrtool",
        "document": "Estimates both tail area-based false discovery rates (Fdr) as well as local false discovery rates (fdr) for a variety of null models (p-values, z-scores, correlation coefficients, t-scores). The proportion of null values and the parameters of the null distribution are adaptively estimated from the data. In addition, the package contains functions for non-parametric density estimation (Grenander estimator), for monotone regression (isotonic regression and antitonic regression with weights), for computing the greatest convex minorant (GCM) and the least concave majorant (LCM), for the half-normal and correlation distributions, and for computing empirical higher criticism (HC) scores and the corresponding decision threshold.\n\nPlease use the canonical form to link to this page."
    },
    {
        "link": "https://stats.stackexchange.com/questions/111453/multiple-hypothesis-testing-with-fdr-in-r-fdrtool-and-p-adjust",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    }
]