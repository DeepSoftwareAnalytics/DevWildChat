[
    {
        "link": "https://docs.unity3d.com/Manual/index.html",
        "document": "Unity 6 is the long-term supported (previously known as LTS) release of the next generation of the Unity Engine. It combines the latest technologies and tools to deliver high-quality, high-performance experiences for all supported platforms. Unity 6 contains all features, updates, and improvements made in Unity 2023.1 Tech stream, Unity 2023.2 Tech stream, and Unity 6 Preview.\n\nThese are some main highlights of Unity 6.\n• Best practice guides - Best practices from Unity Support engineers.\n• Unity Discussions - A community-driven place where you can search for frequently asked questions and answers.\n• The Unity Knowledge Base - A collection of answers to questions posed to Unity’s Support teams.\n• Tutorials - Step-by-step video and written guides to using the Unity Editor.\n• Asset Store help - Help on Asset Store \n\n A growing library of free and commercial assets created by Unity and members of the community. Offers a wide variety of assets, from textures, models and animations to whole project examples, tutorials and Editor extensions. More info content sharing."
    },
    {
        "link": "https://discussions.unity.com/t/how-to-adjust-settings-for-different-aspect-ratios/929830",
        "document": ""
    },
    {
        "link": "https://docs.unity3d.com/2021.3/Documentation/Manual/script-Image.html",
        "document": "The Image control displays a non-interactive image to the user. You can use this for purposes such as decorations or icons, and you can change the image from a script to reflect changes in other controls. The control is similar to the Raw ImageA Visual UI Component that displays a non-interactive image to the user. This can be used for decoration, icons, and so on, and the image can also be changed from a script to reflect changes in other controls. More info\n\nSee in Glossary control, but offers more options for animating the image and accurately filling the control rectangle. However, the Image control requires its Texture to be a SpriteA 2D graphic objects. If you are used to working in 3D, Sprites are essentially just standard textures but there are special techniques for combining and managing sprite textures for efficiency and convenience during development. More info\n\nSee in Glossary, while the Raw Image can accept any Texture.\n\nThe Texture that represents the image to display (which must be imported as a Sprite). The color to apply to the image. Material \n\n An asset that defines how a surface should be rendered. More info The Material to use for rendering the image. Enable Raycast Target if you want Unity to consider the image a target for raycasting. Set the dimensions of the image box to the original pixel \n\n The smallest unit in a computer image. Pixel size depends on your screen resolution. Pixel lighting is calculated at every screen pixel. More info size of the Texture.\n\nYou must import the image to display as a Sprite to work with the Image control."
    },
    {
        "link": "https://docs.unity.com",
        "document": "Docs and guides to work with the Unity ecosystem."
    },
    {
        "link": "https://discussions.unity.com/t/large-images-lose-quality-in-unity-when-downscaled/1618694",
        "document": ""
    },
    {
        "link": "https://discussions.unity.com/t/sizing-a-recttransform-based-on-aspect-ratio-or-alternatively-restricted-content-size-fitter/558216",
        "document": ""
    },
    {
        "link": "https://docs.unity3d.com/6000.0/Documentation/ScriptReference/RectTransform.html",
        "document": "Suggest a change Thank you for helping us improve the quality of Unity Documentation. Although we cannot accept all submissions, we do read each suggested change from our users and will make updates where applicable. Close For some reason your suggested change could not be submitted. Please <a>try again</a> in a few minutes. And thank you for taking the time to help us improve the quality of Unity Documentation. Close\n\nRectTransforms are used for GUI but can also be used for other things. It's used to store and manipulate the position, size, and anchoring of a rectangle and supports various forms of scaling based on a parent RectTransform.\n\n\n\nNote: The Inspector changes which properties are exposed based on which anchor preset is in use. For more information see Rect Transform and Basic Layout."
    },
    {
        "link": "https://wayline.io/blog/a-beginners-guide-to-recttransforms-in-unity",
        "document": "Are you a beginner game developer? One of the essential components you’ll encounter is the RectTransform.\n\nA RectTransform is the fundamental Component of UI elements in Unity. What the Transform is for 3D objects, the RectTransform is for UI elements.\n\nAs a developer who makes assets for Unity, I use Unity’s UI system to make setting up and changing demo scenes easy.\n\nFor example, I use RectTransforms in Unity’s UI system to show settings for the Radial Blur asset.\n\nYou must be familiar with the Unity UI system as a game developer.\n\nUnderstanding how to use RectTransform is crucial. It will help in creating user interfaces and UI animations. It is also helpful in positioning game objects within the Unity canvas. Let’s break down its properties and practical use cases for better understanding.\n\nWhat you need to know\n• RectTransform is the fundamental component for creating user interfaces in Unity.\n• RectTransform is the UI equivalent of Transform.\n• When you create a RectTransform, you anchor it to a position on the canvas.\n• The position of the RectTransform is relative to that position.\n• You can also set transformations on the RectTransform, like Rotation and Scaling.\n\nThe most essential part of the Unity UI system is the RectTransform component. This component includes a ton of different properties. And the way it works is quite different from the transform component.\n\nIt is easy to become confused about what you need to change in the RectTransform to position your UI element correctly.\n\nHowever, this component is essential to creating user interfaces in Unity. As a game developer, you need to know how to use it.\n\nIn this comprehensive guide, I will tell you everything you need to know about RectTransforms.\n\nIt is a nightmare to work with RectTransforms via scripting. RectTransforms generate calculated rectangles based on the set properties. These properties depend on the selected anchor preset.\n\nAs a result, it is tricky to write reusable code snippets for RectTransforms.\n\nUse the anchoredPosition property to set or change the position of the RectTransform.\n\nUse the sizeDelta property to get and change the width and height.\n\nSyntax for RectTransform Left, Top, Right, and Bottom\n\nUse offsetMin to get and change the Left and Bottom values (when available).\n\nUse offsetMax to get and change the Right and Top values (when available).\n\nNote that Unity reports inverted results for the Right and Top values. For example, when Unity shows Top = 10 in the Inspector, the offsetMax.y = -10.\n\nRectTransform is the fundamental component of Unity’s UI system. This component is the UI version of the Transform component. As you know, you use the Transform component to set objects’ position, rotation, and scale in your scene. In the same way, you use the RectTransform component to set the position, size, and anchors for UI elements.\n\nIn Unity, RectTransform is a fundamental component of the UI system. It is the 2D layout counterpart of the Transform component.\n\nUnity represents every element of the hierarchy as a game object. The UI system is no different. RectTransforms are also game objects.\n\nHowever, these game objects use the RectTransform component instead of the Transform component. Unity treats a RectTransform as a rectangular container. In contrast, Unity treats a Transform component as an individual point.\n\nUnity UI represents every UI element as a rectangle. UI element children live in those rectangles. The canvas is like a big wrapper around the entire rectangle stack.\n\nI have some analogs to share if you’re familiar with web dev. You can consider the canvas like the HTML tags. And you can think of RectTransform as containers.\n\nTransform represents a single point. RectTransform represents a UI container. It allows you to control the anchor, position, size, and rotation of UI elements within a canvas. It’s essential for creating responsive and dynamic user interfaces.\n\nRectTransform is part of a Canvas. Every RectTransform lives on the canvas.\n\nYou can place a RectTransform into another.\n\nYou must parent all RectTransforms to a Canvas component. RectTransforms can be children of other RectTransforms.\n\nBefore we dive in, let’s understand the concept of hierarchy in Unity’s UI. Unity lists each UI Element in your scene in the Hierarchy window.\n\nYou can drag and drop RectTransform A into RectTransform B in the hierarchy.\n\nWhen you do this, you make RectTransform A the child of RectTransform B.\n\nAt the same time, you are making GameObject B the parent of GameObject A.\n• Key Info:\n\n A child UI element can have one parent. A parent UI element can have many children. Unity positions a child RectTransform relative to the parent. Unity anchors a child RectTransform relative to the parent element.\n\nWe’ll talk more about Anchors later in a dedicated section.\n\nIn the next section, we will cover practical aspects. Before that, let’s review the fundamental properties of a RectTransform.\n\nA RectTransform’s available properties change depending on the anchor type.\n\nI generally recommend that you use the Anchor middle/center anchor preset. (All anchor values set to 0.5).\n\nAnchors are crucial for creating responsive UIs in Unity. They define how a UI element should adapt to screen size and resolution changes. Unity represents an Anchor by two normalized values (X and Y). These values range from 0 to 1. The number represents a percentage of the parent canvas’s size.\n\nAs the canvas size changes, the element will stay centered. Anchors work in pairs. Adjusting the anchors determines how the component resizes when the canvas changes size.\n\nThe position is one of the most fundamental properties of RectTransform. It determines the location of the UI element within its parent canvas. Unity defines the position in pixel units relative to the Canvas scaling type.\n\nFor example, assume that your RectTransform uses the Middle/Center anchor. Suppose you set the X and Y positions of a RectTransform to (0, 0). You have positioned your RectTransform to the center of the canvas.\n\nAdjusting the position values will move the element. Controlling the position values is particularly useful when placing UI elements.\n\nThe Size property controls the width and height of the UI element. You can define the size in pixels or Unity units. Adjusting the size can make UI elements smaller or larger as needed. For example, let’s say you set the width to 200 and the height to 100. The resulting RectTransform will be 200 pixels wide and 100 pixels tall.\n\nPivot is the point around which scaling and rotation of the UI element occur. Unity represents the pivot position using normalized values (X and Y). These values are relative to the RectTransform. If you change the pivot, you change how the RectTransform behaves when rotated or scaled.\n\nFor instance, suppose that you set the pivot to (0, 0). This pivot value means the scaling and rotation will happen around the element’s bottom-left corner. If you change the pivot to (0.5, 0.5), the RectTransform will scale and rotate around its center.\n\nRotation allows you to control the angle at which Unity displays the RectTransform. Unity’s rotation value uses degrees. When you rotate a RectTransform, the rotation occurs around the RectTransform’s current pivot. Rotating UI elements can be helpful when you want to create a dynamic interface. For example, you can rotate an image to animate a spinner.\n\nThe scale allows you to change the size that the UI element displays. You can scale UI elements from their pivot point. Scaling UI elements can be helpful when you want to make a RectTransform grow or shrink in all directions. You can also scale the RectTransform by a single component direction - x, y, or z. Remember that Unity applies the scaling operation relative to the anchor.\n\nIt is best to keep the scale to 1 when setting up your UI in the editor.\n\nHow do I move RectTransform by script?\n\nIn this example, you can use a slider in the Editor with the Lerp method. This method uses the Factor property to move the anchored position of the RectTransform.\n\nLet’s say that you have a list of UI objects. In this example, you have centered the UI objects. But you want the UI objects to be left-aligned with one another.\n\nTo achieve this, wrap all the UI objects in a parent RectTransform. Then, set the anchor position of the children RectTransforms to Left (Anchors Min.x = 0, Anchors max.x = 0).\n\nHow do I hide my Game UI in Scene View?\n\nIn the hierarchy, click the eye on the left edge next to the canvas game object.\n\nHow do I use Lerp with UI objects?\n\nIn this example, you can use a slider in the Editor with the Lerp method. This method uses the Factor property to interpolate the width of the RectTransform.\n\nLearn more about Lerp in my complete guide to using Lerp.\n\nA RectTransform anchor binds the RectTransform to a particular origin. Remember that this origin is relative to the parent. If you set the anchor as top left, then the position of the RectTransform is relative to the top left of the parent. If the parent moves or rescales in a way that causes the anchor to move, then the RectTransform will also move.\n\nThe RectTransform pivot is the transform origin for the rectangle. When you change the rotation or scale of the object, the pivot sets the basis of that transformation.\n\nWhat are the most essential properties of RectTransform?\n\nRectTransform includes a ton of different properties. There are only a few that you need to worry about for editor usage:\n\nWhen it comes to runtime API usage, there are four main properties you need to remember:\n\nAdd this to your project. Then, adjust the RectTransform’s properties to see how it affects the properties.\n\nHow do I define the RectTransform position and size?\n\nUse the position properties to set the position of the RectTransform. Then, use the size properties to set the size. If you listen to me and set the Anchor Position to Middle/Center, you can use sizeDelta. Otherwise, you need to use a combination of sizeDelta, offsetMin, and offsetMax properties.\n\nHow do I make the RectTransform adjust to different screen resolutions?\n\nThe anchor system enables the RectTransform to adjust to different screen resolutions.\n\nHow do I make the RectTransform rotate and scale?\n\nFirst, set the pivot to where you want the transformation’s origin. Then, set the rotation and scale values.\n\nDo I need to know about Anchor + Anchor Presets?\n\nNo. 90% of the time, you should use the Center/Middle Anchor Preset. The anchor preset options are robust. But it can be challenging to wrap your head around how it works.\n\nDo I need to know about Pivot, Rotation, and Scale?\n\nNo. 99% of the time, you can ignore pivot + rotation + scale. These tools are potent. If you are new to Unity, learning about all these settings at once can be overwhelming. Pivot, Rotation, and Scale are less critical than Anchors and Positioning. Learn about Anchors and Positioning first.\n\nTry it yourself\n\nNow that we have understood RectTransform better, let’s try applying it. Here is a little task for you. This practice will help you solidify the new information you learned.\n\nImagine you are making an Android game. You need the UI to look great on all devices. You know that Android devices can be small phones or large tablets. So, you need to create a responsive UI. Your task:\n\nFirst, design a simple UI for your game. It should include a Health Bar, a Score, and a timer.\n\nUse Unity’s UI system to make your UI in your scene. Place the UI elements where you think they should go.\n\nNow comes the challenge. You aim to make this UI responsive to Android screen sizes and resolutions. Switch between different display resolutions to test your UI in your game view.\n\nTo take it further, add some simple UI animations using RectTransform. For instance, you can make the score scale up when increasing.\n\nSee how other people solved their problems\n• How do I use Lerp with a RectTransform?\n• How do I move a RectTransform by script?\n\nIn this comprehensive guide, I discussed the fundamental concepts of RectTransforms in Unity. I covered the anatomy of RectTransforms, anchors, position, size, pivot, rotation, and scale. I also provided some practical examples of how to use RectTransforms to create user interfaces.\n\nNext, integrate global variables and harness the controlled motion of the MoveTowards methods to add finesse to your toolbox. As a game developer, you must be comfortable using RectTransforms."
    },
    {
        "link": "https://stackoverflow.com/questions/26423549/how-to-modify-recttransform-properties-in-script-unity-4-6-beta",
        "document": "Hello, I'm using the new UI system from Unity 4.6 beta...\n\nTried different codes, looked at the docs and searched around but can't find the answer…\n\nFor example. I have an image and I want to change width and height during runtime.\n\nwhich doesn't work. And image4.GetComponent().rect.y is GET only so cannot be changed at runtime.\n\nwhat is the proper way to change size at runtime? You can give me an example in either JS or C#, doesn't matter."
    },
    {
        "link": "https://docs.unity3d.com/2018.3/Documentation/ScriptReference/UI.AspectRatioFitter.html",
        "document": ""
    }
]