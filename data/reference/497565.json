[
    {
        "link": "https://docs.expo.dev/versions/latest/sdk/svg",
        "document": "A library that allows using SVGs in your app.\n\nallows you to use SVGs in your app, with support for interactivity and animation.\n\nIf you are installing this in an existing React Native app, start by installing in your project. Then, follow the additional instructions provided by the library's README or documentation.\n\nA set of drawing primitives such as , , , , and . It supports most SVG elements and properties. The implementation is provided by react-native-svg, and documentation is provided in that repository.\n\nHere are some helpful links that will get you moving fast!\nâ€¢ Looking for SVGs? Try the noun project.\nâ€¢ Create or modify your own SVGs for free using Figma.\nâ€¢ Optimize your SVG with SVGOMG. This will make the code smaller and easier to work with. Be sure not to remove the for best results on Android.\nâ€¢ Convert your SVG to an Expo component in the browser using React SVGR."
    },
    {
        "link": "https://github.com/software-mansion/react-native-svg",
        "document": "provides SVG support to React Native on iOS, Android, macOS, Windows, and a compatibility layer for the web.\n\nCheck out the Example app\n\nðŸ“š See the Expo docs for more info or jump ahead to Usage.\n\nFabric is React Native's new rendering system. As of version of this project, Fabric is supported only for react-native 0.69.0+. Support for earlier versions is not possible due to breaking changes in configuration.\n\nIf you have unexpected behavior, please create a clean project with the latest versions of react-native and react-native-svg\n\nMake a reproduction of the problem in\n\nVerify that it is still an issue with the latest version as specified in the previous step. If so, open a new issue, include the entire file, specify what platforms you've tested, and the results of running this command:\n\nIf you suspect that you've found a spec conformance bug, then you can test using your component in a react-native-web project by forking this codesandbox, to see how different browsers render the same content: https://codesandbox.io/s/pypn6mn3y7 If any evergreen browser with significant userbase or other svg user agent renders some svg content better, or supports more of the svg and related specs, please open an issue asap.\n\nTo check how to use the library, see USAGE.md\nâ€¢ Unable to apply focus point of RadialGradient on Android.\n\nSince 2012 Software Mansion is a software agency with experience in building web and mobile apps. We are Core React Native Contributors and experts in dealing with all kinds of React Native issues. We can help you build your next dream product â€“ Hire us."
    },
    {
        "link": "https://github.com/software-mansion/react-native-svg/blob/main/USAGE.md",
        "document": "Here's a simple example. To render output like this:\n\nUse the following code:\n\nTry this on Snack\n\nIf remote SVG file contains CSS in element, use :\n\nBoth and log errors to the console, but otherwise ignore them. You can set property if you want to handle errors such as resource not existing in a different way and if you want to render another component instead in such case.\n\nNo additional steps are required when using Metro bundler.\n\nIf you are using the Webpack bundler, the following steps are needed:\nâ€¢ Ensure that you have the proper configuration to parse flow files from .\nâ€¢ Configure the Webpack section and include an important rule for .\n\nFor more details on the complete Webpack configuration, you can refer to this documentation on how to set up a file for React Native Web.\n\nTry react-native-svg-transformer to get compile time conversion and cached transformations. https://github.com/kristerkari/react-native-svg-transformer#installation-and-configuration https://github.com/kristerkari/react-native-svg-transformer#for-react-native-v057-or-newer--expo-sdk-v3100-or-newer\n\nYou can then use your image as a component:\n\nAlternatively, you can use SvgXml with babel-plugin-inline-import, but with transforms done at run-time.\n\nIf xml string contains CSS in element, use :\n\nColors set in the Svg element are inherited by its children:\nâ€¢ The fill prop defines the color inside the object.\nâ€¢ The stroke prop defines the color of the line drawn around the object.\nâ€¢ The color prop is a bit special in the sense that it won't color anything by itself, but define a kind of color variable that can be used by children elements. In this example we're defining a \"green\" color in the Svg element and using it in the second Path element via stroke=\"currentColor\". The \"currentColor\" is what refers to that \"green\" value, and it can be used in other props that accept colors too, e.g. fill=\"currentColor\".\n\nThe element is used to create a rectangle and variations of a rectangle shape:\nâ€¢ The width and height props of the element define the height and the width of the rectangle.\nâ€¢ The x prop defines the left position of the rectangle (e.g. x=\"25\" places the rectangle 25 px from the left margin).\nâ€¢ The y prop defines the top position of the rectangle (e.g. y=\"5\" places the rectangle 5 px from the top margin).\n\nThe element is used to create a circle:\nâ€¢ The cx and cy props define the x and y coordinates of the center of the circle. If cx and cy are omitted, the circle's center is set to (0,0)\nâ€¢ The r prop defines the radius of the circle\n\nThe element is used to create an ellipse.\n\nAn ellipse is closely related to a circle. The difference is that an ellipse has an x and a y radius that differs from each other, while a circle has equal x and y radius.\nâ€¢ The cx prop defines the x coordinate of the center of the ellipse\nâ€¢ The cy prop defines the y coordinate of the center of the ellipse\n\nThe element is an SVG basic shape, used to create a line connecting two points.\nâ€¢ The x1 prop defines the start of the line on the x-axis.\nâ€¢ The y1 prop defines the start of the line on the y-axis.\nâ€¢ The x2 prop defines the end of the line on the x-axis.\nâ€¢ The y2 prop defines the end of the line on the y-axis.\n\nThe element is used to create a graphic that contains at least three sides. Polygons are made of straight lines, and the shape is \"closed\" (all the lines connect up).\nâ€¢ The points prop defines the x and y coordinates for each corner of the polygon\n\nThe element is used to create any shape that consists of only straight lines:\nâ€¢ The points prop defines the x and y coordinates for each point of the polyline\n\nThe element is used to define a path.\n\nThe following commands are available for path data:\n\nAll of the commands above can also be expressed with lower letters. Capital letters means absolutely positioned, lower cases means relatively positioned. See Path document of SVG to know parameters for each command.\n\nThe element is used to define text.\n\nThe element is used to draw multiple lines of text in SVG. Rather than having to position each line of text absolutely, the element makes it possible to position a line of text relatively to the previous line of text.\n\nIn addition to text drawn in a straight line, SVG also includes the ability to place text along the shape of a element. To specify that a block of text is to be rendered along the shape of a , include the given text within a element which includes an href attribute with a reference to a element.\n\nThe element is a container used to group other SVG elements. Transformations applied to the g element are performed on all of its child elements, and any of its props are inherited by its child elements. It can also group multiple elements to be referenced later with the <Use /> element.\n\nThe element can reuse an SVG shape from elsewhere in the SVG document, including elements and elements. The reused shape can be defined inside the <Defs> element (which makes the shape invisible until used) or outside.\n\nThis example shows a element defined inside a <Defs> element. This makes the invisible unless referenced by a element.\n\nBefore the element can be referenced, it must have an ID set on it via its id prop. The element references the element via its prop. Notice the # in front of the ID in the prop value.\n\nThe element specifies where to show the reused shapes via its x and y props. Notice that the shapes inside the element are located at 0,0. That is done because their position is added to the position specified in the element.\n\nThe SVG element is used to define reusable symbols. The shapes nested inside a are not displayed unless referenced by a element.\n\nThe element is used to embed definitions that can be reused inside an SVG image. For instance, you can group SVG shapes together and reuse them as a single shape.\n\nThe element allows a raster image to be included in an Svg component.\n\nThe SVG element defines a clipping path. A clipping path is used/referenced using the clipPath property\n\nThe element is used to define a linear gradient. The element must be nested within a <Defs> tag. The <Defs> tag is short for definitions and contains definition of special elements (such as gradients).\n\nLinear gradients can be defined as horizontal, vertical or angular gradients:\nâ€¢ Horizontal gradients are created when y1 and y2 are equal and x1 and x2 differ\nâ€¢ Vertical gradients are created when x1 and x2 are equal and y1 and y2 differ\nâ€¢ Angular gradients are created when x1 and x2 differ and y1 and y2 differ\nâ€¢ The id prop of the tag defines a unique name for the gradient\nâ€¢ The x1, x2, y1,y2 props of the tag define the start and end position of the gradient\nâ€¢ The color range for a gradient can be composed of two or more colors. Each color is specified with a tag. The offset prop is used to define where the gradient color begin and end\nâ€¢ The fill prop links the ellipse element to the gradient\n\nThis result is same as the example before. But it's recommend to use exact number instead; it has performance advantages over using percentages.\n\nThe element is used to define a radial gradient. The element must be nested within a <Defs> tag. The <Defs> tag is short for definitions and contains definition of special elements (such as gradients).\nâ€¢ The id prop of the tag defines a unique name for the gradient\nâ€¢ The cx, cy and r props define the outermost circle and the fx and fy define the innermost circle\nâ€¢ The color range for a gradient can be composed of two or more colors. Each color is specified with a tag. The offset prop is used to define where the gradient color begin and end\nâ€¢ The fill prop links the ellipse element to the gradient\n\nIn SVG, you can specify that any other graphics object or â€˜Gâ€™ element can be used as an alpha mask for compositing the current object into the background.\n\nA mask is defined with a â€˜Maskâ€™ element. A mask is used/referenced using the â€˜maskâ€™ property.\n\nA â€˜Maskâ€™ can contain any graphical elements or container elements such as a â€˜Gâ€™.\n\nThe element must be nested within a <Defs> tag. The <Defs> tag is short for definitions and contains definition of special elements (such as gradients).\n\nv10 adds experimental support for using masks together with native elements. If you had native elements inside any Svg root before (which was unsupported), then your content might change appearance when upgrading, as e.g. transforms and masks now take effect.\n\nA pattern is used to fill or stroke an object using a pre-defined graphic object which can be replicated (\"tiled\") at fixed intervals in x and y to cover the areas to be painted. Patterns are defined using a â€˜patternâ€™ element and then referenced by properties â€˜fillâ€™ and â€˜strokeâ€™ on a given graphics element to indicate that the given element shall be filled or stroked with the referenced pattern. The element must be nested within a <Defs> tag. The <Defs> tag is short for definitions and contains definition of special elements (such as gradients).\n\nA marker is a symbol which is attached to one or more vertices of â€˜pathâ€™, â€˜lineâ€™, â€˜polylineâ€™ and â€˜polygonâ€™ elements. Typically, markers are used to make arrowheads or polymarkers. Arrowheads can be defined by attaching a marker to the start or end vertices of â€˜pathâ€™, â€˜lineâ€™ or â€˜polylineâ€™ elements. Polymarkers can be defined by attaching a marker to all vertices of a â€˜pathâ€™, â€˜lineâ€™, â€˜polylineâ€™ or â€˜polygonâ€™ element.\n\nThe graphics for a marker are defined by a â€˜markerâ€™ element. To indicate that a particular â€˜markerâ€™ element should be rendered at the vertices of a particular â€˜pathâ€™, â€˜lineâ€™, â€˜polylineâ€™ or â€˜polygonâ€™ element, set one or more marker properties (â€˜markerâ€™, â€˜marker-startâ€™, â€˜marker-midâ€™ or â€˜marker-endâ€™) to reference the given â€˜markerâ€™ element.\n\nSVG is designed to be compatible with other XML languages for describing and rendering other types of content. The â€˜foreignObjectâ€™ element allows for inclusion of elements in a non-SVG namespace which is rendered within a region of the SVG graphic using other user agent processes. The included foreign graphical content is subject to SVG transformations, filters, clipping, masking and compositing.\n\nOne goal for SVG is to provide a mechanism by which other XML language processors can render into an area within an SVG drawing, with those renderings subject to the various transformations and compositing parameters that are currently active at a given point within the SVG content tree. One particular example of this is to provide a frame for XML content styled with CSS or XSL so that dynamically reflowing text (subject to SVG transformations and compositing) could be inserted into the middle of some SVG content.\n\nTouch events are supported in react-native-svg. These include:\n\nYou can use these events to provide interactivity to your react-native-svg components.\n\nFor more examples of touch in action, checkout the TouchEvents.js examples.\n\nFilter effects are a way of processing an elementâ€™s rendering before it is displayed in the document. Typically, rendering an element via CSS or SVG can conceptually be described as if the element, including its children, are drawn into a buffer (such as a raster image) and then that buffer is composited into the elements parent. Filters apply an effect before the compositing stage. Examples of such effects are blurring, changing color intensity and warping the image.\n\nThe following filters have been implemented:\n\nis a new component that is not strictly related to SVG. Its behavior should be the same as a regular component from React Native with one exception - the additional prop , which accepts an array of filters to apply to the image.\n\nFilters can be applied in two ways\nâ€¢ or with CSS API through style prop https://developer.mozilla.org/en-US/docs/Web/CSS/filter"
    },
    {
        "link": "https://stackoverflow.com/questions/76670403/how-to-use-svgs-with-expo-image",
        "document": "Try following this from Expo Docs\n\nI've been having this issue on Expo SDK 50 and using React-SVGR helped. My answer is to convert your .svg file to a React Native SVG Component\n\nOpen React-SVGR, on the \"SVG INPUT\" tab clear the text you see, then drag-and-drop your .svg file on the \"SVG INPUT\" tab and that's it. It will generate code for you on the right tab \"JSX OUTPUT\" and also check the Global sidebar for extra controls like if you use typescript, also tick the typescript checkbox plus the \"Expand Props\" switch it to none. Also on the Sidebar, under \"SVGO\", disable it.\n\nNow just copy and paste the code into your component and your SVG should show/display and also adjust the height and width according to your styles."
    },
    {
        "link": "https://reactnative.dev/docs/environment-setup",
        "document": "React Native allows developers who know React to create native apps. At the same time, native developers can use React Native to gain parity between native platforms by writing common features once.\n\nWe believe that the best way to experience React Native is through a Framework, a toolbox with all the necessary APIs to let you build production ready apps.\n\nYou can also use React Native without a Framework, however weâ€™ve found that most developers benefit from using a React Native Framework like Expo. Expo provides features like file-based routing, high-quality universal libraries, and the ability to write plugins that modify native code without having to manage native files.\n\nCan I use React Native without a Framework? Yes. You can use React Native without a Framework. However, if youâ€™re building a new app with React Native, we recommend using a Framework. In short, youâ€™ll be able to spend time writing your app instead of writing an entire Framework yourself in addition to your app. The React Native community has spent years refining approaches to navigation, accessing native APIs, dealing with native dependencies, and more. Most apps need these core features. A React Native Framework provides them from the start of your app. Without a Framework, youâ€™ll either have to write your own solutions to implement core features, or youâ€™ll have to piece together a collection of pre-existing libraries to create a skeleton of a Framework. This takes real work, both when starting your app, then later when maintaining it. If your app has unusual constraints that are not served well by a Framework, or you prefer to solve these problems yourself, you can make a React Native app without a Framework using Android Studio, Xcode. If youâ€™re interested in this path, learn how to set up your environment and how to get started without a framework.\n\nExpo is a production-grade React Native Framework. Expo provides developer tooling that makes developing apps easier, such as file-based routing, a standard library of native modules, and much more.\n\nExpo's Framework is free and open source, with an active community on GitHub and Discord. The Expo team works in close collaboration with the React Native team at Meta to bring the latest React Native features to the Expo SDK.\n\nThe team at Expo also provides Expo Application Services (EAS), an optional set of services that complements Expo, the Framework, in each step of the development process.\n\nTo create a new Expo project, run the following in your terminal:\n\nOnce youâ€™ve created your app, check out the rest of Expoâ€™s getting started guide to start developing your app."
    },
    {
        "link": "https://github.com/kristerkari/react-native-svg-transformer",
        "document": "React Native SVG transformer allows you to import SVG files in your React Native project the same way that you would in a Web application when using a library like SVGR to transform your imported SVG images into React components.\n\nThis makes it possible to use the same code for React Native and Web.\n\nYou can then use your image as a component:\n\nMake sure that you have installed the library:\n\nMerge the contents from your project's file with this config (create the file if it does not exist already).\n\nMerge the contents from your project's file with this config (create the file if it does not exist already).\n\nMerge the contents from your project's file with this config (create the file if it does not exist already).\n\nSome React Native projects are using Expo modules without using expo-cli.\n\nIn such projects Expo's transformer is selected by default, and can be overwritten to correctly use React Native's transformer by adding to the require path:\n\nYou can also force Expo's transformer to always be used:\n\nIf you are using TypeScript, you need to add this to your file (create one if you don't have one already):\n\nSVGR has a configuration file, which makes it possible for you to customize how SVG images get transformed to React/React Native.\n\nRead more about the configuration options: Configuring SVGR and SVGR options.\n\nFor example, if you want to change SVG image's fill color from to (keep in mind that this will be used for all SVG images in your app).\n\nEdit your file and include a line for that matching a hex code to\n\nAnd then make sure your path tag inside the SVG file attribute is the hex code (in this case ).\n\nYou can then use your image as a component:\n\nTo use to test your React Native components that import images, you need to add this configuration that mocks the SVG images that are transformed to React components:\n\nThen, depending on where you have your Jest configuration:\n\nAt the moment react-native-svg does not support custom font families in iOS right out of the box. A workaround is to take your with custom fonts and convert it to outlines. This will replace tags for tags in your file.\n\nIn addition to React Native, this transformer depends on the following libraries:"
    },
    {
        "link": "https://github.com/kristerkari/react-native-svg-transformer/issues/141",
        "document": "I added this library to the project long ago when there wasn't file. I have just noticed when I upgraded React Native to version 0.64.1 that the is added to the . So the file looks somethings like this:\n\nand to use this library looks like this:\n\nso what I think the correct way to merge them together is something like this:\n\nBut this doesn't work for me. It does build successfully, however, the screen is blank after the splash screen is gone. What works for me (the screen is not blank after staring up) is this:\n\nBut I'm not sure this is the correct way to paste those keys ( , )."
    },
    {
        "link": "https://stackoverflow.com/questions/71106603/react-native-svg-transformer-not-working-with-the-metro-config-js-file",
        "document": "I am currently trying to use React Native SVG to render SVG components in my RN app. However, the metro.config.js configuration causes some errors I cannot seem to resolve.\n\nI have installed react-native-svg and react-native-svg-transformer and combined the metro config file as such:\n\nHowever, I always get the following error:\n\nI tried restarting with and after playing around with the config file, I noticed that it was the async that was causing the issue. The variable couldn't be found since the parent function isn't awaiting. I can't get around this when using getDefaultConfig(). How can I get around this?"
    },
    {
        "link": "https://medium.com/@harshitkishor2/leveraging-svg-in-react-native-a-comprehensive-guide-7f02b7bb9802",
        "document": "SVG (Scalable Vector Graphics) is a powerful and versatile image format that enables developers to create crisp and scalable graphics for their applications. When it comes to React Native, integrating SVG into your project might seem challenging at first, but with the help of the library and some configuration tweaks, you can unlock a world of possibilities for stunning visual elements in your mobile app. In this article, we will explore the advantages of using SVG in React Native and provide a step-by-step guide on how to integrate SVG into your projects.\nâ€¢ Scalability: SVGs are resolution-independent, meaning they can be scaled to any size without losing quality. This is particularly beneficial in mobile app development, where devices come in various screen sizes and resolutions.\nâ€¢ Reduced File Size: Compared to raster images, SVGs generally have smaller file sizes. This can contribute to faster app loading times, especially for users with slower internet connections.\nâ€¢ Interactivity: SVGs can be easily manipulated using CSS and JavaScript, allowing for dynamic animations and interactivity. This is a key advantage for creating engaging and responsive user interfaces.\nâ€¢ Accessibility: SVGs are inherently accessible as they can be styled using CSS, making it easier to adhere to accessibility standards. This is crucial for ensuring a positive user experience for all app users.\n\nReact Native does not have built-in support for SVG, so youâ€™ll need to choose a third-party library. Open your terminal and run the following commands to install dependecies:\n\nThe package provides components for rendering SVG elements, while helps integrate SVG files seamlessly into your project.\n\nTo make sure your project recognizes SVG files, youâ€™ll need to update your file. This file is crucial for configuring the Metro bundler, which is responsible for building your React Native application.\n\nOpen your file and make the following adjustments:\n\nThis configuration ensures that the Metro bundler recognizes SVG files as source files and uses the for handling them during the build process.\n\nFor TypeScript users, additional steps are required to provide type definitions for SVG files. Create a file in your project (if it doesn't exist) and add the following content:\n\nThis TypeScript declaration tells the compiler that any file with a extension should be treated as a React component that accepts from .\n\nWith the setup complete, you can now start incorporating SVG elements into your React Native components. Import the SVG files as you would with any other image or component, and use them in your JSX:\n\nImport the necessary SVG components from the library and use them in your React Native components:\nâ€¢ Optimize SVGs: Before using an SVG in your React Native app, optimize it using tools like SVGO to reduce unnecessary code and improve performance.\nâ€¢ Consider Accessibility: Ensure that your SVGs are accessible by providing alternative text and using semantic elements where appropriate.\nâ€¢ Testing Across Devices: Test your SVGs on various devices and screen sizes to ensure a consistent and responsive user experience.\nâ€¢ Explore Animation Libraries: To enhance user interaction, explore animation libraries like or for creating captivating animations.\n\nBy incorporating SVGs into your React Native projects, you can achieve highly scalable, interactive, and visually appealing user interfaces. The flexibility and versatility of SVGs, combined with the power of React Native, open up a world of possibilities for creating mobile apps that stand out in terms of both design and performance. Start integrating SVGs into your projects today and elevate your React Native development to new heights!"
    },
    {
        "link": "https://dev.to/amitkumar13/how-to-add-svg-in-react-native-4m8m",
        "document": "React Native is a popular framework for building mobile applications using JavaScript and React. One common requirement in mobile app development is the use of Scalable Vector Graphics (SVG) for icons, illustrations, and other graphical elements. SVGs are resolution-independent and can scale without losing quality, making them ideal for mobile applications with varying screen sizes and resolutions.\n\nIn this blog, we will guide you through the steps to add SVG support in a React Native project using the react-native-svg library. We will also configure the necessary settings in the metro.config.js file to ensure proper handling of SVG files.\n\nStep 1: Install the Required Packages\n\n First, you need to install the react-native-svg library and the react-native-svg-transformer package. These packages will allow you to use SVGs in your React Native project and transform them appropriately.\n\nRun the following command to install these packages:\n\n\n\nor if you are using yarn:\n\n\n\nStep 2: Configure Metro Bundler\n\n The next step is to configure the Metro bundler to handle SVG files correctly. You need to modify the file in the root directory of your project.\n\nIf you don't have a metro.config.js file already, create one and add the following code:\n\n\n\nThis configuration does the following:\n\nUses react-native-svg-transformer as the Babel transformer for SVG files.\n\n Updates the resolver settings to ensure SVG files are treated as source files rather than assets.\n\n Step 3: Use SVG in Your React Native Component\n\n Now that you have configured your project to support SVGs, you can start using them in your React Native components.\n\nFirst, create an SVG file (e.g., logo.svg) and place it in your project's directory.\n\nNext, import the SVG file in your component and use it as a React component:\n\n\n\nIn this example, the Logo component represents your SVG file. You can adjust the width and height properties to scale the SVG as needed.\n\nConclusion\n\n Adding SVG support in a React Native project is straightforward with the help of react-native-svg and react-native-svg-transformer. By following the steps outlined in this blog, you can easily integrate SVGs into your React Native applications, ensuring your graphics look sharp on all devices."
    }
]