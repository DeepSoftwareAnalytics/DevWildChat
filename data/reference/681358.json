[
    {
        "link": "https://spigotmc.org/resources/customcommands.14363",
        "document": ""
    },
    {
        "link": "https://bukkit.org/threads/tutorial-registering-commands-at-runtime.158461",
        "document": "I think its better use PlayerCommandPreprocessEvent its easy don't use reflection less line of code and can make it more interact with user and prevent any other command overrides yours.\n\n Its pretty simple."
    },
    {
        "link": "https://docs.papermc.io/velocity/dev/command-api",
        "document": "The command API lets you create commands that can be executed by a player connected to the proxy or the console.\n\nEach command class needs to implement a sub-interface. The choice depends on the type of arguments and the granularity of suggestions provided to the client. These include:\n\nInternally, Velocity uses the Brigadier library to register and dispatch command actions. You can register your own s by wrapping them in a . Let's see an example of a command that will tell whoever executes the command \"Hello World\" in light blue text.\n\nBrigadier commands have full backward compatibility with 1.12.2 and lower versions.\n\nCustom plugin command argument types are not supported in Velocity, as they would require the client to also support them. We recommend sticking to the predefined Brigadier types provided.\n\nModeled after the convention popularized by Bukkit and BungeeCord, a has three methods: one for when the command is executed, one to provide suggestions for tab completion, and one to check a has permission to use the command. All methods receive a object, which contains the that executed the command and the arguments as an array of strings. The previous example can also be implemented using this interface:\n\nIt's important to note doesn't include the command alias (e.g. for ). In the event that no arguments are specified, an empty array will be passed, rather than a null array.\n\nIf a player or the console executes the following command: , the first argument will be , which we can access using and the second argument will be .\n\nThere's certain cases where you don't need to process the arguments. These may include:\n‚Ä¢ A style command, where the arguments contain the message as a string; or\n‚Ä¢ You're using an external command framework to process your commands.\n\nA raw command indicates the proxy to pass the command alias and its arguments directly without further processing. Let's see an example of a command that echoes the received input:\n\nNow that we have created a command, we need to register it in order for it to work. To register commands, you use the . We get the command manager by executing with the proxy instance, or by injecting it using the annotation in the main class. The register method requires two parameters, the command metadata and the command object.\n\nThe contains the case-insensitive aliases and more advanced features. provides a meta builder via the method.\n\nIf you're registering a , you may prefer to use the method or to specify additional aliases."
    },
    {
        "link": "https://dev.bukkit.org/projects/registry",
        "document": "Create your own custom items and recipes, all in-game (or via the files, if that's your fancy)! All items are registered within this plugin, providing an API for plugins to recognize custom items and register their own!\n\nHaving problems or issues?‚ùì Click here for help!üí° | Support me c: | Source code\n\nThis plugin provides an API for plugins to to register, recognize, and spawn custom items created by server administrators and other plugins (that hook into this plugin).\n\nYou can create and register your own items for plugins to use like AbsorptionShields, and spawn them with the exact same name, lore, durability, etc.\n\nThere is also auxilliary recipe creation support which is registered directly into the server's recipe store, but this is limited to the crafting table and limitations of the vanilla crafting system.\n‚Ä¢ /citem - Name, add lore, or register a new custom item.\n‚Ä¢ /cremove - Removes a custom item and all its recipes.\n‚Ä¢ Easily add name and lore to your custom items via the clickable chat prompts (requires Paper or Spigot for clickable prompts, otherwise fallbacks to command-based editing).\n‚Ä¢ API for plugins, they can\n‚Ä¢ register their own recipes for custom items,\n‚Ä¢ Easily create recipes by placing items in the on-screen \"GUI\" prompt.\n‚Ä¢ Recipe creation supports all rectangular sizes of shaped recipes! Recipes can 1x3, 2x2, 1x2, 2x3, etc.\n‚Ä¢ Compatible with all crafting-related plugins such as FastCraft+ since the recipe is actually registered in the server.\n\nCurrently resides in the main class. Get the plugin's instance as per usual and call the public methods as you wish. Javadocs are present, will host them soon, but for now they're in the code.\n\nHaving problems or issues?‚ùì Click here for help!üí° | Support me c: | Source code"
    },
    {
        "link": "https://hub.spigotmc.org/javadocs/spigot/index.html?overview-summary.html",
        "document": "The documentation is for developing plugins and is split into the respective packages for each subject matter. This documentation does not cover running a server, contributing code back to the project, or setting up a workspace. Working knowledge of the Java language is a prerequisite for developing plugins.\n\nFor basic plugin development, see the . It covers the basic requirements of a plugin jar.\n\nFor handling events and triggered code, see the .\n\nNote: While the Bukkit API makes every effort to ensure stability, this is not guaranteed, especially across major versions. In particular the following is a (incomplete) list of things that are not API.\n‚Ä¢ Implementing interfaces or extending classes. The Bukkit API is designed to only be implemented by server software. Unless a class/interface is obviously designed for extension (eg ), or explicitly marked as such, it should not be implemented or extended by plugins. Although this can sometimes work, it is not guaranteed to do so and resulting bugs will be disregarded.\n‚Ä¢ Constructing inbuilt events. Although backwards compatibility is attempted where possible, it is sometimes not possible to add new fields to events without breaking existing constructors. To ensure that the API continues to evolve, event constructors are therefore not plugin API.\n‚Ä¢ Implementation classes. Concrete implementation classes packaged with Bukkit (eg those beginning with Simple) are not API. You should access them via their interfaces instead.\n‚Ä¢ The \"enumness\" of enums which implement . Such enums are liable to conversion to regular classes and therefore usages deriving from their status as an enum (including, but not limited to, use in switch statements and classes such as ) should be avoided."
    },
    {
        "link": "https://bukkit.org/threads/tutorial-scoreboards-teams-with-the-bukkit-api.139655",
        "document": "\n‚Ä¢ None //Adding prefixes (shows up in player list before the player's name, supports ChatColors)\n‚Ä¢ None //Adding suffixes (shows up in player list after the player's name, supports ChatColors)\n‚Ä¢ None //Making invisible players on the same team have a transparent body\n‚Ä¢ None //Making it so players can't hurt others on the same team\n‚Ä¢ None //Setting where to display the scoreboard/objective (either SIDEBAR, PLAYER_LIST or BELOW_NAME)\n‚Ä¢ None //Setting the display name of the scoreboard/objective\n‚Ä¢ None //If you are using custom player names (as shown above), then you have to do this:\n‚Ä¢ None board. ChatColor. //Same as what I used above, case/color sensitive"
    },
    {
        "link": "https://spigotmc.org/threads/updating-scoreboard-not-working.435096",
        "document": ""
    },
    {
        "link": "https://spigotmc.org/threads/need-help-with-scoreboard-plugin.426642",
        "document": ""
    },
    {
        "link": "https://bukkit.org/threads/updating-scoreboards.484704",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/70604831/modifying-playerlist-scoreboard",
        "document": "I want to change the list that is displayed when a player presses the tab key. I have used to change a player name and to set the header/footer displayed in this list.\n\nNow I want to make different people see different player names in the list, this would be used to hide moderators in the tab list and show different roles in minigames.\n\nMy example: I have a minigame that contains different roles, but not everyone should be able to see them on the table list, only players who are on the same team should be able to see their team members. Let's say I have 3 teams:\n\nEveryone in Team1 should see their team members with their assigned team name in the table list. Everyone else would only be shown in white for Team1, so they cannot see which team they are on.\n\nThe same applies to Team2 and Team3.\n\nThis is an example, there is no need to lecture the players.\n\nI've used ProtocolLib and Packets, in general, a few times so there shouldn't be a problem with it. What should I use? Thanks for your help :D"
    }
]