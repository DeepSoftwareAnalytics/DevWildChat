[
    {
        "link": "https://technical-analysis-library-in-python.readthedocs.io/en/stable/ta.html",
        "document": "It is a Technical Analysis library useful to do feature engineering from financial time series datasets (Open, Close, High, Low, Volume). It is built on Pandas and Numpy.\n\nThe Awesome Oscillator is an indicator used to measure market momentum. AO calculates the difference of a 34 Period and 5 Period Simple Moving Averages. The Simple Moving Averages that are used are not calculated using closing price but rather each bar’s midpoints. AO is generally used to affirm trends or to anticipate possible reversals. Awesome Oscillator is a 34-period simple moving average, plotted through the central points of the bars (H+L)/2, and subtracted from the 5-period simple moving average, graphed across the central points of the bars (H+L)/2. Moving average designed to account for market noise or volatility. KAMA will closely follow prices when the price swings are relatively small and the noise is low. KAMA will adjust when the price swings widen and follow prices from a greater distance. This trend-following indicator can be used to identify the overall trend, time turning points and filter price movements.\n• None pow1 (int) – number of periods for the fastest EMA constant.\n• None pow2 (int) – number of periods for the slowest EMA constant. The Percentage Price Oscillator (PPO) is a momentum oscillator that measures the difference between two moving averages as a percentage of the larger moving average. The Percentage Volume Oscillator (PVO) is a momentum oscillator for volume. The PVO measures the difference between two volume-based moving averages as a percentage of the larger moving average. The Rate-of-Change (ROC) indicator, which is also referred to as simply Momentum, is a pure momentum oscillator that measures the percent change in price from one period to the next. The ROC calculation compares the current price with the price “n” periods ago. The plot forms an oscillator that fluctuates above and below the zero line as the Rate-of-Change moves from positive to negative. As a momentum oscillator, ROC signals include centerline crossovers, divergences and overbought-oversold readings. Divergences fail to foreshadow reversals more often than not, so this article will forgo a detailed discussion on them. Even though centerline crossovers are prone to whipsaw, especially short-term, these crossovers can be used to identify the overall trend. Identifying overbought or oversold extremes comes naturally to the Rate-of-Change oscillator. Compares the magnitude of recent gains and losses over a specified time period to measure speed and change of price movements of a security. It is primarily used to attempt to identify overbought or oversold conditions in the trading of an asset. The StochRSI oscillator was developed to take advantage of both momentum indicators in order to create a more sensitive indicator that is attuned to a specific security’s historical performance rather than a generalized analysis of price change. Developed in the late 1950s by George Lane. The stochastic oscillator presents the location of the closing price of a stock in relation to the high and low range of the price of a stock over a period of time, typically a 14-day period. Larry Williams’ (1976) signal, a momentum oscillator designed to capture momentum across three different timeframes. BP = Close - Minimum(Low or Prior Close). TR = Maximum(High or Prior Close) - Minimum(Low or Prior Close) Average7 = (7-period BP Sum) / (7-period TR Sum) Average14 = (14-period BP Sum) / (14-period TR Sum) Average28 = (28-period BP Sum) / (28-period TR Sum) Developed by Larry Williams, Williams %R is a momentum indicator that is the inverse of the Fast Stochastic Oscillator. Also referred to as %R, Williams %R reflects the level of the close relative to the highest high for the look-back period. In contrast, the Stochastic Oscillator reflects the level of the close relative to the lowest low. %R corrects for the inversion by multiplying the raw value by -100. As a result, the Fast Stochastic Oscillator and Williams %R produce the exact same lines, only the scaling is different. Williams %R oscillates from 0 to -100. Readings from 0 to -20 are considered overbought. Readings from -80 to -100 are considered oversold. Unsurprisingly, signals derived from the Stochastic Oscillator are also applicable to Williams %R. Lowest Low = lowest low for the look-back period Highest High = highest high for the look-back period %R is multiplied by -100 correct the inversion and move the decimal. The Williams %R oscillates from 0 to -100. When the indicator produces readings from 0 to -20, this indicates overbought market conditions. When readings are -80 to -100, it indicates oversold market conditions. The Awesome Oscillator is an indicator used to measure market momentum. AO calculates the difference of a 34 Period and 5 Period Simple Moving Averages. The Simple Moving Averages that are used are not calculated using closing price but rather each bar’s midpoints. AO is generally used to affirm trends or to anticipate possible reversals. Awesome Oscillator is a 34-period simple moving average, plotted through the central points of the bars (H+L)/2, and subtracted from the 5-period simple moving average, graphed across the central points of the bars (H+L)/2. Moving average designed to account for market noise or volatility. KAMA will closely follow prices when the price swings are relatively small and the noise is low. KAMA will adjust when the price swings widen and follow prices from a greater distance. This trend-following indicator can be used to identify the overall trend, time turning points and filter price movements.\n• None window (int) – n number of periods for the efficiency ratio.\n• None pow1 (int) – number of periods for the fastest EMA constant.\n• None pow2 (int) – number of periods for the slowest EMA constant. The Percentage Price Oscillator (PPO) is a momentum oscillator that measures the difference between two moving averages as a percentage of the larger moving average. The Percentage Price Oscillator (PPO) is a momentum oscillator that measures the difference between two moving averages as a percentage of the larger moving average. The Percentage Price Oscillator (PPO) is a momentum oscillator that measures the difference between two moving averages as a percentage of the larger moving average. The Percentage Volume Oscillator (PVO) is a momentum oscillator for volume. The PVO measures the difference between two volume-based moving averages as a percentage of the larger moving average. The Percentage Volume Oscillator (PVO) is a momentum oscillator for volume. The PVO measures the difference between two volume-based moving averages as a percentage of the larger moving average. The Percentage Volume Oscillator (PVO) is a momentum oscillator for volume. The PVO measures the difference between two volume-based moving averages as a percentage of the larger moving average. The Rate-of-Change (ROC) indicator, which is also referred to as simply Momentum, is a pure momentum oscillator that measures the percent change in price from one period to the next. The ROC calculation compares the current price with the price “n” periods ago. The plot forms an oscillator that fluctuates above and below the zero line as the Rate-of-Change moves from positive to negative. As a momentum oscillator, ROC signals include centerline crossovers, divergences and overbought-oversold readings. Divergences fail to foreshadow reversals more often than not, so this article will forgo a detailed discussion on them. Even though centerline crossovers are prone to whipsaw, especially short-term, these crossovers can be used to identify the overall trend. Identifying overbought or oversold extremes comes naturally to the Rate-of-Change oscillator. Compares the magnitude of recent gains and losses over a specified time period to measure speed and change of price movements of a security. It is primarily used to attempt to identify overbought or oversold conditions in the trading of an asset. Developed in the late 1950s by George Lane. The stochastic oscillator presents the location of the closing price of a stock in relation to the high and low range of the price of a stock over a period of time, typically a 14-day period. The StochRSI oscillator was developed to take advantage of both momentum indicators in order to create a more sensitive indicator that is attuned to a specific security’s historical performance rather than a generalized analysis of price change. The StochRSI oscillator was developed to take advantage of both momentum indicators in order to create a more sensitive indicator that is attuned to a specific security’s historical performance rather than a generalized analysis of price change. The StochRSI oscillator was developed to take advantage of both momentum indicators in order to create a more sensitive indicator that is attuned to a specific security’s historical performance rather than a generalized analysis of price change. Larry Williams’ (1976) signal, a momentum oscillator designed to capture momentum across three different timeframes. BP = Close - Minimum(Low or Prior Close). TR = Maximum(High or Prior Close) - Minimum(Low or Prior Close) Average7 = (7-period BP Sum) / (7-period TR Sum) Average14 = (14-period BP Sum) / (14-period TR Sum) Average28 = (28-period BP Sum) / (28-period TR Sum) Developed by Larry Williams, Williams %R is a momentum indicator that is the inverse of the Fast Stochastic Oscillator. Also referred to as %R, Williams %R reflects the level of the close relative to the highest high for the look-back period. In contrast, the Stochastic Oscillator reflects the level of the close relative to the lowest low. %R corrects for the inversion by multiplying the raw value by -100. As a result, the Fast Stochastic Oscillator and Williams %R produce the exact same lines, only the scaling is different. Williams %R oscillates from 0 to -100. Readings from 0 to -20 are considered overbought. Readings from -80 to -100 are considered oversold. Unsurprisingly, signals derived from the Stochastic Oscillator are also applicable to Williams %R. Lowest Low = lowest low for the look-back period Highest High = highest high for the look-back period %R is multiplied by -100 correct the inversion and move the decimal. From: https://www.investopedia.com/terms/w/williamsr.asp The Williams %R oscillates from 0 to -100. When the indicator produces readings from 0 to -20, this indicates overbought market conditions. When readings are -80 to -100, it indicates oversold market conditions.\n\nIt measures the amount of Money Flow Volume over a specific period. It relate an asset’s price change to its volume and is particularly useful for assessing the strength of a trend. It illustrates how strong the actual buying or selling pressure is. High positive values mean there is a strong rising trend, and low values signify a strong downward trend. Uses both price and volume to measure buying and selling pressure. It is positive when the typical price rises (buying pressure) and negative when the typical price declines (selling pressure). A ratio of positive and negative money flow is then plugged into an RSI formula to create an oscillator that moves between zero and one hundred. It relates price and volume in the stock market. OBV is based on a cumulative total volume. Is based on a running cumulative volume that adds or substracts a multiple of the percentage change in share price trend and current volume, depending upon the investment’s upward or downward movements. VWAP equals the dollar value of all trading periods divided by the total trading volume for the current day. The calculation starts when trading opens and ends when it closes. Because it is good for the current trading day only, intraday periods and data are used in the calculation. It measures the amount of Money Flow Volume over a specific period. It relate an asset’s price change to its volume and is particularly useful for assessing the strength of a trend. It illustrates how strong the actual buying or selling pressure is. High positive values mean there is a strong rising trend, and low values signify a strong downward trend. Uses both price and volume to measure buying and selling pressure. It is positive when the typical price rises (buying pressure) and negative when the typical price declines (selling pressure). A ratio of positive and negative money flow is then plugged into an RSI formula to create an oscillator that moves between zero and one hundred. The Negative Volume Index (NVI) is a cumulative indicator that uses the change in volume to decide when the smart money is active. Paul Dysart first developed this indicator in the 1930s. […] Dysart’s Negative Volume Index works under the assumption that the smart money is active on days when volume decreases and the not-so-smart money is active on days when volume increases. The cumulative NVI line was unchanged when volume increased from one period to the other. In other words, nothing was done. Norman Fosback, of Stock Market Logic, adjusted the indicator by substituting the percentage price change for Net Advances. This implementation is the Fosback version. If today’s volume is less than yesterday’s volume then: Please note: the “stockcharts.com” example calculation just adds the percentange change of price to previous NVI when volumes decline; other sources indicate that the same percentage of the previous NVI value should be added, which is what is implemented here. It relates price and volume in the stock market. OBV is based on a cumulative total volume. It relate an asset’s price change to its volume and is particularly useful for assessing the strength of a trend. Is based on a running cumulative volume that adds or substracts a multiple of the percentage change in share price trend and current volume, depending upon the investment’s upward or downward movements. VWAP equals the dollar value of all trading periods divided by the total trading volume for the current day. The calculation starts when trading opens and ends when it closes. Because it is good for the current trading day only, intraday periods and data are used in the calculation.\n\nThe indicator provide an indication of the degree of price volatility. Strong moves, in either direction, are often accompanied by large ranges, or large True Ranges. It returns 1, if close is higher than bollinger_hband. Else, it returns 0. It returns 1, if close is lower than bollinger_lband. Else, it returns 0. Keltner Channels are a trend following indicator used to identify reversals with channel breakouts and channel direction. Channels can also be used to identify overbought and oversold levels when the trend is flat.\n• None window_atr (int) – n atr period. Only valid if original_version param is False.\n• None original_version (bool) – if True, use original version as the centerline (SMA of typical price) if False, use EMA of close as the centerline. More info: https://school.stockcharts.com/doku.php?id=technical_indicators:keltner_channels\n• None multiplier (int) – The multiplier has the most effect on the channel width. default is 2 It returns 1, if close is higher than keltner_channel_hband. Else, it returns 0. It returns 1, if close is lower than keltner_channel_lband. Else, it returns 0. The indicator provide an indication of the degree of price volatility. Strong moves, in either direction, are often accompanied by large ranges, or large True Ranges. Upper band at K times an N-period standard deviation above the moving average (MA + Kdeviation). Returns 1, if close is higher than bollinger high band. Else, return 0. Lower band at K times an N-period standard deviation below the moving average (MA − Kdeviation). Returns 1, if close is lower than bollinger low band. Else, return 0. The upper band marks the highest price of an issue for n periods. The lower band marks the lowest price for n periods.\n• None window_atr (int) – n atr period. Only valid if original_version param is False.\n• None original_version (bool) – if True, use original version as the centerline (SMA of typical price) if False, use EMA of close as the centerline. More info: https://school.stockcharts.com/doku.php?id=technical_indicators:keltner_channels Returns 1, if close is higher than keltner high band channel. Else, return 0.\n• None window_atr (int) – n atr period. Only valid if original_version param is False.\n• None original_version (bool) – if True, use original version as the centerline (SMA of typical price) if False, use EMA of close as the centerline. More info: https://school.stockcharts.com/doku.php?id=technical_indicators:keltner_channels\n• None window_atr (int) – n atr period. Only valid if original_version param is False.\n• None original_version (bool) – if True, use original version as the centerline (SMA of typical price) if False, use EMA of close as the centerline. More info: https://school.stockcharts.com/doku.php?id=technical_indicators:keltner_channels Returns 1, if close is lower than keltner low band channel. Else, return 0.\n• None window_atr (int) – n atr period. Only valid if original_version param is False.\n• None original_version (bool) – if True, use original version as the centerline (SMA of typical price) if False, use EMA of close as the centerline. More info: https://school.stockcharts.com/doku.php?id=technical_indicators:keltner_channels\n• None window_atr (int) – n atr period. Only valid if original_version param is False.\n• None original_version (bool) – if True, use original version as the centerline (SMA of typical price) if False, use EMA of close as the centerline. More info: https://school.stockcharts.com/doku.php?id=technical_indicators:keltner_channels\n• None window_atr (int) – n atr period. Only valid if original_version param is False.\n• None original_version (bool) – if True, use original version as the centerline (SMA of typical price) if False, use EMA of close as the centerline. More info: https://school.stockcharts.com/doku.php?id=technical_indicators:keltner_channels\n• None window_atr (int) – n atr period. Only valid if original_version param is False.\n• None original_version (bool) – if True, use original version as the centerline (SMA of typical price) if False, use EMA of close as the centerline. More info: https://school.stockcharts.com/doku.php?id=technical_indicators:keltner_channels\n\nThe Plus Directional Indicator (+DI) and Minus Directional Indicator (-DI) are derived from smoothed averages of these differences, and measure trend direction over time. These two indicators are often referred to collectively as the Directional Movement Indicator (DMI). The Average Directional Index (ADX) is in turn derived from the smoothed averages of the difference between +DI and -DI, and measures the strength of the trend (regardless of direction) over time. Using these three indicators together, chartists can determine both the direction and strength of the trend. Identify when trends are likely to change direction. Aroon Up = ((N - Days Since N-day High) / N) x 100 Aroon Down = ((N - Days Since N-day Low) / N) x 100 Aroon Indicator = Aroon Up - Aroon Down CCI measures the difference between a security’s price change and its average price change. High positive readings indicate that prices are well above their average, which is a show of strength. Low negative readings indicate that prices are well below their average, which is a show of weakness. Is an indicator designed to remove trend from price and make it easier to identify cycles. It is useful to identify major stock market cycle junctures because its formula is weighed to be more greatly influenced by the longer and more dominant time spans, in order to better reflect the primary swings of stock market cycle. Is a trend-following momentum indicator that shows the relationship between two moving averages of prices. It uses the high-low range to identify trend reversals based on range expansions. It identifies range bulges that can foreshadow a reversal of the current trend. The Parabolic Stop and Reverse, more commonly known as the Parabolic SAR,is a trend-following indicator developed by J. Welles Wilder. The Parabolic SAR is displayed as a single parabolic line (or dots) underneath the price bars in an uptrend, and above the price bars in a downtrend.\n• None step (float) – the Acceleration Factor used to compute the SAR.\n• None max_step (float) – the maximum value allowed for the Acceleration Factor. The Schaff Trend Cycle (STC) is a charting indicator that is commonly used to identify market trends and provide buy and sell signals to traders. Developed in 1999 by noted currency trader Doug Schaff, STC is a type of oscillator and is based on the assumption that, regardless of time frame, currency trends accelerate and decelerate in cyclical patterns. Shows the percent rate of change of a triple exponentially smoothed moving average. It consists of two oscillators that capture positive and negative trend movement. A bullish signal triggers when the positive trend indicator crosses above the negative trend indicator or a key level. The Plus Directional Indicator (+DI) and Minus Directional Indicator (-DI) are derived from smoothed averages of these differences, and measure trend direction over time. These two indicators are often referred to collectively as the Directional Movement Indicator (DMI). The Average Directional Index (ADX) is in turn derived from the smoothed averages of the difference between +DI and -DI, and measures the strength of the trend (regardless of direction) over time. Using these three indicators together, chartists can determine both the direction and strength of the trend. The Plus Directional Indicator (+DI) and Minus Directional Indicator (-DI) are derived from smoothed averages of these differences, and measure trend direction over time. These two indicators are often referred to collectively as the Directional Movement Indicator (DMI). The Average Directional Index (ADX) is in turn derived from the smoothed averages of the difference between +DI and -DI, and measures the strength of the trend (regardless of direction) over time. Using these three indicators together, chartists can determine both the direction and strength of the trend. The Plus Directional Indicator (+DI) and Minus Directional Indicator (-DI) are derived from smoothed averages of these differences, and measure trend direction over time. These two indicators are often referred to collectively as the Directional Movement Indicator (DMI). The Average Directional Index (ADX) is in turn derived from the smoothed averages of the difference between +DI and -DI, and measures the strength of the trend (regardless of direction) over time. Using these three indicators together, chartists can determine both the direction and strength of the trend. Identify when trends are likely to change direction (downtrend). Identify when trends are likely to change direction (uptrend). CCI measures the difference between a security’s price change and its average price change. High positive readings indicate that prices are well above their average, which is a show of strength. Low negative readings indicate that prices are well below their average, which is a show of weakness. Is an indicator designed to remove trend from price and make it easier to identify cycles. It identifies the trend and look for potential signals within that trend. It identifies the trend and look for potential signals within that trend. It identifies the trend and look for potential signals within that trend. It identifies the trend and look for potential signals within that trend. It is useful to identify major stock market cycle junctures because its formula is weighed to be more greatly influenced by the longer and more dominant time spans, in order to better reflect the primary swings of stock market cycle. It is useful to identify major stock market cycle junctures because its formula is weighed to be more greatly influenced by the longer and more dominant time spans, in order to better reflect the primary swings of stock market cycle. Is a trend-following momentum indicator that shows the relationship between two moving averages of prices. Shows the relationship between MACD and MACD Signal. It uses the high-low range to identify trend reversals based on range expansions. It identifies range bulges that can foreshadow a reversal of the current trend. Returns the PSAR series with non-N/A values for downward trends\n• None step (float) – the Acceleration Factor used to compute the SAR.\n• None max_step (float) – the maximum value allowed for the Acceleration Factor. Returns 1, if there is a reversal towards an downward trend. Else, returns 0.\n• None step (float) – the Acceleration Factor used to compute the SAR.\n• None max_step (float) – the maximum value allowed for the Acceleration Factor. Returns the PSAR series with non-N/A values for upward trends\n• None step (float) – the Acceleration Factor used to compute the SAR.\n• None max_step (float) – the maximum value allowed for the Acceleration Factor. Returns 1, if there is a reversal towards an upward trend. Else, returns 0.\n• None step (float) – the Acceleration Factor used to compute the SAR.\n• None max_step (float) – the maximum value allowed for the Acceleration Factor. The Schaff Trend Cycle (STC) is a charting indicator that is commonly used to identify market trends and provide buy and sell signals to traders. Developed in 1999 by noted currency trader Doug Schaff, STC is a type of oscillator and is based on the assumption that, regardless of time frame, currency trends accelerate and decelerate in cyclical patterns. Shows the percent rate of change of a triple exponentially smoothed moving average. It consists of two oscillators that capture positive and negative trend movement. A bearish signal triggers when the negative trend indicator crosses above the positive trend indicator or a key level. It consists of two oscillators that capture positive and negative trend movement. A bullish signal triggers when the positive trend indicator crosses above the negative trend indicator or a key level."
    },
    {
        "link": "https://technical-analysis-library-in-python.readthedocs.io",
        "document": "Welcome to Technical Analysis Library in Python’s documentation!¶\n\nIt is a Technical Analysis library to financial time series datasets (open, close, high, low, volume). You can use it to do feature engineering from financial datasets. It is built on Python Pandas library."
    },
    {
        "link": "https://readthedocs.org/projects/technical-analysis-library-in-python/downloads/pdf/latest",
        "document": ""
    },
    {
        "link": "https://github.com/twopirllc/pandas-ta",
        "document": "Pandas Technical Analysis (Pandas TA) is an easy to use library that leverages the Pandas package with more than 130 Indicators and Utility functions and more than 60 TA Lib Candlestick Patterns. Many commonly used indicators are included, such as: Candle Pattern(cdl_pattern), Simple Moving Average (sma) Moving Average Convergence Divergence (macd), Hull Exponential Moving Average (hma), Bollinger Bands (bbands), On-Balance Volume (obv), Aroon & Aroon Oscillator (aroon), Squeeze (squeeze) and many more.\n\nNote: TA Lib must be installed to use all the Candlestick Patterns. . If TA Lib is not installed, then only the builtin Candlestick Patterns will be available.\n• Has 130+ indicators and utility functions.\n• BETA Also Pandas TA will run TA Lib's version, this includes TA Lib's 63 Chart Patterns.\n• Indicators in Python are tightly correlated with the de facto TA Lib if they share common indicators.\n• If TA Lib is also installed, TA Lib computations are enabled by default but can be disabled disabled per indicator by using the argument .\n• For instance to disable TA Lib calculation for stdev: .\n• NEW! Include External Custom Indicators independent of the builtin Pandas TA indicators. For more information, see documentation under .\n• Example Jupyter Notebook with vectorbt Portfolio Backtesting with Pandas TA's method.\n• Have the need for speed? By using the DataFrame strategy method, you get multiprocessing for free! Conditions permitting.\n• Easily add prefixes or suffixes or both to columns names. Useful for Custom Chained Strategies.\n• Example Jupyter Notebooks under the examples directory, including how to create Custom Strategies using the new Strategy Class\n• Potential Data Leaks: dpo and ichimoku. See indicator list below for details. Set to disable.\n\nPandas TA checks if the user has some common trading packages installed including but not limited to: TA Lib, Vector BT, YFinance ... Much of which is experimental and likely to break until it stabilizes more.\n• If TA Lib installed, existing indicators will eventually get a TA Lib version.\n• Easy Downloading of ohlcv data using yfinance. See and and examples below.\n\nThe version is the last stable release. Version: 0.3.14b\n• Includes all fixes and updates between pypi and what is covered in this README.\n\nThis is the Development Version which could have bugs and other undesireable side effects. Use at own risk!\n\nSome indicator arguments have been reordered for consistency. Use for more information or make a Pull Request to improve documentation.\n\nThanks for using Pandas TA!\n• \n• Have you read this document?\n• Are you running the latest version?\n• Have you tried the Examples?\n• Did they help?\n• Could you help improve them?\n• Did you know you can easily build Custom Strategies with the Strategy Class?\n• Documentation could always be improved. Can you help contribute?\n• \n• First, search the Closed Issues before you Open a new Issue; it may have already been solved.\n• Please be as detailed as possible with reproducible code, links if any, applicable screenshots, errors, logs, and data samples. You will be asked again if you provide nothing.\n• You want a new indicator not currently listed.\n• You want an alternate version of an existing indicator.\n• The indicator does not match another website, library, broker platform, language, et al.\n• Do you have correlation analysis to back your claim?\n• You will be asked to fill out an Issue even if you email my personally.\n\nThank you for your contributions!\n\nPandas TA has three primary \"styles\" of processing Technical Indicators for your use case and/or requirements. They are: Standard, DataFrame Extension, and the Pandas TA Strategy. Each with increasing levels of abstraction for ease of use. As you become more familiar with Pandas TA, the simplicity and speed of using a Pandas TA Strategy may become more apparent. Furthermore, you can create your own indicators through Chaining or Composition. Lastly, each indicator either returns a Series or a DataFrame in Uppercase Underscore format regardless of style.\n\nYou explicitly define the input columns and take care of the output.\n• \n• Chaining indicators is possible but you have to be explicit.\n• Since it returns a Series named . If needed, you may need to uniquely name it.\n\nCalling will automatically lowercase OHLCVA to ohlcva: open, high, low, close, volume, adj_close. By default, will use the ohlcva for the indicator arguments removing the need to specify input columns directly.\n• \n• Chaining Indicators require specifying the input like: .\n\nSame as the last three examples, but appending the results directly to the DataFrame .\n• \n• Chaining Indicators require specifying the input like: .\n\nA Pandas TA Strategy is a named group of indicators to be run by the strategy method. All Strategies use mulitprocessing except when using the parameter (see below). There are different types of Strategies listed in the following section.\n\nThe Strategy Class is a simple way to name and group your favorite TA Indicators by using a Data Class. Pandas TA comes with two prebuilt basic Strategies to help you get started: AllStrategy and CommonStrategy. A Strategy can be as simple as the CommonStrategy or as complex as needed using Composition/Chaining.\n• When using the strategy method, all indicators will be automatically appended to the DataFrame .\n• You are using a Chained Strategy when you have the output of one indicator as input into one or more indicators in the same Strategy.\n• Note: Use the 'prefix' and/or 'suffix' keywords to distinguish the composed indicator from it's default Series.\n\nSee the Pandas TA Strategy Examples Notebook for examples including Indicator Composition/Chaining.\n• name: Some short memorable string. Note: Case-insensitive \"All\" is reserved.\n• ta: A list of dicts containing keyword arguments to identify the indicator and the indicator's arguments\n• Note: A Strategy will fail when consumed by Pandas TA if there is no attribute. Remember to check your spelling.\n• description: A more detailed description of what the Strategy tries to capture. Default: None\n• created: At datetime string of when it was created. Default: Automatically generated.\n\nThe Pandas TA strategy method utilizes multiprocessing for bulk indicator processing of all Strategy types with ONE EXCEPTION! When using the parameter to rename resultant column(s), the indicators in array will be ran in order.\n\n# VWAP requires the DataFrame index to be a DatetimeIndex. # * Replace \"datetime\" with the appropriate column from your DataFrame . ( . ( [ ]), ) # Runs and appends all indicators to the current DataFrame by default # The resultant DataFrame will be large. . . () . . ( ) . . ( . ) # Use verbose if you want to make sure it is running. . . ( ) # Use timed if you want to see how long it takes to run. . . ( ) # Choose the number of cores to use. Default is all available cores. # For no multiprocessing, set this value to 0. . . # Maybe you do not want certain indicators. # Just exclude (a list of) them. . . ( [ , , , , ], ) # Perhaps you want to use different values for indicators. # This will run ALL indicators that have fast or slow as parameters. # Check your results and exclude as necessary. . . ( , , ) # Sanity check. Make sure all the columns are there .\n\nRemember These will not be utilizing multiprocessing\n\nPatterns that are not bold, require TA-Lib to be installed:\n• High-Low-Close Average: hlc3\n• Commonly known as 'Typical Price' in Technical Analysis literature\n• Ichimoku Kinkō Hyō: ichimoku\n• Returns two DataFrames. For more information: .\n• Volume Weighted Average Price: vwap\n• Requires the DataFrame index to be a DatetimeIndex\n• Think or Swim Standard Deviation All: tos_stdevall\n• Average Directional Movement Index: adx\n• Also includes dmp and dmn in the resultant DataFrame.\n\nPerformance Metrics are a new addition to the package and consequentially are likely unreliable. Use at your own risk. These metrics return a float and are not part of the DataFrame Extension. They are called the Standard way. For Example:\n\nFor easier integration with vectorbt's Portfolio method, the method has been replaced with method to simplify the generation of trading signals. For a comprehensive example, see the example Jupyter Notebook VectorBT Backtest with Pandas TA in the examples directory.\n• See the vectorbt website more options and examples.\n• A Strategy Class to help name and group your favorite indicators.\n• If a TA Lib is already installed, Pandas TA will run TA Lib's version. (BETA)\n• Some indicators have had their kwarg updated with more moving average choices with the Moving Average Utility function . For simplicity, all choices are single source moving averages. This is primarily an internal utility used by indicators that have a kwarg. This includes indicators: accbands, amat, aobv, atr, bbands, bias, efi, hilo, kc, natr, qqe, rvi, and thermo; the default parameters have not changed. However, can be used by the user as well if needed. For more information:\n• An experimental and independent Watchlist Class located in the Examples Directory that can be used in conjunction with the new Strategy Class.\n• Linear Regression (linear_regression) is a new utility method for Simple Linear Regression using Numpy or Scikit Learn's implementation.\n• Added utility/convience function, , to convert the DataFrame index to UTC. See: Now as a Pandas TA DataFrame Property to easily convert the DataFrame index to UTC.\n• Trend Return (trend_return) has been removed and replaced with tsignals. When given a trend Series like it returns the Trend, Trade Entries and Trade Exits of that trend to make it compatible with vectorbt by setting to get boolean Trade Entries and Exits. See\n• Arnaud Legoux Moving Average (alma) uses the curve of the Normal (Gauss) distribution to allow regulating the smoothness and high sensitivity of the indicator. See: trading account, or fund. See\n• Candle Patterns (cdl_pattern) If TA Lib is installed, then all those Candle Patterns are available. See the list and examples above on how to call the patterns. See\n• Correlation Trend Indicator (cti) is an oscillator created by John Ehler in 2020. See\n• Cross Signals (xsignals) was created by Kevin Johnson. It is a wrapper of Trade Signals that returns Trends, Trades, Entries and Exits. Cross Signals are commonly used for bbands, rsi, zscore crossing some value either above or below two values at different times. See\n• Directional Movement (dm) developed by J. Welles Wilder in 1978 attempts to determine which direction the price of an asset is moving. See\n• Even Better Sinewave (ebsw) measures market cycles and uses a low pass filter to remove noise. See:\n• Jurik Moving Average (jma) attempts to eliminate noise to see the \"true\" underlying activity.. See:\n• Klinger Volume Oscillator (kvo) was developed by Stephen J. Klinger. It is designed to predict price reversals in a market by comparing volume to price.. See\n• Schaff Trend Cycle (stc) is an evolution of the popular MACD incorportating two cascaded stochastic calculations with additional smoothing. See\n• Squeeze Pro (squeeze_pro) is an extended version of \"TTM Squeeze\" from John Carter. See\n• Tom DeMark's Sequential (td_seq) attempts to identify a price point where an uptrend or a downtrend exhausts itself and reverses. Currently exlcuded from for performance reasons. See\n• Think or Swim Standard Deviation All (tos_stdevall) indicator which returns the standard deviation of data for the entire plot or for the interval of the last bars defined by the length parameter. See\n• Vertical Horizontal Filter (vhf) was created by Adam White to identify trending and ranging markets.. See\n• ADX (adx): Added with default \"RMA\" and with the same options as TradingView. New argument so it behaves like TradingView's builtin ADX indicator. See .\n• Average True Range (atr): The default is now \"RMA\" and with the same options as TradingView. See .\n• Bollinger Bands (bbands): New argument to control the Degrees of Freedom. Also included BB Percent (BBP) as the final column. Default is 0. See .\n• Choppiness Index (chop): New argument to use Natural Logarithm (True) instead of the Standard Logarithm (False). Default is False. See .\n• Chande Kroll Stop (cksp): Added with default . When , cksp implements “The New Technical Trader” with default values. See .\n• Chande Momentum Oscillator (cmo): New argument will use TA Lib's version and if TA Lib is installed. Default is True. See .\n• Decreasing (decreasing): New argument checks if the series is continuously decreasing over period with a faster calculation. Default: . The argument has also been added with default None. See .\n• Increasing (increasing): New argument checks if the series is continuously increasing over period with a faster calculation. Default: . The argument has also been added with default None. See .\n• Linear Regression (linreg): Checks numpy's version to determine whether to utilize the method or the newer method. This should resolve Issues with Google Colab and it's delayed dependency updates as well as TensorFlow's dependencies as discussed in Issues #285 and #329.\n• Moving Average Convergence Divergence (macd): New argument enables AS version of MACD. Default is False. See .\n• Parabolic Stop and Reverse (psar): Bug fix and adjustment to match TradingView's . New argument to initialize the Acceleration Factor. See .\n• Percentage Price Oscillator (ppo): Included new argument as an option. Default is sma to match TA Lib. See .\n• True Strength Index (tsi): Added with default and Signal MA Mode with default ema as arguments. See .\n• Volume Weighted Average Price (vwap): Added a new parameter called . Default: \"D\" for \"Daily\". See Timeseries Offset Aliases for additional options. Requires the DataFrame index to be a DatetimeIndex. See .\n• Z Score (zscore): Changed return column name from to . See .\n\nFeeling generous, like the package or want to see it become more a mature package?"
    },
    {
        "link": "https://github.com/TA-Lib/ta-lib-python",
        "document": "This is a Python wrapper for TA-LIB based on Cython instead of SWIG. From the homepage:\n\nThe original Python bindings included with TA-Lib use SWIG which unfortunately are difficult to install and aren't as efficient as they could be. Therefore this project uses Cython and Numpy to efficiently and cleanly bind to TA-Lib -- producing results 2-4 times faster than the SWIG interface.\n\nIn addition, this project also supports the use of the Polars and Pandas libraries.\n\nThe upstream TA-Lib C library released version 0.6.1 and changed the library name to from . After trying to support both via autodetect and having some issues, we have decided to currently support three feature branches:\n\nYou can install from PyPI:\n\nOr checkout the sources and run yourself:\n\nIt also appears possible to install via Conda Forge:\n\nTo use TA-Lib for python, you need to have the TA-Lib already installed. You should probably follow their installation directions for your platform, but some suggestions are included below for reference.\n\nYou can simply install using Homebrew:\n\nIf you are using Apple Silicon, such as the M1 processors, and building mixed architecture Homebrew projects, you might want to make sure it's being built for your architecture:\n\nAnd perhaps you can set these before installing with :\n\nYou might also find this helpful, particularly if you have tried several different installations without success:\n\nFor 64-bit Windows, the easiest way is to get the executable installer:\n• Run the Installer or run from the command-line.\n\nAlternatively, if you prefer to get the libraries without installing, or would like to use the 32-bit version:\n\nNote: if your directory path includes spaces, the installation will probably fail with No such file or directory errors.\n\nIf you get a warning that looks like this:\n\nThis typically means can't find the underlying library, a dependency which needs to be installed.\n\nIf you installed the underlying library with a custom prefix (e.g., with ), then when you go to install this python wrapper you can specify additional search paths to find the library and include files for the underlying library using the and environment variables:\n\nSometimes installation will produce build errors like this:\n\nThis typically means that it can't find the underlying library, a dependency which needs to be installed. On Windows, this could be caused by installing the 32-bit binary distribution of the underlying library, but trying to use it with 64-bit Python.\n\nSometimes installation will fail with errors like this:\n\nThis typically means that you need the Python headers, and should run something like:\n\nSometimes building the underlying library has errors running that look like this:\n\nThis might mean that the directory path to the underlying library has spaces in the directory names. Try putting it in a path that does not have any spaces and trying again.\n\nSometimes you might get this error running :\n\nThis is likely an issue with trying to compile for 32-bit platform but without the appropriate headers. You might find some success looking at the first answer to this question.\n\nIf you get an error on macOS like this:\n\nYou might look at this question and use to fix it.\n\nIf you wonder why gives you different results than you expect, probably you want applied to , which is a little different than the which is applied to :\n\nIf the build appears to hang, you might be running on a VM with not enough memory -- try 1 GB or 2 GB.\n\nIf you get \"permission denied\" errors such as this, you might need to give your user access to the location where the underlying TA-Lib C library is installed -- or install it to a user-accessible location.\n\nIf you're having trouble compiling the underlying TA-Lib C library on ARM64, you might need to configure it with an explicit build type before running and , for example:\n\nThis is caused by old file, so another way to solve this is to copy a newer version of config.guess into the underlying TA-Lib C library sources:\n\nIf you're having trouble using PyInstaller and get an error that looks like this:\n\nThen, perhaps you can use the argument to fix this:\n\nIf you want to use , then you should use .\n\nIf you want to use , then you should use .\n\nIf you have trouble getting the code autocompletions to work in Visual Studio Code, a suggestion was made to look for the extension settings, and an option for , and change it from (which means Pylance if it is installed, Jedi otherwise , to manually set and the completions should work. It is possible that you might need to install it manually for this to work.\n\nSimilar to TA-Lib, the Function API provides a lightweight wrapper of the exposed TA-Lib indicators.\n\nEach function returns an output array and have default values for their parameters, unless specified as keyword arguments. Typically, these functions will have an initial \"lookback\" period (a required number of observations before an output is generated) set to .\n\nFor convenience, the Function API supports both and and inputs.\n\nAll of the following examples use the Function API:\n\nCalculating momentum of the close prices, with a time period of 5:\n\nThe underlying TA-Lib C library handles NaN's in a sometimes surprising manner by typically propagating NaN's to the end of the output, for example:\n\nYou can compare that to a Pandas rolling mean, where their approach is to output NaN until enough \"lookback\" values are observed to generate new outputs:\n\nIf you're already familiar with using the function API, you should feel right at home using the Abstract API.\n\nEvery function takes a collection of named inputs, either a of or or , or a or . If a or is provided, the output is returned as the same type with named output columns.\n\nFor example, inputs could be provided for the typical \"OHLCV\" data:\n\nFunctions can either be imported directly or instantiated by name:\n\nFrom there, calling functions is basically the same as the function API:\n\nAn experimental Streaming API was added that allows users to compute the latest value of an indicator. This can be faster than using the Function API, for example in an application that receives streaming data, and wants to know just the most recent updated indicator value.\n\nWe can show all the TA functions supported by TA-Lib, either as a or as a sorted by group (e.g. \"Overlap Studies\", \"Momentum Indicators\", etc):"
    },
    {
        "link": "https://medium.com/@deepml1818/unlocking-financial-insights-with-python-and-ta-lib-e98f39781746",
        "document": "Unlocking Financial Insights with Python and TA-Lib\n\nEver wondered how to leverage Python for analyzing financial markets? In this guide, we’ll explore the basics of using the TA-Lib library to perform technical analysis on stock data. TA-Lib is a powerful tool that provides a wide range of functions for analyzing financial markets, from simple moving averages to complex pattern recognition.\n\nBefore diving into the code, make sure you have TA-Lib and other required libraries installed. You can install TA-Lib using the following command:\n\nAdditionally, we’ll use the `yfinance` library to fetch historical stock data. If you don’t have it installed, you can install it with:\n\nOur example will focus on calculating the 50-day and 200-day simple moving averages (SMA) for a given stock. Let’s use Apple Inc. (AAPL) as our sample stock.\n\nNow lets breakdown the explanation for each code line and it’s functions and results comprehension:\n\nImport talib for using trading technical indicators and yfinance for the financial data that need to be analyzed\n\nHere we create a variable name symbol and stock_data to download the financial data that is needed, the period means time period of data\n\nNow we use the talib functions such as SMA:Simple Moving Average technical indicator to read the “Close” price with SMA_50 days moving average with a timeperiod= no of day. this line of code can be tuned with your preferred tuning for optimal result , this is just example.\n\nThe print function will print the result of the codes above , with all the results that we have passed the talib function to analyze the data.\n\nIn this script, we download historical stock data using `yfinance` and calculate the 50-day and 200-day SMAs using `talib.SMA`. The resulting DataFrame contains the closing prices along with the calculated moving averages.\n\nUnderstanding moving averages is a crucial aspect of technical analysis. The 50-day SMA often indicates short-term trends, while the 200-day SMA is commonly used for identifying long-term trends. When the short-term SMA crosses above the long-term SMA, it might signal a potential upward trend, and vice versa.\n\nThis example only scratches the surface of what TA-Lib can offer. The library provides numerous functions for various technical indicators, allowing you to explore trends, momentum, volatility, and more.\n\nPython, with the help of TA-Lib, empowers individuals to perform sophisticated financial analysis without the need for complex tools. Whether you’re a seasoned trader or just getting started, incorporating Python into your financial toolkit can provide valuable insights.\n\nFeel free to experiment with additional TA-Lib functions and explore different stocks. The financial world is vast, and Python, along with TA-Lib, can be your gateway to unlocking hidden patterns and making informed decisions.\n\nRemember to personalize the content, add visuals if needed, and ensure that the information is accurate and up-to-date before publishing on Medium or any other platform.\n\nPlease check out the video for tutorial : https://youtu.be/LKd2g97kiU8"
    },
    {
        "link": "https://github.com/bukosabino/ta",
        "document": "It is a Technical Analysis library useful to do feature engineering from financial time series datasets (Open, Close, High, Low, Volume). It is built on Pandas and Numpy.\n\nTo use this library you should have a financial time series dataset including , , , , and columns.\n\nYou should clean or fill NaN values in your dataset before add technical analysis features.\n\nYou can get code examples in examples_to_use folder.\n\nYou can visualize the features in this notebook.\n\nThank you to OpenSistemas! It is because of your contribution that I am able to continue the development of this open source library.\n• Automated tests for all the indicators.\n• Use NumExpr to speed up the NumPy/Pandas operations? Article Motivation\n• Wrapper to get financial data.\n• Use of the Pandas multi-indexing techniques to calculate several indicators at the same time.\n\nIf you think library help you, please consider buying me a coffee.\n\nDeveloped by Darío López Padial (aka Bukosabino) and other contributors.\n\nPlease, let me know about any comment or feedback.\n\nAlso, I am a software engineer freelance focused on Data Science using Python tools such as Pandas, Scikit-Learn, Backtrader, Zipline or Catalyst. Don't hesitate to contact me if you need to develop something related with this library, Python, Technical Analysis, AlgoTrading, Machine Learning, etc."
    },
    {
        "link": "https://technical-analysis-library-in-python.readthedocs.io/en/latest/ta.html",
        "document": "It is a Technical Analysis library useful to do feature engineering from financial time series datasets (Open, Close, High, Low, Volume). It is built on Pandas and Numpy.\n\nThe Awesome Oscillator is an indicator used to measure market momentum. AO calculates the difference of a 34 Period and 5 Period Simple Moving Averages. The Simple Moving Averages that are used are not calculated using closing price but rather each bar’s midpoints. AO is generally used to affirm trends or to anticipate possible reversals. Awesome Oscillator is a 34-period simple moving average, plotted through the central points of the bars (H+L)/2, and subtracted from the 5-period simple moving average, graphed across the central points of the bars (H+L)/2. Moving average designed to account for market noise or volatility. KAMA will closely follow prices when the price swings are relatively small and the noise is low. KAMA will adjust when the price swings widen and follow prices from a greater distance. This trend-following indicator can be used to identify the overall trend, time turning points and filter price movements.\n• None pow1 (int) – number of periods for the fastest EMA constant.\n• None pow2 (int) – number of periods for the slowest EMA constant. The Percentage Price Oscillator (PPO) is a momentum oscillator that measures the difference between two moving averages as a percentage of the larger moving average. The Percentage Volume Oscillator (PVO) is a momentum oscillator for volume. The PVO measures the difference between two volume-based moving averages as a percentage of the larger moving average. The Rate-of-Change (ROC) indicator, which is also referred to as simply Momentum, is a pure momentum oscillator that measures the percent change in price from one period to the next. The ROC calculation compares the current price with the price “n” periods ago. The plot forms an oscillator that fluctuates above and below the zero line as the Rate-of-Change moves from positive to negative. As a momentum oscillator, ROC signals include centerline crossovers, divergences and overbought-oversold readings. Divergences fail to foreshadow reversals more often than not, so this article will forgo a detailed discussion on them. Even though centerline crossovers are prone to whipsaw, especially short-term, these crossovers can be used to identify the overall trend. Identifying overbought or oversold extremes comes naturally to the Rate-of-Change oscillator. Compares the magnitude of recent gains and losses over a specified time period to measure speed and change of price movements of a security. It is primarily used to attempt to identify overbought or oversold conditions in the trading of an asset. The StochRSI oscillator was developed to take advantage of both momentum indicators in order to create a more sensitive indicator that is attuned to a specific security’s historical performance rather than a generalized analysis of price change. Developed in the late 1950s by George Lane. The stochastic oscillator presents the location of the closing price of a stock in relation to the high and low range of the price of a stock over a period of time, typically a 14-day period. Larry Williams’ (1976) signal, a momentum oscillator designed to capture momentum across three different timeframes. BP = Close - Minimum(Low or Prior Close). TR = Maximum(High or Prior Close) - Minimum(Low or Prior Close) Average7 = (7-period BP Sum) / (7-period TR Sum) Average14 = (14-period BP Sum) / (14-period TR Sum) Average28 = (28-period BP Sum) / (28-period TR Sum) Developed by Larry Williams, Williams %R is a momentum indicator that is the inverse of the Fast Stochastic Oscillator. Also referred to as %R, Williams %R reflects the level of the close relative to the highest high for the look-back period. In contrast, the Stochastic Oscillator reflects the level of the close relative to the lowest low. %R corrects for the inversion by multiplying the raw value by -100. As a result, the Fast Stochastic Oscillator and Williams %R produce the exact same lines, only the scaling is different. Williams %R oscillates from 0 to -100. Readings from 0 to -20 are considered overbought. Readings from -80 to -100 are considered oversold. Unsurprisingly, signals derived from the Stochastic Oscillator are also applicable to Williams %R. Lowest Low = lowest low for the look-back period Highest High = highest high for the look-back period %R is multiplied by -100 correct the inversion and move the decimal. The Williams %R oscillates from 0 to -100. When the indicator produces readings from 0 to -20, this indicates overbought market conditions. When readings are -80 to -100, it indicates oversold market conditions. The Awesome Oscillator is an indicator used to measure market momentum. AO calculates the difference of a 34 Period and 5 Period Simple Moving Averages. The Simple Moving Averages that are used are not calculated using closing price but rather each bar’s midpoints. AO is generally used to affirm trends or to anticipate possible reversals. Awesome Oscillator is a 34-period simple moving average, plotted through the central points of the bars (H+L)/2, and subtracted from the 5-period simple moving average, graphed across the central points of the bars (H+L)/2. Moving average designed to account for market noise or volatility. KAMA will closely follow prices when the price swings are relatively small and the noise is low. KAMA will adjust when the price swings widen and follow prices from a greater distance. This trend-following indicator can be used to identify the overall trend, time turning points and filter price movements.\n• None window (int) – n number of periods for the efficiency ratio.\n• None pow1 (int) – number of periods for the fastest EMA constant.\n• None pow2 (int) – number of periods for the slowest EMA constant. The Percentage Price Oscillator (PPO) is a momentum oscillator that measures the difference between two moving averages as a percentage of the larger moving average. The Percentage Price Oscillator (PPO) is a momentum oscillator that measures the difference between two moving averages as a percentage of the larger moving average. The Percentage Price Oscillator (PPO) is a momentum oscillator that measures the difference between two moving averages as a percentage of the larger moving average. The Percentage Volume Oscillator (PVO) is a momentum oscillator for volume. The PVO measures the difference between two volume-based moving averages as a percentage of the larger moving average. The Percentage Volume Oscillator (PVO) is a momentum oscillator for volume. The PVO measures the difference between two volume-based moving averages as a percentage of the larger moving average. The Percentage Volume Oscillator (PVO) is a momentum oscillator for volume. The PVO measures the difference between two volume-based moving averages as a percentage of the larger moving average. The Rate-of-Change (ROC) indicator, which is also referred to as simply Momentum, is a pure momentum oscillator that measures the percent change in price from one period to the next. The ROC calculation compares the current price with the price “n” periods ago. The plot forms an oscillator that fluctuates above and below the zero line as the Rate-of-Change moves from positive to negative. As a momentum oscillator, ROC signals include centerline crossovers, divergences and overbought-oversold readings. Divergences fail to foreshadow reversals more often than not, so this article will forgo a detailed discussion on them. Even though centerline crossovers are prone to whipsaw, especially short-term, these crossovers can be used to identify the overall trend. Identifying overbought or oversold extremes comes naturally to the Rate-of-Change oscillator. Compares the magnitude of recent gains and losses over a specified time period to measure speed and change of price movements of a security. It is primarily used to attempt to identify overbought or oversold conditions in the trading of an asset. Developed in the late 1950s by George Lane. The stochastic oscillator presents the location of the closing price of a stock in relation to the high and low range of the price of a stock over a period of time, typically a 14-day period. The StochRSI oscillator was developed to take advantage of both momentum indicators in order to create a more sensitive indicator that is attuned to a specific security’s historical performance rather than a generalized analysis of price change. The StochRSI oscillator was developed to take advantage of both momentum indicators in order to create a more sensitive indicator that is attuned to a specific security’s historical performance rather than a generalized analysis of price change. The StochRSI oscillator was developed to take advantage of both momentum indicators in order to create a more sensitive indicator that is attuned to a specific security’s historical performance rather than a generalized analysis of price change. Larry Williams’ (1976) signal, a momentum oscillator designed to capture momentum across three different timeframes. BP = Close - Minimum(Low or Prior Close). TR = Maximum(High or Prior Close) - Minimum(Low or Prior Close) Average7 = (7-period BP Sum) / (7-period TR Sum) Average14 = (14-period BP Sum) / (14-period TR Sum) Average28 = (28-period BP Sum) / (28-period TR Sum) Developed by Larry Williams, Williams %R is a momentum indicator that is the inverse of the Fast Stochastic Oscillator. Also referred to as %R, Williams %R reflects the level of the close relative to the highest high for the look-back period. In contrast, the Stochastic Oscillator reflects the level of the close relative to the lowest low. %R corrects for the inversion by multiplying the raw value by -100. As a result, the Fast Stochastic Oscillator and Williams %R produce the exact same lines, only the scaling is different. Williams %R oscillates from 0 to -100. Readings from 0 to -20 are considered overbought. Readings from -80 to -100 are considered oversold. Unsurprisingly, signals derived from the Stochastic Oscillator are also applicable to Williams %R. Lowest Low = lowest low for the look-back period Highest High = highest high for the look-back period %R is multiplied by -100 correct the inversion and move the decimal. From: https://www.investopedia.com/terms/w/williamsr.asp The Williams %R oscillates from 0 to -100. When the indicator produces readings from 0 to -20, this indicates overbought market conditions. When readings are -80 to -100, it indicates oversold market conditions.\n\nIt measures the amount of Money Flow Volume over a specific period. It relate an asset’s price change to its volume and is particularly useful for assessing the strength of a trend. It illustrates how strong the actual buying or selling pressure is. High positive values mean there is a strong rising trend, and low values signify a strong downward trend. Uses both price and volume to measure buying and selling pressure. It is positive when the typical price rises (buying pressure) and negative when the typical price declines (selling pressure). A ratio of positive and negative money flow is then plugged into an RSI formula to create an oscillator that moves between zero and one hundred. It relates price and volume in the stock market. OBV is based on a cumulative total volume. Is based on a running cumulative volume that adds or substracts a multiple of the percentage change in share price trend and current volume, depending upon the investment’s upward or downward movements. VWAP equals the dollar value of all trading periods divided by the total trading volume for the current day. The calculation starts when trading opens and ends when it closes. Because it is good for the current trading day only, intraday periods and data are used in the calculation. It measures the amount of Money Flow Volume over a specific period. It relate an asset’s price change to its volume and is particularly useful for assessing the strength of a trend. It illustrates how strong the actual buying or selling pressure is. High positive values mean there is a strong rising trend, and low values signify a strong downward trend. Uses both price and volume to measure buying and selling pressure. It is positive when the typical price rises (buying pressure) and negative when the typical price declines (selling pressure). A ratio of positive and negative money flow is then plugged into an RSI formula to create an oscillator that moves between zero and one hundred. The Negative Volume Index (NVI) is a cumulative indicator that uses the change in volume to decide when the smart money is active. Paul Dysart first developed this indicator in the 1930s. […] Dysart’s Negative Volume Index works under the assumption that the smart money is active on days when volume decreases and the not-so-smart money is active on days when volume increases. The cumulative NVI line was unchanged when volume increased from one period to the other. In other words, nothing was done. Norman Fosback, of Stock Market Logic, adjusted the indicator by substituting the percentage price change for Net Advances. This implementation is the Fosback version. If today’s volume is less than yesterday’s volume then: Please note: the “stockcharts.com” example calculation just adds the percentange change of price to previous NVI when volumes decline; other sources indicate that the same percentage of the previous NVI value should be added, which is what is implemented here. It relates price and volume in the stock market. OBV is based on a cumulative total volume. It relate an asset’s price change to its volume and is particularly useful for assessing the strength of a trend. Is based on a running cumulative volume that adds or substracts a multiple of the percentage change in share price trend and current volume, depending upon the investment’s upward or downward movements. VWAP equals the dollar value of all trading periods divided by the total trading volume for the current day. The calculation starts when trading opens and ends when it closes. Because it is good for the current trading day only, intraday periods and data are used in the calculation.\n\nThe indicator provide an indication of the degree of price volatility. Strong moves, in either direction, are often accompanied by large ranges, or large True Ranges. It returns 1, if close is higher than bollinger_hband. Else, it returns 0. It returns 1, if close is lower than bollinger_lband. Else, it returns 0. Keltner Channels are a trend following indicator used to identify reversals with channel breakouts and channel direction. Channels can also be used to identify overbought and oversold levels when the trend is flat.\n• None window_atr (int) – n atr period. Only valid if original_version param is False.\n• None original_version (bool) – if True, use original version as the centerline (SMA of typical price) if False, use EMA of close as the centerline. More info: https://school.stockcharts.com/doku.php?id=technical_indicators:keltner_channels\n• None multiplier (int) – The multiplier has the most effect on the channel width. default is 2 It returns 1, if close is higher than keltner_channel_hband. Else, it returns 0. It returns 1, if close is lower than keltner_channel_lband. Else, it returns 0. The indicator provide an indication of the degree of price volatility. Strong moves, in either direction, are often accompanied by large ranges, or large True Ranges. Upper band at K times an N-period standard deviation above the moving average (MA + Kdeviation). Returns 1, if close is higher than bollinger high band. Else, return 0. Lower band at K times an N-period standard deviation below the moving average (MA − Kdeviation). Returns 1, if close is lower than bollinger low band. Else, return 0. The upper band marks the highest price of an issue for n periods. The lower band marks the lowest price for n periods.\n• None window_atr (int) – n atr period. Only valid if original_version param is False.\n• None original_version (bool) – if True, use original version as the centerline (SMA of typical price) if False, use EMA of close as the centerline. More info: https://school.stockcharts.com/doku.php?id=technical_indicators:keltner_channels Returns 1, if close is higher than keltner high band channel. Else, return 0.\n• None window_atr (int) – n atr period. Only valid if original_version param is False.\n• None original_version (bool) – if True, use original version as the centerline (SMA of typical price) if False, use EMA of close as the centerline. More info: https://school.stockcharts.com/doku.php?id=technical_indicators:keltner_channels\n• None window_atr (int) – n atr period. Only valid if original_version param is False.\n• None original_version (bool) – if True, use original version as the centerline (SMA of typical price) if False, use EMA of close as the centerline. More info: https://school.stockcharts.com/doku.php?id=technical_indicators:keltner_channels Returns 1, if close is lower than keltner low band channel. Else, return 0.\n• None window_atr (int) – n atr period. Only valid if original_version param is False.\n• None original_version (bool) – if True, use original version as the centerline (SMA of typical price) if False, use EMA of close as the centerline. More info: https://school.stockcharts.com/doku.php?id=technical_indicators:keltner_channels\n• None window_atr (int) – n atr period. Only valid if original_version param is False.\n• None original_version (bool) – if True, use original version as the centerline (SMA of typical price) if False, use EMA of close as the centerline. More info: https://school.stockcharts.com/doku.php?id=technical_indicators:keltner_channels\n• None window_atr (int) – n atr period. Only valid if original_version param is False.\n• None original_version (bool) – if True, use original version as the centerline (SMA of typical price) if False, use EMA of close as the centerline. More info: https://school.stockcharts.com/doku.php?id=technical_indicators:keltner_channels\n• None window_atr (int) – n atr period. Only valid if original_version param is False.\n• None original_version (bool) – if True, use original version as the centerline (SMA of typical price) if False, use EMA of close as the centerline. More info: https://school.stockcharts.com/doku.php?id=technical_indicators:keltner_channels\n\nThe Plus Directional Indicator (+DI) and Minus Directional Indicator (-DI) are derived from smoothed averages of these differences, and measure trend direction over time. These two indicators are often referred to collectively as the Directional Movement Indicator (DMI). The Average Directional Index (ADX) is in turn derived from the smoothed averages of the difference between +DI and -DI, and measures the strength of the trend (regardless of direction) over time. Using these three indicators together, chartists can determine both the direction and strength of the trend. Identify when trends are likely to change direction. Aroon Up = ((N - Days Since N-day High) / N) x 100 Aroon Down = ((N - Days Since N-day Low) / N) x 100 Aroon Indicator = Aroon Up - Aroon Down CCI measures the difference between a security’s price change and its average price change. High positive readings indicate that prices are well above their average, which is a show of strength. Low negative readings indicate that prices are well below their average, which is a show of weakness. Is an indicator designed to remove trend from price and make it easier to identify cycles. It is useful to identify major stock market cycle junctures because its formula is weighed to be more greatly influenced by the longer and more dominant time spans, in order to better reflect the primary swings of stock market cycle. Is a trend-following momentum indicator that shows the relationship between two moving averages of prices. It uses the high-low range to identify trend reversals based on range expansions. It identifies range bulges that can foreshadow a reversal of the current trend. The Parabolic Stop and Reverse, more commonly known as the Parabolic SAR,is a trend-following indicator developed by J. Welles Wilder. The Parabolic SAR is displayed as a single parabolic line (or dots) underneath the price bars in an uptrend, and above the price bars in a downtrend.\n• None step (float) – the Acceleration Factor used to compute the SAR.\n• None max_step (float) – the maximum value allowed for the Acceleration Factor. The Schaff Trend Cycle (STC) is a charting indicator that is commonly used to identify market trends and provide buy and sell signals to traders. Developed in 1999 by noted currency trader Doug Schaff, STC is a type of oscillator and is based on the assumption that, regardless of time frame, currency trends accelerate and decelerate in cyclical patterns. Shows the percent rate of change of a triple exponentially smoothed moving average. It consists of two oscillators that capture positive and negative trend movement. A bullish signal triggers when the positive trend indicator crosses above the negative trend indicator or a key level. The Plus Directional Indicator (+DI) and Minus Directional Indicator (-DI) are derived from smoothed averages of these differences, and measure trend direction over time. These two indicators are often referred to collectively as the Directional Movement Indicator (DMI). The Average Directional Index (ADX) is in turn derived from the smoothed averages of the difference between +DI and -DI, and measures the strength of the trend (regardless of direction) over time. Using these three indicators together, chartists can determine both the direction and strength of the trend. The Plus Directional Indicator (+DI) and Minus Directional Indicator (-DI) are derived from smoothed averages of these differences, and measure trend direction over time. These two indicators are often referred to collectively as the Directional Movement Indicator (DMI). The Average Directional Index (ADX) is in turn derived from the smoothed averages of the difference between +DI and -DI, and measures the strength of the trend (regardless of direction) over time. Using these three indicators together, chartists can determine both the direction and strength of the trend. The Plus Directional Indicator (+DI) and Minus Directional Indicator (-DI) are derived from smoothed averages of these differences, and measure trend direction over time. These two indicators are often referred to collectively as the Directional Movement Indicator (DMI). The Average Directional Index (ADX) is in turn derived from the smoothed averages of the difference between +DI and -DI, and measures the strength of the trend (regardless of direction) over time. Using these three indicators together, chartists can determine both the direction and strength of the trend. Identify when trends are likely to change direction (downtrend). Identify when trends are likely to change direction (uptrend). CCI measures the difference between a security’s price change and its average price change. High positive readings indicate that prices are well above their average, which is a show of strength. Low negative readings indicate that prices are well below their average, which is a show of weakness. Is an indicator designed to remove trend from price and make it easier to identify cycles. It identifies the trend and look for potential signals within that trend. It identifies the trend and look for potential signals within that trend. It identifies the trend and look for potential signals within that trend. It identifies the trend and look for potential signals within that trend. It is useful to identify major stock market cycle junctures because its formula is weighed to be more greatly influenced by the longer and more dominant time spans, in order to better reflect the primary swings of stock market cycle. It is useful to identify major stock market cycle junctures because its formula is weighed to be more greatly influenced by the longer and more dominant time spans, in order to better reflect the primary swings of stock market cycle. Is a trend-following momentum indicator that shows the relationship between two moving averages of prices. Shows the relationship between MACD and MACD Signal. It uses the high-low range to identify trend reversals based on range expansions. It identifies range bulges that can foreshadow a reversal of the current trend. Returns the PSAR series with non-N/A values for downward trends\n• None step (float) – the Acceleration Factor used to compute the SAR.\n• None max_step (float) – the maximum value allowed for the Acceleration Factor. Returns 1, if there is a reversal towards an downward trend. Else, returns 0.\n• None step (float) – the Acceleration Factor used to compute the SAR.\n• None max_step (float) – the maximum value allowed for the Acceleration Factor. Returns the PSAR series with non-N/A values for upward trends\n• None step (float) – the Acceleration Factor used to compute the SAR.\n• None max_step (float) – the maximum value allowed for the Acceleration Factor. Returns 1, if there is a reversal towards an upward trend. Else, returns 0.\n• None step (float) – the Acceleration Factor used to compute the SAR.\n• None max_step (float) – the maximum value allowed for the Acceleration Factor. The Schaff Trend Cycle (STC) is a charting indicator that is commonly used to identify market trends and provide buy and sell signals to traders. Developed in 1999 by noted currency trader Doug Schaff, STC is a type of oscillator and is based on the assumption that, regardless of time frame, currency trends accelerate and decelerate in cyclical patterns. Shows the percent rate of change of a triple exponentially smoothed moving average. It consists of two oscillators that capture positive and negative trend movement. A bearish signal triggers when the negative trend indicator crosses above the positive trend indicator or a key level. It consists of two oscillators that capture positive and negative trend movement. A bullish signal triggers when the positive trend indicator crosses above the negative trend indicator or a key level."
    },
    {
        "link": "https://medium.com/towards-data-science/technical-analysis-library-to-financial-datasets-with-pandas-python-4b2b390d3543",
        "document": "During the last months, I have been studying some financial time series such as predict bitcoin price or different challenges proposed by Numer.ai, Two Sigma Investment or G-Research. Giving that said, we have decided to develop a technical analysis library in python based on the Pandas library. You can find the library at:\n\nThis new library is oriented to do “Feature Engineering” from typical financial datasets that typically include columns such as “Timestamp”, “Open”, “High”, “Low”, “Close” and “Volume”. This library will be used by data scientifics that want to resolve Machine Learning problems using Python technology stack for data science (Pandas, Scikit-Learn, XGBoost, LightGBM, Keras, TensorFlow, etc).\n\nAt this moment, these tools are getting good results to predict almost anything, but they are not working correctly when are used to face financial problems. They are not working correctly because the rows in the dataset only contains information about a specific period of time (e.g. 6 hours or one day) which is not sufficient to generate good predictions with the current models. To improve the predictions, we need to provide more information (features) to the dataset as the current models get better results when more information is provided.\n\nTechnical Analysis is focused on providing new information from the past to forecast the direction of price. By adding the information generated by different indicators for the different variables (“Volume”, “Volatility”, “Trend”, “Momentum”, etc), we can improve the quality of the original dataset.\n\nNow, we will explain two examples in detail:\n\nThe Bollinger Bands are used to analyze the volatility of the price for an asset in a specific period of time. There are 3 bands, the Middle Band (MB) is the average of the price in the last n periods, the Upper (UB) and Lower Bands (LB) are equal to the middle band, but adding and subtracting x times the standard deviation. The normal parameters that are being used are n = 20 periods and x = 2. So:\n\nIn the library, the closing price variable is converted to 5 new features. Apart from the 3 Bollinger Bands, we generate another 2 indicators that will indicate when the closing value has a value higher than the Upper Bollinger Band or lower than the Lower Bollinger Band. Therefore, these two characteristics will be 0 except when the closing value get out of these bands, which will be 1.\n\nIf we take a look at the image 2, when the closing wave (blue) surpasses the upper or lower bands, there are sudden changes in the price, and it is usually a good idea to sell when it is higher than the Upper Band and to buy when it is lower than the Lower Band.\n\nMoving Average Convergence Divergence is a trading indicator that focuses on exponential moving average (EMA). To calculate it we use:\n\nThe theory tells us that when the MACD curve (blue) is smaller than the MACD_Signal (orange) or when the MACD difference (green curve which represents the difference between MACD_Signal and MACD curve) has a value lower than 0, the price trend will be bearish. On the contrary, it indicates a price increase.\n\nAt this moment, the library has implemented 32 indicators:\n\nThese indicators result in 58 features. The developers can set a lot of input parameters such as the size of windows, different constants or smart automatic fill NaN values generated in the methods.\n\nWe have uploaded a first stable version of the library to GitHub and it can be installed by using “pip”. The library is in continue development so we will be including more indicators, features, documentation, etc. Please, let us know about any comment, contribution or feedback.\n\nAlso, I am a software freelance focused on Data Science using Python tools such as Pandas, Scikit-Learn, Zipline or Catalyst. Don’t hesitate to contact me if you need something related to this library, Technical Analysis, Algo Trading, Machine Learning, etc."
    },
    {
        "link": "https://github.com/twopirllc/pandas-ta",
        "document": "Pandas Technical Analysis (Pandas TA) is an easy to use library that leverages the Pandas package with more than 130 Indicators and Utility functions and more than 60 TA Lib Candlestick Patterns. Many commonly used indicators are included, such as: Candle Pattern(cdl_pattern), Simple Moving Average (sma) Moving Average Convergence Divergence (macd), Hull Exponential Moving Average (hma), Bollinger Bands (bbands), On-Balance Volume (obv), Aroon & Aroon Oscillator (aroon), Squeeze (squeeze) and many more.\n\nNote: TA Lib must be installed to use all the Candlestick Patterns. . If TA Lib is not installed, then only the builtin Candlestick Patterns will be available.\n• Has 130+ indicators and utility functions.\n• BETA Also Pandas TA will run TA Lib's version, this includes TA Lib's 63 Chart Patterns.\n• Indicators in Python are tightly correlated with the de facto TA Lib if they share common indicators.\n• If TA Lib is also installed, TA Lib computations are enabled by default but can be disabled disabled per indicator by using the argument .\n• For instance to disable TA Lib calculation for stdev: .\n• NEW! Include External Custom Indicators independent of the builtin Pandas TA indicators. For more information, see documentation under .\n• Example Jupyter Notebook with vectorbt Portfolio Backtesting with Pandas TA's method.\n• Have the need for speed? By using the DataFrame strategy method, you get multiprocessing for free! Conditions permitting.\n• Easily add prefixes or suffixes or both to columns names. Useful for Custom Chained Strategies.\n• Example Jupyter Notebooks under the examples directory, including how to create Custom Strategies using the new Strategy Class\n• Potential Data Leaks: dpo and ichimoku. See indicator list below for details. Set to disable.\n\nPandas TA checks if the user has some common trading packages installed including but not limited to: TA Lib, Vector BT, YFinance ... Much of which is experimental and likely to break until it stabilizes more.\n• If TA Lib installed, existing indicators will eventually get a TA Lib version.\n• Easy Downloading of ohlcv data using yfinance. See and and examples below.\n\nThe version is the last stable release. Version: 0.3.14b\n• Includes all fixes and updates between pypi and what is covered in this README.\n\nThis is the Development Version which could have bugs and other undesireable side effects. Use at own risk!\n\nSome indicator arguments have been reordered for consistency. Use for more information or make a Pull Request to improve documentation.\n\nThanks for using Pandas TA!\n• \n• Have you read this document?\n• Are you running the latest version?\n• Have you tried the Examples?\n• Did they help?\n• Could you help improve them?\n• Did you know you can easily build Custom Strategies with the Strategy Class?\n• Documentation could always be improved. Can you help contribute?\n• \n• First, search the Closed Issues before you Open a new Issue; it may have already been solved.\n• Please be as detailed as possible with reproducible code, links if any, applicable screenshots, errors, logs, and data samples. You will be asked again if you provide nothing.\n• You want a new indicator not currently listed.\n• You want an alternate version of an existing indicator.\n• The indicator does not match another website, library, broker platform, language, et al.\n• Do you have correlation analysis to back your claim?\n• You will be asked to fill out an Issue even if you email my personally.\n\nThank you for your contributions!\n\nPandas TA has three primary \"styles\" of processing Technical Indicators for your use case and/or requirements. They are: Standard, DataFrame Extension, and the Pandas TA Strategy. Each with increasing levels of abstraction for ease of use. As you become more familiar with Pandas TA, the simplicity and speed of using a Pandas TA Strategy may become more apparent. Furthermore, you can create your own indicators through Chaining or Composition. Lastly, each indicator either returns a Series or a DataFrame in Uppercase Underscore format regardless of style.\n\nYou explicitly define the input columns and take care of the output.\n• \n• Chaining indicators is possible but you have to be explicit.\n• Since it returns a Series named . If needed, you may need to uniquely name it.\n\nCalling will automatically lowercase OHLCVA to ohlcva: open, high, low, close, volume, adj_close. By default, will use the ohlcva for the indicator arguments removing the need to specify input columns directly.\n• \n• Chaining Indicators require specifying the input like: .\n\nSame as the last three examples, but appending the results directly to the DataFrame .\n• \n• Chaining Indicators require specifying the input like: .\n\nA Pandas TA Strategy is a named group of indicators to be run by the strategy method. All Strategies use mulitprocessing except when using the parameter (see below). There are different types of Strategies listed in the following section.\n\nThe Strategy Class is a simple way to name and group your favorite TA Indicators by using a Data Class. Pandas TA comes with two prebuilt basic Strategies to help you get started: AllStrategy and CommonStrategy. A Strategy can be as simple as the CommonStrategy or as complex as needed using Composition/Chaining.\n• When using the strategy method, all indicators will be automatically appended to the DataFrame .\n• You are using a Chained Strategy when you have the output of one indicator as input into one or more indicators in the same Strategy.\n• Note: Use the 'prefix' and/or 'suffix' keywords to distinguish the composed indicator from it's default Series.\n\nSee the Pandas TA Strategy Examples Notebook for examples including Indicator Composition/Chaining.\n• name: Some short memorable string. Note: Case-insensitive \"All\" is reserved.\n• ta: A list of dicts containing keyword arguments to identify the indicator and the indicator's arguments\n• Note: A Strategy will fail when consumed by Pandas TA if there is no attribute. Remember to check your spelling.\n• description: A more detailed description of what the Strategy tries to capture. Default: None\n• created: At datetime string of when it was created. Default: Automatically generated.\n\nThe Pandas TA strategy method utilizes multiprocessing for bulk indicator processing of all Strategy types with ONE EXCEPTION! When using the parameter to rename resultant column(s), the indicators in array will be ran in order.\n\n# VWAP requires the DataFrame index to be a DatetimeIndex. # * Replace \"datetime\" with the appropriate column from your DataFrame . ( . ( [ ]), ) # Runs and appends all indicators to the current DataFrame by default # The resultant DataFrame will be large. . . () . . ( ) . . ( . ) # Use verbose if you want to make sure it is running. . . ( ) # Use timed if you want to see how long it takes to run. . . ( ) # Choose the number of cores to use. Default is all available cores. # For no multiprocessing, set this value to 0. . . # Maybe you do not want certain indicators. # Just exclude (a list of) them. . . ( [ , , , , ], ) # Perhaps you want to use different values for indicators. # This will run ALL indicators that have fast or slow as parameters. # Check your results and exclude as necessary. . . ( , , ) # Sanity check. Make sure all the columns are there .\n\nRemember These will not be utilizing multiprocessing\n\nPatterns that are not bold, require TA-Lib to be installed:\n• High-Low-Close Average: hlc3\n• Commonly known as 'Typical Price' in Technical Analysis literature\n• Ichimoku Kinkō Hyō: ichimoku\n• Returns two DataFrames. For more information: .\n• Volume Weighted Average Price: vwap\n• Requires the DataFrame index to be a DatetimeIndex\n• Think or Swim Standard Deviation All: tos_stdevall\n• Average Directional Movement Index: adx\n• Also includes dmp and dmn in the resultant DataFrame.\n\nPerformance Metrics are a new addition to the package and consequentially are likely unreliable. Use at your own risk. These metrics return a float and are not part of the DataFrame Extension. They are called the Standard way. For Example:\n\nFor easier integration with vectorbt's Portfolio method, the method has been replaced with method to simplify the generation of trading signals. For a comprehensive example, see the example Jupyter Notebook VectorBT Backtest with Pandas TA in the examples directory.\n• See the vectorbt website more options and examples.\n• A Strategy Class to help name and group your favorite indicators.\n• If a TA Lib is already installed, Pandas TA will run TA Lib's version. (BETA)\n• Some indicators have had their kwarg updated with more moving average choices with the Moving Average Utility function . For simplicity, all choices are single source moving averages. This is primarily an internal utility used by indicators that have a kwarg. This includes indicators: accbands, amat, aobv, atr, bbands, bias, efi, hilo, kc, natr, qqe, rvi, and thermo; the default parameters have not changed. However, can be used by the user as well if needed. For more information:\n• An experimental and independent Watchlist Class located in the Examples Directory that can be used in conjunction with the new Strategy Class.\n• Linear Regression (linear_regression) is a new utility method for Simple Linear Regression using Numpy or Scikit Learn's implementation.\n• Added utility/convience function, , to convert the DataFrame index to UTC. See: Now as a Pandas TA DataFrame Property to easily convert the DataFrame index to UTC.\n• Trend Return (trend_return) has been removed and replaced with tsignals. When given a trend Series like it returns the Trend, Trade Entries and Trade Exits of that trend to make it compatible with vectorbt by setting to get boolean Trade Entries and Exits. See\n• Arnaud Legoux Moving Average (alma) uses the curve of the Normal (Gauss) distribution to allow regulating the smoothness and high sensitivity of the indicator. See: trading account, or fund. See\n• Candle Patterns (cdl_pattern) If TA Lib is installed, then all those Candle Patterns are available. See the list and examples above on how to call the patterns. See\n• Correlation Trend Indicator (cti) is an oscillator created by John Ehler in 2020. See\n• Cross Signals (xsignals) was created by Kevin Johnson. It is a wrapper of Trade Signals that returns Trends, Trades, Entries and Exits. Cross Signals are commonly used for bbands, rsi, zscore crossing some value either above or below two values at different times. See\n• Directional Movement (dm) developed by J. Welles Wilder in 1978 attempts to determine which direction the price of an asset is moving. See\n• Even Better Sinewave (ebsw) measures market cycles and uses a low pass filter to remove noise. See:\n• Jurik Moving Average (jma) attempts to eliminate noise to see the \"true\" underlying activity.. See:\n• Klinger Volume Oscillator (kvo) was developed by Stephen J. Klinger. It is designed to predict price reversals in a market by comparing volume to price.. See\n• Schaff Trend Cycle (stc) is an evolution of the popular MACD incorportating two cascaded stochastic calculations with additional smoothing. See\n• Squeeze Pro (squeeze_pro) is an extended version of \"TTM Squeeze\" from John Carter. See\n• Tom DeMark's Sequential (td_seq) attempts to identify a price point where an uptrend or a downtrend exhausts itself and reverses. Currently exlcuded from for performance reasons. See\n• Think or Swim Standard Deviation All (tos_stdevall) indicator which returns the standard deviation of data for the entire plot or for the interval of the last bars defined by the length parameter. See\n• Vertical Horizontal Filter (vhf) was created by Adam White to identify trending and ranging markets.. See\n• ADX (adx): Added with default \"RMA\" and with the same options as TradingView. New argument so it behaves like TradingView's builtin ADX indicator. See .\n• Average True Range (atr): The default is now \"RMA\" and with the same options as TradingView. See .\n• Bollinger Bands (bbands): New argument to control the Degrees of Freedom. Also included BB Percent (BBP) as the final column. Default is 0. See .\n• Choppiness Index (chop): New argument to use Natural Logarithm (True) instead of the Standard Logarithm (False). Default is False. See .\n• Chande Kroll Stop (cksp): Added with default . When , cksp implements “The New Technical Trader” with default values. See .\n• Chande Momentum Oscillator (cmo): New argument will use TA Lib's version and if TA Lib is installed. Default is True. See .\n• Decreasing (decreasing): New argument checks if the series is continuously decreasing over period with a faster calculation. Default: . The argument has also been added with default None. See .\n• Increasing (increasing): New argument checks if the series is continuously increasing over period with a faster calculation. Default: . The argument has also been added with default None. See .\n• Linear Regression (linreg): Checks numpy's version to determine whether to utilize the method or the newer method. This should resolve Issues with Google Colab and it's delayed dependency updates as well as TensorFlow's dependencies as discussed in Issues #285 and #329.\n• Moving Average Convergence Divergence (macd): New argument enables AS version of MACD. Default is False. See .\n• Parabolic Stop and Reverse (psar): Bug fix and adjustment to match TradingView's . New argument to initialize the Acceleration Factor. See .\n• Percentage Price Oscillator (ppo): Included new argument as an option. Default is sma to match TA Lib. See .\n• True Strength Index (tsi): Added with default and Signal MA Mode with default ema as arguments. See .\n• Volume Weighted Average Price (vwap): Added a new parameter called . Default: \"D\" for \"Daily\". See Timeseries Offset Aliases for additional options. Requires the DataFrame index to be a DatetimeIndex. See .\n• Z Score (zscore): Changed return column name from to . See .\n\nFeeling generous, like the package or want to see it become more a mature package?"
    }
]