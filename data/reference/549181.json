[
    {
        "link": "https://pypi.org/project/pyTelegramBotAPI",
        "document": "A required part of this site couldn’t load. This may be due to a browser extension, network issues, or browser settings. Please check your connection, disable any ad blockers, or try using a different browser."
    },
    {
        "link": "https://github.com/eternnoir/pyTelegramBotAPI",
        "document": "A simple, but extensible Python implementation for the Telegram Bot API.\n• General API Documentation\n• General use of the API\n• Advanced use of the API\n• Controlling the amount of Threads used by TeleBot\n• F.A.Q.\n• How can I distinguish a User and a GroupChat in message.chat?\n\nThis API is tested with Python 3.9-3.13 and Pypy 3. There are two ways to install the library:\n\nIt is generally recommended to use the first option.\n\nWhile the API is production-ready, it is still under development and it has regular updates, do not forget to update it regularly by calling\n\nIt is presumed that you have obtained an API token with @BotFather. We will call this token . Furthermore, you have basic knowledge of the Python programming language and more importantly the Telegram Bot API.\n\nThe TeleBot class (defined in _init_.py) encapsulates all API calls in a single class. It provides functions such as ( , etc.) and several ways to listen for incoming messages.\n\nCreate a file called . Then, open the file and create an instance of the TeleBot class.\n\nNote: Make sure to actually replace TOKEN with your own API token.\n\nAfter that declaration, we need to register some so-called message handlers. Message handlers define filters which a message must pass. If a message passes the filter, the decorated function is called and the incoming message is passed as an argument.\n\nA function which is decorated by a message handler can have an arbitrary name, however, it must have only one parameter (the message).\n\nThis one echoes all incoming text messages back to the sender. It uses a lambda function to test a message. If the lambda returns True, the message is handled by the decorated function. Since we want all messages to be handled by this function, we simply always return True.\n\nNote: all handlers are tested in the order in which they were declared\n\nWe now have a basic bot which replies a static message to \"/start\" and \"/help\" commands and which echoes the rest of the sent messages. To start the bot, add the following to our source file:\n\nAlright, that's it! Our source file now looks like this:\n\nTo start the bot, simply open up a terminal and enter to run the bot! Test it by sending commands ('/start' and '/help') and arbitrary text messages.\n\nAll types are defined in types.py. They are all completely in line with the Telegram API's definition of the types, except for the Message's field, which is renamed to (because is a Python reserved token). Thus, attributes such as can be accessed directly with . Note that can be either an instance of or (see How can I distinguish a User and a GroupChat in message.chat?).\n\nThe Message object also has a attribute, which defines the type of the Message. can be one of the following strings: , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , .\n\nYou can use some types in one function. Example:\n\nAll API methods are located in the TeleBot class. They are renamed to follow common Python naming conventions. E.g. is renamed to and to .\n\nOutlined below are some general use cases of the API.\n\nA message handler is a function that is decorated with the decorator of a TeleBot instance. Message handlers consist of one or multiple filters. Each filter must return True for a certain message in order for a message handler to become eligible to handle that message. A message handler is declared in the following way (provided is an instance of TeleBot):\n\nis not bound to any restrictions. Any function name is permitted with message handlers. The function must accept at most one argument, which will be the message that the function must handle. is a list of keyword arguments. A filter is declared in the following manner: . One handler may have multiple filters. TeleBot supports the following filters:\n\nHere are some examples of using the filters and message handlers:\n\nImportant: all handlers are tested in the order in which they were declared\n\nHandle updates of a the bot's member status in a chat\n\nHandle updates of a chat member's status in a chat Note: \"chat_member\" updates are not requested by default. If you want to allow all update types, set in / to\n\nNow, you can use inline_handler to get inline queries in telebot.\n\nUse chosen_inline_handler to get chosen_inline_result in telebot. Don't forget to add the /setinlinefeedback command for @Botfather.\n\nA middleware handler is a function that allows you to modify requests or the bot context as they pass through the Telegram to the bot. You can imagine middleware as a chain of logic connection handled before any other handlers are executed. Middleware processing is disabled by default, enable it by setting .\n\nThere are other examples using middleware handler in the examples/middleware directory.\n\nThere are class-based middlewares. Basic class-based middleware looks like this:\n\nClass-based middleware should have two functions: post and pre process. So, as you can see, class-based middlewares work before and after handler execution. For more, check out in examples\n\nAlso, you can use built-in custom filters. Or, you can create your own filter.\n\nAlso, we have examples on them. Check this links:\n\nYou can check some built-in filters in source code\n\nExample of filtering by id\n\nExample of filtering by text\n\nIf you want to add some built-in filter, you are welcome to add it in custom_filters.py file.\n\nHere is example of creating filter-class:\n\nAll functions of TeleBot take an optional argument. This argument must be an instance of , or , which are defined in types.py.\n\nThe last example yields this result:\n\nThis object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc. Attributes:\n\nHere's an Example: \n\n Here is the entity number or order of entity in a reply, for if incase there are multiple entities in the reply/message.\n\n returns a list of entities object. \n\n would give the type of the first entity\n\n Refer Bot Api for extra details\n\nSince version 5.0 of the Bot API, you have the possibility to run your own Local Bot API Server. pyTelegramBotAPI also supports this feature.\n\nImportant: Like described here, you have to log out your bot from the Telegram server before switching to your local API server. in pyTelegramBotAPI use\n\nNote: 4200 is an example port\n\nNew: There is an asynchronous implementation of telebot. To enable this behaviour, create an instance of AsyncTeleBot instead of TeleBot.\n\nNow, every function that calls the Telegram API is executed in a separate asynchronous task. Using AsyncTeleBot allows you to do the following:\n\nSee more in examples\n\nSometimes you must send messages that exceed 5000 characters. The Telegram API can not handle that many characters in one request, so we need to split the message in multiples. Here is how to do that using the API:\n\nOr you can use the new function to get more meaningful substrings:\n\nThe TeleBot constructor takes the following optional arguments:\n• threaded: True/False (default True). A flag to indicate whether TeleBot should execute message handlers on it's polling Thread.\n\nAs an alternative to the message handlers, one can also register a function as a listener to TeleBot.\n\nNOTICE: handlers won't disappear! Your message will be processed both by handlers and listeners. Also, it's impossible to predict which will work at first because of threading. If you use threaded=False, custom listeners will work earlier, after them handlers will be called. Example:\n\nWhen using webhooks telegram sends one Update per call, for processing it you should call process_new_messages([update.message]) when you recieve it.\n\nThere are some examples using webhooks in the examples/webhook_examples directory.\n\nYou can use the Telebot module logger to log debug info about Telebot. Use to get the logger of the TeleBot module. It is possible to add custom logging Handlers to the logger. Refer to the Python logging module page for more info.\n\nYou can use proxy for request. object will use by call proxies argument.\n\nIf you want to use socket5 proxy you need install dependency and make sure, that you have the latest version of , , , and .\n\nYou can disable or change the interaction with real Telegram server by using\n\nparameter. You can pass there your own function that will be called instead of requests.request.\n\nThen you can use API and proceed requests in your handler code.\n\nWe have a fully asynchronous version of TeleBot. This class is not controlled by threads. Asyncio tasks are created to execute all the stuff.\n\nAs you can see here, keywords are await and async.\n\nAsynchronous tasks depend on processor performance. Many asynchronous tasks can run parallelly, while thread tasks will block each other.\n\nAsyncTeleBot is asynchronous. It uses aiohttp instead of requests module.\n\nSee more examples in our examples folder\n\nBot instances that were idle for a long time might be rejected by the server when sending a message due to a timeout of the last used session. Add to your initialisation to force recreation after 5 minutes without any activity.\n\nJoin the News channel. Here we will post releases and updates.\n\nTemplate is a ready folder that contains architecture of basic project. Here are some examples of template:\n• SiteAlert bot (source) by ilteoood - Monitors websites and sends a notification on changes\n• Telegram LMGTFY_bot by GabrielRF - Let me Google that for you.\n• ComedoresUGRbot (source) by alejandrocq - Telegram bot to check the menu of Universidad de Granada dining hall.\n• DonantesMalagaBot - DonantesMalagaBot facilitates information to Malaga blood donors about the places where they can donate today or in the incoming days. It also records the date of the last donation so that it helps the donors to know when they can donate again. - by vfranch\n• DuttyBot by Dmytryi Striletskyi - Timetable for one university in Kiev.\n• wat-bridge by rmed - Send and receive messages to/from WhatsApp through Telegram\n• filmratingbot(source) by jcolladosp - Telegram bot using the Python API that gets films rating from IMDb and metacritic\n• RastreioBot (source) by GabrielRF - Bot used to track packages on the Brazilian Mail Service.\n• Spbu4UBot(link) by EeOneDown - Bot with timetables for SPbU students.\n• LearnIt(link) - A Telegram Bot created to help people to memorize other languages’ vocabulary.\n• VigoBusTelegramBot (GitHub) - Bot that provides buses coming to a certain stop and their remaining time for the city of Vigo (Galicia - Spain)\n• kaishnik-bot (source) by airatk - bot which shows all the necessary information to KNTRU-KAI students.\n• Robbie (source) by @FacuM - Support Telegram bot for developers and maintainers.\n• AsadovBot (source) by @DesExcile - Сatalog of poems by Eduard Asadov.\n• thesaurus_com_bot (source) by @LeoSvalov - words and synonyms from dictionary.com and thesaurus.com in the telegram.\n• InfoBot (source) by @irevenko - An all-round bot that displays some statistics (weather, time, crypto etc...)\n• Sporty (source) by @0xnu - Telegram bot for displaying the latest news, sports schedules and injury updates.\n• JoinGroup Silencer Bot (source) by @zeph1997 - A Telegram Bot to remove \"join group\" and \"removed from group\" notifications.\n• MyElizaPsychologistBot (source) by @Pablo-Davila - An implementation of the famous Eliza psychologist chatbot.\n• Frcstbot (source) by Mrsqd. A Telegram bot that will always be happy to show you the weather forecast.\n• MineGramBot by ModischFabrications. This bot can start, stop and monitor a minecraft server.\n• Tabletop DiceBot by dexpiper. This bot can roll multiple dices for RPG-like games, add positive and negative modifiers and show short descriptions to the rolls.\n• BarnameKon by Anvaari. This Bot make \"Add to google calendar\" link for your events. It give information about event and return link. It work for Jalali calendar and in Tehran Time. Source code\n• Translator bot by Areeg Fahad. This bot can be used to translate texts.\n• Digital Cryptocurrency bot by Areeg Fahad. With this bot, you can now monitor the prices of more than 12 digital Cryptocurrency.\n• Anti-Tracking Bot by Leon Heess (source). Send any link, and the bot tries its best to remove all tracking from the link you sent.\n• Developer Bot by Vishal Singh (source code) This telegram bot can do tasks like GitHub search & clone,provide c++ learning resources ,Stackoverflow search, Codeforces(profile visualizer,random problems)\n• oneIPO bot by Aadithya & Amol Soans This Telegram bot provides live updates , data and documents on current and upcoming IPOs(Initial Public Offerings)\n• CoronaGraphsBot (source) by TrevorWinstral - Gets live COVID Country data, plots it, and briefs the user\n• ETHLectureBot (source) by TrevorWinstral - Notifies ETH students when their lectures have been uploaded\n• Vlun Finder Bot by Resinprotein2333. This bot can help you to find The information of CVE vulnerabilities.\n• ETHGasFeeTrackerBot (Source by DevAdvik - Get Live Ethereum Gas Fees in GWEI\n• Google Sheet Bot by JoachimStanislaus. This bot can help you to track your expenses by uploading your bot entries to your google sheet.\n• GrandQuiz Bot by Carlosma7. This bot is a trivia game that allows you to play with people from different ages. This project addresses the use of a system through chatbots to carry out a social and intergenerational game as an alternative to traditional game development.\n• Diccionario de la RAE (source) This bot lets you find difinitions of words in Spanish using RAE's dictionary. It features direct message and inline search.\n• remoteTelegramShell by EnriqueMoran. Control your LinuxOS computer through Telegram.\n• Commerce Telegram Bot. Make purchases of items in a store with an Admin panel for data control and notifications.\n• Pyfram-telegram-bot Query wolframalpha.com and make use of its API through Telegram.\n• TranslateThisVideoBot This Bot can understand spoken text in videos and translate it to English\n• Zyprexa (source) Zyprexa can solve, help you solve any mathematical problem you encounter and convert your regular mathematical expressions into beautiful imagery using LaTeX.\n• Bincode-telegram-bot by tusharhero - Makes bincodes from text provides and also converts them back to text.\n• Gugumoe-bot (source) by 咕谷酱 GuXiaoJiang is a multi-functional robot, such as OSU game information query, IP test, animation screenshot search and other functions.\n• Feedback-bot A feedback bot for user-admin communication. Made on AsyncTeleBot, using template.\n• TeleServ by ablakely This is a Telegram to IRC bridge which links as an IRC server and makes Telegram users appear as native IRC users.\n• Simple Store Bot by Anton Glyzin This is a simple telegram-store with an admin panel. Designed according to a template.\n• Media Rating Bot (source)by CommanderCRM. This bot aggregates media (movies, TV series, etc.) ratings from IMDb, Rotten Tomatoes, Metacritic, TheMovieDB, FilmAffinity and also provides number of votes of said media on IMDb.\n• Spot Seek Bot (source) by Arashnm80. This is a free & open source telegram bot for downloading tracks, albums or playlists from spotify.\n• CalendarIT Bot (source)by CodeByZen. A simple, but extensible Python Telegram bot, can post acquainted with what is happening today, tomorrow or what happened 20 years ago to channel.\n• DownloadMusicBOT by Francisco Griman - It is a simple bot that downloads audio from YouTube videos on Telegram.\n• AwesomeChatGPTBot - Simple ChatGTP-3.5 bot. It is FREE and can remember chat history for a while With pre-defined roles!\n• QR-Code For You Bot (source) by Arashnm80. Telegram qrcode generator bot created with pyhton and telebot.\n• Best Instagram Downloader Bot (source) by Arashnm80. Free and open source telegram bot to download posts and reels from Instagram.\n• DrinkGenius-Bot (source) by Povladarchik. Your personal assistant in the world of cocktails.\n• Pytgpt-Bot (source) by Smartwa. AI powered bot for chatting, text-to-image and text-to-speech conversions.\n\nWant to have your bot listed here? Just make a pull request. Only bots with public source code are accepted."
    },
    {
        "link": "https://pytba.readthedocs.io",
        "document": "TeleBot is synchronous and asynchronous implementation of Telegram Bot API."
    },
    {
        "link": "https://github.com/eternnoir/pyTelegramBotAPI/blob/master/README.md",
        "document": "A simple, but extensible Python implementation for the Telegram Bot API.\n• General API Documentation\n• General use of the API\n• Advanced use of the API\n• Controlling the amount of Threads used by TeleBot\n• F.A.Q.\n• How can I distinguish a User and a GroupChat in message.chat?\n\nThis API is tested with Python 3.9-3.13 and Pypy 3. There are two ways to install the library:\n\nIt is generally recommended to use the first option.\n\nWhile the API is production-ready, it is still under development and it has regular updates, do not forget to update it regularly by calling\n\nIt is presumed that you have obtained an API token with @BotFather. We will call this token . Furthermore, you have basic knowledge of the Python programming language and more importantly the Telegram Bot API.\n\nThe TeleBot class (defined in _init_.py) encapsulates all API calls in a single class. It provides functions such as ( , etc.) and several ways to listen for incoming messages.\n\nCreate a file called . Then, open the file and create an instance of the TeleBot class.\n\nNote: Make sure to actually replace TOKEN with your own API token.\n\nAfter that declaration, we need to register some so-called message handlers. Message handlers define filters which a message must pass. If a message passes the filter, the decorated function is called and the incoming message is passed as an argument.\n\nA function which is decorated by a message handler can have an arbitrary name, however, it must have only one parameter (the message).\n\nThis one echoes all incoming text messages back to the sender. It uses a lambda function to test a message. If the lambda returns True, the message is handled by the decorated function. Since we want all messages to be handled by this function, we simply always return True.\n\nNote: all handlers are tested in the order in which they were declared\n\nWe now have a basic bot which replies a static message to \"/start\" and \"/help\" commands and which echoes the rest of the sent messages. To start the bot, add the following to our source file:\n\nAlright, that's it! Our source file now looks like this:\n\nTo start the bot, simply open up a terminal and enter to run the bot! Test it by sending commands ('/start' and '/help') and arbitrary text messages.\n\nAll types are defined in types.py. They are all completely in line with the Telegram API's definition of the types, except for the Message's field, which is renamed to (because is a Python reserved token). Thus, attributes such as can be accessed directly with . Note that can be either an instance of or (see How can I distinguish a User and a GroupChat in message.chat?).\n\nThe Message object also has a attribute, which defines the type of the Message. can be one of the following strings: , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , .\n\nYou can use some types in one function. Example:\n\nAll API methods are located in the TeleBot class. They are renamed to follow common Python naming conventions. E.g. is renamed to and to .\n\nOutlined below are some general use cases of the API.\n\nA message handler is a function that is decorated with the decorator of a TeleBot instance. Message handlers consist of one or multiple filters. Each filter must return True for a certain message in order for a message handler to become eligible to handle that message. A message handler is declared in the following way (provided is an instance of TeleBot):\n\nis not bound to any restrictions. Any function name is permitted with message handlers. The function must accept at most one argument, which will be the message that the function must handle. is a list of keyword arguments. A filter is declared in the following manner: . One handler may have multiple filters. TeleBot supports the following filters:\n\nHere are some examples of using the filters and message handlers:\n\nImportant: all handlers are tested in the order in which they were declared\n\nHandle updates of a the bot's member status in a chat\n\nHandle updates of a chat member's status in a chat Note: \"chat_member\" updates are not requested by default. If you want to allow all update types, set in / to\n\nNow, you can use inline_handler to get inline queries in telebot.\n\nUse chosen_inline_handler to get chosen_inline_result in telebot. Don't forget to add the /setinlinefeedback command for @Botfather.\n\nA middleware handler is a function that allows you to modify requests or the bot context as they pass through the Telegram to the bot. You can imagine middleware as a chain of logic connection handled before any other handlers are executed. Middleware processing is disabled by default, enable it by setting .\n\nThere are other examples using middleware handler in the examples/middleware directory.\n\nThere are class-based middlewares. Basic class-based middleware looks like this:\n\nClass-based middleware should have two functions: post and pre process. So, as you can see, class-based middlewares work before and after handler execution. For more, check out in examples\n\nAlso, you can use built-in custom filters. Or, you can create your own filter.\n\nAlso, we have examples on them. Check this links:\n\nYou can check some built-in filters in source code\n\nExample of filtering by id\n\nExample of filtering by text\n\nIf you want to add some built-in filter, you are welcome to add it in custom_filters.py file.\n\nHere is example of creating filter-class:\n\nAll functions of TeleBot take an optional argument. This argument must be an instance of , or , which are defined in types.py.\n\nThe last example yields this result:\n\nThis object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc. Attributes:\n\nHere's an Example: \n\n Here is the entity number or order of entity in a reply, for if incase there are multiple entities in the reply/message.\n\n returns a list of entities object. \n\n would give the type of the first entity\n\n Refer Bot Api for extra details\n\nSince version 5.0 of the Bot API, you have the possibility to run your own Local Bot API Server. pyTelegramBotAPI also supports this feature.\n\nImportant: Like described here, you have to log out your bot from the Telegram server before switching to your local API server. in pyTelegramBotAPI use\n\nNote: 4200 is an example port\n\nNew: There is an asynchronous implementation of telebot. To enable this behaviour, create an instance of AsyncTeleBot instead of TeleBot.\n\nNow, every function that calls the Telegram API is executed in a separate asynchronous task. Using AsyncTeleBot allows you to do the following:\n\nSee more in examples\n\nSometimes you must send messages that exceed 5000 characters. The Telegram API can not handle that many characters in one request, so we need to split the message in multiples. Here is how to do that using the API:\n\nOr you can use the new function to get more meaningful substrings:\n\nThe TeleBot constructor takes the following optional arguments:\n• threaded: True/False (default True). A flag to indicate whether TeleBot should execute message handlers on it's polling Thread.\n\nAs an alternative to the message handlers, one can also register a function as a listener to TeleBot.\n\nNOTICE: handlers won't disappear! Your message will be processed both by handlers and listeners. Also, it's impossible to predict which will work at first because of threading. If you use threaded=False, custom listeners will work earlier, after them handlers will be called. Example:\n\nWhen using webhooks telegram sends one Update per call, for processing it you should call process_new_messages([update.message]) when you recieve it.\n\nThere are some examples using webhooks in the examples/webhook_examples directory.\n\nYou can use the Telebot module logger to log debug info about Telebot. Use to get the logger of the TeleBot module. It is possible to add custom logging Handlers to the logger. Refer to the Python logging module page for more info.\n\nYou can use proxy for request. object will use by call proxies argument.\n\nIf you want to use socket5 proxy you need install dependency and make sure, that you have the latest version of , , , and .\n\nYou can disable or change the interaction with real Telegram server by using\n\nparameter. You can pass there your own function that will be called instead of requests.request.\n\nThen you can use API and proceed requests in your handler code.\n\nWe have a fully asynchronous version of TeleBot. This class is not controlled by threads. Asyncio tasks are created to execute all the stuff.\n\nAs you can see here, keywords are await and async.\n\nAsynchronous tasks depend on processor performance. Many asynchronous tasks can run parallelly, while thread tasks will block each other.\n\nAsyncTeleBot is asynchronous. It uses aiohttp instead of requests module.\n\nSee more examples in our examples folder\n\nBot instances that were idle for a long time might be rejected by the server when sending a message due to a timeout of the last used session. Add to your initialisation to force recreation after 5 minutes without any activity.\n\nJoin the News channel. Here we will post releases and updates.\n\nTemplate is a ready folder that contains architecture of basic project. Here are some examples of template:\n• SiteAlert bot (source) by ilteoood - Monitors websites and sends a notification on changes\n• Telegram LMGTFY_bot by GabrielRF - Let me Google that for you.\n• ComedoresUGRbot (source) by alejandrocq - Telegram bot to check the menu of Universidad de Granada dining hall.\n• DonantesMalagaBot - DonantesMalagaBot facilitates information to Malaga blood donors about the places where they can donate today or in the incoming days. It also records the date of the last donation so that it helps the donors to know when they can donate again. - by vfranch\n• DuttyBot by Dmytryi Striletskyi - Timetable for one university in Kiev.\n• wat-bridge by rmed - Send and receive messages to/from WhatsApp through Telegram\n• filmratingbot(source) by jcolladosp - Telegram bot using the Python API that gets films rating from IMDb and metacritic\n• RastreioBot (source) by GabrielRF - Bot used to track packages on the Brazilian Mail Service.\n• Spbu4UBot(link) by EeOneDown - Bot with timetables for SPbU students.\n• LearnIt(link) - A Telegram Bot created to help people to memorize other languages’ vocabulary.\n• VigoBusTelegramBot (GitHub) - Bot that provides buses coming to a certain stop and their remaining time for the city of Vigo (Galicia - Spain)\n• kaishnik-bot (source) by airatk - bot which shows all the necessary information to KNTRU-KAI students.\n• Robbie (source) by @FacuM - Support Telegram bot for developers and maintainers.\n• AsadovBot (source) by @DesExcile - Сatalog of poems by Eduard Asadov.\n• thesaurus_com_bot (source) by @LeoSvalov - words and synonyms from dictionary.com and thesaurus.com in the telegram.\n• InfoBot (source) by @irevenko - An all-round bot that displays some statistics (weather, time, crypto etc...)\n• Sporty (source) by @0xnu - Telegram bot for displaying the latest news, sports schedules and injury updates.\n• JoinGroup Silencer Bot (source) by @zeph1997 - A Telegram Bot to remove \"join group\" and \"removed from group\" notifications.\n• MyElizaPsychologistBot (source) by @Pablo-Davila - An implementation of the famous Eliza psychologist chatbot.\n• Frcstbot (source) by Mrsqd. A Telegram bot that will always be happy to show you the weather forecast.\n• MineGramBot by ModischFabrications. This bot can start, stop and monitor a minecraft server.\n• Tabletop DiceBot by dexpiper. This bot can roll multiple dices for RPG-like games, add positive and negative modifiers and show short descriptions to the rolls.\n• BarnameKon by Anvaari. This Bot make \"Add to google calendar\" link for your events. It give information about event and return link. It work for Jalali calendar and in Tehran Time. Source code\n• Translator bot by Areeg Fahad. This bot can be used to translate texts.\n• Digital Cryptocurrency bot by Areeg Fahad. With this bot, you can now monitor the prices of more than 12 digital Cryptocurrency.\n• Anti-Tracking Bot by Leon Heess (source). Send any link, and the bot tries its best to remove all tracking from the link you sent.\n• Developer Bot by Vishal Singh (source code) This telegram bot can do tasks like GitHub search & clone,provide c++ learning resources ,Stackoverflow search, Codeforces(profile visualizer,random problems)\n• oneIPO bot by Aadithya & Amol Soans This Telegram bot provides live updates , data and documents on current and upcoming IPOs(Initial Public Offerings)\n• CoronaGraphsBot (source) by TrevorWinstral - Gets live COVID Country data, plots it, and briefs the user\n• ETHLectureBot (source) by TrevorWinstral - Notifies ETH students when their lectures have been uploaded\n• Vlun Finder Bot by Resinprotein2333. This bot can help you to find The information of CVE vulnerabilities.\n• ETHGasFeeTrackerBot (Source by DevAdvik - Get Live Ethereum Gas Fees in GWEI\n• Google Sheet Bot by JoachimStanislaus. This bot can help you to track your expenses by uploading your bot entries to your google sheet.\n• GrandQuiz Bot by Carlosma7. This bot is a trivia game that allows you to play with people from different ages. This project addresses the use of a system through chatbots to carry out a social and intergenerational game as an alternative to traditional game development.\n• Diccionario de la RAE (source) This bot lets you find difinitions of words in Spanish using RAE's dictionary. It features direct message and inline search.\n• remoteTelegramShell by EnriqueMoran. Control your LinuxOS computer through Telegram.\n• Commerce Telegram Bot. Make purchases of items in a store with an Admin panel for data control and notifications.\n• Pyfram-telegram-bot Query wolframalpha.com and make use of its API through Telegram.\n• TranslateThisVideoBot This Bot can understand spoken text in videos and translate it to English\n• Zyprexa (source) Zyprexa can solve, help you solve any mathematical problem you encounter and convert your regular mathematical expressions into beautiful imagery using LaTeX.\n• Bincode-telegram-bot by tusharhero - Makes bincodes from text provides and also converts them back to text.\n• Gugumoe-bot (source) by 咕谷酱 GuXiaoJiang is a multi-functional robot, such as OSU game information query, IP test, animation screenshot search and other functions.\n• Feedback-bot A feedback bot for user-admin communication. Made on AsyncTeleBot, using template.\n• TeleServ by ablakely This is a Telegram to IRC bridge which links as an IRC server and makes Telegram users appear as native IRC users.\n• Simple Store Bot by Anton Glyzin This is a simple telegram-store with an admin panel. Designed according to a template.\n• Media Rating Bot (source)by CommanderCRM. This bot aggregates media (movies, TV series, etc.) ratings from IMDb, Rotten Tomatoes, Metacritic, TheMovieDB, FilmAffinity and also provides number of votes of said media on IMDb.\n• Spot Seek Bot (source) by Arashnm80. This is a free & open source telegram bot for downloading tracks, albums or playlists from spotify.\n• CalendarIT Bot (source)by CodeByZen. A simple, but extensible Python Telegram bot, can post acquainted with what is happening today, tomorrow or what happened 20 years ago to channel.\n• DownloadMusicBOT by Francisco Griman - It is a simple bot that downloads audio from YouTube videos on Telegram.\n• AwesomeChatGPTBot - Simple ChatGTP-3.5 bot. It is FREE and can remember chat history for a while With pre-defined roles!\n• QR-Code For You Bot (source) by Arashnm80. Telegram qrcode generator bot created with pyhton and telebot.\n• Best Instagram Downloader Bot (source) by Arashnm80. Free and open source telegram bot to download posts and reels from Instagram.\n• DrinkGenius-Bot (source) by Povladarchik. Your personal assistant in the world of cocktails.\n• Pytgpt-Bot (source) by Smartwa. AI powered bot for chatting, text-to-image and text-to-speech conversions.\n\nWant to have your bot listed here? Just make a pull request. Only bots with public source code are accepted."
    },
    {
        "link": "https://stackoverflow.com/questions/75327568/making-a-telegram-bot-with-python-with-the-telebot-library",
        "document": "I'm trying to make a telegram bot with python but when I import telebot library (I have installed pyTelegramBotAPI & telebot libraries), but some parts don't work, like , and .\n\nWhat could be causing this problem?"
    },
    {
        "link": "https://serveracademy.com/blog/python-random-module-how-to-generate-random-numbers",
        "document": "Random numbers are essential in various programming tasks, from simulations and games to security and data analysis. Python’s module provides a suite of functions that make generating random numbers straightforward and efficient. This article explores how to use the Python module to generate random numbers, offering practical examples and best practices to enhance your coding skills.\n\nTo generate a random integer within a specific range in Python, use the function from the module. Here’s how you can do it:\n\nThis simple script imports the module, generates a random integer between 1 and 100 (inclusive), and prints it out. Try running this code multiple times to see different random numbers generated each time.\n\nThe module in Python is a built-in library that offers a range of functions to generate random numbers and perform random operations. Whether you need random integers, floating-point numbers, or random selections from a list, the module has got you covered.\n\nTo get started, import the module:\n\nOnce imported, you can access various functions to generate random numbers.\n\nUse to generate a random integer N such that :\n\nTo get a random floating-point number between 0 and 1, use the function:\n\nFor a random float within a specific range, use :\n\nUse to generate a random number based on the Gaussian (normal) distribution:\n\nUse to select a random element from a sequence:\n\nTo shuffle the elements of a list in place, use :\n\nExamples of When to Use Random Numbers\n\nRandom numbers are essential in various domains:\n• Simulations: Modeling real-world systems like weather patterns or financial markets.\n\nTry running the function multiple times to simulate rolling a dice.\n\nThis function generates a random password of a specified length using letters, digits, and punctuation symbols.\n\nBy default, the module uses the current system time to seed the random number generator, ensuring different results each time the program runs. However, you can set a specific seed using for reproducibility:\n\nSetting the seed to the same value will produce the same sequence of random numbers, which is useful for debugging.\n\nUse to generate a random number within a range with a specific step:\n\nThis will generate a random number like 0, 5, 10, …, up to 100.\n\nTo select multiple random elements from a list without replacement, use :\n\nFor selection with replacement, use :\n\nBest Practices When Using Random Numbers\n• Avoid Predictability: For cryptographic purposes, use the module instead of , as it’s designed for security-sensitive applications.\n• Reproducibility: If you need to reproduce results, set a seed using .\n• Resource Management: Be cautious when generating large amounts of random data, as it may impact performance.\n\nThe Python module is a powerful tool for generating random numbers and performing random operations. Whether you’re developing a game, running simulations, or needing random data for testing, the functions provided by this module are indispensable.\n\nTo further enhance your Python skills and explore more advanced topics, consider signing up for our comprehensive Python courses at ServerAcademy.com. Check them out here: Python Programming Courses.\n\nHappy coding, and see you in the course!"
    },
    {
        "link": "https://geeksforgeeks.org/python-random-module",
        "document": "Python Random module generates random numbers in Python. These are pseudo-random numbers means they are not truly random.\n\nThis module can be used to perform random actions such as generating random numbers, printing random a value for a list or string, etc. It is an in-built function in Python.\n\nList of all the functions Python Random Module\n\nThere are different random functions in the Random Module of Python. Look at the table below to learn more about these functions:\n\nLet’s discuss some common operations performed by Random module in Python.\n\nExample 1: Printing a random value from a list in Python.\n\nThis code uses the module to select a random element from the list using the function. It prints a random element from the list, demonstrating how to pick a random item from a sequence in Python.\n\nExample 2: Creating random numbers with Python seed() in Python.\n\nAs stated above random module creates pseudo-random numbers. Random numbers depend on the seeding value. For example, if the seeding value is 5 then the output of the below program will always be the same. Therefore, it must not be used for encryption.\n\nThe code sets the random number generator’s seed to 5 using , ensuring reproducibility. It then prints two random floating-point numbers between 0 and 1 using . The seed makes these numbers the same every time you run the code with a seed of 5, providing consistency in the generated random values.\n\nrandom.randint() method is used to generate random integers between the given range.\n\nThis code uses the ‘ module to generate random integers within specific ranges. It first generates a random integer between 5 and 15 (inclusive) and then between -10 and -2 (inclusive). The generated integers are printed with appropriate formatting.\n\nA random.random() method is used to generate random floats between 0.0 to 1.\n\nIn this code, we are using the function from the ‘ module in Python. It prints a random floating-point number between 0 and 1 when you call .\n\nRandom sampling from a list in Python (random.choice, and sample)\n\nExample 1: Python random.choice() function is used to return a random item from a list, tuple, or string.\n\nThe code uses the function from the module to randomly select elements from different data types. It demonstrates selecting a random element from a list, a string, and a tuple. The chosen elements will vary each time you run the code, making it useful for random selection from various data structures.\n\nExample 2: Python random.sample() function is used to return a random item from a list, tuple, or string.\n\nThis code utilizes the function from the ‘ module to obtain random samples from various data types. It selects three random elements without replacement from a list, a tuple, and a string, demonstrating its versatility in generating distinct random samples. With each execution, the selected elements will differ, providing random subsets from the input data structures.\n\nA random.shuffle() method is used to shuffle a sequence (list). Shuffling means changing the position of the elements of the sequence. Here, the shuffling operation is inplace.\n\nThis code uses the function from the ‘ module to shuffle the elements of a list named ‘ . It first prints the original order of the list, then shuffles it twice. The second shuffle creates a new random order, and the list’s content is displayed after each shuffle. This demonstrates how the elements are rearranged randomly in the list with each shuffle operation.\n\nIn this article we discussed about Python Random module, and also saw some examples of functions in random module in Python. Random module in Python is very important and contains very useful functions.\n\nHope this helps you in using Python Random module functions.\n\nWhat is a random module in Python?\n\nWhat is random vs Randint in Python?\n\nHow many functions are there in the random module?\n\nWhat is the syntax of the random function?\n\nWhat is the difference between the math module and the random module?"
    },
    {
        "link": "https://stackoverflow.com/questions/62091758/random-number-generator-with-conditions-python",
        "document": "I am new to Python and trying to generate 5 numbers with 2 conditions:\n• There must be 3 even and 2 odd numbers\n• From those 5 numbers 3 must be low (1,51) and 2 high (51,100). Which number will be low or high is not of interest.\n\nI have managed to solve the first part:\n\nObviously this is not getting me anywhere For the second part i thought i could use something like:\n\nBut obviously this is not the way as i am getting more than 5 numbers.\n\nAny help would be appriciated. Thank you"
    },
    {
        "link": "https://stackoverflow.com/questions/48118647/how-to-generate-random-numbers-with-if-statement-in-python",
        "document": "I would like to generate random numbers with a specific restriction using python. The code should do the following:\n\nIf an entered number is:\n\n0, then generate 0 random non-recurrent numbers \n\n <1, then generate 1 random non-recurrent numbers \n\n <9, then generate 2 random non-recurrent numbers \n\n <15, then generate 3 random non-recurrent numbers \n\n <26, then generate 5 random non-recurrent numbers \n\n <51, then generate 8 random non-recurrent numbers \n\n <91, then generate 13 random non-recurrent numbers \n\n <151, then generate 20 random non-recurrent numbers \n\n <281, then generate 32 random non-recurrent numbers \n\n\n\nThe value of the random numbers should be limited by the value of the entered number. So if a 75 is entered, then the code should generate 13 random numbers with being 75 the highest value of the 13 numbers. 75 doesn't have to be the actual highest number, just in terms of max value.\n\nMy guess was to use numpy. Here is what I got until now (with an users help).\n\nAny ideas or more starting points?"
    },
    {
        "link": "https://mimo.org/glossary/python/random-module",
        "document": "The Python random module provides a set of functions for generating random numbers, selecting random elements from sequences, and shuffling collections. It is widely used in simulations, cryptography, gaming, machine learning, and randomized testing.\n\nHow to Use the Python Random Module\n\nTo use the random module, you need to import it first:\n\nOnce imported, you can use its various functions to generate random numbers, shuffle lists, and select random elements. Here’s a simple example that generates a random integer between 1 and 100:\n\nHow to Import the Python Random Module\n\nSince the random module is part of Python’s standard library, you don’t need to install anything separately. You simply import it as shown above.\n\nHow to Install the Python Random Module\n\nBecause the module is built into Python, no installation is required. If you encounter issues using it, ensure that your Python installation is up to date by running:\n\nIf necessary, update Python by downloading the latest version from the official Python website.\n\nWhen to Use the Python Random Module\n\nThe random module is useful in various scenarios where unpredictability is needed. Here are some common use cases:\n\nRandom numbers are widely used in simulations, cryptography, and statistical sampling.\n\nWhen working with lists, allows you to pick a random element.\n\nShuffling is useful in applications like card games, randomized testing, and playlist randomization.\n\nExamples of Using the Python Random Module\n\nYou can simulate a six-sided die roll using .\n\nUsing to randomly select heads or tails.\n\nLearn More About the Python Random Module\n\nThe module includes various functions for generating randomness:\n\nUsing the Random Module for Cryptography\n\nFor security-sensitive randomness, the module is recommended over . However, for non-cryptographic purposes like games and simulations, is suitable.\n\nTo pick multiple unique items from a list, use .\n\nTo reproduce the same sequence of random numbers, use .\n\nIf you need to print a float in the logging module when using random values, you can format the output like this:\n\nYou can save generated random values to a log file for debugging or tracking purposes.\n\nUsing the Random Module with Threading\n\nIn multi-threaded applications, you might need random numbers for different tasks.\n\nUsing the Random Module with a Progress Bar\n\nWhen installing a library, you can display a progress bar with randomized delays.\n\nChecking if Logging is Built into Python\n\nThe logging module is part of Python’s standard library, so no installation is needed.\n\nIf you use the random module in logging and want to filter out sensitive data, you can use logging filters.\n\nIn multiprocessing tasks, you may need to generate random numbers across multiple processes.\n\nWhen using random values in logging, you might want to exclude certain fields.\n\nThe Python random module provides powerful tools for generating random numbers, shuffling data, and selecting elements. Whether you are working with games, simulations, machine learning, or cryptography, this module offers flexible solutions for incorporating randomness into your programs."
    },
    {
        "link": "https://medium.com/@bioogrami7/telegram-bot-security-solutions-6c5b8105a0e1",
        "document": "Telegram, known for its secure messaging platform, has introduced an array of bots serving diverse purposes for its users. However, with the increasing reliance on these bots, the aspect of security becomes paramount. Ensuring the protection of data, user privacy, and the overall functionality of these bots is crucial in an age of ever-evolving cyber threats.\n\nSecurity in Telegram bots is pivotal due to the vast range of personal and sensitive data transmitted and managed by these automated systems. Any breach in their security could lead to significant risks such as hacking attempts, phishing attacks, and data breaches.\n\nThe vulnerability of bots to hacking poses a severe threat. Malicious actors often attempt unauthorized access to bots to exploit vulnerabilities for personal gains.\n\nPhishing attacks, aiming to trick users into revealing personal information, are another concern. Bots could be exploited to propagate phishing schemes, leading to compromised user data.\n\nThe risk of data breaches in Telegram bots is prevalent, especially when handling sensitive information. Unauthorized access to databases or improper encryption could lead to massive data leaks.\n\nImplementing robust security measures is crucial to safeguard these bots:\n\nEnforcing two-factor authentication adds an extra layer of security, ensuring only authorized access to the bot. Source\n\nEncrypting sensitive data prevents unauthorized parties from accessing and understanding the information, even if breached.\n\nRegularly updating and patching the bot’s software and systems is vital to fix vulnerabilities and strengthen security.\n\nManaging API tokens securely helps control access to the bot and prevents unauthorized usage.\n\nImplementing RBAC ensures that different users have appropriate levels of access, reducing potential risks.\n\nDevelopers can contribute to bot security by:\n\nThoroughly validating and sanitizing user inputs helps prevent malicious commands or data injection.\n\nImplementing proper error handling and logging practices aids in identifying and mitigating potential security threats.\n\nConstantly monitoring bot activity in real-time allows for prompt action in case of security incidents.\n\nVarious tools and platforms cater to bot security, offering features such as vulnerability scanning, code analysis, and threat detection.\n\nExamining real-world examples of bot breaches offers valuable insights into the consequences of inadequate security measures.\n\nExploring emerging technologies and predictions regarding bot security advancements provides a glimpse into the future landscape of bot protection.\n\nIn conclusion, securing Telegram bots is essential to safeguard user data, maintain functionality, and uphold trust. With proactive measures and continuous advancements in security practices, the future of bot security looks promising.\n\nWhat are the main security threats to Telegram bots?\n\nThe primary threats include hacking attempts, phishing attacks, and data breaches, jeopardizing user privacy and data security.\n\nHow can developers enhance the security of their Telegram bots?\n\nDevelopers can enhance security by implementing two-factor authentication, encrypting sensitive data, regularly updating the bot, and employing proper coding practices.\n\nAre there any specific tools recommended for securing Telegram bots?\n\nSeveral tools like vulnerability scanners, code analyzers, and intrusion detection systems are recommended for bolstering Telegram bot security.\n\nWhat are the consequences of neglecting bot security?\n\nNeglecting bot security could result in compromised user data, system vulnerabilities, and damage to the bot’s reputation, leading to severe repercussions.\n\nTelegram continually updates its security protocols, encourages developers to follow best practices, and provides guidelines for secure bot development to address security concerns effectively."
    },
    {
        "link": "https://stackoverflow.com/questions/67321867/what-is-the-most-secure-way-to-store-authentication-data-when-deploying-an-app-i",
        "document": "I'm attempting to deploy a Pythonic Telegram bot from my GitHub repository using Heroku's service. Telegram's API includes an API token, which I keep as a secret in my Github repository. How could I deploy the software that was linked to GitHub and insert the app's credentials? I don't want my credentials to be included in the codebase. What is the safest and easy way to handle the situation?"
    },
    {
        "link": "https://gitguardian.com/remediation/telegram-bot-token",
        "document": "My Telegram Bot Token leaked! What should I do?\n\nWhat is a Telegram Bot Token and how it is used?\n\nA Telegram Bot Token is a unique authentication key that allows a developer to interact with the Telegram Bot API on behalf of a bot. It is used to authenticate and authorize requests made to the API.\n\nHere are the main use cases for a Telegram Bot Token:\n• Authentication: Telegram Bot Token is used to authenticate the bot with the Telegram API, allowing it to send and receive messages and interact with users.\n• Message Handling: The token is essential for the bot to handle incoming messages, process commands, and respond to user queries or actions.\n• Bot Configuration: The token is used to configure various settings of the bot, such as setting up webhooks, defining commands, and managing bot permissions.\n\nUsing environment variables for storing sensitive information like a Telegram Bot Token in your code is a secure practice for the following reasons:\n• Environment variables are not stored in the codebase or version control systems, reducing the risk of exposure.\n• They can be easily managed and updated without changing the code, enhancing security maintenance.\n• Environment variables are specific to the environment in which the code is running, limiting access to sensitive information.\n• They provide an additional layer of security by keeping sensitive data separate from the code logic.\n\nHow to secure your secrets using environment variables\n\nUsing AWS Secrets Manager to manage Telegram Bot Tokens is a secure way to handle sensitive data. Here are code snippets in five different programming languages that demonstrate how to retrieve the Telegram Bot Token from AWS Secrets Manager.\n\nUsing HashiCorp Vault for managing Telegram Bot Tokens is a great way to enhance security. Here are code snippets in five different programming languages for securely handling a Telegram Bot Token using HashiCorp Vault.\n\nRemember to replace the VAULT_ADDR and VAULT_TOKEN with your Vault server address and authentication token. The snippets assume that the Telegram Bot Token is stored under the api_key field within Vault. The specifics of the Vault path and field names should be adjusted to match your Vault setup.\n\nUsing CyberArk Conjur to manage Telegram Bot Token is a secure way to handle sensitive data. Here are code snippets in five different programming languages that demonstrate how to retrieve the Telegram Bot Token from CyberArk Conjur.\n• Open Telegram and search for the BotFather.\n• Start a chat with the BotFather by clicking on the \"Start\" button.\n• Use the command \"/newbot\" to create a new bot.\n• Follow the instructions to set a name and username for your bot.\n• Once your bot is created, the BotFather will provide you with a Bot Token. This token is a long string of characters that uniquely identifies your bot.\n\nMake sure to keep your Bot Token secure and do not share it with anyone else. You can use this token to authenticate your bot and start developing its functionality.\n\nMy Telegram Bot Token leaked, what are the possible reasons?\n\nThere are several reasons why a Telegram Bot Token might have been leaked:\n• Improper storage: If the token is stored in a configuration file or hard-coded within the codebase, it can be easily accessed by unauthorized individuals.\n• Version control: If the token is accidentally committed to a public repository, it can be viewed by anyone with access to the repository.\n• Logging: If the token is inadvertently logged in error messages or debug logs, it can be exposed to anyone with access to those logs.\n• Third-party services: If the token is shared with third-party services or developers without proper security measures in place, it can be at risk of being leaked.\n• Human error: Developers may accidentally share the token through communication channels or collaboration platforms, leading to unintended exposure.\n\nWhat are the risks of leaking a Telegram Bot Token\n\nWhen developers inadvertently leak a Telegram Bot Token, they expose their bot to various security risks and vulnerabilities. It is crucial for developers to understand the implications of such a breach in order to prevent unauthorized access and potential malicious activities.\n• Unauthorized Access: Leaking a Telegram Bot Token can allow unauthorized individuals to gain access to the bot, potentially leading to the misuse of sensitive data or unauthorized actions being performed.\n• Malicious Activities: Attackers can exploit a leaked Bot Token to send spam messages, initiate phishing attacks, or even take control of the bot for malicious purposes.\n• Data Breach: If a Bot Token is exposed, sensitive information exchanged through the bot, such as user interactions, personal data, or confidential messages, could be compromised.\n• Financial Loss: In some cases, a leaked Bot Token can be used to incur financial losses, such as sending premium rate messages or making unauthorized transactions.\n\nTherefore, it is essential for developers to implement robust secret management practices and regularly conduct security assessments to detect and address any potential vulnerabilities that may put their Telegram Bot Token at risk.\n• Avoid embedding the secret directly in your code. Instead, use environment variables or secrets managers‍\n• Secure storage: store the Telegram Bot Token in a secure location, such as a password manager or a secrets management service.\n• Regular rotation: periodically rotate the API key to minimize the risk of long-term exposure.\n• Restrict permissions: apply the principle of least privilege by only granting the key the minimum necessary permissions.\n• Monitor usage: regularly check the usage logs for any unusual activity or unauthorized access attempts.\n• Implement access controls: limit the number of users who have access to the secret and enforce strong authentication measures.\n• Use a secrets manager: utilize secret management tools like CyberArk or AWS Secrets Manager for enhanced security.\n\nBy adhering to the best practices, you can significantly reduce the risk associated with Telegram Bot Token usage and improve the overall security of your Telegram Bot Token implementations.\n\nExposing secrets on GitHub: What to do after leaking Credential and API keys\n\nTelegram Bot Token leak remediation: what to do\n\nWhat to do if you expose a secret: How to stay calm and respond to an incident [cheat sheet included]\n\nHow to check if Telegram Bot Token was used by malicious actors\n• Review Access Logs: Check the access logs of your Telegram Bot Token account for any unauthorized access or unusual activity. Pay particular attention to access from unfamiliar IP addresses (if you haven’t set up a specific allow list) or at odd hours.\n• Monitor Usage Patterns: Look for anomalies in the usage patterns, such as unexpected spikes in data access or transfer.\n• Check Active Connections and Operations: Review the list of active connections and recent operations on your database. Unusual or unauthorized operations might indicate malicious use.\n• Audit API Usage: If possible, audit the usage of your API key through any logging or monitoring services you have integrated with Telegram Bot Token. This can give insights into any unauthorized use of your key.\n• Navigate to the API section and generate a new API key.\n\nUpdate Services with the new key:\n• Replace the compromised key with the new key in all your services that use this API key.\n• Ensure all your applications and services are updated with the new key before deactivating the old one.\n• Once the new key is in place and everything is functioning correctly, deactivate the old API key.\n• This can typically be done from the same section where you generated the new key.\n• After deactivating the old key, monitor your systems closely to ensure that all services are running smoothly and that there are no unauthorized access attempts.\n\nHow to understand which services will stop working\n• Inventory of services: keep an inventory of all services and applications that utilize your Telegram Bot Token.\n• Communication and documentation: Ensure that your team is aware of which services are dependent on the key. Maintain documentation for quick reference.\n• Testing: before deactivating the old key, test your services with the new key in a staging environment. This helps in identifying any services that might face issues post rotation.\n• Fallback strategies: Have a fallback or emergency plan in case a critical service fails after the key rotation. This might include temporary measures or quick rollback procedures.\n\nIn summary, the remediation process involves identifying potential misuse, carefully rotating the key, and ensuring minimal disruption to services. Being proactive and having a well-documented process can greatly reduce the risks associated with a compromised API key.\n\nWhat about other secrets?\n\nGitGuardian helps developers keep 350+ types of secrets out of source code. GitGuardian’s automated secrets detection and remediation solution secure every step of the development lifecycle, from code to cloud:\n• On developer workstations with git hooks (pre-commit and pre-push);\n• On code sharing platforms like GitHub, GitLab, and Bitbucket;\n• In CI environments (Circle CI, Travis CI, Jenkins CI, GitHub Actions, and many more);"
    },
    {
        "link": "https://medium.com/@moraneus/building-telegram-bot-with-python-telegram-bot-a-comprehensive-guide-7e33f014dc79",
        "document": "Creating a Telegram bot can significantly extend the functionality of your messaging experience, allowing for everything from automated responses to sophisticated interactions. This comprehensive guide will walk you through the process of building a basic Telegram bot with Python, incorporating user commands, message handling, and custom keyboards. We’ll use the library for its simplicity and powerful features.\n\nIn this article, I will demonstrate a very simple Car Sales Listing Bot that is designed to streamline the process of gathering some necessary information from users wishing to list their cars for sale. By engaging in a structured conversation, the bot collects details such as the car’s type, color, and mileage, and even allows for photo uploads, culminating in a summary that confirms the listing’s details.\n• Ability to upload a photo of the car.\n• Summary of the listing details for confirmation.\n• Create Your Bot: Open Telegram and search for the “BotFather” account. Start a conversation and use the command to create a new bot. Follow the prompts to set up your bot's name and username. BotFather will then give you a token, which is crucial for accessing the Telegram Bot API. Keep this token secure and do not share it.\n\nNow, let’s dive into coding your bot. Please create a new Python file, e.g., and open it in your favorite text editor. Then, follow these steps to write your bot.\n\nStart by importing necessary modules and setting up logging to help with debugging:\n\nStates in a Telegram bot, especially when using a conversation handler, serve as a framework to manage the flow of interaction between the bot and the user. They are essentially markers or checkpoints that define what part of the conversation the user is currently engaged with and determine what the bot should do next based on the user’s input. Here’s a more general overview of the role and functionality of states in managing bot conversations. The purpose and functionality of states in the Telegram bot are:\n• Sequential Flow Management: States allow the bot to manage a sequential flow of conversation. By moving from one state to another, the bot can guide the user through a series of steps, questions, or options in a logical order.\n• Context Awareness: They help the bot maintain context in a conversation. By knowing the current state, the bot understands what information has been provided by the user and what information is still needed, enabling it to respond appropriately.\n• User Input Processing: Based on the current state, the bot can process user inputs differently. For example, an input in the “CAR_TYPE” state would be understood as the user specifying the type of car they’re selling, while the same input in the “CAR_COLOR” state would be interpreted as the color of the car.\n• Conditional Logic Implementation: States allow for the implementation of conditional logic in the conversation. Depending on user responses or choices, the bot can decide to skip certain states, repeat them, or take the user down a different conversational path.\n• Error Handling and Repetition: They facilitate error handling and the repetition of questions if the user provides unexpected or invalid responses. By keeping track of the current state, the bot can re-prompt the user for information correctly.\n• State Persistence: In more complex bots, states can be stored and persisted across sessions, allowing users to pick up the conversation where they left off, even if they temporarily leave the chat or if the bot restarts.\n\nLet’s enumerate the states for our bot to manage the flow:\n\nConversation handlers in Telegram bots, particularly when using libraries like , are powerful tools that manage the flow of conversations based on user inputs and predefined states. They are crucial for developing bots that require a sequence of interactions, such as collecting information, guiding users through menus, or executing commands in a specific order. Here's a closer look at how conversation handlers work and their role in bot development:\n• Managing Conversational States: Conversation handlers keep track of the current state of the dialogue with each user. They determine what the bot should do next based on the user’s input and the current state, allowing for a smooth and logical progression through different stages of interaction.\n• Routing User Inputs: They route user inputs to different callback functions based on the current state. This means that the same input can lead to different outcomes depending on where the user is in the conversation flow.\n• Handling Commands and Text: Conversation handlers can differentiate between commands (like or ) and regular text messages, allowing developers to specify distinct responses or actions for each type of input.\n• Integrating with Keyboards and Buttons: They work seamlessly with custom keyboards and inline buttons, enabling developers to create interactive and user-friendly interfaces within the conversation. Users can select options or navigate through the bot’s features using these UI elements.\n• Fallbacks and Timeouts: Conversation handlers support fallback functions, which can be triggered when the user sends unexpected input or when the conversation needs to be reset. They can also handle timeouts, ending a conversation automatically after a period of inactivity.\n• Entry Points: These are triggers that start the conversation. Commonly, the command is used as an entry point, but you can define multiple entry points for different conversation flows.\n• States: As discussed, states represent different points in the conversation. Each state is associated with one or more callback functions that define the bot’s behavior at that stage. Developers map states to these callbacks, dictating the flow of the conversation.\n• Fallbacks: Fallback functions are defined to handle unexpected situations or to provide a way to exit or reset the conversation. A common fallback is a command that allows users to stop the conversation at any point.\n\nFollowing, is the handler function initiates the conversation (entry point), presenting the user with a selection of car types:\n\nHere you can find the rest of the handlers:\n\n\n\nasync def car_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:\n\n \"\"\"Stores the user's car type.\"\"\"\n\n user = update.message.from_user\n\n context.user_data['car_type'] = update.message.text\n\n cars = {\"Sedan\": \"🚗\", \"SUV\": \"🚙\", \"Sport\": \"🏎️\", \"Electric\": \"⚡\"}\n\n logger.info('Car type of %s: %s', user.first_name, update.message.text)\n\n await update.message.reply_text(\n\n f'<b>You selected {update.message.text} car {cars[update.message.text]}.\n\n'\n\n f'What color your car is?</b>',\n\n parse_mode='HTML',\n\n reply_markup=ReplyKeyboardRemove(),\n\n )\n\n\n\n # Define inline buttons for car color selection\n\n keyboard = [\n\n [InlineKeyboardButton('Red', callback_data='Red')],\n\n [InlineKeyboardButton('Blue', callback_data='Blue')],\n\n [InlineKeyboardButton('Black', callback_data='Black')],\n\n [InlineKeyboardButton('White', callback_data='White')],\n\n ]\n\n reply_markup = InlineKeyboardMarkup(keyboard)\n\n await update.message.reply_text('<b>Please choose:</b>', parse_mode='HTML', reply_markup=reply_markup)\n\n\n\n return CAR_COLOR\n\n\n\n\n\nasync def car_color(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:\n\n \"\"\"Stores the user's car color.\"\"\"\n\n query = update.callback_query\n\n await query.answer()\n\n context.user_data['car_color'] = query.data\n\n await query.edit_message_text(\n\n text=f'<b>You selected {query.data} color.\n\n'\n\n f'Would you like to fill in the mileage for your car?</b>',\n\n parse_mode='HTML'\n\n )\n\n\n\n # Define inline buttons for mileage decision\n\n keyboard = [\n\n [InlineKeyboardButton('Fill', callback_data='Fill')],\n\n [InlineKeyboardButton('Skip', callback_data='Skip')],\n\n ]\n\n reply_markup = InlineKeyboardMarkup(keyboard)\n\n await query.message.reply_text('<b>Choose an option:</b>', parse_mode='HTML', reply_markup=reply_markup)\n\n\n\n return CAR_MILEAGE_DECISION\n\n\n\n\n\nasync def car_mileage_decision(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:\n\n \"\"\"Asks the user to fill in the mileage or skip.\"\"\"\n\n query = update.callback_query\n\n await query.answer()\n\n decision = query.data\n\n\n\n if decision == 'Fill':\n\n await query.edit_message_text(text='<b>Please type in the mileage (e.g., 50000):</b>', parse_mode='HTML')\n\n return CAR_MILEAGE\n\n else:\n\n await query.edit_message_text(text='<b>Mileage step skipped.</b>', parse_mode='HTML')\n\n return await skip_mileage(update, context)\n\n\n\n\n\nasync def car_mileage(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:\n\n \"\"\"Stores the car mileage.\"\"\"\n\n context.user_data['car_mileage'] = update.message.text\n\n await update.message.reply_text('<b>Mileage noted.\n\n'\n\n 'Please upload a photo of your car 📷, or send /skip.</b>',\n\n parse_mode='HTML')\n\n return PHOTO\n\n\n\n\n\nasync def skip_mileage(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:\n\n \"\"\"Skips the mileage input.\"\"\"\n\n context.user_data['car_mileage'] = 'Not provided'\n\n\n\n text = '<b>Please upload a photo of your car 📷, or send /skip.</b>'\n\n\n\n # Determine the correct way to send a reply based on the update type\n\n if update.callback_query:\n\n # If called from a callback query, use the callback_query's message\n\n chat_id = update.callback_query.message.chat_id\n\n await context.bot.send_message(chat_id=chat_id, text=text, parse_mode='HTML')\n\n # Optionally, you might want to acknowledge the callback query\n\n await update.callback_query.answer()\n\n elif update.message:\n\n # If called from a direct message\n\n await update.message.reply_text(text)\n\n else:\n\n # Handle other cases or log an error/warning\n\n logger.warning('skip_mileage was called without a message or callback_query context.')\n\n\n\n return PHOTO\n\n\n\n\n\nasync def photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:\n\n \"\"\"Stores the photo.\"\"\"\n\n photo_file = await update.message.photo[-1].get_file()\n\n # Correctly store the file_id of the uploaded photo for later use\n\n context.user_data['car_photo'] = photo_file.file_id # Preserve this line\n\n\n\n # Inform user and transition to summary\n\n await update.message.reply_text('<b>Photo uploaded successfully.\n\n'\n\n 'Let\\'s summarize your selections.</b>',\n\n parse_mode='HTML'\n\n )\n\n await summary(update, context) # Proceed to summary\n\n\n\n\n\nasync def skip_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:\n\n \"\"\"Skips the photo upload.\"\"\"\n\n await update.message.reply_text('<b>No photo uploaded.\n\n'\n\n 'Let\\'s summarize your selections.</b>',\n\n parse_mode='HTML')\n\n await summary(update, context)\n\n\n\n\n\nasync def summary(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:\n\n \"\"\"Summarizes the user's selections and ends the conversation, including the uploaded image.\"\"\"\n\n selections = context.user_data\n\n # Construct the summary text\n\n summary_text = (f\"<b>Here's what you told me about your car:\n\n</b>\"\n\n f\"<b>Car Type:</b> {selections.get('car_type')}\n\n\"\n\n f\"<b>Color:</b> {selections.get('car_color')}\n\n\"\n\n f\"<b>Mileage:</b> {selections.get('car_mileage')}\n\n\"\n\n f\"<b>Photo:</b> {'Uploaded' if 'car_photo' in selections else 'Not provided'}\")\n\n\n\n chat_id = update.effective_chat.id\n\n\n\n # If a photo was uploaded, send it back with the summary as the caption\n\n if 'car_photo' in selections and selections['car_photo'] != 'Not provided':\n\n await context.bot.send_photo(chat_id=chat_id, photo=selections['car_photo'], caption=summary_text, parse_mode='HTML')\n\n else:\n\n # If no photo was uploaded, just send the summary text\n\n await context.bot.send_message(chat_id=chat_id, text=summary_text, parse_mode='HTML')\n\n\n\n return ConversationHandler.END\n\n\n\n\n\nasync def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:\n\n \"\"\"Cancels and ends the conversation.\"\"\"\n\n await update.message.reply_text('Bye! Hope to talk to you again soon.', reply_markup=ReplyKeyboardRemove())\n\n return ConversationHandler.END\n\nIn the function, set up the and , including entry points, states, and fallbacks. Start the bot with polling to listen for updates:\n\nComplete your script with a call to the function. Run your bot by executing the Python script in your terminal.\n\nHere you can find the whole code:\n\nimport logging\n\nfrom telegram import (ReplyKeyboardMarkup, ReplyKeyboardRemove, Update,\n\n InlineKeyboardButton, InlineKeyboardMarkup)\n\nfrom telegram.ext import (Application, CallbackQueryHandler, CommandHandler,\n\n ContextTypes, ConversationHandler, MessageHandler, filters)\n\n\n\n# Enable logging\n\nlogging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n\n level=logging.INFO)\n\n\n\nlogger = logging.getLogger(__name__)\n\n\n\n# Define states\n\nCAR_TYPE, CAR_COLOR, CAR_MILEAGE_DECISION, CAR_MILEAGE, PHOTO, SUMMARY = range(6)\n\n\n\n\n\nasync def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:\n\n \"\"\"Starts the conversation and asks the user about their preferred car type.\"\"\"\n\n reply_keyboard = [['Sedan', 'SUV', 'Sports', 'Electric']]\n\n\n\n await update.message.reply_text(\n\n '<b>Welcome to the Car Sales Listing Bot!\n\n'\n\n 'Let\\'s get some details about the car you\\'re selling.\n\n'\n\n 'What is your car type?</b>',\n\n parse_mode='HTML',\n\n reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),\n\n )\n\n\n\n return CAR_TYPE\n\n\n\n\n\nasync def car_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:\n\n \"\"\"Stores the user's car type.\"\"\"\n\n user = update.message.from_user\n\n context.user_data['car_type'] = update.message.text\n\n cars = {\"Sedan\": \"🚗\", \"SUV\": \"🚙\", \"Sports\": \"🏎️\", \"Electric\": \"⚡\"}\n\n logger.info('Car type of %s: %s', user.first_name, update.message.text)\n\n await update.message.reply_text(\n\n f'<b>You selected {update.message.text} car {cars[update.message.text]}.\n\n'\n\n f'What color your car is?</b>',\n\n parse_mode='HTML',\n\n reply_markup=ReplyKeyboardRemove(),\n\n )\n\n\n\n # Define inline buttons for car color selection\n\n keyboard = [\n\n [InlineKeyboardButton('Red', callback_data='Red')],\n\n [InlineKeyboardButton('Blue', callback_data='Blue')],\n\n [InlineKeyboardButton('Black', callback_data='Black')],\n\n [InlineKeyboardButton('White', callback_data='White')],\n\n ]\n\n reply_markup = InlineKeyboardMarkup(keyboard)\n\n await update.message.reply_text('<b>Please choose:</b>', parse_mode='HTML', reply_markup=reply_markup)\n\n\n\n return CAR_COLOR\n\n\n\n\n\nasync def car_color(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:\n\n \"\"\"Stores the user's car color.\"\"\"\n\n query = update.callback_query\n\n await query.answer()\n\n context.user_data['car_color'] = query.data\n\n await query.edit_message_text(\n\n text=f'<b>You selected {query.data} color.\n\n'\n\n f'Would you like to fill in the mileage for your car?</b>',\n\n parse_mode='HTML'\n\n )\n\n\n\n # Define inline buttons for mileage decision\n\n keyboard = [\n\n [InlineKeyboardButton('Fill', callback_data='Fill')],\n\n [InlineKeyboardButton('Skip', callback_data='Skip')],\n\n ]\n\n reply_markup = InlineKeyboardMarkup(keyboard)\n\n await query.message.reply_text('<b>Choose an option:</b>', parse_mode='HTML', reply_markup=reply_markup)\n\n\n\n return CAR_MILEAGE_DECISION\n\n\n\n\n\nasync def car_mileage_decision(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:\n\n \"\"\"Asks the user to fill in the mileage or skip.\"\"\"\n\n query = update.callback_query\n\n await query.answer()\n\n decision = query.data\n\n\n\n if decision == 'Fill':\n\n await query.edit_message_text(text='<b>Please type in the mileage (e.g., 50000):</b>', parse_mode='HTML')\n\n return CAR_MILEAGE\n\n else:\n\n await query.edit_message_text(text='<b>Mileage step skipped.</b>', parse_mode='HTML')\n\n return await skip_mileage(update, context)\n\n\n\n\n\nasync def car_mileage(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:\n\n \"\"\"Stores the car mileage.\"\"\"\n\n context.user_data['car_mileage'] = update.message.text\n\n await update.message.reply_text('<b>Mileage noted.\n\n'\n\n 'Please upload a photo of your car 📷, or send /skip.</b>',\n\n parse_mode='HTML')\n\n return PHOTO\n\n\n\n\n\nasync def skip_mileage(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:\n\n \"\"\"Skips the mileage input.\"\"\"\n\n context.user_data['car_mileage'] = 'Not provided'\n\n\n\n text = '<b>Please upload a photo of your car 📷, or send /skip.</b>'\n\n\n\n # Determine the correct way to send a reply based on the update type\n\n if update.callback_query:\n\n # If called from a callback query, use the callback_query's message\n\n chat_id = update.callback_query.message.chat_id\n\n await context.bot.send_message(chat_id=chat_id, text=text, parse_mode='HTML')\n\n # Optionally, you might want to acknowledge the callback query\n\n await update.callback_query.answer()\n\n elif update.message:\n\n # If called from a direct message\n\n await update.message.reply_text(text)\n\n else:\n\n # Handle other cases or log an error/warning\n\n logger.warning('skip_mileage was called without a message or callback_query context.')\n\n\n\n return PHOTO\n\n\n\n\n\nasync def photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:\n\n \"\"\"Stores the photo.\"\"\"\n\n photo_file = await update.message.photo[-1].get_file()\n\n # Correctly store the file_id of the uploaded photo for later use\n\n context.user_data['car_photo'] = photo_file.file_id # Preserve this line\n\n\n\n # Inform user and transition to summary\n\n await update.message.reply_text('<b>Photo uploaded successfully.\n\n'\n\n 'Let\\'s summarize your selections.</b>',\n\n parse_mode='HTML'\n\n )\n\n await summary(update, context) # Proceed to summary\n\n\n\n\n\nasync def skip_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:\n\n \"\"\"Skips the photo upload.\"\"\"\n\n await update.message.reply_text('<b>No photo uploaded.\n\n'\n\n 'Let\\'s summarize your selections.</b>',\n\n parse_mode='HTML')\n\n await summary(update, context)\n\n\n\n\n\nasync def summary(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:\n\n \"\"\"Summarizes the user's selections and ends the conversation, including the uploaded image.\"\"\"\n\n selections = context.user_data\n\n # Construct the summary text\n\n summary_text = (f\"<b>Here's what you told me about your car:\n\n</b>\"\n\n f\"<b>Car Type:</b> {selections.get('car_type')}\n\n\"\n\n f\"<b>Color:</b> {selections.get('car_color')}\n\n\"\n\n f\"<b>Mileage:</b> {selections.get('car_mileage')}\n\n\"\n\n f\"<b>Photo:</b> {'Uploaded' if 'car_photo' in selections else 'Not provided'}\")\n\n\n\n chat_id = update.effective_chat.id\n\n\n\n # If a photo was uploaded, send it back with the summary as the caption\n\n if 'car_photo' in selections and selections['car_photo'] != 'Not provided':\n\n await context.bot.send_photo(chat_id=chat_id, photo=selections['car_photo'], caption=summary_text, parse_mode='HTML')\n\n else:\n\n # If no photo was uploaded, just send the summary text\n\n await context.bot.send_message(chat_id=chat_id, text=summary_text, parse_mode='HTML')\n\n\n\n return ConversationHandler.END\n\n\n\n\n\nasync def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:\n\n \"\"\"Cancels and ends the conversation.\"\"\"\n\n await update.message.reply_text('Bye! Hope to talk to you again soon.', reply_markup=ReplyKeyboardRemove())\n\n return ConversationHandler.END\n\n\n\n\n\ndef main() -> None:\n\n \"\"\"Run the bot.\"\"\"\n\n application = Application.builder().token(\"YOUR TOKEN HERE\").build()\n\n\n\n conv_handler = ConversationHandler(\n\n entry_points=[CommandHandler('start', start)],\n\n states={\n\n CAR_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, car_type)],\n\n CAR_COLOR: [CallbackQueryHandler(car_color)],\n\n CAR_MILEAGE_DECISION: [CallbackQueryHandler(car_mileage_decision)],\n\n CAR_MILEAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, car_mileage)],\n\n PHOTO: [\n\n MessageHandler(filters.PHOTO, photo),\n\n CommandHandler('skip', skip_photo)\n\n ],\n\n SUMMARY: [MessageHandler(filters.ALL, summary)]\n\n },\n\n fallbacks=[CommandHandler('cancel', cancel)],\n\n )\n\n\n\n application.add_handler(conv_handler)\n\n\n\n # Handle the case when a user sends /start but they're not in a conversation\n\n application.add_handler(CommandHandler('start', start))\n\n\n\n application.run_polling()\n\n\n\n\n\nif __name__ == '__main__':\n\n main()\n\nStep 3: Testing and Interacting with Your Bot\n\nAfter running your script, find your bot on Telegram and start interacting with it. You should now be able to use the command to start a conversation, which will guide you through listing a car for sale."
    },
    {
        "link": "https://restack.io/p/ai-for-autonomous-navigation-answer-telegram-bot-best-practices-cat-ai",
        "document": "To set up your Telegram bot, you need to follow a series of steps that ensure your bot is functional and adheres to best practices in Telegram bot development. Start by creating a new bot through the BotFather, which is the official Telegram bot for managing other bots. You can initiate a chat with BotFather by searching for it in the Telegram app.\n• Create a new bot: Use the command and follow the prompts to name your bot and choose a username. Once completed, BotFather will provide you with a unique API token.\n\nAfter obtaining your API token, you can configure your bot using the Telegram Bot API. Here’s a basic example of how to set up a simple bot using Python:\n• Use Webhooks: Instead of polling for updates, set up webhooks to receive messages in real-time. This is more efficient and reduces server load.\n• Error Handling: Implement robust error handling to manage unexpected issues gracefully. This includes logging errors and notifying users when something goes wrong.\n• User Privacy: Always respect user privacy and data protection regulations. Avoid storing sensitive information unless absolutely necessary.\n\nBefore deploying your bot, thoroughly test its functionality. Use the Telegram app to interact with your bot and ensure all commands and features work as intended. Consider using tools like Postman to simulate API requests and responses.\n\nFor more detailed information, refer to the official Telegram Bot API documentation at Telegram Bot API. This resource provides comprehensive guidelines and examples to help you enhance your bot's capabilities."
    }
]