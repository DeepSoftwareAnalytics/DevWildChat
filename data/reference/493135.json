[
    {
        "link": "https://help.mikrotik.com/docs/spaces/ROS/pages/328220/BGP",
        "document": "The Border Gateway Protocol (BGP) allows setting up an inter-domain dynamic routing system that automatically updates routing tables of devices running BGP in case of network topology changes.\n\nBGP is an inter-autonomous system routing protocol based on the distance-vector algorithm. It is used to exchange routing information across the Internet and is the only protocol that is designed to deal with a network of the Internet's size and the only protocol that can deal well with having multiple connections to unrelated routing domains.\n\nBGP is designed to allow for sophisticated administrative routing policies to be implemented. It does not exchange information about network topology but rather reachability information. As such, BGP is better suited to inter-AS environments and special cases like informational feeds. If you just need to enable dynamic routing in your network, consider OSPF instead.\n• RFC 2545 Use of BGP-4 Multiprotocol Extensions for IPv6 Inter-Domain Routing\n• RFC 4761 Virtual Private LAN Service (VPLS) Using BGP for Auto-Discovery and Signalling\n• None NLRI - Network Layer Reachability Information is what is being exchanged between BGP peers and represents how to reach the prefixes.\n• None RR - Route reflector is the router in the BGP network that reflects advertisements to all the neighbors, avoiding the requirement for full BGP mesh.\n• None Route server - is the BGP router that does not participate in traffic forwarding. Routes are typically not even installed in the FIB.\n• None loopback address - a /32 address configured on a dummy bridge interface, that can act as a loopback.\n\nBGP routers exchange reachability information by means of a transport protocol, which in the case of BGP is TCP (port 179). Upon forming a TCP connection these routers exchange OPEN messages to negotiate and confirm supported capabilities.\n\nAfter agreeing on capabilities to use, the session is considered to be established and peers can start to exchange NLRIs via UPDATE messages. This information contains an indication of what sequence of full paths (BGP AS numbers) the route should take in order to reach the destination network (NLRI prefix).\n\nThe peers initially exchange their full routing tables and after the initial exchange, incremental updates are sent as the routing tables change. Thus, BGP does not require a periodic refresh of the entire BGP routing table.\n\nBGP maintains the routing table version number which must be the same between any two given peers for the duration of the connection.\n\nKEEPALIVE messages are sent periodically to ensure that the connection is up and running, if KEEPALIVE messages are not received within the Hold Time interval, the connection will be closed.\n\nTo respond to errors or special conditions, NOTIFICATION messages can be generated and sent to the remote peer, notification message type also indicates whether the connection should be immediately closed.\n\nThere can be two types of BGP connections:\n• iBGP - is an \"internal\" link connecting peers from the same AS\n• eBGP - is an \"external\" link connecting peers belonging to two different AS-es\n\nA particular AS might have multiple BGP speakers and provide transit service to other AS-es. This implies that BGP speakers must maintain a consistent view of routing within the AS. A consistent view of the routes exterior to the AS is provided by having all BGP routers within the AS establish direct iBGP connections with each other (full mesh) or by utilizing a Router Reflector setup.\n\nUsing a set of administrative policies BGP speakers within the AS come to an agreement as to which entry/exit point to use for a particular destination. This information is communicated to the interior routers of the AS using the interior routing protocol (IGP), for example, OSPF, RIP, or static routing. In certain setups, iBGP can take the IGP protocol role as well.\n\nFor certain BGP attributes handling behavior may change depending on what type of connection is set up, for example, the LOCAL-PREF attribute is not advertised to eBGP peers.\n\nRouterOS divides configuration and session monitoring into three menus:\n\nLet's look at a very basic eBGP configuration example assuming, that Router1 IP is 192.168.1.1, AS 65531 and Router2 IP 192.168.1.2, AS 65532:\n\nThe BGP connection menu defines BGP outgoing connections as well as acts as a template matcher for incoming BGP connections.\n\nparameter is used to indicate that this connection will be the eBGP. Also, notice that the connection does not require a remote AS number to be specified, RouterOS can determine a remote AS number dynamically from the first received OPEN message.\n\nThe parameter equivalent to other vendors and older RouterOS \"update-source\" is \" \". In most cases, it can be left unconfigured, and let the router determine the address.\n\nWhen a local address is not specified, BGP will try to guess the local address depending on the current setup:\n• None if the peer is iBGP\n• None if loopback is not available\n• None pick any highest IP address on the router\n• None if the peer is eBGP\n• None\n• None and multihop is not set, then throw an error\n• None\n• None if loopback is not available\n• None pick any highest IP address on the router\n• None\n• None and multihop is not set :\n• None pick the local routers IP address from that connected network\n• None\n• None if loopback is not available\n• None pick any highest IP address on the router\n\nIn addition to connection-specific parameters, template-specific parameters are also directly exposed in this menu, for easier configuration in simple scenarios (when templates are not necessary).\n\nA list of all connection-specific parameters can be seen in the table below:\n\nTo see the actual active sessions with selected template parameters and negotiated capabilities refer to the BGP sessions menu:\n\nThis menu shows read-only cached BGP session information. It will show the current status of the session, flags, last received notification, and negotiated session parameters.\n\nEven if the BGP session is not active anymore, the cache can still be stored for some time. Routes received from a particular session are removed only if the cache expires, this allows mitigating extensive routing table recalculations if the BGP session is flapping.\n\nAlso, in this menu is located a session-specific set of commands.\n\nThe template contains all BGP protocol-related configuration options. It can be used as a template for dynamic peers and to apply a similar configuration to a group of peers. Note that this is not the same as peer groups on Cisco devices, where the group is more than just a common configuration.\n\nList of address families about which this peer will exchange routing information. The remote peer must support (they usually do) BGP capabilities optional parameter to negotiate any other families than IP. 32-bit BGP autonomous system number. Value can be entered in AS-Plain and AS-Dot formats. The parameter is also used to set up the BGP confederation, in the following format: . For example, if your AS is 34 and your confederation AS is 43, then as configuration should be . If set, then all instances of the remote peer's AS number in the BGP AS-PATH attribute are replaced with the local AS number before sending a route update to that peer. Happens before routing filters and prepending. VPLS NLRI length format type. Used for compatibility with Cisco VPLS. [[Read more>>]]. In case this instance is a route reflector: the cluster ID of the router reflector cluster to this instance belongs. This attribute helps to recognize routing updates that come from another route reflector in this cluster and avoid routing information looping. Note that normally there is only one route reflector in a cluster; in this case, 'cluster-id' does not need to be configured and BGP router ID is used instead Whether the template is disabled. Specifies the BGP Hold Time value to use when negotiating with peers. According to the BGP specification, if the router does not receive successive KEEPALIVE and/or UPDATE and/or NOTIFICATION messages within the period specified in the Hold Time field of the OPEN message, then the BGP connection to the peer will be closed. The minimal hold-time value of both peers will be used (note that the special value 0 or 'infinity' is lower than any other value)\n• - never expire the connection and never send keepalive messages. input - a group of parameters associated with BGP input A quick way to filter incoming updates with specific communities. It allows filtering incoming messages directly before they are even parsed and stored in memory, that way significantly reducing memory usage. Regular input filter chain can only reject prefixes which means that it will still eat memory and will be visible in table as \"not active, filtered\". Changes to be applied required session refresh.\n\n A quick way to filter incoming updates with specific extended communities. It allows filtering incoming messages directly before they are even parsed and stored in memory, that way significantly reducing memory usage. Regular input filter chain can only reject prefixes which means that it will still eat memory and will be visible in table as \"not active, filtered\". Changes to be applied required session refresh.\n\n A quick way to filter incoming updates with specific large communities. It allows filtering incoming messages directly before they are even parsed and stored in memory, that way significantly reducing memory usage. Regular input filter chain can only reject prefixes which means that it will still eat memory and will be visible in table as \"not active, filtered\". Changes to be applied required session refresh.\n\n Name of the ipv4/6 address-list. A quick way to filter incoming updates with specific NLRIs. It allows filtering incoming messages directly before they are even parsed and stored in memory, that way significantly reducing memory usage. Regular input filter chain can only reject prefixes which means that it will still eat memory and will be visible in table as \"not active, filtered\". Changes to be applied required session restart.\n\n A quick way to filter incoming updates with specific \"unknown\" attributes. It allows filtering incoming messages directly before they are even parsed and stored in memory, that way significantly reducing memory usage. Regular input filter chain can only reject prefixes which means that it will still eat memory and will be visible in table as \"not active, filtered\". Changes to be applied required session refresh.\n• alone - input and output of each session are processed in its own process, most likely the best option when there are a lot of cores and a lot of peers\n• afi, instance, vrf, remote-as - try to run input/output of new session in process with similar parameters\n• main - run input/output in the main process (could potentially increase performance on single-core even possibly on multi-core devices with a small amount of cores)\n• input - run output in the same process as input (can be set only for output affinity) Indicates how many times to allow your own AS number in AS-PATH, before discarding a prefix. Name of the routing filter chain to be used on input prefixes. This happens after NLRIs are processed. If the chain is not specified, then BGP by default accepts everything. Whether to ignoreAS_PATH attribute in the BGP route selection algorithm Try to limit the amount of received IPv4 routes to the specified number. This number does not represent the exact number of routes going to be installed in the routing table by the peer. BGP session \"clear\" command must be used to reset the flag if the limit is reached. Try to limit the amount of received IPv6 routes to the specified number. This number does not represent the exact number of routes going to be installed in the routing table by the peer. BGP session \"clear\" command must be used to reset the flag if the limit is reached. The interval between keepalive messages, if not set by default keepalive is 1/3 of the . Specifies whether the remote peer is more than one hop away. This option affects outgoing next-hop selection as described in RFC 4271 (for EBGP only, excluding EBGP peers local to the confederation).\n• whether to accept connections from peers that are not in the same network (the remote address of the connection is used for this check);\n• whether to accept incoming routes with NEXT_HOP attribute that is not in the same network as the address used to establish the connection;\n• the target-scope of the routes installed from this peer; routes from multi-hop or IBGP peers resolve their next-hops through IGP routes by default. Name of the BGP template Affects the outgoingNEXT_HOP attribute selection. Note that next-hops set in filters always take precedence. Also note that the next-hop is not changed on route reflection, except when it's set in the filter.\n• - select the next-hop as described in RFC 4271\n• - always use a local address of the interface that is used to connect to the peer as the next-hop;\n• - try to propagate further the next-hop received; i.e. if the route has BGPNEXT_HOP attribute, then use it as the next-hop, otherwise, fall back to the default case output - a group of parameters associated with BGP output\n• alone - input and output of each session is processed in its own process, the most likely best option when there are a lot of cores and a lot of peers\n• afi, instance, vrf, remote-as - try to run input/output of new session in process with similar parameters\n• main - run input/output in the main process (could potentially increase performance on single-core even possibly on multicore devices with small amount of cores)\n• input - run output in the same process as input (can be set only for output affinity) Name of the routing filter chain to be used on the output prefixes. If the chain is not specified, then BGP by default accepts everything. Name of the routing select chain to be used for prefix selection. If not specified, then default selection is used. .keep-sent-attributes (yes | no; Default: no) Store in memory sent prefix attributes, required for \" \" command to work. By default, sent-out prefixes are not stored to preserve the router's memory. An option should be enabled only for debugging purposes when necessary to see currently advertised prefixes. Name of the address list used to send local networks. The network is sent only if a matching IGP route exists in the routing table. The early cut is the mechanism, to guess (based on default RFC behavior) what would happen with the sent NPLRI when received by the remote peer. If the algorithm determines that the NLRI is going to be dropped, a peer will not even try to send it. However such behavior may not be desired in specific scenarios, then then this option should be used to disable the early cut feature. If set, then the BGP AS-PATH attribute is removed before sending out route updates if the attribute contains only private AS numbers. The removal process happens before routing filters are applied and before the local, AS number is prepended to the AS path. BGP Router ID to be used. Use the ID from the /routing/router-id configuration by specifying the reference name, or set the ID directly by specifying IP. Equal router-ids are also used to group peers into one instance. Name of the routing table, to install routes in. Filename to be used to save BGP protocol-specific packet content (Exported PDU) into pcap file. This method allows much simpler peer-specific packet capturing for debugging purposes. Pcap files in this format can also be loaded to create virtual BGP peers to recreate conditions that happened at the time when packet capture was running. List of template names from which to inherit parameters. Useful feature, to easily configure groups with overlapping configuration options. Whether to use theBFD protocol for faster connection state detection. Name of the VRF BGP connections operates on. By default always use the \"main\" routing table.\n\nBGP routers can receive multiple copies of the global routing table from multiple providers.\n\nThere should be some way to compare those multiple BGP routing tables and select the best route to the destination, the solution is the BGP Best Path Selection Algorithm.\n\nThe route is evaluated by the algorithm only if it is valid. In general, the route is considered valid if:\n• NEXT_HOP of the route is valid and reachable\n• AS_PATH received from external peers does not contain the local AS\n• the route is not rejected by routing filters\n\nFor more information read nexthop selection and validation.\n\nThe best path algorithm also compares routes received only by a single BGP instance. Routes installed by different BGP instances are compared by the general algorithm, i.e. route distances are compared and the route with a lower distance is preferred.\n\nIf all the criteria are met, then the following actions take place:\n• The first path received is automatically considered the 'best path'. Any further received paths are compared to the first received to determine if the new path is better.\n• Prefer the path with the highest WEIGHT. \n\nThis parameter is not a part of the BGP standard, it is invented to quickly locally select the best route. A parameter is local to the router (assigned with routing filters in the BGP input) and cannot be advertised. A route without assigned WEIGHT has a default value of 0.\n• Prefer the path with the highest LOCAL_PREF. \n\nThis attribute is used only within an AS. A path without the LOCAL_PREF attribute has a value of 100 by default.\n• Prefer the path with the shortest AS_PATH. (skipped if set to yes).\n\nEach AS_SET counts as 1, regardless of the set size. The AS_CONFED_SEQUENCE and AS_CONFED_SET are not included in the AS_PATH length.\n• None Prefer the path that was locally originated via aggregate or BGP network\n• Prefer the path with the lowest ORIGIN type. Interior Gateway Protocol (IGP) is lower than Exterior Gateway Protocol (EGP), and EGP is lower than INCOMPLETE in other words IGP < EGP < INCOMPLETE\n• Prefer the path with the lowest multi-exit discriminator (MED). The router compares the MED attribute only for paths that have the same neighboring (leftmost) AS unless is enabled. \n\nPaths without explicit MED value are treated with MED of 0.\n• Prefer the route that comes from the BGP router with the lowest router ID. If a route carries the ORIGINATOR_ID attribute, then the ORIGINATOR_ID is used instead of the router ID.\n• Prefer the route with the shortest route reflection cluster list. Routes without a cluster list are considered to have a cluster list of length 0.\n• Prefer the path that comes from the lowest neighbor address\n\nOn BGP output routing filters are executed before BGP itself is modifying attributes, for example, if is set to , then the gateway set in the routing filters will be overridden.\n\nOn BGP input routing filters are applied to the received attributes, which means that, for example, setting the gateway will work no matter what value is set.\n\nRunning More than One Instance\n\nAs we already know for best path selection to work properly, BGP routes must be received from the same instance. But in certain scenarios it is necessary to run multiple BGP instances with their own separate tables. \n\nBGP determines whether sessions belongs to the same instance by comparing configured local router IDs. \n\n\n\nFor example config below will run each peer in its own BGP instance\n\n\n\nWhen is not specified BGP will pick the \"default\" ID from .\n\nThis menu lists all the configured BGP-based VPLS instances. These instances allow the router to advertise VPLS BGP NLRI and indicate that the router belongs to a specific customer VPLS network.\n\nSupport for multiple import/export route target extended communities for BGP-based VPLS (both, RFC 4761 and draft-ietf-l2vpn-signaling-08).\n\nThe name of the bridge where dynamically created VPLS interfaces should be added as ports. none bridge horizon will not be used. Used to assign port VLAN ID (pvid) for dynamically bridged interface. Unique identifier. A parameter must be set for cisco-style VPLS signaling. In most cases this should not be used, any modern software supports RFC 4761 style signaling (see site-id parameter). Parameter is a merge of l2-router-id and RD, for example: 10.155.155.1&6550:123 Defines whether an item is ignored or used. The setting is used to tag BGP NLRI with one or more route targets which on the remote side is used by . The setting is used to determine if BGP NLRI is related to a particular VPLS, by comparing route targets received from BGP NLRI. Read more in the VPLS Control Word article. The parameter is available starting from v5.16. It allows choosing advertised encapsulation in NLRI used only for comparison. It does not affect the functionality of the tunnel. Specifies the value that gets attached to VPLS NLRI so that receiving routers can distinguish advertisements that may otherwise look the same. This implies that a unique route-distinguisher for every VPLS must be used. It is not necessary to use the same route distinguisher for some VPLS on all routers forming that VPLS as distinguisher is not used for determining if some BGP NLRI is related to a particular VPLS (Route Target attribute is used for this), but it is mandatory to have different distinguishers for different VPLSes. Accepts 3 types of formats. Read more>> Unique site identifier. Each site must have a unique site-id. A parameter must be set for RFC 4761 style VPLS signaling. Name of the VRF table.\n\nRoute Distinguisher is a 64-bit integer, which is divided into three parts:\n\nCurrently, there are three format types defined."
    },
    {
        "link": "https://wiki.mikrotik.com/Manual:Routing/BGP",
        "document": "The Border Gateway Protocol (BGP) allows setting up an interdomain dynamic routing system that automatically updates routing tables of devices running BGP in case of network topology changes.\n\n \n\n MikroTik RouterOS supports BGP Version 4, as defined in RFC 4271 \n\n \n\n Standards and Technologies:\n• RFC 2545 Use of BGP-4 Multiprotocol Extensions for IPv6 Inter-Domain Routing\n\n32-bit BGP autonomous system number. Value can be entered in AS-Plain and AS-Dot formats. In case this instance is a route reflector: whether to redistribute routes learned from one routing reflection client to other clients. In case this instance is a route reflector: cluster ID of the router reflector cluster this instance belongs to. This attribute helps to recognize routing updates that comes from another route reflector in this cluster and avoid routing information looping. Note that normally there is only one route reflector in a cluster; this case 'cluster-id' does not need to be configured and BGP router ID is used instead In case of BGP confederations: autonomous system number that identifies the [local] confederation as a whole. In case of BGP confederations: list of AS numbers internal to the [local] confederation. Range of as numbers are also supported. For example 10,20,30-50. Whether to ignore AS_PATH attribute in BGP route selection algorithm Output routing filter chain used by all BGP peers belonging to this instance. Due to known problems in ROS v6, it is not recommended to use instance out-filter, instead use out-filter on peer. If enabled, this BGP instance will redistribute the information about connected routes, i.e., routes to the networks that can be directly reached. If enabled, this BGP instance will redistribute the information about routes learned by OSPF If enabled, this BGP instance will redistribute the information about routes learned by other BGP instances If enabled, this BGP instance will redistribute the information about routes learned by RIP If enabled, the router will redistribute the information about static routes added to its routing database, i.e., routes that have been created using the '/ip route add' command on the router BGP Router ID (for this instance). If set to 0.0.0.0, BGP will use one of router's IP addresses. Name of routing table this BGP instance operates on. Non-default routing-table and list of VRFs cannot be configured for the same instance at the same time. Available starting from v4.3\n\nList of address families about which this peer will exchange routing information. The remote peer must support (they usually do) BGP capabilities optional parameter to negotiate any other families than IP. How many times to allow own AS number in AS-PATH, before discarding a prefix. If set, then all instances of remote peer's AS number in BGP AS PATH attribute are replaced with local AS number before sending route update to that peer. Happens before routing filters and prepending. VPLS NLRI length format type. Used for compatibility with Cisco VPLS. [[Read more>>]]. Specifies the BGP Hold Time value to use when negotiating with peers. According to the BGP specification, if router does not receive successive KEEPALIVE and/or UPDATE and/or NOTIFICATION messages within the period specified in the Hold Time field of the OPEN message, then the BGP connection to the peer will be closed. The minimal hold-time value of both peers will be actually used (note that the special value 0 or 'infinity' is lower than any other values)\n• - never expire the connection and never send keepalive messages. Name of the routing filter chain that is applied to the incoming routing information Name of the instance this peer belongs to. Maximum number of prefixes to accept from a specific peer. When this limit is exceeded, TCP connection between peers is closed. Minimum time interval after which peers can reestablish BGP session.\n• - session is not reestablished until administrator's intervention. Specifies whether the remote peer is more than one hop away. This option affects outgoing nexthop selection as described in RFC 4271 (for EBGP only, excluding EBGP peers local to the confederation).\n• whether to accept connections from peers that are not in the same network (the remote address of the connection is used for this check);\n• whether to accept incoming routes with NEXT_HOP attribute that is not in the same network as the address used to establish the connection;\n• the target-scope of the routes installed from this peer; routes from multi-hop or IBGP peers resolve their nexthops through IGP routes by default. Descriptive name of the peer Affects the outgoing NEXT_HOP attribute selection. Note that nexthops set in filters always takes precedence. Also note that nexthop is not changed on route reflection, expect when it's set in filter.\n• - select the nexthop as described in RFC 4271\n• - always use a local address of the interface that used to connect to the peer as the nexthop;\n• - try to propagate further the nexthop received; i.e. if the route has BGP NEXT_HOP attribute, then use it as the nexthop, otherwise fall back to the default case Name of the routing filter chain that is applied to the outgoing routing information. If instance has also configured out-filter, then instance filters are applied firs and only then peer's filters. If set to yes, then connection attempts to remote peer are not made. The remote peer must initialize connection in this case. Available starting from v4.3 Address of the remote peer. If remote address is IPv6 link-local address then interface must be specified after '%', for example, fe80::21a:4dff:fe5d:8e56%ether1 32-bit AS number of the remote peer. AS number can be specified in AS-Plain and AS-Dot formats. Remote peers port to establish tcp session. If not set, then default 179 port will be used. If set, then BGP AS-PATH attribute is removed before sending out route update if attribute contains only private AS numbers. removal process happens before routing filters are applied and before local AS number is prepended to the AS path. Option is available starting from v4.3. Currently works only with 16-bit ASNs. Specifies whether this peer is route reflection client. Key used to authenticate the connection with TCP MD5 signature as described in RFC 2385. If not specified, authentication is not used. Time To Live, the hop limit for TCP connection. For example, if 'ttl=1' then only single hop neighbors will be able to establish the connection. This property only affects EBGP peers.\n• - system's default TTL value is used If address is specified, this address is used as the source address of the outgoing TCP connection. If interface name is specified, an address belonging to the interface is used as described. This property is ignored, if the value specified is not a valid address of the router or name an interface with active addresses. Do not specify name of interface that is added as a bridge port here! Whether to use BFD protocol for fast state detection.\n\n\n\n Read only information about outgoing routing information currently advertised.\n\nThis information is calculated dynamically after 'print' command is issued. As a result, it may not correspond to the information that at the exact moment has been sent out. Especially if in case of slow connection, routing information prepared for output will spend long time in buffers. 'advertisements print' will show as things should be, not as they are!\n\nBGP network configuration. BGP Networks is a list of IP prefixes to be advertised.\n\nBGP allows the aggregation of specific routes into one route with. This menu ('/routing bgp aggregate') allows to specify which routes you want to aggregate, and what attributes to use for the route created by aggregation.\n• - all routes, that fall within the range of this aggregate; they possibly are suppressed;\n\nRead only information about vpnv4 routing information currently advertised."
    },
    {
        "link": "https://help.mikrotik.com/docs/spaces/ROS/pages/30474256/Moving+from+ROSv6+to+v7+with+examples",
        "document": "By default, all routes are added to the \"main\" routing table as it was before. From a configuration point of view, the biggest differences are routing table limit increase, routing table monitoring differences, and how routes are added to specific routing tables (see next example)\n\nv7 introduces a new menu /routing route, which shows all address family routes as well as all filtered routes with all possible route attributes. and menus are used to add static routes and for simplicity show only basic route attributes.\n\nFor more in-depth information on routing see this article (IP Routing).\n\nAnother new change is that most common route print requests are processed by the routing process which significantly improves the speed compared to v6.\n\nUse of Routing Tables and Policy Routing\n\nThe main difference from v6 is that the routing table must be added to the menu before actually referencing it anywhere in the configuration. And fib parameter should be specified if the routing table is intended to push routes to the FIB.\n\nThe routing rule configuration is the same except for the menu location (instead of , now it is ).\n\nLet's consider a basic example where we want to resolve 8.8.8.8 only in the routing table named myTable to the gateway 172.16.1.1:\n\n\n\nInstead of routing rules, you could use mangle to mark packets with routing-mark, the same way as it was in ROSv6.\n\nOSPFv3 and OSPFv2 are now merged into one single menu . At the time of writing this article, there are no default instances and areas.\n\nTo start both OSPFv2 and OSPF v3 instances, first, you need to create an instance for each and then add an area to the instance.\n\n\n\n\n\nAt this point, you are ready to start OSPF on the network interface. In the case of IPv6, you add either interface on which you want to run OSPF (the same as ROSv6) or the IPv6 network. In the second case, OSPF will automatically detect the interface. Here are some interface configuration examples:\n\nROSv7 uses templates to match the interface against the template and apply configuration from the matched template. OSPF menus and contains read-only entries purely for status monitoring.\n\nAll route distribution control is now done purely with routing filter select, no more redistribution knobs in the instance (Since the v7.1beta7 redistribution knob is back, you still need to use routing filters to set route costs and type if necessary). This gives greater flexibility on what routes from which protocols you want to redistribute.\n\nFor example, let's say you want to redistribute only static IPv4 routes from the 192.168.0.0/16 network range.\n\n\n\n\n\nThere is a complete redesign of the BGP configuration compared to ROSv6. The first biggest difference is that there is no more and configuration menus. Instead, we have , and menus.\n\nThe reason for such a structure is to strictly split parameters that are responsible for connection and parameters that are BGP protocol specific.\n\nLet's start with the Template. It contains all BGP protocol-related configuration options. It can be used as a template for dynamic peers and apply a similar config to a group of peers. Note that this is not the same as peer groups on Cisco devices, where the group is more than just a common configuration.\n\nBy default, there is a default template that requires you to set your own AS.\n\nMost of the parameters are similar to ROSv6 except that some are grouped in the output and input section making the config more readable and easier to understand whether the option is applied on input or output. If you are familiar with CapsMan then the syntax is the same, for example, to specify the output selection chain you set .\n\nYou can even inherit template parameters from another template, for example:\n\nAnother important aspect of the new routing configuration is the global Router ID, which sets router-id and group peers in one instance. RouterOS adds a default ID which picks instance-id from any interface's highest IP. The default BGP template by default is set to use the \"default\" ID.\n\nIf for any reason you need to tweak or add new instances it can be done in menu.\n\n\n\n\n\nVery interesting parameters are , they allow control in which process input and output of active session will be processed:\n• alone - input and output of each session are processed in its own process, most likely the best option when there are a lot of cores and a lot of peers\n• afi, instance, vrf, remote-as - try to run input/output of new session in process with similar parameters\n• main - run input/output in the main process (could potentially increase performance on single-core even possibly on multicore devices with small amount of cores)\n• input - run output in the same process as input (can be set only for output affinity)\n\nNow that we have parameters set for the template we can add BGP connections. A minimal set of parameters are , , and\n\nConnect and listen to parameters specify whether peers will try to connect and listen to a remote address or just connect or just listen. It is possible that in setups where peer uses the multi-hop connection must be configured too (similar as it was with in ROSv6).\n\nPeer role is now a mandatory parameter, for basic setups, you can just use ibgp, ebgp (more information on available roles can be found in the corresponding RFC draft https://datatracker.ietf.org/doc/draft-ietf-idr-bgp-open-policy/?include_text=1), keep in mind that at the moment capabilities, communities, and filtering described in the draft is not implemented.\n\nVery basic iBGP set up to listen on the whole local network for connections:\n\nNow you can monitor the status of all connected and disconnected peers from menu.\n\nOther great debugging information on all routing processes can be monitored from menu\n\nRoute filtering differs a bit from ROSv6. In the BGP template, you can now specify output.filter-chain, output.filter-select, input.filter as well as several input.accept-* options.\n\nNow input.accept-* allows filtering incoming messages directly before they are even parsed and stored in memory, that way significantly reducing memory usage. Regular input filter chain can only reject prefixes which means that it will still eat memory and will be visible in /routing route table as \"not active, filtered\",\n\nA very basic example of a BGP input filter to accept prefixes from 192.168.0.0/16 subnet without modifying any attributes. For other prefixes subtract 1 from the received local pref value and set IGP metric to value from OSPF ext. Additionally, we will accept only specific prefixes from the address list to reduce memory usage\n\nRouterOS v7 by default disables monitoring of the BGP output. This allows to significantly reduce resource usage on setups with large routing tables.\n\nTo be able to see output advertisements several steps should be taken:\n\nLastly, you might notice that the menu is missing and probably wondering how to advertise your own networks. Now networks are added to the firewall address-list and referenced in the BGP configuration.\n\nFollowing ROSv6 network configuration:\n\nwould translate to v7 as:\n\nThere is more configuration to be done when adding just one network but offers simplicity when you have to deal with a large number of networks. v7 even allows specifying for each BGP connection its own set of networks.\n\nStarting from ROSv7.1beta4, the routing filter configuration is changed to a script-like configuration. The rule now can have \"if .. then\" syntax to set parameters or apply actions based on conditions from the \"if\" statement.\n\nMultiple rules without action are stacked in a single rule and executed in order like a firewall, the reason is that the \"set\" parameter order is important and writing one \"set\"s per line, allows for an easier understanding from top to bottom on what actions were applied.\n\n\n\nFor example, match static default route and apply action accept can be written in one config rule:\n\n\n\nFor example, ROSv6 rule \"/routing filter add chain=ospf_in prefix=172.16.0.0/16 prefix-length=24 protocol=static action=accept\" converted to ROSv7 would be:\n\nAnother example, to match prefixes from the 172.16.0.0/16 range with prefix length equal to 24 and set BGP med and prepend values\n\nIt is also possible to match prefix length range like this\n\n\n\nFilter rules now can be used to match or set communities, large communities, and extended communities from the community list:\n\nIf there are a lot of community sets, that need to be applied in multiple rules, then it is possible to define community sets and use them to match or set:\n\nSince route-target is encoded in extended community attribute to change or match RT you need to operate on extended community attribute, for example:\n\nRouterOS implements an RTR client. You connect to the server which will send route validity information. This information then can be used to validate routes in route filters against a group with \"rpki-validate\" and further in filters \"match-rpki\" can be used to match the exact state.\n\nFor more info refer to the RPKI documentation.\n\nTo start RIP, the instance should be configured. There you should select which routes will be redistributed by RIP and if it will redistribute the default route.\n\nThen interface-template should be configured. There is no need to define networks in ROS version 7 as it was in version 6.\n\nNow the basic configuration is completed on one router. RIP neighbor router should be configured in a similar way.\n\nIn ROS v7 the neighbors will appear only when there are routes to be sent or/and to be received.\n\nPrefix lists from ROSv6 are deprecated, now all the filtering must be done by the routing filters."
    },
    {
        "link": "https://help.mikrotik.com/docs/spaces/ROS/pages/28606515/Routing+Protocol+Overview",
        "document": "N/A - Feature not yet available\n• Red - Not working at the moment\n\nAddresses from same subnet to multiple interfaces Show time when route was last updated Does not work correctly with /32 addresses Shows if route is candidate for HW acceleration telnet, ssh, api, www services can be set to listen on specific VRF Dynamically import/export routes from one vrf to another within the same router Convert OSPF config from v6 to v7 after upgrade Convert BGP config from v6 to v7 after upgrade Prerequisites are made, need to add actual BGP Afi Ability to use MPLS EXP-bit in Queues\n\n\n\nThe simulated upstream peer is a CHR router running ROSv6 with a copy of the global IPv4 routing table (585K routes loaded from MRT dump).\n\nDUT establishes a connection to simulated upstream peers, receives routes, and installs them in FIB.\n\nDUT establishes a connection to two simulated upstream peers, receives routes, picks the best route, and installs in FIB. On ROSv7 affinity settings are set to \"alone\".\n\nTwo DUT devices establish eBGP sessions to simulated x86 upstream routers. Both DUTs are interconnected with the iBGP session. Each DUT receives routes from upstream and readvertises routes over iBGP. On ROSv7 affinity, settings are set to \"alone\" and early-cut disabled."
    },
    {
        "link": "https://lacnic.net/innovaportal/file/6687/1/lacnic-levantar-peering-ipv6only_en.pdf",
        "document": ""
    },
    {
        "link": "https://help.mikrotik.com/docs/spaces/ROS/pages/74678285/Route+Selection+and+Filters",
        "document": "The routing filter rule implements script-like syntax. The example below is a quick demonstration of a routing filter that matches prefixes with a prefix length greater than 24 from subnet 192.168.1.0/24 and increments the default distance by 1. If there is no match then subtract the default distance by one.\n\n\n\nFilter rule may consist of multiple matchers and actions:\n\n\n\nThere are two types of properties:\n• only readable - ones that value is only readable and cannot be rewritten, these properties can be used only by matchers\n• readable/writable - ones that value is readable and writeable, used by filter actions, and also can be used by matchers\n\nReadable properties can be matched by other readable properties (for numeric properties only) or constant values using boolean operators.\n\nThe boolean operator is not used if there is only one possible operation.\n\nWith readable flag properties, matcher is used without specified boolean operator and without value\n\nBGP MED attribute is local to the router. It is also used in the output of iBGP peers. BGP MED attribute to be sent to a remote peer. Should be used in the output chain of eBGP peers. Prepend last received remote peers ASN. If the prefix is originated from the router, then this parameter will not do anything on the router's output, because ASN does not exist yet. If used as a matcher in BGP input, it is possible to filter prefixes exceeding a certain number of prepends. For example, if a remote peer prepends its ASN 5 times, but we want to allow max 4 times prepended ASN, then we can use: \" \" This parameter also overrides any prepends received from the remote peer, for example, if the remote peer prepended it's AS 3 times, we can remove this prepend by setting \" 1\" in BGP input Prepend routers ASN, should be used in BGP output. IPv4/IPv6 address or interface name. In the case of BGP output, a gateway can be adjusted in the following setups:\n• is not eBGP and nexthop-choice=force-self is not set. Interface part of the gateway. Should be used if it is required to attach a specific interface for next-hop, like (1.2.3.4%ether1) BGP Communities attribute is defined in RFC 1997. Each community is 32-bit in size. BGP Extended Communities attribute is defined in RFC 4360. RouterOS parses site-of-origin (prefixed with soo:) and route-target (prefixed with rt:) extended communities. For example, \"set bgp-ext-communities rt:1111:2.3.4.5;\". It is possible to set/match RAW extended communities value in 64-bit hex, for example, \"set bgp-ext-community 0x.........;\" BGP Large Communities attribute is defined in RFC 8092. Suitable for use with all ASNs including 32-bit ASNs. Each community is 12-bytes in length and consists of 3 parts: \"global_admin:locap_part_1:local_part_2\".\n\nRouting filters allow to clear BGP communities by using \"delete\" command. Delete command accepts several parameters based on the type of the community type:\n• communities:\n• \" \" - will match and remove well known communities\n• \" \" - will match and remove other communities that are not well known\n• \" \" - regexp pattern to match communities that should be deleted\n• \"<community-list name>\" - deletes communities from specified community-list\n• ext-communities:\n• \" \" - will match and remove other ext communities that are not RT or SSO\n• \" \" - regexp pattern to match ext communities that should be deleted\n• \"<community-ext-list name>\" - deletes communities from specified community-ext-list\n• large-communities:\n• \" \" - regexp pattern to match large communities that should be deleted\n• \"<community-large-list name>\" - deletes large communities from specified community-large-list\n\nIt is possible to specify multiple community types, for example delete all SSOs, other type of ext communities and specific RTs from the community-ext list:\n\nAS Path is the sequence of autonomous system numbers (ASNs), for example AS Path 123 456 789 would indicate, that route originated from AS with the number 789, and to reach the destination, the packet would need to travel through two autonomous systems: 456 and 789. To apply specific routing policies administrator might want to match specific AS numbers or set of numbers in the AS Path (for example, reject prefixes that travel through AS 456), which can be achieved using regular expression (regexp).\n\nThere are two common ways how to operate with AS Path data:\n• convert whole AS path to string and let regexp operate on the string (ROS v6 or Cisco style)\n• let regexp operate on each entry in the AS path as a number (ROS v7, Juniper style)\n\nBasically, the first method is performing the match per character, the second method is performing the match per whole AS number. As you would imagine the latter method is much faster and less resource-intensive than the string matching approach.\n\nThis change would require administrators to implement new Regex strategies. Old Regex patterns from RouterOS v6 cannot be directly copied/pasted as they will result either in syntax errors or unexpected results.\n\nLet us take a very basic AS Path filter rule.\n\nIn ROS v7 this Regex pattern will match ASN 1234 anywhere in the middle of the AS-path, the same pattern in ROS v6 would match any AS path that contains ASN consisting of at least 6 characters and contains a string of \"1234\". Obviously, if we directly copy/paste the Regex pattern from one implementation to another it will lead to unexpected/dangerous results. An equivalent pattern in ROS v6 would look something like this: \"._1234_.\".\n\nLet's take another example from ROS v6, say we have a pattern \"1234[5-9]\" what it does is it matches 12345 to 12349 anywhere in the string, which means that valid matches are AS-path \"12345 3434\", \"11 9123467 22\" and so on. If you enter the same pattern in ROS v7 it will match AS path containing exact ASN 1234 followed by ASN in a range from 5 to 9 (matching AS-paths would be \"1234 7 111\", \"111 1234 5 222\" etc., it will not match \"12345 3434\").\n\nRouterOS now has a built-in regex checking tool to simplify the hard life of the administrators. This tool supports also num-list so now exact regex can be tested against any as-path before applying it to the routing filters.\n\nA list of commonly used numbers can be configured from the menu. These lists of numbers can be used in the filter rules to simplify the filter setup process.\n\nIn a similar manner, you are allowed to define also community, extended community, and large community lists. Community sets can be used for matching, appending, and setting.\n\nFor example match communities from the list and clear the attribute:\n\n\n\nRoute selection rules allow controlling how output routes are selected from available candidate routes. By default, (if no selection rules are set) output always picks the best route.\n\nFor example, if we look at the routing table below, we can see that there are 2 candidate routes and one best route. By default when BGP selects which route to send out, it will pick the active route.\n\nBut there might be cases where you would want preference for other routes, not the active ones, and here come in-play selection rules.\n\nSelection rules in RouterOS are configured from menu.\n\nSelect rules can also call routing filters where routes get selected based on filter rules. For example, to mimic default output selection we can set up the following rule sets:\n\nDynamic list of filter rule chains that can be referenced in BGP/OSPF configuration.\n\nDynamic list of filter select chains that can be referenced in BGP/OSPF configuration."
    },
    {
        "link": "https://forum.mikrotik.com/viewtopic.php?t=193011",
        "document": ""
    },
    {
        "link": "https://help.mikrotik.com/docs/spaces/ROS/pages/30474256/Moving+from+ROSv6+to+v7+with+examples",
        "document": "By default, all routes are added to the \"main\" routing table as it was before. From a configuration point of view, the biggest differences are routing table limit increase, routing table monitoring differences, and how routes are added to specific routing tables (see next example)\n\nv7 introduces a new menu /routing route, which shows all address family routes as well as all filtered routes with all possible route attributes. and menus are used to add static routes and for simplicity show only basic route attributes.\n\nFor more in-depth information on routing see this article (IP Routing).\n\nAnother new change is that most common route print requests are processed by the routing process which significantly improves the speed compared to v6.\n\nUse of Routing Tables and Policy Routing\n\nThe main difference from v6 is that the routing table must be added to the menu before actually referencing it anywhere in the configuration. And fib parameter should be specified if the routing table is intended to push routes to the FIB.\n\nThe routing rule configuration is the same except for the menu location (instead of , now it is ).\n\nLet's consider a basic example where we want to resolve 8.8.8.8 only in the routing table named myTable to the gateway 172.16.1.1:\n\n\n\nInstead of routing rules, you could use mangle to mark packets with routing-mark, the same way as it was in ROSv6.\n\nOSPFv3 and OSPFv2 are now merged into one single menu . At the time of writing this article, there are no default instances and areas.\n\nTo start both OSPFv2 and OSPF v3 instances, first, you need to create an instance for each and then add an area to the instance.\n\n\n\n\n\nAt this point, you are ready to start OSPF on the network interface. In the case of IPv6, you add either interface on which you want to run OSPF (the same as ROSv6) or the IPv6 network. In the second case, OSPF will automatically detect the interface. Here are some interface configuration examples:\n\nROSv7 uses templates to match the interface against the template and apply configuration from the matched template. OSPF menus and contains read-only entries purely for status monitoring.\n\nAll route distribution control is now done purely with routing filter select, no more redistribution knobs in the instance (Since the v7.1beta7 redistribution knob is back, you still need to use routing filters to set route costs and type if necessary). This gives greater flexibility on what routes from which protocols you want to redistribute.\n\nFor example, let's say you want to redistribute only static IPv4 routes from the 192.168.0.0/16 network range.\n\n\n\n\n\nThere is a complete redesign of the BGP configuration compared to ROSv6. The first biggest difference is that there is no more and configuration menus. Instead, we have , and menus.\n\nThe reason for such a structure is to strictly split parameters that are responsible for connection and parameters that are BGP protocol specific.\n\nLet's start with the Template. It contains all BGP protocol-related configuration options. It can be used as a template for dynamic peers and apply a similar config to a group of peers. Note that this is not the same as peer groups on Cisco devices, where the group is more than just a common configuration.\n\nBy default, there is a default template that requires you to set your own AS.\n\nMost of the parameters are similar to ROSv6 except that some are grouped in the output and input section making the config more readable and easier to understand whether the option is applied on input or output. If you are familiar with CapsMan then the syntax is the same, for example, to specify the output selection chain you set .\n\nYou can even inherit template parameters from another template, for example:\n\nAnother important aspect of the new routing configuration is the global Router ID, which sets router-id and group peers in one instance. RouterOS adds a default ID which picks instance-id from any interface's highest IP. The default BGP template by default is set to use the \"default\" ID.\n\nIf for any reason you need to tweak or add new instances it can be done in menu.\n\n\n\n\n\nVery interesting parameters are , they allow control in which process input and output of active session will be processed:\n• alone - input and output of each session are processed in its own process, most likely the best option when there are a lot of cores and a lot of peers\n• afi, instance, vrf, remote-as - try to run input/output of new session in process with similar parameters\n• main - run input/output in the main process (could potentially increase performance on single-core even possibly on multicore devices with small amount of cores)\n• input - run output in the same process as input (can be set only for output affinity)\n\nNow that we have parameters set for the template we can add BGP connections. A minimal set of parameters are , , and\n\nConnect and listen to parameters specify whether peers will try to connect and listen to a remote address or just connect or just listen. It is possible that in setups where peer uses the multi-hop connection must be configured too (similar as it was with in ROSv6).\n\nPeer role is now a mandatory parameter, for basic setups, you can just use ibgp, ebgp (more information on available roles can be found in the corresponding RFC draft https://datatracker.ietf.org/doc/draft-ietf-idr-bgp-open-policy/?include_text=1), keep in mind that at the moment capabilities, communities, and filtering described in the draft is not implemented.\n\nVery basic iBGP set up to listen on the whole local network for connections:\n\nNow you can monitor the status of all connected and disconnected peers from menu.\n\nOther great debugging information on all routing processes can be monitored from menu\n\nRoute filtering differs a bit from ROSv6. In the BGP template, you can now specify output.filter-chain, output.filter-select, input.filter as well as several input.accept-* options.\n\nNow input.accept-* allows filtering incoming messages directly before they are even parsed and stored in memory, that way significantly reducing memory usage. Regular input filter chain can only reject prefixes which means that it will still eat memory and will be visible in /routing route table as \"not active, filtered\",\n\nA very basic example of a BGP input filter to accept prefixes from 192.168.0.0/16 subnet without modifying any attributes. For other prefixes subtract 1 from the received local pref value and set IGP metric to value from OSPF ext. Additionally, we will accept only specific prefixes from the address list to reduce memory usage\n\nRouterOS v7 by default disables monitoring of the BGP output. This allows to significantly reduce resource usage on setups with large routing tables.\n\nTo be able to see output advertisements several steps should be taken:\n\nLastly, you might notice that the menu is missing and probably wondering how to advertise your own networks. Now networks are added to the firewall address-list and referenced in the BGP configuration.\n\nFollowing ROSv6 network configuration:\n\nwould translate to v7 as:\n\nThere is more configuration to be done when adding just one network but offers simplicity when you have to deal with a large number of networks. v7 even allows specifying for each BGP connection its own set of networks.\n\nStarting from ROSv7.1beta4, the routing filter configuration is changed to a script-like configuration. The rule now can have \"if .. then\" syntax to set parameters or apply actions based on conditions from the \"if\" statement.\n\nMultiple rules without action are stacked in a single rule and executed in order like a firewall, the reason is that the \"set\" parameter order is important and writing one \"set\"s per line, allows for an easier understanding from top to bottom on what actions were applied.\n\n\n\nFor example, match static default route and apply action accept can be written in one config rule:\n\n\n\nFor example, ROSv6 rule \"/routing filter add chain=ospf_in prefix=172.16.0.0/16 prefix-length=24 protocol=static action=accept\" converted to ROSv7 would be:\n\nAnother example, to match prefixes from the 172.16.0.0/16 range with prefix length equal to 24 and set BGP med and prepend values\n\nIt is also possible to match prefix length range like this\n\n\n\nFilter rules now can be used to match or set communities, large communities, and extended communities from the community list:\n\nIf there are a lot of community sets, that need to be applied in multiple rules, then it is possible to define community sets and use them to match or set:\n\nSince route-target is encoded in extended community attribute to change or match RT you need to operate on extended community attribute, for example:\n\nRouterOS implements an RTR client. You connect to the server which will send route validity information. This information then can be used to validate routes in route filters against a group with \"rpki-validate\" and further in filters \"match-rpki\" can be used to match the exact state.\n\nFor more info refer to the RPKI documentation.\n\nTo start RIP, the instance should be configured. There you should select which routes will be redistributed by RIP and if it will redistribute the default route.\n\nThen interface-template should be configured. There is no need to define networks in ROS version 7 as it was in version 6.\n\nNow the basic configuration is completed on one router. RIP neighbor router should be configured in a similar way.\n\nIn ROS v7 the neighbors will appear only when there are routes to be sent or/and to be received.\n\nPrefix lists from ROSv6 are deprecated, now all the filtering must be done by the routing filters."
    },
    {
        "link": "https://forum.mikrotik.com/viewtopic.php?t=190391",
        "document": ""
    },
    {
        "link": "https://forum.mikrotik.com/viewtopic.php?t=191469",
        "document": ""
    }
]