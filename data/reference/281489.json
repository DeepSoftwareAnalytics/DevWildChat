[
    {
        "link": "https://wiki.alliedmods.net/Introduction_to_sourcemod_plugins",
        "document": "This guide will give you a basic introduction to writing a SourceMod plugin. If you are not familiar with the SourcePawn language, it is recommended that you at least briefly read the Introduction to SourcePawn article.\n\nFor information on compiling plugins, see Compiling SourceMod Plugins. You can use SPCode, Crimson Editor, PSPad, UltraEdit, Notepad++, TextPad, Pawn Studio, BasicPawn or any other text editor you're comfortable with to write plugins.\n\nOpen your favorite text editor and create a new empty file. When you have an empty file you can just start writing code using the core language, however, you will not be able to use any of SourceMod features because the compiler does not know about them. This is done deliberately so it is possible to use SourcePawn outside of SourceMod. But since we are writing a SourceMod plugin, it is a good idea to enable access to SourceMod features first. This is done using directive. It tells the compiler to \"paste\" the code from another file into yours.\n\nHow does this work? First of all, note that we enclosed file name into angle brackets. Angle brackets tell the compiler to look in the default include directory. By default, it is scripting/include. You can open it right now and see a lot of inc files there. Those are SourceMod include files that describe various functions, tags and other features available for SourceMod plugins. The files are plain-text and you are encouraged to read them. You will notice, however, that there's not much code in there, certainly not enough to implement all the great features of SourceMod, so where are they? They are implemented inside a SourceMod core which is written in C++ and is compiled into binary files which end up in bin directory. So how does your SourcePawn code and SM core link together if the compiler doesn't know about the existence of the latter? SourceMod include files are written specially, so they say that the implementation of functions is somewhere else. The compiler understands that and generates a special code that says that this function call is going outside. When SourceMod loads your plugin, it inspects these bits of code and substitutes it's own internal functions instead. This is called dynamic linking.\n\nNow that we got access to SourceMod features, it is time to set up the information that will be displayed via command. No one likes unnamed plugins. To do that we are going to look inside sourcemod.inc file and see the format that information should be declared. It's always helpful to look inside SM include files to find out information you don't know. There is also an API documentation but it can be outdated and it only has SM core files so if your plugin is going to use any third party extension or another plugin, you will have to study inc files. So, open sourcemod.inc and scroll down a bit until you see this:\n\nIt tells us that we need to create a global public variable which must be of type which is a struct with 5 fields which themselves are strings. It may sound complicated for a beginner but it's easy. Let's go ahead and create one:\n\nThe keyword means that SourceMod will be able to directly access our variable. defines a type of our variable. is, obviously, a name of our variable as required by SourceMod. You see that we initialize it right away. This is the preferable way to fill out plugin info.\n\nAfter that the full code of your plugin should look like this:\n\nWe already include SourceMod features and filled up or plugin info. We now have a perfectly well-formed plugin which can be compiled and loaded by SourceMod. However, there is one problem - it does nothing. You might be tempted to just start writing a code after declaration just to see that it will not compile. SourcePawn, unlike other scripting languages like Lua, does not allow a code to be outside of functions. After reading that, you may probably want to just define some function, name it probably, compile and load a plugin and see that your code never gets called. So how do we make SourceMod call our code? For this exact reason, we have forwards. Forwards are function prototypes declared by one party that can be implemented by another party as a callback. When a first party starts a forward call, all parties that have matching callbacks receive the call. SourceMod declares a plenty of interesting forwards that we can implement. As you can see, forwards are the only way to get our code executed, keep that in mind. So let's implement forward. As you may have guessed, it is called when our plugin starts. To do that, we'll have to look up the declaration of . It is declared inside sourcemod.inc, a file we are already familiar with, let's find it:\n\nEmpty parentheses tell us that no arguments are passed inside this forward, inside documentation tells us that we don't have to return anything, pretty simple forward. So how to write a correct callback for it? Firstly, our callback must have the same name, so it's , secondly, our callback should have the same number of arguments, none in this case, and lastly, SourceMod needs to be able to call our callback so it needs to be . So the implementation looks like this:\n\nNow we can write code inside curly braces and it will be executed when our plugin starts. Let's output to server console. To do that we are going to use function. It is declared inside console.inc, however, we don't need to manually include console.inc because it is included automatically as part of sourcemod.inc.\n\nAs you can see, this is a native function. It is implemented inside SM core. Judging by it's arguments, we can see that it is a format class function. However, we don't need any formatting right now, so let's just pass string as an only argument:\n\nThat's it! The full code of your plugin should look like this:\n\nCompile and load your plugin on your server and see for yourself that the message is displayed in the server console.\n\nPawn requires include files, much like C requires header files. Include files list all of the structures, functions, callbacks, and tags that are available. There are three types of include files:\n• Core - and anything it includes. These are all provided by SourceMod's Core.\n\nInclude files are loaded using the compiler directive.\n\nOur first example will be writing a simple admin command to slap a player. We'll continue to extend this example with more features until we have a final, complete result.\n\nFirst, let's look at what an admin command requires. Admin commands are registered using the RegAdminCmd function. They require a name, a callback function, and default admin flags.\n\nThe callback function is what's invoked every time the command is used. Click here to see its prototype. Example:\n\nNow we've successfully implemented a command -- though it doesn't do anything yet. In fact, it will say \"Unknown command\" if you use it! This is because you're not returning Plugin_Handled in your callback. Since you haven't, SourceMod believes you didn't want the Source Engine to know the command was registered, and it handles it so. The reason SourceMod expects your function to return Plugin_Handled is because of the Action tag you put in your function's prototype. The Action tag specifies that Command_MySlap must return one of four things. See the Action enumeration in the sourcemod API to learn more about these return types and when to use them.\n\nNow the command will report no error, but it still won't do anything. This is because returning \"Plugin_Handled\" in a command callback will prevent the engine from processing the command. The engine will never even see that the command was run. This is what you will want to do if you are registering a completely new command through SourceMod.\n\nLet's decide what the command will look like. Let's have it act like the default command:\n\nTo implement this, we'll need a few steps:\n• Get the input from the console. For this we use GetCmdArg().\n• Find a matching player. For this we use FindTarget().\n• Slap them. For this we use SlapPlayer(), which requires including , an extension bundled with SourceMod.\n• Respond to the admin. For this we use ReplyToCommand().\n\nFor more information on what %N and %d are, see Format Class Functions. Note that you never need to unregister or remove your admin command. When a plugin is unloaded, SourceMod cleans it up for you.\n\nConVars, also known as cvars, are global console variables in the Source engine. They can have integer, float, or string values. ConVar accessing is done through Handles. Since ConVars are global, you do not need to close ConVar Handles (in fact, you cannot).\n\nThe handy feature of ConVars is that they are easy for users to configure. They can be placed in any .cfg file, such as or . To make this easier, SourceMod has an AutoExecConfig() function. This function will automatically build a default .cfg file containing all of your cvars, annotated with comments, for users. It is highly recommended that you call this if you have customizable ConVars.\n\nLet's extend your example from earlier with a new ConVar. Our ConVar will be and will specify the default damage someone is slapped for if no damage is specified.\n\nAlmost all admin commands should log their activity, and some admin commands should show their activity to in-game clients. This can be done via the LogAction() and ShowActivity2() functions. The exact functionality of ShowActivity2() is determined by the cvar.\n\nFor example, let's rewrite the last few lines of our slap command:\n\nTo fully complete our slap demonstration, let's make it support multiple targets. SourceMod's targeting system is quite advanced, so using it may seem complicated at first.\n\nThe function we use is ProcessTargetString(). It takes in input from the console and returns a list of matching clients. It also returns a noun that will identify either a single client or describe a list of clients. The idea is that each client is then processed, but the activity shown to all players is only processed once. This reduces screen spam.\n\nThis method of target processing is used for almost every admin command in SourceMod, and in fact, FindTarget() is just a simplified version.\n\nEvents are informational notification messages passed between objects in the server. Many are also passed from the server to the client. They are defined in .res files under the folder and folders of specific mods. For a basic listing, see Source Game Events.\n\nIt is important to note a few concepts about events:\n• They are almost always informational. That is, blocking will not stop a player from dying. It may block a HUD or console message or something else minor.\n• They almost always use userids instead of client indexes.\n• Just because it is in a resource file does not mean it is ever called, or works the way you expect it to. Mods are notorious for not properly documenting their event functionality.\n\nAn example of finding when a player dies:\n\nSourceMod has a number of builtin callbacks about the state of the server and plugin. Some of these are paired in special ways which can confuse users.\n\nPairing is SourceMod terminology. Examples of it are:\n• OnMapEnd() cannot be called without an OnMapStart(), and if OnMapStart() is called, it cannot be called again without an OnMapEnd().\n• OnClientConnected(N) for a given client N will only be called once until an OnClientDisconnected(N) for the same client N is called (which is guaranteed to happen).\n\nThere is a formal definition of SourceMod's pairing. For two functions X and Y, both with input A, the following conditions hold:\n• If X is invoked with input A, it cannot be invoked again with the same input unless Y is called with input A.\n• If X is invoked with input A, it is guaranteed that Y will, at some point, be called with input A.\n• Y cannot be invoked with any input A unless X was called first with input A.\n• The relationship is described as, \"X is paired with Y,\" and \"Y is paired to X.\"\n\nThese callbacks are listed in the order they are called, in the lifetime of a plugin and the server.\n• - Called once, immediately after the plugin is loaded from the disk. This function can be used to stop a plugin from loading and return a custom error message; return APLRes_Failure and use strcopy on to replace the error string. All CreateNative and RegPluginLibrary calls should be done here.\n• - Called once, after the plugin has been fully initialized and can proceed to load. Any run-time errors in this function will cause the plugin to fail to load. This is paired with OnPluginEnd().\n• - Called once, after all non-late loaded plugins have called OnPluginStart.\n• - Called every time the map loads. If the plugin is loaded late, and the map has already started, this function is called anyway after load, in order to preserve pairing. This function is paired with OnMapEnd().\n• - Called once per map-change after (usually ), , and all plugin config files have finished executing. If a plugin is loaded after this has happened, the callback is called anyway, in order to preserve pairing. This function is paired with OnMapEnd().\n• At this point, most game callbacks can occur, such as events and callbacks involving clients (or other things, like OnGameFrame).\n• - Called when the map is about to end. At this point, all clients are disconnected, but timers are not yet destroyed. This function is paired to OnMapStart().\n• - Called once, immediately before the plugin is unloaded. This function is paired to OnPluginStart().\n\nThese callbacks are listed in no specific order, however, their documentation holds for both fake and real clients.\n• - Called when a player initiates a connection. You can block a player from connecting by returning and setting rejectmsg to an error message.\n• - Called after a player connects. Signifies that the player is connected and will return true. This is paired with for successful connections only.\n• - Called when a player gets a Steam ID. It is important to note that this may never be called. It may occur any time in between and / . Do not rely on it unless you are writing something that needs Steam IDs, and even then you should use .\n• - Signifies that the player is fully in-game and will return true.\n• If you want to check if the player is in-game, you just need to call this; will also be true if this is (but not the other way around - a player may be connected but not in-game yet).\n• - Called after the player is both authorized and in-game. This is the best callback for checking administrative access after connect.\n• - Called when a player's disconnection starts. This is paired to .\n• - Called when a player's disconnection ends. This is paired to .\n\nPlugins, by default, are not reloaded on mapchange unless their timestamp changes. This is a feature so plugin authors have more flexibility with the state of their plugins.\n\nDo I need to call CloseHandle in OnPluginEnd?\n\nNo. SourceMod automatically closes your Handles when your plugin is unloaded, in order to prevent memory errors.\n\nDo I need to #include every individual .inc?\n\nNo. will give you 95% of the .incs. Similarly, includes everything starting with <sdktools>.\n\nThere is no guarantee that events will fire. The event listing is not a specification, it is a list of the events that a game is capable of firing. Whether the game actually fires them is up to Valve or the developer.\n\nDo I need to CloseHandle timers?\n\nNo. In fact, doing so may cause errors. Timers naturally die on their own unless they are infinite timers, in which case you can use KillTimer() or die gracefully by returning in the callback.\n\nAll clients are fully disconnected before the map changes. They are all reconnected after the next map starts.\n\nIf you only want to detect when a client initially connects or leaves your server, hook the player_connect or player_disconnect events respectively.\n\nWhy am I getting \"function prototypes do not match\" errors?\n\nWhen you see this error, you'll most likely find that the issue comes from any callback functions referenced in the line(s) that are causing the error.\n\nWhen you call a function that takes another function as a callback, the callback function must be declared with the correct number of parameter and return types.\n\nFor example, must be called with a callback that has with the exact arguments and return type as specified by the definition.\n\nWhen do I need to manually unhook things?\n\nYou only need to do so when you do not want the callback to fire anymore while the plugin is running. SourceMod itself, as well as extensions such as SDKHooks, unhooks entities and players when they are removed and disconnected, respectively. Everything a plugin hooks is unhooked when it is unloaded.\n\nWhy am I seeing references to ?\n\nWhen is called and returns , the buffer that should have the client's auth id is populated with , both to clear the previous contents of the buffer (thereby preventing accidental reuse of old values) and to inform the developer to stop ignoring the return value of the call.\n\nWill SourceMod support Source 2? Will plugins for existing games continue to work if they are ported?\n\nThe engine already exists; Metamod:Source works to some extent. Further reverse engineering efforts are required to get Metamod:Source in a stable state before work can even start on SourceMod.\n\nNo decision has been made yet on if development will be focused on bringing SourceMod to Source 2, on creating a successor scripting ecosystem much like SourceMod was to AMX Mod X, or on extending VScript functionality.\n\nIt's safe to say that SourceMod will currently not work on the day of release for any games powered by Source 2.\n\nNotes as of the initial limited testing phase for Counter-Strike 2:\n• allows for the creation of listen servers.\n• The VSP plugin / VDF loading capabilities have been removed. Metamod:Source needs to be loaded as a GameDLL.\n\nKeep in mind that this is an ongoing development; nothing is ready for public use yet.\n\nFor further reading, see the \"Scripting\" section at the SourceMod Documentation, as well as Yak's FAQs on Scripting."
    },
    {
        "link": "https://wiki.alliedmods.net/Introduction_to_SourcePawn_1.7",
        "document": "This guide is designed to give you a very basic overview to fundamentals of scripting in SourcePawn. Pawn is a \"scripting\" language used to embed functionality in other programs. That means it is not a standalone language, like C++ or Java, and its details will differ based on the application. SourcePawn is the version of Pawn used in SourceMod.\n\nThis guide does not tell you how to write SourceMod plugins; it is intended as an overview of the syntax and semantics of the language instead. Read the separate article, Introduction to SourceMod Plugins for SourceMod API specifics.\n\nThis section is intended for non-programmers. If you're still confused, you may want to pick up a book on another language, such as PHP, Python, or Java, to get a better idea of what programming is like.\n\nA symbol is a series of letters, numbers, and/or underscores, that uniquely represents something. Symbols are case-sensitive, and usually start with a letter.\n\nThere are a few reserved symbols that have special meaning. For example, , , and are special constructs in the language that will explained later. They cannot be used as symbol names.\n\nThere a few important constructs you should know before you begin to script. The first is a variable. A variable is a symbol, or name, that holds data. For example, the variable \"a\" could hold the number \"2\", \"16\", \"0\", et cetera. Since a variable holds data, it also allocates the memory needed to store that data.\n\nIn addition to a name, variables have a type. A type tells the program how to interpret the data, and how much memory the data will use. Pawn has four types of data that are most commonly used:\n• Integers, using the type. Integer types may store a whole number from -2147483648 to 2147483647.\n• Floats, using the type. Float types may store fractional numbers in a huge range, though they are not as precise as integers.\n• Characters, using the type. Character types store one byte of character information, typically an ASCII character.\n• Booleans, using the type. Booleans store either true or false.\n\nExample of creating variables and assigning values:\n\nThe next important concept is functions. Functions are symbols or names that perform an action. When you invoke, or call them, they carry out a specific sequence of code and then return a result. There are a few types of functions, but every function is activated the same way. Example:\n\nEvery piece of data passed to a function is called a parameter. A function can have any number of parameters (there is a \"reasonable\" limit of 32 in SourceMod). Parameters will be explained further in the article.\n\nNote any text that appears after a \"//\" is considered a \"comment\" and is not actual code. There are two comment styles:\n• - Double slash, everything following on that line is ignored.\n• - Multi-line comment, everything in between the asterisks is ignored. You cannot nest these.\n\nThe next concept is block coding. You can group code into \"blocks\" separated by { and }. This effectively makes one large block of code act as one statement. For example:\n\nBlock coding using braces is used everywhere in programming. Blocks of code can be nested within each other. It is a good idea to adapt a consistent and readable indentation style early on to prevent spaghetti-looking code.\n\nPawn may seem similar to other languages, like C, but it has fundamental differences. It is not important that you immediately understand these differences, but they may be helpful if you're familiar with another language already.\n• Pawn is sort of typed. Before SourceMod 1.7, Pawn did not have types. Older code and older natives will reflect this by using tags and the keyword. As of SourceMod 1.7, we recommend that all code use types. For more information see SourcePawn Transitional Syntax.\n• Pawn is not garbage collected. Pawn, as a language, has no built-in memory allocation, and thus has no garbage. If a function allocates memory, you may be responsible for freeing it.\n• Pawn is not object oriented. Pawn does not have structs or objects. As of SourceMod 1.7, it has limited sugaring for treating some data types as objects, but users cannot create their own objects or classes.\n• Pawn is single-threaded. As of this writing, Pawn is not thread safe.\n• Pawn is compiled. Pawn is compiled to an intermediate, machine-independent code, which is stored in a \".smx\" file. When loading .smx files, SourceMod translates this code to machine code for the platform and CPU it's running on.\n\nEarly language design decisions were made by ITB CompuPhase. It is designed for low-level embedded devices and is thus very small and very fast.\n\nPawn currently supports the following basic variable types:\n\nOther types may exist when defined in include files - for example, enums create new types for named integers, and many types derive from .\n\nStrings, currently, are 0-terminated arrays of s. They're described a little further ahead.\n\nBelow we include some examples of variable declarations, both valid and invalid. Keep in mind that SourcePawn has recently added new syntax, and that's what's documented below. Older code may use older declaration syntax, which is no longer supported.\n\nIf a variable is not assigned upon declaration, it will be set to 0. For example:\n\nVariables can be re-assigned data after they are created. For example:\n\nAn array is a sequence of data in a list. Arrays are useful for storing multiple pieces of data in one variable, or mapping one type of data to another.\n\nAn array is declared using brackets. Some examples of arrays:\n\nBy default, arrays are initialized to 0. You can assign them different default values, however:\n\nYou can leave out the array size if you're going to pre-assign data to it. For example:\n\nThe compiler will automatically deduce that you intended an array of size 5.\n\nWhen array is declared with brackets after its name, Pawn considers that array to have a fixed size. The size of a fixed-size array is always known. Some arrays can be dynamically sized, by putting the brackets before the name. For example,\n\nThis creates an array of size , which could be anything, so the size of the array is not known until the array is allocated.\n\nUsing an array is just like using a normal variable. The only difference is the array must be indexed. Indexing an array means choosing the element which you wish to use.\n\nFor example, here is an example of the above code using indexes:\n\nNote that the index is what's in between the brackets. The index always starts from 0. That is, if an array has N elements, its valid indexes are from 0 to N-1. Accessing the data at these indexes works like a normal variable.\n\nUsing an incorrect index will cause an error. For example:\n\nThis may look correct, but 5 is not a valid index. The highest valid index is 4.\n\nYou can use any expression as an index. For example:\n\nExpressions will be discussed in depth later in the article.\n\nEnums are retyped integers. A new enum can be declared as follows:\n\nTo allow implicit conversions of enums back to integers (that is, so functions expecting a value of type 'int' accepts it as one instead of generating a warning), the enum must either be anonymous (unnamed) or must start with a lowercase character.\n\nStrings are a construct for storing text (or even raw binary data). A string is just an array of characters, except that the final character must be 0 (called the null terminator). Without a null terminator, Pawn would not know where to stop reading the string. All strings are UTF-8 in SourcePawn.\n\nIn general, you must have an idea of how large a string will be before you store it. SourcePawn does not yet have the capability of pre-determining storage space for strings.\n\nStrings are usually declared as arrays. For example:\n\nThese are equivalent to doing:\n\nAlthough strings are rarely initialized in this manner, it is very important to remember the concept of the null terminator, which signals the end of a string. The compiler, and most SourceMod functions will automatically null-terminate for you, so it is mainly important when manipulating strings directly.\n\nNote that a string is enclosed in double-quotes, but a character is enclosed in single quotes.\n\nA character of text can be used in either a String or a cell. For example:\n\nWhat you can't do is mix character arrays with strings. The internal storage is different. For example:\n\nIn programming, concatenation is the operation of joining character strings end-to-end. The benefit of this is to improve the readability of the source code for humans, since the compiler will continue to treat the strings as a single string. String literals can be concatenated with the or operator:\n\nFunctions, as stated before, are isolated blocks of code that perform an action. They can be invoked, or called, with parameters that give specific options.\n\nThere are two types of ways functions are called:\n• direct call - You specifically call a function in your code.\n• callback - The application calls a function in your code, as if it were an event trigger.\n\nThere are six types of functions:\n• public: A callback function that is visible to the application and other scripts.\n• normal: A normal function that only you can call.\n• static: The scope of this function is restricted to the current file, can be used in combination with stock.\n• stock: A normal function provided by an include file. If unused, it won't be compiled.\n• forward: This function is a global event provided by the application. If you implement it, it will be a callback.\n\nAll code in Pawn must exist in functions. This is in contrast to languages like PHP, Perl, and Python which let you write global code. That is because Pawn is a callback-based language: it responds to actions from a parent application, and functions must be written to handle those actions. Although our examples often contain free-floating code, this is purely for demonstration purposes. Free-floating code in our examples implies the code is part of some function.\n\nUnlike variables, functions do not need to be declared before you use them. Functions have two pieces, the signature and the body. The signature contains the name of your function and the parameters it will accept. The body is the contents of its code.\n\nThis is a simple function. The prototype is this line:\n• - Name of the function.\n\nThe body is a block of code. It creates a new variable, called , and assigns it the value of the two parameters added together (more on expressions later). The important thing to notice is the statement, which tells the function to end and return a value to the caller of the function. All functions return something on completion, unless they return a special type called .\n\nA function can accept any type of input, and it can return any non-array type.\n\nYou can, of course, pass variables to functions:\n\nNote that cells are passed by value. That is, their value cannot be changed by the function. For example:\n\nThis code would not change the value of . That is because a copy of the value in is passed instead of itself.\n\nMore examples of functions will be provided throughout the article.\n\nPublic functions are used to implement callbacks. You should not create a public function unless it is specifically implementing a callback. For example, here are two callbacks from :\n\nTo implement and receive these two events, you would write functions as such:\n\nThe public keyword signals to the parent application that it should attach the function to the appropriate forwarded event.\n\nNatives are builtin functions provided by SourceMod. You can call them as if they were a normal function. For example, SourceMod has the following function:\n\nIt can be called like so:\n\nYou can pass arrays or Strings as parameters. It is important to note that these are passed by reference. That is, rather than making a copy of the data, the data is referenced directly. There is a simple way of explaining this more concretely.\n\nThe function sets the given index in the array to a given value. When it is run on our example array, it changes index 2 to from the value 3 to 29. I.e.:\n\nNote two important things here. First, arrays are not copied when they are passed to functions - they are passed by reference, so the view of the array is consistent at all times. Second, the brackets changed position in our function signature. This is because our function accepts an array of any size, and since we don't know the size, we must use the dynamic array syntax.\n\nTo prevent an array from being modified in a function, you can mark it as . This will raise an error on code that attempts to modify it. For example:\n\nIt is a good idea to use in array parameters if you know the array won't be modified; this can prevent coding mistakes.\n\nWhen a function takes an array as a parameter, you can also pass any indexed array element which will be interpreted as a sub-array (slice) that begins from that index. For example, if you want to get the length of a string, you can use the strlen function like so:\n\nAnd if you pass an indexed array element, it will be interpreted as a slice that begins from that index like so:\n\nWith functions that have many parameters with default values, you can call the function with named parameters to assign a value based on its name instead of which position it is in the argument list. For example:\n\nExpressions are exactly the same as they are in mathematics. They are groups of operators/symbols which evaluate to one piece of data. They are often parenthetical (comprised of parenthesis). They contain a strict \"order of operations.\" They can contain variables, functions, numbers, and expressions themselves can be nested inside other expressions, or even passed as parameters.\n\nThe simplest expression is a single number. For example:\n\nAlthough expressions can return any value, they are also said to either return zero or non-zero. In that sense, zero is false, and non-zero is true. For example, -1 is true in Pawn, since it is non-zero. Do not assume negative numbers are false.\n\nThe order of operations for expressions is similar to C. PMDAS: Parenthesis, Multiplication, Division, Addition, Subtraction. Here are some example expressions:\n\nAs noted, expressions can contain variables, or even functions:\n\nNote: String manipulation routines may be found in the string.inc file located in the include subdirectory. They may be browsed through the API Reference as well.\n\nThere are a few extra helpful operators in Pawn. The first set simplifies self-aggregation expressions. For example:\n\nCan be rewritten as:\n\nThis is true of the following operators in Pawn:\n\nCan be simplified as:\n\nAs an advanced note, the ++ or -- can come before the variable (pre-increment, pre-decrement) or after the variable (post-increment, post-decrement). The difference is in how the rest of the expression containing them sees their result.\n• Pre: The variable is incremented before evaluation, and the rest of the expression sees the new value.\n• Post: The variable is incremented after evaluation, and the rest of the expression sees the old value.\n\nIn other words, evaluates to the value of while evaluates to the value of . In both cases is incremented by .\n\nIn (1) is assigned 's old value before it is incremented to , but in (2) is assigned 's int value after it is incremented to .\n\nThere are six operators for comparing two values numerically, and the result is either true (non-zero) or false (zero):\n• - True if a and b have the same value.\n• - True if a and b have different values.\n• - True if a is greater than b\n• - True if a is greater than or equal to b\n• - True if a is less than b\n• - True if a is less than or equal to b\n\nNote that these operators do not work on arrays or strings. That is, you cannot compare either using .\n\nThese truth values can be combined using three boolean operators:\n• - True if both a and b are true. False if a or b (or both) is false.\n• - True if a or b (or both) is true. False if both a and b are false.\n• - True if a is false. False if a is true.\n\nTwo important concepts are left-hand and right-hand values, or l-values and r-values. An l-value is what appears on the left-hand side of a variable assignment, and an r-value is what appears on the right side of a variable assignment.\n\nIn this example is an l-value and is an r-value.\n• Variables are both l-values and r-values.\n\nConditional statements let you only run code if a certain condition is matched.\n\nIf statements test one or more conditions. For example:\n\nThey can be extended to handle more cases as well:\n\nYou can also handle the case of no expression being matched. For example:\n\nSwitch statements are restricted if statements. They test one expression for a series of possible values. For example:\n\nUnlike some other languages, switches are not fall-through. That is, multiple cases will never be run. When a case matches its code is executed, and the switch is then immediately terminated.\n\nLoops allow you to conveniently repeat a block of code while a given condition remains true.\n\nFor loops are loops which have four parts:\n• The initialization statement - run once before the first loop.\n• The condition statement - checks whether the next loop should run, including the first one. The loop terminates when this expression evaluates to false.\n• The iteration statement - run after each loop.\n• The body block - run each time the condition statement evaluates to true.\n\nA simple example is a function to sum an array:\n• - Creates a new variable for the loop, sets it to 0.\n• - Only runs the loop if is less than . This ensures that the loop stops reading at a certain point. In this case, we don't want to read invalid indexes in the array.\n• - Increments by one after each loop. This ensures that the loop doesn't run forever; eventually will become too big and the loop will end.\n\nThus, the function will loop through each valid index of the array, each time adding that value of the array into a sum. For loops are very common for processing arrays like this.\n\nWhile loops are less common than for loops but are actually the simplest possible loop. They have only two parts:\n• The condition statement - checked before each loop. The loop terminates when it evaluates to false.\n• The body block - run each time through the loop.\n\nAs long as the condition expression remains true, the loop will continue. Every for loop can be rewritten as a while loop:\n\nHere is the previous for loop rewritten as a while loop:\n\nThere are also do...while loops which are even less common. These are the same as while loops except the condition check is AFTER each loop, rather than before. This means the loop is always run at least once. For example:\n\nThere are two cases in which you want to selectively control a loop:\n• skipping one iteration of the loop but continuing as normal, or;\n• breaking the loop entirely before it's finished.\n\nLet's say you have a function which takes in an array and searches for a matching number. You want it to stop once the number is found:\n\nCertainly, this function could simply instead, but the example shows how will terminate the loop.\n\nSimilarly, the keyword skips an iteration of a loop. For example, let's say we wanted to sum all even numbers:\n\nScope refers to the visibility of code. That is, code at one level may not be \"visible\" to code at another level. For example:\n\nIn this example, , , and exist at global scope. They can be seen by any function. However, the in is not the same variable as the at the global level. Instead, it is at local scope, and is thus a local variable.\n\nSimilarly, and know nothing about each other's variables.\n\nNot only is the variable private to , but it is re-created each time the function is invoked. Imagine this:\n\nIn the above example, calls itself. Of course, this is infinite recursion (a bad thing), but the idea is that each time the function runs, there is a new copy of . When the function ends, is destroyed, and the value is lost.\n\nThis property can be simplified by saying that a variable's scope is equal to the nesting level it is in. That is, a variable at global scope is visible globally to all functions. A variable at local scope is visible to all code blocks \"beneath\" its nesting level. For example:\n\nThe above code is valid since A's scope extends throughout the function. The following code, however, is not valid:\n\nNotice that is declared in a new code block. That means is only accessible to that code block (and all sub-blocks nested within). As soon as the code block terminates, is no longer valid.\n\nDynamic arrays are arrays which don't have a hardcoded size. For example:\n\nDynamic arrays can have any expression as their size as long as the expression evaluates to a number larger than 0. Like normal arrays, SourcePawn does not know the array size after it is created; you have to save it if you want it later.\n\nDynamic arrays are only valid at the local scope level, since code cannot exist globally.\n\nVariables can be declared in more ways than simply .\n\nThe keyword is available at global and local scope. It has different meanings in each.\n\nA global static variable can only be accessed from within the same file. For example:\n\nIf a plugin includes both of these files, it will not be able to use either or . This is a simple information hiding mechanism, and is similar to declaring member variables as in languages like C++, Java, or C#.\n\nA local static variable is a global variable that is only visible from its local lexical scope. For example:\n\nIn this example, is technically a global variable -- it is initialized once to -1 and is never initialized again. It does not exist on the stack. That means each time runs, the variable and its storage in memory is the same.\n\nTake this example:\n\nIn this example, will be , or , because it persists beyond the frame of the function. Note this may pose problems for recursive functions: if your function may be recursive, then is usually not a good idea unless your code is re-entrant.\n\nThe benefit of a local static variable is that you don't have to clutter your script with global variables. As long as the variable doesn't need to be read by another function, you can squirrel it inside the function and its persistence will be guaranteed.\n\nNote that statics can exist in any local scope:"
    },
    {
        "link": "https://steamcommunity.com/sharedfiles/filedetails?id=722039783",
        "document": ""
    },
    {
        "link": "https://forums.geshl2.com/index.php?topic=4844.0",
        "document": "\n• SourceMod plugins are compiled SourcePawn scripts. I actually created and somewhat actively support Superhero: Source and War3Source, which are both SourceMod plugins. The plugins are loaded with a SourceMM plugin called SourceMod. SourceMod provides native functions as well as an extensive extension interface. To compile a SourcePawn script:\n\nWindows: Open command prompt, press Start->Run and type \"cmd\" without quotes and press enter.\n\ncd C:/path/to/scripting/directory/\n\nspcomp.exe spscript.sp\n\n\n\nLinux: Open terminal.\n\ncd /home/user/path/to/scripting/directory/\n\n./spcomp spscript.sp\n\n\n\nPlease reference the following sites for more information: http://sourcemod.com/ - http://sourcemm.net/\n\nPlease be logical before asking questions about these instructions.\n• SourcePawn is a typeless 32-bit language. There are only a small amount of datatypes, which can be an advantage. Get to know Handle, Cell, String (BYTE), Float, and bool. Please watch for a future tutorial for a further explanation on these types and their abilities.\n• The Source Engine can be manipulated in various ways. For example, events are fired throughout gameplay. For example, if you were designing a plugin for logging statistics, you could listen on the event player_death to track the circumstances of the death. This will be touched on more in the event tutorial that I will one day right.\n• How do I write a SourcePawn script? What programs do I need?\n\nYou don't need anything other than an operational Source Dedicated Server and a text editor. For advanced development, you can reference an extension tutorial to expand SourceMod with additional C++ interfaces. I probably won't write a tutorial on this any time soon unless there is a significant amount of interest. ( This can be expressed via the positive karma I will receive in comment form )\n\nAs noted before, you need a text editor. You may experience issues if you aren't working with the UTF-8 format. I wouldn't worry much, I, however, personally recommend either Notepad++ or PSPad. I am not certain that either of these will run in Linux, but give it a shot.\n• Lets do this! What's next?\n\nWhat would a rookie tutorial be without a \"Hello World!\"?\n\nOpen up the text editor of your choice and create the following file called helloworld.sp in the scripting directory:\n\nHey guys,This is my first of tutorials, just an explanation of the language syntax followed by a \"Hello World!\"Was that so hard? See the beginning of this tutorial and compile this bad boy. Drag the output file (helloworld.smx) into the plugins directory, located inside the sourcemod directory.Restart your server and you will see this wonderful tutorial make you smilePlease ask questions or make comments within this thread. If your issue is SourceMod specific, but unrelated to this thread, feel free to create a thread in the correct sub-forum. Personal Messages are typically ignored unless they are just that... \"personal.\"I'm done. Enjoy."
    },
    {
        "link": "https://steamcommunity.com/sharedfiles/filedetails?l=french&id=722039783",
        "document": ""
    },
    {
        "link": "https://sm.alliedmods.net/new-api/console/RegConsoleCmd",
        "document": "Creates a console command, or hooks an already existing one.\n\nConsole commands are case sensitive. However, if the command already exists in the game, a client may enter the command in any case. SourceMod corrects for this automatically, and you should only hook the \"real\" version of the command.\n\nName of the command to hook or create. A function to use as a callback for when the command is invoked. Optional description to use for command creation. Optional flags to use for command creation.\n\nCommand name is the same as an existing convar."
    },
    {
        "link": "https://sm.alliedmods.net/new-api/console/RegServerCmd",
        "document": "Creates a server-only console command, or hooks an already existing one.\n\nName of the command to hook or create. A function to use as a callback for when the command is invoked. Optional description to use for command creation. Optional flags to use for command creation.\n\nCommand name is the same as an existing convar."
    },
    {
        "link": "http://sourcemod.net/new-api/entitylump",
        "document": "An ordered list of key / value pairs for a map entity. If the entry in the EntityLump is removed, the handle will error on all operations. (The handle will remain valid on the scripting side, and will still need to be deleted.)"
    },
    {
        "link": "http://sourcemod.net/new-api/admin/GetAdmGroupImmuneCount",
        "document": "This include file has no types, functions, or constants."
    },
    {
        "link": "http://sourcemod.net/new-api/console/CommandIterator/Flags",
        "document": "This include file has no types, functions, or constants."
    },
    {
        "link": "https://forums.alliedmods.net/showthread.php?t=121075",
        "document": "Are you going to block this plugin in the future?\n\n http://www.3rdera.com/\n\n \n\n It is a lua scripting addon for clients... At the moment it comes bundled with a bunnyhopping script, although the addon allows people to write malicious scripts which can be used to crash a server.\n\n \n\n I have blocked it myself using KAC, but are there plans for you to block it in the official release? Hey,Are you going to block this plugin in the future?It is a lua scripting addon for clients... At the moment it comes bundled with a bunnyhopping script, although the addon allows people to write malicious scripts which can be used to crash a server.I have blocked it myself using KAC, but are there plans for you to block it in the official release? __________________"
    },
    {
        "link": "https://unknowncheats.me/forum/counterstrike-global-offensive/164842-implementing-lua-counter-strike.html",
        "document": "I used luabridge for my project, it's fast and dependency free(apart from lua). That's what we'll be using for this tutorial. You could use luabind or luawrapper. You could write your own. You can get luabridge here\n\n You will also need lua. There are different versions of lua, but obviously the recommended would be the most current version of lua. At the time of writing this tutorial that's lua 5.3.2. You can get the binaries here.\n\n \n\n \n\n Now we could dive straight in to writing our lua code, but it's always best to write a wrapper for low-level stuff like this. It also looks nicer too.\n\n Here's the header for the file.\n\n We use a mutex to make sure the lua state isn't being accessed from multiple threads at the same time, as this will cause issues.\n\n \n\n #include \"LuaEngine.h\" #include <iostream> LuaEngine *g_pLuaEngine = new LuaEngine(); lua_State* LuaEngine::L() { return m_L; } void LuaEngine::report_errors(int state) { if (state) { std::cerr << \"ERR: \" << lua_tostring(m_L, -1) << std::endl; lua_pop(m_L, 1); //remove error } } void LuaEngine::ExecuteFile(const char* file) { if (!file || !m_L) return; int state = luaL_dofile(m_L, file); report_errors(state); } void LuaEngine::ExecuteString(const char* expression) { if (!expression || !m_L) { std::cerr << \"ERR: null expression passed to script engine!\" << std::endl; return; } int state = luaL_dostring(m_L, expression); report_errors(state); } There's the cpp file. Everything is rather straight forward, and if there are a few things you dont understand then every single version of lua is documented on \n\n \n\n \n\n Alright here we go. I don't have the exact source for this due to my implementation being polymorphic and more advanced.\n\n \n\n Alright so lets inline these classes for ease of use.\n\n If you don't understand that piece of code, please read here.\n\n \n\n Well thats the basis of our class, now lets wrap our sdk.\n\n Ok cool, easy enough.\n\n \n\n \n\n Lets make this nicer and create a function to register everything to the lua state.\n\n The reason we wrap it in a namespace is because luabridge doesn't like public variables.\n\n \n\n Alright this is just declaring the class and giving it a name for the code (although we don't allow the user create an instance)\n\n \n\n Okidokie, lets implement the functions we have.\n\n Alright, all done! But how do we get it? For that we have to make\n\n \n\n \n\n New class time!\n\n easy enough, we just have to make an instance of it the first time.\n\n \n\n Okidokie, lets quickly implement this.\n\n cool! we're almost done. But we need an instance of ExportedInterfaces to be able to call GetEngine, right? Simple enough. Somewhere in your code, make an instance of it. (I did it at the top of main.cpp because i'm a basic [censored])\n\n We implement this a little bit differently, but simpler.\n\n At the start/end/middle of your namespace we put this in (make sure its not in a class)\n\n But whats the false? well lets have a look at the function.\n\n Aha! We don't want the user to be able to set the Interfaces instance to something else, so we make it read-only.\n\n \n\n \n\n And thats it! Now we can do stuff like this.\n\n local Engine = Game.Interfaces:GetEngine() Engine:ExecuteCmd(\"clear;echo we did it!\") More to come soon, for now; sleep .\n\n \n\n shoutout to my [censored] john lua I have nothing to do tonight and i'm curious to see people do this themselves. Some people might call this redundant or slow but it's unique. I'm going to presume you already have an SDK setup.I used luabridge for my project, it's fast and dependency free(apart from lua). That's what we'll be using for this tutorial. You could use luabind or luawrapper. You could write your own. You can get luabridgeYou will also need lua. There are different versions of lua, but obviously the recommended would be the most current version of lua. At the time of writing this tutorial that's lua 5.3.2. You can get the binariesNow we could dive straight in to writing our lua code, but it's always best to write a wrapper for low-level stuff like this. It also looks nicer too.Here's the header for the file.We use a mutex to make sure the lua state isn't being accessed from multiple threads at the same time, as this will cause issues.There's the cpp file. Everything is rather straight forward, and if there are a few things you dont understand then every single version of lua is documented on their website Alright here we go. I don't have the exact source for this due to my implementation being polymorphic and more advanced.Alright so lets inline these classes for ease of use.If you don't understand that piece of code, please readWell thats the basis of our class, now lets wrap our sdk.Ok cool, easy enough.Lets make this nicer and create a function to register everything to the lua state.The reason we wrap it in a namespace is because luabridge doesn't like public variables.Alright this is just declaring the class and giving it a name for the code (although we don't allow the user create an instance)Okidokie, lets implement the functions we have.Alright, all done! But how do we get it? For that we have to makeNew class time!easy enough, we just have to make an instance of it the first time.Okidokie, lets quickly implement this.cool! we're almost done. But we need an instance of ExportedInterfaces to be able to call GetEngine, right? Simple enough. Somewhere in your code, make an instance of it. (I did it at the top of main.cpp because i'm a basic [censored])We implement this a little bit differently, but simpler.At the start/end/middle of your namespace we put this in (make sure its not in a class)But whats the false? well lets have a look at the function.Aha! We don't want the user to be able to set the Interfaces instance to something else, so we make it read-only.And thats it! Now we can do stuff like this.More to come soon, for now; sleepshoutout to my [censored] john lua \n\n Either you're lying or you need adult supervision when using a computer. Try reading the code you're copy pasting first. snorflake: are you pasting from blackbone?\n\n MarkHC: pasting is a strong word Last edited by Snorflake; 20th December 2015 at .\n\nThis just reinforces how ignorant you are; can you think for yourself or do you need to copy paste other peoples thoughts too? Explain please the uses you see. \n\n \n\n \n\n \n\n All of the back-end has to be written in c++. Every little thing. Why spend time to do this sort of thing. \n\n \n\n \n\n I'm not trying to say oh this is bad. All I say is this is impractical. If you get all mad a me when I say that, I don't really care, we both have different opinions. What I said above was talking about \"practical uses\", as I think (hint! opinion) that this system is impractical, I have every right to say that I do not think there are any practical uses.\n\n \n\n \n\n It's a novelty it's something different, that is cool.\n\n \n\n \n\n tldr; I have my own opinions, you have your own. It's that simple.\n\n \n\n \n\n \n\n Explain please the uses you see.All of the back-end has to be written in c++. Every little thing. Why spend time to do this sort of thing.I'm not trying to say oh this is bad. All I say is this is impractical. If you get all mad a me when I say that, I don't really care, we both have different opinions. What I said above was talking about \"practical uses\", as I think (hint! opinion) that this system is impractical, I have every right to say that I do not think there are any practical uses.It's a novelty it's something different, that is cool.tldr; I have my own opinions, you have your own. It's that simple. Last edited by maxkunes; 20th December 2015 at .\n\n\n\n \n\n \n\n \n\n All of the back-end has to be written in c++. Every little thing. Why spend time to do this sort of thing. \n\n \n\n \n\n I'm not trying to say oh this is bad. All I say is this is impractical. If you get all mad a me when I say that, I don't really care, we both have different opinions. What I said above was talking about \"practical uses\", as I think (hint! opinion) that this system is impractical, I have every right to say that I do not think there are any practical uses.\n\n \n\n \n\n It's a novelty it's something different, that is cool.\n\n \n\n \n\n tldr; I have my own opinions, you have your own. It's that simple.\n\n \n\n \n\n \n\n https://i.gyazo.com/8b697e70899b4d7a...acb6d4b9d8.png Explain please the uses you see.All of the back-end has to be written in c++. Every little thing. Why spend time to do this sort of thing.I'm not trying to say oh this is bad. All I say is this is impractical. If you get all mad a me when I say that, I don't really care, we both have different opinions. What I said above was talking about \"practical uses\", as I think (hint! opinion) that this system is impractical, I have every right to say that I do not think there are any practical uses.It's a novelty it's something different, that is cool.tldr; I have my own opinions, you have your own. It's that simple. Your title really reflects your mental status. Your title really reflects your mental status. \n\n Either you're lying or you need adult supervision when using a computer. Try reading the code you're copy pasting first. snorflake: are you pasting from blackbone?\n\n MarkHC: pasting is a strong word\n\n\n\n \n\n \n\n \n\n All of the back-end has to be written in c++. Every little thing. Why spend time to do this sort of thing. \n\n \n\n \n\n I'm not trying to say oh this is bad. All I say is this is impractical. If you get all mad a me when I say that, I don't really care, we both have different opinions. What I said above was talking about \"practical uses\", as I think (hint! opinion) that this system is impractical, I have every right to say that I do not think there are any practical uses.\n\n \n\n \n\n It's a novelty it's something different, that is cool.\n\n \n\n \n\n tldr; I have my own opinions, you have your own. It's that simple.\n\n \n\n \n\n \n\n https://i.gyazo.com/8b697e70899b4d7a...acb6d4b9d8.png Explain please the uses you see.All of the back-end has to be written in c++. Every little thing. Why spend time to do this sort of thing.I'm not trying to say oh this is bad. All I say is this is impractical. If you get all mad a me when I say that, I don't really care, we both have different opinions. What I said above was talking about \"practical uses\", as I think (hint! opinion) that this system is impractical, I have every right to say that I do not think there are any practical uses.It's a novelty it's something different, that is cool.tldr; I have my own opinions, you have your own. It's that simple. lol i'm not mad, here's a short list of a practical uses\n• you can quickly test new features and prototype other things with minmal effort - see if things work\n• lua is also fast and you don't have to recompile\n• you can have changes reflected live ingame with hotloading and it's exponentially easier to implement hotloading in lua then it is in an unmanaged scope\n• it's used as a scripting language in games because it's just so much better than writing everything natively\n• it's extremely easy to use and embed into whatever project\n• you're not going to crash your game with bad lua\n• you can build lua at runtime and then execute it, metaprogramming is simple and functional\n• uses negligable more memory than the native equivalent lol i'm not mad, here's a short list of a practical uses\n• you can quickly test new features and prototype other things with minmal effort - see if things work\n• lua is also fast and you don't have to recompile\n• you can have changes reflected live ingame with hotloading and it's exponentially easier to implement hotloading in lua then it is in an unmanaged scope\n• it's used as a scripting language in games because it's just so much better than writing everything natively\n• it's extremely easy to use and embed into whatever project\n• you're not going to crash your game with bad lua\n• you can build lua at runtime and then execute it, metaprogramming is simple and functional\n• uses negligable more memory than the native equivalent lol i'm not mad, here's a short list of a practical uses \n\n Thank you for actually doing this instead of being like @ .\n\n \n\n These three are essentially the same thing (correct me if I'm wrong) :\n\n [*]you can quickly test new features and prototype other things with minmal effort - see if things work[*]lua is also fast and you don't have to recompile[*]you can have changes reflected live ingame with hotloading and it's exponentially easier to implement hotloading in lua then it is in an unmanaged scope The rest have their points but It does not really sway my opinion.\n\n I do agree with lua as scripting engines, as the end user. But when it comes to you having to make the engine yourself (the middle man stuff) that's when I do not totally agree with it. Seems like more work that it is worth.\n\n \n\n Again what I say is totally and 100% my own opinion. Thank you for actually doing this instead of being like @ Snorflake who just outright calls me stupidThese three are essentially the same thing (correct me if I'm wrong) :The rest have their points but It does not really sway my opinion.I do agree with lua as scripting engines, as the end user. But when it comes to you having to make the engine yourself (the middle man stuff) that's when I do not totally agree with it. Seems like more work that it is worth.Again what I say is totally and 100% my own opinion.\n\n.\n\n \n\n These three are essentially the same thing (correct me if I'm wrong) :\n\n [*]you can quickly test new features and prototype other things with minmal effort - see if things work[*]lua is also fast and you don't have to recompile[*]you can have changes reflected live ingame with hotloading and it's exponentially easier to implement hotloading in lua then it is in an unmanaged scope The rest have their points but It does not really sway my opinion.\n\n I do agree with lua as scripting engines, as the end user. But when it comes to you having to make the engine yourself (the middle man stuff) that's when I do not totally agree with it. Seems like more work that it is worth.\n\n \n\n Again what I say is totally and 100% my own opinion. Thank you for actually doing this instead of being like @ Snorflake who just outright calls me stupidThese three are essentially the same thing (correct me if I'm wrong) :The rest have their points but It does not really sway my opinion.I do agree with lua as scripting engines, as the end user. But when it comes to you having to make the engine yourself (the middle man stuff) that's when I do not totally agree with it. Seems like more work that it is worth.Again what I say is totally and 100% my own opinion. they're not the same. The first is literally saying that it's much easier to write code in lua and see if you're getting things right, such as mathematical operations and whatnot.\n\n The second is saying that there's nothing to compile, it just runs without having to do anything.\n\n Lastly, the third is saying that you can have files reloaded when you save them in your editor so you can just alt-tab back to the application and the changes are already there and it's as simple as listening for directory changes and then just having the state reload the file. Much more effort to do the same natively.\n\n \n\n you also get the advantages of lua's tables and lua's simple coding syntax which can save you lots of time and headaches I thought I wrote about how easy it was to manipulate tables in lua, must have missed that. they're not the same. The first is literally saying that it's much easier to write code in lua and see if you're getting things right, such as mathematical operations and whatnot.The second is saying that there's nothing to compile, it just runs without having to do anything.Lastly, the third is saying that you can have files reloaded when you save them in your editor so you can just alt-tab back to the application and the changes are already there and it's as simple as listening for directory changes and then just having the state reload the file. Much more effort to do the same natively.I thought I wrote about how easy it was to manipulate tables in lua, must have missed that."
    },
    {
        "link": "https://forums.alliedmods.net/showthread.php?t=270228",
        "document": "08-17-2015 , 10:33 Re: Wanting to learn sourcepawn, new to programming. 08-17-2015 , 10:33 Re: Wanting to learn sourcepawn, new to programming. \n\n \n\n Sourcepawn is very much C-like, so if you know C you should be able to get right in quickly.\n\n Extensions are written in C++, though I heard somewhere C can also be used. That's a very advanced subject however.\n\n \n\n Furthermore, you should also learn about things like forwards, events, hooking, entity properties (netprops), etc. There aren't that many tutorials about it but you can look at plugins other people wrote and see how they did stuff (I swear 80% of my sourcepawn knowledge came from other people's code). has everything you need to know.Sourcepawn is very much C-like, so if you know C you should be able to get right in quickly.Extensions are written in C++, though I heard somewhere C can also be used. That's a very advanced subject however.Furthermore, you should also learn about things like forwards, events, hooking, entity properties (netprops), etc. There aren't that many tutorials about it but you can look at plugins other people wrote and see how they did stuff (I swear 80% of my sourcepawn knowledge came from other people's code). https://wiki.alliedmods.net/Introduc...SourcePawn_1.7 has everything you need to know.Sourcepawn is very much C-like, so if you know C you should be able to get right in quickly.Extensions are written in C++, though I heard somewhere C can also be used. That's a very advanced subject however.Furthermore, you should also learn about things like forwards, events, hooking, entity properties (netprops), etc. There aren't that many tutorials about it but you can look at plugins other people wrote and see how they did stuff (I swear 80% of my sourcepawn knowledge came from other people's code). Last edited by Potato Uno; 08-17-2015 at ."
    },
    {
        "link": "https://otland.net/threads/my-scripts-for-counter-strike-source-lua.105376",
        "document": "It's .lua idiot.\n\n Btw, my steam hacker isnt done yet. + not sharing.\n\nyou call someone idiot without knowing what you can do by lua? gosh.. you're just sinking and sinking in my eyes.The idiot is the one that claims to be a hacker without knowing what it means."
    },
    {
        "link": "https://reddit.com/r/counterstrike/comments/13bb9n/css_dessiatos_css_optimization_guide",
        "document": "THIS IS NOT MY GUIDE! This is my friend Dessiato's guide to optimize your CSS playing experience. If you have any questions, you can add me on Steam.\n\nHere we go, I will be explaining the basics, and not going into too much depth, just the need to knows.\n\nThis guide is a basic overview of the things you need to take a look at before you begin developing ambitions of going competitive, or even getting that AWP shot in surf. Ensuring these steps are followed can set you on track to blame your aim, not your engine.\n\n1.1: Mouse acceleration and why you should kill it.\n\n1.2: Interpolation and rates; The power of cl_cmdrate and cl_update rate.\n\n1.6: Autoexec, the thing that makes all of this useful.\n\nFirst off, go to your windows mouse driver by searching \"Mouse\". We will be ensuring the first step to make your mouse pixel precise, regardless of DPI.\n\nFirst things first, on the pointer options pointer speed setting, make sure it is set at 6/11, this is the standard setting, and any other options will give you pixel skipping or pixel loss. I really don't feel the need to go into any further detail, just do it.\n\nSee that option enhance pointer precision? UNCHECK THAT SON OF A BITCH, that is the source of problems for MANY aspiring PC gamers, that one BITCH of an option. I will explain why later.\n\nFor third party mouse drivers, if you have the processing power, install them, and run them at the highest DPI possible, this will give you the most fluid and precise aim possible, and if it is a bit fast, I will have a formula to help you determine your new sensitivity.\n\n1.1: Mouse acceleration and why you should kill it:\n\nMouse acceleration is more or less, a form of prediction that the mouse drivers use to detect the \"urgency\" of a mouse stroke, you can move your mouse the same distance, but the speed you scroll determines the speed of the mouse movement as well. Killing the entire purpose of training your muscle memory to sensitivity.\n\nAll you need to know, is kill this son of a bitch feature now.\n\nTo ensure that mouse acceleration is shut down completely from your system, install this registry fix.\n\nIf you want it removed, which you shouldn't, go here.\n\nNow for even FURTHER precaution, we need to disable this in CSS as well, so in steam, find CSS, right click it and select Properties then Launch options.\n\nThis will ENSURE that mouse acceleration will be gone from your game, unchecking the option in the mouse options tab helps too.\n\n1.2: Interpolation and rates; The power of cl_cmdrate and cl_update rate:\n\nThis is a very finicky subject, but imagine this, a server updating at a value of 30000, but you only having a value of 20000, in theory it's almost like getting a fraction of the information, and it sort of is.\n\nInterpolation uses the data we recieve to calculate hitboxes, and bullet registry. If you have a decent internet connection, we can overlook the guesswork and give you some nice values that work for almost everyone.\n\nTo make sure our interpolation is working to it's maximum potential, let's configure CSS to recognize that we are playing on a 66tic server by entering the following into console:\n\ncl_cmdrate \"67\" cl_updaterate \"67\" //67 is used for the ticrate occasionally goes slightly over 66\n\nThis will make the game run MUCH more smoothly, but if you are getting any lag or backfiring from this, your connection is not good enough, although this is unlikely.\n\nNow for rates, I reccomend a high rate in the 80000's, but some cannot support this, 850000 is as high as you will ever need, adjust it accordingly if you get choke or loss, which is observable with net_graph 3 in console\n\nLower rates in the 30000's are perfectly fine, for that is generally the maximum a server allows.\n\nIf you don't have the hardware, don't go over 35000 really, it will give you lag, and nobody wants that.\n\nNow that we can use interpolation to it's maximum effect and we are running the game with minimal update lag, lets configure the interpolation!\n\nThere are 2 generally accepted setups, the first prioritizes on registering and seeing the enemy first, while the other prioritizes hitbox accuracy. PROS: You see them first, get the jump CONS: Hitboxes on strafing enemies are a tiny bit off, get used to it. *This assumes a lerp of 15.2ms (Don't worry too much about this, if it is the same, you are in business.) cl_interp_ratio 1 cl_interp 0.0152 cl_smooth 0\n\nPROS: Smooth clean hitboxes CONS: Enemies might get the jump on you *This assumes a lerp of 30.0ms (Don't worry too much about this, if it is the same, you are in business.) cl_interp_ratio 1 cl_interp 0.03 cl_smooth 0\n\n*BOTH OF THESE SETUPS ASSUME YOU HAVE YOUR GAME CONFIGURED TO 66TIC.\n\nIf you need practice aiming, try the second one, when you are confident, get those crazy corner shots like Dreamz and I do with the first settings.\n\nFirst thing is first, sensitivity is preference, but don't give me that bullshit that an insanely high sensitivity is going to give you any good.\n\nThis is a general guideline:\n• Low sensitivity (8+ inches to turn 180) can get away with any dpi higher than 200 without affecting the game. Maximum tracking speed is more important for these players.\n• Medium sensitivity (4-8” to turn 180) will probably want at least a 400dpi mouse but 800dpi could benefit some who play at higher than 1024x768.\n• High sensitivity (under 4”) will want at least 1000dpi and even beyond with faster settings. These players see the most benefit from more dpi.\n\nNow you see this DPI setting, and you are wondering, \"WHAT IS MY DPI!!! I can't see it!!\" Just Google your mouse and check it yourself.\n\nIn short, DPI is dots per inch, or pixels per inch scrolled with your mouse, pretty straightforward.\n\nI personally think that from the middle of my mouse pad to the edge should be a perfect 180, and on my 3500dpi Razer Deathadder, I have my sensitivity set to 0.46.\n\nThis is once again preference, but I have heard from many high end players, you want it small, and bright. You want to train your eyes where you are aiming, while giving a reliable crosshair at long distances.\n\nThis setup will give you a small, light green crosshair, try it out.\n\nIf you don't like it, reboot your game, but this crosshair setup actually improved my accuracy to boast a 65% headshot ratio in Mantis Pub!\n\nI am going to say this now, turn Vsync off, you should be able to run this game above 60 fps, if not, keep it on I guess... (Shame on you)\n\nThe reason being for this, is that you want the game to be capable of running above 67fps to fully take advantage of the 66 tic server, and provide you with the maximum possible usable frames.\n\nKeep it bright, you don't want to have to squint, so use the maximum brightness setting ingame, not with your monitor.\n\nSome settings you might want to consider reducing to increase frame rate:\n\nAntialaising and AT filtering, these are two useless settings, that only honestly improve any quality past high defininition resolutions, tone these asses to 1x.\n\nReverting your engine to Direct X 8.1, it will get rid of a crap tonne of useless tessellation features, increasing frame rates. To do this, type the following in launch options like you did to disable mouse acceleration in CSS.\n\nAnd a really wierd thing you can do, is DUST OUT YOUR DAMN COMPUTER!!! Doing this gave me around a 15-20 fps increase, get rid of dem dust bunnies.\n\n1.6: Autoexec, the thing that makes all of this useful:\n\nNow you might have been thinking, \"I have to remember all of this crap?!?!\"\n\nWell, you don't. First thing is first, create a notepad file, and name it Autoexec.cfg.\n\nMake sure to save the file type as a CFG FILE!!! Not a text document!!!\n\nWhat this file does is makes certain console commands permanent. give it a shot!\n\nNow choose which code you have applied to your setup, and put it in as you please:\n\nThis is my setup as an example: sensitivity \"0.46\" m_filter \"0\" m_customaccel \"0\" cl_interp_ratio 1 cl_interp 0.0152 cl_smooth 0 rate 100000 cl_crosshairscale 2000 cl_crosshairusealpha 6 cl_crosshaircolor 6 mat_monitorgamma 1.6 net_graph 1 cl_cmdrate \"67\" cl_updaterate \"67\" cl_smooth 0\n\nPlace this in Program files -> Steam -> Steamapps -> Your username -> Counter Strike Source -> Cstrike -> Cfg\n\nOnce it is in and saved restart CSS, and enjoy not having to use console."
    }
]