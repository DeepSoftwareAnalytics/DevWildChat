[
    {
        "link": "https://create.roblox.com/docs/scripting/events/remote",
        "document": "Roblox experiences are multiplayer by default, so all experiences inherently communicate between the server and the players' connected clients. In the simplest case, as players move their characters, certain Humanoid properties, such as states, are communicated to the server, which passes this information to other connected clients.\n\nRemote events and callbacks let you communicate across the client-server boundary:\n• None enable one-way communication for data that changes continuously or isn't critical to game state. These events trade ordering and reliability for improved network performance. enable one-way communication for data that changes continuously or isn't critical to game state. These events trade ordering and reliability for improved network performance.\n• None enable two-way communication (sending a request and yielding until a response is received from the recipient). enable two-way communication (sending a request and yielding until a response is received from the recipient).\n\nUnlike bindable events, which have more limited utility, the use cases for remote events and functions are too numerous to list:\n• None - Basic gameplay, such as a player reaching the end of a level, can require a remote event. A client script notifies the server, and server scripts reset the player's position.\n• None - If a player tries to drink a potion, do they actually have that potion? To ensure fairness, the server has to be the source of truth for an experience. A client script can use a remote event to notify the server that the player is drinking a potion, and then server scripts can decide whether the player actually has that potion and whether to confer any benefits.\n• None - As the game state changes, server scripts can use remote events to notify clients of changes to scores, objectives, etc.\n• None - For an example implementation that uses remote functions, see - For an example implementation that uses remote functions, see\n\nThe following tables serve as a quick reference for how to use RemoteEvents and RemoteFunctions to communicate between the client and server.\n\nA RemoteEvent object facilitates asynchronous, one-way communication across the client-server boundary without yielding for a response.\n\nTo create a new RemoteEvent via the Explorer window in Studio:\n• None . In order to ensure both server and client access, it must be in a place where both sides can see it, such as , although in some cases it's appropriate to store it in or inside a . Hover over the container into which you want to insert the. In order to ensure both server and client access, it must be in a place where both sides can see it, such as, although in some cases it's appropriate to store it inor inside a\n• None Click the button that appears to the right of the container's name and insert a instance.\n• None Rename the instance to describe its purpose.\n\nOnce you've created a RemoteEvent, it can facilitate one-way communication from client to server, from server to client, or from the server to all clients.\n\nYou can use a LocalScript to trigger an event on the server by calling the FireServer() method on a RemoteEvent. If you pass arguments to FireServer(), they pass to the event handler on the server with certain limitations. Note that the first parameter of the event handler on the server is always the Player object of the client that calls it, and additional parameters follow.\n\nThe following Script connects an event handler to OnServerEvent that creates a new Part on the server. The accompanying LocalScript then calls FireServer() on the RemoteEvent instance with the desired Color and Position for the part.\n\nYou can use a Script to trigger an event on a client by calling the FireClient() method on a RemoteEvent. The first argument for FireClient() is the Player object of the client that you want to respond to the event, and additional arguments pass to the client with certain limitations. Note that the event handler doesn't need to include the Player object as its first argument because you can determine the player on the client with Players.LocalPlayer.\n\nThe following LocalScript connects an event handler to the OnClientEvent event. The accompanying Script then listens for incoming players to the server and calls FireClient() for each with arbitrary data.\n\nYou can use a Script to trigger an event on all clients by calling the FireAllClients() method on a RemoteEvent. Unlike FireClient(), the FireAllClients() method doesn't require a Player object because it fires the RemoteEvent to all clients.\n\nThe following LocalScript connects an event handler to the OnClientEvent event which outputs a remaining countdown time. The accompanying Script then calls FireAllClients() in a loop every second to fire the RemoteEvent for all clients.\n\nA RemoteFunction object facilitates synchronous, two-way communication across the client-server boundary. The sender of a remote function will yield until it receives a response from the recipient.\n\nTo create a new RemoteFunction via the Explorer window in Studio:\n• None . In order to ensure both server and client access, it must be in a place where both sides can see it, such as , although in some cases it's appropriate to store it in or inside a . Hover over the container into which you want to insert the. In order to ensure both server and client access, it must be in a place where both sides can see it, such as, although in some cases it's appropriate to store it inor inside a\n• None Click the button that appears to the right of the container's name and insert a instance.\n• None Rename the instance to describe its purpose.\n\nOnce you've created a RemoteFunction, it can facilitate two-way communication between client and server or between server and client.\n\nYou can use a LocalScript to call a function on the server by calling the InvokeServer() method on a RemoteFunction. Unlike a remote event, the LocalScript that invokes the RemoteFunction yields until the callback returns. Arguments that you pass to InvokeServer() pass to the OnServerInvoke callback of the RemoteFunction with certain limitations. Note that if you define multiple callbacks to the same RemoteFunction, only the last definition executes.\n\nThe following Script defines the callback function via OnServerInvoke and returns the requested Part through its return value. The accompanying LocalScript then calls InvokeServer() with extra arguments defining the requested part color and position.\n\nYou can use a Script to call a function on the client by calling the InvokeClient() method on a RemoteFunction, but it has serious risks as follows:\n• None If the client throws an error, the server throws the error too.\n• None throws an error. If the client disconnects while it's being invoked,throws an error.\n• None If the client doesn't return a value, the server yields forever.\n\nFor actions that don't require two-way communications, such as updating a GUI, use a RemoteEvent and communicate from server to client.\n\nWhen you fire a RemoteEvent or invoke a RemoteFunction, it forwards any arguments that you pass with the event or to the callback function. Any type of Roblox object such as an Enum, Instance, or others can be passed, as well as Luau types such as numbers, strings, and booleans, although you should carefully explore the following limitations.\n\nIf any indices of a passed table are non-string types such as an Instance, userdata, or function, Roblox automatically converts those indices to strings.\n\nFunctions included as arguments for a RemoteEvent or RemoteFunction will not be replicated across the client-server boundary, making it impossible to pass functions remotely. Instead, the resulting argument on the receiving side will be nil.\n\nIf you pass a table of data, do not pass a mixed table of numeric and string keys. Instead, pass a table that consists entirely of key-value pairs (dictionary) or entirely of numeric indices.\n\nTables passed as arguments to remote events/callbacks are copied, meaning they will not be exactly equivalent to those provided when firing the event or invoking the callback. Nor will tables returned to the invoker be exactly equivalent to those provided. You can demonstrate this by running the following script on a RemoteFunction and observing how the table identities differ.\n\nIf a table has a metatable, all of the metatable information is lost in the transfer. In the following code sample, the NumWheels property is part of the Car metatable. When the server receives the following table, the truck table has the Name property but not the NumWheels property.\n\nIf a RemoteEvent or RemoteFunction passes a value that's only visible to the sender, Roblox doesn't replicate it across the client-server boundary and passes nil instead of the value. For example, if a Script passes a descendant of ServerStorage, the client listening to the event will receive a nil value because that object isn't replicable for the client.\n\nSimilarly, if you create a part in a LocalScript and try to pass it to a Script, the server will see nil because the part isn't replicable for the server."
    },
    {
        "link": "https://create.roblox.com/docs/scripting/events",
        "document": "Events are occurrences within your experience that you can listen for and respond to. Many Roblox services and objects have built-in events that automatically fire in response to specific actions or changes.\n\nFor example, a player's Character touching a BasePart automatically fires a Touched event. Each time a player joins your experience, the Players.PlayerAdded event fires.\n\nDue to the sheer number of events and client-server architecture, Roblox scripting is often referred to as event-driven. This approach is different from many other game engines, which emphasize running code on a frame-by-frame basis.\n\nYou don't have to listen for events or take any action in response to them, but the events are firing and available nevertheless. When you do want to respond to an event, you connect a function to it.\n\nYou connect a function to an event using Connect() to execute code each time the event fires. Most events pass arguments to their connected functions. For example, the BasePart.Touched event passes the object that touched the part (such as a left hand or car wheel), and the Players.PlayerAdded event passes the Player that joined your experience.\n\nThe following code sample demonstrates how to connect a function named onPartTouched() to the Touched event of a part:\n\nYou can also connect anonymous functions to events when you want to use variables in the parent scope and don't need to use the function elsewhere. For example, this code sample avoids the awkward intermediary function from the similar sample in Services:\n\nThe Connect() method returns an RBXScriptConnection object. If you connect a function to an event, but don't want to call the function the next time an event fires (such as after some condition is met), disconnect it by calling Disconnect() on the RBXScriptConnection object.\n\nThe following code sample shows how to connect and disconnect a function from the Part.Touched event:\n\nIf you only want to connect a function to an event once—that is, only run the function the first time the event fires—use the Once() method as a more convenient alternative to connecting and disconnecting the function.\n\nIf you want a script to yield until a specific event fires, use the Wait() method. This method returns the event's arguments, which you can assign to variables for later use:\n• None Bindable events let you communicate between scripts on the same side of the client-server boundary.\n• None Remote events let you communicate across the client-server boundary."
    },
    {
        "link": "https://create.roblox.com/docs/scripting",
        "document": "Scripts are plain text files that let you add custom, dynamic behavior to your experiences. You can use scripts to trigger in-game events, respond to player input, save player data, create leaderboards, spawn enemies, control NPC behavior, and much, much more.\n\nThis section is for creators with some coding experience who want to know the specifics of scripting in Roblox. If you've never written code before and want an introduction to programming, see Coding fundamentals, which covers concepts like variables, functions, conditionals, loops, and arrays. For a more guided, step-by-step approach, see the Basic gameplay tutorial.\n\nRoblox scripts use the Luau programming language, which is derived from Lua 5.1.\n• None Compared to Lua 5.1, Luau adds performance enhancements and many useful features, including an optional typing system, string interpolation, and generalized iteration for tables.\n• None All valid Lua 5.1 code is valid Luau code, but the opposite is not true.\n\nMost books and online resources for Lua are still broadly applicable to Luau. For a detailed summary of differences, see Compatibility in the Luau documentation. For language syntax, see the Luau reference.\n\nLuau is gradually typed, so you don't need to specify a type when you create a variable. You can use type() to check object type:\n\nLuau has global and local scopes, but it's almost always better to declare variables and functions locally with the local keyword:\n\nLua uses nil to represent nonexistence or nothingness, which evaluates as false in conditional statements:\n\nAs you might have noticed, -- starts a one-line comment. --[[]] creates a block comment:\n\nTables are the generic term for arrays and dictionaries. Arrays are one-based rather than zero-based, so the first item is [1]. You declare arrays and dictionaries with a single set of curly braces:\n\nYou can iterate over tables using for loops with the ipairs() function for arrays and the pairs() function for dictionaries, but Luau also lets you omit these functions for cleaner syntax:\n• None In Roblox Studio, hover over ServerScriptService in the Explorer window and click +.\n• None Right-click the script and rename it to HelloScript.\n• None Double-click the script to open it in the Script Editor.\n• None Add the following code to the file:\n• None Ensure that the Output window is open.\n\nA big part of adapting to a new development environment is configuring it to meet your needs and understanding the tools at your disposal:\n• None The section of lets you adjust quality of life features like font, colors, indentation, autocomplete, brackets, and tooltips. You might also want to enable dark mode in the section.\n• None or and clicking on a function or variable takes you to its declaration in your codebase (or its online documentation). Using Holdingorand clicking on a function or variable takes you to its declaration in your codebase (or its online documentation). Using can help you navigate larger projects.\n• None menu to enable and . The window is the most basic tool for understanding the behavior of your scripts. Use themenu to enableand\n• None The window shows a summary of errors and warnings, but you might find its utility limited; the Script Editor already highlights these issues as you type.\n• None or . Use and . Logging capabilities are minimal, with no concept of log levels likeor. Useand\n\nFor more information about configuring Studio for scripting, see Script Editor. For information on using your favorite text editor and version control system, see External tools.\n• None In Roblox Studio, add a script to ReplicatedStorage in the Explorer window and rename it to OhNo.\n• None Add the following code to the file:\n• None Note how the output is no different than when you ran your first script.\n\nTo understand why the script didn't run, see Script Types and Locations."
    },
    {
        "link": "https://ptgmedia.pearsoncmg.com/images/9780136829423/samplepages/9780136829423_Sample.pdf",
        "document": ""
    },
    {
        "link": "https://devforum.roblox.com/t/lua-scripting-starter-guide/394618",
        "document": "Picking up programming and learning it for the first time works just like any other hobby–art, music, sports, photography, etc.–although, it may be difficult to know where to start as a beginner, especially if you’ve never had experience with it up until now. When I was younger, it was very difficult for me to get into programming as tutorials for a younger, completely unexperienced audience was rare. Although there was plenty of content available, I still had a hard time understanding the material or just got lost in the sea of information that was given to me. There are still plenty of places on either Youtube or other parts of the internet where beginners can learn, but I’ve specifically compiled this list so that you have a neat, simple page you can refer to if you feel lost, or don’t know where to go after searching for tutorials. Becoming an experienced programmer from scratch will not be easy, it will take a lot of effort and more importantly time to become an expert. I say this because many developers I’ve personally known, whether rookies or professionals, tend to bail halfway through their project or goal. Do not lose hope when things don’t come as quickly as you expected, patience is crucial. What sets poor and excellent students isn’t necessarily intelligence, but their willingness to put in work and always seeking new ways to become better at what they do. Think of this article as a legend for Lua, similar to the page in a large book that highlight specific terms or character in the book that the reader might not recognize. When you finish this guide, your ability to code things will be limited, but you should have a much easier time understanding tutorials on more advanced topics. Ultimately, I hope this article can help you get started, or at least guide you through your journey through programming.\n\nP.S. I’ve tried to make this tutorial as kid-friendly as possible, if it is still difficult to read or understand, please DM me on any platform and I’ll try my best fix it. Specific examples are appreciated.\n\nChances are, if you’ve ever played a game, you’ve wondered how it was made. How does a sword go from unequipped to swinging in just a matter of seconds? Why? How is this app able to stream the movies I select? How is the website we’re currently on even able to operate?\n\nComputer programming is an essential part of modern life, as it determines and allows for many technologies we use on a daily basis to operate. However, all code is not written in the same way, rather, there are distinct languages, or ways of writing code. In fact, you might already be familiar with the names of various programming languages, including but not limited to JavaScript or Python.\n\nIn this tutorial, we’ll be covering Lua, the official language of Roblox which can be used to create a variety of different games for users to play.\n\nIn this tutorial, we’ll be using a specific format to write, input, and receive the result of our script. To use a format identical to mine, click on View in the upper left side of your screen, then make sure you have selected and have the following settings:\n\nYour screen should look something similar to this\n\nScripts can be inserted almost everywhere, for the sake of keeping this tutorial short, head over to Model on the top panel and browse to the far left and click on Script, which will generate a script that we can use for our tutorial.\n\nPrint is a built-in function which prints out whatever statement you decide to give it. This can be either number or strings, which we’ll cover in this section. You’ll notice that once you launch a script, there is already a print function automatically typed out for you. This code always comes with your scripts, so we’ll erase it to continue with the next step.\n\nType out print in all lowercase letters. If print is typed incorrectly or typed with any capitals, the program will not recognize the command and will not run it. Add a pair of parenthesis after, studio should automatically add the second one. Make sure there is no space in between print and the parenthesis otherwise Lua will not be able to read it.\n\nNext, we need to add a string in-between the parenthesis so that we don’t just print empty space. A string is any character or words inside of a pair of quotes, such as “Hello World!” For our tutorial, we’ll be adding the string “YellowNoobs!” for the program to print.\n\nYou may replace \"YellowNoobs\" with any other text you wish as long as it is in-between the parenthesis (\"\"), the end result should look something like this,\n\nIf you want to include quotation marks in your quote, you can also use a pair of single quotes (’’) and put the double parenthesis, or vice-versa for single quotes to be printed.\n\nPrint also works for numbers and equations, which it’ll automatically simplify in the output. But before we write out our problem, we need to find the symbols needed to get the right answer.\n\nArithmetic operators are basically all the tools we use in programming to indicate a relationship between numbers. This sounds complicated, but it’s just what we call the symbols we use to add, subtract, multiply, and divide numbers.\n\nHere are the Arithmetic Operators used in Lua:\n\nNow, we’ll write our equation in-between the parenthesis, and paste it into the command bar once we’re ready to get the output. Feel free to mess around with the operators to get the hang of it.\n\nIf we put our code into the command bar we’ll get 81 instead. This is the answer to the equation, and Lua does this because it’s a simplified version, or answer to the problem we originally printed. An important thing to keep in mind is that Lua completes the math using the Order of Operations, meaning it starts with exponents, then division and multiplication, and finally addition and subtraction.\n\nTake this piece of code for example,\n\nWhile you may be tempted to say the answer is 12, since you add 1 + 5, getting 6 and multiplying it by 2, this is wrong. Instead, you multiply 5 and 2 first, then add 1, getting 11. This is a rule of both math and programming, so practice the concept until you can avoid printing the wrong number.\n\nIn order to combine two or more separate values together, you can use concatenation in the print function. We’ll still use the same format, but will add two periods or dots after each string. Do not place this inside of the string, otherwise Lua will interpret it as part of the string and produce an error.\n\nIf we paste this into the command bar, the output will show us a full statement as if it was a single string, meaning the concatenation was successful.\n\nNow that you’ve learned how to make a script, you’ll learn what variables are and how to make your own. Variables are considered vital because they save a lot of time and save you time and make your scripts simpler to review. They can be booleans, numbers, strings, or practically anything you want to assign a name to.\n\nIf you’re struggling to understand the concept of a variable, you can compare it to a nickname you might give someone who’s name may be too tedious to pronounce. Although it is not their birthname, calling them by their nickname will still get their attention as they’ve been given and called by it before.\n\nBelow, I’ve given an example of a variable. The term “variable” will be used interchangeably with the string “YellowNoobs!” whenever we use it in the script. If we put the variable inside of the print command, it will print the text assigned to it. Since the variable is identical to the string we assigned it, we do not need any quotes around the variable name. If you put quotes around a variable name, Lua will interpret it as a string, and print the actual name rather than the value.\n\nIf we copy and paste the code into the input, the output will print our statement.\n\nIt is necessary that you define your variables before using them in your code. Since Lua reads code from top to bottom, it will not know what the variable stands for when it executes the print function. If we paste the code into our command bar, we’ll get the output nil, which means nothing or no data.\n\nWhenever we define the variable, its scope covers all of the code below in the script. Variable scope is just another word for when the variable can be accessed in your script.\n\nThere are two types of variables which you’ll hear about, local and global. The variables we’ve made in this tutorial so far have been global variables, which means they can be accessed in all code below inside the script. Local variables will be covered later in this tutorial, but in simplest terms, they have a much more limited scope.\n\nVariables do not only have to be named “variable” when assigned to a given piece of code. In fact, your variables have to be different names in order for the program to recognize which variable you want it to use in the script.\n\nWhile you can almost freely name your variables, there are a few restrictions that exist inside Lua.\n\nYou can use:\n\nYou can not use:\n• Capital letters as the first letter of the variable (Not required, but common practice)\n• Numbers as the first letter of the variable\n\nComments are a simple green text that organize and give context to your lines of code, which can be a useful tool for yourself or others if you plan on sharing it.\n\nCreating comments is extremely easy, add - - and then your text after you are finished. It should appear something like this.\n\nIf you want your comment to cover more than one line, insert brackets, with your text inside.\n\nAny text attached to the comment will not be executed by the program, and will only be seen by the reader. This green text is helpful in case you want to find a specific piece of code in your script. Comments are also crucial if you plan on sharing your scripts and want the reader to understand what certain commands do. Besides context, you can use comments to credit yourself for your script, or write out directions that the user who uses your script might want to see.\n\nIf you want to change the settings (such as the transparency, or invisibility) of an object in the workspace, you have to write down the specifics before Lua knows what you want it to do.\n\nSo, if we want to change the transparency of the baseplate, we first need to define that the baseplate is inside game.Workspace, with game being the game we’re working on and workspace being the place where baseplate and the rest of our parts are stored. Then, we write the object we’ll be changing (baseplate) and the setting that we want to change (its transparency), and then assign a value to it. If we want it to be fully invisible, we’ll set the value to one, lowering this amount will make it so that it’s semi-transparent.\n\nIn the end, this should make the baseplate completely invisible if we run the code or play the game. Keep in mind that we can change the properties of object in Studio as long as you define it correctly in the code.\n\nWhen you’re writing a sequence of code that needs to be repeated, it may be a little tedious and also messy to write it out several times. Functions are a tool in Lua that we can use to put lines of different code in, which can be repeated and manipulated a lot easier by us. The functions in this segment are not to be confused with the built-in functions of Lua, such as print.\n\nTo define a function, we need to write function and then assign it a name. Then, add a pair of parenthesis after your function name without any spacing in-between, and press enter. I’ll be naming my function printStuff, but you can name yours differently.\n\nNow, we need to write our code for our function to actually execute it. You’ll notice that when you press enter after writing your function, you’ll automatically get end. This statement is here so that you can end, or close off your function, otherwise Lua would get an error.\n\nI want to print several strings, so I’ll insert the several sequences of code inside my function.\n\nWe now have our function, however, nothing will be happen since we haven’t written the command to execute it. We need to type the function name on the next line, and Lua will print our strings.\n\nNow, Lua will execute our code. If we paste all of the content into the command bar, we’ll see that our function is successful. It’s important to note that just like variables, functions need to defined before we actually execute them in our code, otherwise we’ll just get nil.\n\nWhen we covered local variables previously in our tutorial, I mentioned that the scope of it was much more limited. Whereas global variables can be accessed anywhere in our script after being defined, local variables are limited to a block.\n\nSo what is a code block? An example is basically the indented sequence of code that we see in our function. I’ll attach comments to the parts that are a part of the block of code for a visual demonstration.\n\nYou can also tell if something is a block by the small arrow that appears to the left. If you look closely, the arrow facing down next to function is indicating that the block is being shown, and when it is facing up, it means it is closed.\n\nIf we try to print the local variable outside the block, we’ll get nil since the variable can’t be accessed.\n\nA handy feature of functions is the ability to manipulate the variables with ease. You might’ve already noticed the pair of parenthesis when we define the function, and the two other parenthesis when we execute it. These are the spaces where we put our arguments and parameters.\n\nEvery time we execute a function, we might want to change certain parts of the code each time. Parameters are used to tell Lua which variables (and thus any information) inside the function you want to change. They are established when we first define our function, and are placed in-between the first pair of parenthesis on the same line. Make sure to not define the variable you’ll be changing inside of your function, otherwise the parameter will not work.\n\nNow that we’ve defined the parameter, we need to write an argument for the function to be properly executed. An argument is the value we assign the code when executing it. It comes inside our next pair of parenthesis, and can be changed every time we execute the function separately. We’ll print a string and a number, and the program should treat the argument as the variable in the function.\n\nNow if we put it in the output, the two values should be successfully printed.\n\nArguments and parameters aren’t just limited to a single pair, in fact there can be as many as you want. In order to add another pair, separate each parameter and argument by a comma with the next one you want in your function.\n\nNow if we paste it into our command bar, the output should print both statements in the order we gave them. It is important that you put the arguments and parameters in the same order or you will assign the wrong value to the variable. Also, you always have to define your parameters when you execute your function, otherwise Lua will not know what to assign to the variables.\n\nYou might’ve already noticed that below the option to create a script, there is something called a local script. This tutorial won’t go too in-depth about them, but offer a broad summary about its purpose.\n\nLocal scripts are scripts that only affect the user’s client rather than the server. A user’s client is basically what they see, rather than the whole server. So whereas you might be seeing something, your friend playing the same game as you might see something completely different. In comparison, scripts that affect the server are seen by everyone, and not just the individual’s client.\n\nThe concept is a bit difficult to describe by text, and I still can’t do it justice by talking about it in depth, so I urge you to look at this video by TheDevKing to get a better idea of what local scripts are capable of.\n\nYou might’ve heard this word in math class and it is related. Booleans in scripting are the conditions true or false.\n\nWhen comparing values you’ll get a Boolean as well, although you can simply write true or false too.\n\nRelational operators are the operators used to compare values with one another.\n• Equal to, not to be confused with equal which simply assigns something rather than comparing two values: ==\n• Not equal to, which is true if the values are not equal: ~=\n• Greater than or equal to: >=\n• Less than or equal to: <=\n\nNow, let’s take a look at some numbers and see if they represent a true or false boolean\n\nThe first one is false, since the value can only be greater than, and not equal to the other. The next one is true as the values are equal to one another. The last is clearly false, since 8 is not less than the number 2.\n\nIf statements make it so that specific commands only happen if the condition is met, it will execute the code.\n\nFor example, if 5 > 1 the Output will print “Congratulations” since 5 > 1 is true. If the script said 5 < 1 then the script will not print “Congratulations” in Output.\n\nThis is equivalent to saying true instead and will still print our string.\n\nSometimes, our code needs to be repeated in order to produce an outcome we’re looking for. Loops are statements that allow us to repeat code multiple times. They come in several different forms, which we’ll cover in this section of the tutorial.\n\nWhile loops repeat sequences of code while the statement is true. However, when the condition is false, it will not execute the code block. For example, while a variable is less than a certain value, it will continue to print out a string we decide to give it. This is just one of countless things you can do with a while loop, so feel free to get creative if you’re feeling ambitious.\n\nFor our while loop, we’ll assign a number to our variable, x. Afterwards, we go on the next line and write while. This helps Lua understand that it is a while loop, so that when the condition is true, it’ll execute the code block. The do you see after our boolean is simply telling Lua to execute the block of code that is part of the loop when the condition is true.\n\nIn this code, I defined my variable as 10 and made it so that the while loop would continue to run until it was no longer less than a 100. Each time it runs the code, I made it so that it would add 10 to the variable, meaning that once it ran several times, it would no longer execute the code since the condition is false.\n\nNotice the string being printed after the loop. This is not executed until the loop is finished, so not attaching it to the loop can be used to tell us when the loop is finished.\n\nFor loops are able to loop as many times as the user wants. First, we define a variable for the loop, and assign it to a starting and ending value. The loop will continue to repeat until the starting value reaches the end value. While the amount the starting value increases is by 1, you can change it by adding a comma after the end value. Below, is an example of a for loop.\n\nOur loop will now print 1, 6, 11, 16 all the way until 21 where it will stop since it can not go past 25.\n\nHere is the format for the for loop.\n\nA repeat loop repeats the statements assigned to it until a following condition is true.\n\nUnlike a while loop, it runs the statements first before checking if the condition is true.\n\nWriting break at the end of a loop will end the loop if a condition is true. In the example below, break is used to break out of an infinite loop that otherwise keeps running because it is always true.\n\nThis could also work if instead of true we wrote while x < 200 do. The result would be that the loop would end early, ending when x reaches 100 rather than 200.\n\nYou may also hear the term nested loop, which is used to describe a loop with another loop inside of it.\n\nTables are used for storing large sets of data that you might use while creating your script. With tables, you can access and manipulate the data easy, which can come in handy later on. In this section, you’ll be learning about just a single type of tables, arrays.\n\nArrays are simply a list of values compiled in a table. This can include strings, numbers, booleans, functions–pretty much anything that can be used outside the script. To make an array, start by assigning a name of your own to the table.\n\nAfter this first step, you need to assign the data to the table. Assign the table to the data by adding an “=” in between, and write a pair of curly brackets (the second bracket will be automatically typed for you).\n\nNext, you can place all of your values inside of the array. For this tutorial, we’ll place a few strings and numbers together, but you can add more variety to your table if you’re following along. Make sure to separate each value by adding commas in-between them.\n\nIf we want to print specific parts of our array, we can use the index to get what we want. Each value in our array has an index, or number assigned to it. The first value is 1, second value is 2, third value is 3, etc. To print a specific part of our array, we put our table name in the print function, then follow it up with the index of the value, in-between brackets ([]).\n\nIn the end, this should print out our first string, “Hello World” in the output.\n\nWhere Else Can I Learn About Scripting?\n\nThere are many other places to learn, but the sources listed above have helped me with learning or adapting to Lua.\n\nWhat is the Difference Between Input and Output?\n\nInput is the code given to the engine, while output is the received/finished command. For example, print(“YellowNoobs!”) is a input while YellowNoobs is the output.\n\nStopping exploiters isn’t a beginner issue, it is a little more advanced than what we’ve discussed so far. Throughout your scripting career, you’ll realize that the main reason for exploits is due to poor and weak scripts that hackers are able to bypass.\n\nOne feature that Roblox automatically now applies to all games is FilteringEnabled, which prevents hackers from messing with the server itself. To learn more about how it works, you can watch the following video by AlvinBlox,\n\nWhy does Studio Automatically Indent for me?\n\nTechnically, indenting is not necessary, but it is extremely helpful and keeps your code organized. For example, through indents, you can see where your code blocks are. Not only that, but it looks much cleaner. Writing without proper indentation would give both you and the programmers reviewing your code a headache to read.\n\nHow do I become better?\n\nPractice, practice makes perfect, no exceptions. Learning to program unique things by yourself is always something you should strive to achieve as a developer.\n\nThat’s it, the basic tutorial is now finally finished! Hopefully, now you’ll have a far easier time being able to understand new concepts and can use this as a reference whenever you feel stuck.\n\nIf you have any other questions or feedback, please reply in the comments below, good luck!"
    },
    {
        "link": "https://devforum.roblox.com/t/best-practices-handbook/2593598",
        "document": "Hey, my name is Jack. I’ve collaborated with several prominent Roblox groups and have accumulated a plethora of knowledge to share with you all. In this handbook, I’ll be covering the best practices for general programming and specific Lua related challenges.\n\nI wish I had this resource when I was learning.\n\nClick To See More Do you know what this variable stands for? Well I certainty wouldn’t know what it meant.\n\n Let’s try this again: This is much better. Using ineffective variables names will not only hurt your co-workers but will eventually confuse you.\n\nClick To See More Guard clauses are conditionals that exit a function/loop with a return/break/continue statement. Here’s an example of nested conditionals that can be replaced with guard clauses. function checkUsernameStatus(userNameValid : boolean, premiumSubscription : boolean) if premiumSubscription then if userNameValid then return \"Username is valid\" end end end function checkUsernameStatus(userNameValid : boolean, premiumSubscription : boolean) if not userNameValid or not premiumSubscription then return end return \"Username is valid\" end Notice how the code no longer has nested if statements. In large systems, guard clauses will come in handy when dealing with a multitude of conditionals.\n\nClick To See More Module Scripts are arguably the most useful script object in Roblox. Module scripts allow you to create clean and reusable code. Repetitive code is a thing of the past once you have harnessed the power of module scripts. Some popular frameworks employ the use of module scripts instead of scripts and localscripts (e.g. Knit Framework). Why rewrite code when you can just reference a single function or class? This is a basic example of module scripts. However when combined with OOP, module scripts go to the next level. I’ll leave a tutorial to OOP below as well.\n\nClick To See More Type Checking is extremely useful, even more so when working with bigger projects.\n\n In fact, if you have ever used a roblox service, you have seen typechecking. For example, let’s take a look at tween service:\n\n \n\n In this picture I am creating a new tween, and you can see it showing a typechecking UI when I’m filling out the parameters. The orange underlines resemble variables while the red underlines resemble the type.\n\n This is useful information because you now know what the method’s parameters are looking for.\n\n You can typecheck variables, parameters, and function returns. Now let’s make our own method using type checking: Now, string1 and string2 expect a type of string. And the function expects to return a string.\n\nClick To See More Duplicating your code in multiple places will ultimately lead to confusing code and impossible changes. function findClosestPlayer(plr) local distance = nil local nearPlayer = nil for i, v in pairs(players:GetPlayers()) do local distanceBetween = v:DistanceFromCharacter(plr.Character.HumanoidRootPart.Position) if not v.Character or (distance and distanceBetween >= distance) or v.Name == plr.Name then continue end distance = distanceBetween nearPlayer = v end end Now imagine if this was not a function and you duplicated this code 10 times throughout your script.\n\n First of all, this will cause readability to decrease. Let’s say I need to change part of this code. Looks like we have to change all 10 occurrences of this code. However, If this code was in a function, you could change the code in the function and you would be all good.\n\nClick To See More Documenting your code is important when working on projects with a team or just your self. Imagine you write a complex system. Three months later, you need to make some changes to your code. However, you don’t know how everything works in your system. If your code was documented, it would have saved a couple hours of confusion. Also, did you know that the word “TODO” is a keyword? In studio, the word “TODO” will be bolded.\n\nClick To See More A lot of newer-intermediate programmers will often make the mistake of making memory leaks by having a misinterpretation of connections and memory. Let’s look at the following code: Let’s say you only need this code to run once. After the first time this code runs, it will be useless to you. And, this connection will still be in memory. It’s only until the part get’s deleted will the connection get garbage collected. Let’s go ahead and fix this problem: Now, this touched event is only in memory until the first time it’s touched. For an alternative solution, you can use Event:Once(). This will make sure the event only fires once and is garbage collected:\n\nClick To See More Instance.new is already performance heavy, so utilize this best practice.\n\n Do not use the second argument of instance.new to set the parent of an object. The following code is the worst way you can use Instance.new. It uses the second argument of Instance.new. In this case, it takes Roblox ten performance expensive steps to execute the code. This code queues useless replication changes which is heavy on CPU and bandwidth usage. -- What not to do local newPart = Instance.new(\"Part\", workspace) newPart.Position = Vector3.new(1,1,1) newPart.Size = Vector3.new(1,1,1) Instead, you should always set the parent property last: -- What to do local newPart = Instance.new(\"Part\") newPart.Position = Vector3.new(1,1,1) newPart.Size = Vector3.new(1,1,1) newPart.Parent = workspace This code only takes Roblox five steps. This is the most optimal solution. This code’s property updates are extremely fast. When the object is inserted into the game, it’s in it’s final state. If you don’t set the parent argument last, you will not get the desired performance. In fact, most Roblox core scripts and tools use this bad practice… Set up Instance.new in the following order:\n\n A. Instance.new\n\n B. Assign properties\n\n C. Assign Parent\n\n D. Connect signals For more information:\n\n PSA: Don't use Instance.new() with parent argument\n\nGetService instead of referring to services"
    },
    {
        "link": "https://devforum.roblox.com/t/lua-scripting-starter-guide/394618",
        "document": "Picking up programming and learning it for the first time works just like any other hobby–art, music, sports, photography, etc.–although, it may be difficult to know where to start as a beginner, especially if you’ve never had experience with it up until now. When I was younger, it was very difficult for me to get into programming as tutorials for a younger, completely unexperienced audience was rare. Although there was plenty of content available, I still had a hard time understanding the material or just got lost in the sea of information that was given to me. There are still plenty of places on either Youtube or other parts of the internet where beginners can learn, but I’ve specifically compiled this list so that you have a neat, simple page you can refer to if you feel lost, or don’t know where to go after searching for tutorials. Becoming an experienced programmer from scratch will not be easy, it will take a lot of effort and more importantly time to become an expert. I say this because many developers I’ve personally known, whether rookies or professionals, tend to bail halfway through their project or goal. Do not lose hope when things don’t come as quickly as you expected, patience is crucial. What sets poor and excellent students isn’t necessarily intelligence, but their willingness to put in work and always seeking new ways to become better at what they do. Think of this article as a legend for Lua, similar to the page in a large book that highlight specific terms or character in the book that the reader might not recognize. When you finish this guide, your ability to code things will be limited, but you should have a much easier time understanding tutorials on more advanced topics. Ultimately, I hope this article can help you get started, or at least guide you through your journey through programming.\n\nP.S. I’ve tried to make this tutorial as kid-friendly as possible, if it is still difficult to read or understand, please DM me on any platform and I’ll try my best fix it. Specific examples are appreciated.\n\nChances are, if you’ve ever played a game, you’ve wondered how it was made. How does a sword go from unequipped to swinging in just a matter of seconds? Why? How is this app able to stream the movies I select? How is the website we’re currently on even able to operate?\n\nComputer programming is an essential part of modern life, as it determines and allows for many technologies we use on a daily basis to operate. However, all code is not written in the same way, rather, there are distinct languages, or ways of writing code. In fact, you might already be familiar with the names of various programming languages, including but not limited to JavaScript or Python.\n\nIn this tutorial, we’ll be covering Lua, the official language of Roblox which can be used to create a variety of different games for users to play.\n\nIn this tutorial, we’ll be using a specific format to write, input, and receive the result of our script. To use a format identical to mine, click on View in the upper left side of your screen, then make sure you have selected and have the following settings:\n\nYour screen should look something similar to this\n\nScripts can be inserted almost everywhere, for the sake of keeping this tutorial short, head over to Model on the top panel and browse to the far left and click on Script, which will generate a script that we can use for our tutorial.\n\nPrint is a built-in function which prints out whatever statement you decide to give it. This can be either number or strings, which we’ll cover in this section. You’ll notice that once you launch a script, there is already a print function automatically typed out for you. This code always comes with your scripts, so we’ll erase it to continue with the next step.\n\nType out print in all lowercase letters. If print is typed incorrectly or typed with any capitals, the program will not recognize the command and will not run it. Add a pair of parenthesis after, studio should automatically add the second one. Make sure there is no space in between print and the parenthesis otherwise Lua will not be able to read it.\n\nNext, we need to add a string in-between the parenthesis so that we don’t just print empty space. A string is any character or words inside of a pair of quotes, such as “Hello World!” For our tutorial, we’ll be adding the string “YellowNoobs!” for the program to print.\n\nYou may replace \"YellowNoobs\" with any other text you wish as long as it is in-between the parenthesis (\"\"), the end result should look something like this,\n\nIf you want to include quotation marks in your quote, you can also use a pair of single quotes (’’) and put the double parenthesis, or vice-versa for single quotes to be printed.\n\nPrint also works for numbers and equations, which it’ll automatically simplify in the output. But before we write out our problem, we need to find the symbols needed to get the right answer.\n\nArithmetic operators are basically all the tools we use in programming to indicate a relationship between numbers. This sounds complicated, but it’s just what we call the symbols we use to add, subtract, multiply, and divide numbers.\n\nHere are the Arithmetic Operators used in Lua:\n\nNow, we’ll write our equation in-between the parenthesis, and paste it into the command bar once we’re ready to get the output. Feel free to mess around with the operators to get the hang of it.\n\nIf we put our code into the command bar we’ll get 81 instead. This is the answer to the equation, and Lua does this because it’s a simplified version, or answer to the problem we originally printed. An important thing to keep in mind is that Lua completes the math using the Order of Operations, meaning it starts with exponents, then division and multiplication, and finally addition and subtraction.\n\nTake this piece of code for example,\n\nWhile you may be tempted to say the answer is 12, since you add 1 + 5, getting 6 and multiplying it by 2, this is wrong. Instead, you multiply 5 and 2 first, then add 1, getting 11. This is a rule of both math and programming, so practice the concept until you can avoid printing the wrong number.\n\nIn order to combine two or more separate values together, you can use concatenation in the print function. We’ll still use the same format, but will add two periods or dots after each string. Do not place this inside of the string, otherwise Lua will interpret it as part of the string and produce an error.\n\nIf we paste this into the command bar, the output will show us a full statement as if it was a single string, meaning the concatenation was successful.\n\nNow that you’ve learned how to make a script, you’ll learn what variables are and how to make your own. Variables are considered vital because they save a lot of time and save you time and make your scripts simpler to review. They can be booleans, numbers, strings, or practically anything you want to assign a name to.\n\nIf you’re struggling to understand the concept of a variable, you can compare it to a nickname you might give someone who’s name may be too tedious to pronounce. Although it is not their birthname, calling them by their nickname will still get their attention as they’ve been given and called by it before.\n\nBelow, I’ve given an example of a variable. The term “variable” will be used interchangeably with the string “YellowNoobs!” whenever we use it in the script. If we put the variable inside of the print command, it will print the text assigned to it. Since the variable is identical to the string we assigned it, we do not need any quotes around the variable name. If you put quotes around a variable name, Lua will interpret it as a string, and print the actual name rather than the value.\n\nIf we copy and paste the code into the input, the output will print our statement.\n\nIt is necessary that you define your variables before using them in your code. Since Lua reads code from top to bottom, it will not know what the variable stands for when it executes the print function. If we paste the code into our command bar, we’ll get the output nil, which means nothing or no data.\n\nWhenever we define the variable, its scope covers all of the code below in the script. Variable scope is just another word for when the variable can be accessed in your script.\n\nThere are two types of variables which you’ll hear about, local and global. The variables we’ve made in this tutorial so far have been global variables, which means they can be accessed in all code below inside the script. Local variables will be covered later in this tutorial, but in simplest terms, they have a much more limited scope.\n\nVariables do not only have to be named “variable” when assigned to a given piece of code. In fact, your variables have to be different names in order for the program to recognize which variable you want it to use in the script.\n\nWhile you can almost freely name your variables, there are a few restrictions that exist inside Lua.\n\nYou can use:\n\nYou can not use:\n• Capital letters as the first letter of the variable (Not required, but common practice)\n• Numbers as the first letter of the variable\n\nComments are a simple green text that organize and give context to your lines of code, which can be a useful tool for yourself or others if you plan on sharing it.\n\nCreating comments is extremely easy, add - - and then your text after you are finished. It should appear something like this.\n\nIf you want your comment to cover more than one line, insert brackets, with your text inside.\n\nAny text attached to the comment will not be executed by the program, and will only be seen by the reader. This green text is helpful in case you want to find a specific piece of code in your script. Comments are also crucial if you plan on sharing your scripts and want the reader to understand what certain commands do. Besides context, you can use comments to credit yourself for your script, or write out directions that the user who uses your script might want to see.\n\nIf you want to change the settings (such as the transparency, or invisibility) of an object in the workspace, you have to write down the specifics before Lua knows what you want it to do.\n\nSo, if we want to change the transparency of the baseplate, we first need to define that the baseplate is inside game.Workspace, with game being the game we’re working on and workspace being the place where baseplate and the rest of our parts are stored. Then, we write the object we’ll be changing (baseplate) and the setting that we want to change (its transparency), and then assign a value to it. If we want it to be fully invisible, we’ll set the value to one, lowering this amount will make it so that it’s semi-transparent.\n\nIn the end, this should make the baseplate completely invisible if we run the code or play the game. Keep in mind that we can change the properties of object in Studio as long as you define it correctly in the code.\n\nWhen you’re writing a sequence of code that needs to be repeated, it may be a little tedious and also messy to write it out several times. Functions are a tool in Lua that we can use to put lines of different code in, which can be repeated and manipulated a lot easier by us. The functions in this segment are not to be confused with the built-in functions of Lua, such as print.\n\nTo define a function, we need to write function and then assign it a name. Then, add a pair of parenthesis after your function name without any spacing in-between, and press enter. I’ll be naming my function printStuff, but you can name yours differently.\n\nNow, we need to write our code for our function to actually execute it. You’ll notice that when you press enter after writing your function, you’ll automatically get end. This statement is here so that you can end, or close off your function, otherwise Lua would get an error.\n\nI want to print several strings, so I’ll insert the several sequences of code inside my function.\n\nWe now have our function, however, nothing will be happen since we haven’t written the command to execute it. We need to type the function name on the next line, and Lua will print our strings.\n\nNow, Lua will execute our code. If we paste all of the content into the command bar, we’ll see that our function is successful. It’s important to note that just like variables, functions need to defined before we actually execute them in our code, otherwise we’ll just get nil.\n\nWhen we covered local variables previously in our tutorial, I mentioned that the scope of it was much more limited. Whereas global variables can be accessed anywhere in our script after being defined, local variables are limited to a block.\n\nSo what is a code block? An example is basically the indented sequence of code that we see in our function. I’ll attach comments to the parts that are a part of the block of code for a visual demonstration.\n\nYou can also tell if something is a block by the small arrow that appears to the left. If you look closely, the arrow facing down next to function is indicating that the block is being shown, and when it is facing up, it means it is closed.\n\nIf we try to print the local variable outside the block, we’ll get nil since the variable can’t be accessed.\n\nA handy feature of functions is the ability to manipulate the variables with ease. You might’ve already noticed the pair of parenthesis when we define the function, and the two other parenthesis when we execute it. These are the spaces where we put our arguments and parameters.\n\nEvery time we execute a function, we might want to change certain parts of the code each time. Parameters are used to tell Lua which variables (and thus any information) inside the function you want to change. They are established when we first define our function, and are placed in-between the first pair of parenthesis on the same line. Make sure to not define the variable you’ll be changing inside of your function, otherwise the parameter will not work.\n\nNow that we’ve defined the parameter, we need to write an argument for the function to be properly executed. An argument is the value we assign the code when executing it. It comes inside our next pair of parenthesis, and can be changed every time we execute the function separately. We’ll print a string and a number, and the program should treat the argument as the variable in the function.\n\nNow if we put it in the output, the two values should be successfully printed.\n\nArguments and parameters aren’t just limited to a single pair, in fact there can be as many as you want. In order to add another pair, separate each parameter and argument by a comma with the next one you want in your function.\n\nNow if we paste it into our command bar, the output should print both statements in the order we gave them. It is important that you put the arguments and parameters in the same order or you will assign the wrong value to the variable. Also, you always have to define your parameters when you execute your function, otherwise Lua will not know what to assign to the variables.\n\nYou might’ve already noticed that below the option to create a script, there is something called a local script. This tutorial won’t go too in-depth about them, but offer a broad summary about its purpose.\n\nLocal scripts are scripts that only affect the user’s client rather than the server. A user’s client is basically what they see, rather than the whole server. So whereas you might be seeing something, your friend playing the same game as you might see something completely different. In comparison, scripts that affect the server are seen by everyone, and not just the individual’s client.\n\nThe concept is a bit difficult to describe by text, and I still can’t do it justice by talking about it in depth, so I urge you to look at this video by TheDevKing to get a better idea of what local scripts are capable of.\n\nYou might’ve heard this word in math class and it is related. Booleans in scripting are the conditions true or false.\n\nWhen comparing values you’ll get a Boolean as well, although you can simply write true or false too.\n\nRelational operators are the operators used to compare values with one another.\n• Equal to, not to be confused with equal which simply assigns something rather than comparing two values: ==\n• Not equal to, which is true if the values are not equal: ~=\n• Greater than or equal to: >=\n• Less than or equal to: <=\n\nNow, let’s take a look at some numbers and see if they represent a true or false boolean\n\nThe first one is false, since the value can only be greater than, and not equal to the other. The next one is true as the values are equal to one another. The last is clearly false, since 8 is not less than the number 2.\n\nIf statements make it so that specific commands only happen if the condition is met, it will execute the code.\n\nFor example, if 5 > 1 the Output will print “Congratulations” since 5 > 1 is true. If the script said 5 < 1 then the script will not print “Congratulations” in Output.\n\nThis is equivalent to saying true instead and will still print our string.\n\nSometimes, our code needs to be repeated in order to produce an outcome we’re looking for. Loops are statements that allow us to repeat code multiple times. They come in several different forms, which we’ll cover in this section of the tutorial.\n\nWhile loops repeat sequences of code while the statement is true. However, when the condition is false, it will not execute the code block. For example, while a variable is less than a certain value, it will continue to print out a string we decide to give it. This is just one of countless things you can do with a while loop, so feel free to get creative if you’re feeling ambitious.\n\nFor our while loop, we’ll assign a number to our variable, x. Afterwards, we go on the next line and write while. This helps Lua understand that it is a while loop, so that when the condition is true, it’ll execute the code block. The do you see after our boolean is simply telling Lua to execute the block of code that is part of the loop when the condition is true.\n\nIn this code, I defined my variable as 10 and made it so that the while loop would continue to run until it was no longer less than a 100. Each time it runs the code, I made it so that it would add 10 to the variable, meaning that once it ran several times, it would no longer execute the code since the condition is false.\n\nNotice the string being printed after the loop. This is not executed until the loop is finished, so not attaching it to the loop can be used to tell us when the loop is finished.\n\nFor loops are able to loop as many times as the user wants. First, we define a variable for the loop, and assign it to a starting and ending value. The loop will continue to repeat until the starting value reaches the end value. While the amount the starting value increases is by 1, you can change it by adding a comma after the end value. Below, is an example of a for loop.\n\nOur loop will now print 1, 6, 11, 16 all the way until 21 where it will stop since it can not go past 25.\n\nHere is the format for the for loop.\n\nA repeat loop repeats the statements assigned to it until a following condition is true.\n\nUnlike a while loop, it runs the statements first before checking if the condition is true.\n\nWriting break at the end of a loop will end the loop if a condition is true. In the example below, break is used to break out of an infinite loop that otherwise keeps running because it is always true.\n\nThis could also work if instead of true we wrote while x < 200 do. The result would be that the loop would end early, ending when x reaches 100 rather than 200.\n\nYou may also hear the term nested loop, which is used to describe a loop with another loop inside of it.\n\nTables are used for storing large sets of data that you might use while creating your script. With tables, you can access and manipulate the data easy, which can come in handy later on. In this section, you’ll be learning about just a single type of tables, arrays.\n\nArrays are simply a list of values compiled in a table. This can include strings, numbers, booleans, functions–pretty much anything that can be used outside the script. To make an array, start by assigning a name of your own to the table.\n\nAfter this first step, you need to assign the data to the table. Assign the table to the data by adding an “=” in between, and write a pair of curly brackets (the second bracket will be automatically typed for you).\n\nNext, you can place all of your values inside of the array. For this tutorial, we’ll place a few strings and numbers together, but you can add more variety to your table if you’re following along. Make sure to separate each value by adding commas in-between them.\n\nIf we want to print specific parts of our array, we can use the index to get what we want. Each value in our array has an index, or number assigned to it. The first value is 1, second value is 2, third value is 3, etc. To print a specific part of our array, we put our table name in the print function, then follow it up with the index of the value, in-between brackets ([]).\n\nIn the end, this should print out our first string, “Hello World” in the output.\n\nWhere Else Can I Learn About Scripting?\n\nThere are many other places to learn, but the sources listed above have helped me with learning or adapting to Lua.\n\nWhat is the Difference Between Input and Output?\n\nInput is the code given to the engine, while output is the received/finished command. For example, print(“YellowNoobs!”) is a input while YellowNoobs is the output.\n\nStopping exploiters isn’t a beginner issue, it is a little more advanced than what we’ve discussed so far. Throughout your scripting career, you’ll realize that the main reason for exploits is due to poor and weak scripts that hackers are able to bypass.\n\nOne feature that Roblox automatically now applies to all games is FilteringEnabled, which prevents hackers from messing with the server itself. To learn more about how it works, you can watch the following video by AlvinBlox,\n\nWhy does Studio Automatically Indent for me?\n\nTechnically, indenting is not necessary, but it is extremely helpful and keeps your code organized. For example, through indents, you can see where your code blocks are. Not only that, but it looks much cleaner. Writing without proper indentation would give both you and the programmers reviewing your code a headache to read.\n\nHow do I become better?\n\nPractice, practice makes perfect, no exceptions. Learning to program unique things by yourself is always something you should strive to achieve as a developer.\n\nThat’s it, the basic tutorial is now finally finished! Hopefully, now you’ll have a far easier time being able to understand new concepts and can use this as a reference whenever you feel stuck.\n\nIf you have any other questions or feedback, please reply in the comments below, good luck!"
    },
    {
        "link": "https://devforum.roblox.com/t/the-basics-of-basic-optimization/26756",
        "document": "8/27/2019:\n\n A lot has changed within the past 3 years. With the introduction of the new Lua Virtual Machine, some of these optimizations are now made by Roblox and are no longer needed. This includes:\n\nMake sure you profile your code as well since changes you make could have no affect.\n\nThis tutorial is meant to cover a more basic form of optimizing of code that can be done to code without making it hard to read. This is NOT advanced level optimization, which is also a topic I can’t easily do. I will leave it up to someone like AxisAngle to do that one.\n\nSo, let us start with two basic questions. 1. “What is optimization?” and 2. “Why optimize?”. To start, optimizing is defined as to ”make the best or most effective use of”. Simply put, to make code run faster. This runs into the second question of why. The answer is pretty much in the definition, to make code run faster. Not everyone has a high end quad core i7 CPU and a NVIDIA GTX GPU, and in those cases a little bit of optimizing can make things run a lot smoother.\n\n\n\n One of the most simple things you can do is add 6 characters to the beginning of your variables, and that is “local “. When you put local in front of a variable name, you are declaring a value as local, meaning it can only be used in the given scope (see example), but is faster than searching the “global” table because it has a lot of other things, including native Lua variables and ROBLOX functions and userdata.\n\nSo, How do I use local variables? Here is an example using global variables:\n\nHere is an example of local values:\n\nIs that it? Actually, no. You can localize your functions too! How about some code to explain how.\n\n\n\n\n\n\n\n 2. Don’t Re-Do The Same Math When Needed \n\n This isn’t the best subtitle, so an analogy would help. Let’s say you needed to do math starting with needing sin(0). You start by entering it into your calculator and see it is 0. Then you needed to add a number to it. If you wanted to save time, you would just input the last value rather than re-type sin(0). Not the best example, so here is code to help.\n\n Here is what happens if you repeat the same operation for to make a part rise at a constant rate.\n\nNow let’s write down what it does:\n\n For 50 times…\n• Find the global value for CFrame\n• Create the new userdata for CFrame.new(0,1,0)\n• Multiply the Part’s CFrame from 1 to the CFrame from part 3\n• Wait for 1/30th of a second\n\nSo, how can you optimize this?\n\nNow what does it do?\n\n A. Find the global value for CFrame\n\n B. Create the new userdata for CFrame.new(0,1,0)\n\n For 50 times…\n• Multiply the Part’s CFrame from 1 to the CFrame from part B\n• Wait for 1/30th of a second\n\nAnd just like that, you reduced 2 (really 3) steps that is done 50 times.\n\n\n\n\n\n\n\n \n\n A while ago, AxisAngle talked about how he could cast thousands of rays per second with no performance hit, and this is a massive helper for that. There is a more complex explanation about that involving MetaTables, but let’s keep it simple.\n\nThis may seem simple, but it is a lot more complex once you see all the steps it requies.\n\n For 10 times…\n• Call __index (a MetaTable function) in game to get Workspace, and calling functions like this is fast but can stack if it called a lot to be slow.\n• Call __index in Workspace to get FindPartOnRay. Now to get the Ray.\n• Call __index for the global value new in Ray. Now to get the Vector3s.\n• Call __index for the global value new in Vector3.\n• Create the first vector from the function returned from 3 to create a Vector3 with the coordinates of 0,0,0.\n• Call __index for the global value new in Vector3.\n• Create the second vector from the function returned from 6 to create a Vector3 with the coordinates of 0,i,0.\n• Pass those arguments into the function returned in step 3 with the Vector3s from 5 and 7 to get the Ray\n• Pass those arguments into the function returned in step 8 into FIndPartOnRay\n\nLong list, right? Now to use local values to lower the amount of times everything is indexed.\n\nA. Call __index in game to get Workspace\n\n B. Call __index in Workspace to get FindPartOnRay\n\n C. Call __index for the global value new in Ray.\n\n D. Call __index for the global value new in Vector3.\n\n E. Create a Vector with the function returned from D to create a blank Vector\n\n For 10 times…\n• Create the second vector from the function stored in D to create a Vector3 with the coordinates of 0,i,0.\n• Reference the first vector from E and create the Ray from function stored in C\n• Pass the table the FindPartOnRay function is from (Workspace, so A) into the stored function in B with the Ray from 3.\n\n\n\n\n\n\n\n How Do I Test The Speed Of My Code \n\n This may seem complex at first, but it is simple, store the tick() of the start, run the code a given amount of times in a for loop, then subtract the new tick() from the first.\n\n\n\n\n\n\n\n\n\n Doing these should make your code run faster. For example, when I did the 3rd optimization tip on the CameraScript, it went from 3%-5% in script performance to 0.5%-2%, and that is on Intel Core i7 4700MQ @ 3.25 GHz with TurboBoost. Optimization. Use it. Think about the people using toasters.\n\nBonus: With all of my tutorials, an image of the full tutorial for public is included."
    },
    {
        "link": "https://codewizardshq.com/roblox-coding",
        "document": "Roblox is a family-friendly online gaming platform that has over 40 million different games and 70 million players.\n\nIt’s a favorite among kids and what makes Roblox unique is that it’s a user-created game platform. The games are made by developers and creators and, surprisingly, many of them are kids and teens.\n\nAnyone can build a game with Roblox’s free development application, Roblox Studio. It is also an excellent resource and tool for kids interested in learning coding and game development. Besides coding fundamentals, building their own game in Roblox encourages your child’s creativity and entrepreneurship.\n\nThis article guides you through what you need to know about Roblox coding and how your child can get started.\n\nKids can also learn how to build their own Roblox game with a live instructor in our top-rated 1-week Roblox camps.\n\nRoblox is a gaming platform that hosts millions of immersive experiences created by its community of users. It was created by co-founders David Baszucki and Erik Cassel in 2004 and officially launched on September 1, 2006.\n\nRoblox builds the tools and platform that empower people to create their own experiences. Roblox itself is not a game and the company does not produce games. However, they create the tools and technology for others to do so.\n\nIn Roblox, players can explore immersive experiences from gaming to social hangouts, concerts, sports, fashion shows, education, and entertainment. It also has a virtual economy where players trade, earn, and spend virtual currency and resources.\n\nRoblox is especially popular among kids with over 60% of users being under the age of 16. Kids can play, create, and learn in a safe environment within Roblox.\n\nHow Is Code Used in Roblox?\n\nCode is used extensively in the Roblox platform to create games and experiences. Developers and creators write code and scripts in Roblox Studio.\n\nThe code is what shapes the gameplay experience in Roblox and allows developers to create immersive and engaging experiences for players to enjoy.\n\nWhether it’s designing complex game mechanics, creating dynamic environments, or implementing social features, code is the backbone of the Roblox platform and its diverse range of games.\n• Game Logic: Code is used to define the rules and mechanics of the game. This includes controlling player movement, managing game states (such as starting, pausing, or ending the game), implementing scoring systems, and handling interactions between game objects.\n• User Interface: Code is employed to create user interfaces within games, such as menus, buttons, and HUDs (heads-up displays). This allows players to navigate the game, customize settings, and access various features.\n• Scripted Events: Code is used to trigger events based on specific conditions or player actions. For example, when a player walks into a certain area, interacts with an object, or performs a particular action, code can be used to execute corresponding events, such as playing a sound, spawning enemies, or activating a scripted sequence.\n• Character Behavior: Code is used to control the behavior of characters and NPCs (non-player characters) within the game. This includes defining movement patterns, implementing AI (artificial intelligence) for enemies or allies, and creating realistic interactions between characters and the environment.\n• Physics and Animations: Code is used to simulate physics and animate objects within the game world. This allows for realistic movement and interactions, such as simulating gravity, collisions, and object animations.\n• Customization and Personalization: Code is used to enable customization and personalization features within games. This includes allowing players to customize their avatars, vehicles, or in-game assets using code-driven systems.\n• Multiplayer Networking: Code is used to implement multiplayer networking features, enabling players to interact with each other in real time within the game world. This includes synchronizing game state across multiple clients, managing player connections, and facilitating communication between players.\n\nMost of the coding done in Roblox happens in Roblox Studio.\n\nRoblox Studio is the official development tool provided by Roblox Corporation for creating games and experiences within the Roblox platform.\n\nIt provides a user-friendly interface for designing 3D environments, scripting game logic, and publishing your creations to the Roblox platform. It’s so easy that kids can create a simple Roblox obby in just 15 min.\n• Games – create a wide range of games like obstacle courses, simulators, RPGs, shooters, and more.\n• 3D Worlds – create immersive 3D environments and virtual worlds ranging from simple landscapes and architectural designs to elaborate fantasy realms and futuristic cities\n• Custom Characters – customize your character’s appearance, clothing, accessories, and animations to make them unique with a combination of pre-made assets and custom designs.\n• Interactive Objects and Environments – code objects and environments within your Roblox game to be interactive and responsive to player actions.\n• Multiplayer Experiences – create collaborative or competitive experiences where players can interact with each other in real-time through player-to-player communication, team-based gameplay, and leaderboards.\n• Custom Game Mechanics – implement custom game mechanics like scripting player movement, implementing game rules, managing game state, and creating special abilities or power-ups.\n• 3D World Building: Roblox Studio allows users to create 3D environments using a variety of tools and assets. Users can build terrain, place objects and structures, and customize the look and feel of their worlds.\n• Asset Library: Roblox Studio provides access to a vast library of pre-made assets, including models, textures, animations, and sounds, which users can use to populate their worlds and enhance their creations.\n• Scripting: Roblox Studio uses Lua scripting language to enable users to add interactivity and functionality to their games. Users can write scripts to control gameplay mechanics, create custom user interfaces, handle player input, and more.\n• Testing and Debugging: Roblox Studio includes tools for testing and debugging games directly within the editor. Users can simulate gameplay, troubleshoot issues, and iterate on their designs to create polished experiences.\n• Collaboration and Publishing: Roblox Studio supports collaboration between multiple developers, allowing them to work together on the same project simultaneously. Once a game is complete, users can publish it to the Roblox platform for other players to enjoy.\n• Community Resources: Roblox Studio is supported by a vibrant community of developers who share tutorials, scripts, and other resources to help users learn and improve their skills. Users can also participate in forums, events, and workshops to connect with other developers and get feedback on their creations.\n\nRoblox Studio empowers kids of all skill levels to unleash their creativity and bring their ideas to life in Roblox, whether they’re aspiring game developers, artists, or designers. It serves as the primary platform for users to create and share their own interactive experiences.\n\nTo build more advanced games, it will require some level of coding in Roblox Lua.\n\nWhat coding language is Roblox written in?\n\nThe Roblox platform itself is written in C++ and other languages, but the most important language for anyone interested in Roblox coding is Lua.\n\nThe Roblox Studio program is written in C++ along with other languages. Roblox games and experiences are primarily written in Lua, a lightweight and versatile scripting language.\n\nLua is widely used in game development due to its simplicity, flexibility, and ease of integration with various game engines and platforms.\n\nRoblox has adapted the Lua programming language to their platform and games are made with a derivative of the language Lua named Luau.\n\nThe main difference between Lua and Luau is that Luau has optimizations that make it faster and more efficient. This results in better performance for games and other experiences developed on the Roblox platform. Luau also includes some new features and functionality that are not available in regular Lua. If you know how to code in Lua, learning Luau is relatively easy.\n\nIn Roblox Studio, Lua is used to script game logic, control gameplay mechanics, and add interactivity to objects and characters within the game world. Developers write Lua scripts to define how game elements behave, respond to player input, and interact with each other.\n\nWhile Lua is the primary language used for scripting in Roblox, developers may also utilize other programming languages for backend systems, server-side logic, or external integrations.\n\nHowever, Lua remains the dominant language for creating and scripting games within the Roblox platform.\n\nDoes Roblox use C++?\n\nRoblox primarily uses Lua for scripting within its games and experiences. So, if you want to develop games, learning Lua is the best option.\n\nHowever, the underlying engine and infrastructure of Roblox, which includes the Roblox client and server software, are built using a combination of programming languages, including C++.\n\nC++ is a widely used programming language in game development due to its performance, flexibility, and low-level capabilities. It is often used to develop game engines, core systems, and performance-critical components.\n\nIn the case of Roblox, C++ is likely used for various aspects of the platform, including:\n• Engine Development: The core engine that powers Roblox games, including rendering, physics, networking, and audio systems, is written in C++.\n• Platform Infrastructure: C++ may be used for developing and optimizing various platform components, such as the Roblox client application, server software, and backend systems.\n• Performance Critical Components: C++ is often used for implementing performance-critical components that require low-level optimization, such as graphics rendering, physics simulation, and networking protocols.\n\nWhile Lua is the primary language used for scripting gameplay logic within Roblox games, C++ plays a crucial role in powering the underlying technology and infrastructure that supports the Roblox platform as a whole.\n\nNo, Roblox itself is not primarily coded in Python. Roblox games and the Roblox platform itself are primarily built and scripted using Lua and C++.\n\nPython is a popular programming language known for its simplicity and readability. It’s the language kids start with in our middle and high school coding programs because it’s in demand and easy to learn.\n\nWhile Python is widely used in various fields, including web development, data science, and automation, it is not commonly used for game development within the Roblox ecosystem.\n\nEverything About Programming in Lua\n\nLua is a lightweight, high-level, and versatile scripting language commonly used in game development, embedded systems, and other applications where simplicity and flexibility are desired.\n\nA version of Lua, Luau, is the primary scripting language used within the Roblox platform to build games.\n\nFor kids, Lua has a straightforward syntax and minimalistic design that make it easier to grasp fundamental programming concepts without overwhelming complexity.\n\nLearning Lua enables kids to customize and create their own games within Roblox, providing a hands-on and practical application for their programming skills.\n\nCan you guess what that script does? It changes the color of a part when a player touches it.\n\nHere are some key features and aspects of Lua programming:\n• Simplicity: Lua has a clean and simple syntax that makes it easy to learn and use. Its syntax is inspired by other programming languages like C and Pascal.\n• Embeddable: Lua is designed to be embedded into other applications as a scripting language. It’s often used as a scripting engine for game engines, applications, and software frameworks.\n• Dynamic Typing: Lua is dynamically typed, meaning variables do not have a fixed type and can hold values of any type. This makes Lua flexible and suitable for rapid development.\n• Table-based Data Structure: Lua uses tables as its primary data structure, which are associative arrays that can store key-value pairs. Tables are extremely versatile and can be used to represent arrays, dictionaries, objects, and other data structures.\n• First-Class Functions: Functions in Lua are first-class citizens, meaning they can be assigned to variables, passed as arguments to other functions, and returned from functions. This makes Lua suitable for functional programming paradigms.\n• Coroutine Support: Lua includes built-in support for coroutines, which are lightweight cooperative multitasking units. Coroutines allow developers to write asynchronous and event-driven code in a synchronous style.\n• Garbage Collection: Lua features automatic memory management through garbage collection. It automatically deallocates memory when objects are no longer in use, helping developers avoid memory leaks and manual memory management.\n• Extensibility: Lua is highly extensible and customizable. It allows developers to define custom data types, operators, and syntax extensions through metaprogramming techniques.\n• Portability: Lua is designed to be highly portable and platform-independent. It can be compiled and run on various operating systems and hardware architectures with minimal changes.\n\nLua’s versatility and ease of integration make it a popular choice for game development, scripting engines, and various other applications.\n\nKids should start with an introduction to scripting in Lua if they want to code Roblox games.\n\nLua scripting in Roblox is the process of writing code in the Lua programming language to create interactive experiences, gameplay mechanics, and dynamic content within Roblox games.\n\nWhether you’re a kid or a beginner, Lua scripting in Roblox offers a fun and rewarding way to bring your ideas to life and create your own games.\n\nTo start scripting in Roblox, you’ll need to download and install Roblox Studio, the official development tool for creating Roblox games.\n\nTo install Roblox Studio on your Windows or Mac computer:\n• In the pop-up dialog, click the Download Studio button.\n• Find the Studio installer in your browser’s download history and double-click the file.\n• On Windows, the file is RobloxStudio.exe.\n• On Mac, the file is RobloxStudio.dmg.\n• Sign in to Studio with your Roblox account to get started.\n• After you log in, click on the New button in the left-hand toolbar. You can then select a template from the available options, such as Baseplate.\n\nAfter that, you can write your first script.\n\nIn Roblox Studio, you can insert a new Lua script into your game by:\n\nIf you don’t have the explorer panel, you can go to the View tab and click Explorer to display it.\n\n2. Right-clicking on the desired object (such as a part or a model)\n\nRoblox has a simple tutorial to help kids get started. It will teach you how to make a platform disappear.\n\nThe final script looks like this:\n\nWhile you don’t need to be an expert programmer to get started, having a basic understanding of Lua syntax and concepts will help you grasp scripting in Roblox more effectively.\n\nLua scripts in Roblox often revolve around handling events. Events are actions that occur within the game, such as player input, object collisions, or time-based triggers. You can write code to respond to these events and execute specific actions accordingly.\n\nLua supports various data types, including numbers, strings, booleans, tables, and functions. You can use variables to store and manipulate data within your scripts.\n\nFunctions are blocks of reusable code that perform specific tasks. You can define your own functions in Lua scripts to encapsulate functionality and improve code organization.\n\nTo further your understanding of Lua scripting in Roblox, consider exploring the following resources:\n• Roblox Developer Hub: The official Roblox Developer Hub offers tutorials, documentation, and learning resources to help you get started with Lua scripting in Roblox.\n• Community Forums: The Roblox developer community is active and supportive. Participate in forums, join groups, and engage with other developers to learn from their experiences and get help with scripting questions.\n• YouTube Tutorials: There are many video tutorials on YouTube that cover Lua scripting in Roblox. Search for tutorials tailored to beginners and follow along to learn new concepts and techniques.\n• Practice and Experimentation: The best way to learn Lua scripting in Roblox is through practice and experimentation. Start small, experiment with different code snippets, and gradually build up your skills as you become more comfortable with scripting.\n\nWith dedication, practice, and a willingness to learn, anyone can become proficient in Lua scripting and bring their imagination to life within the Roblox platform.\n\nHow Long Does It Take to Learn Roblox Scripting?\n\nThe time it takes to learn Roblox scripting varies depending on several factors, including your prior programming experience, the complexity of the projects you want to create, the amount of time you dedicate to learning, and your ability to grasp new concepts.\n\nHere are some general considerations:\n• Prior Experience: If you have previous experience with programming languages like Lua, Python, or JavaScript, you may find it easier to pick up Roblox scripting. Familiarity with programming concepts such as variables, loops, conditionals, and functions can significantly reduce the learning curve.\n• Learning Resources: The availability and quality of learning resources can impact how quickly you learn Roblox scripting. Utilizing tutorials, documentation, online courses, and community forums can help you acquire knowledge more efficiently.\n• Practice and Application: Like any skill, learning Roblox scripting requires practice and hands-on experience. The more time you spend experimenting with code, building projects, and troubleshooting errors, the faster you’ll become proficient.\n• Project Complexity: Starting with simple projects and gradually increasing the complexity of your creations can help you progress more smoothly. Beginning with basic scripts to control simple game mechanics and then advancing to more complex systems as you gain confidence can be an effective learning approach.\n• Consistency: Consistent practice and learning are key to mastering Roblox scripting. Setting aside dedicated time each day or week to study, practice, and work on projects can accelerate your progress.\n• Support and Feedback: Engaging with the Roblox developer community, seeking help from experienced developers, and receiving feedback on your projects can provide valuable insights and guidance that can speed up your learning process.\n\nRoblox Scripting in Lua allows you to start by creating very small, simple scripts and slowly build up to more complex ones over time. This, accompanied by the massive online community of Roblox developers, provides almost endless resources and allows for a quick learning curve for most children. Depending on the complexity of the script, it can take anywhere from a few days to a few months to become nearly proficient in Roblox scripting.\n\nIt’s essential to focus on your own learning journey, set realistic goals, and celebrate your progress along the way.\n\nThere are a lot of ways to learn about Lua and coding in Roblox depending on your learning style. Try different mediums to find the one that works best for you.\n\nYou can learn Lua through online tutorials, classes, books, games, and more.\n• Online Tutorials and Courses: There are numerous online tutorials and courses specifically designed to teach Lua programming. Websites like Codecademy, Khan Academy, and Udemy offer beginner-friendly Lua courses that cover fundamental concepts and provide hands-on practice. CodeWizardsHQ offers a 1-week online Roblox camp with live instructors to answer questions and provide guidance.\n• Roblox Developer Hub: The Roblox Developer Hub provides a wealth of resources, tutorials, and documentation tailored to aspiring Roblox developers. Kids can explore beginner tutorials on Lua scripting within Roblox Studio, which include step-by-step instructions and interactive examples.\n• YouTube Videos: YouTube is a treasure trove of Lua scripting tutorials, especially for Roblox game development. Kids can find video tutorials covering various aspects of Lua scripting, ranging from basic syntax to advanced game mechanics.\n• Books and eBooks: There are several books and eBooks available that teach Lua programming in a kid-friendly manner. Books like “Lua Game Development Cookbook” by Mario Kaack and “Lua Programming Gems” by L. H. de Figueiredo, W. Celes, and R. Ierusalimschy offer comprehensive coverage of Lua programming concepts with practical examples.\n• Code.org: Code.org offers interactive coding tutorials and activities for kids of all ages. While it doesn’t specifically focus on Lua, it provides a solid foundation in programming concepts that can be applied to learning Lua later on.\n• Roblox Studio Challenges: Kids can participate in Roblox Studio challenges and competitions where they’re tasked with creating games or experiences using Lua scripting. These challenges provide motivation and a real-world context for learning Lua.\n• Game Modding: Encourage kids to explore Lua scripting by modding existing Roblox games or creating their own modifications. Modding allows them to experiment with Lua code in a familiar gaming environment and see immediate results.\n• Community Forums and Groups: Kids can join Roblox developer forums, Discord servers, and online communities where they can connect with other young developers, ask questions, share ideas, and collaborate on projects.\n• Educational Games: There are educational games and apps specifically designed to teach programming concepts, including Lua. These games often gamify learning, making it fun and engaging for kids to learn Lua while playing. There is even a Roblox game that teaches Lua.\n\nBy exploring these resources and engaging in hands-on practice, kids can learn Lua programming in a fun and interactive way. This lays the foundation for future exploration and creativity in game development and beyond.\n\nUse these official Roblox and Lua resources to learn more about coding in Roblox.\n\nLive, instructor-led classes are a great option for kids who want to build Roblox games. Kids don’t have to do it alone, they can get the guidance and confidence they need to code their own games.\n\nAt CodeWizardsHQ, our Roblox camps merge structured learning with sheer fun, enabling students to channel their creativity into their own games using the programming skills they’ve acquired in our courses. The camp is uniquely designed so that all participants share the same server, fostering collaboration as they play and refine their games together.\n\nEach student crafts their own obstacle course, or ‘Obby,’ which they link to a central VIP area, promoting interaction and shared experiences. We incorporate storytelling to enrich the learning process, allowing students to imagine they are developing games or professional apps for a fictional company. This immersive approach not only captivates their imagination but also deepens their understanding of critical game development concepts such as 3D vectors, script writing, user-defined functions, and loops.\n\nMoreover, upon completing the camp, students can download the map they collaboratively worked on, providing them with the opportunity to continue enhancing their projects. Equipped with these comprehensive tools and experiences, they are fully prepared to develop their own basic Roblox games, taking their first steps towards becoming young game developers."
    },
    {
        "link": "https://create.roblox.com/docs/performance-optimization/improve",
        "document": "This page describes common performance problems and best practices for mitigating them.\n\nExpensive operations in Lua code take longer to process and can thus impact frame rate. Unless it is being executed in parallel, Lua code runs synchronously and blocks the main thread until it encounters a function that yields the thread.\n• None Intensive operations on table structures - Complex operations such as serialization, deserialization, and deep cloning incur a high performance cost, especially on large table structures. This is particularly true if these operations are recursive or involve iterating over very large data structures.\n• None High frequency events - Tying expensive operations to frame-based events of RunService without limiting the frequency means these operations are repeated every frame, which often results in an unnecessary increase in computation time. These events include:\n• None events sparingly, limiting usage to cases where high frequency invocation is essential (for example, updating the camera). You can execute most other code in other events or less frequently in a loop. Invoke code onevents sparingly, limiting usage to cases where high frequency invocation is essential (for example, updating the camera). You can execute most other code in other events or less frequently in a loop.\n• None to spread the work across multiple frames. Break up large or expensive tasks usingto spread the work across multiple frames.\n• None Identify and optimize unnecessarily expensive operations and use for computationally expensive tasks that don't need to access the data model.\n• None Certain server-side scripts can benefit from , a simple flag that compiles a script to machine code rather than bytecode.\n\nFor more information on debugging scripts using the MicroProfiler, see the debug library, which includes functions for tagging specific code and further increasing specificity, such as debug.profilebegin and debug.profileend. Many Roblox API methods called by scripts also have their own associated MicroProfiler tags that can provide useful signal.\n\nMemory leaks can occur when you write scripts that consume memory that the garbage collector can't properly release when its no longer in use. Leaks are specifically pervasive on the server, because they can continuously be online for many days, whereas a client session is much shorter.\n\nThe following memory values in the Developer Console can indicate a problem that needs further investigation:\n• None - Consistently growing numbers of instances suggest references to some instances in your code are not being garbage collected.\n• None - Provides a script by script breakdown of memory usage.\n• None Leaving connections connected - The engine never garbage collects events connected to an instance and any values referenced inside the connected callback. Therefore, active connections of events and code inside the connected instances, connected functions, and referenced values, are out of scope for the memory garbage collector, even after the events are fired. Although events are disconnected when the instance they belong to is destroyed, a common mistake is to assume this applies to Player objects. After a user leaves an experience, the engine doesn't automatically destroy their representative Player object and character model, so connections to the Player object and instances under the character model, such as Player.CharacterAdded, still consume memory if you don't disconnect them in your scripts. This can result in very significant memory leaks over time on the server as hundreds of users join and leave the experience.\n• None Tables - Inserting objects into tables but not removing them when they are no longer needed causes unnecessary memory consumption, especially for tables that track user data when they join. For example, the following code sample creates a table adding user information each time a user joins: If you don't remove these entries when they are no longer needed, the table continues to grow in size and consumes more memory as more users join the session. Any code that iterates over this table also becomes more computationally expensive as the table grows in size.\n\nTo clean up all used values for preventing memory leaks:\n• None Disconnect all connections - Go through your code base make sure each connection is cleaned up via one of the following paths:\n• None Destroying the instance the event belongs to with the function.\n• None Destroying the script object that the connection traces back to.\n• None Remove player objects and characters after leaving - Implement code to ensure no connections persist after a user leaves, like in the following example:\n\nExcessive physics simulation can be a key cause of increased computation time per frame on both the server and the client.\n• None Excessive physics time step frequency - By default, stepping behavior is in adaptive mode, where physics steps at either 60 Hz, 120 Hz, or 240 Hz, depending on the complexity of the physics mechanism. A fixed mode with improved accuracy of physics is also available, which forces all physics assemblies to step at 240 Hz (four times per frame). This results in significantly more computation each frame.\n• None Excessive number of complexity of simulated objects - The more 3D assemblies that are simulated, the longer physics computations take each frame. Often, experiences will have objects being simulated that do not need to be or will have mechanisms that have more constraints and joints than they need.\n• None Overly precise collision detection - Mesh parts have a CollisionFidelity property for detecting collision which offers a variety of modes with different levels of performance impact. Precise collision detection mode for mesh parts has the most expensive performance cost and takes the engine longer to compute.\n• None Anchor parts that don't require simulation - Anchor all parts that don't need to be driven by physics, such as for static NPCs.\n• None Use adaptive physics stepping - Adaptive stepping dynamically adjusts the rate of physics calculations for physics mechanisms, allowing physics updates to be made less frequently in some cases.\n• None\n• None Where possible, minimize the number of physics constraints or joints in an assembly.\n• None Reduce the amount of self-collision within a mechanism, such as by applying limits or no-collision constraints to ragdoll limbs to prevent them from colliding with each other.\n• None Reduce the usage of precise collision fidelity for meshes\n• None For small or non-interactable objects where users would rarely notice the difference, use box fidelity.\n• None For small-medium size objects, use box or hull fidelities, depending on the shape.\n• None For large and very complex objects, build out custom collisions using invisible parts when possible.\n• None For objects that don't require collisions, disable collisions and use box or hull fidelity, since the collision geometry is still stored in memory.\n• None You can render collision geometry for debug purposes in Studio by toggling on Collision fidelity from the Visualization Options widget in the upper‑right corner of the 3D viewport. Alternatively, you can apply the CollisionFidelity = Precise filter to the Explorer which shows a count of all mesh parts with the precise fidelity and allows you to easily select them.\n• None For an in-depth walkthrough on how to choose a collision fidelity option that balances your precision and performance requirements, see Set Physics and Rendering Parameters.\n\nPhysics movement and collision detection consumes memory. Mesh parts have a CollisionFidelity property that determines the approach that's used to evaluate the collision bounds of the mesh.\n\nThe default and precise collision detection modes consumes significantly more memory than the two other modes with lower fidelity collision shapes.\n\nIf you see high levels of memory consumption under PhysicsParts, you might need to explore reducing the collision fidelity of objects in your experience.\n\nTo reduce memory used for collision fidelity:\n• None , and to . For parts that do not need collisions, disable their collisions by settingandto\n• None setting. has the lowest memory overhead, and and are generally more expensive.\n• None . It's generally safe to set any small anchored part's collision fidelity to\n• None For very complex large meshes, you may want to build your own collision mesh out of smaller objects with box collision fidelity. Reduce fidelity of collisions using thesetting.has the lowest memory overhead, andandare generally more expensive.\n\nHumanoid is a class that provides a wide range of functionalities to player and non player characters (NPCs). Although powerful, a Humanoid comes with a significant computation cost.\n• None - There is a performance cost to leaving certain enabled. Disable any that are not needed for your NPCs. For example, unless your NPC is going to climb ladders, it's safe to disable the state. - There is a performance cost to leaving certainenabled. Disable any that are not needed for your NPCs. For example, unless your NPC is going to climb ladders, it's safe to disable thestate.\n• None\n• None This can be intensive for the engine to process, particularly if these models use . This also can be particularly problematic in experiences where avatars respawn often.\n• None In the , lengthy tags (over 4 ms) are often a signal that avatar instantiation/modification is triggering excessive invalidations.\n• None Using Humanoids in cases where they are not required - Static NPCs that do not move generally have no need for the class. - Static NPCs that do not move generally have no need for theclass.\n• None Playing animations on a large number of NPCs from the server - NPC animations that run on the server need to be simulated on the server and replicated to the client. This can be unnecessary overhead.\n• None - In experiences with a large number of NPCs, consider creating the on the client and running the animations locally. This reduces the load on the server and the need for unnecessary replication. It also makes additional optimizations possible (such as only playing animations for NPCs who are near to the character). - In experiences with a large number of NPCs, consider creating theon the client and running the animations locally. This reduces the load on the server and the need for unnecessary replication. It also makes additional optimizations possible (such as only playing animations for NPCs who are near to the character).\n• None - NPC models don't necessarily need to contain a humanoid object.\n• None , because they don't need to move around but just need to play animations. For static NPCs, use a simple, because they don't need to move around but just need to play animations.\n• None for animations, depending on the complexity of your NPCs. For moving NPCs, consider implementing your own movement controller and using anfor animations, depending on the complexity of your NPCs. - NPC models don't necessarily need to contain a humanoid object.\n• None - Use to only enable necessary states for each humanoid. - Useto only enable necessary states for each humanoid.\n• None - Instead of destroying an NPC completely, send the NPC to a pool of inactive NPCs. This way, when a new NPC is required to respawn, you can simply reactivate one of the NPCs from the pool. This process is called pooling, which minimizes the amount of times characters need to be instantiated.\n• None Only spawn NPCs when users are nearby - Don't spawn NPCs when users aren't in range, and cull them when users leave their range.\n• None Avoid making changes to the avatar hierarchy after it is instantiated - Certain modifications to an avatar hierarchy have significant performance implications. Some optimizations are available:\n• None and properties. Instead, update the property.\n• None If you need to attach any objects to the avatar, do so outside of the hierarchy of the avatar . - Certain modifications to an avatar hierarchy have significant performance implications. Some optimizations are available:\n\nA significant portion of the time the client spends each frame is on rendering the scene in the current frame. The server doesn't do any rendering, so this section is exclusive to the client.\n\nA draw call is a set of instructions from the engine to the GPU to render something. Draw calls have significant overhead. Generally, the fewer draw calls per frame, the less computational time is spent rendering a frame.\n\nYou can see how many draw calls are currently occurring with the Render Stats > Timing item in Studio. You can view Render Stats in the client by pressing ShiftF2.\n\nThe more objects that need to be drawn in your scene in a given frame, the more draw calls are made to the GPU. However, the Roblox Engine utilizes a process called instancing to collapse identical meshes with the same texture characteristics into a single draw call. Specifically, multiple meshes with the same MeshId are handled in a single draw call when:\n• None are identical. are identical when doesn't exist.\n• None Excessive object density - If a large number of objects are concentrated with a high density, then rendering this area of the scene requires more draw calls. If you are finding your frame rate drops when looking at a certain part of the map, this can be a good signal that object density in this area is too high. Objects like decals, textures, and particles don't batch well and introduce additional draw calls. Pay extra attention to these object types in a scene. In particular, property changes to ParticleEmitters can have a dramatic impact on performance.\n• None Missed Instancing Opportunities - Often, a scene will include the same mesh duplicated a number of times, but each copy of the mesh has different mesh or texture asset IDs. This prevents instancing and can lead to unnecessary draw calls. A common cause of this problem is when an entire scene is imported at once, rather than individual assets being imported into Roblox and then duplicated post-import to assemble the scene.\n• None Excessive object complexity - Although not as important as the number of draw calls, the number of triangles in a scene does influence how long a frame takes to render. Scenes with a very large number of very complex meshes are a common problem, as are scenes with the MeshPart.RenderFidelity property set to Enum.RenderFidelity.Precise on too many meshes.\n• None Excessive shadow casting - Handling shadows is an expensive process, and maps that contain a high number and density of light objects that cast shadows (or a high number and density of small parts influenced by shadows) are likely to have performance issues.\n• None High transparency overdraw - Placing objects with partial transparency near each other forces the engine to render the overlapping pixels multiple times, which can hurt performance. For more information on identifying and fixing this issue, see Delete Layered Transparencies.\n• None Instancing identical meshes and reducing the amount of unique meshes - If you ensure all identical meshes to have the same underlying asset IDs, the engine can recognize and render them in a single draw call. Make sure to only upload each mesh in a map once and then duplicate them in Studio for reuse rather than importing large maps as a whole, which might cause identical meshes to have separate content IDs and be recognized as unique assets by the engine. - If you ensure all identical meshes to have the same underlying asset IDs, the engine can recognize and render them in a single draw call. Make sure to only upload each mesh in a map once and then duplicate them in Studio for reuse rather than importing large maps as a whole, which might cause identical meshes to have separate content IDs and be recognized as unique assets by the engine. are a helpful mechanism for object reuse.\n• None - Culling describes the process of eliminating draw calls for objects that don't factor into the final rendered frame. By default, the engine skips draw calls for objects outside the camera's field of view (frustum culling), but doesn't skip draw calls for objects occluded from view by other objects (occlusion culling). If your scene has a large number of draw calls, consider implementing your own additional culling at runtime dynamically for every frame, such as applying the following common strategies:\n• None and that are far away from the camera or setting. Hideandthat are far away from the camera or setting.\n• None For indoor environments, implement a room or portal system that hides objects not currently occupied by any users. - Culling describes the process of eliminating draw calls for objects that don't factor into the final rendered frame. By default, the engine skips draw calls for objects outside the camera's field of view (frustum culling), but doesn't skip draw calls for objects occluded from view by other objects (occlusion culling). If your scene has a large number of draw calls, consider implementing your own additional culling at runtime dynamically for every frame, such as applying the following common strategies:\n• None - Set render fidelity to or . This allows meshes to fall back to less complex alternatives, which can reduce the number of polygons that need to be drawn.\n• None Disabling shadow casting on appropriate parts and light objects - The complexity of the shadows in a scene can be reduced by selectively disabling shadow casting properties on light objects and parts. This can be done at edit time or dynamically at runtime. Some examples are:\n• None Use the BasePart.CastShadow property to disable shadow casting on small parts where shadows are unlikely to be visible. This can be particularly effective when only applied to parts that are far away from the user's camera. This might result in visual artifacts on shadows.\n• None Disable shadows on moving objects when possible.\n• None Disable Light.Shadows on light instances where the object does not need to cast shadows.\n• None Limit the range and angle of light instances. - The complexity of the shadows in a scene can be reduced by selectively disabling shadow casting properties on light objects and parts. This can be done at edit time or dynamically at runtime. Some examples are:\n\nNetworking and replication describes the process by which data is sent between the server and connected clients. Information is sent between the client and server every frame, but larger amounts of information require more compute time.\n• None Excessive remote traffic - Sending a large amount of data through RemoteEvent or RemoteFunction objects or invoking them very frequently can lead to a large amount of CPU time being spent processing incoming packets each frame. Common mistakes include:\n• None Replicating data every frame that does not need to be replicated.\n• None Replicating data on user input without any mechanism to throttle it.\n• None Dispatching more data than is required. For example, sending the player's entire inventory when they purchase an item rather than just details of the item purchased.\n• None Creation or removal of complex instance trees - When a change is made to the data model on the server, it is replicated to connected clients. This means creating and destroying large instance hierarchies like maps at runtime can be very network intensive. A common culprit here is the complex animation data saved by Animation Editor plugins in rigs. If these aren't removed before the game is published and the animated model is cloned regularly, a large amount of data will be replicated unnecessary.\n• None Server-side TweenService - If TweenService is used to tween an object server side, the tweened property is replicated to each client every frame. Not only does this result in the tween being jittery as clients' latency fluctuates, but it causes a lot of unnecessary network traffic.\n\nYou can employ the following tactics to reduce unnecessary replication:\n• None Avoid sending large amounts of data at once through remote events . Instead, only send necessary data at a lower frequency. For example, for a character's state, replicate it when it changes rather than every frame.\n• None like maps and load them in pieces to distribute the work replicating these across multiple frames.\n• None , especially the animation directory of rigs, after importing.\n• None , especially in cases where the server doesn't need to have knowledge of the instances being created. This includes:\n• None Visual effects such as an explosion or a magic spell blast. The server only needs to know the location to determine the outcome, while the clients can create visuals locally.\n• None Tween objects on the client rather than the server. , especially in cases where the server doesn't need to have knowledge of the instances being created. This includes:\n\nThe highest impact mechanism available to creators to improve client memory usage is to enable Instance Streaming.\n\nInstance streaming selectively loads out parts of the data model that are not required, which can lead to considerably reduced load time and increase the client's ability to prevent crashes when it comes under memory pressure.\n\nIf you are encountering memory issues and have instance streaming disabled, consider updating your experience to support it, particularly if your 3D world is large. Instance streaming is based on distance in 3D space, so larger worlds naturally benefit more from it.\n\nIf instance streaming is enabled, you can increase the aggressiveness of it. For example, consider:\n\nFor more information on streaming options and their benefits, see Streaming Properties.\n• None - A common mistake is to upload the same asset multiple times resulting in different asset IDs. This can lead to the same content being loaded into memory multiple times.\n• None - Even when assets are not identical, there are cases when opportunities to reuse the same asset and save memory are missed.\n• None - Audio files can be a surprising contributor to memory usage, particularly if you load all of them into the client at once rather than only loading what you need for a portion of the experience. For strategies, see - Audio files can be a surprising contributor to memory usage, particularly if you load all of them into the client at once rather than only loading what you need for a portion of the experience. For strategies, see\n• None - Graphics memory consumption for a texture is unrelated to the size of the texture on the disk, but rather the number of pixels in the texture.\n• None For example, a 1024x1024 pixel texture consumes four times the graphics memory of a 512x512 texture.\n• None Images uploaded to Roblox are transcoded to a fixed format, so there is no memory benefit to uploading images in a color model associated with fewer bytes per pixel. Similarly, compressing images prior to upload or removing the alpha channel from images that don't need it can decrease image size on disk, but either doesn't improve or only minimally improves memory usage. Though the engine automatically downscales texture resolution on some devices, the extent of the downscale depends on the device characteristics, and excessive texture resolution can still cause problems.\n• None You can identify the graphics memory consumption for a given texture by expanding the category in the . - Graphics memory consumption for a texture is unrelated to the size of the texture on the disk, but rather the number of pixels in the texture.\n• None - Reuse the same asset ID across objects and ensure the same assets, especially meshes and images, aren't uploaded separately multiple times.\n• None - Look for identical mesh parts and textures that are uploaded multiple times with different IDs.\n• None Though there is no API to detect similarity of assets automatically, you can collect all the image asset IDs in your place (either manually or with a script), download them, and compare them using external comparison tools.\n• None For mesh parts, the best strategy is to take unique mesh IDs and organize them by size to manually identify duplicates.\n• None property to apply various tints to it. Instead of using separate textures for different colors, upload a single texture and use theproperty to apply various tints to it. - Look for identical mesh parts and textures that are uploaded multiple times with different IDs.\n• None - Instead of importing an entire map at once, import and reconstruct assets in the map individually and reconstruct them. The 3D importer doesn't do any de-duplication of meshes, so if you were to import a large map with a lot of separate floor tiles, each of those tiles would be imported as a separate asset (even if they are duplicates). This can lead to performance and memory issues down the line, as each mesh is treated as individually and takes up memory and draw calls.\n• None to no more than the necessary amount. Unless an image is occupying a large amount of physical space on the screen, it usually needs at most 512x512 pixels. Most minor images should be smaller than 256x256 pixels.\n• None to ensure maximum texture reuse in 3D maps. For steps and examples on how to create trim sheets, see to ensure maximum texture reuse in 3D maps. For steps and examples on how to create trim sheets, see\n\nMany experiences implement custom loading screens and use the ContentProvider:PreloadAsync() method to request assets so that images, sounds, and meshes are downloaded in the background.\n\nThe advantage of this approach is that it lets you ensure important parts of your experience are fully loaded without pop-in. However, a common mistake is overutilizing this method to preload more assets than are actually required.\n\nAn example of a bad practice is loading the entire Workspace. While this might prevent texture pop-in, it significantly increases load time.\n\nInstead, only use ContentProvider:PreloadAsync() in necessary situations, which include:\n• None Important images in your experience menu, such as button backgrounds and icons.\n• None Important assets in the starting or spawning area.\n\nIf you must load a large number of assets, we recommend you provide a Skip Loading button."
    }
]