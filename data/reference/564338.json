[
    {
        "link": "https://v17.angular.io/api/common/NgIf",
        "document": ""
    },
    {
        "link": "https://angular.dev/api/common/NgIf",
        "document": "The directive is most commonly used to conditionally show an inline template, as seen in the following example. The default template is blank.\n\nTo display a template when evaluates to false, use an template binding as shown in the following example. The binding points to an element labeled . The template can be defined anywhere in the component view, but is typically placed right after for readability.\n\nIn the previous example, the then-clause template is specified inline, as the content of the tag that contains the directive. You can also specify a template that is defined externally, by referencing a labeled element. When you do this, you can change which template to use at runtime, as shown in the following example.\n\nYou might want to show a set of properties from the same object. If you are waiting for asynchronous data, the object can be undefined. In this case, you can use and store the result of the condition in a local variable as shown in the following example.\n\nThis code uses only one , so only one subscription is created. The conditional statement stores the result of in the local variable . You can then bind the local repeatedly.\n\nThe conditional displays the data only if returns a value, so you don't need to use the safe-navigation-operator ( ) to guard against null values when accessing properties. You can display an alternative template while waiting for the data.\n\nThe shorthand syntax expands into two separate template specifications for the \"then\" and \"else\" clauses. For example, consider the following shorthand statement, that is meant to show a loading page while waiting for data to be loaded.\n\nYou can see that the \"else\" clause references the with the label, and the template for the \"then\" clause is provided as the content of the anchor element.\n\nHowever, when Angular expands the shorthand syntax, it creates another tag, with and directives. The anchor element containing the template for the \"then\" clause becomes the content of this unlabeled tag.\n\nThe presence of the implicit template object has implications for the nesting of structural directives. For more on this subject, see Structural Directives."
    },
    {
        "link": "https://blog.angular-university.io/angular-ngif",
        "document": "In this post, we are going to cover all the features that we have available for using the Angular core directive.\n\nBesides the most commonly used features, we are going to learn how to avoid a potential anti-pattern that we might run into while developing more complex UI screens that consume a lot of Observable data coming from different sources (backend, Observable services, stores, etc.).\n\nIn this post, we will cover the following topics:\n• How does ngIf compare to hiding elements using CSS?\n• What type of expressions can ngIf accept?\n• The ngIf if then else syntax\n• Consuming observable data with ngIf and the async pipe\n• How does ngIf work under the hood?\n\nThis post is part of our ongoing series on Angular Core features, you can find all the articles available here.\n\nSo without further ado, let's get started learning everything that we need to know about Angular !\n\nNote: If instead of you are looking for the syntax, then check my other guide instead: Angular @if: Complete Guide\n\nEven though HTML is also a programming language in its own right, it does not have an if statement, unlike for example Javascript.\n\nWe need to pass a condition to , in order for it to work. Here are a couple of examples:\n\nIn this example, the container div will only be shown to the user if the user is logged in, otherwise the whole content of the div is not visible.\n\nInside the container div, there is a button only visible if the user is an administrator.\n\nWhat if I don't have anywhere convenient to apply ngIf?\n\nIn the case of container elements, if there is no container available for the section that we want to show or hide, then we don't have to create a container div just to be able to apply .\n\nInstead, we can apply on top of the directive. This will show or hide the content of , without having to create an extra div just for that:\n\nHow does ngIf compare to hiding elements using CSS?\n\nEven though HTML does not have a built-in if statement, there are ways of hiding portions of the page with just plain CSS, by using the and\n\n attributes.\n\nWe can easily add or remove these CSS attributes to an HTML element using Javascript and hide an element from the page. But that is not the same as using .\n\nWith , if an element is hidden then that element does not exist at all in the page.\n\nMeaning that if you inspect the page using for example the Chrome Dev Tools, you won't find any HTML element present in the DOM.\n\nInstead of it, you will find a strange-looking HTML comment similar to this one, where the directive was applied:\n\nThis is very different than the behavior of the or CSS properties. For example, if we set the property to the value , the HTML element will be hidden.\n\nBut if we inspect the page with the Dev Tools, we will see that DOM elements are still there present on the page, it's just that they are not visible:\n\nWith the CSS attribute set to , something very similar would occur. The HTML element would be hidden from the user, but still present on the page upon inspection with the Dev Tools.\n\nWith hidden visibility, the element will still occupy some blank space on the page, even though the element is hidden. This is unlike the use of , where no space on the page is occupied.\n\nBut in both cases, with CSS the elements are still present in the DOM, consuming resources however small, unlike with where hidden elements simply don't exist.\n\nWhat type of expressions can ngIf accept?\n\nThe directive can take as input any valid Typescript expression and not just a boolean. The thruthiness of the expression is then going to get evaluated, to determine if the element should be shown or not.\n\nBesides booleans we can also pass to for example strings, arrays, objects, etc. Here are a few examples of what would happen if we passed other primitive types to :\n\nAnd here are some more examples of passing arrays and objects to :\n\nAs we can see, all that it matters to determine if an element is shown or not is the truthiness of the expression passed to .\n\nIf we could use an \"if\" syntax in HTML, we will also need an else clause, just like in Javascript we have the if-else statement.\n\nIn Angular, we can use the else syntax, in the following way:\n\nBesides the expression, we can also pass to an else clause, that points to a template reference (the template in this case).\n\nIf the expression is falsy, the template will be instantiated and applied to the page, right where the directive was applied.\n\nOtherwise, if the expression remains truthy, then the template will never be instantiated, and won't be present at all on the page.\n\nThe ngIf then else syntax\n\nThe Angular directive also supports a if-then-else syntax, just like we have available in Javascript. Here is an example:\n\nIn this example, we have applied to an directive. Either one of the two templates or is going to be instantiated, depending on the truthiness of the expression.\n\nUnlike Javascript, this syntax does not support multiple \"else if\" clauses, but you can implement equivalent functionality using .\n\nConsuming observable data with ngIf and the async pipe\n\nIf you are building applications in reactive style, then is usually used to feed the observable data to the template.\n\nThe directive can be combined with the pipe in order to consume an Observable in the following way:\n\nIn this example, is an Observable emitting as values arrays of course objects. This Observable could have been fetched from memory, or from an in-memory store.\n\nIndependently of the origin of the data, the pipe will subscribe to the Observable, and make the values emitted by it available to the template.\n\nIn order to apply the pipe, we use the syntax with the \"as\" syntax. The values emitted by the Observable are going to be available inside the scope of the directive via the local template variable.\n\nOne of the advantages of consuming Observables with the async pipe directly in the template is that the pipe will take care of unsubscribing from the Observable automatically when the component gets destroyed.\n\nAnother advantage of consuming data this way is that the component view will get automatically updated with the latest Observable data if using OnPush change detection.\n\nUsing this combination of and the pipe to consume Observable data is very convenient, but this can be easily misused in more complex user interfaces, where multiple sources of Observable data need to be displayed in different sections of the page.\n\nYou might have come across some components with templates that look a lot like this:\n\nThis page is made up of three different peer sections, at the same level of the HTML tree:\n• the header only needs the user\n• the body needs all data: courses, the lessons, and the user\n• the footer only needs the courses and the lessons\n\nIn order to consume the Observable data, we had to resort to repeating the use of and the pipe, at multiple levels of the page.\n\nWe also used nested directives in both the body and the footer, just to be able to access multiple Observables in one section of the page.\n\nIn the case of the body, we even had to resort to 3 levels of nesting, and we have seen components with sometimes 5 or 6 levels of nesting, just to consume Observable data.\n\nWhen does this overuse of ngIf/async occur?\n\nThis will only happen in more complex components, where the data of each Observable is used a little bit everywhere on the page, and not just in one well-contained section.\n\nAlso, the component might begin simple, with each Observable only being used in a certain part of the page, but over time new requirements show up that cause the observable data to be used in new places of the page, and then the nested directives start to multiply.\n\nNotice that nesting by itself is not problematic, and is normal when we have multiple structural directives like , , etc. in one section of the page, as we can only apply one structural directive per element.\n\nWhat we are talking about here, is the repeated use of this and pipe combination, just for the purpose of accessing data, and nothing more.\n\nDoes this cause any problems in practice?\n\nNot only does this code repetition and nesting not look right visually, this makes the component harder to read and maintain over time.\n\nYou might think of splitting the component into many different subcomponents to try to alleviate this. The problem is that the different sections of the page might make much more sense to be put on the same component because they are tightly related to each other.\n\nHow is this commonly solved?\n\nA common attempt to solve this problem is to try to get all the data needed at once, at the top of the component, like so:\n\nHere we have nested the directives at the top of the component template so that we get all the data needed anywhere in the component upfront.\n\nAll this nesting doesn't look great visually, but at least it prevents a lot of the code repetition. If it works, why not? The problem is, this doesn't work very well in practice in terms of user experience.\n\nWhy doesn't this upfront nesting solution work great in practice?\n\nUsually, we want to show to the user something on the screen as early as possible, and some of these data sources might take longer to fetch the data than others.\n\nFor example, imagine that the data comes from an existing in-memory store, and is immediately available.\n\nBut the data, on the other hand, is coming from a REST API call which is very fast, while the data comes from another API call, that takes longer.\n\nIdeally, we want to show the data immediately as it's already available in memory, then we can show the courses data once it arrives, and then finally display also the lessons data.\n\nThe problem is, all this nesting would prevent that! With the current solution based on nesting 3 times, the component is only going to be displayed to the user when all the data is ready.\n\nSo as we can see, this solution is not only visually unappealing, there can also be practical consequences in terms of user experience.\n\nSo how can we improve on this, is there an alternative way?\n\nFor simpler screens, the issues that we have discussed above are probably not a huge problem.\n\nBut if your screen starts growing in complexity, and you start to feel that all this / nesting is starting to cause maintainability issues and user experience problems, you might want to refactor your component into the single data observable pattern.\n\nWith this pattern, here is what the template of the component will look like:\n\nAs you can see, there is no more nesting involved, and no more multiple uses of the / combination. We access all the data that the template needs in one go at the top of the component, via a Observable, so we only apply the pipe once.\n\nThis Observable contains all the data that the component template will need throughout its lifecycle, which explains the name of the pattern.\n\nHow does this pattern help with the previous problems?\n\nBesides avoiding the unnecessary nesting and making the template much easier to read and reason about, this pattern also helps with the UI issues that we mentioned before.\n\nActually, you can build this Observable to behave in any way that you need to provide the best user experience.\n\nFor example, if the data is already available, you can have this Observable immediately emit a value with the user property filled in, and the other properties with default values:\n\nThis would allow the data to be displayed, while the rest of the data is still being fetched. Once the courses API call ends, we can then emit a second value for the Observable containing the courses:\n\nThis would allow us to display even more data to the user, maybe even already hiding the global loading indicator, and leaving only a more local loading indicator still spinning.\n\nLater, when the lessons arrive from the backend, we can emit one final value of the Observable, containing all the data:\n\nHow to create the Single Data Observable?\n\nThe Observable can be built with any combination of RxJs operators that you need, in order to meet the exact needs of the UI.\n\nBut most commonly, the best way to build this Observable is to use RxJs combineLatest. Here is an example of how to build the Observable:\n\nLet's break down what is going on here, step by step. To start, we are creating three separate Observables ( , and ).\n\nThe first Observable comes from an in-memory store, and does not emit a default value. This makes sense, given that there is no default user profile.\n\nBut the two other Observables, coming from backend services, do have logical default values (the empty array), defined via the operator.\n\nThis means that each of those Observables will emit first the empty array , and only later they will emit the result of the backend call.\n\nFinally, we have combined all 3 observables using , which will create a result Observable, that emits tuple values.\n\nThese tuples contain the values emitted by each of the composing Observables in order, meaning . We then transform this tuple into an object of type , using the map operator.\n\nAnd with this, using just a couple of very commonly used RxJs operators, we have built exactly the Observable that we need, and now our template is a lot simpler and maintainable, at a small expense of a bit of extra code.\n\nIn case you are not familiar with combineLatest\n\nIf you use this pattern in your applications, notice an important property of\n\n : it will not emit its first tuple until its composing Observables all emit their first value.\n\nThis is why adding default values to and is important, otherwise, we wouldn't be able to feed to the template the user and courses data immediately as it becomes available.\n\nThe Observable that we have defined will wait for a user to be emitted, and after that, it will continue to emit values whenever any of the ,\n\n and Observables emit themselves values.\n\nAfter emits its first tuple value, then any new values emitted by\n\n , or will result in the emission of a new result tuple.\n\nWhen is it worth to use the Single Data Observable pattern?\n\nIt's probably not worth it to use the single data observable pattern systematically, but only in screens that consume several observable sources, where its hard to tell upfront exactly where in the page the multiple observables are going to be needed over time.\n\nIf the screen is going to be complex and accept multiple observables, we might as well use it from the beginning. But if not, its very simple to refactor into this pattern later.\n\nIf you are building your UI in reactive style, this pattern will make your larger and more complex components a lot easier to maintain.\n\nOn the other hand, this pattern is overkill for simpler screens, so its use is better decided on a case-by-case basis.\n\nHow does ngIf work under the hood?\n\nTo wrap up our deep dive into the directive, let's talk a bit about the strange syntax applied to , and what it means.\n\nThe syntax means that is a structural directive, meaning that it affects the structure of the page.\n\nWhen Angular sees the , the template compiler is going to take the template in its initial form:\n\nAnd Angular is going to de-sugar the syntax into the following form:\n\nAs we can see, under the hood the directive is simply a plain Angular attribute that targets the property .\n\nThe syntax simply means that the content of the element where the directive is applied is considered an , that might or might not be included in the page depending if the structural directive applied to it decides to instantiate the template or not.\n\nNotice that this under the hood de-sugaring process happens with all structural directives (like , etc.), and not only with .\n\nAs we have learned, the directive works just like the missing if-then-else feature of the HTML language!\n\nUsing it, we can easily add or remove elements from the page, depending on the truthiness of a Javascript expression.\n\nWhen an element gets removed from the page using , it gets removed completely, its not like the element is hidden using CSS.\n\nIf you adopt a reactive style for your applications, is often used in combination with the pipe, to consume observable data.\n\nFor components with a lot of data sources, this might lead to lots of nesting and code repetition in the template just to access the data, as well as page startup UI issues.\n\nIf you run into these issues, consider refactoring your component into using the single data observable pattern, where only one data observable is fed to the view.\n\nThis will greatly simplify the template and improve the component startup experience. The example given with is a common one, but feel free to add any other combination of operators in order to get exactly the data observable that the view needs.\n\nI hope that you have enjoyed this post, if you would like to learn a lot more about all the available Angular Core directives, we recommend checking the Angular Core Deep Dive course.\n\nAlso, if you have some questions or comments please let me know in the comments below and I will get back to you.\n\nTo get notified of upcoming posts on Angular, I invite you to subscribe to our newsletter:\n\nAnd if you are just getting started learning Angular, have a look at the Angular for Beginners Course:"
    },
    {
        "link": "https://docs.angularjs.org/api/ng/directive/ngIf",
        "document": "There was an error loading this resource. Please try again later."
    },
    {
        "link": "https://v17.angular.io/guide/built-in-directives",
        "document": ""
    },
    {
        "link": "https://material.angular.io/components/icon",
        "document": ""
    },
    {
        "link": "https://material.angular.io/components/icon/api",
        "document": ""
    },
    {
        "link": "https://developers.google.com/fonts/docs/material_icons",
        "document": "An overview of material icons—where to get them and how to integrate them with your projects.\n\nMaterial design system icons are simple, modern, friendly, and sometimes quirky. Each icon is created using our design guidelines to depict in simple and minimal forms the universal concepts used commonly throughout a UI. Ensuring readability and clarity at both large and small sizes, these icons have been optimized for beautiful display on all common platforms and display resolutions.\n\nSee the full set of material design icons in the Material Icons Library.\n\nThe icons are available in several formats and are suitable for different types of projects and platforms, for developers in their apps, and for designers in their mockups or prototypes.\n\nWe have made these icons available for you to incorporate them into your products under the Apache License Version 2.0. Feel free to remix and re-share these icons and documentation in your products. We'd love attribution in your app's about screen, but it's not required.\n\nThe complete set of material icons are available on the material icon library. The icons are available for download in SVG or PNGs, formats that are suitable for web, Android, and iOS projects or for inclusion in any designer tools.\n\nGrab the latest stable zip archive (~310MB) of all icons or the bleeding-edge version from master.\n\nThe material icons are available from the git repository which contains the complete set of icons including all the various formats we are making available.\n\nThe material icon font is the easiest way to incorporate material icons with web projects. We have packaged all the material icons into a single font that takes advantage of the typographic rendering capabilities of modern browsers so that web developers can easily incorporate these icons with only a few lines of code.\n\nUsing the font is not only the most convenient method, but it is efficient and looks great:\n• Served from Google Web Font servers or can be self hosted.\n• Colored, sized and positioned entirely with CSS.\n• Vector-based: Looks great at any scale, retina displays, low-dpi display screens.\n\nThe icon font weighs in at only 42KB in its smallest woff2 format and 56KB in standard woff format. By comparison, the SVG files compressed with gzip will generally be around 62KB in size, but this can be reduced considerably by compiling only the icons you need into a single SVG file with symbol sprites.\n\nThe easiest way to set up icon fonts for use in any web page is through Google Fonts. All you need to do is include a single line of HTML:\n\nSimilar to other Google Web Fonts, the correct CSS will be served to activate the 'Material Icons' font specific to the browser. An additional CSS class will be declared called . Any element that uses this class will have the correct CSS to render these icons from the web font.\n\nFor those looking to self host the web font, some additional setup is necessary. Host the icon font in a location, for example , and add the following CSS rule:\n\nIn addition, the CSS rules for rendering the icon will need to be declared to render the font properly. These rules are normally served as part of the Google Web Font stylesheet, but will need to be included manually in your projects when self-hosting the font:\n\nUsing the icons in HTML\n\nIt’s easy to incorporate icons into your web page. Here’s a small example:\n\nThis example uses a typographic feature called ligatures, which allows rendering of an icon glyph simply by using its textual name. The replacement is done automatically by the web browser and provides more readable code than the equivalent numeric character reference.\n\nThis feature is supported in most modern browsers on both desktop and mobile devices.\n\nFor browsers that do not support ligatures, fall back to specifying the icons using numeric character references like the example below:\n\nFind both the icon names and codepoints on the material icons library by selecting any icon and opening the icon font panel. Each icon font has a codepoints index in our git repository showing the complete set of names and character codes (here).\n\nThese icons were designed to follow the material design guidelines and they look best when using the recommended icon sizes and colors. The styles below make it easy to apply our recommended sizes, colors, and activity states.\n\nAlthough the icons in the font can be scaled to any size, in accordance with material design icons guidelines, we recommend them to be shown in either 18, 24, 36 or 48px. The default being 24px.\n\nMaterial icons look best at 24px, but if an icon needs to be displayed in an alternative size, using the above CSS rules can help:\n\nUsing the icon font allows for easy styling of an icon in any color. In accordance with material design icon guidelines, for active icons we recommend using either black at 54% opacity or white at 100% opacity when displaying these on light or dark backgrounds, respectively. If an icon is disabled or inactive, using black at 26% or white at 30% for light and dark backgrounds, respectively.\n\nHere are some examples, using the material CSS styles described above:\n\nExample for drawing an icon on a light background with a dark foreground color:\n\nExample for drawing an icon on a dark background with a light foreground color:\n\nTo set a custom icon color, define a CSS rule specifying the desired color for the font:\n\nand then use the class when referring to the icon:\n\nMaterial icons are also available as regular images, both in PNG and SVG formats.\n\nThe material icons are provided as SVGs that are suitable for web projects. Individual icons are downloadable from the material icons library. The SVGs are also available from the material design icons git repository under the path:\n\nFor example, icons for maps are in src/maps:\n\nIf multiple icons are in use on a web site, creating spritesheets out of the images is recommended. For more information, refer to the documentation in the sprites directory of the git repository.\n\nPNG is the most traditional way to display icons on the web. Our downloads from the material icons library provide both single and double densities for each icon. They are referred to as and respectively in the download. Icons are also available in the git repository under:\n\nIf multiple icons are in use on a web site, creating spritesheets out of the images is recommended. For more information, refer to recommendations in the sprites directory in the git repository.\n\nPNGs suitable for Android are available from the material icons library. These come in all the supported screen densities so they should look good on any device.\n\nThe icons are also available in the material design icons git repository in the same combination of colors and sizes named as follows:\n\nThe Vector Drawable is currently only available as a black 24dp icon. This is for compatibility with our most standard icon size. To render the icon in a different color, use drawable tinting available on Android Lollipop.\n\nWhen using the Vector Drawable, it may not be necessary to include the xxxhdpi density PNG since it is unlikely a device supporting that screen density does not support Vector Drawables.\n\nMaterial icons also work well within iOS apps. In both the material icons library and git repository, these icons are packaged up in Xcode imagesets which will work easily with Xcode Asset Catalogs (xcassets). These imagesets can be added to any Xcode Asset Catalogs by dragging them into Xcode on to the asset catalog or by copying the folder into the xcasset folder.\n\nThe imageset contains the single, double and triple density images (1x, 2x, 3x) so they work on all known iOS screen densities. Both black and white icons are provided, but we recommend using UIImage's imageWithRenderingMode with UIImageRenderingModeAlwaysTemplate which will allow the image to be used as an alpha mask that can be tinted to any possible color.\n\nLanguages such as Arabic and Hebrew are read from right-to-left (RTL). For RTL languages, UIs should be mirrored to display most elements in RTL. When a user interface is mirrored for RTL, some of the icons should also be mirrored. When text, layout, and iconography are mirrored to support right-to-left UIs, anything that relates to time should be depicted as moving from right to left. For example, forward points to the left, and backwards points to the right. However, be mindful that the context in which the icon is placed also influences whether an icon should be mirrored or not.\n\nIcons should only be mirrored if their direction matches other UI elements in RTL mode. When an icon represents visual features of your website that are different in RTL, then the icon should also be mirrored in RTL. For example, if the numbers in a numbered list are on the right side in the RTL language, then the numbers should be on the right side of the mirrored icon.\n\nThis Android developer article describes in-depth how to implement RTL user interfaces. By default on Android, icons are not mirrored when the layout direction is mirrored. You need to specifically mirror the appropriate icons when needed, either by providing specialized assets for RTL languages, or using framework functionality to mirror the assets.\n\nTo provide specialized assets for RTL languages, you can use the qualifier on resource directories, such as . Resources inside such directories will only be used for RTL languages. For devices running Android API 19 or newer, the framework also provides the autoMirrored attribute for Drawables. When this attribute is set to true, the drawable will be automatically mirrored on RTL languages.\n\nIf using autoMirrored or providing alternate Drawable resources isn’t an option, the ImageView scaleX attribute can also be used to mirror drawables (for instance, by providing a RTL-specific layout in a directory).\n\niOS has the concept of a UISemanticContentAttribute that is attached to each view. This can be , , , or . iOS uses this value and the (left-to-right (LTR)/RTL setting of the device presenting the interface to determine the effectiveLayoutDirection of the view. This effectiveLayoutDirection determines whether or not to mirror an image when it is displayed.\n\nBy default, images' semantic content is set to . This causes them to be mirrored in RTL mode. If you do not want an icon to ever be mirrored, you need to explicitly set it to be . Apple calls out some exceptions that should not be mirrored, such as media playback (Fast Forward, rewind, etc.), musical notes, images indicating the passage of time, etc.\n\nFor more in-depth documentation on how to implement RTL on iOS and macOS, please review Apple's RTL documentation.\n\nSemantic content was added in iOS 9. If you are supporting earlier versions of iOS, the material internationalization framework backports some of the functionality to iOS 8.\n\nWe recommend the following article as a primer to RTL on the web: https://hacks.mozilla.org/2015/09/building-rtl-aware-web-apps-and-websites-part-1 https://hacks.mozilla.org/2015/10/building-rtl-aware-web-apps-websites-part-2\n\nBy default on the web, icons are not mirrored when the layout direction is mirrored. You need to specifically mirror the appropriate icons when needed.\n\nThe example below shows how to implement a simple RTL CSS rule. You can also view it on codepen.\n\nGenerate your own RTL icons using ImageMagick\n\nIf mirroring the icons in code is not an option you can use ImageMagick to horizontally mirror the image.\n\nWhich icons should be mirrored for RTL?\n\nHere is a list of icons that can be programmatically mirrored to RTL:"
    },
    {
        "link": "https://material.angular.io/guide/getting-started",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/44677960/how-to-use-material-design-icons-in-angular-4",
        "document": "For those who prefer to use SCSS:\n\nand use it in HTML as described here\n\nIn Order to refer to Sam Claus' comment, thank you for this, I've added the installation and use of Templarian's design icons. It is similar to the one above.\n\nInstall the font through the package manager\n\nimport the stylesheet in , or in as described in the comment of A. Morel here\n\nor using the CDN URL in index.html or wherever and use it in HTML as described here\n\nAddendum: My answer's a little bit older. This still works fine but is no longer state of the art. The answer of A. Morel here is a bit more contemporary."
    }
]