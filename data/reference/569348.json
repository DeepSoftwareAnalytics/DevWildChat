[
    {
        "link": "https://medium.com/@jjcx/mastering-responsive-design-best-practices-for-size-units-in-css-973f532ebbdf",
        "document": "In today’s digital age, it’s crucial to ensure your website is responsive and easily accessible on all devices. This is where responsive design comes into play. Responsive design refers to creating web designs that can adapt and adjust to any screen size, making it easier for users to navigate and access the website.\n\nOne of the key components of responsive design is using the right size units in CSS. CSS is a powerful tool that web developers use to create the layout, design, and style of a website. There are different size units in CSS, each with its own advantages and disadvantages. In this article, we will discuss the best practices for size units in CSS and how to choose the right size unit for your website.\n\nUse Relative Units Instead of Absolute Units\n\nOne of the best practices for size units in CSS is to use relative units instead of absolute units. Relative units include percentages, em, and rem. Absolute units include pixels (px), inches (in), and centimeters (cm).\n\nRelative units are better than absolute units because they are scalable and can adjust to the size of the screen. For example, if you use pixels to define the size of a font, it will remain the same size regardless of the screen size. However, if you use em or rem, the font size will adjust according to the screen size, making it easier to read on different devices.\n\nHere’s an example of how to use em to define font size:\n\nIn this example, the font size of the h1 element is set to 2em, which means it will be twice the size of the parent element’s font size.\n\nWhen defining the width and height of container elements like divs, it’s best to use percentages instead of pixels. This is because percentages adjust to the size of the screen, making the website more responsive. For example, if you define a div width as 50%, it will take up half of the screen regardless of the device.\n\nHere’s an example of how to use percentages to define the width of a div:\n\nIn this example, the width of the .container element is set to 50%, which means it will take up half of the screen width.\n\nFont sizes are an essential element of web design, and it’s crucial to choose the right size unit. As mentioned earlier, em is a relative unit that adjusts to the size of the screen. It’s best to use em for font sizes because it allows users to adjust the font size in their browser settings.\n\nHere’s an example of how to use em to define font size:\n\nIn this example, the font size of the p element is set to 1em, which means it will be the same size as the parent element’s font size.\n\nrem is a relative unit that stands for “root em.” It’s similar to em, but instead of scaling based on the font size of the parent element, it scales based on the font size of the root element. This makes it ideal for setting global sizing for elements like padding, margin, and borders.\n\nHere’s an example of how to use rem to define padding:\n\nIn this example, the padding of the .container element is set to 1rem, which means it will be the same size as the root element’s font size.\n\nViewport units are a relatively new addition to CSS and refer to units that are based on the size of the viewport. Viewport units include vw (viewport width), vh (viewport height), vmin (viewport minimum), and vmax (viewport maximum). These units are perfect for creating responsive designs that adjust to the size of the screen.\n\nHere’s an example of how to use viewport units to define the font size:\n\nIn this example, the font size of the h1 element is set to 5vw, which means it will be 5% of the viewport width.\n\nViewport units can also be used to define the width and height of elements. Here’s an example:\n\nIn this example, the width of the .container element is set to 50% of the viewport width, and the height is set to 50% of the viewport height.\n\nIt’s important to note that while viewport units are a great tool for responsive design, they should be used sparingly. Overusing viewport units can lead to inconsistent designs and make it harder for users to navigate the website.\n\nIn conclusion, choosing the right size unit in CSS is essential for creating a responsive website. When designing a website, it’s best to use relative units like percentages, em, and rem, as they adjust to the screen size. Additionally, viewport units are perfect for creating responsive designs that adjust to the size of the screen. By following these best practices and using the right size units, you can create a website that is easily accessible and functional on all devices.\n\nHere’s a final example of how to use a combination of size units to create a responsive design:\n\nIn this example, we’re using percentages to define the width of the .container element, em and rem to define the font size and line height of the h1 and p elements, and media queries to adjust the design for smaller screens. By using a combination of size units, we can create a responsive design that looks great on all devices.\n\nTo further illustrate the importance of using the right size units in CSS, let’s consider a scenario where we’re designing a website for a restaurant. We want to create a design that’s easy to navigate and looks great on both desktop and mobile devices.\n\nFirst, we’ll define the width of the container element using percentages. This ensures that the website adjusts to the size of the screen and looks great on all devices. We’ll also add padding to the container to provide some breathing room and ensure the content doesn’t look too cramped.\n\nNext, we’ll define the font sizes for the headings and paragraphs using em and rem. This ensures that the font sizes adjust based on the size of the screen and are easy to read on both desktop and mobile devices.\n\nWe’ll also use media queries to adjust the design for smaller screens. For screens smaller than 768px, we’ll adjust the width of the container to 100%, reduce the padding, and adjust the font sizes and line heights to ensure the content is easy to read on smaller screens.\n\nBy following these best practices and using the right size units, we can create a responsive design that looks great on all devices and provides a great user experience.\n\nIn summary, when it comes to choosing the right size units in CSS, it’s important to use relative units like percentages, em, and rem, as they adjust to the screen size. Additionally, viewport units are great for creating responsive designs that adjust to the size of the screen. By using a combination of size units and media queries, we can create a responsive design that looks great on all devices and provides a great user experience."
    },
    {
        "link": "https://reddit.com/r/webdev/comments/vmwitb/responsive_design_is_changing_the_fontsize_bad",
        "document": "Is this bad practice for responsive web design or will it cause any accessibility issues? Basically I use this and rem everywhere else to help with scaling up or down for my layouts."
    },
    {
        "link": "https://w3schools.com/howto/howto_css_responsive_text.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://stackoverflow.com/questions/15649244/responsive-font-size-in-css",
        "document": "Am I missing something really obvious? How do I achieve this?\n\nI've noticed that on the Zurb Foundation 3 Typography example page , the headers adapt to the browser as it is compressed and expanded.\n\nWhen I resize the browser to mobile size the large font doesn't adjust and causes the browser to include a horizontal scroll to accommodate for the large text.\n\nI've created a site using the Zurb Foundation 3 grid. Each page has a large h1 :\n\nThe won't respond like this when resizing the browser window. Instead they respond to the browser zoom/type size settings, such as if you press and together on the keyboard while in the browser. You would have to look at using media queries to reduce the font-size at certain intervals where it starts breaking your design and creating scrollbars. For example, try adding this inside your CSS at the bottom, changing the 320 pixels width for wherever your design starts breaking: You can also use viewport percentage lengths such as , , and . The official W3C document for this states: The viewport-percentage lengths are relative to the size of the initial containing block. When the height or width of the initial containing block is changed, they are scaled accordingly. Again, from the same W3C document each individual unit can be defined as below: vw unit - Equal to 1% of the width of the initial containing block. vh unit - Equal to 1% of the height of the initial containing block. vmin unit - Equal to the smaller of vw or vh. vmax unit - Equal to the larger of vw or vh. And they are used in exactly the same way as any other CSS value: Compatibility is relatively good as can be seen here. However, some versions of Internet Explorer and Edge don’t support vmax. Also, iOS 6 and 7 have an issue with the vh unit, which was fixed in iOS 8.\n\nIn actual original Sass (not scss) you could use the below mixins to automatically set the paragraph's and all headings' . I like it because it is much more compact. And quicker to type. Other than that, it provides the same functionality. Anyway, if you still want to stick to the new syntax - scss, then feel free to convert my Sass content to scss here: [CONVERT SASS TO SCSS HERE] Below I give you four Sass mixins. You will have to tweak their settings to your needs. =font-h1p-style-generator-manual() // You don’t need to use this one. Those are only styles to make it pretty. =media-query-base-font-size-change-generator-manual() // This mixin sets the base body size that will be used by the h1-h6 tags to recalculate their size in a media query. =h1p-font-size-generator-auto($h1-fs: 3em, $h1-step-down: 0.3, $body-min-font-size: 1.2em, $p-same-as-hx: 6) // Here you will set the size of h1 and size jumps between h tags =config-and-run-font-generator() // This one only calls the other ones After you finish playing with settings just make a call on one mixin - which is: +config-and-run-font-generator(). See code below and comments for more information. I guess you could do it automatically for a media query like it is done for header tags, but we all use different media queries, so it would not be appropriate for everyone. I use a mobile-first design approach, so this is how I would do that. Feel free to copy and use this code. COPY AND PASTE THESE MIXINS TO YOUR FILE: =font-h1p-style-generator-manual() body font-family: \"Source Sans Pro\", \"Helvetica Neue\", Helvetica, Arial, sans-serif // google fonts font-size: 100% line-height: 1.3em %headers line-height: 1em font-weight: 700 p line-height: 1.3em font-weight: 300 @for $i from 1 through 6 h#{$i} @extend %headers =media-query-base-font-size-change-generator-manual() body font-size: 1.2em @media screen and (min-width: 680px) body font-size: 1.4em @media screen and (min-width: 1224px) body font-size: 1.6em @media screen and (min-width: 1400px) body font-size: 1.8em =h1p-font-size-generator-auto($h1-fs: 3em, $h1-step-down: 0.3, $body-min-font-size: 1.2em, $p-same-as-hx: 6) $h1-fs: $h1-fs // Set first header element to this size $h1-step-down: $h1-step-down // Decrement each time by 0.3 $p-same-as-hx: $p-same-as-hx // Set p font-sieze same as h(6) $h1-fs: $h1-fs + $h1-step-down // Looping correction @for $i from 1 through 6 h#{$i} font-size: $h1-fs - ($h1-step-down * $i) @if $i == $p-same-as-hx p font-size: $h1-fs - ($h1-step-down * $i) // RUN ONLY THIS MIXIN. IT WILL TRIGGER THE REST =config-and-run-font-generator() +font-h1p-style-generator-manual() // Just a place holder for our font style +media-query-base-font-size-change-generator-manual() // Just a placeholder for our media query font size +h1p-font-size-generator-auto($h1-fs: 2em, $h1-step-down: 0.2, $p-same-as-hx: 5) // Set all parameters here CONFIGURE ALL MIXINS TO YOUR NEEDS - PLAY WITH IT! :) AND THEN CALL IT ON THE TOP OF YOUR ACTUAL SASS CODE WITH: This would generate this output. You can customize parameters to generate different sets of results. However, because we all use different media queries, some mixins you will have to edit manually (style and media). body { font-family: \"Source Sans Pro\", \"Helvetica Neue\", Helvetica, Arial, sans-serif; font-size: 100%; line-height: 1.3em; word-wrap: break-word; } h1, h2, h3, h4, h5, h6 { line-height: 1em; font-weight: 700; } p { line-height: 1.3em; font-weight: 300; } body { font-size: 1.2em; } @media screen and (min-width: 680px) { body { font-size: 1.4em; } } @media screen and (min-width: 1224px) { body { font-size: 1.6em; } } @media screen and (min-width: 1400px) { body { font-size: 1.8em; } } h1 { font-size: 2em; } h2 { font-size: 1.8em; } h3 { font-size: 1.6em; } h4 { font-size: 1.4em; } h5 { font-size: 1.2em; } p { font-size: 1.2em; } h6 { font-size: 1em; }"
    },
    {
        "link": "https://reddit.com/r/web_design/comments/1hhvze7/best_practice_when_designing_for_large_screens",
        "document": "I only sort of know what I'm doing here. I'm designing a website in Webstudio, and am asking for advice more on theory than actual code. I understand the principles of designing for smaller screens - make it readable, use breakpoints.\n\nBut what about when designing for bigger screens? Should I make my elements and font size a fixed size, or should they all scale with the viewport width? I made a quick example of both - one that is responsive (Example A) and one that is fixed (Example B).\n\nWhile the font size of Example B looks suuuuuper tiny on large screens, should I assume that those with larger screen resolutions will also have monitors that are physically larger than my 25\" 1440p display, and therefore will be able to read that tiny font? And should I assume they'll have some sort of DPI setting cranked up, making it bigger anyway?\n\nOr should I assume that tiny fonts will look tiny on bigger displays, and scale all of my elements proportionally with the width, as in Example A? I understand responsive design is paramount when it comes to modern web design, so I'd love to learn what the best practice is here. Thanks!"
    },
    {
        "link": "https://w3schools.com/java/java_output.asp",
        "document": "You learned from the previous chapter that you can use the method to output values or print text in Java:\n\nYou can add as many methods as you want. Note that it will add a new line for each method:\n\nIf you forget the double quotes, an error occurs:\n\nThere is also a method, which is similar to .\n\nThe only difference is that it does not insert a new line at the end of the output:\n\nNote that we add an extra space (after \"Hello World!\" in the example above) for better readability."
    },
    {
        "link": "https://digitalocean.com/community/tutorials/java-8-features-with-examples",
        "document": "Java 8 was released on 18th March 2014. That’s a long time ago but still many projects are running on Java 8. It’s because it was a major release with a lot of new features. Let’s look at all the exciting and major features of Java 8 with example code.\n\nSome of the important Java 8 features are;\n\nLet’s have a brief look on these Java 8 features. I will provide some code snippets for better understanding the features in a simple way.\n\nWhenever we need to traverse through a Collection, we need to create an Iterator whose whole purpose is to iterate over, and then we have business logic in a loop for each of the elements in the Collection. We might get ConcurrentModificationException if the iterator is not used properly.\n\nJava 8 has introduced forEach method in java.lang.Iterable interface so that while writing code we focus on business logic. The forEach method takes java.util.function.Consumer object as an argument, so it helps in having our business logic at a separate location that we can reuse. Let’s see forEach usage with a simple example.\n\nThe number of lines might increase but forEach method helps in having the logic for iteration and business logic at separate place resulting in higher separation of concern and cleaner code.\n\nIf you read forEach method details carefully, you will notice that it’s defined in Iterable interface but we know that interfaces can’t have a method body. From Java 8, interfaces are enhanced to have a method with implementation. We can use and keyword to create interfaces with method implementation. forEach method implementation in Iterable interface is:\n\nWe know that Java doesn’t provide multiple inheritance in Classes because it leads to Diamond Problem. So how it will be handled with interfaces now since interfaces are now similar to abstract classes?\n\nThe solution is that compiler will throw an exception in this scenario and we will have to provide implementation logic in the class implementing the interfaces.\n\nNotice that both the interfaces have a common method log() with implementation logic.\n\nAs you can see that has static method implementation that is used in method implementation. Java 8 uses default and static methods heavily in Collection API and default methods are added so that our code remains backward compatible.\n\nIf any class in the hierarchy has a method with the same signature, then default methods become irrelevant. The Object is the base class, so if we have equals(), hashCode() default methods in the interface, it will become irrelevant. That’s why for better clarity, interfaces are not allowed to have Object default methods.\n\nFor complete details of interface changes in Java 8, please read Java 8 interface changes.\n\nIf you notice the above interface code, you will notice @FunctionalInterface annotation. Functional interfaces are a new concept introduced in Java 8. An interface with exactly one abstract method becomes a Functional Interface. We don’t need to use @FunctionalInterface annotation to mark an interface as a Functional Interface.\n\n@FunctionalInterface annotation is a facility to avoid the accidental addition of abstract methods in the functional interfaces. You can think of it like @Override annotation and it’s best practice to use it. java.lang.Runnable with a single abstract method run() is a great example of a functional interface.\n\nOne of the major benefits of the functional interface is the possibility to use lambda expressions to instantiate them. We can instantiate an interface with an anonymous class but the code looks bulky.\n\nSince functional interfaces have only one method, lambda expressions can easily provide the method implementation. We just need to provide method arguments and business logic. For example, we can write above implementation using lambda expression as:\n\nIf you have single statement in method implementation, we don’t need curly braces also. For example above Interface1 anonymous class can be instantiated using lambda as follows:\n\nSo lambda expressions are a means to create anonymous classes of functional interfaces easily. There are no runtime benefits of using lambda expressions, so I will use it cautiously because I don’t mind writing a few extra lines of code.\n\nA new package has been added with bunch of functional interfaces to provide target types for lambda expressions and method references. Lambda expressions are a huge topic, I will write a separate article on that in the future.\n\nYou can read complete tutorial at Java 8 Lambda Expressions Tutorial.\n\nA new has been added in Java 8 to perform filter/map/reduce like operations with the collection. Stream API will allow sequential as well as parallel execution. This is one of the best features for me because I work a lot with Collections and usually with Big Data, we need to filter out them based on some conditions.\n\nCollection interface has been extended with stream() and parallelStream() default methods to get the Stream for sequential and parallel execution. Let’s see their usage with a simple example.\n\nIf you will run above example code, you will get output like this:\n\nNotice that parallel processing values are not in order, so parallel processing will be very helpful while working with huge collections.\n\nCovering everything about Stream API is not possible in this post, you can read everything about Stream API at Java 8 Stream API Example Tutorial.\n\nIt has always been hard to work with Date, Time, and Time Zones in java. There was no standard approach or API in java for date and time in Java. One of the nice addition in Java 8 is the package that will streamline the process of working with time in java.\n\nJust by looking at Java Time API packages, I can sense that they will be very easy to use. It has some sub-packages java.time.format that provides classes to print and parse dates and times and java.time.zone provides support for time zones and their rules.\n\nThe new Time API prefers enums over integer constants for months and days of the week. One of the useful classes is DateTimeFormatter for converting DateTime objects to strings. For a complete tutorial, head over to Java Date Time API Example Tutorial.\n\nWe have already seen forEach() method and Stream API for collections. Some new methods added in Collection API are:\n• default method to perform the given action for each remaining element until all elements have been processed or the action throws an exception.\n• default method to remove all of the elements of this collection that satisfy the given predicate.\n• method returning Spliterator instance that can be used to traverse elements sequentially or parallel.\n• that may be explicitly completed (setting its value and status).\n• method to create a work-stealing thread pool using all available processors as its target parallelism level.\n\nSome IO improvements known to me are:\n• that returns a lazily populated Stream, the elements of which are the entries in the directory.\n• that reads all lines from a file as a Stream.\n• that returns a Stream that is lazily populated with Path by searching for files in a file tree rooted at a given starting file.\n• that return a Stream, the elements of which are lines read from this BufferedReader.\n\nSome miscellaneous API improvements that might come handy are:\n• The Comparator interface has been extended with a lot of default and static methods for natural ordering, reverse order, etc.\n• min(), max() and sum() methods in Integer, Long and Double wrapper classes.\n• ZipFile.stream() method to get an ordered Stream over the ZIP file entries. Entries appear in the Stream in the order they appear in the central directory of the ZIP file.\n\nThat’s all for Java 8 features with example programs. If I have missed some important features of Java 8, please let me know through comments."
    },
    {
        "link": "https://docs.oracle.com/javase/tutorial/java/data/numberformat.html",
        "document": "The Java Tutorials have been written for JDK 8. Examples and practices described in this page don't take advantage of improvements introduced in later releases and might use technology no longer available. See Dev.java for updated tutorials taking advantage of the latest releases. See Java Language Changes for a summary of updated language features in Java SE 9 and subsequent releases. See JDK Release Notes for information about new features, enhancements, and removed or deprecated options for all JDK releases.\n\nEarlier you saw the use of the and methods for printing strings to standard output ( ). Since all numbers can be converted to strings (as you will see later in this lesson), you can use these methods to print out an arbitrary mixture of strings and numbers. The Java programming language has other methods, however, that allow you to exercise much more control over your print output when numbers are included.\n\nThe package includes a class that has two formatting methods that you can use to replace and . These methods, and , are equivalent to one another. The familiar that you have been using happens to be a object, so you can invoke methods on . Thus, you can use or anywhere in your code where you have previously been using or . For example,\n\nThe syntax for these two methods is the same:\n\nwhere is a string that specifies the formatting to be used and is a list of the variables to be printed using that formatting. A simple example would be\n\nThe first parameter, , is a format string specifying how the objects in the second parameter, , are to be formatted. The format string contains plain text as well as format specifiers, which are special characters that format the arguments of . (The notation is called varargs, which means that the number of arguments may vary.)\n\nFormat specifiers begin with a percent sign (%) and end with a converter. The converter is a character indicating the type of argument to be formatted. In between the percent sign (%) and the converter you can have optional flags and specifiers. There are many converters, flags, and specifiers, which are documented in\n\nHere is a basic example:\n\nThe specifies that the single variable is a decimal integer. The is a platform-independent newline character. The output is:\n\nThe and methods are overloaded. Each has a version with the following syntax:\n\nTo print numbers in the French system (where a comma is used in place of the decimal place in the English representation of floating point numbers), for example, you would use:\n\nThe following table lists some of the converters and flags that are used in the sample program, , that follows the table.\n\nThe following program shows some of the formatting that you can do with . The output is shown within double quotes in the embedded comment:\n\nYou can use the class to control the display of leading and trailing zeros, prefixes and suffixes, grouping (thousands) separators, and the decimal separator. offers a great deal of flexibility in the formatting of numbers, but it can make your code more complex.\n\nThe example that follows creates a object, , by passing a pattern string to the constructor. The method, which inherits from , is then invoked by it accepts a value as an argument and returns the formatted number in a string:\n\nHere is a sample program that illustrates the use of :\n\nThe following table explains each line of output."
    },
    {
        "link": "https://geeksforgeeks.org/java-io-input-output-in-java-with-examples",
        "document": "Java brings various Streams with its I/O package that helps the user to perform all the input-output operations. These streams support all the types of objects, data-types, characters, files etc. to fully execute the I/O operations.\n\nBefore exploring various input and output streams let’s look at 3 standard or default streams that Java has to provide which are also most common in use:\n\nThis is the standard input stream(System.in) that is used to read characters from the keyboard or any other standard input device.\n\nThis is the standard output stream(System.out) that is used to produce the result of a program on an output device like the computer screen. Here is a list of the various print functions that we use to output statements:\n\n– print(): This method in Java is used to display a text on the console. This text is passed as the parameter to this method in the form of String. This method prints the text on the console and the cursor remains at the end of the text at the console. The next printing takes place from just here.\n\n– println(): This method in Java is also used to display a text on the console. It prints the text on the console and the cursor moves to the start of the next line at the console. The next printing takes place from the next line.\n\n– printf(): This is the easiest of all methods as this is similar to printf in C. Note that System.out.print() and System.out.println() take a single argument, but printf() may take multiple arguments. This is used to format the output in Java.\n\nTo demonstrate the usage of System.err with print():\n\nDepending on the type of operations, streams can be divided into two primary classes:\n\nInput Stream: These streams are used to read data that must be taken as an input from a source array or file or any peripheral device. For eg., FileInputStream, BufferedInputStream, ByteArrayInputStream etc.\n\nOutput Stream: These streams are used to write data as outputs into an array or file or any output peripheral device. For eg., FileOutputStream, BufferedOutputStream, ByteArrayOutputStream etc.\n\n\n\nDepending on the types of file, Streams can be divided into two primary classes which can be further divided into other classes as can be seen through the diagram below followed by the explanations.\n\nThis is used to process data byte by byte (8 bits). Though it has many classes, the FileInputStream and the FileOutputStream are the most popular ones. The FileInputStream is used to read from the source and FileOutputStream is used to write to the destination. Here is the list of various ByteStream Classes:\n\nIn Java, characters are stored using Unicode conventions (Refer this for details). Character stream automatically allows us to read/write data character by character. Though it has many classes, the FileReader and the FileWriter are the most popular ones. FileReader and FileWriter are character streams used to read from the source and write to the destination respectively. Here is the list of various CharacterStream Classes:"
    },
    {
        "link": "https://stackoverflow.com/questions/31020269/what-is-the-use-of-system-outprintln-in-java-8",
        "document": "I saw a code in java 8 to iterate a collection.\n\nWhat is the functionality of ? And how the above code can iterate through the List.\n\nAnd what is the use of the operator , Where else we can use this operator ?"
    }
]