[
    {
        "link": "https://stackoverflow.com/questions/8462996/how-can-i-play-a-single-tone-or-custom-wave-with-delphi",
        "document": "I looked up some code, seems like everything is creating some math function waves, but I want to a single tone, or a custom wave made with custom single tones.\n\nI read this How can I generate continuous tones of varying frequencies?\n\nWhich is close to my answer. Assumin I'm gonna use waveOutWrite like in the above link, I can't seem to figure out how the amp/freq is calculated for each Sample in HWAVEOUT.\n\nIn the code from the link It's done like this:\n\nAssuming I want a 15kHz freq single tone with some amp (does not matter which), how would a Sample[1] be calculated?"
    },
    {
        "link": "https://rosettacode.org/wiki/Sine_wave",
        "document": "The maximum allowed sound duration parameter in AmigaBASIC is 77 units. Since a second equals 18.2 sound units, this tone will only play for 4.23 seconds.\n\nCopy of Andreas Rejbrand example found here [1].\n\nNote that this code does not work on Windows because playing sound from Emacs Lisp data variables is not supported there.\n\nWhile the generated AU sound file is 16 bit, the samples themselves are 8 bit because only their high byte is set by the sine function. Therefore you will hear some faint hiss in the background due to the higher noise floor of 8-bit audio.\n\nThis (slightly slower) version of the function creates proper 16-bit samples by setting both high and low bytes, resulting in less playback noise.\n\nThis subroutine is able to generate complex sounds using only Windows API.\n\n' fill the first buffer with sine wave 'This is the base syntax, works exactly like in QB\n\n\n\n Go lacks audio support in its standard library and, whilst there are third party packages that could be used, an easier approach is to invoke the SoX utility's 'play' command as was done in the second Kotlin example.\n\nApproximately 1751 Hz (slightly flat A, two octaves above middle C), five seconds duration:\n\nFor simplicity, we use rely on a default wav sample rate of 11khz. Also, for simplicity, we are taking the sine of integer values (0, 1, 2, 3, 4, 5, 6), which gives us slightly more than six samples per cycle. 1e3 here represents the amplitude of our wave, which is interpreted as a signed 16 bit integer. So we're about 30 decibels below max volume (a factor of 10 in amplitude is a difference of 20 decibels):\n\nAn easier approach invoking the SoX utility's 'play' command which has this stuff built-in. The following was tested on Ubuntu 16.04.\n\nTo run this code in script mode you can add this at the beginning of the file:\n\nOr to compile to native code:\n\nCreates an AU file with the sine wave and plays it with VLC.\n\nWhat a horribly underspecified task. Ah well, gives me lots of wiggle room to cheat in various ways.\n\n( , ) = . ; = / ; , 'Generating sine wave of zero amplitude and zero frequency for 5 seconds...' , , ; ; , 'No?, ok how about this:' ; ; = ; = ( , : ) . ; . . ( => [ => , => , => , : [: , : , : ], : [ : , : ( ) ], ], ); ; \"Sine wave generated to {$filename.IO.absolute}, better open it quickly...\" ; ; ; ; 'Still no? Ok how about:' ; ;\n\nNote: This REXX program will work for PC/REXX or Personal REXX.\n\n\n\n Rust lacks audio support in its standard library. To keep this cross-OS functional, the code calls the SoX utility's 'play' command and plays an 'A' an octave below 440.\n\nUiua Pad has built-in audio support for suitable arrays, so this will play a standard A for 5 seconds.\n\nAs Wren-cli doesn't have any built-in audio support, we instead build a .wav file which can then be played using a utility such as rhythmbox or SoX,"
    },
    {
        "link": "https://stackoverflow.com/questions/19106640/runtime-sound-generation-in-c-on-windows",
        "document": "How might one generate audio at runtime using C++? I'm just looking for a starting point. Someone on a forum suggested I try to make a program play a square wave of a given frequency and amplitude.\n\nI've heard that modern computers encode audio using PCM samples: At a give rate for a specific unit of time (eg. 48 kHz), the amplitude of a sound is recorded at a given resolution (eg. 16-bits). If I generate such a sample, how do I get my speakers to play it? I'm currently using windows. I'd prefer to avoid any additional libraries if at all possible but I'd settle for a very light one.\n\nHere is my attempt to generate a square wave sample using this principal:\n\nAm I doing this correctly? If so, what do I do with the generated sample to get my speakers to play it?"
    },
    {
        "link": "https://forum.lazarus.freepascal.org/index.php?topic=52845.0",
        "document": "i need some help to generate square and sinusoidal waves\n\n\n\nIm using a Raspbery Pi 3 and i dont figure out how to generate my wave on this board ...\n\n\n\nI want to make a very simple program with 2 button:\n\n\n\nButton1: generate a 30hz squared wave\n\nButton2: generate a 55hz sinusoidal wave\n\n\n\nThats it! \n\n\n\nWhat is the easiest way to generate those wave? Witch pin is the easiest to use?\n\n\n\nThanks for your help Hi all, im new to this forum, and im a beginner with the raspberry pi (but i have programmed with lazarus/delphi till many years on windows system)i need some help to generate square and sinusoidal wavesIm using a Raspbery Pi 3 and i dont figure out how to generate my wave on this board...I want to make a very simple program with 2 button:Button1: generate a 30hz squared waveButton2: generate a 55hz sinusoidal waveThats it!What is the easiest way to generate those wave? Witch pin is the easiest to use?Thanks for your help\n\nIf it were windows I could show you how to do that using the sound system, at lease the Sine wave that is.\n\n\n\nBut you have a little mini there I am sure it does have some sort of facility for audio out.. But if you have a DAC (Digital To Analog Converter) you can gain access to as an output pin, I don't think 55Hz is too fast of a change for it..\n\n\n\n You can create the Sine wave using time sliced (timer) broken into steps (PCM) to set the output value of the DAC pin.\n\n\n\nDoes this sound like something you understand ?\n\n The only true wisdom is knowing you know nothing\n\n\n\n\n\ni dont know if its possible to do that only by code, or with a special library, or if i have to use an external circuit to generate wave.. this board is new to me..\n\n\n\nThe only thing i need is a code exemple that generate square/sinusoidal wave... (if its possible to do this only by code ) Sure i understand, the problem is that i not familiar with raspberry board.. on windows/delphi is a way more easier!i dont know if its possible to do that only by code, or with a special library, or if i have to use an external circuit to generate wave.. this board is new to me..The only thing i need is a code exemple that generate square/sinusoidal wave... (if its possible to do this only by code\n\nI've taken AVR and PIC chips and done that using PWM (Pulse width modulation) through a Resistor and CAP network into a buffer OP-Amp to\n\ngenerate the SINE wave by calculating the a PWM at high frequency rate so to create a Analog output and set the output to represent a sine wave.\n\n\n\n I am sure libs exist to do this but the pi is a little more than just a micro chip\n\n\n\n They made a few different Pi's which processor do you have ?\n\n The only true wisdom is knowing you know nothing\n\nWhat are you expecting it to come out of? Are you looking for an audio signal, a frequency on one of the GPIO pins, or what?\n\n\n\nMarkMLl\n\n \n\nLogitech, TopSpeed & FTL Modula-2 on bare metal (Z80, '286 protected mode).\n\nPet hate: people who boast about the size and sophistication of their computer.\n\nGitHub repositories: MT+86 & Turbo Pascal v1 on CCP/M-86, multitasking with LAN & graphics in 128Kb.Logitech, TopSpeed & FTL Modula-2 on bare metal (Z80, '286 protected mode).Pet hate: people who boast about the size and sophistication of their computer.GitHub repositories: https://github.com/MarkMLl?tab=repositories\n\nQuote from: jamie on January 12, 2021, 01:58:19 am I am sure libs exist to do this but the pi is a little more than just a micro chip\n\n \n\nA Raspberry Pi is a fully-fledged Linux-based computer, rather more than \"just a micro chip\".\n\n\n\nWhat that means in practice is that it's not possible to ackle signals directly, you've got to go through the OS hence\n\n\n\nhttps://wiki.freepascal.org/Raspberry_Pi#Native_hardware_access\n\n\n\nplus other links on that page.\n\n\n\nOne detail is that there are two different kernel APIs for accessing the GPIO pins: one goes through /sys and the other through /dev. I've played with the former a bit and I think it's possible to get a few 10s of Hz out of it, the latter should be more efficient.\n\n\n\nI don't know whether the underlying chip (or the OS support for it) has a counter/timer circuit which can generate a square wave directly.\n\n\n\nMarkMLl\n\n A Raspberry Pi is a fully-fledged Linux-based computer, rather more than \"just a micro chip\".What that means in practice is that it's not possible to ackle signals directly, you've got to go through the OS henceplus other links on that page.One detail is that there are two different kernel APIs for accessing the GPIO pins: one goes through /sys and the other through /dev. I've played with the former a bit and I think it's possible to get a few 10s of Hz out of it, the latter should be more efficient.I don't know whether the underlying chip (or the OS support for it) has a counter/timer circuit which can generate a square wave directly.MarkMLl \n\nLogitech, TopSpeed & FTL Modula-2 on bare metal (Z80, '286 protected mode).\n\nPet hate: people who boast about the size and sophistication of their computer.\n\nGitHub repositories: MT+86 & Turbo Pascal v1 on CCP/M-86, multitasking with LAN & graphics in 128Kb.Logitech, TopSpeed & FTL Modula-2 on bare metal (Z80, '286 protected mode).Pet hate: people who boast about the size and sophistication of their computer.GitHub repositories: https://github.com/MarkMLl?tab=repositories\n\nQuote from: Ramses on January 12, 2021, 02:38:04 pm I think that an audio signal is better for me, but a frequency on one pin is ok too, as long as i can read the signasl with an oscilloscope, its ok for me\n\n \n\nIn that case look at the stuff that Fred's given you, alternatively my equivalent \n\n\n\nBroadly speaking both of those came from the thread at \n\n\n\nI'd not recommend ackling a GPIO bit since it will be fairly erratic unless you have an RTOS (Real-Time Operating System) which Linux isn't.\n\n\n\nMarkMLl\n\n In that case look at the stuff that Fred's given you, alternatively my equivalent https://github.com/MarkMLl/asound Broadly speaking both of those came from the thread at https://forum.lazarus.freepascal.org/index.php/topic,49502.msg383415.html#msg383415 My code's got a lot of extra verbosity in it since it's intended to be usable with both static an dynamic linkage, but I think you'll find the specific example at https://github.com/MarkMLl/asound/blob/main/examples/alsapcmdemo.pas useful which is applicable to any ALSA interface.I'd not recommend ackling a GPIO bit since it will be fairly erratic unless you have an RTOS (Real-Time Operating System) which Linux isn't.MarkMLl \n\nLogitech, TopSpeed & FTL Modula-2 on bare metal (Z80, '286 protected mode).\n\nPet hate: people who boast about the size and sophistication of their computer.\n\nGitHub repositories: MT+86 & Turbo Pascal v1 on CCP/M-86, multitasking with LAN & graphics in 128Kb.Logitech, TopSpeed & FTL Modula-2 on bare metal (Z80, '286 protected mode).Pet hate: people who boast about the size and sophistication of their computer.GitHub repositories: https://github.com/MarkMLl?tab=repositories"
    },
    {
        "link": "https://sourceforge.net/directory?q=delphi%20sound%20wave%20project",
        "document": "\n• In this project, a perfect PCM sine wave is one that contains a single frequency at 0 dBTP and no error harmonics at all. A bit-perfect PCM sine wave has error harmonics due to encoding quantization, but they are at the minimum level possible for the chosen encoding. The generated wave files hold a sequence of one or more complete copies of a repeating pattern. A file containing a single pattern can be played in a loop to extend the play time. Because most audio players don't loop cleanly...\n• http://blackdiamond-fmodex.freeforums.net/ BlackDiamond (formerly Crazy Machine) is a project I neglected for years until I got back into making music. The package comes with free VST plugins (gonna hunt for some more) and samples, and soon to be introduced (If I can figure out the programming ms timelines) some point in time perfect sequencer sample mixer playback thingamagiggy we are now back in full armor trying to create the wildest dreams of software working on BlackDiamond (form. crazy...\n• A real-time 3D engine for DOS-talgics (see GLOBE_3D for new stuff !) Engine_3D is a real-time 3D engine project grabbed from my old data. The entire 3D rendering is pure software: no OpenGL or the like, no 3D graphics card acceleration! And: Engine_3D is completely programmed in Ada. Some parts of the 3D engine, like the animated bump mapping, are still waiting to be ported to my newer 3D project, GLOBE_3D !... DOS and Linux versions available. Remarks for the DOS version: It is also a funny example of a game system almost fully in Ada, including...\n• my own software project this music deal software .i develop in 2006. and use delphi .past so many years .it is old .i want upgrade it.give it more function.anybody that have like it. could join us . and first you could download the demo that have uploaded to PRJ.if possible i upload source codes later.and improve it together. thanks a lot.\n• Provides simple, platform-neutral way to handle an audio playback The idea behind this project is to provide simple, platform-neutral way to handle an audio playback. The audio component implements playing sounds for up to 8 channels, with pre-built fade and pan special effects. The volume and pan values could be controlled for a particular sound, as well for all the active sounds. Optionally, a client could listen to a sound's state change. Internally, the sounds are normalized for PCM audio format and 44100 sample rate, defaulting to 2 channels (stereo...\n• Realtime bigdata tool for bit strings up to 2^63 based on AVL forest Realtime bigdata tool at the bit level based on immutable AVL forest which can be run in memory or, in future versions, as a merkle forest like a blockchain. Main object is a sparse bit string (Bits) that efficiently scales up to 2^63 bits normally compressed as forest has duplicated substrings. Bits objects support reading bit, byte, short, int, or long (Java primitives) at any bit index in 64 bit range. Example: instead of building a class to hold a header and then data, represent all of...\n• Maestro is a free open source multiplatform virtual metronome, totally rethought to provide new functionalities to the user and a much better and easy-to-use interface. We know: there are lots of virtual metronomes, and many of them are also free software. However, there are no one like Maestro. Our professional team have produced a more ergonomic interface, powerfull but simple and easy. The inovative features were created in consonance with professional musicians and reflect their..."
    },
    {
        "link": "https://embarcadero.github.io/DelphiFMX4Python/reference/delphifmx.MediaPlayer.html",
        "document": "Nonvisual component for media file playback. Use a TMediaPlayer component for easy access to media files. The currently accessed media file is specified through the Media property. To specify the media file to be played by the current TMediaPlayer, set the FileName property. The file name must include the path of the file, so it can be localized on the memory, and the extension. Call the Play and Stop methods to start playing a media file, or to stop or pause a running media file. The current position is specified through the CurrentTime property. TMediaPlayer also exposes media file properties such as Duration, VideoSize, Volume or State. TMediaPlayer can play back audio files and the audio component of a video file. To display a video file, use a TMediaPlayerControl component. For more information, see Audio-Video in FireMonkey.\n\nNote: In order to play an audio file using TMediaPlayer, use the appropriate format: .wav on Windows .caf on iOS and OS X .3GP on Android\n\nSpecifies whether the component object has an associated action. Stores an array of children attached to this parent component. Read-only property that specifies the number of children in the children list. Specifies the interface reference implemented by the component. Indicates the position of the component in its owner's Components property array. Describes the current state of the component, indicating when a component needs to avoid certain actions. Governs the behavior of the component. Returns an iterator over the owned components Stores a Tvalue, which is a data structure that can store different kinds of data types. Contains information used by the Form designer. Specifies the total play time of the current media file attached to the media player. Specifies the media file name played by the current media player. Specifies the index of the child object in the children array attached to this object. Specifies the current TMedia attached to this media player. Specifies the name of the component as referenced in code. Indicates the TObservers object added to the TComponent. Specifies the root parent of this object. Specifies whether the current attached Media is playing or is stopped. Specifies whether this object is stored in the .XFM file. Specifies the style name for this FMX component. Stores a NativeInt integral value as a part of a component. Custom property that stores any floating-point value. Custom property that stores any object value. Custom property that stores any string value. Represents information used internally by components that support COM. Specifies the resolution of the current video file. Specifies the audio volume of the current media file.\n\nSpecifies the current TMedia attached to this media player. Call the Play and Stop methods to start playing, or to stop or pause the current Media file, respectively. Media is assigned and created when the FileName property is set. TMediaPlayer exposes the Media properties through the following properties: Duration, VideoSize, CurrentTime, Volume, and State. To empty the current Media attached to the media player, call the Clear method. If Media type is audio, then calling Play will start playing the audio file. If Media type is video, then calling Play will just play the audio component of the specified video file. To display a video file, use a TMediaPlayerControl, and link the current TMediaPlayer to it by setting the MediaPlayer property of the TMediaPlayerControl.\n\nSpecifies the resolution of the current video file. VideoSize specifies the native width and height of the current media file, in pixels. VideoSize is a TPointF. The X coordinate of the point represents the width of the window, and the Y coordinate of the point represents the height of the window. If the media file is audio only and does not have a window to be displayed, or if no media file is attached to the media player, then VideoSize is (0,0)."
    },
    {
        "link": "https://stackoverflow.com/questions/50341996/crossplatform-audio-support-in-delphi",
        "document": "There a few arcade game demos that have audio classes that you can use. See https://github.com/Embarcadero/DelphiArcadeGames\n\nYou can also see Is there an alternative to TMediaPlayer for multi platform rapid sound effects? for a description of some issues encountered on Android with the audio management class in these demos.\n\nWith the latest version of the audio manager provided in the games samples, the developer simply removes all notifications/checking that an audio file is actually loaded and ready to play. I personally did not like the idea of simply expecting the audio to be ready to play.\n\nMy audio management classes are a bit too complicated to simply post, but if you need this functionality hopefully this bit of pseudo code can offer some clues on how I addressed the short comings of the provided in the game demos.\n\nThe idea is to create a callback in my main application that is invoked when an audio file is ready to play. With a bit of web search, I found the following links to be helpful references for my implementation:\n\n1 - Define a notification type that will provide sufficient info on the audio file that is ready to play. Mine looks like this:\n\n2 - As per the documentation, define a class that handles . Note that the class utilizes our custom event defined as , which means that the will have to implement this callback:\n\n3 - Modify the audio manager class to implement the listener:\n\n4 - Implement the listener and wire the callback from the listener to our :\n\n5 - Last thing is to implement a callback in the main application:\n\nThen, where you create the , assign the new to a local procedure that I called :\n\nNow, when an audio file is ready to play, you should get notified:\n\nThis is definitely only bits and pieces, but hopefully can be helpful."
    },
    {
        "link": "https://docwiki.embarcadero.com/Libraries/Alexandria/en/FMX.Media.TMediaPlayer",
        "document": "Use a TMediaPlayer component for easy access to media files.\n\nThe currently accessed media file is specified through the Media property. To specify the media file to be played by the current TMediaPlayer, set the FileName property. The file name must include the path of the file, so it can be localized on the memory, and the extension. Call the Play and Stop methods to start playing a media file, or to stop or pause a running media file. The current position is specified through the CurrentTime property. TMediaPlayer also exposes media file properties such as Duration, VideoSize, Volume or State.\n\nTMediaPlayer can play back audio files and the audio component of a video file. To display a video file, use a TMediaPlayerControl component. For more information, see Audio-Video in FireMonkey."
    },
    {
        "link": "https://ptgmedia.pearsoncmg.com/images/0672317818/downloads/delphi5chapter18.pdf",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/67767488/display-the-seconds-of-tmediaplayer-duration-and-tmediaplayer-currenttime-using",
        "document": "I'm using Delphi 10.3 for developing android mobile application. I'm using the TMediaPlayer to play the mp3 files. I want to display the current time and remaining time of the currently playing media file with the minutes and seconds (mm:ss - ref: VLC media player). But I can able display the minutes properly and I want to display the seconds with the two digits.\n\nPlease help me to display the seconds properly.\n\nHere, I have mentioned the code that I have tried."
    }
]