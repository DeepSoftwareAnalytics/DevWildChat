[
    {
        "link": "https://github.com/IsaacGuan/Voronoi-Delaunay",
        "document": "This is an implementation and visualization of Voronoi diagram and Delaunay triangulation in C#.\n\nIn this implementation, Voronoi diagram is obtained from generating its dual, Delaunay triangulation, which is derived in a very simple manner, the Bowyer-Watson algorithm. The most naïve implementation of Bowyer-Watson algorithm takes O(n^2) time. With the help of the JavaScript implementation of @ironwallaby, the time complexity is reduced by sorting the points by x-coordinate and using an open list and a closed list to store Delaunay triangles in each insertion of point.\n\nFor constructing Voronoi diagram, a data structure is used of storing each point with a triangle list containing all the triangles incident on it. Thus, by traversing the triangle lists of the two end points, we can directly find the two adjacent triangles of a certain Delaunay edge and connect the centers of their circumcircles. As Delaunay triangulation is a planar graph, the procedure of finding adjacent triangles takes constant time and the total time of generating Voronoi diagram is O(n).\n\nIn addition, another version of this implementation can be found in the animation branch of this repository that shows the Bowyer-Watson algorithm in steps. You could visit my blog for more specifics of the implementation."
    },
    {
        "link": "https://github.com/OskarSigvardsson/unity-delaunay",
        "document": "I was interested in implementing some algorithms for generating Delaunay triangulations and Voronoi diagrams, and since it’s basically obligatory for anyone making Voronoi diagram libraries to make a destruction effect, this is mine!\n\nThe code is written in C#, and made for the Unity engine. If you want just the Delaunay/Voronoi parts, they’re in the Assets/Plugins/Delaunay folder. They’re not quite as polished as I would like, but I would say that they’re suitable for production. If you use it and have any problems, let me know! In fact, if you use it at all, I’d really appreciate hearing about it!\n\nI’m generating the Delaunay triangulation using the incremental algorithm (Bowyer-Watson), and generating the voronoi diagram from the delaunay triangulation. You can also clip the voronoi diagram to any convex shape (it uses Sutherland-Hodgman clipping, adapted to voronoi diagrams).\n\nThe fact that you can clip to any convex shape is neat, because it means you can “recursively” generate voronoi diagrams, so you can shatter already generated voronoi shards.\n\nAll the “generator” classes (the delaunay generator, the voronoi generator, and the voronoi clipper) are designed in such a way as to not generate any garbage if they are reused (though I’m currently not doing that in the example code). If you were to do this in a real game, it would be suitable to run the generators on background threads, though they’re certainly performant enough to run in real time in a single-threaded environment.\n\nI was going to develop this a bit further, but the limiting factor in this kind of destruction effect is the physics. If you generate these kinds of shards and let them pile up, the physics engine basically implodes. Given that that was the limitation, I sort-of lost interest in the project. As such, the non-Delaunay/Voronoi parts of the code are super-unoptimized and kind of a mess :)\n\nIt was an interesting experience to implement Bowyer-Watson, because I realized that virtually every implementation I could find online was wrong. The algorithm generates a Delaunay triangulation by first creating one big “container” triangle, and then iteratively adding sites to it splitting the big triangle into smaller triangles. However, the algorithm is only accurate if two of the vertices of the containing triangle are outside every circumcircle formed by any three points in the set points (the third vertex must be a “corner vertex” of sorts). Many implementations solve this by placing the vertices of the corners some large distance away, or by using some formula that guarantees that the triangle completely surrounds all the points (such as here or here).\n\nThis is a mistake. It’s not enough that the “super” triangle surrounds all the points, you have to guarantee that the two vertices are outside every possible circumcircle of any three points, and these circumcircles can very easily become huge. In fact, if three points are collinear, the “circumcircle” is essentially an infinite half-plane. Even if no three points are collinear, if they’re even close to collinear, the radius of the circle is massive. If you don’t account for this, the delaunay triangulation will not be correct. One easy way to spot incorrect implementations is that the the convex hull will not be part of the triangulation, and the convex hull is always part of the Delaunay triangulation. Virtually every implemention of this algorithm i could find online made this mistake, and you can often see it in the visualizations (here, for instance).\n\nTo do it right, you have to treat the vertices of the surrounding triangle as “symbolic” points. One way of thinking about them is that they’re sort of “infinitely” far away, but it’s more correct to say that they’re points with special rules for how they’re compared to the rest of the points. Computational Geometry: Algorithms and Applications describes this approach, but even they are wrong in one small detail: the test on the bottom on page 204 is wrong.\n\nThis experience has lead me to belive that using the incremental approach to generate Delaunay triangulations and Voronoi diagrams is a bad way to do it. It seems simpler to implement than other versions, but this subtlety with the containing triangle the fact that you have to construct an intricate tree structure makes the algorithm more complex and easier to get wrong than something like Quickhull or Fortune’s sweep-line algorithm. It’s also usually a bit slower. Still, it was a fun thing to implement, and having powered through it, you end up with a pretty stable and robust Delaunay/Voronoi calculator"
    },
    {
        "link": "https://discussions.unity.com/t/c-simple-voronoi-delaunay-diagrams-for-starters/69892",
        "document": ""
    },
    {
        "link": "https://mapbox.github.io/delaunator",
        "document": "After constructing a object, it will have a array and a array, both indexed by half-edge id. What’s a half-edge?\n• The half-edges of triangle t are , , and .\n\nWe can draw all the triangle edges without constructing the triangles themselves. Each edge is two half-edges. A half-edge e starts at . Its opposite starts at the other end, so that tells us the two endpoints of the edge. However, the half-edges along the convex hull won’t have an opposite, so will be -1, and will fail. To reliably find the other end of the edge, we need to instead use . We can loop through the half-edges and pick half of them to draw:\n\nA triangle is formed from three consecutive half-edges, , , . Each half-edge e starts at , so we can connect those three points into a triangle.\n\nNote that this requires any incoming half-edge that leads to the point. If you need a quick way to find such a half-edge given a point, it can be useful to build an index of these half-edges. For an example, see the modified version of at the end of the page."
    },
    {
        "link": "https://discussions.unity.com/t/help-with-delaunay-triangulation-using-specific-library/248737",
        "document": ""
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/api/system.windows.shapes.rectangle?view=windowsdesktop-9.0",
        "document": "Some information relates to prerelease product that may be substantially modified before it’s released. Microsoft makes no warranties, express or implied, with respect to the information provided here.\n\nThe following example shows how to create a Rectangle element and set its properties by using code.\n\nGets the rendered height of this element. (Inherited from FrameworkElement) Gets the rendered width of this element. (Inherited from FrameworkElement) Gets or sets a value indicating whether this element can be used as the target of a drag-and-drop operation. This is a dependency property. (Inherited from UIElement) Gets a value that indicates whether at least one touch is captured to this element. (Inherited from UIElement) Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree. (Inherited from UIElement) Gets a value that indicates whether at least one touch is pressed over this element. (Inherited from UIElement) Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree. (Inherited from UIElement) Gets or sets the BindingGroup that is used for the element. (Inherited from FrameworkElement) Gets or sets a bitmap effect that applies directly to the rendered content for this element. This is a dependency property. (Inherited from UIElement) Gets or sets an input source for the bitmap effect that applies directly to the rendered content for this element. This is a dependency property. (Inherited from UIElement) Gets or sets a cached representation of the UIElement. (Inherited from UIElement) Gets or sets the geometry used to define the outline of the contents of an element. This is a dependency property. (Inherited from UIElement) Gets or sets a value indicating whether to clip the content of this element (or content coming from the child elements of this element) to fit into the size of the containing element. This is a dependency property. (Inherited from UIElement) Gets a collection of CommandBinding objects associated with this element. A CommandBinding enables command handling for this element, and declares the linkage between a command, its events, and the handlers attached by this element. (Inherited from UIElement) Gets or sets the context menu element that should appear whenever the context menu is requested through user interface (UI) from within this element. (Inherited from FrameworkElement) Gets or sets the cursor that displays when the mouse pointer is over this element. (Inherited from FrameworkElement) Gets or sets the data context for an element when it participates in data binding. (Inherited from FrameworkElement) Gets or sets the key to use to reference the style for this control, when theme styles are used or defined. (Inherited from FrameworkElement) Gets a value that represents the Geometry of the Shape. (Inherited from Shape) Gets the DependencyObjectType that wraps the CLR type of this instance. (Inherited from DependencyObject) Gets the size that this element computed during the measure pass of the layout process. (Inherited from UIElement) Gets the Dispatcher this DispatcherObject is associated with. (Inherited from DispatcherObject) Gets or sets the bitmap effect to apply to the UIElement. This is a dependency property. (Inherited from UIElement) Gets or sets the Brush that specifies how the shape's interior is painted. (Inherited from Shape) Gets or sets the direction that text and other user interface (UI) elements flow within any parent element that controls their layout. (Inherited from FrameworkElement) Gets or sets a value that indicates whether the element can receive focus. This is a dependency property. (Inherited from UIElement) Gets or sets a property that enables customization of appearance, effects, or other style characteristics that will apply to this element when it captures keyboard focus. (Inherited from FrameworkElement) Gets or sets a value that indicates whether this FrameworkElement should force the user interface (UI) to render the cursor as declared by the Cursor property. (Inherited from FrameworkElement) Gets the Transform that is applied to this Rectangle. Gets a value indicating whether this element has any animated properties. (Inherited from UIElement) Gets a value that indicates whether the UIElement has focus. (Inherited from UIElement) Gets or sets the suggested height of the element. (Inherited from FrameworkElement) Gets or sets the horizontal alignment characteristics applied to this element when it is composed within a parent element, such as a panel or items control. (Inherited from FrameworkElement) Gets or sets the scope limits for property value inheritance, resource key lookup, and RelativeSource FindAncestor lookup. (Inherited from FrameworkElement) Gets the collection of input bindings associated with this element. (Inherited from UIElement) Gets or sets the context for input used by this FrameworkElement. (Inherited from FrameworkElement) Gets a value indicating whether the computed size and position of child elements in this element's layout are valid. (Inherited from UIElement) Gets or sets a value indicating whether this element is enabled in the user interface (UI). This is a dependency property. (Inherited from UIElement) Gets a value that becomes the return value of IsEnabled in derived classes. (Inherited from UIElement) Gets a value that determines whether this element has logical focus. This is a dependency property. (Inherited from UIElement) Gets or sets a value that declares whether this element can possibly be returned as a hit test result from some portion of its rendered content. This is a dependency property. (Inherited from UIElement) Gets a value that indicates whether this element has been initialized, either during processing by a XAML processor, or by explicitly having its EndInit() method called. (Inherited from FrameworkElement) Gets a value indicating whether an input method system, such as an Input Method Editor (IME), is enabled for processing the input to this element. (Inherited from UIElement) Gets a value indicating whether this element has keyboard focus. This is a dependency property. (Inherited from UIElement) Gets a value indicating whether keyboard focus is anywhere within the element or its visual tree child elements. This is a dependency property. (Inherited from UIElement) Gets a value that indicates whether this element has been loaded for presentation. (Inherited from FrameworkElement) Gets or sets a value that indicates whether manipulation events are enabled on this UIElement. (Inherited from UIElement) Gets a value indicating whether the current size returned by layout measure is valid. (Inherited from UIElement) Gets a value indicating whether the mouse is captured to this element. This is a dependency property. (Inherited from UIElement) Gets a value that determines whether mouse capture is held by this element or by child elements in its visual tree. This is a dependency property. (Inherited from UIElement) Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account. This is a dependency property. (Inherited from UIElement) Gets a value indicating whether the mouse pointer is located over this element (including child elements in the visual tree). This is a dependency property. (Inherited from UIElement) Gets a value that indicates whether this instance is currently sealed (read-only). (Inherited from DependencyObject) Gets a value indicating whether the stylus is captured by this element. This is a dependency property. (Inherited from UIElement) Gets a value that determines whether stylus capture is held by this element, or an element within the element bounds and its visual tree. This is a dependency property. (Inherited from UIElement) Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account. This is a dependency property. (Inherited from UIElement) Gets a value indicating whether the stylus cursor is located over this element (including visual child elements). This is a dependency property. (Inherited from UIElement) Gets a value indicating whether this element is visible in the user interface (UI). This is a dependency property. (Inherited from UIElement) Gets or sets localization/globalization language information that applies to an element. (Inherited from FrameworkElement) Gets or sets a graphics transformation that should apply to this element when layout is performed. (Inherited from FrameworkElement) Gets an enumerator for logical child elements of this element. (Inherited from FrameworkElement) Gets or sets the outer margin of an element. (Inherited from FrameworkElement) Gets or sets the maximum height constraint of the element. (Inherited from FrameworkElement) Gets or sets the maximum width constraint of the element. (Inherited from FrameworkElement) Gets or sets the minimum height constraint of the element. (Inherited from FrameworkElement) Gets or sets the minimum width constraint of the element. (Inherited from FrameworkElement) Gets or sets the identifying name of the element. The name provides a reference so that code-behind, such as event handler code, can refer to a markup element after it is constructed during processing by a XAML processor. (Inherited from FrameworkElement) Gets or sets the opacity factor applied to the entire UIElement when it is rendered in the user interface (UI). This is a dependency property. (Inherited from UIElement) Gets or sets an opacity mask, as a Brush implementation that is applied to any alpha-channel masking for the rendered content of this element. This is a dependency property. (Inherited from UIElement) Gets or sets a value that indicates whether this element incorporates style properties from theme styles. (Inherited from FrameworkElement) Gets the logical parent element of this element. (Inherited from FrameworkElement) Gets a value that uniquely identifies this element. (Inherited from UIElement) Gets or sets the x-axis radius of the ellipse that is used to round the corners of the rectangle. Gets or sets the y-axis radius of the ellipse that is used to round the corners of the rectangle. Gets a Geometry object that represents the final rendered shape. Gets (or sets) the final render size of this element. (Inherited from UIElement) Gets or sets transform information that affects the rendering position of this element. This is a dependency property. (Inherited from UIElement) Gets or sets the center point of any possible render transform declared by RenderTransform, relative to the bounds of the element. This is a dependency property. (Inherited from UIElement) Gets or sets the locally-defined resource dictionary. (Inherited from FrameworkElement) Gets or sets a value that determines whether rendering for this element should use device-specific pixel settings during rendering. This is a dependency property. (Inherited from UIElement) Gets or sets a Stretch enumeration value that describes how the shape fills its allocated space. (Inherited from Shape) Gets or sets the Brush that specifies how the Shape outline is painted. (Inherited from Shape) Gets or sets a collection of Double values that indicate the pattern of dashes and gaps that is used to outline shapes. (Inherited from Shape) Gets or sets a PenLineCap enumeration value that specifies how the ends of a dash are drawn. (Inherited from Shape) Gets or sets a Double that specifies the distance within the dash pattern where a dash begins. (Inherited from Shape) Gets or sets a PenLineCap enumeration value that describes the Shape at the end of a line. (Inherited from Shape) Gets or sets a PenLineJoin enumeration value that specifies the type of join that is used at the vertices of a Shape. (Inherited from Shape) Gets or sets a limit on the ratio of the miter length to half the StrokeThickness of a Shape element. (Inherited from Shape) Gets or sets a PenLineCap enumeration value that describes the Shape at the start of a Stroke. (Inherited from Shape) Gets or sets the width of the Shape outline. (Inherited from Shape) Gets or sets the style used by this element when it is rendered. (Inherited from FrameworkElement) Gets a collection of all stylus plug-in (customization) objects associated with this element. (Inherited from UIElement) Gets or sets an arbitrary object value that can be used to store custom information about this element. (Inherited from FrameworkElement) Gets a reference to the template parent of this element. This property is not relevant if the element was not created through a template. (Inherited from FrameworkElement) Gets or sets the tool-tip object that is displayed for this element in the user interface (UI). (Inherited from FrameworkElement) Gets all touch devices that are captured to this element. (Inherited from UIElement) Gets all touch devices that are captured to this element or any child elements in its visual tree. (Inherited from UIElement) Gets all touch devices that are over this element. (Inherited from UIElement) Gets all touch devices that are over this element or any child elements in its visual tree. (Inherited from UIElement) Gets the collection of triggers established directly on this element, or in child elements. (Inherited from FrameworkElement) Gets or sets the unique identifier (for localization) for this element. This is a dependency property. (Inherited from UIElement) Gets or sets a value that indicates whether layout rounding should be applied to this element's size and position during layout. (Inherited from FrameworkElement) Gets or sets the vertical alignment characteristics applied to this element when it is composed within a parent element such as a panel or items control. (Inherited from FrameworkElement) Gets or sets the user interface (UI) visibility of this element. This is a dependency property. (Inherited from UIElement) Gets or sets the BitmapEffect value for the Visual. (Inherited from Visual) Gets or sets the BitmapEffectInput value for the Visual. (Inherited from Visual) Gets or sets the BitmapScalingMode for the Visual. (Inherited from Visual) Gets or sets a cached representation of the Visual. (Inherited from Visual) Gets the number of visual child elements within this element. (Inherited from FrameworkElement) Gets or sets the ClearTypeHint that determines how ClearType is rendered in the Visual. (Inherited from Visual) Gets or sets the clip region of the Visual as a Geometry value. (Inherited from Visual) Gets or sets the edge mode of the Visual as an EdgeMode value. (Inherited from Visual) Gets or sets the bitmap effect to apply to the Visual. (Inherited from Visual) Gets or sets the offset value of the visual object. (Inherited from Visual) Gets or sets the opacity of the Visual. (Inherited from Visual) Gets or sets the Brush value that represents the opacity mask of the Visual. (Inherited from Visual) Gets the visual tree parent of the visual object. (Inherited from Visual) Gets or sets a clipped scrollable area for the Visual. (Inherited from Visual) Gets or sets the TextHintingMode of the Visual. (Inherited from Visual) Gets or sets the TextRenderingMode of the Visual. (Inherited from Visual) Gets or sets the Transform value for the Visual. (Inherited from Visual) Gets or sets the x-coordinate (vertical) guideline collection. (Inherited from Visual) Gets or sets the y-coordinate (horizontal) guideline collection. (Inherited from Visual) Gets or sets the width of the element. (Inherited from FrameworkElement)\n\nOccurs just before any context menu on the element is closed. (Inherited from FrameworkElement) Occurs when any context menu on the element is opened. (Inherited from FrameworkElement) Occurs when the data context for this element changes. (Inherited from FrameworkElement) Occurs when the input system reports an underlying drag event with this element as the drag target. (Inherited from UIElement) Occurs when the input system reports an underlying drag event with this element as the drag origin. (Inherited from UIElement) Occurs when the input system reports an underlying drag event with this element as the potential drop target. (Inherited from UIElement) Occurs when the input system reports an underlying drop event with this element as the drop target. (Inherited from UIElement) Occurs when the value of the Focusable property changes. (Inherited from UIElement) Occurs when the input system reports an underlying drag-and-drop event that involves this element. (Inherited from UIElement) Occurs when this element gets logical focus. (Inherited from UIElement) Occurs when the keyboard is focused on this element. (Inherited from UIElement) Occurs when this element captures the mouse. (Inherited from UIElement) Occurs when this element captures the stylus. (Inherited from UIElement) Occurs when a touch is captured to this element. (Inherited from UIElement) Occurs when this FrameworkElement is initialized. This event coincides with cases where the value of the IsInitialized property changes from (or undefined) to . (Inherited from FrameworkElement) Occurs when the value of the IsEnabled property on this element changes. (Inherited from UIElement) Occurs when the value of the IsHitTestVisible dependency property changes on this element. (Inherited from UIElement) Occurs when the value of the IsKeyboardFocused property changes on this element. (Inherited from UIElement) Occurs when the value of the IsKeyboardFocusWithin property changes on this element. (Inherited from UIElement) Occurs when the value of the IsMouseCaptured property changes on this element. (Inherited from UIElement) Occurs when the value of the IsMouseCaptureWithinProperty changes on this element. (Inherited from UIElement) Occurs when the value of the IsMouseDirectlyOver property changes on this element. (Inherited from UIElement) Occurs when the value of the IsStylusCaptured property changes on this element. (Inherited from UIElement) Occurs when the value of the IsStylusCaptureWithin property changes on this element. (Inherited from UIElement) Occurs when the value of the IsStylusDirectlyOver property changes on this element. (Inherited from UIElement) Occurs when the value of the IsVisible property changes on this element. (Inherited from UIElement) Occurs when a key is pressed while focus is on this element. (Inherited from UIElement) Occurs when a key is released while focus is on this element. (Inherited from UIElement) Occurs when the layout of the various visual elements associated with the current Dispatcher changes. (Inherited from UIElement) Occurs when the element is laid out, rendered, and ready for interaction. (Inherited from FrameworkElement) Occurs when the keyboard is no longer focused on this element. (Inherited from UIElement) Occurs when a manipulation and inertia on the UIElement object is complete. (Inherited from UIElement) Occurs when the input device changes position during a manipulation. (Inherited from UIElement) Occurs when the input device loses contact with the UIElement object during a manipulation and inertia begins. (Inherited from UIElement) Occurs when an input device begins a manipulation on the UIElement object. (Inherited from UIElement) Occurs when the manipulation processor is first created. (Inherited from UIElement) Occurs when any mouse button is pressed while the pointer is over this element. (Inherited from UIElement) Occurs when the mouse pointer enters the bounds of this element. (Inherited from UIElement) Occurs when the mouse pointer leaves the bounds of this element. (Inherited from UIElement) Occurs when the left mouse button is pressed while the mouse pointer is over this element. (Inherited from UIElement) Occurs when the left mouse button is released while the mouse pointer is over this element. (Inherited from UIElement) Occurs when the mouse pointer moves while over this element. (Inherited from UIElement) Occurs when the right mouse button is pressed while the mouse pointer is over this element. (Inherited from UIElement) Occurs when the right mouse button is released while the mouse pointer is over this element. (Inherited from UIElement) Occurs when any mouse button is released over this element. (Inherited from UIElement) Occurs when the user rotates the mouse wheel while the mouse pointer is over this element. (Inherited from UIElement) Occurs when the input system reports an underlying drag event with this element as the drag target. (Inherited from UIElement) Occurs when the input system reports an underlying drag event with this element as the drag origin. (Inherited from UIElement) Occurs when the input system reports an underlying drag event with this element as the potential drop target. (Inherited from UIElement) Occurs when the input system reports an underlying drop event with this element as the drop target. (Inherited from UIElement) Occurs when the keyboard is focused on this element. (Inherited from UIElement) Occurs when a key is pressed while focus is on this element. (Inherited from UIElement) Occurs when a key is released while focus is on this element. (Inherited from UIElement) Occurs when the keyboard is no longer focused on this element. (Inherited from UIElement) Occurs when any mouse button is pressed while the pointer is over this element. (Inherited from UIElement) Occurs when the left mouse button is pressed while the mouse pointer is over this element. (Inherited from UIElement) Occurs when the left mouse button is released while the mouse pointer is over this element. (Inherited from UIElement) Occurs when the mouse pointer moves while the mouse pointer is over this element. (Inherited from UIElement) Occurs when the right mouse button is pressed while the mouse pointer is over this element. (Inherited from UIElement) Occurs when the right mouse button is released while the mouse pointer is over this element. (Inherited from UIElement) Occurs when any mouse button is released while the mouse pointer is over this element. (Inherited from UIElement) Occurs when the user rotates the mouse wheel while the mouse pointer is over this element. (Inherited from UIElement) Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation. (Inherited from UIElement) Occurs when the stylus button is pressed while the pointer is over this element. (Inherited from UIElement) Occurs when the stylus button is released while the pointer is over this element. (Inherited from UIElement) Occurs when the stylus touches the digitizer while it is over this element. (Inherited from UIElement) Occurs when the stylus moves over an element without actually touching the digitizer. (Inherited from UIElement) Occurs when the stylus is close enough to the digitizer to be detected, while over this element. (Inherited from UIElement) Occurs when the stylus moves while over the element. The stylus must move while being detected by the digitizer to raise this event, otherwise, PreviewStylusInAirMove is raised instead. (Inherited from UIElement) Occurs when the stylus is too far from the digitizer to be detected. (Inherited from UIElement) Occurs when a user performs one of several stylus gestures. (Inherited from UIElement) Occurs when the user raises the stylus off the digitizer while the stylus is over this element. (Inherited from UIElement) Occurs when this element gets text in a device-independent manner. (Inherited from UIElement) Occurs when a finger touches the screen while the finger is over this element. (Inherited from UIElement) Occurs when a finger moves on the screen while the finger is over this element. (Inherited from UIElement) Occurs when a finger is raised off of the screen while the finger is over this element. (Inherited from UIElement) Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation. (Inherited from UIElement) Occurs when the cursor is requested to display. This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position. (Inherited from UIElement) Occurs when BringIntoView(Rect) is called on this element. (Inherited from FrameworkElement) Occurs when either the ActualHeight or the ActualWidth properties change value on this element. (Inherited from FrameworkElement) Occurs when the source value changes for any existing property binding on this element. (Inherited from FrameworkElement) Occurs when the stylus button is pressed while the pointer is over this element. (Inherited from UIElement) Occurs when the stylus button is released while the pointer is over this element. (Inherited from UIElement) Occurs when the stylus touches the digitizer while the stylus is over this element. (Inherited from UIElement) Occurs when the stylus enters the bounds of this element. (Inherited from UIElement) Occurs when the stylus moves over an element without actually touching the digitizer. (Inherited from UIElement) Occurs when the stylus is close enough to the digitizer to be detected, while over this element. (Inherited from UIElement) Occurs when the stylus leaves the bounds of the element. (Inherited from UIElement) Occurs when the stylus moves over this element. The stylus must move while on the digitizer to raise this event. Otherwise, StylusInAirMove is raised instead. (Inherited from UIElement) Occurs when the stylus is too far from the digitizer to be detected, while over this element. (Inherited from UIElement) Occurs when a user performs one of several stylus gestures. (Inherited from UIElement) Occurs when the user raises the stylus off the digitizer while it is over this element. (Inherited from UIElement) Occurs when the target value changes for any property binding on this element. (Inherited from FrameworkElement) Occurs when this element gets text in a device-independent manner. (Inherited from UIElement) Occurs just before any tooltip on the element is closed. (Inherited from FrameworkElement) Occurs when any tooltip on the element is opened. (Inherited from FrameworkElement) Occurs when a finger touches the screen while the finger is over this element. (Inherited from UIElement) Occurs when a touch moves from outside to inside the bounds of this element. (Inherited from UIElement) Occurs when a touch moves from inside to outside the bounds of this element. (Inherited from UIElement) Occurs when a finger moves on the screen while the finger is over this element. (Inherited from UIElement) Occurs when a finger is raised off of the screen while the finger is over this element. (Inherited from UIElement) Occurs when the element is removed from within an element tree of loaded elements. (Inherited from FrameworkElement)"
    },
    {
        "link": "https://learn.microsoft.com/en-us/windows/windows-app-sdk/api/winrt/microsoft.ui.composition.rectangleclip?view=windows-app-sdk-1.6",
        "document": "is functionally similar to InsetClip, but allows you to round the corners of the clipping rectangle.\n\nA is defined using offsets in pixels from the bottom, left, right, and top of the Visual to be clipped. You can round the corners of the rectangle by setting the various Radius properties.\n\nTo clip a , you assign the to the Clip property of the .\n\nIt is possible to fully clip the entire . Negative values are allowed. supports all the same transforms as except the 4x4 matrix. Unlike , is 2D and is defined, instead, with a 3x2 matrix. properties are fully animatable.\n\nThe point on the clip to be positioned at the clip's offset. Value is normalized with respect to the size of the clip. (Inherited from CompositionClip) Gets or sets the offset from the bottom of the visual. The portion of the visual below the edge defined by will be clipped. Animatable. Gets or sets the amount by which the bottom left corner of the rectangle is rounded. Gets or sets the amount by which the bottom right corner of the rectangle is rounded. The point about which rotation or scaling occurs. (Inherited from CompositionClip) A string to associate with the CompositionObject. (Inherited from CompositionObject) The Compositor used to create this CompositionObject. (Inherited from CompositionObject) Gets the DispatcherQueue for the CompositionObject. (Inherited from CompositionObject) The collection of implicit animations attached to this object. (Inherited from CompositionObject) Gets or sets the offset from the left of the visual. The portion of the visual to the left of the edge defined by will be clipped. Animatable. The offset of the clip relative to the visual on which the clip is applied. (Inherited from CompositionClip) The collection of properties associated with the CompositionObject. (Inherited from CompositionObject) Gets or sets the offset from the right of the visual. The portion of the visual to the right the edge defined by will be clipped. Animatable. The angle of rotation applied to the clip, in radians. (Inherited from CompositionClip) The angle of rotation applied to the clip, in degrees. (Inherited from CompositionClip) The scale to apply to the clip. (Inherited from CompositionClip) Gets or sets the offset from the top of the visual. The portion of the visual above the edge defined by will be clipped. Animatable. Gets or sets the amount by which the top left corner of the rectangle is rounded. Gets or sets the amount by which the top right corner of the rectangle is rounded. The 3x2 transformation matrix to apply to the clip. (Inherited from CompositionClip) Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. (Inherited from CompositionObject) Defines a property that can be animated. (Inherited from CompositionObject) Connects an animation with the specified property of the object and starts the animation. (Inherited from CompositionObject) Connects an animation with the specified property of the object and starts the animation. (Inherited from CompositionObject) The StartAnimationGroup method on CompositionObject lets you start CompositionAnimationGroup. All the animations in the group will be started at the same time on the object. (Inherited from CompositionObject) Disconnects an animation from the specified property and stops the animation. (Inherited from CompositionObject) Returns an AnimationController for the animation running on the specified property. (Inherited from CompositionObject)"
    },
    {
        "link": "https://stackoverflow.com/questions/29646930/graphics-drawstring-clipping-text-off-while-rectangle-still-have-more-room",
        "document": "I have something like this:\n\nThere are 3 rectangles of the same size width 60px each.\n\nI realise the is trimming off my 'M' of 10 & 11 AM. However, if you examine how the red line cuts off the 'A's, you see the first row of 'A' from 9:00 AM seats a couple pixels further away than the 2 A's below it, but AM didn't get trimmed off.\n\nThat means, actually the rectangles DO still have enough space to fit the 'M' in, we can tell from the red line, but choose to clip it off instead, why? How to fix it?"
    },
    {
        "link": "https://stackoverflow.com/questions/37171300/how-to-clip-an-image-by-a-shape-other-than-a-rectangle",
        "document": "We are clipping an image by a rectangle as can be seen in the attached image:\n\nThe image inside, shaped like the sun, is clipped to a rectangle inside the purple house shaped polygon. However I would like clip the Sun to the entire house shaped polygon.\n\nI was using XAML code like this:\n\nHowever XAML for UWP allows only RectangleGeometry.\n\nIs there another way to achieve the clipping?"
    },
    {
        "link": "https://ironsoftware.com/open-source/csharp/drawing/object-reference/api/IronSoftware.Drawing.Rectangle.html",
        "document": "A universally compatible Rectangle for .NET 7, .NET 6, .NET 5, and .NET Core. As well as compatibility with Windows, NanoServer, IIS, macOS, Mobile, Xamarin, iOS, Android, Google Compute, Azure, AWS, and Linux. Works nicely with popular Image Rectangle such as System.Drawing.Rectangle, SkiaSharp.SKRect, SixLabors.ImageSharp.Rectangle, Microsoft.Maui.Graphics.Rect. Implicit casting means that using this class to input and output Rectangle from public APIs gives full compatibility to all Rectangle type fully supported by Microsoft."
    }
]