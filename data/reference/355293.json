[
    {
        "link": "https://api.jqueryui.com/sortable",
        "document": "Description: Reorder elements in a list or grid using the mouse.\n\nType: or or jQuery or Element or Selector or String Defines where the helper that moves with the mouse is being appended to during the drag (for example, to resolve overlap/zIndex issues). Multiple types supported:\n• jQuery: A jQuery object containing the element to append the helper to.\n• Element: The element to append the helper to.\n• Selector: A selector specifying which element to append the helper to.\n• String: The string will cause the helper to be a sibling of the sortable item. Code examples: Initialize the sortable with the option specified: Get or set the option, after initialization: If defined, the items can be dragged only horizontally or vertically. Possible values: , . Code examples: Initialize the sortable with the option specified: Get or set the option, after initialization: Prevents sorting if you start on elements matching the selector. Code examples: Initialize the sortable with the option specified: Get or set the option, after initialization: Specify additional classes to add to the widget's elements. Any of classes specified in the Theming section can be used as keys to override their value. To learn more about this option, check out the learn article about the option. Code examples: Initialize the sortable with the option specified, changing the theming for the class: Get or set a property of the option, after initialization, here reading and changing the theming for the class: A selector of other sortable elements that the items from this list should be connected to. This is a one-way relationship, if you want the items to be connected in both directions, the option must be set on both sortable elements. Code examples: Initialize the sortable with the option specified: Get or set the option, after initialization: Defines a bounding box that the sortable items are constrained to while dragging. Note: The element specified for containment must have a calculated width and height (though it need not be explicit). For example, if you have sortable children and specify be sure to have on the sortable/parent container as well or it will have , causing undefined behavior. Multiple types supported:\n• Element: An element to use as the container.\n• Selector: A selector specifying an element to use as the container.\n• String: A string identifying an element to use as the container. Possible values: , , . Code examples: Initialize the sortable with the option specified: Get or set the option, after initialization: Defines the cursor that is being shown while sorting. Code examples: Initialize the sortable with the option specified: Get or set the option, after initialization: Moves the sorting element or helper so the cursor always appears to drag from the same position. Coordinates can be given as a hash using a combination of one or two keys: . Code examples: Initialize the sortable with the option specified: Get or set the option, after initialization: Time in milliseconds to define when the sorting should start. Adding a delay helps preventing unwanted drags when clicking on an element. Code examples: Initialize the sortable with the option specified: Get or set the option, after initialization: Disables the sortable if set to . Code examples: Initialize the sortable with the option specified: Get or set the option, after initialization: Tolerance, in pixels, for when sorting should start. If specified, sorting will not start until after mouse is dragged beyond distance. Can be used to allow for clicks on elements within a handle. Code examples: Initialize the sortable with the option specified: Get or set the option, after initialization: , items from this sortable can't be dropped on an empty connect sortable (see the If, items from this sortable can't be dropped on an empty connect sortable (see the option. Code examples: Initialize the sortable with the option specified: Get or set the option, after initialization: If , forces the helper to have a size. Code examples: Initialize the sortable with the option specified: Get or set the option, after initialization: If true, forces the placeholder to have a size. Code examples: Initialize the sortable with the option specified: Get or set the option, after initialization: Snaps the sorting element or helper to a grid, every x and y pixels. Array values: . Code examples: Initialize the sortable with the option specified: Get or set the option, after initialization: Restricts sort start click to the specified element. Code examples: Initialize the sortable with the option specified: Get or set the option, after initialization: Allows for a helper element to be used for dragging display. Multiple types supported:\n• String: If set to , then the element will be cloned and the clone will be dragged.\n• Function: A function that must return a jQuery or DOMElement to use while dragging. The function receives the event and the jQuery element being sorted. Code examples: Initialize the sortable with the option specified: Get or set the option, after initialization: Specifies which items inside the element should be sortable. Code examples: Initialize the sortable with the option specified: Get or set the option, after initialization: Defines the opacity of the helper while sorting. From to . Code examples: Initialize the sortable with the option specified: Get or set the option, after initialization: A class name that gets applied to the otherwise white space. Code examples: Initialize the sortable with the option specified: Get or set the option, after initialization: Whether the sortable items should revert to their new positions using a smooth animation. Multiple types supported:\n• Boolean: When set to , the items will animate with the default duration.\n• Number: The duration for the animation, in milliseconds. Code examples: Initialize the sortable with the option specified: Get or set the option, after initialization: If set to true, the page scrolls when coming to an edge. Code examples: Initialize the sortable with the option specified: Get or set the option, after initialization: Defines how near the mouse must be to an edge to start scrolling. Code examples: Initialize the sortable with the option specified: Get or set the option, after initialization: The speed at which the window should scroll once the mouse pointer gets within the distance. Code examples: Initialize the sortable with the option specified: Get or set the option, after initialization:\n• : The item overlaps the other item by at least 50%.\n• : The mouse pointer overlaps the other item. Specifies which mode to use for testing whether the item being moved is hovering over another item. Possible values: Code examples: Initialize the sortable with the option specified: Get or set the option, after initialization: Z-index for element/helper while being sorted. Code examples: Initialize the sortable with the option specified: Get or set the option, after initialization:\n\nCancels a change in the current sortable and reverts it to the state prior to when the current sort was started. Useful in the stop and receive callback functions.\n• None This method does not accept any arguments. Removes the sortable functionality completely. This will return the element back to its pre-init state.\n• None This method does not accept any arguments.\n• None This method does not accept any arguments.\n• None This method does not accept any arguments. Retrieves the sortable's instance object. If the element does not have an associated instance, is returned. Unlike other widget methods, is safe to call on any element after the sortable plugin has loaded.\n• None This method does not accept any arguments. Gets the value currently associated with the specified . Note: For options that have objects as their value, you can get the value of a specific key by using dot notation. For example, would get the value of the property on the option.\n• The name of the option to get. Gets an object containing key/value pairs representing the current sortable options hash.\n• None This signature does not accept any arguments. Sets the value of the sortable option associated with the specified . Note: For options that have objects as their value, you can set the value of just one property by using dot notation for . For example, would update only the property of the option.\n• The name of the option to set.\n• A value to set for the option. Sets one or more options for the sortable. Refresh the sortable items. Triggers the reloading of all sortable items, causing new items to be recognized.\n• None This method does not accept any arguments. Refresh the cached positions of the sortable items. Calling this method refreshes the cached item positions of all sortables.\n• None This method does not accept any arguments. Serializes the sortable's item s into a form/ajax submittable string. Calling this method produces a hash that can be appended to any url to easily submit a new item order back to the server. It works by default by looking at the of each item in the format , and it spits out a hash like . Note: If serialize returns an empty string, make sure the attributes include an underscore. They must be in the form: For example, a 3 element list with attributes , , will serialize to . You can use an underscore, equal sign or hyphen to separate the set and number. For example , , and all serialize to .\n• \n• key (default: the part of the attribute in front of the separator ) Replaces with the specified value.\n• The name of the attribute to use for the values.\n• A regular expression used to split the attribute value into key and value parts. Serializes the sortable's item id's into an array of string.\n• \n• The name of the attribute to use for the values.\n• None This method does not accept any arguments.\n\nThis event is triggered when using connected lists, every connected list on drag start receives it.\n• \n• The jQuery object representing the helper being sorted.\n• The current absolute position of the helper represented as .\n• The current position of the helper represented as .\n• The original position of the element represented as .\n• The sortable that the item comes from if moving from one sortable to another.\n• The jQuery object representing the element being used as a placeholder. Code examples: Initialize the sortable with the activate callback specified: Bind an event listener to the sortactivate event: This event is triggered when sorting stops, but when the placeholder/helper is still available.\n• \n• The jQuery object representing the helper being sorted.\n• The current absolute position of the helper represented as .\n• The current position of the helper represented as .\n• The original position of the element represented as .\n• The sortable that the item comes from if moving from one sortable to another.\n• The jQuery object representing the element being used as a placeholder. Code examples: Initialize the sortable with the beforeStop callback specified: Bind an event listener to the sortbeforestop event: This event is triggered during sorting, but only when the DOM position has changed.\n• \n• The jQuery object representing the helper being sorted.\n• The current absolute position of the helper represented as .\n• The current position of the helper represented as .\n• The original position of the element represented as .\n• The sortable that the item comes from if moving from one sortable to another.\n• The jQuery object representing the element being used as a placeholder. Code examples: Initialize the sortable with the change callback specified: Bind an event listener to the sortchange event: Triggered when the sortable is created. Note: The object is empty but included for consistency with other events. Code examples: Initialize the sortable with the create callback specified: Bind an event listener to the sortcreate event: This event is triggered when sorting was stopped, is propagated to all possible connected lists.\n• \n• The jQuery object representing the helper being sorted.\n• The current absolute position of the helper represented as .\n• The current position of the helper represented as .\n• The original position of the element represented as .\n• The sortable that the item comes from if moving from one sortable to another.\n• The jQuery object representing the element being used as a placeholder. Code examples: Initialize the sortable with the deactivate callback specified: Bind an event listener to the sortdeactivate event: This event is triggered when a sortable item is moved away from a sortable list. Note: This event is also triggered when a sortable item is dropped.\n• \n• The jQuery object representing the helper being sorted.\n• The current absolute position of the helper represented as .\n• The current position of the helper represented as .\n• The original position of the element represented as .\n• The sortable that the item comes from if moving from one sortable to another.\n• The jQuery object representing the element being used as a placeholder. Code examples: Initialize the sortable with the out callback specified: Bind an event listener to the sortout event: This event is triggered when a sortable item is moved into a sortable list.\n• \n• The jQuery object representing the helper being sorted.\n• The current absolute position of the helper represented as .\n• The current position of the helper represented as .\n• The original position of the element represented as .\n• The sortable that the item comes from if moving from one sortable to another.\n• The jQuery object representing the element being used as a placeholder. Code examples: Initialize the sortable with the over callback specified: Bind an event listener to the sortover event: This event is triggered when an item from a connected sortable list has been dropped into another list. The latter is the event target.\n• \n• The jQuery object representing the helper being sorted.\n• The current absolute position of the helper represented as .\n• The current position of the helper represented as .\n• The original position of the element represented as .\n• The sortable that the item comes from if moving from one sortable to another.\n• The jQuery object representing the element being used as a placeholder. Code examples: Initialize the sortable with the receive callback specified: Bind an event listener to the sortreceive event: This event is triggered when a sortable item from the list has been dropped into another. The former is the event target.\n• \n• The jQuery object representing the helper being sorted.\n• The current absolute position of the helper represented as .\n• The current position of the helper represented as .\n• The original position of the element represented as .\n• The jQuery object representing the element being used as a placeholder. Code examples: Initialize the sortable with the remove callback specified: Bind an event listener to the sortremove event: This event is triggered during sorting.\n• \n• The jQuery object representing the helper being sorted.\n• The current absolute position of the helper represented as .\n• The current position of the helper represented as .\n• The original position of the element represented as .\n• The sortable that the item comes from if moving from one sortable to another.\n• The jQuery object representing the element being used as a placeholder. Code examples: Initialize the sortable with the sort callback specified: Bind an event listener to the sort event: This event is triggered when sorting starts.\n• \n• The jQuery object representing the helper being sorted.\n• The current absolute position of the helper represented as .\n• The current position of the helper represented as .\n• The original position of the element represented as .\n• The sortable that the item comes from if moving from one sortable to another.\n• The jQuery object representing the element being used as a placeholder. Code examples: Initialize the sortable with the start callback specified: Bind an event listener to the sortstart event: This event is triggered when sorting has stopped.\n• \n• The jQuery object representing the helper being sorted.\n• The current absolute position of the helper represented as .\n• The current position of the helper represented as .\n• The original position of the element represented as .\n• The sortable that the item comes from if moving from one sortable to another.\n• The jQuery object representing the element being used as a placeholder. Code examples: Initialize the sortable with the stop callback specified: Bind an event listener to the sortstop event:"
    },
    {
        "link": "https://stackoverflow.com/questions/52894832/using-sortable-on-dynamically-created-ul",
        "document": "This is probably an easy question for someone who uses JQuery regularly. I am simply reading a list from S3 into an array and using\n\nto build a ul inside of a div with an id of my-list. It looks something like this:\n\nI have the sortable function as:\n\nHere's the problem. If I hard code the ul into my HTML body as it is show above, the sortable code runs fine. It adds the ui-sortable class to the ul and li elements as it is supposed to. If I build the ul dynamically using getElementById, the base HTML renders exactly the same, but sortable does not add the classes.\n\nDoes this have something to do with the order in which the DOM is executing? I simply can't figure it out and can not find another example of this anywhere. Completely open to other ideas as well."
    },
    {
        "link": "https://jqueryui.com/sortable",
        "document": "Reorder elements in a list or grid using the mouse.\n\nEnable a group of DOM elements to be sortable. Click on and drag an element to a new spot within the list, and the other items will adjust to fit. By default, sortable items share properties.\n\nWant to learn more about the sortable interaction? Check out the API documentation."
    },
    {
        "link": "https://stackoverflow.com/questions/15633341/jquery-ui-sortable-then-write-order-into-a-database",
        "document": "The jQuery UI feature includes a method to do this. It's quite simple, really. Here's a quick example that sends the data to the specified URL as soon as an element has changes position.\n\nWhat this does is that it creates an array of the elements using the elements . So, I usually do something like this:\n\nWhen you use the option, it will create a POST query string like this: etc. So if you make use - for example - your database IDs in the attribute, you can then simply iterate through the POSTed array and update the elements' positions accordingly.\n\nFor example, in PHP:"
    },
    {
        "link": "https://krnk97.medium.com/sorting-rearranging-html-elements-using-jquery-ui-a-small-guide-with-example-777abca5a8ad",
        "document": "Now, let us add some content on the page that we would like to rearrange or sort.\n\nI will make a parent div with some children elements inside it. These children will then be sortable amongst themselves. Sibling divs are sortable amongst each other only. However, you can make elements from different parents merge together or sort amongst each other as well. That is something you can read about here and implement it yourself easily, I will keep this post small so I won't go into that here.\n\nConsidering that you want to sort only the divs from the same parent —\n\nAll the first-level children of one parent will be sortable amongst themselves. Similarly, all the first level ( just one level under — meaning, all children divs must be the same level inside the parent to be sortable amongst each other ) children of any other div will also be sortable amongst themselves only."
    },
    {
        "link": "https://github.com/SortableJS/Sortable",
        "document": "\n• Can drag from one list to another or within the same list\n• Supports drag handles and selectable text (better than voidberg's html5sortable)\n• No jQuery required (but there is support)\n• Sorting with the help of HTML5 Drag'n'Drop API (December 23, 2013)\n\nYou can use any element for the list and its elements, not just / . Here is an example with s.\n\n: : : // time in milliseconds to define when the sorting should start : // only delay if user is using touch : // px, how many pixels the point should move before cancelling a delayed drag event : // Disables the sortable if set to true. : : : // Easing for animation. Defaults to null. See https://easings.net/ for examples. : : // Selectors that do not lead to dragging (String or Function) : : // Specifies which items inside the element should be draggable : // HTML attribute that is used by the `toArray()` method : // Class name for the drop placeholder : // Class name for the chosen item : // Class name for the dragging item : : // Will always use inverted swap zone if set to true : // Threshold of the inverted swap zone (will be set to swapThreshold value by default) : // Direction of Sortable (will be detected automatically if not given) : // ignore the HTML5 DnD behaviour and force the fallback to kick in : // Class name for the cloned DOM Element when using forceFallback : // Appends the cloned DOM Element into the Document's Body : // Specify in pixels how far the mouse should move before it's considered as a drag. : : // Remove the clone element when it is not showing, rather than just hiding it : // px, distance mouse must be from empty sortable to insert drag element into it : : : : : // element's old index within old parent // element's new index within new parent // element's old index within old parent, only counting draggable elements // element's new index within new parent, only counting draggable elements // when item is in another sortable: `\"clone\"` if cloning, `true` if moving // Element is dropped into the list from another list : : // Called by any change to the list (add / update / remove) : // Element is removed from the list into another list : : // Event when you move an item in the list or between lists : // HTMLElement on which have guided // Boolean that is true if Sortable will insert drag element after target by default // return true; — keep default insertion point based on the direction // return void; — keep default insertion point based on the direction : : // most likely why this event is used is to get the dragging element's current index\n\nTo drag elements from one list into another, both lists must have the same value. You can also define whether lists can give away, give and keep a copy ( ), and receive elements.\n• pull: — ability to move from the list. — copy the item, rather than move. Or an array of group names which the elements may be put in. Defaults to .\n• put: — whether elements can be added from other lists, or an array of group names from which elements can be added.\n• revertClone: — revert cloned element to initial position after moving to a another list.\n• https://jsbin.com/nacoyah/edit?js,output — use of complex logic in the and\n\nTime in milliseconds to define when the sorting should start. Unfortunately, due to browser restrictions, delaying is not possible on IE or Edge with native drag & drop.\n\nWhether or not the delay should be applied only if the user is using touch (eg. on a mobile device). No delay will be applied in any other case. Defaults to .\n\nPercentage of the target that the swap zone will take up, as a float between and .\n\nSet to to set the swap zone to the sides of the target, for the effect of sorting \"in between\" items.\n\nPercentage of the target that the inverted swap zone will take up, as a float between and . If not given, will default to .\n\nDirection that the Sortable should sort in. Can be set to , , or a function, which will be called whenever a target is dragged over. Must return or .\n\nExample of direction detection for vertical list that includes full column and half column elements:\n\nThis option is similar to option.\n\nWhen the option is set, some phones with very sensitive touch displays like the Samsung Galaxy S8 will fire unwanted touchmove events even when your finger is not moving, resulting in the sort not triggering.\n\nThis option sets the minimum pointer movement that must occur before the delayed sorting is cancelled.\n\nValues between 3 to 5 are good.\n\nDisables the sortable if set to .\n\nTo make list items draggable, Sortable disables text selection by the user. That's not always desirable. To allow text selection, define a drag handler, which is an area of every list element that allows it to be dragged around.\n\nClass name for the drop placeholder (default ).\n\nClass name for the chosen item (default ).\n\nIf set to , the Fallback for non HTML5 Browser will be used, even if we are using an HTML5 Browser. This gives us the possibility to test the behaviour for older Browsers even in newer Browser, or make the Drag 'n Drop feel more consistent between Desktop , Mobile and old Browsers.\n\nOn top of that, the Fallback always generates a copy of that DOM Element and appends the class defined in the options. This behaviour controls the look of this 'dragged' Element.\n\nEmulates the native drag threshold. Specify in pixels how far the mouse should move before it's considered as a drag. Useful if the items are also clickable like in a list of links.\n\nWhen the user clicks inside a sortable element, it's not uncommon for your hand to move a little between the time you press and the time you release. Dragging only starts if you move the pointer past a certain tolerance, so that you don't accidentally start dragging every time you click.\n\n3 to 5 are probably good values.\n\nIf set to , the dragover event will bubble to parent sortables. Works on both fallback and native dragover event. By default, it is false, but Sortable will only stop bubbling the event once the element has been inserted into a parent Sortable, or can be inserted into a parent Sortable, but isn't at that specific time (due to animation, etc).\n\nSince 1.8.0, you will probably want to leave this option as false. Before 1.8.0, it may need to be for nested sortables to work.\n\nIf set to , the clone is hidden by having it's CSS property set to . By default, this option is , meaning Sortable will remove the cloned element from the DOM when it is supposed to be hidden.\n\nThe distance (in pixels) the mouse must be from an empty sortable while dragging for the drag element to be inserted into that sortable. Defaults to . Set to to disable this feature.\n\nAn alternative to this option would be to set a padding on your list when it is empty.\n\nWarning: For to work, it must have no node inside (even text one).\n• to: — list, in which moved element\n• oldDraggableIndex: — old index within parent, only counting draggable elements\n• newDraggableIndex: — new index within parent, only counting draggable elements\n• pullMode: — Pull mode if dragging into another sortable ( , , or ), otherwise undefined\n• related: — element on which have guided\n• willInsertAfter: — if will element be inserted after target (or if before)\n\nGet or set the option.\n\nFor each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\n\nSerializes the sortable's item 's ( option) into an array of string.\n\nSorts the elements according to the array.\n\nSaving and restoring of the sort.\n\nGet the Sortable instance on an element.\n• css(el ) — get the values of all the CSS properties\n• css(el , prop ) — get the value of style properties\n• find(ctx , tagName [, iterator ]) — get elements by tag name\n• bind(ctx , fn ) — Takes a function and returns a new one that will always have a particular context\n• is(el , selector ) — check the current matched set of elements against a selector\n• closest(el , selector [, ctx ]) — for each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree\n• clone(el ) — create a deep copy of the set of matched elements\n• toggleClass(el , name , state ) — add or remove one classes from each element\n• detectDirection(el ) — automatically detect the direction of the element as either or\n• index(el , selector ) — index of the element within its parent for a selected set of elements\n• getChild(el , childNum , options , includeDragEl ): — get the draggable element at a given index of draggable elements within a Sortable instance\n• expando — expando property name for internal use, sortableListElement[expando] returns the Sortable instance of that elemenet\n\nThis project exists thanks to all the people who contribute. [Contribute].\n\nBecome a financial contributor and help us sustain our community. [Contribute]\n\nSupport this project with your organization. Your logo will show up here with a link to your website. [Contribute]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    {
        "link": "https://sortablejs.github.io/Sortable",
        "document": "Try dragging from one list to another. The item you drag will be cloned and the clone will stay in the original list. new Sortable(example3Left, { group: { name: 'shared', pull: 'clone' // To clone: set pull to 'clone' }, animation: 150 }); new Sortable(example3Right, { group: { name: 'shared', pull: 'clone' }, animation: 150 });\n\nTry sorting the list on the left. It is not possible because it has it's option set to false. However, you can still drag from the list on the left to the list on the right. new Sortable(example4Left, { group: { name: 'shared', pull: 'clone', put: false // Do not allow items to be put into this list }, animation: 150, sort: false // To disable sorting: set sort to false }); new Sortable(example4Right, { group: 'shared', animation: 150 });\n\nTry dragging the item with a red background. It cannot be done, because that item is filtered out using the option. new Sortable(example6, { filter: '.filtered', // 'filtered' class is not draggable animation: 150 });\n\nTry modifying the inputs below to affect the swap thresholds. You can see the swap zones of the squares colored in dark blue, while the \"dead zones\" (that do not cause a swap) are colored in light blue.\n\nNOTE: When using nested Sortables with animation, it is recommended that the option is set to true. \n\nIt is also always recommended that either the option is set to true, or the option is lower than the default value of 1 (eg ). // Loop through each nested sortable element for (var i = 0; i < nestedSortables.length; i++) { new Sortable(nestedSortables[i], { group: 'nested', animation: 150, fallbackOnBody: true, swapThreshold: 0.65 }); }\n\nThe MultiDrag plugin allows for multiple items to be dragged at a time. You can click to \"select\" multiple items, and then drag them as one item. new Sortable(multiDragDemo, { multiDrag: true, // Enable multi-drag selectedClass: 'selected', // The class applied to the selected items fallbackTolerance: 3, // So that we can select items on mobile animation: 150 });\n\nThe Swap plugin changes the behaviour of Sortable to allow for items to be swapped with eachother rather than sorted. new Sortable(swapDemo, { swap: true, // Enable swap plugin swapClass: 'highlight', // The class applied to the hovered swap item animation: 150 });"
    },
    {
        "link": "https://stackoverflow.com/questions/60690619/simulating-drag-and-drop-on-a-sortablejs-sortable-list-using-javascript",
        "document": "I'm attempting to simulate a drag and drop action on a sortable HTML list created using the Sortable library. It uses the native HTML5 API to implement draggable elements and sorting within a list.\n\nTo simulate these drag events, I found and modified the following JavaScript code:\n\nAnd the markup of the section I'm trying to drag and drop with is as follows:\n\nWhen I tried to set breakpoints on the browser's drag event listeners, and execute the helper function in my browser console using:\n\nI noticed that the dragstart event was never captured, but the mousedown and dragover events were.\n\nHow can I get the dragstart event fire to trigger its listener? Because I think that is what's causing the drag and drop simulation to fail."
    },
    {
        "link": "https://github.com/SortableJS/Sortable/wiki/Sorting-with-the-help-of-HTML5-Drag%27n%27Drop-API",
        "document": "Sortable.js is a minimalistic library for modern browsers and touch devices that doesn't require jQuery. As you may have guessed from its name, the library was developed for sorting elements by means of drag’n’drop. Standard solution in this case is jQuery UI/Sortable, and that’s 64kB + 10kB, neither more and no less. The result is 75kB of gzipped in a project, where jQuery is not used at all.\n\nApart from problems with weight, all libraries that I’ve found were unable to work with a dynamically varying list. At the moment of plug-in initialization, they were defining positions of all elements; to refresh them, we had to reinitialize the plug-in, or to call method, which is quite inconvenient. Since my task didn’t require supporting old browsers, I’ve tried to create the functionality I needed in pure JS with the use of HTML5 Drag’n’Drop.\n\nAfter reading the related articles, it turned out that today it is very simple to create such functionality, it can even be made with 25 lines only (without commentaries and spacing):\n\nAs it may be noticed from the code, the whole sorting process consists of simple movement of the dragged element by means of , where is an element that was targeted. If you have already tested the example, you must have noticed that it is impossible to move an element to the first position. One more peculiarity of this method is that is called each time, even if the element was not moved.\n\nIn order to fix the first problem, all we have to do is to add testing during sorting. It is necessary to insert an element after target.nextSibling only in case it is not the first element of the list:\n\nBesides that, simply saving a link to the next element in the moment allows us to get rid of the second problem (http://jsfiddle.net/RubaXa/zLq5J/4/, lines 29 and 38).\n\nOn the face of it, everything looks fine, we have a compact and intelligible code that is supported by the majority of browsers, and if we add the support of attachEvent and remove , then the code will work even in IE5.5 :]\n\nBut if we change the example a little bit by simply increasing height of list elements, we will have a third problem. Sorting works fine from the top downward, but it works poorly from the bottom upwards. That’s why we need to rewrite the logic of element inserting or so that it would consider, in which half the mouse cursor is located (upper or lower). For this purpose, we acquire element coordinates against the screen at and check, in which half the cursor is located:\n\nUnfortunately, drag’n’drop doesn’t work on touch devices. That’s why we needed to create some sort of emulation based on touch-events. I have been scratching my had over this for a long time, read documentation, but never found an answer. Finally, after digging a little bit more, I remembered one more excellent method document.elementFromPoint, which allows to obtain a link to an element by coordinates.\n\nAs the result, I clone the element that will play the role of a “ghost” under the finger at , and move it by means of at :\n\nBesides that, I initiate , where I check the current element under the finger every 100ms:\n\nThat’s it, as you can see, there’s nothing supernatural. Now, we need to draw up a code, write some documentation, and the micro library is ready.\n\nThe library turned out to weight 2kB gzipped and has the following capabilities:\n• Ability to set the elements to be sorted (css-selector);\n• Ability to set handle (an element that can be dragged);\n• A class that is added to the moved element;\n\nToday, only basic functionality is available. I would be glad to receive any feedback or pull request, thanks for your attention."
    },
    {
        "link": "https://sortabledraglib.vercel.app",
        "document": "In In sortable-draggable-js , any item can be sortable using new Sortable() method. new Sortable() takes two arguments, The first one is item which have to be sorted and second one takes options object where any customization can be applied.Below are the examples with every option so let get started with Demo's examples !\n\nIt is the simple list, All elements are targeted one by one in a loop and became sortable. it takes single element for sorting unlike other libraries which takes Sortable parent only.\n\nThe containers can also be sortable and appendable at same time.It is also targeted by new Sortable() method. I am container and also sortable I am container and also sortable I am container and also sortable I am container and also sortable\n\nFallback Element takes HTML element which will drop instead of sortable element.It will prevent from sorting and will drop a provided html fallback Element if fallbackClone option is false which is defaults to true then it will drop single Element means if you drop an Element and start drop on another container, The previous one will replace from it instead of dropping another one Check Options API below for more information.This uses fallBackElement and fallBackClone option.\n\nIn some cases, page has CSS zoom which works same as transform : scale(); property, and dragging libraries get disturbed from zoom, to prevent this disturbation,we proviided zoom and zoomedElement The contrast between both options are if you know the value of zoom of your page or page zoom is static and will not change then you can go for zoom option but if your page has dynamic or changeable zoom then you will need to pass zoomedElement option which is recommonded method because it will check it's css zoom property on every sort start which ranges between 0-1. I will not work perfect after zoom I will not work perfect after zoom const containers = sections[4]?.querySelectorAll(\".sortable-container\"); containers[0].querySelectorAll(\".sort\").forEach(function(item, i) { const sortable = new Sortable(item); }); containers[1].querySelectorAll(\".sort\").forEach(function(item, i) { const sortable = new Sortable(item, { zoomedElement: item.closest(\".containers-example\"), // or zoom option like zoom : 0.5 }); });\n\nAny item can be disable after sortable. new Sortable() method returns another method for disable like item.disable(),To re-enable it can be re-enable by passing false into disbale method parameter like item.disable(false) and any class can applied through disabledClass option. document.querySelectorAll(\".sort\").forEach(function(item) { const sortable = new Sortable(item, { disabledClass: \"disabled\", }); if (i % 2 !== 0) { // for even const oldHTML = item.innerHTML; sortable.disable(); item.innerHTML = \"Click me to Re-Enable\"; function reEnable() { sortable.disable(false); item.removeEventListener(\"click\", reEnable); item.innerHTML = oldHTML; }; item.addEventListener(\"click\", reEnable); } });\n\nThe example uses handle option. defaults to false, if this option recieves html string or DOM object it will be showed to handle and if it recieve true, the default handle will render any css Class for handle can be pass using handleClass option."
    },
    {
        "link": "https://github.com/bevacqua/dragula",
        "document": "Try out the demo!\n\nHave you ever wanted a drag and drop library that just works? That doesn't just depend on bloated frameworks, that has great support? That actually understands where to place the elements when they are dropped? That doesn't need you to do a zillion things to get it to work? Well, so did I!\n• Figures out sort order on its own\n• A shadow where the item would be dropped offers visual feedback\n\nYou can get it on npm.\n\nIf you're not using either package manager, you can use by downloading the files in the folder. We strongly suggest using , though.\n\nThere's a caveat to . You shouldn't include it in the of your web applications. It's bad practice to place scripts in the , and as such makes no effort to support this use case.\n\nPlace in the , instead.\n\nThere's a few CSS styles you need to incorporate in order for to work as expected.\n\nYou can add them by including or in your document. If you're using Stylus, you can include the styles using the directive below.\n\nDragula provides the easiest possible API to make drag and drop a breeze in your applications.\n\nBy default, will allow the user to drag an element in any of the and drop it in any other container in the list. If the element is dropped anywhere that's not one of the , the event will be gracefully cancelled according to the and options.\n\nNote that dragging is only triggered on left clicks, and only if no meta keys are pressed.\n\nThe example below allows the user to drag elements from into , and from into .\n\nYou can also provide an object. Here's an overview of the default values.\n\nYou can omit the argument and add containers dynamically later on.\n\nYou can also set the from the object.\n\nAnd you could also not set any arguments, which defaults to a drake without containers and with the default options.\n\nThe options are detailed below.\n\nSetting this option is effectively the same as passing the containers in the first argument to .\n\nBesides the containers that you pass to , or the containers you dynamically or from drake.containers, you can also use this method to specify any sort of logic that defines what is a container for this particular instance.\n\nThe example below dynamically treats all DOM elements with a CSS class of as dragula containers for this .\n\nYou can define a method which will be invoked with whenever an element is clicked. If this method returns , a drag event won't begin, and the event won't be prevented either. The element will be the original click target, which comes in handy to test if that element is an expected \"drag handle\".\n\nYou can set to a method with the following signature: . It'll be called to make sure that an element , that came from container , can be dropped on container before a element. The can be , which would mean that the element would be placed as the last element in the container. Note that if is set to , will be set to the copy, instead of the originally dragged element.\n\nAlso note that the position where a drag starts is always going to be a valid place where to drop the element, even if returned for all cases.\n\nIf is set to (or a method that returns ), items will be copied rather than moved. This implies the following differences:\n\nIf a method is passed, it'll be called whenever an element starts being dragged in order to decide whether it should follow behavior or not. Consider the following example.\n\nIf is set to (or a method that returns ) and is as well, users will be able to sort elements in -source containers.\n\nBy default, spilling an element outside of any containers will move the element back to the drop position previewed by the feedback shadow. Setting to will ensure elements dropped outside of any approved containers are moved back to the source element where the drag event began, rather than stay at the drop position previewed by the feedback shadow.\n\nBy default, spilling an element outside of any containers will move the element back to the drop position previewed by the feedback shadow. Setting to will ensure elements dropped outside of any approved containers are removed from the DOM. Note that events won't fire if is set to .\n\nWhen an element is dropped onto a container, it'll be placed near the point where the mouse was released. If the is , the default value, the Y axis will be considered. Otherwise, if the is , the X axis will be considered.\n\nYou can provide an method with a signature. This method should return for elements that shouldn't trigger a drag. The argument is the element that was clicked, while is the item that would be dragged. Here's the default implementation, which doesn't prevent any drags.\n\nNote that will be invoked on the DOM element that was clicked and every parent up to immediate children of a container.\n\nAs an example, you could set to return whenever the clicked element (or any of its parents) is an anchor tag.\n\nThe DOM element where the mirror element displayed while dragging will be appended to. Defaults to .\n\nWhen this option is enabled, if the user clicks on an input element the drag won't start until their mouse pointer exits the input. This translates into the user being able to select text in inputs contained inside draggable elements, and still drag the element by moving their mouse outside of the input -- so you get the best of both worlds.\n\nThis option is enabled by default. Turn it off by setting it to . If its disabled your users won't be able to select text in inputs within containers with their mouse.\n\nThe method returns a tiny object with a concise API. We'll refer to the API returned by as .\n\nThis property contains the collection of containers that was passed to when building this instance. You can more containers and old containers at will.\n\nThis property will be whenever an element is being dragged.\n\nEnter drag mode without a shadow. This method is most useful when providing complementary keyboard shortcuts to an existing drag and drop solution. Even though a shadow won't be created at first, the user will get one as soon as they click on and start dragging it around. Note that if they click and drag something else, will be called before picking up the new item.\n\nGracefully end the drag event as if using the last position marked by the preview shadow as the drop target. The proper or event will be fired, depending on whether the item was dropped back where it was originally lifted from (which is essentially a no-op that's treated as a event).\n\nIf an element managed by is currently being dragged, this method will gracefully cancel the drag action. You can also pass in at the method invocation level, effectively producing the same result as if was .\n\nNote that a \"cancellation\" will result in a event only in the following scenarios.\n• Drop target (as previewed by the feedback shadow) is the source container and the item is dropped in the same position where it was originally dragged from\n\nIf an element managed by is currently being dragged, this method will gracefully remove it from the DOM.\n\nThe is an event emitter. The following events can be tracked using :\n\nReturns whether the instance can accept drags for a DOM element . This method returns when all the conditions outlined below are met, and otherwise.\n• is a child of one of the specified containers for\n\nRemoves all drag and drop events used by to manage drag and drop between the . If is called while an element is being dragged, the drag will be effectively cancelled.\n\nDragula uses only four CSS classes. Their purpose is quickly explained below, but you can check to see the corresponding CSS rules.\n• is added to the element when dragging. You can use it to style the while something is being dragged.\n• is added to the source element when its mirror image is dragged. It just adds opacity to it.\n• is added to the mirror image. It handles fixed positioning and (and removes any prior margins on the element). Note that the mirror image is appended to the , not to its initial container. Keep that in mind when styling your elements with nested rules, like .\n• is a helper class to apply to an element.\n\nWe have a dedicated support channel in Slack. See this issue to get an invite. Support requests won't be handled through the repository."
    },
    {
        "link": "https://bevacqua.github.io/dragula",
        "document": "Drag and drop so simple it hurts\n\nMove stuff between these two containers. Note how the stuff gets inserted near the mouse pointer? Great stuff. You can move these elements between these two containers Moving them anywhere else isn't quite possible Anything can be moved around. That includes images, links , or any other nested elements. There's also the possibility of moving elements around in the same container, changing their position This is the default use case. You only need to specify the containers you want to use Moving elements works just fine. You can still focus them, too. Make sure to check out the documentation on GitHub!\n\nThere are plenty of events along the lifetime of a drag event. Check out all of them in the docs! As soon as you start dragging an element, a event is fired Whenever an element is cloned because , a event fires The event fires whenever the placeholder showing where an element would be dropped is moved to a different container or position A event is fired whenever an element is dropped anywhere other than its origin (where it was initially dragged from) If the element gets removed from the DOM as a result of dropping outside of any containers, a event gets fired A event is fired when an element would be dropped onto an invalid target, but retains its original placement instead The event fires when you drag something over a container, and fires when you drag it away from the container Lastly, a event is fired whenever a drag operation ends, regardless of whether it ends in a cancellation, removal, or drop\n\nBy default, dropping an element outside of any known containers will keep the element in the last place it went over. You can make elements go back to origin if they're dropped outside of known containers, too. If you try to drop an item outside of any containers, though, it'll retain its original position When that happens, a event will be raised Note that the dragged element will go back to the place you originally dragged it from, even if you move it over other containers This is useful if you want to ensure drop events only happen when the user intends for them to happen explicitly, avoiding surprises\n\nCopying stuff is common too, so we made it easy for you. When elements are copyable, they can't be sorted in their origin container Copying prevents original elements from being dragged. A copy gets created and that gets dragged instead Whenever that happens, a event is raised Note that the clones get destroyed if they're not dropped into another container You'll be dragging a copy, so when they're dropped into another container you'll see the duplication.\n\nCopying stuff from only one of the containers and sorting on the other one? No problem! When elements are copyable, they can't be sorted in their origin container Copying prevents original elements from being dragged. A copy gets created and that gets dragged instead Whenever that happens, a event is raised Note that the clones get destroyed if they're not dropped into another container You'll be dragging a copy, so when they're dropped into another container you'll see the duplication.\n\nMove me, but you can use the plus sign to drag me around. Note that element in the handler is just the original event target. This might also be useful if you want multiple children of an element to be able to trigger a drag event. You can also use the option to determine whether an element can be dragged at all from a container, drag handle or not. There are a few similar mechanisms to determine whether an element can be dragged from a certain container ( ) , whether an element can be dropped into a certain container at a certain position ( ) , and whether an element is able to originate a drag event ( )"
    },
    {
        "link": "https://github.com/valor-software/ng2-dragula",
        "document": "Try out the demo!\n• Usage\n• Saving changes to arrays with dragulaModel\n\nLatest version available for each version of Angular\n\nYou can get it on npm.\n\nThis is a temporary workaround for #849, while upstream dragula still relies on .\n\nOn any child modules (like lazy loaded route modules), just use .\n\nYou'll also need to add Dragula's CSS stylesheet to your application (e.g. in ). The following is slightly better than (it includes (#508) and this fix), but you may wish to make your own modifications.\n\nHere's a super quick sample to get you started:\n\nThis package isn't very different from itself. I'll mark the differences here, but please refer to the documentation for dragula if you need to learn more about itself.\n\nThere's a directive that makes a container's direct children draggable. You must supply a string. Both syntaxes, or , work equally well.\n\nYou can group containers together by giving them the same group name. When you do, the children of each container can be dragged to any container in the same group.\n\nIf you want to make sure you are using the same type string in different places, use the syntax to pass a string variable from your component:\n\nIf your container's children are rendered using , you may wish to read what your users have done. If you provide the same array to the attribute on the container element, any changes will be synced back to the array.\n\nNOTE: v2 changes the behaviour of [dragulaModel]. It no longer mutates the arrays you give it, but will shallow clone them and give you the results. Use two-way binding with , or use the DragulaService and events to save the new models produced.\n\nYou do not, of course, have to sync the changes back. The syntax is equivalent to:\n\nNote: DO NOT put any other elements inside the container. The library relies on having the index of a DOM element inside a container mapping directly to their associated items in the array. Everything will be messed up if you do this.\n\nOn top of the normal Dragula events, when is provided, there are two extra events: and . Further details are available under\n\nIf you need to configure the (there's exactly one per ), you can use the .\n\nSee below for more info on options.\n\nThis service exposes a few different methods with which you can interact with .\n\nNOTE: formerly known as\n\nReturns a named , if there is one. A contains the following properties.\n• is the name that identifies the group\n• is the raw instance itself\n• is the options object used to create the drake. Modifying it won't do anything useful.\n\nDestroys a named and its associated instance. Silently returns if the group does not exist.\n\nRefer to the documentation for dragula to learn more about the native options.\n\nAll of the native options work with ng2-dragula. However, there is one addition:\n\nWhen you have:\n• is or a function that returns true\n\n... ng2-dragula will have to create a clone of the JS object you picked up. In previous versions of , there was a terribly buggy, one-size-fits-all clone function. From v2 onwards, you MUST provide your own function.\n\nIf you have a simple object with no nested values, it could be as simple as:\n\nThere is a complete example using a class on the demo page.\n\nWhenever a instance is created with the directive, there are several events you can subscribe to via . Each event emits a typed object, which you can use to get information about what happened.\n\nRefer to the Drake events documentation for more information about the different events available. Each event follows this format:\n\nEach supports an optional parameter, , which filters events to the group you're interested in. This is usually better than getting all groups in one observable.\n\nThe sample below illustrates how you can use destructuring to pull values from the event, and unsubscribe when your component is destroyed.\n\n// RxJS Subscription is an excellent API for managing many unsubscribe calls. // See note below about unsubscribing. : // These will get events limited to the VAMPIRES group. name el source name el target source sibling // some events have lots of properties, just pick the ones you need sourceModel targetModel item // You can also get all events, not limited to a particular group name el target source sibling // destroy all the subscriptions at once\n\nNOTE: You should always unsubscribe each time you listen to an event. This is especially true for a component, which should tear itself down completely in , including any subscriptions. It might not be necessary if you have a global singleton service (which is never destroyed) doing the subscribing.\n\nYou can also engineer your use of events to avoid subscribing in the first place:\n\nThe and events are only active when you have supplied .\n\nThere are a number of very common issues filed against this repo. You will be mocked terribly if you file a bug and it turns out you made one of these blunders and it wasn't a bug at all.\n\nThere are hundreds of other libraries that do this. Some notable ones:\n• @angular-skyhook, specifically with the sortable. Also by me (@cormacrelf).\n• @angular/cdk/drag-drop -- no documentation yet, but will presumably be well-supported.\n• You must use Yarn >= 1.3. It includes the 'workspaces' feature.\n• Please use Conventional Commits in your commit messages."
    },
    {
        "link": "https://github.com/bevacqua/react-dragula",
        "document": "Try out the demo!\n\nYou can get it on npm.\n\nRefer to the documentation for . The API for is identical, but a few tiny tweaks were made around it so that it works out the box with React.\n\nHere's an example application using and .\n\nHere's an example using refs (ES2015 syntax): React: The ref Callback Attribute"
    },
    {
        "link": "https://dustinpfister.github.io/2017/12/04/js-drag-elements-with-dragula",
        "document": "There is a javaScript project on github called Dragula that can be used to quickly move elements from one element container to another when it comes to front end javaScript. It is a quick and simple way to get this sort of thing working, and does not require any additional dependencies such as jQuery or lodash.\n\nThere are of course many other ways to go about doing this when it comes to working out a custom vanilla javaScript solution for dragging and dropping things around. In modern client side javaScript there are even some native browser options now such as the HTML drag and drop API, and there is also doing drag, drop, and snap in a canvas element with display objects rather than HTML elements. So this post will be on using Dragula, but also click and drag in general with javaScript in the front end.\n\nDragual can be installed via npm or bower, or I guess one could just grab what is in the dist folder of the project on github. In any case once I have it in a test folder I just need to link to in in an html file by way of a script tag with the src attribute pointing to the file, as this is very mush a front end kind of project. However this is also a project where I need to include some css with the javaScript also, the css can be found in the dist folder of the Github repository also alone with the javaScrit files. Once that is done I am ready to use it to work out some simple examples of Dragula for what it is worth.\n\nAlthough I often like to keep my basic sections very simple this is still not a getting started type posts with javaScript in general. I assume that you have at least some background then when it comes to getting started with javaScript when it comes to client side javaScript such as by way of the file protocol. However there are other ways of working on a client side javaScript project so it might be a good idea to look into how to get started with nodejs, and also how to use nodejs to set up a simple static web sever so that one can work on a client side project by way of the http protocol in a web browser.\n\n- The source code examples in this post are on Github\n\nI have the source code examples for this post up on my test vjs repository on Gihub along with the source code examples for my many other posts on javaScript. I do get around to editing my content on javaScript now and then and this post is not exception if you check the dates above. I do have a whole lot of other posts that are in dire need of attention when it comes to expanding and editing though. If you are on Github though the test vjs repository would be where you would want to make a pull request for one of the source code examples here. There is also the comments section at the bottom of this post that can eb sued to bring something up.\n\nFor my Basic use example of dragula I created a basic.html file in my test folder, and linked to the path in which dragula.js is in this case th node modules folder where it was installed when brining it into my test folder with npm. In a real project of course I would park this asset elsewhere, but for this silly demo it will work okay.\n\nI also found that I want to link to the dragula.css file as well, it seems to work without it but with weird rendering behavior, so just use the given css for starters at least.\n\nTo set up some areas to drag to and from I just need two container divs, and then pass references to each of them when calling the main dragula method that is returned from the dragula module.\n\nSo thats it at a minimum I just need to give it an array of elements that are containers of elements that can be dragged from one location to another.\n\nThere is now the drag and drop api when it comes to built in browser features that can be used to do this sort of thing without an external javaScript library. This api works by setting an draggable attribute for an element to true, at which point one or more events can be attached for the element that will define what will happen for certain events. One of the most impotent events to attach would be the drag start event, but there are a few others that are important also such as the drop event, and drag enter events.\n\nI found this js fiddle that is a basic working example of the built in drag and drop API. The general idea is that the draggable attribute must be set for any and all elements that will need to be dragged. That might be the first step, but it does not end there as in order to get things working there are a few event handers that need to be attached, and that is what is key it would seem when it comes to creating what is a valid target when it comes to doing some kind of drag and drop type thing with elements.\n\nThere are a lot of options for dragula, I could make some more advanced examples but for now I will just keep this post pretty basic. For the mean time there is the README for the project.\n\nIt would seem that there are also some native options for dragging elements in a front end javaScript environment also these days. In addition there is also working with a canvas element, and having display objects that are clicked and dragged within a canvas element also that is another option that comes to mind when it comes to this sort of thing. If I get some time to do so maybe I will expand this post with additional options for dragging and dropping elements with javaScript, but for now I am going to leave things as they are."
    }
]