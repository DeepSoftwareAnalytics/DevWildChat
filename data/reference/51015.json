[
    {
        "link": "https://stackoverflow.com/questions/30360690/css-overflow-y-not-scrolling",
        "document": "I'm trying to replicate something which looks like a full height webmail system using css with bootstrap.\n\nUnfortunately I'm finding that the overflow-y : scroll property is not preventing the #row-email-body div from growing beyond the height of it's parent once it fills up with content.\n\nThis is causing the 'webmail' system to expand beyond the height of the viewport which is not desired.\n\nCould anyone provide an explanation why it is not behaving as I expected or any guidance around the methods I've employed to construct this page?"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-y",
        "document": "The CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content. This property may also be set by using the shorthand property.\n\nThe property is specified as a single keyword value. If is , , or and the property is (default), the value will be implicitly computed as .\n\nOverflow content is not clipped and may be visible outside the element's padding box at the top and bottom edges. The element box is not a scroll container. Overflow content is clipped if necessary to fit vertically in the elements' padding box. No scroll bars are provided. Overflow content is clipped at the element's overflow clip edge that is defined using the property. As a result, content overflows the element's padding box by the value of or by if not set. The difference between and is that the keyword also forbids all scrolling, including programmatic scrolling. No new formatting context is created. To establish a formatting context, use along with . The element box is not a scroll container. Overflow content is clipped if necessary to fit vertically inside the element's padding box. Browsers display scroll bars in the vertical direction whether or not any content is actually clipped. (This prevents scroll bars from appearing or disappearing when the content changes.) Printers may still print overflowing content. Overflow content is clipped at the element's padding box, and overflow content can be scrolled into view. Unlike , user agents display scroll bars only if the content is overflowing, hiding scroll bars by default. If content fits inside the element's padding box, it looks the same as with , but still establishes a new block-formatting context. Note: The keyword value is a legacy value alias for . With , the scroll bars are drawn on top of the content instead of taking up space."
    },
    {
        "link": "https://stackoverflow.com/questions/9707397/making-a-div-vertically-scrollable-using-css",
        "document": "You have it covered aside from using the wrong property. The scrollbar can be triggered with any property , , or and each can be set to any of , , , , or . You are currently looking at these two:\n• None - This value will look at the width and height of the box. If they are defined, it won't let the box expand past those boundaries. Instead (if the content exceeds those boundaries), it will create a scrollbar for either boundary (or both) that exceeds its length.\n• None - This values forces a scrollbar, no matter what, even if the content does not exceed the boundary set. If the content doesn't need to be scrolled, the bar will appear as \"disabled\" or non-interactive.\n\nIf you always want the vertical scrollbar to appear:\n\nYou should use . This forces a scrollbar to appear for the vertical axis whether or not it is needed. If you can't actually scroll the context, it will appear as a\"disabled\" scrollbar.\n\nIf you only want a scrollbar to appear if you can scroll the box:\n\nJust use . Since your content by default just breaks to the next line when it cannot fit on the current line, a horizontal scrollbar won't be created (unless it's on an element that has word-wrapping disabled). For the vertical bar,it will allow the content to expand up to the height you have specified. If it exceeds that height, it will show a vertical scrollbar to view the rest of the content, but will not show a scrollbar if it does not exceed the height."
    },
    {
        "link": "https://geeksforgeeks.org/making-a-div-vertically-scrollable-using-css",
        "document": "Here are two methods to make the a div vertically scrollable using CSS.\n\nThe overflow-x and overflow-y properties are used to control horizontal and vertical scrolling, respectively. The horizontal scrollbar is hidden while the vertical scrollbar is shown when necessary.\n\nThe overflow property is set to auto, which manages both horizontal and vertical scrollbars automatically. This approach ensures that both scrollbars are added only when needed.\n\nTo make a <div> vertically scrollable, use CSS overflow properties effectively. Use overflow-x and overflow-y for more granular control, or the shorthand overflow property for automatic scrollbar management. Adjust the height of your <div> and the content inside to see the scrollbars in action."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/CSS/overflow",
        "document": "The property is specified as one or two keyword values. If only one keyword is specified, both and are set to the same value. If two keywords are specified, the first value applies to in the horizontal direction and the second one applies to in the vertical direction.\n\nOverflow content is not clipped and may be visible outside the element's padding box. The element box is not a scroll container. This is the default value of the property. Overflow content is clipped at the element's padding box. There are no scroll bars, and the clipped content is not visible (i.e., clipped content is hidden), but the content still exists. User agents do not add scroll bars and also do not allow users to view the content outside the clipped region by actions such as dragging on a touch screen or using the scroll wheel on a mouse. The content can be scrolled programmatically (for example, by linking to anchor text, by tabbing to a hidden yet focusable element, or by setting the value of the property or the method), in which case the element box is a scroll container. Overflow content is clipped at the element's overflow clip edge that is defined using the property. As a result, content overflows the element's padding box by the value of or by if not set. Overflow content outside the clipped region is not visible, user agents do not add a scroll bar, and programmatic scrolling is also not supported. No new formatting context is created. To establish a formatting context, use along with . The element box is not a scroll container. Overflow content is clipped at the element's padding box, and overflow content can be scrolled into view using scroll bars. User agents display scroll bars whether or not any content is overflowing, so in the horizontal and vertical directions if the value applies to both directions. The use of this keyword, therefore, can prevent scroll bars from appearing and disappearing as content changes. Printers may still print overflow content. The element box is a scroll container. Overflow content is clipped at the element's padding box, and overflow content can be scrolled into view using scroll bars. Unlike , user agents display scroll bars only if the content is overflowing. If content fits inside the element's padding box, it looks the same as with but still establishes a new formatting context. The element box is a scroll container. Note: The keyword value is a legacy value alias for . With , the scroll bars are drawn on top of the content instead of taking up space.\n\nOverflow options include hiding overflow content, enabling scroll bars to view overflow content or displaying the content flowing out of an element box into the surrounding area, and combinations there of. The following nuances should be kept in mind while using the various keywords for :\n• Specifying a value other than (the default) or for creates a new block formatting context. This is necessary for technical reasons; if a float intersects with a scrolling element, it would forcibly rewrap the content after each scroll step, leading to a slow scrolling experience.\n• For an setting to create the desired effect, the block-level element must have either a set height ( or ) if the overflow is in the vertical direction, a set width ( or ) if the overflow is in the horizontal direction, a set block-size (( or ) if the overflow is in the block direction, or a set inline-size (( or ) or set to if the overflow is in the inline direction.\n• Setting overflow to in one direction (i.e. or ) when it isn't set to or in the other direction results in the value behaving as .\n• Setting overflow to in one direction when it isn't set to or in the other direction results in the value behaving as .\n• The JavaScript property may be used to scroll through content in a scroll container, except when is set to .\n\nA scrolling content area cannot be scrolled by a keyboard-only user, with the exception of users on Firefox (which makes the container keyboard focusable by default). As a developer, to allow non-Firefox keyboard-only users to scroll the container, you will need to give it a using . Unfortunately, when a screen reader encounters this tab-stop, they will have no context for what it is and their screen reader will likely announce the entirety of its contents. Giving it an appropriate WAI-ARIA role ( , for example) and an accessible name (via or ) can mitigate this."
    },
    {
        "link": "https://stackoverflow.com/questions/10155344/auto-height-div-with-overflow-and-scroll-when-needed",
        "document": "I'm trying to make a website with no vertical scrolling for a page, but i need that one of the DIVs i have to expand vertically to the bottom of the page (at most), and that when it has content that does not fit, the div should create a vertical scroller.\n\ni already have the css for the inside of the div figured out in this fiddle, creating the scroller when needed. i also have figured out how to make the container div grow to occupy exactly the vertical space it has in the page. i just can't make them work out together!\n\nplease have in mind that in jsfiddle you won't be able to view the content of the whole website and in that sense what you get for the 2nd fiddle doesn't really show what's being done, but it works as i intended though.\n\njust another note: as they are different fiddles, the id#container div in the 1st fiddle is he id#dcontent div of the 2nd example.\n\nthere is one other thing: for a type of content, this div will scroll vertically, but for other type of content, i want it to scroll horizontally, as it will have a product \"slider\" displaying elements horizontally inside this DIV.\n\nplease also look at this photo because it might be easier to understand what i'm trying to say: PICTURE\n\ni tried looking to other questions regarding these topics, but none seemed to cover all of the aspects i'm trying to solve... :S\n\nif there is something else i can provide to help you/me :) figuring it out, pls let me know!"
    },
    {
        "link": "https://stackoverflow.com/questions/74543339/make-div-with-positionfixed-scrollable-if-it-exceeds-the-pages-height",
        "document": "You can use the VH unit (1% of the viewport's height.) If you set height: 100vh to your right window, you can set overflow: auto, which will add the scroll bar when your content exceeds the viewport height.\n\nOf course, you can continue using calc() with VH units to adjust the position/size of your overlapping container. You can also set max-height instead of height.\n\nAnother option is to have one \"overlap\" container, which has a height of 100vh and is fixed, but also has pointer-events: none. Then, it's children (.overlap > *) will have pointer-events: auto. That way, users can click behind the overlap when there is no content inside. Still, I would suggest using just max-height.\n\nOf course, you can have your inner div being the scrollable element 👍 That means something like this:"
    },
    {
        "link": "https://community.plotly.com/t/set-max-height-to-a-div-and-make-the-content-vertically-scrollable/28873",
        "document": "@monitorcasalab, you can do it with a little custom CSS. Here’s an example\n\nand the CSS that I put in\n\nDid a quick test and it works on Safari, Firefox and Chrome for me."
    },
    {
        "link": "https://w3schools.com/css/css_overflow.asp",
        "document": "The CSS property controls what happens to content that is too big to fit into an area.\n\nThis text is really long and the height of its container is only 100 pixels. Therefore, a scrollbar is added to help the reader to scroll the content. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem.\n\nThe property specifies whether to clip the content or to add scrollbars when the content of an element is too big to fit in the specified area.\n\nThe property has the following values:\n• - Default. The overflow is not clipped. The content renders outside the element's box\n• - The overflow is clipped, and the rest of the content will be invisible\n• - The overflow is clipped, and a scrollbar is added to see the rest of the content\n• - Similar to , but it adds scrollbars only when necessary\n\nBy default, the overflow is , meaning that it is not clipped and it renders outside the element's box:\n\nYou can use the overflow property when you want to have better control of the layout. The overflow property specifies what happens if content overflows an element's box.\n\nWith the value, the overflow is clipped, and the rest of the content is hidden:\n\nYou can use the overflow property when you want to have better control of the layout. The overflow property specifies what happens if content overflows an element's box.\n\nSetting the value to , the overflow is clipped and a scrollbar is added to scroll inside the box. Note that this will add a scrollbar both horizontally and vertically (even if you do not need it):\n\nYou can use the overflow property when you want to have better control of the layout. The overflow property specifies what happens if content overflows an element's box.\n\nThe value is similar to , but it adds scrollbars only when necessary:\n\nYou can use the overflow property when you want to have better control of the layout. The overflow property specifies what happens if content overflows an element's box.\n\nThe and properties specifies whether to change the overflow of content just horizontally or vertically (or both):\n\nspecifies what to do with the left/right edges of the content.\n\n specifies what to do with the top/bottom edges of the content.\n\nYou can use the overflow property when you want to have better control of the layout. The overflow property specifies what happens if content overflows an element's box."
    },
    {
        "link": "https://geeksforgeeks.org/making-a-div-vertically-scrollable-using-css",
        "document": "Here are two methods to make the a div vertically scrollable using CSS.\n\nThe overflow-x and overflow-y properties are used to control horizontal and vertical scrolling, respectively. The horizontal scrollbar is hidden while the vertical scrollbar is shown when necessary.\n\nThe overflow property is set to auto, which manages both horizontal and vertical scrollbars automatically. This approach ensures that both scrollbars are added only when needed.\n\nTo make a <div> vertically scrollable, use CSS overflow properties effectively. Use overflow-x and overflow-y for more granular control, or the shorthand overflow property for automatic scrollbar management. Adjust the height of your <div> and the content inside to see the scrollbars in action."
    }
]