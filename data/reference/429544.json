[
    {
        "link": "https://1c-dn.com/library/1c_enterprise_documentation",
        "document": "We're sorry, but the page could not be found. The link may be outdated, or you may have entered the address (URL) incorrectly.\n\nIf you are new to 1C:Enterprise, get the Kick start with 1C:Enterprise\n\nOr see the latest updates on our site:\n\nIf you found nothing interesting yet, please check a Site map or a Home page."
    },
    {
        "link": "https://1c-dn.com/library/tutorials/mobile_application_1c_enterprise_8",
        "document": "We're sorry, but the page could not be found. The link may be outdated, or you may have entered the address (URL) incorrectly.\n\nIf you are new to 1C:Enterprise, get the Kick start with 1C:Enterprise\n\nOr see the latest updates on our site:\n\nIf you found nothing interesting yet, please check a Site map or a Home page."
    },
    {
        "link": "https://4d.by/upload/iblock/f8d/V8Update.htm",
        "document": "\n• New functionality and changes\n• New functionality and changes in the 1C:Enterprise mode\n• Changes that require modification of configuration and administrative settings\n• Transition from the previous version to the version 8.3.11\n\nNew functionality and changes\n\nNew functionality and changes in the 1C:Enterprise mode\n\nChanges that require modification of configuration and administrative settings\n\nTransition from the previous version to the version 8.3.11\n• Conversion of configurations, infobases, external data processors, and external reports is not required during the transition from the previous version to the version 8.3.11.\n• Some features that are added in version 8.3.11 do not support compatibility mode. When you toggle the compatibility mode, the structure of some database objects is changed. To be able to work with the infobase using a previous platform version, you have to turn the compatibility mode on.\n• It is recommended that you rebuild the full-text search index in order to use morphological full-text search by attribute name.\n• In order to use the collaboration system in 1C:Enterprise 8.3.11 test release, you have to reregister the infobase. After the update to 1C:Enterprise 8.3.11 final release, you have to reregister it. The message history for the period between these two registrations will not be preserved.\n• It is recommended that you uninstall your HASP Device Driver and then install HASP Device Driver 7.60, which is a part of 1C:Enterprise distribution package.\n• New functionality and changes\n• New functionality and changes in the 1C:Enterprise mode\n• Changes that require modification of configuration and administrative settings\n• Transition from the previous version to the version 8.3.10\n\nNew functionality and changes\n\nNew functionality and changes in the 1C:Enterprise mode\n\nChanges that require modification of configuration and administrative settings\n• The OpenSSL library is updated to version 1.0.2k and modified to eliminate vulnerabilities.\n• The libxml2 library is modified to eliminate vulnerabilities.\n• The libxslt library is modified to eliminate vulnerabilities.\n• The libtiff library is updated to version 4.0.8.\n• The libpng library is updated to version 1.6.29.\n\nTransition from the previous version to the version 8.3.10\n• Conversion of configurations, infobases, external data processors and external reports is not required during the transition from the previous version to the version 8.3.10.\n• Some features that are added in version 8.3.10 do not support compatibility mode. When you toggle the compatibility mode, the structure of some database objects is changed. To be able to work with the infobase using a previous platform version, you have to turn the compatibility mode on.\n• If a full-text search query generates multiple intermediate results and the search result contains under 1 mln records, the user gets the search result. To enable this feature, set the configuration compatibility mode to None and update the full-text search index.\n• It is recommended that you convert large configuration repositories (repositories that store 30 000 - 40 000 versions, such as 1C:ERP Enterprise Resource Planning 2) to version 8.3.8 format using the utility.\n• It is recommended that you uninstall your HASP Device Driver and then install HASP Device Driver 7.60, which is a part of 1C:Enterprise distribution package.\n• New functionality and changes\n• New functionality and changes in the 1C:Enterprise mode\n• Changes that require modification of configuration and administrative settings\n• Transition from the previous version to the version 8.3.9\n\nNew functionality and changes\n\nNew functionality and changes in the 1C:Enterprise mode\n\nChanges that require modification of configuration and administrative settings\n• The cURL library is modified to eliminate vulnerabilities.\n• The libtiff library is updated to version 4.0.7.\n\nTransition from the previous version to the version 8.3.9\n• Conversion of configurations, infobases, external data processors and external reports is not required during the transition from the previous version to the version 8.3.9.\n• Some features that are added in version 8.3.9 do not support compatibility mode. When you toggle the compatibility mode, the structure of some database objects is changed. To be able to work with the infobase using a previous platform version, you have to turn the compatibility mode on.\n• In the file mode, queries are optimized for scenarios where an applied solution has separators but actually contains a single data area. To apply this optimization to an existing infobase, perform infobase verification and repair with the Reindex infobase tables check box selected. Once the restructuring is completed, the optimization is applied to all restructured objects.\n• The index of the actual action period table of a calculation register is complemented by the start date and end date fields, and the index is now clustered. This reduces the chance of lock escalation to the table level when writing record sets of calculation registers that support action period. For the chart of calculation types table that stores serial numbers of calculation type displacements, a nonunique index by displacement number is implemented. As a result, simultaneous editing of a single chart of calculation types in different data areas of a separated infobase never requires waiting for lock releases. To apply this optimization to existing infobases, perform the infobase verification and repair operation with the Restructure infobase tables option selected.\n• After migration to mobile 1C:Enterprise platform version 8.3.9.67 or later, when you first start an application, 1C:Enterprise performs infobase verification and repair with and check boxes selected. If this operation takes a long time to complete, it is recommended that you cancel it on the mobile device, retrieve the backup that you created before the update from the mobile device, and use the cluster administration console ( ) to verify and repair the infobase, just like you would do for desktop 1C:Enterprise platform. Then, on the mobile device, restore the repaired infobase from the file.\n• New functionality and changes\n• New functionality and changes in the 1C:Enterprise mode\n• Changes that require modification of configuration and administrative settings\n• Transition from the previous version to the version 8.3.8\n\nNew functionality and changes\n\nNew functionality and changes in the 1C:Enterprise mode\n\nChanges that require modification of configuration and administrative settings\n• The cURL library is updated to version 7.43 and modified to eliminate vulnerabilities.\n• The OpenSSL library is updated to version 1.0.2j and modified to eliminate vulnerabilities.\n• The libpng library is updated to version 1.6.21.\n• The libtiff library is updated to eliminate vulnerabilities.\n• The libxml2 library is updated to version 2.9.4 and modified to eliminate vulnerabilities.\n• The libxslt library is modified to eliminate vulnerabilities.\n\nTransition from the previous version to the version 8.3.8\n• Conversion of configurations, infobases, external data processors and external reports is not required during the transition from the previous version to the version 8.3.8.\n• Some features that are added in version 8.3.8 do not support compatibility mode. When you toggle the compatibility mode, the structure of some database objects is changed. To be able to work with the infobase using a previous platform version, you have to turn the compatibility mode on.\n• When the is set to , the minimum supported version of Microsoft SQL Server is Microsoft SQL Server 2005 (this includes scenarios that use the Native Client).\n• In the file mode, infobase operations are optimized. To support the optimization, the file database data storage format is updated to new version 8.3.8 format. The option to change the page size of the infobase file ( ) is implemented. The page size can have one of the following values: 4096, 8192, 16384, 32768, or 65536 bytes. To migrate data between infobase formats, you can use a .dt file (provided that the target infobase has the required format) or convert the infobase file using cnvdbfl utility. The cnvdbfl utility can change the infobase file page size during the conversion.\n• If you migrate to a new 1C:Enterprise version:\n• From version 8.3.7 or earlier, no action is reqiured.\n• From version in range 8.3.8.1606 - 8.3.8.1861, it is recommended that after the migration you perform infobase verification and repair with the check box selected, or use the administration console utility ( ) to verify and repair the infobase. If your infobase contains objects that refer to exchange plan items and they can contain references to ThisNode item, it is recommended that you correct the references using the Replace references to incorrect ThisNode records data processor (read more). The data processor can use the result provided by the administration console (recommended) of the exchange plan record deletion marks as an input. It is recommended that you run the cluster administration console (1cv8a) in verification and repair mode, with report generation enabled. Then use the report as an input for the Replace references to incorrect ThisNode records data processor.\n• When you migrate to 1C:Enterprise version 8.3.8 or later, it is recommended that you use the data processor available for download at 1c-dn.com (read more). The data processor determines whether totals recalculation for accumulation registers and accounting registers is required to correct errors in scenarios where a dimension list includes a dimension of type and an index by dimensions includes more that 16 database fields. If it is required, after the migration perform infobase verification and repair with Check logical infobase integrity and Recalculate totals check boxes selected, or use the cluster administration console (1cv8a). The latter option is recommended because it is faster.\n• After the migration from 1C:Enterprise version 8.3.5 to a later version you might get an error when retrieving characteristics. This is because the earlier versions of the platform allow specifying the field instead of the field as a filter field for additional characteristic types of metadata objects. To correct the error, enter the correct value to the type filter field.\n• If your configuration includes HTTP services and you previously opened it with 1C:Enterprise Designer 8.3.4, when you open it with 1C:Enterprise 8.3.8, perform the following steps:\n• To eliminate the issue with OpenID provider operations, in the file for OpenID provider publication, add the required number of elements with available redirection URLs.\n• New functionality and changes\n• New functionality and changes in the 1C:Enterprise mode\n• Changes that require modification of configuration and administrative settings\n• Transition from the previous version to the version 8.3.7\n\nNew functionality and changes\n\nNew functionality and changes in the 1C:Enterprise mode\n\nChanges that require modification of configuration and administrative settings\n• Known vulnerabilities of cURL library are elimitaned.\n• The OpenSSL library is updated to version 1.0.0t.\n• The libxml2 library is updated to eliminate vulnerabilities.\n• The libxslt library is updated to eliminate vulnerabilities.\n\nTransition from the previous version to the version 8.3.7\n• Conversion of configurations, infobases, external data processors and external reports is not required during the transition from the previous version to the version 8.3.7.\n• Some features that are added in version 8.3.7 do not support compatibility mode. When you toggle the compatibility mode, the structure of some database objects is changed. To be able to work with the infobase using a previous platform version, you have to turn the compatibility mode on.\n• In order to use the new format of full-text search index and improve the performance of the input by string feature, clearing the full-text search index and building a new index is required. The property must be set to during these operations.\n• In the web client, the cryptography extension is required in order to access all certificate fields using the and properties of the object.\n\nTo obtain a link to an entry of the V8Update file, double-click any of the entry lines. This opens a pop-up window with the link available for copying to the clipboard. This feature is only available if JavaScript is enabled.\n• New functionality and changes\n• New functionality and changes in the 1C:Enterprise mode\n• Changes that require modification of configuration and administrative settings\n• Transition from the previous version to the version 8.3.6\n\nNew functionality and changes\n\nNew functionality and changes in the 1C:Enterprise mode\n\nChanges that require modification of configuration and administrative settings\n• The libxml2 library is updated from version 2.6.23 to version 2.9.1.\n• The libxslt library is updated from version 1.1.24 to version 1.1.28.\n• The OpenSSL library is updated from version 1.0.0o to version 1.0.0s.\n• The libpng library is updated from version 1.2.19 to version 1.6.19.\n• The libtiff library is updated from version 3.7.0 to version 4.0.3.\n• Known vulnerabilities of cURL library are elimitaned.\n\nTransition from the previous version to the version 8.3.6\n• Conversion of configurations, infobases, external data processors and external reports is not required during the transition from the previous version to the version 8.3.6.\n• Some features that are added in version 8.3.6 do not support compatibility mode. When you toggle the compatibility mode, the structure of some database objects is changed. To be able to work with the infobase using a previous platform version, you have to turn the compatibility mode on.\n• New functionality and changes\n• New functionality and changes in the 1C:Enterprise mode\n• Changes that require modification of configuration and administrative settings\n• Transition from the previous version to the version 8.3.5\n\nNew functionality and changes\n\nNew functionality and changes in the 1C:Enterprise mode\n\nChanges that require modification of configuration and administrative settings\n\nTransition from the previous version to the version 8.3.5\n• Conversion of configurations, infobases, external data processors and external reports is not required during the transition from the previous version to the version 8.3.5.\n• Some features that are added in version 8.3.5 do not support compatibility mode. When you toggle the compatibility mode, the structure of some database objects is changed. To be able to work with the infobase using a previous platform version, you have to turn the compatibility mode on.\n• 1C:Enterprise version 8.3.5 cannot share a configuration repository with any of the earlier 1C:Enterprise versions. In this scenario users of the earlier versions receive a diagnostic error message.\n• New functionality and changes\n• New functionality and changes in the 1C:Enterprise mode\n• Changes that require modification of configuration and administrative settings\n• Transition from the previous version to the version 8.3.4\n\nNew functionality and changes\n\nNew functionality and changes in the 1C:Enterprise mode\n\nChanges that require modification of configuration and administrative settings\n\nTransition from the previous version to the version 8.3.4\n• Conversion of configurations, infobases, external data processors and external reports is not required during the transition from the previous version to the version 8.3.4.\n• Some features that are added in version 8.3.4 do not support compatibility mode. When you toggle the compatibility mode, the structure of some database objects is changed. To be able to work with the infobase using a previous platform version, you have to turn the compatibility mode on.\n• During the transition to version 8.3.4, if your infobase runs in the file mode, we recommend that you perform infobase verification and repair with the check box selected.\n• New functionality and changes\n• New functionality and changes in the 1C:Enterprise mode\n• Changes that require modification of configuration and administrative settings\n• Transition from the version 8.2 to the version 8.3.3\n• Transition from the previous version to version 8.3.3\n\nNew functionality and changes\n\nNew functionality and changes in the 1C:Enterprise mode\n\nChanges that require modification of configuration and administrative settings\n\nTransition from the version 8.2 to the version 8.3.3\n• Conversion of configurations, infobases, external data processors, and external reports is not required during the upgrade from the version 8.2 to version 8.3.3.\n• To use certain features of version 8.3.3 you have to disable the compatibility mode. The structure of certain database objects is modified when disabling or enabling the compatibility mode. Note that to be able to work with infobases created using 1C:Enterprise version 8.2 you have to set the compatibility mode to the . In order to use certain optimization improvements, you have to restructure data related to the optimization areas. To restructure data, you can use the Verify and repair mode, or perform forced restructuring of the required objects.\n• Simultaneous operating of 1C:Enterprise 8.3.3 and earlier 1C:Enterprise versions with a single file infobase is not supported. In this case a diagnostic error message is displayed.\n• It is recommended that you revise the list of infobases. Infobases that are present in the list when version 8.3.3 is installed in most cases have version 8.2 or 8.1 (because it is the default version, which is set automatically when an infobase is created or added to the list). Therefore, in order to open an infobase in 8.3.3 (using the program that starts 1C:Enterprise), you have to specify the required version in the list of infobase startup settings, or specify the version directly in the infobase settings.\n• At the first start of server cluster version 8.3.3 on the computer that has previous versions of ther server cluster installed, the content of the cluster register file ( ) is converted to a new format. The register of the server cluster 8.3.3 is stored in the file in the same directory as the cluster register of the previous versions. There is no data synchronization between cluster registers of different versions after the first start of server cluster 8.3.3. To perform the conversion of the cluster register from version 8.2 to version 8.3 once more, stop the server cluster 8.3, delete the server cluster 8.3 register (the 1CV8Clst.lst file), and then start the server cluster 8.3.3.\n• To increase the performance of the configuration repository in a scenario when a repository server is used, disable the compatibility mode of the configuration repository. To access the configuration repository using earlier 1C:Enterprise versions, enable the compatibility mode of the configuration repository. The conversion process can take significant time.\n• Changed the full-text search index format. For efficient full-text search when using input by string, it is recommended that you clear and update the full-text search index during the transition to 1C:Enterprise version 8.3.3. It is also recommended that you clear and then update the full-text search index during the transition to earlier platform versions.\n• For infobases that use the OpenID authentication, you have to change the publishing settings in the file.\n\nTransition from the previous version to version 8.3.3\n• Conversion of configurations, infobases, external data processors, and external reports is not required during the transition from the previous version to the version 8.3.3.\n• Some features that are added in version 8.3.3 do not support compatibility mode. When you toggle the compatibility mode, the structure of some database objects is changed. To be able to work with the infobase using a previous platform version, you have to turn the compatibility mode on.\n• Simultaneous operating of 1C:Enterprise 8.3.3 and earlier 1C:Enterprise versions with a single file infobase is not supported. In this case a diagnostic error message is displayed.\n• To increase the performance of the configuration repository in a scenario when a repository server is used, disable the compatibility mode of the configuration repository. To access the configuration repository using earlier 1C:Enterprise versions, enable the compatibility mode of the configuration repository. The conversion process can take significant time.\n• Changed the full-text search index format. For efficient full-text search when using input by string, it is recommended that you clear and update the full-text search index during the transition to 1C:Enterprise version 8.3.3. It is also recommended that you clear and then update the full-text search index during the transition to earlier platform versions.\n• For infobases that use the OpenID authentication, you have to change the publishing settings in the file.\n• New functions and changes\n• New functions and changes in the 1C:Enterprise mode\n• Changes that require changes to the configuration and administrative settings\n• Transition from the previous version to the version 8.3.2\n\nNew functions and changes\n\nNew functions and changes in the 1C:Enterprise mode\n\nChanges that require changes to the configuration and administrative settings\n\nTransition from the previous version to the version 8.3.2\n• Conversion of configurations, infobases, external data processors, and external reports is not required during the transition from the previous version to the version 8.3.2.\n• Some features that are added in version 8.3.2 do not support compatibility mode. When you toggle the compatibility mode, the structure of some database objects is changed. To be able to work with the infobase using a previous platform version, you have to turn the compatibility mode on.\n\nVersion 8.3.1 does not include changes introduced in version 8.2.17.\n\nImproved the list of new and updated features:\n• Keywords and interface texts are color-coded (it is the same formatting that is used in the documentation).\n• Sections describing behavior in the compatibility mode have color background.\n• The list structure is updated, providing more details and better usability (only for version 8.3.1 or later).\n• New functions and changes\n• New functions and changes in the 1C:Enterprise mode\n• Changes that require changes to the configuration and administrative settings\n• Upgrade from the previous version to version 8.3.1\n\nNew functions and changes\n\nNew functions and changes in the 1C:Enterprise mode\n\nChanges that require changes to the configuration and administrative settings\n\nUpgrade from the previous version to version 8.3.1\n• Conversion of configurations, infobases, external data processors, and external reports is not required during the upgrade from the previous version to version 8.3.1.\n• To use certain features of version 8.3.1 you have to disable the compatibility mode. The structure of certain objects is modified when disabling or enabling the compatibility mode. Note that to be able to work with infobases created using previous 1C:Enterprise versions you have to enable the compatibility mode. In order to use certain optimization improvements, you have to restructure data related to the optimization areas. To restructure data, you can use the mode, or perform forced object restructuring.\n• It is recommended that you revise the list of infobases. Infobases that are present in the list when version 8.3 is installed in most cases have version 8.2 or 8.1 (because it is the default version, which is set automatically when an infobase is created or added to the list). Therefore, in order to open an infobase in 8.3, you have to specify the required version in the list of infobase startup settings, or specify the version directly in the infobase settings.\n• At the first start of server cluster version 8.3.1 on the computer hat has previous versions of ther server cluster installed, the content of the cluster register file( ) is converted to a new format. The register of the server cluster 8.3.1 is stored in the file in the same directory as the cluster register of the previous versions. There is no data synchronization between cluster registers of different versions after the first start of server cluster 8.3.1. To perforrm the conversion of the cluster register from version 8.2. to version 8.3 once more, stop the server cluster 8.3, delete the server cluster 8.3 register (the 1CV8Clst.lst file), and then start the server cluster 8.3."
    },
    {
        "link": "https://yellow-erp.com/uploads/releases/platform/8.2.19.76/V8Update.htm",
        "document": "\n• New functions and changes\n• New functions and changes in the 1C:Enterprise mode\n• Transition from the previous version to the version 8.2.19\n\nNew functions and changes\n• None The Clear input button that is generated by the web browser for text boxes containing at least one non-space character functions exactly like the standard text box Clear button.\n• None When a register record set is being written without replacement to an independent information register, the property can be set to .\n• None 1C:Enterprise servers do not shut down on attempts to process nonexistent items of universal value collections. These attempts are written to the technological log as events.\n\nNew functions and changes in the 1C:Enterprise mode\n• None In the web client, the error message about a connection loss is modified. In the web client, an action can be resumed if during its execution the connection was lost and the action could not modify data on the server. In this case, the user is prompted to retry the request.\n• None In Google Chrome web browser version 30, the check whether the pop-up blocker is enabled is more reliable.\n• None Optimized performance while starting a large number of clients with short intervals between starts.\n• None In order to enhance scalability and performance of 1C:Enterprise server cluster, the internal platform mechanisms are improved.\n• None Individual indexes by separators are created for independent information registers that do not have dimensions.\n• None In object tables, an additional index is implemented for separators with the separation mode. The index includes the separator value and the primary table key. The index eliminates DBMS lock escalations in some table processing scenarios.\n• None In the web client, performance of the following spreadsheet document operations is improved: opening spreadsheet documents, row scrolling, and page scrolling.\n• None In the thick and thin clients, improved performance for opening managed forms that contain graphical schema fields with a large number of elements (more than 1000).\n• None When items of catalogs, charts of characteristic types, charts of accounts, and chart of calculation types are read from XML files using the method, the item of the read data is not processed. You can load exchange files generated in 1C:Enterprise 8.3.3 and later versions.\n• None Ordinary forms containing picture fields that were created in 1C:Enterprise version 8.3.3 in Version 8.2.16 compatibility mode now can be opened.\n• None When thin clients connect to an infobase using HTTPS, the web server certificate is verified, provided that the root certificate for the web server certificate is included in the file on the client computer from which the connection is attempted.\n• None Improved view of dotted lines when printing PDF spreadsheet documents from a web client that is running in Mozilla Firefox web browser version 20 or later. To have the dotted lines printed correctly in spreadsheet documents in Mozilla Firefox, and also to ensure the correct size of all printed elements, it is recommended that you set the PrintAccuracy property of the spreadsheet document to Accurate. In this case web client will save the spreadsheet document as a file. In other cases, it will open the document in a preview window.\n• None 1С Enterprise server clusters are now more robust against network connection losses. If a TCP connection between a working process and 1C:Enterprise cluster manager is lost, the working process is not shut down immediately, it attempts to reestablish the connection first. Working processes are only shut down if the attempt to reestablish the connection is unsuccessful or if the connection is lost due to a cluster manager shutdown.\n\nTransition from the previous version to the version 8.2.19\n• None Conversion of configurations, infobases, external data processors and external reports is not required during the transition from the previous version to the version 8.2.19.\n• New functions and changes\n• Changes requiring changes to the configuration and administrative settings\n• Transition from the previous version to the version 8.2.18\n\nNew functions and changes\n• None For the tag of the publishing file, the attribute is implemented. It specifies whether web services whose description does not include the attribute of the tag will be published (this attribute defines whether a given web service will be published).\n• None Native clients for Microsoft SQL Server 2005 and Microsoft SQL Server 2012 are now supported.\n• None and properties of the object can contain items with the following names (in addition to existing ones):\n• – the string field corresponds to the value of the certificate field.\n• - the string field corresponds to the value of the certificate field.\n• – the string field corresponds to the value of the certificate field. andproperties of theobject can contain items with the following names (in addition to existing ones):\n• None The 1C:Enterpise server cluster numbering service is optimized. This prevents server performance degradation over time.\n• None Optimized performance of thin and thick clients connected to a network-located file infobase during simultaneous access by multiple users. Improved performance of various infobase operations, including opening and editing object forms, viewing list forms, writing objects, posting documents, and so on.\n• None Improved 1C:Enterprise server scalability under heavy load from a large number of users.\n• None Increased performance of and functions when they are executed in thin client, thick client and on the server.\n• None Optimized performance of the function when the function parameter is an expression that consists of getting a property of any nesting level for any variable (either using \"dot\" or using the operator).\n• None In the document journal table, added indexing by the field. This provides performance optimization for dynamic lists of document journals and for the search by string in document journals.\n• None Optimized performance of dynamic lists and dynamic database sampling in descending order, and these operations are further optimized for Microsoft SQL Server environment. The restructuring operation is optimized for Microsoft SQL Server environment as well.\n• None In the client/server mode with enabled managed locks, modified the process of generating new references to infobase objects. References are always generated sequentially for all 1C:Enterprise server connections to the DBMS server. This provides reduced fragmentation of tables and indexes in the database, as well as optimization of insertion and read operations on database table records.\n• None Optimized retrieving of applied objects from the database in the following cases: calling the method for an applied object that does not have a tabular section, and getting properties from a reference using \".\" (dot).\n• None Optimized performance of 1C:Enterprise server while executing queries to objects with data access restrictions.\n• None Optimized performance of Microsoft SQL Server operations that use the construction with a single list value.\n• None Optimized system performance under heavy load due to frequent background job execution and web service calls.\n• None The optimization has the maximum effect in the following scenario: a thin client is connected to a network-located file infobase with simultaneous access by multiple users.\n• None\n• Comparison of two lists using the operator: Improved performance of certain types of queries in the file infobase. For example:\n• None Optimized performance of client applications connected to a network-located file infobase. It is recommended that you compress the infobase table after bulk data changes.\n• None In the web client, optimized performance of opening and scrolling of spreadsheet documents that contain a large number of columns.\n• None In a web client that is running in Google Chrome, calling the method does not open an additional browser window.\n• None If the extension for cryptoprotection is enabled in a web client that is running in Microsoft Internet Explorer, the dialog box where the user is prompted to confirm accessing the private key or the file system on their computer is opened on top of all other windows.\n• None When an exception occurs in a server method of a managed form, the client application displays the form that has exactly the same appearance as the form on the server side had at the moment of exception. This prevents situations when changes in the form appearance that were performed on the server before the exception occurred are not transferred to the client side of the application.\n• None In the web client that runs in Google Chrome version 26, the File upload dialog box is modified. To upload a file, drag it to the File upload dialog box and click .\n\nChanges requiring changes to the configuration and administrative settings\n• None The distribution kit for Windows includes the HASP driver version 6.51.29439.1. The name of the file that installs or removes the driver is . The new version number is included in the names of the menu shortcuts.\n• None parameter (the second parameter of the object constructor), you can specify paths to multiple libraries that simultaneusly implement an interface similar to Microsoft Crypto API. The paths are separated by \":\" (colon). This provides support for all versions of the CryptoPro provider for Linux. On Linux, in theparameter (the second parameter of theobject constructor), you can specify paths to multiple libraries that simultaneusly implement an interface similar to Microsoft Crypto API. The paths are separated by \":\" (colon). This provides support for all versions of the CryptoPro provider for Linux. To ensure compatibility with both old and new CryptoPro versions, it is recommended that you specify the PathToCryptoModule parameter of the CryptoManager object constructor as follows: /opt/cprocsp/lib/amd64/libcapilite.so:/opt/cprocsp/lib/amd64/libcapi10.so:/opt/cprocsp/lib/amd64/libcapi20.so\n• None , objects are implemented. You can use HTTP query headers, process return codes, get and set the query body as a string or binary data. Theobjects are implemented. For the HTTPConnection object, the following changes are implemented:\n• The , , , and methods return values of type.\n• For , , , and methods, the syntax for processing HTTP requests generated by 1C:Enterprise script is implemented.\n• None The OpenID pass-through authentication protocol implementation is revised. The implementation corresponds to the Direct Identity version 2.0 mode of the OpenID protocol. Modified format of the OpenID provider address in the default.vrd file (the url attribute of the rely item): httрs://<address of the OpenID provider infobase>/e1cib/oid2op. The default authentication lifetime is 24 hours. Maximum duration of authentication is 168 hours. Modified the protocol for interaction between the relying party and the OpenID provider. In the authentication dialog box, you can disable storing authentication data. For web client, implemented a dialog box for entering the user name and password on the OpenID provider side.\n• None The add-in technology now supports Mozilla Firefox browser version 19.0. You can use add-in adapters for Mozilla Firefox 19.0 in the later versions of the web browser without recompiling the adapters. It is recommended that you specify only the minimum version of the web browser in the add-in manifest file.\n\nTransition from the previous version to the version 8.2.18\n• None Conversion of configurations, infobases, external data processors and external reports is not required during the transition from the previous version to the version 8.2.18.\n• None field in a document journal table, you can do one of the following:\n• Make changes that lead to restructuring of one or several selected document journals.\n• Restructure the tables during the verification and repair of the infobase. To create an index by thefield in a document journal table, you can do one of the following:\n• None For infobases that use the OpenID authentication, you have to change the publishing settings in the file.\n• None For the file infobase, it is recommended that you perform the compression of infobase tables after transition from any of previous versions.\n• None If the current configuration is updated to a new version that has version 8.2.16 or later compatibility mode set and the update is performed using 1C:Enteprise version 8.2.15 or earlier, this can lead to mismatches between metadata description and database structure. Starting the configuration in the 1C:Enterprise mode also becomes unavailable, an error occurs during the startup and the system is shut down. Mismatches occur if any of the following configuration objects are used in the applied solution: scheduled job, constant, exchange plan, accumulation register, or accounting register. To fix the issue, run the infobase verification and repair. The check for mismatches between metadata description and database structure is performed every time, regardless of the states of the check boxes in the Verifications and modes list. If the \"verification and repair\" operation is started in the verification only mode and mismatches are detected, a message describing the problem and the solution recommendations is displayed.\n• New functions and changes\n• Changes that require changes to the configuration and administrative settings\n• Transition from the previous version to the version 8.2.17\n\nNew functions and changes\n• None You can use the Native Client to access Microsoft SQL Server. If both servers are located at the same computer, you can use the protocol in the Native Client (available since Microsoft SQL Server 2005).\n• None The following functionalities are added to 1C:Enterprise script: switching between form opening modes (in separate windows or in tabs); showing or hiding the Sections, Navigation, and Action panels; and managing client connection speed. The following properties are implemented for the ClientSettings object: ClientConnectionSpeed, ApplicationFormsOpenningMode, ShowSectionPanel, and ShowNavigationAndActionsPanels. The SectionPanelRepresentation property is implemented for the CommandInterfaceSettings object.\n• None The web client and web services can be published at Microsoft Internet Information Services 8.0 web server. You can have them published both from Designer or by using the utility.\n• None You can get the number of milliseconds that passed since January, 1, year 0001, 0:00:00 UTC using the function.\n• None The privileged session mode is implemented. In this mode the access rights and data access restrictions are not verified. The privileged mode can be enabled only on session start and only for a user that has administrative rights. To enable the privileged session mode, use the option of the client application command line (also works for the web client) or option in the connection string.\n• None User names and passwords that are passed to , , and objects can contain special URL characters, except colon (:).\n• None The thin client can authenticate at a web server accepting HTTP Basic authentication user names and passwords in UTF-8 encoding.\n• None In the training version, the maximum number of items is increased for business processes, tasks, catalogs, documents, charts of characteristic types, charts of calculation types, charts of accounts, exchange plans, information register record sets, accounting register record sets, accumulation register record sets, and calculation register record sets.\n• maximum number of records in account tables: changed from 500 to 2000;\n• maximum number of records in main object tables: changed from 200 to 2000;\n• maximum number of records in object tabular sections: no changes (1000 records);\n• maximum number of records in record sets: changed from 1000 to 2000.\n• None The software license activation dialog box is now more intuitive and user-friendly. The option to activate a software license for a specific user is removed; activation is always performed for all users on the computer.\n• None The algorithm for printing spreadsheet documents from the web client was modified. The number of copies specified in the field is added to the PDF or HTML document prepared for sending to printer. The and properties are also taken into account.\n• None Improved view of dotted lines when printing PDF spreadsheet documents from a web client that is running in Google Chrome web browser. To have the dotted lines printed correctly in spreadsheet documents in Google Chrome, and also to ensure the correct size of all printed elements, it is recommended that you set the PrintAccuracy property of the spreadsheet document to Accurate.\n• None Status codes for 1C:Enterprise errors returned to a client by the web server comply with generally accepted standards. Trapping errors with codes is not recommended because this hinders regular application functioning. Errors , , and are used as intended and can be trapped.\n\nChanges that require changes to the configuration and administrative settings\n• None catalog manager method returns the following:\n• for 1C:Enterprise of versions up to 8.2.13 (including 8.2.13), an empty string;\n• for 1C:Enterprise of versions 8.2.14–8.2.16 (including 8.2.16), the value;\n• for 1C:Enterprise of version 8.2.17 and later, an empty string. For non-predefined catalog items, thecatalog manager method returns the following:\n• None If a client application connected to a 1C:Enterprise server via a web server receives an exception in plain text or HTML format (instead of internal 1C:Enterprise exception format), the client application still will display the server response. The thin client supports the format. the web client supports and formats.\n• None Web browser setup process is changed for all supported versions of Mozilla Firefox. To have access to full platform functionality in this browser, you have to install . You will be prompted to install the extension on the first start of the web client on your computer. Alternatively, you can use the main menu command to open the dialog for installing and updating .\n\nTransition from the previous version to the version 8.2.17\n• None Conversion of configurations, infobases, external data processors, and external reports is not required during the transition from the previous version to version 8.2.17.\n• None\n• Thick and thin clients of 1C:Enterprise version 8.2.13 or earlier The issue with license compatibility for basic configurations versions is resolved. The thin and thick clients of 1C:Enterprise version 8.2.17.153 or later recognize digital signatures that were generated by any platform version. Digital signatures generated by 1C:Enterprise version earlier than 8.2.17.153 are not recognized by the following clients:\n\nVersion 8.2.16 includes known bug fixes and some functionality modifications.\n• New functions and changes\n• New functions and changes in the 1C:Enterprise mode\n• Changes that require changes to the configuration and administrative settings\n• Transition from the previous version to the version 8.2.16\n\nNew functions and changes\n• None The possibility to set the timeout for operations of interaction with the network resource is implemented for the objects: , , , and when calling the method.\n\nNew functions and changes in the 1C:Enterprise mode\n• None When the error occurs during installation of add in, file system extension or cryptographic tools extension, while using the Microsoft Internet Explorer browser, a link to a page with description of ActiveX security settings is displayed (along with the error text) in the error window.\n• None , in the Microsoft Internet Explorer web browser, opens the help page containg links to the following help pages:\n• Setup of web browser for working with extensions and add-ins The main menu command, in the Microsoft Internet Explorer web browser, opens the help page containg links to the following help pages:\n• None On the first call of the global context method by the specified address of the infobase, when the Microsoft Internet Explorer web browser is used, a notification is displayed. It contains a hyperlink to the help page with description of settings, required for obtaining files.\n• None\n• For the Mozilla Firefox web browser the settings dialog is displayed, using which the required settings can be .\n• The instruction on settings is opened for other web browsers. On the first open of the main application window by the specified address of the infobase, and also every time the additional application window is opened, the web browser pop-up blocker operating is checked. If the pop-up blocker is active then the web client stops executing code and the following actions are performed:\n• None The reverse proxy is now supported. When setting up the proxi-server specify the necessity to generated the headers in the http-query.\n• None Do not use in version 8.3.1, it is considered unknown when the configuration is opened in version 8.2.16. Furthermore, if you set the compatibility mode to , it is displayed as Do not use when the configuration is opened in version 8.2.16. Сonfigurations with unknown compatibility mode are not supported. Compatibility modes with later 1C:Enterprise versions are considered unknown. For example, if you set the compatibility mode toin version 8.3.1, it is considered unknown when the configuration is opened in version 8.2.16. Furthermore, if you set the compatibility mode to, it is displayed aswhen the configuration is opened in version 8.2.16. If you attempt to run or load the configuration with unknown compatibility mode, an error message is displayed, informing you about the required 1C:Enterprise version. If new compatibility mode is not set in a specific 1C:Enterprise version, the effect of the Do not use mode is the same as it was in the previous version. You cannot load 1cv8.dt files generated in version 8.3.1 or later with an earlier versions of 1C:Enterprise. The only exception is when the Compatibility mode property is set to Version 8.2.16 in version 8.3.1.\n• None During the sofware license binding check title and version of Linux operating system are not used.\n\nChanges that require changes to the configuration and administrative settings\n• None (or using the command line option). After logging out, the authentication parameters are not stored anywhere, and on the next authentication the user is prompted to provide the user name and password. In the thin and web clients, you have the option to log out using the new command(or using thecommand line option). After logging out, the authentication parameters are not stored anywhere, and on the next authentication the user is prompted to provide the user name and password. The user name is stored between sessions to simplify the authentication process when the authentication is denied by the OpenID provider (for example, the lifetime of the authentication flag is elapsed). The OpenID authentication algorithm is improved, HTTPS interaction is implemented.\n• None\n• on Windows: ( - for Windows Vista and later). Search for software licenses in the following directories is implemented: 1C:Enterprise searches for licenses in this directory after it checks all of the license directories listed in the documentation. On Windows, if a software license is not found in the licenses directory and the directory %USERPROFILE%\\Local Settings\\1C\\1Cv8 (%LOCALAPPDATA%\\1C\\1Cv8 for Windows Vista or later) exists, the search is performed in the directory %USERPROFILE%\\Local Settings\\1C\\1Cv8\\Conf (%LOCALAPPDATA%\\1C\\1Cv8\\Conf for Windows Vista or later).\n\nTransition from the previous version to the version 8.2.16\n• None Conversion of configurations, infobases, external data processors and external reports is not required during the transition from the previous version to the version 8.2.16.\n\nVersion 8.2.15 includes known bug fixes and some functionality modifications.\n• New functions and changes\n• New functions and changes in the 1C:Enterprise mode\n• Changes requiring changes to the configuration and administrative settings\n• Transition from the previous version to the version 8.2.15\n\nNew functions and changes\n• None The method is implemented for the object.\n• None The event is implemented in the technological log. The event manages registration of \"1C:Enterprise\" system events, intended to analyze by experts of \"1C Company\".\n• None The default technological log is implemented. This log registers events occurring in critical situations (from \"1C:Enterprise\" functioning point of view). List of events written in the log is not documented. Another possibility is implemented to set location of the log and number of hours; upon the time out the information will be removed from the log by default.\n• None The possibility to create subscriptions for events of manager modules is implemented.\n• None The manager object is implemented for the object. The event implemented in the manager module of the filter criterion.\n• None The dialog now includes the information on how the license was obtained: by client application or server.\n• None\n• Session (in the list and in the session properties)\n• Working process (in the list and in the working process properties). Cluster administration console displays information on license for the following objects:\n• None The property is implemented for the object. The property contains information on client license used by the session.\n• None The property is implemented for the object. The property contains information on client license used by the working process.\n• None The object is implemented. The object contains parameters of the client license obtained.\n• None The possibility to save spreadsheet documents to file of PDF format is implemented.\n• None The property is implemented for spreadsheet documents. It manages the spreadsheet print mode in Google Chrome.\n• None The IPv6 protocol is now supported.\n• None The method is implemented for the object.\n• None Implemented the pass-through user authentication, which uses an OpenID-bases protocol version 2.0 (by Direct Identity model). The possibility to use an infobase as the OpenID-provider is implemented. This OpenID provider performs authentication in mode. The dialog of application being launched is used for entering the user name and password. The element is implemented for the file. The command line parameter is implemented for the thick- and web clients.\n• None When merging configurations (including vendor configuration update) it is possible to set order rules for objects existing only in the loaded configurations and marked for merging (transition) to the main configuration.\n• None Implemented generation of quieries to DBMS using ODBC escape sequences for external data sources with \" \" type and for the following functions and expressions of query language: , , , , , , , , , , , , , , , , , .\n• None parameter is implemented for and global context methods. This parameter is used for obtaining return code of launched application, if it is possible.\n• None Implemented the possibility in the configuration check mechanism to search for invalid links to predefined values for charts of accounts (if extra dimensions are specified for the chart of accounts) and for charts of calculation types. This check is performed if the checkbox is set in the dialog.\n• None Implemented the possibility to write the events to the technological log if the error requesting of the HTTP-resource is returned.\n• None When writing events of the technological log the value of property may contain identifiers and descriptions of all exceptions nested in each other.\n\nNew functions and changes in the 1C:Enterprise mode\n• None When the standard function form is opened, it only displays registers for which all required separators (taking the conditional separation into account) are used in the current session (when the form is opened). Previously the form did not open at all if at least one separator was used for at least one register.\n• None The list of available fields of the form (in the dialog) is not cached for the session anymore, and is generated every time when the dialog is opened.\n• None For a managed form fields displaying a complex type attribute, performance of opening the quick choice list is improved for cases when reference types with different quick choice settings are included in content of complex type.\n• None The impact of the debugging mode on the operation speed in \"1C:Enterprise\" mode is reduced for thick client, thin client, server and external connection.\n• None Database operation is optimized for the cases when two or more separators are used or separator of type is used.\n• None Optimized writing of accumulation and accounting register records in the IBM DB2. The optimization is effective when operating with IBM DB2 9.7 FP5 (build 27892). It is recommended to update DBMS to the specified version. When using IBM DB2 of earlier versions negative impact on system performance is possible.\n• None Optimized operations using the expression with many parameters in the list when operating with PostgreSQL.\n• None Optimized opening of a form in the web client when using large number of elements in the form conditional appearance.\n• None Optimized opening of report form containing large number of elements of conditional appearance in the web client.\n• None Optimized opening of a managed form displaying one or several dynamic lists, containing large number of conditional appearance elements.\n• None Operation with the Oracle Database is optimized for certain operations.\n• None The message file specified by the command line option is opened in mode allowing shared reading. When Designer is launched in the batch mode writing to this file is performed immediately, and is not buffered.\n• None When operating with SMTP-server using object, it does not disconnect from SMTP-server when the error 501 occurs.\n• None If command line option is specified in the command line of launcher or in the additional startup options (in the infobase options), the thick client is started with indication of this command line option if the connection to the infobase is performed not through a web server. If command line option is specified in the command line of launcher, then the client application starts, which is selected based on the infobase settings, specified in the list of infobases. If any of these command line options ( or ) is specified, then the mechanism of automatic selection of client application is disabled except for the case when user has explicitly specified the option in the command line.\n• None Implemented the directory to store copies of basic versions licenses ( ). If any basic licenses located in 1C:Enterprise license directories version 8.0 or version 8.1 are found upon launching of a basic version of an application, they are copied to this directory. The search for basic version licenses is performed in the following order: the directory of licenses of version 8.2, directory of copies of previous versions of licenses, directory of licenses of version 8.1, licenses of version 8.0.\n• None When an infobase is being restructured, the check of the uniqueness of the code/number (for documents, charts of characteristic types, charts of accounts, business processes and tasks) is performed only if the code/number length is greater than 0 and uniqueness check is enabled.\n• None The right check in managed forms is implemented for text boxes, located in the form, in the table, and cell of a spreadsheet document (if it has property set).\n• None The boundary values for the display period are directly set in the virtual table parameters if the managed form displays a dynamic list which main table is a virtual table with and parameters.\n• None In Designer: available fields in the dynamic list settings dialog are displayed as fields' names, not as their presentations.\n• None If in the given infobase the first register record is written for the accumulation register or accounting register for the present set of separators, and the given register settings table is empty, then the register is locked entirely (for the current set of separators). In addition, for the turnover accumulation register the table of settings of aggregates will be locked entirely if the table of aggregate settings is empty for the given register and current set of separators.\n• None If a license is not found upon client application start, then in the displayed dialog the button is available to view the log of the license search.\n• None In the dialog the history of licenses which were used with the given infobase is displayed only for users with the right.\n• None If a client application is connected through a web server, licenses obtained for this client application are not listed in the cluster administration console and are not saved in the list of licensed used for the infobase.\n• None During the license binding check only two first digits of Windows OS version number are used.\n• None\n• If a license was obtained by version 8.2.14 or earlier, then the binding is checked for full match with the of list of devices.\n• If license is obtained by version 8.2.15 or older, then the binding is checked only by list of devices, installed at the moment the binding is done.\n• In order to check license binding obtained by version 8.2.14 or earlier only by list of devices installed at the moment the binding created, you need to update the license using the version 8.2.15. During the license binding check only absence of previously installed devices is taken into account, not installation of new ones. The face of increasing RAM does not lead to re-obtaining the license. Re-obtaining the license is needed if the volume of RAM has become less than when license was obtaines. Due to the changed rules of check of the list of devices:\n• None In tabs operation mode, opening a form from a modal window is always performed in a separate window. In this case the parameter of and methods is ignored.\n• None Implemented support for time zones unknown to \"1C:Enterprise\". It is not recommended to store such time zones in the database or pass them to the third-party systems. If the method at server returns a time zone which is not supported by 1C:Enterprise, then it is recommended to use the time zone which is supported by.\n• None When a configuration is loaded from a file, an update file etc., the exchange plan (with enabled property) registers only changes in the current configuration (modified, removed and added objects), not in the full configuration.\n• None When establishing an encrypted connection between a client application and a cluster, as well as between the debugger and the item being debugged, the algorithm of check whether server IP-address belongs to the current host (local computer) is modified. The IP-address belongs to the current host if the list of IP-addresses of the current host overlaps the list of addresses provided by DNS.\n• None The XDTO-serialization of the object is modified. Picture can be successfully restored if there is a picture with the same name in the target configuration.\n• None method call leads to clearing of caches relating to the changed objects at client application side.\n• None In the header and footer cells of managed form tables only those lines are displayed which completely fit the cell height.\n• None Implemented the possibility to call method of object without specifying the method parameter.\n• None The 'index by dimensions' is of cluster type for new independent and non-periodic information registers. When creating first scheduled job the 'index by job' identified is cluster also. To create necessary indices in the existing infobase one of the following actions can be performed:\n• None Moved from the OpenSSL version 0.9.8a to OpenSSL version 1.0.1.\n• None If parameter is specified for and methods, they open log file in the mode which allows shared writing. This offers the opportunity to read event log of other 1C:Enterprise operating entity.\n• None\n• The transaction that the midification was done is not complete.\n• The user tries to perform authentication. For locking-type DBMS (Microsoft SQL Server, IBM DB2) changing infobase users in transaction no longer conflicts with authentication process, except for the case:\n• None The latest versions of web-browsers – Mozilla Firefox, Apple Safari and Google Chrome – are supported without specifying a specific version supported. The Microsoft Internet Explorer is supported as before – with explicit indication of supported version of thebrowser.\n• None Recommendations for implementation of external components, compatible with \"1C:Enterprise\" earlier than version 8.2 are removed from the external component creation technology description.\n• None The call of or methods, or writing an object in a form it updates presentations of references in managed form tables associated with a form attributes of , , types and in the form fields of type. In addition, calling the method updates presentations of references in a form fields of type. Also, at writing an object in a form it updates presentations of references in the form tables, associated with dynamic lists.\n• None The dialog of type selection in the client application contains only types for which the current user has the right.\n• None Table box cell (in ordinary forms) and table cell (in managed forms) displays up to 20000 characters. This restriction affects working with text from the Script and generation of the tooltip text.\n• None Implemented the possibility to print spreadsheet documents in a web client using documents in PDF format. Implemented setting in the web client options dialog.\n• None\n• If the parameter is selected on the tab of the tab of the Data Composition Schema wizard, the value specified in the data composition settings is used.\n• If the parameter is not selected on the tab of the tab of the Data Composition Schema wizard, the default value of this parameter specified in the data composition schema is used. If data composition system parameter expression contains other parameters all of these parameters have no values specified, the following is used as a value of this calculated parameter:\n• None If the number of managed locks in a single space exceeds 20000 in a single transaction, the lock escalation occurs and the space is locked entirely. When using independent separators, lock escalation is performed for a single set of separators values:\n• The entire space is locked only within separator values.\n• The escalation does not affect sessions with other separator values.\n\nChanges requiring changes to the configuration and administrative settings\n• None If one of the command line parameters defining application operation mode ( or ) is used in the client application launch, this parameter is passed through to the client application being started from a parent client application using and global context methods (with indication that restart is required).\n• None method call does not trigger the event handler of the managed form for opened forms.\n• None ) are removed from link texts, and parameter values (after symbol) are encoded in correspondence with the chapter of symbol and two hexadecimal symbols) for dimension values of information registers and table keys of external data sources. If the information register dimension is of complex type and type name is specified in dimension value, then type name is also encoded. Navigation links created by version 8.2.15 do not work in previous versions. The format of navigation links is modified. Quotes () are removed from link texts, and parameter values (aftersymbol) are encoded in correspondence with the chapterof RFC 1738 (usingsymbol and two hexadecimal symbols) for dimension values of information registers and table keys of external data sources. If the information register dimension is of complex type and type name is specified in dimension value, then type name is also encoded. Navigation links created by version 8.2.15 do not work in previous versions.\n• None In the external components technology implemented support of Mozilla Firefox browser version 6.0. External components adapters for Mozilla Firefox version 6.0 will work with newer versions of the browser without recompilation. For the manifest file of external components working in Mozilla Firefox it is recommended to specify only minimal required number of version of the browser.\n• None New version of linguistic sorting is implemented for Oracle Database DBMS ( file). The new version is based on UNICODE 6.0 standard, also Russian and letters are discerned. Instalation of the new version is not required. \"1C:Enterprise\" can operate either old or new version of linguistic sorting. If an infobase is loaded from file then indices will be automatically created in the new sorting version (if it is installed in the system).\n• None If the is set to for a text box then for a web client the property of this field is updated in correspondence with the value displayed by this field, on each modification of this value.\n• None If authentication separation is used in an applied solution and the corresponding separators are not used in the current session then using method of object throws exception.\n• None The configuration file used in Linux OS for calculation of the font metrics is located in subdirectory of 1C:Enterprise binary files directory. The environment variable is no longer used when searching for this configuration file.\n• None When operating with the configuration repository the \"1C:Enterprise\" used by the repository server should be the same as the one used by the Designer.\n• None If the document property is set to value, then after document is written from the regular form the modification flag of register record sets, included into collection of the written document, is cleared.\n\nTransition from the previous version to the version 8.2.15\n• None Conversion of configuration repository, external data processors and external reports is not required during the transition from version 8.2.14 to version 8.2.15. Specific case is described below.\n• None If data separation is used in an infobase then the Designer should be run once. At that, there should be no client connection established (including those with opening the authentication dialog), before starting to work with this infobase. When the conversion is complete, the infobase can be accessed using the version 8.2.14.\n• None After installation of version 8.2.15 on Linux OS, utility should be launched to create file in the subdirectory of the binary files' directory.\n• New functions and changes\n• New functions and changes in the 1C: Enterprise mode\n• Changes that require changes to the configuration and administrative settings\n• Transition from the previous version to the version 8.2.14\n\nNew functions and changes\n• None The mechanism of common attributes implemented. It allows adding attributes to different metadata objects without modificating them.\n• None The mechanism of separating data implemented. It allows storing data, splitting into separate data areas in one infobase. Operation with the data areas is independent.\n• None Implemented the possibility to obtain data from external data sources. The ODBC interface is used. In order to access data from the external data sources you can uses object model, query language and data composition system. standard function implemented. metadata object implemented.\n• None Extended list of logical integrity issues, which can be detected and recovered by the configuration check.\n• None Implemented the possibility to merge managed forms, at that merge rules can be specifiedfor different form parts. Managed form comparison report implemented.\n• None Context tooltip in the module editor opens after entering the operator.\n• None Implemented the possibility to authenticate web client session using the POST-query to the address. Parameters transferred in the query body take precedence of query string parameters. Use of HTTPS protocol is recommended for sending the query.\n• None Context tooltip implemented for parameters of some methods, if the parameters are specified by string literals. parameter implemented in Designer settings.\n• None Multiline text editing implemented in managed form editor for the property of the form command, attribute, attribute column and group (of type) and of form table field.\n• None Extended module check mode implemented. This mode provides checking for calls to object methods and properties \"using dot\" for some types, and validation of some parameters ( type) for some methods.\n• None property implemented for cells and pictures of spreadsheet documents.\n• None property implemented for managed forms. If this property is set to and the form has been forced to save the form data automatically, then data is saved in the settings during the form close.\n• None Implemented the possibility to edit the access restrictions templates, defined for all roles, in one window.\n• None Dump and load of common pictures using Designer commands and implemented. Picture parameters implemented for and options of the batch mode of Designer startup.\n• None Dump and load of access rights using Designer commands and implemented. parameter implemented for and options of the batch mode of Designer startup.\n• None Using separate table space in the Oracle Database, when error is raised during infobase restructure or loading infobase (from file) is now supported. Table space ( ) is not created automatically and must be created by a database administrator.\n• None Possibility to specify named parameters in data access restriction templates implemented. Use character in front of the parameter name when referring to the parameter in template body. Possibility to use predefined templates and in texts of data access restriction is implemented. Possibility to use function and operator for preprocessor expressions (in data access restriction texts) implemented.\n• None Possibility to display managed form tabs to the left and to the right from the form item implemented.\n• None Implemented support of operator in the web client.\n• None Possibility to specify a functional option for common form is implemented. If the common form is disabled by functional option, its standard command (of the form) is not displayed in the interface.\n• None The utility now can update publication, delete publication and specify OS authentication for executing the publication.\n• None DBMS query plan can be written in the technological log. You must add the element and property for events of SQL operator execution for different DBMSs in the configuration file.\n• None and objects according to the International domain names are supported for theandobjects according to the RFC-3490\n• None global context function implemented. If current user does not have the verified right, then the function raises exception and writes the event in the event log.\n• None property implemented for managed form field extension. Property can be used only if a field is placed in the form table.\n• None The possibility to filter configuration objects, not included in any subsystem, is implemented. <Not in any subsystem> option is implemented in the subsystems tree of the filter dialog.\n• None Implemented the possibility to include functional options and functional options' parameters in the subsystems content.\n• None Possibility to create common forms for report, report settings and report variant is implemented. The common forms can be specified as properties values, indicating the corresponding forms. Configuration properties , and implemented. Forms, specified in these properties, are used if corresponding forms are not set for the report.\n• None An array can be passed as a parameter for the function. The array values are displayed in form as a table.\n• None Including in the configuration is not recommended distribution settings rule implemented. Objects with such rule are not offered for merging with a target configuration. In this way configuration objects for demonstration purposes can be filtered.\n• None tab is implemented in the window.\n• None event handler is called for the managed form table, linked with dynamic list, in the following cases:\n• After writing an object to a form.\n• After checking or clearing the deletion mark.\n• After reading or writing changes of an exchange plan contents. event handler is called for the managed form table, linked with dynamic list, in the following cases:\n• None event handler is called for the managed form table, linked with register record set after executing the command.\n• None access right implemented. This right allows saving user data and settings (history, favorites, form settings, command interface setting, report settings, etc.).\n• None Implemented the possibility to save a spreadsheet document to an OpenDocument Format ( ) spreadsheet file.\n• None Implemented the possibility to use as a value of a collection item for session parameters with fixed collection type ( , or ).\n• None The Syntax Assistant now includes information on which methods cache results when called at client.\n• None A user message can now be linked to a specific form. In this case implemented the property for the object. Implemented methods and allowing to set and get association of object, form and attribute on this form using script.\n• None event is implemented in the manager module of several objects. The event is called at server on receiving standard managed forms for some objects. You can redefine opened form using this event. If the form being opened is specified explicitly, the event is not called.\n• None\n• Merge of and merge report for applied objects' characteristics.\n• Merge of and merge report for functional options' content.\n• Merge of and merge report for roles, data access restrictions and data access restriction templates.\n• Merge of the of event subscription contents. New possibilities of compare and merge mechanism implemented:\n• None A query, containing operator with multiple operands and with sorting in a subquery, can be executed if there are no calls to the external query fields from the subquery.\n• None Implemented properties , , and for the objects , , , , and . The properties are used for specifying a position of the corresponding area border relatively to the chart area.\n• None\n• Display of horizontal labels is enhanced. The property implemented for the object and parameter for the object of the data composition template.\n• For the objects implemented , , , and properties.\n• For the system enumeration implemented and values.\n• None\n• When attribute or command is deleted it is offered to delete linked elements.\n• The submenu implemented in the context menu of form elements, allowing to create a new handler and to go to the existing one.\n• In the form element context menu, linked to a command, implemented the possibility to go to the procedure, executing the command action.\n• In the form preview window implemented selection of elements. At the same time automatic selection of element, corresponding to the element in the preview window, in the list of form elements is performed.\n• In form preview window implemented context menu for elements, similar to context menu in the list of form elements.\n• Implemented the possibility to go between linked objects in the form editor using the command.\n• None and events implemented in the technologic log. Events are used for analysis of interlocks and timeouts on locks.\n• None The properties (list of names of lock spaces), (locks applied) and (list of numbers of connections, which a collision occurs with) are implemented in the technologic log of the event.\n• None Selecting a user from the drop-down list is available when specifying a user, on behalf of whom \"1C:Enterprise\" will be launched from Designer.\n• None Support rules can be specified hierarchically when a configuration is compared and merged with vendor configuration.\n• None method:\n• The parameter can contain the choose file dialog in the save mode, which will be called for each received file, except for those, which are specified by the full path.\n• The value of the property of the corresponding object will be used as initial name of a file transferred.\n• If choosing a file to be received is canceled then the property of the corresponding object will be set to empty string value.\n• The method returns if at least one file is saved at a local file name.\n• The procedure of receiving files is actually executed after finishing with the dialogs of selecting file names for all received files. The following features implemented for themethod:\n• None Questions, asked by the cryptography extension, are generated using system interface localization language.\n• None Obligatory parameters of a data composition scheme can be specified in the data composition system.\n• None Implemented the object and function of the data composition system expression language. The function and the object allow creating custom aggregate functions receiving values of other aggregate functions as arguments.\n• None The function implemented in the data composition system expression language. The function result is an array, elements of which are parameter value for each detail record. If the data composition system expression contains the function, then it makes the expression aggregate. It is allowed to specify the keyword before the function parameter; in this case the returned array will not contain the same values. As a parameter the function can use an expression returning a value table. In this case the result of function will be an array, containing values of the first column of the passed value table.\n• None The function implemented in the data composition system expression language. The function result is a value table, in which the number of columns is equal to the number of the function parameters, and data in columns are obtained from detail records. If the data composition system expression contains the function, then it makes the expression aggregate. It is allowed to specify the keyword before function parameter; in this case the obtained value table will not contain rows with the same values.\n• None The function implemented in the data composition system expression language, calculating expressions in the context of some grouping. You can specify from which record to start and which record to end with the array of records for calculation (you can specify the first, last, next, previous records, also current and value of record filter by sort field), define sorting and processing for the same values, specify groupings not only by grouping names but also by names of grouping fields.\n• None The property implemented for the object. The property indicates that the data set is an attribute of a dimension field.\n• None For the and functions of the data composition system expression language the possibility is implemented to pass an array or a value table as parameter. The result is a generated string containing representation of all items of the parameter-object, separated by character.\n• None Implemented the possibility to pass the result of function as a parameter for aggregate functions of the data composition system expression language (excepting and functions).\n• None Implemented the possibility to use an array and a value table in the standard processing of report details, created in the data composition system.\n• None The function implemented in the data composition system expression language. The function intended for deletion of duplicate values from an array.\n• None The function implemented in the data composition system expression language. The function is intended for obtaining a value table containing only specified columns from a source table.\n• None The function, intended for sorting the array elements, implemented in the data composition system expression language.\n• None The function, intended for joining strings into one, implemented in the data composition system expression language.\n• None The subordinated field implemented for each data composition system numeric resource-field. This field contains a percent of resource value in the current hierarchical group.\n• None The subordinated field implemented for each data composition system numeric resource-field. This field contains the ratio of the resource value in the current cell to the value of resource total by row or series (in percents).\n• None The subordinated field implemented for each data composition system numeric resource-field. This field contains the ration of the resource value in the current cell to the value of resource total by column or point (in percents).\n• None The subordinated field implemented for each data composition system numeric resource-field. This field contains ratio of the resource value in the current cell to the value of resource total in current group by row or series (in percents).\n• None The subordinated field implemented for each data composition system numeric resource-field. This field contains ratio of the resource value in the current cell to the value of resource total in current group by column or point (in percents).\n• None The subordinated field implemented for each data composition system numeric resource-field. This field contains ratio of the resource value in the current cell to the value of resource total at the current hierarchy level of current group by row or series (in percents).\n• None The subordinated field implemented for each data composition system numeric resource-field. This field contains ratio of the resource value in the current cell to the value of resource total at the current hierarchy level of current group by column or point (in percents).\n• None The possibility to fix rows and columns in a generated report automatically implemented. and properties implemented for the object.\n• None The function implemented in data composition system expression language. The function returns an array, each element of which contains a result of calculating expression for group by specified field.\n• None The function implemented in the data composition system expression language. The function returns a value table, each row of which contains a result of calculating expression for group by the specified field.\n• None Implemented the possibility to use keyword after a field name in the property of the object. Adding this keyword indicates, that the expression will be used for hierarchical records of group by field, specified before the word, and for all nested groups, for which the value of the given resource is not specified.\n• None Implemented the possibility to manage order of placement for resource fields in report: either after all group fields, or in order as they are placed in the report.\n• None Implemented the possibility to display additional information in report ( data composition system parameter). All fields available in the given group can be used as additional information.\n• None One can go to link in the formatted document, displayed in form in read only mode. The link is opened in new browser window.\n\nNew functions and changes in the 1C: Enterprise mode\n• None Mobile browser Safari for Apple iPad is now supported. iOS operating systems of versions 3.2, 4.2 and older are supported. Version 4.2 or newer is recommended. The list of usage features of Apple iPad web-browser on the is published in the documentation.\n• None Safari 5.0 (Mac OS X 10.5 or newer and Windows) web browser support is implemented.\n• None The modal window that may appear when switching web clients' windows in Google Chrome is not displayed starting from browser version 8.0.\n• None The composition and appearance of context menus of setting the main window panels setting is modified.\n• None Appearance of check boxes, unavailable for editing (the third state), is modified in tables and forms.\n• None Implemented the display of the help information on the data composition system expression language.\n• None At first launch of the web client in Microsoft Internet Explorer 6.0 the warning is displayed that it is recommended to use Microsoft Internet Explorer 7 or newer, or another browser.\n• None The flag implemented for the search in table dialog. You can use this flag if search was already performed in the table. Cancelling search cancels all search terms at once.\n• None The submenu implemented in the main menu. It contains commands for setting visibility of panels (sections panel, navigation panel, actions panel), setting content of panels and desktop and hiding all the panels. The key press can be used to hide all the panels. The menu item is removed.\n• None A context menu is implemented in the web client for the HTML-field, displaying content, received by internal navigation link.\n• None For Mozilla Firefox browser, the sequence of actions to install the file operation extension, cryptography extension and external components is modified. During the installation the user is prompted to check for the necessary permissions in the browser settings (the browser settings dialog will open).\n• None Appearance of the forms displaying values of type and when using the method is modified in the web client.\n• None The button in the error message is displayed only if the debugging mode is enabled. The window now contains a hyperlink providing access to the error log. In case of critical error and platform termination, with debugging mode disabled, the hyperlink is displayed in the error message window.\n• None User can change the composition of report express user settings either in the dialog ( column) or using the command in the report settings window.\n• None Operating mode setting dialog for Mozilla Firefox 4 opens at the first start of any infobase in this browser at the computer. If settings are set to the required values, then the dialog is closed automatically and the web client continues loading.\n• None Implemented changes intended to support performance of the web client in Mozilla Firefox browser.\n• None Display of command bar icons, menu and sections panel in web client optimized.\n• None Count of server calls in the web client functionality was reduced.\n• None Optimized the execution the following query: , if and contain values of reference type.\n• None When operating with Oracle DBMS performance of operations of writing register records and writing objects with tabular sections is improved.\n• None The writing of register records of accumulation and accounting registers in Oracle Database DBMS is optimized.\n• None The selections, executed by chunks (used in methods and at restructuring) optimized for all supported databases.\n• None Transaction log parameters for an IBM DB2 database being created, are changed.\n• None Optimized a number of 1C:Enterprise server mechanisms to improve performance and scalability for large number of users.\n• None File operation (including temporary files) is optimized for the following mechanisms: full-text search, help, object.\n• None Work with MS SQL Server optimized for some operations.\n• None Server cluster operating with session data has been optimized.\n• None and functions performance improved for large number of registered users.\n• None The operation of retrieving changes from the configuration repository is optimized.\n• None Update of the spreadsheet document after interactive edit and also after program modification of separate cells of the spreadsheet in web client optimized.\n• None Performance of the managed locks mechanism is improved.\n• None Modified the operation of storing constants and accumulation register settings when the compatibility mode is disabled. A separate database is used for each object. If the compatibility mode is enabled (set to or ), then reverse conversion is performed in order to provide launch of applied solution using version 8.2.13.\n• None The presentation of the data composition system parameter is renamed to . The format of the parameter output in the report title is changed.\n• None The behavior of the report detailing is modified. A double-click on a report cell opens a value contained in the report cell. Use right click or the corresponding key button to open the details menu. The behaviour described is only actual if the comaptibility mode is disabled. The property is implemented for the and objects. The event implemented for a spreadsheet document field extension. The and parameters are implemented for the method of the object.\n• None The value, that is returned on a form close with the method, is destroyed immediately after the form is closed, if there are not any references to this value from other objects.\n• None Properties indicating the main and additional record form are cleared for the information register if the record mode property is set to .\n• None The icon for the command is modified in the toolbar of the formatted document field.\n• None If a publication at a web-server is performed for the first time, and publication with the specified name already exists, the warning is displayed.\n• None The server is notified about a form close and locks releas, that are bound to the form, on call of server procedures from the client, opening forms and system inactivity for more than 20 seconds not only for low speed connections, but also on normal connection speed. The server receives information about all closed forms not only those for which the data were locked.\n• None Search is cancelled, if it was performed, on activation of a user message, indicating a form table (linked with , and form data). After the search cancelation the message is placed at the required table cell. A filter specified by the Script with the property is not cancelled.\n• None Icons of '1C:Enterprise'-related files are taken out to a separate library, registration of which is done during the first installation of the system, and it is un-registered when last version of the system is removed from the computer.\n• None If the parameter is not specified or is set to when the global context method is called, then the dialog is not displayed.\n• None\n• Only modified objects information is output into property comparison report.\n• Only modified objects information is output into exchange plans (including different autoregistration settings) comparison report.\n• Only modified objects information is output into subsystems comparison report. The compare and merge mechanism is revised:\n• None Subsystems are displayed in the 'filter by subsystems' mode.\n• None Including the subsystem help in the help contents completely depends on the state of the subsystem property and does not depend on this property of objects, included into subsystem. If 8.2.13 compatibility mode is disabled, then the system changes the state of check box automatically for subsystems so that to save the help contents tree similar to the version 8.2.13. The behavior is not altered in 8.2.13 or 8.1 compatibility mode (the subsystem help was displayed in the help contents if any of the objects included in subsystem content had the property set, and the subsystem itself had this property disabled).\n• None When the web client (from the Designer or using the utility) and web-services are publicated the possibility to publish to ' ' directory for the Microsoft IIS web server (version 7.х) is excluded.\n• None If the Designer is launched with the options without parameters, then the storage history report is generated with grouping by versions. If the property of the configuration being edited differs from the database configuration, then the value of database configuration property is used at generating the report from the command line. In the 8.1 and 8.2.13 compatibility mode the platform behavior is not changed, that is the report is generated with grouping by objects.\n• None When calling managed form items (context menu or automatic form command bar) as named elements of the collection, you can use , and prefixes in any script language variant, whatever language variant was used upon the form creation.\n• None More than one resource can be displayed in a chart created in the data composition system. The behavior is not changed in 8.1 and 8.2.13 compatibility mode (i.e. only one resource can be displayed in a chart).\n• None When creating object of the type basing on the font description and if a non-empty string is specified as the font name, the value of the property of the received object will be set to the value, if the configuration has the compatibility mode disabled; otherwise, the property is set to .\n• None The order of properties of the properties palette is changed in some categories.\n• None When dumping the configuration files, template files of graphical schema and geographical schema types are unloaded with extension ( and accordingly). These templates can be loaded either from files with extensions specified, or without them.\n• None The compiled source code is directly executed at web-client side. Translation of the source code into theJavaScript is not used any longer.\n• None For the dynamic list with a custom query set, the check is performed for key values identifying a displayed row. If there are duplicate key values found – a warning is displayed and data cannot be displayed.\n• None The parameter is implemented for the configuration file. The parameter specifies the default platform interface language. Use of files is kept for compatibility (in case if the is absent in the configuration file).\n• None For the object the property is set on calling the object method.\n• None If the compatibility mode is disabled the and functions do not perform recording of the event of the event log if the right being checked is absent.\n• None\n• 32 different colors can be used for chart series (the property of the object). In the compatibility mode the data composition system uses 8 colors to generate a chart.\n• The property of the object and the parameter of the object in the data composition templates are considered outdated and kept for compatibility.\n• None Default support rules now allow detailed adjustment for objects with different distribution rules when: a) enabling the possibility to modify vendor configuration; b) configuration is set to vendor support, and c) configuration is being updated and modification is enabled. You can specify the support rules in details for: a) new vendor objects by distribution rules; b) unchanged, or becoming unchanged objects, by distribution rules, and c) modified objects, by distribution rules. In the Support Options dialog, the default values disallow editing objects for which the rule is set. In the Change Support mode the dialog check box is unchecked by default.\n• None The menu item (Designer menu ) renamed to . The menu item (Designer menu ) renamed to .\n• None property implemented for a form tables. The property manages the call for the search dialog on text input, if the table is an active element of the form. If the compatibility mode is disabled, then if the table is linked to form data of or type, the search on input is not performed.\n• None When dumping the configuration files, the HTML-document templates files are unloaded for each language, for which the template is defined in the configuration. Language code is included in the filenames. On load, an attempt to load a corresponding file for each language is performed (according to the language code included in filename). If the corresponding file not found, the attempt to load file is performed without taking into account the language code in the filename.\n• None The color of the lines displaying fixing of rows and columns in the spreadsheet document, is changed.\n• None property for the technological log event is recorded only in 8.2.13 compatibility mode.\n• None The presentation of a deleted user is modified in records and in the filter dialog of the event log. The old presentation: , the current presentation: .\n• None In Russian interface the presentation of access right is changed to .\n• None The standard function is available to all users, not only those with administrative rights.\n• None The standard function is available to users with the right set, not to users with administrative rights.\n• None Calling the method leads to clearing of the cache memories: reference presentation, object data, quick choice data, choice forms, and restrictions by type.\n• None The query wizard uses the same icon for the table fields as for the object attributes.\n• None If the data composition system settings the display of totals is disabled for the row/column group, then totals for rows/columns of this grouping are not displayed in the column/row of totals by row/column.\n• None In the text box, associated with attribute of type with precision, implemented the possibility to display leading zeroes after the decimal point using the format string. Behavior is not changed in the compatibility mode (in described case leading zeroes are not displayed).\n• None Hyperlink, inserted to the formatted document, remains unchanged. In previous versions if the hyperlink was not absolute, then full path to the infobase was added to hyperlink.\n• None Increased accurasy of conversion the floating-point number ( type) to the type of \"1C:Enterprise\" system.\n• None For the form control, displaying a document journal column, and for the report field the following properties are used automatically (specified for the corresponding attributes): , . For the form element, displaying a document journal column, the and are applied also.\n• None When a new role is created the following rights are set by default: , , and .\n• None The cancellation of the transition to winter time is taken into account for Russia (starting from 2011). This behavior impacts the work of the following script methods: , , , , . Also this modification affects the behavior of standard platform features which operate the session date. You need to update the operating system in order to make the method work properly.\n• None Information about time zones for Russia is brought into accord with new rules of time calculation.\n• None In accordance with the laws adopted in The Republic of Belarus and Ukraine, daylight saving time for these countries was revoked in the version 8.2.14.537. After the repeal of the above mentioned law in Ukraine, daylight saving time was restored in the version 8.2.14.540.\n• None The procedure defining the time zone, set in the system for Windows OS, is modified. At first, the attempt is performed to define the time zone by presentation returned by OS. If the found zone does not meet the parameters, the search is performed for the first appropriate zone.\n\nChanges that require changes to the configuration and administrative settings\n• None format instead of . The distribution kits for Linux are published at the http://users.v8.1c.ru using theformat instead of\n• None The configuration property can be set to value.\n• None A new interface operation mode implemented: opening forms in main window and using tabs to switch between opened windows. To manage the operating mode use command line parameters ( – to work in tabs and – to work in separate windows) and parameter in the client application settings dialog. When transiting to operating with tabs mode, it is recommended to analyze the application code of commands belonging to the group. If two commands must open one and the same form in two different tabs, it is required to specify the unique key or key form parameter when the form is obtained.\n• None command line parameter name is renamed to . The parameter is left for compatibility. installation parameter is renamed to . The parameter is left for compatibility.\n• None property is renamed to for the object.\n• None property is renamed to . The possibility to use is left for compatibility.\n• None property is renamed to . The possibility to use is left for compatibility.\n• None event of form report extension is executed after loading settings. In the forms created in previous versions, the event handler selected in form properties is switched to handler.\n• None Implemented the possibility to group by data composition system resource-fields. The behavior is not changed in the 8.1 and 8.2.13 version compatibility modes (data composition system resource fields can not be used for grouping).\n• None System behavior is changed on calling the method and at modifying functional options' parameters. All additional forms are closed (with calling the corresponding form handlers) and then the list of elements of the main form is updated or the command that called on the opening of the additional form, is executed.\n• None A query is executed to automatically define document time in the privileged mode (at writing of the document form and at calling of the method).\n• None If the compatibility mode is set to Do not use , then exception is thrown on attempt to go to invalid navigation link. The exception can be processed using the operator.\n• None method renamed to , method renamed to , method renamed to . Previous method names are left for compatibility.\n• None The settings composer's form items , , , , , , , implemented for link with columns, are renamed to , , , , , , correspondingly. Old names are available in compatibility with version 8.2.13 and version 8.1 modes.\n• None If the compatibility mode is disabled then the parameter is obligatory for the method of the periodical information register. In the 8.2.13 and 8.1 compatibility mode the behavior is not changed (the method can be used without the specifying parameter, but the result is undefined).\n• None Microsoft Internet Explorer browser external component adapter registration is performed \"for computer\". External components installation directory is changed for the Microsoft Internet Explorer browser. ( for Windows Vista and older) directory is used for installation. Administrator can install external components, if user doesn’t have the rights to perform installation.\n• None If the content model is found during XSD-schema export then all elements specified within this model are defined as not obligatory.\n• None Interpreting the different variants for inheritance of object types is performed more correctly when XDTO factory is created.\n• None When a row is duplicated in a managed form table linked with a value table, a value tree, a tabular section or a filter, the event handler is called after the new row is filled in.\n• None When sizes of a managed form elements are defined automatically, the size of the font specified in the form elements properties is taken into account. Change of the font size performed through form and dynamic list conditional appearance, does not affect the size of the form element. A call to a server is performed if the font is changed programmatically. The behavior is not changed in the 8.2.13 compatibility mode (the font size is not taken into account when defining the element size).\n• None A string consisting of 12 spaces is a text presentation of standard attribute value for a new object. The behavior is not changed in the 8.2.13 and 8.1 compatibility modes (the presentation is equal to empty string for a new object).\n• None You can manage text update in the text box when a value is passed from an attribute to a managed form element. Use the property of the text box and method of the text box extension. The behavior is not changed in the 8.2.13 compatibility (the property is ignored; update is executed always, except for the case when the value of the same type is set in the handler as a type of a value in the text box.\n• None Exception occurs when and methods of the object are used simultaneously. The behavior is not changed in the 8.2.13 compatibility mode (the value set by method is considered priority).\n• None Exception occurs if the type of the Value to be locked parameter does not correspond to the type of the lock space field when calling the method of the object. The behavior is not changed in the 8.2.13 compatibility mode.\n• None When a lock is set on the spaces and , in some cases the period of lock is corrected automatically. The behavior is not changed in the 8.2.13 compatibility mode.\n• None When a managed lock is set on the space if value of the extra dimension is set by a reference to a characteritic, then this characteristic must bу one of the extra dimensions for this account in the Chart of accounts. If the corresponding extra dimension is not specified for an account, then an error occurs. The behavior is not changed in the 8.2.13 compatibility mode.\n• None and global context methods use session localization code by default (which can be set using the command line parameter). The behavior is not changed in the compatibility mode.\n• None When checking rights for attributes and tabular sections of reports/data processors, if the role has not check box set, and if the right is not set for the report/data processor, then it is considered that the right is not set for the attribute (tabular section). The behavior is not changed in the compatibility mode.\n• None Writing data not supporting serialization to the data value storage is not supported. The behavior is not changed in the compatibility mode.\n• None method renamed to . The old name is left for compatibility.\n• None In the managed form text box the text is aligned by the top edge, if multi line mode is set for the text box, otherwise – by center (vertically).\n• None English presentation for the object key for the sections panel is changed from to . Settings, saved in previous versions of system and English variant of script, will be lost.\n• None Modified keys of objects, intended for desktop command interface storage. For the desktop navigation panel the key is implemented instead of . For the desktop actions panel the key is implemented instead of . In version 8.2.13 compatibility mode old object keys are used.\n• None\n• of all forms, except forms, located on the desktop;\n• of forms, located on the desktop workspace;\n• of all forms, except forms, located on the desktop;\n• of forms, located on the desktop workspace; Sequence of event handlers calls is modified for calls, associated with closing forms, when \"1C:Enterprise\" in managed application mode is terminated. The sequence of calling handlers is as follows:\n• None We have switched from use of ICU 4.0 to use of ICU 4.6. Thereby date and number formatting is changed for several languages and formats.\n• None Word sorting for russian language using and letters is changed.\n• None Name of standard attribute is changed in metadata. is used instead of . In compatibility mode the name is not changed.\n• None Microsoft Internet Explorer 9 web browser support is implemented. It is recommended to verify the correctness of generating the HTML templates of the applied solution when transferring to use this browser. In particular, it is recommended to change specifying font size from to .\n• None In the external components technology added libraries for building extensions for the Mozilla Firefox browser with and packages.\n• None Mozilla Firefox 4 and 5 browser support is implemented in the external components technology. The attribute in manifest file is no longer ignored and is used for selecting the necessary installation kit. You should build separate installation kit for each version of browser in order to provide external components operability with this browser.\n• None The method is renamed to . The following names are left for compatibility matters: for executing at thick client and at server; the is left for executing at thin client.\n• None More complete validation for the structure of leading calculation types is implemented. At the same time the increase of number of access rights error messages is possible for the chart of calculation types, if there are data access restrictions for reading.\n• None If the paramater of the data composition system is set to value, then the grouping template cells are merged only for columns of the corresponding grouping when grouping template is generated. The behavior is not changed in the version 8.1 and 8.2.13 compatibility mode (the grouping template cells are merged within all columns of parent grouping).\n• None The mechanism of configuration change records for operating in the distributed infobase is changed. The configuration is fully marked as changed in the following cases: loading configuration from a file, connecting configuration to the configuration repository, updating configuration using the support mechanism with disabled possibility of changes.\n• None If there are roles, that were not edited after creating (they do not have any rights for any object) during the conversion of infobase from version 8.2.13 and earlier, then the and rights are not set automatically for these roles.\n\nTransition from the previous version to the version 8.2.14\n• None Attention! The infobase file format has been changed. It should be converted for use with new version of \"1C:Enteprise\". After conversion is started, the infobase can not be used with previous versions of the 1C:Enterprise 8 platform versions. The reverse transition (for using the infobase with previous versions of \"1C:Enterprise\") can be performed by executing infobase dump (in version 8.2.14) and load infobase (in previous version). Please, create a backup copy of an infobase prior to conversion! If any software or hardware failures occur in the conversion process, the data contained in the infobase may be lost. Conversion is performed on first call of infobase, executed by Designer of version 8.2.14 before the authentication. In order to perform conversion you should answer in the affirmative for questions, asked by the system on Designer start. Please, create a backup copy of an infobase storage prior to conversion! If any software or hardware failures occur in the conversion process, the data contained in the storage may be lost. Infobase storage is conversed on first call to storage data by any user.\n• None Conversion of configurations, infobases in client-server mode, external data processors and external reports is not required during the transition from the version 8.2.13 to the version 8.2.14.\n• None In the configuration property is set to Do not use , the infobase cannot be used by versions 8.2.13 and earlier. If you need to use the infobase with these versions, you should set the property to . At the same time new functions and changes, supported in disabled compatibility mode, will not work.\n\nVersion 8.2.13 includes known bug fixes and some functionality modifications.\n• New functions and changes\n• Changes requiring configuration changes and administrative settings\n• Transition from the previous version to the version 8.2.13\n\nNew functions and changes\n• None In the obtain software licenses dialog it is allowed to obtain licenses on electronic media, even if automatic license obtaining is possible.\n• None The following pictures have been added to the picture library: , .\n• None In the access rights editor the flag has been implemented. If the flag is not set then rights for parental object are considered when determining rights for the configuration object. Flag affects the following items: standard attributes, standard tabular sections, attributes of standard tabular sections, attributes, tabular sections, attributes of tabular section, commands.\n• None Implemented the property for the object. The property manages the possibility to get a functional option value in the privileged mode.\n• None\n• property of the infobase in the cluster console. Implemented the possibility to manage distribution of client licenses by \"1C:Enterprise server\". For this purpose implemented the following:\n• None Reduced time of establishing connection with IBM DB2 DBMS server when running large number of users.\n• None Accelerated the launch of 1C:Enterprise client application when using dynamic configuration update.\n• None In thin client optimized the display of the HTML-document template by the HTML-document field.\n• None Implemented storing the configuration file for all users of computer ( directory or for Windows Vista and higher). The installation program writes and parameters to the configuration file for all users. Settings, performed in the start dialog, are written to local configuration file (of specific user).\n• None When editing in the Designer the and properties of configuration objects and managed form text box links to deleted attributes and fields are not displayed. Previously such links were displayed by string . When creating a form on server in 1C:Enterprise mode links to unavailable or deleted attributes or text boxes are deleted.\n• None In the Designer setting common module properties , , simultaneously with is disabled.\n• None The parameter of the event has been renamed to . Renaming was performed for the events of the following objects: form field extension for a calendar field, form field extension for a picture field, form field extension for a spreadsheet document field, form decoration extension for a picture, form table, table field, calendar field, picture field, spreadsheet document field.\n• None Transaction, initiated by the system when reading objects, is opened only if at the beginning of reading the transaction is not opened yet.\n• None Implemented using and parameters of connection string, specified in file, for authentication when creating a session. If the user name and password are both specified simultaneously in the run string of the client application and in the connection string of the file, then connection string parameters are ignored and the run string parameters are used.\n• None If a field, containing characteristic value, is disabled (or becomes unavailable) by functional options, then all characteristic fields, which values are stored in this field, become unavailable.\n• None Report, running in the background, is terminated when report form is closed even if in the event handler of the report form the parameter was set to . Background job, executing the report, is terminated after executing the event handler of the report form.\n• None If the operation is performed in the text editor for the selected text block, then the required number of spaces or tabs is removed from each line. Other modifications of the text are not performed.\n• None In the calendar implemented display of abbreviated day names for Vietnamese and polish interface languages.\n• None It is forbidden to enter characters that are invalid in terms of XML 1.0 in the text boxes of the web client. When you try to enter such characters interactively they are ignored, when pasting from the clipboard - the invalid characters are ignored and won’t get into the inserted text. If a character is placed by script, the web browsers Google Chrome and Safari replace invalid character by the character \"?\", and the text box becomes unavailable for editing.\n• None Changed display of links in the navigation panel of the auxiliary window. The command is displayed in bold if it is located in the group.\n• None User message defining a specific row in the tabular section will be positioned in the same row after changing the order of rows in the tabular section. If the row, to which a message is connected, has been deleted, the message will appear attached to the form element that displays tabular section.\n• None Modified cursors that display the presence or absence of details in the spreadsheet document cell in Google Chrome and Safari browsers.\n• None The client and server licenses are not verified when the infobase is created. The license verification starts only when the Designer launches or in the \"1C:Enterprise\" mode.\n• None Implemented the possibility to obtain the program license if the server license is not found during launch of the thick or thin client (in the client server mode).\n• None The method is available at thin and web clients. The information about method availability at server is removed from the Syntax Assistant.\n• None When the help tree is generated by subsystems in Version 8.1 compatibility mode the right for the subsystem is not taken into account.\n\nChanges requiring configuration changes and administrative settings\n• None For the working server, which is not central, and in which there is a not empty list of central server administrators, there must exist the administrator in the list of server administrators, with OS authentication of user, in the name of whom the cluster central server’s is launched or must be the administrator with name and password, matching the name and password of one of the cluster central server administrators.\n• None When transforming object to form data, for all values of types , , data is cleared in those columns, for which there isn’t any corresponding columns in the object data.\n• None When choosing a value for extra dimension in the cell of a table form, linked with a set of accounting register records, the choice parameter for the field is specified automatically only when type of extra dimension is of catalog type, specified as the value for the field of the chart of characteristic types used as types for extra dimensions in the chart of accounts. The corresponding type of extra dimension is a value for the choice parameter.\n\nTransition from the previous version to the version 8.2.13\n• None Conversion of configurations, infobases, external data processors and external reports is not required during the transition from the version 8.2.12 to the version 8.2.13.\n• None If the startup program is used for launch from network location, then you should replace it for the similar program of the version 8.2.13.\n\nVersion 8.2.12 includes known bug fixes and some functionality modifications.\n• New functions and changes\n• New functions and changes in the 1C:Enterprise mode\n• Transition from the previous version to the version 8.2.12\n\nNew functions and changes\n• None Implemented the repair of the infobase when internal storage structure is damaged due to an error of dynamic update. Request for repair is displayed on start of the Designer if such damage is found. Modification is implemented in version 8.2.12.96.\n• None The following values added to the list of valid time zones: , , , , , , , .\n\nNew functions and changes in the 1C:Enterprise mode\n• None The modal window with warning opens in some cases when switching web client’s windows when using the web client in the Google Chrome web browser.\n• None The check box is implemented in the managed form of the infobase initial image creation.\n• None The size of the window, formed by function, is stored separately for each of the following types: date, number, string, multi-line string. The size of text box in case of multiline input is equal to 5 lines for the first function call.\n• None The sequence of attributes has been changed in the list of attributes of managed form wizard for the document journal.\n• None The calculator window and the calendar windows always open in windows, which size is not less than minimal window size for the browser when web client is operating using the Safari web-browser.\n• None If configuration is being edited for the run mode, then user interfaces are excluded from the list of objects, in which the search is performed, in the global search dialog (the tab).\n• None In the Desktop command interface editor commands are shown as elements of tree of available commands, subordinated to metadata objects, even if object has only one command.\n• None The sequence of form types has been changed in the object form wizard.\n• None If access to fields, required for obtaining the reference object representation, is forbidden by data access restrictions or access to object is restricted at the access rights level, then obtaining presentation of such an object does not affect the process of current transaction.\n• None Dynamic list, placed in the ordinary form, activates the fill checking (if version 8.1 compatibility mode is disabled and the editing mode is set ) upon completion of editing for the following objects: catalog, document, chart of characteristic types, exchange plan, chart of accounts, chart of calculation types, business process, task of the business process, information register.\n• None The data composition system field is considered unavailable, if all fields used in the expression for this field, are associated with disabled functional options. In such a case all fields, included into the field expression in the query, are taken into account, and also expressions from unions, if they are found.\n• None Installation program registers the cluster consol \"for computer\". Registration, performed using the command file, is executed \"for user\".\n• None Installation program registers the COM-connector \"for computer\". There is a possibility to perform registration \"for user\" using the command line: .\n• None If the utility has not enough access rights when executing the publication, then request on privileges escalation is executed.\n• None Attachment of add ins, created using the COM technology, using methods , and registration of add in objects are executed \"for user\". If the registration \"for user\" is failed, then \"for computer\" registration attempt is executed.\n• None Installation program (and launch of client application using option) executes registration of the \"V82.Application\" object \"for computer\". If the privileges to perform this operation are not enough, the user is prompted to register \"for user\". If the registration \"for user\" is failed, then \"for computer\" registration attempt is executed.\n• None The and applications control the necessary privileges for operations of registration, cancellation of registration, service start and service stop. If the required rights are absent, then the request for privilege escalation is executed.\n• None If there are columns with the same name when generating table, located in the field of the event log record, then these columns are merged into one. At the same time the count of rows in this table is increased in such a way so that in the resulting column there are all unique values from the columns with the same name. Values, specified in other columns, are duplicated in the generated rows.\n• None method call of the object throws an exception only after unsuccessful attempts to decrypt are finished using all available certificates, and not after the first error.\n• None Parameters ( , , , , , , , , , , , (except web-client)) are transferred from the current application launching command line to the application launching command line (for thin and thick clients), used in and methods and when the button is pressed in the error dialog. Parameters, which can be specified both in the command line and interactively, are transferred to a new command line only in case they were specified exactly by the command line parameters.\n• None Implemented the possibility to install add-ins, extenstion for working with files and cryptography extension by users with rights to install ActiveX and working in the Internet Explorer web browser on Windows Vista Business OS (and higher) with the ActiveX Installer Service enabled.\n• None If installation of the driver protection key is chosen in the installation program and the installation is running under Windows Vista or above, then the user will be prompted to increase the privileges (UAC) before performing the installation.\n• None If the table, in which no fields are used, is specified in the query, then all data access restrictions are applied to this table. Restrictions are applied \"by OR\", this means, that all records are available, if they are available by at least one condition. If there aren’t any conditions specified for some fields, then the request is executed for all records in the table. If table of higher level is specified, then restrictions, designated for the nested tables’ columns, are not applied. If table is nested, then restrictions are applied both to nested tables and tables of higher level.\n• None The parameter of the event of the form field extension for a Gantt chart contains temporary object, containing interval boundaries modified by user. If the parameter is set to , then passed interval will be set to the form data and the handler will be called. Otherwise, the date range will not be changed in the form data and the handler will not be called.\n• None The same commands as in the context menu of a form element, chosen as a source of commands are automatically added to the group with the specified source of commands, added to context menu of the form element, in the \"1C:Enterprise\" mode. Previously filling was performed similarly to the command toolbar.\n\nTransition from the previous version to the version 8.2.12\n• None Conversion of configurations, infobases, external data processors and external reports is not required during the transition from the version 8.2.11 to the version 8.2.12.\n• New functions and changes\n• New functions and changes in the 1C:Enterprise mode\n• Transition from the previous version to the version 8.2.11\n\nNew functions and changes\n• None The option of controlling the search of hardware dongle ( parameter) has been implemented. Now you can indicate this dongle in the startup command line, in infobase properties, in and files, in the startup command line of 1C:Enterprise setup program and in the setup window of the startup program. Disabling the search of hardware dongle allows to speed up the startup of basic versions of 1C:Enterprise and client applications, provided that reception of client licenses is implemented through 1C:Enterprise server or web-server extention.\n• None The option of indicating the startup parameters and in the infobase parameters (in the list of infobases) has been implemented. Parameters will be used only during startup with interactive launcher.\n• None The possibility of debugging script and measuring the performance has been implemented in the web client. In the client-server mode debugging is enabled only if 1C:Enterprise server debugging is enabled. The automatic search for debugging items on remote computers is not supported when the web-client is being debugged for the file mode infobase. The possibility to enable debugging interactively is not supported in the web client. The possibility to debug external reports and data processors is not supported.\n• None The condition text is displayed as a tooltip in the Designer, when hovering a cursor over the picture of conditional breakpoint.\n• None During execution of lengthy operation (over 20 minutes) regular notification of 1C:Enterprise server on session availability has been implemented on the thin client. As a result, server does not delete the session even if the operation on the client takes more than 20 minutes.\n• None For predefined data representation the Designer uses the property of the data.\n• None Turkish language support has been implemented in the and functions.\n• None The following pictures have been added to the picture library: , , , , , .\n• None During the change of field view or decoration view, the values of form element properties that are the same in the old and in the new element type are saved in the form editor.\n• None Tab option with the use of operator has been implemented for all system enumerations.\n• None The option for obtaining the system enumeration value by its name has been implemented for the method.\n• None method has been implemented to get full name of predefined value by its value.\n• None value has been implemented for system enumeration. The node of such type contains only the space, tabs and line break characters.\n• None property has been implemented for the object. The value of this property determines the availability of nodes of type when reading XML. During the configuration development it is recommended to set the property of object in the value in cases when there are values consisting only of space characters in the content portion of the data transferred in XML format.\n• None The parameter has been implemented for the method of object.\n• None If the configuration is edited for the run mode, then the pictures not used in the managed application will be unavailable for interactive selection from the library of pictures.\n• None The filling of properties has been implemented in the web client for cases of error occurrence. and of object. The detailed error description string (in the web client) includes the text of the initial string of the module.\n• None The name of the element form of the chart of characteristic types has been changed in the form wizard for the chart of characteristic types. The name has been changed to The form of the element of the chart of characteristic types .\n• None Order of forms in the wizard of the new report form is changed. The order of forms is set in compliance with the order of the properties, describing the main forms of the report: a report form, the settings form, the form of variants.\n• None If the configuration property is set to the value, and the Use ordinary forms in the managed application property is set in the value, and if there is an ordinary form of the object, then commands for creation, editing and input on the basis of elements, irrespective of the current configuration run mode, will be available in the dynamic list of the managed form in the thick client.\n• None The property has been implemented for the object.\n• None Display of the message window and automatic switch to the linked form element when clicking on such a message in the list of messages has been implemented, provided the message is linked to the fields of document register recordsets.\n• None Checking of the uniqueness of the key fields of tabular section records has been implemented when executing testing and correction of file mode infobases. Uniqueness of the key fields of tabular section records is ensured by DBMS in the client-server mode.\n• None When executing search for object references, the search for exchange plans has been implemented in the property, in cases when is selected in the reference search settings dialog. Search for references in interfaces ( checkbox) is available only in the case when the configuration editing is performed for the run mode.\n• None Contrast ratio of the active window button in the designer windows panel and the 1C:Enterprise in the ordinary application mode has been increased.\n• None Implemented the possibility to set (and get) the specified text at the beginning of the window title using methods / . Short title simplifies the definition of belonging of the window to one or another infobase.\n• None The option to indicate a spreadsheet document as the source of commands has been implemented. In this case the following commands become available: , , , , , , , , , , , , , , .\n• None The global context method has been implemented in the web client.\n• None property has been implemented for the type form group. It makes sense to change the property only for the submenu located directly in the command panel.\n• None XDTO-package editor functionalities have been expanded: copying/insert functions have been implemented, the sequence order of elements has been changed, the control over element name correctness has been implemented, etc. The dialog of package element type selection has been modified.\n• None The option for background execution of reports created with the use of the system of data composition in managed form has been implemented for the client server version. The parameter allowing to execute reports in the background mode has been implemented for the report form extension method. property, allowing to manage the report status display in the spreadsheet document, has been implemented to extend the spreadsheet document field. property for managing the automatic mode of the report status display has been implemented to extend the report form.\n• None The mechanism of background jobs startup has been changed. Now background jobs are started up right after the execution of the method of the background jobs manager, and not after a while, as it used to be the case.\n• None The global context method has been implemented. In web client, the method allows to get from user the permission to execute several operations with files, which later will be executed without additional questions.\n• None Storage of some settings ( command display flag, debugging permission at startup setting flag, web client low connection speed mode flag, link obtaining dialog external link flag, add-ins settings, lists of search lines in the Help menu, color comparison settings of text and spreadsheet documents) has been transferred to the settings storage (available through the global context property.\n• None Parameters and has been implemented for the virtual table of the accounting register. These parameters allow to perform the selection of the required number of first entries into the virtual table, duly arranged with the means of the virtual table.\n• None The option for description of the storage of characteristics of metadata objects in a configuration has been implemented. This option is used by the system of data composition in reports and in dynamic lists. After setting the description, the data composition system automatically determines the additional characteristics of metadata object and provides the types of the object characteristics in the available fields list of the object, without the need to use the query language structure in each report. If the data composition schema query contains the description of characteristics for a certain type, then the characteristics of this type are used for the query fields, and the characteristics described in the metadata are not used. If characteristics for a certain type are not indicated in the query, then the characteristics described in the metadata are used for this type. Automatic filtration in the course of the characteristic selection according to the object type, for which the characteristic is edited, has been implemented for editing characteristics.\n• None Output parameters and choice parameter links are supported in the data composition system for the fields, which are characteristic values.\n• None The option of arbitrary setting of the set of buttons has been implemented for the global context method. The option of indicating the button which will reflect the timeout period countdown has also been implemented.\n• None The context menu command has been implemented for the form element Table in the managed form editor. The command is intended to simplify filling table with columns and to make setting table columns’ parameters easier. Command executes similarly to the automatic filling in the table when linking the form table with the form attribute of the corresponding type.\n• None The option of displaying the title of the group of columns in the form table has been implemented. The properties , , , , , , have been implemented for the form group extension for a group of columns.\n• None For the standard function of the managed aaplication (in the list form and item form) implemented the display of the field for events , , , , , , .\n• None The global context method has been added. Method returns user access right presentation in user language.\n• None Server debug item corresponds with user work session when debugging the client-server mode and file mode, operating using a web server. If the user session moves to another working process during debugging, then the debugging will stop.\n• None Color appearance of some interface elements has been changed, contrast ratio has been increased. Changes do not apply to the 8.1 version compatibility mode.\n• None The option of changing the property of the object has been implemented. It is required to fill in this property, if pictures, located in letter attachments, must be displayed in the text of HTML-text messages. The property of the has been added.\n• None For conditional appearance of individual cells in a table form implemented the possibility to manage visibility, accessibility, display and mode.\n• None For conditional appearance of individual cells of the dynamic list implemented the possibility to manage visibility, accessibility and displaying.\n• None For the object when operating in Linux OS implemented the possibility to insert images in the message body in HTML format and setting information about message encoding.\n• None The object has been implemented. It is intended to store a text documents, containing formatting elements (highlighting, fonts, pictures, hyperlinks). The managed form field extension has been implemented for editing formatted document.\n• None The mechanism of cryptography based on asymmetric encryption (public and private keys) has been implemented. For web client the work with cryptography extension has been implemented. The mechanism of cryptography does not contain the actual implementation of algorithms for cryptography. It provides a set of objects that allow to interact with external cryptography modules of third parties.\n• None Implemented protection against unauthorized use using software licenses. Protection using HASP dongles or software licenses is determined by the distribution kit of the protected product.\n\nNew functions and changes in the 1C:Enterprise mode\n• None Web browser Google Chrome 4.0 and 4.1(Windows) support has been implemented. List of functionality limitations when operating in the web-browser is published in the documentation.\n• None Web browser Safari 4.0.5 (Mac OS X 10.5 and higher) support has been implemented. List of functionality limitations when operating in the web-browser is published in the documentation.\n• None Support of working with several monitors for the thin client, for the thick client and for the web client in the managed application mode has been implemented. Web client operation depends on the web browser window behavior when working with several monitors.\n• None The option of saving the spreadsheet document in the Microsoft Office OpenXML (Microsoft Excel 2007 ( ) and Microsoft Word 2007 ( )) files has been implemented.\n• None The Find Substring option for the columns reflecting reference types has been implemented in the managed form tables.\n• None Single search history for all the tables in managed forms has been implemented.\n• None Saving (for the session duration) of the current row and of the list of open nodes for the window has been implemented in the thin and in the thick client.\n• None Context menu containing commands on the operation with clipboard and on the text highlighting, for the text fields of dialog and the dialog of extended error description called by the button from the error window, has been implemented in the web client.\n• None Three dots addition to the right of the text not fitting into the space allocated for the form elements titles, decorations of type and fields of type has been implemented in the web client.\n• None Commands , , for HTML document field have been implemented in the web client. If the HTML document field displays the external resource, then the search is implemented by the standard capacities of the web browser (the document content received to the address different from the address from which the web client was launched).\n• None Interactive search and replace command in multiple line text boxes and in the form text document field has been implemented in the web client.\n• None Interactive printing of HTML document field content has been implemented in the web client. The item is available in the main menu. The button is available in the area of system commands of the auxiliary window. Printing is not possible if the HTML document field displays an external resource (the document content has been received to the address different from the one from which the web client was launched).\n• None Interactive saving of the HTML document field content has been implemented. and items are available in the main menu. The button is available in the area of system commands of the auxiliary window. Saving commands are available only if there is an HTML document field on the form.\n• None button, removing all forms from the desktop, has been implemented in the desktop customization form.\n• None In the web client, when attempting to close the window blocked by another window, a standard browser warning is issued, including the following text: This window can be closed only after all other windows opened from this window are closed! Select Cancel to reject the closure of this window! .\n• None If the sections panel is displayed in the mode, then the names of sections are aligned by the upper boundary of the sections panel.\n• None Messages about full-text search errors, occurring in the case of too many search words, in cases of the use of structure type (fuzzy search) or (substitute characters), have been clarified.\n• None The menu, consisting of the following commands: , , , , , , , has been implemented in the main menu of the web client. These commands are also available in the area of system commands.\n• None The parameter in the dialog has been implemented in the web browser Mozilla Firefox. The flag allows or forbids to use the authentication of operating system (it manages the web browser parameter). The flag is disabled by default.\n• None Addition of three dots to the text not fitting into the allocated place in the navigation panel, in the action panel, in the application auxiliary window title, in the user’s operations history element has been implemented in the web client.\n• None Merging of 1C:Enterprise windows into one group, irrespective of the launched client ( and ), has been implemented in the Windows 7 operating system. Windows of the startup interactive program ( ) form their own group.\n• None In cases when incorrect text line is entered into the text box, the option of returning to the value that was in the text box before the beginning of the text entry has been implemented.\n• None The property for the table column group in the form user settings has been implemented.\n• None In the managed application the value choice form, containing list of available and selected values, has been implemented for the and filter parameters of the standard function.\n• None In the list of windows, opened using command, the application title (for the main application window) and form title (for auxiliary application window) are displayed. The string and application title (for auxiliary windows) are not included into application title.\n• None In the web client implemented hotkeys to expand ( ) and collapse ( ) all groups of commands in the navigation panel.\n• None The work with clipboard when copying and inserting metadata objects has been optimized for the sessions in the Designer.\n• None Operation of internal mechanisms of the platform with reference types values has been optimized.\n• None Operation under the load of the platform internal mechanisms when working on multiprocessor systems in multi-user mode has been optimized.\n• None Opening of the window has been optimized.\n• None In cases of the use of Microsoft Internet Explorer web browser with the set extension for working with files, transfer of large files from the client to the server has been optimized for the web client. MSXML component of versions 6.0 or 4.0 is used in such file transfers. Warning is issued if this component is not available on the computer.\n• None Switching of sections has been optimized in the web client.\n• None Opening of the forms setup window has been optimized in the web client.\n• None Client-server interaction for the thin and for the thick clients (in the managed application mode), when opening the notification window and the status window, has been optimized.\n• None The performance of data query execution with the use of a restricted access to the data, after changing the session parameters not used in the access restrictions, has been increased.\n• None Operation of the accounting register virtual table has been optimized.\n• None Completion of the form table cell editing has been optimized in the web client.\n• None Mechanism of operating with the infobase user list in case of large number of users has been optimized.\n• None The time rate of executing query to a virtual table of when base register supports the action period has been increased. In 8.1 version compatibilty mode the time rate of execution has not been changed.\n• None The memory consumption in the mechanisms of comparing and merging configurations, including provider configuration update, has been optimized.\n• None The use of memory when using a web client, especially in the Microsoft Internet Explorer web browser, has been optimized.\n• None The operating of the various system mechanisms, using temporary files, has been optimized.\n• None Execution of some operations when working with the Postgres DBMS has been speeded up.\n• None The same name: is used when registering the service of the 1C:Enterprise x86-64 server (with the help of the setup program and ) in Windows OS. The name, used earlier during registration with the help of the setup program, is not used any longer. After the installation of the new version of 1С:Enterprise х86-64 it is possible to register the new server service without deleting the old one. If such a situation occurs it is necessary to cancel the registration of the old server service manually with the help of the Windows OS utility. If there is a set server of 1C:Enterprise with the settings different from the default settings, it is necessary to execute a repeat registration of the server service with the required parameters, using the utility from the new version. A detailed description of the utility parameters is provided in the chapter 3 of the \"Client server mode. Administrator manual\" book.\n• None When transiting from the version 8.2.10 to the version 8.2.11 list of infobase users is converted when this list is modified at first time. When transiting from the version 8.2.11 to the version 8.2.10 old user list (list at conversion time) is used.\n• None The mechanism of the program installation in Windows OS has been changed. VBScript use has been excluded.\n• None The libraries for building extensions for the Mozilla Firefox browser with new version of are added to the external add-ins technology.\n• None The mechanism of the year autofill when entering dates, if the year is not set explicitly, has been changed. Setting of the next year when entering the dates of the beginning of the year (January-February) at the end of the year (November-December) has been excluded. Setting of the next year when entering the dates of the beginning of the year (January-February) at the end of the year (November-December) has been excluded.\n• None New enumerations are created with the property disabled. In cases of creating the default list form for enumeration, the property is enabled automatically.\n• None ) will be executed in the following cases:\n• The user executing the startup is a part of the group of local administrators;\n• The user executing the startup is not a part of the local administrators, but the installation of programs (the key of the register) is allowed in the user and the computer group policies. Automatic installation of the new version with the startup program () will be executed in the following cases:\n• None Authentication of the OS in the thin client on the web server on behalf of the current user is not executed in cases of the explicit indication of the user name, irrespective of the provision of password.\n• None The extension installation directory for working with the files for the web browser Microsoft Internet Explorer has been changed. directory is used for the installation. Extension registration is executed for the current user of the operating system.\n• None The behavior and the layout of the window, displayed during the installation of an add-in and of the extension for working with files in the web client, have been changed.\n• None During reading the data the mechanisms of the platform, saving the data in XML format (the data composition system, interactive commands of data exchange), execute the installation of the property in the in the value.\n• None The report form extension command has been renamed into . The report form extension command has been renamed into . The sequence order of commands, provided by the report form extension, has been changed in the command panel.\n• None If, during the new object recording (exchange plan, catalog, document, chart of accounts, chart of characteristics types, chart of calculation type, business process, task) a message to the user has been formed in the transaction, then references to the recorded object will be cleaned in the messages to the user.\n• None During execution of conditional appearance the current data of the form table, to which the processed element is related, and not of the form the first by the elements sequence, will be used. For instance, if the form contains several tables, related to the attribute of the form type, then the conditional appearance will operate with the current data of the processed form table.\n• None The Language of full-text search queries in the data section has been implemented in the built-in Help. The section is located in the branch. The Format of search expressions for the search in the Help menu section has been changed to Language of full-text search queries in the Help menu . The section is located in the 1C: Enterprise – Getting help – Search by random description text branch.\n• None Installation in the default values of the sizes and positions of windows, as well as of the position of separators, will take place before the beginning of work with the web client of 1C:Enterprise, version 8.2.11. Current user settings will not be used.\n• None The attribute of data reference types will not be displayed in the list of available fields of the data composition schema in the 1C:Enterprise mode. This field can be used for setting the data composition schema with the use of the script. This field is also displayed in the list of available fields in the data composition schema wizard.\n• None The command is displayed in the form command panel always before the command.\n• None The method has been implemented for the form field extension for a field of type. Repeat reception of the picture will be executed if the field is linked to the type form attribute.\n• None For russian interface language the presentation of type has been changed to .\n• None The managed form control bar availability for bypassing using key does not depend on the value of property.\n• None The technology for creation of add-ins has been changed, it is recommended to modify the add-ins (created using COM technology), as well as the extensions for the web browser Microsoft Internet Explorer, in such a way as to execute the registration of an add-in or of an extension not for the computer, but for the specific user. During the installation the add-in should not generate messages about successful installation. It is executed by the web client. The add-ins not generating messages are not compatible with the 1C:Enterprise of the version earlier than 8.2.11.\n• None It is prohibited to assign the values of the type of , , , , , , to the attributes of the following form type: , , . Exception is generated in the case of an attempt to execute such assignment.\n• None The value of property for the subordinate attributes (constants) is set by default as value for the attribute of type form.\n• None The parameter type of the and methods of the object has been changed for the type. The option of specifying the values of former types has been left for compatibility.\n• None Repeat selection of the current command of the application main window navigation panel does not lead to the command execution.\n• None It is necessary to have administrative permissions to use the following methods: and .\n• None The use of command line parameters, transferred in the , in the and the global context methods, has been implemented in the web client. All the values of the command line parameters, which can be passed during the web client startup to the address line, can be used in this parameter.\n• None Setting of parameters of functional options for the main window form (with the use of the method) affects the content of the auxiliary window navigation panel.\n• None The property has been implemented for the form element. Automatic determination of the need skip the element has been implemented during the setting of the property value in the value, for the following form elements: , , and . For example, this property will have the value for the form elements, provided this button is the default button, and if it is not the case.\n• None All the fields of data sets of the data composition system (regardless of the field value type) are available for selection. The fields of type are additionally available for selection, grouping and ordering.\n• None The use of editing parameters set in the field containing the characteristic value, including the choice parameter links (set in metadata), the quick choice, etc., is implemented in the data composition system when working with characteristics (input in the form of fields corresponding to the types of characteristics).\n• None Setting of the current user language as the template language has been implemented for getting the template on the server and in the external connection mode. The behavior has not changed in the mode of compatibility with the 8.1 version (the configuration language is set by default).\n• None Filling of the for a new user field in the data composition system is executed according to the script option set up in the configuration. The data path looks as in the English option of the script, and it looks as in the Russian option, where is the unique field number. The behavior has not changed in the mode of compatibility with the 8.1 version (the data path has always been generated in the English language).\n• None When opening the ordinary form of information register record, the property value is set as equal to the current date, provided this property is not filled. In 8.1 version compatibility mode such filling is executed only if the form of record is opened from the list form. In other cases this property is not filled.\n• None The English language value has been changed for the system enumeration. is used instead of .\n• None The description of the IBM DB2 DBMS system operation has been included. Query connection is not allowed if two tables are being connected with the condition, including the comparison of the tabular section fields.\n• None Checking of the existence of the OS indicated user is not executed when setting the property value for the object and when editing the user in the Designer.\n• None handler invocation (as well as processing of the handler parameters’ values after the completion of its execution) has been implemented for the text box for the following cases:\n• Selection of value from the choice list opened in the process of the text input;\n• Selection of value from the choice list opened upon the completion of the text input;\n• Selection of the single value upon the completion of the work with the input field. Thehandler invocation (as well as processing of the handler parameters’ values after the completion of its execution) has been implemented for the text box for the following cases:\n• None The column fixation mechanism in the managed form table has been changed. Instead of defining the number of columns, which will be fixed to the left and to the right, specific columns (or groups of columns) that will need to be fixed are indicated. property has been implemented for the indication of the need of fixation (for the form field located in the table and for the group of type). Thus, the number of fixed columns will depend on the columns fixation settings, on the values of functional options, on the user rights and on the current user settings. and properties are not recommended for use and have been left for compatibility purposes.\n• None global context method operation has been changed. Now the result of the method operation contains the error text including the information on the module line and on all the nested errors. It is not recommended to use the method to generate messages to the user.\n• None The option of setting the has been implemented for the dynamic list of the managed form with the main table. It is recommended to set up this property for the dynamic lists created in the previous versions.\n• None Keywords for the query language extension for the data composition system have been renamed: has been renamed to , has been renamed to , has been renamed to , has been renamed to , has been renamed to , has been renamed to , has been renamed to , has been renamed to . The old names have been left for compatibility purposes.\n• None The event log saving format has been changed. The extension has been changed to for files, containing common event log information. For the part of the event log file the extension changed to .\n• None If there is no schedule data for a specific record of base calculation register and this record fully gets in the base period, then result of this record is taken into account. In 8.1 version compatibility mode this record result is ignored.\n• None Using values of type as return values of module functions with return values reuse with scope is prohibited. If such value is used, the exception will occure.\n• None When deleting objects using method , any exception occurred during the deletion, leads tо the termination of deleting process and return of control to the built-in language. In 8.1 version compatibility mode the behavior has not changed (some exceptions were handled on one’s own and notice of the calling code was not performed).\n• None , , type, the following is transferred as value for the property of parameters for and events:\n• Row id, if dragging is performed within a single table,\n• Collection item, if dragging is performed between different tables. When performing drag and drop to the managed form table, connected with form attribute oftype, the following is transferred as value for theproperty ofparameters forandevents:\n• None Disabling the property does not prevent dragging from another table.\n• None If more than one element is being dragged into the table with property set to or drag is performed from outside of this table, then the standard event handler does not cancel the drag.\n• None Modified the automatic generating of managed form item names. Changed names of managed form items of the report created by the form wizard.\n• None If in the query the totals are obtained by balance fields, the data in query is obtained by union and at the same time the balance fields are obtained in one part and zero values are obtained in the second part, then the query must clearly indicate obtaining of fields – the periods, for which the data is obtained from virtual table.\n• None The documents register records wizard includes in the generated code the call to delete existing register records of the record sets, the new register records are generated for, in case when the configuration’s main run mode is and the document’s property is set to or . It is recommended to modify configurations accordingly.\n\nTransition from the previous version to the version 8.2.11\n• None Conversion of configurations, infobases, external data processors and external reports is not required during the transition from the previous version to the version 8.2.11.\n• None\n• when this list is modified at first time, transition form the version 8.2.10 to version 8.2.11 is performed at the first time for the given infobase;\n• if transition is performed not at the first time, but the list of users has been modified in the version 8.2.10 later than in the version 8.2.11 (except file-mode infobase, where conversion is performed only at the first transition). When transiting from the version 8.2.10 to the version 8.2.11 list of infobase users is converted in the following cases: After the conversion of the list of users two lists of users are maintained in the information base: in the \"old\" (list format to version 8.2.10, inclusively) and the \"new\" (list format starting with version 8.2.11) format. Previous content of list of users in \"new\" format is deleted. When transiting from version 8.2.11 to version 8.2.10 the list of users in \"old\" format as of the conversion time will be used. When you change the list of users to the \"new\" format, there is no change in the list of users in the \"old\" format, except the following cases:\n• If the list of users in the \"old\" format is empty, when creating or editing a user with administrative rights in the \"new\" format, the user will be added to the list of users of \"old\" format.\n• If the list of \"old\" format is only one user, when creating or editing a user with administrative rights in the \"new\" format, the user will replace the user from the list of \"old\" format.\n• None After the installation of the new version of 1С:Enterprise х86-64 it is possible to register the new server service without deleting the old one. If such a situation occurs it is necessary to cancel the registration of the old server service manually with the help of the Windows OS utility. If there is a set server of 1C: Enterprise with the settings different from the default settings, it is necessary to execute a repeat registration of the server service with the required parameters, using the utility from the new version. A detailed description of the utility parameters is provided in the chapter 3 of the \"Client server mode. Administrator manual\" book.\n• Changes that require configuration changes\n• None In the event log implemented the event, which is written when access is denied for a user when checking the access rights and data access limitations. In 8.1 version compatibility mode, this event is written to the event log not in all cases. When operating with Oracle Database this event is logged regardless the compatibility mode. If it operates with IBM DB2 database earlier than v9.5, this event is not logged regardless the compatibility mode.\n• None In the event log implemented the event, which is written when information from the database is read. This event is not logged in 8.1 version compatibility mode, only if it's not operating with Oracle Database, in which case the event is always logged. If it operates with IBM DB2 database earlier than v9.5, this event is not logged regardless the compatibility mode.\n• None Implemented the possibility to manage writing the event log events using the and method. Additional setting is specified for particular metadata objects for the and events.\n• None Information about current operating system user is written in the field for the and event log events.\n• None Information about current user properties is included in the Data field for the , and event log events. The field of these events are displayed only for users with administrative rights.\n• None Extended possibilities to specify a filter in the method. Implemented the possibility to specify several filters. Implemented the support of filter in the and fields for new and modified events in the event log.\n• None Changing of time zones in the Russian Federation regions is now supported. The new rules take effect on March 28, 2010 at 02:00 (local time). The changes affected the following time zones: , , , . Modification implemented since version 8.2.10.82.\n• None Implemented the check on using the character when typing a name for a group in the list of infobases. Error message is displayed when typing this character.\n• None commands are available on the managed form in the mode.\n• None The message is displayed when trying to interactively perform parameterized global command, located in the form navigation panel with the property set, if the command is located on the form of the object, which is a command parameter and if the described form is in the mode or if the right is lacking for this object.\n• None Implemented to specify the availability flag for the form command, connected with current table row, depending on the mode of the table.\n• None When restoring list of the dynamic list filters the dublicated filter elements are not allowed.\n• None If in the data access restrictions for data of turnover accumulation register dimensions are used, which are not included in totals, then stored register totals are not used when calling the turnover virtual table and the query is executed by the record table.\n• None The status bar is displayed over all application windows (of 1C:Enterprise client), but not over all operating system windows, in the thick and thin client.\n• None Removed the of the object. You should use the global context method instead.\n• None A warning about impossibility to operate with storage of previous version is displayed during conversion of the configuration storage from version 8.1.\n• None The button is active after conversion is started when conversing file variant of the infobase from version 8.1 when warning about impossibility to operate with infobase of previous version is displayed.\n• None Implemented deactivating of displaing of incompletionmark when text is edited without modifying the property. Display refreshes after text editing is complete.\n• None The , and event log events are written both on interactive, and programmatic modification of infobase users.\n• None The event log event is written only when authentication is successful.\n• None The and fields are written for the event log event.\n• None If unavailable field is used in the appearance of the conditional appearance item, then using this item is disabled when the method of the data composition settings compiler is called.\n\nChanges that require configuration changes\n• None Current user name is written in the field when unloading the event log to XML. Full user name is written in the 8.1 version compatibility mode.\n• None When the event log is written as .XML in 8.1 version compatibility mode the names of , and elements do not change.\n• None Data about authentication parameters are written in the field, not in the field, for the and error event log events.\n• None Unloading from collection and fields (structures and arrays) is not performed when unloading the event log to XML or to a value table in the 8.1 version compatibility mode.\n• None HTML-handling features return tags in uppercase in the 8.1 version compatibility mode.\n• None When modifying the functional option values new values are available in current session right after modification both in thick client and external connection, regardless to where the modification was made. In other session the modified functional options values become available on server right after modification, and not later than 20 minutes after modifictation in thick client and external connections.\n• None User without administrative rights can not modify a value of property of the object. The behaviour is not changed in the 8.1 version compatibility mode (this modification is possible).\n• None When using field from nested queries in or query language operations, when only value is obtained, the error of query language is displayed. The abnormal terination executed in previous versions, starting from 8.1.12.\n• None The handler is called when trying to close modal form on timeout expiration (in managed and ordinary form). The behaviour is not changed in the 8.1 version compatibility mode (the handler is not called).\n• None Data composition template data set names are generated on language, corresponding with configuration script variant.\n• None If the balance fields are obtained in the nested query, then in the external query these fields are considered balance, and totals are calculated by these fields like balance fields. The behaviour is not changed in the 8.1 version compatibility mode (balance fields, obtained from the nested query are not considered balance fields and totals are calculated by them like ordinary fields).\n• None Exception is generated, if the parameter has value less then parameter when executing query, where data is received from the , and virtual tables of the accounting register, and also virtual table of the accumulation register.\n• None In the managed form text box specifying the property to is cancelled on text editing start and when performing interactive selection from the choice form, calculator, calendar and dropdown list. At the same time when specifying value in data, connected with the texbox, the property value is set automatically depending on value being specified, if the property is set.\n• None Modified names of automatically generated managed form elements (commands, command groups, etc.). Automatically generated form element names are generated on language, corresponding to script variant, not on the platform interface language.\n• None If a business process has the property enabled, then the privileged mode is used on business process start for all operations with tasks and to complete the business process, and when closing task for all operation with other tasks and for all operations with the business process itself.\n• None Reading objects and writing records is performed in transaction. The shared lock is set for record sets when reading in managed mode. Conrol for coordinated reading the object tabular sections and record set records is provided.\n• None Conversion of configurations, infobases, external data processors and reports is not needed when migrating from 8.2.9 to 8.2.10.\n\nVersion 8.2.9 is the final version of the 1C:Enterprise 8.2 platform.\n• What’s New in Version 8.2 Compared to Version 8.1\n• Changes that Require Configuration Changes or Influence System Behavior\n• Upgrading to Version 8.2 from Versions 8.1 and 8.0\n• Infobase That Is Not Connected to Configuration Repository\n• Use of Configurations Developed in the Previous 1C:Enterprise Versions\n\nWhat’s New in Version 8.2 Compared to Version 8.1\n• None Managed application feature implemented: new model of functionality distribution between client and server, new forms mechanism, new command interface mechanism, functional options mechanism, new user settings saving mechanism, thin client, web client.\n• None Default parameters for IBM DB2 database creation modified. The new values used for the parameters will reduce the number of readings from disk and will improve database operations performance.\n• None User session concept introduced. Session is used for unified identification of the active infobase user, regardless of the client application type. The notion of connection no longer describes the active infobase user.\n• None Resilience for software and hardware failures of 1C:Enterprise servers cluster.\n• None Implemented the possibility to identify reserved working processes along with enabled and disabled working processes.\n• None Ability to define additional cluster manager(s) within a cluster and to distribute server services operation between such managers.\n• None When exclusive access to file-based infobase is attempted, connection pool is cleared for the web server connected to this infobase.\n• None PID (running operating system process identifier) acquisition in cluster console and in access object model.\n• None element added to configuration file of the technological log file. If element is available, 1C:Enterprise server processes calculate allocated and taken memory units and total volume of allocated and taken memory units.\n• None Memory leaks tracking element of the technological log file) for the following objects: , , , , , , , , , , , , , , , , , , , , , , , , , .\n• None Implemented new method to display context in technological log if managed application is operating.\n• None\n• when , , objects are used on the server;\n• when method is used in the , , , objects;\n• when exporting a spreadsheet document to on the server side. Linux operating system based 1C:Enterprise server requires additional libraries to be installed in the following cases:\n• None literals can be defined in query language.\n• None Application functionality can now operate with the time corresponding to the specified time zone that does not depend on server location. New global context methods , , , , , , , , , , ,\n• None Aggregate mechanism intended to increase speed of operations with large data volumes of turnover accumulation registers in order to get analytical reports in various cross sections.\n• None For language objects (managers, objects) with method assigned, call parameters analysis has been introduced, and function of the global context can be requested if required.\n• None Empty record key for an information register notion introduced. Record key for an information register designer has been developed. method for record key of an information register. method for information register manager.\n• None New register records writing method for documents posting. When documents are posted, sets of records to be recorded are clearly stated. For the property of a document’s metadata a new variant is introduced. This is the default variant. The property has been added for records of the registers. property for document metadata introduced. When this property is assigned the value (default value), it allows recording of only the sets that have the property assigned. This method is intended to use optimized recording of changed records sets without deleting movements when posting is initiated. The method is implemented for the document collection. property implemented for the records set of the accumulation register and the accounting register.\n• None property for metadata objects that possess numbers or codes. The property is only available when the code (number) is of string type. This property will have the value assigned during conversion from previous versions. When a new object is created, it will have the value.\n• None Attributes fill check that provides for a regular description in the configuration of how to check correctness of the user-entered data. The fill check is not performed in 8.1 version compatibility mode.\n• None Standard objects filling mechanics enhanced. New properties implemented for objects attributes in metadata that influence the standard filling procedure: – this value will be assigned to an attribute by the standard filling processing procedure, determines if filling from the transferred filling data is possible. It is now possible to request filling in the forms when new objects are created and to transfer filter values to filter values fill handler if filling is called from a list. parameter implemented for the objects in the filling event handling procedure. Filling event handler implemented for records set of an information register. method for records set of an information register and record manager of an information register.\n• None and properties implemented for metadata object. property implemented for metadata object.\n• None During various system checks when objects are created (for catalogs during parent check, code owner and uniqueness, for documents, business processes, and tasks during number uniqueness check, for exchange plans disabled during code uniqueness check, for exchange plans and charts of characteristic types during parent and code uniqueness check), data is accessed in privileged mode which makes it possible not to disable access rights restrictions at the records level for respective fields if configuration will only operate this data in managed mode or in the server-executed code.\n• None property implemented for the object that is intended to get and set hash value of the password.\n• None property implemented for catalogs, documents, charts of characteristic types, charts of accounts, business processes, and tasks. This property is not available in the 8.1 version compatibility mode. In the 8.1 version compatibility mode the access rights to field are checked based on the access rights for the field.\n• None A designer to create a reference based on a unique identifier is implemented for the objects of the following types: , , , , , , , .\n• None Data analysis mechanism can now operate both on the server and in an external connection.\n• None object can now be used on the server.\n• None object can now be used on the server, in an external connection and in the web-client.\n• None object can now be used on the server and in an external connection.\n• None Implemented the possibility to obtain graphical schema using the method of global context and method of the metadata object at server and in the external connection.\n• None Spreadsheet document pagination management on the server side, including on the Linux-based server.\n• None Search for graphical schema item name in the method of the object.\n• None Delayed updating of session parameter value, for example, when data or user settings are changed. This is provided for by the method of the object.\n• None parameter for the and methods of the object.\n• None Download of the log file to a values table and a parameter intended to limit the number of downloaded log records in the method.\n• None A new method that provides available filter values that can be used in log file downloading.\n• None and methods for the object.\n• None parameter has been implemented for the global context methods and object.\n• None object can be used to transfer the virtual accounting registers parameters , , , , and the accounting register manager methods , , , that can be assigned extra dimension types as parameters.\n• None property for the object that makes it possible to only use a certain set of values as the available values for the list items.\n• None List items can now be identified with numerical identifiers.\n• None Implemented parameter for standard attribute name designation and standard attribute name designation of standard tabular section for method.\n• None global context method intended to retrieve localization code for the current session. command line parameter can be used to enable this parameter. method has been added to the global context. method has been added to the global context.\n• None Software enabling and disabling of privileged mode. and methods have been added to the global context.\n• None Safe mode for code execution that can be software enabled and disabled. and methods have been added to the global context.\n• None global context method added in order to retrieve a reference to a predefined value.\n• None When subscribing to COM-object events as well as events of the object that have the same name while the number of their parameters varies, the number of handler parameters is taken into account and a handler with the respective number of parameters is selected for the event.\n• None and methods have been added to the global context.\n• None property implemented for common modules. The property is available only for modules with flag.\n• None New external components technology makes it possible to develop such components using both C++ API and COM technology. The components developed using the new technology can be uploaded both in client applications and on the 1C:Enterprise server. At the same time the previous external components are fully supported.\n• None parameter for the following objects: , , .\n• None It is now possible to use the fields nested data sets in the data composition system (in the data set query text – an object in the and sentences, in the data composition schema wizard, in the data composition system query wizard, in the data composition template, in the data composition settings).\n• None New comparison types , , , added to data composition system settings to be used for fields with a predefined list of available values and for the custom combo fields. Ability to fill the list of values for a parameter that has a list of available values.\n• None It is now possible to set filters for the fields in the data composition system.\n• None method that sets a value for data composition parameter and enables the property.\n• None Ability to get data set fields appearances from query fields synonyms in the data composition system. If no synonym has been specified for the field, field data path is used instead.\n• None Optional parameter for the method in the object. This optional parameter is intended to manage restoration of settings serviceability.\n• None property and method have been added to the object.\n• None and properties have been added for the object.\n• None property has been added to the and objects.\n• None In the data composition system settings dialog a special icon in the settings structure will demonstrate that grouping is disabled (deleted by user). When editing the set of custom settings is finished, the developer will be notified in the event that the grouping has been created by user and is at the same time disabled.\n• None If a user selects by a certain field for the report details and a filter element using this field already exists without a specified appearance and located outside of the conditions group, no new filter element will be created in the new settings and the existing one will be used instead.\n• None It is now possible to enable 1C:Enterprise 8.1 compatibility mode in the configuration properties. The compatibility mode is automatically enabled upon conversion of a configuration created in 1C:Enterprise versions 8.1 or 8.0. Features that depend on compatibility mode are listed in the Changes that Require Configuration Changes or Influence System Behavior .\n• None When client-server database configuration update requires database restructuring, it is now possible to attempt to force disconnection of all sessions and to update the database configuration repeatedly.\n• None In all the dialogs the texts are replaced with while mentions of the are replaced with .\n• None The context menu of the configuration tree root received new commands intended to open various configuration editors.\n• None New that generates a code to build and execute a query as well as a result iteration and building a spreadsheet document or a chart.\n• None New parameter included in the Designer settings dialog ( tab).\n• None branch is moved from the branch to the branch root. The property is added to style elements.\n• None type values are now displayed in the debugger as depending on the values of the property.\n• None The sequence order and type grouping changed in the type selection dialog.\n• None The order of default forms in metadata editing dialogs and new forms dialogs has been changed.\n• None The 1C:Enterprise startup parameters page has been divided into two panes – and . tab renamed to .\n• None Metadata object name is now displayed in the properties palette title for metadata objects.\n• None The Syntax Assistant now helps better distinguish between different kinds of information based on the availability and use modes. Implemented the possibility to filter display information by availability of objects, methods, properties.\n• None When a new metadata object is created that has no dedicated editing window, both the properties palette and the More window are opened (provided that the window is applicable for this object).\n• None The set of properties displayed in the mode has been changed.\n• None The size of type selection list for the properties of the metadata objects attributes has been increased to 20 lines.\n• None When a metadata object is assigned to subsystems, it is now possible to include the object into this or that subsystem regardless of mutual subordination of the subsystems. An object can now be assigned simultaneously both to a parent subsystem and to its subordinate subsystem.\n• None The right has been added for configuration object. If a user does not have rights to view the subsystem, then the help information on configuration objects is also unavailable for viewing.\n• None It is now possible to lock an individual subsystem in a repository and to customize the distribution rules for subsystems in the configuration distribution settings dialog.\n• None Various changes in the metadata editing dialogs, including the changes that reflect the new set of properties of metadata objects.\n• None\n• For configuration edit mode only topics concerned to managed application are displayed and the column is displayed only;\n• For configuration edit mode all topics are displayed and , and columns are displayed. When help is edited in the Designer, it is now possible to use references to system help topics. When help is edited in the Designer, when the reference to system help topic is selected:\n• None The set of text templates has been changed. Templates have been modified and expanded with changes and new features of the platform.\n• None When file infobase is being published on a web-server and anonymous authentication is used, the user access rights are checked for the database directory. If there are not enough rights, then warning about impossibility of working with this infobase is displayed. It is recommended to grant according rights or select the check box.\n• None Implemented setup program for thin client for operating in client-server variant.\n• None Group policies and logon-scripts can now be used to install 1C:Enterprise.\n• None It is now possible to designate the used 1C:Enterprise version for every infobase from a list of infobases.\n• None Web services publishing mechanism changed. The new features can also be accessed using the command line utility (available for Windows and Linux operating systems). Publication name should contain latin symbols only. Also, for Apache web-server, name of publication catalog should contain latin symbols only. Publishing using files is not supported any more. The utility removed from the delivery kit.\n• None It is now possible to create pictures for charts and schemas in BMP or PNG formats for Linux server.\n• None Alpha-channel PNG pictures are now supported in form elements. System pictures used in 1C:Enterprise mode have been converted to PNG format.\n• None No default database server type is selected when a client-server database is created.\n• None method behavior has been changed. The parameter can now hold a reference to a help topic.\n• None New type has been added.\n• None A spreadsheet document can be saved as HTML and Excel97 both on the 1C:Enterprise server and in an external connection.\n• None The and methods of the object can be used on the server and in external connection mode.\n• None It is now possible to execute , , and methods for a spreadsheet document both on the server and in an external connection.\n• None New , , properties have been introduced for a spreadsheet document.\n• None It is now possible to get the messages displayed to a user on the server, in an external connection, from Web services, and from background jobs. global context method will retrieve the messages that have not been displayed to a user yet. The method implemented for COM-connection object. method for the object will make it possible to retrieve the messages generated during the background job from outside of the background job.\n• None 1C:Enterprise script object that makes it possible to edit the standard period interactively.\n• None New pictures added to the pictures library: , , , , , , , , , , , , , .\n• None Automatic scrolling mode using the middle mouse button added to a text document, spreadsheet document, graphical schema, table field.\n• None When user actions are logged (initiated by command line parameter), new marks are added to show the beginning, the end, and the duration of an action.\n• None New parameter added to the method of the object. The input file encoding should be clearly designated if the file is 4-byte encoded (UTF-32) or uses the IBM-encoding family, i.e. for all title-enabled encodings.\n• None When full-text search results are displayed as HTML, the occurred words are now highlighted in different colors.\n• None value has been added to the system enumeration.\n• None will now select the current word in the text editor and in an entry field.\n• None The selected line is now located in the center instead of on top of drop-down lists.\n• None property added for a spreadsheet document cell that makes it possible to change a column size using the mouse by pointing it to the right column border. A similar property has been implemented for a data composition template area cell.\n• None The infobase adding and editing dialog now has the settings that designate the infobase user authentication use mode.\n• None Reuse mode introduced for retrieved values of the shared modules functions. This mode is intended to optimize multiple data acquisitions within a session or a server request.\n• None In the event log implemented events of logon attempts and failed logon attempts. These events are displayed only for users with administrative rights.\n• None Client licenses can now be obtained using a server or a web server add-on module. In this case a separate license is required for every session.\n• None The key for the last successful connection can be stored. The next search for a license will begin from this key, which accelerates the client application launch.\n• None Modified the procedure for searching the license for of the 64-bit Com connection operating. Client licenses can be used along with server licenses.\n• None In the 1C:Enterprise mode the dialog now has a text field that can display the configuration information, the URL to access configuration provider information and configuration copyright information.\n• None In the dialog opened by command it is now possible to choose a file type for saving. The selected file type will be used in the future for the file when the command is used to save it.\n• None Optimized database operation. In the 8.1 version compatibility mode and when working with IBM DB2 database management system 9.5 or older, the previous implementation of database operations is used that is similar to version 8.1.\n• None Configuration first run has been optimized.\n• None File-based database operations are optimized for grouping-enabled queries execution and for execution of queries that get a large number of entries. Memory and query execution speed optimized. Execution of queries that contain virtual tables of the accumulation and accounting registers has been optimized as well.\n• None Internal platform functions related to memory and resources usage have been optimized.\n• None Internal platform functions related to session data have been optimized. The volume of traffic between a client and a server during client-server operation has been reduced.\n• None In order to improve scalability and performance of 1C:Enterprise server, the configuration metadata are fully loaded by the server when connecting to the infobase.\n• None For catalogs that lack a code and a name, the and the indices can be created.\n• None Optimized reading and writing of XML- and XDTO-files.\n• None Dumping and restoring of an infobase have been optimized. Infobase dump file size reduced.\n• None Processor usage reduced for entering and editing text in an entry field.\n• None Data composition processor operating speed, when generating reports containing large amount of data, has been increased.\n• None Optimized database configuration update when configuration includes an exchange plan with distributed infobase.\n\nChanges that Require Configuration Changes or Influence System Behavior\n• None Application interface appearance has been changed. New display of controls, new colors and pictures used. The interface remains unchanged in the 8.1 version compatibility mode.\n• None Modified display of several form elements. Table field header area increased. Left and right indents in table field cells increased. Size of panel tab size increased and space between tabs also increased. Interface is not changed in the 8.1 version compatibility mode.\n• None Windows 98, Windows Me operating systems are no longer supported.\n• None It is now possible to install and work with multiple 1C:Enterprise versions.\n• None Administrative installation eliminated, the file is not installed to the platform installation folder, the command line option is not supported.\n• None The list of infobases is contained in file located at .\n• None By default, configuration files are located in the folder. The folder intended to store server cluster settings has been renamed from to . The servers cluster settings files (when a server is installed as a service) are located in the .\n• None New location of the templates folder. It is now possible to designate multiple templates folders. The file is no longer used.\n• None Modified names of Linux distribution packages: files renamed to , files renamed to .\n• None To operate with servers of previous versions you need to register utility of appropriate version using file (by default the utility of the newest version is registered). The shortcut for the server cluster administration utility has been renamed to .\n• None Maximum size for unlimited length data decreased to 1Gb in IBM DB2 database management system and data logging introduced. When an infobase is converted from the previous versions or when an infobase is loaded from file, maximum length of unlimited length data is reduced. Infobase file conversion or loading will be aborted if such an infobase contains the unlimited length data with its actual size larger than 1Gb.\n• None In 1C:Enterprise server debugging mode (launched using parameter) configuration objects are loaded when required, unlike regular server operation mode, when all configuration objects are loaded. Thus configuration startup is accelerated.\n• None In attributes, which are not stored in the infobase, it is allowed to use all available types, excepting , to create composite type of attribute.\n• None New approach to operations with text templates files. A separate templates file is used for every 1C:Enterprise script variant. It is not recommended to store custom templates files in the 1C:Enterprise installation folder. Standard templates can not be modified.\n• None Totals split attribute is now enabled by default for new accumulation and accounting registers. When database configuration is updated, totals split attribute is enabled for such registers as well. When a new infobase is created in a configuration that has totals split enabled for the registers, this attribute will also be enabled for the respective registers in this new infobase. The behavior remains unchanged in the 8.1 version compatibility mode.\n• None metadata object storage manner changed in the configuration. After conversion from the previous versions for the infobases connected to the repository, the subsystems will be displayed as new objects. It is required to lock the metadata root object and locate the subsystems to the repository.\n• None Picture editor now supports alpha-channel. When editing of pictures created in the previous versions is finished, such pictures will be converted to PNG. The behavior remains unchanged in the 8.1 version compatibility mode.\n• None In picture editor and buttons are available only for BMP, JPEG and TIFF formats.\n• None When spreadsheet documents are compared, the rows added in the end of a spreadsheet document and the cells added in the end of a row, are considered to be added.\n• None Reference types now have a new appearance. An appearance of a reference type now only contains the metadata object appearance.\n• None The accounting register fields and the type fields now have a new appearance in the tabular section of an account form.\n• None It is forbidden to enter the characters that are not allowed by XML 1.0 to the entry fields and text editor. When such a character is added interactively, the entry of the character is ignored while when a text is pasted from the clipboard, the invalid characters are dismissed and will not be contained in the pasted text.\n• None The behaviour of the XSLT mechanism when transforming HTML tags has been modified. The XSLT mechanism optimizes HTML according to http://www.w3.org/TR/xslt standard, described in Chapter 16.2 HTML Output Method.\n• None element as child of the element. In such a way the construction is transformed to the after processing. This behaviour corresponds with the HTMLstandard ( When using tools for working with HTML it is not allowed to use theelement as child of theelement. In such a way theconstruction is transformed to theafter processing. This behaviour corresponds with the HTMLstandard ( http://www.w3.org/TR/html401/struct/text.html ).\n• None Text appearances have been changed for some commands of the data composition system.\n• None Specifying the nonexistent fields of the object in the data path in regular form calls the exception.\n• None A changed text for the message that is displayed when an object is edited that has been changed by another user. The new message text: The data has been modified or deleted by another user .\n• None A changed representations for error messages concerned with standard attributes. Messages have the following appearance: , for example, if catalog code is not unique, then the \"Code\" field value is not unique message is displayed.\n• None Changed representation for information register record when error message is generated.\n• None Error message that is displayed when an operation in event handler is cancelled, has been changed. The text that used to read has been replaced with .\n• None New format of an error message displayed in the event of database object lock error. Database object lock appearance changed in the cluster console.\n• None The following item names were changed in the event log written as .XML: (instead of ), (instead of ) and (instead of ).\n• None New properties have been added to the technological log file events: – session number assigned to the current stream, – client application identifier of the session assigned to the current stream. The value for the property is now filled from the assigned session instead of from the connection.\n• None Improved column width calculation in the data composition result output to a spreadsheet document.\n• None When an external report or data processor is saved, the pictures selected from the pictures library are not converted to absolute pictures. This conversion is still carried out in the 8.1 version compatibility mode.\n• None Modified output format of metadata object property used for configuration report. Now fields’ names are displayed in the report, not representations.\n• None The values of the and types are displayed in compliance with regional settings of the current session if Use regional settings of the current session property is selected in the dialog.\n• None Values of type is displayed in compliance with platform interface language if specific values are not set in the dialog.\n• None Values of type are displayed by / words instead of / (corresponding with platform interface language being used). Representation is not changed in the 8.1 version compatibility mode.\n• None Add-in object type and string representation are generated in accordance with what is specified in parameter of script operator, which is used for creating an object instance. Behaviour is not changed in the 8.1 version compatibility mode.\n• None The spreadsheet document properties and can only have the values of corresponding types. When an improper value type is assigned, an exception will be generated. The behavior remains unchanged in the 8.1 version compatibility mode.\n• None If a nonconventional border or border color is selected for a form element (in any client and in any form view) or if a nonconventional button background color is selected for the , , and elements, the form element will be displayed same as it was displayed in version 8.1. In 8.1 version compatibility mode the form elements are displayed the same.\n• None When or buttons are pressed in a form table that does not contain lines or has the Row selection mode selected, it will activate either the next form element or the previous one respectively. The behavior remains unchanged in the 8.1 version compatibility mode.\n• None For commands to operate with hierarchy (in table, spreadsheet and text documents) implemented the following keyboard shortcuts: explode node ‑ , collapse node ‑ , exlode all nodes ‑ , collapse all nodes ‑ . Only these keyboard shortcuts are used in web client. In other clients previously shortcuts can be used.\n• None The titles of active columns of form tables are not highlighted. The behavior remains unchanged in the 8.1 version compatibility mode.\n• None and methods of the object now feature a new behavior. The time when a file was modified is either retrieved or set taking into account the time shift rules that existed at the time of modification instead of at the time of retrieving or setting such time. The behavior remains unchanged in the 8.1 version compatibility mode.\n• None A query that contains the keyword and a clause with an expression, which is absent from selection list, is treated as invalid. An error message will be displayed. The error message will not be displayed if version 8.1 compatibility mode is enabled.\n• None If union data set is used in the data composition schema and some field is only available in one subsidiary data set, when filter is applied to this field, the composition result will only contain the records from this data set. The behavior remains unchanged in the 8.1 version compatibility mode.\n• None If a user is not allowed to interactively view the metadata object, the composition system will treat all the object table fields as invalid. The behavior remains unchanged in the 8.1 version compatibility mode.\n• None A new display of full names of modules in the technological log file, log file, etc. The previous display of full names of modules is used in the 8.1 version compatibility mode.\n• None The identifier assigned to a reference of a new object created by copying, will remain the same in the object procedure (to be used in the future during recording). The behavior remains unchanged in the 8.1 version compatibility mode.\n• None The condition of the data composition system treats the , , and characters as regular characters instead of special ones. The behavior remains unchanged in the 8.1 version compatibility mode.\n• None query language operation will retrieve a variable-length string (without padding spaces) when it is converted to the type. The behavior remains unchanged in the 8.1 version compatibility mode.\n• None The metadata attribute can not have a length over 100 characters. This limitation is not applicable to the 8.1 version compatibility mode.\n• None In the expression of the query language when route points values are referenced, the term is replaced by . It is still possible to use the term for compatibility reasons.\n• None The property of the object contains the data path written using the script specified in the configuration property. The behavior remains unchanged in the 8.1 version compatibility mode.\n• None The property of the and the objects contains the parameter written using the script specified in the configuration property. The behavior remains unchanged in the 8.1 version compatibility mode.\n• None When data composition settings are filled by the system (in interactive editing, details processing, etc.), all the properties are filled with a data path written using the script specified in the configuration property. The behavior remains unchanged in the 8.1 version compatibility mode.\n• None In the color selection dialog web colors are sorted by shades. In the 8.1 version compatibility mode, the colors are sorted by their English-language names.\n• None In form wizard and template wizard the name will not be changed when a synonym is changed same as the synonym will not be changed when the name is changed, if the synonym does not match the one created automatically. The behavior remains unchanged in the 8.1 version compatibility mode.\n• None Only when the right is assigned, the following rights can be assigned as well: , , , , , , , , , , , . The behavior remains unchanged in the 8.1 version compatibility mode.\n• None The configuration property has been renamed to . The previous version preserved for the compatibility purposes. When configuration files are dumped, ordinary application module is dumped to a file while in 8.1 version compatibility mode it is dumped to a file. When configuration files are loaded, both variants will be accepted.\n• None The property has been renamed to . Those shared modules that have the property checked, will be loaded in the thick client in the ordinary application mode.\n• None The database that stores the 1C:Enterprise infobase now has a modified structure of tables. Some values have been changed in the column of the values table that is the result of the method.\n• None In operations on request tables applied to object tables, section is not allowed to access tablular sections if used object tables are object of data access restrictions. In 8.1 version compatibility mode the behavior has not changed.\n• None The property of the , , and objects is not recommended for use as it has only been preserved for compatibility reasons. Instead the property should be used.\n• None , , , properties of a spreadsheet document have been removed. These properties are supported in the 8.1 version compatibility mode.\n• None When an empty string is written into an XML-file using the or methods (these methods can be requested between the and ) of the WriteXML object, the output stream will contain the following expression: . The behavior remains unchanged in the 8.1 version compatibility mode: when an empty string is written as an attribute value, nothing will be written in the output stream.\n• None The command line parameter option has been renamed to , while the command line parameter option has been renamed to , and the – to . Use of , , and is available in 8.1 version compatibility mode.\n• None If attribute (containing ) is edited in a field that is format string designated to display only part of the attribute (date or time), editing of one part of the attribute (date or time) will not result in modification of another part.\n• None All the 1C:Enterprise 8 components are fully Unicode-applications.\n• None It is now impossible to choose a character set in the font selection dialog. Unicode-fonts should be used.\n• None We have switched from use of ICU 3.4 to use of ICU 4.0. ICU 4.0 is based on CLDR (Common Locale Data Repository) standard version 1.6. For more information, please visit http://www.unicode.org/cldr/ . Due to updates of CLDR standard and the updated ICU version, for a number of languages and countries numbers and dates formats as well as strings sorting have been changed.\n• None JIS_X0201 encoding is not supported any more.\n• None Web services publishing using files is not supported. The utility removed from the delivery kit.\n• None Web-service connection pool setting is performed using file. file is not used anymore. Connection pool is enabled by default after publication.\n• None New session starts and handler is called on each Web-service call.\n• None The virtual field has been implemented for document journals tables. This field contains the document type.\n• None If a report query uses a limitation of parameters referencing standard period dates and if some part of the date will contain an empty date, the value for this date will be treated as unassigned. If a user does not enter the end date for a custom period, it will be considered not to be designated.\n• None When cells of a spreadsheet document are copied to the clipboard, the data will be stored in the clipboard in Excel97 format. This makes it possible to paste cells containing Cyrillic characters to ОpenOffice. Also a copied spreadsheet document fragment in Excel97 will preserve the columns shift for every row of a spreadsheet document.\n• None When a spreadsheet document is saved in XLS format the following conversions are performed: fonts from system set are substituted by Arial font, cells are merged using new algorithm (if a spreadsheet document cell is represented by several cells in Excel and along with this a spreadsheet document is limited on the left and on the right by border or color, then Excell cells are merged). In 8.1 version compatibility mode the behaviour is not changed.\n• None All the system text strings generated on the 1C:Enterprise server are displayed in compliance with the interface language of the current session.\n• None In mode help can be opened from a form without selecting a topic. If no help topic has been defined for a particular form, help topic is opened for the metadata object this form belongs to while if no such topic exists, the section is opened. The topic selection is preserved in 8.1 version compatibility mode.\n• None For the property a default setting has been implemented as the value for the following standard attributes: of an exchange plan; and of a catalog; of a document; of a chart of characteristics; , of a chart of accounts; of a chart of accounts for extra dimensions types; of a chart of calculation types; of a chart of calculation types for leading calculation types; of a chart of calculation types for base calculation types; of a chart of calculation types for displacing calculation types; of an information register; of an accumulation register; of an accounting register; , , , of a calculation register; of a business process; of a job. When these objects are entered and the respective attributes have not been filled, an error will be generated. The check is not performed in the 1C:Enterprise 8.1 compatibility mode.\n• None The help does not have the automatically added fields and texts at the top and in the bottom ( and , configuration and developer information).\n• None In web server add-on modules operations the algorithm of designating the temporary file folder has been changed. When a query is received and a reply is sent, the default temporary files folder is the temporary files folder of the user who executes the query. When a query to a file-based infobase is processed (it is processed directly by a web server add-on module), the default temporary file folder is subfolder of the file-based infobase folder. The element of the file has received an optional attribute that can be used to specify a temporary files folder for operation of web servers add-on modules.\n• None The property has been implemented for the object. This property contains a list of all the objects belonging to the subsystem. Upon conversion from previous versions, this property is filled based on the subsystems that the configuration objects belong to. In 8.1 version compatibility mode the property is available via the 1C:Enterprise script for the metadata objects that could belong to subsystems. Also configuration property is available in the 8.1 version compatibility mode. This property is filled with the references to the objects that belonged to the root element of the subsystems tree. When 8.1 version compatibility mode is disabled, the configuration property will be cleared and will not be available any more in the configuration properties dialog.\n• None Drop-down menu and context menu can now be scrolled using the mouse wheel if a menu can not be fully displayed. No moving up and down of the drop-down and context menus is now possible using mouse wheel.\n• None The possibility to specify using several working processes in server cluster, checkbox has been removed from the 1C:Enterprise server cluster console properties dialog. 1C:Enterprise server cluster supports running several working processes always. The value of the property in the object of the object is ignored (the property is preserved for compatibility reasons), the method of the object does not result in any actions and has also been preserved for compatibility reasons.\n• None The property implemented for the object. Property indicates the mode of using the working process (do not use/ use/ use as backup). The property of this object is left for.\n• None For the object implemented the method, using which you can set new value for the property of the object. and methods are left for compatibility.\n• None For the object implemented the method, that sets time of forced termination of the working process. The method is left for compatibility.\n• None Implemented global context methods and and also the object to control locking new infobase sessions. The global context methods and and the object the have been preserved for compatibility reasons. In the infobase properties, that are shown in the 1C:Enterprise server cluster console text is changed to .\n• None The property implemented for the object. This property specifies if the creating new sessions is possible. The property has been preserved for compatibility reasons.\n• None The object now has a new set of methods.\n• None Some element names have been changed in the servers cluster console. When the list of working processes is displayed, the computer name is now accompanied by a sequence number of the working process on this computer.\n• None When executing the method, lock values are now checked in managed lock elements for all the fields for compliance with the lock field type. The behavior remains unchanged in the 8.1 version compatibility mode.\n• None During spreadsheet document pagination on Linux-based server the size of resulting pages can differ from the size of those pages that are actually printed out. This is due to peculiarities of font information presentation by this operating system. In this case you should change the margins for the paper.\n• None Date autofilling changed for year end (November-December): when dates are entered for the beginning of the year (January-February), the next year will be inserted. Date autofilling changed for the beginning of the year (January-February): when dates are entered for the end of the year (November-December), the previous year will be inserted unless the year is clearly designated.\n• None The authentication dialog features a changed interface as well as displays the infobase name from the infobases list.\n• None Presentation of 1CV8 application changed (in the method, system forms). is used instead of .\n• None Presentation of web servers applications changed (in the method, system forms). prefix has replaced .\n• None Changes in color, font, and line selection dialogs in mode.\n• None When users list and active users list are accessed, by default the cursor is placed in the beginning of the list. Sort by user names is enabled by default for active users list as well.\n• None Stricter operation implemented for DOM-XML name spaces. If name spaces are used, possible consequences of behavior changes should be analyzed.\n• None Modified window mode for horizontal tile mode of Syntax assistant: command bar buttons are used instead of tabs , and .\n• None English-language version of the property name changed. is now used instead of . It is still possible to use for compatibility reasons.\n• None English-language version of the report property name changed. is now used instead of . It is still possible to use for compatibility reasons.\n• None For the object the form property has been renamed to . The previous version has been preserved for compatibility reasons.\n• None For the object the property has been renamed to . The previous version has been preserved for compatibility reasons.\n• None For the object the property has been renamed to . The previous version has been preserved for compatibility reasons.\n• None The print parameters saved with a name designated in the property of a spreadsheet document, will be preserved after the Page Setup dialog is opened, preview window is opened and printing is executed (both interactively and software-initiated). Print parameters are saved to an infobase. Print parameters of individual spreadsheet documents (objects) are changed independently (even if the key of print parameters is the same). The properties are filled from the print parameters saved using a key when the key was assigned. In 8.1 version compatibility mode such print parameters are not separated and are changed simultaneously.\n• None The and methods of a spreadsheet document will result in an error if the first parameter in such methods contains a spreadsheet document area. The behavior remains unchanged in 8.1 version compatibility mode.\n• None The global context method has been renamed to . The previous version has been preserved for compatibility reasons.\n• None For spreadsheet document, geographical schema, graphical schema, and graphical schema field objects the methods will accept the values of the type as a parameter. Use of type parameter has been preserved for compatibility reasons.\n• None The method has been renamed to . Use of is still possible for compatibility reasons.\n• None The English-language name of the method for and has been changed from to . The previous version has been preserved for compatibility reasons.\n• None The name for the property has been changed to for the following objects: , , . The previous version has been preserved for compatibility reasons.\n• None For the object we have implemented the property and renamed property to . The previous name has been preserved for compatibility reasons.\n• None The following pictures are only available to be selected interactively in 8.1 version compatibility mode: , , , , , , , , , . The following pictures have been renamed: to , to , to , to , to , to , to . The pictures with new names are available to be selected interactively while the pictures with older names are only available to be selected interactively in 8.1 version compatibility mode.\n• None The tab renamed to in the automatically generated report settings forms and data composition schema wizard.\n• None The report settings command text has been changed from to .\n• None In the format string editor the texts and have been replaced with .\n• None For client-server version the text has been replaced with in the dialog.\n• None HTML-handling features returns tags in the lowercase, independently from which case was used in source HTML-text.\n• None To activate the search field in the Designer and thick client command bar use the key combination. The key combination is used to call the command of the managed application.\n• None It is not recommended to include more than one type in type of the chart of characteristics types used for storage extra dimensions of the chart of accounts, except when all types are references to database objects. This can lead to significant performance degradation.\n\nUpgrading to Version 8.2 from Versions 8.1 and 8.0\n• None It is possible to upgrade to version 8.2.9 from versions 8.1.5 and older as well as version 8.0.18.\n• None The 1C:Enterprise 8.2.9 platform version can be installed on a computer without uninstalling the previous platform versions already installed.\n• None Attention! Infobase, configuration, external data processors, and external reports formats have been changed. In order to work with a new 1C:Enterprise version, it is required to convert the infobase (configuration, external data processors, and external reports). Once conversion of a particular infobase (configuration, external data processor, and external report) begins, this infobase will not be available for operation with the previous versions of the 1C:Enterprise 8 versions.\n• None Please, create a backup copy of an infobase (configuration, external data processor, external report) prior to conversion!\n• None If any software or hardware failures occur in the conversion process, the data contained in the infobase may be lost.\n• None Infobase conversion can only be performed by a user possessing administrative rights.\n• None Please, follow the procedure below to convert an infobase:\n\nInfobase That Is Not Connected to Configuration Repository\n• None Attention! The infobase file format has been changed. It should be converted for future use.\n• None Please, create a backup copy of an infobase prior to conversion.\n• None If any software or hardware failures occur in the conversion process, the data contained in the infobase may be lost. After conversion, an infobase can not be used with previous versions of the 1C:Enterprise 8 platform versions.\n• None Launch the Designer of the previous 1C:Enterprise 8 platform version.\n• None If the configuration being edited does not match the database configuration, update the latter. If the database configuration is not updated, forced rollback to database configuration will be executed. In order to prevent possible conversion errors, it is recommended to perform infobase verification and repair.\n• None Terminate the Designer of the previous 1C:Enterprise 8 version.\n• None If an infobase is not available in the list of infobases, add an existing infobase.\n• None Open the infobase in the Designer mode.\n• None Agree when prompted to convert the infobase. The program will continue running after displaying a successful conversion message.\n• None Launch the Designer of the previous 1C:Enterprise 8 platform version.\n• None If the configuration being edited does not match the database configuration, update the latter. If the database configuration is not updated, forced rollback to database configuration will be executed. In order to prevent possible conversion errors, it is recommended to perform infobase verification and repair.\n• None Terminate the Designer of the previous 1C:Enterprise 8 version.\n• None If an infobase is not available in the list of infobases, add a new infobase. In the infobase adding dialog, perform the actions to create a new empty client-server infobase. Specify all the database parameters in compliance with the parameters of the infobase being converted. Clear the checkbox before creating an infobase.\n• None Agree when prompted to convert the infobase. The program will continue running after displaying a successful conversion message.\n• None Please, create a backup copy of a configuration repository prior to conversion.\n• None If any software or hardware failures occur in the conversion process, the data contained in the infobase may be lost. After conversion, an infobase can not be used with previous versions of the 1C:Enterprise 8 platform versions.\n• Perform the following actions using the previous 1C:Enterprise 8 platform version for all the infobases connected to the repository:\n• Move all the locked objects to the configuration repository and release them.\n• Obtain the last status from the configuration repository.\n• Save the configuration and update the database configuration.\n• Create a backup copy of the repository ( file in the repository directory). It is recommended to delete directory from the repository directory.\n• Lock all the objects in the repository in the infobase connected to the repository using login credentials of a user possessing administrative rights.\n• In this 1C:Enterprise 8.2 version convert all the infobases as described in the Infobase That Is Not Connected to Configuration Repository section for file-based or client-server infobases. When connecting to the configuration repository, agree to convert the configuration repository. The program will continue running following the successful conversion.\n• Move all the locked configuration objects to the repository.\n• None Attention! At that all the Subsystem metadata objects will be added to the repository.\n• None Attention! When obtaining configurations of the previous versions from the repository (those created prior to upgrade to version 8.2.9), such configurations will be converted. When repository objects are attempted to be updated, the resulting objects are not converted.\n• None Open the configuration file ( , select the file type and browse to the file you need).\n• None Infobase dump files ( ), created using 1C:Enterprise 8.1, can be loaded by 1C:Enterprise 8.2.\n• None\n• Answer to all Designer's questions before restart.\n• After Designer is restarted answer to answer the question about necessity of conversion. To load the infobase from a file:\n• None You can perform batch conversion of 1C:Enterprise version 8.x files, using the command line option.\n\nUse of Configurations Developed in the Previous 1C:Enterprise Versions\n• None Application solution (configuration) users may need to update a configuration version when they upgrade to a new 1C:Enterprise 8 platform version. We recommend that you obtain information regarding the configuration version update from the vendor (developer) of the solution.\n• None The configuration distribution files ( ) require execution of the same steps as those described in the section. The update files ( ) created in the previous 1C:Enterprise 8 versions cannot be used to update the configurations converted for the 1C:Enterprise version 8.2."
    },
    {
        "link": "https://yellow-erp.com/page/1c/distr/new-functionality-and-changes-version-8-3-8",
        "document": "\n• New functionality and changes\n• New functionality and changes in the 1C:Enterprise mode\n• Changes that require modification of configuration and administrative settings\n• Transition from the previous version to the version 8.3.8\n\nNew functionality and changes\n\nis added to the list of available values of the property. Compatibility modes were available for the following platform versions: 8.1, 8.2.13, 8.2.16, 8.3.1, 8.3.2, 8.3.3, 8.3.4, 8.3.5, and 8.3.6. In version 8.3.8 you can run configurations created in version 8.3.7 or earlier without making changes to the configuration and without changing its data structure. This allows you to perform quick transition to version 8.3.8 without making any configuration changes, then work with the configuration as usual and remove the compatibility mode at later time. This also allows you to use version 8.3.7 for working with the infobase even after the transition to version 8.3.7. You can use this option both before and after the compatibility mode is removed (in the latter case you have to turn the compatibility mode back on). Support of Linux trusted certificate directory ( ) is implemented. The object enabling cross-OS certificate operations is implemented. The object caching certificate data on Linux operating system is implemented. It is recommended that you use the object. The CertificationAuthorityCertificates parameter of OpenSSLSecureConnection object constructor accepts objects of OSCertificationAuthorityCertificates and LinuxCertificationAuthorityCertificates types. On Linux operating system, the platform used NSS certificate store. On Linux operating system, in the thin client, the option to access infobases published on resources that require clent certificates is implemented. Support of Apache 2.4 is implemented for Windows and Linux. For the webinst utility, the -apache24 key is implemented. This feature was not provided. The window and the title of the client application window indicate whether the client application is a test manager or a test client. The TestedApplication.SetFileDialogResult() method is implemented, it provides the result of an operation performed in the file selection dialog box. The resulting collection of the TestedApplication.GetChildObjects() method now inlcudes windows that contain text or spreadsheet documents. The TestedForm.ExecuteChoiceFromList() method is implemented, it selects a value from the list opened using the ManagedForm.ChooseFromList() method. The TestedForm.ExecuteChoiceFromMenu() method is implemented, it selects a value from the menu opened using the ManagedForm.ChooseFromMenu() method. For the TestedFormField object, the support of form field extension for a text document is implemented. For the TestedFormField object, the support of form field extension for a formatted document is implemented. For the TestedFormField object, the following methods are implemented: GetHTML() (returns the formatted document content) and InputHTML() (emulates entering text to the formatted document). The TestedFormField.WriteContentToFile() method is implemented, it writes the document file to the hard disk (same as the Save command). The method is available for spreadsheet document, text document, and formatted document extensions. These features were not provided. The option to save and restore the settings in the configuration comparison and merging window is implemented. A check box that manages automatic automatic saving of the form settings is implemented. The module comparison and merging form is refactored. Now it includes a command bar with the editor commands. The filter settings now include the Show only properties that were changed twice option. These features were not provided. Improved usability for applied solution developers who often perform comparison and merging of configurations with custom settings. The following operations are now available as command-line options for batch Designer startup mode: The following parameters are implemented for /UpdateCfg command-line option of batch Designer startup:\n• . Generates the list of properties that were changed twice.\n• . If the settings include objects that are not in the list of objects to be merged and are not available in the main configuration, but these objects are referred from objects that are in the list, mark them for merging and attempt to continue the merging.\n• . Clear references to objects that are not in the list of objects to be merged.\n• . Use the merge settings from the specified file.\n• . Automatically resolve merge issues. This affects the platform behavior in the following cases: locked objects are found; properties that were changed twice and do not have the merge mode specified are found; or a warning about deletion of objects refered by objects that do not participate in the merging is issued. For /ConfigurationRepositoryUpdateCfg command-line option of batch Designer startup, the -objects parameter is implemented. This parameter specifies that the operation is performed for a specific set of configuration objects. These features were not provided. The /ConfigurationRepositoryUpdateCfg command-line option of batch Designer startup was only applicable to the entire configuration. For the query debug, the following operations are inplemented: viewing the list of temporary tables, the structure of temporary tables, and the contents of temporary tables. The method is implemented. The property is implemented. This feature was not provided. The method is implemented. It determines whether an external data source has a transaction in progress. This feature was not provided. The option to determine whether an external data source has a transaction is progress is now available. Support of web services that support MTOM standard is implemented Read more.. This feature was not provided. Web services that supported MTOM standard were not supported. Extended capabilities for 1C:Enterprise integration with third-party systems. Integration with web services that support optimized transfer of binary data is available, which reduces the network traffic and RAM usage. The following improvements to the standard OData interface are implemented:\n• New query options for filtering the received data:\n• . Skips several first records in the query result\n• . Includes the size of the resulting selection to the query result\n• . Sets the order of records in the query result\n• . Returns the number or records in the query\n• More functions can be used in queries:\n• Function that checks whether a value has the specified type 1C:Enterprise object presentations better conform to the OData standard requirements. The method is implemented for configuration objects. It is used to determine the configuration extension where the object belongs. For ConfigurationExtensionsManager.Get() method, the ConfigExtensionSource parameter is implemented. If specifies which list of extensions is retrieved (database extensions only; extensions available in the current session; or extensions that were disabled or did not pass the check at the attachment stage). This feature was not provided. The property of configuration extensions is implemented. This property is used to limit the extension functionality to ensure its compatibility with a specific version of 1C:Enterprise platform, while leaving the option to edit the extension using a later 1C:Enterprise platform version, which provides more features for configuration extensions.The option to create the following objects in configuration extensions is implemented:\n• Attributes, tabular sections, and attributes of adopted tabular sections for: In configuration extensions, the option to change the properties of adopted configuration objects, which describe both main and auxiliary forms, is implemented. For adopted reports, the option to change the Main data composition schema property is implemented. In configuration extensions, changing the Picture property of subsystems, command groups, commands, and common commands is available. In the module editor, the context help is only displayed for objects included in the current extension. These features were not provided. In the module editor, the context help was displayed for both the original configuration and the extension. The option to export external reports and data processors to XML files is implemented. In Designer, the following menu commands provide this option: , , and . After the export, changing the object type (external report to external data processor or vice versa) is not available. The import is available using the command of the menu. In the external report or data processor editor dialog box, the options to export the report or data processor to files and import it from files are implemented. The export and import commands are available on the Actions menu of the dialog box. The option to compare an external report or data processor with an external report or data processor stored in XML files is implemented. In the external report or data processor editor dialog box, the following Actions menu command provides this option: Compare and merge with external report or data processor. The option to export and import external reports or data processors to or from XML files using the command-line options of Designer batch mode is implemented. The /DumpExternalDataProcessorOrReportsToFiles and /LoadExternalDataProcessorOrReportsFromFiles keys are implemented. Export to both flat and hierarchical file structures is supported. The export is only available in export format version 2.0. The import format is determined automatically during the import. These features were not provided. External reports and data processors could only be saved in binary format. Extended capabilities for external report and data processor operations in scenarios that use external version control systems. The option to use external tools for creating and editing external reports and data processors is implemented. For dynamic lists, support of batch queries is implemented. The dynamic list query builder does not support editing batch queries. This change is not implemented in 8.3.7 repository compatibility mode. In the Syntax Assistant, more information is added to the description of the HTTP service request handler method. This includes the parameter type and the return value type. In the Syntax Assistant, some information was missing from the description of the HTTP service request handler method. It did not provide the parameter type and the return value type.\n\nNew functionality and changes in the 1C:Enterprise mode\n\nIn the interface, the appearance of scroll bars is changed. In the interface, scroll bars had a different appearance. Better visibility of scroll bars in managed forms. In the search dialog box that can be opened from a managed form table linked to a attribute, the order of fields is changed: the field comes before the field. In the search dialog box that could be opened from a managed form table linked to a attribute, the field came before the field. Unified look and feel of search dialog boxes in managed form fields linked to various data types. In the interface, the following keyboard shortcuts are implemented for the managed form navigation panel:\n• Go to next/previous panel item: or . Upon reaching the first/last item, the focus does not move to the last/first item.\n• Go to the first panel item: .\n• Go to the last panel item: . In the interface, keyboard shortcuts for moving through navigation panel items were not available. Improved usability of 1C:Enterprise client applications that use the interface. In the interface, in dynamic lists, the vertical scrollbar is replaced with a set of buttons (go to beginning, go to end, page up, and page down) located at the right bottom part of the table linked to a dynamic list. Tables linked to dynamic lists had vertical scroll bars that did not provide comfortable navigation. The following commands are added to the context menu of a table linked to a dynamic list whose main table is a document list or a document journal: and . For a table linked to a dynamic list whose main table was a document list or a document journal, the and commands were only available on the menu. The context menu of a managed form table that is linked to the main attribute of a managed list form having the command now includes a submenu. The generation commands were only available in the command bar of a managed form table linked to the main attribute of a managed list form. In the thick and thin clients, in the managed mode, the option to add a search string to the system command area is removed from all interface modes. The option to add a search string to a system command area was available. Removed a feature that was no longer in use. The system command area displays the current user name. It is a hyperlink that opens a dialog box with the user info. The dialog box includes the option to log out of the client application. If the user is authenticated using OpenID, this also cancels OpenID authentication (so that a single command both exits the application and cancels OpenID authentication). If the infobase does not have users, the user name is not displayed. The option to specify the URL that is opened after the exit from the web client in the .vrd file is implemented (you can also specify the URL in the publishing settings dialog box in Designer, and then the platform writes it to the .vrd file). The <exitURL> element of the <point> element of default.vrd file is implemented. This change is not implemented in 8.3.7 compatibility mode. The exit command and the cancel OpenID authentication command were available on the menu. Client application behavior is closer to the standard behavior of web applications. In the web client, streamlined the undo operation in text document fields and input fields. In Safari web browser for Apple iPad, the undo operation is applied to an entire word (and not to each of its characters), just like it is implemented in other web browsers. In the web client, the undo and redo operations were not optimal. Improved usability of text operations in the web client. On Windows 7 and later and on Linux with Unity desktop shell, support of jump lists is implemented. The last used infobases are automatically added to a jump list, so that a user can open these infobases without opening the 1C:Enterprise start dialog box. On Windows 7 and later, the option to define buttons that are displayed in the application preview taskbar window (using 1C:Enterprise script) is implemented. This is similar to Windows Media Player buttons in its preview window. On Windows 7 and later and on Linux with Unity desktop shell, the option to define a picture or a number to be displayed at the bottom right corner of the application taskbar icon (using 1C:Enterprise script) is implemented. On Windows XP and later and on Linux with Unity desktop shell, the option to enable blinking of a taskbar application icon (using 1C:Enterprise script) is implemented. This feature was not provided. Inproved usability of 1C:Enterprise applications on some operating systems. 1C:Enterprise user interface now has screen reader support, which provides accessibility for blind and visually impaired people. This option is available on Windows XP or later. It uses the NVDA Read more. screen reader software. Screen reader support is only available for managed forms, in the thick and thin clients that use the Taxi interface. This feature was not provided. Improved 1C:Enterprise usability for blind and visually impaired people due to screen reader support. In dynamic lists, the option to add subordinate fields to fields of composite type in the form customization dialog box (the command on the menu) is implemented. Adding subordinate fields is available for fields whose type includes at least one reference type. In dynamic lists, the option to add subordinate fields to fields of composite type in the form customization dialog box (the command on the menu) was not available. In the web client, a or method call includes the question to the user: Do you want to create the DirectoryName directory? In the RequestUserPermission() method call, this confirmation is included in the final question to the user (provided that the confirmation is needed). In the web client, directories were created without user confirmation. The platform behavior conforms to the general security recommendations for file operations in the web client.\n\nOptimized operations with session data. The lags experienced by end users during the periods of high load on the session data storage in client/server mode are eliminated. Operations with session data required optimization. End users experienced lags during the periods of high load on the session data storage in client/server mode. The impact on the total number of opened forms to the opening of new forms is reduced. The impact on the total number of opened forms to the opening of new forms was significant. Streamlined form opening when many other forms are open. In the query language, expressions are optimized. This change is not implemented in 8.3.7 compatibility mode. The query language did not feature additional optimization of query texts. In some scenarios, the optimization increases the performance of dynamic lists and access restriction queries because the DMBS generates a simpler query plan. The dump configuration to files and restore configuration from files operations are optimized for scenarios where the configuration includes a large number of managed forms. The performance of dump configuration to files and restore configuration from files operations was insufficient. In scenarios where the configuration is stored in an external system, improved performance of data exchange between the infobase and that system. File infobase operations are optimized in the scenario where all of the following conditions are met:\n• A single client application accesses the infobase (Designer counts as a client application, too).\n• The client application and the database are located on different computers.\n• Both computers support SMB 2.1 protocol (operating system Windows 7 or later). In the specified scenario, the file infobase performance was insufficient. Improved performance of database configuration updates for file infobases in the scenario where Designer and the database are located on different computers. The performance of initial infobase image creation is improved. The performance or reading records from independent nonperiodic information registers during the initial image creation is improved. The performance of initial infobase image creation was insufficient. Deletion of temporary table records during some PostgreSQL and IBM DB2 operations is optimized. The performance of temporary table record deletion during some PostgreSQL and IBM DB2 operations was insufficient. In client/server mode with Oracle Database DBMS, requests containing have a different execution algorithm when applied to lists containing more than 100 records. This change is not implemented in 8.3.7 compatibility mode. In client/server mode with Oracle Database DBMS, requests containing had a different execution algorithm when applied to lists containing more than 1000 records. Improved performance for some scenarios that include access to Oracle Database DBMS. Getting DBMS lock data is optimized. The time required for getting the data does not depend on the number of infobases in the cluster. The server cluster service that collects DBMS lock data is implemented. It is named AuxiliaryService (Utility cluster service). The option to manage the collection of DBMS lock data is implemented in the technological log (<DBMSLOCKS> element). Enabling the data collection increases the DBMS load. The time required for getting DBMS lock data depended on the number of infobases in the cluster. The option to manage the collection of DBMS lock data using the technological log was not available. In the file mode, infobase operations are optimized. The option to change the page size of the infobase file (1Cv8.1CD) is implemented. The page size can have one of the following values: 4096, 8192, 16384, 32768, or 65536 bytes. Infobases created using 1C:Enterprise version 8.3.8 ot later have page size 8192 bytes and cannot be opened by earlier 1C:Enterprise versions. 1C:Enterprise version 8.3.8 can open infobases created in the earlier versions without changing their compatibility modes. To migrate data between version 8.3.8 and an earlier version, you can use a .dt file or convert the infobase file using cnvdbfl utility. The cnvdbfl utility can change the infobase file page size during the conversion. Pages of the infobase file had fixed size: 4096 bytes. The option to change the size was not available. Reduced infobase opening time for infobases with large page sizes, and reduced query execution time. Reduced size of session data on the hard disk. Session data is stored in the server cluster in compressed form. Session data was stored in the server cluster in uncompressed form. The space occupied by internal cluster data is reduced. Some of the internal cluster operations are streamlined. The first opening of a managed form in the Designer editor is now faster. The first opening of a managed form in the Designer editor took more time. The performance of the thin client startup in the file mode was insufficient.\n\nThe command-line utility for software license management (which includes license activation, getting license data, getting the list of licenses, and more) is implemented. The utility is delivered in two distribution packages, which are located in the subdirectory of the platform version directory (provided that the thick client or 1C:Enterprise server is installed for this platform version). The utility is not installed automatically. In order to use it, you have to install it first. The utility is available for Windows operating system (both architectures) and for Linux operating system (both architectures, as .deb- and .rpm packages). To access the utility, use the ring license command. The utility requires Java version 8. The detailed utility description is available in 1C:Enterprise documentation. Software license activation was only available in the interactive mode. No other software management options were available. During the automatic generation of managed form items, the names of items that match the and commands are generated according to the following template: This change is not implemented in 8.3.7 compatibility mode. During the automatic generation of managed form items, the names of items that matched the and commands were generated according to the following template: In a managed form, the width of a drop-down list of an input field is adjusted according to the width of data displayed in that list. Pressing the Home or End key (as a single key or with any modifier keys) is handled directly in the input field. In a managed form, each drop-down list of an input field had a fixed width set by the platform or by a developer. Pressing the Home or End key (as a single key or with any modifier keys) in an input field had no effect. The following features are implemented in the compare and merge modules window :\n• Synchronization between the comparison window and the merge result editor window\n• The editor window functionality is closer to that of 1C:Enterprise script editor window\n• Context help is available in the editor window. The context includes the main configuration (before merging) and the current module (after merging)\n• The window title displays the module name The following features are implemented in the window that displays the result of merging with a third-party tool:\n• The editor window functionality is closer to that of 1C:Enterprise script editor window\n• Context help is available in the editor window. The context includes the main configuration (before merging) and the current module (after merging) When a supported configuration is being updated, the compare and merge configurations window has a new filter option: Show only properties with merge conflicts. The filter displays the objects that are not merged with a third-party tool. This feature was not provided. The field of the property palette displays Russian property names only when the Russian 1C:Enterprise script variant or the Russian platform interface is selected. The field of the property palette always displayed both Russian and English property names. In the web client, the option to display a background picture and a pattern in a spreadsheet document cell is implemented. In the web client, displaying background pictures and patterns in spreadsheet document cells was not supported. In spreadsheet documents exported to PDF format, font substitution for characters that are not available in the current font is implemented. This change is not implemented in 8.3.7 compatibility mode. In spreadsheet documents exported to PDF format, characters that were not available in the current font were displayed as missing characters (squares). In spreadsheet documents exported to PDF format, non-English characters are displayed correctly. When a spreadsheet document is exported to XLS (Microsoft Excel 97) format, Microsoft Office OpenXML (Microsoft Excel 2007-2010) format, or ODS (OpenDocument) format, the option to add pictures to spreadsheet document cells is implemented. This option is not available when exporting spreadsheet documents to XLS (Microsoft Excel 95) format. This change is not implemented in 8.3.7 compatibility mode. When a spreadsheet document was exported to XLS (Microsoft Excel 97) format, Microsoft Office OpenXML (Microsoft Excel 2007-2010) format, or ODS (OpenDocument) format, the option to add pictures to spreadsheet document cells was not supported. Better conversion of spreadsheet documents to Microsoft Excel and ODS formats. When an attribute of composite type that does not include references to configuration objects is adopted, the composite type is fully adopted. During the next adoption attempt, the composite type is supplemented with the set of types from the main configuration. When an attribute of composite type that includes references to configuration objects (nonprimitive types) is adopted, it is adopted as AnyRef. During the next adoption attempt, the AnyRef type is only added if the type is no longer composite and does not include CatalogRef, DocumentRef, and similar types. When a configuration extension is attached, the following rules apply:\n• If an extension configuration attribute type includes , this requires the matching main configuration attribute type to include any reference.\n• If an extension configuration attribute type includes , , and similar types, this requires the matching main configuration attribute to include any reference type of that kind. If an attribute of composite type cannot include AnyRef type, any composite type adopted for this attribute is adopted with a single Arbitrary type. Such attributes cannot cause configuration extension attachment errors. When a composite type was adopted, primitive types were always adopted, and a single type from the configuration object reference types was adopted. When a configuration extension was attached, the following rule applied: if an extension attribute type included composite types, this required the matching main configuration attribute to include exactly the same composite types. During a web service call, if an internal server infrastructure error that is not related to SOAP occurs, the error message contains the correct diagnostics text. The web service call error message is more detailed and can include data from the ( ) and tags of the web service response. During a web service call, if an internal server infrastructure error that was not related to SOAP occurred, an incorrect error message was displayed, and the information about the actual error cause was lost. The web service call error message did not include additional details from the web service response. The web service call error message is more detailed, which simplifies error diagnostics. When a client application is started with a file infobase, there is a 2-minute delay before starting the execution of scheduled jobs. When a client application was started with a file infobase, there was a 1-minute delay before starting the execution of scheduled jobs. When a user disables publishing to a web server from Designer, they are prompted to restart the web server. When a user disabled publishing to a web server from Designer, they were not prompted to restart the web server. Users are given better understanding of the disable publishing operation, since the publishing is actually disabled when the server is restarted. In Designer, the option to customize the background of the context method parameter help is implemented. In the context help, links to the Syntax Assistant have the Identifiers color and normal text has the Miscellaneous color. In the context help, links to the Syntax Assistant had the default color and normal text had the default color. You can customize the context help of method parameters to make it readable when the module editor color scheme has dark background. In the XDTO model, new properties are implemented. They ensure correct processing of XSD schemas with any combinations of the following attribute values: ( package property), ( package property), and (property of the element). When processing XSD schemas, the XDTO model ignored actual values of and attributes. It also ignored the attribute of XSD schema elements and attributes. Instead, it always used the following values: Extended list of web services that are compatible with 1C:Enteprise as they are, without any manual corrections to their descriptions. The wizards used to add and edit infobases are refactored, the number of wizard pages is reduced. Automatic detection of the infobase connection type is implemented, based on the string stored in the clipboard or the string entered in the Specify infobase name field. This includes the detection of the path to a file infobase or the URL for accessing an infobase running on a web server. Once the infobase type is detected, all of the related wizard fields are filled in. The wizards used to add and edit infobases were more complex and had more pages. Simplified adding of infobases to the list. If an input field of a managed form displays data, the value list form that is opened for editing the data gets the following properties from the input field:\n• , supplemented with values based on the property If an input field of a managed form displayed data, the value list form that was opened for editing the data received the following properties from the input field:\n• , not supplemented with values based on the property Input by string and full-text search in dynamic lists find data that is not yet indexed for the full-text search. Input by string and full-text search in dynamic lists did not find data that was not yet indexed for the full-text search. Data that is not yet indexed for the full-text search is included in full-text search results and input by string results. In the interface, the appearance of managed form buttons and command bar buttons is changed. For the CommandBarButton and CommandBarHyperlink buttons, support of the following properties is implemented: BackColor, TextColor, Font, BorderColor (except CommandBarHyperlink buttons). For form group extension submenus, support of the following properties is implemented: BorderColor, BackColor, TitleTextColor, and TitleFont. This change is not implemented in version 8.3.7 compatibility mode and in version 8.2 interface compatibility mode. For the standard Copy command of dynamic list table extension:\n• The value of property is equivalent to .\n• The value of property is equivalent to . For MoveUp and MoveDown managed form table commands, the Auto value of the OnlyInAllActions property is equivalent to No. These commands are included in a compact button group. This change is not implemented in version 8.3.7 compatibility mode. In version 8.3.7 compatibility mode with compact interface the button height in the thin client differs from the button height in the web client. In the interface, the appearance of managed form buttons and command bar buttons was different. The CommandBarButton buttons had BackColor, TextColor, Font, and BorderColor properties, which were never used. Form group extension submenus had BorderColor, BackColor, TitleTextColor, and TitleFont properties, which were never used. For the standard Copy command of dynamic list table extension:\n• The value of property was equivalent to .\n• The value of property was equivalent to . For MoveUp and MoveDown managed form table commands, the Auto value of the OnlyInAllActions property was equivalent to Yes. Improved form creation capabilities in the interface. The default location of some frequently used buttons (Copy in dynamic lists and row movement commands in other tables) changed from the More menu to the command bar. The option to display command bar commands as hyperlinks is implemented. Pop-up menus do not support displaying commands as hyperlinks. For the enumeration, the value is implemented. In 8.3.7 compatibility mode, the value is treated as . In the Taxi interface, the option to set horizontal picture alignment for managed form buttons is implemented. Pop-up menus do not support this feature. For managed form buttons, the PictureLocation property is implemented. This property is ignored in 8.3.7 compatibility mode and version 8.2 interface compatibility mode. The option to set command bar button spacing is implemeneted. Managed form group extension for a button group is implemented. Pop-up menus do not support this feature. The ButtonGroupRepresentation system enumeration is implemented. In 8.3.7 compatibility mode and version 8.2 interface compatibility mode, the button spacing value is ignored. The option to set button shape (except pop-up menu buttons) is implemented. For managed form buttons and form group extensions for popups, the Shape property is implemented. Pop-up menu commands do not support this property. This property is ignored in 8.3.7 compatibility mode and version 8.2 interface compatibility mode. The option to set managed form button shape is implemented. For managed form buttons and form group extensions for popups, the ShapeRepresentation property is implemented. The ButtonShapeRepresentation system enumeration is implemented. Pop-up menu commands do not support this feature. This property is ignored in 8.3.7 compatibility mode and version 8.2 interface compatibility mode. Command bar commands could not be displayed as hyperlinks. The option to set horizontal picture alignment for managed form buttons was not available. The option to set command bar button spacing was not available. The option to set button shape was not available. The option to set command bar button appearance was not available. More managed form appearance options in the interface. Recommendations about the usage of user messages are added to the documentation. The recommendations are aimed to reduce the chance of situations where users cannot read the displayed messages. The documentation did not contain the recommendations aimed to reduce the chance of situations where users cannot read the displayed messages.\n\nChanges that require modification of configuration and administrative settings\n\nThe object and NSS certificates are no longer available for use in 1C:Enterprise script. Support of TLS protocol versions 1.1 and 1.2 is implemented for scenarios where the client certificate is not specified in the connection settings. The SSL protocol version 3.0 is only used when the client application is started with command-line option. In all other scenarios SSL version 3.0 is not used. The InternetMail object does not support SSL version 3.0. 1C:Enterprise only supported TLS protocol version 1.0. The AllowSSLv3 parameter was available for use in conf.cfg file. Increased security of connections established by client applications for Internet operations. The platform no longer uses file for creating HTTPS/FTPS connections. The platform uses the root certificate store of the operating system for creating HTTPS/FTPS connections. This change is not implemented in 8.3.7 compatibility mode. The platform used file for creating HTTPS/FTPS connections in scenarios where no certificate stores were specified explicitly. The outdated technology is no longer supported. For managed forms, the option to update data presentations only for the specified set of form items is implemented. For the method, the parameter is implemented. For the system enumeration, the value is implemented. The option to specify a set of form items when updating data presentations using the method was not available. Form data can be updated in idle handlers without losing the text being edited in a text box. The dump of the property of the object to a file is more human-readable. You can restore configuration from files having both property dump formats. The dump of the property of the object to a file was less human-readable. Dumping configurations to files produces files that are more human-readable. Error diagnostics for the creation of WS references (both in Designer and using the object) is much more detailed. During the creation of WSDefinitions object, exceptions are raised if the used WSDL description has errors. The WSDL description used to create WSDefinitions or WSReference objects must comply with the following rules:\n• Its first tag is .\n• It includes the attribute of the element.\n• If it does not comply with the rules, an exception is raised. This change is not implemented in 8.3.7 compatibility mode. Error diagnostics for the creation of WS references (both in Designer and using the object) was not sufficiently detailed. During the creation of WSDefinitions object, if the used WSDL description had errors, invalid elements were ignored. If the first tag of the WSDL description used to create WSDefinitions or WSReference objects was not <definitions>, empty web service description objects were created. If the WSDL description used to create WSDefinitions or WSReference objects did not include the targetNamespace attribute of the <xs:schema> element, the platform set a pseudorandom namespace. If a constant stores a value of , , or type, a selection from the constant table that includes a request to the field returns a value of that type. This change is not implemented in 8.3.7 compatibility mode. If a constant stored a value of , , or type, a selection from the constant table that included a request to the field returned a value of type. The following behavior of the method is implemented:\n• Output the entire batch to a file, prompt for the file name before the output.\n• If all documents in the batch have identical print settings, use the Windows scenario.\n• If the print settings are different, create a printer job for each document. This change is not implemented in 8.3.7 compatibility mode. The RepresentableDocumentBatch.Title, property is implemented. It is used for generating the batch presentation. The method created a job for each document in a batch. and conditional appearance items are applied to fields of chart grouping templates of data composition systems regardless of the previous value (even if the previous value is taken from the data composition system). conditional appearance item has higher priority than conditional appearance. This change is not implemented in 8.3.7 compatibility mode. and conditional appearance items were applied to fields of chart grouping templates of data composition systems only if the conditional appearance was not applied to those fields earlier. The conditional appearance property is only used if this property is set to and the conditional appearance property is also set to . This change is not implemented in 8.3.7 compatibility mode. The conditional appearance property was only used if the conditional appearance property was set to . In the query language, the operation result is based on all expression types from all branches of that expression. This change is not implemented in 8.3.7 compatibility mode. In the query language, the calculation of operation result ignored all branches that included constant expressions with values. Serialization of a object using the method creates an XML document based on the schema used for serialization of this object with method. This ensures that value lists serialized in platform version 8.3.7 can be read in version 8.3.6 (and vice versa), and also ensures the same behavior for versions 8.3.8 and 8.3.7 (in the compatibility mode). Value lists serialized in version 8.3.8 (no compatilibity mode) cannot be deserialized in earlier platform versions. This change is not implemented in 8.3.7 compatibility mode. Serialization of a object using the method created an XML document that did not match the schema used for serialization of this object with method. This change is not implemented in 8.3.7 compatibility mode. The option to set a size limit for data indexed for the full-text search is implemented. The default size limit is 1 MB. For the FullTextSearchManager object, the SetMaxIndexedDataSize() and GetMaxIndexedDataSize() methods are implemented. This change is not implemented in 8.3.7 compatibility mode. The option to set a size limit for data indexed for the full-text search was not available. All infobase data was indexed. You can limit the full-text search scope by excluding large blocks of data you do not need to search. This increases the performance of full-text search indexing and reduces the index size. The algorithm that retrieves the list of infobases and platform updates over HTTPS no longer uses the file, which is included in the platform distribution kit. On Linux, the platform gets certificates from the certification centers specified in the operating system. On Windows, the platrorm uses the operating system root certificate store. On Windows, the platform used the file and the operating system root certificate store in order to check an HTTPS connection. On Linux, the platform used the cacert.pem file only. The algorithm that generates the list of fonts available to 1C:Enterprise on Linux operating system is refactored. The library is used to get the list of fonts. This library is included in the system requirements. The list of directories used for storing fonts is removed from 1C:Enterprise documentation. The algorithm that generates the list of fonts available to 1C:Enterprise on Linux operating system used a fixed directory list, which was described in 1C:Enterprise documentation. The fontconfig library was not used for getting the list of fonts. Extended the list of fonts available to 1C:Enterprise on Linux operating system. Simplified 1C:Enterprise administration. The type specified for a data composition schema parameter affects the type of query fields that use this parameter. This change is not implemented in 8.3.7 compatibility mode. The type specified for a data composition schema parameter did not affect the type of query fields that used this parameter. Data displayed in reports better matches the input parameters. The dynamic list implementation is refactored in order to increase its quality. The list of virtual dynamic list fields that are not available for use in filter, grouping, and order settings is extended. If the main dynamic list table does not have key fields (according to 1C:Enterprise script object model) and a grouping is set for this table, an error is generated. When a filter, sorting, or grouping by a field that is not included in the query is specified using 1C:Enterprise script, an error informing that the field is not found is displayed. The list of restrictions to queries used to generate dynamic lists is modified. Dynamic list sorting specifics are described in the documentation. The description of algorithms used by dynamic lists for getting data is changed. The standard row picture is generated based on the standard attributes. If a query includes fields whose aliases are identical to standard attribute names and these fields store other data, these fields are not used in standard picture generation. If a dynamic list filter cannot be converted to a query language clause, an error is generated. Dynamic list column data that is not displayed and does not have the Use always property set is not sent to the client. Client access to these columns is not available. The detailed description of all the changes listed above is included in the documentation. This change is not implemented in 8.3.7 compatibility mode. The following virtual fields were not available in the dynamic list sorting and grouping settings: , , tabular sections fields, and fields having the following types: , (unlimited length), and (unlimited length). The list of restrictions to the grouping and ordering settings was different and it was not full. If the main dynamic list table did not have key fields (according to 1C:Enterprise script object model) and a grouping was set for this table, the content of data to be displayed was undefined. When a filter by a field that was not included in the query text was set, the filter might be applied without displaying any errors, or ignored. If grouping or sorting by a field that was not included in the query was specified using 1C:Enterprise script, the field was ignored. The list of restrictions to queries used to generate dynamic lists was different. The list of dynamic list sorting specifics was not documented. The description of algorithms used by dynamic lists for getting data was different. If a dynamic list query had fields with aliases matching the names of standard attributes used to generate standard row pictures, they were used in the generation of standard pictures (except the IsFolder attribute). If a dynamic list filter could not be converted to a query language clause, the filter was applied by data composition schema processor after getting the data, and this might reduce the amount of displayed data. If dynamic list settings included grouping or sorting fields that were unavailable (before applying rights and functional options), these fields were ignored. In some scenarios dynamic list column data that was not displayed and did not have the Use always property set was sent to the client. Improved quality and reliability of dynamic lists. More details about dynamic list specifics are added to the documentation. When a nonserializable value is passed to method as a background job parameter, the background job is not started and an exception is raised. This change is not implemented in 8.3.7 compatibility mode. When a nonserializable value was passed to the method as a background job parameter, the background job was started and the value was stored to that parameter. This did not raise any exceptions. The start of background jobs complies with the global error diagnostic rules. During an unexpected shutdown of the thin client, the dump generation includes taking a screenshot ( attribute of element of file). During an unexpected shutdown of the thin client, the dump generation did not include taking a screenshot. The result of division by is treated as a number of unspecified length . This number cannot be used in operations that do not accept numeric operands (such as , , ). This change is not implemented in 8.3.7 compatibility mode. The result of division by was not treated as a number and therefore could be used in operations that did not accept numeric operands (such as , , ). The approach to processing the closing of applications and managed forms is changed:\n• The new \"exit application\" mode is implemented. It requires special processing in the and managed form event handlers.\n• Opening windows and executing server calls is not allowed in and managed application event handlers, and also in and managed form event handlers (provided that the form is in the \"exit application\" mode).\n• The option to generate a text message prompting the user to confirm or cancel the exit is implemented (in the web client all messages are combined in a single dialog box). This approach is described in detail in the documentation. For BeforeClose managed form event handler, the Exit and WarningText parameters are implemented. For OnClose managed form event handler, the Exit parameter is implemented. For BeforeExit managed application module event handler, the WarningText parameter is implemented. This change is not implemented in 8.3.7 compatibility mode. Depending on the modality usage mode, different approaches to closing managed forms and the main application window were used. In some scenarios (especially in the web client) these approaches led to errors that were hard to detect and fix. Unified approach to closing forms and the main application window, which provides acceptable user interaction capabilities in all client applications. The implemented platform behavior conforms to the methodology and technical requirements of modern web browsers. When an infobase that has a platform version specified in a local or global list of infobases is started using , , or , the search for the specified version is performed regardless of the presence of command-line option. If a version that is not available on the local computer is specified and this version cannot be installed, an attempt to run the infobase with the latest 1C:Enterprise version is made During the client application update over HTTP, the check for operating system user right to perform this operation is disabled. If the user does not have sufficient rights for installing the client application, the UAC dialog box prompting to confirm the installation on behalf of a user that has administrative rights is displayed. Error diagnostics during the download and installation of the client application distribution kit over HTTP is improved. In the /AppAutoCheckVersion command-line option, you can explicitly specify whether the search for a specific 1C:Enteprise version is performed. When an infobase was started using , , or , the search for the specified version was only performed if the command line included the option. During the client application update over HTTP, the check for operating system user right to perform this operation was performed. The usability of selection and update of the client application used to access a specific infobase is improved. When the thin client is installed from a custom distribution kit, a single shortcut is created in the folder. When the thin client was installed from a custom distribution kit, the folder included shortcut and the folder with subfolders for each installed version. Reduced number of 1C:Enterprise startup options available after the installation of the thin client. In the client application startup command line, the rules for parsing mandatory parameters are modified. If an option that has a mandatory parameter is specified, the parameter must be also specified (or the option must be omitted). Parameters beginning with slash marks \"/\" are allowed. In the client application startup command line, the rules for parsing mandatory parameters were different. Mandatory option parameters could be omitted. Parameters beginning with slash marks \"/\" (full file name on Linux) could be treated as command-line options. 1C:Enterprise documentation and Designer help include the descriptions of , , , and options for the startup mode, which were previously missing. For the infobase creation mode (CREATEINFOBASE), new /DumpResult option is implemented. It enables writing the operation result to a file. In the file mode, batch Designer startup with /RestoreIB and /LoadCfg options together with the /DisableStartupDialogs option automatically creates an infobase if the database file is not available in the directory. 1C:Enterprise documentation and Designer help did not include the descriptions of , , , and options for the startup mode. In the file mode, during the batch Designer startup with /RestoreIB and /LoadCfg options together with the /DisableStartupDialogs option, if the dababase file was not found in the specified directory, the user was asked for the confirmation of further actions. Improved 1C:Enterprise documentation and Designer help. Simplified batch Designer startup in some usage scenarios. If a data set field of a data composition schema has an ordering expression specified and the data composition settings include ordering by this field ( ), the direction speficied in the ordering expression is reversed. This change is not implemented in 8.3.7 compatibility mode. If a data set field of a data composition schema had an ordering expression specified, ordering for this field was always taken from the ordering expression, while the direction specified in the field settings was ignored. Managed locks that are set for writing accounting register records in the mode are set by values of nonturnover extra dimensions only. When you set a lock for further operations with balances, it is recommended that you do not specify turnover extra dimension values (you can use the LockForUpdate property or explicitly use a managed lock). When you set a lock for further operations with turnovers, specify all the required extra dimenstion values, including the values of turnover extra dimensions (use the managed lock explicitly). This change is not implemented in version 8.3.7 compatibility mode. Managed locks that were set for writing accounting register records in the mode included locks by all extra dimension values. The behavior of property of accounting register object is better suited for solving typical tasks. In the mode, the resulting lock does not inlcude turnover extra dimensions, which fits the frequently used scenarios where the lock is used to check the balances but not the turnovers. In a query, if a single system enumeration is retrieved and it is not combined with other types, the operation groups the values of this field regardless of the enumeration value source. A similar behavior is implemented for UUIDs and references to external data source tables. This change is not implemented in 8.3.7 compatibility mode. In a query, if a single system enumeration was retrieved and it was not combined with other types, the operation might not group the values of this field (depending on the enumeration value source). For Microsoft SQL Server DMBS, types of table fields that store some configuration attribute types (date and time, strings of unlimited length, and binary data of unlimited length) are changed. New field types are used if no compatibility mode is selected and only after restructuring configuration objects. To perform database table restructuring with modification of field types, specify the required compatibility mode and restructure the infobase in Designer (on the Administration menu, click Verify and repair). This change is not implemented in 8.3.7 compatibility mode. For Microsoft SQL Server DMBS, table fields that stored some configuration attribute types (date and time, strings of unlimited length, and binary data of unlimited length) had different types. Better mapping between the stored types and Microsoft SQL Server table field types. For all DBMS, the structure of indexes by fields of composite type is modified. This reduces the total number of indexes. Such indexes are built if no compatibility mode is selected and only after restructuring configuration objects. To perform database table restructuring with index update, specify the required compatibility mode and restructure the infobase in Designer (on the Administration menu, click Verify and repair). This change is not implemented in 8.3.7 compatibility mode. For all DBMS, the structure of indexes by fields of composite type was different. Reduced number of indexes for tables storing objects with fields of composite types. This increases the performance of operations with these object types. When a background job is executed, all the configuration extensions available in the session that startes the job are also attached in the background job session. This change is not implemented in 8.3.7 compatibility mode. For ConfigurationExtensionsManager object, the ExecuteBackgroundJobWithDatabaseExtensions method is implemented. It duplicates the background job execution procedure implemented in earlier 1C:Enterprise versions. When a background job was executed, all the configuration extensions available in the infobase were attached in the background job session. Background job execution environment is closer to the parent session environment. In the thick and thin clients, when a user starts typing in a cell of a managed form table, the event is fired. This change is not implemented in version 8.3.7 compatibility mode. In the thick and thin clients, when a user starts typing in a cell of a managed form table, the event is fired. The behavior of the input field in the scenario where a user starts typing in a table cell is uniform with other input scenarios.\n\nIn the mobile platform, support of in-app billing services is added. This includes Apple In-App Purchase (for iOS) and Google Play In-App Billing (for Android). Support of in-app billing for Windows is not provided. The mobile application permission is implemented. The InAppPurchases, InAppPurchase, InAppPurchaseReceipt, and InAppPurchasesValidation objects are implemented. In the desktop platform, the InAppPurchasesValidation object is implemented. It is intended for testing in-app purchase algorithms. In the mobile platform for developers, a service providing an API similar to Google Play In-App Billing is implemented for Android operating system. It is intended for debugging in-app purchase algorithms. The option to test the full purchase cycle is implemented. This includes the purchase creation and the emulation of some related scenarios. The HTTP service (named PurchaseTest) and the testing tools are provided by the mobile application builder. This feature was not provided. The option to implement purchases and subscriptions in mobile applications is available. You can create applications with paid features. For mobile applications, the option to display ads is implemented. It uses iAd service (for iOS) and AdMob service (for Android). Displaying ads on Windows is not supported. This feature was not provided. The option to create mobile applications with advertising monetization model is available. This feature was not provided. More options for data presentation in mobile applications. On Android version 4.1 or later, numbers are displayed correctly if the parameter of the function contains two groups. On Android version 4.1 or later, numbers were displayed incorrectly if the parameter of the function contained two groups. In the mobile platform, support of asynchronous file operation methods is implemented (this includes global context methods and the object). This feature was not supported by the mobile platform. Improved parallel code implementation for both mobile and desktop platforms. On the mobile platform, support of method is implemented. In the Syntax Assistant, methods of FullTextSearchManager object are marked as available on the mobile platform. This feature was not supported by the mobile platform. The Syntax Assistant erroneously stated that methods of the FullTextSearchManager object were not available on the mobile platform. Extended full-text search support on the mobile platform. The Syntax Assistant description is up-to-date. On the mobile platform, when specifying request body as a string for an or object, you have the option to include BOM characters to the request or exclude them. On the mobile platform, the ByteOrderMarkUsage system enumeration is implemented. This feature was not supported by the mobile platform. Simplified mobile application integration with systems that do not expect BOM characters in HTTP requests. The object is now available on iOS and Windows platforms. The method is implemented to test the availability of this feature. Developers can use this method to determine whether their mobile devices support running external applications. The object was not available on iOS and Windows platforms. The platform behavior related to functionalities that are not available on some mobile devices or operating systems is unified across all platforms. In the Syntax Assistant, more information is added to the descriptions of and managed form items. The Unfilled selection mode property of managed form input fields is available in mobile platform forms. The Row selection mode property of managed form tables is no longer available in mobile platform forms. The information in the Syntax Assistant was outdated. The availability of some properties of managed form input fields did not match the capabilities of the mobile platform. Designer and Syntax Assistant now match the capabilities of the mobile platform. Data storage structure implemented in the mobile application builder is modified. When the mobile application builder is started for the first time after the update, the data conversion may take significant time. Data storage structure implemented in the mobile application builder was different. Data storage structure implemented in the mobile application builder is now more efficient. When a debug server that does not support HTTP is specified in a mobile application, the error message clearly explains the problem: The mobile platform only supports debugging over HTTP . When a debug server that did not support HTTP was specified in a mobile application, the error message did not clearly explain the problem.\n• The cURL library is updated to version 7.43.\n• The OpenSSL library is updated to version 1.0.2d.\n\nTransition from the previous version to the version 8.3.8\n• Conversion of configurations, infobases, external data processors and external reports is not required during the transition from the previous version to the version 8.3.8.\n• Some features that are added in version 8.3.8 do not support compatibility mode. When you toggle the compatibility mode, the structure of some database objects is changed. To be able to work with the infobase using a previous platform version, you have to turn the compatibility mode on.\n• When the is set to , the minimum supported version of Microsoft SQL Server is Microsoft SQL Server 2005 (this includes scenarios that use the Native Client)."
    },
    {
        "link": "https://1c-dn.com/library/tutorials/practical_developer_guide_for_1c_enterprise_8_3",
        "document": "We're sorry, but the page could not be found. The link may be outdated, or you may have entered the address (URL) incorrectly.\n\nIf you are new to 1C:Enterprise, get the Kick start with 1C:Enterprise\n\nOr see the latest updates on our site:\n\nIf you found nothing interesting yet, please check a Site map or a Home page."
    },
    {
        "link": "https://1c-dn.com/library/tutorials/first_application_1c_enterprise_8_training_version",
        "document": "We're sorry, but the page could not be found. The link may be outdated, or you may have entered the address (URL) incorrectly.\n\nIf you are new to 1C:Enterprise, get the Kick start with 1C:Enterprise\n\nOr see the latest updates on our site:\n\nIf you found nothing interesting yet, please check a Site map or a Home page."
    },
    {
        "link": "https://yellow-erp.com/page/guides/dev/1c-enterprise-script",
        "document": "1C:Enterprise is a flexible configurable system that can be used to solve various tasks in the area of enterprise automation. Description of specific configuration algorithms is provided in the 1C:Enterprise Designer or, more specifically, in program modules that contain texts in the 1C:Enterprise script.\n\n4.1. BRIEF DESCRIPTION AND PURPOSE OF 1C:ENTERPRISE SCRIPT\n\nThe 1C:Enterprise script is used to specify algorithms of application task execution (at the configuration development stage).\n\nThe 1C:Enterprise script is a domain-specific programming language specifically designed for both professional programmers and users. Thus, all 1C:Enterprise script operators can be used both in Russian and in English in the same source text. This book is dedicated to the English language; however, Russian synonyms of operators are also provided.\n\nAlthough the 1C:Enterprise script is relatively simple, it has some object-oriented features, e.g., access rules for properties and methods of special data types (documents, catalogs, etc.) which resemble properties and methods of objects used in other object-oriented languages. However, you cannot define special data types using 1C:Enterprise script tools. You should use visual mode instead.\n\nVariable types in the 1C:Enterprise script are not fixed, i.e. type of variable depends on its value. You do not need to declare variables explicitly. You can declare a variable indirectly by using it in the left part of an assignment operator. You can also declare variables directly using specific operators. You can use arrays, structures, maps and other universal collections of values.\n\nProgram modules in 1C:Enterprise configuration are not independent programs in the usual sense, since they are only a part of the entire configuration. A program module is a text in the 1C:Enterprise script that contains procedure and function codes with the required algorithms called by the system when needed. Therefore, program modules have no formal borders of description like: \"Begin Module\" – \"End Module\".\n\nThe Designer shows location of specific program modules in configuration points that require description of specific functioning algorithms. These algorithms should have the form of procedures or functions called by the system in certain predefined situations (e.g., when the user clicks a button in a dialog box).\n\nEach individual program module is interpreted by the system as a whole; therefore, all procedures and functions of a program module are executed in a single context.\n\nEach program module is related to the rest of the configuration. This relationship is referred to as module execution context.\n\nThere are two types of context:\n\nThe global context is formed by:\n\n system enumerations and system sets of values (e.g., DialogReturnCode and Chars)\n\nThe global context is visible to all program modules and acts as a source for the common language environment of the configuration.\n\nThe local context of a module is based on a specific task configuration point which uses the program module. The local context is only visible to the specific program module. It determines a set of objects accessible to the module along with their methods and properties.\n\nThe 1C:Enterprise system has several types of program modules. Modules differ by location and available context.\n\nManaged application module runs automatically when a configuration is loaded during 1C:Enterprise startup in the following modes:\n\nThe managed application module is used for processing tasks related to the end user session (primarily for processing session start and end events). The managed application module is inaccessible to procedures working on the server. We recommend using it to implement event handlers only.\n\nProcedures and functions of the managed application module, along with its variables that have the Export keyword in their titles, can be accessed:\n\n in client procedures and functions of a command module\n\n in client procedures and functions of a managed form module\n\nThe context of the managed application module makes the following accessible:\n\n part of the global context that can be executed in a managed application\n\n exported procedures and functions of any common client modules\n\n exported procedures and functions of non-global common server modules with the Server call property set\n\nSimilar to the application module, the external connection module is located in the root section of the configuration. It contains event handling procedures initialized when the system starts up and closes down in the external connection (CÎÌ-connection) mode.\n\nYou can use an external connection module to declare variables as well as declare and describe procedures and functions that are accessible to an external application.\n\n exported variables and procedures/functions of the external connection module  exported variables and procedures/functions of shared modules:\n\n○ including and excluding fragments of common modules with preprocessor instructions\n\n○ except for the objects that are tightly linked with the client application\n\nThe module is available only in an external connection session.\n\nUser interface is completely unavailable in this mode.\n\nSession module runs automatically when the configuration is loaded during 1C:Enterprise startup.\n\nThe session module is used to initialize session parameters and process sessionrelated actions. This common module is always executed in privileged mode at the 1C:Enterprise server.\n\nSession parameters are set in the SessionParametersSetting() event handler.\n\nThe session module is executed before the managed application module (external connection module).\n\nThe session module can only contain definitions of procedures and functions. It can use procedures from common modules of the configuration and cannot contain exported procedures or functions.\n\nCommon modules reside in a separate branch of the metadata tree. The main purpose of common modules is to contain common configuration algorithms accessible from different modules. Common modules do not have a variable declaration area and main program area, i.e. they only contain procedural and functional areas (see section \"Program Module Structure\").\n\nYou can declare and describe procedures and functions which will be available to all configuration modules in any common module.\n\nFor details on common modules see page 1-174.\n\nThe set of application objects has its own modules. These objects include:\n\nModules reside in the configuration branches that contain the objects. They represent object properties. Each object has its own individual module. These modules can be used to declare variables, procedures and functions that will extend the object context and will be available for working with the object externally using the 1C:Enterprise script.\n\nThe context of the application object module grants access to attributes, tabular sections, methods and events of an object.\n\nEach application object has a manager that manages this object as a configuration object. Using this manager, you can create objects and work with forms and templates. The manager module allows you to extend the managers' functionality by creating procedures and functions using the 1C: Enterprise script. In fact, this enables you to define methods for a configuration object (e.g., a catalog) that refer to the configuration object in general, rather than to a specific database object instance.\n\n Properties and methods of the global context;\n\n Export procedures and functions of global common modules, if these modules are compiled on the server;\n\n Export procedures and functions of non-global common modules, if these modules are compiled on the server;  The local context of the module.\n\nThe manager module cannot have variables or a module body.\n\nIf the manager module's procedures and functions are declared as exported, they are accessible through the object's manager.\n\nLook at a sample function description in the Contractors catalog manager module:\n\nTo call this function from the application code, use the following:\n\nThese modules are a part of configuration forms (see page 1-361). Each form has its own module. You can use these modules to declare variables, procedures and functions that will extend form context and will be available for working with the form externally using the 1C:Enterprise script.\n\nThe form context is formed by:\n\n local context of the form module and attributes of the form that owns the module;\n\n properties and methods of the ManagedForm object in the 1C:Enterprise script;\n\n properties and methods of the form extension defined by the type of object that has its data stored in the main form attribute;\n\n global context, including non-global common modules and exported functions and procedures of global common modules. It's important to match the procedure description in the form module (&AtClient, &AtServer, etc.) and the properties set for the common module (Client (managed application), Server, etc.);\n\n exported variables, procedures and functions of the managed application module.\n\nCommand module describes actions the system performs when a command is called in the 1C:Enterprise script. The command module can only contain descriptions of functions and procedures. It cannot have variables or a module body.\n\nThe CommandProcessing() handler should always be preceded by the &AtClient preprocessor instruction, since this is where the command execution starts. Context of client procedures in the command module is formed by the following:\n\n global context, including non-global common modules and exported functions and procedures of global common modules. It's important to match the procedure description in the form module (&AtClient, &AtServer, etc.) and the properties set for the common module (Client (managed application), Server, etc.);\n\nContext of server procedures in the command module is formed by the following:\n\n properties and methods of the global context;\n\n export procedures and functions of global common modules if these modules are compiled on the server;\n\n non-global common modules if these modules are compiled on the server\n\n(export methods of the modules are also available);  server methods of the command module.\n\nIn the command module, you can describe methods using the Export keyword. However, you cannot use them outside the module. You cannot access commands and accordingly their context from the 1C:Enterprise script.\n\nProgram modules consist of the following areas:\n\nAny of these areas may be missing in a particular module.\n\nVariable declaration area occupies space from the beginning of the module text down to the first Procedure or Function operator or any executable operator. This area may contain only variable declaration operators Var.\n\nThe procedure and function area occupies space from the first Procedure or Function operator to any executable operator outside this area.\n\nThe main program area occupies space from the first executable operator outside the last procedure and function area to the end of the module. This area may contain only executable operators. The main program area is executed during module initialization. The main program area generally contains operators that initialize variables using specific values that should be passed before the first call of any procedure or function in the module.\n\nSource text of program modules may contain operators and comments.\n\nYou can use comments to make various notes regarding module work. In programming, a good practice is providing a detailed comment with algorithm description in the source code. In execution mode comments are ignored. In program module text a comment begins with \"//\" characters and ends at the end of a string. You can start a comment at the beginning of a string or write it after an operator in the same string. You cannot add an operator after the comment in the same string; you have to finish the comment at the end of the string.\n\nAll operators, except the assignment operator (A = Â;) and syntactic constructs of the 1C:Enterprise script (e.g., For, While, If), look like standard procedure calls. Use semicolons to separate operators. End of string does not mean end of operator, i.e. operators may freely move over several strings and continue in another string.\n\nYou can place any number of operators in a string if you separate them with semicolons.\n\nThere are two categories of operators in program modules: variable declaration operators and executable operators.\n\nVariable declaration operators create variable names which are used by executable operators.\n\nAny executable operator may have a label that can be used by the GoTo operator.\n\nGenerally, language operator format looks like the following:\n\nLabels are special identifiers that begin with a tilde character and consist of a sequence of letters, digits and underscore characters. To mark an operator, you should put a label before it followed with a colon.\n\nVariable, procedure and function names may consist of any sequence of letters, digits and underscore characters beginning with a letter or an underscore character. New names cannot be the same as reserved words or names of properties that are directly available in the current context. Variable, procedure and function names are not case sensitive.\n\nThe 1C:Enterprise script is bilingual. Almost all reserved words as well as names of value types, properties, methods and events have two names: one in Russian and another in English. The only exception is words that cannot be translated into Russian adequately. You can use both Russian and English names in the same module text without any limitations.\n\nNames of variables, properties, methods, procedures, functions and 1C:Enterprise script functions are not case sensitive.\n\nThe following keywords are reserved and cannot be used as names for variables, configuration object attributes and declared procedures and functions:\n\nThe 1C:Enterprise script supports a set of primitive data types. You can use literal constants for most primitive data types in module text, i.e. directly specify values of a certain type in the module.\n\nValues of this type are used only to specify a missing value for a database, e.g., for joining tables.\n\nValues of this type may have two values – True and False specified by corresponding literal constants. Values of this type result from evaluation of logical expressions.\n\nComparison operations of the 1C:Enterprise script use logical expressions. It means that you do not have to write the following in a comparison expression:\n\nYou can write the following:\n\nValues of this type contain date (AD, from January 01, 0001) and time with accuracy up to one second.\n\nA string of digits enclosed in single quotation marks with a format of 'YYYYMMDDhhmmss', where:\n\n YYYY – four digits of a year (including age and millennium)\n\n hh – two digits of an hour (in 24-hour format)\n\n ss – two digits of a second\n\nIn the 1C:Enterprise script, Date literal constants should contain year, month and day values. To specify the initial date, use '00010101'. You can omit the last characters (seconds, minutes, hours, etc.) in Date type literal constants. If not specified, these values are set to 0 (for time) and 1 (for date).\n\nVarious separators are allowed in date literal constants.\n\nAny decimal number can be represented by numerical type. For numerical types, the main arithmetic operations are defined: addition, subtraction, multiplication and division.\n\nA number cannot have more than 32 digits.\n\nA set of digits written directly in the source code, with the following syntax:\n\nA period is used to separate the whole and fractional parts.\n\nValues of this type contain a string of arbitrary length in Unicode format.\n\nString type literal constants are sets of values in double quotation marks. To use the \" character (double quotation mark) in a string, use two double quotes in a row (\"\").\n\nBesides, you can use string constants that occupy several lines. To specify a multi-line constant in the source text, you can use one of two methods:\n\n There should be no other characters except spaces, line breaks and comment lines between fragments that represent separate lines of a multi-line string.\n\n Each part of a multi-line string does not end with a quotation mark, but all lines end in a | character (vertical line). In this case comments are allowed if the string starts with the comment sign, //.\n\nDisplaying or printing the CompanyName line (sample string 3) results in the following:\n\nThis type of value is used when you need an empty value that does not belong to any other type. For example, this is the initial value received by composite type attributes. There is only one possible value for this type specified by a literal value.\n\nValues of this type are used to identify value types. This is required for type definition and comparison. This type has no literal constants and is returned by TypeOf and Type functions of the 1C:Enterprise script (see below).\n\nThe assignment operator (= character) indicates assignment of <Source> value to <Assignment> variable.\n\nAny writable variable or property of 1C:Enterprise script object may act as an assignment.\n\nAn expression with a value that needs to be assigned.\n\nAn expression is a mathematical, logical or string formula consisting of operations that calculate a value. Mathematical and logical expressions may be located to the right of the equality sign in assignment operators or may be a parameter of procedures or functions. Logical expressions can also be conditions in If, While and For control directives. Expressions consist of constants, variables and functions linked with symbols of logical and/or arithmetic operations.\n\nThe following types of arithmetic operations are defined in the 1C:Enterprise script:\n\nArithmetic operations have one or two operands which determine operation semantics. Semantics of an operation depend on the first operand. If the second operand type does not match the required one, the value is converted into the required type in compliance with type conversion rules. If the type of the first operand does not match any of the valid types, depending on situation, types may be converted or an execution error may occur.\n\nYou can use the concatenation operation (+) to attach one string to another. Length of the resulting string equals the total length of the strings attached. If the data type of the second or subsequent operands does not correspond to the string type, their value is converted to the string type in accordance with type conversion rules.\n\nNAME = Last Name + \" \" + Name + \" \" + Middle Name;\n\nA logical operation compares operands and creates a Boolean value: True or False. There are two types of logical operations: comparison operations and Boolean operations. You can use comparison operations to compare two values. Boolean operations are used for Boolean values and implement Boolean algebra. Boolean operation characters may combine forming compound operations.\n\nThe following comparison operations are defined in the 1C:Enterprise script:\n\nComparison operations are defined for the following operand types:\n\nThe following types of Boolean operations are defined in the 1C:Enterprise script:\n\nLogical expressions are calculated from left to right. Use round brackets to avoid ambiguity and manage operand sequence.\n\nWhen a logical expression is calculated, only its required parts are used. For example, if Price <= 0 in the expression (Price > 0) AND CheckSum(), then CheckSum() function is not called.\n\nYou can use it to calculate one of two specified expressions depending on the logical expression result.\n\nThe evaluated logical expression that defines which of the resulting expressions is calculated. If the evaluation result is True, then <Expression 1> is calculated. If the evaluation result is False, then <Expression 2> is calculated.\n\nThe resulting expression that is calculated if the logical expression is evaluated as True.\n\nThe resulting expression that is calculated if the logical expression is evaluated as False.\n\nCalculation result for one of the resulting expressions.\n\nThis operator form is used to raise a new exception.\n\nThe expression is evaluated to a string that is used as exception description.\n\nThis operator is used to execute a code fragment passed as a string value.\n\nIt is not recommended to use this method to implement a significant portion of functionality in application solutions.\n\nExecutable code should not contain separate procedures or functions since the code itself is executed as a procedure or a function which uses this operator.\n\nThe code also should not contain explicit declaration of variables.\n\nWhen adding an event handler a check is performed to make sure that the number of event parameters matches the number of parameters for the method assigned as a handler.\n\nThe event to which the handler is added.\n\nThe event is set in the <Expression>.<EventName> form where:\n\n <Expression> is any expression in the 1C:Enterprise script. It should result in an object with an event to which the handler is added.\n\n <EventName> is the event ID (name).\n\nA procedure or function that acts as event handler.\n\nThe event handler can be a method of 1C:Enterprise script object. Then <EventHandler> is set as <Expression>.<HandlerName> where:\n\n <Expression> is any expression in the 1C:Enterprise script that is evaluated to the object whose method serves as the event handler.\n\n <HandlerName> is the event handler method name.\n\nA procedure or function within the scope can be also set as the event handler. In this case the event handler is specified using the name of this procedure or function.\n\nYou can subscribe to events that have the same name (in COM objects) and a different number of parameters. To do so, you should create multiple handlers in the 1C:Enterprise script (each with a unique name and the required number of parameters); then the subscription mechanism selects a handler matching a particular subscription.\n\nFor operator is used for loop-like repetition of operators within Do – EndDo clause. Before the loop, <Expression 1> value is assigned to <Variable Name> variable. <Variable Name> value automatically increments at each iteration. Incremental step equals 1 for each loop. The loop is executed while <Variable Name> is less or equal to <Expression 2> value. The loop condition is always checked at the beginning before the loop is executed.\n\nFor <Variable Name> = <Expression 1> To <Expression 2> Do\n\nAn ID for a variable (loop counter) whose value is auto-incremented by 1 on each iteration. It is the so-called loop counter.\n\nA numeric expression that sets the initial value assigned to the loop counter at the first iteration.\n\nMaximum value of the loop counter. When the <Variable Name> variable becomes greater than <Expression 2>, execution of For operator is stopped.\n\nOperators after the Do keyword are executed while the <Variable Name> value is less or equal to <Expression 2>.\n\nAn executable operator or a sequence of such operators.\n\nIt breaks loop execution at any point. After this operator is executed, control is passed to the operator following the EndDo keyword.\n\nIt passes control immediately to the beginning of the loop where loop conditions are evaluated and checked. Operators following this operator in the loop body are skipped in this iteration.\n\nKeyword that denotes the end of a loop operator structure.\n\nFor each operator is used for cycling through a collection of values. Each iteration returns a new collection item. The cycle is running until all collection items are processed. You can use the Break operator to stop the cycle at any time.\n\nFor each <Variable Name 1> In <Variable Name 2> Do\n\nValue of the next collection item is assigned to this variable on each cycle.\n\nA variable or an expression that represents a collection. Items of this collection are assigned to <Variable Name 1>.\n\nOperators following the Do keyword are executed until the cycle goes through all collection items.\n\nAn executable operator or a sequence of such operators.\n\nIt breaks loop execution at any point. After this operator is executed, control is passed to the operator following the EndDo keyword.\n\nIt passes control immediately to the beginning of the loop where loop conditions are evaluated and checked. Operators following this operator in the loop body are skipped in this iteration.\n\nKeyword that denotes the end of a loop operator structure.\n\nIf operator controls program execution based on a result of one or more logical expressions. The operator may contain any number of operator groups within ElseIf – Then clauses.\n\nOperators following Then are executed if the result of the logical expression is True.\n\nAn executable operator or a sequence of such operators.\n\nA logical expression after ElseIf keyword is evaluated only when all conditions in If and all previous ElseIf clauses are False. Operators following ElseIf – Then are executed only when the result of the logical expression in this ElseIf is True.\n\nOperators following the Else keyword are executed if all previous If and ElseIf conditions are False.\n\nYou can use this operator to create a value of specified type. This operator can be used only for types that allow creation of new values. You should use functional form of the New operator (version 2) for application objects, since module check in the Designer has no types defined for application objects.\n\nIt specifies the type name for the new value.\n\nThe type name can be followed by parameters in brackets if they are defined in wizards for this type. A valid number of parameters and their purpose are specified in object wizard descriptions.\n\nType name or Type value.\n\nUnconditional control transfer to another operator of the program. It transfers control from one operator to another.\n\nThe scope of this operator is limited by the program module, procedure or function; this operator cannot pass control outside the program module, procedure or function.\n\nLabel in this operator should not lead to Procedure or Function operator.\n\nThe operator of unconditional transfer cannot be used to pass control to operators within the following clauses from outside: While – EndDo, For – EndDo, For each – EndDo, If – EndIf, Try – Except – EndTry.\n\nThis operator is used for explicit variable declaration.\n\nIt sets a name or names of declared variables.\n\nAn optional keyword. It means that this variable is exposed when other modules access context of this module. This keyword should be specified individually for each declared variable. It is meaningless in declarations of variables for standalone procedures or functions.\n\nIt is not mandatory to declare variables explicitly. A variable is declared implicitly when it first appears in the left part of an assignment operator. Variable type depends on the type of its value. Expressions cannot contain variables that have not been declared, either explicitly or implicitly.\n\nThe scope of variables depends on the location of their declarations in the configuration. You can declare variables in three scopes:\n\n Variable declaration area of the managed application program module. These are global variables.\n\n Variable declaration area in a module. These are module variables.\n\n Procedure or function. These are local variables.\n\nGlobal variables declared with the Export keyword can be used in executable operators, expressions, in any procedure and function of any client program module in the configuration.\n\nModule variables can be used by executable operators, expressions, any procedure or function of the program module where they are declared. If they are declared with the Export keyword, they can be accessed from other modules through context of the module where they are declared.\n\nLocal variables are accessible only within a procedure or function where they are declared.\n\nIf a variable is defined as global, it can be accessed by any procedure or function of any client program module within the configuration. If a variable is defined within a procedure or function, it is visible only in this procedure or function.\n\nTherefore, if two variables with the same name are used in two different procedures in a module and this name is not defined as a global variable, they are two different local variables used for procedures. If a variable is defined as global, any use of its name calls it.\n\nThe only way to create a local variable for a procedure that would have the same name as a global variable is declaring it explicitly using the Var operator.\n\nWhile operator is used for cyclic repetition of operators within Do – EndDo clause. The cycle is running while the logical expression is True. The loop condition is always checked at the beginning before the loop is executed.\n\nOperators following Do are executed while the result of a logical expression is True.\n\nAn executable operator or a sequence of such operators.\n\nIt breaks loop execution at any point. After this operator is executed, control is passed to the operator following the EndDo keyword.\n\nIt passes control immediately to the beginning of the loop where loop conditions are evaluated and checked. Operators following this operator in the loop body are skipped in this iteration.\n\nKeyword that denotes the end of a loop operator structure.\n\nTry operator manages program execution based on error (exceptional) situations and defines how these situations are handled.\n\nExceptions or error situations are module runtime errors. Custom exceptions are not supported.\n\nIf a runtime error occurs while executing a sequence of operators, execution of the operator causing the error stops, and control is passed to the first operator of the exception operator sequence. Control is passed to the operator even if the error was caused by an operator within a procedure or function called from a Try operator. If the error occurred in a procedure or function, it is terminated, and its local variables are destroyed. It applies to any level of nested calls. After the exception operator sequence is executed, control is passed to the operator following the EndTry keyword. If the sequence of Try operators is executed without errors, then the exception operator sequence is skipped, and control is passed to the operator following the EndTry keyword.\n\nTry – Except – EndTry clauses can be nested. If an exception is raised, control is passed to the handler where a Try operator caused the error. If Raise operator is executed in the exception operator sequence of this handler, control is transferred to a higher level exception handler and so on. If there is no exception handler at a higher level, the exception is handled by the system, and the program module is terminated.\n\nBuilt-in ErrorDescription() and ErrorInfo() functions can be useful in troubleshooting (see description of 1C:Enterprise script functions).\n\nAn executable operator or a sequence of such operators.\n\nOperators following the Except keyword are executed if a runtime error occurs while executing a sequence of operators.\n\nAn executable operator or a sequence of operators that process an exception.\n\nThis operator allows you to raise an exception in cases when it is required to shut down a module and generate a runtime error, even though the exception has been processed. It is only allowed within the Except – EndTry clause.\n\nThis operator aborts exception operators and searches for an external exception handler (for nested tries). If such an exception handler is found, control is passed to it. Otherwise the exception is handled by the system, a message about the original error is generated, and the module is terminated.\n\nProcedure keyword identifies the beginning of a source code area that can be called from any point of the program module using ProcedureName() operator with a list of parameters (use round brackets even if no parameters are passed). If an application module or a common program module contains the Export keyword in the body of procedure description, it means that this procedure is accessible from all other configuration modules.\n\nWhen the Return operator is executed, the procedure ends and returns control to the point of call. If procedure text does not contain the Return operator, then an implied Return operator is executed after the last executable operator. The end of the procedure program area is identified by the EndProcedure operator.\n\nVariables declared in the procedure body in Local Variable Declarations area are local variables and therefore they are only available in this procedure (except when they are used as parameters for calling other procedures, functions or methods).\n\nProcedure and EndProcedure keywords are not operators; they are operator brackets. Therefore, they should not end with a semicolon (this may cause module execution errors).\n\nOptional keyword which specifies that the following parameter is passed by value, i. e. changing the formal parameter value does not affect the actual parameter passed during procedure call. If this keyword is not specified, the procedure parameter is passed by reference, i. e. changing the formal parameter value in the procedure will change the actual parameter value.\n\nOptional list of formal parameters separated by commas. Values of formal parameters should correspond to values of actual parameters passed when the procedure is called. This list defines a name for each parameter as it is used in the procedure text. The list of formal parameters can be empty.\n\nOptional setting of default parameter value. You can place parameters with default values anywhere in the list of formal parameters (for more details see section \"Passing Procedure and Function Parameters\").\n\nOptional keyword specifying that this procedure is accessible from other program modules.\n\nIt declares local variables that can be referenced within this procedure only (see Var operator description).\n\nOptional keyword that ends the procedure and returns to the point of the program that called the procedure. This operator is not required.\n\nRequired keyword that identifies the end of the source text of the procedure and ends the procedure. It returns to the point of the program that called the procedure.\n\nWhen removing an event handler a check is executed to make sure that the number of event parameters matches the number of parameters for the method assigned as handler.\n\nAn event for which the handler is removed.\n\nThe event is set in the <Expression>.<EventName> form, where:\n\n <Expression> is any expression in the 1C:Enterprise script. It should result in an object with an event for which the handler is removed.\n\n <EventName> is the event ID (name).\n\nA procedure or function that acts as the event handler.\n\nThe event handler can be a method of 1C:Enterprise script object. Then <EventHandler> is set as <Expression>.<HandlerName> where:\n\n <Expression> is any expression in the 1C:Enterprise script. It should result in an object whose method is used as the event handler.\n\n <HandlerName> is the method name of the event handler.\n\nA procedure or function within the scope can be also set as the event handler. In this case the event handler is specified using the name of this procedure or function.\n\nFunction keyword begins an area in the source text of a function that can be initiated from any point of the program module by specifying FunctionName with a list of parameters (use round brackets, even if no parameters are passed). If an application module or common program module contains Export keyword in the body of function description, it means that this function is accessible from all other configuration modules.\n\nFunction execution should end with the Return operator. The difference between functions and procedures is that functions return a ReturnValue. EndFunction operator identifies the end of the function.\n\nYou can record any function call in the program module as a procedure call, i. e. it is allowed not to accept a return value from a function.\n\nIf the Return keyword is not included in the function body or the module string containing this keyword is not executed, the function returns an Undefined value.\n\nVariables declared in the Local Variable Declarations area of a function body are local for this function and are accessible only in this function (except when they are used as parameters for calling other procedures, functions or methods).\n\nFunction and EndFunction keywords are not operators; they are operator brackets. Therefore, they should not end with a semicolon (this may cause module execution errors).\n\nOptional keyword specifying that the following parameter is passed by value, i.e. changing the value of the function parameter does not influence the actual parameter that is passed during function call. If this keyword is not specified, the procedure parameter is passed by reference, i. e. changing the formal parameter value in the procedure will change the actual parameter value.\n\nOptional list of formal parameters separated by commas. Values of formal parameters should correspond to values of actual parameters passed when the function is called. This list defines a name for each parameter as it is used in the function text. The list of formal parameters can be empty.\n\nOptional setting of default parameter value. You can place parameters with default values anywhere in the list of formal parameters (for more details see section \"Passing Procedure and Function Parameters\").\n\nOptional keyword specifying that this function is accessible from other program modules.\n\nIt declares local variables that can be referenced in this function (see Var operator description).\n\nKeyword that ends the function and returns the specified value into the caller expression.\n\nThe return value can be any expression or variable that has a value containing the function call result.\n\nKeyword that identifies the end of the function source text.\n\nIn addition to point-based calls, the 1C:Enterprise script supports calling object properties using strings with a property name and [] operator (square brackets).\n\nYou can use this construct to call object properties in a way similar to pointbased methods.\n\nString type. The name of the property to be called.\n\nWhen you call objects and forms from external program modules, you can call module variables, procedures and functions, just as you call properties and methods of objects and forms. You can call variables, procedures and functions declared with the Export keyword. You can also call form attributes (for forms).\n\nProcedure and function parameters are passed using two methods. One method is called passing by reference. Rather than passing a specific parameter value, it passes memory addresses (variable references) where this value is located. Any changes in a passed value in the called procedure or function will change the variable being changed in the calling method.\n\nAnother method is called passing by value. This passes a copy of the parameter value. In this case, any changes in a passed value in the called procedure or function will not change the variable being changed in the calling method.\n\nAt the same time, the procedure and function parameter passing process depends on the type of call:\n\n call without transferring control between the client and the server (only on the client or only on the server);\n\n call with control transfer between the client and the server. Let's look at each of the methods in greater detail.\n\n4.7.3.1. Call without Transferring Control from the Client to the Server\n\nIf a call is executed without transferring control between the client and the server (the call is executed only on the client side or only on the server side), by default the parameters are passed by reference. In this case, a change in a formal parameter changes the corresponding actual parameter. You can use the Val modifier before a formal parameter name to specify that the parameter is to be passed by value. In this case, you can't change an actual parameter value by assigning a value to a formal parameter.\n\nHowever, you should note the following: if an aggregate object is passed as a parameter, you cannot assign another value to the actual parameter. But you can modify the passed object. For example, if you pass an array to a procedure by value, you can clear the array using the Clear() method, but you cannot change the parameter value in the calling procedure.\n\nYou also need to consider the specifics of variable storage when calls are implemented:\n\nIn this case you should note that the assignment operation ValueB = ValueA; (in TestProcedure()) will not create a copy of the array in the ValueA variable. Both variables will refer to the same array.\n\nParameters are passed to MyProcedure() by reference, so if you change two formal parameters, one physical array is changed.\n\n4.7.3.2. Call with Transferring Control from the Client to the Server\n\nCalling procedures and functions while you are transferring control between the client and the server are characterized by the fact that, in general, such calls change the computer where the called method is executed. This happens because the client works on one computer and the server works on another. Thus we can't talk about passing parameters by reference, as a single computer can't get direct access to another computer’s memory. In the file server variant, the client and the server represent one computer, but this does not affect interaction logic. So the parameters are passed as follows in client/server interaction:\n\n When control is transferred from the client to a server (and vice versa), parameter copies are always passed. When server procedure or function is called from the client, a copy of an actual parameter is created and transferred to the server side. When control is returned from the server to the client, a copy of an actual parameter (one which was used in the called procedure or function) is also created to transfer it back to the client.\n\n If a formal parameter is specified with the Val modifier, the parameter value will be passed only when a procedure or function is called, but it will not be passed back when control is returned to the client.\n\n If the same real value is specified for several formal parameters, a number of real value copies will be created that equals the number of formal parameters using the value.\n\n If a value of the same variable is specified as formal parameters, then after control is returned from the server this variable value is set as the most proper formal parameter (without the Val modifier) that was changed in the called function.\n\nRemember that a copy of the value is created when parameters are passed to a server. This can help avoid hard to diagnose errors in system operation. Let us consider the following example:\n\nAfter the TestProcedure() call is completed, the variables will have the following states:\n\n The ValueA and ValueB arrays are identical and contain the value \"C\" in the first element and the value \"D\" in the second element, since the ValueB variable refers to an array of the ValueA variable, and values of these variables are not passed to the server.\n\n The Structure variable will hold two arrays:\n\n○ with the values \"0\" and \"1\" for array elements located in structure element with Key1 key;\n\n○ with values \"2\" and \"3\" for array elements located in the structure element with the Key2 key;\n\n○ such behavior is due to the fact that when the procedure is called, a copy is created not only for the parameter itself (the Structure variable), but for all the objects in this structure; two arrays that initially referred to one array with 0 and 1 element values.\n\nIf you specify a default value and if this parameter is last in the list, you can omit it from the list of transferred actual parameters and should not put a comma before this parameter.\n\nIf the parameter does not have a default value, you can omit it in the list of the actual passed parameters when calling a procedure or function, but you should use a comma separator.\n\nIf you omit the parameter when calling the procedure, it is either assigned a default value (if any) or the Undefined value.\n\nYou still have to use round brackets if you do not pass any parameters during the method, procedure or function call (an empty parameter list). Do not pass data from the client to the server (and vice versa) and do not serialize the data with cyclic references. In this case an error will be shown and the session will be terminated.\n\nWhen you pass string values from the client to the server and vice versa, remember that these values should not contain characters that are invalid according to the XML version 1.0 specification (http://www.w3.org/TR/xml/).\n\nYou can perform such validation at server side using the FindDisallo- wedXMLCharacters() function.\n\nSome objects in the 1C:Enterprise script are collections of values. Most collections have similar methods and properties like Count(), Index(), Add(), Delete(), etc. Collection items usually act as collection properties. You can implement cycling through a collection using For each – Of – Do clause. In most collections, items can be called using [<Argument>] operator (square brackets). Usually an index of collection items is passed as an argument. Collection item indexing starts from zero. It means that the index of the last item in the collection equals the total number of items in the collection less 1.\n\nIf collection items are deleted or modified in any way while the collection is cycled through, subsequent system behavior becomes undefined.\n\nSee detailed descriptions of specific objects for more information about specific collections, their properties, methods and use.\n\n4.7.5. Use of Numbers and Indices\n\nSome objects in the 1C:Enterprise script use numbering for their components. Such objects may include a string with numbered characters, a spreadsheet document with numbered rows and columns, etc. To call object components, you can use Numbers. Numbering always starts from 1.\n\nTo call collection items, you can use Indices. Indexing of collection items always starts from 0.\n\nThe 1C:Enterprise script uses a concept of system enumerations. These enumerations define specific sets of predefined values. System enumerations are accessed as global context properties of a name. Specific values are separated from the system enumeration name by a period. System enumerations are generally used to set values for system method parameters or object properties and as returnable method values.\n\nPredefined value can be retrieved at the 1C:Enterprise server side by using manager of the corresponding object. A string that defines the attribute to be obtained looks like the following:\n\nConsider string components in more detail:\n\n PredefinedValueType – the following data types can be specified (in their plural forms) to obtain predefined values:\n\n MetadataObjectName – specify a metadata object name as it is set in the Designer.\n\n Value – it can be one of the following:\n\n○ enumeration value name for enumerations\n\n○ name of predefined value to be obtained as it is set in the Designer\n\nIf you want to obtain a route point for a business process, the string describing the value to be obtained will look like the following:\n\nSince application objects are unavailable at the client side, predefined attributes cannot be retrieved using object manager. Therefore, a global context method, PredefinedValue(), is used instead. This method uses a string that describes the predefined value to be retrieved as its parameter. To describe the predefined value, use syntax of the query language VALUE operator (see page 1-443). The string that defines the attribute to be obtained looks like the following:\n\nConsider string components in more detail:\n\n PredefinedValueType – the following data types can be specified (in their singular forms) to obtain predefined values:\n\n MetadataObjectName – specify a metadata object name as it is set in the Designer.\n\n Value – it can be one of the following:\n\n○ enumeration value name for enumerations\n\n○ name of predefined value to be obtained as it is set in the Designer ○ RoutePoint.PointName – point in the business process route ○ EmptyRef, if you want to retrieve an empty reference.\n\nIf you want to retrieve a route point for a business process, the string describing the value to be obtained will look like the following:\n\nIf you need to get the system enumeration value, the method parameter will appear as follows: SystemEnumerationName.SystemEnumerationValue.\n\nThe 1C:Enterprise system can be used in its file mode or client/server mode or as an external connection and Web services (see page 2-819).\n\nThe Designer can be used to configure procedures and functions of common modules and object modules for each of the versions.\n\nUse preprocessor instructions and compiler directives to allow use of procedures and functions from various modules (for information about module types see page 1-115).\n\nPreprocessor instructions and compiler directives are used to leave the compiled module with components that are required in a particular context. However, preprocessor instructions affect module source text (i.e. remove invalid text from the module), while compiler directives affect building blocks of the code (i.e. methods including procedures and functions as well as variable declarations).\n\nIn practice all program modules in the system can be grouped into two major categories:\n\n Modules that exist (and run) in a particular context; e.g., a managed application module can only run at the client side (thin or web client).\n\n Modules that exist (and run) in multiple contexts. These include managed form modules, command modules and common modules. For example, a managed form module can have up to 4 instances, each of them gaining control in the process of operation: ○ client-side context module\n\nCommand modules and common modules cannot have context-dependent instances (unlike form modules). Therefore, certain modules can be compiled multiple times depending on whether the module contains code fragments that can run in a particular context.\n\nLet us review what impact compiler directives and preprocessor instructions have on the source module code while it is being converted to executable code.\n\nConsider a managed form module as an example.\n\nWhen you create a form, it generates 4 module instances and runs all the required preprocessor instructions for each instance. Then each module instance is processed to remove the text enclosed within preprocessor instructions.\n\nThe resulting code is compiled in accordance with the context and compiler directives. This creates an executable module.\n\nAssume the form module source code contains the following construct:\n\nThe following is performed:\n\n This procedure is compiled at any client (as the compilation directive goes).\n\n At the same time preprocessor instructions define what text is left in the module (i.e. compiled) at what client. In this example the web client will only have program code 1 available, while other clients will have program code 2 available.\n\nHowever, if the form module uses the following code:\n\nThe following is performed:\n\n Source text of the procedure is stored at the server, but is not compiled as the &AtClient compiler directive prevents the procedure from being used at the server side.\n\n The client does not even store the source code of the procedure as it is removed by the preprocessor instruction, i.e. it is neither compiled nor available for calling.\n\nThe above procedure explains interaction between directives and instructions as well as their combined application.\n\nPlease note that methods marked with &AtClientAtServerNoContext and &AtClientAtServer directives in the program module are included simultaneously in different instances of program modules.\n\nPreprocessor instructions have the following syntax:\n\nBelow you can see a list of preprocessor instructions with a brief description:\n\n MobileAppClient – defines the client part of the mobile application.\n\n MobileAppServer – defines the server part of the mobile application.\n\nThe table below specifies preprocessor instructions defined in various 1C:Enterprise operation modes:\n\nIf you are using a non-global common module that is set to be used at any client and at server, then methods enclosed in #If Server Then #EndIf are only available if they are called at the server side. You cannot call these methods at the client side.\n\nClient and AtClient instructions are also identical.\n\nBefore a program module is passed to a thin or web client, the server processes preprocessor instruction in the module. Code in the 1C:Enterprise script that is not executed at the client side is replaced with white spaces (i.e. removed). However, line break and tab characters are retained.\n\nCompiler directives have the following syntax.\n\nFor a detailed description of language constructs see page 1-128.\n\nBelow you can see a list of compiler directives with a brief description:\n\n AtClient – method is executed at the client side in a form context.\n\nA variable lives as long as the client-side form.\n\nYou can access client variables of the form module from the method. You are allowed to call any methods.\n\n AtServer – method is executed at the server side in a form context.\n\nLifetime of a variable lasts as long as server call execution.\n\nYou can access server variables of the form module from the method.\n\nYou are allowed to call:\n\n AtServerNoContext – method is executed at the server outside the form context.\n\nVariables cannot be preceded by this compilation directive.\n\nYou cannot access variables of the form module from the method.\n\nYou are allowed to call:\n\n AtClientAtServerNoContext – method is executed both at the client and at the server, outside the form context.\n\nVariables cannot be preceded by this compilation directive.\n\nYou cannot access variables of the form module from the method.\n\nYou are allowed to call:\n\n○ methods of non-global common modules with Server and Client (managed application) check boxes\n\n AtClientAtServer – method is executed both at the client and at the server.\n\nVariables cannot be preceded by this compilation directive.\n\nYou are allowed to call:\n\n○ methods of non-global common modules with Server and Client\n\n Region, EndOfRegion – should not be used to specify script code execution location. These directives can be used to highlight a text fragment that can be collapsed (similarly to procedures, functions, etc.). For further information, please see page 2-945.\n\nThe table below demonstrates compiler directives available in various 1C:Enterprise modules:\n\n4.8.2. Use of Objects, Their Properties and Methods\n\nEvery object, method or property in the 1C:Enterprise script (referred to as \"object\" in this section) is characterized by accessibility level (see Syntax Assistant) that defines where it can be used. Additionally the Syntax Assistant specifies auxiliary data that can be useful to the developer.\n\nThin client – specifies that the object is available at the thin client.\n\nWeb-client – specifies that the object is available at the web client.\n\nServer – specifies that the object is available at the 1C:Enterprise server.\n\nExternal connection – specifies that the object is available in external connection mode.\n\nThick client – specifies that the object is available at the thick client.\n\nMobile application (client) – specifies that the object is available in the client section of the mobile platform.\n\nMobile application (server) – specifies that the object is available on the server side of the mobile platform.\n\nIf you specify that an object is unavailable in one of run modes, its properties and methods are also unavailable. Therefore, it is not mentioned specifically at the property and method description step.\n\nIf an object is unavailable in a client application, the type of this object is also unavailable in this client application. For instance, if object CatalogObject.Contractors is unavailable within a thin client, Type(\"CatalogObject.Contractors\") is also unavailable in a thin client.\n\nSerializable. It specifies object values can be saved (e.g., parameters of report and data processor forms can be saved using SaveValue() and ValueToFile() methods) and placed into ValueStorage.\n\nThe given object may be serialized to/from XML. It specifies 1C:Enterprise data values can be read/written from/to XML. For details see page 2-745.\n\nExchange with server is possible. It specifies values of this type can be exchanged between the client and the server.\n\nIn the managed run mode, exchange between the client and the server is allowed for objects which support XDTO serialization.\n\nThe given object may be serialized to/from XDTO. It specifies that this type can be mapped to XDTO data model. It also sets a fully qualified name (namespace URI and type name) for a type to which this type is mapped. For example, for the ValueStorage type it is {http://v8.1c.ru/8/data/core}ValueStorage.\n\nThe Syntax Assistant includes information about caching the results of some 1C:Enterprise methods. For example, the following information will be specified for the global context method PredefinedValue(): Execution result is cached on first call till the configuration or platform version is changed."
    },
    {
        "link": "https://yellow-erp.com/page/guides/dev/configuration-objects",
        "document": "This chapter contains instructions for working with the entire configuration and describes modes and mechanisms that are used for all configuration objects.\n\nCreation and setup of the main configuration objects (constants, catalogs, documents, sequences, logs, enumerations, reports, data processors and registers) and some other objects located in the Common configuration branch (filter criteria and styles) are described in the documentation using an example of the object editing window (see page 59 for more details). The same can be done using the object properties palette.\n\nConfiguration as a whole has its own editable properties. The properties palette opens for the root of the configuration tree.\n\nIn addition to the general properties available for each configuration object (see page 250), the configuration also has features described below.\n\nDefault run mode – selects a default run mode for the system (Managed application or Ordinary application). A new configuration always has this property set to Managed application. The run mode can be modified for a system user (see \"1C:Enterprise 8.3. Administrator Guide\"). This property cannot be changed if the Compatibility mode property is set to Version 8.1.\n\nUse purposes – specifies the purpose for which an application is used (Mobile device or Personal computer). The property is only available if the Default run mode property is set to Managed application. The available configuration functions change depending on the selected purpose.\n\n Mobile device – supports development of an application for use on a mobile device (for further details, see page 2-917). A limited number of application objects is available to the developer (for a list of limitations, see page 2-1247);\n\n Personal computer – supports development of an application that cannot be used on a mobile device and functions as a managed application;\n\n Both options are selected (Mobile device and Personal computer) – supports development of an application that would contain objects available both on a mobile device and within a managed application on a desktop computer. Please note the following:\n\n If Personal computer is not mentioned in the purpose of use:\n\n○ The default run mode cannot be changed.\n\n○ Properties that are not used on a mobile platform are unavailable in the properties palette (see page 1-53).\n\n○ Only those types of objects available on a mobile platform can be used as types of attributes.\n\n If configuration purposes contain the option Mobile application:\n\n○ The module check uses settings for the Mobile application mode. By default, this mode is prompted to change when the settings are edited.\n\n○ The configuration check uses a separately stored setting for the executed procedures.\n\n○ The Syntax assistant uses a separately stored setting for the applied filters.\n\nScript variant – selects the default programming language (Russian or English). The selection defines which language is used to generate language constructs in modules (for example, when using the Syntax Assistant) and display information about primitive data types. Either the Russian or the English version of language constructs can be used regardless of the value of this property. When you change the value, the language of already entered language constructs does not change.\n\nDefault Role – selects the default role of the configuration. The role specified here will be used if the configuration user list is empty and access authorization is not performed when the program is launched. In this case it is assumed that user has administrative permissions regardless of the actual Administration right setting in the role specified as the default role. If the configuration default role is not specified and the user list is empty, the user will work without access right restrictions. Roles are specified in the Common – Roles branch of the configuration tree (see page 1-180).\n\nThe default run mode should match the default role as far as rights to the applications launched are concerned. For instance, if Default run mode is set to Managed application, and the right Thin client is disabled for the main role, the user will not be able to work with application with a thin client.\n\nManaged application module – click the Open link to open the editing window for the managed application module (see page 1-171).\n\nSession Module – click the Open link to open the session module editing window (see page 1-172).\n\nExternal Connection Module – click the Open link to open the application module editing window (see page 1-172).\n\nUse managed forms in ordinary application – specifies that managed forms need to be used in the ordinary application mode of the thick client. Selecting this check box changes rules of form selection in the thick client (for details see page 1-263) and rules of centralized configuration check (for details see page 2-1025).\n\nThis property is only available if the configuration editing mode is set to Managed application and ordinary application.\n\nUse ordinary forms in managed application – specifies that ordinary forms need to be used in the managed application mode of the thick client. Selecting this check box changes rules of form selection in the thick client (for details see page 1-263) and rules of centralized configuration check (for details see page 2-1025).\n\nThis property is only available if the configuration editing mode is set to Managed application and ordinary application.\n\nAdditional full-text search dictionaries – selects common templates or constants to be used as additional full-text search dictionaries (see page 2-839).\n\nCommon settings storage – storage is used to store various application settings. The platform does not write any settings to the storage independently. The developer should use the storage indicated in this property in the 1C:Enterprise script to save or restore user application settings.\n\nForm data settings storage – storage contains form data. You can use this storage to save data processor attributes, for example. Please note that you can select a different storage for each report or data processor.\n\nDynamic list user settings storage – this is the storage to store dynamic list settings.\n\nFor more details on storages and how they work see page 1-223.\n\nCommand interface – click Open to open an editor to specify viewability of default subsystems on the start page (also from the perspective role).\n\nStart page working area – click Open to open a setup form to specify which forms are placed on the start page and what template will be used to create a work area.\n\nMain section command interface – click Open to open a command interface setup dialog for the main section.\n\nMain section picture – this property can be used to change the picture of the main section on the sections panel.\n\nClient application interface – is used to setup the default panel layout for the Taxi interface. The interface will change to this if a user clicks Default in the panel editor (see page 1-108).\n\nDefault Language – specify default language for the configuration.\n\nBrief Information – brief information on the configuration.\n\nLogo – select a logo. Make your selection in the standard picture selection window:\n\nA logo must be 64x64 pixels or smaller. Picture type may be any of those supported by the 1C:Enterprise system.\n\nSplash – use this option to select a splash. A splash is selected in the standard picture selection window. The picture to be used as a splash must be 600x255 pixels. Transparency is not supported.\n\nThe splash screen picture must meet the following requirements: 305x110 pixels in size; you can set transparent color when selecting the picture. Picture type may be any of those supported by the 1C:Enterprise system.\n\nVendor information address – link to the information about the configuration vendor (specified in the Copyright property). The address can be set with a schema prefix (http://) or without it.\n\nConfiguration information address – link to information about the configuration. The address can be set with a schema prefix (http://) or without it. The About 1C:Enterprise window displays the following data: configuration Synonym, Configuration information address property, Copyright property and Vendor information address property.\n\nDefault Constants Form – select the default form for input and editing of constants in the configuration. This form is selected from among the common forms (see page 1-229) in Common – Common forms. For details on the various forms, see page 1-263.\n\nThis property is only available if the configuration editing mode is set to Managed application and ordinary application.\n\nThe Default report form, Default report settings form and Default report variant form properties can be used to specify the default forms that will be used by reports without the corresponding form being specified. For example, you can create a default report form containing some features that should be present in all application forms, such as sending the report generated by e-mail. To solve such a task, you need to create a default report form, implement all the necessary commands and specify it in the Default report form configuration property. After this action all reports for which a default report form is not specified will use the default form you created.\n\nDefault dynamic list settings form specifies a general form to be used to edit the dynamic list settings in the application. If this property is not set, an automatically generated settings form will be used to edit the dynamic list settings.\n\nThe property Default search form specifies a general form to be used instead of a system form for a full text search, which can be called in the Taxi interface from the toolbar or through a keyboard shortcut.\n\nProperties in this category describe data on configuration vendor and version (for details see page 2-1122).\n\nUpdate directory address – contains address of a resource that can be used to update the application solution.\n\nInclude in Help Content – if this property is set, help content is included in the general description of the configuration.\n\nHelp content – click Open to open the configuration description editing window.\n\nData lock control mode – option of controlling data locks in a transaction (see page 1-509).\n\nObjects Autonumbering Mode – defines whether automatically assigned object numbers can be re-used if they are not stored in the database.\n\nThis property can be set to Release Automatically to ensure numbering works in the same way as in 1C:Enterprise 8.0. Automatically assigned numbers and codes are re-used later if the object they are assigned to is not recorded.\n\nYou can set Do not Release Automatically for this property if you want objects requiring continuous numbering to be assigned numbers upon recording rather than opening a form.\n\nModality usage mode – specifies whether methods to open modal windows can be used in the application. If the property is set to Use, modal windows can be used with no limitations. If the property is set to Do not use, modal windows cannot be used in this application. If an attempt is made to use such modes, an error will be diagnosed (also during the script text syntax control). Use blocking windows instead of the modal ones (see page 1-426). If the property is set to Use with warnings, no error will be diagnosed during the attempt to use modal windows, but a message box will display a message that use of modal windows is prohibited in this mode. Use of blocking windows instead of modal ones is likewise recommended in this mode.\n\n Version 8.2 – the client application uses interface version 8.2. Switching to the Taxi interface is not supported.\n\n Version 8.2. Taxi allowed – interface version 8.2 is used by default. The user can switch to the Taxi interface via the parameters dialog, the ClientSettings object, or the command bar.\n\n Taxi. Version 8.2 allowed – Taxi interface is used by default. The user can switch to interface version 8.2 via the parameters dialog, the ClientSettings object, or the command bar.\n\n Taxi – the client application works in the Taxi interface. Switching to interface version 8.2 is not supported.\n\nIf interface version 8.2 is used, the system supports switching between the interface in separate windows and between this interface in tabs.\n\nIf Compatibility mode is set to a value that exceeds Version 8.3.2 (None, Version 8.3.3, or a later version), and property Interface compatibility mode is set to Version 8.2 or Version 8.2. Taxi allowed, a tabbed interface will automatically be set for any new users of the application.\n\nPicture PictureLib.Help displays differently if the Interface compatibility mode property is set to Taxi or Taxi. Version 8.2 allowed and in other cases.\n\nCompatibility mode – this property controls the behavior of mechanisms that have been changed in a new version if compared with theprevious one. This property can have the following values: Version 8.3.2, Version 8.3.1, Version 8.2.16, Version 8.2.13, Version 8.1 and None. See page 2-1214 for details of the system’s work with any version in compatibility mode.\n\nConfiguration operations with an unknown compatibility mode are not supported. Unknown compatibility modes are modes which are compatible with the functionality implemented in later 1C:Enterprise versions. For example, if the None compatibility mode is set in version 8.3.1, it will be regarded as unknown when the configuration is open in version 8.2.16. And if the Version 8.2.16 compatibility mode is set in version 8.3.1, then it will be displayed as None in version 8.2.16. If no new compatibility mode is set in any particular version, the behavior of the None mode will be the same as in the previous version. When you attempt to run or restore the configuration with an unknown compatibility mode, an error message will be returned indicating the version required. Restoration of 1cv8. dt files generated in version 8.3.1 and later is not permitted in later versions of 1C:Enterprise (older than 8.3.1), except where the Compatibility mode configuration property is set to Version 8.2.16 in version 8.3.1.\n\nWhen configurations of 1C:Enterprise 8.1 (or older versions) are converted, the property will have the Version 8.1 value. Generally speaking, when you open a configuration of any later versions of 1C:Enterprise, the Compatibility mode property will be set to a value compatible with the previous version if such a mode is selected in the new version.\n\nIf you want to ensure that the application solution operates in multiple versions of 1C:Enterprise simultaneously (including versions for which a compatibility mode is available), it is recommended first to obtain the current platform version in different locations from where the code will be called, and then compare it with the compatibility mode (if necessary).\n\nIf the infobase was opened using version 8.2.14 you can transit to version 8.2.13 only if the configuration did not use new features of version 8.2.14. For a file mode variant, migration from version 8.2.14 to version 8.2.13 is performed with infobase download/upload.\n\nA managed application module launches automatically when a configuration is loaded during 1C:Enterprise startup in the following modes.\n\nThe managed application module is used for processing tasks related to the user session (primarily for processing session start and end events). The managed application module is inaccessible to procedures working on the server. We recommend using it to implement event handlers only.\n\nProcedures and functions of the managed application module, along with its variables that have the Export keyword in their titles, can be accessed in:\n\nIn managed application module context you can use exported procedures and functions of common modules.\n\nThe managed application module is a component of the configuration and is stored only in the configuration. The File – Save command launches the procedure of saving changes for the entire configuration.\n\nExternal connection module may contain exported variables, procedures and functions as well as handler procedures for OnStart() and OnExit() events used in external connection mode (see section \"Integration and Administration Tools\" in the 1C:Enterprise script help).\n\nSession module runs automatically when the configuration is loaded during 1C:Enterprise system startup.\n\nThe session module is used to initialize session parameters and process sessionrelated actions. The session module is always performed in privileged mode in the 1C:Enterprise server cluster.\n\nSession modules can only contain definitions of functions and procedures.\n\nIt cannot contain exported procedures or functions. It can use procedures from the configuration common modules.\n\nSession parameters are set in the SessionParametersSetting() event handler.\n\nThe session module is executed after the application module (external connection module) is launched, but before calling the BeforeStart event handler (OnStart, for the external connection module).\n\nThis section describes configuration objects, such as Subsystems, Common modules, Session parameters, Roles, Common attributes, Exchange plans, Filter, Event subscription, Scheduled jobs, Functional options, Functional options parameters, Defined types, Settings storages, Common forms, Common commands, Command groups, Interfaces, Common templates, Common pictures, XDTO packages, Web-services, WS-references, Style items, Styles and Languages. These objects do not describe data structure and data processing mechanisms. They are used to set rules for working with data, to describe supplementary objects used\n\nfor making different forms in the data exchange mechanism and they also contain common modules and templates of print forms accessible from any configuration module.\n\nFor a description of subsystem purposes see page 1-343.\n\nSetting Desktop as a subsystem name is not recommended.\n\nThe number and nesting levels of objects at the Subsystems branch are unlimited.\n\nTo view configuration objects for a specified set of subsystems, you can set an object filter in the Configuration window. Select Actions – By Subsystems in the Configuration window and specify a required set of subsystems, then set additional filter criteria, Include objects from subordinate subsystems and Include objects from parent subsystems.\n\nThe subsystem list contains a special item, <Not included in subsystems>, which you can use to select only those objects that do not belong to any subsystem.\n\nWhen filtering by subsystems is set, key configuration object tree branches without filtered objects are not shown.\n\nThe user interface defines whether configuration objects belong to a particular subsystem.\n\nThe Subsystems configuration object property value can be accessed in the program using the 1C:Enterprise script tools. This provides additional options for data filtering.\n\nThe Move subsystem command in the context menu can be used to change subsystem subordination in subsystem hierarchy.\n\nUse the Content tab in the subsystem editor to bind metadata objects to a particular subsystem.\n\nThe upper part of the window displays all configuration objects that can be assigned to individual subsystems. Placing a checkmark next to an object (e.g., Contractors on fig. 63) means that this object is included into the subsystem and is displayed in the lower part of the window. You can see all objects belonging to the subsystem being edited at the bottom of the window.\n\nIf the Include in Help Contents property is set, the help contents will include the branch showing help for the subsystem and all objects included in the subsystem. If the property is reset, the help contents will not contain such a branch (describing the subsystem and included objects), but help for the objects included in the subsystem will be available directly in object forms.\n\nObjects in the Common modules configuration branch are used for storing texts of functions and procedures that may be called from any other configuration module.\n\nA common module can contain definitions of functions and procedures only.\n\nProcedures and functions of the common module that have the Export keyword in their titles belong to the global context. Detailed information on writing procedures in a common module can be found in sections \"Source Text Format in Program Modules\" and \"Operators\" of the 1C:Enterprise script help.\n\nTo edit a common module, click Open in the Module property at the properties palette of Common Modules object type in the Configuration window. Text of the common module is opened in the 1C:Enterprise text editor in module text editing mode.\n\nA common module is a component of the configuration and is stored in the configuration only.\n\nThe Global property defines if the common module exported methods belong to the global context.\n\nIf the Global property is set to True, the common module exported methods are available as methods of the global context.\n\nIf the Global property is set to False, a property is created in the global context and its name matches the common module name in the metadata. This property is read-only. Value of this property is the CommonModule object. Through this object, exported methods of this common module are exposed. Therefore, syntax for calling a non-global common module method looks like XXXXX.YYYYY where XXXXX is the property name in the common module context and YYYYY is the name of the common module exported method.\n\nUsing properties of common modules and preprocessor instructions, you can arrange execution of various common module methods in the right context.\n\nEach property of a common module is responsible for compilation (and execution) of this common module in a particular context.\n\nYou can use the following properties that are responsible for the context where common module methods are available:\n\n Client (ordinary application) – common module methods are only available for the thick client in the ordinary application mode;\n\n Client (managed application) – common module methods are available for the thin client, web client and thick client in the managed application mode;\n\n Server – common module methods are available at the server;\n\n External connection – common module methods are available in an external connection.\n\nIf multiple properties are set simultaneously, it means common module methods are available in multiple contexts.\n\nIf a common module has its Server property set along with another property, it means this module is available at the server and the selected client. You should keep in mind that you would have multiple variants of compiled code (for the selected clients and the server).\n\nIf a method located in this common module is called by the client, it uses the client copy of the module; if called by the server, it uses the server copy. In this case you can use preprocessor directives (for details see page 1-159) to \"protect\" the server from the code it cannot execute.\n\nConsider the following example. A common module that can run at both the thin client and the server owns a method which behaves differently depending on where it is executed: the thin client or the server. Consider how you can handle this:\n\nThe server-side code looks like the following:\n\nThe code on the thin client side looks like the following:\n\nYou can use different methods to transfer control from the client to the server:\n\n in the form or command module, call a method preceded by compiler directives &AtServer, &AtServerNoContext (for details on form modules see page 1-390).\n\nPlease note that server procedures do not support calls to methods of client common module (without their Server property set) or to client methods of form and command modules. Control is transferred back to the client after the most external call to a server method is complete.\n\nThis does not apply to form and command module methods preceded by compiler directives &AtClientAtServer, &AtClientAtServerNoContext (for details see page 1-390).\n\nPlease keep in mind the following points:\n\n While writing code for a common module that is available to multiple clients, you should consider maximum limits which might be imposed by clients or use preprocessor instructions to \"isolate\" client-specific code.\n\n Preprocessor instructions are also useful if a common module has multiple execution contexts, e.g., an external connection and a thin client or a client and a server (as is often the case). In this case preprocessor instructions enclose interactive code that cannot run at the server and can be executed at the client (see the example above).\n\nFor details on preprocessor instructions and compiler directives see page \"Use preprocessor instructions and compiler directives to allow use of procedures and functions from various modules (for information about module types see page 1-115).\" on page 1-177 and section \"Execution of Procedures and Functions\" in the 1C:Enterprise script help.\n\nTo control calls to exported methods of the server-side common module in the client code, use the Server call property. If this property is set, exported methods of the server-side common module can be called by the client. If this property is not set, you can only call exported methods from server-side methods (both methods of server-side common modules and server methods of form and command modules).\n\nIt is recommended to set the Server call property to False if the server-side common module contains methods that are not recommended to be called by the client (e.g., for safety reasons).\n\nIf the Client (ordinary application), Client (managed application), External connection properties are set simultaneously, the Server call property is cleared automatically. If the Server call property is set, the Client (ordinary application), Client (managed application) and External connection properties are automatically cleared, provided that they were set simultaneously.\n\nThe Privileged property can be used to disable control over access rights when executing common module methods.\n\nIf the Privileged property is set for the common module, its Server property is set automatically and other properties are cleared (Client (ordinary application), Client\n\n(managed application) and External connection). The privileged common module can only be executed at the server.\n\nFor details on the privileged mode see page 1-181.\n\nIf a common module is not global, its Reuse return values property becomes available. This property can have the following values:\n\n Do not use – return values for common module functions are not reused;\n\n During call and During session – method of data reuse definition is used for the common module. The essence of this method is that the system stores function parameters and execution results after the first call. Next time the function is called with the same parameters, the stored value (from the first call) is returned without the function being executed. If parameter values are changed during execution, this method is not used upon the next call of the function.\n\nStoring call results is characterized by the following:\n\n if a function is executed on the server and is called from the server code, parameter values and call results are stored for the current session on the server side;\n\n if a function is executed on a thick or thin client, parameter values and call results are stored on the client side;\n\n if a function is executed on the server, but is called from the client code, parameter values and call results are stored both on the server side and on the client side.\n\n If the property is set to During call:\n\n○ on the server side – when control is returned from the server;\n\n○ on the client side – upon completing execution of a procedure or function of the 1C:Enterprise script (called by the system from the interface rather than another procedure or function of the 1C:Enterprise script).\n\n If the common module property is set to During session:\n\n○ on the server side – when the session is finished;\n\n○ on the client side – when the client application is closed.\n\n at the server, thick client, external connection, thin client and web client with regular connection speed – 20 min. after the stored value is evaluated or 6 min. after its last use;\n\n at the thin client and web client with low connection speed – 20 min. after the stored value is evaluated;\n\n if there is not enough RAM in a server working process;\n\n if a client is switched to another working process.\n\nIf values are deleted, an export function is called identically to the first call.\n\nThis common module property does not affect procedure execution: procedures are always executed.\n\nIf return values reuse is set for a common module, the list of export function parameter types becomes limited. Parameters can only be of the following types:\n\n Structures with property values of the above types. In this case parameter identity is controlled based on structure content.\n\nIf the Reuse return values property is set to During session in the common module, values returned by functions of this module can't use TempTablesManager type values.\n\nWhere the function of a common module with the reuse option selected is called from the same common module (e.g. named CommonModule), it should be remembered that if the function is called by the MyFunction() name, the function will be executed every time the function is called. To make use of saved values, the function should be called by its full name: CommonModule.MyFunction().\n\nRefreshValuesReuse() global context method removes all reused values both at the server side and at the client side, regardless of the method call location. After the RefreshValuesReuse() method is executed, the first function call is executed afresh.\n\nSession parameters are mainly used in queries and conditions of data access restriction for the current session.\n\nYou can set session parameters using the properties palette.\n\nEach session parameter may have two access rights: Get and Set (see below for details on access rights). If the Set right is removed, session parameter may be initialized only in a common module with the Privileged property set or in a session module.\n\nSession parameters are initialized in the SessionParametersSetting() event handler of the session module (see page 1-172).\n\nPrior to initialization, the session parameter is in Not Set state. An attempt to read this parameter calls the SessionParametersSetting() event handler first. If after the call the parameter is still Not Set, it raises an exception.\n\nYou should be able to discriminate between applications of session parameters and global variables of a managed application module (external connection module). The main differences of session parameters include:\n\n Session parameters are metadata objects, meaning that 1C:Enterprise can exercise a tighter control over their use.\n\n Session parameters are typed. A list of session parameter types is limited. Their common feature is inability to modify the inner state for objects of these types.\n\n To set or get a value for a session parameter, the current user should have sufficient rights.\n\n In the client/server mode, session parameter values are stored at the 1C:Enterprise server and are available from both the server and the client.\n\n Session parameters are available both in the 1C:Enterprise script, for example:\n\nand access restrictions, for example:\n\nIn the latter case getting a session parameter value does not require the current user to have corresponding rights.\n\nIf one of the following types is set for the session parameter: FixedArray, FixedCollection or FixedStructure, the Undefined value can be used as a collection element value.\n\nEach user of the system should have free access to common information, e.g., common catalogs, constants or enumerations.\n\nOn the other hand, each user must have access only to the information they need in their work, and their careless actions must not affect work of other users or operability of the system as a whole.\n\nThe 1C:Enterprise Designer provides developers with advanced administration tools that can resolve this issue.\n\nThe required number of typical roles is created together with configuration. Roles describe rights of various user categories to access information handled by the system. You can assign a wide range of roles – from ability only to view a limited number of document types to a full set of rights to enter, view, update and delete any type of data.\n\nThere are two types of access rights in 1C:Enterprise – basic rights and interactive rights. Basic rights are always checked regardless of how infobase objects are accessed. Interactive rights are checked whenever interactive activities are performed (viewing/editing forms etc.) For available access rights see page 2-1209 (or a description of the AccessRight() global context method in the Syntax Assistant).\n\nIf the View right is set (granted) for an object with data in a form, but the Edit right is not set, this attribute is displayed in the form (with the attribute value displayed in the control associated with this object), but the value is unavailable for editing. If the View right is removed (withdrawn), an attempt to open the form displays an \"Access violation!\" warning, and the form fails to open.\n\nWhen editing roles, note the internal right hierarchy in the list of rights. The hierarchy is based on the precedence of the rights. When any right is removed, every lower-level right associated with it is also removed and, conversely, when a lower-level right is set, any higher-level rights removed are also set. So removing the View right causes the Edit right to be removed. This is quite reasonable since it does not make sense to grant an edit right when a control associated with the data cannot be shown. Generally, rights can be granted for:\n\nWhen a new role is created, the following access rights are set for the configuration root object: ThinClient, WebClient, UserDataStorage and Output.\n\nCode fragments can run in ordinary or privileged mode at the 1C:Enterprise server. The privileged mode does not require an access check at the record level or a rights check and allows any operation, thus accelerating module execution.\n\nYou can manage the privileged mode, i.e. enable or disable it, using the SetPrivilegedMode() global context method.\n\nIn the client/server mode calling this method has no impact if you work at the client side.\n\nThe privileged mode is disabled by default.\n\nThe privileged mode should be enabled as many times as it is disabled. However, if the privileged mode was enabled within a procedure or a function (once or multiple times) and was not later disabled, the system disables it automatically as many times as it was enabled in the procedure or function without being disabled.\n\nIf a procedure or function calls the SetPrivilegedMode(False) method more often than it calls the SetPrivilegedMode(True) method, an exception is raised.\n\nThe PrivilegedMode() function returns True if the mode is on and False if it is completely off. It does not count how many times the privileged mode has been enabled in a particular function.\n\nYou might need to set the privileged mode programmatically if you perform mass operations with infobase data and do not need to check data access rights. Assume a user is responsible for recalculation of product prices. In this case the data processor that performs this operation can check the right of the current user to run it, and then the privileged mode can be enabled to perform all the required actions in the database. The user might have no rights to view the prices. However, since this data processor only recalculates the prices without showing them to the user, the task of access restriction is also performed.\n\nYou can also start a privileged session. In this session, a privileged mode is set from the very start of work. During operation, mode PrivilegedMode() will always return True, and disabling the privileged mode is not supported. To start a privileged mode, the user shall be assigned administrative rights (Administration rights). To launch a session, use the UsePrivilegedMode key of the client application launch command line, or the prmod parameter of the line used to connect to an infobase.\n\nIf you need to use unsafe code at the server, e.g., external data processors or code entered by the user in Execute() and Evaluate() methods, you can use the safe mode.\n\n Transition to privileged mode is ignored.\n\n Operations using tools that are external relative to the 1C:Enterprise platform are not allowed:\n\n□ New Picture(), if the first parameter is a string\n\nWhen forbidden operations are performed at run time, an exception is raised.\n\nExternal reports and data processors opened using File – Open are executed in the safe mode if the user has no administrative access rights.\n\nThe safe mode should be enabled as many times as it is disabled. However, if the safe mode was enabled within a procedure or a function (once or multiple times) and was not later disabled, the system disables it automatically as many times as it was enabled in the procedure or function without being disabled.\n\nIf a procedure or function calls the SetSafeMode(False) method more often than it calls the SetSafeMode(True)method, an exception is raised.\n\nThe configuration developer might need to set the safe mode programmatically if he or she intends to use code that is external relative to the configuration and is not absolutely reliable. An example would be execution of Execute() and Evaluate() methods when executable code comes from outside the system. In this case setting the safe mode before executing these methods would be a good practice.\n\nThe 1C:Enterprise system enables users to delete unnecessary or obsolete information in two modes:\n\n direct deletion of objects when use of deleted objects in other database objects is not analyzed;\n\n reference integrity control enabled when objects are first marked for deletion and then checked for being referenced by other objects.\n\nIf the user has the right to use direct deletion mode, additional responsibility is laid both on the user that deletes the objects and on the system administrator who determines user rights and system operation with unresolved references. For example, specialists debugging the configuration can use system operation without reference integrity control. If reference integrity control is not used, objects are deleted directly (without deletion marks) and unresolved references can appear.\n\nThe most radical method of setting the reference integrity control mode is fully disabling the right to directly delete entire objects. This method prevents any direct deletion of objects within a given configuration. Users are only able to mark objects for deletion.\n\nPlease note that you can directly delete objects using the 1C:Enterprise script tools. Therefore, items of a specific configuration can directly delete objects bypassing reference integrity control. In this case a specialist who configures the system is responsible for data integrity.\n\nRoles are usually specified for each activity. When a new user is added to the user list (see \"1C:Enterprise 8.3. Administrator Guide\"), a certain role or a set of roles is assigned to this user. If the user has multiple roles, the access algorithm for each object and right (e.g., Interactive Mark for Deletion) works as follows:  if any of the roles has permission, access is granted;  if no roles have permission, access is denied.\n\nThe left part of the rights editing window contains a configuration object tree for all subsystems. The right part of the same window displays a list of rights for the selected configuration object. If an action is checked, it is allowed.\n\nThus, a user with the Salesperson role can view a GoodsReceipt document, but cannot add it interactively (see fig. 64).\n\nThe Set rights for new objects check box defines whether a certain role has rights for newly added configuration objects (it is cleared by default for a new role).\n\nThe Set rights for attributes and tabular sections by default check box defines whether this role has rights for attributes (including standard attributes) and tabular sections (including standard tabular sections) of new configuration objects (it is selected by default).\n\nWhen you change the status of the Set rights for attributes and tabular sections by default check box, the system prompts you to change (select or clear) access rights for all attributes (including standard attributes) and tabular sections (including standard tabular sections) of all configuration objects. If you reject this action, no change is made in the existing objects; however, default behavior of new objects is modified.\n\nWhen a new role is created, the Designer sets the following for all rights:\n\n rights are not granted for objects.\n\n rights are granted for attributes (including standard attributes) and tabular sections (including standard tabular sections).\n\nThe Independent rights of subordinate objects checkbox defines how the system considers the parent object rights when it determines the rights for a subordinate object. If the checkbox is checked, parent object rights are not considered. If the checkbox is reset, the corresponding parent object right is analyzed to determine any subordinate object rights. If the parent object does not have the right, the subordinate object will also not have the right, regardless of the subordinate object right state.\n\nEven if Independent rights of subordinate objects is selected, the right to a subordinate object requires that the same right be held to the parent one. That means that an attribute or a tabular part requires the right to an object, while the tabular part attribute requires the right to a tabular part or an object. This property matters if a user is assigned several roles with rights added via \"OR\". That means that if a role has the Independent rights of subordinate objects property set, and there is only a right to an attribute, while another role has the right to an object only, the user will have the right to an attribute only when the rights of these roles are added.\n\nWhen setting attribute (tabular sections) access rights for reports/processes, please note the following: if the Independent rights of subordinate objects checkbox is unchecked and the Edit right is set for the attribute (tabular section), and the View right is not set for the report/processes, it will be assumed that the Edit right is also not set for the attribute (tabular section).\n\nIf multiple roles are assigned to a user, the parent object rights are validated before rights per role are combined (see page 1-185).\n\nThe Independent rights of subordinate objects check box affects the following objects:\n\nTo change an access right, select a configuration object in the left-hand list and select or cleat the check box for the required action in the right-hand list. If you need to modify access to all objects in a branch, select it in the left-hand window and make the required changes in the access rights.\n\nA description of each role can be displayed in a spreadsheet or text document using Actions – Output list.\n\nIf a configuration uses multiple roles, it is recommended to use the All Roles window for convenient viewing and editing of rights. To open it, select the Roles branch in the configuration object tree of the Configuration window and then select All Roles in the context menu.\n\nThe window contains three table boxes. The first (leftmost) field is used to select the required configuration object. The first column of the second table box contains a list of rights for the selected object. The other columns are used to specify use of each right for every existing role.\n\nTo set or remove all the rights for any role, select or clear the permission check box in the first row of the table box.\n\nTo set or remove all permissions for a certain right in all the roles, select or clear the permission check box in the first row of the table box.\n\nYou are allowed to move columns corresponding to roles.\n\nThe third table box is used to edit data access conditions at the level of separate fields and records.\n\nData access restrictions can be used to manage access rights at the level of both metadata objects and 1C:Enterprise database objects. You can use the following 1C:Enterprise objects to restrict access to data:\n\nA combination of the above objects ensures maximum flexibility in assigning data access rights to various users with different job duties.Data access restrictions can be applied to reading or modifying database objects. A current user is granted a right to read or modify a database object only if the applied access restriction entitles him or her to do so. Otherwise the read or modify operation of the database object is not performed.\n\nVarious access restrictions can be applied to operations (addition, modification or deletion) with the following types of database objects:\n\nYou can apply restrictions to reading the entire object or its individual fields for the following types of database objects:\n\nIf you call database object fields from the 1C:Enterprise script using application object properties, it reads the entire object rather than the value of the used field. The only exception is retrieving a presentation when field values are only read if they are a part of this presentation.\n\nAccess restrictions are stored in roles, can be assigned to most metadata objects and written in a special language that represents a subset of the query language.\n\nData access restrictions are described in a special language, which is a subset of the query language (for a detailed description of the query language, see page 1-442). Data access restriction language differs from the query language as follows:\n\n A data access restriction query always includes one table as a source of data. This is a table of the object to which such a restriction is applied (the main restriction target).\n\n Query description is shortened. Data access restriction language only uses the FROM and WHERE sections of the query language. For instance, a description in the query language looks as follows:\n\nOn the other hand, a description in the data access restriction query language looks as follows:\n\nFor a description of a list of sources, see page 1-453. For a description of filter conditions, see page 1-460. Please note that embedded queries used in the data access restriction language have a limited set of available functions (see page 1-191);\n\n Session parameters (see page 1-192) and functional options (see page 1-192) can be specified as condition items;\n\n Templates that simplify a description of restrictions (see page 1-197) may be used in any part of a data access limitation query.\n\nThe main component of such a restriction is a condition calculated for each entry of the database table to which a data access restriction is applied. An entry is available if a non-empty table is received when a condition is applied to one table entry of the main restriction target (i.e. a table that contains one or more entries). If an empty table is received when a condition is applied, the entry to which the condition was applied is unavailable. The user can change a table entry for the main restriction target, if such an entry does not contradict the restriction set for the right – both before the change operation, and after it. Table fields\n\nThe following can be used in data access limitations:\n\n Table fields of an object, for which data access limitations are described.\n\nFor example, if a restriction is applied to reading items of the Contractors catalog, it can use fields of the Contractors catalog and its tabular sections. Thus, the simplest restriction applied to reading items of the Contractors catalog can look like the following:\n\nWhere Goods is a tabular section of the Contractors catalog.\n\n Fields of object tables that can be accessed by references stored in the main object of restriction. For example, if the ChiefManager attribute of the Contractors catalog references the Users catalog, the access restriction can look like the following:\n\n Fields of object tables associated with the main object of restriction by certain conditions and expressions with these fields.\n\nFor example, you can apply the following restriction to reading items of the Contractors catalog:\n\nThis restriction uses fields of Users catalog items associated with an item in the Contractors catalog by the value of the Description fields. Nested queries\n\nNested queries are used to create a set of entries to be used:\n\n to connect to a table of the main restriction target;  as a comparison operand IN or NOT IN.\n\nNested queries may use any query language tools except for the following:\n\n Results of nested queries will not contain any tabular sections;  Some virtual tables, including BalanceAndTurnovers.\n\nThe next example of a restriction applied to reading the Contractors catalog uses a nested query as a set of records for association with the main object of restriction:\n\nBelow is an example of a restriction applied to reading the PassportDetailsPersons, where a nested query is used as an operand in the IN comparison operation:\n\nIf you want to retrieve data from a tabular section in the nested query, you should call this tabular section directly in the FROM section of the nested query. For example, rather than using the following:\n\nData access restriction queries may include session parameters. For example, you can apply the following restriction to reading items of the EmailMessageGroups catalog:\n\nWhere CurrentUser is a session parameter (see page 1-179).\n\nData access restriction queries may include functional options. You are only allowed to use functional options that are independent of parameters. For example, if the Nomenclature catalog has a MainWarehouse attribute, a restriction applied to reading this attribute might look like the following:\n\nWhere AccountingByWarehouse is a functional option (see page 1-211).\n\nRestrictions applied to database objects of the following types can only use some fields of the main data object of restriction:\n\n Accumulation registers can contain dimensions of the main restriction object only.\n\n Accounting registers within restrictions can use balance dimensions of the main restriction object only.\n\nIf turnover register data access restrictions use dimensions that are not part of the totals, then the stored totals will not be used when you are accessing the virtual turnover table, and the request will be based on the record table only.\n\nAccess restrictions are checked every time an operation is performed on database objects (in the dialog boxes, 1C:Enterprise script or queries) and can operate in one of two ways:\n\n All. The \"All\" approach means that an operation on data (in the dialog boxes, 1C:Enterprise script or queries) should be performed on all database objects the operation includes. If this operation means reading or modifying database objects and the corresponding access restrictions are not met, the operation fails due to access rights violation.\n\n Allowed. With the \"Allowed\" approach, an operation on data only reads database objects if they meet relevant access restrictions. Database objects that do not meet access restrictions are considered as missing during the operation and have no effect on the result.\n\nData access restrictions are applied to database objects when 1C:Enterprise calls the database. In the client/server mode of 1C:Enterprise restrictions are applied at the 1C:Enterprise server.\n\nThe approach to applying restrictions selected for each operation on data is determined by the purpose of the operation and severity of its results. Thus, the \"Allowed\" approach is used to display dynamic lists and perform other interactive actions. The \"All\" option is used to perform all operations on application objects in the 1C:Enterprise script including all changes to database objects. Therefore, it can cause difficulties in generating a selection for the Select() method of catalog, document or other managers with subsequent result iteration if a corresponding object has a relatively complex restriction since some access rights restrictions cannot be represented correctly in a selection for the Select() method.\n\nYou can manage the approach to access restrictions in queries. To do so, you can use the ALLOWED keyword of the query language. If a query does not contain ALLOWED, restrictions are assigned the All approach. If ALLOWED is specified, the Allowed approach is applied.\n\nIt is important to note that queries with the ALLOWED keyword should only have selections that match all restrictions applied to reading database objects used in the queries. If the query uses virtual tables, the corresponding selections should also be applied to the virtual tables.\n\nIf an object-oriented approach is used, getting access to data in the ALLOWED mode is not supported. Object techniques are intended for critical operations on data including data modification. To retrieve data using object techniques, regardless of the restrictions set, you should perform the required actions in a privileged module or as a user with full access rights. There are no methods of retrieving allowed data only within the object techniques.\n\nIn 1C:Enterprise any operation with data stored in the database eventually calls the database requesting to read or modify data. When queries to the database are executed, 1C:Enterprise internal mechanisms restrict access. The following is performed:\n\n A list of rights (read, insert, update, delete), database tables and fields used in the query is generated.\n\n Data access restrictions applied to all rights, tables and fields used in the query are selected in all roles of the current user. If any of the roles has no data access restrictions applied to a table or field, it means values of the required fields are available in any record of the table. In other words, when no data access restrictions are applied, it means the WHERE True restriction.\n\n Current values of all session parameters and functional options that contribute to the selected restrictions are obtained.\n\nTo obtain a session parameter value from the current user, you do not need to have the right to obtain this value. However, if any session parameter value has not been set, an error will occur, and a database query will not be executed.\n\nObtaining functional options depends on the way in which the Privileged mode for obtaining property of the functional option is set (see page 1-211). If the property is reset, the current user will possess read rights for the object where the functional option is stored.\n\n Restrictions retrieved from a single role are grouped using AND.  Restrictions retrieved from different roles are grouped using OR.\n\n Generated conditions are added to SQL queries used by 1C:Enterprise to call the DBMS. When data are retrieved (from metadata objects or database objects), access restriction conditions do not validate rights. The mechanism of adding conditions depends on the selected approach to applying restrictions: All or Allowed.\n\nIf restrictions are applied using the \"All\" approach, conditions and fields are added to SQL queries so that 1C:Enterprise could obtain information on any data in the database query even though it is not allowed for the current user. If restricted data are used, the query fails. An outline of applying restrictions with the help of the \"All\" approach is shown on fig. 66:\n\nIf restrictions are applied using the Allowed approach, conditions are added to SQL queries so that records unavailable to the current user have no impact on the query result. In other words, if restrictions are applied using the Allowed approach, records unavailable to the current user are considered missing. An outline of this approach is represented on fig. 67:\n\nOther Objects Associated With Data Access Restrictions\n\nIf you develop configurations using data access restrictions, metadata objects, such as session parameters, functional options and common modules with the Privileged flag, might prove useful.\n\nYou can use session parameters in data access restrictions in the same way you use query parameters in queries.\n\nYou can use functional options that are independent of parameters in data access restrictions in the same way you use query parameters in queries.\n\nIf a common module has its Privileged flag set, execution of procedures and functions in this module takes on important characteristics:\n\n In 1C:Enterprise client/server mode a privileged module runs at the server only.\n\n When procedures and functions of a privileged module or any objects they call are executed, the rights restriction system is disabled (both for metadata objects and for data). Therefore, in the privileged module, you can perform any operation on any objects even if the current user is not granted the required rights.\n\nPrivileged modules are used to set initial values of session parameters used in data access restrictions. Additionally common modules allow users with restricted rights to perform consistent actions with data. For example, if the user is responsible for entering and posting documents, but should have no access to data impacted by document posting, the posting operation can be transferred to a privileged module. In this case the user can post documents without being granted rights to any other data (e.g., registers).\n\nWhen working with data, you can set the privileged mode programmatically. You might need to set the privileged mode programmatically if you perform mass operations with infobase data and do not need to check data access rights. For a description of the privileged mode see page 1-181.\n\nPreprocessor instructions can be used when editing data access restriction text. The following instructions are available:\n\n<Expression> – is an arbitrary logical expression in the script with a Boolean type result. The expression may contain the following:\n\n Logical operations AND, OR, NOT.\n\n Session parameters with syntax &Parameter, where Parameter is the name of the session parameter.\n\nIf a #OR or #ELSEIF instruction expression results in True, the resulting text of the access restriction instruction contains the text that follows #THEN keyword. When an expression results in False, the text following #THEN keyword will not be included in the access restriction instruction text. The text following #ELSE will be added to the resulting access limitation text if none of the earlier criteria is met.\n\nIf the data access limitation text contains preprocessor instructions, the syntax of such a restriction is not checked during editing and cannot be changed via Designer.\n\nWhere CurrentUser – is a session parameter of type CatalogRef.Users.\n\nThis construct means that a condition to set access restrictions will be checked for all users from the catalog, except for Klimova. Access restriction description templates\n\nA role may contain a list of access restriction templates described on the Restriction Templates tab of the role form. Such access restriction templates may be edited in the group editor for access restrictions and templates (see page 1-202).\n\nEvery access restriction template has a name and contains text. The template name is compliant with the standard naming conventions for 1C:Enterprise system.\n\nPart of the template text uses data access restriction language. Template text can also contain parameters marked by the \"#\" character.\n\nThe \"#\" character may be followed by:\n\n One of the following keywords:\n\n□ The Parameter keyword followed by the parameter’s number in the template in brackets;\n\n□ CurrentTable – means the full name of the table for which a restriction is created is inserted into the text;\n\n□ CurrentTableName – means the full name of the table (as a string value, in quotes) to which an instruction is applied is inserted into the text in the current variant of the script;\n\n□ CurrentAccessRightName – contains the name of the right to which the current restriction applies: READ, INSERT, UPDATE, DELETE;\n\n Template parameter name – means inserting a restriction for the corresponding template parameter into the text;\n\n \"#\" character – means inserting one \"#\" symbol into the text.\n\nThe access restriction expression may contain the following:\n\n Access restriction template in the following format: #TemplateName(\"Template parameter value 1\", \"Template parameter value 2\", …). Each template parameter is contained in double quotation marks. If the parameter text contain a double quotation mark, two double quotes should be used.\n\n Function StrContains(SearchWhere, SearchWhat). This function is used to search for SearchWhat string occurrences in SearchWhere returns True if occurrences are found, and otherwise False.\n\nTo facilitate template text editing on the Restriction Templates tab in the role form, click the Set the template text button. Type template text in the dialog that opens and press OK.\n\n1C: Enterprise performs a syntax check for the template texts, templates use and macrosubstitution of role access restriction template text in query text.\n\nTemplate macrosubstitution consists of the following:\n\n replacing parameters’ occurrences in template text with parameter values from the template use expression in restriction text;\n\n replacing the template use expression in query text with the resulting template text.\n\nWhen a query designer is called for the condition that contains access limitation templates, a warning about replacing all templates is displayed.\n\nFor flexible control of user access to data and compliance with user duties, you are recommended to use the following guidelines when restricting data access:\n\n Select a set of data (possibly dependent on the current user) that could require preparation. On the one hand, the selected data should streamline data access restriction; on the other, its size should not be too big. Allocate the data by session parameters.\n\n Set values for the session parameters in the SessionParametersSetting() handler of the session module.\n\n Set access restrictions for data that require it the most (data are sensitive or critical to maintaining system integrity). Please note that access restrictions can result in slower handling of these data. Excessively complex restrictions can also affect performance adversely.\n\n If you need to allow a limited set of operations with data for a user who does not need full data access rights, transfer these operations to a privileged module or explicitly enable and disable the privileged mode in the right points of the code (see page 1-181).\n\n When objects are recorded and the system performs appropriate checks, data are accessed in the privileged mode (see page 1-181). In this case you can leave rights restrictions enabled at the level of records for the relevant fields if these data are used in the configuration in the managed mode only:\n\n○ when parent, owner and code uniqueness is checked for catalogs;\n\n○ when code uniqueness is checked for documents, business processes and tasks;\n\n○ when code uniqueness is checked for exchange plans, it is disabled;\n\n○ when parent and code uniqueness is checked for charts of accounts and charts of characteristic types.\n\nWhen you create a data restriction request, you should note the following:\n\n If data access restrictions are set for the object table and the data access query includes a merge with such a table, connection conditions (the UNTIL query section) can't contain the object tabular section with the set access restriction.\n\n If the query contains a table which does not use any type of field in its query, all data restrictions are applied to the table. For example, the SELECT QUANTITY (*) FROM Catalog.Contractors query will be run with all access restrictions set for the Test catalog. Restrictions are applied as \"OR\", i.e., all records available by at least one condition will be available. If conditions are not set for some of the fields, the query will be run for all table records.\n\nIf the query uses a top-level table, any restrictions set for nested tables columns are not applied.\n\nIf the query uses a nested table, all restrictions are applied both for the nested table and the top-level table. For example, the SELECT QUANTITY (*) FROM Catalog.Contractors.Agreements query will be run with all the restrictions for the Contractors catalog and all the restrictions for the Agreements tabular section.\n\n If access to the fields required to get a metadata reference object's representation is disabled using data access restrictions or object access is disabled at the access rights level, then getting the object's representation will not affect the current transaction.\n\nTo open a wizard, in the Access Restriction column in the Data access restrictions table box, click the selection button. Then, in the Restrict access window, click Query Builder.\n\nUse the wizard to specify conditions for data access restriction.\n\nSelect the required objects in the Tables and fields tab and move them to the Tables and Fields section. The wizard will also have the Links tab if you specify several tables.\n\nThe Links tab enables you to specify the criteria for the links between the fields of the tables. Click Add to enter a new condition and select one of the tables from the Table1 column. Select another table with fields linked to the fields of the first table from the Table2 column. Controls that are used to create table link conditions are located below the criteria list.\n\nIf a simple type of condition is selected, choose the linked fields of the tables in Field1 and Field2 and set the comparison condition. If the selected fields are not compared, the condition list line will display the following error message in the Link condition column: Incorrectly completed condition.\n\nSpecify conditions for source data filtering at the Conditions tab.\n\nFor each selected field, choose the type of condition and specify the parameter name. You can use a session parameter as the parameter. You can specify multiple conditions. In this case the Condition column of the table box displays the condition text in multiple rows.\n\nYou can view the query text anytime while generating the query by clicking the Query button.\n\nThe batch editing mode for access rights restrictions is enabled by using the All access restrictions command in the context menu of the Roles branch. The form that opens contains two tabs: Access restrictions and Restriction Templates.\n\nThis mode can be used to view all the entered access restrictions in a single list (by all roles, objects, rights and field combinations).\n\nYou are allowed to add access restrictions for multiple roles, objects, rights and field combinations.\n\nYou can also filter the lost using different criteria.\n\nIn the batch editing mode you can remove the restrictions marked in the list.\n\nYou can also edit the selected restrictions. While doing so, you can replace a set of fields and/or access restrictions.\n\nAdditionally the batch editing mode can be used to copy the selected restrictions to other roles.\n\nThe Restriction Templates tab shows all access restriction templates that are included in the application. But only the first 10 strings ending with ..., if the template text contains more than 10 strings, are shown. The template editing window shows the full template text.\n\nYou can add the access restriction template for multiple simultaneous roles.\n\nYou can select the templates you need with a set of criteria and according to the value of the current column.\n\nIf necessary, you can copy one or more templates to other roles.\n\nThe editor also allows you to edit selected templates. You are allowed to change the template name and text if needed. 5.5.5. Common Attributes\n\nA common attribute is an attribute that is added to all or multiple configuration objects. A common attribute can be used in two scenarios:\n\n As a common attribute, i.e., to simplify the specification of an attribute that is included in all (or several) configuration objects in which the attribute retains its meaning and type. An example of such a scenario is an arbitrary comment field in application documents.\n\n As a part of data separation – a special application that is used to divide all stored data and application workflow on different parts. Data separation is enabled for the common attribute. An example of this scenario, the subscriber notion is used, when several data \"owners\" can work in a single physical infobase, while application users will think that the infobase contains only their data. For details on data separation, see page 2-895.\n\nTo create a common attribute, you need to create a Common attribute configuration object. You can do this the usual way in the Designer mode, i.e., select Common – Common attributes in the configuration window and add a new object.\n\nThis will result in a Common attribute configuration object that can be used to include common attributes in necessary configuration objects.\n\nCommon attribute behavior is set with the Data split property. If this property is set to Do not use, the configuration object created will be used only as an attribute included in several (or all) of the configuration objects. If the property is set to Split, the common attribute will use a data separator (see page 2-895).\n\nA list of configuration objects in which a common attribute is included is set using the Content and Auto-use properties (or in a corresponding tab in the More window (see page 1-56)).\n\nIf the Auto-use property is set to Use, the common attribute created will be automatically added to all existing configuration objects (for which common attributes can be used) and it will be automatically added to all new configuration objects.\n\nIf the Auto-use property is set to Do not use, the attribute will not be added automatically, and you should use the Content property to select objects in which common attributes will be included.\n\nThe same property should be used when the common attribute is used automatically and there are objects to which the attribute should be added (see fig. 79).\n\nThe common attribute content editing window is divided into two parts:\n\n The upper part shows all the configuration objects that can be included in a common attribute.\n\n The lower part shows objects with non-default settings that are set with the Auto-use common attribute value:\n\n○ If the property is set to Use, the lower side will contain a list of objects not included in the common attribute.\n\n○ If the property is set to Do not use, the lower side will contain a list of objects included in the common attribute.\n\nYou can edit data both in the upper and lower sides, and the edited configuration object will be moved between the window sides regardless of the Use column value.\n\nThe Use column can have one of three values for every configuration object:\n\n Automatic – this value means that assigning the configuration object to a common attribute will depend on the common attribute’s Auto-use property:\n\n○ The Use value specifies that the configuration object is included in the common attribute.\n\n○ The Do not use value specifies that the configuration object is not included in the common attribute.\n\n Use – this value specifies that the configuration object is included in the common attribute regardless of the Auto-use property value.\n\n Do not use – this value specifies that the configuration object is not included in the common attribute regardless of the Auto-use property value.\n\nSo you can use the Content property, for example, to selectively exclude some objects from a common attribute event if autousage is enabled for the attribute.\n\nA common attribute (without the data separation mode) can include the following configuration objects:\n\nWhen a document is recorded, the log’s common attribute gets the value of the document’s common attribute or NULL if the document is not a part of the common attribute.\n\nA common attribute can be used in data access restrictions (see page 1-188).\n\nIt is a good idea to add external data sources to the common attribute only if the common attribute is a separator (see page 2-895). Detailed information on how to use an external data source that is part of the separator can be found in the section on this (see page 2-871).\n\nDo not use common attributes to describe data that is related to specific object business logic.\n\nCommon attributes are shown in the form editor when you edit common attribute object forms, and they can be placed on a form.\n\nExchange plans are used to implement data exchange procedures. An exchange plan:\n\n Contains information about nodes that can be used in data exchange;\n\n Defines what data are to be exchanged;\n\n Specifies whether the exchange should use the distributed infobase mechanism.\n\nA single application solution can have multiple exchange plans, each of them describing a particular procedure of data exchange. For example, when you exchange data with remote warehouses or offices, you are most likely to use two exchange plans (one for the exchange with warehouses and another – for the offices), since the data set you exchange with the warehouses is much narrower compared to the data set you exchange with the offices.\n\nFor a description of data exchange procedures see page 2-745.\n\nFilter criterion objects are components of the information filtering mechanism. A system configuration specialist uses them to create predefined filtering rules. In the 1C:Enterprise mode these criteria will be used for filtering information from lists.\n\nSpecify the name, synonym and comment in the Filter criterion object editing window.\n\nFilter criteria may be of any standard type or of any type defined as configuration tree object. You can include composite-type attributes such as CatalogRef, DocumentRef, etc. and composite-type attributes with a defined chart of characteristic types (Characteristic…).\n\nSpecify the types for filtering when you create a type of filter criteria. The Content tab for this type will contain a list of configuration objects containing data of the type that is included in the filter criteria type. Check the attributes that will be used as a filter.\n\nFor the criteria to perform their functions, create a list of attributes of catalogs and documents in the Designer (Content tab). There are virtually no limits imposed on the contents of the list: for example, unlike a journal column, you can select several attributes of a document or its tabular section for the filter criteria.\n\nThere may be any number of filter criteria and each criterion may have more than one form of displaying results. This procedure can be useful when you look for various information. For example, you want to filter all documents that use a certain contractor (in attributes and tabular sections). You can also set other information filtering criteria (e.g., you can search posted documents only or a specific date range, etc.).\n\nWhen you open a filter form, the Filter parameter with the filter value set (the Value element) will be transferred to it. For more details on the form parameters, see page 1-384.\n\nFilter criterion may have any number of forms for displaying results. For quick retrieval of filtered information you can place the form call in the user menu or on the toolbar.\n\nIf there are multiple filter criteria forms, specify the default form in the Default Form property.\n\nIf the configuration has multiple subsystems, select the subsystem where the criterion belongs. You can specify several different subsystems.\n\nTo call a filter criteria form, the system places the corresponding command in the form navigation panel.\n\nYou can use event subscriptions to assign event handlers for an object or a group of objects in the 1C:Enterprise script.\n\nWhen you add a new event subscription, in addition to the common configuration object properties you should also specify an event source, an event for the assigned handler and a procedure that handles the event.\n\nEvent sources can be application objects and register record sets defined in the configuration. You are allowed to select objects as sources for multiple events or select all objects of the same type (e.g., all documents).\n\nYou should select an event in the drop-down list that contains events that are present in all selected objects. Otherwise the list will be empty.\n\nThe event handler can be selected in the window containing procedures that can be assigned as event handlers. These procedures should meet the following requirements:\n\n The procedure should be stored in a common module;\n\n The common module containing the procedure should have the following properties set:\n\n The number of procedure parameters should be one more than the number of parameters for the selected event handler (since in addition to parameters, the event's source object is also passed to the event handler).\n\nWhen the specified event occurs, the following action sequence is performed:\n\n the event is first processed in the object and calls the handler defined in the object or record set module;\n\n if the handler is performed while the Cancel parameter is set to True or an exception is raised, the action is aborted;\n\n then external event handlers assigned to the event are called in random order;\n\n if the assigned handler is performed while the Cancel parameter is set to True or an exception is raised, the action is aborted.\n\nThe object (record set) that has called the event is passed to the assigned handler as a source.\n\nThe assigned event handlers are called in the same context as the action that has called the event. If you need to run the assigned handler at the server, you should include a call to the common module procedure performed at the server in the handler code.\n\nYou can also assign event handlers by using the 1C:Enterprise script. Use the AddHandler and DeleteHandler operators for these purposes.\n\nObjects that can become sources of events have the AdditionalProperties property of the Structure type. This property can store information between event calls, e.g., information on whether the object is new or old.\n\nJobs have the following main features:\n\n Defining scheduled procedures at the stage of system programming;\n\n Performing specified actions in compliance with a schedule;\n\n Calling a specified procedure or function asynchronously, i.e. without waiting its completion;\n\n Waiting for completion of a single or multiple jobs.\n\nBackground jobs are implemented through the 1C:Enterprise script tools. Background jobs are used to perform application tasks asynchronously. They can generate child background jobs, e.g., to run complex calculations concurrently at different working servers of the cluster in the client/server mode.\n\nYou can restrict background jobs with identical methods based on an application characteristic. You can create and manage background jobs programmatically within any user connection to the 1C:Enterprise infobase. A background job is performed under the account of the user that created the job.\n\nScheduled jobs are an integral part of any application solution. They are described at the configuration stage (see fig. 80).\n\nEach scheduled job can be assigned a schedule that will be used to launch the job automatically. 1C:Enterprise supports one-time and recurring schedules. You can set the start and end date; daily, weekly or monthly schedules. Schedules can be set up both at the configuration stage and at run time (in 1C:Enterprise mode).\n\nWhen launched, a scheduled job generates a background job that is responsible for the actual processing. A scheduled job can run under the specified user account and can be re-launched (e.g., in case of unexpected shutdown).\n\nIn the client/server mode you can use the administration utility to disable automatic execution of scheduled jobs for a particular infobase.\n\nIn the client/server mode scheduled jobs are launched by the cluster manager. It means scheduled jobs run even if there is no client connection to the infobase (if the jobs are not disabled for this particular infobase).\n\nFor peculiarities of background tasks in file and client/server variants, see page 2-831.\n\nA developer can use functional options to describe configuration functionality that can be quickly enabled or disabled at the implementation stage or during system operation. For example, you can isolate use of additional merchandise properties as a separate functional option. In this case disabling this functionality hides all functions associated with additional merchandise properties in the configuration interface.\n\nThe system can automatically adjust to the modified settings by hiding disabled functionalities and making the interface more transparent and user-friendly.\n\nAt the development stage you might want to make a functional option value dependent on specific parameters, e.g., some organizations do not use foreign currency accounting. This can be implemented through Functional option parameters, an object that parameterizes functional options.\n\nFunctional options can influence the following:\n\n User interface: If some functional options are disabled, the system hides all associated items of the user interface. The following interface items are affected:\n\nIf the client application works with a file mode infobase version via a web server, changing the functional option will change the user interface only after the web server restarts (restarting the client application will not change the user interface).\n\n Algorithms written in the 1C:Enterprise script: You can retrieve values of functional options programmatically and use them in various situations, e.g. to decrease the amount of calculation.\n\nFunctional options and their parameters do not affect the database structure. All tables and fields remain in the database regardless of the functional options.\n\nIn the global command interface functional options make the system hide commands for all objects associated with the disabled options. For example, if the Purchases functional option is set to False, it hides commands of opening the Purchases section, creating a GoodsReceipt document, opening a GoodsReceipt list, etc.\n\nAt the same time the Purchases option might be dependent on the parameter value of the Organization functional option. Modifying this parameter value in the 1C:Enterprise script, you can change the state of the functional option, i.e. visibility of the interface item.\n\nThe following should be considered when creating the command interface:\n\n The command will be excluded from the command interface if the functional option has disabled the attribute which is a parameter of that command.\n\n The command will be excluded from the command interface if the functional option has disabled the command parameter type. If the command parameter type is a compound one, the command will become unavailable when all parameter types are disabled.\n\nFunctional options can affect form attributes and commands, as a consequence, changing visibility of associated form elements (fields and columns for form attributes and buttons for form commands). Please take note of the following system behavior features when developing a form:\n\n The form attribute of the reference type will be disabled if the functional option disables the configuration object forming this type. The complex type form attribute will be disabled if the functional options disable all complex types.\n\n The <Type>Object form attribute (e.g., the main form attribute) will be disabled if the functional option disables the configuration object forming this type.\n\n The form table will be disabled if it displays the data of a form attribute disabled by a functional option.\n\n Types are not available in the type selection dialog (e.g. for text boxes linked with complex type attributes) if the functional option disables configuration objects forming this type. Information regarding the types disabled by functional options is cashed on the client side and cleared in 20 minutes or when the RefreshInterface() method is called.\n\nUnlike the command interface, parameter values of functional options are set for a specific form instance only.\n\nThe data composition system is mainly used to generate reports. Functional options affect data sets output in the report and the list of report settings available to the user. For example, if the Foreign currency accounting functional option is disabled, the report outputting a Goods Receipt document register will not contain Currency and Currency amount columns and filtering, grouping, sorting and performing other actions based on the Currency field will not be available.\n\nFor details on how functional options affect availability of fields in a report generated in the data composition system, see page 1-633.\n\nFunctional options affect the visibility of form fields that display object characteristic values. To make such changes, you need to add an attribute with a characteristic value to a functional option.\n\nConsider the following example. Characteristics are used for the Products catalog, characteristic types are stored in the plan as Characteristics and their values are stored as a CharacteristicValues information register resource. A resource is included in the CharacteristicsAccounting functional option.\n\nIf you disable the CharacteristicsAccounting functional option, field visibility is disabled in forms (the Value column and Value field), thus displaying characteristic values as shown in fig. 81.\n\nUse of functional options involves two metadata object types: Functional option and Functional option parameters.\n\nA functional option is a metadata object that can directly influence the application interface (if the option stores its value in a Boolean type attribute). You can use objects of this type to hide items associated with unavailable functionality. For example, the Multicurrency accounting can hide the Currencies catalog, the Currency field in documents or the Currency amount in reports. The source of the functional option value is a metadata object selected as the Location property; it can be a constant, for example.\n\nIf a functional option value is stored in a catalog attribute or an information register resource, additional information is required to specify the exact way of selecting the option value. This is where the Functional option parameters metadata object is used.\n\nFunctional option parameters can be compared to axes of reference in a space of functional option values. A single parameter of functional options can define its own axis value for a subset of functional options.\n\nConsider the following example. Assume that the sum total depends on a warehouse owned by a particular organization (see fig. 82). The infobase can maintain accounting for various organizations at multiple warehouses.\n\nTo store values of functional options, create an information register with the following dimensions (axes of reference):  Organization (of appropriate type),  Warehouse (of appropriate type).\n\nA resource of the information register will be a value of a quantitative accounting functional option.\n\nThen the general configuration structure will look like the following:\n\n Organization functional option parameter. The Use property references the Organization dimension of the SumTotal information register.\n\n Warehouse functional option parameter. The Use property references the Warehouse dimension of the SumTotal information register.\n\n SumTotal functional option, Location property references the SumTotal resource of the SumTotal information register.\n\nAs a result, if you want to define whether quantitative accounting is required, you need to specify values for functional option parameters (Organization and Warehouse) in each particular case and retrieve values of functional options.\n\nThus, in the example on, sum total is allowed for Organization 1 and Warehouse 1, but is not allowed for Organization 2 and Warehouse 1.\n\nFunctional options can be assigned to the following configuration options:\n\nFunctional options can also affect visibility of form elements.\n\nTo create a functional option, you need to create a Functional option configuration object. You can do it the usual way in the Designer mode, i.e. select Common – Functional options in the configuration window and add a new object (see fig. 83).\n\nIt will result in a Functional option configuration object that can be used to assign functional options to other metadata objects (see fig. 84).\n\nIn addition to the name field, the object has another required field – Location. In the editor you can select one of the objects that will serve as a source for the option value. The list of available objects includes:\n\nThe source of the option value can be any type, without restriction; however, for interface management purposes you can only use functional options that store their values in attributes of the Boolean type. Functional option values of other types are only available for analysis in the 1C:Enterprise script.\n\nThe PrivilegedGetMode property specifies how the functional option value is received (and cached).\n\nFig. 85. Privileged mode when getting the functional option value\n\nIf this property is set, the functional option value is performed in privileged mode. The received value is cached for all sessions related to this infobase.\n\nIf the PrivilegedGetMode property is reset, the functional option value is performed in normal mode. Caching is performed for the current session. Both the value (if it was received) and the flag indicating that the value can't be received are cached.\n\nThe cache is reset if the session parameter values are changed.\n\nSetting the PrivilegedGetMode property is recommended in all cases when a functional option value does not contain sensitive information.\n\nTo create a functional option parameter, you need to create a Functional option parameter configuration object. You can do it the usual way in the Designer mode, i.e. select Common – Functional option parameters in the configuration window and add a new object.\n\nIn addition to its name, the object has another required property – Use. This property indicates a set of objects that define how a functional option value is selected. The list of available objects includes catalogs and information register dimensions. You can select a catalog (out of the entire catalog list) and a dimension in each information register for every functional option parameter on the list.\n\nYou cannot use the same metadata object in multiple functional option parameters.\n\nA metadata object (e.g., a catalog) can be assigned to one or more functional options. To do so, you can use the Functional options property that stores references to the functional options created in the configuration (see fig. 86).\n\nThe list of available options is limited to the options that have an object of Boolean type in their Location property.\n\nIf an object is not assigned any functional options, it is always visible. Otherwise the object is visible if at least one of its assigned functional options is enabled (i.e. functional options are grouped by OR).\n\nObjects that belong to a form (Attributes and Commands) can also be used in functional options.\n\nYou can do so in the form editor by setting the Functional options property for the required object.\n\nThe state of functional options affects visibility of form objects in the same way it affects metadata objects. For example, if a command is disabled using a functional option, all associated buttons are hidden.\n\nIf a form attribute or command has no functional options assigned, it is always visible. Otherwise the form attribute or command is visible if at least one of its assigned functional options is enabled. Use in Data Access Restriction\n\nYou can use Functional options within data access restrictions (see page 1-188) in the same way as Session parameters (see page 1-179). You are only allowed to use options that are independent of parameters, i.e. are bound to constants.\n\nThe system checks name uniqueness for session parameters and functional options.\n\nA functional option value is defined by the object indicated in the Location property. With constants, their values are used. With options that are associated with catalog attributes or information register resources, values stored in these objects are used. To find the specific object that stores the functional value parameter, you need additional information – a set of parameter values for functional options.\n\nIf an option is stored in a catalog attribute, the parameter should reference this attribute. If an option is stored in an information register resource, values for all register dimensions should be specified. In this case each dimension should be characterized by its own parameter.\n\nIf some parameters are missing for a functional option of Boolean type, all values with unspecified parameters are grouped by OR. For example, if a functional option is stored in an information register with Organization and Warehouse dimensions, but you only set the Organization dimension, the functional option value is set to True if at least one warehouse listed in the Warehouse dimension has a functional option value set to True.\n\nHowever, if a functional option type is different from Boolean and some parameters are not specified, it raises an exception.\n\nMethods of the 1C:Enterprise script allow you to retrieve an option value depending on the passed parameters and for the parameters set for the command interface or a specific form.\n\nIf a functional option is bound to a resource of a periodic information register, the system uses the Slice Last to retrieve the option value. If you want to retrieve an option value for a different date, you should specify a value for the Period parameter of Date type that is then used as a date for slice retrieval. You do not need to create this parameter in metadata. It is automatically provided by the system.\n\nWhen using parameterized functional options, you should keep in mind the following:\n\n In list forms an attribute column associated with the parameterized functional option is displayed if the infobase stores and least one enabled value for this functional option.\n\n If you want all attributes associated with functional options to be disabled by default when you open a form, you should set values of these parameters to those missing in the infobase (an empty reference for catalogs or values of dimensions with no records for information registers). In this case the functional option is set to False.\n\n If a reference to a group (if the type of a functional option parameter allows group creation) instead of a reference to an element is specified as the parameter, the system will behave as follows:\n\n○ If an attribute that stores a functional option value is used both for the element and the group, the value of the functional option will be defined by the value of this attribute.\n\n○ If an attribute that stores a functional option value is not used for a group, NULL is returned when a functional option value is obtained with the following methods: GetFunctionalOption(), GetFormFunctionalOption(), and GetInterfaceFunctionalOption(). If a functional option that has been parametrized impacts the user interface, the system will perceive it as disabled (the functional option will be set to False).\n\n You can set a snap to a parameterized functional option for metadata objects used as a basis for commands. Commands for these objects are only displayed in the command interface if there is at least one combination of functional option parameters that makes the functional option value True. However, you can use the SetInterfaceFunctionalOptionParameters() method to set specific parameter values for functional options. In this case command visibility is defined by the parameters you specify.\n\n A dynamic list automatically uses functional options used by the form. If the attributes used in the dynamic list query are disabled for the specified combination of functional option parameters, the corresponding data are not selected and displayed in the dynamic list and the attribute is removed from the lists of available attributes in the Dynamic List Data Display Settings dialog box (in 1C:Enterprise mode).\n\n5.5.10.7. Use of Functional Options in 1C:Enterprise Script\n\nGlobal context methods GetFunctionalOption() and GetInterfa- ceFunctionalOption() return a functional option value. The difference is that the first method allows you to specify a set of functional option parameters, while the second method returns a functional option value depending on the parameters specified for the command interface.\n\nForms have their own method that returns an option value for parameters specified within a particular form – GetFormFunctionalOption().\n\nIf a functional option value changes in the database, the global command interface and currently open forms are not automatically updated.\n\nTo update the global command interface, you should explicitly call SetIn- terfaceFunctionalOptionParameters(). The command interface is updated with regard to the new state of the functional options.\n\nIf a functional option value changes in the database, the global command interface and any currently open forms are not automatically updated. You should use the RefreshInterface() method after writing the functional option values to the database.\n\nNote that setting functional options parameters (and running the RefreshIn- terface() method) have the following consequences:\n\n For every form closing of all auxiliary forms is called (and the corresponding handlers are called).\n\n Forms that are denied closing are not closed.\n\n If the main form was active at the moment of interface refresh, the main form is shown with new elements.\n\n If an auxiliary form was active at the moment of interface refresh, then:\n\n○ the open auxiliary form command will be executed, if this is available when the interface is refreshed.\n\n○ otherwise, the main form elements are refreshed and the form is displayed.\n\n If an auxiliary form opened with a command that is not related to the form navigation panel was active at the moment of interface refresh, the main form elements will be updated instead and the main form will be shown.\n\nTo refresh a specific form you should reopen the form or call the SetFormFunctionalOptionParameters() method. The steps above will work only for the form, in the context of which form setting the functional option parameters was initiated.\n\nYou do not need to specify all parameters at once; you can change a value for a specific parameter or a set of parameters. However, setting a group of values in a single call is more efficient.\n\nTo retrieve parameter values, you should call an appropriate function (GetInterfaceFunctionalOptionParameters() or GetFormFunctionalOp-\n\ntionParameters()) that returns the specified parameters as a structure with the parameter name used as a key.\n\nWhen opened, the form automatically uses parameters of the functional options set for the command interface.\n\nA defined type is a special configuration object for defining a type of data for a frequently used entity, or there is high probability that it will change when an application is implemented. A generic subsystem used to store contact information may be used as an example. This subsystem includes an information register that stores this information. This register contains a dimension that specifies the object for which such contact information is stored. A contractor, owner organization, physical entity, etc. can be used as a dimension value. A type (named Cata- logOfOrganizationsAndIndividuals) that describes this storage object does not necessarily have to be a register dimension type. The contents of this type may be changed in the process of application implementation: new catalogs may be added and the types that are no longer required may be excluded. If a composite type is used instead of the CatalogOfOrganizationsAndIndividuals type, in each instance where such an entity is used the contents of types will have to be changed everywhere. It is complicated, and there is always a chance that an attribute with the required composite type will be forgotten. If a composite type is used, it is only necessary to edit the composite type definition in the application customization process (and, of course, all application code fragments that use this type). All attributes that have the CatalogOfOrganizationsAndIndividuals type specified as their type will be changed automatically.\n\nA defined type is characterized by the following:\n\n It can be a composite type.\n\n It cannot be part of a chart of characteristic types value type.\n\n It cannot be part of a composite data type of another attribute.\n\nTo describe a type with a script, use the DefinableType.<NameOfDefi- nedType> construct.\n\nIf you need to use an application with 1C:Enterprise legacy versions (under 8.3.3), delete all definable types from the configuration.\n\nTo save information about user settings that need to be saved between the sessions, the platform offers you settings storages.\n\nThere are two types of settings storages:\n\n Standard storage is used by the system by default and stores data in system tables of the infobase.\n\n Settings storages are special metadata objects that describe how data are stored in an infobase object. For example, this object could describe how to work with settings stored in a catalog.\n\nThe platform uses the following storages:\n\n System storage is a storage where the system stores all settings required to operate the platform. These settings include settings of form sizes, print settings of spreadsheet documents, etc. For a complete list of settings stored in the system storage, see page 2-1199. A standard settings storage is always used as a system settings storage. It means that data from the system storage are always saved in the system table of the infobase.\n\n Common settings storage is used to store various application settings. The platform does not write any settings to the storage independently. A developer should use this storage in the 1C:Enterprise script, to save or restore user application settings.\n\n Form data settings storage stores form data. You can use this storage to save data processor attributes, for example. Please note that you can select a different storage for each report or data processor.\n\n Dynamic list user settings storage is a storage system for storing the user settings of dynamic lists.\n\nWhen developing a configuration, you can define custom settings storages of all types, except the system storage. To do this, create a settings storage object in the appropriate branch of the metadata tree and then select it in the required configuration property. Properties of the Configuration object have the same names as the storages listed above.\n\nStorage data can be stored in either the infobase system table or a special infobase object, e.g., a catalog or an information register. For example, you can create a settings storage object in the configuration and use a configuration property to indicate that this storage stores report settings. It means that report settings are saved in an object, e.g. a catalog, rather than in the system table. In this case you can use common report settings or implement a system of rights and exchange of settings, etc.\n\nA custom storage makes sense when you need to create a special structure to store settings or special procedures of settings management or else arrange settings exchange inside the distributed database (see page 2-745) and in other similar cases.\n\nIt is recommended to save settings in objects that support an identification method in which the identifying attribute can be converted into a string and backwards with no data loss. An example would be a catalog and the standard Code attribute that is unique in the entire catalog.\n\nSettingsStorage metadata object is used to store application settings of the configuration. By implementing event handlers and creating object forms, you can change the way you work with the settings, i.e. modify the storage location (use developer-generated configuration objects instead of system tables) and visual mechanisms of working with the settings.\n\nAny number of settings storages can be defined in a single configuration.\n\nSettings storages can be used for both the programmed operations and programmed and interactive operations. In the first case the required functionality is provided through mandatory implementation of the SettingsStorage object module by the handler:\n\n SaveProcessing contains an implementation of the Save() method.\n\nThis handler has to save a setting in an object, e.g. a catalog item.\n\n LoadProcessing contains an implementation of the Load() method.\n\nThis handler has to retrieve settings from an object, e.g. a catalog item.\n\nIf a required handler is not implemented, the action it performs is unavailable. For example, if you do not implement the SaveProcessing handler, you cannot save settings.\n\nWhen developing a storage, the developer determines how the storage object is identified, thus defining the parameter type. For example, if settings are saved in a catalog, you can use the Code field or the Ref value (of a catalog item) as the setting key.\n\nIf you want to work with the settings interactively (use forms to save and restore the settings), you need to implement these forms and fill in the corresponding properties of the SettingsStorage object (Save form and Load form).\n\nImplementation of forms for saving and restoring settings is mandatory for interactive operations. You can also save and restore settings programmatically without implementing these forms.\n\nWhen a user chooses to save or load the settings, the system gets a corresponding form for the settings storage object and displays it on the screen. For example, when you save report settings, the system uses a form to save a metadata object selected as the report settings storage (for a particular report or the entire configuration). The parameters passed to the form are described in more detail in a description of the SettingsDescription object in the Syntax Assistant.\n\nIf a form is created through a wizard, the required parameters are automatically added to the list of form parameters.\n\nForms should use the passed parameters and filter the settings list appropriately. Thus, you should only display the settings for the setup object (e.g. a report) specified in the ObjectKey parameter.\n\nIf you select a setting, the result of the form activities should be a value of the SettingsSelection type. The SettingsKey of this value must contain a key for the selecting setting (e.g., a catalog item code or another parameter that identifies the setting), while the AdditionalProperties property should store additional information possibly specified in the form by the user:\n\nA setting cannot be saved in the standard settings storage if the object key length exceeds 256 characters or the settings key is more than 128 characters long, or the user name has more than 64 characters.\n\nIf you want to create a Settings storage, create a configuration object with the same name. You can do it in the Common branch by selecting the Settings storages item.\n\nIn the 1C:Enterprise script a standard settings storage is represented by the StandardSettingsStorageManager object. Having the same set of methods as the SettingsStorageManager object, this object also implements the following additional methods:\n\n GetList() – a method that retrieves a list of settings for the selected settings object;\n\n Delete() – a method that deletes a specific setting of the selected settings object.\n\nThe standard storage save settings in the system tables of the infobase.\n\nThe system settings storage takes a string as a settings object key and a setting key.\n\nIt also takes any values that can be placed into a value storage as settings.\n\nWhen you use the Save(), Delete() and SetDescription() methods of the StandardSettingsStorageManager object, note that if the object to which settings are related (e.g., a form) has already been used in the current session, changes will be applied only in the next session.\n\nIf you significantly change settings programmatically (for example, when you copy the settings of one user to another user), it is recommended to prompt the users to restart the client application.\n\nA developer can control how form data are saved in the settings. The following form properties should be used for this purpose when developing a form:\n\n Save form data in the settings: This property helps the form developer enable a functionality to save form data (a setting where data are saved can be selected). If a form has its save functionality enabled, it makes available commands for saving or loading settings.\n\n Autosave form data in the settings: This property indicates settings are to be auto-saved when the form is closed and restored when the form is opened. It is irrelevant whether the settings list is used or not.\n\nIf data saving is enabled in the form, you need to specify what form attributes are to be saved (Save column at the Attributes tab of the form editor).\n\nWhen settings are save, the full form name is used as an object key. An object of the Map type is saved in the settings. It stores paths to the saved attributes as keys and attribute values as values.\n\nReport and external report objects have the following metadata properties: Variants repository and Report variants storage. These properties indicate what storages should be used to save report variants and settings, accordingly. If the storages are not specified, storages indicated in the configuration properties are used. If configuration properties do not indicate specific SettingsStorage objects either, the system storage is used.\n\nA report form contains commands for saving and loading report variants and settings.\n\nIf you need to save additional information in data composition settings or data composition user settings, you can use AdditionalProperties properties of the DataCompositionSettings and DataCompositionUserSettings objects. The AdditionalProperties property is an object of Structure type.\n\nThe user settings of dynamic lists are stored in the storage specified in configuration properties (DynamicListsUserSettingsStorage). If configuration properties do not specify a settings storage, the system storage is used.\n\nThe Auto save user settings property of an attribute that refers to a form of type DynamicList controls the function to automatically save the user settings of a dynamic list. If the property is set to True, user settings are automatically saved when the form is closed and are loaded when it is opened.\n\nA dynamic list form provides the user settings save and load commands. A dynamic list also provides a command to specify standard settings. If this command is executed, the dynamic list will include settings from property List.SettingsComposer.Settings.\n\nThe OnUpdateUserSettingSetAtServer event can be called for a dynamic list in the following cases:\n\n When the user settings editing is concluded (if the settings have been changed).\n\nBelow is a recommended procedure of developing a settings storage:\n\n1. Determine the type of storage to be used (see the beginning of the section). For example, you want to implement a settings storage for configuration form data.\n\n2. Make a list of metadata objects that will use the storage and a list of data to be stored, define the data structure and types. This information helps you select an appropriate metadata object to store the settings.\n\n3. Use information from step 2 to create an object (and its structure) for storing settings. Let us assume the settings will be stored in catalog items. Since in this case the structure of data to be saved is heterogeneous, it is inconvenient to implement separate sets of attributes to store settings from each form; therefore, the settings will be stored in a catalog attribute of ValueStorage type.\n\n4. Create an object of ValueStorage type and implement save and load forms for it. This ensures you can use interactive operations when saving and restoring the settings.\n\n5. Implement event handlers associated with saving and restoring the settings for the newly created ValueStorage object. If you do not perform this action, settings read/write operations will fail. To solve this issue, implement SaveProcessing and LoadProcessing event handlers in the module of the newly created ValueStorage object.\n\n6. The objects selected at step 2 (or in the configuration properties) have their properties filled in, thus indicating what storages will be used to save the settings. In this example you need to fill in the Form data settings storage configuration property with a reference to the object created at step 4.\n\n7. Events handlers associated with saving and restoring settings in application objects are implemented, if necessary.\n\n5.5.12.8. Working with Settings Storage from the Script\n\nThis example reviews how the current user’s settings can be copied by other users of the system. SystemSettingsStorage is used as a source of settings.\n\nThe example below is not complete. It simply demonstrates how to work with standard settings storage.\n\nA list of user names is transferred as an array with the help of the CopySettings() procedure parameter.\n\nThe common forms mechanism makes it possible to use forms accessible from any module of the current configuration. For details on how the form editor works see page 2-937.\n\nIf you want to include a command that would open a common form in the command interface, you can do this by using the Use standard commands property.\n\nThe command opening a common form will be included in the command interface of the subsystems that own the common form.\n\nIf a common form is included in a functional option and the option is disabled, the common form standard command will not be shown in the command interface.\n\nIf you create a common form that will be used as a report form, a report or variant settings, setting the Use standard commands property for this form is not recommended.\n\nA developer can use this branch to create commands that are not object-specific and are used to perform actions on objects which do not use standard commands.\n\nFor a description of the command interface see page 1-83. For a description of commands see page 1-266.\n\nA developer can use this branch to create custom command groups. Location of the created group in the command interface is defined by the command Group property. A command group can be located:\n\nFor a description of the command interface see page 1-83. For a description of commands see page 1-266.\n\nThe common templates mechanism (print forms, report forms, references, etc.) can be used to create print form templates accessible from any module of the current configuration.\n\nFor details on how the spreadsheet document editor works see page 2-996.\n\nThe Designer makes it possible to use graphic images or pictures in a configuration. Pictures may be used in some controls, forms and templates. They may also be called using the 1C:Enterprise script.\n\nIf a picture is used as an icon in a menu, toolbar, spreadsheet document, etc., it is important to specify proper dimensions for the picture so that it displays correctly.\n\nThe following picture sizes are recommended:\n\n Max 9x9 pixels for pictures of an edit field selection button\n\n Max 48x48 pixels for pictures used as subsystem presentations\n\nIf a picture is to be used in several places, its size should be as small as possible.\n\nUse the Configuration Picture Library window to work with pictures. Select Common pictures in the Configuration window and then select All Images from the context menu.\n\nThe picture list maintenance window will open (see fig. 89).\n\nTo add a new picture, press the Add button. A new window will open, where you can select a picture from a file or open the picture editor and create a new picture. You can also use this window to select or change the transparent background for a picture. To select an existing picture, press the Select from file button and select the file containing the existing picture. In the 1C:Enterprise system, you can use BMP, GIF, JPEG, PNG and TIFF picture formats, as well as icons and metafiles (WMF, EMF).\n\nFor pictures used as interface icons (for the recommended picture sizes, see the beginning of the section), it is recommended to use formats that support lossless compression (PNG and GIF), prevent distortion and minimize client/server traffic.\n\nSpecify the name that will be used to select this picture by means of the 1C:Enterprise script.\n\nIt is recommended to use transparent background for a picture to fit well into a control or a form. To do this, when editing the picture select any color that is not used in the picture as a background color, create an image and save the picture. You can specify any color for an existing picture. If the color is transparent, you can see components of the form that are covered by the picture.\n\nTo set a transparent background, click the Set transparent background button. The mouse cursor will change its appearance. Move it to the component of the picture that you want to make transparent and left-click it. The selected color becomes transparent.\n\nThe Set transparent background and Remove transparency buttons are only available for the following picture formats: BMP, JPEG and TIFF. They are not available for pictures of other formats.\n\nYou can also perform similar actions using the Select link in the Picture property. The picture selection window will open.\n\nClick the Edit button to edit the picture. The picture editor will open (for details see page 2-1012).\n\nThe XDTO mechanism is a universal data presentation method that interacts with various external data sources and software systems. For details on how to use the XDTO mechanism see page 2-789.\n\nIn order to import an XML schema from an .xsd file into the XDTO global factory, select the XDTO branch in the configuration tree and click Import XML Schema in the context menu.\n\nOnce the required .xsd file has been specified, the availability of the XDTO packages must be checked in the configuration tree, with the namespaces matching those imported from the file. If these packages are available, a list will be displayed and you will be prompted to specify the packages to be updated (the existing packages are not updated by default).\n\nThe import procedure is then executed, resulting in the addition of new XDTO packages to the configuration tree, while packages specified for update will be updated.\n\nTo export an XML schema corresponding to configuration data types (without consideration of the XDTO packages created in the configuration tree) to an .xsd file, specify the XDTO branch in the configuration tree and execute the Export configuration data XML Schema command in the context menu.\n\nOnce the directory has been selected and the file name specified, the XML schema is exported to the specified file.\n\nTo export an XML schema corresponding to the existing XDTO package to an .xsd file, select the relevant XDTO package in the configuration tree and click Export XML Schema in the context menu (see fig. 95).\n\nThe dumped XDTO package will be checked. If any errors are detected, the relevant messages will be displayed in the message window and the export procedure will be interrupted.\n\nIf the check is successful, you will be prompted to choose the directory and .xsd file name and then the XML schema will be exported to the specified file.\n\nTo check an XDTO package, specify the relevant XDTO package in the configuration tree and execute the Validate package command in the context menu.\n\nAs a result, the XDTO package model will be checked (for a description of check rules see page 2-808).\n\nIf any errors are detected, the relevant messages will be displayed in the message window.\n\nXDTO packages can be edited in the XDTO package editing window.\n\nWhen a new XDTO package is added to the configuration tree, the XDTO package editing window opens automatically.\n\nTo open the editing window for an existing XDTO package, specify the relevant XDTO package in the configuration tree and execute the Open package command in the context menu.\n\nThe XDTO package editing window contains the hierarchical tree of the XDTO package.\n\nThe XDTO package ID containing the corresponding namespace URI is located at the tree's root.\n\nThe first hierarchy level can include the following package elements:\n\n Import directives – a list of import directives. An import directive is a reference to another package containing the types referenced by this package. When you are using the 1C:Enterprise script to work with this XDTO package, this list of import directives will be available as a XDTOPackageCollection object stored in the Dependencies property of the XDTO package;\n\n Value types – a list of XDTO value types stored in the XDTO package.\n\n Object types – a list of XDTO object types stored in the XDTO package.\n\n Properties – a list of XDTO package properties. It represents declarations of objects/values that can be the root items of XML documents, belonging to the namespace URI of this XDTO package.\n\n Each XDTO value type is described by the hierarchical structure and can contain the following items:\n\n○ Pattern describes one XDTO facet of the Pattern type.\n\n○ Enumeration describes one XDTO facet of the Enum type.\n\nEach XDTO object type is described by the hierarchical structure which can contain a set of object properties.\n\nXDTO package properties are edited in the properties palette.\n\nIf the properties palette is open for an XDTO package specified in the configuration tree, it will contain the following properties: Name, Synonym, Comment, Subsystems and Namespace URI. In addition, the properties palette will contain the Package reference which can be used to switch to the XDTO package editing window (see fig. 97).\n\nIf the properties palette is open for the XDTO package specified in the XDTO package editing window (root item), it will only contain the Namespace URI property. This property defines the namespace URI for the XDTO package which owns all types defined in this package.\n\nImport directive properties are edited in the properties palette. For import directives, the properties palette only contains the Namespace property. This property sets the namespace URI for the imported package.\n\nXDTO value type properties are edited in the properties palette.\n\nFor XDTO value types, the properties palette contains the following properties:\n\n Name – a name of the type for a XDTO value;\n\n Base type – a base type for this type of XDTO value;\n\n Variant – a simple type variant (primitive type, list, union). If a value is set, it has to match the Item Type and Union Types values;\n\n Item type – a list item type in cases where the XDTO value type is defined by the list. All facets and Types of Subordinates must be null;\n\n Merger types – a list of types making up a union, in cases where the XDTO value type is defined by a union. Only XDTO value types can become unions. All facets and the Item Type property must be null;\n\n Total digit number – facet of the total number of digits;\n\n Number of fraction digits – facet of the number of fraction digits. XDTO Object Type Properties\n\nXDTO object type properties are edited in the properties palette.\n\nFor XDTO object types, the properties palette contains the following properties:\n\n Name – a name of the XDTO object type.\n\n Base type – a base type for this XDTO object type. It can only be an XDTO object type.\n\n Open – this flag specifies if the XDTO object type is open. This property indicates whether the XDTO object instance can contain additional properties not defined in its type.\n\n Abstract – this flag specifies if the XDTO object type is abstract.\n\n Mixed – this property indicates whether the corresponding XDTO object contains mixed contents. If the Mixed property is set to True, then the Sequenced value will always be True, because mixed contents cannot be modeled without using an XDTO sequence.\n\n Ordered – this flag specifies if the order of items that represent property values strictly corresponds to the order of properties in the XDTO object type. If the Ordered property is set to False, then the input sequence order of XML elements is not controlled and the output is defined by the sequence order of properties, provided that the value of the Sequenced property is not True.\n\n Sequenced – this property shows if an instance of the relevant XDTO object contains an XDTO sequence. This flag has the True value in those cases where the sequence order of the nested XML elements cannot be unequivocally defined by the sequence order of the properties in the type or the relevant XDTO object has mixed contents. Use the XDTO sequence to expressly set the order of items in the way they are represented in the XML document. The order of the nested items corresponds to the order of properties for objects of the types, for which the Sequenced property is set to False. Properties of XDTO Object Type Properties\n\nProperties of XDTO object type properties are edited in the properties palette.\n\nFor XDTO object types, the properties palette contains the following properties:\n\n Name – a property name. Property names should be unique within a single XDTO object type;\n\n Type – a property type. It can be both a XDTO value type and XDTO object type;\n\n Minimum number – a minimal number of property values. The minimal number of property values can take values >= 0. Naturally, the Minimum number value must be less than or equal to the Maximum number value (provided that the Maximum number is not equal to -1);\n\n Maximum number – properties of the XDTO object type can be defined as containing single or multiple values. A property is considered to contain a single value if the Maximum number property is equal to 1. If the value of the Maximum number property is greater than 1, it is considered that this property can contain multiple values. These properties are modeled as lists in the object structure. The Maximum number property shows the maximum number of property values. Maximum number > 1 can be set only for properties represented in XML element form;\n\n Can be empty – indicates whether the property can take an Undefined value. The Can be empty property equal to True can be defined only for properties with the Item form of representation. If Maximum number > 1, an Undefined value is allowed for the property values list item;\n\n Fixed – specifies if the property value is fixed. If this is set to True, the fixed value itself can be obtained through the Default property;\n\n Default – a default property value. The default value type can only be a XDTO value type. In terms of types, this value must be compatible with the property type (i.e. be of the same type as the property or of the inherited type). If a single value is allowed for the property when an XDTO object is created, it takes the default value. For properties with multiple values, a list of values is initially empty, irrespective of the fact that the default value is defined;\n\n Form – is the form of property presentation in XML. It can be Text, Item or Attribute. If the form of presentation is Attribute or Text, the value of the Maximum number property cannot exceed 1. If the property has the Text value, then the value of the Minimum number property will also be equal to 1. Only one property of a separate type can have its form of presentation set to Text, while all other properties must have their form of presentation set to Attribute;\n\n Local name – a local name used for property presentation. For properties with the Text presentation form it is an empty string.\n\nProperties of a global property are edited in the properties palette (see fig. 102).\n\nThe properties palette for a global property contains the following properties:\n\n Name – a global property name. Global property names should be unique within a single XDTO object type.\n\n Minimum number – a minimal number of property values. If Minimum number is 0, the property value might not be set.\n\n Maximum number – a maximum number of property values. If Maximum number is -1, the number of property values is unlimited.\n\n Can be empty – indicates whether the property can take an Undefined value.\n\n Fixed – specifies if the property value is fixed.\n\n Default – a default property value. The lexical representation of the property value must follow the rules of the property type check.\n\n Form – is the form of property presentation in XML. It can be Text, Item or Attribute.\n\n Local name – a local name used for property presentation.\n\nThe Web service mechanism allows to use 1C:Enterprise as a set of services in complex distributed and heterogeneous systems, as well as integrate it with other industrial systems using the service-oriented architecture. For details on how to use the Web service mechanism see page 2-819.\n\nTo add a Web service to the configuration tree, select Common – Web-services and click Add in the context menu.\n\nSpecify the following parameters at the Other tab of the Web service editing window:\n\n Namespace URI – contains URI of the Web service namespace. Each Web service can be uniquely identified by its name and the URI of the namespace to which it belongs;\n\n XDTO packages – a list of XDTO packages with the types that can be used as returned value types for operations and parameter types of Web service operations;\n\n Publishing file name – a name of the Web service description file located at the Web server (for details on Web service publication see \"1C:Enterprise 8.3. Administrator Guide\").\n\nTo get access to a web service, you need to use the address in the following format: <Web server host name>/<Virtual directory name>/ws/<Web service name> or <Web server host name>/<Virtual directory name>/ws/<Web service address>.\n\nSo if a virtual directory is named DemoWS, the web service is named DemoOperationWS in the Designer while the address is DemoWorkWS, and this web service can be accessed using two addresses simultaneously (from a local machine): http:// localhost/DemoWS/ws/DemoOperationWS or http://localhost/DemoWS/ws/DemoWorkWS.\n\nThe tab also contains the Module button that opens a Web service module for editing.\n\nEvery Web service described in the configuration tree can contain a set of operations. Each operation must have a corresponding export procedure, described in the Web service module.\n\nAdditionally each operation can contain a set of parameters with names corresponding to the names of the procedure parameters describing this operation.\n\nUse the Operations tab to add Web service operations. Use the properties palette to edit the operation properties.\n\nReturn value type – a value type returned by the Web service operation. It can be an XDTO value type or XDTO object type.\n\nValue can be blank – indicates whether the returned value can have an undefined value.\n\nIn transactioned – indicates whether or not the code of the Web service module will be executed in the transaction. If the property is set, the transaction will start automatically when the Web service is called and upon completion, the transaction will be either submitted or rolled back (depending on the results of execution). If the property is not set, the transaction is not started when Web service module execution starts.\n\nMethod name – a name of the Web service module procedure that will be executed when this property is called.\n\nUse the Operations tab to specify parameters for a Web service operation. Use the properties palette to edit the parameter properties (see fig. 105).\n\nValue type – a value type of the Web service operation parameter. It can be an XDTO value type or XDTO object type.\n\nValue can be blank – indicates whether the operation parameter value can take an undefined value.\n\nTransfer direction – defines the direction of data transfer using this parameter. Available values:\n\n Input – means that the parameter can be used for data transfer to the Web service only;\n\n Output – means that the parameter can be used for both transfer and retrieval of data to/from the Web service.\n\nIf you want to use types defined by the 1C:Enterprise system in the Web services (e.g., in the parameters and values returned by the operations), you need to define XDTO packages in the configuration and specify a set of platform packages that contain these types, in the relevant lists of imported packages (the Import directives property). You can find namespace URI to specify a particular type in the relevant article on an object of this type in the Syntax Assistant.\n\nWeb service publication is described in \"1C:Enterprise 8.3. Administrator Guide\".\n\n1C:Enterprise can use third-party Web services by using static references created in the configuration tree.\n\nTo add a static reference to an external Web service to the configuration tree, select the WS reference branch and click Add in the context menu or the Actions menu.\n\nYou should type the URL of the added Web service description in the opened window, e.g. http://users.v8.1c.ru/ws/products.1cws?wsdl.\n\nWhen you add a WS reference, note that 1C:Enterprise deletes the final character \"/\" from the URL entered. 1C:Enterprise therefore considers the URL http://localhost/ws/ws-service/?wsdl and the URL http://localhost/ws/ws-service?wsdl to be identical.\n\nThe hierarchical structure of a WS reference can be viewed in the WS reference viewing window. Values of the reference element properties can be viewed in the properties palette.\n\nIn order to open the WS reference viewing window, select the required WS reference in the configuration tree and click Properties in the context menu. Then use the WS-reference property in the properties palette to open the WS reference viewing window.\n\nThe viewing window contains the hierarchical structure of the WS reference, displayed as a tree.\n\nThe first hierarchy level can include the following elements:\n\n Data model – contains a list of XDTO packages describing the structure of the types used by the Web services to which this WS reference refers;\n\n Web-services – a list of Web services to which this reference refers.\n\nYou can view data model structure and properties in the same way as you view XDTO packages (see page 1-236); however, you cannot edit properties of packages displayed in the WS reference viewing window.\n\nYou can view WS reference structure in the same way as you view Web services; however, each Web service has a list of supported connection points that also have a list of operations and their parameters.\n\nUsing different Web service connection points allows you to run operations using different protocols.\n\nStyle elements configuration objects are used to ensure consistency in formatting various form elements in cases where 1C:Enterprise automatic formatting is not sufficient. For example, you might want to highlight labels in configuration forms using the same color. In this case it is convenient to create a style item, assign it a color and use the created item to set the text color for a form element.\n\nStyle elements can be of three types:\n\nSystem style items cannot be selected as values of custom style items.\n\nThe font selection dialog box used at the thin client contains a list of fonts that includes fonts installed at the machine and special fonts enclosed in angle brackets (<>). If you select <Font>, the system will use a font of the 1C:Enterprise interface, while all other fonts will correspond to the fonts existing in the operating system. A list of <Font> sizes starts with \"<>\". Selecting this font size (its value is 0) means that the font size will match that of the 1C:Enterprise interface. The font effects (bold, italic, etc.) default to the style settings, but can be customized without any limitations. If you select another font, all changes to the font size and effects are reset to the default values.\n\nYou can access the style item value programmatically, using the Value property.\n\nLanguages configuration objects are used to create program interfaces in different languages. Each configuration object of the Languages type has a separate reserved string for the metadata attributes that can be represented in different languages.\n\nLet us review a sample form for the Items catalog item. For the Russian language the form labels look like the following:\n\nIf the Languages branch contains more than one object (e.g., Russian and English) and you want to change the language, select Configuration – Design Language. Select the configuration viewing language in the opened language selection window.\n\nThe same can be done using the language selection button located on the status bar to the right of the CAP and NUM buttons (the right bottom corner of the main Designer window).\n\nThe Designer replaces label text with the text in the selected language.\n\nOf course, the label text has to be entered in advance for each control. To enter the text in the properties palette of the Label control, click the magnifier button in the Title property (Text or Synonym, depending on the type of control), see fig. 113. The Strings in Different Languages window will open.\n\nA configuration can have any number of languages. However, there is no need to create Languages objects \"just in case\", since they may be created at any time.\n\nLanguage code property contains the language code, e.g., EN for English.\n\nIf two or more Languages objects are defined in the configuration, the text editing button (a magnifier icon) will be displayed for the Synonym and Title properties of the control.\n\nThe first language object is created by the system according to the language (country) selection for a new infobase.\n\nTo create a text representation of an attribute to be displayed in the form, the following rules are used:\n\n The title of the displayed object is retrieved in the configuration language of the current user. If the title is specified, it is the one that is used.\n\n The system attempts to retrieve the synonym of the displayed object in the configuration language of the current user. If the synonym is specified, it is the one that is used.\n\n Subsequent actions depend on the type of the displayed object:\n\n○ For standard attributes, a representation in the platform localization language is retrieved;\n\n○ For objects created by the application developer, the object name is used as it is specified in the configuration (including its language).\n\nIf the language code in the Language code property is changed, texts in the Synonym or Title properties will be \"lost\" (they will be stored for the previous code value). The texts will be \"restored\" when the previous code value is specified.\n\nFor the purpose of text editing and localization (creating an interface in a different language), use the Edit interface texts mode (see page 2-1021).\n\nIf the application is to be used on mobile devices, language codes shall be specified as per ISO 639 (http://www.iso.org/iso/home/standards/language_codes.htm). Otherwise, a warning will be displayed during the configuration check.\n\nMost configuration objects have the following properties which appear in the General category:\n\n Name: The name of the configuration object. The name must consist of a single word, begin with a letter and contain no special characters other than underscore (\"_\"). The 1C:Enterprise script tools access and manage configuration object by its name. Names of configuration objects must not be identical to the reserved words of a query language (see page 1-445 for a list of reserved words).\n\n Synonym: In addition to the name, you can also specify a synonym. If the configuration is to be used in different languages, synonyms in the languages used should be specified. When working with the 1C:Enterprise system, a synonym will be displayed in various selection lists, window titles and label texts, when interfaces are generated, taking the current language into account. A synonym has no restrictions on the use of characters. If no synonym is specified, the name is selected.\n\nThe name or synonym displayed to the user are also called the presentation of the configuration object.\n\n Comment: An arbitrary character string. As a rule, it's drilled down and explains the name of an object. When shown in various lists (for example, in the list of catalogs for selection of the desired catalog), a comment is shown in parentheses immediately after the presentation of the configuration object.\n\nVarious object presentations are allowed for many configuration objects. This functionality allows the developer to set a presentation of standard commands, their tooltips and form titles.\n\n○ This is used in a standard command presentation (creation of an object).\n\n Extended object presentation (for a register – Extended record presentation) is used to generate a title for the object form. For example, Organization account.\n\n○ A name for a list of objects (e.g., Accounts).\n\n○ This is used in a standard command presentation (a command that opens an object list).\n\n Extended list presentation is used to generate a title for the list form (e.g. Organization accounts).\n\n Extended presentation – a title of a report or data processor form (e.g., Report on mutual settlement of accounts).\n\n Explanation is used to generate tooltips for standard commands (e.g., Accounts of my organizations).\n\n Picture – a picture that represents a subsystem in the sections panel.\n\nPlease note that you only need to fill in the properties associated with the object and list presentations if you want to specify more information in addition to the data displayed by default.\n\nFor example, you have a Goods catalog (Name of the metadata object is Goods, Synonym of the metadata object is Goods) that can contain goods and services as its items. However you want to use singular in command texts (\"Create product\") and do not want to include services data as it makes commands longer. At the same time, you want to show the user that the relevant object form can be used to edit both goods and services. In this case you can enter Product text in the Object presentation property and Product (service) in the Extended presentation property. Then the command for creating a Goods catalog item will look like Product: Create, while the form will have a Product (service) title.\n\nFor details on which of the above properties belong to particular metadata objects see page 2-1195. You can also read about the rules of generating texts for standard commands, command tooltips and form titles.\n\nThe standard data presentation provided by the system may be unacceptable for the user. This can happen, for example, when the system is operated by users speaking different languages and system objects contain all the necessary information in different languages as well. For instance, let the products have two names: in Russian and English. But the text should be displayed depending on the session localization code. In addition, the presentation should be generated in the required language in every location where the object presentation is formed: in a dynamic list, report, etc.\n\nTo implement this, the developer can use a special feature which allows him to define the attributes involved in generating the presentation and to describe an algorithm based on which the object presentation will be generated.\n\nThis is available for the following configuration objects:\n\nThe presentation is created in two steps: defining the attributes involved in generating the presentation and then generating the presentation itself.\n\nThe attribute list is defined through the PresentationFieldsGetProcessing event handler in the respective object manager. The handler is called during the first attempt to get the presentation of a selected object, and the result is saved for the current session. Names of attributes that will be involved in generating the presentation should be specified in the Fields array of this handler. If the StandardProcessing parameter in the handler is set to the True value, then after the handler completes its operation, the Fields array will be cleared and filled with the fields used to create a standard presentation of this object. If not, the system will only use the values put into the Field array.\n\nThe examples below are not complete. They simply illustrate how to work with custom presentations.\n\nFor instance, the Goods catalog has the following attributes: RussianDescription, EnglishDescription and Article that are to be used in generating a presentation. In this case the handler of the getting presentation fields (in the Goods catalog manager module) will look as follows:\n\nWhen it is necessary to get a presentation, the system calls the PresentationGetProcessing event handler in the respective object manager. The values of the attributes involved in generating the presentation are passed to this handler.\n\nThe program code located in this handler generates a presentation text.\n\nThe PresentationGetProcessing event handler is called whenever the presentation of any infobase object is required. Redundant data or incorrect data selection for generating the presentation can significantly slow down system operation.\n\nThe PresentationGetProcessing event handler creates the presentation and returns it via the Presentation handler parameter. The data required to generate the presentation is passed through the Data parameter. The Data parameter is a structure where the key is the attribute name and the value is the value of the attribute for the current object. If the StandardProcessing parameter is set to True, the system will attempt to generate a standard presentation for the current object based on data passed. In case the Data parameter contains no attribute required to generate a standard presentation, then the presentation will be an empty string.\n\nLet us review a sample creation of a presentation for the Goods bilingual catalog.\n\nPlease note that a 1C:Enterprise script error in the PresentationGetProcessing handler may sometimes lead to abnormal termination of application.\n\nIf you need to override interface properties (such as a synonym, fill checking, etc.) for standard attributes (e.g., Code, Description, Parent) and standard tabular sections (e.g., ExtDimensionTypes, BaseCalculationTypes) of application objects at the configuration level, you can set up these properties.\n\nTo do this, you can use commands that open lists of standard attributes and tabular sections in the properties palettes of certain objects (see fig. 115). These commands are available for the objects that own standard attributes and tabular sections.\n\nYou can use the properties palette to override some properties of standard attributes so that they fully meet the requirements of the application task at hand. For example, you can set Contractor as a synonym for the Owner property of the Accounts catalog. Then this attribute (Owner) will be represented as \"Contractor:\" in all forms by default.\n\nIf properties of a standard attribute or tabular section are not specified, default properties of standard attributes are used instead.\n\nA standard attribute has virtually the same set of properties as any other attribute; however, you cannot modify the following:\n\nIf a standard attribute has a description, its name remains unchanged, i.e. it does not change calls to the attribute from the 1C:Enterprise script and the query language.\n\nPredefined data means the items of application objects created in Designer. They can be called directly by name, without a preliminary search required. If a certain data element will be constantly needed and will require simple access from program code, this serves as a reason to create predefined data. For instance, the predefined element Service can be created in the Goods catalog. To call this element, execute Catalogs.Goods.Service. Individual elements and groups of elements may be predefined. Groups can be created if predefined elements are created in hierarchical objects, such as a hierarchical catalog. Predefined data can be created:\n\n For charts of accounts (see page 1-652)\n\n For charts of characteristic types (see page 1-309)\n\n For charts of calculation types (see page 1-665)\n\nWhen a predefined element is created in Designer, the possibility to create or update the data elements related to it is defined by a combination of the following two values:\n\n Configuration object property value PredefinedDataUpdate. Is set in Designer;\n\n Object property value in the infobase. Use 1C:Enterprise mode and methods GetPredefinedDataUpdate() and SetPredefinedDataUpdate () to obtain and set the value for this property.\n\nThe property can have three values:\n\n Do not update automatically: in this case the system does not create or update a data element when predefined data is created or modified. However, it should be noted that if such a property is set for a configuration object, an exception may be generated when predefined data is called since a data element connected with a predefined element is absent;\n\n Update automatically: in this case, the system automatically creates new data elements (or updates the existing ones) for new (or changed) predefined data;\n\n Auto: the system defines the need for an update automatically. No update is performed in the following cases:\n\n○ If the configuration object properties (metadata) have the Predefi- nedDataUpdate property set to Do not update automatically; the value set in 1C:Enterprise mode is irrelevant.\n\n○ If the configuration object properties (metadata) have the Predefi- nedDataUpdate property set to Update automatically, and Do not update automatically is set via method SetPredefinedDataUpdate().\n\n○ If Auto is set in the metadata and 1C:Enterprise mode, and the action is executed in the subordinate node of a distributed infobase (see page 2-772).\n\nThe action to be taken by the system is defined via the AND operation between a configuration object property and a property of an object specified in 1C:Enterprise mode. It should be remembered that Auto values do not participate in defining an action (create or do not create). First, they are resolved into one of two values: Do not update automatically or Update automatically, and these values are then used in the AND operation.\n\nA data element is connected to a predefined data element via PredefinedDataName. This property facilitates the following:\n\n Connecting a predefined data element with a data element. To do this, assign the name of a predefined data element to be connected with data to the PredefinedDataName property:\n\nThis operation maps a predefined Service item of the Goods catalog to a data item named Delivery service.\n\nWhen an object is written, the system checks that an infobase contains no other data element with exactly the same name as this predefined element and set to the value with which the data element is written.\n\n \"Disconnect\" a data element from a predefined data element. Assign an empty line to the PredefinedDataName property and write the element:\n\nIf you try to call the Catalog.Goods.Service predefined element after the example above is executed, an exception will be generated.\n\nTherefore, changing a data element related to predefined data includes two steps:\n\n The existing data element is disconnected from a predefined element.\n\n A new data element is connected to a predefined element.\n\nThere are three ways to create data elements connected to predefined data:\n\n Automatically, during infobase restructuring. This happens in the following cases:\n\n○ The automatic creation and updating of predefined data are allowed; ○ Predefined data have been created in this data area or in an infobase.\n\n Automatically, when the user first opens the table that stores configuration object data. Predefined elements will only be created if such an operation is not prohibited.\n\n With a script, by specifying PredefinedDataName when a data element is created. This method can be used if the automatic creation of predefined elements is prohibited in the configuration object properties.\n\nData connected to predefined data is updated if the automatic updating of predefined data is allowed, predefined data is connected to real data and predefined data is changed in Designer. In all other cases, information entered in Designer will not be transferred to an infobase.\n\nThe change of order of predefined elements in a chart of accounts and a chart of characteristic types in the connected data is not handled, i.e. the order of data elements will be the same as they are set in metadata. The data entered by the user (not the predefined data) will be located after the predefined data.\n\nIf a predefined data element is deleted in Designer, the following will happen:\n\n A data element connected to a predefined data element will be marked for deletion.\n\n The corresponding entries will be deleted from an ExtDimensions list of an element from the chart of accounts.\n\n The corresponding entries will be deleted from the lists of leading, basic, and displacing calculation types.\n\nIf the automatic updating of predefined data is disabled in the application, deleting a predefined element changes the related data object (if applicable). PredefinedDataName property value is replaced with #xxxxxxxx-xxxx-xxxxxxxx-xxxxxxxxxxxx, where xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx is a unique deleted metadata element identifier.\n\nAs a rule, the PredefinedDataName property cannot be assigned a name of the type specified above. However, there are two exceptions:\n\n If the DataExchange.Load property is set to True when a data object is written;\n\n If an existing object in the database for which such name is already specified changes.\n\nWhen working with a distributed infobase, predefined elements are transferred together with the configuration. Data elements connected to predefined data are transferred normally, via an exchange plan. However, no predefined data will be created automatically in a peripheral infobase. For a detailed description of the reasons, see page 1-254.\n\nIf data connected to predefined elements has been received in the subordinate node before the configuration with connected predefined elements, data and predefined data will not be connected automatically. To do this, a user will have to dump the required data elements from the central infobase into a peripheral infobase.\n\nIf an initial image of the remote infobase is created before users have started working with the main infobase, use the PredefinedDataInitialization() special method to create predefined elements and automatically move them to the peripheral infobase. This method should be called before an initial image is created.\n\nIf a generic data exchange mechanism is used, the following should be taken into account:\n\n When writing a data object that is a predefined object in the source infobase, the system checks whether the same predefined data name exists in the type forming the configuration object. If such name already exists, the object will be loaded without any changes. If there is no such name, the PredefinedDataName property will be cleared in the object during loading.\n\nFor instance, a common data exchange between similar infobases is performed. Each infobase includes a Nomenclature catalog. Each infobase of this catalog contains a predefined Service element. References to these data objects differ.\n\nIn this scenario, the following happens during loading: the system detects a Service predefined element in the destination infobase and performs loading with the PredefinedItemName property preserved. This is possible, if the DataExchange.Load property is set to True before the item is written. Otherwise, an exception will be thrown.\n\nHowever, if you try to call the Service predefined element in the destination infobase, an error will occur, as the system cannot have two objects connected to the same predefined element.\n\nSuch a situation should be avoided. The application developer shall handle the attempt to load a data object with a similar predefined data name on his or her own.\n\n When writing a data object whose predefined data name references a remote element (has type #xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx), the element will still be written. The system will not allow two objects referencing the same predefined remote element (that have the same predefined data name value) to be written. The only exception is the case when the DataExchange. Load property is set to True before writing the element.\n\nFor guidelines on working in an infobase that features data separation, see page 2-1229.\n\nYou can use the String input property to specify the attributes to be used in the search for application objects (catalogs, documents, charts of characteristic types, charts of accounts, charts of calculation types, register, business processes and tasks, exchange plans). If input by string is enabled (the relevant attributes are set), it's allowed to enter information from the specified object attributes in the text box, rather than make a selection in the object form.\n\nFor example, you have a Nomenclature catalog with multiple products that start with Bosch. By entering bos in the nomenclature text box you can obtain a list of goods that start with this word (see fig. 116).\n\nYou can use the following attributes to perform searches:\n\n Code and Description for catalogs, charts of characteristic types, charts of accounts, charts of calculation types and exchange plans;\n\n Number and Description for business processes and tasks;\n\n Attributes of the Number or String type with their Index property set to Index or Index with additional ordering. An example would be the text box for input of article, barcode or TIN.\n\nTo generate a list of attributes, press the selection button and in the dialog box that opens move the fields for which input by string is permitted to the left-hand list.\n\nFor multiple fields, specify the order. When you search for a string, the search will scan the fields in the same order as their order in this dialog box. For example, for a Nomenclature catalog item, you can enter items by Code or by Part #. When the value of an item's code matches the value of another item's Part #, these values will be listed in the order in which they are specified in the settings.\n\nWhen you search for data (use input by string), data access restrictions are applied (see page 1-188).\n\nWhen entering data into text box, you should know some features of selection lists.\n\nIf the entered text allows the system to expressly identify the object wanted by the user, it inserts the object automatically in the text box.\n\nIf the text entry results in finding multiple objects that start with the entered text, a drop-down list of these objects is displayed (up to 50 items). When entering the text, you can navigate through the list using the Up Arrow and Down Arrow buttons, while continuing to enter the text in the text box. In this case you can select the item you want and confirm the selection by pressing Enter or Tab.\n\nIf a developer is not satisfied with the procedure of selection list generation, it can be overridden.\n\nTwo methods are available:\n\n In the form directly: In this case a special procedure of selection list generation is only used in this particular field;\n\n In the module of the relevant object manager: In this case a special procedure of selection list generation is used for all text boxes used to enter values for the object.\n\nIf a field is linked to data with an application object reference type (for example, CatalogRef, EnumRef, etc.), you can generate a selection list in the manager window of the corresponding object or by using form module handlers. In other cases you can generate a selection list only by using form module handlers.\n\nFor details on the latter method see below.\n\nTo generate a selection list programmatically, you have to override the ChoiceDataGetProcessing event handler of the object manager. The handler receives a set of parameters that define conditions of selection list generation.\n\nThe set of parameters is a structure containing the following items:\n\n A search string: A string containing the text entered by the user in the text box. This parameter is always used.\n\n Filter: A structure that describes the filter in the same way as the Filter form parameter for extending the form for the dynamic list. This parameter is always used.\n\n A property that indicates the group and item selection mode (it is passed for hierarchical lists only).\n\n In addition, the structure receives items set in the following form element properties: Choice parameter links and Choice parameters.\n\nThe handler also receives a variable it uses to return the generated selection list and the StandardProcessing parameter that determines the system behavior after the handler completes its work.\n\nIf the developer sets StandardProcessing to False, the complete selection list must be generated by the developer (considering it can contain up to 50 visible items).\n\nIf the standard processing flag is set to True, the system can generate the selection list, but you can modify parameters selection (by adding additional filter values, changing the group and item selection mode, etc.).\n\nIf the selection list is generated by the system, it applies the relevant data access restrictions (see page 1-188).\n\nThe examples you can see below are not complete. They only demonstrate various methods of selection list retrieval.\n\nThus, when a user enters any text, the following code generates a selection list consisting of three goods with 00000002, 00000003 and 00000004 codes.\n\nIn the example below the filter generated by the text box is extended with an additional filter that excludes services from the selection list. The selection list is generated by the system.\n\nThe last example is a simplified case of filter implementation by using the 1C:Enterprise script only. This code filters goods with names that start with a user-entered string.\n\nPlease note there is another method of selection list generation: you can pass a structure with special content as a value list item instead of a reference to the object to be found (as in the examples above).\n\nThis structure consists of the following items:\n\n Value: A value of the selected item. The structure item with this name is mandatory.\n\n DeletionMark: A flag specifying that the selected value is marked for deletion in the infobase. The structure item with this name is optional.\n\n Warning: A string with the warning text displayed by 1C:Enterprise when an item of this kind is selected from a value list. The structure item with this name is optional.\n\nIf the DeletionMark property in the structure is set to True and the Warning property is not set, the system auto-generates the warning text. If the Warning property is set, it is the one to be displayed. Please keep in mind that the Warning text ends with a question Continue? and has two options to select from: Yes and No.\n\nBelow you can see a modified code from the previous example where warehouses with the DontUse attribute set to True have the following warning generated:\n\nThis warehouse should not be used.\n\nYou can also include both Structure type values and ordinary values in a single selection list.\n\nIf presentations of items (including structure items named Value) are not expressly specified, they are retrieved automatically.\n\nForms are objects created specifically for entering and viewing information and for managing various processes. The program uses forms to ask the user for information it needs to continue processing or to display information the user can view and edit.\n\nIf you need to ensure the configuration can work in both the ordinary and managed modes, you can use additional forms of metadata objects. 1C:Enterprise automatically picks the form corresponding to the current operation mode.\n\nThin clients and web clients only work with managed forms. It means the following:\n\n If both of the assigned forms are managed, the form marked as the main one is displayed;\n\n If only one of the assigned forms is managed, it is displayed;  If no managed form is assigned, it is auto-generated.\n\nThe thick client picks the form that is the most appropriate for the current run mode.\n\n If no forms are assigned, the following is generated: ○ An ordinary form in the ordinary mode; ○ A managed form in the managed mode.\n\n If only one form is assigned, it is the one to be opened;\n\n If two forms are assigned (an ordinary and a managed form), the following is opened:\n\n○ An ordinary form in the ordinary mode; ○ A managed form in the managed mode.\n\n If two ordinary forms and two managed forms are assigned, the form marked as the main form is opened.\n\nYou can use a duplicate set of forms if you switch your configuration from the non-managed to the managed mode or if you want to make configuration functionality partially available at the web client (or the thin client). In this case you can implement the required features in the managed forms and mark them as additional forms. Then the right (managed) forms will be used in the web client (thin client) mode.\n\nHowever, you should remember that default form retrieval in the thick client is affected by the following configuration properties: Use managed forms in ordinary application and Use ordinary forms in managed application:\n\n If the Use managed forms in ordinary application configuration property is set to False, retrieving a default form in the ordinary mode at the thick client must always result in an ordinary form. If neither the main form nor the additional form is ordinary, an ordinary form is generated. When specified, however, the default constant form (Default Form property) is used regardless of whether Use managed forms in ordinary application is checked or not.\n\n If the Use ordinary forms in managed application configuration property is set to False, retrieving a default form in the managed mode at the thick client must always result in a managed form. If neither the main form nor the additional form is ordinary, a managed form is generated.\n\nIf a form opens that is automatically generated by the system and the client application run mode is different from the run mode set in the Default run mode configuration property, the object forms and recordset forms are opened only in Read only mode. Generate commands will not be included in list forms and object forms and Create commands will not be included in list forms, if to run these commands the system needs to automatically generate a form applicable for the current run mode and the client application run mode is different from the mode set in the Default run mode configuration property.\n\nIf a managed application is selected as default run mode, a form purpose can be selected for each managed form of the application. The form property Use purposes is equivalent in terms of content and usage to a similar configuration property (see page 1-163). Form editor behavior depends on a cross-section of multiple configuration purposes and the specific form.\n\nIf such a cross-section has no value, Personal computer is specified:\n\n The properties of attributes, parameters, commands, and elements that are not supported by a mobile platform are unavailable in the property palette.\n\n Editing the context menu of a form item is unavailable.\n\n Editing an extended tooltip of a form element is unavailable.\n\n Form fields that are not supported by a mobile platform are unavailable (see page 2-919).\n\n The dynamic list settings editor does not support expanding available fields (this is due to the fact that a dynamic list on a mobile platform only works with one table).\n\nIf a purpose of the form does not include Mobile application, it is not included in the mobile application configuration.\n\nYou can perform operations with a specific metadata object using this object's commands. Please note that non-parameterized commands of the object are available in the command interfaces of subsystems that include this metadata object. If a command is parameterized, it is available in forms that contain form attributes (including top-level subordinate attributes of the main form attribute) of the same type as the command parameter type.\n\nCommands require command execution procedures. To write these procedures, use the command module for where you need to implement CommandProcessing() handler. This procedure must be preceded by the &AtClient directive because the command is executed in the client application. However, other procedures and functions in the command module can be preceded by other directives if it is required for command execution. For details on compiler directives see page 1-161.\n\nA command module could contain, e.g., a procedure that opens a report form with a preset parameter to print out a specific account card or a procedure that opens a product list form with a predefined filter by product type. If a command belonging to the Navigation panel group should open the same form in different tabs, you should specify a unique key or a unique form parameter to receive (or open) a form.\n\nIf a command is located in the main application window navigation panel (see page 1-83), re-selection of this command will not lead to its repeated execution. This applies both to standard commands and commands created in the configuration.\n\nYou can fill in attributes of new objects when you create them interactively (except when they are copied), use the input-on-basis procedure, apply OpenForm()/ GetForm() methods or explicitly call the Fill() method. You can fill in attributes with the following values:\n\n Specific values indicated in the attribute properties in the configuration (fill-in values);\n\n Values specified by the developer in the Filling() event handler.\n\nFill-in processing is implemented for the following objects:\n\nThe Filling() handler uses the FillingData parameter to retrieve the filling data. Depending on how you call the handler, the FillingData parameter can take on different values:\n\n Generation based on another object: A reference to the source object is passed as a parameter value. In this case the FillingData parameter is a reference to the database source object.\n\n Selection from a list with a filter applied: The passed parameter value is a structure that contains filter items with their comparison type set to Equal to or In list (the list has a single value). When a new document is created in the document journal form, items of the journal column filter are preliminarily converted so that the FillingData structure item is named after a document attribute rather than a journal column.\n\n Input of a new object or record without applying a filter: The parameter value is Undefined.\n\n Input of a new object or record using a global command: The parameter value is Undefined.\n\n Execution of OpenForm()/GetForm() methods from 1C:Enterprise script: If OpenForm()/GetForm() methods result in a new object form, a Structure type value of the FillValue form parameter is passed as a parameter value to the FillingData handler. If the FillValue parameter is not specified in the form parameters, the handler parameter value is set to Undefined.\n\n Calling the Fill() object method from 1C:Enteprprise script: The passed parameter value is the information passed as a Fill() method parameter.\n\nWhen a new object is created interactively by copying, this operation is processed in the OnCopy() handler of the corresponding object.\n\nIf attributes are filled in from the filling data, this process is affected by the Fill from filling data property of the metadata object attribute. If this property is set to True, the attributes are auto-filled by the system from the filling data. If the property value is False or the filling data do not contain the required value, the system attempts to fill in the attribute using the Fill value property.\n\nA developer can control how both custom and standard object attributes are filled in. For example, the developer can disable auto-filling the Parent standard attribute with the current group.\n\nIf the StandardProcessing parameter equals True after the Filling() handler is executed, the system auto-fills the attributes (including the standard attributes) that have their Fill from filling data or Fill value property set in the metadata and are not filled in the handler (their value equals the default value for the attribute type). The Fill from filling data property is automatically set by the system for certain standard attributes of specific objects:\n\n For charts of accounts, charts of characteristic types and charts of calculation types – Parent attribute;\n\n For standard attributes of other objects this property is not set by default. The system retrieves data for filling standard attributes from data attributes with the same names passed in the FillingData parameter.\n\nThe filling data are passed to the created object form as a standard parameter of the FillingValues form and are later passed from this parameter to the object as an extension of the form to be filled. You can also set the FillingValues form parameter of the new object programmatically; in this case all actions characteristic of interactive object creation are performed.\n\nIf you create a new object programmatically, filling is not automatically called by the system. Instead, you should call the filling handler using the Fill() method.\n\nFill value: This property of a metadata object attribute can be used to specify a default value the attribute takes on when an object is created interactively.\n\nAttributes can be filled in from the Fill value property after the Filling() handler is called. The attribute is filled if its value has not been filled in previously (by the Filling() handler or the standard filling procedure).\n\nThe value types matches the attribute type. Please note that you can specify primitive types or predefined data as values for this property.\n\nData in the information system can be entered using multiple methods which are frequently invalid. Therefore, a lot of effort is invested in validating the entered data and notifying the user if the data are invalid at the solution development stage.\n\nThe platform supports auto-check of the specified application object and form attributes and enables module checks.\n\nThe platform auto-checks filling for the following objects:\n\n catalogs, documents, reports, data processors, charts of characteristic types, charts of accounts, charts of calculation types, business processes and tasks:\n\nAttribute fill checking is similar to the ValueIsFilled() function. In tabular section fill checking a tabular section is filled if it contains at least one row.\n\nYou can call a fill check using one of two methods:  Call the FillCheck() method (for an object or a form);  Use automatic calls.\n\nIf the Compatibility mode is set to Version 8.1, automatic fill checks are unavailable.\n\nBy default the properties listed below are set to Display error for the following standard attributes:\n\nFill auto-check is called by a form extension before all objects, except document, business processes, report and data processors, are written interactively. The following behavior is defined for the following objects:\n\n○ Fill check is called by the form extension before posting if the Post property is set to Enable;\n\n○ Fill check is called by the form extension before writing if the Post property is set to Disable;\n\n For business processes fill check is called by the form extensions before the start;\n\n For report fill check is called by the form extension when the Create button is pressed;\n\n For data processors fill check is called by the form extension in cases when buttons related to standard form commands are pressed: OK, Yes, Retry, Ignore.\n\nIf an attribute is the main form attribute with one of the following types: CatalogObject, DocumentObject, ReportObject, ChartOfCharacteris- ticTypesObject, ChartOfAccountsObject, ChartOfCalculationTypesObject, BusinessProcessObject, TaskObject, a fill check is also called for its value.\n\nFor the system to call the fill check, the form where you work should have its Check fill automatically property set. In this case the system calls the form's FillCheckProcessingAtServer() handler first and then calls the object module's FillCheckProcessing().\n\nIf the form's Check fill automatically property is set to True when you execute standard commands, such as Write (Post for documents, etc.) or standard form commands (OK, Yes, Retry, Ignore), the FillCheck() method is called. Otherwise the fill check is called neither for the form nor for the object.\n\nThe following procedure is used for fill checking:\n\n A list of form attributes that can be checked for filling and have their FillChecking property set to ShowError is created. This list does not include attributes of the type that does not support fill checks (e.g., CatalogObject); however it includes the main form attribute name.\n\nForm attributes disabled by functional options will not be included in an automatically generated list of attributes.\n\n The form's FillCheckProcessingAtServer event handler is called; a developer can use it to describe a custom fill check algorithm or modify the list of attributes to be checked. The created list of attribute names is passed to the handler. You can only add attributes to the list in the handler if they belong to the types listed above (that support fill checks in forms) or are the main attributes. Adding object-type attributes (e.g., CatalogObject) to the list raises an exception during the subsequent auto-check. Adding a non-existing attribute name to the list raises an exception during the subsequent auto-check.\n\n When the event handler execution is completed, the fill check procedure gets a list of the checked attributes (the list might have been changed by the handler). The system analyzes the list of attributes and checks each attribute for filling. If an attribute is a main object-type attribute (e.g., Object of the CatalogObject type), the fill check is called for the object. If an attribute is an object-type attribute, but is not the main attribute, an exception is raised.\n\nA developer can modify the check process by defining a FillCheckProcessing event handler in an object, record set or form module.\n\nThis allows the developer to gain full control over fill checks. The Chec- kedAttributes parameter is used to pass an array of parameters that are selected for the check in the Designer to the handler. The developer can modify this array in any way:\n\n Delete the attributes that undergo custom checks or do not need to be checked now;\n\n Add the required attributes that need to be checked for filling.\n\nIf the developer does not want to use the standard check procedure, he or she can use a custom algorithm instead and implement the UserMessage object to notify users of the detected issues.\n\nIf the check process displays error messages to the user, the Cancel parameter should be set to True for the platform to know that the current action cannot be completed.\n\nThe CheckedAttributes event parameter contains attribute names in the following formats:\n\nIf attributes are a part of functional options (see page 1-211) without parameters, option values are accounted for during fill checks. If the functional option is enabled, the attribute is added to the list of checked attributes; otherwise the attribute is not added to the list. It means the disabled field is not passed to FillCheckProcessing in CheckedAttributes parameters.\n\nIf attributes are a part of functional options with parameters (see page 1-211), they are always included in the list of checked attributes (CheckedAttributes parameter). In this case if you want to delete an attribute from the checked attributes list, you should use the FillCheckProcessing handler. First, you need to retrieve a value of the functional option by specifying the required object data as parameters.\n\nThe following properties of configuration elements have an impact on mark incomplete display:\n\n MarkIncomplete property of a form element (it can only be modified programmatically).\n\nThe Automark unfilled property of a form element can take on the following values:\n\n Auto: The mark is displayed if the form attribute or the metadata object attribute has its Fill check property set to Display error and the attribute associated with the form element is empty.\n\n Yes: The mark is displayed for an unfilled item regardless of the Fill check property value.\n\n No: The mark is not displayed for an unfilled item regardless of the Fill check property value.\n\nIf an incomplete mark is not shown when a text box is interactively changing, MarkIncomplete property values do not change. Marking is shown again (if necessary) after interactive editing in the text box is completed or the value is set. The system can change the MarkIncomplete property if the AutoMarkIncomplete property is set to True:\n\n if the field value is not entered, the MarkIncomplete property is set to True;  if the field value is entered, the MarkIncomplete property is set to False.\n\nIf the MarkIncomplete property is set for a table with no rows, the first row is highlighted; if, however, the table is filled, all rows are highlighted.\n\nAdditionally the incomplete mark is displayed if the message window contains a message (see page 1-353) associated with a specific form field, regardless of the specified properties of the form element and the associated attributes. After the message window is cleared, the incomplete mark is removed for all form elements if their MarkIncomplete property set to False.\n\nMost configuration application objects have a subordinate Attributes group. This group contains additional characteristics of these objects.\n\nIn the 1C:Enterprise mode it is often necessary to filter data based on a certain attribute or to sort data lists based on attributes. 1C:Enterprise can be used for this purpose; however, in case of large data amount this task may take a long time.\n\nTo speed it up, you can specify the Index property for the attributes that will be used for filtering or sorting. If this property is set (the Index or Index with additional ordering value is selected), these tasks will be performed faster. For primitive attribute types, attribute indexing makes it possible to sort lists by clicking in a column title.\n\nIn addition to sorting by attributes or filtering data by an attribute value, it is often required to sort data by its main presentation (e.g., description or code) in the resulting list, i.e. to sort records by presentation within each attribute value. To get the correct result, select the Index value and specify both the attribute and the presentation in the list sorting criteria.\n\nIf you need to minimize filtering or sorting time, choose the Index with additional ordering option for the attribute (if available).\n\nYou can effectively use the additional sorting tool only when a certain sorting order is specified in the 1C:Enterprise mode in the list sorting criteria: first by attribute, then by presentation.\n\nIf such sorting criteria are not specified, there is no need to specify the Index with additional ordering option, since it will be equivalent to normal indexing, however the index size will be greater.\n\nIndexing with additional ordering is used for attributes of catalogs, documents, charts of characteristic types, charts of accounts and charts of calculation types.\n\nNormal indexing can be used for register attributes.\n\nYou can edit rights of access to configuration objects both in the editor of role access rights (see page 1-185) and in the object editing window (see page 1-59).\n\nYou can use the object editing window to set up access rights for a specific object in all roles existing in the system. You are allowed to set access rights:\n\nWhen text boxes are filled in, the method of object selection is defined by the Choice Method and Quick choice properties.\n\nThe Quick choice property manages the default selection mode. This property is only available if the Choice Method property is set to Both ways. Review the example below to see how the Quick choice property works.\n\nAssume you have a Warehouses catalog. Its Choice Method property is set to Both ways; its Quick choice property is also set. In this case values from the Warehouses catalog are selected in the quick selection mode by default throughout the entire configuration. If you disable the Quick choice property, the selection mode changes to Using form by default.\n\nYou can also expressly override the selection mode for a metadata object attribute or a form element. To do so, you can just change the Quick choice property value from Auto to Use, thus enabling the quick selection or None, disabling it. By default, the Quick choice property for a metadata object attribute or a form element is set to Auto.\n\nTherefore, the system of selection mode management has three levels:\n\n1. First, the platform analyzes the form element Quick choice property.\n\n2. If set to Auto, the property is checked for the object attribute.\n\n3. If Auto values match, the platform analyzes the Choice Method and Quick choice properties of an application object that corresponds to the attribute type. If the Quick choice property is set to a value other than Auto at the first or the second level (form element and object attribute), the check is terminated and a selection is made in the specified mode.\n\nIf the Choice Method property of an application object is set to Using form or Quick choice (not Both ways), specifying Quick choice properties for an attribute or a form element has no impact on the selection method.\n\nThe Choice parameters links property is used to create a list of attributes that will provide values to be used when selecting an attribute value, opening a selection form or displaying a quick selection list and using input by string.\n\nAs an example, consider selecting a contractor agreement. First, you select a contractor, then you select an agreement from the list of agreements of the selected contractor. If you change the contractor, the list of agreements changes automatically.\n\nTo restrict selection, the attribute in the Choice parameters links property is set to the attribute to be used when filtering the selected values and the attribute to be used as the source of the filtering value.\n\nValues indicated in this property are passed to the form to be opened through the Parameters structure. Please note that the value in the Name column matches the structure item key, while the attribute value in the Attribute column corresponds to the structure item value. If the Name column contains a value of the Filter. Owner type, a Filter parameter (of the Structure type) is created for the form. The item created in this structure will have the Code key and a value retrieved from the attribute indicated in the Attribute column (Supplier in this example).\n\nIf the name of an item in Choice parameters links matches the name of an item in Choice parameters, the item from Choice parameters links will have maximum priority (the item from Choice parameters is ignored), when the value of the field specified in the Choice parameters links item and passed to the ValueIsFilled() function returns True. At that the item from the Choice parameters property is ignored.\n\nYou can also use the choice parameter links window to clear the field when link fields are modified. If the Edit mode of the linked value property is set to Clear, the field is cleared when the link value is modified interactively (selecting the value previously specified in the field again is also a modification) before the OnChange event. Otherwise the field is not cleared (the property value is Do not change). Elements are cleared regardless of a real value change in the link element beforethe OnChange event handler is called.\n\nIf the field displays table data (a table column or an individual field associated with the current data), it is cleared if the source of data for the form table is FormDataCollection or FormDataStructureAndCollection. If the attribute you want to clear is associated with table data, while the link attribute is not, values in all table rows are cleared.\n\nThe attribute cannot be cleared if it is associated with a column of the DynamicList type attribute.\n\nFor a standard Parent attribute of a subordinate catalog the Choice parameters links property can be changed by the system automatically. It could happen in the following cases:\n\n When the catalog subordination state changes;\n\n When the Hierarchical property value for the catalog changes.\n\nThe following procedure is used:\n\n If the catalog is subordinate and hierarchical, a value with Name = Filter.\n\nOwner and Attribute = Owner is added in the list of Choice parameters links property values for the Parent attribute;\n\n Otherwise the value with Name = Filter.Owner and Attribute = Owner is removed from the list of Choice parameters links property values for the standard Parent attribute.\n\nReview the following example: a form contains Vendor and VendorAccount fields. The ChoiceParameterLinks property for the VendorAccount field is set to Object.Vendor that is displayed in the Owner filter field.\n\nThen, if you change the Vendor field value interactively, the VendorAccount field value is auto-cleared.\n\nThe Choice parameters property can be used to specify parameter values to be applied when selecting an attribute value. This restriction applies when you open a choice form, display a quick selection list or use input by string. For example, you might want to restrict the selection to the products with the Type attribute set to Enum.ProductTypes.Service. You can specify a list of values for a specific filter value. To do so, select the FixedArray type when you edit the Value column.\n\nValues indicated in this property are passed to the form to be opened through the Parameters structure. Please note that the value in the Name column matches the structure item key, while the value in the Value column corresponds to the structure item value. If the Name column contains a value of the Filter.Code type, a Filter parameter (of the Structure type) is created for the form. The item created in this structure will have the Code key and the Value value.\n\nIf the name of an item in the Choice parameters links property matches the name of an item in the Choice parameters property, the item from Choice parameters links will have maximum priority (the item from Choice parameters is ignored). The item priority is maximum when the value of the field specified in the Attribute parameter of the Choice parameters links item is filled (the ValueIsFilled() function returns True for this value).\n\nValues specified in the Choice Parameters attribute property are also used by dynamic lists and the data composition system.\n\nIf you select extra dimension values in a table cell linked to an accounting register recordset, the selection parameter is automatically set for the Owner field, but only if this type of extra dimension has an additional catalog type of extra dimension values. The corresponding extra dimension type is the selection parameter value.\n\nThe Use standard commands property defines whether standard commands of a particular object (e.g., commands that open a catalog list) can be added to the command interface. If this property is set to False, the standard commands are not displayed in the system and you can only include the object in the interface by using a command created in the Designer.\n\nThe Choice form property determines a form to be used when selecting an attribute value. It is used for attributes with the types based on metadata objects that use forms. For example, a Goods catalog might have multiple selection forms, but the standard Parent attribute requires a special form. If you want to implement this behavior, specify this form in the Choice form property for the standard Parent attribute (for details on standard attributes see page 1-253).\n\nFormat is used for Number, Boolean and Date types and defines a format to be used when attribute data are displayed.\n\nThe Editing format property sets a format to be used when editing data of Number, Boolean and Date types.\n\nLink by type establishes a relational link with the attribute determining the types of values entered in the text box. It is useful to set up type links for attributes that have a composite data type and are logically linked to another attribute, such as ChartOfChartOfCharacteristicTypes.Ref, possibly creating a link between an attribute that contains an extra dimension with an attribute that contains a value of the ChartOfAccountsRef type. An item of the type link contains the number of extra dimension type in case the attribute selected for the type link has a value of the ChartOfAccountsRef type.\n\nFor example, you might have two attributes – CharacteristicType and Characteristic. The CharacteristicType attribute's type is ChartOfChar- tOfCharacteristicTypesProductCharacteristicTypes.Ref, while the Characteristic attribute's type is Characteristic.ProductCharacteristicTypes. You can set the Characteristic attribute's property Link by type to CharacteristicType. In this case the selected value type is defined by the type specified for the selected value of the chart of characteristic types.\n\nIn 1C:Enterprise, constants are used to store permanent or nearly permanent information. This information either does not change at all or changes quite infrequently. For example, the names of companies usually do not change.\n\nThe main reason for using constants is that once information is put there, it can be used for preparing documents, in calculations or in reports. Constant values may be edited when necessary.\n\nLet us look at an example. Company documents are usually signed by the director and the chief accountant. Of course, the officials themselves must sign the documents. However, aside from the signature, it is necessary to provide the signature drill down – last name of the person who has signed the document. Of course, it is possible to enter the names of the director and chief accountant directly in the document forms. However, if one of the last names changes, you will have to edit all of document forms and correct the last names all over again. So it is much easier to create two constants for the last names of the director and the chief accountant and use these constants in the document forms instead of their values. If there is a new director or chief accountant, you only have to change the constants by entering new names and the changes will be automatically implemented everywhere these constants are used.\n\nWhen value of a constant changes, the previous value is lost. To get the previous data values, you have to use an information register with no dimensions instead of constants.\n\nThe 1C:Enterprise Designer can be used to create any number of constants for storing any information.\n\nUse the Constants branch of the configuration tree to work with constants.\n\nConstant properties should be edited in the properties palette. Please note that a constant is a typed configuration object.\n\nType specifies the type of constant. A constant may be of any standard configuration type (Date, Number, CatalogRef, DocumentRef, etc.) or a composite type (comprising several types).\n\nDepending on the type selected, the properties palette may contain additional properties that refine the selected type.\n\nIf you want the constant editing form displayed in the command interface, set the Include in the command interface property. It displays the command that opens the constant editor in the subsystems where the constant belongs. The constant editing form is set up using the Default Form property (for details see page 2-989).\n\nUse the Common forms branch to create constant input forms (see page 1-229).\n\nSometimes, when document forms are filled out, it is necessary to enter information by selecting a value from a preset list.\n\nLet us take an application form to be completed when applying for a job as an example.\n\nWhen filling out the Place of birth field, it is necessary to specify a city or town. Although the total number of cities and towns is quite big, it is finite. Actually, it is possible to specify a place of birth by selecting a city or town from a list. This list is called a catalog.\n\nA catalog is a list of possible values for a certain attribute of a document (in its broadest sense).\n\nCatalogs are used when it is necessary to ensure consistent information input.\n\nFor example, it is necessary to use the same name for an item so that different employees (salespersons, managers and warehouse staff) understand what the item is. In this case a catalog is also needed. Usually in mercantile business such a catalog is stored as a price list. If such a catalog is stored in electronic form, it contains all of the possible items that a business works with.\n\n1C:Enterprise makes it possible to maintain any number of catalogs. Each catalog represents a list of consistent object instances: employees, organizations, goods, etc. We will refer to each object item as a catalog item.\n\nPlease keep in mind that the configuration is only used to create the structure of a catalog, while its contents, i.e. catalog items, have to be entered by the user. In the configuration process, it is necessary to describe the structure of the information that will be stored in the catalog, develop the screen and/or print representation of the catalog and specify various characteristics of its behavior.\n\nCatalogs usually have predefined code and description attributes. The code number may be of a Number or a String type.\n\nThe 1C:Enterprise system provides you with a wide range of options for working with catalog item codes: the codes are automatically assigned and checked for uniqueness, etc.\n\nA catalog in 1C:Enterprise may have a hierarchical structure. There are two types of hierarchies – the folder and item hierarchy and the item hierarchy. In the first case, all data in the catalog are divided into two types: catalog items and catalog folders. Folders are logical blocks of catalog items. For example, a catalog of goods, where the folders are types of products (Plumbing Systems, Household Chemicals, etc.) and the items are specific products (Mixer, Mirror, Detergent), is a hierarchical catalog.\n\nUsing hierarchical catalogs makes it possible to enter information with the required level of detail. Items and folders in a hierarchical catalog can be moved from one group to another.\n\nThere are no folders in catalogs with the Item hierarchy. In this case some items may also act as folders. In such catalogs, all of the items have the same functionality. A list of company departments is an example of such a catalog. Each department may be described by the same set of attributes; however, it may logically contain another department or be a component of another department.\n\nFor hierarchical catalogs, the Designer makes it possible to specify a limit on the number of catalog levels or to use an unlimited number of nested levels.\n\nIn addition to code and description, you can create a set of attributes to store additional information about items in the catalog.\n\nFor example, the Contractors catalog may contain information such as the full description of a contractor, tax ID number, the last name of the director and the chief accountant and other information.\n\nIf an object of the application domain corresponding to the catalog has both simple properties like a full description or tax ID and composite (list) properties, you can create a set of tabular sections for the catalog.\n\nFor example, you can create a tabular section for the list of contractor's telephone numbers in the Contractors catalog.\n\nThe names of catalog attributes should not match the names of attributes in a tabular section.\n\nTo work with information stored in a catalog, you can create on-screen forms. You can create separate forms for viewing, editing and selecting items from a catalog.\n\nThe Designer allows you to create multiple forms of the same type, e.g., forms for selecting an item from the catalog and use them in different situations.\n\nWe recommend creating separate forms to display the list of items and to select catalog items.\n\nUse the Catalogs branch of the configuration tree to work with catalogs.\n\nWhen you create a new catalog, the object editing window opens (see page 1-59).\n\nHierarchical ñatalog – if this check box is selected, the catalog has a hierarchical structure and the Hierarchy type and Number of hierarchy levels can be set.\n\nHierarchy type specifies which type of hierarchy is used in a catalog. If the Folder and item hierarchy option is selected, the catalog may contain two types of items: folders and items. Folders are used only to hold other folders and items of a catalog. To define a folder, you usually need a code, description and parent (link to a higher level). A catalog item may also contain other attributes specified on the Data tab. For catalogs with this hierarchy type, you can create folder forms and item forms. When Item hierarchy is selected, all items of a catalog are at the same level. Catalogs of departments or cost items may serve as an example.\n\nFolders on top – this property becomes available when Folder and item hierarchy is selected. If the Folders on top property is set and the catalog is displayed as a hierarchical list, its folders are placed on top, above all items. If this property is not set, the folders and items will be arranged according to the specified sorting rules (by code, description, etc.). For example, if a new folder has a code greater than the codes of all other folders and items (when sorted by code), in the former case this folder will be placed below all other folders, but above all other items; in the latter case it will be placed below all folders and items.\n\nPlease note that the Folders on top property does not affect how the catalog is displayed as a non-hierarchical list.\n\nNumber of hierarchy levels becomes available if the Limit the number of hierarchy levels check box is selected. Catalogs in 1C:Enterprise can have more than one nested level. If the Limit the number of hierarchy levels property is not set, the catalog may contain an unlimited number of nested levels.\n\nOwners: This property has to be explained in detail.\n\nAny catalog may be used independently or as a subordinate to another catalog. For example, a catalog of contracts may be used independently or may be linked with a catalog of companies.\n\nTo make a catalog subordinate to any existing catalog, click the editing button in the List of catalog owners field and specify the catalogs that own this catalog in the object selection window. In 1C:Enterprise, the owning catalog is called the owner and the owned catalog is called the subordinate.\n\nUnlike multi-level catalogs, where all items have the same structure, the mechanism of subordinate catalogs makes it possible to connect items with different structures. In this case each item of the subordinate catalog will be logically linked to one of the items of the owner catalog.\n\nFor catalogs with several owners, different items may have different types of owners, but one item can have only one owner.\n\nSubordination type allows you to manage owner restrictions. This property specifies whether the owner can use only items, only folders or both. If a catalog has several owners, the restriction applies to all of them.\n\nCode length: This property specifies the maximum length of code for catalog items.\n\nYou can specify zero code length in the Designer if a catalog item code is not used.\n\nWhen this property is specified, it is desirable to determine the code length that is actually possible. Please keep in mind that you can increase code length when needed as you operate the configuration.\n\nDescription length specifies the maximum length of a description for catalog items.\n\nYou can specify zero description length in the Designer. It means the catalog has no description.\n\nThe Code series property is used to specify the range for checking code uniqueness and for automated code assignment.\n\nIf this property is set to In the entire catalog and you automatically assign or manually enter a code, its uniqueness is checked against all items of the catalog.\n\nThe Within subordination area setting works for hierarchical or subordinate catalogs only. In this case the system checks code uniqueness only within folders and items of the owner catalog where a new catalog item is added or where an existing item is edited.\n\nWhen the code series is set to Within Subordination area, catalog items in different folders may have the same codes. Please keep it in mind when moving items of a multi-level catalog from one folder to another. If the code of an item that is moved is the same as the code of an existing folder item, a warning message is displayed and the item is not moved.\n\nWhen the code series is set to Within owner subordination area in hierarchical subordinate catalogs, all codes with the same owner and different parents are autonumbered and checked for uniqueness.\n\nThe Code type property is used to select a value type for the catalog item code – Number or String. String type codes are useful for complex coding systems in which the code may contain numbers, letters and separators. Articles of clothing may serve as a typical example of a String code.\n\nPlease note that String type codes can also be assigned automatically.\n\nFor the first item, the system creates a code that looks like 001 (the number of zeros depends on the specified code length), i.e., the code is a string of characters where all characters are numerical. When other items are added to a catalog, the system will keep assigning item codes: 002, 003, etc.\n\nIf catalog maintenance requires using mixed alphanumerical codes, codes like AA001 can also be used for auto-numbering. The first component of the code here (AA) is a text prefix, while the second component (001) is interpreted as a number and used for auto-numbering.\n\nFor example, if the first code is AA001, the second code will be AA002, the third code will be AA003 and so on.\n\nA text prefix may be set manually (you can use a composite code when adding a new item to the catalog) or using the 1C:Enterprise script (SetNewCode() method).\n\nAllowed code length is available if the Code type property is set to String. You can use this property to adjust the length of the string to store the code. If the property value is Fixed, the length of the string storing a catalog item code always equals the value specified in the Code length property. Otherwise the string length equals the actual number of characters in the item code.\n\nAttributes. A new catalog can be viewed as a table with two columns: the catalog item code and its description. 1C:Enterprise can store additional information about catalog items, other than the description and code. When you edit a catalog, you can specify a set of additional attributes for storing such additional information.\n\nWhen a catalog is displayed on the screen, these attributes may be displayed as columns in the table box of the catalog's list form. In addition, the information stored in attributes may be used in different calculations, reports, etc.\n\nFor example, it is easy to use catalog attributes to organize an employee table. To do this, you need to create attributes that would store information about education, personal data and other HR data in the Employees catalog. Simple built-in search tools make it easy to find the required information about an employee in the catalog when using the configuration.\n\nTabular sections. Tabular sections are used to describe information that is related to the catalog, but is not used independently. For example, a tabular section may contain information about an employee's family (information about each family member will be described in attributes of the tabular section and there can be any number of family members), the employee's job record, etc.\n\nIn the example above, if it were possible to use information about employees' families independently, you could put this information in a separate catalog which would be subordinate to the Employees catalog.\n\nThe main difference between a tabular section and a subordinate catalog is that it is possible to reference items of a catalog, unlike lines of a tabular section. When a catalog is accessed, it is loaded into memory together with all tabular sections. If a tabular section has many lines, this may decrease system performance. Therefore, it is recommended that tabular sections be used when there is no need to store item references and when the count of items is limited. Each catalog may contain an unlimited number of tabular sections.\n\nAutonumbering. If this property is set, a code will be automatically assigned to each new item in the catalog. Auto-assigned codes can be modified.\n\nCheck uniqueness. If code is used to identify a specific item in a catalog, this code should be unique (have no duplicates). If the Check uniqueness property is set, the code will be automatically checked for uniqueness each time a new item is added to the catalog.\n\nDefault presentation specifies how catalog items are displayed. For example, values of the CatalogRef type in a document or catalog attribute or a constant, will be displayed as the code or description of a catalog item depending on the property value. For list forms, this column becomes the default column. When a list is opened, this column becomes active.\n\nGeneration. The Generation tab specifies which configuration objects may serve as a basis for objects of a given type and for which objects the objects of a given type may serve as a basis. The Generation settings wizard button launches the \"Create Based On\" wizard. For more details on working with the wizard, see page 2-985.\n\nAn example of document generation is entering a Warehouse Transfer document based on an item of the Goods catalog.\n\nIn addition to the main properties, catalog attributes can also have the following properties:\n\n Use specifies the attribute's use for folders and items in hierarchical catalogs.\n\nA configuration developer can create a set of predefined items and folders (for hierarchical catalogs) for any catalog. These items cannot be deleted in the 1C:Enterprise mode.\n\nYou can open the form for entering preset items by clicking the Predefined button on the Other tab in the configuration object editing window. You can only enter main properties of an item (name, code and description) in the Designer. The item name may be used in expressions of the 1C:Enterprise script. The values of other attributes of a predefined item are entered in the 1C:Enterprise mode.\n\nIn the 1C:Enterprise mode icons for predefined catalog items and custom items look different.\n\nYou cannot create predefined items for a catalog that has an owner, and you cannot set an owner for a catalog that has predefined items.\n\nA document is one of the main concepts in 1C:Enterprise. Documents are used to enter information about business transactions into the system.\n\nMost documents that are created during task configuration are electronic counterparts of standard paper documents; however, in addition to recording business transactions, this data type may be used to save other data, too.\n\nEvery document contains information about a specific business transaction and is characterized by a number, date and time. Date and time are the most important document characteristics, since they make it possible to determine the sequence of operations.\n\nThe configuration only describes the document structure; specific document instances have to entered by a user working with the program. For example, the Invoice document in 1C:Enterprise may be used to prepare invoices with different contents and the same attribute sets, the same logic of behavior, etc.\n\nHereinafter, document structure is referred to as a document, i.e. tools for document input and visualization.\n\nThe Designer can be used to describe a document structure, arrange forms for entering information in a document and describe the algorithm of print form creation for the document.\n\nIn addition to the date, time and document number, you can create a set of attributes for storing additional information.\n\nIf an object of the application domain corresponding to the document has both simple properties like date, number and total amount and composite (list) properties, you can create a set of tabular sections for this document.\n\nFor example, you can create a tabular section for a list of items in the Goods Issue document.\n\nA configuration may contain any required count of lists of documents with the same type and document journals with different types. List forms do not have the Document type column (since lists contain documents of the same type), while journals usually do contain this column.\n\nWhen a document is created, you can specify a list of journals that will be used for working with this document. You can specify one journal for different document types which will allow you to group documents in the journals as needed. You can change the journals assigned to a document.\n\nDocuments can change the status of accounting registers (when they are posted). If a document has been posted, the data specified by the user when entering the document affect the system accounting registers, i.e. modify inventory balances, amounts due to contractors, etc. You can post documents in real time (real-time posting) or backdated (regular posting).\n\nThe Documents branch of the configuration tree is used for working with documents. This branch also contains service configuration objects – numerators and sequences.\n\nThis section describes specific document properties. Common properties of all configuration objects, including documents, are described on page 1-250.\n\nDocument properties can be edited using the properties palette or the editing window (see page 1-59). You can configure various document properties at different tabs.\n\nThe Main tab contains the main document information.\n\nThe Data tab contains attributes and tabular sections.\n\nIn the properties palette, the type is specified for each attribute, in addition to the main properties. To enable fast searching or information selection by document attributes, it is necessary to set the Index property for the appropriate attributes (for details see page 1-273).\n\nThe Numbering tab contains data that are used to assign document numbering rules.\n\nEach document has mandatory attributes that are created automatically and cannot be deleted. These attributes include the date, time and document number. Unlike date and time, you can specify several parameters for the document number. These parameters will control how this attribute behaves when you work with a document of this type. The combination of these parameters will define the document numbering rules for 1C:Enterprise.\n\nAutonumbering. If you turn this property on, each new document will be numbered automatically. An automatically assigned number can be corrected.\n\nNumerator. A document can be assigned one of the numerators already existing in the configuration. To assign an existing numerator to the document, select the numerator name in the Numerator property. In this case all items on the Numbering tab, except Autonumbering, become unavailable, i.e., the numbering rules for this type of document will be completely defined by the assigned numerator. For information about numerator creation and properties see page 1-290.\n\nNumerators help organize continuous numbering for different types of documents. To do this, you have to assign the same numerator to all documents that should be numbered continuously. Uniqueness check and sequential number assignment will take into account all documents with this numerator.\n\nNumber format is the same as Code type in a catalog (see page 1-280).\n\nAllowed number length is available if the Number format property is set to String. You can use this property to adjust the length of the string to store the number. If the property value is Fixed, the length of the string storing a document number always equals the value specified in the Number length property. Otherwise the string length equals the actual number of characters in the document number.\n\nIf the Check uniqueness property is set, the number of each new document is checked for uniqueness, subject to the restrictions specified by Periodicity.\n\nPeriodicity specifies the document number uniqueness check and the number repetition period. If the Check uniqueness property is turned on for document numbers, Periodicity specifies the limits for checking.\n\nIf Autonumbering is turned on, 1C:Enterprise will assign a new sequence number to each new document. When the period specified in Periodicity expires, document numbering restarts from 1.\n\nThe Posting tab is used to set up behavior during document posting and posting cancellation.\n\nPosting specifies whether the document can be posted when it is saved. If this property is set to Enable, the document modifies the register records (changes their state). This selection also automatically calls the Posting event handler for document posting in the 1C:Enterprise mode which opens when a button with the predefined Save and close action (usually an OK button) is clicked. You can use the register record wizard (see page 2-980) to create the Posting event handler. Open the wizard by clicking the appropriate button at the Posting tab in the Document object editing window.\n\nReal-time posting specifies whether real-time posting is enabled for a document. When a non-current date is selected, documents with enabled real-time posting are posted in regular mode, because in this case an accomplished fact that does not require real-time verification (e.g., checking the balance in the product's invoice) is being recorded.\n\nIf Real-time posting is turned on for a document, then zero time is set for a new document. Upon posting, the system receives a real-time timestamp which may be the same as or greater than the current date and time and assigns this time stamp to the document. After that, the document is posted in real time. For details on real-time timestamp see page 1-292.\n\nIf a document being edited has Real-time posting turned on, the time differs from the current time and when the document is posted (if the current date is specified), the system asks what type of posting should be used. If you select Real-time posting, then the system sets the current time for the document. If you change the time when the document is edited (e.g., if you specify future time of the current day), the system also sets the current time for the document. If you select Regular posting, then the system sets the time to the beginning of the day if the date format does not require entering the time.\n\nRegister records deletion is available if the Posting property is set to Enable. This option defines how all records saved during document posting are deleted when the document is reposted or unposted:\n\n Delete automatically means the system deletes the records when a previously posted document is reposted (prior to writing new records) or when document posting is canceled.\n\n Do not delete automatically means register records are deleted programmatically in special cases. Use this mode to manage deletion during both posting and unposting.\n\n Delete automatically on clearing posting means the system automatically deletes register records only when posting is canceled. Reposting will not result in automatic record deletion. This mode is used by default.\n\nIf the Register records deletion property is set to Do not delete automatically or Delete automatically on clearing posting, you should clear any Register Records collection recordsets before the posting operation to avoid information duplication.\n\nAdd register records on posting defines how the system behaves when register records are created during document posting:\n\n Record selected (default mode) means a record set of the register record collection is only written if the Write property of the set is True (regardless of whether the records in the set have been modified or not).\n\n Record modified (this mode is set when migrating from 1C:Enterprise 8.1 and older versions) means that the system write the record sets that have been modified (their Write property is automatically set to True).\n\nAfter the document is written, the system resets the Write property for all record sets that register document records, even if the write operation failed.\n\nSequence filling sets the automated sequence filling mode. The Sequences tab of the Edit window specifies whether the document is part of a sequence.\n\nAt the Journals tab in the document editing window, you can mark document journals that will display documents of this type for 1C:Enterprise users. You can create the required document journal forms later.\n\nThe Generation tab contains two lists of configuration objects. The top list should contain objects that may serve as a basis for the document and the bottom list should contain objects for which this document may serve as a basis.\n\nA document may be entered on basis of another document or based on objects of a different type (items of catalogs, charts of characteristic types, charts of accounts or charts of calculation types). A document may also serve as a basis both for other documents and for objects of a different type.\n\nIf you want to create a procedure for preparing the created object data based on a sample, use a special wizard. For a description of this wizard see page 2-985.\n\nThe Rights box allows you to set the privileged mode for posting (Privileged mode for posting property) and/or for unposting documents (Privileged mode for unposting property):\n\n If this property is set, the system will always post or unpost document in the privileged mode (at the server side and in file mode version). However, the privileged mode is not set if a document is posted or unposted in the client/ server mode at the thick client side. The privileged mode enables you to do the following:\n\n○ Use an appropriate handler (Posting or UndoPosting). However, objects are written in the regular (non-privileged) mode.\n\n The privileged mode is enabled by the system after the object is written, but before posting starts (before register records are deleted if it is done automatically). The same procedure is used when unposting.\n\n When new documents are created, these properties are set to True if the managed application mode is selected as the main run mode in the configuration properties; otherwise if the ordinary application mode is selected, the properties are set to False.\n\nInformation about business transactions of a company is stored in registers (see page 1-316). Documents can change the register status. This process is known as posting. It is recommended to use this process to change the register status. Posting can be real-time or regular (Real-time posting property).\n\nGenerally, real-time posting is used for real-time accounting purposes.\n\nReal-time posting is designed to better separate cases of document posting in real time and document posting that reflects an accomplished fact.\n\nReal-time posting is required when document entry and posting do not just register an event, but are a part of the event and help the operator enter information correctly. Naturally, it only makes sense if the event happens in real time.\n\nA classical example is entering and posting a document that reflects goods sales from a warehouse. When entering this document, the operator has to both enter a valid list of goods purchased by a customer and run various checks. The first check is whether the requested product is available at the warehouse. It is important to remember that the check must also be run for other operators that work concurrently and can order the same products. Accordingly, the system is to prevent operators from selling the same product to two different customers. Additionally you might want to check the amount of credit available to a customer, the payment against the invoice and other aspects.\n\nAt the same time, if a document is backdated, i.e. entered when the business transaction has already occurred (e.g., a specific product has been shipped to the customer), there is no need to run checks; all you need to do is to record the event in the accounting register. In this case posting a document only registers the event, without being its part.\n\nTherefore, real-time posting aims to separate two posting options: on the one hand, the user needs to understand which posting option is selected; on the other, the posting algorithm needs to perform actions that correspond to the current posting option.\n\nThe posting option (real-time or regular) for a document is selected on the basis of its date. If the posted document date matches the current date, the system posts the document in real time without additional queries. The option is defined by the posting data processor which determines the specific algorithm of document posting.\n\nIn addition to the Real-time posting property of a document, you can also set a posting mode for a document form extension. The Use posting mode property can be assigned one of the following values:\n\n Non-real-time. Documents are always posted in the regular mode. If regular posting rights are missing, an exception is raised.\n\n Real-time. Documents are always posted in real time. If regular posting rights are missing and you attempt to post a document that belongs to a prior period, an exception is raised.\n\n Query. The system always prompts the user to select the current posting mode.\n\n Auto. The system uses the following algorithm:\n\n○ If the document date precedes the current date, regular posting is used;\n\n○ If the document date matches the current date, real-time posting is used;\n\n○ If the document date follows the current date, an exception is raised;\n\n○ If the document cannot be posted in the selected mode (insufficient access rights, etc.), an exception is raised;\n\n○ If the posting mode at the client side is unknown, the PostingMode parameter of the BeforeWrite event handler receives the Undefined value.\n\nIn real-time document posting, one of the targets is listing documents chronologically on the time scale. This is required, in particular, to write off balances correctly in the balance registers (see page 1-325) of real-time accounting. Document arrangement uses the following concepts: point in time and real-time timestamp. Let us review these concepts in more detail.\n\nA document's position on a time axis is defined with the help of the Date attribute that contains time with accuracy of up to one second. It means you can manage the sequencing of document records. However, where the number of documents being created is large, there will probably be instances in which several documents will have identical dates (i.e. they will be created in the same second). How do we then determine the sequence of document creation?\n\nThe point in time concept was introduced to deal with just this problem. A point in time is a combination of date, time and a reference to a database object. It allows you to explicitly identify any reference-type database object, but it generally only applies to documents. The point in time also identifies non-object data such as register records that are subordinate to a recorder.\n\nThe point in time concept is implemented in the 1C:Enterprise script using the universal PointInTime object.\n\nIf multiple documents have identical dates and times, their sequence on the time axis is established based on the references. This sequence may differ from the sequence of document creation and cannot be changed by the user. i.e. the user cannot change the sequence of documents within a second or figure out which document is created earlier or later.\n\nA real-time timestamp is a value of the Date type. A real-time timestamp is the basis that allows you to actually post documents in real time. The system generates a real-time timestamp for each instance of real-time document posting. Its value is generated based on the current session date and the last real-time timestamp generated.\n\nIf the system works with multiple time zones, this should be accounted for when retrieving a real-time timestamp. For example, an infobase can be physically located in a single city (time zone), but can be used to record transactions in multiple remote offices (e.g., branches of a holding company) located in other cities (and time zones). In this case you would need each branch to have its own timestamp.\n\nTime zones are accounted for through infobase time zones and session time zones.\n\nAn infobase time zone defines the time zone used for a new session by default. When you create an infobase, the infobase time zone is undefined. However, you can specify it using the global context SetInfoBaseTimeZone() method. Information about the infobase time zone is saved in the database and does not modify when the infobase is restored or dumped. Creating an initial infobase image (using distributed infobase mechanisms; see page 2-772) copies the infobase time zone from the original infobase to the image.\n\nIf the infobase time zone is not specified, the system uses the time zone of the machine where 1C:Enterprise server is installed (in the client/server mode) or the time zone of the local computer (in the file mode version).\n\nA session time zone describes the time zone for a particular session. By default the session time zone matches the infobase time zone.\n\nYou can specify the session time zone using the global context SetSessionTi- meZone() method. The session time zone is saved until the session ends. It is used to define the current date of the session and to retrieve a real-time timestamp.\n\nIn real-time posting, the system modifies document time so that the next document posted in real time has a later point in time compared to the previously posted document. It is implemented through real-time timestamps. Real-time timestamps are retrieved by the system automatically during real-time posting; however, they can also be explicitly obtained in the 1C:Enterprise script using the GetRealTimeTimestamp() method based on the current session date.\n\nThe current session date is the system date recalculated to match the session time zone. It means the local computer time is recalculated into the zone time defined by the session time zone. This recalculation uses Universal Time Coordinated (UTC).\n\nAll users call a single real-time timestamp mechanism that provides each user with the next timestamp in turn. The mechanism of real-time timestamp retrieval returns date that is greater than the previous timestamp received by this or another user in the current time zone. Generally, the system returns the current session time as the real-time timestamp. However, if the current time is greater than or equal to the last timestamp returned to any user, the returned value is one second more than the last timestamp value. Thus, it ensures that each call returns a value that matches the current time, whenever possible and is always greater than the last returned value.\n\nPlease keep in mind that different session with the same time zone use the same time to obtain real-time timestamps. Therefore, the number of unrelated real-time timestamps is defined by the number of unique time zones set as session time zones.\n\nA numerator is a configuration object that defines document numbering rules: document number type and length, periodicity, requirements for uniqueness check.\n\nThe main purpose of the numerator is to provide continuous numbering for documents of different kinds. For this purpose, the same numerator is assigned to such documents.\n\nTo work with Document numerator configuration objects, you have to use the configuration branch within the Documents branch that starts from the Document numerators keyword.\n\nThis section describes numerator-specific properties. Common properties of all configuration objects, including numerators, are described on page 1-250.\n\nNumber Type. Type of document number value: numeric or text. Text numbers are useful for complex document numbering systems. The document number may contain numbers, letters and separators.\n\nPeriodicity specifies the two important characteristics of the numerator: document number uniqueness check and the number repetition period.\n\nIf the Check Uniqueness property is turned on, Periodicity specifies the range for checking.\n\nFor example, if Within a day is set as the periodicity option, document number uniqueness will be controlled within a 24-hour period: on the next day, the document numbers may repeat; however within the same day they will be unique.\n\nIf Autonumbering is turned on (see page 1-286), 1C:Enterprise will assign a new sequence number to each new document. When the period specified in Periodicity expires, document numbering restarts from 1.\n\nIf the Check Uniqueness property is set, the number of each new document is checked for uniqueness, subject to the restrictions specified by Periodicity.\n\nDocument sequences are auxiliary configuration objects. They are intended for timely posting of specific documents.\n\nAll documents in the 1C:Enterprise form a single time sequence. To make this possible, every document has its own date and time. If two documents have the same date and time, they are still placed in a certain sequence which depends on the time they were entered into the system. You can change a document's date and time. Therefore, regardless of the entry order, the documents may be placed in any sequence corresponding to the actual sequence of the business events represented by these documents.\n\nWhen a document is posted in 1C:Enterprise, the system performs certain actions that are recorded by the document in multiple accounting mechanisms supported by 1C:Enterprise.\n\nThe document posting algorithm usually records information saved in a document (in its attributes and tabular sections). However, in some cases, the document posting algorithm also analyzes current totals and uses them in posting. For example, if a document is used to write off goods or materials at average cost, the algorithm determines the write-off amount by analyzing the inventory balances of goods (or materials) at the document time. If goods or materials are written off using LIFO or FIFO methods, the posting algorithm will analyze the remaining inventory balance of goods (or materials) by lots for date and time of document posting.\n\nIt is obvious that posting of documents based on total results should follow a strict sequence. However, it often becomes necessary to input or correct some documents post factum, due to human errors or document delays. In this case posting of register records generated by subsequent documents (created after the corrected document) will be considered incorrect. For example, if it turns out that a receipt that was entered at the beginning of the month contained the wrong amount of goods, it is necessary to reanalyze all subsequent invoices that write off available lots and to re-write the register records. In other words, all documents that analyze the remaining inventory and come after the changed document have to be reposted.\n\nSequences branch objects are used for automatic check of document reposting. Each Sequence object in the configuration checks posting of documents of the specified types. Therefore, there may be multiple independent sequences in the system.\n\nSequence configuration objects are created in the Configuration window. Each sequence uses a separate configuration tree branch that is located within the Documents branch and starts from the Sequences keyword.\n\nThis section describes properties specific to document sequences. Common properties of all configuration objects, including document sequences, are described on page 1-250.\n\nSequence properties can be edited in the Sequence editing window.\n\nYou can select documents in the sequence and register records that influence the sequence at the Usage tab (see fig. 123).\n\nMove the boundary when posting. If the Move option is enabled, when you post a document registered in this sequence, it will try to move the boundary of the sequenced documents. If the property value is Do not move, the posted document will not move the boundary of this sequence.\n\nIncoming documents. The top list of the Sequence window contains document types for a specific sequence.\n\nSelect documents types that analyze values of different registers during posting as documents affected by this sequence. Such documents may include invoices, transfer orders, sales orders, etc.\n\nRegister records that affect the sequence is one of the main sequence properties. It defines register records that will influence re-posting of documents in the sequence, i.e. accounting mechanisms that will be used for posting of documents in the sequence. For example, such records may include register records.\n\nTo configure this parameter, add register types that influence the current sequence to the list.\n\nDimensions. Sequences may have subordinate objects known as dimensions which are created on the Data tab of the Edit window.\n\nIf no dimensions exist for a sequence, then all incoming documents will be reposted when this sequence is restored. If you want the sequence to cover specific rather than all situations, add a dimension to the sequence. In this case re-posting will be needed only for documents that change the register value allowing for the dimensions properties.\n\nIf sequence register values change, all later documents with the same attribute values (listed in the Document Attributes Mapping dimension property) included in the attributes of the deleted (added) register records (listed in the Register records attributes mapping dimension property) become invalid.\n\nFor example, a sequence takes into account register changes for Goods Receipt and Goods Issue documents. If additional criteria need to be taken into account for reposting of specific documents (e.g., it is necessary to repost documents related to a specific item), then a dimension has to be added to the sequence. Use the dimension's properties palette to specify the dimensions type (Cata- logRef.Nomenclature) and to link it to register attributes.\n\nDepending on the dimension type selected, document lists and dimension register lists only contain objects with the specified type of dimension.\n\nImplementation of dimensions makes document reposting faster which is especially important for large volumes of documentation, since only documents containing the specified data will be reposted.\n\nThe 1C:Enterprise mode automatically maintains a sequence boundary for each document sequence in the configuration. Document position acts as the sequence boundary. During sequential posting of documents in a sequence, the sequence boundary is placed on each newly posted document. However, if you post a document that belongs to this sequence, but follows another posted document belonging to the same sequence and located after the current sequence boundary, the boundary does not change, as this would violate the sequence of posted documents. A document posting algorithm may be used to analyze such situations.\n\nWhen documents are posted post factum, posting is cancelled, documents are deleted or register records that influence this sequence are deleted or written, the sequence boundary is moved to the time of the modified document. Before the boundary is moved backwards, the system checks if there are other boundaries to be moved backwards. This check does not require exclusive boundary lock.\n\nTherefore, the sequence boundary will move forward with sequential posting of documents in this sequence and will move back if register records for this sequence are modified post factum.\n\nThere is a special feature to restore the document posting sequence in the document reposting mode (All functions – Standard – Document Posting). When this feature is used, the system automatically reposts all documents belonging to this sequence from the sequence boundary up to a specified location.\n\nIn the example with goods accounting, posted invoices will move the sequence boundary forward. If any modification of records in the register used for cost accounting of goods is written before the sequence boundary, it will move the boundary back to the time of this document. After that, posted documents positioned after the sequence boundary no longer move it forward if there are any posted documents of this sequence between the sequence boundary and the currently posted document. Restoring the sequence reposts all invoices. Please note that receipts, although influencing the sequence boundary, are not reposted, since their posting algorithm does not use balances and they are not included in the list of documents belonging to this sequence. After restoring the sequence, documents that are posted after the sequence boundary will move the boundary forward.\n\nThe Restore sequences mode makes it possible to automatically repost all documents related to the sequence from the current position of the sequence boundary to a specified moment. In this case you need to select a position that will limit the document reposting at the top of the dialog.\n\nYou can enter new documents in the 1C:Enterprise system based on existing objects. Users can enter documents or catalog items and enter their respective attributes by copying information from other infobase objects, such as documents or objects of other types.\n\nThe Generation tab lists the objects that can be used as a basis for the selected document type (the Can be generated based on field) and the objects that can be based on this document type (the Can be used as a basis for generating field).\n\nTo enable the generation procedure, you must implement the Filling event handler in the document module. For a description of the filling procedure see page 1-266.\n\nThe code of the handler may be adjusted by a system configuration specialist. The code of the handler should provide for certain information transfer operations depending on the type of source document, as well as other required operations.\n\nCreate Based On Wizard (see page 2-985) can be used to facilitate creation of this handler.\n\nIn 1C:Enterprise, document journals are objects that enable users to work with documents of various types. Users can enter, view and delete documents in journal forms.\n\nUsers can search for any document in a journal by column contents, search for a document by its number and filter documents by specific parameters.\n\nYou can create any number of journals in the Designer.\n\nWhen a journal is created, you can create any number of screen forms for it. Screen forms contain table boxes that display the document type, number, date and time, as well as additional columns for other document attributes that are shown in each journal.\n\nIf no journal form is created, a default journal form will be created automatically in the 1C:Enterprise mode.\n\nThe Document journals branch of the configuration tree is used for working with journals.\n\nIn 1C:Enterprise, journal creation and document placement processes are very closely related. Document representation in a journal is synchronized with journal data for documents the journal contains.\n\nWhen both a journal and documents are created, a new document or journal will automatically be added to the list of journals and documents. To display document data in the journal it is necessary to specify the relationship, either in the journal or in the document. You can specify that a document belongs to a journal using both the journal and the document, since this operation is synchronized.\n\nThis section describes journal-specific properties that supplement common properties of configuration objects (see page 1-250) and editing methods for Journal configuration objects that differ from the editing methods common for all configuration objects.\n\nJournal properties (preparing additional column lists, column definition, journal forms, print form templates, etc.) are configured in the editing window (see page 1-59).\n\nUse the Data tab to prepare a list of documents in a journal and a list of journal columns.\n\nEach subordinate object at the Graphs branch contains a common attribute of all documents included into the journal (see below).\n\nWhen a new document journal is created in the configuration, you can create any number of journal forms for it. Journal forms can be created using the configuration object form wizard (see page 1-59). The wizard places a table box with a set of columns for different document attributes into the form. When you create a journal form, the form wizard creates the following columns: picture (the document status), type, date and document number. If you want to add more information to the journal, prepare a list of additional columns and place them in the forms.\n\nThe Data tab of the editing window contains a list of documents with data displayed in the journal. To create an additional column in the bottom list, add a Graph subordinate object and specify the attributes of documents with data displayed in this column.\n\nTo select the document attributes to be displayed in the journal column, click the selection button in the References property of the column's properties palette. The document attribute selection window will open.\n\nYou cannot select more than one attribute of the same document.\n\nIf an attribute of a document is not selected, the column of the document journal will contain no information for all documents of this type. Your selection should be based on common sense. It is not reasonable to include entirely different documents in the same column (e.g., a contractor description and a document's amount).\n\nYou can add any number of columns to the journal in addition to the obligatory document columns (Date, Number, Document type) and columns specified in the subordinate group of Graph journal objects.\n\nIf all the documents with a string type number in the journal have a fixed number length, then the Number column of the journal will also be of a fixed length. When at least one document with a string type number in the journal has a variable number length, then a Number journal column of variable length will be created.\n\nA new column is first added to the column list of the selected Document journal object and is then inserted into a form using the Form – Insert Attributes menu item.\n\nAvailability of additional columns in the journal enables a user to get the most important information about a document without opening it.\n\nFor any form elements displaying a journal column, the following attribute properties included in the column are applied automatically:\n\n Password mode – if this mode is set for any attribute included in the column.\n\n Format – in case of match for all attributes included in the column on all languages specified in the configuration.\n\n Tooltip – if tooltips match for all attributes, one tooltip is shown; if tooltips do not match, they are shown separated by a comma.\n\n Highlight negative – if this property is set for all the attributes included in the column.\n\n Multiline mode – if this property is set for all the attributes included in the column.\n\nAn enumeration is a service data type that is mainly used with other data types rather than independently. An enumeration is a list of possible attribute values.\n\nEnumerations are used to enter document or catalog attributes and constant values when it is necessary to enter only predefined information.\n\nAs an example, let us take the customer status concept. In the simplest case, there may be retail and wholesale customers. Customer status usually influences the level of discounts.\n\nThis list of statuses (Retail and Wholesale) is actually a simple enumeration. When billing, the user has to specify the customer's status by selecting it from the list. The selected customer status influences the sales price.\n\nIf the customer status is entered as an enumeration during task configuration, a 1C:Enterprise configuration specialist may specify price calculation options depending on the status.\n\nFirst of all, when you use it, the enumeration cannot be expanded since the list of its values was set during the enumeration setup.\n\nAll enumerations have only one level; no nesting is available.\n\nThe main feature of an enumeration is that its values are known and available in the Designer. The configuration itself uses specific enumeration values.\n\nWith enumerations, you can limit the number of possible options, e.g. when you enter a document attribute. Since enumeration value lists are created in the configuration, you can validate the selected value and specify the actions that should follow.\n\nUse the Enumerations branch of the configuration tree to work with enumerations.\n\nEditing an enumeration actually involves creating a list of values. To edit an enumeration object, use the Enumeration object editing window. The Include in the command interface property is disabled when a new enumeration is created.\n\nEnter values for an enumeration at the Data tab.\n\nThe properties palette contains a name and a synonym.\n\nThe list of enumeration values in the 1C:Enterprise mode is used as follows: each enumeration value is represented by a synonym or by a name if the synonym is not set.\n\nIn the above example (see fig. 127), the value of the ProductTypes enumeration will be displayed as Product (the specified synonym).\n\nThe Forms tab is used to create list and choice forms. You can create different selection forms (depending on the context). In list forms, enumeration lists can be printed. The Include in the command interface property is automatically enabled when a default list form is created.\n\nYou can create print templates at the Templates tab.\n\nAny accounting system is functional only when it has the ability to process the accumulated information and to produce summary data that are easy to view and analyze. For this purpose, accounting systems usually have a report generation feature. The Designer makes it possible to prepare a set of different reports sufficient to meet system users' requirements for accurate and detailed output information.\n\nConfiguration objects located at the Reports branch of the configuration tree are used to generate reports in the 1C:Enterprise system. Each object of this type can contain an algorithm for generating paper or electronic reports written in the 1C:Enterprise script or a data composition schema used in 1C:Enterprise as a basis to auto-run reports (see page 1-536). A report may contain one or several forms which may be used to enter parameters that influence the algorithm, if necessary. A report may have print form descriptions (templates) that are created in the template wizard and used to display algorithm results on screen or print them out.\n\nUse the editing window to edit properties of Report and Data processor objects and create subordinate objects (see page 1-59).\n\nConfiguration objects located at the Data processors branch of the configuration tree are used to handle information in 1C:Enterprise. For example, you can use them to delete obsolete data from the system, import information from other systems and for many other purposes. The name of the configuration object (Data processor) describes the actions that are performed with information, since they modify the information stored in the system.\n\nA data processor may contain one or several forms which may be used to enter parameters that influence the algorithm, if necessary. Algorithm results are displayed or printed out using the template wizard for print form descriptions (templates).\n\nThe main difference between a report and a data processor is the ability to use the data composition schema (for details see page 1-531). All other features of data processors are identical to those of reports.\n\nYou can use the same report forms, report settings or variants for multiple (or all) application reports. You need to use common forms for this. In general, the following usage options are available:\n\n A single report form set is used for all application reports. In this case you need to create the required forms and specify them in configuration properties (see page 1-167). Then you do not need to design forms in reports, since common forms will be used.\n\n You can select report sets and design special report forms for every report set. In this case common report forms are created that are specified for every report of a corresponding group. Thus you can create a special form set, for example, for accounting reports and analysis reports.\n\nIf several reports have the same default form specified as their main form, only one report can be opened in the thick client (in a regular mode).\n\nIn 1C:Enterprise an external report is stored outside the configuration, in a separate external report file. It has the same purpose as the Report configuration objects.\n\nIn 1C:Enterprise an external data processor is stored outside the configuration, in a separate external data processor file. It has the same purpose as configuration objects of Report or Data processor type.\n\nThe main purpose of any external report (data processor) is implementing, delivering and updating specific features outside the configuration.\n\nExternal reports and data processors are stored in .erf and .epf files, accordingly. You can develop and debug them as you work with 1C:Enterprise. In this case development and debugging is performed much faster: the external data processor (report) is edited and saved in the Designer mode without saving the entire configuration and is launched in the 1C:Enterprise mode. An external data processor (report) is launched using File – Open like any other data processor (report) in the configuration.\n\nExternal reports and data processors opened using File – Open are executed in safe mode (see page 1-182) if the user has no administrative access rights.\n\nAny Report or Data processor configuration object may be copied to an external data processor (report) file or vice versa – a configuration object may be replaced by an external data processor (report).\n\nYou can create Help Content for an external data processor (report), just as for any other configuration object.\n\nTo ensure configuration integrity, it is recommended that external data processors (reports) be used mainly for debugging purposes. After debugging the algorithm of data processor (report) creation, it is necessary to include the external data processor to the configuration.\n\nTo create an external data processor (report), use File – New and select External data processor or External report in the dialog (see fig. 127).\n\nThis opens a form editor where you can develop an external data processor (report). For an external report, the editing window also contains controls that can be used to create, configure and edit the data composition system.\n\nSince an external data processor (report) is not a part of the current configuration (although it is closely linked to it), the procedure for saving it is different from the procedure for saving configuration changes (see page 1-48). To save an external data processor (report), use File – Save, File – Save As or File – Save Copy. In the standard saving dialog box, select the External data processor (*.epf) (External report (*.erf)) file type and enter the name for the external data processor (report).\n\nTo use an external data processor (report) in 1C:Enterprise, you have to open it the same way as in the Designer. However, please keep in mind that an external data processor (report) in 1C:Enterprise can be opened only for execution and users cannot edit it. When the system attempts to open an external data processor (report), it checks access rights and sets the safe mode (if the user has no administrative privileges).\n\nThe external data processor (report) module is compiled when the external data processor (report) is opened. Therefore, after editing an external data processor (report) in the Designer and saving it, this data processor has to be reopened in the 1C:Enterprise mode.\n\nBesides, you can work with external data processors (reports) at the 1C:Enterprise Server. In this case, all restrictions applied to using interactive objects (forms, etc.) are still valid.\n\nIf you want to use an external data processor (report) programmatically, you need to connect it to the server first, using the Connect() method (which is only available at the 1C:Enterprise Server).\n\nThe name of the external data processor is stored in the DataProcessorName variable. This name is later used to call the connected external data processor, e.g., to open the data processor form:\n\nA data processor (report) to be used programmatically can be saved at the following locations:\n\nNames of external data processors (reports) must be unique within a single session. If you attempt to connect an external data processor (report) (programmatically or interactively) and its name is a duplicate of the name of a data processor (report) already connected to the current session, the system disconnects the previous data processor and connect the new one.\n\nIf you use external data processors (reports) at the thick client, please note that in the managed mode you can only open managed forms, while in the ordinary mode ordinary forms are only available.\n\nWhen using external data processors (reports), please keep the following in mind:\n\n If you connect a new data processor (report) with the name identical to the name of a previously connected data processor (report), open forms of the older data processor (report) will not work (generate an error).\n\n When an external data processor (report) is connected and this data processor (report) being connected is identical to the one already connected, and their safety mode property is the same, no actual re-connection occurs, no error is thrown. Alternatively, an external data processor (report) connected earlier is disconnected, and a new external data processor (report) is connected.\n\n When method Create() is executed, the SafetyMode method parameter is ignored if the external data processor (report) was connected earlier with method Connect(). If no connection was set earlier, the SafetyMode parameter from method Create() will be used to connect an external data processor (report).\n\n When you get a form for an external data processor (report), an open form is retrieved, regardless of whether it is opened for the currently or previously connected data processor (with the same name).\n\n If you open a data processor (report) using File – Open, its form is opened with the help of the OpenForm() method (with Uniqueness set to True); it ensures a new data processor form can be opened in case of modifications.\n\nYou can edit external data processors in the Designer.\n\nSelect File – Open to open an existing external data processor (report). Select the\n\nExternal data processor (*.epf) (External report (*.erf)) file type in the standard dialog box and specify the file name.\n\nWhen an external data processor (report) is opened, the Designer automatically opens the object editing window. Unlike other configuration objects, you can edit an external data processor (report) without restarting 1C:Enterprise. After saving the data processor (report) in the Designer, you simply need to reload it in the 1C:Enterprise mode.\n\nAn external data processor (report) can have a custom description. To edit a description, click the Open link for the Help content property in the properties palette of the external data processor.\n\nTo view an external data processor (report) description in the 1C:Enterprise mode, press the F1 key.\n\nExisting Report and Data processor configuration objects can be converted into external reports and data processors and vice versa. External reports and data processors can also be added to the configuration structure as new configuration objects of the Report or Data processor type.\n\nAn existing Report or Data processor configuration object may be copied to an external data processor or report. To do this, select the object name in the Configuration window and select Save as External Data processor, report from the context menu. Select the External data processor (*.epf) (External report (*.erf)) file type in the standard Save File dialog box and specify the file name for the external data processor (report).\n\nA new external data processor (report) will be created. It will be a copy of the selected configuration object. The configuration object itself will not change.\n\nThis operation is useful for further debugging of a report or data processor. When debugging is completed, you can re-insert the external data processor or report into the configuration.\n\nReplacement of a Data Processor (Report) with an External Data Processor (Report)\n\nAn external report or data processor may replace an existing Report or Data processor configuration object.\n\nTo replace a configuration object with an external data processor (report), select its description in the Configuration window and click Replace to External Data processor, report in the context menu. Select the External data processor (*.epf) (External report (*.erf)) file type in the standard Open File dialog box and specify the file name for the external data processor (report).\n\nAddition of an External Data Processor (Report) to Configuration Structure\n\nAn existing external data processor (report) may be added to the configuration structure as a new Report or Data processor configuration object. To do this, select any Report or Data processor configuration object in the configuration structure and click Insert External Data processor, report in the context menu. Select the External data processor (*.epf) (External report (*.erf)) file type in the standard Open File dialog box and specify the file name for the external data processor (report) to be inserted into the configuration structure.\n\nA new data processor (report) will be created in the configuration tree.\n\nExternal data processors (reports) may be compared and merged with configuration data processors (reports) or with other external data processors (reports).\n\nTo do this, select the required object in the Configuration window and click\n\nCompare and Merge with External Data processor, report in the context menu. Select the required external data processor (report) in the standard file selection dialog box.\n\nThe Compare and Merge… window will open. Actions available in this window are identical to those in the Merge Configurations window (see page 2-1074), see fig. 128.\n\nTo compare or merge an external data processor (report) with another external data processor (report), open the source external data processor (report) in the editing window, click the Actions button and select Compare and Merge with External Data processor from the drop-down list. Select the external data processor (report) you need in the standard file selection dialog. For a description of further actions see page 2-1074.\n\n1C:Enterprise uses Charts of characteristic types to describe the characteristics of analytical accounting objects.\n\nObjects of this type may be used to describe the characteristics of goods or contractors. They are used for analytical accounting for extra dimensions (not for subaccounts) in the chart of accounts. Chart of characteristic types do not describe a specific product or account; they only reference the description. Thus, management accounting often has to describe not only mandatory features of goods like their description, price, article and vendor, but also other features, such as color, best before date, size, weight, flavor etc. Of course, different types of goods will have different features (e.g., for footwear you need to specify the size, width, color, material and other features, but these features are not needed for computer equipment). In this case it is sufficient to create the required description schemas at the object level of the configuration and select the required description type (characteristic type) for a specific item.\n\nYou can use the 1C:Enterprise Designer to create any number of charts of characteristic types as required for analytical accounting purposes.\n\nWorking with Chart of characteristic types objects is similar to working with Catalog objects. Objects may also form hierarchical structure. They have the same subordinate objects: they can be created and edited as an item, as a list or in both ways, etc.\n\nConfiguration developers may create a set of predefined items for Chart of characteristic types objects. These items cannot be deleted in the 1C:Enterprise mode. However, configuring Chart of characteristic types objects has some differences.\n\nA Chart of characteristic types object may have a Characteristic value type property which makes it possible to define a list of valid data types used for characteristic types. Value types are selected on the Main tab of the object editing window.\n\nA composite data type is usually used. This ensures you can specify the required value when entering a specific characteristic. For example, the ProductCharacteristicTypes object of the chart of characteristic types is used to specify extra dimension types for charts of accounts. This object has a composite type of a characteristics value (see fig. 130).\n\nThus, when Chart of characteristic types objects are used to describe the structure of a chart of accounts, extra dimension types will be selected from predefined list of characteristic types. When a specific account is created, specify which extra dimension types are linked with this account.\n\nAs the figure shows, account 30 Accounts receivable has two extra dimension types – Company and Document – which are selected from a set of predefined characteristic types specified in this chart of characteristic types.\n\nTo maintain accounts for a characteristic that has no description (catalog) in the configuration, use the Additional characteristic values property of the chart of characteristic types. For example, you need to maintain accounts by cost centers, but the configuration does not contain an appropriate catalog. In this case you can create a custom CostCenter characteristic type and specify that items of an additional catalog will be used as values for this characteristic type. Since this catalog is subordinate to the chart of characteristic types, only catalog values subordinate to the characteristic type may be selected. It means values of different types will not be mixed.\n\nWhen primitive types (Number, String or Date) are selected in the Characteristic value type property, specify the size or contents of the type in the value type editing window so that this description covers all possible values. If fractional parts are not specified for numeric types, you will not be able to enter fractional numbers. Changes in the description of numeric data after a user has entered values may result in data loss.\n\nTo create predefined items in the Chart of characteristic types object editing window, click Predefined at the Other tab. The window for predefined items will open.\n\nMaintenance actions for predefined characteristics are available in the Actions menu.\n\nPredefined and custom items have different icon types in the 1C:Enterprise mode.\n\nIn the 1C:Enterprise mode, you can change the value type for custom characteristic items.\n\nHow to Create and Use a Chart of Characteristic Types: Example\n\nPlease review a sample structure of data used to store characteristics (irrelevant table fields are omitted).\n\nAdd metadata objects (catalogs, a chart of characteristic types and an information register) with the specified structure to the configuration.\n\nWhen you attempt to implement this example in the configuration, you will face an important question. You do not know what type needs to be selected for the CharacteristicValue resource of the NomenclatureCharacteristics register.\n\nIn practice, characteristics differ both in their use and value types. This is where features specific to charts of characteristic types acquire importance. Unlike catalogs, charts of characteristic types can contain descriptions of characteristic value types. Metadata for charts of characteristic types include the Type property that describes characteristic value types. This property's type is TypeDescription; it must include all value types available for various characteristics. For example, in this case you can specify the following types for the NomenclatureCharacteristicTypes chart of characteristic types:\n\nThis set of types must ensure all characteristic values in the example can be stored. After you select values for the Type property (characteristic value type) in the chart of characteristic types, the list of available types will display Characte- ristic.NomenclatureCharacteristicTypes.\n\nNow, when selecting the CharacteristicValue resource type you can specify the type (Characteristic.NomenclatureCharacteristicTypes) defined by the chart of characteristic types. Please note that the type you should select is Characteristic.NomenclatureCharacteristicTypes, not ChartOfChartOfCharacteristicTypesRef.NomenclatureCharacteristicTypes. By selecting the Characteristic.NomenclatureCharacteristicTypes type, you define the resource type indirectly, i.e. you do not specify specific types; instead, you specify that the set of types is defined by the types selected in the property of the chart of characteristic types.\n\nTherefore, creating the chart of characteristic types you determine that the database can store a list of product characteristic types and define the range of valid characteristic values.\n\nIn addition to describing value types for all characteristic types, charts of characteristic types can also be used to store value types for each characteristic type in the database since metadata are used to specify types for all possible characteristic types, while individual characteristic types can have values of specific types. For example, weight must be a numeric value.\n\nFor this purpose, charts of characteristic types support a ValueType field. This field's type is TypeDescription; it is used to describe valid types for specific characteristic types. Therefore, the chart of characteristic types in this example will have the following data structure:\n\nAll objects required to store characteristics have been described. Please note, however, that Nomenclature and CharacteristicType dimensions are unrelated in the system. Therefore, when you enter characteristic values the system ignores the selected characteristic type; instead, it prompts you to fill in the field using all types described in the chart of characteristic types.\n\nStructure description for the information register has no information about logical links between the fields that store characteristic types and values. In real-life solutions this logical link can be quite complex. A characteristic type can be stored in other objects and defined by a complex algorithm that depends on the subject area. This is why a relationship between characteristic types and values are configured by the configuration developer.\n\nIn this case you need to configure a relationship between characteristic type and value in order to enter information register records.\n\nTo do this, set the Link by type property for the CharacteristicValue resource to CharacteristicType.\n\nNow, if a user changes the characteristic type and the existing value does not match characteristic types for the selected value type, the value is cleared.\n\nIf you want to try this example out, you should make another minor change in the configuration. Set the Master property for the Nomenclature dimension of the NomenclatureCharacteristicTypes register. It removes characteristic data when goods are deleted and displays the Open Information Register command in the catalog navigation panel.\n\nNow you can check if the characteristic storing procedure is fully implemented. Open the Nomenclature catalog item, select the Nomenclature characteristics hyperlink in the navigation panel and start entering characteristics for a specific item. As you enter the characteristics, you can create new characteristic types and select their value type.\n\nThe implemented solution has a major drawback. You have enabled entry of primitive-type characteristics and reference types defined in the configuration. This example uses a catalog of contractors to enter the main vendor. It is obvious, however, that some properties need to have their values selected from lists. On the other hand, lists of values for various properties are different. Accordingly, you cannot select values for these properties from catalogs existing in the configuration. In this example paper size is entered as a string. It would be more convenient to select a value for this property from a list of available sizes; however, you cannot create catalogs for each characteristic type in the configuration, since catalogs are created at the configuration development stage, while new characteristic types are entered as you use the application.\n\nCharts of characteristic types can help you deal with this issue. You can use a subordinate catalog to store values of characteristics that cannot be selected from catalogs, enumerations and other content existing in the configuration.\n\nCreate a CharacteristicValues catalog and specify it is subordinate to the NomenclatureCharacteristicTypes chart of characteristic types. Next, select this catalog as a value for the CharacteristicExtValues property of the chart of characteristic types. Additionally you need to add a CatalogRef: CharacteristicValues type to the Type property of the chart of characteristic types.\n\nNow the chart of characteristic types can use the CharacteristicValues catalog for characteristic value lists. Change ValueType for the Paper size characteristic type by selecting CatalogRef: CharacteristicValues. When you fill in the characteristic value, you will be prompted to select it from the catalog list limited by the owning Paper size characteristic type.\n\nThe structure of data in the resulting example will look like the following:\n\nYou can use charts of characteristic types to enter characteristic types as you work with the infobase. However, you can also create predefined characteristic types in the configuration. You are recommended to create these types as values corresponding to the operation logic of the configuration, rather than as default characteristic types. An example could be a New Year discount percentage. If you enter this characteristic for a product, the price calculation algorithm can use it to define a selling price in the period preceding the New Year.\n\n1C:Enterprise registers are mainly used to store and process information about the company's business or organizational activities.\n\nDocument and Catalog type infobase objects are used to store information about actual objects of a subject area, such as employees, goods, material and currency. Each database object corresponds to an actual object of a subject area.\n\nRegisters usually store information on changes in the status of objects or other information that does not directly reflect subject-domain objects. For example, registers can hold information on currency exchange rates or information on the receipt and dispensing of merchandise.\n\nA database object is independent of its attributes and has its own value. For example, an employee may change their last name, passport number or any other attribute. However, the employee will still be the same individual.\n\nAfter you delete an object, you cannot create it again. Even if you make all of an object's attributes the same as those of the deleted object, it will be a different object. The system stores an internal object ID – a reference. A reference is unique within the entire infobase. No two objects may have the same reference in the entire lifetime of the infobase. References of the deleted objects are not assigned to new objects. Database object references may be stored in database fields.\n\nThe information in registers is stored in records. Use of a register record depends only on the data that are stored in this record. For example, a currency exchange rate record does not represent anything material. It does not correspond to any physical object. The only important factor is that it contains currency, a date and the exchange rate set for this date. This record may be deleted and replaced with the same record, but this will not affect the logic of the system. Accordingly, register records do not have references and references to register records may not be stored in database fields.\n\nThis section describes information and accumulation registers. For information about accounting registers see page 1-660; for information about calculation registers see page 1-668.\n\nHere you will learn, what an information register is and how information registers should be used.\n\nThe main purpose of an information register is to store existing information for the application task, whose makeup extends to a certain combination of values and when necessary, extends over time. For example, if we want to store information about competitors’ prices for the goods that we sell, this information could be expanded by adding goods or competitors. If we also want to track price movements and if we enter this information periodically, the stored information can be expanded over time, as well.\n\n1C:Enterprise uses a special mechanism – information registers – for storing these data and working with them.\n\nAn information register is a multi-dimensional data array needed to implement a function that provides the required information for a specific set of arguments. Function arguments are called dimensions and function results are called resources. In the example given above, the two-dimensional register CompetitorsPrices will have Competitor and Product as its dimensions and Price as its resource. You can have more than one resource. For example, you can store the wholesale and retail prices.\n\nIn addition to dimensions and resources, you can create a set of attributes for an information register. Attributes can be used to add any information to register records. Attributes do not influence values of register resources and may be used to analyze register records.\n\nInformation registers whose data extend over time are called \"periodic\". For periodic information registers, the system also supports standard operations such as getting the latest or earliest value (for example, getting the last price entered for a particular product and a particular competitor) and also getting a slice of the latest or historical values. For example, all the latest prices for various goods and competitors can be retrieved.\n\nTo expand the information over time, use the Period field in the register. It is not entered as a dimension, but is automatically added by the system when a periodical register is created.\n\nIt is not necessary to create dimensions for information registers. In this case a register is actually a set of periodical data. Such registers may be used to store the last names of the officers responsible for signing documents. Documents are created and signed by officers with the right of signature at a certain point in time. For information on how to use constant values for these purposes see page 1-279. One drawback of this method is that when the value of a constant changes, a new name will be shown in archive documents. In such cases, it is necessary to use a periodical information register instead of a constant. This periodical information register stores information about changes and documents use values from the information register depending on the date.\n\nCurrency exchange rate is the most typical example of a one-dimensional periodical value. When some calculations are performed (e.g., when a price in dollars is determined by recalculating a price in euro according to the exchange rate), it is important to know this value at the time of the calculation.\n\nIt is especially important to know the currency exchange rate when performing certain calculations post factum. In this case it is necessary to recall the exchange rate for past dates.\n\nTo make it possible to obtain such information, it is necessary to create a table that contains three columns: currency name, date and currency exchange rate. The rows of this table contain the exchange rates for several currencies on a specific date.\n\nWhen you open a table like this, please keep in mind that the Rate column contains specific exchange rates for a certain date and it is assumed the rate does not change for all the following dates until the next rate is available. Therefore, to obtain the exchange rate for an intermediate date, you should take the rate for the closest previous date with a recorded exchange rate.\n\nIt is also necessary to remember that different values in the Currency column mean that a parallel history of exchange rates is maintained for several currencies.\n\nIn other words, the table shown above can be represented in a different way:\n\nSuch a table may contain any number of columns, depending on the number of currencies for which exchange rates need to be stored.\n\nIf a register is not periodical, no Period field is created for it. In the example above, the CompetitorPrices register may be non-periodical if you do not want to store the price change history (you only need the current prices). In this case the register function can be used to tell us what a specific competitor's price is for a specific good currently, but it will not be able to tell what the price was at the beginning of the year.\n\nThese principles imply that the system can only have one record with a specific set and period of dimensions. In fact, there really can be only one price for each product of each competitor. If, for any reason, we can obtain multiple prices and want to store this information in the database, we need to create another dimension to store a value that makes these prices different. For example, you can create an InformationSource dimension. In this case we will be able to enter competitors’ prices from different sources.\n\nUniqueness of the records in a dimension set makes information registers fundamentally different from accumulation registers where multiple records can be entered with the same value and period.\n\nIf receiving data as of the very first moment or the most recent (current) moment is the most frequent use of the register, then it makes sense, with regard to such registers, to allow the system to support totals for the slice of the last data (Allow totals: section of last property) or the slice of the first data (Allow totals: section of first property). An example of such use is a register with the sales prices of goods. The item price can change, but queries for the current price are the most common queries to this register.\n\nInformation register totals will be used if all of the following prerequisites are met:\n\n Totals use in the configuration is allowed for the register.\n\n Totals use in 1C:Enterprise mode is allowed for the register.\n\n Data as of the very first date (the slice of the first data) or the last (current) date (the slice of the last data) is received without specifying the period value.\n\n Conditions for the SliceFirst and SliceLast virtual tables are set only for values of dimensions and separators that are in the Independent and Shared mode.\n\n Only dimensions and separators in the Independent and Shared mode are used in data access restrictions.\n\nIf none of the above is met, the standard query is used to get the information from the register.\n\nLines of the information register containing information about resource values for specific dimensions and specific periods, are called records. A record key can be used to identify information register entries. Records may be entered into the information register in two ways:\n\nFor information on selecting the record entry method see page 1-320.\n\nThese two options only influence the way the information is entered and have no impact on the main principle of the register functioning.\n\nA document that enters a record into the information register is called a recorder.\n\nRegisters that are recorded independently may be freely edited manually or using the 1C:Enterprise script tools. If a dimension of such a register is assigned as the master dimension and its value is a reference to a database object, this record will make sense only while this object exists. For example, if you specify Competitor dimension as the master dimension, it is considered that this record makes sense as information about this competitor. Correspondingly, when a competitor is deleted, all related records will be deleted automatically.\n\nIf a register is maintained by a recorder, this means that the records in this register will be strictly subordinate to the recorder documents. Usually it means that records are created when documents are posted. When a document is deleted, the records will be deleted automatically. Unlike master dimensions, there may be only one recorder.\n\nYou should remember that an information register record key created with the help of the EmptyKey() method is not equal to the information register record key, the dimension values of which are equal to default values for its own types.\n\nThe Information registers branch of the configuration tree is used to work with information registers.\n\nEditing a register includes specifying its properties and developing its structure: sets of dimensions, resources and attributes, screen forms for viewing and editing records and (if necessary) print forms (see page 1-59).\n\nHere you will find information about properties specific to information registers. They supplement common properties of all configuration objects.\n\nUse the Information register editing window to edit registers. Register properties are arranged in tabs (see fig. 132).\n\nPeriodicity. This property defines how often resource values are saved in the register.\n\nThis property directly influences the possibility of obtaining register resource values using the 1C:Enterprise script methods. For a non-periodical register, you can obtain only the last entered value of a register resource – information from previous periods is not available in such a register. For periodic registers, a value with a periodicity smaller than the specified register periodicity cannot be obtained.\n\nPeriodicity does not depend on the register editing type.\n\nWrite mode. This property determines how records are entered: independently (for example, manually) or subordinate to the recorder (for example, using documents).\n\nIf a register is periodical and the independent write mode is selected, the Include period in the main filter property becomes available. If this option is checked, in addition to the main dimensions and attributes of the register, the user can also filter records by the Period field.\n\nThe Data tab is used to generate the data structure of a register. Use it to create dimensions, resources and attributes.\n\nThe Recorders tab is used to manage the list of recorders. This tab is available only if the Write mode property is set to Subordinate to recorder (see fig. 133).\n\nThe top list is used to manage the recorder list (check or uncheck boxes) and the bottom list contains the selected recorder objects.\n\nSimilarly to managing the recorder list in information registers, you can manage recorder lists in registers of other types.\n\nResources in an information register can have a wide variety of data types, while other registers can only contain numeric resources.\n\nFor a description of how to create forms and templates see page 1-47.\n\nTo develop an information register structure, you need to create sets of dimensions, resources and attributes.\n\nTo manage a register's list of dimensions, resources and attributes and edit their properties, use the Dimensions, Resources and Attributes folder controls in the Register editing window. The setup procedure for the items of these folders is identical. For information about how to use these controls see page 1-59. Properties of Information Register Dimension (Resource, Attribute)\n\nProperties of dimensions, resources and attributes are edited using the properties palette. They are mainly the same as common properties of all configuration objects. Unique properties of dimensions, resources and attributes are described below.\n\nMaster. This property is meaningful for dimensions that contain a reference to configuration objects. If this property is turned on, the information register record is meaningful only as long as this object exists. If the object is deleted, all related records will be deleted from the register.\n\nNo Empty Values. If this option is checked, register records cannot have empty dimension values.\n\nIndex. This dimension property may be edited for non-master dimensions. For dimensions, resources and attributes with the Index property turned on, a separate index is created, thus increasing register performance. Index is always created for master dimensions.\n\nWhen a register is viewed in the 1C:Enterprise mode, you can sort register records by indexed dimensions, resources and attributes. The required number of forms for register viewing and editing has to be created at the configuration development stage.\n\nThe arrangement of an information register's dimensions is very important.\n\nIf you need quick access to some dimensions, place them at the beginning of the list.\n\nThe sequence of information register dimensions influences the possibility of using 1C:Enterprise script methods that employ positional access to dimensions.\n\nYou should also remember that changing the order of dimension requires restructuring of the infobase.\n\nAccumulation registers are used in 1C:Enterprise to store information about availability and movements of certain values (material, cash, etc.). All data on commercial transactions that are entered using documents or generated using calculations must be accumulated in registers. In this case they can be retrieved, analyzed and displayed to a user in report forms.\n\nHere you will learn about accumulation registers and the basic principles of using them.\n\nAn accumulation register is a configuration object designed to store register records and total data.\n\nA typical problem you may face when creating a summary information \"storage\" is the structure decisions: what points to choose for accumulating the summary data to ensure a simple retrieval of the required information. The 1C:Enterprise system uses simple but flexible means to generate accumulation registers. You only need to specify what points and data need to be stored in the register, and the system itself will ensure recording and retrieval of data using simple language resources.\n\nThe 1C:Enterprise script methods allow to retrieve accumulation register balance for a specified point in time. You can filter data by dimension values or obtain balances by other dimensions.\n\nConsider the following example. Say you are creating a sales and warehouse accounting program and you need to store information about the quantity and price of each product in each warehouse. You want to get information such as the remaining inventory of a specific product at a specific warehouse, the remaining inventory of a specific product at all warehouse, the cost of all goods at warehouse, etc.\n\nIn 1C:Enterprise, such an accumulation register is a rectangular system of coordinates. One of its axis contains warehouses, the other – goods. The intersections between goods and warehouses contain the values of a product's quantity and cost.\n\nIt is hard to explain the physical meaning of an accumulation register, since it does not have any material counterpart.\n\nTherefore, let us specify that an accumulation register is an n-dimensional system of coordinates for storing joint data. The axes of such coordinate systems are called register dimensions and the stored data are called register resources.\n\nThe state of accumulation registers usually changes when a document is posted. The document posting procedure is located in the document module. It contains an algorithm of generating data on register changes to be made when the document is posted. This information is called register records. The totals calculation mechanism uses register records to make direct changes in accumulation registers. Therefore, register records contain only increments (positive or negative) of register resource values, not the total values.\n\nA system configuration specialist can allow end users to track register records. The Designer can be used to create screen and print forms for viewing and analyzing register records.\n\nYou can create any number of accumulation registers at the configuration development stage. However, you should remember that if there are too many accumulation registers, this might reduce system performance during document posting.\n\nIn addition to dimensions and resources, you can also create a set of attributes for an accumulation register. Attributes may be used to add any information to register records. Attributes do not influence values of register resources and may be used to analyze register records.\n\nAs pointed out above, register changes are implemented by register records. Register records influence the register's totals. Totals are summarized register information obtained by summing up the values of register records.\n\nThe totals of an accumulation register may be represented as a table with a number of columns equal to the number of dimensions and resources in the accumulation register. The number of rows in the table depends on the number of different dimensions and resources:\n\nYou can see in the table that the Product dimension has the Table and Cabinet values, while the Warehouse dimension has the Temporary, Wholesale and Retail values. The Count and Total columns for the accumulation register's resources contain the quantity and total value for each product at the warehouse.\n\nUnlike register records, you cannot view totals of accumulation registers directly. To obtain totals information, you can create any number of reports in the configuration. These report will query the totals and display them as product reports, warehouse cards, lists, etc.\n\nIn the 1C:Enterprise system, you can use two types of accumulation registers: balance registers and turnover registers.\n\nBalance registers can use the 1C:Enterprise script methods to get accumulation register balances for a specified point in time. You can filter data by dimension values or obtain balances by other dimensions.\n\nTurnover registers are used to store information that cannot have any balance, e.g., sales volume for different customers.\n\nAs an example, review how settlements with buyers of goods manufactured or sold by the company (or consumers of the company's services) are tracked. This kind of accounting is usually mandatory for every enterprise.\n\nTo be able to obtain current information about how much the enterprise and one of its customers owe each other, it is necessary to use a Settlements register which will store the amount of debt for each customer. When a business transaction occurs, the register is updated according to the current state of settlements. The Settlements register is a balance register.\n\nHowever, it is impossible to obtain information about volumes of purchases for a specific customer in a certain period of time from the Settlements register, since it does not store this information. Therefore, additional effort is required to get this information: for example, you can include a Contractor attribute in the register structure, then select register records for each contractor, and calculate the total amount of purchases. However, if you need this information in real time (e.g., when a customer is eligible for a discount upon reaching a certain volume of sales), this method is not applicable.\n\nIn this case you can use a turnover register. This register (let us call it Purchase Volume) will store information about sales volume for each customer (turnover with the customer).\n\nNow, for business transactions, it would be necessary to change both the Settlements register and the Purchase Volume register. After each purchase, information about the amount of the purchase will be recorded to this register. As a result, the Purchase Volume register will constantly accumulate information about the total volume of purchases made by the client.\n\nAll of this makes the advantages of registers quite clear.\n\nFirst of all, registers are used to store information that needs to be accessed quickly. A 1C:Enterprise configuration specialist must determine whether information is needed quickly and whether it is necessary to use a register, based on the requirements of system users.\n\nRegisters also make it possible to obtain the most accurate information about current funds. As the processes of saving documents and recording changes in registers are separate (a document may be saved without posting), the data in documents and in registers may differ. However, registers (unlike documents) are a storage of totals information, i.e. changes recorded in registers confirm completion of a business transaction.\n\nThe Accumulation registers branch of the configuration tree is used to work with accumulation registers.\n\nUse the editing window to edit properties of Accumulation register objects and create subordinate objects (see page 1-59).\n\nWhen you edit an accumulation register, you specify its type and develop its structure:\n\n Create screen and print forms to view register records, if necessary.\n\nSuch values as UUID, BinaryData, and any unlimited length string cannot be the accumulation register dimension type.\n\nThis section describes unique properties of accumulation registers that supplement common properties of all objects.\n\nRegister Type specifies if a register can be used:  To store balances (select Balance from the list),  To store turnovers (select Turnovers).\n\nSee page 1-325 for a description of the differences between the balance register and the turnover register.\n\nDefault List Form. A register may contain several forms for tracking its records. If there are multiple forms for entering and selection, you can specify the default form in the Default List Form property.\n\nEnable totals split. If this check box is set to True (default value), totals splitter mechanism is used to ensure a greater concurrency of writing to the register. If the system writes records in multiple concurrent sessions, it does not update the same totals records; it writes each change in the totals as a separate record. To obtain totals, these values are summed. This way, totals are kept up-to-date (this is useful for quick generation of reports, for example) and register records can be made concurrently. This mode requires more resources (for instance, the amount of data in totals tables is bigger in this case). This is why both the configuration and the 1C:Enterprise script contains properties that manage this mode.\n\nRecords multiply only when transactions are performed concurrently. Their quantity for each combination of dimensions depends on the maximum number of concurrent transactions. When recalculating totals, separate accumulated records are collapsed.\n\nThe totals splitting mode can be modified by the user in the 1C:Enterprise mode. By default this property is enabled.\n\nUse in totals. If this check box is set to False, the dimension is excluded from the stored register totals.\n\nSeveral forms can be created to view the register records. If there are several forms for data input and selection, you can specify the form to be used by default in the Default List Form property.\n\nYou can use aggregates to boost system performance when using accumulation turnover registers. Aggregates can be represented as special storages that can be used with queries in 1C:Enterprise. Major Concepts\n\nTerms used to describe aggregate operation are defined below in this section.\n\nAggregate is a physical database table that stores summary totals for all register resources by the selected dimensions with the specified periodicity in a specific period. If a register uses aggregates, it can have up to 30 dimensions.\n\nAggregates are defined by the following parameters:\n\n Effect: expected reduction in average time of query execution with aggregates. For example, if the aggregate effect is 90%, it means the average time of query execution with aggregates is 90% less than the average time of executing the same query with totals. Estimate.\n\nAggregate period is a range of dates used to insert data in the aggregate.\n\nAggregate periodicity is periodicity used to store data in the aggregate.\n\nAggregate list is a set of aggregates created at the configuration stage. The list can be either manually generated or loaded from a file resulting from the calculation of optimal aggregates.\n\nUse statistics is information about the type of queries (dimensions, period and periodicity) to the recorder. These data allow you to rebuild aggregates and obtain an optimal aggregate list.\n\nOptimal aggregate list is a list of aggregates with an optimal size-effect correlation for the register in its current state (register records and use statistics).\n\nAggregates/totals mode: If you select the aggregates mode, queries are executed using aggregate data; if you set the totals mode, queries use totals data.\n\nUse aggregates: You can disable use of aggregates to perform no operations with aggregates when register records change. It makes sense to disable aggregates while you mass-load data into the registers; however, enabling aggregates later could require a lot of resources to update the aggregates (if the modified data fall within the aggregate period).\n\nReview the following general flowchart for working with aggregates (see fig. 135).\n\nThis flowchart demonstrates how to work with a single register. If you want to work with multiple register, you need to perform every step for each individual register.\n\nLet us examine the working procedure in greater detail:\n\n1. Create a list of required aggregates in Designer. This is an optional step. Creating aggregates in Designer mode can be used if the constant use of an aggregate in any infobase needs to be supported.\n\nThere are several ways to create aggregates in Designer:\n\n○ Calculate (i.e., in totals mode) and load optimal aggregates (DetermineOptimalAggregates()). If aggregates have not been previously used, a list of optimal aggregates will be received on the basis of the register record table. If aggregates have been previously used, a list of optimal aggregates will be built on the basis of a table of records and the usage statistics. ○ Create an own list of aggregates based on register queries analysis.\n\n2. After the database configuration is updated, enable aggregate mode for the register (SetAggregatesMode()method).\n\n3. You then need to rebuild aggregates on a regular basis (RebuildAggregatesUsing()method). During this operation, the system adds the required aggregates and deletes ones that are not used. This operation is performed if the current list of aggregates is not optimal. Only the aggregates created during the rebuilding operation are deleted. The aggregates created in Designer are not deleted automatically, and if the aggregates are created in Designer, the following actions will be taken during the rebuilding operation:\n\n○ An aggregate will be enabled if the aggregate’s use case is set to Always.\n\nPerformance evaluation of the aggregate does not impact its usage.\n\n○ If the aggregate’s use mode is set to Auto, the aggregate will be enabled based on performance evaluation. The use of this aggregate is evaluated together with the aggregates automatically created by the system. If an automatically created aggregate performs better than the aggregate created in Designer with Auto use mode, an automatically created aggregate will be used instead.\n\n4. Aggregate updating must be completed afterwards (UpdateAggregates() method). When aggregates are updated, data from the selected register records table is moved to the corresponding aggregate tables. The records created in the records table after the previous aggregate update are moved.\n\n5. Next, the usage statistics of the aggregates created should be accumulated. To do this, perform standard tasks that use data from the register for which the aggregate mode has been enabled within a certain period of time (e.g., within 1 month). Regular aggregate updates must be performed while working. When the period ends, rebuild the aggregates (step 3) and perform steps 3–5 on a regular basis.\n\nThe described schema details an approach to working with the register’s aggregates in a client/server mode.\n\nWorking with aggregates differs a little when it comes to file-based usage of the system:\n\nThe major differences between this approach and a general approach to working with aggregates (see fig. 137) is as follows (only the differences are described):\n\n At step 1 a list of aggregates must be created in Designer.\n\n Step 6. Recalculation of optimal aggregates (DetermineOptimalAggregates() method) should be performed regularly (e.g., once a month). During this period (1 month), standard tasks that use data from the register for which the aggregate mode has been enabled should be performed. Regular aggregate updates are needed while working.\n\n Step 7. When a new list of optimal aggregates is received, the user needs to define whether or not a list of aggregates needs to be changed in the configuration metadata. If no changes are required, proceed to step 3.\n\n Step 8. If a list of aggregates needs to be updated, load the required (or all) aggregates (from a list of optimal ones). Update the database configuration (the infobase will be restructured) and then proceed from step 3.\n\nFor guidelines on each of these steps, see the next section.\n\nRecommendations on How to Use Aggregates\n\nYou can generate a list of aggregates using one of the available methods.\n\nIf you want to enable aggregates for a register that exists in the configuration, but has never used aggregates, you can do the following:\n\n If the register has no or few records (up to 2 or 3 thousand records), analyze queries that use this register to obtain a list of frequently used dimensions, filters, query periods and data retrieval periodicity. Based on the information you obtain, create a list of aggregates while minimizing the number of aggregates.\n\n If the register uses a big number of records (more than three thousand), you can calculate optimal aggregates based on the register data using the DetermineOptimalAggregates() method and then load the resulting list of aggregates.\n\n If the register you use already has the aggregates mode and use enabled (i.e. the initial list of aggregate has been generated), you can also retrieve a list of optimal aggregates and load it in the Designer. This method is different from method 2, since in this case the calculation of optimal aggregates uses the system statistics. Therefore, the resulting list of aggregates is more efficient compared to the list obtained for a register with the disabled aggregates mode and use.\n\nOptimal aggregates method is convenient, only if the table of register records contains at least three to five thousand records. If the number of records is below this figure, the obtained list of aggregates might prove inefficient.\n\nYou should rebuild aggregates at least as often as you calculate the list of optimal aggregates. This operation does not modify the list of aggregates; instead, it attempts to use the existing aggregates only.\n\nYou should also keep in mind that the rebuilding operation is only efficient if you have a considerable amount of statistical data.\n\nAlthough it is hard to recommend when you need to rebuild aggregates in the most general case, major factors can be pointed out:\n\n when it is probable the nature of register data has changed;\n\n when it is possible the nature of queries has changed (which modifies the accumulated statistics).\n\nWhen you perform the operation, you are required to specify two parameters:\n\n Maximum relative size – limits the size of the generated aggregate list (percentage of the record table size). If it is set to zero, there is no limit on the aggregate list size.\n\n Minimum effect – percentage of improvement in the process of rebuilding the older list. If the new list improves the effect by the specified value, the method rebuilds the list. If the parameter has no value or is set to zero, there is no minimum effect requirement.\n\nThe current list of aggregates is also rebuilt if its size exceeds the value in the Maximum relative size, % parameter or the resulting list is at least as efficient as the double value of the Minimum rebuild effect, % parameter. Otherwise the list of aggregates is not rebuilt.\n\nThe rebuilding operation takes a lot of time and resources. You are not recommended to run this operation when other users actively use the infobase.\n\nYou are recommended to run this operation more often than the aggregate rebuilding operation.\n\nYou can update aggregates in two ways:\n\n Run a complete update of all aggregates marked as used. This might take a long time.\n\n Use the so-called \"partial\" filling. In this case a single run updates 10 aggregates for a period of one month.\n\nWhen you perform this operation, you should indicate the Maximum relative size. It limits the size of the generated aggregate list (as percentage of the record table size). If set to zero, there is no limit on the aggregate list size.\n\nYou are recommended to run this operation when the load on the infobase is minimal.\n\nYou are recommended to use the totals splitting mode when using aggregates, especially if aggregates are updated by a scheduled job and at the same time documents are posted for a register that updates the aggregates.\n\nTo define an aggregate to be used for a query, use the algorithm described below.\n\nA query defines the register dimensions to be used, selects a list of aggregates that contain all dimensions used and match the query by frequency and period the best. Next, an aggregate with the minimum size is selected from the list. This is the aggregate that will be used.\n\nA query may use an aggregate with a lower frequency than the frequency set in the query. In this case, the required data will be obtained by adding data from shorter periods.\n\nSometimes a period specified in the query does not match the aggregates period. In this case, two aggregates can be used to execute a query. Let us take a look at an example. For instance, an infobase includes two aggregates that cover the entire query period:\n\nThe query is executed for the period from September 15 to November 15. In this case, two aggregates will be used:\n\n An aggregate with a monthly periodicity will be used to obtain data from October 1 to October 31;\n\n An aggregate with a daily periodicity will be used to obtain data from September 15 to September 30 and from November 1 to November 15;\n\n Data from the different aggregates will be added together to obtain the final result.\n\nA virtual turnover table of the register for which the aggregate mode is enabled always contains actual data.\n\nYou can run this operation as needed; it is not regular. Below is a list of conditions when you are recommended to calculate optimal aggregates:\n\n when some time elapses after you generate the initial aggregate list;\n\n if performance reduces significantly as you use the current aggregate list;\n\n if the set of queries to the register changes;\n\n if it is probable that the current aggregate list is no longer optimal.\n\nThis operation is optional for the client/server variant. Optimal aggregates are created automatically (if necessary) when aggregates are rebuilt.\n\nThis operation takes the longest time and the biggest amount of resources. We strongly recommend running it only when other users do not work with the infobase.\n\nUsing scheduled jobs when working with aggregates\n\nRebuild and refresh aggregate operations can be executed with scheduled jobs. You should follow the recommendations below when creating a schedule for performing scheduled jobs:\n\n For a scheduled job that performs rebuild and refresh operations, setting the Key property of a scheduled job is recommended (see page 2-827).\n\n Setting a schedule for scheduled rebuild and refresh jobs is recommended to avoid simultaneous execution of rebuild and refresh operations.\n\nIf you follow these recommendations, you can prevent simultaneous execution of rebuild and refresh operations, which positively affects performance.\n\nYou can only create and edit a list of aggregates for an accumulation turnover register (the Register Type property is set to Turnovers). If you want to call the aggregate wizard, use the Open aggregates command in the register context menu.\n\nIt opens the aggregate wizard window where you can manage aggregates of an accumulation turnover register. You can manage aggregates manually or load a ready-to-use list of optimal aggregates (use a special button at the command bar).\n\nAs you create aggregates, you can specify their use. If it's Auto (by default), the system independently determines whether an aggregate needs to be used during the aggregate rebuilding operation. If Always is selected, the system always uses this aggregate.\n\nThe Periodicity column defines the minimum time period for storing totals for the selected dimensions in the aggregate. You are allowed to have multiple aggregates with identical dimension sets and differing periodicity. Be sure not to overuse aggregates. A big number of aggregates can excessively expand the database without increasing query performance.\n\nYou can use the right-hand area of the window to indicate dimensions to be included in the edited aggregate. An aggregate can contain any number of dimensions (up to 30) or have no dimensions. In this case summary turnovers for the register are saved with the specified periodicity.\n\nIf the list of optimal aggregates is stored in an xml-file, you can load this list. To do this, use a special command of the aggregate wizard (see fig. 139) and select the ready-to-use list.\n\nThe system compares the list from the file with the current aggregate list and highlights the aggregates recommended to be added (from the Optimal Aggregates list) and the aggregates recommended to be deleted (from the Aggregates list). You can choose not to implement the recommendations or implement them partially.\n\nTo develop a register structure, you need to create sets of dimensions, resources and attributes at the Data tab (see page 1-59).\n\nProperties of dimensions, resources and attributes are edited using the properties palette. They are mainly the same as common properties of all configuration objects. Unique properties of dimensions, resources and attributes are described below.\n\nType. Unlike dimensions and attributes, Resource objects may store only Number data type.\n\nNo Empty Values. Check this option to disable writing register records with empty dimension values.\n\nIndex. This option may be specified only for dimensions. When you turn this property on, it speeds up operations with the register data, for example, when records by a specific dimension are selected. Such operations include queries with specified dimension value, temporary calculations and methods of bypassing AccumulationRegister object records in the 1C:Enterprise script using dimension-based filter.\n\nUse in totals. If this property is not set, dimensions are excluded from the stored register totals (this property is only used for turnover register records). If a dimension of this type is used in a query or condition of a virtual table, the table does not use the stored totals; instead, it calculates data based on the record table only.\n\nThe order of dimensions in the accumulation register affects the access to register totals. Place the dimensions that require fast access in the beginning of the dimensions list."
    },
    {
        "link": "https://4d.by/upload/iblock/f8d/V8Update.htm",
        "document": "\n• New functionality and changes\n• New functionality and changes in the 1C:Enterprise mode\n• Changes that require modification of configuration and administrative settings\n• Transition from the previous version to the version 8.3.11\n\nNew functionality and changes\n\nNew functionality and changes in the 1C:Enterprise mode\n\nChanges that require modification of configuration and administrative settings\n\nTransition from the previous version to the version 8.3.11\n• Conversion of configurations, infobases, external data processors, and external reports is not required during the transition from the previous version to the version 8.3.11.\n• Some features that are added in version 8.3.11 do not support compatibility mode. When you toggle the compatibility mode, the structure of some database objects is changed. To be able to work with the infobase using a previous platform version, you have to turn the compatibility mode on.\n• It is recommended that you rebuild the full-text search index in order to use morphological full-text search by attribute name.\n• In order to use the collaboration system in 1C:Enterprise 8.3.11 test release, you have to reregister the infobase. After the update to 1C:Enterprise 8.3.11 final release, you have to reregister it. The message history for the period between these two registrations will not be preserved.\n• It is recommended that you uninstall your HASP Device Driver and then install HASP Device Driver 7.60, which is a part of 1C:Enterprise distribution package.\n• New functionality and changes\n• New functionality and changes in the 1C:Enterprise mode\n• Changes that require modification of configuration and administrative settings\n• Transition from the previous version to the version 8.3.10\n\nNew functionality and changes\n\nNew functionality and changes in the 1C:Enterprise mode\n\nChanges that require modification of configuration and administrative settings\n• The OpenSSL library is updated to version 1.0.2k and modified to eliminate vulnerabilities.\n• The libxml2 library is modified to eliminate vulnerabilities.\n• The libxslt library is modified to eliminate vulnerabilities.\n• The libtiff library is updated to version 4.0.8.\n• The libpng library is updated to version 1.6.29.\n\nTransition from the previous version to the version 8.3.10\n• Conversion of configurations, infobases, external data processors and external reports is not required during the transition from the previous version to the version 8.3.10.\n• Some features that are added in version 8.3.10 do not support compatibility mode. When you toggle the compatibility mode, the structure of some database objects is changed. To be able to work with the infobase using a previous platform version, you have to turn the compatibility mode on.\n• If a full-text search query generates multiple intermediate results and the search result contains under 1 mln records, the user gets the search result. To enable this feature, set the configuration compatibility mode to None and update the full-text search index.\n• It is recommended that you convert large configuration repositories (repositories that store 30 000 - 40 000 versions, such as 1C:ERP Enterprise Resource Planning 2) to version 8.3.8 format using the utility.\n• It is recommended that you uninstall your HASP Device Driver and then install HASP Device Driver 7.60, which is a part of 1C:Enterprise distribution package.\n• New functionality and changes\n• New functionality and changes in the 1C:Enterprise mode\n• Changes that require modification of configuration and administrative settings\n• Transition from the previous version to the version 8.3.9\n\nNew functionality and changes\n\nNew functionality and changes in the 1C:Enterprise mode\n\nChanges that require modification of configuration and administrative settings\n• The cURL library is modified to eliminate vulnerabilities.\n• The libtiff library is updated to version 4.0.7.\n\nTransition from the previous version to the version 8.3.9\n• Conversion of configurations, infobases, external data processors and external reports is not required during the transition from the previous version to the version 8.3.9.\n• Some features that are added in version 8.3.9 do not support compatibility mode. When you toggle the compatibility mode, the structure of some database objects is changed. To be able to work with the infobase using a previous platform version, you have to turn the compatibility mode on.\n• In the file mode, queries are optimized for scenarios where an applied solution has separators but actually contains a single data area. To apply this optimization to an existing infobase, perform infobase verification and repair with the Reindex infobase tables check box selected. Once the restructuring is completed, the optimization is applied to all restructured objects.\n• The index of the actual action period table of a calculation register is complemented by the start date and end date fields, and the index is now clustered. This reduces the chance of lock escalation to the table level when writing record sets of calculation registers that support action period. For the chart of calculation types table that stores serial numbers of calculation type displacements, a nonunique index by displacement number is implemented. As a result, simultaneous editing of a single chart of calculation types in different data areas of a separated infobase never requires waiting for lock releases. To apply this optimization to existing infobases, perform the infobase verification and repair operation with the Restructure infobase tables option selected.\n• After migration to mobile 1C:Enterprise platform version 8.3.9.67 or later, when you first start an application, 1C:Enterprise performs infobase verification and repair with and check boxes selected. If this operation takes a long time to complete, it is recommended that you cancel it on the mobile device, retrieve the backup that you created before the update from the mobile device, and use the cluster administration console ( ) to verify and repair the infobase, just like you would do for desktop 1C:Enterprise platform. Then, on the mobile device, restore the repaired infobase from the file.\n• New functionality and changes\n• New functionality and changes in the 1C:Enterprise mode\n• Changes that require modification of configuration and administrative settings\n• Transition from the previous version to the version 8.3.8\n\nNew functionality and changes\n\nNew functionality and changes in the 1C:Enterprise mode\n\nChanges that require modification of configuration and administrative settings\n• The cURL library is updated to version 7.43 and modified to eliminate vulnerabilities.\n• The OpenSSL library is updated to version 1.0.2j and modified to eliminate vulnerabilities.\n• The libpng library is updated to version 1.6.21.\n• The libtiff library is updated to eliminate vulnerabilities.\n• The libxml2 library is updated to version 2.9.4 and modified to eliminate vulnerabilities.\n• The libxslt library is modified to eliminate vulnerabilities.\n\nTransition from the previous version to the version 8.3.8\n• Conversion of configurations, infobases, external data processors and external reports is not required during the transition from the previous version to the version 8.3.8.\n• Some features that are added in version 8.3.8 do not support compatibility mode. When you toggle the compatibility mode, the structure of some database objects is changed. To be able to work with the infobase using a previous platform version, you have to turn the compatibility mode on.\n• When the is set to , the minimum supported version of Microsoft SQL Server is Microsoft SQL Server 2005 (this includes scenarios that use the Native Client).\n• In the file mode, infobase operations are optimized. To support the optimization, the file database data storage format is updated to new version 8.3.8 format. The option to change the page size of the infobase file ( ) is implemented. The page size can have one of the following values: 4096, 8192, 16384, 32768, or 65536 bytes. To migrate data between infobase formats, you can use a .dt file (provided that the target infobase has the required format) or convert the infobase file using cnvdbfl utility. The cnvdbfl utility can change the infobase file page size during the conversion.\n• If you migrate to a new 1C:Enterprise version:\n• From version 8.3.7 or earlier, no action is reqiured.\n• From version in range 8.3.8.1606 - 8.3.8.1861, it is recommended that after the migration you perform infobase verification and repair with the check box selected, or use the administration console utility ( ) to verify and repair the infobase. If your infobase contains objects that refer to exchange plan items and they can contain references to ThisNode item, it is recommended that you correct the references using the Replace references to incorrect ThisNode records data processor (read more). The data processor can use the result provided by the administration console (recommended) of the exchange plan record deletion marks as an input. It is recommended that you run the cluster administration console (1cv8a) in verification and repair mode, with report generation enabled. Then use the report as an input for the Replace references to incorrect ThisNode records data processor.\n• When you migrate to 1C:Enterprise version 8.3.8 or later, it is recommended that you use the data processor available for download at 1c-dn.com (read more). The data processor determines whether totals recalculation for accumulation registers and accounting registers is required to correct errors in scenarios where a dimension list includes a dimension of type and an index by dimensions includes more that 16 database fields. If it is required, after the migration perform infobase verification and repair with Check logical infobase integrity and Recalculate totals check boxes selected, or use the cluster administration console (1cv8a). The latter option is recommended because it is faster.\n• After the migration from 1C:Enterprise version 8.3.5 to a later version you might get an error when retrieving characteristics. This is because the earlier versions of the platform allow specifying the field instead of the field as a filter field for additional characteristic types of metadata objects. To correct the error, enter the correct value to the type filter field.\n• If your configuration includes HTTP services and you previously opened it with 1C:Enterprise Designer 8.3.4, when you open it with 1C:Enterprise 8.3.8, perform the following steps:\n• To eliminate the issue with OpenID provider operations, in the file for OpenID provider publication, add the required number of elements with available redirection URLs.\n• New functionality and changes\n• New functionality and changes in the 1C:Enterprise mode\n• Changes that require modification of configuration and administrative settings\n• Transition from the previous version to the version 8.3.7\n\nNew functionality and changes\n\nNew functionality and changes in the 1C:Enterprise mode\n\nChanges that require modification of configuration and administrative settings\n• Known vulnerabilities of cURL library are elimitaned.\n• The OpenSSL library is updated to version 1.0.0t.\n• The libxml2 library is updated to eliminate vulnerabilities.\n• The libxslt library is updated to eliminate vulnerabilities.\n\nTransition from the previous version to the version 8.3.7\n• Conversion of configurations, infobases, external data processors and external reports is not required during the transition from the previous version to the version 8.3.7.\n• Some features that are added in version 8.3.7 do not support compatibility mode. When you toggle the compatibility mode, the structure of some database objects is changed. To be able to work with the infobase using a previous platform version, you have to turn the compatibility mode on.\n• In order to use the new format of full-text search index and improve the performance of the input by string feature, clearing the full-text search index and building a new index is required. The property must be set to during these operations.\n• In the web client, the cryptography extension is required in order to access all certificate fields using the and properties of the object.\n\nTo obtain a link to an entry of the V8Update file, double-click any of the entry lines. This opens a pop-up window with the link available for copying to the clipboard. This feature is only available if JavaScript is enabled.\n• New functionality and changes\n• New functionality and changes in the 1C:Enterprise mode\n• Changes that require modification of configuration and administrative settings\n• Transition from the previous version to the version 8.3.6\n\nNew functionality and changes\n\nNew functionality and changes in the 1C:Enterprise mode\n\nChanges that require modification of configuration and administrative settings\n• The libxml2 library is updated from version 2.6.23 to version 2.9.1.\n• The libxslt library is updated from version 1.1.24 to version 1.1.28.\n• The OpenSSL library is updated from version 1.0.0o to version 1.0.0s.\n• The libpng library is updated from version 1.2.19 to version 1.6.19.\n• The libtiff library is updated from version 3.7.0 to version 4.0.3.\n• Known vulnerabilities of cURL library are elimitaned.\n\nTransition from the previous version to the version 8.3.6\n• Conversion of configurations, infobases, external data processors and external reports is not required during the transition from the previous version to the version 8.3.6.\n• Some features that are added in version 8.3.6 do not support compatibility mode. When you toggle the compatibility mode, the structure of some database objects is changed. To be able to work with the infobase using a previous platform version, you have to turn the compatibility mode on.\n• New functionality and changes\n• New functionality and changes in the 1C:Enterprise mode\n• Changes that require modification of configuration and administrative settings\n• Transition from the previous version to the version 8.3.5\n\nNew functionality and changes\n\nNew functionality and changes in the 1C:Enterprise mode\n\nChanges that require modification of configuration and administrative settings\n\nTransition from the previous version to the version 8.3.5\n• Conversion of configurations, infobases, external data processors and external reports is not required during the transition from the previous version to the version 8.3.5.\n• Some features that are added in version 8.3.5 do not support compatibility mode. When you toggle the compatibility mode, the structure of some database objects is changed. To be able to work with the infobase using a previous platform version, you have to turn the compatibility mode on.\n• 1C:Enterprise version 8.3.5 cannot share a configuration repository with any of the earlier 1C:Enterprise versions. In this scenario users of the earlier versions receive a diagnostic error message.\n• New functionality and changes\n• New functionality and changes in the 1C:Enterprise mode\n• Changes that require modification of configuration and administrative settings\n• Transition from the previous version to the version 8.3.4\n\nNew functionality and changes\n\nNew functionality and changes in the 1C:Enterprise mode\n\nChanges that require modification of configuration and administrative settings\n\nTransition from the previous version to the version 8.3.4\n• Conversion of configurations, infobases, external data processors and external reports is not required during the transition from the previous version to the version 8.3.4.\n• Some features that are added in version 8.3.4 do not support compatibility mode. When you toggle the compatibility mode, the structure of some database objects is changed. To be able to work with the infobase using a previous platform version, you have to turn the compatibility mode on.\n• During the transition to version 8.3.4, if your infobase runs in the file mode, we recommend that you perform infobase verification and repair with the check box selected.\n• New functionality and changes\n• New functionality and changes in the 1C:Enterprise mode\n• Changes that require modification of configuration and administrative settings\n• Transition from the version 8.2 to the version 8.3.3\n• Transition from the previous version to version 8.3.3\n\nNew functionality and changes\n\nNew functionality and changes in the 1C:Enterprise mode\n\nChanges that require modification of configuration and administrative settings\n\nTransition from the version 8.2 to the version 8.3.3\n• Conversion of configurations, infobases, external data processors, and external reports is not required during the upgrade from the version 8.2 to version 8.3.3.\n• To use certain features of version 8.3.3 you have to disable the compatibility mode. The structure of certain database objects is modified when disabling or enabling the compatibility mode. Note that to be able to work with infobases created using 1C:Enterprise version 8.2 you have to set the compatibility mode to the . In order to use certain optimization improvements, you have to restructure data related to the optimization areas. To restructure data, you can use the Verify and repair mode, or perform forced restructuring of the required objects.\n• Simultaneous operating of 1C:Enterprise 8.3.3 and earlier 1C:Enterprise versions with a single file infobase is not supported. In this case a diagnostic error message is displayed.\n• It is recommended that you revise the list of infobases. Infobases that are present in the list when version 8.3.3 is installed in most cases have version 8.2 or 8.1 (because it is the default version, which is set automatically when an infobase is created or added to the list). Therefore, in order to open an infobase in 8.3.3 (using the program that starts 1C:Enterprise), you have to specify the required version in the list of infobase startup settings, or specify the version directly in the infobase settings.\n• At the first start of server cluster version 8.3.3 on the computer that has previous versions of ther server cluster installed, the content of the cluster register file ( ) is converted to a new format. The register of the server cluster 8.3.3 is stored in the file in the same directory as the cluster register of the previous versions. There is no data synchronization between cluster registers of different versions after the first start of server cluster 8.3.3. To perform the conversion of the cluster register from version 8.2 to version 8.3 once more, stop the server cluster 8.3, delete the server cluster 8.3 register (the 1CV8Clst.lst file), and then start the server cluster 8.3.3.\n• To increase the performance of the configuration repository in a scenario when a repository server is used, disable the compatibility mode of the configuration repository. To access the configuration repository using earlier 1C:Enterprise versions, enable the compatibility mode of the configuration repository. The conversion process can take significant time.\n• Changed the full-text search index format. For efficient full-text search when using input by string, it is recommended that you clear and update the full-text search index during the transition to 1C:Enterprise version 8.3.3. It is also recommended that you clear and then update the full-text search index during the transition to earlier platform versions.\n• For infobases that use the OpenID authentication, you have to change the publishing settings in the file.\n\nTransition from the previous version to version 8.3.3\n• Conversion of configurations, infobases, external data processors, and external reports is not required during the transition from the previous version to the version 8.3.3.\n• Some features that are added in version 8.3.3 do not support compatibility mode. When you toggle the compatibility mode, the structure of some database objects is changed. To be able to work with the infobase using a previous platform version, you have to turn the compatibility mode on.\n• Simultaneous operating of 1C:Enterprise 8.3.3 and earlier 1C:Enterprise versions with a single file infobase is not supported. In this case a diagnostic error message is displayed.\n• To increase the performance of the configuration repository in a scenario when a repository server is used, disable the compatibility mode of the configuration repository. To access the configuration repository using earlier 1C:Enterprise versions, enable the compatibility mode of the configuration repository. The conversion process can take significant time.\n• Changed the full-text search index format. For efficient full-text search when using input by string, it is recommended that you clear and update the full-text search index during the transition to 1C:Enterprise version 8.3.3. It is also recommended that you clear and then update the full-text search index during the transition to earlier platform versions.\n• For infobases that use the OpenID authentication, you have to change the publishing settings in the file.\n• New functions and changes\n• New functions and changes in the 1C:Enterprise mode\n• Changes that require changes to the configuration and administrative settings\n• Transition from the previous version to the version 8.3.2\n\nNew functions and changes\n\nNew functions and changes in the 1C:Enterprise mode\n\nChanges that require changes to the configuration and administrative settings\n\nTransition from the previous version to the version 8.3.2\n• Conversion of configurations, infobases, external data processors, and external reports is not required during the transition from the previous version to the version 8.3.2.\n• Some features that are added in version 8.3.2 do not support compatibility mode. When you toggle the compatibility mode, the structure of some database objects is changed. To be able to work with the infobase using a previous platform version, you have to turn the compatibility mode on.\n\nVersion 8.3.1 does not include changes introduced in version 8.2.17.\n\nImproved the list of new and updated features:\n• Keywords and interface texts are color-coded (it is the same formatting that is used in the documentation).\n• Sections describing behavior in the compatibility mode have color background.\n• The list structure is updated, providing more details and better usability (only for version 8.3.1 or later).\n• New functions and changes\n• New functions and changes in the 1C:Enterprise mode\n• Changes that require changes to the configuration and administrative settings\n• Upgrade from the previous version to version 8.3.1\n\nNew functions and changes\n\nNew functions and changes in the 1C:Enterprise mode\n\nChanges that require changes to the configuration and administrative settings\n\nUpgrade from the previous version to version 8.3.1\n• Conversion of configurations, infobases, external data processors, and external reports is not required during the upgrade from the previous version to version 8.3.1.\n• To use certain features of version 8.3.1 you have to disable the compatibility mode. The structure of certain objects is modified when disabling or enabling the compatibility mode. Note that to be able to work with infobases created using previous 1C:Enterprise versions you have to enable the compatibility mode. In order to use certain optimization improvements, you have to restructure data related to the optimization areas. To restructure data, you can use the mode, or perform forced object restructuring.\n• It is recommended that you revise the list of infobases. Infobases that are present in the list when version 8.3 is installed in most cases have version 8.2 or 8.1 (because it is the default version, which is set automatically when an infobase is created or added to the list). Therefore, in order to open an infobase in 8.3, you have to specify the required version in the list of infobase startup settings, or specify the version directly in the infobase settings.\n• At the first start of server cluster version 8.3.1 on the computer hat has previous versions of ther server cluster installed, the content of the cluster register file( ) is converted to a new format. The register of the server cluster 8.3.1 is stored in the file in the same directory as the cluster register of the previous versions. There is no data synchronization between cluster registers of different versions after the first start of server cluster 8.3.1. To perforrm the conversion of the cluster register from version 8.2. to version 8.3 once more, stop the server cluster 8.3, delete the server cluster 8.3 register (the 1CV8Clst.lst file), and then start the server cluster 8.3."
    }
]