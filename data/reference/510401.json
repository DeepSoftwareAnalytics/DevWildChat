[
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions",
        "document": "You construct a regular expression in one of two ways:\n• Using a regular expression literal, which consists of a pattern enclosed between slashes, as follows: Regular expression literals provide compilation of the regular expression when the script is loaded. If the regular expression remains constant, using this can improve performance.\n• Or calling the constructor function of the object, as follows: Using the constructor function provides runtime compilation of the regular expression. Use the constructor function when you know the regular expression pattern will be changing, or you don't know the pattern and are getting it from another source, such as user input.\n\nWhen the search for a match requires something more than a direct match, such as finding one or more b's, or finding white space, you can include special characters in the pattern. For example, to match a single followed by zero or more s followed by , you'd use the pattern : the after means \"0 or more occurrences of the preceding item.\" In the string , this pattern will match the substring . The following pages provide lists of the different special characters that fit into each category, along with descriptions and examples. Assertions include boundaries, which indicate the beginnings and endings of lines and words, and other patterns indicating in some way that a match is possible (including look-ahead, look-behind, and conditional expressions). Distinguish different types of characters. For example, distinguishing between letters and digits. Groups group multiple patterns as a whole, and capturing groups provide extra submatch information when using a regular expression pattern to match against a string. Backreferences refer to a previously captured group in the same regular expression. Indicate numbers of characters or expressions to match. If you want to look at all the special characters that can be used in regular expressions in a single table, see the following: Note: A larger cheat sheet is also available (only aggregating parts of those individual articles).\n\nIf you need to use any of the special characters literally (actually searching for a , for instance), you must escape it by putting a backslash in front of it. For instance, to search for followed by followed by , you'd use — the backslash \"escapes\" the , making it literal instead of special. Similarly, if you're writing a regular expression literal and need to match a slash (\"/\"), you need to escape that (otherwise, it terminates the pattern). For instance, to search for the string \"/example/\" followed by one or more alphabetic characters, you'd use —the backslashes before each slash make them literal. To match a literal backslash, you need to escape the backslash. For instance, to match the string \"C:\\\" where \"C\" can be any letter, you'd use — the first backslash escapes the one after it, so the expression searches for a single literal backslash. If using the constructor with a string literal, remember that the backslash is an escape in string literals, so to use it in the regular expression, you need to escape it at the string literal level. and create the same expression, which searches for \"a\" followed by a literal \"*\" followed by \"b\". The function returns a new string where all special characters in regex syntax are escaped. This allows you to do to create a regular expression that matches only the string .\n\nRegular expressions are used with the methods and and with the methods , , , , , and . Executes a search for a match in a string. It returns an array of information or on a mismatch. Tests for a match in a string. It returns or . Returns an array containing all of the matches, including capturing groups, or if no match is found. Returns an iterator containing all of the matches, including capturing groups. Tests for a match in a string. It returns the index of the match, or if the search fails. Executes a search for a match in a string, and replaces the matched substring with a replacement substring. Executes a search for all matches in a string, and replaces the matched substrings with a replacement substring. Uses a regular expression or a fixed string to break a string into an array of substrings. When you want to know whether a pattern is found in a string, use the or methods; for more information (but slower execution) use the or methods. If you use or and if the match succeeds, these methods return an array and update properties of the associated regular expression object and also of the predefined regular expression object, . If the match fails, the method returns (which coerces to ). In the following example, the script uses the method to find a match in a string. If you do not need to access the properties of the regular expression, an alternative way of creating is with this script: const myArray = /d(b+)d/g.exec(\"cdbbdbsbz\"); // similar to 'cdbbdbsbz'.match(/d(b+)d/g); however, // 'cdbbdbsbz'.match(/d(b+)d/g) outputs [ \"dbbd\" ] // while /d(b+)d/g.exec('cdbbdbsbz') outputs [ 'dbbd', 'bb', index: 1, input: 'cdbbdbsbz' ] If you want to construct the regular expression from a string, yet another alternative is this script: With these scripts, the match succeeds and returns the array and updates the properties shown in the following table. In this example The matched string and all remembered substrings. The 0-based index of the match in the input string. The index at which to start the next match. (This property is set only if the regular expression uses the g option, described in Advanced Searching With Flags.) The text of the pattern. Updated at the time that the regular expression is created, not executed. As shown in the second form of this example, you can use a regular expression created with an object initializer without assigning it to a variable. If you do, however, every occurrence is a new regular expression. For this reason, if you use this form without assigning it to a variable, you cannot subsequently access the properties of that regular expression. For example, assume you have this script: const myRe = /d(b+)d/g; const myArray = myRe.exec(\"cdbbdbsbz\"); console.log(`The value of lastIndex is ${myRe.lastIndex}`); // \"The value of lastIndex is 5\" However, if you have this script: const myArray = /d(b+)d/g.exec(\"cdbbdbsbz\"); console.log(`The value of lastIndex is ${/d(b+)d/g.lastIndex}`); // \"The value of lastIndex is 0\" The occurrences of in the two statements are different regular expression objects and hence have different values for their property. If you need to access the properties of a regular expression created with an object initializer, you should first assign it to a variable.\n\nRegular expressions have optional flags that allow for functionality like global searching and case-insensitive searching. These flags can be used separately or together in any order, and are included as part of the regular expression. Makes and match the start and end of each line instead of those of the entire string. An upgrade to the mode with more Unicode features. Perform a \"sticky\" search that matches starting at the current position in the target string. To include a flag with the regular expression, use this syntax: Note that the flags are an integral part of a regular expression. They cannot be added or removed later. For example, creates a regular expression that looks for one or more characters followed by a space, and it looks for this combination throughout the string. You could replace the line: The flag is used to specify that a multiline input string should be treated as multiple lines. If the flag is used, and match at the start or end of any line within the input string instead of the start or end of the entire string. The , , and flags can be enabled or disabled for specific parts of a regex using the modifier syntax. Using the global search flag with exec() method with the flag returns each match and its position iteratively. In contrast, method returns all matches at once, but without their position. The flag is used to create \"unicode\" regular expressions; that is, regular expressions which support matching against unicode text. An important feature that's enabled in unicode mode is Unicode property escapes. For example, the following regular expression might be used to match against an arbitrary unicode \"word\": Unicode regular expressions have different execution behavior as well. contains more explanation about this."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions",
        "document": "A regular expression (regex for short) allow developers to match strings against a pattern, extract submatch information, or simply test if the string conforms to that pattern. Regular expressions are used in many programming languages, and JavaScript's syntax is inspired by Perl. You are encouraged to read the regular expressions guide to get an overview of the available regex syntaxes and how they work.\n\nRegular expressions are a important concept in formal language theory. They are a way to describe a possibly infinite set of character strings (called a language). A regular expression, at its core, needs the following features:\n• A set of characters that can be used in the language, called the alphabet.\n• Concatenation: means \"the character followed by the character \".\n• Kleene star: means \"zero or more characters\". Assuming a finite alphabet (such as the 26 letters of the English alphabet, or the entire Unicode character set), all regular languages can be generated by the features above. Of course, many patterns are very tedious to express this way (such as \"10 digits\" or \"a character that's not a space\"), so JavaScript regular expressions include many shorthands, introduced below. Note: JavaScript regular expressions are in fact not regular, due to the existence of backreferences (regular expressions must have finite states). However, they are still a very useful feature.\n\nFlags are special parameters that can change the way a regular expression is interpreted or the way it interacts with the input text. Each flag corresponds to one accessor property on the object. Makes and match the start and end of each line instead of those of the entire string. An upgrade to the mode with more Unicode features. Perform a \"sticky\" search that matches starting at the current position in the target string. The , , and flags can be enabled or disabled for specific parts of a regex using the modifier syntax. The sections below list all available regex syntaxes, grouped by their syntactic nature."
    },
    {
        "link": "https://w3schools.com/js/js_regexp.asp",
        "document": "A regular expression is a sequence of characters that forms a search pattern.\n\nThe search pattern can be used for text search and text replace operations.\n\nA regular expression is a sequence of characters that forms a search pattern.\n\nWhen you search for data in a text, you can use this search pattern to describe what you are searching for.\n\nA regular expression can be a single character, or a more complicated pattern.\n\nRegular expressions can be used to perform all types of text search and text replace operations.\n\nw3schools is a pattern (to be used in a search).\n\ni is a modifier (modifies the search to be case-insensitive).\n\nIn JavaScript, regular expressions are often used with the two string methods: and .\n\nThe method uses an expression to search for a match, and returns the position of the match.\n\nThe method returns a modified string where the pattern is replaced.\n\nThe method searches a string for a specified value and returns the position of the match:\n\nThe method replaces a specified value with another value in a string:\n\nModifiers can be used to perform case-insensitive more global searches:\n\nBrackets are used to find a range of characters:\n\nIn JavaScript, the RegExp object is a regular expression object with predefined properties and methods.\n\nIt searches a string for a pattern, and returns true or false, depending on the result.\n\nThe following example searches a string for the character \"e\":\n\nIt searches a string for a specified pattern, and returns the found text as an object.\n\nIf no match is found, it returns an empty (null) object.\n\nThe following example searches a string for the character \"e\":\n\nFor a complete reference, go to our Complete JavaScript RegExp Reference.\n\nThe reference contains descriptions and examples of all RegExp properties and methods."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
        "document": "Character class: Matches any one of the enclosed characters. You can specify a range of characters by using a hyphen, but if the hyphen appears as the first or last character enclosed in the square brackets, it is taken as a literal hyphen to be included in the character class as a normal character. For example, is the same as . They match the \"b\" in \"brisket\", and the \"c\" in \"chop\". For example, and match the \"b\" in \"brisket\", the \"c\" in \"chop\", and the \"-\" (hyphen) in \"non-profit\". For example, is the same as . They both match the \"b\" in \"brisket\", the \"c\" in \"chop\", and the \"n\" in \"non-profit\".\n\nNegated character class: Matches anything that is not enclosed in the square brackets. You can specify a range of characters by using a hyphen, but if the hyphen appears as the first character after the or the last character enclosed in the square brackets, it is taken as a literal hyphen to be included in the character class as a normal character. For example, is the same as . They initially match \"o\" in \"bacon\" and \"h\" in \"chop\". Note: The ^ character may also indicate the beginning of input.\n\nWildcard: Matches any single character except line terminators: , , or . For example, matches \"my\" and \"ay\", but not \"yes\", in \"yes make my day\", as there is no character before \"y\" in \"yes\". If the (s) flag is enabled, also matches line terminators. Inside a character class, the dot loses its special meaning and matches a literal dot.\n\nIndicates that the following character should be treated specially, or \"escaped\". It behaves one of two ways.\n• For characters that are usually treated literally, indicates that the next character is special and not to be interpreted literally. For example, matches the character \"b\". By placing a backslash in front of \"b\", that is by using , the character becomes special to mean match a word boundary.\n• For characters that are usually treated specially, indicates that the next character is not special and should be interpreted literally. For example, \"*\" is a special character that means 0 or more occurrences of the preceding character should be matched; for example, means match 0 or more \"a\"s. To match literally, precede it with a backslash; for example, matches \"a*\". Note: To match this character literally, escape it with itself. In other words to search for use .\n\nDisjunction: Matches either \"x\" or \"y\". Each component, separated by a pipe ( ), is called an alternative. For example, matches \"green\" in \"green apple\" and \"red\" in \"red apple\". Note: A disjunction is another way to specify \"a set of choices\", but it's not a character class. Disjunctions are not atoms — you need to use a group to make it part of a bigger pattern. is functionally equivalent to ."
    },
    {
        "link": "https://w3schools.com/jsref/jsref_obj_regexp.asp",
        "document": "The pattern is used for searching and replacing characters in strings. The RegExp Object is a regular expression with added Properties and Methods.\n\nFor a tutorial about Regular Expressions, read our JavaScript RegExp Tutorial.\n\nIt is supported in all browsers:\n\nModifiers define how to perform the search:\n\nBrackets are used to find a range of characters:\n\nTests for a match in a string. Returns the first match Tests for a match in a string. Returns true or false Returns the string value of the regular expression"
    },
    {
        "link": "https://stackoverflow.com/questions/67289152/accessing-and-manipulating-html-input-using-javascript",
        "document": "The main problem with your code is that it runs straight away, long before a user has entered any number. The next problem with it is that you never read the values from the inputs.\n\nWhat you instead want is for the code to wait until an event occurs - which, in your case is the event, that the user clicks the button.\n\nFor reacting to user actions (and more), Javascript has the concept of s, which you can add to any element. There is many different types of events; the one you care about here is the event.\n\nTo add it to the button, you first need your Javascript to learn where your element is. To find it in the page, Javascript offers the method.\n\nOnce you have found it, you can call the method on the element (all HTML elements have this method built-in).\n\nFor an explanation of the rest, check the source code comments (lines that begin with ):"
    },
    {
        "link": "https://medium.com/@ryan_forrester_/get-value-from-input-in-javascript-how-to-guide-6e1a6194b3de",
        "document": "Ways to Get Value from Input Fields\n\nThe method retrieves an element by its ID. You can use this method to get the value of an input field.\n\nThe method retrieves the first element that matches a CSS selector. This method provides more flexibility than .\n\nWhen handling events such as or , you can access the input field’s value directly from the event object.\n\nWithin an event handler, the keyword refers to the element that triggered the event. This can be used to access the value of an input field.\n\nExample: Using in Event Handlers\n\nIf you are using jQuery, you can simplify the process of getting input values with its concise syntax.\n\nFirst, include jQuery in your project:\n\nThen, use it to get the input value:"
    },
    {
        "link": "https://stackoverflow.com/questions/22471772/take-an-input-in-html-and-using-javascript-process-it-and-send-the-new-variable",
        "document": "Ask if you need help understanding anything here.\n\nThis will give feedback as soon as user presses any key, and thus is very fast.\n\nreturns a HTMLCollection (similar to an array) containing the set of matched elements (which we had passed as and ). What I am doing with is selecting the first element from the HTMLCollection (array), since I know there is only one element each of , , on the page.\n\nis an event that fires whenever a user presses a key inside of a text box. So, using it, I mean to say, on the element, fire the function, which will get the 's value using and then it in base and send to the function.\n\nIn the update function, we compute the using the global and the argument . Then using , we set the text of to the totalcost.\n\nRemember, there can be many elements by the same name on the same page. Thus the method is rightly called s , i.e., get multiple elements. However, only one element can exist on the page having a particular ID. Hence the method for getting by IDs is called (no here) . Easy to remember now :)"
    },
    {
        "link": "https://w3schools.com/js/js_best_practices.asp",
        "document": "Minimize the use of global variables.\n\nThis includes all data types, objects, and functions.\n\nGlobal variables and functions can be overwritten by other scripts.\n\nUse local variables instead, and learn how to use closures.\n\nAll variables used in a function should be declared as local variables.\n\nLocal variables must be declared with the , the , or the keyword, otherwise they will become global variables.\n\nIt is a good coding practice to put all declarations at the top of each script or function.\n• Provide a single place to look for local variables\n\nThis also goes for loop variables:\n\nIt is a good coding practice to initialize variables when you declare them.\n\nDeclaring objects with const will prevent any accidental change of type:\n\nDeclaring arrays with const will prevent any accidential change of type:\n• Use instead of\n• Use instead of\n• Use instead of\n• Use instead of\n• Use instead of\n• Use instead of\n• Use instead of\n\nA variable can contain all data types.\n\nBeware that numbers can accidentally be converted to strings or (Not a Number).\n\nWhen doing mathematical operations, JavaScript can convert numbers to strings:\n\nSubtracting a string from a string, does not generate an error but returns (Not a Number):\n\nThe comparison operator always converts (to matching types) before comparison.\n\nThe operator forces comparison of values and type:\n\nIf a function is called with a missing argument, the value of the missing argument is set to .\n\nUndefined values can break your code. It is a good habit to assign default values to arguments.\n\nRead more about function parameters and arguments at Function Parameters\n\nAlways end your statements with a . Even if you think there is no need for it.\n\nAlways treat numbers, strings, or booleans as primitive values. Not as objects.\n\nDeclaring these types as objects, slows down execution speed, and produces nasty side effects:\n\nThe function is used to run text as code. In almost all cases, it should not be necessary to use it.\n\nBecause it allows arbitrary code to be run, it also represents a security problem."
    },
    {
        "link": "https://forum.freecodecamp.org/t/transfering-the-value-from-html-input-element-into-javascript/696123",
        "document": "I am struggling to understand the best practice / why I am having issues getting the value of the HTML input element into Javascript. */ No matter whereI put the constants or event listener (inside or outside of the function / above or below the function or even removing the function completely) the console log is empty when I input a number in the html and click on the submit button. Hopefully it’s something obvious that I have overlooked. Thanks in advance for the help\n\nIs my purchaseBtn.addEventListener(“click”, checkInput); not doing the same thing as the proposed onchange=“myFunction(event)”? What I want is that when the user clicks the purchaseBtn the value which is entered in the input element of the HTML comes through to Javascript as my input constant. At the moment this does not seem to be working with my code and I’m not sure what the issue is. This was the solution proposed on another site I came across:\n\n \"// HTML // JavaScript const input = document. getElementById(“myInput”); const inputValue = input. \"\n\n I believe I have done this but the value does not seem to be coming through.\n\nokay, you are right. the submit button click event listener IS enough to access the input.value. my bad!\n\n i brought the code that you wrote to codepen, to see what was happening and now it works. seems like the problem are your quotation marks. look closely that these \" \" (correct for js) are different from these “ ” (that you are using in your code).\n\nWhen you enter a code block into a forum post, please precede it with a separate line of three backticks and follow it with a separate line of three backticks to make it easier to read. You can also use the “preformatted text” tool in the editor ( ) to add backticks around text. See this post to find the backtick on your keyboard.\n\n Note: Backticks (`) are not single quotes (').\n\nThanks, I have made that change purchaseBtn.addEventListener(“click”, () => checkInput()); but still no better I am afraid. The constants are also behaving strangely. In my screenshot below you can see that none of the references to constants get highlighted in the code when I click on them. With the exception of innerDisplay which seems to be working normally. What could be the cause of this?"
    }
]