[
    {
        "link": "https://docs.python-telegram-bot.org",
        "document": "We have made you a wrapper you can’t refuse\n\nWe have a vibrant community of developers helping each other in our Telegram group. Join us!\n\nStay tuned for library updates and new releases on our Telegram Channel.\n\nYou can install or upgrade via To install a pre-release, use the flag in addition. You can also install from source, though this is usually not necessary. To enable you to verify that a release file that you downloaded was indeed provided by the team, we have taken the following measures. Starting with v21.4, all releases are signed via sigstore. The corresponding signature files are uploaded to the GitHub releases page. To verify the signature, please install the sigstore Python client and follow the instructions for verifying signatures from GitHub Actions. As input for the parameter, please use the value . Earlier releases are signed with a GPG key. The signatures are uploaded to both the GitHub releases page and the PyPI project and end with a suffix . Please find the public keys here. The keys are named in the format . In addition, the GitHub release page also contains the sha1 hashes of the release files in the files with the suffix . tries to use as few 3rd party dependencies as possible. However, for some features using a 3rd party library is more sane than implementing the functionality again. As these features are optional, the corresponding 3rd party dependencies are not installed by default. Instead, they are listed as optional dependencies. This allows to avoid unnecessary dependency conflicts for users who don’t need the optional features. The only required dependency is httpx ~= 0.27 for , the default networking backend. is most useful when used along with additional libraries. To minimize dependency conflicts, we try to be liberal in terms of version requirements on the (optional) dependencies. On the other hand, we have to ensure stability of , which is why we do apply version bounds. If you encounter dependency conflicts due to these bounds, feel free to reach out. PTB can be installed with optional dependencies:\n• None installs the cryptography>=39.0.1 library. Use this, if you want to use Telegram Passport related functionality.\n• None installs httpx[socks]. Use this, if you want to work behind a Socks5 server.\n• None installs httpx[http2]. Use this, if you want to use HTTP/2.\n• None installs aiolimiter~=1.1,<1.3. Use this, if you want to use .\n• None installs the tornado~=6.4 library. Use this, if you want to use / .\n• None installs the cachetools>=5.3.3,<5.6.0 library. Use this, if you want to use arbitrary callback_data.\n• None installs the APScheduler>=3.10.4,<3.12.0 library. Use this, if you want to use the . To install multiple optional dependencies, separate them by commas, e.g. .\n• None installs all optional dependencies that are related to , i.e. .\n\nOnce you have installed the library, you can begin working with it - so let’s get started! Our Wiki contains an Introduction to the API explaining how the pure Bot API can be accessed via . Moreover, the Tutorial: Your first Bot gives an introduction on how chatbots can be easily programmed with the help of the module.\n• None The package documentation is the technical reference for . It contains descriptions of all available classes, modules, methods and arguments as well as the changelog.\n• None The wiki is home to number of more elaborate introductions of the different features of and other useful resources that go beyond the technical documentation.\n• None Our examples section contains several examples that showcase the different features of both the Bot API and . Even if it is not your approach for learning, please take a look at . It is the de facto base for most of the bots out there. The code for these examples is released to the public domain, so you can start by grabbing the code and building on top of it.\n• None The official Telegram Bot API documentation is of course always worth a read. If the resources mentioned above don’t answer your questions or simply overwhelm you, there are several ways of getting help.\n• None We have a vibrant community of developers helping each other in our Telegram group. Join us! Asking a question here is often the quickest way to get a pointer in the right direction.\n• None You can even ask for help on Stack Overflow using the python-telegram-bot tag. Since v20.0, is built on top of Pythons module. Because is in general single-threaded, does currently not aim to be thread-safe. Noteworthy parts of API that are likely to cause issues (e.g. race conditions) when used in a multi-threaded setting include:\n• None all classes in the module that allow to add/remove allowed users/chats at runtime\n\nOccasionally we are asked if we accept donations to support the development. While we appreciate the thought, maintaining PTB is our hobby, and we have almost no running costs for it. We therefore have nothing set up to accept donations. If you still want to donate, we kindly ask you to donate to another open source project/initiative of your choice instead.\n\nYou may copy, distribute and modify the software provided that modifications are described and licensed for free under LGPL-3. Derivative works (including modifications or anything statically linked to the library) can only be redistributed under LGPL-3, but applications that use the library don’t have to be."
    },
    {
        "link": "https://python-telegram-bot.readthedocs.io/en/v20.0a0/index.html",
        "document": "We have made you a wrapper you can’t refuse\n\nWe have a vibrant community of developers helping each other in our Telegram group. Join us!\n\nStay tuned for library updates and new releases on our Telegram Channel.\n\nThis library provides a pure Python, asynchronous interface for the Telegram Bot API. It’s compatible with Python versions 3.7+. In addition to the pure API implementation, this library features a number of high-level classes to make the development of bots easy and straightforward. These classes are contained in the submodule. A pure API implementation without is available as the standalone package . See here for details. Installing both and in conjunction will result in undesired side-effects, so only install one of both.\n\nYou can install or upgrade via To install a pre-release, use the flag in addition. You can also install from source, though this is usually not necessary. tries to use as few 3rd party dependencies as possible. However, for some features using a 3rd party library is more sane than implementing the functionality again. The dependencies are: is most useful when used along with additional libraries. To minimize dependency conflicts, we try to be liberal in terms of version requirements on the dependencies. On the other hand, we have to ensure stability of , which is why we do apply version bounds. If you encounter dependency conflicts due to these bounds, feel free to reach out. PTB can be installed with optional dependencies:\n• None installs the cryptography>=3.0 library. Use this, if you want to use Telegram Passport related functionality.\n• None installs the ujson>=4.0.0 library. It will then be used for JSON de- & encoding, which can bring speed up compared to the standard json library.\n• None installs . Use this, if you want to work behind a Socks5 server.\n\nOur Wiki contains an Introduction to the API explaining how the pure Bot API can be accessed via . Moreover, the Tutorial: Your first Bot gives an introduction on how chatbots can be easily programmed with the help of the module.\n• None The package documentation is the technical reference for . It contains descriptions of all available classes, modules, methods and arguments.\n• None The wiki is home to number of more elaborate introductions of the different features of and other useful resources that go beyond the technical documentation.\n• None Our examples directory contains several examples that showcase the different features of both the Bot API and . Even if it is not your approach for learning, please take a look at . It is the de facto base for most of the bots out there. The code for these examples is released to the public domain, so you can start by grabbing the code and building on top of it.\n• None The official Telegram Bot API documentation is of course always worth a read.\n\nIf the resources mentioned above don’t answer your questions or simply overwhelm you, there are several ways of getting help.\n• None We have a vibrant community of developers helping each other in our Telegram group. Join us! Asking a question here is often the quickest way to get a pointer in the right direction.\n• None You can even ask for help on Stack Overflow using the python-telegram-bot tag.\n\nYou may copy, distribute and modify the software provided that modifications are described and licensed for free under LGPL-3. Derivatives works (including modifications or anything statically linked to the library) can only be redistributed under LGPL-3, but applications that use the library don’t have to be."
    },
    {
        "link": "https://media.readthedocs.org/pdf/python-telegram-bot/stable/python-telegram-bot.pdf",
        "document": ""
    },
    {
        "link": "https://github.com/python-telegram-bot/python-telegram-bot",
        "document": "We have made you a wrapper you can't refuse\n\nWe have a vibrant community of developers helping each other in our Telegram group. Join us!\n\nStay tuned for library updates and new releases on our Telegram Channel.\n\nThis library provides a pure Python, asynchronous interface for the Telegram Bot API. It's compatible with Python versions 3.9+.\n\nIn addition to the pure API implementation, this library features several convenience methods and shortcuts as well as a number of high-level classes to make the development of bots easy and straightforward. These classes are contained in the submodule.\n\nAfter installing the library, be sure to check out the section on working with PTB.\n\nAll types and methods of the Telegram Bot API 8.3 are natively supported by this library. In addition, Bot API functionality not yet natively included can still be used as described in our wiki.\n\nYou can install or upgrade via\n\nTo install a pre-release, use the flag in addition.\n\nYou can also install from source, though this is usually not necessary.\n\nTo enable you to verify that a release file that you downloaded was indeed provided by the team, we have taken the following measures.\n\nStarting with v21.4, all releases are signed via sigstore. The corresponding signature files are uploaded to the GitHub releases page. To verify the signature, please install the sigstore Python client and follow the instructions for verifying signatures from GitHub Actions. As input for the parameter, please use the value .\n\nEarlier releases are signed with a GPG key. The signatures are uploaded to both the GitHub releases page and the PyPI project and end with a suffix . Please find the public keys here. The keys are named in the format .\n\nIn addition, the GitHub release page also contains the sha1 hashes of the release files in the files with the suffix .\n\ntries to use as few 3rd party dependencies as possible. However, for some features using a 3rd party library is more sane than implementing the functionality again. As these features are optional, the corresponding 3rd party dependencies are not installed by default. Instead, they are listed as optional dependencies. This allows to avoid unnecessary dependency conflicts for users who don't need the optional features.\n\nThe only required dependency is httpx ~= 0.27 for , the default networking backend.\n\nis most useful when used along with additional libraries. To minimize dependency conflicts, we try to be liberal in terms of version requirements on the (optional) dependencies. On the other hand, we have to ensure stability of , which is why we do apply version bounds. If you encounter dependency conflicts due to these bounds, feel free to reach out.\n\nPTB can be installed with optional dependencies:\n• installs the cryptography>=39.0.1 library. Use this, if you want to use Telegram Passport related functionality.\n• installs httpx[socks]. Use this, if you want to work behind a Socks5 server.\n• installs httpx[http2]. Use this, if you want to use HTTP/2.\n• installs aiolimiter~=1.1,<1.3. Use this, if you want to use .\n• installs the tornado~=6.4 library. Use this, if you want to use / .\n• installs the cachetools>=5.3.3,<5.6.0 library. Use this, if you want to use arbitrary callback_data.\n• installs the APScheduler>=3.10.4,<3.12.0 library. Use this, if you want to use the .\n\nTo install multiple optional dependencies, separate them by commas, e.g. .\n• installs all optional dependencies that are related to , i.e. .\n\nOnce you have installed the library, you can begin working with it - so let's get started!\n\nOur Wiki contains an Introduction to the API explaining how the pure Bot API can be accessed via . Moreover, the Tutorial: Your first Bot gives an introduction on how chatbots can be easily programmed with the help of the module.\n• The package documentation is the technical reference for . It contains descriptions of all available classes, modules, methods and arguments as well as the changelog.\n• The wiki is home to number of more elaborate introductions of the different features of and other useful resources that go beyond the technical documentation.\n• Our examples section contains several examples that showcase the different features of both the Bot API and . Even if it is not your approach for learning, please take a look at . It is the de facto base for most of the bots out there. The code for these examples is released to the public domain, so you can start by grabbing the code and building on top of it.\n• The official Telegram Bot API documentation is of course always worth a read.\n\nIf the resources mentioned above don't answer your questions or simply overwhelm you, there are several ways of getting help.\n• We have a vibrant community of developers helping each other in our Telegram group. Join us! Asking a question here is often the quickest way to get a pointer in the right direction.\n• You can even ask for help on Stack Overflow using the python-telegram-bot tag.\n\nSince v20.0, is built on top of Pythons module. Because is in general single-threaded, does currently not aim to be thread-safe. Noteworthy parts of API that are likely to cause issues (e.g. race conditions) when used in a multi-threaded setting include:\n• all classes in the module that allow to add/remove allowed users/chats at runtime\n\nContributions of all sizes are welcome. Please review our contribution guidelines to get started. You can also help by reporting bugs or feature requests.\n\nOccasionally we are asked if we accept donations to support the development. While we appreciate the thought, maintaining PTB is our hobby, and we have almost no running costs for it. We therefore have nothing set up to accept donations. If you still want to donate, we kindly ask you to donate to another open source project/initiative of your choice instead.\n\nYou may copy, distribute and modify the software provided that modifications are described and licensed for free under LGPL-3. Derivative works (including modifications or anything statically linked to the library) can only be redistributed under LGPL-3, but applications that use the library don't have to be."
    },
    {
        "link": "https://pypi.org/project/python-telegram-bot",
        "document": "A required part of this site couldn’t load. This may be due to a browser extension, network issues, or browser settings. Please check your connection, disable any ad blockers, or try using a different browser."
    },
    {
        "link": "https://openpyxl.readthedocs.io",
        "document": "It was born from lack of existing library to read/write natively from Python the Office Open XML format. All kudos to the PHPExcel team as openpyxl was initially based on PHPExcel.\n\nThis is an open source project, maintained by volunteers in their spare time. This may well mean that particular features or functions that you would like are missing. But things don’t have to stay that way. You can contribute the project Development yourself or contract a developer for particular features. Professional support for openpyxl is available from Clark Consulting & Research and Adimian. Donations to the project to support further development and maintenance are welcome. Bug reports and feature requests should be submitted using the issue tracker. Please provide a full traceback of any error you see and if possible a sample file. If for reasons of confidentiality you are unable to make a file publicly available then contact of one the developers. The repository is being provided by Octobus and Clever Cloud.\n\nAny help will be greatly appreciated, just follow those steps: 1. Please join the group and create a branch (https://foss.heptapod.net/openpyxl/openpyxl/) and follow the Merge Request Start Guide. for each independent feature, don’t try to fix all problems at the same time, it’s easier for those who will review and merge your changes ;-) 3. Don’t forget to add unit tests for your changes! (YES, even if it’s a one-liner, changes without tests will not be accepted.) There are plenty of examples in the source if you lack know-how or inspiration. 4. If you added a whole new feature, or just improved something, you can be proud of it, so add yourself to the AUTHORS file :-) 5. Let people know about the shiny thing you just implemented, update the docs! 6. When it’s done, just issue a pull request (click on the large “pull request” button on your repository) and wait for your code to be reviewed, and, if you followed all theses steps, merged into the main repository. For further information see Development There are several ways to contribute, even if you can’t code (or can’t code well):\n• None triaging bugs on the bug tracker: closing bugs that have already been closed, are not relevant, cannot be reproduced, …\n• None updating documentation in virtually every area: many large features have been added (mainly about charts and images at the moment) but without any documentation, it’s pretty hard to do anything with it\n• None proposing compatibility fixes for different versions of Python: we support 3.6, 3.7, 3.8 and 3.9."
    },
    {
        "link": "https://geeksforgeeks.org/python-reading-excel-file-using-openpyxl-module",
        "document": "Openpyxl is a Python library for reading and writing Excel (with extension xlsx/xlsm/xltx/xltm) files. The Openpyxl Module allows Python programs to read and modify Excel files. For example, users might have to go through thousands of rows and pick out a few handfuls of information to make small changes based on some criteria. Using Openpyxl module, these tasks can be done very efficiently and easily.\n\nUse this command to install openpyxl module\n\nProgram to Print the Particular Cell Value"
    },
    {
        "link": "https://pypi.org/project/openpyxl",
        "document": "A required part of this site couldn’t load. This may be due to a browser extension, network issues, or browser settings. Please check your connection, disable any ad blockers, or try using a different browser."
    },
    {
        "link": "https://realpython.com/openpyxl-excel-spreadsheets-python",
        "document": "Excel spreadsheets are one of those things you might have to deal with at some point. Either it’s because your boss loves them or because marketing needs them, you might have to learn how to work with spreadsheets, and that’s when knowing comes in handy!\n\nSpreadsheets are a very intuitive and user-friendly way to manipulate large datasets without any prior technical background. That’s why they’re still so commonly used today.\n\nIn this article, you’ll learn how to use openpyxl to:\n• Create simple or more complex spreadsheets, including adding styles, charts, and so on\n\nThis article is written for intermediate developers who have a pretty good knowledge of Python data structures, such as dicts and lists, but also feel comfortable around OOP and more intermediate level topics.\n\nIf you ever get asked to extract some data from a database or log file into an Excel spreadsheet, or if you often have to convert an Excel spreadsheet into some more usable programmatic form, then this tutorial is perfect for you. Let’s jump into the caravan! First things first, when would you need to use a package like in a real-world scenario? You’ll see a few examples below, but really, there are hundreds of possible scenarios where this knowledge could come in handy. You are responsible for tech in an online store company, and your boss doesn’t want to pay for a cool and expensive CMS system. Every time they want to add new products to the online store, they come to you with an Excel spreadsheet with a few hundred rows and, for each of them, you have the product name, description, price, and so forth. Now, to import the data, you’ll have to iterate over each spreadsheet row and add each product to the online store. Say you have a Database table where you record all your users’ information, including name, phone number, email address, and so forth. Now, the Marketing team wants to contact all users to give them some discounted offer or promotion. However, they don’t have access to the Database, or they don’t know how to use SQL to extract that information easily. What can you do to help? Well, you can make a quick script using that iterates over every single User record and puts all the essential information into an Excel spreadsheet. That’s gonna earn you an extra slice of cake at your company’s next birthday party! You may also have to open a spreadsheet, read the information in it and, according to some business logic, append more data to it. For example, using the online store scenario again, say you get an Excel spreadsheet with a list of users and you need to append to each row the total amount they’ve spent in your store. This data is in the Database and, in order to do this, you have to read the spreadsheet, iterate through each row, fetch the total amount spent from the Database and then write back to the spreadsheet. Here’s a quick list of basic terms you’ll see when you’re working with Excel spreadsheets: A Spreadsheet is the main file you are creating or working with. A Sheet is used to split different kinds of content within the same spreadsheet. A Spreadsheet can have one or more Sheets. A Column is a vertical line, and it’s represented by an uppercase letter: A. A Row is a horizontal line, and it’s represented by a number: 1. A Cell is a combination of Column and Row, represented by both an uppercase letter and a number: A1. Now that you’re aware of the benefits of a tool like , let’s get down to it and start by installing the package. For this tutorial, you should use Python 3.7 and openpyxl 2.6.2. To install the package, you can do the following: After you install the package, you should be able to create a super simple spreadsheet with the following code: The code above should create a file called in the folder you are using to run the code. If you open that file with Excel you should see something like this:\n\nLet’s start with the most essential thing one can do with a spreadsheet: read it. You’ll go from a straightforward approach to reading a spreadsheet to more complex examples where you read the data and convert it into more useful Python structures. Before you dive deep into some code examples, you should download this sample dataset and store it somewhere as : Download Dataset: Click here to download the dataset for the openpyxl exercise you’ll be following in this tutorial. This is one of the datasets you’ll be using throughout this tutorial, and it’s a spreadsheet with a sample of real data from Amazon’s online product reviews. This dataset is only a tiny fraction of what Amazon provides, but for testing purposes, it’s more than enough. Finally, let’s start reading some spreadsheets! To begin with, open our sample spreadsheet: In the code above, you first open the spreadsheet using , and then you can use to see all the sheets you have available to work with. After that, selects the first available sheet and, in this case, you can see that it selects Sheet 1 automatically. Using these methods is the default way of opening a spreadsheet, and you’ll see it many times during this tutorial. Now, after opening a spreadsheet, you can easily retrieve data from it like this: To return the actual value of a cell, you need to do . Otherwise, you’ll get the main object. You can also use the method to retrieve a cell using index notation. Remember to add to get the actual value and not a object: You can see that the results returned are the same, no matter which way you decide to go with. However, in this tutorial, you’ll be mostly using the first approach: . Note: Even though in Python you’re used to a zero-indexed notation, with spreadsheets you’ll always use a one-indexed notation where the first row or column always has index . The above shows you the quickest way to open a spreadsheet. However, you can pass additional parameters to change the way a spreadsheet is loaded. There are a few arguments you can pass to that change the way a spreadsheet is loaded. The most important ones are the following two Booleans:\n• read_only loads a spreadsheet in read-only mode allowing you to open very large Excel files.\n• data_only ignores loading formulas and instead loads only the resulting values. Now that you’ve learned the basics about loading a spreadsheet, it’s about time you get to the fun part: the iteration and actual usage of the values within the spreadsheet. This section is where you’ll learn all the different ways you can iterate through the data, but also how to convert that data into something usable and, more importantly, how to do it in a Pythonic way. There are a few different ways you can iterate through the data depending on your needs. You can slice the data with a combination of columns and rows: You can get ranges of rows or columns: # Get all cells from column A # Get all cells for a range of columns # Get all cells from row 5 # Get all cells for a range of rows You’ll notice that all of the above examples return a . If you want to refresh your memory on how to handle in Python, check out the article on Lists and Tuples in Python. There are also multiple ways of using normal Python generators to go through the data. The main methods you can use to achieve this are: Both methods can receive the following arguments: These arguments are used to set boundaries for the iteration: You’ll notice that in the first example, when iterating through the rows using , you get one element per row selected. While when using and iterating through columns, you’ll get one per column instead. One additional argument you can pass to both methods is the Boolean . When it’s set to , the values of the cell are returned, instead of the object: If you want to iterate through the whole dataset, then you can also use the attributes or directly, which are shortcuts to using and without any arguments: These shortcuts are very useful when you’re iterating through the whole dataset. Now that you know the basics of iterating through the data in a workbook, let’s look at smart ways of converting that data into Python structures. As you saw earlier, the result from all iterations comes in the form of . However, since a is nothing more than a that’s immutable, you can easily access its data and transform it into other structures. For example, say you want to extract product information from the spreadsheet and into a dictionary where each key is a product ID. A straightforward way to do this is to iterate over all the rows, pick the columns you know are related to product information, and then store that in a dictionary. Let’s code this out! First of all, have a look at the headers and see what information you care most about: This code returns a list of all the column names you have in the spreadsheet. To start, grab the columns with names: Lucky for you, the columns you need are all next to each other so you can use the and to easily get the data you want: Nice! Now that you know how to get all the important product information you need, let’s put that data into a dictionary: # Using the values_only because you want to return the cells' values # Using json here to be able to format the output for displaying later The code above returns a JSON similar to this: Here you can see that the output is trimmed to 2 products only, but if you run the script as it is, then you should get 98 products. To finalize the reading section of this tutorial, let’s dive into Python classes and see how you could improve on the example above and better structure the data. For this, you’ll be using the new Python Data Classes that are available from Python 3.7. If you’re using an older version of Python, then you can use the default Classes instead. So, first things first, let’s look at the data you have and decide what you want to store and how you want to store it. As you saw right at the start, this data comes from Amazon, and it’s a list of product reviews. You can check the list of all the columns and their meaning on Amazon. There are two significant elements you can extract from the data available: The Review has a few more fields: You can ignore a few of the review fields to make things a bit simpler. So, a straightforward implementation of these two classes could be written in a separate file : After defining your data classes, you need to convert the data from the spreadsheet into these new structures. Before doing the conversion, it’s worth looking at our header again and creating a mapping between columns and the fields you need: Let’s create a file where you have a list of all the field names and their column location (zero-indexed) on the spreadsheet: You don’t necessarily have to do the mapping above. It’s more for readability when parsing the row data, so you don’t end up with a lot of magic numbers lying around. Finally, let’s look at the code needed to parse the spreadsheet data into a list of product and review objects: \\ \\ # Using the read_only method since you're not gonna be editing the spreadsheet # Using the values_only because you just want to return the cell value # You need to parse the date from the spreadsheet into a datetime format After you run the code above, you should get some output like this: That’s it! Now you should have the data in a very simple and digestible class format, and you can start thinking of storing this in a Database or any other type of data storage you like. Using this kind of OOP strategy to parse spreadsheets makes handling the data much simpler later on. Before you start creating very complex spreadsheets, have a quick look at an example of how to append data to an existing spreadsheet. Go back to the first example spreadsheet you created ( ) and try opening it and appending some data to it, like this: # Start by opening the spreadsheet and selecting the main sheet # Write what you want into a specific cell Et voilà, if you open the new spreadsheet, you’ll see the following change:\n\nThere are a lot of different things you can write to a spreadsheet, from simple text or number values to complex formulas, charts, or even images. Previously, you saw a very quick example of how to write “Hello world!” into a spreadsheet, so you can start with that: The highlighted lines in the code above are the most important ones for writing. In the code, you can see that:\n• Line 5 shows you how to create a new empty workbook.\n• Lines 8 and 9 show you how to add data to specific cells.\n• Line 11 shows you how to save the spreadsheet when you’re done. Even though these lines above can be straightforward, it’s still good to know them well for when things get a bit more complicated. Note: You’ll be using the spreadsheet for some of the upcoming examples, so keep it handy. One thing you can do to help with coming code examples is add the following method to your Python file or console: It makes it easier to print all of your spreadsheet values by just calling . Before you get into the more advanced topics, it’s good for you to know how to manage the most simple elements of a spreadsheet. You already learned how to add values to a spreadsheet like this: There’s another way you can do this, by first selecting a cell and then changing its value: The new value is only stored into the spreadsheet once you call . The creates a cell when adding a value, if that cell didn’t exist before: # Before, our spreadsheet has only 1 row # Try adding a value to row 10 As you can see, when trying to add a value to cell , you end up with a tuple with 10 rows, just so you can have that test value. One of the most common things you have to do when manipulating spreadsheets is adding or removing rows and columns. The package allows you to do that in a very straightforward way by using the methods: Every single one of those methods can receive two arguments: Using our basic example again, let’s see how these methods work: # Insert 5 columns between column 2 (\"B\") and 3 (\"C\") # Insert a new row in the beginning # Insert 3 new rows in the beginning The only thing you need to remember is that when inserting new data (rows or columns), the insertion happens before the parameter. So, if you do , it inserts a new row before the existing first row. It’s the same for columns: when you call , it inserts a new column right before the already existing second column ( ). However, when deleting rows or columns, deletes data starting from the index passed as an argument. For example, when doing it deletes row , and when doing it deletes the third column ( ). Sheet management is also one of those things you might need to know, even though it might be something that you don’t use that often. If you look back at the code examples from this tutorial, you’ll notice the following recurring piece of code: This is the way to select the default sheet from a spreadsheet. However, if you’re opening a spreadsheet with multiple sheets, then you can always select a specific one like this: # Let's say you have two sheets: \"Products\" and \"Company Sales\" # You can select a sheet using its title You can also change a sheet title very easily: If you want to create or delete sheets, then you can also do that with and : # You can also define the position to create the sheet at # To remove them, just pass the sheet as an argument to the .remove() One other thing you can do is make duplicates of a sheet using : If you open your spreadsheet after saving the above code, you’ll notice that the sheet Products Copy is a duplicate of the sheet Products. Something that you might want to do when working with big spreadsheets is to freeze a few rows or columns, so they remain visible when you scroll right or down. Freezing data allows you to keep an eye on important rows or columns, regardless of where you scroll in the spreadsheet. Again, also has a way to accomplish this by using the worksheet attribute. For this example, go back to our spreadsheet and try doing the following: If you open the spreadsheet in your favorite spreadsheet editor, you’ll notice that row and columns and are frozen and are always visible no matter where you navigate within the spreadsheet. This feature is handy, for example, to keep headers within sight, so you always know what each column represents. Here’s how it looks in the editor: Notice how you’re at the end of the spreadsheet, and yet, you can see both row and columns and . You can use to add filters and sorts to your spreadsheet. However, when you open the spreadsheet, the data won’t be rearranged according to these sorts and filters. At first, this might seem like a pretty useless feature, but when you’re programmatically creating a spreadsheet that is going to be sent and used by somebody else, it’s still nice to at least create the filters and allow people to use it afterward. The code below is an example of how you would add some filters to our existing spreadsheet: # Check the used spreadsheet space using the attribute \"dimensions\" You should now see the filters created when opening the spreadsheet in your editor: You don’t have to use if you know precisely which part of the spreadsheet you want to apply filters to. Formulas (or formulae) are one of the most powerful features of spreadsheets. They gives you the power to apply specific mathematical equations to a range of cells. Using formulas with is as simple as editing the value of a cell. You can see the list of formulas supported by : Let’s add some formulas to our spreadsheet. Starting with something easy, let’s check the average star rating for the 99 reviews within the spreadsheet: If you open the spreadsheet now and go to cell , you should see that its value is: 4.18181818181818. Have a look in the editor: You can use the same methodology to add any formulas to your spreadsheet. For example, let’s count the number of reviews that had helpful votes: # The helpful votes are counted on column \"I\" You should get the number on your spreadsheet cell like so: You’ll have to make sure that the strings within a formula are always in double quotes, so you either have to use single quotes around the formula like in the example above or you’ll have to escape the double quotes inside the formula: . There are a ton of other formulas you can add to your spreadsheet using the same procedure you tried above. Give it a go yourself! Even though styling a spreadsheet might not be something you would do every day, it’s still good to know how to do it. Using , you can apply multiple styling options to your spreadsheet, including fonts, borders, colors, and so on. Have a look at the documentation to learn more. You can also choose to either apply a style directly to a cell or create a template and reuse it to apply styles to multiple cells. Let’s start by having a look at simple cell styling, using our again as the base spreadsheet: If you open your spreadsheet now, you should see quite a few different styles on the first 5 cells of column :\n• A2 with the text in bold\n• A3 with the text in red and bigger font size\n• A5 with a square border around the text Note: For the colors, you can also use HEX codes instead by doing . You can also combine styles by simply adding them to the cell at the same time: # Reusing the same styles from the example above Have a look at cell here: When you want to apply multiple styles to one or several cells, you can use a class instead, which is like a style template that you can use over and over again. Have a look at the example below: # Now let's apply this to all first row (header) cells If you open the spreadsheet now, you should see that its first row is bold, the text is aligned to the center, and there’s a small bottom border! Have a look below: As you saw above, there are many options when it comes to styling, and it depends on the use case, so feel free to check documentation and see what other things you can do. This feature is one of my personal favorites when it comes to adding styles to a spreadsheet. It’s a much more powerful approach to styling because it dynamically applies styles according to how the data in the spreadsheet changes. In a nutshell, conditional formatting allows you to specify a list of styles to apply to a cell (or cell range) according to specific conditions. For example, a widespread use case is to have a balance sheet where all the negative totals are in red, and the positive ones are in green. This formatting makes it much more efficient to spot good vs bad periods. Without further ado, let’s pick our favorite spreadsheet— —and add some conditional formatting. You can start by adding a simple one that adds a red background to all reviews with less than 3 stars: Now you’ll see all the reviews with a star rating below 3 marked with a red background: Code-wise, the only things that are new here are the objects and :\n• is quite similar to , which you already saw above, and it’s used to aggregate multiple styles such as fonts, borders, alignment, and so forth.\n• is responsible for selecting the cells and applying the styles if the cells match the rule’s logic. Using a object, you can create numerous conditional formatting scenarios. However, for simplicity sake, the package offers 3 built-in formats that make it easier to create a few common conditional formatting patterns. These built-ins are: The ColorScale gives you the ability to create color gradients: # Again, let's add this gradient to the star ratings, column \"H\" Now you should see a color gradient on column , from red to green, according to the star rating: You can also add a third color and make two gradients instead: # Again, let's add this gradient to the star ratings, column \"H\" This time, you’ll notice that star ratings between 1 and 3 have a gradient from red to yellow, and star ratings between 3 and 5 have a gradient from yellow to green: The IconSet allows you to add an icon to the cell according to its value: You’ll see a colored arrow next to the star rating. This arrow is red and points down when the value of the cell is 1 and, as the rating gets better, the arrow starts pointing up and becomes green: The package has a full list of other icons you can use, besides the arrow. Finally, the DataBar allows you to create progress bars: You’ll now see a green progress bar that gets fuller the closer the star rating is to the number 5: As you can see, there are a lot of cool things you can do with conditional formatting. Here, you saw only a few examples of what you can achieve with it, but check the documentation to see a bunch of other options. Even though images are not something that you’ll often see in a spreadsheet, it’s quite cool to be able to add them. Maybe you can use it for branding purposes or to make spreadsheets more personal. To be able to load images to a spreadsheet using , you’ll have to install : Apart from that, you’ll also need an image. For this example, you can grab the Real Python logo below and convert it from to using an online converter such as cloudconvert.com, save the final file as , and copy it to the root folder where you’re running your examples: Afterward, this is the code you need to import that image into the spreadsheet: # Let's use the hello_world spreadsheet since it has less data # A bit of resizing to not fill the whole spreadsheet with the logo You have an image on your spreadsheet! Here it is: The image’s left top corner is on the cell you chose, in this case, . Another powerful thing you can do with spreadsheets is create an incredible variety of charts. Charts are a great way to visualize and understand loads of data quickly. There are a lot of different chart types: bar chart, pie chart, line chart, and so on. has support for a lot of them. Here, you’ll see only a couple of examples of charts because the theory behind it is the same for every single chart type: Note: A few of the chart types that currently doesn’t have support for are Funnel, Gantt, Pareto, Treemap, Waterfall, Map, and Sunburst. For any chart you want to build, you’ll need to define the chart type: , , and so forth, plus the data to be used for the chart, which is called . Before you can build your chart, you need to define what data you want to see represented in it. Sometimes, you can use the dataset as is, but other times you need to massage the data a bit to get additional information. Let’s start by building a new workbook with some sample data: Now you’re going to start by creating a bar chart that displays the total number of sales per product: There you have it. Below, you can see a very straightforward bar chart showing the difference between online product sales online and in-store product sales: Like with images, the top left corner of the chart is on the cell you added the chart to. In your case, it was on cell . Note: Depending on whether you’re using Microsoft Excel or an open-source alternative (LibreOffice or OpenOffice), the chart might look slightly different. Try creating a line chart instead, changing the data a bit: With the above code, you’ll be able to generate some random data regarding the sales of 3 different products across a whole year. Once that’s done, you can very easily create a line chart with the following code: Here’s the outcome of the above piece of code: One thing to keep in mind here is the fact that you’re using when adding the data. This argument makes the chart plot row by row instead of column by column. In your sample data, you see that each product has a row with 12 values (1 column per month). That’s why you use . If you don’t pass that argument, by default, the chart tries to plot by column, and you’ll get a month-by-month comparison of sales. Another difference that has to do with the above argument change is the fact that our now starts from the first column, , instead of the second one. This change is needed because the chart now expects the first column to have the titles. There are a couple of other things you can also change regarding the style of the chart. For example, you can add specific categories to the chart: Add this piece of code before saving the workbook, and you should see the month names appearing instead of numbers: Code-wise, this is a minimal change. But in terms of the readability of the spreadsheet, this makes it much easier for someone to open the spreadsheet and understand the chart straight away. Another thing you can do to improve the chart readability is to add an axis. You can do it using the attributes and : This will generate a spreadsheet like the below one: As you can see, small changes like the above make reading your chart a much easier and quicker task. There is also a way to style your chart by using Excel’s default property. In this case, you have to choose a number between 1 and 48. Depending on your choice, the colors of your chart change as well: # You can play with this by choosing any number between 1 and 48 With the style selected above, all lines have some shade of orange: There is no clear documentation on what each style number looks like, but this spreadsheet has a few examples of the styles available. Here’s the full code used to generate the line chart with categories, axis titles, and style: There are a lot more chart types and customization you can apply, so be sure to check out the package documentation on this if you need some specific formatting. You already saw how to convert an Excel spreadsheet’s data into Python classes, but now let’s do the opposite. Let’s imagine you have a database and are using some Object-Relational Mapping (ORM) to map DB objects into Python classes. Now, you want to export those same objects into a spreadsheet. Let’s assume the following data classes to represent the data coming from your database regarding product sales: Now, let’s generate some random data, assuming the above classes are stored in a file: # Ignore these for now. You'll use them in a sec ;) By running this piece of code, you should get 5 products with 5 months of sales with a random quantity of sales for each month. Now, to convert this into a spreadsheet, you need to iterate over the data and append it to the spreadsheet: That’s it. That should allow you to create a spreadsheet with some data coming from your database. However, why not use some of that cool knowledge you gained recently to add a chart as well to display that data more visually? All right, then you could probably do something like this: Now we’re talking! Here’s a spreadsheet generated from database objects and with a chart and everything: That’s a great way for you to wrap up your new knowledge of charts! Even though you can use Pandas to handle Excel files, there are few things that you either can’t accomplish with Pandas or that you’d be better off just using directly. For example, some of the advantages of using are the ability to easily customize your spreadsheet with styles, conditional formatting, and such. But guess what, you don’t have to worry about picking. In fact, has support for both converting data from a Pandas DataFrame into a workbook or the opposite, converting an workbook into a Pandas DataFrame. Note: If you’re new to Pandas, check our course on Pandas DataFrames beforehand. First things first, remember to install the package: Now that you have some data, you can use to convert it from a DataFrame into a worksheet: You should see a spreadsheet that looks like this: If you want to add the DataFrame’s index, you can change , and it adds each row’s index into your spreadsheet. On the other hand, if you want to convert a spreadsheet into a DataFrame, you can also do it in a very straightforward way like so: Alternatively, if you want to add the correct headers and use the review ID as the index, for example, then you can also do it like this instead: # Set the first row as the columns for the DataFrame # Set the field \"review_id\" as the indexes for each row Using indexes and columns allows you to access data from your DataFrame easily: # Grab review with id \"R2EQL1V1L6E0C9\", using the index There you go, whether you want to use to prettify your Pandas dataset or use Pandas to do some hardcore algebra, you now know how to switch between both packages."
    },
    {
        "link": "https://openpyxl.readthedocs.io/en/3.1",
        "document": "It was born from lack of existing library to read/write natively from Python the Office Open XML format. All kudos to the PHPExcel team as openpyxl was initially based on PHPExcel.\n\nThis is an open source project, maintained by volunteers in their spare time. This may well mean that particular features or functions that you would like are missing. But things don’t have to stay that way. You can contribute the project Development yourself or contract a developer for particular features. Professional support for openpyxl is available from Clark Consulting & Research and Adimian. Donations to the project to support further development and maintenance are welcome. Bug reports and feature requests should be submitted using the issue tracker. Please provide a full traceback of any error you see and if possible a sample file. If for reasons of confidentiality you are unable to make a file publicly available then contact of one the developers. The repository is being provided by Octobus and Clever Cloud.\n\nAny help will be greatly appreciated, just follow those steps: 1. Please join the group and create a branch (https://foss.heptapod.net/openpyxl/openpyxl/) and follow the Merge Request Start Guide. for each independent feature, don’t try to fix all problems at the same time, it’s easier for those who will review and merge your changes ;-) 3. Don’t forget to add unit tests for your changes! (YES, even if it’s a one-liner, changes without tests will not be accepted.) There are plenty of examples in the source if you lack know-how or inspiration. 4. If you added a whole new feature, or just improved something, you can be proud of it, so add yourself to the AUTHORS file :-) 5. Let people know about the shiny thing you just implemented, update the docs! 6. When it’s done, just issue a pull request (click on the large “pull request” button on your repository) and wait for your code to be reviewed, and, if you followed all theses steps, merged into the main repository. For further information see Development There are several ways to contribute, even if you can’t code (or can’t code well):\n• None triaging bugs on the bug tracker: closing bugs that have already been closed, are not relevant, cannot be reproduced, …\n• None updating documentation in virtually every area: many large features have been added (mainly about charts and images at the moment) but without any documentation, it’s pretty hard to do anything with it\n• None proposing compatibility fixes for different versions of Python: we support 3.6, 3.7, 3.8 and 3.9."
    },
    {
        "link": "https://realpython.com/openpyxl-excel-spreadsheets-python",
        "document": "Excel spreadsheets are one of those things you might have to deal with at some point. Either it’s because your boss loves them or because marketing needs them, you might have to learn how to work with spreadsheets, and that’s when knowing comes in handy!\n\nSpreadsheets are a very intuitive and user-friendly way to manipulate large datasets without any prior technical background. That’s why they’re still so commonly used today.\n\nIn this article, you’ll learn how to use openpyxl to:\n• Create simple or more complex spreadsheets, including adding styles, charts, and so on\n\nThis article is written for intermediate developers who have a pretty good knowledge of Python data structures, such as dicts and lists, but also feel comfortable around OOP and more intermediate level topics.\n\nIf you ever get asked to extract some data from a database or log file into an Excel spreadsheet, or if you often have to convert an Excel spreadsheet into some more usable programmatic form, then this tutorial is perfect for you. Let’s jump into the caravan! First things first, when would you need to use a package like in a real-world scenario? You’ll see a few examples below, but really, there are hundreds of possible scenarios where this knowledge could come in handy. You are responsible for tech in an online store company, and your boss doesn’t want to pay for a cool and expensive CMS system. Every time they want to add new products to the online store, they come to you with an Excel spreadsheet with a few hundred rows and, for each of them, you have the product name, description, price, and so forth. Now, to import the data, you’ll have to iterate over each spreadsheet row and add each product to the online store. Say you have a Database table where you record all your users’ information, including name, phone number, email address, and so forth. Now, the Marketing team wants to contact all users to give them some discounted offer or promotion. However, they don’t have access to the Database, or they don’t know how to use SQL to extract that information easily. What can you do to help? Well, you can make a quick script using that iterates over every single User record and puts all the essential information into an Excel spreadsheet. That’s gonna earn you an extra slice of cake at your company’s next birthday party! You may also have to open a spreadsheet, read the information in it and, according to some business logic, append more data to it. For example, using the online store scenario again, say you get an Excel spreadsheet with a list of users and you need to append to each row the total amount they’ve spent in your store. This data is in the Database and, in order to do this, you have to read the spreadsheet, iterate through each row, fetch the total amount spent from the Database and then write back to the spreadsheet. Here’s a quick list of basic terms you’ll see when you’re working with Excel spreadsheets: A Spreadsheet is the main file you are creating or working with. A Sheet is used to split different kinds of content within the same spreadsheet. A Spreadsheet can have one or more Sheets. A Column is a vertical line, and it’s represented by an uppercase letter: A. A Row is a horizontal line, and it’s represented by a number: 1. A Cell is a combination of Column and Row, represented by both an uppercase letter and a number: A1. Now that you’re aware of the benefits of a tool like , let’s get down to it and start by installing the package. For this tutorial, you should use Python 3.7 and openpyxl 2.6.2. To install the package, you can do the following: After you install the package, you should be able to create a super simple spreadsheet with the following code: The code above should create a file called in the folder you are using to run the code. If you open that file with Excel you should see something like this:\n\nLet’s start with the most essential thing one can do with a spreadsheet: read it. You’ll go from a straightforward approach to reading a spreadsheet to more complex examples where you read the data and convert it into more useful Python structures. Before you dive deep into some code examples, you should download this sample dataset and store it somewhere as : Download Dataset: Click here to download the dataset for the openpyxl exercise you’ll be following in this tutorial. This is one of the datasets you’ll be using throughout this tutorial, and it’s a spreadsheet with a sample of real data from Amazon’s online product reviews. This dataset is only a tiny fraction of what Amazon provides, but for testing purposes, it’s more than enough. Finally, let’s start reading some spreadsheets! To begin with, open our sample spreadsheet: In the code above, you first open the spreadsheet using , and then you can use to see all the sheets you have available to work with. After that, selects the first available sheet and, in this case, you can see that it selects Sheet 1 automatically. Using these methods is the default way of opening a spreadsheet, and you’ll see it many times during this tutorial. Now, after opening a spreadsheet, you can easily retrieve data from it like this: To return the actual value of a cell, you need to do . Otherwise, you’ll get the main object. You can also use the method to retrieve a cell using index notation. Remember to add to get the actual value and not a object: You can see that the results returned are the same, no matter which way you decide to go with. However, in this tutorial, you’ll be mostly using the first approach: . Note: Even though in Python you’re used to a zero-indexed notation, with spreadsheets you’ll always use a one-indexed notation where the first row or column always has index . The above shows you the quickest way to open a spreadsheet. However, you can pass additional parameters to change the way a spreadsheet is loaded. There are a few arguments you can pass to that change the way a spreadsheet is loaded. The most important ones are the following two Booleans:\n• read_only loads a spreadsheet in read-only mode allowing you to open very large Excel files.\n• data_only ignores loading formulas and instead loads only the resulting values. Now that you’ve learned the basics about loading a spreadsheet, it’s about time you get to the fun part: the iteration and actual usage of the values within the spreadsheet. This section is where you’ll learn all the different ways you can iterate through the data, but also how to convert that data into something usable and, more importantly, how to do it in a Pythonic way. There are a few different ways you can iterate through the data depending on your needs. You can slice the data with a combination of columns and rows: You can get ranges of rows or columns: # Get all cells from column A # Get all cells for a range of columns # Get all cells from row 5 # Get all cells for a range of rows You’ll notice that all of the above examples return a . If you want to refresh your memory on how to handle in Python, check out the article on Lists and Tuples in Python. There are also multiple ways of using normal Python generators to go through the data. The main methods you can use to achieve this are: Both methods can receive the following arguments: These arguments are used to set boundaries for the iteration: You’ll notice that in the first example, when iterating through the rows using , you get one element per row selected. While when using and iterating through columns, you’ll get one per column instead. One additional argument you can pass to both methods is the Boolean . When it’s set to , the values of the cell are returned, instead of the object: If you want to iterate through the whole dataset, then you can also use the attributes or directly, which are shortcuts to using and without any arguments: These shortcuts are very useful when you’re iterating through the whole dataset. Now that you know the basics of iterating through the data in a workbook, let’s look at smart ways of converting that data into Python structures. As you saw earlier, the result from all iterations comes in the form of . However, since a is nothing more than a that’s immutable, you can easily access its data and transform it into other structures. For example, say you want to extract product information from the spreadsheet and into a dictionary where each key is a product ID. A straightforward way to do this is to iterate over all the rows, pick the columns you know are related to product information, and then store that in a dictionary. Let’s code this out! First of all, have a look at the headers and see what information you care most about: This code returns a list of all the column names you have in the spreadsheet. To start, grab the columns with names: Lucky for you, the columns you need are all next to each other so you can use the and to easily get the data you want: Nice! Now that you know how to get all the important product information you need, let’s put that data into a dictionary: # Using the values_only because you want to return the cells' values # Using json here to be able to format the output for displaying later The code above returns a JSON similar to this: Here you can see that the output is trimmed to 2 products only, but if you run the script as it is, then you should get 98 products. To finalize the reading section of this tutorial, let’s dive into Python classes and see how you could improve on the example above and better structure the data. For this, you’ll be using the new Python Data Classes that are available from Python 3.7. If you’re using an older version of Python, then you can use the default Classes instead. So, first things first, let’s look at the data you have and decide what you want to store and how you want to store it. As you saw right at the start, this data comes from Amazon, and it’s a list of product reviews. You can check the list of all the columns and their meaning on Amazon. There are two significant elements you can extract from the data available: The Review has a few more fields: You can ignore a few of the review fields to make things a bit simpler. So, a straightforward implementation of these two classes could be written in a separate file : After defining your data classes, you need to convert the data from the spreadsheet into these new structures. Before doing the conversion, it’s worth looking at our header again and creating a mapping between columns and the fields you need: Let’s create a file where you have a list of all the field names and their column location (zero-indexed) on the spreadsheet: You don’t necessarily have to do the mapping above. It’s more for readability when parsing the row data, so you don’t end up with a lot of magic numbers lying around. Finally, let’s look at the code needed to parse the spreadsheet data into a list of product and review objects: \\ \\ # Using the read_only method since you're not gonna be editing the spreadsheet # Using the values_only because you just want to return the cell value # You need to parse the date from the spreadsheet into a datetime format After you run the code above, you should get some output like this: That’s it! Now you should have the data in a very simple and digestible class format, and you can start thinking of storing this in a Database or any other type of data storage you like. Using this kind of OOP strategy to parse spreadsheets makes handling the data much simpler later on. Before you start creating very complex spreadsheets, have a quick look at an example of how to append data to an existing spreadsheet. Go back to the first example spreadsheet you created ( ) and try opening it and appending some data to it, like this: # Start by opening the spreadsheet and selecting the main sheet # Write what you want into a specific cell Et voilà, if you open the new spreadsheet, you’ll see the following change:\n\nThere are a lot of different things you can write to a spreadsheet, from simple text or number values to complex formulas, charts, or even images. Previously, you saw a very quick example of how to write “Hello world!” into a spreadsheet, so you can start with that: The highlighted lines in the code above are the most important ones for writing. In the code, you can see that:\n• Line 5 shows you how to create a new empty workbook.\n• Lines 8 and 9 show you how to add data to specific cells.\n• Line 11 shows you how to save the spreadsheet when you’re done. Even though these lines above can be straightforward, it’s still good to know them well for when things get a bit more complicated. Note: You’ll be using the spreadsheet for some of the upcoming examples, so keep it handy. One thing you can do to help with coming code examples is add the following method to your Python file or console: It makes it easier to print all of your spreadsheet values by just calling . Before you get into the more advanced topics, it’s good for you to know how to manage the most simple elements of a spreadsheet. You already learned how to add values to a spreadsheet like this: There’s another way you can do this, by first selecting a cell and then changing its value: The new value is only stored into the spreadsheet once you call . The creates a cell when adding a value, if that cell didn’t exist before: # Before, our spreadsheet has only 1 row # Try adding a value to row 10 As you can see, when trying to add a value to cell , you end up with a tuple with 10 rows, just so you can have that test value. One of the most common things you have to do when manipulating spreadsheets is adding or removing rows and columns. The package allows you to do that in a very straightforward way by using the methods: Every single one of those methods can receive two arguments: Using our basic example again, let’s see how these methods work: # Insert 5 columns between column 2 (\"B\") and 3 (\"C\") # Insert a new row in the beginning # Insert 3 new rows in the beginning The only thing you need to remember is that when inserting new data (rows or columns), the insertion happens before the parameter. So, if you do , it inserts a new row before the existing first row. It’s the same for columns: when you call , it inserts a new column right before the already existing second column ( ). However, when deleting rows or columns, deletes data starting from the index passed as an argument. For example, when doing it deletes row , and when doing it deletes the third column ( ). Sheet management is also one of those things you might need to know, even though it might be something that you don’t use that often. If you look back at the code examples from this tutorial, you’ll notice the following recurring piece of code: This is the way to select the default sheet from a spreadsheet. However, if you’re opening a spreadsheet with multiple sheets, then you can always select a specific one like this: # Let's say you have two sheets: \"Products\" and \"Company Sales\" # You can select a sheet using its title You can also change a sheet title very easily: If you want to create or delete sheets, then you can also do that with and : # You can also define the position to create the sheet at # To remove them, just pass the sheet as an argument to the .remove() One other thing you can do is make duplicates of a sheet using : If you open your spreadsheet after saving the above code, you’ll notice that the sheet Products Copy is a duplicate of the sheet Products. Something that you might want to do when working with big spreadsheets is to freeze a few rows or columns, so they remain visible when you scroll right or down. Freezing data allows you to keep an eye on important rows or columns, regardless of where you scroll in the spreadsheet. Again, also has a way to accomplish this by using the worksheet attribute. For this example, go back to our spreadsheet and try doing the following: If you open the spreadsheet in your favorite spreadsheet editor, you’ll notice that row and columns and are frozen and are always visible no matter where you navigate within the spreadsheet. This feature is handy, for example, to keep headers within sight, so you always know what each column represents. Here’s how it looks in the editor: Notice how you’re at the end of the spreadsheet, and yet, you can see both row and columns and . You can use to add filters and sorts to your spreadsheet. However, when you open the spreadsheet, the data won’t be rearranged according to these sorts and filters. At first, this might seem like a pretty useless feature, but when you’re programmatically creating a spreadsheet that is going to be sent and used by somebody else, it’s still nice to at least create the filters and allow people to use it afterward. The code below is an example of how you would add some filters to our existing spreadsheet: # Check the used spreadsheet space using the attribute \"dimensions\" You should now see the filters created when opening the spreadsheet in your editor: You don’t have to use if you know precisely which part of the spreadsheet you want to apply filters to. Formulas (or formulae) are one of the most powerful features of spreadsheets. They gives you the power to apply specific mathematical equations to a range of cells. Using formulas with is as simple as editing the value of a cell. You can see the list of formulas supported by : Let’s add some formulas to our spreadsheet. Starting with something easy, let’s check the average star rating for the 99 reviews within the spreadsheet: If you open the spreadsheet now and go to cell , you should see that its value is: 4.18181818181818. Have a look in the editor: You can use the same methodology to add any formulas to your spreadsheet. For example, let’s count the number of reviews that had helpful votes: # The helpful votes are counted on column \"I\" You should get the number on your spreadsheet cell like so: You’ll have to make sure that the strings within a formula are always in double quotes, so you either have to use single quotes around the formula like in the example above or you’ll have to escape the double quotes inside the formula: . There are a ton of other formulas you can add to your spreadsheet using the same procedure you tried above. Give it a go yourself! Even though styling a spreadsheet might not be something you would do every day, it’s still good to know how to do it. Using , you can apply multiple styling options to your spreadsheet, including fonts, borders, colors, and so on. Have a look at the documentation to learn more. You can also choose to either apply a style directly to a cell or create a template and reuse it to apply styles to multiple cells. Let’s start by having a look at simple cell styling, using our again as the base spreadsheet: If you open your spreadsheet now, you should see quite a few different styles on the first 5 cells of column :\n• A2 with the text in bold\n• A3 with the text in red and bigger font size\n• A5 with a square border around the text Note: For the colors, you can also use HEX codes instead by doing . You can also combine styles by simply adding them to the cell at the same time: # Reusing the same styles from the example above Have a look at cell here: When you want to apply multiple styles to one or several cells, you can use a class instead, which is like a style template that you can use over and over again. Have a look at the example below: # Now let's apply this to all first row (header) cells If you open the spreadsheet now, you should see that its first row is bold, the text is aligned to the center, and there’s a small bottom border! Have a look below: As you saw above, there are many options when it comes to styling, and it depends on the use case, so feel free to check documentation and see what other things you can do. This feature is one of my personal favorites when it comes to adding styles to a spreadsheet. It’s a much more powerful approach to styling because it dynamically applies styles according to how the data in the spreadsheet changes. In a nutshell, conditional formatting allows you to specify a list of styles to apply to a cell (or cell range) according to specific conditions. For example, a widespread use case is to have a balance sheet where all the negative totals are in red, and the positive ones are in green. This formatting makes it much more efficient to spot good vs bad periods. Without further ado, let’s pick our favorite spreadsheet— —and add some conditional formatting. You can start by adding a simple one that adds a red background to all reviews with less than 3 stars: Now you’ll see all the reviews with a star rating below 3 marked with a red background: Code-wise, the only things that are new here are the objects and :\n• is quite similar to , which you already saw above, and it’s used to aggregate multiple styles such as fonts, borders, alignment, and so forth.\n• is responsible for selecting the cells and applying the styles if the cells match the rule’s logic. Using a object, you can create numerous conditional formatting scenarios. However, for simplicity sake, the package offers 3 built-in formats that make it easier to create a few common conditional formatting patterns. These built-ins are: The ColorScale gives you the ability to create color gradients: # Again, let's add this gradient to the star ratings, column \"H\" Now you should see a color gradient on column , from red to green, according to the star rating: You can also add a third color and make two gradients instead: # Again, let's add this gradient to the star ratings, column \"H\" This time, you’ll notice that star ratings between 1 and 3 have a gradient from red to yellow, and star ratings between 3 and 5 have a gradient from yellow to green: The IconSet allows you to add an icon to the cell according to its value: You’ll see a colored arrow next to the star rating. This arrow is red and points down when the value of the cell is 1 and, as the rating gets better, the arrow starts pointing up and becomes green: The package has a full list of other icons you can use, besides the arrow. Finally, the DataBar allows you to create progress bars: You’ll now see a green progress bar that gets fuller the closer the star rating is to the number 5: As you can see, there are a lot of cool things you can do with conditional formatting. Here, you saw only a few examples of what you can achieve with it, but check the documentation to see a bunch of other options. Even though images are not something that you’ll often see in a spreadsheet, it’s quite cool to be able to add them. Maybe you can use it for branding purposes or to make spreadsheets more personal. To be able to load images to a spreadsheet using , you’ll have to install : Apart from that, you’ll also need an image. For this example, you can grab the Real Python logo below and convert it from to using an online converter such as cloudconvert.com, save the final file as , and copy it to the root folder where you’re running your examples: Afterward, this is the code you need to import that image into the spreadsheet: # Let's use the hello_world spreadsheet since it has less data # A bit of resizing to not fill the whole spreadsheet with the logo You have an image on your spreadsheet! Here it is: The image’s left top corner is on the cell you chose, in this case, . Another powerful thing you can do with spreadsheets is create an incredible variety of charts. Charts are a great way to visualize and understand loads of data quickly. There are a lot of different chart types: bar chart, pie chart, line chart, and so on. has support for a lot of them. Here, you’ll see only a couple of examples of charts because the theory behind it is the same for every single chart type: Note: A few of the chart types that currently doesn’t have support for are Funnel, Gantt, Pareto, Treemap, Waterfall, Map, and Sunburst. For any chart you want to build, you’ll need to define the chart type: , , and so forth, plus the data to be used for the chart, which is called . Before you can build your chart, you need to define what data you want to see represented in it. Sometimes, you can use the dataset as is, but other times you need to massage the data a bit to get additional information. Let’s start by building a new workbook with some sample data: Now you’re going to start by creating a bar chart that displays the total number of sales per product: There you have it. Below, you can see a very straightforward bar chart showing the difference between online product sales online and in-store product sales: Like with images, the top left corner of the chart is on the cell you added the chart to. In your case, it was on cell . Note: Depending on whether you’re using Microsoft Excel or an open-source alternative (LibreOffice or OpenOffice), the chart might look slightly different. Try creating a line chart instead, changing the data a bit: With the above code, you’ll be able to generate some random data regarding the sales of 3 different products across a whole year. Once that’s done, you can very easily create a line chart with the following code: Here’s the outcome of the above piece of code: One thing to keep in mind here is the fact that you’re using when adding the data. This argument makes the chart plot row by row instead of column by column. In your sample data, you see that each product has a row with 12 values (1 column per month). That’s why you use . If you don’t pass that argument, by default, the chart tries to plot by column, and you’ll get a month-by-month comparison of sales. Another difference that has to do with the above argument change is the fact that our now starts from the first column, , instead of the second one. This change is needed because the chart now expects the first column to have the titles. There are a couple of other things you can also change regarding the style of the chart. For example, you can add specific categories to the chart: Add this piece of code before saving the workbook, and you should see the month names appearing instead of numbers: Code-wise, this is a minimal change. But in terms of the readability of the spreadsheet, this makes it much easier for someone to open the spreadsheet and understand the chart straight away. Another thing you can do to improve the chart readability is to add an axis. You can do it using the attributes and : This will generate a spreadsheet like the below one: As you can see, small changes like the above make reading your chart a much easier and quicker task. There is also a way to style your chart by using Excel’s default property. In this case, you have to choose a number between 1 and 48. Depending on your choice, the colors of your chart change as well: # You can play with this by choosing any number between 1 and 48 With the style selected above, all lines have some shade of orange: There is no clear documentation on what each style number looks like, but this spreadsheet has a few examples of the styles available. Here’s the full code used to generate the line chart with categories, axis titles, and style: There are a lot more chart types and customization you can apply, so be sure to check out the package documentation on this if you need some specific formatting. You already saw how to convert an Excel spreadsheet’s data into Python classes, but now let’s do the opposite. Let’s imagine you have a database and are using some Object-Relational Mapping (ORM) to map DB objects into Python classes. Now, you want to export those same objects into a spreadsheet. Let’s assume the following data classes to represent the data coming from your database regarding product sales: Now, let’s generate some random data, assuming the above classes are stored in a file: # Ignore these for now. You'll use them in a sec ;) By running this piece of code, you should get 5 products with 5 months of sales with a random quantity of sales for each month. Now, to convert this into a spreadsheet, you need to iterate over the data and append it to the spreadsheet: That’s it. That should allow you to create a spreadsheet with some data coming from your database. However, why not use some of that cool knowledge you gained recently to add a chart as well to display that data more visually? All right, then you could probably do something like this: Now we’re talking! Here’s a spreadsheet generated from database objects and with a chart and everything: That’s a great way for you to wrap up your new knowledge of charts! Even though you can use Pandas to handle Excel files, there are few things that you either can’t accomplish with Pandas or that you’d be better off just using directly. For example, some of the advantages of using are the ability to easily customize your spreadsheet with styles, conditional formatting, and such. But guess what, you don’t have to worry about picking. In fact, has support for both converting data from a Pandas DataFrame into a workbook or the opposite, converting an workbook into a Pandas DataFrame. Note: If you’re new to Pandas, check our course on Pandas DataFrames beforehand. First things first, remember to install the package: Now that you have some data, you can use to convert it from a DataFrame into a worksheet: You should see a spreadsheet that looks like this: If you want to add the DataFrame’s index, you can change , and it adds each row’s index into your spreadsheet. On the other hand, if you want to convert a spreadsheet into a DataFrame, you can also do it in a very straightforward way like so: Alternatively, if you want to add the correct headers and use the review ID as the index, for example, then you can also do it like this instead: # Set the first row as the columns for the DataFrame # Set the field \"review_id\" as the indexes for each row Using indexes and columns allows you to access data from your DataFrame easily: # Grab review with id \"R2EQL1V1L6E0C9\", using the index There you go, whether you want to use to prettify your Pandas dataset or use Pandas to do some hardcore algebra, you now know how to switch between both packages."
    },
    {
        "link": "https://stackoverflow.com/questions/13381384/modify-an-existing-excel-file-using-openpyxl-in-python",
        "document": "I am basically trying to copy some specific columns from a CSV file and paste those in an existing excel file[*.xlsx] using python. Say for example, you have a CSV file like this :\n\nSo, i wanted to copy the both col_3 and col_4 and paste those in col_8 and col_9 in an existing excel file [which is a .XLSX format]. I have tried this in various way to solve, but could not find out the exact way. i tried something like this :\n\nbut problem with this solution is it does not allow me to save as *.XLSX format which is strictly required for me.\n\nI have tried to use Openpyxl as it can handle *.XLSX format, but could not find out a way to modify the existing excel file. can anyone please help on this?\n\nDoubt : 1) Can we really read a whole column from a CSV file and store into an array/list using python? 2) Can we modify the existing excel file which is in .XLSX format using openpyxl or any other package?"
    },
    {
        "link": "https://stackoverflow.com/questions/48657867/manipulate-existing-excel-table-using-openpyxl",
        "document": "I'm currently honing my python/excel skills, and have run into an issue with .\n\nI am trying to open a workbook, replace rows in an existing table, and save the workbook again.\n\nIdeally, I'd like to also first be able delete all rows from the table (though retaining the table structure).\n\nMy initial workbook contains a sheet named \"inputData\". In this I have a table named \"Data\" with columns , , , and 2 rows of data.\n\nI also have a csv file named \"input.csv\" containing the same columns but 4 rows of data.\n\nWhen I run my code, the data is written into the worksheet, but the table structure is not expanded to encompass the two new rows of data.\n\nAny ideas of how to change the data source of a named table structure using openpyxl?"
    },
    {
        "link": "https://openpyxl.readthedocs.io/en/3.1.3/tutorial.html",
        "document": "Install openpyxl using pip. It is advisable to do this in a Python virtualenv without system packages: There is support for the popular lxml library which will be used if it is installed. This is particular useful when creating large files. To be able to include images (jpeg, png, bmp,…) into an openpyxl file, you will also need the “pillow” library that can be installed with: or browse https://pypi.python.org/pypi/Pillow/, pick the latest version and head to the bottom of the page for Windows binaries. Sometimes you might want to work with the checkout of a particular version. This may be the case if bugs have been fixed but a release has not yet been made.\n\nThere is no need to create a file on the filesystem to get started with openpyxl. Just import the class and start work: A workbook is always created with at least one worksheet. You can get it by using the property: This is set to 0 by default. Unless you modify its value, you will always get the first worksheet by using this method. You can create new worksheets using the method: Sheets are given a name automatically when they are created. They are numbered in sequence (Sheet, Sheet1, Sheet2, …). You can change this name at any time with the property: Once you gave a worksheet a name, you can get it as a key of the workbook: You can review the names of all worksheets of the workbook with the attribute You can loop through worksheets You can create copies of worksheets within a single workbook: Only cells (including values, styles, hyperlinks and comments) and certain worksheet attributes (including dimensions, format and properties) are copied. All other workbook / worksheet attributes are not copied - e.g. Images, Charts. You also cannot copy worksheets between workbooks. You cannot copy a worksheet if the workbook is open in or mode.\n\nNow we know how to get a worksheet, we can start modifying cells content. Cells can be accessed directly as keys of the worksheet: This will return the cell at A4, or create one if it does not exist yet. Values can be directly assigned: There is also the method. This provides access to cells using row and column notation: When a worksheet is created in memory, it contains no . They are created when first accessed. Because of this feature, scrolling through cells instead of accessing them directly will create them all in memory, even if you don’t assign them a value. will create 100x100 cells in memory, for nothing. Ranges of cells can be accessed using slicing: Ranges of rows or columns can be obtained similarly: You can also use the method: For performance reasons the method is not available in read-only mode. If you need to iterate through all the rows or columns of a file, you can instead use the property: For performance reasons the property is not available in read-only mode. If you just want the values from a worksheet you can use the property. This iterates over all the rows in a worksheet but returns just the cell values: Both and can take the parameter to return just the cell’s value:\n\nOnce we have a , we can assign it a value: The simplest and safest way to save a workbook is by using the method of the object: This operation will overwrite existing files without warning. The filename extension is not forced to be xlsx or xlsm, although you might have some trouble opening it directly with another application if you don’t use an official extension. As OOXML files are basically ZIP files, you can also open it with your favourite ZIP archive manager. If required, you can specify the attribute , to save a workbook as a template: If you want to save the file to a stream, e.g. when using a web application such as Pyramid, Flask or Django then you can simply provide a : You should monitor the data attributes and document extensions for saving documents in the document templates and vice versa, otherwise the result table engine can not open the document. # Need to save with the extension *.xlsx # MS Excel will not open the document # If we need a template document, then we must specify extension as *.xltm. # MS Excel will not open the document"
    },
    {
        "link": "https://freecodecamp.org/news/how-to-create-read-update-and-search-through-excel-files-using-python-c70680d811d4",
        "document": "This article will show in detail how to work with Excel files and how to modify specific data with Python.\n\nFirst we will learn how to work with CSV files by reading, writing and updating them. Then we will take a look how to read files, filter them by sheets, search for rows/columns, and update cells of xlsx files.\n\nA CSV file is a comma-separated values file, where plain text data is displayed in a tabular format. They can be used with any spreadsheet program, such as Microsoft Office Excel, Google Spreadsheets, or LibreOffice Calc.\n\nCSV files are not like other spreadsheet files though, because they don’t allow you to save cells, columns, rows or formulas. Their limitation is that they also allow only one sheet per file. My plan for this first part of the article is to show you how to create CSV files using Python 3 and the standard library module CSV.\n\nThis tutorial will end with two GitHub repositories and a live web application that actually uses the code of the second part of this tutorial (yet updated and modified to be for a specific purpose).\n\nFirst, open a new Python file and import the Python CSV module.\n\nThe CSV module includes all the necessary methods built in. These include:\n\nIn this guide we are going to focus on the writer, DictWriter and DictReader methods. These allow you to edit, modify, and manipulate the data stored in a CSV file.\n\nIn the first step we need to define the name of the file and save it as a variable. We should do the same with the header and data information.\n\nNow we need to create a function named writer that will take in three parameters: header, data and filename.\n\nThe next step is to modify the writer function so it creates a file that holds data from the header and data variables. This is done by writing the first row from the header variable and then writing four rows from the data variable (there are four rows because there are four tuples inside the list).\n\nAnd voilà! You created your first CSV file named imdb_top_4.csv. Open this file with your preferred spreadsheet application and you should see something like this:\n\nUsing LibreOffice Calc to see the result.\n\nThe result might be written like this if you choose to open the file in some other application:\n\nUsing SublimeText to see the result.\n\nTo update this file you should create a new function named updater that will take just one parameter called filename.\n\nThis function first opens the file defined in the filename variable and then saves all the data it reads from the file inside of a variable named readData. The second step is to hard code the new value and place it instead of the old one in the readData[0][‘Rating’] position.\n\nThe last step in the function is to call the writer function by adding a new parameter update that will tell the function that you are doing an update.\n\nFor writer to work with a new parameter, you need to add a new parameter everywhere writer is defined. Go back to the place where you first called the writer function and add “write” as a new parameter:\n\nJust below the writer function call the updater and pass the filename parameter into it:\n\nNow you need to modify the writer function to take a new parameter named option:\n\nFrom now on we expect to receive two different options for the writer function (write and update). Because of that we should add two if statements to support this new functionality. First part of the function under “if option == “write:” is already known to you. You just need to add the “elif option == “update”: section of the code and the else part just as they are written bellow:\n\nBravo! Your are done!\n\nNow your code should look something like this:\n\nYou can also find the code here:\n\nIn the first part of this article we have seen how to work with CSV files. We have created and updated one such file.\n\nFor several weekends I have worked on this project. I have started working on it because there was a need for this kind of solution in my company. My first idea was to build this solution directly in my company’s system, but then I wouldn’t have anything to write about, eh?\n\nI build this solution using Python 3 and openpyxl library. The reason why I have chosen openpyxl is because it represents a complete solution for creating worksheets, loading, updating, renaming and deleting them. It also allows us to read or write to rows and columns, merge or un-merge cells or create Python excel charts etc.\n• Workbook is the name for an Excel file in Openpyxl.\n• A workbook consists of sheets (default is 1 sheet). Sheets are referenced by their names.\n• A sheet consists of rows (horizontal lines) starting from the number 1 and columns (vertical lines) starting from the letter A.\n• Rows and columns result in a grid and form cells which may contain some data (numerical or string value) or formulas.\n\nThe first step is to open your Python environment and install openpyxl within your terminal:\n\nNext, import openpyxl into your project and then to load a workbook into the theFile variable.\n\nAs you can see, this code prints all sheets by their names. It then selects the sheet that is named “customers 1” and saves it to a currentSheet variable. In the last line, the code prints the value that is located in the B4 position of the “customers 1” sheet.\n\nThis code works as it should but it is very hard coded. To make this more dynamic we will write code that will:\n• In the last step, the code will print values that are located in B4 fields of each found sheet inside the workbook.\n\nThis is better than before, but it is still a hard coded solution and it still assumes the value you will be looking for is in the B4 cell, which is just silly :)\n\nI expect your project will need to search inside all sheets in the Excel file for a specific value. To do this we will add one more for loop in the “ABCDEF” range and then simply print cell names and their values.\n\nWe did this by introducing the “for row in range..” loop. The range of the for loop is defined from the cell in row 1 to the sheet’s maximum number or rows. The second for loop searches within predefined column names “ABCDEF”. In the second loop we will display the full position of the cell (column name and row number) and a value.\n\nHowever, in this article my task is to find a specific column that is named “telephone” and then go through all the rows of that column. To do that we need to modify the code like below.\n\nThis modified code goes through all cells of every sheet, and just like before the row range is dynamic and the column range is specific. The code loops through cells and looks for a cell that holds a text “telephone”. Once the code finds the specific cell it notifies the user in which cell the text is located. The code does this for every cell inside of all sheets that are in the Excel file.\n\nThe next step is to go through all rows of that specific column and print values.\n\nThis is done by adding a function named _get_columnletter that finds a letter of a column. After the letter of the column is found we loop through all rows of that specific column. This is done with the _get_all_values_by_cellletter function which will print all values of those cells.\n\nBra gjort! There are many thing you can do after this. My plan was to build an online app that will standardize all Swedish telephone numbers taken from a text box and offer users the possibility to simply copy the results from the same text box. The second step of my plan was to expand the functionality of the web app to support the upload of Excel files, processing of telephone numbers inside those files (standardizing them to a Swedish format) and offering the processed files back to users.\n\nI have done both of those tasks and you can see them live in the Tools page of my Incodaq.com site:\n\nAlso the code from the second part of this article is available on GitHub:\n\nThank you for reading! Check out more articles like this on my Medium profile: https://medium.com/@goranaviani and other fun stuff I build on my GitHub page: https://github.com/GoranAviani"
    }
]