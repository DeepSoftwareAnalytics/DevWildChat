[
    {
        "link": "https://medium.com/design-ideas-thoughts/designing-error-pages-8d82e16e3472",
        "document": "‘500 Internal Server Error’ is a generic error message, given when an unexpected condition is encountered.\n\nAround the web you will see all kinds of error pages (404 and 500). Some are creative and fun, while others are plain and boring.\n\nAlthough they are a fun opportunity, typical interface best practices should apply (no free for all).\n• Don’t use technical jargon like ‘500 or 404 error.’ I know our users don’t appreciate the subtle difference between 404 and 500 errors. (I actually don’t think technical sites like Github or Heroku should do it either).\n• Don’t use the word ‘error’, use mistake. Again, ‘error’ is very informal and technical.\n• Like other in-site errors, tell the user what their steps are moving forward (unlike Snapchat’s below). Should they reload the page or try again later in the day?\n• If you get bug reports automatically (or whatever your system is), inform the user that you now know about the bug. Reassure them that it is getting tended to. Additionally, it will also reduce how many users contact you about the bug (they wont feel the onus is on them).\n• Delicately change the mood. A slight joke, a witty remark etc. The idea is that you halt the negative buildup of emotions.\n• Don’t use imagery, text (“Oops”, “Shoot”), or punctuation (“!!!”), that evokes more sadness-why reinforce such feelings? It sucks, but don’t prolong or cause additional damage.\n• There is room for fun and creativity, but the page feel and message should fit with your general brand persona.\n• There should be a page title in the browser tab (saw a few sites omit this). Show the user where they are, the same way you do on other pages.\n• There is no reason to have so much content on this page that scrolling is necessary. Keep it above the fold.\n\nOh and these are a few of my favourites (in terms of creativity and fun):"
    },
    {
        "link": "https://blog.codinghorror.com/creating-user-friendly-404-pages",
        "document": "We understand what 404 means: Page Not Found. But the average internet user has no idea what 404 means or what to do about it. To them, it’s yet another unintelligible error message from the computer. Most 404 pages are unvarnished geek-speak. Consider the default 404 page under IIS:\n\nThe default 404 page under Apache is no better:\n\nInternet Explorer tries to shield the user from these poorly constructed 404 pages by automatically substituting friendlier error messages:\n\nIt’s not bad. It’s certainly an improvement over the default 404 from Apache or IIS. But we can do better.\n\nWe can stop relying on the default behavior of our webservers and web browsers, and create our own custom 404 page. Unfortunately, many sites have custom 404 pages that are barely discernable from the generic webserver defaults. You wonder why they bother.\n\nSo, what exactly should a user-friendly custom 404 page do? Although there’s an entire website dedicated to documenting funny 404 pages, funny isn’t necessarily helpful. What can we do to help the user at this point? I have some ideas.\n• Drop the 404\n\nYes, the HTTP response code is 404, but there’s absolutely no reason that ever needs to be shown on the actual page. Error codes aren’t helpful. A simple explanation of the problem in plain English is all that’s required. Any 404 page that has the characters “404” on it, if not already an outright failure, is already well on its way to becoming one.\n• Automatically notify you of the 404\n\nRepeat after me: it is not the user’s job to inform you about problems with your website. If you require the user to click a button to notify you about a 404, or if you require the user to fill out a broken link form, you have utterly failed your users. 404 notification should be automatic, and by that I do not mean “sit in my log files until I eventually have time to look for it.” I suggest weekly or monthly 404 rollup reports, emailed automatically to the powers that be. I’d also recommend real-time email notification if there is a sudden spate of 404s, so you have an opportunity to fix the problem while it’s still relevant – before the world gives up on your seemingly nonexistent page.\n• Try to find what the user was looking for and provide links to possible matches\n\nDon’t just put a search box on the 404 page and force the user to perform a search. That’s a cop-out. Instead, automatically perform a search on their behalf, using the erroneous URL as the search input, and display those results on the 404 page. You can also try to correct the URL, based on rules derived from the top ten or top fifty observed 404 errors. Does the URL end in .htm instead of .html? Is it spelled wrong? Are your URLs case-sensitive? Was the page moved, renamed, or reorganized somewhere else? It’s sensible to have a search box on your 404 page for convenience’s sake, but forcing the user to perform a search should always be the method of last resort.\n• Present links to the most popular or most recent items\n\nIf someone is visiting your website, statistically speaking, there’s a good chance they are coming to see the same attraction everyone else is. Even if they aren’t, your popular content is popular for a reason. Why not present links to your “greatest hits” on the 404 page? Similarly, if you run a periodic website like a blog, or a newspaper, display the last few articles or entries on the 404 page. And at the very least, you’ll want a link back to the main website. Provide a filtered list of relevant links, and an errant user will never be more than one click away from escaping their current predicament.\n• Keep the 404 page simple\n\nYour 404 page should be brief, concise, and to the point.* You’re already dealing with confused users who can’t find what they’re looking for. Don’t add insult to injury by spamming the user with a giant, complicated 404 page containing a complete sitemap of your website. For example, the apple.com 404 page makes this mistake.\n\nI found that Jakob Nielsen, A List Apart, and 404 Research Lab also had good advice on making 404 pages potentially user friendly instead of the geeky, incomprehensible dead end signs they usually are.\n\nUnfortunately, I haven’t had time to implement a better 404 page on my own website. Yet. If you’re looking for live examples of 404 pages that get this right, I can recommend the 1976 design 404 page, as well as the useit.com 404 page. Sadly, this is an extremely short list because so few websites meet the criteria I outlined above. I sampled 404 pages from dozens of websites and most fail spectacularly, serving up 404 pages that are downright user hostile.\n\nWhichever route you choose, never settle for the default 404 page. Replace it with a custom 404 page that is polite, illuminating, and most of all, helpful.\n\n*But not too brief. You have to make your customized 404 page larger than 512 bytes, otherwise IE will assume it’s a standard web server 404 message and replace it with its own friendly-ized version."
    },
    {
        "link": "https://ux.stackexchange.com/questions/84856/best-practices-to-design-a-404-error-page",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://ubcms.buffalo.edu/help/advanced-topics/custom-error-pages.html",
        "document": "At times it is helpful to display an error page that is tailored to your website and audience. For example, when a visitor attempts to land on a page that no longer exists, they could get a '404 error' (no such page) that includes special instructions, high traffic links, or branding elements and contact details specific to your own site. Custom error pages are developed by special request, and are installed for an entire virtual host; e.g. mgt.buffalo.edu. Sites under /content/www/ (www.buffalo.edu) will all use the general default page (see example below). These error pages are installed on the Apache proxy server, rather than the UBCMS servers, so they cannot be maintained in the author environment like the rest of your website. As you develop your page, please beware that future changes will require you to send us a new version and that we can install during normal maintenance windows. Do not include any content that will need to be changed quickly or frequently.\n\nYou may choose to start by making your page in the UBCMS and then copying and adjusting the source code. We will need the complete page, starting with <DOCTYPE…> or at least <html>. You can start with the default error page if you want, though beware, the CSS in there is hard to change). Just make sure what you send to us is self-contained. Image paths, links, etc, should start with http:// (or better yet, // so it will also work when loaded in a secure https:// mode). You should be able to drag and drop the main HTML file onto a browser and have it function correctly with all images displayed and links working correctly. Once you are comfortable with the look of your page, and it works correctly as described above, create a folder with your custom HTML page and any assets (CSS, images, etc.) necessary to render it. Then package it up as a zip file and send it to us."
    },
    {
        "link": "https://medium.com/designer-recipes/how-to-make-a-custom-404-error-page-for-your-website-1af37a8b20d1",
        "document": "Step 1: Are you using a website builder like Squarespace or Weebly?\n\nIf yes, then it should already have a 404 error page setting which you can use directly to upload an image and add buttons. You’re pretty much done here.\n\nIn my case, I had my website running locally. If you’re like me, move on!\n\nStep 3: Look for “.htaccess” file in the root directory of your server\n\nFTP into your server and find this file in the root directory. You’ll need to edit it. If you can’t find it, then you will have to create it. Name it “.htaccess”. Nothing before and after. Just “.htaccess”.\n\nOpen it and add the following line:\n\n…where /not-found-page.html is the full path to the new custom 404 page that you’ve created.\n\nWith this line, we’re just telling the server that in case of 404 error scenario, return this file to the browser.\n\nStep 5: Make sure the path is correct and test it\n\nTry to look for a page that does not exist on your website. You should get your custom 404 page that you denoted in the .htaccess file.\n\nStep 6: Did it work? If not, update the settings of your server\n\nIn my case, since I am running my website locally on Mac, Apache does not allow for custom .htaccess file. I had to go into Apache configuration and edit the settings.\n\nHere is how I did it for anyone who is interested and following the same way:\n\nVoilah! That’s pretty much it for creating a custom 404 page. It should be running perfectly for your website. If you’re still running into issues, mess around with how you can change configurations of your server to allow for custom 404 pages."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table",
        "document": "The examples below include tables of progressively increasing complexity. See also our beginner's Styling tables guide for table styling information including common, useful techniques. Since the structure of a involves the use of several table-related HTML elements along with various associated attributes, the following examples are intended to provide a simplified explanation that covers the basics and common standards. Additional and more detailed information can be found on the corresponding linked pages. These table examples demonstrate how to create an accessible table that is structured with HTML and styled with CSS. Because of how HTML tables are structured, the markup can quickly grow. For this reason, it is important to clearly define the table's purpose and final appearance to create the appropriate structure. A logical structure developed with semantic markup is not only easier to style, but enables useful and accessible tables that can be understood and navigated by everyone, including search engines and users of assistive technologies. The first example is basic, with subsequent examples growing in complexity. First, we will develop a very basic HTML table structure for the table. The first two examples contain no table section groups such as a defined head, body, or foot, and involve no cell spanning or explicitly defined cell relationships. Not even a caption is provided. As we work through the examples, they will be progressively enhanced to include all the table features that a complex data table should possess.\n\nIn addition to improving accessibility by specifying cell relations, the semantics of the table can be improved by introducing table section groups. Since the first row ( element) contains only column header cells and provides the header for the rest of the table's contents, it can be enclosed in the element to explicitly specify that row as the head section of the table. Moreover, what is automatically accomplished by the browser can also be defined explicitly—the body section of the table, which contains the main data of the table, is specified by enclosing the corresponding rows in the element. The explicit use of the element helps the browser to create the intended table structure, avoiding unwanted results. Once again, the CSS and visual result are unchanged—specifying such table section groups provides valuable contextual information for assistive technologies, including screen readers and search engines, as well as for styling in the CSS, which will be shown in a later example.\n\nNow we'll go all-out, with styles on rows in the header and body areas both, including alternating row colors, cells with different colors depending on position within a row, and so forth. Let's take a look at the result first this time. Here's what the final table will look like: There is no change to the HTML again. See what proper preparation of the HTML structure can do? The CSS is much more involved this time. It's not complicated, but there's a lot going on. Let's break it down. Here the and properties are added to eliminate spacing between cells and collapse borders that touch one another to be a single border instead of winding up with double borders. Additionally, the is placed at the of the table using the property: Next, the property is used to give all the table cells space around their content. The property aligns the content of the header cells to the of the cell, which can be seen on the cells in the head that span two rows: The next CSS rule sets the of all elements in the table's head (as specified using ). Then the bottom border of the head is set to be a two-pixel wide line. Notice, however, that we're using the selector to apply the property to the second row in the head. Why? Because the head is made of two rows that are spanned by some of the cells. That means there are actually two rows there; applying the style to the first row would not give us the expected result: Let's style the two header cells \"Joined\" and \"Canceled\" with green and red hues to represent the \"good\" of a new member and the \"bummer\" of a canceled membership. Here we dig into the last row of the table's head section using the selector and give the first header cell in it (the \"Joined\" header) a greenish color, and the second header cell in it (the \"Canceled\" header) a reddish hue: Since the first column should stand out as well, some custom styling is added here too. This CSS rule styles the first header cell in each row of the table's body with the property to left-justify the member names, and with a somewhat different : It's common to help improve the readability of table data by alternating row colors—this is sometimes referred to as \"zebra striping\". Let's add a bit of to every even row: Since it's standard practice to right-justify currency values in tables, let's do that here. This just sets the property for the last in each body row to : Finally, some styling similar to the head is applied to the foot section of the table to make it stand out as well:\n\nA common issue with tables on the web is that they don't natively work very well on small screens when the amount of content is large, and the way to make them scrollable isn't obvious, especially when the markup may come from a CMS and cannot be modified to have a wrapper. This example provides one way to display tables in small spaces. We've hidden the HTML content as it is very large, and there is nothing remarkable about it. The CSS is more useful to inspect in this example. When looking at these styles you'll notice that table's property has been set to . While this allows scrolling, the table loses some of its integrity, and table cells try to become as small as possible. To mitigate this issue we've set to on the . However, we don't do this for the to avoid long titles forcing columns to be wider than they need to be to display the data. To keep the table headers on the page while scrolling down we've set to sticky on the elements. Note that we have not set to , as if we do the header cannot be separated correctly from the rest of the table. Given that the has a fixed size, the set to is the important part here, as it makes the table scrollable."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element",
        "document": "This page lists all the HTML elements, which are created using tags. They are grouped by function to help you find what you have in mind easily. An alphabetical list of all elements is provided in the sidebar on every element's page as well as this one. Note: For more information about the basics of HTML elements and attributes, see Anatomy of an HTML element.\n\nUse HTML text content elements to organize blocks or sections of content placed between the opening and closing tags. Important for accessibility and SEO, these elements identify the purpose or structure of that content. Indicates that the enclosed text is an extended quotation. Usually, this is rendered visually by indentation. A URL for the source of the quotation may be given using the attribute, while a text representation of the source can be given using the element. Provides the description, definition, or value for the preceding term ( ) in a description list ( ). The generic container for flow content. It has no effect on the content or layout until styled in some way using CSS (e.g., styling is directly applied to it, or some kind of layout model like flexbox is applied to its parent element). Represents a description list. The element encloses a list of groups of terms (specified using the element) and descriptions (provided by elements). Common uses for this element are to implement a glossary or to display metadata (a list of key-value pairs). Specifies a term in a description or definition list, and as such must be used inside a element. It is usually followed by a element; however, multiple elements in a row indicate several terms that are all defined by the immediate next element. Represents a caption or legend describing the rest of the contents of its parent element. Represents self-contained content, potentially with an optional caption, which is specified using the element. The figure, its caption, and its contents are referenced as a single unit. Represents a thematic break between paragraph-level elements: for example, a change of scene in a story, or a shift of topic within a section. Represents an item in a list. It must be contained in a parent element: an ordered list ( ), an unordered list ( ), or a menu ( ). In menus and unordered lists, list items are usually displayed using bullet points. In ordered lists, they are usually displayed with an ascending counter on the left, such as a number or letter. A semantic alternative to , but treated by browsers (and exposed through the accessibility tree) as no different than . It represents an unordered list of items (which are represented by elements). Represents an ordered list of items — typically rendered as a numbered list. Represents a paragraph. Paragraphs are usually represented in visual media as blocks of text separated from adjacent blocks by blank lines and/or first-line indentation, but HTML paragraphs can be any structural grouping of related content, such as images or form fields. Represents preformatted text which is to be presented exactly as written in the HTML file. The text is typically rendered using a non-proportional, or monospaced, font. Whitespace inside this element is displayed as written. Represents an unordered list of items, typically rendered as a bulleted list.\n\nUse the HTML inline text semantic to define the meaning, structure, or style of a word, line, or any arbitrary piece of text. Together with its attribute, creates a hyperlink to web pages, files, email addresses, locations within the current page, or anything else a URL can address. Used to draw the reader's attention to the element's contents, which are not otherwise granted special importance. This was formerly known as the Boldface element, and most browsers still draw the text in boldface. However, you should not use for styling text or granting importance. If you wish to create boldface text, you should use the CSS property. If you wish to indicate an element is of special importance, you should use the element. Tells the browser's bidirectional algorithm to treat the text it contains in isolation from its surrounding text. It's particularly useful when a website dynamically inserts some text and doesn't know the directionality of the text being inserted. Overrides the current directionality of text, so that the text within is rendered in a different direction. Produces a line break in text (carriage-return). It is useful for writing a poem or an address, where the division of lines is significant. Used to mark up the title of a cited creative work. The reference may be in an abbreviated form according to context-appropriate conventions related to citation metadata. Displays its contents styled in a fashion intended to indicate that the text is a short fragment of computer code. By default, the content text is displayed using the user agent's default monospace font. Links a given piece of content with a machine-readable translation. If the content is time- or date-related, the element must be used. Used to indicate the term being defined within the context of a definition phrase or sentence. The ancestor element, the / pairing, or the nearest section ancestor of the element, is considered to be the definition of the term. Marks text that has stress emphasis. The element can be nested, with each nesting level indicating a greater degree of emphasis. Represents a range of text that is set off from the normal text for some reason, such as idiomatic text, technical terms, and taxonomical designations, among others. Historically, these have been presented using italicized type, which is the original source of the naming of this element. Represents a span of inline text denoting textual user input from a keyboard, voice input, or any other text entry device. By convention, the user agent defaults to rendering the contents of a element using its default monospace font, although this is not mandated by the HTML standard. Represents text which is marked or highlighted for reference or notation purposes due to the marked passage's relevance in the enclosing context. Indicates that the enclosed text is a short inline quotation. Most modern browsers implement this by surrounding the text in quotation marks. This element is intended for short quotations that don't require paragraph breaks; for long quotations use the element. Used to provide fall-back parentheses for browsers that do not support the display of ruby annotations using the element. One element should enclose each of the opening and closing parentheses that wrap the element that contains the annotation's text. Specifies the ruby text component of a ruby annotation, which is used to provide pronunciation, translation, or transliteration information for East Asian typography. The element must always be contained within a element. Represents small annotations that are rendered above, below, or next to base text, usually used for showing the pronunciation of East Asian characters. It can also be used for annotating other kinds of text, but this usage is less common. Renders text with a strikethrough, or a line through it. Use the element to represent things that are no longer relevant or no longer accurate. However, is not appropriate when indicating document edits; for that, use the and elements, as appropriate. Used to enclose inline text which represents sample (or quoted) output from a computer program. Its contents are typically rendered using the browser's default monospaced font (such as Courier or Lucida Console). Represents side-comments and small print, like copyright and legal text, independent of its styled presentation. By default, it renders text within it one font size smaller, such as from to . A generic inline container for phrasing content, which does not inherently represent anything. It can be used to group elements for styling purposes (using the or attributes), or because they share attribute values, such as . It should be used only when no other semantic element is appropriate. is very much like a div element, but div is a block-level element whereas a is an inline-level element. Indicates that its contents have strong importance, seriousness, or urgency. Browsers typically render the contents in bold type. Specifies inline text which should be displayed as subscript for solely typographical reasons. Subscripts are typically rendered with a lowered baseline using smaller text. Specifies inline text which is to be displayed as superscript for solely typographical reasons. Superscripts are usually rendered with a raised baseline using smaller text. Represents a specific period in time. It may include the attribute to translate dates into machine-readable format, allowing for better search engine results or custom features such as reminders. Represents a span of inline text which should be rendered in a way that indicates that it has a non-textual annotation. This is rendered by default as a single solid underline but may be altered using CSS. Represents the name of a variable in a mathematical expression or a programming context. It's typically presented using an italicized version of the current typeface, although that behavior is browser-dependent. Represents a word break opportunity—a position within text where the browser may optionally break a line, though its line-breaking rules would not otherwise create a break at that location.\n\nWarning: These are old HTML elements that are deprecated and should not be used. You should never use them in new projects, and you should replace them in old projects as soon as you can. They are listed here for completeness only. Allows authors to clearly indicate a sequence of characters that compose an acronym or abbreviation for a word. Renders the enclosed text at a font size one level larger than the surrounding text ( becomes , for example). The size is capped at the browser's maximum permitted font size. Displays its block-level or inline contents centered horizontally within its containing element. An obsolete part of the Web Components suite of technologies—was used inside of Shadow DOM as an insertion point, and wasn't meant to be used in ordinary HTML. It has now been replaced by the element, which creates a point in the DOM at which a shadow DOM can be inserted. Consider using instead. Container for a directory of files and/or folders, potentially with styles and icons applied by the user agent. Do not use this obsolete element; instead, you should use the element for lists, including lists of files. Defines the font size, color and face for its content. Defines a particular area in which another HTML document can be displayed. A frame should be used within a . Used to contain elements. An ancient and poorly supported precursor to the element. It should not be used. Used to insert a scrolling area of text. You can control what happens when the text reaches the edges of its content area using its attributes. Represents a command that a user is able to invoke through a popup menu. This includes context menus, as well as menus that might be attached to a menu button. Prevents the text it contains from automatically wrapping across multiple lines, potentially resulting in the user having to scroll horizontally to see the entire width of the text. An obsolete, non-standard way to provide alternative, or \"fallback\", content for browsers that do not support the embed element or do not support the type of embedded content an author wishes to use. This element was deprecated in HTML 4.01 and above in favor of placing fallback content between the opening and closing tags of an element. Provides content to be presented in browsers that don't support (or have disabled support for) the element. Although most commonly-used browsers support frames, there are exceptions, including certain special-use browsers including some mobile browsers, as well as text-mode browsers. Renders everything following the start tag as raw text, ignoring any following HTML. There is no closing tag, since everything after it is considered raw text. Used to delimit the base text component of a ruby annotation, i.e. the text that is being annotated. One element should wrap each separate atomic segment of the base text. Embraces semantic annotations of characters presented in a ruby of elements used inside of element. elements can have both pronunciation ( ) and semantic ( ) annotations. An obsolete part of the Web Components technology suite that was intended to be used as a shadow DOM insertion point. You might have used it if you have created multiple shadow roots under a shadow host. Consider using instead. Creates inline text which is presented using the user agent default monospace font face. This element was created for the purpose of rendering text as it would be displayed on a fixed-width display such as a teletype, text-only screen, or line printer. Renders text between the start and end tags without interpreting the HTML in between and using a monospaced font. The HTML2 specification recommended that it should be rendered wide enough to allow 80 characters per line."
    },
    {
        "link": "https://html.spec.whatwg.org",
        "document": ""
    },
    {
        "link": "https://w3schools.com/html/html5_syntax.asp",
        "document": "Consistent, clean, and tidy HTML code makes it easier for others to read and understand your code.\n\nHere are some guidelines and tips for creating good HTML code.\n\nAlways declare the document type as the first line in your document.\n\nThe correct document type for HTML is:\n\nHTML allows mixing uppercase and lowercase letters in element names.\n\nHowever, we recommend using lowercase element names, because:\n\nIn HTML, you do not have to close all elements (for example the element).\n\nHowever, we strongly recommend closing all HTML elements, like this:\n\nHTML allows mixing uppercase and lowercase letters in attribute names.\n\nHowever, we recommend using lowercase attribute names, because:\n\nHowever, we recommend quoting attribute values, because:\n• You MUST use quotes if the value contains spaces\n\nAlways Specify alt, width, and height for Images\n\nAlways specify the attribute for images. This attribute is important if the image for some reason cannot be displayed.\n\nAlso, always define the and of images. This reduces flickering, because the browser can reserve space for the image before loading.\n\nHTML allows spaces around equal signs. But space-less is easier to read and groups entities better together.\n\nWhen using an HTML editor, it is NOT convenient to scroll right and left to read the HTML code.\n\nTry to avoid too long code lines.\n\nDo not add blank lines, spaces, or indentations without a reason.\n\nFor readability, add blank lines to separate large or logical code blocks.\n\nFor readability, add two spaces of indentation. Do not use the tab key.\n\nThe element is required in HTML.\n\nThe contents of a page title is very important for search engine optimization (SEO)! The page title is used by search engine algorithms to decide the order when listing pages in search results.\n• provides a title for the page when it is added to favorites\n• displays a title for the page in search-engine results\n\nSo, try to make the title as accurate and meaningful as possible:\n\nAn HTML page will validate without the and tags:\n\nHowever, we strongly recommend to always add the and tags!\n\nOmitting and can also crash DOM and XML software.\n\nThe HTML <head> tag can also be omitted.\n\nBrowsers will add all elements before , to a default element.\n\nHowever, we recommend using the tag.\n\nIn HTML, it is optional to close empty elements.\n\nIf you expect XML/XHTML software to access your page, keep the closing slash (/), because it is required in XML and XHTML.\n\nYou should always include the attribute inside the tag, to declare the language of the Web page. This is meant to assist search engines and browsers.\n\nTo ensure proper interpretation and correct search engine indexing, both the language and the character encoding should be defined as early as possible in an HTML document:\n\nThe viewport is the user's visible area of a web page. It varies with the device - it will be smaller on a mobile phone than on a computer screen.\n\nYou should include the following element in all your web pages:\n\nThis gives the browser instructions on how to control the page's dimensions and scaling.\n\nThe part sets the width of the page to follow the screen-width of the device (which will vary depending on the device).\n\nThe part sets the initial zoom level when the page is first loaded by the browser.\n\nHere is an example of a web page without the viewport meta tag, and the same web page with the viewport meta tag:\n\nShort comments should be written on one line, like this:\n\nComments that spans more than one line, should be written like this:\n\nLong comments are easier to observe if they are indented with two spaces.\n\nUse simple syntax for linking to style sheets (the attribute is not necessary):\n\nShort CSS rules can be written compressed, like this:\n\nLong CSS rules should be written over multiple lines:\n• Place the opening bracket on the same line as the selector\n• Use one space before the opening bracket\n• Use two spaces of indentation\n• Use semicolon after each property-value pair, including the last\n• Only use quotes around values if the value contains spaces\n• Place the closing bracket on a new line, without leading spaces\n\nUse simple syntax for loading external scripts (the attribute is not necessary):\n\nUsing \"untidy\" HTML code can result in JavaScript errors.\n\nThese two JavaScript statements will produce different results:\n\nSome web servers (Apache, Unix) are case sensitive about file names: \"london.jpg\" cannot be accessed as \"London.jpg\".\n\nOther web servers (Microsoft, IIS) are not case sensitive: \"london.jpg\" can be accessed as \"London.jpg\".\n\nIf you use a mix of uppercase and lowercase, you have to be aware of this.\n\nIf you move from a case-insensitive to a case-sensitive server, even small errors will break your web!\n\nTo avoid these problems, always use lowercase file names!\n\nHTML files should have a .html extension (.htm is allowed).\n\nThere is no difference between the .htm and .html file extensions!\n\nBoth will be treated as HTML by any web browser and web server.\n\nWhen a URL does not specify a filename at the end (like \"https://www.w3schools.com/\"), the server just adds a default filename, such as \"index.html\", \"index.htm\", \"default.html\", or \"default.htm\".\n\nIf your server is configured only with \"index.html\" as the default filename, your file must be named \"index.html\", and not \"default.html\".\n\nHowever, servers can be configured with more than one default filename; usually you can set up as many default filenames as you want."
    },
    {
        "link": "https://w3.org/TR/2011/WD-html5-20110405",
        "document": "This specification defines the 5th major revision of the core language of the World Wide Web: the Hypertext Markup Language (HTML). In this version, new features are introduced to help Web application authors, new elements are introduced based on research into prevailing authoring practices, and special attention has been given to defining clear conformance criteria for user agents in an effort to improve interoperability.\n\nThis section describes the status of this document at the time of its publication. Other documents may supersede this document. A list of current W3C publications and the most recently formally published revision of this technical report can be found in the W3C technical reports index at http://www.w3.org/TR/.\n\nIf you wish to make comments regarding this document in a manner that is tracked by the W3C, please submit them via using our public bug database. If you do not have an account then you can enter feedback using this form:\n\nPlease enter your feedback, carefully indicating the title of the section for which you are submitting feedback, quoting the text that's wrong today if appropriate. If you're suggesting a new feature, it's really important to say what the problem you're trying to solve is. That's more important than the solution, in fact. Please don't use section numbers as these tend to change rapidly and make your feedback harder to understand.\n\nIf you cannot do this then you can also e-mail feedback to public-html-comments@w3.org (subscribe, archives), and arrangements will be made to transpose the comments to our public bug database. Alternatively, you can e-mail feedback to whatwg@whatwg.org (subscribe, archives). The editor guarantees that all substantive feedback sent to this list will receive a reply. However, such feedback is not considered formal feedback for the W3C process. All feedback is welcome.\n\nThe working groups maintains a list of all bug reports that the editor has not yet tried to address and a list of issues for which the chairs have not yet declared a decision. The editor also maintains a list of all e-mails that he has not yet tried to address. These bugs, issues, and e-mails apply to multiple HTML-related specifications, not just this one.\n\nImplementors should be aware that this specification is not stable. Implementors who are not taking part in the discussions are likely to find the specification changing out from under them in incompatible ways. Vendors interested in implementing this specification before it eventually reaches the Candidate Recommendation stage should join the aforementioned mailing lists and take part in the discussions.\n\nThe publication of this document by the W3C as a W3C Working Draft does not imply that all of the participants in the W3C HTML working group endorse the contents of the specification. Indeed, for any section of the specification, one can usually find many members of the working group or of the W3C as a whole who object strongly to the current text, the existence of the section at all, or the idea that the working group should even spend time discussing the concept of that section.\n\nThe latest stable version of the editor's draft of this specification is always available on the W3C CVS server and in the WHATWG Subversion repository. The latest editor's working copy (which may contain unfinished text in the process of being prepared) contains the latest draft text of this specification (amongst others). For more details, please see the WHATWG FAQ.\n\nThere are various ways to follow the change history for the HTML specifications:\n\nThe W3C HTML Working Group is the W3C working group responsible for this specification's progress along the W3C Recommendation track. This specification is the 05 April 2011 Working Draft.\n\nWork on this specification is also done at the WHATWG. The W3C HTML working group actively pursues convergence with the WHATWG, as required by the W3C HTML working group charter.\n\nThis document was produced by a group operating under the 5 February 2004 W3C Patent Policy. W3C maintains a public list of any patent disclosures made in connection with the deliverables of the group; that page also includes instructions for disclosing a patent. An individual who has actual knowledge of a patent which the individual believes contains Essential Claim(s) must disclose the information in accordance with section 6 of the W3C Patent Policy.\n• Introduction\n• Structure of this specification\n• How to read this specification\n• Conformance requirements for authors\n• Restrictions on content models and on attribute values\n• The elements of HTML\n• Embedded content\n• The element\n• Requirements for providing text to act as an alternative for images\n• A link or button containing nothing but the image\n• A phrase or paragraph with an alternative graphical representation: charts, diagrams, graphs, maps, illustrations\n• A short phrase or label with an alternative graphical representation: icons, logos\n• Text that has been rendered to a graphic for typographical effect\n• A graphical representation of some of the surrounding text\n• A group of images that form a single larger picture with no links\n• A group of images that form a single larger picture with links\n• An image not intended for the user\n• An image in an e-mail or private document intended for a specific person who is known to be able to view images\n• Media elements\n• Best practices for authors using media elements\n• Best practices for implementors of media elements\n• Interactive elements\n• Commands\n• Using the element to define a command\n• Using the element to define a command\n• Using the element to define a command\n• Using the element to define a command\n• Using the element to define a command\n• Using the attribute on a element to define a command\n• Using the attribute on a element to define a command\n• Using the attribute to define a command on other elements\n• Common idioms without dedicated elements\n• The main part of the content\n• Loading Web pages\n• The object\n• APIs for creating and navigating browsing contexts by name\n• Browsing the Web\n• Page load processing model for content that uses plugins\n• Page load processing model for inline content that doesn't have a DOM\n• Offline Web applications\n• Changes to the networking model\n• The HTML syntax\n• Writing HTML documents\n• Elements\n• Restrictions on the contents of raw text and RCDATA elements\n• Parsing HTML documents\n• Tree construction\n• The rules for parsing tokens in HTML content\n• The \"in select in table\" insertion mode\n• The \"after after body\" insertion mode\n• The \"after after frameset\" insertion mode\n• The rules for parsing tokens in foreign content\n• Coercing an HTML DOM into an infoset\n• An introduction to error handling and strange cases in the parser\n• Scripts that modify the page as it is being parsed\n• The execution of scripts that are moving across multiple documents\n• Rendering\n• Bindings\n• The element as a color well\n• The element as a checkbox and radio button widgets"
    }
]