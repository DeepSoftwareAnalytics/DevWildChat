[
    {
        "link": "https://apidocs.bitrix24.com/api-reference/crm/deals/crm-deal-update.html",
        "document": ""
    },
    {
        "link": "https://apidocs.bitrix24.com/api-reference/crm/deals/crm-deal-add.html",
        "document": ""
    },
    {
        "link": "https://training.bitrix24.com/rest_help/crm/deals/crm_deal_update.php",
        "document": ""
    },
    {
        "link": "https://training.bitrix24.com/rest_help/crm/deals/crm_deal_add.php",
        "document": "An array that specifies the parameters for the new deal (\"field\"=>\"value\"[, ...]). See the example for the array specification. Note: to find out the required field format, execute the method : to find out the required field format, execute the method crm.deal.fields to view the retrieved field format."
    },
    {
        "link": "https://stackoverflow.com/questions/43052105/how-to-update-pipeline-for-a-deal-using-bitrix24-api",
        "document": "We've recently created two different pipelines for Deals inside Bitrix24. Now we want to be able to move the existing deals from one pipeline to the other.\n\nWe'll be doing it using google apps scripts using REST calls (UrlFetchApp), which we are already using for other maintenance/routine tasks. The documentation is rather obscure since it's not clear how to update this 'field' not how to list existing Deals.\n\nThere is no explanation of how to do it using REST calls.\n\nE.g.: the following fails: https://sysmanagement.bitrix24.com/rest/crm.deal.list.json?auth=(our_auth_token) with error:\n\nthe above mentioned documentation doe not explain:\n• how to interpret these error codes\n• how to translate the Javascript example into REST calls\n\ncan anyone provide (in order of decreasing preference):\n• Google Apps Script to change the pipeline assigned to a Deal\n• sequence of REST calls to change the pipeline assigned to a Deal"
    },
    {
        "link": "https://training.bitrix24.com/support/training/course?COURSE_ID=68&LESSON_ID=6194",
        "document": "The class CUserTypeEntity is in charge of work with custom fields. An example of adding a String-type custom property /** * Adding a custom property */ $oUserTypeEntity = new CUserTypeEntity(); $aUserFields = array( /* * Identifier of an entity to which the property will be bound. * The following format is used for a section - IBLOCK_{IBLOCK_ID}_SECTION */ 'ENTITY_ID' => 'IBLOCK_3_SECTION', /* Field code. It must always begin with UF_ */ 'FIELD_NAME' => 'UF_DEV2DAY_FIELD', /* Indicate that the type of the new custom property is string */ 'USER_TYPE_ID' => 'string', /* * XML_ID of the custom property. * To be used during uploading as a field name */ 'XML_ID' => 'XML_ID_DEV2DAY_FIELD', /* Sorting */ 'SORT' => 500, /* Whether the field is multiple or not */ 'MULTIPLE' => 'N', /* Whether the property is mandatory or not */ 'MANDATORY' => 'N', /* * Show in the list filter. Possible values: * Do not show = N, exact match = I, * mask search = E, substring search = S */ 'SHOW_FILTER' => 'N', /* * Do not show in the list. */ 'SHOW_IN_LIST' => '', /* * Do not permit editing by users. */ 'EDIT_IN_LIST' => '', /* Field values participate in the search */ 'IS_SEARCHABLE' => 'N', /* * Additional field settings (depend on the type). * In our case, for the string type */ 'SETTINGS' => array( /* Default value */ 'DEFAULT_VALUE' => '', /* Entry field size for display */ 'SIZE' => '20', /* Number of rows in the entry field */ 'ROWS' => '1', /* Minimum length of the line (0 – do not verify) */ 'MIN_LENGTH' => '0', /* Maximum length of the line (0 – do not verify) */ 'MAX_LENGTH' => '0', /* A regular expression for verification */ 'REGEXP' => '', ), /* Edit form label */ 'EDIT_FORM_LABEL' => array( 'en' => 'User field', ), /* List label */ 'LIST_COLUMN_LABEL' => array( 'en' => 'User field', ), /* List filter label */ 'LIST_FILTER_LABEL' => array( 'en' => 'User field', ), /* Error message (optional) */ 'ERROR_MESSAGE' => array( 'en' => 'An error in completing the user field', ), /* Help */ 'HELP_MESSAGE' => array( 'en' => '', ), ); $iUserFieldId = $oUserTypeEntity->Add( $aUserFields ); // int If a correct property is added to the variable $iUserFieldId, the identifier of the new custom property will be returned. In order to create custom fields of other types, replace the value of USER_TYPE_ID: \n\n When updating a custom property, the changes in its type ( ), object to be bound (ENTITY_ID), and field code (FIELD_NAME) are restricted. It is connected with possible errors in linking values and entities. If one of these fields is to be changed, first of all a new custom property must be created, with all the values bound to it. That done, the old property must be deleted. An example of a custom property update: The example establishes that the field is mandatory. \n\n The identifier of a custom field must be submitted: \n\n Adding and updating is also implemented through the CUserTypeManager and the Update method. global $USER_FIELD_MANAGER; $aSection = CIBlockSection::GetList( array(), array( 'IBLOCK_CODE' => 'shop_news', 'CODE' => 'test_section', ) )->Fetch(); if( !$aSection ) { throw new Exception( 'No section is found' ); } $USER_FIELD_MANAGER->Update( 'IBLOCK_3_SECTION', $aSection['ID'], array( 'UF_DEV2DAY_FIELD' => 'updated value' ) ); // boolean If the update is successful, the method will return true. If a custom property is to be added to an infoblock section using the Bitrix-API mechanism, the following code with variations must be used: \n\n\n\n Course description \n\n \n\n \n\n Back to top Fields to Nonstandard Objects and New Objects"
    },
    {
        "link": "https://training.bitrix24.com/support/training/course/index.php?COURSE_ID=68&LESSON_ID=6194",
        "document": "The class CUserTypeEntity is in charge of work with custom fields. An example of adding a String-type custom property /** * Adding a custom property */ $oUserTypeEntity = new CUserTypeEntity(); $aUserFields = array( /* * Identifier of an entity to which the property will be bound. * The following format is used for a section - IBLOCK_{IBLOCK_ID}_SECTION */ 'ENTITY_ID' => 'IBLOCK_3_SECTION', /* Field code. It must always begin with UF_ */ 'FIELD_NAME' => 'UF_DEV2DAY_FIELD', /* Indicate that the type of the new custom property is string */ 'USER_TYPE_ID' => 'string', /* * XML_ID of the custom property. * To be used during uploading as a field name */ 'XML_ID' => 'XML_ID_DEV2DAY_FIELD', /* Sorting */ 'SORT' => 500, /* Whether the field is multiple or not */ 'MULTIPLE' => 'N', /* Whether the property is mandatory or not */ 'MANDATORY' => 'N', /* * Show in the list filter. Possible values: * Do not show = N, exact match = I, * mask search = E, substring search = S */ 'SHOW_FILTER' => 'N', /* * Do not show in the list. */ 'SHOW_IN_LIST' => '', /* * Do not permit editing by users. */ 'EDIT_IN_LIST' => '', /* Field values participate in the search */ 'IS_SEARCHABLE' => 'N', /* * Additional field settings (depend on the type). * In our case, for the string type */ 'SETTINGS' => array( /* Default value */ 'DEFAULT_VALUE' => '', /* Entry field size for display */ 'SIZE' => '20', /* Number of rows in the entry field */ 'ROWS' => '1', /* Minimum length of the line (0 – do not verify) */ 'MIN_LENGTH' => '0', /* Maximum length of the line (0 – do not verify) */ 'MAX_LENGTH' => '0', /* A regular expression for verification */ 'REGEXP' => '', ), /* Edit form label */ 'EDIT_FORM_LABEL' => array( 'en' => 'User field', ), /* List label */ 'LIST_COLUMN_LABEL' => array( 'en' => 'User field', ), /* List filter label */ 'LIST_FILTER_LABEL' => array( 'en' => 'User field', ), /* Error message (optional) */ 'ERROR_MESSAGE' => array( 'en' => 'An error in completing the user field', ), /* Help */ 'HELP_MESSAGE' => array( 'en' => '', ), ); $iUserFieldId = $oUserTypeEntity->Add( $aUserFields ); // int If a correct property is added to the variable $iUserFieldId, the identifier of the new custom property will be returned. In order to create custom fields of other types, replace the value of USER_TYPE_ID: \n\n When updating a custom property, the changes in its type ( ), object to be bound (ENTITY_ID), and field code (FIELD_NAME) are restricted. It is connected with possible errors in linking values and entities. If one of these fields is to be changed, first of all a new custom property must be created, with all the values bound to it. That done, the old property must be deleted. An example of a custom property update: The example establishes that the field is mandatory. \n\n The identifier of a custom field must be submitted: \n\n Adding and updating is also implemented through the CUserTypeManager and the Update method. global $USER_FIELD_MANAGER; $aSection = CIBlockSection::GetList( array(), array( 'IBLOCK_CODE' => 'shop_news', 'CODE' => 'test_section', ) )->Fetch(); if( !$aSection ) { throw new Exception( 'No section is found' ); } $USER_FIELD_MANAGER->Update( 'IBLOCK_3_SECTION', $aSection['ID'], array( 'UF_DEV2DAY_FIELD' => 'updated value' ) ); // boolean If the update is successful, the method will return true. If a custom property is to be added to an infoblock section using the Bitrix-API mechanism, the following code with variations must be used: \n\n\n\n Course description \n\n \n\n \n\n Back to top Fields to Nonstandard Objects and New Objects"
    },
    {
        "link": "https://training.bitrix24.com/support/training/course/index.php?COURSE_ID=178&LESSON_ID=19896",
        "document": "Custom fields can be created manually in Control Panel or by calling the API functions Custom fields are handled by the class CUserTypeEntity...\n\n\n\nLearn more ... . To create a field manually, you can open the page Settings > System Settings > Custom fields if you precisely know the object type ID. The preferred and simpler way to create a field is by using the Add custom field link in the forms that allow adding custom fields, for example: Creating a custom field is quite straightforward, but there are a couple of points you have to keep in mind. The option Read-only will prevent changing the value by a user or administrator. The values of read-only properties can only be set via the API. This option is used with system or critical fields that must not be changed manually. When creating a custom field, the field value is set to use one of the existing data types. In most cases the stock data types are sufficient. You can create your own data type if so required. The system offers the following stock data types:"
    },
    {
        "link": "https://stackoverflow.com/questions/60465091/bitrix-24-adding-custom-field-into-lead",
        "document": "You can find most Bitrix processes by using XDebug and performing the actions in the interface. In the case of adding a field to a lead form, that happens in of the component.\n\nHere's my version of it:\n\nThe function may take other types than suggested in that - You can check which should be valid by inspecting the output of .\n\n Although I'm not sure if the leads form and the list can work with other datatypes than those listed, so you may need to adapt the component template."
    },
    {
        "link": "https://training.bitrix24.com/support/training/course?COURSE_ID=68&LESSON_ID=6194/1000",
        "document": "The class CUserTypeEntity is in charge of work with custom fields. An example of adding a String-type custom property /** * Adding a custom property */ $oUserTypeEntity = new CUserTypeEntity(); $aUserFields = array( /* * Identifier of an entity to which the property will be bound. * The following format is used for a section - IBLOCK_{IBLOCK_ID}_SECTION */ 'ENTITY_ID' => 'IBLOCK_3_SECTION', /* Field code. It must always begin with UF_ */ 'FIELD_NAME' => 'UF_DEV2DAY_FIELD', /* Indicate that the type of the new custom property is string */ 'USER_TYPE_ID' => 'string', /* * XML_ID of the custom property. * To be used during uploading as a field name */ 'XML_ID' => 'XML_ID_DEV2DAY_FIELD', /* Sorting */ 'SORT' => 500, /* Whether the field is multiple or not */ 'MULTIPLE' => 'N', /* Whether the property is mandatory or not */ 'MANDATORY' => 'N', /* * Show in the list filter. Possible values: * Do not show = N, exact match = I, * mask search = E, substring search = S */ 'SHOW_FILTER' => 'N', /* * Do not show in the list. */ 'SHOW_IN_LIST' => '', /* * Do not permit editing by users. */ 'EDIT_IN_LIST' => '', /* Field values participate in the search */ 'IS_SEARCHABLE' => 'N', /* * Additional field settings (depend on the type). * In our case, for the string type */ 'SETTINGS' => array( /* Default value */ 'DEFAULT_VALUE' => '', /* Entry field size for display */ 'SIZE' => '20', /* Number of rows in the entry field */ 'ROWS' => '1', /* Minimum length of the line (0 – do not verify) */ 'MIN_LENGTH' => '0', /* Maximum length of the line (0 – do not verify) */ 'MAX_LENGTH' => '0', /* A regular expression for verification */ 'REGEXP' => '', ), /* Edit form label */ 'EDIT_FORM_LABEL' => array( 'en' => 'User field', ), /* List label */ 'LIST_COLUMN_LABEL' => array( 'en' => 'User field', ), /* List filter label */ 'LIST_FILTER_LABEL' => array( 'en' => 'User field', ), /* Error message (optional) */ 'ERROR_MESSAGE' => array( 'en' => 'An error in completing the user field', ), /* Help */ 'HELP_MESSAGE' => array( 'en' => '', ), ); $iUserFieldId = $oUserTypeEntity->Add( $aUserFields ); // int If a correct property is added to the variable $iUserFieldId, the identifier of the new custom property will be returned. In order to create custom fields of other types, replace the value of USER_TYPE_ID: \n\n When updating a custom property, the changes in its type ( ), object to be bound (ENTITY_ID), and field code (FIELD_NAME) are restricted. It is connected with possible errors in linking values and entities. If one of these fields is to be changed, first of all a new custom property must be created, with all the values bound to it. That done, the old property must be deleted. An example of a custom property update: The example establishes that the field is mandatory. \n\n The identifier of a custom field must be submitted: \n\n Adding and updating is also implemented through the CUserTypeManager and the Update method. global $USER_FIELD_MANAGER; $aSection = CIBlockSection::GetList( array(), array( 'IBLOCK_CODE' => 'shop_news', 'CODE' => 'test_section', ) )->Fetch(); if( !$aSection ) { throw new Exception( 'No section is found' ); } $USER_FIELD_MANAGER->Update( 'IBLOCK_3_SECTION', $aSection['ID'], array( 'UF_DEV2DAY_FIELD' => 'updated value' ) ); // boolean If the update is successful, the method will return true. If a custom property is to be added to an infoblock section using the Bitrix-API mechanism, the following code with variations must be used: \n\n\n\n Start the course"
    }
]