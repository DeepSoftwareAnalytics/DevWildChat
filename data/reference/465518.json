[
    {
        "link": "https://learn.microsoft.com/en-us/sharepoint/dev/spfx/release-1.0.0",
        "document": "Welcome to the General Availability of SPFx 1.0. It's been an exciting and interesting trip so far, and will continue to be. This is only the first release - expect a steady stream of improvements and features.\n\nThis page addresses details related to a specific SPFx release version. This page doesn't include additional SPFx prerequisites that must be installed in order to develop SPFx solutions, including Node.js, Yeoman, and other tools. To learn more about these prerequisites, see Set up your SharePoint Framework development environment.\n\nIn the project's package.json file, identify all SPFx pre-v1 packages. For each SPFx package:\n\nYou can get the updated npm packages and use them in the local workbench, and everything should be fine. However, the rollout of the code to the servers will be done in stages over the course of several days. By sometime next week 100% of the farms should have it. We do this to monitor the rollout and make sure we don't have any issues.\n\nWill I get to use SPFX and client side web parts now?\n\nThere are really two different things at play. One is the code being available on all the farms, the second is the feature being enabled for a given tenant.\n\nSimilar to how the code rolls out across the farms, the feature will be rolled out to tenants. We'll start with the same first-release tenants (not users, tenants) that have SPFX today. Over the course of a couple of weeks, it should roll to all tenants.\n\nYou'll know if it has reached a given tenant because uploading the package into the app catalog will say it's valid. Even tenants that can't upload packages can still try out SPFx, they'll just be limited to the local and hosted workbench (found at _layouts/15/workbench.aspx).\n\nChanges in this release\n• There are only a few changes in the actual SharePoint Framework code. The bulk of our work between RC0 and GA had to do with stability and future-proofing. It is our explicit goal that the parts you create today should continue to work for years to come. But fixes made to the underlying service continue to be supplied without issues, we don't have 7 different minor and patch versions of framework code loaded, and so on. There's still some work to do in this area for some components - we'll get to those.\n• The biggest change to the code itself is that we incorporated the strict null checks flag into SPFX, meaning that you can also enable this flag in your projects. It changed the API slightly, but should only be noticed if you enable strict null checks yourself.\n• The other noticeable changes are in the default code that is generated by running the Yeoman generator. v1.0.0 is the version of the packages. We now reference @types/* with a strict version (no more lodash errors).\n• We have feature XML support (along with upgrade). This can be used to provision needed fields, content types and lists for the web part in “elevated” mode. We'll write up some posts on this in more detail.\n• We've finalized the serialization format on classic pages. You should delete and re-add your web parts. We'll support the old serialization format for a short while, then it will stop working.\n• now returns object in GA rather than string like RC0\n\nWe have temporarily removed office-ui-fabric-react from the react template until we can get the package moved to a future-proof form. We expect that to take a couple of weeks."
    },
    {
        "link": "https://learn.microsoft.com/en-us/graph/api/list-create?view=graph-rest-1.0",
        "document": "This API is available in the following national cloud deployments.\n\nChoose the permission or permissions marked as least privileged for this API. Use a higher privileged permission or permissions only if your app requires it. For details about delegated and application permissions, see Permission types. To learn more about these permissions, see the permissions reference.\n\nIn the request body, supply a JSON representation of a list object.\n\nIf successful, this method returns a response code and a list object in the response body.\n\nThe following is an example of how to create a new generic list.\n\nIn addition to any columns specified here, new lists are created with columns defined in the referenced template. If the list facet or template is unspecified, the list defaults to the template, which includes a Title column.\n\nThe following example shows the response."
    },
    {
        "link": "https://medium.com/xebia-engineering/java-use-microsoft-graph-api-to-access-sharepoint-sites-1a26427c9b83",
        "document": "In this blog, we will cover the use of Microsoft Graph API to access SharePoint or any other Microsoft cloud resource sites. We will be accessing items stored inside our SharePoint drives so that we can perform some operation on those files (like data entry, downloading to screen, etc).\n\nBefore we jump to the implementation lets discuss:\n\nMicrosoft Graph API is a simple, easy to use API that allows access to Microsoft cloud resources such as Office 365, SharePoint, Enterprise Mobility, and Security Services. It provides some REST endpoints that allow access to these services like Office 365.\n\nCurrently, there are two versions available: Beta and v1.0. It is recommended to use v1.0 for production, as beta includes some new stuff that may or may not be included in the final versions later on.\n\nFor reference, the API documentation can be found at https://docs.microsoft.com/en-us/graph/api/overview?view=graph-rest-1.0\n\nThe API endpoint for v1.0 is: https://graph.microsoft.com/v1.0\n\nLet us see the workflow for accessing resources:\n\nIn the image we can see that whenever an API or client wants to access the Resource site, we will be having two Objects in between:\n\n⦁ Resource Connector: It connects with Authentication Provider to verify token and builds up Microsoft Graph API requests to the Resource Sites using a Graph Client\n\n⦁ Authentication Provider: It validates the token, if found correct, it will give access to Resource Site else it will Forbid the request to that site.\n\nResource site can be any Microsoft Cloud resource.\n\nNow as a 1st step we will build an Authentication Provider and get an Auth Token for that site.\n\nBelow are the things required in order to build an authentication provider:\n\nNow inside our Authentication Provider class we will have two functions:\n\n⦁ getAuthToken() : return type String. It gives us the access token.\n\n⦁ getAuthProvider() : return type IGraphServiceClient. It gives us the Graph Client which helps us to build and authorize the graph requests.\n\nAs a sample, below are the two functions that will help you build your own Authentication Provider. You can use them directly or modify based on your requirement.\n\nOnce you have created your own Authentication Provider, let's move on to step 2 and build the Resource Connector (SharePoint Connector).\n\nIn the Resource Connector we will have a function that will return the InputStream of our File so that we can perform our operations on it.\n\nFirst, let's see what are the completePathOfFile and pathToResourceSite\n\nThe completePathOfFile is the path of the file similar to what we have in our PC or Mac like\n\nThe pathToResourceSite is a graph request having value as per the below format (this is as per the format provided in the graph API documentation):\n\nSimilarly, in order to connect to different tenants within the same my-site.sharepoint.com just change the tenant-name value to the tenant you want to connect to.t\n\nThe above function returns InputSteam of our file. Below is the explanation of the code:\n\n⦁ We are building a graphClient which provides us a way to distinguish between valid and invalid requests and return JSON object of our requests.\n\n⦁ We are creating a get request and a JSON of our main site is returned in JsonElement main site.\n\n⦁ From that JSON we are fetching the “id” of our site. This ID is a combination of 3 elements separated by “,”:\n\n⦁ Once we have the Site Id, we can build any request to that site as shown above, inside InputStream driveItem.\n\nSo, we have seen how we can get an Item from our sites. Now let's see how we can upload (post) an item on our sites.\n\nFor this, we will create an upload session and access our site using siteId. Then we will provide the item’s path like folder/item.txt and create an upload session.\n\nWe also need a chunkedUploadProvider to perform the upload.\n\nMicrosoft Graph API also facilitates us with an IProgressCallback<DriveItem> callback, using which we can have a callback for a successful or failed upload of our item.\n\nBelow is the code for your reference:\n\nMicrosoft has also provided us with a graph explorer to help us build and test our graph APIs. Some samples are also available in the bottom-left corner of the page. Below is the image of graph explorer:\n\nSome sample requests are shown below:\n\nTo get content of a file\n\nA detailed list/examples of graph requests can be found in the official documentation. You can build or modify this request as per your requirement.\n\nI hope this blog will be useful to all those who are trying to implement similar requirements or studying new concepts. Do let me know in the comments section, what all new things you want to learn and I’ll create an easy to understand blog for you."
    },
    {
        "link": "https://learn.microsoft.com/en-us/graph/api/listitem-list-versions?view=graph-rest-1.0",
        "document": "SharePoint can be configured to retain the history for list items.\n\nPrevious versions may be retained for a finite period of time depending on admin settings which may be unique per user or location.\n\nThis API is available in the following national cloud deployments.\n\nChoose the permission or permissions marked as least privileged for this API. Use a higher privileged permission or permissions only if your app requires it. For details about delegated and application permissions, see Permission types. To learn more about these permissions, see the permissions reference.\n\nIf successful, this method returns a response code and collection of ListItemVersion objects in the response body.\n\nThis example retrieves the versions of a listItem in a SharePoint list:"
    },
    {
        "link": "https://github.com/quantr-research/Sharepoint-Java-API/blob/master/src/main/java/hk/quantr/sharepoint/SPOnline.java",
        "document": "To see all available qualifiers, see our documentation .\n\nSaved searches Use saved searches to filter your results more quickly\n\nWe read every piece of feedback, and take your input very seriously.\n\nYou signed in with another tab or window. Reload to refresh your session.\n\nYou signed out in another tab or window. Reload to refresh your session.\n\nYou switched accounts on another tab or window. Reload to refresh your session."
    },
    {
        "link": "https://sharepoint.stackexchange.com/questions/280852/how-to-authenticate-a-java-job-at-sharepoint-online",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://stackoverflow.com/questions/45815246/how-to-authenticate-with-ms-sharepoint-to-use-its-api-with-java",
        "document": "I'm struggling to authenticate with MS SharePoint to use it's API. I've been googling and playing around with that problem for a while but somehow I can't figure out a solution. The most promising solution so far is based on this answer.\n\nThe dependencies I'm using are:\n\nThis is my code:\n\nThe code is quite self-explanatory I think, it is basically just what the linked answer suggests. My investigation showed that the best way to go for this problem are the NTCredentials. I also tried some other alternatives like the Basic Authentication but in all cases I receive:\n\nI also tried using Samba JCIFS as an alternative NTLM engine.\n\nFurthermore I'm a little bit scared that maybe the parameter for workstation (3rd parameter) or domain is filled in incorrectly by me. The documentation says:\n\nworkstation - The workstation the authentication request is originating from. Essentially, the computer name for this machine.\n\nSo I tried filling in the name of my machine but many examples on the web suggest that you use an URL that you are trying to authenticate with. This caused a little confusion for me but with none of the two options I could get it working.\n\nDoes anyone know why that is or has a possible solution or a workaround for that problem? Is it maybe possible that the SharePoint restricts the access via a programmed client? As far as I know it's at least not possible to disable the API from the SharePoint. Any ideas / thoughts to this?"
    },
    {
        "link": "https://learn.microsoft.com/en-us/answers/questions/1391519/how-to-authenticate-sharepoint-online-using-rest-a",
        "document": "Development: The process of researching, productizing, and refining new or existing technologies."
    },
    {
        "link": "https://stackoverflow.com/questions/29570383/basic-authentication-from-java-to-sharepoint-2013-rest-api",
        "document": "Would prefer to use BASIC authentication:\n\nThere are many examples of using the rest api's on the web but none seem to deal with authentication. Maybe I'm missing something really simple here.\n\nThis works manually via POSTMAN: http://tech.bool.se/basic-rest-request-sharepoint-using-postman/ but requires me to enter username and password in browser.\n\nI've tried implementing this: HttpClientBuilder basic auth using\n\nThis results in -> WARNING: NTLM authentication error: Credentials cannot be used for NTLM authentication: org.apache.http.auth.UsernamePasswordCredentials"
    },
    {
        "link": "https://medium.com/xebia-engineering/java-use-microsoft-graph-api-to-access-sharepoint-sites-1a26427c9b83",
        "document": "In this blog, we will cover the use of Microsoft Graph API to access SharePoint or any other Microsoft cloud resource sites. We will be accessing items stored inside our SharePoint drives so that we can perform some operation on those files (like data entry, downloading to screen, etc).\n\nBefore we jump to the implementation lets discuss:\n\nMicrosoft Graph API is a simple, easy to use API that allows access to Microsoft cloud resources such as Office 365, SharePoint, Enterprise Mobility, and Security Services. It provides some REST endpoints that allow access to these services like Office 365.\n\nCurrently, there are two versions available: Beta and v1.0. It is recommended to use v1.0 for production, as beta includes some new stuff that may or may not be included in the final versions later on.\n\nFor reference, the API documentation can be found at https://docs.microsoft.com/en-us/graph/api/overview?view=graph-rest-1.0\n\nThe API endpoint for v1.0 is: https://graph.microsoft.com/v1.0\n\nLet us see the workflow for accessing resources:\n\nIn the image we can see that whenever an API or client wants to access the Resource site, we will be having two Objects in between:\n\n⦁ Resource Connector: It connects with Authentication Provider to verify token and builds up Microsoft Graph API requests to the Resource Sites using a Graph Client\n\n⦁ Authentication Provider: It validates the token, if found correct, it will give access to Resource Site else it will Forbid the request to that site.\n\nResource site can be any Microsoft Cloud resource.\n\nNow as a 1st step we will build an Authentication Provider and get an Auth Token for that site.\n\nBelow are the things required in order to build an authentication provider:\n\nNow inside our Authentication Provider class we will have two functions:\n\n⦁ getAuthToken() : return type String. It gives us the access token.\n\n⦁ getAuthProvider() : return type IGraphServiceClient. It gives us the Graph Client which helps us to build and authorize the graph requests.\n\nAs a sample, below are the two functions that will help you build your own Authentication Provider. You can use them directly or modify based on your requirement.\n\nOnce you have created your own Authentication Provider, let's move on to step 2 and build the Resource Connector (SharePoint Connector).\n\nIn the Resource Connector we will have a function that will return the InputStream of our File so that we can perform our operations on it.\n\nFirst, let's see what are the completePathOfFile and pathToResourceSite\n\nThe completePathOfFile is the path of the file similar to what we have in our PC or Mac like\n\nThe pathToResourceSite is a graph request having value as per the below format (this is as per the format provided in the graph API documentation):\n\nSimilarly, in order to connect to different tenants within the same my-site.sharepoint.com just change the tenant-name value to the tenant you want to connect to.t\n\nThe above function returns InputSteam of our file. Below is the explanation of the code:\n\n⦁ We are building a graphClient which provides us a way to distinguish between valid and invalid requests and return JSON object of our requests.\n\n⦁ We are creating a get request and a JSON of our main site is returned in JsonElement main site.\n\n⦁ From that JSON we are fetching the “id” of our site. This ID is a combination of 3 elements separated by “,”:\n\n⦁ Once we have the Site Id, we can build any request to that site as shown above, inside InputStream driveItem.\n\nSo, we have seen how we can get an Item from our sites. Now let's see how we can upload (post) an item on our sites.\n\nFor this, we will create an upload session and access our site using siteId. Then we will provide the item’s path like folder/item.txt and create an upload session.\n\nWe also need a chunkedUploadProvider to perform the upload.\n\nMicrosoft Graph API also facilitates us with an IProgressCallback<DriveItem> callback, using which we can have a callback for a successful or failed upload of our item.\n\nBelow is the code for your reference:\n\nMicrosoft has also provided us with a graph explorer to help us build and test our graph APIs. Some samples are also available in the bottom-left corner of the page. Below is the image of graph explorer:\n\nSome sample requests are shown below:\n\nTo get content of a file\n\nA detailed list/examples of graph requests can be found in the official documentation. You can build or modify this request as per your requirement.\n\nI hope this blog will be useful to all those who are trying to implement similar requirements or studying new concepts. Do let me know in the comments section, what all new things you want to learn and I’ll create an easy to understand blog for you."
    }
]