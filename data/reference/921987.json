[
    {
        "link": "https://vercel.com/templates/python/flask-hello-world",
        "document": "This example shows how to use Flask 3 on Vercel with Serverless Functions using the Python Runtime.\n\nThis example uses the Web Server Gateway Interface (WSGI) with Flask to enable handling requests on Vercel with Serverless Functions.\n\nYour Flask application is now available at .\n\nDeploy the example using Vercel:"
    },
    {
        "link": "https://dev.to/dhanushreddy29/host-a-serverless-flask-app-on-vercel-2a9l",
        "document": "Flask is a popular Python web framework that makes it simple to create web applications and API's in a short period of time. If you've created a Flask app and are worried about configuring a server as Heroku's free plan is no more, then worry not; you can run Flask as a serverless function on Vercel (yes, you have heard it right; we are gonna deploy a Flask app on Vercel).\n\nBefore we begin, you should have the following things set up:\n• A Vercel account. You can sign up for a free account at vercel.com.\n• The Vercel CLI (Command Line Interface) installed on your computer. You can install the Vercel CLI by running the following command in your terminal.\n\nOpen up your favourite code editor and initialize the following files and folders in the below order:\n\n\n\nIn the file. Lets us write a basic Hello World program which you can modify as per your needs.\n\n\n\nIt is the only PyPi package we need. The Web Server Gateway Interface (WSGI) is provided automatically by Vercel during the runtime.\n\nThe file contains the configuration for this project.\n\nThe above code routes any request to the original page to the Flask Server which was written in .\n\nNow deploy the Flask app onto vercel by running:\n\n\n\nFollow the prompts asked and Vercel will then build and deploy your app, and you will be provided with a URL where you can access your app. You can also access your website's URL by going to your Vercel dashboard.\n\nThe URL for my Flask App which I have made using above steps is vercel-flask-demo-one.vercel.app\n\nIf you want to customize the way your Flask app is deployed, you can add additional options to the file. For example, you can specify the Python version to use, or add environment variables to your app, specify the maximum execution time and the memory for a request etc.\n\nIf you are thinking about running FastAPI in Vercel then its absolutely possible. Just replace in with and Vercel will automatically use the corresponding ASGI to serve it.\n\nYou can read more on: Python Runtimes\n\nI have created this blog post to show that it is possible to deploy common Python Web apps like Flask and FastAPI on Vercel by use of Serverless Functions as many people just use Vercel for hosting their Frontends and never fully explore it. In the next article, I will show you how you can host Serverless Bots on Vercel.\n\nIn case if you still have any questions regarding this post or want to discuss something with me feel free to connect on LinkedIn or Twitter."
    },
    {
        "link": "https://reddit.com/r/flask/comments/1dgqrye/how_to_deploy_flask_apps_on_vercel",
        "document": "I have seen a lot of people deploying flask apps on vercel but there is no 'optimal' guide on how to do so, I have tried several times referring to medium articles and YouTube videos but always in vain, tried this for a pure backend based website and for a ML deployment project but did not work... Can anyone assist me with a pathway or suggest an alternative for free website deployment? Would be highly appreciated..."
    },
    {
        "link": "https://vercel.com/docs/functions/runtimes/python",
        "document": "Using the Python Runtime with Vercel Functions Learn how to use the Python runtime to compile Python Vercel Functions on Vercel.\n\nThe Python runtime enables you to write Python code, including using Django and Flask, with Vercel Serverless Functions. You can use a specific Python version as well as use a file to install dependencies.\n\nYou can create your first function, available at the route, as follows:\n\nBy default, new projects will use the latest Python version available on Vercel.\n\nYou can specify which of the available Python versions to use by defining in :\n\nVercel Functions support streaming responses when using the Python runtime. This allows you to render parts of the UI as they become ready, letting users interact with your app before the entire page finishes loading.\n\nYou can install dependencies for your Python projects by defining them in or a with corresponding .\n\nFor basic usage of the Python runtime, no configuration is required. Advanced usage of the Python runtime, such as with Flask and Django, requires some configuration.\n\nThe entry point of this runtime is a glob matching source files with one of the following variables defined:\n• that inherits from the class\n\nPython uses the current working directory when a relative file is passed to open().\n\nThe current working directory is the base of your project, not the directory.\n\nFor example, the following directory structure:\n\nWith the above directory structure, your function in can read the contents of in a couple different ways.\n\nYou can use the path relative to the project's base directory.\n\nOr you can use the path relative to the current file's directory.\n\nThe Web Server Gateway Interface (WSGI) is a calling convention for web servers to forward requests to web applications written in Python. You can use WSGI with frameworks such as Flask or Django.\n• Deploy an example with Flask\n• Deploy an example with Django\n\nThe Asynchronous Server Gateway Interface (ASGI) is a calling convention for web servers to forward requests to asynchronous web applications written in Python. You can use ASGI with frameworks such as Sanic.\n\nInstead of defining a , define an variable in your Python file.\n\nFor example, define a file as follows:"
    },
    {
        "link": "https://medium.com/@nohanabil/how-to-deploy-flask-app-using-vercel-885ce034624",
        "document": "To deploy a Flask app using Vercel, you can follow these steps:\n• First, make sure you have installed the Vercel CLI tool. You can install it using npm by running the following command:\n\n2. Next, Navigate to directory for your Flask app using the command line. then Add the required dependencies to the `requirements.txt` file:\n\n3. Create a new file called `vercel.json` in the root directory of your app. This file will contain the configuration information for Vercel.\n\n4. Add the following JSON code to the vercel.json file:\n\n5. In the above code, replace app.py with the name of your Flask app file.\n\n6. Finally, deploy your app to Vercel by running the following command:\n\n7. Follow the prompts to configure your deployment, including setting up a Vercel account if you haven’t already.\n\nOnce the deployment is complete, you can access your Flask app by navigating to the URL provided by Vercel."
    },
    {
        "link": "https://vercel.com/docs/project-configuration",
        "document": "Learn how to use vercel.json to configure and override the default behavior of Vercel from within your project.\n\nThe configuration file lets you configure, and override the default behavior of Vercel from within your project. This includes settings for:\n\nTo get started, create a file in your project's root directory.\n\nTo add autocompletion, type checking, and schema validation to your file, add the following to the top of your file:\n\nThe property can be used to override the Build Command in the Project Settings dashboard, and the script from the file for a given deployment. For more information on the default behavior of the Build Command, visit the Configure a Build - Build Command section.\n\nThis value overrides the Build Command in Project Settings.\n\nWhen set to , all HTML files and Serverless Functions will have their extension removed. When visiting a path that ends with the extension, a 308 response will redirect the client to the extensionless path.\n\nFor example, a static file named will be served when visiting the path. Visiting will redirect to .\n\nSimilarly, a Serverless Function named will be served when visiting . Visiting will redirect to .\n\nIf you are using Next.js and running , you will get a 404 error when visiting a route configured with locally. It does however work fine when deployed to Vercel. In the example above, visiting locally will give you a 404 with but will render correctly on Vercel.\n\nUsed to configure cron jobs for the production deployment of a project.\n• A maximum of string length of 512 for the value.\n• A maximum of string length of 256 for the value.\n• - - The path to invoke when the cron job is triggered. Must start with .\n• - - The cron schedule expression to use for the cron job.\n\nThis value overrides the Development Command in Project Settings.\n\nThe property can be used to override the Development Command in the Project Settings dashboard. For more information on the default behavior of the Development Command, visit the Configure a Build - Development Command section.\n\nThis value overrides the Framework in Project Settings.\n\nThe property can be used to override the Framework Preset in the Project Settings dashboard. The value must be a valid framework slug. For more information on the default behavior of the Framework Preset, visit the Configure a Build - Framework Preset section.\n\nType: of key and value .\n\nA glob pattern that matches the paths of the Serverless Functions you would like to customize:\n• (optional): The npm package name of a Runtime, including its version.\n• (optional): An integer defining the memory in MB for your Serverless Function (between and ).\n• (optional): An integer defining how long your Serverless Function should be allowed to run on every request in seconds (between and the maximum limit of your plan, as mentioned below).\n\nBy default, no configuration is needed to deploy Serverless Functions to Vercel.\n\nFor all officially supported runtimes, the only requirement is to create an directory at the root of your project directory, placing your Serverless Functions inside.\n\nThe property cannot be used in combination with . Since the latter is a legacy configuration property, we recommend dropping it in favor of the new one.\n\nBecause Incremental Static Regeneration (ISR) uses Serverless Functions, the same configurations apply. The ISR route can be defined using a glob pattern, and accepts the same properties as when using Serverless Functions.\n\nWhen deployed, each Serverless Function receives the following properties:\n• 10s default - 60s (Hobby), 15s default - 300s (Pro), or 15s default - 900s (Enterprise). This can be configured up to the respective plan limit) -\n\nTo configure them, you can add the property.\n\nIn order to use a runtime that is not officially supported, you can add a property to the definition:\n\nIn the example above, the Serverless Function does not use one of the officially supported runtimes. In turn, a property was added in order to invoke the vercel-php community runtime.\n\nFor more information on Runtimes, see the Runtimes documentation:\n\nThis example configures custom response headers for static files, Serverless Functions, and a wildcard that matches all routes.\n\nLearn more about rewrites on Vercel and see limitations.\n\nThis value overrides the Ignored Build Step in Project Settings.\n\nThis property will override the Command for Ignoring the Build Step for a given deployment. When the command exits with code 1, the build will continue. When the command exits with 0, the build is ignored. For more information on the default behavior of the Ignore Command, visit the Ignored Build Step section.\n\nThis value overrides the Install Command in Project Settings.\n\nThe property can be used to override the Install Command in the Project Settings dashboard for a given deployment. This setting is useful for trying out a new package manager for the project. An empty string value will cause the Install Command to be skipped. For more information on the default behavior of the install command visit the Configure a Build - Install Command section.\n\nThe property defines the behavior of Vercel's native Image Optimization API, which allows on-demand optimization of images at runtime.\n• - - Array of allowed image widths. The Image Optimization API will return an error if the parameter is not defined in this list.\n• - Allow-list of local image paths which can be used with the Image Optimization API.\n• - Allow-list of external domains which can be used with the Image Optimization API.\n• - Cache duration (in seconds) for the optimized images.\n• - Array of allowed image qualities. The Image Optimization API will return an error if the parameter is not defined in this list.\n• - Allow SVG input image URLs. This is disabled by default for security purposes.\n• - Specifies the Content Security Policy of the optimized images.\n• - Specifies the value of the response header. Allowed values are or .\n\nThis value overrides the Output Directory in Project Settings.\n\nThe property can be used to override the Output Directory in the Project Settings dashboard for a given deployment.\n\nIn the following example, the deployment will look for the directory rather than the default or root directory. For more information on the default behavior of the Output Directory see the Configure a Build - Output Directory section. The following example is a file that overrides the to :\n\nWhen set to , both the source view and logs view will be publicly accessible.\n\nThis example redirects requests to the path from your site's root to the file relative to your site's root with a 307 Temporary Redirect:\n\nThis example redirects requests to the path from your site's root to the file relative to your site's root with a 308 Permanent Redirect:\n\nThis example redirects requests to the path from your site's root to the api route relative to your site's root with a 301 Moved Permanently:\n\nThis example redirects requests to the path from your site's root to the absolute path of an external site with a redirect status of 308:\n\nThis example redirects requests to all the paths (including all sub-directories and pages) from your site's root to the absolute path of an external site with a redirect status of 308:\n\nThis example uses wildcard path matching to redirect requests to any path (including subdirectories) under from your site's root to a corresponding path under relative to your site's root with a redirect status of 308:\n\nThis example uses regex path matching to redirect requests to any path under that only contain numerical digits from your site's root to a corresponding path under relative to your site's root with a redirect status of 308:\n\nThis example redirects requests to any path from your site's root that does not start with and has header value of to a corresponding path under relative to your site's root with a redirect status of 307:\n\nLearn more about redirects on Vercel and see limitations.\n\nThis value overrides the Serverless Function Region in Project Settings.\n\nYou can define the regions where your Serverless Functions are executed. Users on Pro and Enterprise can deploy to multiple regions. Hobby plans can select any single region. To learn more, see Configuring Regions.\n\nFunction responses can be cached in the requested regions. Selecting a Serverless Function region does not impact static files, which are deployed to every region by default.\n\nSet this property to specify the region to which a Serverless Function should fallback when the default region(s) are unavailable.\n\nThese regions serve as a fallback to any regions specified in the configuration. The region Vercel selects to invoke your function depends on availability and ingress. For instance:\n• Vercel always attempts to invoke the function in the primary region. If you specify more than one primary region in the property, Vercel selects the region geographically closest to the request\n• If all primary regions are unavailable, Vercel automatically fails over to the regions specified in , selecting the region geographically closest to the request\n• The order of the regions in does not matter as Vercel automatically selects the region geographically closest to the request\n\nTo learn more about automatic failover for Serverless Functions, see Automatic failover. Edge Functions will automatically failover with no configuration required.\n\nRegion failover is supported with Secure Compute, see Region Failover to learn more.\n\nThis example rewrites requests to the path from your site's root to the file relative to your site's root:\n\nThis example rewrites requests to the paths under that with 2 paths levels (defined as variables and that can be used in the destination value) to the api route relative to your site's root:\n\nThis example uses wildcard path matching to rewrite requests to any path (including subdirectories) under from your site's root to a corresponding path under the root of an external site :\n\nThis example rewrites requests to any path from your site's root that does not start with /uk/ and has x-vercel-ip-country header value of GB to a corresponding path under /uk/ relative to your site's root:\n\nThis example rewrites requests to the path from your site's root that does not have a cookie with key to the path relative to your site's root:\n\nThe property should NOT be a file because precedence is given to the filesystem prior to rewrites being applied. Instead, you should rename your static file or Serverless Function.\n\nLearn more about rewrites on Vercel.\n\nWhen , visiting a path that ends with a forward slash will respond with a 308 status code and redirect to the path without the trailing slash.\n\nFor example, the path will redirect to .\n\nWhen , visiting a path that does not end with a forward slash will respond with a 308 status code and redirect to the path with a trailing slash.\n\nFor example, the path will redirect to .\n\nHowever, paths with a file extension will not redirect to a trailing slash.\n\nFor example, the path will not redirect, but the path will redirect to .\n\nWhen , visiting a path with or without a trailing slash will not redirect.\n\nFor example, both and will serve the same content without redirecting.\n\nThis is not recommended because it could lead to search engines indexing two different pages with duplicate content.\n\nLegacy properties are still supported for backwards compatibility, but are deprecated.\n\nThe property has been deprecated in favor of Project Linking, which allows you to link a Vercel project to your local codebase when you run .\n\nValid values: string name for the deployment.\n• Only lower case alphanumeric characters or hyphens are allowed\n• Cannot begin or end with a hyphen, or contain multiple consecutive hyphens\n\nThe prefix for all new deployment instances. Vercel CLI usually generates this field automatically based on the name of the directory. But if you'd like to define it explicitly, this is the way to go.\n\nThe defined name is also used to organize the deployment into a project.\n\nThe property should not be used anymore.\n\nSpecifies the Vercel Platform version the deployment should use.\n\nThe property should not be used anymore. To assign a custom Domain to your project, please define it in the Project Settings instead. Once your domains are, they will take precedence over the configuration property.\n\nValid values: domain names (optionally including subdomains) added to the account, or a string for a suffixed URL using or a Custom Deployment Suffix (available on the Enterprise plan).\n\nLimit: A maximum of 64 aliases in the array.\n\nThe alias or aliases are applied automatically using Vercel for GitHub, Vercel for GitLab, or Vercel for Bitbucket when merging or pushing to the Production Branch.\n\nYou can deploy to the defined aliases using Vercel CLI by setting the production deployment environment target.\n\nThe property has been deprecated in favor of Project Linking, which allows you to link a Vercel project to your local codebase when you run .\n\nValid values: For teams, either an ID or slug. For users, either a email address, username, or ID.\n\nThis property determines the scope (Hobby team or team) under which the project will be deployed by Vercel CLI.\n\nIt also affects any other actions that the user takes within the directory that contains this configuration (e.g. listing environment variables using ).\n\nDeployments made through Git will ignore the property because the repository is already connected to project.\n\nWe recommend against using this property. To add custom environment variables to your project define them in the Project Settings.\n\nThis example will pass the static env to all Serverless Functions and the resolved from the secret dynamically.\n\nWe recommend against using this property. To add custom environment variables to your project define them in the Project Settings.\n\nType: of keys and values inside the .\n\nThe following example will pass the environment variable to all Builds and the resolved from the secret dynamically.\n\nWe recommend against using this property. To customize Serverless Functions, please use the functions property instead. If you'd like to deploy a monorepo, see the Monorepo docs.\n• ( ): A glob expression or pathname. If more than one file is resolved, one build will be created per matched file. It can include and .\n• ( ): An npm module to be installed by the build process. It can include a semver compatible version (e.g.: ).\n• ( ): Optionally, an object including arbitrary metadata to be passed to the Builder.\n\nThe following will include all HTML files as-is (to be served statically), and build all Python files and JS files into Serverless Functions:\n\nWhen at least one item is specified, only the outputs of the build processes will be included in the resulting deployment as a security precaution. This is why we need to allowlist static files explicitly with .\n\nWe recommend using cleanUrls, trailingSlash, redirects, rewrites, and/or headers instead.\n\nThe property is only meant to be used for advanced integration purposes, such as the Build Output API, and cannot be used in conjunction with any of the properties mentioned above.\n\nSee the upgrading routes section to learn how to migrate away from this property.\n• : A set of HTTP method types. If no method is provided, requests with any HTTP method will be a candidate for the route.\n• : A destination pathname or full URL, including querystring, with the ability to embed capture groups as $1, $2…\n• : A set of headers to apply for responses.\n• : A status code to respond with. Can be used in tandem with header to implement redirects.\n• : A boolean to change matching behavior. If , routing will continue even when the is matched.\n• : An optional array of objects with the , and properties. Used for conditional path matching based on the of specified properties\n• : An optional array of objects with the , and properties. Used for conditional path matching based on the of specified properties\n\nRoutes are processed in the order they are defined in the array, so wildcard/catch-all patterns should usually be last.\n\nThis example configures custom routes that map to static files and Serverless Functions:\n\nIn most cases, you can upgrade legacy usage to the newer , , , or properties.\n\nHere are some examples that show how to upgrade legacy to the equivalent new property.\n\nWith , you use a PCRE Regex named group to match the ID and then pass that parameter in the query string. The following example matches a URL like and proxies to :\n\nWith , named parameters are automatically passed in the query string. The following example is equivalent to the legacy usage above, but uses instead:\n\nWith , you specify the status code to use a 307 Temporary Redirect. Also, this redirect needs to be defined before other routes. The following example redirects all paths in the directory to the directory, but keeps the path in the new location:\n\nWith , you disable the property to use a 307 Temporary Redirect. Also, are always processed before . The following example is equivalent to the legacy usage above, but uses instead:\n\nWith , you use to give precedence to the filesystem and exit early if the requested path matched a file. The following example will serve the file for all paths that do not match a file in the filesystem:\n\nWith , the filesystem check is the default behavior. If you want to change the name of files at the filesystem level, file renames can be performed during the Build Step, but not with . The following example is equivalent to the legacy usage above, but uses instead:\n\nWith , you use to prevent stopping at the first match. The following example adds headers to the favicon and other static assets:\n\nWith , this is no longer necessary since that is the default behavior. The following example is equivalent to the legacy usage above, but uses instead:\n\nWith , you need to escape a dot with two backslashes, otherwise it would match any character PCRE Regex. The following example matches the literal and proxies to to dynamically generate RSS:\n\nWith , the is not a special character so it does not need to be escaped. The following example is equivalent to the legacy usage above, but instead uses :\n\nWith , you use PCRE Regex negative lookahead. The following example proxies all requests to the page except for itself to avoid infinite loop:\n\nWith , the Regex needs to be wrapped. The following example is equivalent to the legacy usage above, but instead uses :\n\nWith , the property is case-insensitive leading to duplicate content, where multiple request paths with difference cases serve the same page.\n\nWith / / , the property is case-sensitive so you don't accidentally create duplicate content."
    },
    {
        "link": "https://medium.com/@palindromicnamed/the-vercel-json-9bdb33938ef3",
        "document": "-the vercel.json file is used to configure deployments on vercel, a platform for deploying web applications.\n\n-it allows you to define settings and behaviors for your project.\n\n- following are the key features and configurations you can specify in vercel.json:\n\n1)build Settings: customize the build process with specific commands and settings.\n\n6) ignore files: prevent specific files or directories from being deployed.\n\nThis file is especially useful for projects using frameworks like next.js or custom node.js apis."
    },
    {
        "link": "https://vercel.com/templates/python/python-hello-world",
        "document": "This example shows how to use Python on Vercel with Serverless Functions using the Python Runtime.\n\nYour Python API is now available at .\n\nDeploy the example using Vercel:"
    },
    {
        "link": "https://stackoverflow.com/questions/78771856/what-should-my-vercel-json-config-file-to-deploy-my-mern-stack-given-my-current",
        "document": "I am trying to deploy my MERN stack on vercel but I can't get much documentation on what the vercel.config file should contain.\n\nThis is how my Vite (npm create vite@latest) MERN project is structured:\n\nthe backend files are in the root folder, the front end React files in src folder, and the index.html is in the root folder too. I also ran a so I have a dist folder, but it is gitignore (not sure if this is relevant to the deployment).\n\nI have had different variations of vercel.json config file but couldn't get them to deploy the server side in the same project folder. The frontend of the project does show up fine though - I just can't log in / sign up (i.e. make api calls) (they work fine in localhost).\n\nWhat is wrong with my vercel.json file?"
    },
    {
        "link": "https://vercel.com/docs/functions/runtimes/python",
        "document": "Using the Python Runtime with Vercel Functions Learn how to use the Python runtime to compile Python Vercel Functions on Vercel.\n\nThe Python runtime enables you to write Python code, including using Django and Flask, with Vercel Serverless Functions. You can use a specific Python version as well as use a file to install dependencies.\n\nYou can create your first function, available at the route, as follows:\n\nBy default, new projects will use the latest Python version available on Vercel.\n\nYou can specify which of the available Python versions to use by defining in :\n\nVercel Functions support streaming responses when using the Python runtime. This allows you to render parts of the UI as they become ready, letting users interact with your app before the entire page finishes loading.\n\nYou can install dependencies for your Python projects by defining them in or a with corresponding .\n\nFor basic usage of the Python runtime, no configuration is required. Advanced usage of the Python runtime, such as with Flask and Django, requires some configuration.\n\nThe entry point of this runtime is a glob matching source files with one of the following variables defined:\n• that inherits from the class\n\nPython uses the current working directory when a relative file is passed to open().\n\nThe current working directory is the base of your project, not the directory.\n\nFor example, the following directory structure:\n\nWith the above directory structure, your function in can read the contents of in a couple different ways.\n\nYou can use the path relative to the project's base directory.\n\nOr you can use the path relative to the current file's directory.\n\nThe Web Server Gateway Interface (WSGI) is a calling convention for web servers to forward requests to web applications written in Python. You can use WSGI with frameworks such as Flask or Django.\n• Deploy an example with Flask\n• Deploy an example with Django\n\nThe Asynchronous Server Gateway Interface (ASGI) is a calling convention for web servers to forward requests to asynchronous web applications written in Python. You can use ASGI with frameworks such as Sanic.\n\nInstead of defining a , define an variable in your Python file.\n\nFor example, define a file as follows:"
    }
]