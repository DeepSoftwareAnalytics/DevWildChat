[
    {
        "link": "https://ngrok.com/docs/using-ngrok-with/ssh",
        "document": "ngrok's TCP tunnels are perfect for SSH traffic. Simply start a TCP tunnel to port 22 and you should be all set.\n\nWhen connecting through the ngrok TCP address, make sure you specify the port separately."
    },
    {
        "link": "https://ngrok.com/docs/tcp",
        "document": "We could not find what you were looking for.\n\nPlease contact the owner of the site that linked you to the original URL and let them know their link is broken."
    },
    {
        "link": "https://medium.com/@jarifibrahim/how-to-setup-ssh-using-tailscale-or-ngrok-60482cdee983",
        "document": "SSH is a secure protocol used as the primary means of connecting to Linux servers remotely. The remote server can be your computer. For instance, I use SSH to access my office computer.\n\nSetting up SSH is easy, and there are multiple articles on how to set up SSH. This blog post is about how to SSH into a machine that does not have a static public IP; that is, the machine is inside a private network, for example, my laptop at home or my computer inside a WeWork building.\n\nTailscale and Ngrok to the Rescue\n\nTailscale and ngrok are quite similar in what they do. In simple terms, both the services will install a software on your computer, which will help in routing the traffic from your private network into the internet. ngrok allows you to expose specific ports to the internet, while tailscale creates a virtual private network for you. If your goal is to SSH into a machine inside a private network, both of them will do the job.\n\nTailscale is the easiest way of exposing the SSH server. All you have to do is install tailscale by following the instructions here. Once it is set up, you’re ready to connect to the machine.\n\nRun the following command on your host machine (the machine you wish to connect to)\n\nThe output of the command above will show you the IP address tailscale is using. This IP address never changes. Now, to connect to this machine, run the following command on your client machine (the machine you’re using to connect to the host machine)\n\nThat’s it. If your SSH server was set up correctly, you should be able to SSH using the command above. That’s how easy it is to expose your SSH server using tailscale.\n\nngrok is similar to tailscale, but it requires a bit more setup. You can install ngrok by following the instructions mentioned here. Once installed, you will have to start the local process that will redirect the network traffic. Run the following command to expose port 22 (which is the default port for SSH) once you have ngrok installed\n\nThis command will start a local process that will forward any requests ngrok receives on a specific IP:Port to this computer on port 22.\n\nOnce ngrok has started, go to this page https://dashboard.ngrok.com/status/tunnels. It should contain the hostname and the port you’ll need to connect to your computer. Let’s say the status page shows the following\n\nusing this, you can ssh into the host computer as\n\nTip: ngrok has servers in many regions and your connection latency is determined by which server you’re connected to. The closer the server, the faster will be your connection and lower will be the latency. You can find the list of regions here https://ngrok.com/docs#global-locations. My connection latency dropped by 10 times when I used a server located closer to my location. You can set it as\n\nManually running the ngrok binary might not be feasible always so you can create a service for ngrok which would start automatically every time the machine starts.\n\nTo allow ngrok to start automatically every time the computer starts, we’ll create a service for it. A service is a background process that can be configured to start automatically.\n\nCreate a new file in the following path\n\nand add the following to it\n\nThat’s it. ngrok will now automatically start every time your computer starts. You’re all set to use ngrok and SSH into your machine."
    },
    {
        "link": "https://baeldung.com/linux/ngrok-remote-connection",
        "document": "In this tutorial, we’ll learn about the ngrok reverse proxy service in depth. Additionally, we’ll demonstrate the steps for setting up an SSH server using the ngrok command.\n\nngrok is a reverse proxy service that makes it easy for us to tunnel our locally running service to the public network. There are two components to the ngrok service, the ngrok agent and the ngrok edge.\n\nThe idea is that the ngrok edge has a publicly accessible domain and IP address that can receive requests from the public network. Then, to expose a locally running service to the internet, we’ll run the ngrok agent in the same host as our service.\n\nOn start-up, the agent will connect with one of the many globally distributed ngrok edges. Once the connection is established, the ngrok edge will forward all the received requests to the ngrok agent. The ngrok agent in turn forwards the traffic to the designated local process that’s listening to a specific port.\n\nTherefore, by sending the requests to the ngrok edge, we’ll be able to reach the service as the traffic will be forwarded to the ngrok edge, then the agent, and eventually to the service.\n\nOne important appeal of the ngrok service is that it simplifies the process of exposing a local process to an external network’s connection. This is convenient for cases when we want to expose our services to external requests for testing purposes.\n\nTo get started, we’ll need to install the ngrok command on our system. We can head to the ngrok official download page. Then, in the Linux section, we can select the CPU instruction set of our system and press download.\n\nFor example, for a system with x86-64 instruction set, we can download the x86-64’s binary and save it as ngrok-v3-stable-linux-amd64.tgz:\n\nThen, we untar the binary into /usr/local/bin using the tar command:\n\nFinally, we verify that our installation is successful by checking the ngrok‘s version using the –version option:\n\nBefore we can start using the ngrok command for creating tunnels, we’ll need to first obtain the Authtoken. The Authtoken is a way for the ngrok service to authenticate us. We can obtain the Authtoken from an active ngrok account. To register for a new account, head to the ngrok‘s official sign-up page. Then, follow the instructions to register and verify the account.\n\nOnce we’ve activated the account, we can obtain the Authtoken by clicking on Your Authtoken option at the sidebar on the dashboard:\n\nThen, we can add the Authtoken to our ngrok command using the add-authtoken subcommand:\n\nNow, we’re ready to set up some tunnels using the ngrok command.\n\nSecure shell (SSH) is a networking protocol that allows us to remotely access our system. However, setting up SSH to allow remote connection from a public network can be tedious. Particularly, we’ll have to set up a publicly accessible IP on our system. Furthermore, for a system that is behind NAT, we’ll need to do proper port forwarding to make sure the traffic is routed correctly.\n\nWith ngrok, there’s no need to go through the hassles we’ve discussed. Instead, we can create a tunnel that forwards traffic to port 22 using the ngrok command-line interface. Then, we’ll be able to SSH into the system through the ngrok‘s edge IP address. Let’s look at the example.\n\nTo demonstrate the idea, we’ll set up two different hosts that live on different networks. The first host, ssh-server, will run the sshd process to accept SSH connection. Additionally, we’ll ensure that the ssh-server contains a user bob that the SSH client can use to log in to the ssh-server.\n\nOn the other hand, we’ll use the second host, ssh-client, to SSH into the ssh-server. Finally, both servers are connected to the internet to allow the ngrok tunneling to work.\n\nTo begin the demonstration, we’ll first start the sshd process on the ssh-server host. We can start the process using the systemctl start command:\n\nThen, we can check the status of the sshd process using the systemctl status:\n\nThe systemctl status command prints the current status of the service. From the output above, we confirm that the sshd service is currently running as its status is active.\n\nWith the sshd process listening to port 22, we can now create a ngrok tunnel to forward traffic to the sshd process. Specifically, we’ll need to create a TCP endpoint that forwards the incoming traffic to the local port 22:\n\nAfter executing the command, we’ll see an interactive output that displays various information. Importantly, the Forwarding line shows that all the TCP traffic that goes to host 0.tcp.ap.ngrok.io at port 19915 will be forwarded to localhost port 22. In other words, anyone on the public network can send TCP traffic to 0.tcp.ap.ngrok.io:19915, and ngrok will forward the traffic to port 22 of localhost.\n\nTo test out the connection, we can now hop onto the ssh-client host. Then, we can initiate an SSH connection from ssh-client to 0.tcp.ap.ngrok at port 19915 using the ssh command:\n\nFrom the output, we can see that our SSH connection has succeeded as we’ve logged in as the user bob on the ssh-server. Furthermore, we can look back at the server’s ngrok interactive output and see that there’s one open connection:\n\nIn the Connections row, the opn column indicates the number of currently open connections. Since we’ve opened the connection to ssh-server using ssh-client, we can see that it reports the number of open connections as one.\n\nIn this tutorial, we’ve learned about the ngrok reverse proxy service. Specifically, we’ve learned how to install the ngrok command-line interface and set up the authenticating token. Furthermore, we’ve demonstrated a simple SSH setup that uses ngrok to set up a tunnel that forwards public TCP traffic to our local sshd process.\n\nSpecifically, the demonstration shows that with ngrok, it’s convenient to set up a publicly accessible SSH server that would otherwise require tedious network configuration on the SSH server."
    },
    {
        "link": "https://pyngrok.readthedocs.io/en/latest",
        "document": "is a Python wrapper for that manages its own binary, making available via a convenient Python API.\n\nngrok is a reverse proxy tool that opens secure tunnels from public URLs to localhost, perfect for exposing local web servers, building webhook integrations, enabling SSH access, testing chatbots, demoing from your own machine, and more, and its made even more powerful with native Python integration through .\n\nis available on PyPI and can be installed using : That’s it! is now available as a package to our Python projects, and is now available from the command line.\n\nTo open a tunnel, use the method, which returns a , and this returned object has a reference to the public URL generated by in its attribute. The method takes as well, which allows us to pass additional tunnel configurations that are supported by (or the of a tunnel defined in ’s config file), as documented here. v2’s default behavior for when no additional properties are passed is to open two tunnels, one and one . ’s method will return a reference to the tunnel in this case. If only a single tunnel is needed, pass and a reference to the tunnel will be returned. To use ngrok’s Edges with , first configure an Edge on ngrok’s dashboard (with at least one Endpoint mapped to the Edge), and define a labeled tunnel in the ngrok config file that points to the Edge. To start a labeled tunnel in , pass its to . # Open the Edge tunnel that is defind in the config file Once an Edge tunnel is started, it can be managed through ngrok’s dashboard. It can be useful to ask the client what tunnels are currently open. This can be accomplished with the method, which returns a list of objects. All open tunnels will automatically be closed when the Python process terminates, but we can also close them manually with . # The NgrokTunnel returned from methods like connect(), # get_tunnels(), etc. contains the public URL Using we can expose any number of non-HTTP services, for instances databases, game servers, etc. This can be accomplished by using to open a tunnel to the desired service. We can also serve up local directories via ngrok’s built-in fileserver. It is possible to configure the tunnel when it is created, for instance adding authentication, a subdomain, or other additional tunnel configurations that are supported by ngrok. This is accomplished by passing them as to , then they will be used as properties for the tunnel when it is created. Here is an example that opens a tunnel with subdomain , requires basic authentication for requests, and defines a circuit breaker. If we already have a tunnel defined in ngrok’s config file, we can start it by its .\n\nOpening a tunnel will start the process. This process will remain alive, and the tunnels open, until is invoked, or until the Python process terminates. If we are building a short-lived app, for instance a CLI, we may want to block on the process so tunnels stay open until the user intervenes. We can do that by accessing the . # Block until CTRL-C or some other terminating event The contains an variable, usually initialized to http://127.0.0.1:4040, from which we can access the ngrok client API. If some feature we need is not available in this package, the client API is accessible to us via the method. Additionally, the objects expose a variable, which contains the relative path used to manipulate that resource against the client API. This package also gives us access to from the command line, as documented here. When emits logs, can surface them to a callback function. To register this callback, use and pass the function as . Each time a log is processed, this function will be called, passing a as its only parameter. If these events aren’t necessary for our use case, some resources can be freed up by turning them off. Set to in . Alternatively, can be used to stop monitoring on a running process.\n\n’s interactions with the binary can be configured using . The default object can updated with our own object using . Most methods in the module also accept a keyword arg, which can be used to pass in the config rather than updating the default as shown above. The argument is only used when the process is first started, which will be the first time most methods in the module are called. We can check if a process is already or still running by calling its method. If is not already installed at the in , it will be installed the first time most methods in the module are called. If we need to customize the installation of , perhaps specifying a timeout, proxy, use a custom mirror for the download, etc. we can do so by leveraging the module. Keyword arguments in this module are ultimately passed down to , so as long as we use the module ourselves prior to invoking any methods, we can can control how is installed and from where. is compatible with v2 and v3, but by default it will install v3. To install v2 instead, set in . Running with an auth token and/or API key enables additional features available on our account (for instance, the ability to open multiple tunnels concurrently, custom domains, use of ngrok’s Edges), etc. We can obtain our auth token from the ngrok dashboard and install it to ’s config file. # Setting an auth token allows us to open multiple # tunnels at the same time # Setting an API key allows us to use labeled tunnels For a more complete example of using labeled tunnels with the API key, see the section on ngrok’s Edges. We can also override ’s installed auth token or API key using . Lastly, we could instead define or as environment variables, if we don’t want to define them in code. By default, will open a tunnel in the region. To override this, use the parameter in . By default, ngrok will look for its config file in the default location. We can override this behavior by updating our default . The package manages its own binary. We can use our binary if we want by updating the default ."
    },
    {
        "link": "https://ngrok.com/docs/using-ngrok-with/ssh",
        "document": "ngrok's TCP tunnels are perfect for SSH traffic. Simply start a TCP tunnel to port 22 and you should be all set.\n\nWhen connecting through the ngrok TCP address, make sure you specify the port separately."
    },
    {
        "link": "https://security.stackexchange.com/questions/270456/security-of-ssh-with-service-like-ngrok",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://sitepoint.com/use-ngrok-test-local-site",
        "document": "This tutorial demonstrates a way to share your localhost server with anyone, anywhere, using ngrok to create a secure tunnel to your local development server.\n\nDemonstrating your application’s latest features to project managers or clients isn’t easy unless they’re sitting a few desks away. It may be possible to commit the changes and deploy to a public staging server, but that process can be impractical if you’re just seeking an opinion about a widget color or demonstrating the futility of their ridiculous suggestion!\n\nIdeally, you need some way to share access to your server. ngrok provides that solution for sharing your local web server. We’ll show you how to set it up for any purpose, and leave you with the best ngrok alternatives (just in case).\n• Ease of Sharing Localhost with ngrok: We’ll show how ngrok provides a convenient and efficient way to share our localhost server with anyone, anywhere. This is especially useful when we need to demonstrate application features to clients or team members who are not physically nearby.\n• Security and Accessibility Considerations: While ngrok establishes a secure connection tunnel, it’s only as secure as the application we are testing. We’ll discuss considerations.\n• Availability and Alternatives to ngrok: The basic ngrok service is free and sufficient for most of our needs, with options for commercial upgrades, but we’ll outline alternative localhost tunneling services like LocalXpose, localhost.run, localtunnel, JPRQ, and sish.\n\nYour development machine may be connected to a secure network behind a firewall. To work around access restrictions, ngrok runs a small client process on your machine which creates a private connection tunnel to the cloud service. Your development server is mapped to an sub-domain, which a remote user can then access. There’s no need to expose ports, set up forwarding, or make other network changes.\n\nThe ngrok client software is available for Windows, macOS, and Linux.\n\nThe connection tunnel established by ngrok is secure and can only transmit data to the port you have open. It would be difficult to do any damage, but it’s only as secure as the application you’re testing.\n\nIn most cases, you’ll use ngrok to temporarily grant access to someone by issuing them with a randomly generated URL. It’s best to assume that anyone could access your app while the tunnel is open. You may want to disable that “delete all files” option while your tunnel is active!\n\nWhat Does the Service Cost?\n\nThe basic ngrok service is free and permits up to four tunnels and 40 connections per minute. Commercial options start from $5 per month, providing further connections and custom domains.\n\nTo start, open ngrok.com in your browser and click Sign up to register. A Google or GitHub account is easiest, but you can choose standard registration with an email address and password. An email verification link will be sent to you.\n\nAfter login, you’ll be directed to the ngrok dashboard where you can download the client for your operating system.\n\nDownload and extract the file, following any specific instructions for your OS. It’s then necessary to add your authentication token by running the command shown in the Connect your account section a little further down the page.\n\nHow to Use ngrok to Share Access to Your Local Web Server\n\nLaunch your web application using its normal start command, then note the port and whether it’s running on or . To start a new tunnel, run:\n\nFor example, if your site is served on , enter the following into the command line:\n\nThe terminal will clear and show the status with two Forwarding and addresses, such as . You can pass either ngrok URL to another person so they can access your application from anywhere. The terminal shows a log of requests while ngrok is active.\n\nThe ngrok status panel panel at dashboard.ngrok.com/endpoints/status also shows a list of currently active URLs and client IP addresses. (You may need to refresh the browser to update it.)\n\nOnce you’ve finished, quit ngrok by pressing | + in your terminal. Further help and options are available by entering:\n\nngrok is possibly the easiest and most well-known tunneling service, but alternative options include:\n• LocalXpose: a commercial service with free options. Signup is required, but terminal-based and Graphical User Interface clients are available.\n• localhost.run: a free service which works via SSH so no client or signup is necessary.\n• localtunnel: an open-source Node.js client. No signup is necessary.\n• JPRQ: an open-source Python client. No signup is necessary.\n• sish: an open-source, Docker-based container client. No signup is required.\n\nngrok and similar secure tunnel services can revolutionize how you demonstrate web apps to other remote workers. It will help testing and reduce frustrating feedback delays.\n\nNgrok is a cross-platform tool that creates secure tunnels between your local development server and the internet, allowing you to expose locally hosted services to the web. It’s often used for testing and development purposes. Why would I need ngrok? Ngrok is useful when you’re developing web applications or APIs locally and need to share them with others or access them from external devices for testing and debugging. Ngrok establishes a secure tunnel to its servers, and traffic sent to a public URL generated by ngrok is forwarded through the tunnel to a specific port on your local machine. No, ngrok is not open source. The tool has a paid business model, and while there is a free version, the full source code is not available. To install ngrok, you need to download the appropriate binary for your operating system from the ngrok website. Then, you can unzip it and place the binary in a directory included in your system’s PATH. Can I use ngrok in production environments? ngrok is primarily designed for development and testing, it’s not recommended for production use due to potential performance and security considerations. Ngrok uses secure tunnels (HTTPS) to transfer data between your local machine and the internet. However, keep in mind that data passing through ngrok’s servers is decrypted at their end before being sent to your local machine. Can I use ngrok with Docker containers? Yes, you can use ngrok with Docker containers to expose services running within the containers to the internet, similar to exposing local services. Can I use ngrok without installing it locally? Yes, ngrok provides a web-based version called ngrok web interface, which allows you to create tunnels without installing the ngrok binary on your local machine. An ngrok authtoken is a unique token associated with your ngrok account. It’s used to authenticate your usage of ngrok and to access features available to registered users. Can I use ngrok for TCP or UDP tunnels? Yes, ngrok supports creating tunnels for TCP and UDP protocols, in addition to HTTP and HTTPS. This can be useful for exposing services that don’t use the HTTP protocol. Can I specify a custom subdomain with ngrok? Yes, if you have an ngrok account, you can use a custom subdomain by adding it to your ngrok configuration and then using the ngrok http command with the flag. How do I expose a local server using ngrok? After installing ngrok, run the command in your terminal, replacing with the port number your local server is running on. Ngrok will provide a public ngrok URL that points to your local server."
    },
    {
        "link": "https://stackoverflow.com/questions/53908125/how-to-ssh-to-ngrok-self-hosted-server",
        "document": "I follow this page to SELF HOSTED ngrok on my server (ngrok 1.7)\n\n https://www.svenbit.com/2014/09/run-ngrok-on-your-own-server/\n\nATM, I can use the http protocol normally.\n\n However, I want to use the ssh (tcp protocol) as well.\n\n When try with below command\n\n\n\n\n\n The url format is quite differrent from provided ngrok (v2.x).\n\nI think that the ssh is exposed correctly but have no idea how to connect. Can you please show me the exact command to connect?\n\nI try with below command but cannot success"
    },
    {
        "link": "https://docs.uibakery.io/concepts/data-sources/connecting-local-database-via-ngrok",
        "document": "If you need to connect your local database but you don’t want to use the on-premise version, you can go for the option of connecting via ngrok.\n\nIf your database is hosted locally or is not accessible from external connections, we recommend using our on-premise version. You can set it up easily with a single command: Additionally, during the installation process, you will have the option to generate a trial license. Alternatively, if on-premise installation is not an option, you may try setting up an SSH tunnel to your database.\n\nWe highly recommend the ngrok approach for testing purposes only, as ngrok is a third-party proxy that provides only a temporary connection (40-120 minutes depending on your plan), and re-connection is required.\n\nTo connect your local database via ngrok:\n• None Create an account at ngrok if you do not have one.\n• None Unzip the archive (initial instruction can be found here).\n• None Open your Terminal (MacOS/Linux) or command line (Windows) and navigate to the Downloads folder (or the folder where the ngrok archive has been saved). Use the following command:\n• None Next, you need to add your authtoken to the default ngrok.yml configuration file using this command:\n• None If successful, you’ll get the following message:\n• None Now, you can proceed with exposing your local app server or database. Use one of these commands :\n\nThe output will list a forwarding URL, which will point to your local server - find the Forwarding line and copy the host and the port.\n• None Select your data source and specify the copied host and port together with the other database details.\n• None Click Test connection to check whether the connection can be established."
    }
]