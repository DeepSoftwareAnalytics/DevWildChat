[
    {
        "link": "https://devforum.roblox.com/t/minimap-render-gui/1995940",
        "document": "Today I’ve decided to fully release a Minimap Gui & Renderer I created with @RainyLofi quite some time ago.\n\nUsing those tools, you’ll be able to implement a minimap in your game with ease.\n\nI’ve added an ability to split the map into grid, so that the quality of result image(s) is satisfying and Roblox doesn’t scale the images down.\n\nThe most important part of rendering the minimap is placing down two parts representing the minimap’s corners. Renderer will always perform raycasts from the higher part’s height to the lower one’s (meaning you should place one of the parts way above the map’s parts, and the other one - under the map). Make sure that the parts’ have the same orientation and are only rotated in Y axis).\n\nAfter placing the parts, setting their transparency to 1 and anchoring them it is advised to save a local backup of the place and open it.\n\nTo start rendering you should download the renderer and unpack it. You should begin with disabling game’s scripts so they don’t interrupt the rendering process. You may do that using the scripts that are already prepared in .\n\nAfterwards you can import the renderer scripts into Roblox Studio. This can be done fast using Rojo. Enter into the folder using cmd and run , then use the Roblox Studio plugin to insert the scripts.\n\nAfter the scripts and settings are imported, open in studio. In Parts folder you should set the 1’s value to one part and 2’s - to another. Feel free to modify other properties as you wish.\n\nThose are the most relevant ones:\n• Grid - the size of the region (in stud) one image should cover\n• Host - the ip and port of the renderer server\n• LinesPerAssign - how many pixel lines (columns) one client would be assigned at once\n• PPS - rendered pixels per stud\n\n (Final images’ size would be Grid * PPS x Grid * PPS)\n• RenderWater - whether water should be rendered\n• SuperSampling - whether super sampling should be used\n\nTo run the renderer server (which will fetch the pixels’ data from studio and save to image files) installing NodeJS is required. You should cd into , run to install dependencies and then run the script with .\n\nAfter you are done setting up the renderer, make sure to enable HttpRequests and run or run a server with multiple clients (to render the map faster if it’s big).\n\nThe script will automatically determine how many images are necessary and begin rendering one by one. Finished renders will be stored in folder. You may track the progress in console and Roblox Studio.\n\nYou may also stop rendering at any time by stopping the studio. You may start rendering from particular image by modifying script ( variable).\n\nHere’s an example render of the Roblox’s Pirate Island template place on default settings. (Originally those were 25 images, but had to make it into one due to Discourse’s image positioning).\n\nYou may now upload all the images to Roblox."
    },
    {
        "link": "https://devforum.roblox.com/t/creating-a-minimap/667504",
        "document": "The only methods that exist as of now are:\n• Rendering an image of the full map & moving it around using SliceCenter\n• Using ViewportFrames to create a dynamic map, for which I recommend using a simple map & only including objects inside the view. It’s also not meant for big maps.\n\nSadly the easy options aren’t as performant as the time-consuming ones. It’s a tradeoff you have to choose. If you have any questions about the methods, feel free to ask."
    },
    {
        "link": "https://devforum.roblox.com/t/minimap-render-rorenderv3/965827",
        "document": "The latest version of this tool has just been released, marking a significant upgrade in minimap customization capabilities. Key features include a Photoshop-like editor, support for textured meshes, and a streamlined user experience powered by cloud services, eliminating the need to run a separate program locally, as was the case with RoRender V1-3. RoRender V3 will serve as the free companion to the RoRender suite of tools.\n\nRo-Render is a tool designed to create a top-down orthographic projection of your maps. The primary use case for this tool is to create minimaps in game. This is the third iteration (technically fourth, since the original idea was built by @Widgeon) of this tool and it may be useful to look through old posts and documentations to understand how it works (do note that a lot of what you read in the old posts will no longer apply to V3, only some of it will). It is based on a tool originally created by @Widgeon and then modified for ease of use. The modified version is what is known as “RoRender” (V1 and V2).\n\nHuge shoutout to @StrategicPlayZ for pushing Ro-Render to V3, this was a major undertaking the result of which is massive performance gains and an overall cleaner user experience.\n\nV3 is a completely new version of this tool which matches little to nothing with V2. The main changes in this version are:\n• Much faster than V2.\n• According to a few quick tests I have done it is about 45 times faster than V2 on my machine. Proper benchmarks are not yet ready, but the speed-up is very significant and can be easily noticed by anyone who has used the V2 before.\n• This version uses Parallel Luau V1, which was released by Roblox in June 2022. This makes the rendering much faster than V2 since all cores of your system are utilized to the maximum (the renderer now takes 85% - 100% of the CPU).\n• In this version the data to be sent in each Http request is 65535 pixels (this is not a special number, just a normal number we chose, you shouldn’t change it though). Each actor also computes this same amount of pixels. This results in data being computed and sent much faster.\n• No map size limits. You do not need to split large maps into pieces anymore.\n• Simpler plugin. All settings are configured in a ModuleScript, this makes it very flexible as you can add your own code (if you wish) within the module to customize settings such as RaycastParams. It also reduces the amount of maintenance/bug-fixing we have to do in the plugin.\n• No need to open extra Studio windows. You do not need to open multiple Studio windows to utilize multiple cores anymore, as that is done automatically by Parallel Luau.\n• The ability to save and store rendering configurations. Since all the settings are contained inside a single ModuleScript, it is now possible to simply save the settings to your computer as a file and load them up later if you wish. (Right click → Save to file).\n\nHow to use:\n\nFirstly, it is highly recommended that you do the render in a local copy of your game as this will enable you to delete transparent and translucent parts (along with a few other adjustments you may want to make for the minimap) without affecting the main game.\n• Make sure you have the plugin installed and the appropriate version of the Ro-Render Application (.dmg for Mac, .exe for Windows). We are aware of the large size of the application and have a few ideas which may be included in a future update. You will likely get a warning when you download and run the file, this is not because it is a virus, rather this is because it is an unsigned program, so you can simply ignore the warning. If you are super paranoid then you can check out the source code linked above and compile it yourself (follow the instructions on the link).\n• We recommend creating a local copy of your game (no need to republish the game to a new place, just save it into a file).\n• It is recommended to delete all transparent and translucent parts in the (copy) game (as transparent parts slow down the render while translucent parts are rendered as opaque).\n• Also delete all the scripts in your (copy) game so that they do not possibly interfere with the rendering.\n• If you have any large meshes or unions in the (copy) game which will take up a good portion of the render, you should set their CollisionFidelity to “Default”. Also color them with a color that matches with the texture the most (if any), since this plugin cannot render texture.\n• Enable Http requests by running the following code in the command bar at the bottom:\n• The rendering will take a lot of your CPU usage, so make sure your CPU’s cooling system is working properly.\n\nNow you’re all set for rendering your map.\n\nAdding the Ro-Render V3 settings into your game:\n• Open the place or game you want to render, and then open the Ro-Render V3 plugin.\n• Now, click on “Create Settings” button. This will insert the default Ro-Render V3 settings into your game which you can modify.\n\nMake sure to always load the settings in the plugin before messing with the draggers (the purple box and everything else inside the Draggers folder). You can edit the ModuleScript without loading the settings though, but when you want to move or resize the purple box, you should load the settings in the plugin first.\n• Click on the “Load Settings” button, this will load the settings which you have currently selected in explorer.\n\nNow that you have inserted and loaded the default settings, it is time to modify them according to the map and your own liking.\n\nThe purple box which you see is what specifies the area which you want the plugin to render. The bottom of the purple box should extend till a bit lower than the lowest point of the map’s surface which you want to render (auto configure may violate this, but do not follow auto configure, rather follow what is mentioned here). The top of the purple box should extend till a bit higher than the highest point of the map which you want to include in the render.\n\nYou can resize the purple box by moving the two spheres located at opposite corners of the purple box. In order to move or rotate the purple box, deselect everything, then select the settings ModuleScript (not the purple box) and then use Roblox’s move and rotate tools to move and rotate the purple box as you like. Make sure not to rotate an individual corner, select both of them before moving or rotating.\n\nWhich part of the purple box will show up at the top of the rendered image? You can find this out by selecting one of the corners, then right click and press “show orientation indicator”. This will show you where the front and the top of the purple box is facing. The front of the purple box will be rendered at the top of the image.\n\nAll other settings are located inside the ModuleScript and you can configure them from there. The explanation for each of the settings are also present inside the ModuleScript in the form of comments.\n\nNow that all the settings have been configured, you may now close the plugin and start the rendering.\n\n Make sure to recheck that the Ro-Render Application is running and that the “Start Server” button has been pressed.\n\nIt is recommended to open the task manager (on Windows) and activity monitor (on Mac) to monitor CPU and memory usage while rendering.\n\nWhile rendering Studio may become unresponsive. Do not click on anything in the Studio window while it is unresponsive.\n\nThe rendering will take a lot of your CPU usage. If your PC starts to overheat, you can pause the render by setting the “PauseRender” attribute of the “Actors” folder. You can only set this while Studio is responsive, this happens every few seconds when the script temporarily pauses the rendering (to send the pixel data computed so far), so just wait until Studio is responsive then quickly set the “PauseRender” attribute of the “Actors” folder. (This attribute has not been very thoroughly tested so if bugs arise please report them here.)\n\nNow, click the small arrow under the “Play” button in Studio, then press “Run”. This will run the game but will not load any players in, this is important because if you press the Play button your character will be rendered in the map as well (which is not good).\n\nOnce the rendering is complete, press the “Download Image” button in the Ro-Render Application to save the render as a .png image.\n\nA major caveat of this plugin is that it cannot render texture. If your map uses a lot of textures especially on large meshes/unions/parts, then those textures will not show up in the final render, only the color of the part will show. You can attempt to fix this by coloring the part to a color that matches the most with the texture, or manually make a rough outline of the main features of the texture via parts and color them accordingly (tedious, I know).\n\nThis limitation is not from this plugin, rather it is from Roblox itself (there is no way to get what color of the texture is displayed on a specific point of a part, we can only find the color of the entire part or the color of the terrain’s materials set in the properties of Terrain)."
    },
    {
        "link": "https://devforum.roblox.com/t/how-do-i-make-a-procedural-minimap/2480337",
        "document": "i have a game that’s procedurally generated and i have no idea how to make a minimap for that game in the top right corner of a players gui that displays a top down of the procedural world\n\nthe world is made out of terrain and meshes\n\nthe only thing i can think about is to make a bunch of frames in a grid and update them to the corresponding color each frame but that wouldn’t be flexible to each players resolution and not efficient either"
    },
    {
        "link": "https://devforum.roblox.com/t/help-with-minimap/2564371",
        "document": "Going forwards it looks fine,\n\n Every other direction is broken. I’m using a viewport frame that clones the map.\n\nIt sounds like you’re trying to create a minimap using a viewport frame, but the rotation is not working correctly. Your code snippet suggests that you’re trying to adjust the to look at a specific position while considering the orientation of the root object. However, it seems there might be an issue with how you’re calculating the rotation.\n\nIf your goal is to create a top-down minimap that follows the player’s root orientation, you can adjust the rotation using the player’s orientation in the X-Z plane (yaw). Here’s how you might modify your code:\n\nIn this code, I’ve assumed that you want to capture the rotation around the Y-axis (yaw) of the player’s root part and apply it to the minimap camera. The part handles this rotation.\n\nMake sure that the root part of the player’s character is correctly named “HumanoidRootPart,” and ensure that the player’s character is loaded and present in the game before using it.\n\nKeep in mind that this code snippet only addresses the rotation issue you mentioned. You might need to adjust other aspects of your minimap code to ensure it functions correctly and follows the player’s movement and orientation accurately."
    },
    {
        "link": "https://devforum.roblox.com/t/how-to-show-other-players-on-minimap/2249655",
        "document": "There is a GUI for displaying mini-maps\n\n I have to put the models in the workspace into MapObjects\n\n But I don’t know how to add a new player to MapObjects. How should I display it?"
    },
    {
        "link": "https://devforum.roblox.com/t/how-would-i-position-the-minimap-image-according-to-where-the-character-is/978879",
        "document": "You have to translate the X and Z coordinates of your position to scale, so this generally takes a little bit of time because you need some conversion factors.\n\nFirst, you need an origin to start from (this doesn’t have to necessarily be a place on the frame but it’s way better if you use a place on the map that is on the render)\n\nUse a while loop or RunService loop to constantly print out your root part’s position, and locate a spot on the render you want to use as your origin.\n\nThen hop into play solo and go as close as possible to the origin position that you selected on the render, and then record the position (using notes or something). To get your X conversion factor, pick two positions on the render (UDim2s, you should be using scale only) from left to right (or up and down depending how your map is orientated), and record them. (To check this, walk left to right / up and down and the one with only the X value changing a lot is the right direction) Then hop into play solo, go to both of those positions, and record the Vector3’s for each one. To finally calculate your X conversion factor (scale / studs), do (UDimPos2.X.Scale - UdimPos2.X.Scale) / (Pos2.X - Pos1.X). You can switch the order that you subtract in but make sure the order of both is going in the same direction (ex. If UdimPos1 → UdimPos2 is going right, then the order you subtract the Vectors in should also be going to the right.)\n\nIf your minimap image is a perfect square luckily you will not have to calculate the conversion for the other axis (should be Z or X depending in what you did first). If it isn’t repeat the same steps but for the Z axis.\n\nAfter this, you’re almost done. All you need to do now is put the conversion factors in a script, and move the position of the minimap relative to the origin with conversion factors.\n\nIn the Heartbeat loop you may find yourself needing to switch the addition in the final line to subtraction but you get the jist."
    },
    {
        "link": "https://devforum.roblox.com/t/getting-players-position-from-local-script/995749",
        "document": "I think you forgot to include the property of the local player.\n\nIf the player’s character has loaded, will point to the player’s character model in the workspace.\n\nAlso @CanterCrow be aware that if the player has not spawned in yet, their property will just be nil, so it would be a good idea to do some check before trying to access the character’s HumannoidRootPart."
    },
    {
        "link": "https://devforum.roblox.com/t/minimap-scripting-help/426063",
        "document": "Have you checked what the values positionx and positiony result in?\n\nI would try and systematically print the values to see if anything is freaking out."
    },
    {
        "link": "https://create.roblox.com/docs/reference/engine/classes/Player",
        "document": "The AccountAge is a Player property that describes how long ago a player's account was registered in days. It is set using the Player:SetAccountAge() function, which cannot be accessed by scripts. This property is useful for conditionally showing new Roblox players content such as tutorials. -- This function marks a part with text using a BillboardGui The AutoJumpEnabled property determines whether the Player.Character of a Player using a mobile device will automatically jump when they hit an obstacle. This can make levels more navigable while on a mobile device. When the player joins the game, the StarterPlayer.AutoJumpEnabled value determines the initial state of this property. Then, this property determines the value of the Humanoid.AutoJumpEnabled property of the Player.Character on spawn. In other words, it is possible to set the auto-jump behavior on a per-character, per-player and per-game basis using these three properties. -- Reflect the property in the player's character, if they have one The CameraMaxZoomDistance Player property sets the maximum distance in studs the camera can be from the character with the default cameras. In other words, it controls the maximum distance the player's camera is allowed to zoom out. The default value of this property is set by StarterPlayer.CameraMaxZoomDistance. If this value is set to a lower value than Player.CameraMinZoomDistance, it will be increased to CameraMinZoomDistance. The CameraMinZoonDistance Player property sets the minimum distance in studs the camera can be from the character with the default cameras. In other words, it controls the minimum distance the player's camera is allowed to zoom in. The default value of this property is set by StarterPlayer.CameraMinZoomDistance. If this value is set to a higher value than Player.CameraMaxZoomDistance it will be decreased to CameraMaxZoomDistance. The CameraMode property sets the player's camera mode, defaulting to third person. In the default third person mode (Enum.CameraMode.Classic), the character can be seen in the camera. While in this mode, the default behavior is:\n• None Players can right-click and drag (mouse), tap and drag (mobile), use the secondary thumbstick (gamepad), or press the left/right arrows (keyboard) to rotate the camera around their character.\n• None When a player moves their character, it faces in the corresponding movement direction.\n• None Players can zoom in and out freely, even to first person on full zoom in. In first person mode (Enum.CameraMode.LockFirstPerson), the player's camera is zoomed all the way in. Unless there is a visible GUI present with the GuiButton.Modal property set to true, moving the mouse, tap-dragging on mobile, or using the secondary thumbstick on a gamepad will rotate the camera around the character. The CanLoadCharacterAppearance Player property determines whether the character's appearance will be loaded when the player spawns. The default value of this property is set by StarterPlayer.LoadPlayerAppearance. If true, the character will load the appearance of the player corresponding to the player's Player.CharacterAppearanceId. If false, the player will spawn with a default appearance - a grey character model without any hats, shirts, pants, etc. Attempting to set the property after the character has spawned will not change the character, you must call Player:LoadCharacter() to load the new appearance. The Character property contains a reference to a Model containing a Humanoid, body parts, scripts, and other objects required for simulating the player's avatar in-experience. The model is parented to the Workspace but it may be moved. It is automatically loaded when Players.CharacterAutoLoads is true and it can be manually loaded otherwise using Player:LoadCharacter(). Initially this property is nil and it is set when the player's character first spawns. Use the Player.CharacterAdded event to detect when a player's character properly loads, and the Player.CharacterRemoving event to detect when the character is about to despawn. Avoid using Object:GetPropertyChangedSignal() on this property. Note that LocalScripts that are cloned from StarterGui or StarterPack into a player's PlayerGui or Backpack respectively are often run before the old character model is replaced, so Player.Character may refer to the old model whose Parent property is nil. Therefore, in a LocalScript under StarterGui or StarterPack, it is advisable to make sure the parent of Character is not nil before using it, for example: This property determines the user ID of the account whose character appearance is used for a player's character. By default, this property is the Player.UserId, which uses the player's avatar as they have created it on the Roblox website. Changing this property to the user ID of another account will cause the player to spawn with that account's appearance (hats, shirt, pants, etc). Games can also toggle whether or not a player's character appearance is loaded in game by changing the StarterPlayer.LoadCharacterAppearance property. -- Number failed to parse, maybe they typed a username instead -- This call can fail sometimes! -- We couldn't get an ID from their input Defines how the default camera scripts handle objects between the camera and the camera subject. Set by StarterPlayer.DevCameraOcclusionMode and can't be changed for individual players. The default value is Zoom (0). See Enum.DevCameraOcclusionMode for a list of available modes. The DevComputerCameraMode property determines the manner in which a player moves their camera when using a device with a mouse and keyboard. See Enum.DevComputerCameraMovementMode for a description of each camera control mode available. This property cannot be set using a LocalScript (it must be set on the server using a Script). The default value of this property is determined by StarterPlayer.DevComputerCameraMovementMode. The word \"Computer\" in this property name refers to non-TouchEnabled, non-GamepadEnabled devices. When set to UserChoice, a player can choose between any control mode (except Scriptable) in the Roblox game settings. In general, it's a good idea to allow players to choose their control mode to maximize accessibility. It's possible to create a custom control scheme by setting this property to Scriptable. This property doesn't affect players using a touch enabled device. See Player.DevTouchCameraMode instead. -- Set the player's camera movement mode on computers to classic The DevComputerMovementMode property determines the manner in which a player moves their character when using a device with a mouse and keyboard. See Enum.DevComputerMovementMode for a description of each movement control mode available. This property cannot be set using a LocalScript (it must be set on the server using a Script). The default value of this property is determined by StarterPlayer.DevComputerMovementMode. The word \"Computer\" in this property name refers to non-TouchEnabled devices. When set to UserChoice, a player can choose between any control mode (except Scriptable) in the Roblox game settings. In general, it is a good idea to allow players to choose their control mode to maximize accessibility. It's possible to create a custom control scheme by setting this property to Scriptable. This property doesn't affect players using a touch-enabled device. See Player.DevTouchMovementMode instead. -- Set the player's movement mode on desktop devices to click-to-move -- Once set, the player can right click in the game world and the character will move there. This property determines if a player is able to toggle Mouse lock by pressing Shift. A player can disable the mouse lock switch in Roblox's game settings. By default, this property is set to the value of StarterPlayer.EnableMouseLockOption. This can be set server-side during run-time by using a Script. It can not be set client-side. When mouse lock is enabled, the player's cursor is locked to the center of the screen. Moving the mouse will orbit the camera around the player's character, and the character will face the same direction as the camera. It also offsets the camera view just over the right shoulder of the player's character. Note that shift-lock related APIs are in the process of being deprecated, so it's recommended to use UserInputService.MouseBehavior instead to lock the mouse. \"Mouse lock is not available\" The DevTouchCameraMode property determines the manner in which a player moves their camera when using a TouchEnabled device. See Enum.DevTouchCameraMovementMode for a description of each camera control mode available. This property cannot be set using a LocalScript (it must be set on the server using a Script). The default value of this property is determined by StarterPlayer.DevTouchCameraMovementMode. When set to UserChoice, a player can choose between any control mode (except Scriptable) in the Roblox game settings. In general, it is a good idea to allow players to choose their control mode to maximize accessibility. It's possible to create a custom control scheme by setting this property to Scriptable. This property doesn't affect players who aren't using a touch-enabled device. See Player.DevComputerCameraMovementMode instead. -- Set the player's camera movement mode on mobile devices to classic The DevTouchMovementMode property determines the manner in which a player moves their character when using a TouchEnabled device. See Enum.DevTouchMovementMode for a description of each movement control mode available. This property cannot be set using a LocalScript (it must be set on the server using a Script). The default value of this property is determined by StarterPlayer.DevTouchMovementMode. When set to UserChoice, a player can choose between any control mode (except Scriptable) in the Roblox game settings. In general, it's a good idea to allow players to choose their control mode to maximize accessibility. It's possible to create a custom control scheme by setting this property to Scriptable. This property doesn't affect players who aren't using a touch-enabled device. See Player.DevComputerMovementMode instead. -- Set the player's movement mode on mobile devices to a dynamic thumbstick The DisplayName is a Player property that contains the display name of the authenticated user associated with the Player object. Unlike usernames, display names are non-unique names a player displays to others. If the Roblox user has not chosen one, the property will read the same as the Name property.\n• None (which is static) or (which is the current Username) instead. Since display names are non-unique, it's possible for two players in a single instance to have identical names. If you need a globally unique identifier for a player, use(which is static) or(which is the current Username) instead.\n• None or by the Roblox engine will have their property assigned to the property. Characters generated withor by the Roblox engine will have theirproperty assigned to theproperty.\n• None for more information on how to work with strings with unicode characters. Display names may have unicode characters in the string. Seefor more information on how to work with strings with unicode characters. The FollowUserId is a Player property that contains the Player.UserId of the user that a player followed into the game. If the player did not follow anyone into the game, this property will be 0. This property is useful for alerting players who have been followed by another player into the game. You can get the name of the player followed using this user ID and the Players:GetNameFromUserIdAsync() function. \"You were followed to this game by \" The GameplayPaused property indicates if the player is currently in a pause state in a place with StreamingEnabled activated. It is set on the client but replicated to the server. To determine the pause status, you can utilize this property.\n• None which controls whether content streaming is enabled which controls whether content streaming is enabled\n• None and for more details on when gameplay is paused. andfor more details on when gameplay is paused. The HasVerifiedBadge Player property indicates if the player has a Verified Badge. The HealthDisplayDistance Player property sets the distance in studs at which this player will see other Humanoid health bars. If set to 0, the health bars will not be displayed. This property is set to StarterPlayer.HealthDisplayDistance by default. If a Humanoid's health bar is visible, you can set the display type using Humanoid.DisplayDistanceType. The LocaleId Player property shows the locale id that the local player has set for their Roblox account. It holds a string with the two letter code (for example, \"en-us\") for the locale. This can be used to determine the geographic demographic of your game's player base, and is also the locale that will be used for automatic localization (see GuiBase2d.AutoLocalize) of in-experience content. This property allows access to the player's locale from the server. See also LocalizationService.RobloxLocaleId, the locale ID used for localizing internal content. This will be a different value when Roblox does not yet internally support the local player's set locale. This property can only be read from to determine membership (it cannot be set to another membership type). It holds a Enum.MembershipType enum of the account's membership type. -- Take some action specifically for Premium members The NameDisplayDistance StarterPlayer property sets the distance in studs at which this player will see other Humanoid names. If the property is set to 0, names are hidden. This property is set to StarterPlayer.NameDisplayDistance by default. If a Humanoid's health bar is visible, you can set the display type using Humanoid.DisplayDistanceType. The Neutral property determines whether the player is on a specific team.\n• None property will be nil and the will be white. When true, the player is not on a specific team. This also means that theproperty will be nil and thewill be white.\n• None property will correspond to the that the player is on, as will the . When false, the player is on a specific team. Theproperty will correspond to thethat the player is on, as will the The ReplicationFocus Player property sets the part to focus replication around a Player. Different Roblox systems that communicate over the network (such as physics, streaming, etc) replicate at different rates depending on how close objects are to the replication focus. When this property is nil, it reverts to its default behavior which is to treat the local player's character's PrimaryPart as the replication focus. This property should only be set on the server with a Script, not a LocalScript. Note that this property does not change or update network ownership of parts. If set, the player will respawn at the given SpawnLocation. This property can only be set through Lua and must contain a reference to a valid SpawnLocation, which must meet the following criteria:\n• None is set to the or is set to true is set to theoris set to true If RespawnLocation is not set to a valid SpawnLocation then the default spawning logic will apply. For more information on this see the page for SpawnLocation.\n• None will spawn from belonging to their team. In some cases it may be simpler to change the player's instead. will spawn frombelonging to their team. In some cases it may be simpler to change the player'sinstead.\n• None to manually move the . Implement your own custom spawn logic usingto manually move the -- listen for the spawn being touched -- look through the workspace for spawns The Team property is a reference to a Team object within the Teams service. It determines the team the player is on; if the Player isn't on a team or has an invalid Player.TeamColor, this property is nil. When this property is set, the player has joined the Team and the Team.PlayerAdded event fires on the associated team. Similarly, Team.PlayerRemoved fires when the property is unset from a certain Team. -- Respawn the player (moves them to spawn location) -- When someone dies, put them on the spectator team -- First, check for the exact name of a team -- Let's check for case-insensitive partial matches, like \"red\" for \"Red Robins\" -- If we get to this point, no team matched the one we were looking for :( -- Note: string.sub(message, ...) is the same as message:sub(...) -- Cut out the \"xyz\" from \"/jointeam xyz\" -- Tell the player that team could not be found :( The TeamColor property determines which team a Player is associated with according to that Team's Team.TeamColor. Changing this property will change Player.Team according to whichever team has the same BrickColor for their Team.TeamColor. If no Team object has the associated TeamColor, the player will not be associated with a team. It's often a better idea to set Player.Team to the respective Team instead of using this property. Setting this property often leads to repetition of the same BrickColor value for a certain team across many scripts; this is something you want to avoid when adhering to the \"Don't Repeat Yourself\" (DRY) principle. -- Respawn the player (moves them to spawn location) -- When someone dies, put them on the spectator team The UserId is a Player property that contains a read-only integer that uniquely and consistently identifies every user account on Roblox. Unlike the Instance.Name of a Player, which may change according the user's present username, this value will never change for the same account. This property is essential when saving/loading player data using GlobalDataStores. Use a player's UserId as the data store key so that each player has a unique key. \"Player with userId 1 is in this server! Their name is: \" \"Player with userId 1 is not in this server!\" -- can use game.CreatorId for published places -- if new player is the owner, set ownerInGame to true and give everyone the badge -- if the owner is in the game, award the badge\n\nThe ClearCharacterAppearance function removes all Accessory, Shirt, Pants, CharacterMesh, and BodyColors from the given player's Player.Character. In addition, it also removes the T-Shirt Decal on the player's torso. The character's body part colors and face will remain unchanged. This method does nothing if the player does not have a Character. It does not remove t-shirts, head meshes, or faces. \n\n The DistanceFromCharacter Player function returns the distance between the character's head and the given Vector3 point. It returns 0 if the player has no Player.Character. This is useful when determining the distance between a player and another object or location in game. If you would like to determine the distance between two non-player instances or positions, you can use the following: The location from which player's distance to is being measured. \n\n The distance in studs between the player and the location. Measuring the Distance Between a Player and a Position Returns a dictionary containing information describing how the Player joins the experience. The dictionary contains any of the following fields: of the experience the teleported from. Only present if the player teleports to the current experience and if a server calls the teleport function. Theof the experience theteleported from. Only present if the player teleports to the current experience and if a server calls the teleport function. of the place the teleported from. Only present if the player teleports to the current place and a server calls the teleport function. Theof the place theteleported from. Only present if the player teleports to the current place and a server calls the teleport function. of the player who invited the current player to the experience. Use this data to identify the referrer and trigger reward logic. Theof the player who invited the current player to the experience. Use this data to identify the referrer and trigger reward logic. numbers of the users teleported alongside the . Only present if the player teleported as part of a group. An array containing thenumbers of the users teleported alongside the. Only present if the player teleported as part of a group. Reflects the specified in the original teleport. Useful for sharing information between servers the player teleports to. Only present if was specified and a server calls the teleport function. . A plain or JSON encoded string that contains launch data specified in a URL or A dictionary that includes relevant information based on the context of the game join. It contains the following keys: If a server initiates the Player's teleport, the dictionary that this method returns includes the player's teleport data. The Player:GetJoinData() method can only be used to fetch teleport data on the server. To fetch the data on the client, use TeleportService:GetLocalPlayerTeleportData(). Unlike TeleportService:GetLocalPlayerTeleportData(), Player:GetJoinData() only provides teleport data that meets the following security criteria:\n• None It's guaranteed to have been sent by a Roblox server in the past 48 hours.\n• None . It's guaranteed to have been sent with this\n• None The and are guaranteed to be the place and universe the data was sent from. This means you can verify the teleport data came from an approved place. As this data is transmitted by the client, it can still potentially be abused by an exploiter. Sensitive data such as player currency should be transmitted via a secure solution like Memory Stores. \n\n A dictionary containing PlaceId and UserId values (see table in description). -- check if the provided source is valid -- update the data store to track the source popularity -- this is probably due to the user messing with the URL -- verify this data was sent by an approved place The GetMouse Player function returns the Mouse being used by the client. The player's mouse instance can be used to track user mouse input including left and right mouse button clicks and movement and location. The UserInputService service provides additional functions and events to track user input - especially for devices that do not use a mouse.\n• None be used in a to work as expected online. This itembe used in ato work as expected online.\n• None Following an update in July 2014, the mouse's icon can now be set with this method. \n\n GetNetworkPing returns the isolated network latency of the Player in seconds. \"Ping\" is a measurement of the time taken for data to be sent from the client to the server, then back again. It doesn't involve data deserialization or processing. For client-side LocalScripts, this function can only be called on the Players.LocalPlayer. This function is useful in identifying and debugging issues that occur in high network latency scenarios. It's also useful for masking latency, such as adjusting the speed of throwing animations for projectiles. \n\n The HasAppearanceLoaded Player function returns whether or not the appearance of the player's Player.Character has loaded. A player's appearance includes items such as the player's Shirt, Pants, and Accessories. This is useful when determining whether a player's appearance has loaded after they first join the game, which can be tracked using the Players.PlayerAdded event. \n\n A boolean indicating whether or not the appearance of the player's character has loaded. Returns a boolean value indicating that player's verification status. When true, the player is verified. Verification includes, but isn't limited to, non-VOIP phone number or government ID verification. When implementing IsVerified, exercise caution to ensure that the implementation does not inadvertently block all unverified users. Note that the method can only be called on the backend server. Calling it client-side results in an error. Additionally, this method will always return false in Studio. \n\n A boolean indicating whether the player is verified. The Kick() method allows an experience to gracefully disconnect a client and optionally provide a message to the disconnected user. This is useful for moderating abusive users. You should only allow specific users whom you trust to trigger this method on other users. Calling this method on a Player with no arguments disconnects the user from the server and provides a default notice message. Calling this method on a Player along with a string as the first argument replaces the default message with the provided string. When using this method from a LocalScript, only the local user's client can be kicked. The message to show the user upon kicking. \n\n The Move Player function causes the player's character to walk in the given direction until stopped, or interrupted by the player (by using their controls). This is useful when scripting NPC Humanoids that move around a map - but are not controlled by an actual player's input. Note that the function's second argument indicates whether the provided Vector3 should move the player relative to world coordinates (false) or the player's Camera (true). The Vector3 direction that the player should move. A boolean indicating whether the player should move relative to the player's camera. \n\n Moving the Player relative to their Camera -- Wait for the player's character and humanoid, which must exist before calling :Move() -- The player will move until they are 50 studs away from the camera's position at the time of running The SetAccountAge function sets the Player.AccountAge of the player in days. It is used to set the Player property that describes how long ago a player's account was registered in days. This does not set the age of the player on the account, but the age of the account itself relative to when it was first created. The age of the account in days. \n\n -- This function marks a part with text using a BillboardGui This method sets whether or not the player sees chat filtered by TextService:FilterStringAsync() rather than normal chats. Regardless of whether a player has filtered chat enabled, all chat should be filtered by TextService when broadcast to other players or on the player's own screen. TextService:FilterStringAsync() returns a TextFilterResult object that can be filtered differently according to the message's intended use. A boolean indicating whether or not the player sees filtered chat. \n\n This function returns a dictionary array of online friends, limited by the maxFriends value. The function uses a 30 second cache. In the returned array, some fields are only present for certain location types. For example, PlaceId won't be present when LocationType is 0 (Mobile Website). The username of the friend. When the friend was last online. If the friend is currently online. The name of the friend's current location. The place ID of the friend's last location. The of the friend's last location. The location type of the friend's last location: The maximum number of online friends to return. \n\n A dictionary of online friends (see the table above). The GetRankInGroup Player function returns the player's rank in the group as an integer between 0 and 255, where 0 is a non-member and 255 is the group's owner. Using this in a Script, as opposed to a LocalScript, will not get you the most up-to-date information. If a player leaves a group while they are in the game, GetRankInGroup will still think they're in that group until they leave. However, this does not happen when used with a LocalScript. This is because the method caches results, so multiple calls of GetRankInGroup on the same player with the same group ID will yield the same result as when the method was first called with the given group ID. The caching behavior is on a per-peer basis: a server does not share the same cache as a client. The groupId of the specified group. \n\n The player's rank in the group. How to Check a Player's Rank in a Group \"Player is the owner of the group, 'LOL'!\" \"Player is NOT the owner of the group, 'LOL'!\" The GetRoleInGroup Player function returns the player's role in the group as a string, or Guest if the player isn't part of the group. Using this in a Script, as opposed to a LocalScript, will not get you the most up-to-date information. If a player leaves a group while they are in the game, GetRoleInGroup will still think they're in that group until they leave. However, this does not happen when used with a LocalScript. This is because the method caches results, so multiple calls of GetRoleInGroup on the same player with the same group ID will yield the same result as when the method was first called with the given group ID. The caching behavior is on a per-peer basis: a server does not share the same cache as a client. The groupId of the specified group. \n\n The player's role in the specified group, or Guest if the player is not a member. How to Check a Player's Role in a Group This function sends a request to the Roblox website asking whether a player is a friend of another user, given the Player.UserId of that user. This function caches results so multiple calls of the function on the same player with the same Player.UserId may not yield the most up-to-date result. This does not happen when used in a LocalScript. The Player.UserId of the specified player. \n\n A boolean indicating whether a player is a friend of the specified user. How to Check if a Player is a Friend The IsInGroup Player function sends a request to the Roblox website asking whether a player is a member of a group, given the ID of that group. Using this in a Script, as opposed to a LocalScript, will not get you the most up-to-date information. If a player leaves a group while they are in the game, IsInGroup will still think they're in that group until they leave. However, this does not happen when used with a LocalScript. This is because the method caches results, so multiple calls of IsInGroup on the same player with the same group ID will yield the same result as when the method was first called with the given group ID. The caching behavior is on a per-peer basis: a server does not share the same cache as a client. The groupId of the specified group. \n\n A boolean indicating whether the player is in the specified group. How to Check if a Player is in a Group \"Player is in the Roblox Fan club!\" The LoadCharacter Player function creates a new character for the player, removing the old one. It also clears the player's Backpack and PlayerGui. This is useful in cases where you want to reload the character without killing the player, such as when you want to load a new character appearance after changing the player's Player.CharacterAppearance. Note: The function is similar to Player:LoadCharacterBlocking(), but the request is processed asynchronously instead of synchronously. This means other tasks will be able to continue while the character is being loaded, including the rendering of the game and any other tasks. Also, this function can be used in a script, while LoadCharacterBlocking cannot. After calling LoadCharacter for an individual player, it is not recommended to call it again for the same player until after that player's Player.CharacterAppearanceLoaded event has fired. Calling the Player:LoadCharacter() with an R15 Avatar fires events in the following order (Note: R6 ordering is different):\n• None Player.Changed fires with a value of \"Character\"\n• None The Character rig builds, and the Character scales \n\n This function spawns an avatar so it has everything equipped in the passed in HumanoidDescription. After calling LoadCharacterWithHumanoidDescription for an individual player, it is not recommended to call the function again for the same player until after that player's Player.CharacterAppearanceLoaded event has fired.\n• None , an article which explains the humanoid description system in greater detail and provides several scripting examples , an article which explains the humanoid description system in greater detail and provides several scripting examples , an article which explains the humanoid description system in greater detail and provides several scripting examples A HumanoidDescription containing traits like body parts/colors, body scaling, accessories, clothing, and animations that will be equipped to the loaded character. \n\n For experiences where instance streaming is enabled, requests that the server stream to the player regions (parts and terrain) around the specified X, Y, Z location in the 3D world. It is useful if the experience knows that the player's CFrame will be set to the specified location in the near future. Without providing the location with this call, the player may not have streamed in content for the destination, resulting in a streaming pause or other undesirable behavior. The effect of this call will be temporary and there are no guarantees of what will be streamed in around the specified location. Client memory limits and network conditions may impact what will be available on the client. Requesting streaming around an area is not a guarantee that the content will be present when the request completes, as streaming is affected by the client's network bandwidth, memory limitations, and other factors. \n\n\n\nThe CharacterAdded event fires when a player's character spawns (or respawns). This event fires soon after setting Player.Character to a non-nil value or calling Player:LoadCharacter(), which is before the character is parented to the Workspace. This can be used alongside the Player.CharacterRemoving event, which fires right before a player's character is about to be removed, typically after death. As such, both of these events can potentially fire many times as players die then respawn in a place. If you want to detect when a player joins or leaves the game, use the Players.PlayerAdded and Players.PlayerRemoving events instead. Note that the Humanoid and its default body parts (head, torso, and limbs) will exist when this event fires, but clothing items like Hats, Shirts, and Pants may take a few seconds to be added to the character. Connect Instance.ChildAdded on the added character to detect these, or wait for the Player.CharacterAppearanceLoaded event to be sure the character has everything equipped. An instance of the character that spawned/respawned. \n\n -- Check if we saved a respawn location for this player -- Teleport the player there when their HumanoidRootPart is available -- Wait a brief moment before teleporting, as Roblox will teleport the -- player to their designated SpawnLocation (which we will override) -- Get the player and their HumanoidRootPart and save their death location -- Forget the respawn location of any player who is leaving; this prevents -- Note that we're NOT using PlayerRemoving here, since CharacterRemoving fires -- AFTER PlayerRemoving, we don't want to forget the respawn location then instantly -- save another right after -- Wait a brief moment before removing accessories to avoid the -- Check for any existing accessories in the player's character -- Hats may be added to the character a moment after -- CharacterAdded fires, so we listen for those using ChildAdded This event fires when the full appearance of a Player.Character has been inserted. A Player.Character generally has a range of objects modifying its appearance, including Accoutrements, Shirts, Pants and CharacterMeshes. This event will fire when all such objects have been inserted into the Player.Character. This event only fires on the server. One use for this event is to ensure all accessories have loaded before destroying them. See below for an example of this. \n\n -- All accessories have loaded at this point -- Make sure we disconnect our connection to the player after they leave -- to allow the player to get garbage collected The CharacterRemoving event fires right before a player's character is removed, such as when the player is respawning. This event can be used alongside the Player.CharacterAdded event, which fires when a player's character spawns or respawns. For instance, if you would like to print a message every time a player spawns and dies: This event is only concerned with the Character of a Player. If you instead need to track when a player joins/leaves the game, use the events Players.PlayerAdded and Players.PlayerRemoving. An instance of the character that is being removed. \n\n The Chatted event fires when a Player types a message and presses enter in Roblox's provided chat bar. This is done using some Lua bindings by the default chat script. You can prevent players from chatting by using StarterGui:SetCoreGuiEnabled() and disabling the Chat Enum.CoreGuiType. Using this event and some string manipulation functions like string.sub() and string.lower(), it is possible to create chat commands, even with arguments like player names. Usually, commands are prefixed such as heal PlayerName. To check for a prefix in a string, use string.sub() on the message to check a substring of the message: string.sub(message, 1, 6) == \"/heal \" (note the inclusion of the space). Then, extract the rest of the command using string.sub() again: string.sub(message, 7) will be equal to the player name. Check if that player exists, and if so, perform the command's action (in this example, healing them). Check the code samples for examples of chat commands. The message text fired with this event is unfiltered. If you are displaying player input like chat to other players in any form, it must be filtered using Chat:FilterStringAsync(). Keep this in mind when creating your own chat systems; if your game does not properly filter chat it may have moderation action taken against it. The content of the message the player typed in chat. Deprecated. For whisper messages, this was the Player who was the intended target of the chat message. \n\n -- do stuff with message and player -- Respawn the player (moves them to spawn location) -- When someone dies, put them on the spectator team -- First, check for the exact name of a team -- Let's check for case-insensitive partial matches, like \"red\" for \"Red Robins\" -- If we get to this point, no team matched the one we were looking for :( -- Note: string.sub(message, ...) is the same as message:sub(...) -- Cut out the \"xyz\" from \"/jointeam xyz\" -- Tell the player that team could not be found :( This event fires approximately two minutes after the game engine classifies the player as idle. Time is the number of seconds that have elapsed since that point. The event continues to fire every 30 seconds for as long as the player remains idle. This event only fires in client scripts, not server scripts; use a RemoteEvent to notify the server of idle players. Roblox automatically disconnects players that have been idle for at least 20 minutes, so this event is useful for warning players that they will be disconnected soon, disconnecting players prior to those 20 minutes, or other away from keyboard (AFK) features. To track how often automatic disconnects occur, try correlating this event with occurrences of Players.PlayerRemoving. The time in seconds the player has been idle. \n\n `Player has been idle for -- warn player that they've been idle for 15 minutes -- and will be disconnected in another 5 Fired when the TeleportState of a player changes. This event is useful for detecting whether a teleportation was successful. What is the TeleportState? When a teleportation request is made using TeleportService, there are a series of stages before the Player is teleported. The current stage is represented by the Enum.TeleportState value which is given by OnTeleport. See below for a practical example of this. The new Enum.TeleportState of the Player. The ID of the place the Player is being teleported to. The name of the spawn to teleport to, if TeleportService:TeleportToSpawnByName() has been used."
    }
]