[
    {
        "link": "https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/mkdir-statement",
        "document": "The required path argument is a string expression that identifies the directory or folder to be created. The path may include the drive. If no drive is specified, MkDir creates the new directory or folder on the current drive.\n\nThis example uses the MkDir statement to create a directory or folder. If the drive is not specified, the new directory or folder is created on the current drive.\n\nHave questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback."
    },
    {
        "link": "https://stackoverflow.com/questions/10803834/create-a-folder-and-sub-folder-in-excel-vba",
        "document": "I have a pull down menu of companies that is populated by a list on another sheet. Three columns, Company, Job #, and Part Number. When a job is created I need a folder for said company and a sub-folder for said Part Number. If you go down the path it would look like: If either company name or Part number exists don't create, or overwrite the old one. Just go to next step. So if both folders exist nothing happens, if one or both don't exist create as required. Another question is there a way to make it so it works on Macs and PCs the same?"
    },
    {
        "link": "https://stackoverflow.com/questions/42116735/excel-vba-create-directories-and-folders-if-they-are-not-already-there",
        "document": "You are creating orphan folders. mkdir \"abc\\\" will create a folder named abc in the WorkBook's directory. If the workbook is not saved then this folder gets created in MyDocuments (most likey, depending on Excel's config).\n\nYou need to pass fully qalified path to create a folder at your desired location like \"C:\\Temp\\abc\\\"\n\nIn your code the issue is with how you are running your for loop and passing the folder name.\n\nThis is how you need to do this:"
    },
    {
        "link": "https://techonthenet.com/excel/formulas/mkdir.php",
        "document": "The Microsoft Excel MKDIR statement allows you to create a new folder or directory. The MKDIR function is a built-in function in Excel that is categorized as a File/Directory Function. It can be used as a VBA function (VBA) in Excel. As a VBA function, you can use this function in macro code that is entered through the Microsoft Visual Basic Editor.\n\nThe MKDIR statement does not return a value, but rather creates a new folder or directory.\n\n If path is a complex directory structure, the high-level directories must already exist or the MKDIR statement will raise an error. For example, if you executed the following code: The c:\\Test directory must already exist. The MKDIR statement will only attempt to create the Excel directory under the c:\\Test directory. It will not create the c:\\Test directory itself.\n\nThe MKDIR statement can only be used in VBA code in Microsoft Excel. Let's look at some Excel MKDIR statement function examples and explore how to use the MKDIR statement in Excel VBA code: In this example, the MKDIR statement would create a new directory called Examples under the c:\\TOTN directory. In this example, the directory called Files would be created under the c:\\TOTN\\Examples directory.\n\nQuestion: I'm not sure if a particular directory exists already. If it doesn't exist, I'd like to create it using VBA code. How can I do this? Answer: You can test to see if a directory exists using the VBA code below: If Len(Dir(\"c:\\TOTN\\Excel\\Examples\", vbDirectory)) = 0 Then MkDir \"c:\\TOTN\\Excel\\Examples\" End If In this example, the code would first check to see if the c:\\TOTN\\Excel\\Examples directory exists. If it doesn't exist, the MKDIR statement would create a new directory called Examples under the c:\\TOTN\\Excel directory."
    },
    {
        "link": "https://mrexcel.com/board/threads/vba-to-create-new-folder-in-current-directory-parent-name-date.1095224",
        "document": "Hello all!\n\n \n\n I have been doing this manually for a while and had a \"duh\" moment, that I should have a macro! This is something I felt I would store in my Personal workbook rather than within a project I am working on, as the need to use it on multiple projects is obvious. I need a macro that will allow me to create a new folder with specific criteria. Using folder paths names such as these are beneficial as I have Work in Progress files for all my active projects\n\n \n\n 1) Create the folder in the path of the workbook that I am actively working in\n\n 2) The folder name should be the name of the parent folder and today's date (format: \" - mm-dd-yyyy\"\n\n \n\n C:\\UserData\\Z0041M7C\\Documents\\WAA Projects\\Fringe Benefit Rates <!--- path of active workbook\n\n \n\n File Name for folder: Fringe Benefit Rates - 4-22-2019\n\n \n\n Because the path would change as my active workbook changes I do not want this hard-coded. Also, I would love to add error handling in case I already created the folder. I had 24 files in my folder for 4-19-2019.\n\n \n\n I have seen many examples of creating file directories, but I have had difficulty converting them to meet my needs, as they all contain a hard coded path and file name. I need variables so I can use this script for every project I work on. Any help is greatly appreciated. Thanks."
    },
    {
        "link": "https://stackoverflow.com/questions/68697134/updating-file-paths-in-excel-vba",
        "document": "I have a formula in an excel workbook that pulls data from another workbook as part of a macro. These two workbooks are in the same folder. However, I plan on sharing the folder with others so that they can utilize my macro to run reports. If another user opens these files, will the VBA code update automatically to wherever the new user saves the folder?\n\nIf not, is there a script I can write to update the file path automatically? Or is there at least a way I can make it easy for users who don't know VBA to update the macro so it works on their PC?\n\nHere is my formula:\n\nI am not really an expert in VBA myself, but my initial thought is to define a variable that contains the filepath so users would only have to change the name of the variable.\n\nSo then my formula would become:\n\nI am not sure this will work. Any thoughts would be greatly appreciated!"
    },
    {
        "link": "https://stackoverflow.com/questions/213584/relative-instead-of-absolute-paths-in-excel-vba",
        "document": "I have written an Excel VBA macro which imports data from a HTML file (stored locally) before performing calculations on the data.\n\nAt the moment the HTML file is referred to with an absolute path:\n\nHowever I want to use a relative path to refer to it as opposed to absolute (this is because I want to distribute the spreadsheet to colleagues who might not use the same folder structure). As the html file and the excel spreadsheet sit in the same folder I would not have thought this would be difficult, however I am just completely unable to do it. I have searched on the web and the suggested solutions have all appeared very complicated.\n\nI am using Excel 2000 and 2002 at work, but as I plan to distribute it I would want it to work with as many versions of Excel as possible."
    },
    {
        "link": "https://reddit.com/r/excel/comments/8n9n5o/how_to_write_vba_so_anyone_can_use_it_file_paths",
        "document": "I'm having trouble with some VBA, I'm building a large file with code that deals with multiple workbooks with file paths to my desktop. My goal is to create an easy process that someone not knowledgeable with Excel or VBA can use so I can move on to other projects. I will be emailing them both the main workbook and the supporting workbook. My file paths currently look like\n\nHow can I rewrite the code so it will autopath to the next persons desktop when I send it to them?"
    },
    {
        "link": "https://mrexcel.com/board/threads/change-file-path-hard-coded-in-macro-via-pop-up.1176130",
        "document": "Hi Fluff,Thanks for your response. It will work and I have considered this approach, the only issue is that not all users will have the folder named the same. What I forgot to mention is that I have a piece of code that allows users to browse the folder where they store their spreadsheets, which then stores the path in cell B11 on sheet A. That's why I'm looking for away to insert that selected path from cell B11 into the VBA code. See code for folder browser below:"
    },
    {
        "link": "https://exceloffthegrid.com/insert-file-path-into-cell-with-browse-button",
        "document": "In this post, we look at how to browse for file path with VBA, and then insert the selected filepath into a cell.\n\nThis post is inspired by a question I received:\n\n“If you would want to add a browse button right beside the cell that contains the file path so that you won’t need to manually copy and paste the file path in the cell, how would you do that?”\n\nOK, let me show you the solution that I came up with.\n\nBefore we look at how to build it, let’s look at the solution in action.\n\nCell C3 contains a file path, with a folder icon next to it.\n\nIf we click on the folder icon, the file open dialog box opens. We can select a file and click Open.\n\nThe file path is now inserted into cell C3.\n\nIf you’re here to find out how to do this yourself, then you’re in the right place 😁\n\nNow we know what it does; let’s build it.\n\nFirst, we need to create a named range for the cell containing the file path.\n\nWhile this step isn’t essential, it reduces the risk of error. If we wrote a macro that references cell C3, then inserted a new row or column, the code in the macro doesn’t change, so it then refers to the wrong cell. Therefore, named ranges help to remove this risk.\n• Select the cell which contains the file path\n• In the name box, type filePath and press Enter\n\n\n\nThe main driving force for this solution is a VBA macro.\n\nIf you have the Developer ribbon visible, click Developer > Visual Basic. if not, press ALT + F11.\n\nRight-click the file in the Project window, then click Insert > Module from the menu.\n\nA new code module opens. Enter the following code into the code module\n\nThe comments in the code describe the purpose of each section.\n\nPlease take careful note of the following, as you will need to change the code for your specific scenario.\n\nActiveSheet.Range(“filePath”).Value = dialogBox.SelectedItems(1)\n\nChange the word filePath for the named range you created above.\n\ndialogBox.InitialFileName = “C:\\Users\\marks\\Downloads\\Example Folder”\n\nThis contains the default folder path where the file picker opens each time. Change this to match your environment.\n\ndialogBox.Filters.Clear\n\ndialogBox.Filters.Add “Excel workbooks”, “*.xlsx;*.xls;*.xlsm”\n\nThis code restricts the types of files that are shown in the file picker. The asterisk ( * ) is a wildcard character; any files ending in .xlsx, .xlsx, and .xlsm will be displayed. To add new file types, PDFs for example, add “;*.pdf” into the text string. Or, to allow all file types, remove the dialogbox.Filters.Add… line completely.\n\nOnce the code has been entered and amended to your scenario, close the Visual Basic Editor by clicking on the [X] at the window’s top right.\n\nNow we need something to act as the button. I am going to use an Icon. Depending on your version of Excel, you may not have the Icons feature. But you can insert any picture or shape you wish.\n\nTo insert an icon like me, click Insert > Icons.\n\nSearch for “Folder”, in the icons window. Select the preferred icon and click Insert.\n\nThe image will be inserted onto the face of the worksheet.\n\nMove and resize the image to be in the right location. I have also formatted the folder icon to be an orange color (similar to how folders look in the normal Windows environment).\n\nFinally, we assign the macro to the image. Right-click on the image and select Assign macro… from the menu.\n\nFrom the Assign Macro window, click the selectFile macro (this is the name of the macro we created earlier), then click OK.\n\nThat’s it. We’re done. Now go and test it out.\n\nIn this post, we have seen how to create a user interface for selecting files. Users can browse for a file path, then insert that into a cell. This is a really useful technique if using cell parameters in Power Query.\n• Change the Power Query source based on a cell value\n• How to fix the Formula.Firewall error in Power Query (2 ways)\n\nDiscover how you can automate your work with our Excel courses and tools."
    }
]