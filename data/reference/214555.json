[
    {
        "link": "https://stackoverflow.com/questions/3148535/how-to-read-excel-cell-having-date-with-apache-poi",
        "document": "I'm using Apache POI 3.6, I want to read an excel file which has a date like this .\n\nBut it takes the numeric value type and returns the value like this .\n\nI've tried to use Numeric Cell Type although with no luck.\n\nHow can I fix my problem?"
    },
    {
        "link": "https://poi.apache.org",
        "document": "The Apache POI team is pleased to announce the release of 5.4.0. Several dependencies were updated to their latest versions to pick up security fixes and other improvements.\n\nA summary of changes is available in the Release Notes. A full list of changes is available in the change log. People interested should also follow the dev list to track progress.\n\nSee the downloads page for more details.\n\nWhile testing a potential Apache POI 5.4.0 release, we discovered a serious bug in log4j-api 2.24.1. This leads to NullPointerExceptions when you use a version of log4j-core that is not of the exact same version (2.24.1). We recommend that users avoid log4j 2.24.1 and use the latest 2.24.x version where this issue is fixed again.\n\nXMLBeans release 5.2.2 had the problematic log4j-api 2.24.1 dependency and thus can lead to such issues if used in some other context. In the meantime a version 5.3.0 of XmlBeans was released which avoids this issue.\n\nPlease direct any queries to the Log4j Team. The main issue is Issue 3143.\n\n4 March 2022 - CVE-2022-26336 - A carefully crafted TNEF file can cause an out of memory exception in Apache POI poi-scratchpad versions prior to 5.2.0\n\nDescription:\n\n A shortcoming in the HMEF package of poi-scratchpad (Apache POI) allows an attacker to cause an Out of Memory exception. This package is used to read TNEF files (Microsoft Outlook and Microsoft Exchange Server). If an application uses poi-scratchpad to parse TNEF files and the application allows untrusted users to supply them, then a carefully crafted file can cause an Out of Memory exception.\n\nMitigation:\n\n Affected users are advised to update to poi-scratchpad 5.2.1 or above which fixes this vulnerability. It is recommended that you use the same versions of all POI jars.\n\nThe Apache POI PMC has evaluated the security vulnerabilities reported for Apache Log4j.\n\nPOI 5.1.0 and XMLBeans 5.0.2 only have dependencies on log4j-api 2.14.1. The security vulnerabilities are not in log4j-api - they are in log4j-core.\n\nIf any POI or XMLBeans user uses log4j-core to control their logging of their application, we strongly recommend that they upgrade all their log4j dependencies to the latest version (currently v2.20.0) - including log4j-api.\n\nDescription:\n\n When parsing XML files using XMLBeans 2.6.0 or below, the underlying parser created by XMLBeans could be susceptible to XML External Entity (XXE) attacks.\n\nThis issue was fixed a few years ago but on review, we decided we should have a CVE to raise awareness of the issue.\n\nMitigation:\n\n Affected users are advised to update to Apache XMLBeans 3.0.0 or above which fixes this vulnerability. XMLBeans 4.0.0 or above is preferable.\n\nDescription:\n\n When using the tool XSSFExportToXml to convert user-provided Microsoft Excel documents, a specially crafted document can allow an attacker to read files from the local filesystem or from internal network resources via XML External Entity (XXE) Processing.\n\nMitigation:\n\n Apache POI 4.1.0 and before: users who do not use the tool XSSFExportToXml are not affected. Affected users are advised to update to Apache POI 4.1.1 which fixes this vulnerability.\n\nCredit: This issue was discovered by Artem Smotrakov from SAP\n\nThe Apache POI team is pleased to announce the release of XMLBeans 3.1.0. Featured are a handful of bug fixes.\n\nThe Apache POI project has unretired the XMLBeans codebase and is maintaining it as a sub-project, due to its importance in the poi-ooxml codebase.\n\nA summary of changes is available in the Release Notes. People interested should also follow the POI dev list to track progress.\n\nThe XMLBeans JIRA project has been reopened and feel free to open issues.\n\nWe did some work to verify that compilation with Java 11 is working and that all unit-tests pass.\n\nSee the details in the FAQ entry."
    },
    {
        "link": "https://stackoverflow.com/questions/19525094/get-string-value-when-i-read-from-excel-with-date-type-apache-poi",
        "document": "I have an xlsx file that I am reading with - Apache POI Library.\n\nFor example, In some row, I have such cells values:\n\nMy goal is: Read all cells in the rows as String values. But as I see, I can't read 01-Sep-13 as string, it only represents like Date type () with cell.getDateCellValue();\n\n1) Could I read somehow 01-Sep-13 as string: \"01-Sep-13\"; 2) Could I convert Date value to string in case I have different date patterns (ddMMyyyy) and (dd-MMM-yy);\n\nWhen I iterate over rows and cells, Apache POI analyzes each cell type:"
    },
    {
        "link": "https://geeksforgeeks.org/reading-writing-data-excel-file-using-apache-poi",
        "document": "In Java, reading an Excel file is not similar to reading a Word file because of cells in an Excel file. JDK does not provide a direct API to read data from Excel files for which we have to toggle to a third-party library that is Apache POI. Apache POI is an open-source java library designed for reading and writing Microsoft documents in order to create and manipulate various file formats based on Microsoft Office. Using POI, one should be able to perform create, modify and display/read operations on the following file formats. \n\nFor Example, Java doesn’t provide built-in support for working with excel files, so we need to look for open-source APIs for the job. Apache POI provides Java API for manipulating various file formats based on the Office Open XML (OOXML) standard and OLE2 standard from Microsoft. Apache POI releases are available under the Apache License (V2.0).\n\nEarlier we introduced Apache POI- a Java API useful for interacting with Microsoft Office documents. Now we’ll see how can we read and write to an excel file using the API.\n\nProcedure: Writing a file using POI is very simple and involve the following steps:\n• Repeat steps 3 and 4 to write more data.\n\nProcedure: Reading an excel file is also very simple if we divide this into steps.\n• Get to the desired sheet\n• iterate over all cells in a row\n• repeat steps 3 and 4 until all data is read."
    },
    {
        "link": "https://poi.apache.org/apidocs/dev/org/apache/poi/ss/usermodel/DateUtil.html",
        "document": "\n• Given a LocalDate, converts it into a double representing its internal Excel representation, which is the number of days since 1/1/1900. Fractional days represent hours, minutes, and seconds. Excel representation of Date (-1 if error - test for error by checking for less than 0.1)\n• Given a LocalDate, converts it into a double representing its internal Excel representation, which is the number of days since 1/1/1900. Fractional days represent hours, minutes, and seconds. - Should 1900 or 1904 date windowing be used? Excel representation of Date (-1 if error - test for error by checking for less than 0.1)\n• Given a LocalDateTime, converts it into a double representing its internal Excel representation, which is the number of days since 1/1/1900. Fractional days represent hours, minutes, and seconds. Excel representation of Date (-1 if error - test for error by checking for less than 0.1)\n• Given a LocalDateTime, converts it into a double representing its internal Excel representation, which is the number of days since 1/1/1900. Fractional days represent hours, minutes, and seconds. - Should 1900 or 1904 date windowing be used? Excel representation of Date (-1 if error - test for error by checking for less than 0.1)\n• Given a Date, converts it into a double representing its internal Excel representation, which is the number of days since 1/1/1900. Fractional days represent hours, minutes, and seconds. Excel representation of Date (-1 if error - test for error by checking for less than 0.1)\n• Given a Date, converts it into a double representing its internal Excel representation, which is the number of days since 1/1/1900. Fractional days represent hours, minutes, and seconds. - Should 1900 or 1904 date windowing be used? Excel representation of Date (-1 if error - test for error by checking for less than 0.1)\n• Given a Date in the form of a Calendar, converts it into a double representing its internal Excel representation, which is the number of days since 1/1/1900. Fractional days represent hours, minutes, and seconds. - the Calendar holding the date to convert - Should 1900 or 1904 date windowing be used? Excel representation of Date (-1 if error - test for error by checking for less than 0.1)\n• Given an Excel date with using 1900 date windowing, and converts it to a java.util.Date. Excel Dates and Times are stored without any timezone information. If you know (through other means) that your file uses a different TimeZone to the system default, you can use this version of the getJavaDate() method to handle it. - The TimeZone to evaluate the date in Java representation of the date, or null if date is not a valid Excel date\n• Given an Excel date with using 1900 date windowing, and converts it to a java.util.Date. NOTE: If the default in Java uses Daylight Saving Time then the conversion back to an Excel date may not give the same value, that is the comparison is not always true. For example if default timezone is , on 2004-03-28 the minute after 01:59 CET is 03:00 CEST, if the excel date represents a time between 02:00 and 03:00 then it is converted to past 03:00 summer time Java representation of the date, or null if date is not a valid Excel date\n• Given an Excel date with either 1900 or 1904 date windowing, converts it to a java.util.Date. Excel Dates and Times are stored without any timezone information. If you know (through other means) that your file uses a different TimeZone to the system default, you can use this version of the getJavaDate() method to handle it. - The TimeZone to evaluate the date in - true if date uses 1904 windowing, or false if using 1900 date windowing. Java representation of the date, or null if date is not a valid Excel date\n• Given an Excel date with either 1900 or 1904 date windowing, converts it to a java.util.Date. Excel Dates and Times are stored without any timezone information. If you know (through other means) that your file uses a different TimeZone to the system default, you can use this version of the getJavaDate() method to handle it. - The TimeZone to evaluate the date in - true if date uses 1904 windowing, or false if using 1900 date windowing. Java representation of the date, or null if date is not a valid Excel date\n• Given an Excel date with either 1900 or 1904 date windowing, converts it to a java.util.Date. NOTE: If the default in Java uses Daylight Saving Time then the conversion back to an Excel date may not give the same value, that is the comparison is not always true. For example if default timezone is , on 2004-03-28 the minute after 01:59 CET is 03:00 CEST, if the excel date represents a time between 02:00 and 03:00 then it is converted to past 03:00 summer time - true if date uses 1904 windowing, or false if using 1900 date windowing. Java representation of the date, or null if date is not a valid Excel date\n• Given an Excel date with using 1900 date windowing, and converts it to a java.time.LocalDateTime. NOTE: If the default in Java uses Daylight Saving Time then the conversion back to an Excel date may not give the same value, that is the comparison is not always true. For example if default timezone is , on 2004-03-28 the minute after 01:59 CET is 03:00 CEST, if the excel date represents a time between 02:00 and 03:00 then it is converted to past 03:00 summer time Java representation of the date, or null if date is not a valid Excel date\n• Given an Excel date with either 1900 or 1904 date windowing, converts it to a java.time.LocalDateTime. Excel Dates and Times are stored without any timezone information. If you know (through other means) that your file uses a different TimeZone to the system default, you can use this version of the getJavaDate() method to handle it. - true if date uses 1904 windowing, or false if using 1900 date windowing. Java representation of the date, or null if date is not a valid Excel date\n• Given an Excel date with either 1900 or 1904 date windowing, converts it to a java.time.LocalDateTime. Excel Dates and Times are stored without any timezone information. If you know (through other means) that your file uses a different TimeZone to the system default, you can use this version of the getJavaDate() method to handle it. - true if date uses 1904 windowing, or false if using 1900 date windowing. Java representation of the date, or null if date is not a valid Excel date\n• Get EXCEL date as Java Calendar (with default time zone). This is like but returns a Calendar object. Java representation of the date, or null if date is not a valid Excel date\n• Get EXCEL date as Java Calendar (with default time zone). This is like but returns a Calendar object. - true if date uses 1904 windowing, or false if using 1900 date windowing. Java representation of the date, or null if date is not a valid Excel date\n• Get EXCEL date as Java Calendar with UTC time zone. This is similar to but returns a Calendar object that has UTC as time zone, so no daylight saving hassle. - true if date uses 1904 windowing, or false if using 1900 date windowing. Java representation of the date in UTC, or null if date is not a valid Excel date\n• Get EXCEL date as Java Calendar with given time zone. - true if date uses 1904 windowing, or false if using 1900 date windowing. - The TimeZone to evaluate the date in Java representation of the date, or null if date is not a valid Excel date\n• Get EXCEL date as Java Calendar with given time zone. - true if date uses 1904 windowing, or false if using 1900 date windowing. - The TimeZone to evaluate the date in Java representation of the date, or null if date is not a valid Excel date\n• Given a format ID and its format String, will check to see if the format represents a date format or not. Firstly, it will check to see if the format ID corresponds to an internal excel date format (eg most US date formats) If not, it will check to see if the format string only contains date formatting characters (ymd-/), which covers most non US date formats. - The number format index and string expression, or null if not specified true if it is a valid date format, false if not or null\n• Given a format ID and its format String, will check to see if the format represents a date format or not. Firstly, it will check to see if the format ID corresponds to an internal excel date format (eg most US date formats) If not, it will check to see if the format string only contains date formatting characters (ymd-/), which covers most non US date formats. - The index of the format, eg from ExtendedFormatRecord.getFormatIndex true if it is a valid date format, false if not or null\n• Given a format ID this will check whether the format represents an internal excel date format or not.\n• Check if a cell contains a date Since dates are stored internally in Excel as double values we infer it is a date if it is formatted as such. - The cell to look at true if it looks like a date\n• Check if a cell contains a date Since dates are stored internally in Excel as double values we infer it is a date if it is formatted as such. Format is determined from applicable conditional formatting, if any, or cell style. - The cell to look at - if available, or null true if it looks like a date\n• Check if a cell contains a date, checking only for internal excel date formats. As Excel stores a great many of its dates in \"non-internal\" date formats, you will not normally want to use this method.\n• Given a double, checks if it is a valid Excel date.\n• Given a Calendar, return the number of days since 1900/12/31.\n• Given a LocalDateTime, return the number of days since 1900/12/31.\n• Converts a string of format \"HH:MM\" or \"HH:MM:SS\" to its (Excel) numeric equivalent a double between 0 and 1 representing the fraction of the day\n• Converts a string of format \"YYYY/MM/DD\" to its (Excel) numeric equivalent a double representing the (integer) number of days since the start of the Excel epoch"
    },
    {
        "link": "https://poi.apache.org/apidocs/dev/org/apache/poi/ss/usermodel/DateUtil.html",
        "document": "\n• Given a LocalDate, converts it into a double representing its internal Excel representation, which is the number of days since 1/1/1900. Fractional days represent hours, minutes, and seconds. Excel representation of Date (-1 if error - test for error by checking for less than 0.1)\n• Given a LocalDate, converts it into a double representing its internal Excel representation, which is the number of days since 1/1/1900. Fractional days represent hours, minutes, and seconds. - Should 1900 or 1904 date windowing be used? Excel representation of Date (-1 if error - test for error by checking for less than 0.1)\n• Given a LocalDateTime, converts it into a double representing its internal Excel representation, which is the number of days since 1/1/1900. Fractional days represent hours, minutes, and seconds. Excel representation of Date (-1 if error - test for error by checking for less than 0.1)\n• Given a LocalDateTime, converts it into a double representing its internal Excel representation, which is the number of days since 1/1/1900. Fractional days represent hours, minutes, and seconds. - Should 1900 or 1904 date windowing be used? Excel representation of Date (-1 if error - test for error by checking for less than 0.1)\n• Given a Date, converts it into a double representing its internal Excel representation, which is the number of days since 1/1/1900. Fractional days represent hours, minutes, and seconds. Excel representation of Date (-1 if error - test for error by checking for less than 0.1)\n• Given a Date, converts it into a double representing its internal Excel representation, which is the number of days since 1/1/1900. Fractional days represent hours, minutes, and seconds. - Should 1900 or 1904 date windowing be used? Excel representation of Date (-1 if error - test for error by checking for less than 0.1)\n• Given a Date in the form of a Calendar, converts it into a double representing its internal Excel representation, which is the number of days since 1/1/1900. Fractional days represent hours, minutes, and seconds. - the Calendar holding the date to convert - Should 1900 or 1904 date windowing be used? Excel representation of Date (-1 if error - test for error by checking for less than 0.1)\n• Given an Excel date with using 1900 date windowing, and converts it to a java.util.Date. Excel Dates and Times are stored without any timezone information. If you know (through other means) that your file uses a different TimeZone to the system default, you can use this version of the getJavaDate() method to handle it. - The TimeZone to evaluate the date in Java representation of the date, or null if date is not a valid Excel date\n• Given an Excel date with using 1900 date windowing, and converts it to a java.util.Date. NOTE: If the default in Java uses Daylight Saving Time then the conversion back to an Excel date may not give the same value, that is the comparison is not always true. For example if default timezone is , on 2004-03-28 the minute after 01:59 CET is 03:00 CEST, if the excel date represents a time between 02:00 and 03:00 then it is converted to past 03:00 summer time Java representation of the date, or null if date is not a valid Excel date\n• Given an Excel date with either 1900 or 1904 date windowing, converts it to a java.util.Date. Excel Dates and Times are stored without any timezone information. If you know (through other means) that your file uses a different TimeZone to the system default, you can use this version of the getJavaDate() method to handle it. - The TimeZone to evaluate the date in - true if date uses 1904 windowing, or false if using 1900 date windowing. Java representation of the date, or null if date is not a valid Excel date\n• Given an Excel date with either 1900 or 1904 date windowing, converts it to a java.util.Date. Excel Dates and Times are stored without any timezone information. If you know (through other means) that your file uses a different TimeZone to the system default, you can use this version of the getJavaDate() method to handle it. - The TimeZone to evaluate the date in - true if date uses 1904 windowing, or false if using 1900 date windowing. Java representation of the date, or null if date is not a valid Excel date\n• Given an Excel date with either 1900 or 1904 date windowing, converts it to a java.util.Date. NOTE: If the default in Java uses Daylight Saving Time then the conversion back to an Excel date may not give the same value, that is the comparison is not always true. For example if default timezone is , on 2004-03-28 the minute after 01:59 CET is 03:00 CEST, if the excel date represents a time between 02:00 and 03:00 then it is converted to past 03:00 summer time - true if date uses 1904 windowing, or false if using 1900 date windowing. Java representation of the date, or null if date is not a valid Excel date\n• Given an Excel date with using 1900 date windowing, and converts it to a java.time.LocalDateTime. NOTE: If the default in Java uses Daylight Saving Time then the conversion back to an Excel date may not give the same value, that is the comparison is not always true. For example if default timezone is , on 2004-03-28 the minute after 01:59 CET is 03:00 CEST, if the excel date represents a time between 02:00 and 03:00 then it is converted to past 03:00 summer time Java representation of the date, or null if date is not a valid Excel date\n• Given an Excel date with either 1900 or 1904 date windowing, converts it to a java.time.LocalDateTime. Excel Dates and Times are stored without any timezone information. If you know (through other means) that your file uses a different TimeZone to the system default, you can use this version of the getJavaDate() method to handle it. - true if date uses 1904 windowing, or false if using 1900 date windowing. Java representation of the date, or null if date is not a valid Excel date\n• Given an Excel date with either 1900 or 1904 date windowing, converts it to a java.time.LocalDateTime. Excel Dates and Times are stored without any timezone information. If you know (through other means) that your file uses a different TimeZone to the system default, you can use this version of the getJavaDate() method to handle it. - true if date uses 1904 windowing, or false if using 1900 date windowing. Java representation of the date, or null if date is not a valid Excel date\n• Get EXCEL date as Java Calendar (with default time zone). This is like but returns a Calendar object. Java representation of the date, or null if date is not a valid Excel date\n• Get EXCEL date as Java Calendar (with default time zone). This is like but returns a Calendar object. - true if date uses 1904 windowing, or false if using 1900 date windowing. Java representation of the date, or null if date is not a valid Excel date\n• Get EXCEL date as Java Calendar with UTC time zone. This is similar to but returns a Calendar object that has UTC as time zone, so no daylight saving hassle. - true if date uses 1904 windowing, or false if using 1900 date windowing. Java representation of the date in UTC, or null if date is not a valid Excel date\n• Get EXCEL date as Java Calendar with given time zone. - true if date uses 1904 windowing, or false if using 1900 date windowing. - The TimeZone to evaluate the date in Java representation of the date, or null if date is not a valid Excel date\n• Get EXCEL date as Java Calendar with given time zone. - true if date uses 1904 windowing, or false if using 1900 date windowing. - The TimeZone to evaluate the date in Java representation of the date, or null if date is not a valid Excel date\n• Given a format ID and its format String, will check to see if the format represents a date format or not. Firstly, it will check to see if the format ID corresponds to an internal excel date format (eg most US date formats) If not, it will check to see if the format string only contains date formatting characters (ymd-/), which covers most non US date formats. - The number format index and string expression, or null if not specified true if it is a valid date format, false if not or null\n• Given a format ID and its format String, will check to see if the format represents a date format or not. Firstly, it will check to see if the format ID corresponds to an internal excel date format (eg most US date formats) If not, it will check to see if the format string only contains date formatting characters (ymd-/), which covers most non US date formats. - The index of the format, eg from ExtendedFormatRecord.getFormatIndex true if it is a valid date format, false if not or null\n• Given a format ID this will check whether the format represents an internal excel date format or not.\n• Check if a cell contains a date Since dates are stored internally in Excel as double values we infer it is a date if it is formatted as such. - The cell to look at true if it looks like a date\n• Check if a cell contains a date Since dates are stored internally in Excel as double values we infer it is a date if it is formatted as such. Format is determined from applicable conditional formatting, if any, or cell style. - The cell to look at - if available, or null true if it looks like a date\n• Check if a cell contains a date, checking only for internal excel date formats. As Excel stores a great many of its dates in \"non-internal\" date formats, you will not normally want to use this method.\n• Given a double, checks if it is a valid Excel date.\n• Given a Calendar, return the number of days since 1900/12/31.\n• Given a LocalDateTime, return the number of days since 1900/12/31.\n• Converts a string of format \"HH:MM\" or \"HH:MM:SS\" to its (Excel) numeric equivalent a double between 0 and 1 representing the fraction of the day\n• Converts a string of format \"YYYY/MM/DD\" to its (Excel) numeric equivalent a double representing the (integer) number of days since the start of the Excel epoch"
    },
    {
        "link": "https://stackoverflow.com/questions/3148535/how-to-read-excel-cell-having-date-with-apache-poi",
        "document": "I'm using Apache POI 3.6, I want to read an excel file which has a date like this .\n\nBut it takes the numeric value type and returns the value like this .\n\nI've tried to use Numeric Cell Type although with no luck.\n\nHow can I fix my problem?"
    },
    {
        "link": "https://stackoverflow.com/questions/34091782/poi-way-of-checking-the-date-format-of-cell-in-java",
        "document": "There are 2 cases, the cell may have been date formatted by excel, you can check it with these methods. Below is an example:\n\nIf it's not date formatted then, we can parse the date from string using DateUtils library, by passing the array of possible date formats."
    },
    {
        "link": "https://poi.apache.org/apidocs/3.17/org/apache/poi/ss/usermodel/DateUtil.html",
        "document": ""
    },
    {
        "link": "https://poi.apache.org/apidocs/4.0/index.html?org/apache/poi/ss/usermodel/DateUtil.html",
        "document": "JavaScript is disabled on your browser.\n\nThis document is designed to be viewed using the frames feature. If you see this message, you are using a non-frame-capable web client. Link to Non-frame version."
    }
]