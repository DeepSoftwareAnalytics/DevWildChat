[
    {
        "link": "https://dev.mysql.com/doc/en/date-and-time-functions.html",
        "document": "\n• None These functions perform date arithmetic. The argument specifies the starting date or datetime value. is an expression specifying the interval value to be added or subtracted from the starting date. is evaluated as a string; it may start with a for negative intervals. is a keyword indicating the units in which the expression should be interpreted. For more information about temporal interval syntax, including a full list of specifiers, the expected form of the argument for each value, and rules for operand interpretation in temporal arithmetic, see Temporal Intervals. The return value depends on the arguments:\n• None If is , the function returns .\n• None if the argument is a value and your calculations involve only , , and parts (that is, no time parts).\n• None if the argument is a value and the calculations involve only , , and parts (that is, no date parts).\n• None if the first argument is a (or ) value, or if the first argument is a and the value uses , , or , or if the first argument is of type and the value uses , , or .\n• None If the first argument is a dynamic parameter (for example, of a prepared statement), its resolved type is if the second argument is an interval that contains some combination of , , or values only; otherwise, its type is . To ensure that the result is , you can use to convert the first argument to . When adding a interval to a or value, and the resulting date includes a day that does not exist in the given month, the day is adjusted to the last day of the month, as shown here: mysql> SELECT DATE_ADD('2024-03-30', INTERVAL 1 MONTH) AS d1, > DATE_ADD('2024-03-31', INTERVAL 1 MONTH) AS d2; +------------+------------+ | d1 | d2 | +------------+------------+ | 2024-04-30 | 2024-04-30 | +------------+------------+ 1 row in set (0.00 sec)\n• None Formats the value according to the string. If either argument is , the function returns . The specifiers shown in the following table may be used in the string. The character is required before format specifier characters. The specifiers apply to other functions as well: , , . Day of the month with English suffix ( , , , , …) Time, 12-hour ( followed by or ) Week ( .. ), where Sunday is the first day of the week; mode 0 Week ( .. ), where Monday is the first day of the week; mode 1 Week ( .. ), where Sunday is the first day of the week; mode 2; used with Week ( .. ), where Monday is the first day of the week; mode 3; used with Year for the week where Sunday is the first day of the week, numeric, four digits; used with Year for the week, where Monday is the first day of the week, numeric, four digits; used with , for any not listed above Ranges for the month and day specifiers begin with zero due to the fact that MySQL permits the storing of incomplete dates such as . The language used for day and month names and abbreviations is controlled by the value of the system variable (Section 12.16, “MySQL Server Locale Support”). For the , , , and specifiers, see the description of the function for information about the mode values. The mode affects how week numbering occurs. returns a string with a character set and collation given by and so that it can return month and weekday names containing non-ASCII characters.\n• None Returns a representation of as a datetime or character string value. The value returned is expressed using the session time zone. (Clients can set the session time zone as described in Section 7.1.15, “MySQL Server Time Zone Support”.) is an internal timestamp value representing seconds since UTC, such as produced by the function. If is omitted, this function returns a value. If or is , this function returns . If is an integer, the fractional seconds precision of the is zero. When is a decimal value, the fractional seconds precision of the is the same as the precision of the decimal value, up to a maximum of 6. When is a floating point number, the fractional seconds precision of the datetime is 6. On 32-bit platforms, the maximum useful value for is 2147483647.999999, which returns UTC. On 64-bit platforms, the effective maximum is 32536771199.999999, which returns UTC. Regardless of platform or version, a greater value for than the effective maximum returns . is used to format the result in the same way as the format string used for the function. If is supplied, the value returned is a . If you use and to convert between values in a non-UTC time zone and Unix timestamp values, the conversion is lossy because the mapping is not one-to-one in both directions. For details, see the description of the function.\n• None Returns the current date and time as a value in or format, depending on whether the function is used in string or numeric context. The value is expressed in the session time zone. If the argument is given to specify a fractional seconds precision from 0 to 6, the return value includes a fractional seconds part of that many digits. returns a constant time that indicates the time at which the statement began to execute. (Within a stored function or trigger, returns the time at which the function or triggering statement began to execute.) This differs from the behavior for , which returns the exact time at which it executes. mysql> SELECT NOW(), SLEEP(2), NOW(); +---------------------+----------+---------------------+ | NOW() | SLEEP(2) | NOW() | +---------------------+----------+---------------------+ | 2006-04-12 13:47:36 | 0 | 2006-04-12 13:47:36 | +---------------------+----------+---------------------+ mysql> SELECT SYSDATE(), SLEEP(2), SYSDATE(); +---------------------+----------+---------------------+ | SYSDATE() | SLEEP(2) | SYSDATE() | +---------------------+----------+---------------------+ | 2006-04-12 13:47:44 | 0 | 2006-04-12 13:47:46 | +---------------------+----------+---------------------+ In addition, the statement affects the value returned by but not by . This means that timestamp settings in the binary log have no effect on invocations of . Setting the timestamp to a nonzero value causes each subsequent invocation of to return that value. Setting the timestamp to zero cancels this effect so that once again returns the current date and time. See the description for for additional information about the differences between the two functions.\n• None This is the inverse of the function. It takes a string and a format string . returns a value if the format string contains both date and time parts, or a or value if the string contains only date or time parts. If or is , the function returns . If the date, time, or datetime value extracted from cannot be parsed according to the rules followed by the server, returns and produces a warning. The server scans attempting to match to it. The format string can contain literal characters and format specifiers beginning with . Literal characters in must match literally in . Format specifiers in must match a date or time part in . For the specifiers that can be used in , see the function description. Scanning starts at the beginning of and fails if is found not to match. Extra characters at the end of are ignored. Unspecified date or time parts have a value of 0, so incompletely specified values in produce a result with some or all parts set to 0: Range checking on the parts of date values is as described in Section 13.2.2, “The DATE, DATETIME, and TIMESTAMP Types”. This means, for example, that “zero” dates or dates with part values of 0 are permitted unless the SQL mode is set to disallow such values. If the SQL mode is enabled, zero dates are disallowed. In that case, returns and generates a warning: In some previous versions of MySQL, it was possible to pass an invalid date string such as to this function. In MySQL 8.4, performs complete range checking and raises an error if the date after conversion would be invalid. You cannot use format to convert a year-week string to a date because the combination of a year and week does not uniquely identify a year and month if the week crosses a month boundary. To convert a year-week to a date, you should also specify the weekday: You should also be aware that, for dates and the date portions of datetime values, checks (only) the individual year, month, and day of month values for validity. More precisely, this means that the year is checked to be sure that it is in the range 0-9999 inclusive, the month is checked to ensure that it is in the range 1-12 inclusive, and the day of month is checked to make sure that it is in the range 1-31 inclusive, but the server does not check the values in combination. For example, returns . Enabling or disabling the server SQL mode has no effect on this behavior. See Section 13.2.2, “The DATE, DATETIME, and TIMESTAMP Types”, for more information.\n• None Returns the current date and time as a value in or format, depending on whether the function is used in string or numeric context. If the argument is given to specify a fractional seconds precision from 0 to 6, the return value includes a fractional seconds part of that many digits. returns the time at which it executes. This differs from the behavior for , which returns a constant time that indicates the time at which the statement began to execute. (Within a stored function or trigger, returns the time at which the function or triggering statement began to execute.) mysql> SELECT NOW(), SLEEP(2), NOW(); +---------------------+----------+---------------------+ | NOW() | SLEEP(2) | NOW() | +---------------------+----------+---------------------+ | 2006-04-12 13:47:36 | 0 | 2006-04-12 13:47:36 | +---------------------+----------+---------------------+ mysql> SELECT SYSDATE(), SLEEP(2), SYSDATE(); +---------------------+----------+---------------------+ | SYSDATE() | SLEEP(2) | SYSDATE() | +---------------------+----------+---------------------+ | 2006-04-12 13:47:44 | 0 | 2006-04-12 13:47:46 | +---------------------+----------+---------------------+ In addition, the statement affects the value returned by but not by . This means that timestamp settings in the binary log have no effect on invocations of . Because can return different values even within the same statement, and is not affected by , it is nondeterministic and therefore unsafe for replication if statement-based binary logging is used. If that is a problem, you can use row-based logging. Alternatively, you can use the option to cause to be an alias for . This works if the option is used on both the replication source server and the replica. The nondeterministic nature of also means that indexes cannot be used for evaluating expressions that refer to it.\n• None If is called with no argument, it returns a Unix timestamp representing seconds since UTC. If is called with a argument, it returns the value of the argument as seconds since UTC. The server interprets as a value in the session time zone and converts it to an internal Unix timestamp value in UTC. (Clients can set the session time zone as described in Section 7.1.15, “MySQL Server Time Zone Support”.) The argument may be a , , or string, or a number in , , , or format. If the argument includes a time part, it may optionally include a fractional seconds part. The return value is an integer if no argument is given or the argument does not include a fractional seconds part, or if an argument is given that includes a fractional seconds part. When the argument is a column, returns the internal timestamp value directly, with no implicit “string-to-Unix-timestamp” conversion. The valid range of argument values is the same as for the data type: UTC to UTC for 32-bit platforms; for MySQL running on 64-bit platforms, the valid range of argument values for is UTC to UTC (corresponding to 32536771199.999999 seconds). Regardless of MySQL version or platform architecture, if you pass an out-of-range date to , it returns . If is , it returns . If you use and to convert between values in a non-UTC time zone and Unix timestamp values, the conversion is lossy because the mapping is not one-to-one in both directions. For example, due to conventions for local time zone changes such as Daylight Saving Time (DST), it is possible for to map two values that are distinct in a non-UTC time zone to the same Unix timestamp value. maps that value back to only one of the original values. Here is an example, using values that are distinct in the time zone: To use named time zones such as or , the time zone tables must be properly set up. For instructions, see Section 7.1.15, “MySQL Server Time Zone Support”. If you want to subtract columns, you might want to cast them to signed integers. See Section 14.10, “Cast Functions and Operators”.\n• None This function returns the week number for . The two-argument form of enables you to specify whether the week starts on Sunday or Monday and whether the return value should be in the range from to or from to . If the argument is omitted, the value of the system variable is used. See Section 7.1.8, “Server System Variables”. For a date value, the function returns . The following table describes how the argument works. Week 1 is the first week … with a Sunday in this year with 4 or more days this year with a Sunday in this year with 4 or more days this year with 4 or more days this year with a Monday in this year with 4 or more days this year with a Monday in this year For values with a meaning of “with 4 or more days this year,” weeks are numbered according to ISO 8601:1988:\n• None If the week containing January 1 has 4 or more days in the new year, it is week 1.\n• None Otherwise, it is the last week of the previous year, and the next week is week 1. If a date falls in the last week of the previous year, MySQL returns if you do not use , , , or as the optional argument: One might argue that should return because the given date actually occurs in the 52nd week of 1999. returns instead so that the return value is “the week number in the given year.” This makes use of the function reliable when combined with other functions that extract a date part from a date. If you prefer a result evaluated with respect to the year that contains the first day of the week for the given date, use , , , or as the optional argument."
    },
    {
        "link": "https://w3resource.com/mysql/date-and-time-functions/mysql-from_unixtime-function.php",
        "document": "MySQL FROM_UNIXTIME() returns a date /datetime from a version of unix_timestamp. The return value is in ‘YYYYY-MM-DD HH:MM:SS’ format or YYYYMMDDHHMMSS.uuuuuu format depending upon the context of the function ( whether numeric or string). If specified, the result is formatted according to a given format string.\n\nThis function is useful in -\n• FROM_UNIXTIME() is useful when you have Unix timestamps and want to represent them as dates and times in a readable format.\n• In graphical presentations, FROM_UNIXTIME() can be used to label axes or data points with human-readable date and time values.\n• When processing data that includes Unix timestamps, FROM_UNIXTIME() is used to transform the timestamps for better readability.\n• FROM_UNIXTIME() is valuable for converting Unix timestamp-based data into a format that's compatible with MySQL's date and datetime columns.\n• FROM_UNIXTIME() enables calculations that involve Unix timestamps, such as finding the time difference between two Unix timestamps in a readable format.\n• The function is valuable for data analysis tasks that involve Unix timestamps, allowing you to work with time-based data.\n• When analyzing log files or data that uses Unix timestamps to record events, FROM_UNIXTIME() helps convert timestamps into meaningful time representations.\n\nThe following statement will return a date time value from 1255033470.\n\nThe following statement will return a datetime value in numeric format from 1255033470.\n\nThe following statement will return a date time value from 1255033470. The datetime is formatted according to the format string %Y %D %M %h:%i:%s %x.\n\nYour browser does not support HTML5 video.\n\nClick here to see the MySQL Date and time functions."
    },
    {
        "link": "https://geeksforgeeks.org/from_unixtime-function-in-mysql",
        "document": "FROM_UNIXTIME() :\n\n This function in MySQL helps to return date /DateTime representation of a Unix timestamp. The format of returning value will be ‘YYYY-MM-DD HH:MM:SS’ or ‘YYYYMMDDHHMMSS’, depending on the context of the function.\n\nParameters :\n\n The function can accept two arguments as follows.\n• unix_timestamp –\n\n It is an internal timestamp value and it’s value can be produced by UNIX_TIMESTAMP() function.\n• format –\n\n The way in which the resulting value will be formatted\n\nResult :\n\n The function will return date /DateTime representation of a Unix timestamp. And the format of returning value will be ‘YYYY-MM-DD HH:MM:SS’ or ‘YYYYMMDDHHMMSS’, depending on the context of the function.\n\nExample-1 :\n\n Working of FROM_UNIXTIME() function with one parameter.\n\nExample-3 :\n\n Working of FROM_UNIXTIME() function when both parameters are passed."
    },
    {
        "link": "https://dev.mysql.com/doc/refman/9.0/en/date-and-time-functions.html",
        "document": "\n• None These functions perform date arithmetic. The argument specifies the starting date or datetime value. is an expression specifying the interval value to be added or subtracted from the starting date. is evaluated as a string; it may start with a for negative intervals. is a keyword indicating the units in which the expression should be interpreted. For more information about temporal interval syntax, including a full list of specifiers, the expected form of the argument for each value, and rules for operand interpretation in temporal arithmetic, see Temporal Intervals. The return value depends on the arguments:\n• None If is , the function returns .\n• None if the argument is a value and your calculations involve only , , and parts (that is, no time parts).\n• None if the argument is a value and the calculations involve only , , and parts (that is, no date parts).\n• None if the first argument is a (or ) value, or if the first argument is a and the value uses , , or , or if the first argument is of type and the value uses , , or .\n• None If the first argument is a dynamic parameter (for example, of a prepared statement), its resolved type is if the second argument is an interval that contains some combination of , , or values only; otherwise, its type is . To ensure that the result is , you can use to convert the first argument to . When adding a interval to a or value, and the resulting date includes a day that does not exist in the given month, the day is adjusted to the last day of the month, as shown here: mysql> SELECT DATE_ADD('2024-03-30', INTERVAL 1 MONTH) AS d1, > DATE_ADD('2024-03-31', INTERVAL 1 MONTH) AS d2; +------------+------------+ | d1 | d2 | +------------+------------+ | 2024-04-30 | 2024-04-30 | +------------+------------+ 1 row in set (0.00 sec)\n• None Formats the value according to the string. If either argument is , the function returns . The specifiers shown in the following table may be used in the string. The character is required before format specifier characters. The specifiers apply to other functions as well: , , . Day of the month with English suffix ( , , , , …) Time, 12-hour ( followed by or ) Week ( .. ), where Sunday is the first day of the week; mode 0 Week ( .. ), where Monday is the first day of the week; mode 1 Week ( .. ), where Sunday is the first day of the week; mode 2; used with Week ( .. ), where Monday is the first day of the week; mode 3; used with Year for the week where Sunday is the first day of the week, numeric, four digits; used with Year for the week, where Monday is the first day of the week, numeric, four digits; used with , for any not listed above Ranges for the month and day specifiers begin with zero due to the fact that MySQL permits the storing of incomplete dates such as . The language used for day and month names and abbreviations is controlled by the value of the system variable (Section 12.16, “MySQL Server Locale Support”). For the , , , and specifiers, see the description of the function for information about the mode values. The mode affects how week numbering occurs. returns a string with a character set and collation given by and so that it can return month and weekday names containing non-ASCII characters.\n• None Returns a representation of as a datetime or character string value. The value returned is expressed using the session time zone. (Clients can set the session time zone as described in Section 7.1.15, “MySQL Server Time Zone Support”.) is an internal timestamp value representing seconds since UTC, such as produced by the function. If is omitted, this function returns a value. If or is , this function returns . If is an integer, the fractional seconds precision of the is zero. When is a decimal value, the fractional seconds precision of the is the same as the precision of the decimal value, up to a maximum of 6. When is a floating point number, the fractional seconds precision of the datetime is 6. On 32-bit platforms, the maximum useful value for is 2147483647.999999, which returns UTC. On 64-bit platforms, the effective maximum is 32536771199.999999, which returns UTC. Regardless of platform or version, a greater value for than the effective maximum returns . is used to format the result in the same way as the format string used for the function. If is supplied, the value returned is a . If you use and to convert between values in a non-UTC time zone and Unix timestamp values, the conversion is lossy because the mapping is not one-to-one in both directions. For details, see the description of the function.\n• None Returns the current date and time as a value in or format, depending on whether the function is used in string or numeric context. The value is expressed in the session time zone. If the argument is given to specify a fractional seconds precision from 0 to 6, the return value includes a fractional seconds part of that many digits. returns a constant time that indicates the time at which the statement began to execute. (Within a stored function or trigger, returns the time at which the function or triggering statement began to execute.) This differs from the behavior for , which returns the exact time at which it executes. mysql> SELECT NOW(), SLEEP(2), NOW(); +---------------------+----------+---------------------+ | NOW() | SLEEP(2) | NOW() | +---------------------+----------+---------------------+ | 2006-04-12 13:47:36 | 0 | 2006-04-12 13:47:36 | +---------------------+----------+---------------------+ mysql> SELECT SYSDATE(), SLEEP(2), SYSDATE(); +---------------------+----------+---------------------+ | SYSDATE() | SLEEP(2) | SYSDATE() | +---------------------+----------+---------------------+ | 2006-04-12 13:47:44 | 0 | 2006-04-12 13:47:46 | +---------------------+----------+---------------------+ In addition, the statement affects the value returned by but not by . This means that timestamp settings in the binary log have no effect on invocations of . Setting the timestamp to a nonzero value causes each subsequent invocation of to return that value. Setting the timestamp to zero cancels this effect so that once again returns the current date and time. See the description for for additional information about the differences between the two functions.\n• None This is the inverse of the function. It takes a string and a format string . returns a value if the format string contains both date and time parts, or a or value if the string contains only date or time parts. If or is , the function returns . If the date, time, or datetime value extracted from cannot be parsed according to the rules followed by the server, returns and produces a warning. The server scans attempting to match to it. The format string can contain literal characters and format specifiers beginning with . Literal characters in must match literally in . Format specifiers in must match a date or time part in . For the specifiers that can be used in , see the function description. Scanning starts at the beginning of and fails if is found not to match. Extra characters at the end of are ignored. Unspecified date or time parts have a value of 0, so incompletely specified values in produce a result with some or all parts set to 0: Range checking on the parts of date values is as described in Section 13.2.2, “The DATE, DATETIME, and TIMESTAMP Types”. This means, for example, that “zero” dates or dates with part values of 0 are permitted unless the SQL mode is set to disallow such values. If the SQL mode is enabled, zero dates are disallowed. In that case, returns and generates a warning: In some previous versions of MySQL, it was possible to pass an invalid date string such as to this function. In MySQL 9.0, performs complete range checking and raises an error if the date after conversion would be invalid. You cannot use format to convert a year-week string to a date because the combination of a year and week does not uniquely identify a year and month if the week crosses a month boundary. To convert a year-week to a date, you should also specify the weekday: You should also be aware that, for dates and the date portions of datetime values, checks (only) the individual year, month, and day of month values for validity. More precisely, this means that the year is checked to be sure that it is in the range 0-9999 inclusive, the month is checked to ensure that it is in the range 1-12 inclusive, and the day of month is checked to make sure that it is in the range 1-31 inclusive, but the server does not check the values in combination. For example, returns . Enabling or disabling the server SQL mode has no effect on this behavior. See Section 13.2.2, “The DATE, DATETIME, and TIMESTAMP Types”, for more information.\n• None Returns the current date and time as a value in or format, depending on whether the function is used in string or numeric context. If the argument is given to specify a fractional seconds precision from 0 to 6, the return value includes a fractional seconds part of that many digits. returns the time at which it executes. This differs from the behavior for , which returns a constant time that indicates the time at which the statement began to execute. (Within a stored function or trigger, returns the time at which the function or triggering statement began to execute.) mysql> SELECT NOW(), SLEEP(2), NOW(); +---------------------+----------+---------------------+ | NOW() | SLEEP(2) | NOW() | +---------------------+----------+---------------------+ | 2006-04-12 13:47:36 | 0 | 2006-04-12 13:47:36 | +---------------------+----------+---------------------+ mysql> SELECT SYSDATE(), SLEEP(2), SYSDATE(); +---------------------+----------+---------------------+ | SYSDATE() | SLEEP(2) | SYSDATE() | +---------------------+----------+---------------------+ | 2006-04-12 13:47:44 | 0 | 2006-04-12 13:47:46 | +---------------------+----------+---------------------+ In addition, the statement affects the value returned by but not by . This means that timestamp settings in the binary log have no effect on invocations of . Because can return different values even within the same statement, and is not affected by , it is nondeterministic and therefore unsafe for replication if statement-based binary logging is used. If that is a problem, you can use row-based logging. Alternatively, you can use the option to cause to be an alias for . This works if the option is used on both the replication source server and the replica. The nondeterministic nature of also means that indexes cannot be used for evaluating expressions that refer to it.\n• None If is called with no argument, it returns a Unix timestamp representing seconds since UTC. If is called with a argument, it returns the value of the argument as seconds since UTC. The server interprets as a value in the session time zone and converts it to an internal Unix timestamp value in UTC. (Clients can set the session time zone as described in Section 7.1.15, “MySQL Server Time Zone Support”.) The argument may be a , , or string, or a number in , , , or format. If the argument includes a time part, it may optionally include a fractional seconds part. The return value is an integer if no argument is given or the argument does not include a fractional seconds part, or if an argument is given that includes a fractional seconds part. When the argument is a column, returns the internal timestamp value directly, with no implicit “string-to-Unix-timestamp” conversion. The valid range of argument values is the same as for the data type: UTC to UTC for 32-bit platforms; for MySQL running on 64-bit platforms, the valid range of argument values for is UTC to UTC (corresponding to 32536771199.999999 seconds). Regardless of MySQL version or platform architecture, if you pass an out-of-range date to , it returns . If is , it returns . If you use and to convert between values in a non-UTC time zone and Unix timestamp values, the conversion is lossy because the mapping is not one-to-one in both directions. For example, due to conventions for local time zone changes such as Daylight Saving Time (DST), it is possible for to map two values that are distinct in a non-UTC time zone to the same Unix timestamp value. maps that value back to only one of the original values. Here is an example, using values that are distinct in the time zone: To use named time zones such as or , the time zone tables must be properly set up. For instructions, see Section 7.1.15, “MySQL Server Time Zone Support”. If you want to subtract columns, you might want to cast them to signed integers. See Section 14.10, “Cast Functions and Operators”.\n• None This function returns the week number for . The two-argument form of enables you to specify whether the week starts on Sunday or Monday and whether the return value should be in the range from to or from to . If the argument is omitted, the value of the system variable is used. See Section 7.1.8, “Server System Variables”. For a date value, the function returns . The following table describes how the argument works. Week 1 is the first week … with a Sunday in this year with 4 or more days this year with a Sunday in this year with 4 or more days this year with 4 or more days this year with a Monday in this year with 4 or more days this year with a Monday in this year For values with a meaning of “with 4 or more days this year,” weeks are numbered according to ISO 8601:1988:\n• None If the week containing January 1 has 4 or more days in the new year, it is week 1.\n• None Otherwise, it is the last week of the previous year, and the next week is week 1. If a date falls in the last week of the previous year, MySQL returns if you do not use , , , or as the optional argument: One might argue that should return because the given date actually occurs in the 52nd week of 1999. returns instead so that the return value is “the week number in the given year.” This makes use of the function reliable when combined with other functions that extract a date part from a date. If you prefer a result evaluated with respect to the year that contains the first day of the week for the given date, use , , , or as the optional argument."
    },
    {
        "link": "https://docs.oracle.com/cd/E17952_01/mysql-8.0-en/date-and-time-functions.html",
        "document": "\n• None These functions perform date arithmetic. The argument specifies the starting date or datetime value. is an expression specifying the interval value to be added or subtracted from the starting date. is evaluated as a string; it may start with a for negative intervals. is a keyword indicating the units in which the expression should be interpreted. For more information about temporal interval syntax, including a full list of specifiers, the expected form of the argument for each value, and rules for operand interpretation in temporal arithmetic, see Temporal Intervals. The return value depends on the arguments:\n• None If is , the function returns .\n• None if the argument is a value and your calculations involve only , , and parts (that is, no time parts).\n• None (MySQL 8.0.28 and later:) if the argument is a value and the calculations involve only , , and parts (that is, no date parts).\n• None if the first argument is a (or ) value, or if the first argument is a and the value uses , , or , or if the first argument is of type and the value uses , , or .\n• None (MySQL 8.0.28 and later:) If the first argument is a dynamic parameter (for example, of a prepared statement), its resolved type is if the second argument is an interval that contains some combination of , , or values only; otherwise, its type is . In MySQL 8.0.22 through 8.0.27, when used in prepared statements, these functions returned values regardless of argument types. (Bug #103781) To ensure that the result is , you can use to convert the first argument to . When adding a interval to a or value, and the resulting date includes a day that does not exist in the given month, the day is adjusted to the last day of the month, as shown here:\n• None Formats the value according to the string. If either argument is , the function returns . The specifiers shown in the following table may be used in the string. The character is required before format specifier characters. The specifiers apply to other functions as well: , , . Day of the month with English suffix ( , , , , …) Time, 12-hour ( followed by or ) Week ( .. ), where Sunday is the first day of the week; mode 0 Week ( .. ), where Monday is the first day of the week; mode 1 Week ( .. ), where Sunday is the first day of the week; mode 2; used with Week ( .. ), where Monday is the first day of the week; mode 3; used with Year for the week where Sunday is the first day of the week, numeric, four digits; used with Year for the week, where Monday is the first day of the week, numeric, four digits; used with , for any not listed above Ranges for the month and day specifiers begin with zero due to the fact that MySQL permits the storing of incomplete dates such as . The language used for day and month names and abbreviations is controlled by the value of the system variable (Section 12.16, “MySQL Server Locale Support”). For the , , , and specifiers, see the description of the function for information about the mode values. The mode affects how week numbering occurs. returns a string with a character set and collation given by and so that it can return month and weekday names containing non-ASCII characters.\n• None Returns a representation of as a datetime or character string value. The value returned is expressed using the session time zone. (Clients can set the session time zone as described in Section 7.1.15, “MySQL Server Time Zone Support”.) is an internal timestamp value representing seconds since UTC, such as produced by the function. If is omitted, this function returns a value. If or is , this function returns . If is an integer, the fractional seconds precision of the is zero. When is a decimal value, the fractional seconds precision of the is the same as the precision of the decimal value, up to a maximum of 6. When is a floating point number, the fractional seconds precision of the datetime is 6. On 32-bit platforms, the maximum useful value for is 2147483647.999999, which returns UTC. On 64-bit platforms running MySQL 8.0.28 or later, the effective maximum is 32536771199.999999, which returns UTC. Regardless of platform or version, a greater value for than the effective maximum returns . is used to format the result in the same way as the format string used for the function. If is supplied, the value returned is a . If you use and to convert between values in a non-UTC time zone and Unix timestamp values, the conversion is lossy because the mapping is not one-to-one in both directions. For details, see the description of the function.\n• None Returns the current date and time as a value in or format, depending on whether the function is used in string or numeric context. The value is expressed in the session time zone. If the argument is given to specify a fractional seconds precision from 0 to 6, the return value includes a fractional seconds part of that many digits. returns a constant time that indicates the time at which the statement began to execute. (Within a stored function or trigger, returns the time at which the function or triggering statement began to execute.) This differs from the behavior for , which returns the exact time at which it executes. In addition, the statement affects the value returned by but not by . This means that timestamp settings in the binary log have no effect on invocations of . Setting the timestamp to a nonzero value causes each subsequent invocation of to return that value. Setting the timestamp to zero cancels this effect so that once again returns the current date and time. See the description for for additional information about the differences between the two functions.\n• None This is the inverse of the function. It takes a string and a format string . returns a value if the format string contains both date and time parts, or a or value if the string contains only date or time parts. If or is , the function returns . If the date, time, or datetime value extracted from cannot be parsed according to the rules followed by the server, returns and produces a warning. The server scans attempting to match to it. The format string can contain literal characters and format specifiers beginning with . Literal characters in must match literally in . Format specifiers in must match a date or time part in . For the specifiers that can be used in , see the function description. Scanning starts at the beginning of and fails if is found not to match. Extra characters at the end of are ignored. Unspecified date or time parts have a value of 0, so incompletely specified values in produce a result with some or all parts set to 0: Range checking on the parts of date values is as described in Section 13.2.2, “The DATE, DATETIME, and TIMESTAMP Types”. This means, for example, that “zero” dates or dates with part values of 0 are permitted unless the SQL mode is set to disallow such values. If the SQL mode is enabled, zero dates are disallowed. In that case, returns and generates a warning: Prior to MySQL 8.0.35, it was possible to pass an invalid date string such as to this function. In MySQL 8.0.35 and later, performs complete range checking and raises an error if the date after conversion would be invalid. You cannot use format to convert a year-week string to a date because the combination of a year and week does not uniquely identify a year and month if the week crosses a month boundary. To convert a year-week to a date, you should also specify the weekday: You should also be aware that, for dates and the date portions of datetime values, checks (only) the individual year, month, and day of month values for validity. More precisely, this means that the year is checked to be sure that it is in the range 0-9999 inclusive, the month is checked to ensure that it is in the range 1-12 inclusive, and the day of month is checked to make sure that it is in the range 1-31 inclusive, but the server does not check the values in combination. For example, returns . Enabling or disabling the server SQL mode has no effect on this behavior. See Section 13.2.2, “The DATE, DATETIME, and TIMESTAMP Types”, for more information.\n• None Returns the current date and time as a value in or format, depending on whether the function is used in string or numeric context. If the argument is given to specify a fractional seconds precision from 0 to 6, the return value includes a fractional seconds part of that many digits. returns the time at which it executes. This differs from the behavior for , which returns a constant time that indicates the time at which the statement began to execute. (Within a stored function or trigger, returns the time at which the function or triggering statement began to execute.) In addition, the statement affects the value returned by but not by . This means that timestamp settings in the binary log have no effect on invocations of . Because can return different values even within the same statement, and is not affected by , it is nondeterministic and therefore unsafe for replication if statement-based binary logging is used. If that is a problem, you can use row-based logging. Alternatively, you can use the option to cause to be an alias for . This works if the option is used on both the replication source server and the replica. The nondeterministic nature of also means that indexes cannot be used for evaluating expressions that refer to it.\n• None If is called with no argument, it returns a Unix timestamp representing seconds since UTC. If is called with a argument, it returns the value of the argument as seconds since UTC. The server interprets as a value in the session time zone and converts it to an internal Unix timestamp value in UTC. (Clients can set the session time zone as described in Section 7.1.15, “MySQL Server Time Zone Support”.) The argument may be a , , or string, or a number in , , , or format. If the argument includes a time part, it may optionally include a fractional seconds part. The return value is an integer if no argument is given or the argument does not include a fractional seconds part, or if an argument is given that includes a fractional seconds part. When the argument is a column, returns the internal timestamp value directly, with no implicit “string-to-Unix-timestamp” conversion. Prior to MySQL 8.0.28, the valid range of argument values is the same as for the data type: UTC to UTC. This is also the case in MySQL 8.0.28 and later for 32-bit platforms. For MySQL 8.0.28 and later running on 64-bit platforms, the valid range of argument values for is UTC to UTC (corresponding to 32536771199.999999 seconds). Regardless of MySQL version or platform architecture, if you pass an out-of-range date to , it returns . If is , it returns . If you use and to convert between values in a non-UTC time zone and Unix timestamp values, the conversion is lossy because the mapping is not one-to-one in both directions. For example, due to conventions for local time zone changes such as Daylight Saving Time (DST), it is possible for to map two values that are distinct in a non-UTC time zone to the same Unix timestamp value. maps that value back to only one of the original values. Here is an example, using values that are distinct in the time zone: To use named time zones such as or , the time zone tables must be properly set up. For instructions, see Section 7.1.15, “MySQL Server Time Zone Support”. If you want to subtract columns, you might want to cast them to signed integers. See Section 14.10, “Cast Functions and Operators”.\n• None This function returns the week number for . The two-argument form of enables you to specify whether the week starts on Sunday or Monday and whether the return value should be in the range from to or from to . If the argument is omitted, the value of the system variable is used. See Section 7.1.8, “Server System Variables”. For a date value, the function returns . The following table describes how the argument works. Week 1 is the first week … with a Sunday in this year with 4 or more days this year with a Sunday in this year with 4 or more days this year with 4 or more days this year with a Monday in this year with 4 or more days this year with a Monday in this year For values with a meaning of “with 4 or more days this year,” weeks are numbered according to ISO 8601:1988:\n• None If the week containing January 1 has 4 or more days in the new year, it is week 1.\n• None Otherwise, it is the last week of the previous year, and the next week is week 1. If a date falls in the last week of the previous year, MySQL returns if you do not use , , , or as the optional argument: One might argue that should return because the given date actually occurs in the 52nd week of 1999. returns instead so that the return value is “the week number in the given year.” This makes use of the function reliable when combined with other functions that extract a date part from a date. If you prefer a result evaluated with respect to the year that contains the first day of the week for the given date, use , , , or as the optional argument."
    },
    {
        "link": "https://stackoverflow.com/questions/26299149/timestamp-with-a-millisecond-precision-how-to-save-them-in-mysql",
        "document": "You need to be at MySQL version 5.6.4 or later to declare columns with fractional-second time datatypes. Not sure you have the right version? Try . If you get an error, you don't have the right version.\n\nFor example, will give you millisecond resolution in your timestamps, and will give you microsecond resolution on a *nix-style timestamp.\n\nwill give you the present time from your MySQL server's operating system with millisecond precision.\n\nIf you have a number of milliseconds since the Unix epoch, try this to get a DATETIME(3) value\n\nJavascript timestamps, for example, are represented in milliseconds since the Unix epoch.\n\nIf you're using an older version of MySQL and you need subsecond time precision, your best path is to upgrade. Anything else will force you into doing messy workarounds.\n\nIf, for some reason you can't upgrade, you could consider using or columns to store Javascript timestamps as if they were numbers. will still work OK. If you need the current time to store in such a column, you could use"
    },
    {
        "link": "https://stackoverflow.com/questions/9624284/current-timestamp-in-milliseconds",
        "document": "For everyone here, just listen / read the comments of Doin very good! The function will, when a datatime-string is given, contact a local time, based on the timezone of the MySQL Connection or the server, to a unix timestamp. When in a different timezone and dealing with daylight savings, one hour per year, this will go wrong!\n\nFor example, in the Netherlands, the last Sunday of October, a second after reaching 02:59:59 for the first time, the time will be set back to 02:00:00 again. When using the , or -functions from MySQL and passing it to the function, the timestamps will be wrong for a whole our.\n\nFor example, on Satudray 27th of October 2018, the time and timestamps went like this:\n\nBut on Sunday 27th of October 2019, when we've adjusted the clock one hour. Because the local time, doensn't include information whether it's +02:00 or +01:00, converting the time 02:00:00 the first time and the second time, both give the same timestamp (from the second 02:00:00) when using MYSQL's function. So, when checking the timestamps in the database, it did this: +1 +1 +3601 +1 +1 ... +1 +1 -3599 +1 +1 etc.\n\nRelaying on the UNIX_TIMESTAMP()-function from MySQL when converting local times, unfortunately, is very unreliable! Instead of using , we're now using the code below, which seams to solve the issue."
    },
    {
        "link": "https://forum.inductiveautomation.com/t/timestamp-milliseconds-in-mysql/647",
        "document": "I’m reading that MySQL does not support fractional seconds in the Timestamp data type. Is this true? Is there any guidance you can offer to work around this shortcoming to display fractional second data in a chart? Thanks.\n\nAh yes, I remember clearly the crushing feeling of defeat when I first discovered this shocking shortcoming of MySQL. Of course, we aren’t alone, see this google search. for lots of information about this issue. Your best hope for a workaround is to store the date in a DATETIME field, and then have a separate integer column for microseconds, and to select the date, do a Or - switch to SQL Server, Oracle, DB2, etc, etc. Don’t get me wrong, MySQL is a great database, but this is a really annoying bug.\n\nAll very cool. I got the view working, and the chart working using the view. The only thing that’s odd about it is this. There is 30 seconds worth of data at 100 msec intervals - 300 data points. It appears that the x axis resolution is 1 second, so when data is changing (and my pen is plotting points), there is a stack of 10 points every second. It only gets weirder from here. I created a database view to be able to use the fractional seconds in my timestamp in MySQL. In a MySQL query browser, when I SELECT all the data from the view and ORDER BY the artificial, fractional-second timestamp, the timestamp data is ordered like this. Apparently that’s also the way the chart orders the data because, when I plot the pen using a line, it connects the wrong ends of the stacks of data, creating a sawtooth effect. I.e. on descending data, the top of the first stack is connected to the bottom of the second stack, etc - sawtooth.\n• Can the resolution of the x-axis be changed?\n• Can the data be ordered by something other than the timestamp used as the x-axis values. (I have the original unit-second timestamp and the fractional seconds as separate fields in my view, it there’s some way to order by them.)\n• Why is the data being sorted this way in the first place?\n• The x-axis resolution is to the millisecond. Your fractional second data must not be coming through JDBC correctly. ( you could try upgrading the MySQL JDBC driver )\n• No, it always orders by the timestamp.\n• Thats a good question, and the one that you have to fix, although #1 might be a bigger blockage. There was a reason I signed my first reply to this thread with “Good luck”, now you’re seeing why.\n• Re the x-axis resolution, is there any way to view the dataset that is being plotted?\n• I have no idea if it would ever be used (except now by me) but it would be nice to have the option of a non-standard ORDER BY clause.\n• I’ll noodle a little with this one. Sadly, it is indeed too late for a database change. The boss’s demo is within the next hour or so, and he probably wouldn’t appreciate it if something happened and I blew the whole thing up. Again, thanks for all the good help.\n• I suppose, although I can’t think of any legitimate use other than getting around this limitation. Heres a thought - since this is for a demo could you just have 1 second chart resolution? Your only course of action at this point is to use the classic chart, and to manipulate the timestamps in Jython before you feed the data into the chart.\n\nNo DESC in the query. Also note that it is 0.0 then 0.9, etc, not descending order. 0.0, 0.9, 0.9 … 0.1, 1.9, 1.8 the descending within the 1.x, then descending within the 2.x, etc."
    },
    {
        "link": "https://dba.stackexchange.com/questions/10400/storing-time-with-milliseconds-in-database",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://geeksforgeeks.org/how-to-convert-timestamp-to-datetime-in-mysql",
        "document": "In this article, we are going to learn how to convert Timestamp to Datetime in MySQL.To execute these queries, we need to first add integer data(written in timestamp format) and then use the FROM_UNIXTIME() function to convert it into “Datetime” Data Type.\n\nThis function in MySQL returns a Datetime representation of a Unix Timestamp that has been entered as a parameter.\n\nFor the creation of a database, we will use the following query\n\nNow we use a created database with the help of the following query.\n\nWe will create a table with a single column having datatype int for storing the timestamp values. We use the following query to create a table:\n\nStep 4: Insertion of data into the created table\n\nWe will insert data in timestamp format into the table by using the following query:\n\nHere we need to show data in another format, so we first select it using the “SELECT statement” in MySQL. We will then pass the selected data from the TIMESTAMP_VAL column as a parameter in FROM_UNIXTIME() function. The syntax of the FROM_UNIXTIME() is :\n\nThe format is NOT compulsory here. If we do not write the format, the query used will be :\n\nIf we use the format ‘%Y %D %M %h:%i:%s’ , then the query used will be:"
    }
]