[
    {
        "link": "https://learn.microsoft.com/en-us/office/vba/api/excel.workbook.worksheets",
        "document": "Returns a Worksheets collection that represents all the worksheets in the specified workbook. Read-only Worksheets object.\n\nUsing this property without an object qualifier returns all the worksheets in the active workbook.\n\nThis property doesn't return macro sheets; use the Excel4MacroSheets property or the Excel4IntlMacroSheets property to return those sheets.\n\nThis example displays the value in cell A1 on Sheet1 in the active workbook.\n\nThis example displays the name of each worksheet in the active workbook.\n\nThis example adds a new worksheet to the active workbook and then sets the name of the worksheet.\n\nHave questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback."
    },
    {
        "link": "https://learn.microsoft.com/en-us/office/vba/library-reference/concepts/getting-started-with-vba-in-office",
        "document": "Getting started with VBA in Office\n\nAre you facing a repetitive clean up of fifty tables in Word? Do you want a particular document to prompt the user for input when it opens? Are you having difficulty figuring out how to get your contacts from Microsoft Outlook into a Microsoft Excel spreadsheet efficiently?\n\nYou can perform these tasks and accomplish a great deal more by using Visual Basic for Applications (VBA) for Office—a simple, but powerful programming language that you can use to extend Office applications.\n\nThis article is for experienced Office users who want to learn about VBA and who want some insight into how programming can help them to customize Office.\n\nThe Office suite of applications has a rich set of features. There are many different ways to author, format, and manipulate documents, email, databases, forms, spreadsheets, and presentations. The great power of VBA programming in Office is that nearly every operation that you can perform with a mouse, keyboard, or a dialog box can also be done by using VBA. Further, if it can be done once with VBA, it can be done just as easily a hundred times. (In fact, the automation of repetitive tasks is one of the most common uses of VBA in Office.)\n\nBeyond the power of scripting VBA to accelerate every-day tasks, you can use VBA to add new functionality to Office applications or to prompt and interact with the user of your documents in ways that are specific to your business needs. For example, you could write some VBA code that displays a pop up message that reminds users to save a document to a particular network drive the first time they try to save it.\n\nThis article explores some of the primary reasons to leverage the power of VBA programming. It explores the VBA language and the out-of-the-box tools that you can use to work with your solutions. Finally, it includes some tips and ways to avoid some common programming frustrations and missteps.\n\nWhen to use VBA and why\n\nThere are several principal reasons to consider VBA programming in Office.\n\nVBA is effective and efficient when it comes to repetitive solutions to formatting or correction problems. For example, have you ever changed the style of the paragraph at the top of each page in Word? Have you ever had to reformat multiple tables that were pasted from Excel into a Word document or an Outlook email? Have you ever had to make the same change in multiple Outlook contacts?\n\nIf you have a change that you have to make more than ten or twenty times, it may be worth automating it with VBA. If it is a change that you have to do hundreds of times, it certainly is worth considering. Almost any formatting or editing change that you can do by hand, can be done in VBA.\n\nThere are times when you want to encourage or compel users to interact with the Office application or document in a particular way that is not part of the standard application. For example, you might want to prompt users to take some particular action when they open, save, or print a document.\n\nDo you need to copy all of your contacts from Outlook to Word and then format them in some particular way? Or, do you need to move data from Excel to a set of PowerPoint slides? Sometimes simple copy and paste does not do what you want it to do, or it is too slow. Use VBA programming to interact with the details of two or more Office applications at the same time and then modify the content in one application based on the content in another.\n\nDoing things another way\n\nVBA programming is a powerful solution, but it is not always the optimal approach. Sometimes it makes sense to use other ways to achieve your aims.\n\nThe critical question to ask is whether there is an easier way. Before you begin a VBA project, consider the built-in tools and standard functionalities. For example, if you have a time-consuming editing or layout task, consider using styles or accelerator keys to solve the problem. Can you perform the task once and then use CTRL+Y (Redo) to repeat it? Can you create a new document with the correct format or template, and then copy the content into that new document?\n\nOffice applications are powerful; the solution that you need may already be there. Take some time to learn more about Office before you jump into programming.\n\nBefore you begin a VBA project, ensure that you have the time to work with VBA. Programming requires focus and can be unpredictable. Especially as a beginner, never turn to programming unless you have time to work carefully. Trying to write a \"quick script\" to solve a problem when a deadline looms can result in a very stressful situation. If you are in a rush, you might want to use conventional methods, even if they are monotonous and repetitive.\n\nUsing code to make applications do things\n\nYou might think that writing code is mysterious or difficult, but the basic principles use every-day reasoning and are quite accessible. Microsoft Office applications are created in such a way that they expose things called objects that can receive instructions, in much the same way that a phone is designed with buttons that you use to interact with the phone. When you press a button, the phone recognizes the instruction and includes the corresponding number in the sequence that you are dialing. In programming, you interact with the application by sending instructions to various objects in the application. These objects are expansive, but they have their limits. They can only do what they are designed to do, and they will only do what you instruct them to do.\n\nFor example, consider the user who opens a document in Word, makes a few changes, saves the document, and then closes it. In the world of VBA programming, Word exposes a Document object. By using VBA code, you can instruct the Document object to do things such as Open, Save, or Close.\n\nThe following section discusses how objects are organized and described.\n\nDevelopers organize programming objects in a hierarchy, and that hierarchy is called the object model of the application. Word, for example, has a top-level Application object that contains a Document object. The Document object contains Paragraph objects and so on. Object models roughly mirror what you see in the user interface. They are a conceptual map of the application and its capabilities.\n\nThe definition of an object is called a class, so you might see these two terms used interchangeably. Technically, a class is the description or template that is used to create, or instantiate, an object.\n\nOnce an object exists, you can manipulate it by setting its properties and calling its methods. If you think of the object as a noun, the properties are the adjectives that describe the noun and the methods are the verbs that animate the noun. Changing a property changes some quality of appearance or behavior of the object. Calling one of the object methods causes the object to perform some action.\n\nThe VBA code in this article runs against an open Office application where many of the objects that the code manipulates are already up and running; for example, the Application itself, the Worksheet in Excel, the Document in Word, the Presentation in PowerPoint, the Explorer and Folder objects in Outlook. Once you know the basic layout of the object model and some key properties of the Application that give access to its current state, you can start to extend and manipulate that Office application with VBA in Office.\n\nIn Word, for example, you can change the properties and invoke the methods of the current Word document by using the ActiveDocument property of the Application object. This ActiveDocument property returns a reference to the Document object that is currently active in the Word application. \"Returns a reference to\" means \"gives you access to.\"\n\nThe following code does exactly what it says; that is, it saves the active document in the application.\n\nRead the code from left to right, \"In this Application, with the Document referenced by ActiveDocument, invoke the Save method.\" Be aware that Save is the simplest form of method; it does not require any detailed instructions from you. You instruct a Document object to Save and it does not require any more input from you.\n\nIf a method requires more information, those details are called parameters. The following code runs the SaveAs method, which requires a new name for the file.\n\nValues listed in parentheses after a method name are the parameters. Here, the new name for the file is a parameter for the SaveAs method.\n\nYou use the same syntax to set a property that you use to read a property. The following code executes a method to select cell A1 in Excel and then to set a property to put something in that cell.\n\nThe first challenge in VBA programming is to get a feeling for the object model of each Office application and to read the object, method, and property syntax. The object models are similar in all Office applications, but each is specific to the kind of documents and objects that it manipulates.\n\nIn the first line of the code snippet, there is the Application object, Excel this time, and then the ActiveSheet, which provides access to the active worksheet. After that is a term not as familiar, Range, which means \"define a range of cells in this way.\" The code instructs Range to create itself with just A1 as its defined set of cells. In other words, the first line of code defines an object, the Range, and runs a method against it to select it. The result is automatically stored in another property of the Application called Selection.\n\nThe second line of code sets the Value property of Selection to the text \"Hello World\", and that value appears in cell A1.\n\nThe simplest VBA code that you write might simply gain access to objects in the Office application that you are working with and set properties. For example, you could get access to the rows in a table in Word and change their formatting in your VBA script.\n\nThat sounds simple, but it can be incredibly useful; once you can write that code, you can harness all of the power of programming to make those same changes in several tables or documents, or make them according to some logic or condition. For a computer, making 1000 changes is no different from making 10, so there is an economy of scale here with larger documents and problems, and that is where VBA can really shine and save you time.\n\nNow that you know something about how Office applications expose their object models, you are probably eager to try calling object methods, setting object properties, and responding to object events. To do so, you must write your code in a place and in a way that Office can understand; typically, by using the Visual Basic Editor. Although it is installed by default, many users don't know that it is even available until it is enabled on the ribbon.\n\nAll Office applications use the ribbon. One tab on the ribbon is the Developer tab, where you access the Visual Basic Editor and other developer tools. Because Office does not display the Developer tab by default, you must enable it by using the following procedure:\n• None On the File tab, choose Options to open the Options dialog box.\n• None Choose Customize Ribbon on the left side of the dialog box.\n• None Under Choose commands from on the left side of the dialog box, select Popular Commands.\n• None Under Customize the Ribbon on the right side of the dialog box, select Main Tabs in the drop down list box, and then select the Developer checkbox.\n\nAfter you enable the Developer tab, it is easy to find the Visual Basic and Macros buttons.\n\nTo protect Office users against viruses and dangerous macro code, you cannot save macro code in a standard Office document that uses a standard file extension. Instead, you must save the code in a file with a special extension. For example you cannot save macros in a standard Word document with a .docx extension; instead, you must use a special Word Macro-Enabled Document with a .docm extension.\n\nWhen you open a .docm file, Office security might still prevent the macros in the document from running, with or without telling you. Examine the settings and options in the Trust Center on all Office applications. The default setting disables macro from running, but warns you that macros have been disabled and gives you the option to turn them back on for that document.\n\nYou can designate specific folders where macros can run by creating Trusted Locations, Trusted Documents, or Trusted Publishers. The most portable option is to use Trusted Publishers, which works with digitally signed documents that you distribute. For more information about the security settings in a particular Office application, open the Options dialog box, choose Trust Center, and then choose Trust Center Settings.\n\nWhen you choose the Macro button on the Developer tab, it opens the Macros dialog box, which gives you access to VBA subroutines or macros that you can access from a particular document or application. The Visual Basic button opens the Visual Basic Editor, where you create and edit VBA code.\n\nAnother button on the Developer tab in Word and Excel is the Record Macro button, which automatically generates VBA code that can reproduce the actions that you perform in the application. Record Macro is a terrific tool that you can use to learn more about VBA. Reading the generated code can give you insight into VBA and provide a stable bridge between your knowledge of Office as a user and your knowledge as a programmer. The only caveat is that the generated code can be confusing because the Macro editor must make some assumptions about your intentions, and those assumptions are not necessarily accurate.\n• None Open Excel to a new Workbook and choose the Developer tab in the ribbon. Choose Record Macro and accept all of the default settings in the Record Macro dialog box, including Macro1 as the name of the macro and This Workbook as the location.\n• None Choose OK to begin recording the macro. Note how the button text changes to Stop Recording. Choose that button the instant you complete the actions that you want to record.\n• None Choose cell B1 and type the programmer's classic first string: Hello World. Stop typing and look at the Stop Recording button; it is grayed out because Excel is waiting for you to finish typing the value in the cell.\n• None Choose cell B2 to complete the action in cell B1, and then choose Stop Recording.\n• None Choose Macros on the Developer tab, select Macro1 if it is not selected, and then choose Edit to view the code from Macro1 in the Visual Basic Editor.\n\nLooking at the code\n\nThe macro that you created should look similar to the following code.\n\nBe aware of the similarities to the earlier code snippet that selected text in cell A1, and the differences. In this code, cell B1 is selected, and then the string \"Hello World\" is applied to the cell that has been made active. The quotes around the text specify a string value as opposed to a numeric value.\n\nRemember how you chose cell B2 to display the Stop Recording button again? That action shows up as a line of code as well. The macro recorder records every keystroke.\n\nThe lines of code that start with an apostrophe and colored green by the editor are comments that explain the code or remind you and other programmers the purpose of the code. VBA ignores any line, or portion of a line, that begins with a single quote. Writing clear and appropriate comments in your code is an important topic, but that discussion is out of the scope of this article. Subsequent references to this code in the article don't include those four comment lines.\n\nWhen the macro recorder generates the code, it uses a complex algorithm to determine the methods and the properties that you intended. If you don't recognize a given property, there are many resources available to help you. For example, in the macro that you recorded, the macro recorder generated code that refers to the FormulaR1C1 property. Not sure what that means?\n\nSelect FormulaR1C1 in the recorded macro and press F1. The Help system runs a quick search, determines that the appropriate subjects are in the Excel Developer section of the Excel Help, and lists the FormulaR1C1 property. You can choose the link to read more about the property, but before you do, be aware of the Excel Object Model Reference link near the bottom of the window. Choose the link to view a long list of objects that Excel uses in its object model to describe the Worksheets and their components.\n\nChoose any one of those to see the properties and methods that apply to that particular object, along with cross references to different related options. Many Help entries also have brief code examples that can help you. For example, you can follow the links in the Borders object to see how to set a border in VBA.\n\nThe Borders code looks different from the recorded macro. One thing that can be confusing with an object model is that there is more than one way to address any given object, cell A1 in this example.\n\nSometimes the best way to learn programming is to make minor changes to some working code and see what happens as a result. Try it now. Open Macro1 in the Visual Basic Editor and change the code to the following.\n\nYou don't need to save the code to try it out, so return to the Excel document, choose Macros on the Developer tab, choose Macro1, and then choose Run. Cell A1 now contains the text Wow! and has a double-line border around it.\n\nFigure 3. Results of your first macro\n\nYou just combined macro recording, reading the object model documentation, and simple programming to make a VBA program that does something. Congratulations!\n\nDid not work? Read on for debugging suggestions in VBA.\n\nThe VBA community is very large; a search on the Web can almost always yield an example of VBA code that does something similar to what you want to do. If you cannot find a good example, try to break the task down into smaller units and search on each of those, or try to think of a more common, but similar problem. Starting with an example can save you hours of time.\n\nThat does not mean that free and well-thought-out code is on the Web waiting for you to come along. In fact, some of the code that you find might have bugs or mistakes. The idea is that the examples you find online or in VBA documentation give you a head start. Remember that learning programming requires time and thought. Before you get in a big rush to use another solution to solve your problem, ask yourself whether VBA is the right choice for this problem.\n\nProgramming can get complex quickly. It's critical, especially as a beginner, that you break the problem down to the smallest possible logical units, then write and test each piece in isolation. If you have too much code in front of you and you get confused or muddled, stop and set the problem aside. When you come back to the problem, copy out a small piece of the problem into a new module, solve that piece, get the code working, and test it to ensure that it works. Then move on to the next part.\n\nThere are two main types of programming errors: syntax errors, which violate the grammatical rules of the programming language, and run-time errors, which look syntactically correct, but fail when VBA attempts to execute the code.\n\nAlthough they can be frustrating to fix, syntax errors are easy to catch; the Visual Basic Editor beeps and flashes at you if you type a syntax error in your code.\n\nFor example, string values must be surrounded by double quotes in VBA. To find out what happens when you use single quotes instead, return to the Visual Basic Editor and replace the \"Wow!\" string in the code example with 'Wow!' (that is, the word Wow enclosed in single quotes). If you choose the next line, the Visual Basic Editor reacts. The error \"Compile error: Expected: expression\" is not that helpful, but the line that generates the error turns red to tell you that you have a syntax error in that line and as a result, this program will not run.\n\nChoose OK and change the text back to\"Wow!\".\n\nRuntime errors are harder to catch because the programming syntax looks correct, but the code fails when VBA tries to execute it.\n\nFor example, open the Visual Basic Editor and change the Value property name to ValueX in your Macro, deliberately introducing a runtime error since the Range object does not have a property called ValueX. Go back to the Excel document, open the Macros dialog box and run Macro1 again. You should see a Visual Basic message box that explains the run-time error with the text, \"Object doesn't support this property of method.\" Although that text is clear, choose Debug to find out more.\n\nWhen you return to the Visual Basic Editor, it is in a special debug mode that uses a yellow highlight to show you the line of code that failed. As expected, the line that includes the ValueX property is highlighted.\n\nYou can make changes to VBA code that is running, so change ValueX back to Value and choose the little green play button underneath the Debug menu. The program should run normally again.\n\nIt's a good idea to learn how to use the debugger more deliberately for longer, more complex programs. At a minimum, learn a how to set break-points to stop execution at a point where you want to take a look at the code, how to add watches to see the values of different variables and properties as the code runs, and how to step through the code line by line. These options are all available in the Debug menu and serious debugger users typically memorize the accompanying keyboard shortcuts.\n\nTo open the Developer Reference that is built into Office Help, open the Help reference from any Office application by choosing the question mark in the ribbon or by pressing F1. Then, to the right of the Search button, choose the dropdown arrow to filter the contents. Choose Developer Reference. If you don't see the table of contents in the left panel, choose the little book icon to open it, and then expand the Object Model Reference from there.\n\nFigure 4. Filtering on developer Help applies to all Office applications\n\nTime spent browsing the Object Model reference pays off. After you understand the basics of VBA syntax and the object model for the Office application that you are working with, you advance from guesswork to methodical programming.\n\nOf course the Microsoft Office Developer Center is an excellent portal for articles, tips, and community information.\n\nAll programmers get stuck sometimes, even after reading every reference article they can find and losing sleep at night thinking about different ways to solve a problem. Fortunately, the Internet has fostered a community of developers who help each other solve programming problems.\n\nAny search on the Web for \"office developer forum\" reveals several discussion groups. You can search on \"office development\" or a description of your problem to discover forums, blog posts, and articles as well.\n\nIf you have done everything that you can to solve a problem, don't be afraid to post your question to a developers forum. These forums welcome posts from newer programmers and many of the experienced developers are glad to help.\n\nThe following are a few points of etiquette to follow when you post to a developer forum:\n• None Before you post, look on the site for an FAQ or for guidelines that members want you to follow. Ensure that you post content that is consistent with those guidelines and in the correct section of the forum.\n• None Include a clear and complete code sample, and consider editing your code to clarify it for others if it is part of a longer section of code.\n• None Describe your problem clearly and concisely, and summarize any steps that you have taken to solve the problem. Take the time to write your post as well as you can, especially if you are flustered or in a hurry. Present the situation in a way that will make sense to readers the first time that they read the problem statement.\n• None Be polite and express your appreciation.\n\nGoing further with programming\n\nAlthough this article is short and only scratches the surface of VBA and programming, it is hopefully enough to get you started.\n\nThis section briefly discusses a few more key topics.\n\nIn the simple examples in this article you manipulated objects that the application had already created. You might want to create your own objects to store values or references to other objects for temporary use in your application. These are called variables.\n\nTo use a variable in VBA, must tell VBA which type of object the variable represents by using the Dim statement. You then set its value and use it to set other variables or properties.\n\nThe simple programs in this article execute one line at a time, from the top down. The real power in programming comes from the options that you have to determine which lines of code to execute, based on one or more conditions that you specify. You can extend those capabilities even further when you can repeat an operation many times. For example, the following code extends Macro1.\n\nType or paste the code into the Visual Basic Editor and then run it. Follow the directions in the message box that appears and change the text in cell A1 from Wow! to Yes! and run it again to see the power of looping. This code snippet demonstrates variables, branching and looping. Read it carefully after you see it in action and try to determine what happens as each line executes.\n\nAll of my Office applications: example code\n\nHere are a few scripts to try; each solves a real-world Office problem.\n\nBe aware that there are situations in which you might want to automate email in Outlook; you can use templates as well.\n\nBe aware that you can select a column of cells and run this macro to delete all rows in the selected column that have a blank cell.\n\nBe aware that this code loops through all of the slides and deletes all text boxes that don't have any text. The count variable decrements instead of increments because each time the code deletes an object, it removes that object from the collection, which reduces the count.\n\nBe aware that this code copies the currently open contact in Outlook into the open Word document. This code only works if there is a contact currently open for inspection in Outlook.\n\nHave questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback."
    },
    {
        "link": "https://excelmacromastery.com/excel-vba-workbook",
        "document": "The Complete Guide To The VBA Workbook\n\n“We are drowning in information but starved for knowledge.” – John Naisbitt\n\nThis post provides a complete guide to using the VBA Workbook.\n\nIf you want to use VBA to Open a Workbook then check out Open Workbook\n\nIf you want to use VBA to create a new workbook go to Create New Workbook\n\nFor all other VBA Workbook tasks, check out the quick guide below.\n\nThe following table provides a quick how-to guide on the main VBA workbook tasks\n\nIf you are a member of the website, click on the image below to access the webinar.\n\nGetting Started with the VBA Workbook\n\nWe can access any open workbook using the code Workbooks(“Example.xlsm“). Simply replace Example.xlsm with the name of the workbook you wish to use.\n\n\n\n \n\n The following example shows you how to write to a cell on a worksheet. You will notice we had to specify the workbook, worksheet and range of cells.\n\n\n\n \n\n This example may look a little be confusing to a new user but it is actually quite simple.\n\nThe first part up to the decimal point is the Workbook, the second part is the Worksheet and the third is the Range. Here are some more examples of writing to a cell\n\n\n\n \n\n You can see the simple pattern here. You can write to any cell in any worksheet from any workbook. It is just a matter of changing the workbook name, worksheet name and the range to suit your needs.\n\nTake a look at the workbook part\n\n\n\n \n\n The Workbooks keyword refers to a collection of all open workbooks. Supplying the workbook name to the collection gives us access to that workbook. When we have the object we can use it to perform tasks with the workbook.\n\nWhen you use the Workbooks collection to access a workbook, you may get the error message:\n\nThis means that VBA cannot find the workbook you passed as a parameter.\n\nThis can happen for the following reasons\n• The workbook is currently closed.\n• You spelled the name wrong.\n• You created e new workbook (e.g. Book1) and tried to access it using Workbooks(“Book1.xlsx”). It’s name is not Book1.xlsx until it is saved for the first time.\n• (Excel 2007/2010 only) If you are running two instances of Excel then Workbooks() only refers to to the workbooks open in the current Excel instance.\n• You passed a number as Index and it is greater than the number of workbooks open e.g. you used Workbooks(3) and only two workbooks are open.\n\n\n\n \n\n If you cannot resolve the error then use either of the functions in the section Finding all open Workbooks. These will print the names of all open workbooks to the Immediate Window(Ctrl + G).\n\nExamples of Using the VBA Workbook\n\nThe following examples show what you can do with the workbook.\n\nNote: To try this example create two open workbooks called Test1.xlsx and Test2.xlsx.\n\n\n\n \n\n Note: In the code examples I use Debug.Print a lot. This function prints values to the Immediate Window. To view this window select View->Immediate Window from the menu( Shortcut is Ctrl + G)\n\nYou can also use an Index number with Workbooks(). The index refers to the order the Workbook was open or created.\n\n\n\n Workbooks(1) refers to the workbook that was opened first. Workbooks(2) refers to the workbook that was opened second and so on.\n\n\n\n \n\n In this example, we used Workbooks.Count. This is the number of workbooks that are currently in the Workbooks collection. That is, the number of workbooks currently open. So using it as the Index gives us the last workbook that was opened\n\nUsing the index is not really useful unless you really need to know the order. For this reason, you should avoid using it. You should use the workbook name with Workbooks() instead.\n\nSometimes you may want to access all the workbooks that are open. In other words, all the items in the Workbooks() collection.\n\nYou can do this using the For Each loop.\n\n\n\n \n\n You can also use the standard For loop to access all the open workbooks\n\n\n\n \n\n For accessing workbooks, either of these Loops is fine. The standard For loop is useful if you want to use a different order or you need to use a counter.\n\nNote: Both examples read in the order of the first opened to the last opened. If you want to read in reverse order(last to first) you can do this\n\nSo far we have dealt with workbooks that are already open. Of course, having to manually open a workbook before running a Macro, defeats the purpose of automating tasks. The Open Workbook task should be performed by VBA.\n\nThe following VBA code opens the workbook “Book1.xlsm” in the “C:\\Docs” folder\n\n\n\n \n\n It is a good idea to check a workbook actually exists before you try to open it. This will prevent you getting errors. The Dir function allows you to easily do this .\n\nIf you are opening a workbook as Read-Only, it doesn’t matter if it is already open. However, if you’re going to update data in a workbook then it is a good idea to check if it is already open.\n\nThe function below can be used to check if the workbook is currently open. If not, then it will open the workbook. In either case you will end up with the workbook opened.\n\nYou can use this function like this\n\nThis code is fine is most situations. However, if the workbook could be currently open in read-only mode or could be currently opened by another user then you may want to use a slightly different approach.\n\nAn easy way to deal this with this scenario is to insist that the file must be closed for the application to run successfully. You can use the function below to simply check is the file already open and if so inform the user that it must be closed first.\n\n\n\n \n\n An example of using this function is shown below. In this case, if the workbook is already open then you inform the user that is must be closed for the macro to proceed.\n\n\n\n \n\n If you need to check if the workbook is open in another instance of Excel you can use the ReadOnly attribute of the workbook. It will be set to true if it is open in another instance.\n\nTo Close a Workbook in Excel VBA is very simple. You simply call the Close method of the workbook.\n\n\n\n \n\n Normally when you close a workbook in VBA, you don’t want to see messages from Excel asking if you want to save the file.\n\nYou can specify whether to save the workbook or not and then the Excel messages will not appear.\n\n\n\n \n\n Obviously, you cannot save changes to a workbook that is currently open as read-only.\n\nWe have just seen that you can save a workbook when you close it. If you want to save it any other stage you can simply use the Save method\n\n\n\n \n\n You can also use the SaveAs method\n\n\n\n \n\n The Workbook SaveAs method comes with twelve parameters which allow you to add a password, set the file as read-only and so on. You can see the details here.\n\n\n\n \n\n You can also use VBA to save the workbook as a copy using SaveCopyAs\n\nIf the workbook is open you can use the two methods in the above section to create a copy i.e. SaveAs and SaveCopyAs.\n\n \n\n \n\n If you want to copy a workbook without opening it then you can use FileCopy as the following example demonstrates\n\nUsing the File Dialog To Open a Workbook\n\nThe previous section shows you how to open a workbook with a given name. Sometimes you may want the user to select the workbook. You can easily use the Windows File Dialog shown here.\n\nThe FileDialog is configurable and you can use it to\n\n\n\n \n\n If you just want the user to select the file you can use the GetOpenFilename function.\n\n\n\n \n\n The following function opens a workbook using the File Dialog. The function returns the full file name if a file was selected. If the user cancels it displays a message and returns an empty string.\n\n\n\n \n\n When you call this function you have to check for the user cancelling the dialog. The following example shows you how to easily call the UserSelectWorkbook function and handle the case of the user cancelling\n\n\n\n \n\n You can customise the dialog by changing the Title, Filters and AllowMultiSelect in the UserSelectWorkbook function.\n\nThere is an easier way to access the current workbook than using Workbooks(). You can use the keyword ThisWorkbook. It refers to the current workbook i.e. the workbook that contains the VBA code.\n\nIf our code is in a workbook call MyVBA.xlsm then ThisWorkbook and Workbooks(“MyVBA.xlsm”) refer to the same workbook.\n\n\n\n \n\n Using ThisWorkbook is more useful than using Workbooks(). With ThisWorkbook we do not need to worry about the name of the file. This gives us two advantages:\n• Changing the file name will not affect the code\n• Copying the code to another workbook will not require a code change\n\n\n\n \n\n These may seem like very small advantages. The reality is your filenames will change all the time. Using ThisWorkbook means your code will still work fine.\n\n\n\n \n\n The following example shows two lines of code. One using ThisWorkbook and one using Workbooks(). The one using Workbooks will no longer work if the name of MyVBA.xlsm changes.\n\nActiveWorkbook refers to the workbook that is currently active. This is the one that the user last clicked on.\n\nThis can seem useful at first. The problem is that any workbook can become active by a simple mouse click. This means you could easily write data to the wrong workbook.\n\nUsing ActiveWorkbook also makes the code hard to read. It may not be obvious from the code which workbook should be the active one.\n\nI hope I made it clear that you should avoid using ActiveWorkbook unless you really have to. If you must then be very careful.\n\nExamples of the Accessing the Workbook\n\nWe’ve looked at all the ways of accessing a workbook. The following code shows examples of these ways\n\nThe reason for declaring a workbook variable is to make your code easier to read and understand. It is easier to see the advantage of using an example\n\n\n\n \n\n You can set a workbook variable with any of the access methods we have seen.\n\nThe following shows you the same code without a workbook variable\n\n\n\n \n\n In these examples the difference is not major. However, when you have a lot of code, using a variable is useful particularly for worksheet and ranges where the names tend to be long e.g. thisWorkbook.Worksheets(“Sheet1”).Range(“A1”).\n\nYou can name the workbook variable to be something like wrkRead or wrkWrite. Then at a glance you can see what this workbook is being used for.\n\nTo create a new workbook you use the Workbooks Add function. This function creates a new blank workbook. It is the same as selecting New Workbook from the Excel File menu.\n\n\n\n \n\n When you create a new workbook you will generally want to save it. The following code shows you how to do this.\n\n\n\n \n\n When you create a new workbook it normally contains three sheets. This is determined by the property Application.SheetsInNewWorkbook.\n\n\n\n \n\n If you want to have a different number of sheets in a new workbook then you change this property before you create the new workbook. The following example shows you how to create a new workbook with seven sheets.\n\nThe With keyword and the Workbook\n\nThe With keyword makes reading and writing VBA code easier. Using With means you only need to mention the item once. With is used with Objects. These are items such as Workbooks, Worksheets and Ranges.\n\n\n\n \n\n The following example has two Subs. The first is similar to code we have seen so far. The second uses the With keyword. You can see the code is much clearer in the second Sub. The keywords End With mark the finish of a section code using With.\n\nThe following is a brief summary of the main points of this post\n• To get the workbook containing the code use ThisWorkbook.\n• To get any open workbook use Workbooks(“Example.xlsx”).\n• Allow the user to select a file using the UserSelectWorkbook function provided above.\n• To create a copy of an open workbook use the SaveAs property with a filename.\n• To create a copy of a workbook without opening use the FileCopy function.\n• To make your code easier to read and write use the With keyword.\n• Another way to make your code clear is to use a Workbook variables\n• To run through all open Workbooks use For Each wk in Workbooks where wk is a workbook variable.\n• Try to avoid using ActiveWorkbook and Workbooks(Index) as their reference to a workbook is temporary.\n\nYou can see a quick guide to the topic at the top of this post\n\nThis was an in-depth post about a very important element of VBA – the Workbook. I hope you found it beneficial. Excel is great at providing many ways to perform similar actions but the downside is it can lead to confusion at times.\n\nTo get the most benefit from this post I recommend you try out the examples. Create some workbooks and play around with the code. Make changes to the code and see how the changes affect the outcome. Practice is the best way to learn VBA.\n\nIf you found this post useful then feel free to share it with others using the bar at the side.\n\nFree VBA Tutorial If you are new to VBA or you want to sharpen your existing VBA skills then why not try out the The Ultimate VBA Tutorial.\n\nRelated Training: Get full access to the Excel VBA training webinars and all the tutorials."
    },
    {
        "link": "https://geeksforgeeks.org/workbook-and-worksheet-object-in-excel-vba",
        "document": "Excel VBA is an object-oriented programming language, which means in excel every component is an object. The superset of all the objects of excel is the excel application itself. The Excel Application Object is the root of all the other objects in excel. It contains Workbook Object. The Workbook Object contains another object such as Worksheet Object which includes all the worksheets present in a particular workbook. The Worksheet Object contains Cells Object. To perform any task or operation in excel we need to follow this excel object hierarchy.\n\nIn excel VBA, the workbooks object represents the collection of the workbook which are open in the excel application at the same time. This is the reason we write it as plural- Workbooks Object, which means it contains more than one workbook. In order to access a single workbook from the workbooks object, we can use the following VBA to access it from its name.\n\nHow to Refer a Workbook in VBA?\n\nTo refer a workbook in excel VBA, we can use the following different methods:\n\nWe can easily refer to a workbook using its name. We need to define a procedure in VBA and declare our excel workbook name. Make sure that the user name is only if the workbook is not saved otherwise we need to define the name along with its extension.\n\nThe excel application maintains an index order for all the workbooks we open. It gives numbers 1 to the first workbook, 2 to the second workbook, and so on. We can also use these numbers to refer to the workbook.\n\nWe can refer to a workbook using the ActiveWorkbook property. Using ActiveWorkbook we can refer to the workbook which is in an active state, which means the workbook is open in excel.\n\nLike any other object-oriented programming language, In VBA whenever we refer to an object it gives us access to all the methods and properties of that object. Similarly, when we access the Workbook Object, we get access to all its properties and methods.\n\nIn order to access the methods of the workbook object we will use the dot(.) operator. Once, we use our workbooks object as soon as we will use the dot(.) operator, it will display the list of methods associated with that particular object.\n\nSimilar to methods, we can use the dot(.) operator to access the properties of the workbook object.\n\nAs we can see, we have 3 different sheets currently open in our excel, if we run our procedure it will display the count as 3 in a message box.\n\nIn excel VBA, the worksheets object represents the collection of the worksheets which are open in the excel workbook. This is the reason we write it as plural- Worksheets Object, which means it contains more than one worksheet.\n\nHow to Refer a Worksheet in VBA?\n\nIn excel, we can refer to a sheet using its name. By default, Excel creates sheets in natural number ordering. For example, Sheet1, Sheet2, etc. We can also give our own name to these sheets.\n\nWe can also use sheet numbers to refer to a sheet in excel. The two operations to refer to a sheet, Sheets() and Worksheets() work in different ways while accessing the sheets by number.\n\nIn excel VBA, we can also refer to a sheet using the ActiveSheet property.\n\nAs above, we can see we have the GFGCourse sheet active. When we run our procedure, it will pop up a message box with the active sheet name is.\n\nSimilar to the Workbook object, Worksheet Object also comes up with different methods and properties. In excel VBA, we can access methods and properties of excel worksheet objects using the dot(.) operator."
    },
    {
        "link": "https://documentation.help/VBAXL10",
        "document": ""
    },
    {
        "link": "https://xelplus.com/excel-vba-check-if-file-folder-exists-dir",
        "document": "What Does VBA Dir Function Do?\n\nThe VBA DIR function is a powerful tool in Excel. It helps you find files or folders that match a specific name or pattern.\n\nHere are some use cases for VBA DIR:\n• Find Files or Folders: Use DIR to search for files or folders. For example, you can find all Excel files in a folder.\n• Check if a File Exists: Provide the name of a file. If it exists, DIR returns the name. If not, it returns an empty string.\n• List Files: Use DIR in a loop to get a list of all matching files or folders.\n• Path: The name or pattern of the file(s) you’re looking for. If the name is not found, DIR returns an empty string\n• Attributes (Optional): The available attributes are listed in the table below:\n\n💡 The default is vbNormal, which are files with no specific attributes.\n\nWildcards are symbols that represent any character(s) and are very useful for pattern matching.\n• el – Matches any text ending with “el” Excel – Matches any text starting with “Exc”, ending with “el”, and anything in between\n• ??cel – The first two characters can be anything, but the last three must be “cel”\n• Ex?el – The first two characters must be “Ex”, the fourth and fifth must be “el”, but the third can be anything\n\nWe will use the VBA DIR function to check if a file exists. If it doesn’t, we will show a message. If it does, we will open the file.\n• Open the Visual Basic Editor: Press ALT + F11 and create a new module (i.e. “LessonsFilesFolders”).\n• Declare Variables: We declare a variable named FileName to hold the returned value.\n• Check for File: The next step is to query a folder for a file and return the filename if it exists, or an empty string if the file does not exist. We will store the response in the FileName variable we created in the previous step.\n• In our example we will use the following code:\n• If the file does not exist, the DIR function will return an empty string. We will test for the empty string response with an IF statement. If the file does not exist, we will display a message stating such. If the file does exist, this first version will simply show the filename in a message box.\n• The completed code should look like the following:\n• Run the code by pressing F5 and observe the response.\n\nThis confirms that the file exists in the defined folder.\n• We will also alter the code; instead of displaying a message, we will open the requested file.\n• The updated code should appear as follows:\n• Run the code by pressing F5 and observe that the file opens.\n\nWe will check if a folder exists. If it doesn’t, we will ask the user if they want to create it.\n\nWe will create two variables:\n• Folder – Hold only the folder name\n• We will set the Path variable to point to a folder that does not exist:\n• We will set the Folder variable to hold the folder location stored by the Path variable. Because this is a folder, we will use the optional constant vbDirectory in the DIR function.\n• As we did earlier, we will check to see if the response returns an empty string. If the Folder variable contains an empty string, we will prompt the user to ask if they wish to create the folder.\n• We need to store the user’s response, so we will create a variable to hold the response.\n• If the folder does not exist, we will display a message and store the user’s response in the Answer variable.\n• Now we will test the answer. We will use a Case statement to test the response.\n• If the user responds with “Yes”, we will create the folder. If the user responds with anything else, we will exit the subroutine.\n• If the folder does exist, we will inform the user of its existence with a message box response.\n• The completed code should look like the following:\n• Run the code by pressing F5. Because the folder does not exist, we are presented with the following message prompt.\n• If we answer “Yes”, the folder is created.\n• If we execute the macro a second time, we see the following response.\n• This is because the folder was created in the previous test.\n\nWe have demonstrated how you can use the DIR function in Excel VBA. It lets you test if a file or folder exists. You can then decide what to do based on the result.\n\nFeel free to Download the Workbook HERE.\n\nI’ve spent over 20 years helping businesses use data to improve their results. I've worked as an economist and a consultant. I spent 12 years in corporate roles across finance, operations, and IT—managing SAP and Oracle projects. As a 7-time Microsoft MVP, I have deep knowledge of tools like Excel and Power BI. I love making complex tech topics easy to understand. There’s nothing better than helping someone realize they can do it themselves. I’m always learning new things too and finding better ways to help others succeed."
    },
    {
        "link": "https://stackoverflow.com/questions/11573914/check-if-the-file-exists-using-vba",
        "document": "Use the Office object to have the user pick a file from the filesystem. Add a reference in your VB project or in the VBA editor to and look in the help. This is much better than having people enter full paths.\n\nHere is an example using to allow the user to choose multiple files. You could also use .\n\nThere are lots of options, so you'll need to see the full help files to understand all that is possible. You could start with Office 2007 FileDialog object (of course, you'll need to find the correct help for the version you're using)."
    },
    {
        "link": "https://trumpexcel.com/vba-dir-function",
        "document": "VBA has some useful functions that can take your automation in Excel to the next level.\n\nOne such function is the VBA DIR function.\n\nWhile by itself, it may seem like a simple function that does one specific thing.\n\nBut when you combine it with some other useful elements of the VBA coding language, you can create powerful stuff (covered in the examples later in this tutorial).\n\nWhat Does VBA Dir Function Do?\n\nUse VBA DIR function when you want to get the name of the file or a folder, using their path name.\n\nTo give you an example, if you have an Excel file in a folder, you can use the VBA DIR function to get the name of that Excel file (or any other type of file).\n\nWhat if I want to get the names of all the Excel files in the folder (or all the files – be it Excel file or not)?\n\nYou can do that too!\n\nWhen you use DIR function once, it returns the first file name in a folder. Now if you want to get the names of the second, third, fourth files as well, you can use the DIR function again (covered later as an example).\n• pathname: This is an optional argument. This can be the file name, folder name, or directory name. If pathname is not found, VBA DIR function returns a zero-length string (“”)\n• attributes: This is an optional argument. You can use this argument to specify some attributes and DIR function will return the file names based on those attributes. For example, if you want a list of all hidden files or read-only files (along with files with no attributes), you need to specify that in this argument.\n\nAttributes available to use in VBA DIR function (you can use one or more of these):\n\nIf you’re working with Windows, you can also use the wildcard characters in the DIR function.\n\nNote that you can not use these when working with VBA in Macintosh.\n\nUsing wildcards can be useful when:\n• You want to get the file names of a particular file type (such as .XLSX or .PPTX)\n• When you have a specific suffix/prefix in filenames and you want to get the names of these files/folders/directories. For example, if you want the names of all the files with the prefix 2019 in it, you can do that using wildcard characters.\n\nThere are three wildcard characters in Excel:\n• * (asterisk) – It represents any number of characters. For example, 2019* would give you the names of all the files with the prefix 2019 in it.\n• ? (question mark) – It represents one single character. For example, 2019? would give you the names of all the files that start with 2019 and has one more character in the name (such as 2019A, 2019B, 2019C, and so on)\n\nNote: There is one more wildcard character – tilde (~). Since it’s not used a lot, I have skipped its explanation. You can read more about it here if interested.\n\nNow let’s dive in and see some examples of using the VBA DIR function.\n\nExample 1 – Getting the File Name from its Path\n\nWhen you have the path of a file, you can use the DIR function to get the name of the file from it.\n\nFor example, the below code returns the name of the file and shows it in a message box.\n\nThe above code uses a variable ‘FileName’ to store the file name that is returned by the DIR function. It then uses a message box to display the file name (as shown below).\n\nAnd what happens when the file doesn’t exist?\n\nIn that case, the DIR function would return an empty string.\n\nThe below code uses an If Then Else statement to check whether the file exists or not. If the file doesn’t exist, it shows a message box with a text “File Doesn’t Exist”, else it shows the file name.\n\nExample 2 – Check if a Directory Exists or Not (and create if it doesn’t)\n\nThe below code checks whether the folder ‘Test’ exists or not.\n\nA message box is used to show a message in case the folder exists or when it doesn’t exist.\n\nYou can refine this code further to check whether the folder exists or not, and if it doesn’t, then you can use VBA to create that folder.\n\nBelow is the code that uses the MkDir function to create a folder in case it doesn’t exist.\n\nExample 3 – Get the Names of All File and Folders in a Directory\n\nIf you want to get a list of all the file and folder names in a directory, you can use the DIR Function.\n\nThe below code lists all the files and folder names in the Test folder (which is located at the following path – C:\\Users\\sumit\\Desktop\\Test\\).\n\nI am using Debug.Print to show the names in the Immediate window. You can also use this to list the names in a message box or in a column in Excel.\n\nThe Do While loop in the above code continues till all the files and folders in the given path have been covered. When there are no more files/folders to cover, FileName becomes a null string and the loop stops.\n\nExample 4 – Get the Names of All Files in a Folder\n\nYou can use the below code to get the names of all the files in a folder/directory (and not the names of the sub-folders).\n\nThis code is just like the code used in Example 3, with one minor difference.\n\nIn this code, I have not specified vbDirectory in the DIR function. When you specify vbDirectory, it will give you the names of all the files as well as folders.\n\nWhen you don’t specify vbDirectory, DIR function will only give you the names of the files.\n\nNote: If you want to get the names of all the files in the main folder and the sub-folders, you can’t use the DIR function (as it’s not recursive). To do this, you can either use Power Query (no coding needed) or use the File System Object in VBA (with recursion).\n\nExample 5 – Get the Names of All the Sub-Folders within a Folder\n\nThe below code would give you the names of all the sub-folders within the specified folder.\n\nIt uses the GetAtr function in VBA, which allows us to check whether the name returned by the DIR function is the name of a file or a folder/directory.\n\nAgain, I am using Debug.Print to get the names in the immediate window. You can get these in a message box or in Excel (by modifying the code accordingly).\n\nExample 6 – Get the First Excel File from a Folder\n\nWith DIR function, you can specify the file extension or any suffix/prefix that you want in the file name that is returned.\n\nThe below code would display the name of the first Excel file in the Test folder.\n\nNote that I have used *.xls* (asterisk sign on both sides). This will ensure that all the versions of Excel files are checked (.xls, xlsx, .xlsm, .xlsb).\n\nExample 7 – Get Names of All Excel File in a Folder\n\nUse the below code to get the names of all the Excel files in the Test folder.\n\nWhile the DIR function returns the name of the first Excel file only, since we are calling it again in the loop, it goes through all the files and gives us the names of all the Excel files.\n\nHope you found this tutorial and the examples useful.\n\nLet me know your thoughts in the comments section.\n\nYou May Also Like the Following Excel Tutorials:"
    },
    {
        "link": "https://stackoverflow.com/questions/16351249/vba-check-if-file-exists",
        "document": "I'll throw this out there and then duck. The usual reason to check if a file exists is to avoid an error when attempting to open it. How about using the error handler to deal with that:"
    },
    {
        "link": "https://statology.org/vba-check-if-file-exists",
        "document": "You can use the Dir function in VBA to check if a specific file exists in a specific folder.\n\nHere is one common way to use this statement in practice:\n\nThis particular macro will create an input box where the user can type a full path to a file to check if it exists.\n\nOnce the user enters the file path, the macro will then produce a message box that says whether or not the file exists.\n\nThe following example shows how to use this syntax in practice.\n\nExample: Check if File Exists Using VBA\n\nSuppose we have a folder located in the following location:\n\nThis folder contains three CSV files:\n\nSuppose we would like to use VBA to check if a file called soccer_data.csv exists in this folder.\n\nWe can create the following macro to do so:\n\nOnce we run this macro, an input box appears where we can type in the file path:\n\nWe will type in the full path to the soccer_data.csv file:\n\nOnce we click OK, a message box will appear that tells us if the file exists in the folder that we specified:\n\nThe message box tells us that the file does exist.\n\nNote: You can find the complete documentation for the Dir function here.\n\nThe following tutorials explain how to perform other common tasks in VBA:\n\nHow to Create Folders Using VBA\n\n How to Delete Folders Using VBA\n\n How to Delete Files Using VBA"
    },
    {
        "link": "https://stackoverflow.com/questions/6863940/how-to-copy-sheets-to-another-workbook-using-vba",
        "document": "try this one\n\nor this one:\n\nHandle: If Err.Number = 9 Then MsgBox \"The sheet name does not exist. Please check spelling\" Else MsgBox \"An error has occurred.\" End If OpenBook.Close False Application.ScreenUpdating = True Application.DisplayAlerts = True End Sub"
    },
    {
        "link": "https://stackoverflow.com/questions/41102348/copying-and-pasting-between-workbooks-vba",
        "document": "Please bear with me I am still learning VBA and could do with a little help.\n\nI am trying to copy data from one workbook to another even though there I have found many answers on this I am unable to Understand the code as its quite complicated. I was hoping if someone could help me with a basic code which is pretty easy to read and understand.\n\nI am currently looking to copy all data off 3 different workbooks and paste it into 1 workbook across 3 worksheets.\n\nFor example I have 3 workbooks called\n\nI want to copy all the data (value only) from these workbooks and paste then into workbook called\n\nBut I want that data from AA.to go into Main Worksheet1 and But I want that data from BB to go into Main Worksheet2 and But I want that data from CC to go into Main Worksheet3\n\nI hope I have explained this question properly and I appreciate any help."
    },
    {
        "link": "https://answers.microsoft.com/en-us/msoffice/forum/all/vba-copy-sheets-from-multiple-workbooks-into-one/a6e2329f-5ced-4133-ab22-02dbe472a09f",
        "document": ""
    },
    {
        "link": "https://superuser.com/questions/1011218/excel-how-to-copy-all-sheets-from-one-workbook-to-another",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://techcommunity.microsoft.com/discussions/excelgeneral/vba-copy-and-paste-between-workbooks/1933740",
        "document": "I am trying to write a VBA to embed into a source workbook (this gets renamed for each job), which copies the same row each time (Row 5 on the Data Worksheet) and adds it into the next available row on the Machine Schedule workbook.\n\nSo far this code works the first time that you run it. But when you run it a second time, it re-writes row 5, and adds other information on the next available row down, pulled from different sheets on the source workbook. They're not at all mentioned in the code, so I can't understand why it would do this.\n\nAny help would be greatly appreciated."
    }
]