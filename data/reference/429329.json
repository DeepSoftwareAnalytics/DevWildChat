[
    {
        "link": "https://reddit.com/r/Unity3D/comments/1f35qjg/correct_way_to_handle_unsubscribing_from_events",
        "document": "Let's say I have a static class which subscribes to a delegate void event when it is initialised.\n\nNormally, in a MonoBehaviour class, I would then subscribe in and unsubscribe in . Is this necessary?\n\nWhat should I do in a static class where does not exist and the class is never destroyed? Do I need to unsubscribe or can I just leave it always subscribed until the application is closed? Should I even be worrying about this stuff?"
    },
    {
        "link": "https://docs.unity3d.com/6000.0/Documentation/ScriptReference/MonoBehaviour.html",
        "document": "MonoBehaviour offers life cycle functions that make it easier to develop with Unity.\n\n\n\nMonoBehaviours always exist as a Component of a GameObject, and can be instantiated with GameObject.AddComponent. Objects that need to exist independently of a GameObject should derive from ScriptableObject instead.\n\n\n\nA MonoBehaviour can be deleted with Object.Destroy or Object.DestroyImmediate. When the parent GameObject is destroyed all components are automatically deleted, including MonoBehaviours.\n\n\n\nAfter the underlying component is destroyed, the C# object for the MonoBehaviour remains in memory until garbage is collected. A MonoBehaviour in this state acts as if it is null. For example, it returns true for a \"obj == null\" check. However, this class doesn't support the null-conditional operator (?.) and the null-coalescing operator (??).\n\n\n\nWhen a MonoBehaviour is serialized, the value of C# fields are included according to Unity's Serialization rules. See Script Serialization for details. The serialized data also includes internal properties, such as the reference to the MonoScript that tracks the implementation class for the object.\n\n\n\nFor code samples, see the individual MonoBehaviour methods.\n\n\n\nNote: There is a checkbox for enabling or disabling MonoBehaviour in the Unity Editor. It disables functions when unticked. If none of these functions are present in the script, the Unity Editor does not display the checkbox. The functions are:\n\n\n\nStart()\n\n Update()\n\n FixedUpdate()\n\n LateUpdate()\n\n OnGUI()\n\n OnDisable()\n\n OnEnable()\n\n\n\nAdditional resources: The Deactivating GameObjects page in the manual."
    },
    {
        "link": "https://discussions.unity.com/t/remove-event-subscriptions-ondestroy/933194",
        "document": ""
    },
    {
        "link": "https://discussions.unity.com/t/unsubscribing-listener-in-c-object-instance-within-monobehavior/874856",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/71893602/how-to-unsubscribe-from-event-action-with-parameter-when-i-dont-need-the-parame",
        "document": "I have a problem/curiosity and couldn't find a better solution anywhere.\n\nI am working on a Unity game and suppose I have a class where I declare an event and invoke it\n\nI want to use this event in 2 other classes that will listen for it. In ClassB I am using the parameter to output the message in the UI.\n\nHowever in ClassC I don't need the incoming parameter \"message\". I only need the event to know that it was completed.\n\nThe problem is that it won't let me subscribe to the event because the handler doesn't have the same signature. So I tried to subscribe to it using an anonymous delegate.\n\nSeeing that this works, I have used this method a lot but recently learned that it doesn't actually unsubscribe from the anonymous delegate and that I should keep a reference to it.\n\nSo I changed it to\n\nNow this works but I am not sure if this is the best way to do it. I have a lot of events and I don't really like that I have to declare a new Action delegate on the listener's side.\n\nIs there a better way to do this ?\n\nThe easiest way that I found is to just create a new Action event and invoke that for ClassC, like:\n\nThis way I could have an event for each class but again, I'm not sure if this way is better. Feels a bit redundant. What do you think?"
    },
    {
        "link": "https://discussions.unity.com/t/decoupling-fields-from-a-monobehaviour/730666",
        "document": ""
    },
    {
        "link": "https://discussions.unity.com/t/is-there-any-way-to-organize-monobehaviours-in-the-inspector/913361",
        "document": ""
    },
    {
        "link": "https://reddit.com/r/gamedev/comments/sjlqx6/curious_case_of_serialization_unity_and",
        "document": "Hello! I am a small hobbyist developer and I have a little story to share with you. I'm mostly writing this for your amusement and some self reflection. I'm currently working on RTS using Unity, project is coming along slowly since I'm doing this on my spare time, along with family stuff. I don't really mind slow pace, this is just to sate my \"I need to do something productive besides gaming\" need.\n\nCurrently, I'm almost done with all background systems I need. Loose architecture I'm using is Entity Component System (ECS from here on) with Monobehaviours since project was started before DOTS was a thing. So, most of my operational logic is in System classes (I call them managers) that take care all game logic. Emphasis on word 'most', since there are several exceptions. For example there is a squad system in game where game units are working together in squad for several gameplay purposes. Each squad has their own Gameobject and that Gameobject works as a pseudo System (contains some logic in there instead of just data). If you did not understand all that, don't worry. Just keep in mind that I don't adhere strictly to ECS.\n\nAnother thing that needs to be said is that I use term Component and Monobehaviour interchangeably. They are basically the same thing, so please allow me this stupidity.\n\nLet's dial clock back six months. I decide that every self respecting RTS has ingame save function that allows player to save, quit and load. Surely a world class game engine like Unity has a such feature. I boot up browser, insert several well worded questions into popular search engine and ready my body for an easy to implement feature. After 20 minutes of searching, I go to my drinks cabinet and reach for low quality vodka. For those who are unfamiliar with quirks of Unity, they basically recommend you to \"save some play data variables and reload scene\". This really will not do when gamestate is complex and map data can be altered during gameplay.\n\nNext morning I get up, remedy my infernal hangover and start drafting how to implement save&load. First iteration was a simple brute force solution. Serialize everything into a json file and then instantiate stuff back on load. This failed miserably because of following reasons:\n• You cannot serialize Unity Monobehaviours (Components). They are referencing themselves (why in the fuck) and serializers crash on that\n• You cannot serialize Unity Transform data (contains positions, rotations etc) since they reference themselves (??????)\n• There is no way to serialize GameObjects\n• There is no way to deserialize and load GameObjects nicely\n\nAlright, this needs a better solution then. Second iteration go!\n• Create an interface for Monobehaviours that allows them to save their NECESSARY data into a string. Same interface also allows them to deserialize data back from a string into correct format. This means every Component needs some unique logic\n• Decouple data from Monobehaviours into a separate class that can be serialized. This means that for every Component, there is ComponentData class. Monobehaviours then implement properties that access fields in ComponentData class.\n• When serializing Gameobject, code fetches all child components that implemented the interface, get their data and store Gameobject name (name is used to instantiate new Gameobject from Prefab).\n• Everything is stored into a single json package and saved to hard drive\n• When loading, new scene is created and all data is read from json file. Each Gameobject (including map data) is read from file, a prefab is instantiated and data is inserted into prefab. Load all managers first, then pseudo managers and then gameobjects. After that allow game updates to run again.\n\nSecond iteration seems great and principle works. Alright, how much do I need to refactor? Well fucking everything. Every component and manager I've created until this point. That was a task that took almost six months to complete (several days short). Refactoring was painful process because of several things:\n• I had followed Unity tutorials and used direct Gameobject references in Managers. They cannot be serialized. For every Gameobject I had to create an unique identifier (I cannot use Unity own identifiers since they cannot be modified during deserialization), store that identifier into ComponentData classes and create property that returns Gameobject reference when its given an identifier.\n• For Gameobject Lists I had to create a custom List that stores identifiers and returns Gameobjects when being iterated on.\n• Remember that comment about me not following ECS? Well I'm sure as hell following it now to the letter. Those pseudo-Manager classes were pain to fit into this mess. For example I refactored Squad Gameobjects to be just data and moved all logic into existing normal Managers. This was done to reduce complexity. Only Gameobjects left are ones that need their own visualization (like units, buildings etc)\n\nThere probably were more pain points on the way, I just cannot remember them all. Process took six months because I usually can do 2-6 hours of dev time in a week. Now it is done and it works. I'm really glad that I refactored everything, even though it took a considerable amount of time. It feels more nicer system now and it's easier to maintain than my previous spaghetti."
    },
    {
        "link": "https://gamedev.stackexchange.com/questions/150302/best-practice-to-define-fields-scope-in-c-script-of-unity-in-regard-to-serializ",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://reddit.com/r/Unity3D/comments/bc9ytq/stop_using_public_fields",
        "document": "A subreddit for News, Help, Resources, and Conversation regarding Unity, the game engine. Do NOT use your phone to take screenshots. Video and photos of computer screens taken by phones are NOT allowed. All screenshots must be grabbed from the computer itself."
    }
]