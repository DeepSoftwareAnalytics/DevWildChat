[
    {
        "link": "https://geeksforgeeks.org/find_element_by_css_selector-driver-method-selenium-python",
        "document": "Selenium’s Python Module is built to perform automated testing with Python. Selenium Python bindings provide a simple API to write functional/acceptance tests using Selenium WebDriver. After you have installed selenium and checked out – Navigating links using the get method, you might want to play more with Selenium Python. After one has opened a page using selenium such as geeksforgeeks, one might want to click some buttons automatically or fill a form automatically or any such automated task.\n\nThis article revolves around how to grab or locate elements in a webpage using locating strategies of Selenium Web Driver. More specifically, find_element(By.CSS_SELECTOR) is discussed in this article. With this strategy, the first element with the matching CSS selector will be returned. If no element has a matching CSS selector, a NoSuchElementException will be raised.\n\nFor instance, consider this page source:\n\nNow after you have created a driver, you can grab an element using –\n\nHow to use driver.find_element_by_css_selector() method in Selenium?\n\nLet’s try to practically implement this method and get an element instance for “https://www.geeksforgeeks.org/”. Let’s try to grab search form input using its id “GSC-i-id2”.\n\nFirst, it will open the firefox window with geeksforgeeks, and then select the element and print it on the terminal as shown below.\n\nThe first element with the id attribute value matching the location will be returned. The first element with the name attribute value matching the location will be returned. The first element with the XPath syntax matching the location will be returned. The first element with the link text value matching the location will be returned. The first element with the partial link text value matching the location will be returned. The first element with the given tag name will be returned. the first element with the matching class attribute name will be returned. The first element with the matching CSS selector will be returned."
    },
    {
        "link": "https://selenium-python.readthedocs.io/locating-elements.html",
        "document": "There are various strategies to locate elements in a page. You can use the most appropriate one for your case. Selenium provides the following method to locate elements in a page:\n\nTo find multiple elements (these methods will return a list):\n\nThe attributes available for the class are used to locate elements on a page. These are the attributes available for class:\n\nThe ‘By’ class is used to specify which attribute is used to locate elements on a page. These are the various ways the attributes are used to locate elements on a page:\n\nIf you want to locate several elements with the same attribute replace find_element with find_elements.\n\nUse this when you know the attribute of an element. With this strategy, the first element with a matching attribute will be returned. If no element has a matching attribute, a will be raised. For instance, consider this page source: The form element can be located like this:\n\nUse this when you know the attribute of an element. With this strategy, the first element with a matching attribute will be returned. If no element has a matching attribute, a will be raised. For instance, consider this page source: The username & password elements can be located like this: This will give the “Login” button as it occurs before the “Clear” button:\n\nXPath is the language used for locating nodes in an XML document. As HTML can be an implementation of XML (XHTML), Selenium users can leverage this powerful language to target elements in their web applications. XPath supports the simple methods of locating by id or name attributes and extends them by opening up all sorts of new possibilities such as locating the third checkbox on the page. One of the main reasons for using XPath is when you don’t have a suitable id or name attribute for the element you wish to locate. You can use XPath to either locate the element in absolute terms (not advised), or relative to an element that does have an id or name attribute. XPath locators can also be used to specify elements via attributes other than id and name. Absolute XPaths contain the location of all elements from the root (html) and as a result are likely to fail with only the slightest adjustment to the application. By finding a nearby element with an id or name attribute (ideally a parent element) you can locate your target element based on the relationship. This is much less likely to change and can make your tests more robust. For instance, consider this page source: The form elements can be located like this:\n• None Absolute path (would break if the HTML was changed only slightly)\n• None First form element in the HTML\n• None The form element with attribute set to The username element can be located like this:\n• None First form element with an input child element with set to\n• None First input child element of the form element with attribute set to\n• None First input element with attribute set to The “Clear” button element can be located like this:\n• None Input with attribute set to and attribute set to\n• None Fourth input child element of the form element with attribute set to These examples cover some basics, but in order to learn more, the following references are recommended: Here is a couple of very useful Add-ons that can assist in discovering the XPath of an element:\n• None xPath Finder - Plugin to get the elements xPath.\n\nUse this when you know the link text used within an anchor tag. With this strategy, the first element with the link text matching the provided value will be returned. If no element has a matching link text attribute, a will be raised. For instance, consider this page source: <html> <body> <p>Are you sure you want to do this?</p> <a href=\"continue.html\">Continue</a> <a href=\"cancel.html\">Cancel</a> </body> </html> The continue.html link can be located like this:\n\nUse this when you want to locate an element by tag name. With this strategy, the first element with the given tag name will be returned. If no element has a matching tag name, a will be raised. For instance, consider this page source: The heading (h1) element can be located like this:\n\nUse this when you want to locate an element by class name. With this strategy, the first element with the matching class name attribute will be returned. If no element has a matching class name attribute, a will be raised. For instance, consider this page source: The “p” element can be located like this:"
    },
    {
        "link": "https://stackoverflow.com/questions/72836613/how-to-fix-webdriver-object-has-no-attribute-find-element-by-css-selector",
        "document": "Since it mentions WebDriver, I'm assuming this is to do with Selenium? is deprecated, and if you were to use an IDE like PyCharm, it would tell you:\n\nSo instead of using , consider using:\n\nRefer to the official documentation for more information: https://selenium-python.readthedocs.io/locating-elements.html#locating-elements-by-css-selectors."
    },
    {
        "link": "https://selenium.dev/blog/2022/python-locators-se4",
        "document": "Updating your locators for changes in the Python bindings in Selenium 4\n\nIn real estate, the mantra for finding a new house or office space is “location, location, location!”. It could be said that when working with Selenium, a critical aspect of writing tests is “locators, locators, locators!”. Having a robust locator strategy - in your app under test and in your test framework - is highly important for effective testing.\n\nIf you are a Pythonista like myself and using Selenium for your test automation, then there are some important changes coming to how locators are defined and used.\n\nSometime after Selenium 4.2, the Python Selenium bindings will remove locator-specific methods for finding elements. This means that the methods\n\nwill be removed. All of these methods are in fact special cases of\n\nso this approach is now preferred (required, even) with the Python bindings.\n\nNote that it’s good practice to use the By object which has specific values for using particular locator strategies. For example, this line\n\nIf you’re really desperate however you can use strings instead of the By object:\n\nIf you have any plans to upgrade your Selenium client for your Python tests to recent versions of Selenium 4, definitely keep these changes in mind. It’s a good time to update your locator strategy and structure."
    },
    {
        "link": "https://stackoverflow.com/questions/48578336/python-find-element-by-css-selector",
        "document": "To click on the Login button you can use either of the the following line of code :\n• None Getting more granular with the CssSelector you can also use the following line of code :\n\nUpdate : As you are seeing NoSuchElementException you can check this discussion"
    },
    {
        "link": "https://stackoverflow.com/questions/33939198/selenium-webdriver-finding-elements-using-cssselector-and-nth-child",
        "document": "I want to locate the respective span element. I want to check the order of the span elements using css selector. So when I use selenium IDE,I will verify it like below(using nth child concept).\n\nBut when I do the same thing in Selenium WebDriver I am not able to locate the elements with the order which I did using Selenium IDE.\n\nBelow are the codes that I used in WebDriver and it dint work.\n\nCould anyone please help me."
    },
    {
        "link": "https://stackoverflow.com/questions/70040766/how-to-use-css-selector-nth-of-type-and-nth-child-to-locate-element-in-python-se",
        "document": "Below is a snippet of how a page is set up.\n\nhow do i locate link.com/home in section 2?\n\nBut it doesn't. It finds the link in section 4 as well. I have to use *= because in different environments the url prefix changes."
    },
    {
        "link": "https://saucelabs.com/resources/blog/selenium-tips-css-selectors",
        "document": "In order for Selenium or Appium to click on an element, type into it, or mouse in or out, the tool first needs to find the element. The WebDriver code library provides methods to do just that, such as findelement() or findelements(). These usually take a locator, which can be created by ID, XPATH Code, or Cascading Style Sheets (CSS). Getting the XPATH code can be as easy as selecting the element in developer tools or using something like . Fundamentally, XPATH is a query language for XML-like documents, such as web pages. It can be awkward to write, brittle, and even more awkward to reverse engineer. As a result, CSS has gained favor as the way to identify objects in WebDriver.\n\nLike most powerful things, CSS has a bit of a learning curve. It's certainly a lot more challenging than cutting and pasting from a tool. Yet if you invest the time in learning CSS Selectors, you can have more powerful bindings that are easier to read, less brittle, and slightly more closely integrated into the browser platform.\n\nA CSS Selector is a combination of an element selector and a value which identifies the web element within a web page. They are string representations of HTML tags, attributes, Id and Class. As such they are patterns that match against elements in a tree and are one of several technologies that can be used to select nodes in an XML document.\n\nHTML pages are structured like XML, with children nested inside of parents. If you can locate, for example, the first link within a div, you can construct a string to reach it. A direct child in XPATH is defined by the use of a “/“, while on CSS, it’s defined using “>”.\n\nWriting nested divs can get tiring - and result in code that is brittle. Sometimes you expect the code to change, or want to skip layers. If an element could be inside another or one of its children, it’s defined in XPATH using “//” and in CSS just by a whitespace.\n\nThis is useful for navigating lists of elements, such as forms or ul items. The next sibling will tell selenium to find the next adjacent element on the page that’s inside the same parent. Let’s show an example using a form to select the field after username.\n\nCSS selectors in Selenium allow us to navigate lists with more finesse than the above methods. If we have a ul and we want to select its fourth li element without regard to any other elements, we should use nth-child or nth-of-type. Nth-child is a pseudo-class. In straight CSS, that allows you to override behavior of certain elements; we can also use it to select those elements.\n\nAn earlier version of this article references :contains, a powerful way to match elements that had a desired inner text block. Sadly, that feature is deprecated and not supported any longer by the W3C Standard. The current is implemented by all major browsers; level 4 is in working draft mode. That standard document has a detailed list of selectors and pseudo-classes. For a more manageable list, look at the which has a wonderful, complete list of . Drill into any pseudo-class and scroll down for specific information on compatibility in different browsers, including this example from the nth-child() pseudo-class."
    },
    {
        "link": "https://swtestacademy.com/css-selenium",
        "document": "Hi all, CSS Selectors in Selenium will be explained in this tutorial, I will describe to you how to write effective CSS Locators to interrogate web elements for your automation projects. As a rule of thumb, your interrogation strategy should be in below order:\n• First try to use Id, name, class, etc.\n• Then, try to interrogate by CSS\n• Then, use XPath to find elements.\n\nYou should use > sign to reach an element directly. (Note: For XPath, we use / sign for this.)\n\nYou should use white space between tags to locate the element. Use “.” for class and “#” for id.\n\nYou can write the tag name directly like “form”, “div”, “img”,”body”, etc. As below figure, I wrote the “form” tag to locate the form element.\n\n (Note: For XPath we use //tagname for this.)\n\nYou can use tag[attribute=’value’] syntax.\n\n (Note: For XPath we use tag[@attribute=’value’] for this.)\n\n5) Using Containing Text of an Attribute\n\nYou can use tag[attribute*=’containing text’] syntax.\n\n (Note: For XPath we use tag[contains((@attribute,’containing text’)] for this.)\n\nYou can use tag[attribute^=’starting text’] syntax.\n\n (Note: For XPath we use tag[starts-with( @attribute, ‘starting text’)] for this.)\n\nYou can use tag[attribute$=’ending text’] syntax.\n\nYou can use “,” operator between two CSS locator statements.\n\nYou can use “Tag#Id”\n\nYou can use “Tag.Class”\n\nYou can use “Tag:first-of-type”. It will select the first tag element.\n\nYou can use “Tag:last-of-type”. It will select the last tag element.\n\nNote: If you want to find the last element or child you can use the below locators.\n\nYou can use “*last-of-type”. It will select the last child of the parent tag.\n\nSyntax: .tree-branch>ul>*:last-of-type (Selects the last child of parent tag “ul”.)\n\nYou can use “tag:nth-of-type(n)”. It will select the nth tag element of the list.\n\nNote: If you don’t specify a tag as *:nth-of-type(3) it will allow you to select the third child.\n\nYou can use “tag:nth-child(n)”. It will select the nth child.\n\nSyntax: .tree-branch>ul>li:nth-child(3) (It will select the nth child.)\n\nYou can use “E1+ E2“. First, it finds E1 then selects E2.\n\n‘li#automation + li‘ will first go to li element with id ‘mercedes’ and then select its adjacent li which is the ‘BMW’ list item.\n\nSyntax: .tree-branch>ul>li:nth-child(3) + li (It will select the next element.)\n\nYou can exclude any of the class names with :not(.class-name) syntax.\n\nThe above selector excludes “xs-mt-o” class and selects the below the line as shown below figure.\n\nAlso, you can learn how to write Smart XPath locators in the below article.\n\nYou can find many tricks below pdf. I suggest you save it.\n\nSee you in the next article ;)\n\n Onur"
    },
    {
        "link": "https://qafox.com/selenium-locators-using-nth-child-in-css-selectors",
        "document": "In the previous article, I have practically demonstrated the usage of the last-child in CSS Selectors.\n\nIn this article, I am going to practically demonstrate using the nth-child in CSS Selectors.\n\nFollow the below steps to practice using nth-child in CSS Selectors:\n\n1) Open http://compendiumdev.co.uk/selenium/basic_web_page.html in Chrome Browser, where ChroPath is already installed (Refer ChroPath installation in Chrome Browser here and usage in Chrome Browser here ) as shown below:\n\nI have taken a very basic Web Application for demonstration as shown in the below screenshot to make your learning easy:\n\n2) Open ‘ChroPath’ functionality as shown below in the Chrome Browser:\n\n3) Select ‘CSS Sel..’ option from the ‘Selectors’ dropdown as shown below:\n\n4) Expand all the tags on the left side (i.e. <head> and <body> tags) as shown below:\n\n5) Let’s locate the second child under the html tag using nth-child in the CSS Selectors as shown below:\n\nNote: * symbol in the above CSS Selector stands for any tag\n\nLet’s execute the above Relative CSS Selector in the ChroPath and observe that the second child tag under the html tag got located as shown below:\n\n6) Let’s locate the first child under the html tag using nth-child in the CSS Selectors as shown below:\n\nNote: * symbol in the above CSS Selector stands for any tag\n\nLet’s execute the above Relative CSS Selector in the ChroPath and observe that the first child tag under the html tag got located as shown below:\n\n7) Let’s locate the first child under the body tag using nth-child in the CSS Selectors as shown below:\n\nNote: * symbol in the above CSS Selector stands for any tag\n\nLet’s execute the above Relative CSS Selector in the ChroPath and observe that the first child tag under the body tag got located as shown below:\n\n8) Let’s locate the second child under the body tag using nth-child in the CSS Selectors as shown below:\n\nNote: * symbol in the above CSS Selector stands for any tag\n\nLet’s execute the above Relative CSS Selector in the ChroPath and observe that the second child tag under the body tag got located as shown below:\n\n9) Let’s locate the second p child tag under the body tag using nth-child in the CSS Selectors as shown below:\n\nLet’s execute the above Relative CSS Selector in the ChroPath and observe that the second child tag under the body tag got located as shown below:\n\n10) Let’s locate the second p tag on the page using nth-child in the CSS Selectors as shown below:\n\nLet’s execute the above Relative CSS Selector in the ChroPath and observe that the second p tag on the page got located as shown below:\n\n11) Let’s locate the second p tag on the page having the id attribute value as ‘para2’ using nth-child in the CSS Selectors as shown below:\n\nLet’s execute the above Relative CSS Selector in the ChroPath and observe that the second p tag having the id attribute value as ‘para2’ got located on the page as shown below:\n\n12) Let’s locate the second p tag on the page having html tag as ancestor tag using nth-child in the CSS Selectors as shown below:\n\nLet’s execute the above Relative CSS Selector in the ChroPath and observe that the second p tag who’s ancestor is html tag got located on the page as shown below:\n\nHere concludes the usage of nth-child in CSS Selector.\n\nIn the next article, I will practically demonstrate the usage of Wildcards and other Symbols in CSS Selectors.\n• > To learn more about Selenium, continue to the next post (Click on Next Post link below)\n\nPlease leave your questions/comments/feedback below.\n\nOn a mission to contribute to the Software Testing Community in all possible ways."
    }
]