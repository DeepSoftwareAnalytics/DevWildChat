[
    {
        "link": "https://cplusplus.com/reference/string/string/erase",
        "document": "main () { std::string str ( \"This is an example sentence.\" ); std::cout << str << ; // \"This is an example sentence.\" str.erase (10,8); std::cout << str << ; // \"This is an sentence.\" str.erase (str.begin()+9); std::cout << str << ; str.erase (str.begin()+5, str.end()-9); std::cout << str << ; 0; }"
    },
    {
        "link": "https://geeksforgeeks.org/stdstringerase-in-cpp",
        "document": "The std::string::erase() function is a built-in function of std::string class that is used to erase the whole or a part of the string shortening its length. In this article, we will learn how to use string::erase() function.\n\nThe string erase() function provides 6 different overloads for different purposes:\n\nThese 5 overloaded versions of the string erase() function can be used for following purposes:\n\nstring::erase() function can be used for erasing a single character from the specific position in the string.\n• itr: Iterator to the character you want to erase (note that it is an iterator, not index)\n• None Returns the character now at the position of the removed character.\n• None If no such character is remaining, returns iterator to the string::end()\n\nWe can also erase a range of characters from the string using string::erase() function.\n• first: Iterator to the first element in the range.\n• last: Iterator to one element after the last element in the range.\n• None Returns the character now at the position of the first removed character.\n• None If no such character is remaining, returns iterator to the string::end()\n\nThe below version erases all the characters after the given index, but we can also limit the number of characters to be deleted using string::erase.\n• idx : The position (index) at which character deletion begins.\n• k : Number of characters to be erased (including character at idx\n\nErase All Characters After Given Position\n\nstring::erase() function can also be instructed to erase the characters after some given position.\n• idx : The position (index) at which character deletion begins.\n\nThe string::erase() function is able to delete all the characters of the string effectively clearing it. The length of the string will be reduced to 0.\n\nThe string::clear() is a function used to erase the contents of the string, but it is a lot different from string::erase(). Below is the table that lists the major differences between string::erase() and string::clear().\n\nRemoves all characters from the string. Iterator pointing to the position after the removed range – Single character: O(m), where m is the number of characters after the position. \n\n – Range: O(m – k), where k is the size of the range. O(1), where n is the number of characters in the string. O(1), as it modifies the string in place. O(1), as it clears the string in place."
    },
    {
        "link": "https://stackoverflow.com/questions/59143049/how-do-i-erase-a-part-of-a-string-using-str-begin-without-incurring-errors",
        "document": "Given a string, I have to return the middle character or characters(if the string is even) of the string. This is what I came up with.\n\nThe errors have always been at the input.begin() or input.erase() part. Curiously, this example I found on http://www.cplusplus.com/reference/string/string/erase/ works even when it looks the same as mine:\n\nWhat seems to be the issue here?"
    },
    {
        "link": "https://en.cppreference.com/w/cpp/string/basic_string/erase",
        "document": "Removes specified characters from the string.\n\nRemoves the characters in the range .\n\nIf an exception is thrown for any reason, this function has no effect (strong exception safety guarantee).\n\nmain s s s. , s s. s. , s. , s s. s. // trims from ' ' to the end of the string; overload (1) s it s. , s. // obtains iterator to the first 's' s. it, it, s 1) This Is An Example 2) This Is Example 3) ThisIs Example 4) ThisIs 5) This\n\nThe following behavior-changing defect reports were applied retroactively to previously published C++ standards."
    },
    {
        "link": "https://cplusplus.com/forum/beginner/92499",
        "document": "Since a string is much like a vector, you can iterate using iterators over the string, and erase can take in an iterator to erase and returns a valid iterator.So you can do something like this.If you don't like iterators you can doThere is room for optimizations here, but I wrote it so it is very clear."
    },
    {
        "link": "https://stackoverflow.com/questions/49564264/erasing-an-element-of-a-string-using-an-index-with-str-erase",
        "document": "The method has several overloads:\n\ncalls the first overload, treating as the (because a is implicitly convertible to ).\n\nFirst, is not an valid index ( alone is, though), so this is undefined behavior.\n\nSecond, you are not explicitly specifying a value for the parameter, so the default value of is used, which tells to remove all characters including and after the specified , which is probably not what you want (or is it? Do you want to remove only the 1 at the , or all s following the ?).\n\nalso calls the first overload (implicitly converting the 2 s to ). Again, the s you are passing in are not not valid indexes or counts, so this is also undefined behavior.\n\nThere are other problems in your code, as well.\n\nreturns the byte size of (ie, the size of the class itself), not the length of the character data that contains. Those characters are stored elsewhere in memory (unless you input a small string, and your STL's implementation of employs Small String Optimization). Use or to get the length of the character data.\n\nYou are seeing unexpected output because indexes are 0-based, not 1-based. Your loop skips the 1st character in , and goes past the end of into surrounding memory, which is also undefined behavior. More importantly, you are modifying the length of when you call , but you are not updating your variable to reflect that new length, so your loop potentially goes WAY past the end of .\n\nWith that said, try something more like this instead:"
    },
    {
        "link": "https://stackoverflow.com/questions/76716323/how-to-use-original-index-of-a-string-to-erase-single-character",
        "document": "You confuse the indicies of the characters in the original string with the indices of same characters in the updated string.\n\nConsider the string and erasing characters at position and (indices are 0 based). Then you first remove the first character and have the new string . Now you cannot remove the character at index anymore, because there is none. The character that was at position in the original string is now at index .\n\nAs mentioned in a comment, the most simple is to keep the original string intact so you can use its indices and keep track of \"removed\" indices in a seperate vector:\n\nNote that I assumed the input uses 0-based indices. If the input uses 1-based indices, I would correct for that as early as possible while taking input."
    },
    {
        "link": "https://geeksforgeeks.org/stdstringerase-in-cpp",
        "document": "The std::string::erase() function is a built-in function of std::string class that is used to erase the whole or a part of the string shortening its length. In this article, we will learn how to use string::erase() function.\n\nThe string erase() function provides 6 different overloads for different purposes:\n\nThese 5 overloaded versions of the string erase() function can be used for following purposes:\n\nstring::erase() function can be used for erasing a single character from the specific position in the string.\n• itr: Iterator to the character you want to erase (note that it is an iterator, not index)\n• None Returns the character now at the position of the removed character.\n• None If no such character is remaining, returns iterator to the string::end()\n\nWe can also erase a range of characters from the string using string::erase() function.\n• first: Iterator to the first element in the range.\n• last: Iterator to one element after the last element in the range.\n• None Returns the character now at the position of the first removed character.\n• None If no such character is remaining, returns iterator to the string::end()\n\nThe below version erases all the characters after the given index, but we can also limit the number of characters to be deleted using string::erase.\n• idx : The position (index) at which character deletion begins.\n• k : Number of characters to be erased (including character at idx\n\nErase All Characters After Given Position\n\nstring::erase() function can also be instructed to erase the characters after some given position.\n• idx : The position (index) at which character deletion begins.\n\nThe string::erase() function is able to delete all the characters of the string effectively clearing it. The length of the string will be reduced to 0.\n\nThe string::clear() is a function used to erase the contents of the string, but it is a lot different from string::erase(). Below is the table that lists the major differences between string::erase() and string::clear().\n\nRemoves all characters from the string. Iterator pointing to the position after the removed range – Single character: O(m), where m is the number of characters after the position. \n\n – Range: O(m – k), where k is the size of the range. O(1), where n is the number of characters in the string. O(1), as it modifies the string in place. O(1), as it clears the string in place."
    },
    {
        "link": "https://cplusplus.com/forum/beginner/92499",
        "document": "Since a string is much like a vector, you can iterate using iterators over the string, and erase can take in an iterator to erase and returns a valid iterator.So you can do something like this.If you don't like iterators you can doThere is room for optimizations here, but I wrote it so it is very clear."
    },
    {
        "link": "https://quora.com/How-do-I-write-a-C-program-to-remove-characters-from-the-first-String-which-are-present-in-the-second-String",
        "document": "Something went wrong. Wait a moment and try again."
    }
]