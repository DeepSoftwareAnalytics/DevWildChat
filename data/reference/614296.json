[
    {
        "link": "https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html",
        "document": ""
    },
    {
        "link": "https://geeksforgeeks.org/create-a-pandas-dataframe-from-lists",
        "document": "Converting lists to DataFrames is crucial in data analysis, Pandas enabling you to perform sophisticated data manipulations and analyses with ease.\n\nHere we will discuss different ways to create a Pandas Dataframe from the lists:\n\nExample 1: To convert a list to a Pandas DataFrame, you can use the constructor. This function takes a list as input and creates a DataFrame with the same number of rows and columns as the input list.\n\nExample 2: To use lists in a dictionary to create a Pandas DataFrame, we Create a dictionary of lists and then Pass the dictionary to the constructor. Optionally, we can specify the column names for the DataFrame by passing a list of strings to the parameter of the constructor.\n\nTo create a Pandas DataFrame from lists using zip(). We can also use the function to zip together multiple lists to create a DataFrame with more columns.\n\nTo create a Pandas DataFrame using a multi-dimensional list with column names and dtypes specified. By specifying dtypes, we can ensure that the DataFrame is created with the correct data types.\n\nTo create a DataFrame using a multi-dimensional list, you can use the constructor. The constructor takes a list of lists as input and creates a DataFrame with the same number of rows and columns as the input list.\n\nCreate DataFrame from List with Index and Column Names\n\nTo create a DataFrame using a list with index and column names, you can use the constructor with the and parameters.\n\nHow to convert a list to a pandas DataFrame?\n\nHow to create a pandas DataFrame from a list of tuples?\n\nHow to convert a nested list to a DataFrame?\n\nHow to list DataFrames into one DataFrame in Pandas?"
    },
    {
        "link": "https://pandas.pydata.org/docs/user_guide/10min.html",
        "document": "This is a short introduction to pandas, geared mainly for new users. You can see more complex recipes in the Cookbook.\n\nCustomarily, we import as follows:\n\nSee the Intro to data structures section. Creating a by passing a NumPy array with a datetime index using and labeled columns: Creating a by passing a dictionary of objects where the keys are the column labels and the values are the column values. The columns of the resulting have different dtypes: If you’re using IPython, tab completion for column names (as well as public attributes) is automatically enabled. Here’s a subset of the attributes that will be completed: As you can see, the columns , , , and are automatically tab completed. and are there as well; the rest of the attributes have been truncated for brevity.\n\nUse and to view the top and bottom rows of the frame respectively: Return a NumPy representation of the underlying data with without the index or column labels: NumPy arrays have one dtype for the entire array while pandas DataFrames have one dtype per column. When you call , pandas will find the NumPy dtype that can hold all of the dtypes in the DataFrame. If the common data type is , will require copying data.\n\nWhile standard Python / NumPy expressions for selecting and setting are intuitive and come in handy for interactive work, for production code, we recommend the optimized pandas data access methods, , , and . See the indexing documentation Indexing and Selecting Data and MultiIndex / Advanced Indexing. For a , passing a single label selects a columns and yields a equivalent to : See more in Selection by Label using or . For label slicing, both endpoints are included: For getting fast access to a scalar (equivalent to the prior method): See more in Selection by Position using or . Select via the position of the passed integers: For getting a value explicitly: For getting fast access to a scalar (equivalent to the prior method): Select rows where is greater than . Selecting values from a where a boolean condition is met: Setting a new column automatically aligns the data by the indexes: The result of the prior setting operations:\n\nFor NumPy data types, represents missing data. It is by default not included in computations. See the Missing Data section. Reindexing allows you to change/add/delete the index on a specified axis. This returns a copy of the data: drops any rows that have missing data: gets the boolean mask where values are :\n\nSee the Basic section on Binary Ops. Calculate the mean value for each column: Calculate the mean value for each row: Operating with another or with a different index or column will align the result with the union of the index or column labels. In addition, pandas automatically broadcasts along the specified dimension and will fill unaligned labels with . and applies a user defined function that reduces or broadcasts its result respectively. See more at Histogramming and Discretization. is equipped with a set of string processing methods in the attribute that make it easy to operate on each element of the array, as in the code snippet below. See more at Vectorized String Methods.\n\nBy “group by” we are referring to a process involving one or more of the following steps:\n• None Splitting the data into groups based on some criteria Grouping by a column label, selecting column labels, and then applying the function to the resulting groups:\n\nSee the sections on Hierarchical Indexing and Reshaping. The method “compresses” a level in the DataFrame’s columns: With a “stacked” DataFrame or Series (having a as the ), the inverse operation of is , which by default unstacks the last level: See the section on Pivot Tables. pivots a specifying the , and\n\npandas can include categorical data in a . For full docs, see the categorical introduction and the API documentation. Rename the categories to more meaningful names: Reorder the categories and simultaneously add the missing categories (methods under return a new by default): Sorting is per order in the categories, not lexical order: Grouping by a categorical column with also shows empty categories:\n\nIf you are attempting to perform a boolean operation on a or you might see an exception like: Traceback (most recent call last) in in : The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all(). See Comparisons and Gotchas for an explanation and what to do."
    },
    {
        "link": "https://stackoverflow.com/questions/70143278/create-a-dataframe-of-a-list-of-dataframes",
        "document": "I'm trying to create a dataframe of sales data from 45 different stores. I saved the data as dataframes in a list: So I have a list of length 45, each element beeing an dataframe of 143 numbers.\n\nWhat I want: Create a dataframe with an index-column(date) and a seperate column for each store.\n\nWhat's the easiest way to achieve my goal?"
    },
    {
        "link": "https://pandas.pydata.org/docs/reference/frame.html",
        "document": "Access a single value for a row/column pair by integer position. Access a group of rows and columns by label(s) or a boolean array. Insert column into DataFrame at specified location. Get the 'info axis' (see Indexing for more). Get item from object for given key (ex: DataFrame column). Whether each element in the DataFrame is contained in values. Replace values where the condition is False. Replace values where the condition is True. Query the columns of a DataFrame with a boolean expression. For more information on , , , and , see the indexing documentation.\n\nGet Addition of DataFrame and other, column-wise. Get Addition of dataframe and other, element-wise (binary operator ). Get Subtraction of dataframe and other, element-wise (binary operator ). Get Multiplication of dataframe and other, element-wise (binary operator ). Get Floating division of dataframe and other, element-wise (binary operator ). Get Floating division of dataframe and other, element-wise (binary operator ). Get Integer division of dataframe and other, element-wise (binary operator ). Get Modulo of dataframe and other, element-wise (binary operator ). Get Exponential power of dataframe and other, element-wise (binary operator ). Compute the matrix multiplication between the DataFrame and other. Get Addition of dataframe and other, element-wise (binary operator ). Get Subtraction of dataframe and other, element-wise (binary operator ). Get Multiplication of dataframe and other, element-wise (binary operator ). Get Floating division of dataframe and other, element-wise (binary operator ). Get Floating division of dataframe and other, element-wise (binary operator ). Get Integer division of dataframe and other, element-wise (binary operator ). Get Modulo of dataframe and other, element-wise (binary operator ). Get Exponential power of dataframe and other, element-wise (binary operator ). Get Less than of dataframe and other, element-wise (binary operator ). Get Greater than of dataframe and other, element-wise (binary operator ). Get Less than or equal to of dataframe and other, element-wise (binary operator ). Get Greater than or equal to of dataframe and other, element-wise (binary operator ). Get Not equal to of dataframe and other, element-wise (binary operator ). Get Equal to of dataframe and other, element-wise (binary operator ). Update null elements with value in the same location in .\n\nAlign two objects on their axes with the specified join method. Select values at particular time of day (e.g., 9:30AM). Select values between particular times of the day (e.g., 9:00-9:30 AM). Drop specified labels from rows or columns. Test whether two objects contain the same elements. Subset the dataframe rows or columns according to the specified index labels. Return index of first occurrence of maximum over requested axis. Return index of first occurrence of minimum over requested axis. Conform DataFrame to new index with optional filling logic. Return an object with matching indices as other object. Set the name of the axis for the index or columns. Reset the index, or a level of it. Return a random sample of items from an axis of object. Return the elements in the given positional indices along an axis. Truncate a Series or DataFrame before and after some index value.\n\n(DEPRECATED) Fill NA/NaN values by using the next valid observation to fill the gap. Fill NA/NaN values by using the next valid observation to fill the gap. Fill NA/NaN values by propagating the last valid observation to next valid. Fill NA/NaN values using the specified method. DataFrame.isnull is an alias for DataFrame.isna. DataFrame.notnull is an alias for DataFrame.notna. (DEPRECATED) Fill NA/NaN values by propagating the last valid observation to next valid. Replace values given in with .\n\nSort by the values along either axis. Sort object by labels (along an axis). Return the first rows ordered by in descending order. Return the first rows ordered by in ascending order. Stack the prescribed level(s) from columns to index. Transform each element of a list-like to a row, replicating index values. Return an xarray object from the pandas object. The transpose of the DataFrame.\n\nReturn the last row(s) without any NaNs before . Shift index by desired number of periods with an optional time . Return index for first non-NA value or None, if no non-NA value is found. Return index for last non-NA value or None, if no non-NA value is found. Cast to DatetimeIndex of timestamps, at beginning of period. Localize tz-naive index of a Series or DataFrame to target time zone.\n\nFlags refer to attributes of the pandas object. Properties of the dataset (like the date is was recorded, the URL it was accessed from, etc.) should be stored in ."
    },
    {
        "link": "https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.from_dict.html",
        "document": "Construct DataFrame from dict of array-like or dicts.\n\nCreates DataFrame object from dictionary by columns or by index allowing dtype specification.\n\nOf the form {field : array-like} or {field : dict}. The “orientation” of the data. If the keys of the passed dict should be the columns of the resulting DataFrame, pass ‘columns’ (default). Otherwise if the keys should be rows, pass ‘index’. If ‘tight’, assume a dict with keys [‘index’, ‘columns’, ‘data’, ‘index_names’, ‘column_names’]. Added in version 1.4.0: ‘tight’ as an allowed value for the argument Data type to force after DataFrame construction, otherwise infer. Column labels to use when . Raises a ValueError if used with or .\n\nBy default the keys of the dict become the DataFrame columns:\n\nSpecify to create the DataFrame using dictionary keys as rows:\n\nWhen using the ‘index’ orientation, the column names can be specified manually:\n\nSpecify to create the DataFrame using a ‘tight’ format:"
    },
    {
        "link": "https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html",
        "document": ""
    },
    {
        "link": "https://pandas.pydata.org/docs/dev/reference/api/pandas.DataFrame.from_dict.html",
        "document": "Construct DataFrame from dict of array-like or dicts.\n\nCreates DataFrame object from dictionary by columns or by index allowing dtype specification.\n\nOf the form {field : array-like} or {field : dict}. The “orientation” of the data. If the keys of the passed dict should be the columns of the resulting DataFrame, pass ‘columns’ (default). Otherwise if the keys should be rows, pass ‘index’. If ‘tight’, assume a dict with keys [‘index’, ‘columns’, ‘data’, ‘index_names’, ‘column_names’]. Added in version 1.4.0: ‘tight’ as an allowed value for the argument Data type to force after DataFrame construction, otherwise infer. Column labels to use when . Raises a ValueError if used with or .\n\nBy default the keys of the dict become the DataFrame columns:\n\nSpecify to create the DataFrame using dictionary keys as rows:\n\nWhen using the ‘index’ orientation, the column names can be specified manually:\n\nSpecify to create the DataFrame using a ‘tight’ format:"
    },
    {
        "link": "https://geeksforgeeks.org/how-to-create-dataframe-from-dictionary-in-python-pandas",
        "document": "The task of converting a dictionary into a Pandas DataFrame involves transforming a dictionary into a structured, tabular format where keys represent column names or row indexes and values represent the corresponding data.\n\nThis is the simplest method where a dictionary is directly passed to pd.DataFrame(). Here, dictionary keys become column names and values become the corresponding data.\n\nBy default, Pandas assigns numerical row indexes (0,1,2,…). however we can define custom indexes using the index parameter.\n\nWhen the dictionary contains only key-value pairs (instead of lists), we need to convert it into a tabular format using pd.DataFrame(list(dictionary.items())).\n\nWe can create a DataFrame using only the required columns from the dictionary.\n\nUsing Different Orientation (Keys as Indexes)\n\nBy default, dictionary keys act as column names, but we can use them as row indexes by setting orient=’index’."
    },
    {
        "link": "https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_dict.html",
        "document": "The type of the key-value pairs can be customized with the parameters (see below).\n\nDetermines the type of the values of the dictionary.\n• None ‘records’ : list like [{column -> value}, … , {column -> value}] Added in version 1.4.0: ‘tight’ as an allowed value for the argument The collections.abc.MutableMapping subclass used for all Mappings in the return value. Can be the actual class or an empty instance of the mapping type you want. If you want a collections.defaultdict, you must pass it initialized. Whether to include the index item (and index_names item if is ‘tight’) in the returned dictionary. Can only be when is ‘split’ or ‘tight’. Return a collections.abc.MutableMapping object representing the DataFrame. The resulting transformation depends on the parameter.\n\nYou can specify the return orientation.\n\nYou can also specify the mapping type.\n\nIf you want a , you need to initialize it:"
    }
]