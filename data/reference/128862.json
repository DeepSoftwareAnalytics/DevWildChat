[
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API",
        "document": "The Canvas API provides a means for drawing graphics via JavaScript and the HTML element. Among other things, it can be used for animation, game graphics, data visualization, photo manipulation, and real-time video processing. The Canvas API largely focuses on 2D graphics. The WebGL API, which also uses the element, draws hardware-accelerated 2D and 3D graphics.\n\nThe method gets a reference to the HTML element. Next, the method gets that element's context—the thing onto which the drawing will be rendered. The actual drawing is done using the interface. The property makes the rectangle green. The method places its top-left corner at (10, 10), and gives it a size of 150 units wide by 100 tall.\n\nThe Canvas API is extremely powerful, but not always simple to use. The libraries listed below can make the creation of canvas-based projects faster and easier.\n• EaselJS is an open-source canvas library that makes creating games, generative art, and other highly graphical experiences easy.\n• Fabric.js is an open-source canvas library with SVG parsing capabilities.\n• heatmap.js is an open-source library for creating canvas-based data heat maps.\n• Konva.js is a 2D canvas library for desktop and mobile applications.\n• p5.js has a full set of canvas drawing functionality for artists, designers, educators, and beginners.\n• Paper.js is an open-source vector graphics scripting framework that runs on top of the HTML Canvas.\n• Phaser is a fast, free and fun open source framework for Canvas and WebGL powered browser games.\n• Pts.js is a library for creative coding and visualization in canvas and SVG.\n• Rekapi is an animation key-framing API for Canvas.\n• Scrawl-canvas is an open-source JavaScript library for creating and manipulating 2D canvas elements.\n• The ZIM framework provides conveniences, components, and controls for coding creativity on the canvas — includes accessibility and hundreds of colorful tutorials.\n• Sprig is a beginner-friendly, open-source, tile-based game development library that uses Canvas. Note: See the WebGL API for 2D and 3D libraries that use WebGL."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Basic_animations",
        "document": "Since we're using JavaScript to control elements, it's also very easy to make (interactive) animations. In this chapter we will take a look at how to do some basic animations. Probably the biggest limitation is, that once a shape gets drawn, it stays that way. If we need to move it we have to redraw it and everything that was drawn before it. It takes a lot of time to redraw complex frames and the performance depends highly on the speed of the computer it's running on.\n\nShapes are drawn to the canvas by using the canvas methods directly or by calling custom functions. In normal circumstances, we only see these results appear on the canvas when the script finishes executing. For instance, it isn't possible to do an animation from within a loop. That means we need a way to execute our drawing functions over a period of time. There are two ways to control an animation like this.\n\nFirst there's the , , and functions, which can be used to call a specific function over a set period of time. Starts repeatedly executing the function specified by every milliseconds. Executes the function specified by in milliseconds. Tells the browser that you wish to perform an animation and requests that the browser call a specified function to update an animation before the next repaint. If you don't want any user interaction you can use the function, which repeatedly executes the supplied code. If we wanted to make a game, we could use keyboard or mouse events to control the animation and use . By setting listeners using , we catch any user interaction and execute our animation functions. Note: In the examples below, we'll use the method to control the animation. The method provides a smoother and more efficient way for animating by calling the animation frame when the system is ready to paint the frame. The number of callbacks is usually 60 times per second and may be reduced to a lower rate when running in background tabs. For more information about the animation loop, especially for games, see the article Anatomy of a video game in our Game development zone."
    },
    {
        "link": "https://w3schools.com/jsref/api_canvas.asp",
        "document": "You access a element with the HTML DOM method .\n\nTo draw in the canvas you need to create a 2D context object:\n\nThe common way to draw on the canvas is to:\n\nThere are only 3 methods to draw directly on the canvas:\n\nThe canvas object also supports the standard properties and events.\n\nThe element is an HTML5 standard (2014).\n\nis supported in all modern browsers:"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial",
        "document": "This tutorial describes how to use the element to draw 2D graphics, starting with the basics. The examples provided should give you some clear ideas about what you can do with canvas, and will provide code snippets that may get you started in building your own content.\n\nis an HTML element which can be used to draw graphics via scripting (usually JavaScript). This can, for instance, be used to draw graphs, combine photos, or create simple animations.\n\nFirst introduced in WebKit by Apple for the macOS Dashboard, has since been implemented in browsers. Today, all major browsers support it."
    },
    {
        "link": "https://hackernoon.com/using-the-canvas-api-to-create-graphics-and-animations-in-javascript",
        "document": "In recent years, JavaScript has become one of the most popular programming languages, and it is frequently used for developing online applications and dynamic user interfaces. The ability to change visuals and animations in real-time using the Canvas API is one of its most powerful features.\n\nThis blog post will go through the Canvas API and how it can be used to generate rich and engaging images and animations in JavaScript. We'll start with the basics of the API and its features before moving on to more complex subjects like performance optimization and advanced animation techniques.\n\nWhat is the Canvas API?\n\nThe Canvas API is a significant HTML5 feature that allows developers to use JavaScript to draw graphics and animations on a web page. The API provides a simple and efficient way to render images, objects, and animations in real-time, and it can be used to develop a variety of graphical applications ranging from simple games to big data visualizations.\n\nThe Canvas API's basic structure is straightforward. It comprises of an HTML canvas element and a JavaScript API that provides methods for drawing and animating on the canvas. Simply add a canvas element to your HTML code and give it a unique ID that you can use to reference it in your JavaScript code to build a canvas.\n\nOnce you've added a canvas element, you can use the Canvas API to create real-time images and animations. The API includes methods for drawing shapes, lines, and pictures, as well as for transforming and animating them.\n\nTo get started with the Canvas API, you should first grasp how it works. Here are some of the most crucial ideas to remember:\n• The canvas element: As previously stated, the canvas element is the fundamental building component of the Canvas API. It is an HTML element that provides a real-time painting surface for graphics and animations.\n• Context: To interact with the canvas element, you must first construct a context. A context is an object that supports drawing and animation capabilities on the canvas. The Canvas API has two sorts of contexts: 2D and 3D. This post will concentrate on the 2D context, which is the most commonly utilized for online applications.\n• The canvas employs a two-dimensional coordinate system, with the origin (0, 0) in the top-left corner. The x-axis is horizontal and runs from left to right, while the y-axis is vertical and runs from top to bottom.\n• Forms: The Canvas API has methods for drawing shapes such as rectangles, circles, and pathways. Using the context's methods, you can set the position, size, and style of these shapes.\n• Images: The Canvas API, in addition to shapes, has methods for drawing images. You can load an image into the canvas and then render it using the drawImage() method.\n• Transformations: The Canvas API includes methods for transforming the context, such as rotations, translations, and scaling. Complex animations and images can be created with these adjustments.\n• Animations: The requestAnimationFrame() method of the Canvas API makes it easy to animate graphics. This approach, which is designed for performance and battery consumption, allows you to refresh the canvas on each frame of the animation.\n\nGetting Started with the Canvas API\n\nNow that you have a basic understanding of the Canvas API, let's take\n\na look at how to get started with using it. We will start by creating a simple canvas element and drawing a rectangle on it.\n\nHere is the HTML code to create a canvas element with a width of and a height of :\n\nNext, we need to create a context for the canvas in our JavaScript code. We can do this using the following code:\n\nWith the context established, we can begin drawing on the canvas. The following code will draw a rectangle on the canvas:\n\nIn this code, we set the context's fill style to \"red\" and then use the fillRect() method to draw a rectangle with a width of 100 pixels and a height of 50 pixels at the position (10, 10).\n\nWhen it comes to what you can accomplish with the Canvas API, this is only the tip of the iceberg. It may also be used to draw lines, arcs, and curves, as well as complicated structures and images. Transformations and animations can also be used to create rich and compelling images.\n\nWhile the Canvas API is a great tool for creating images and animations, it is critical to use it with efficiency in mind. Large, sophisticated graphics and animations can tax the CPU and GPU, resulting in poor or jerky performance.\n\nYou may do a number of things to improve the performance of your Canvas API applications. Among the most prominent techniques are:\n• Reduce the number of draw calls: Each time you call a method to draw on the canvas, time and processing power are consumed. It's critical to limit the number of draw calls you make in order to reduce the impact of these calls. This can be accomplished by employing larger, more complicated forms and images rather than a vast number of small ones.\n• Using caching: You should cache the visuals you draw on the canvas whenever possible. This allows you to reuse graphic elements rather than redraw them each time.\n\nHere is an example of a simple game loop in JavaScript:\n\nTo plan the game loop, we utilize the requestAnimationFrame() method in this example. This approach guarantees that the loop is called at the optimal frame rate, taking into account the device's performance.\n\nThe delta variable in the loop represents the amount of time that has passed since the loop's last iteration. This delta can be used to update the state of your visuals over time, ensuring that they function smoothly even if the frame rate varies.\n\nThe Canvas API is a powerful tool for creating graphics and animations in JavaScript. Whether you are building a simple website or a complex game, it provides you with the tools you need to create rich, interactive graphics and animations.\n\nWhile the API can be complex, with a little time and practice, you can master it and create amazing graphics and animations that will engage and delight your users. So why not give it a try today and see what you can create?"
    },
    {
        "link": "https://gsap.com/resources/get-started",
        "document": "Welcome! In this article we're going to cover GSAP's core fundamentals and animate some HTML elements. 🥳\n\nIf that's not your end goal, don't worry. Whatever you plan to animate, whichever framework you use - the techniques and principles covered here will serve you well.\n\nThe GreenSock Animation Platform (GSAP) is an industry-celebrated suite of tools used on over 11 million sites, including a ton of award ‑ winning ones! You can use GSAP to animate pretty much anything JavaScript can touch, in any framework. Whether you want to animate UI, SVG, Three.js or React components - GSAP has you covered. The core library contains everything you need to create blazing fast, cross-browser friendly animations. This is what we'll be stepping through in this article. In addition to the core, there are a variety of plugins. You don't need to learn them in order to get started, but they can help with specific animation challenges like scroll based animation, draggable interactions, morphing, etc.\n\nLet's start by animating an HTML element with a class of \"box\".\n\nA single animation like this is called a 'tween' This tween is saying \"hey GSAP, animate the element with a class of '.box' to an x of 200px (like )\".\n\nLet's take a closer look at the syntax.\n\nWe've got a method, a target and a vars object which all contain information about the animation\n\nThere are four types of tweens:\n\n- This is the most common type of tween. A tween will start at the element's current state and animate \"to\" the values defined in the tween.\n\n- Like a backwards where it animates \"from\" the values defined in the tween and ends at the element's current state.\n\n- You define both the starting and ending values.\n\nLet's look at them in action!\n\nNext up we have to tell GSAP what we want to animate. Under the hood GSAP uses , so for HTML or SVG targets we can use selector text like and . Or you can pass in a variable or even an Array.\n\nThe vars object contains all the information about the animation. These can be arbitrary properties you want to animate, or special properties that influence the behavior of the animation - like , or .\n\nGSAP can animate almost anything, there is no pre-determined list. This includes CSS properties, custom object properties, even CSS variables and complex strings! The most commonly animated properties are transforms and opacity.\n\nYou may be familiar with transforms from CSS:\n\nGSAP provides a shorthand for transforms. The previous line of CSS would be written like so.\n\nHere's a list of the shorthand transforms and some other commonly used properties.\n\nThe best way to learn is by experimenting. This demo below is a live code playground, go ahead and tweak the values to make the box move!\n\nPretty much anything - If you're not sure, give it a try! Can't figure it out? Pop over to the forums and we'll give you a hand.\n\nTransforms, colors, padding, border radius, GSAP can animate it all! Just remember to camelCase the properties - e.g. becomes .\n\nJust like HTML elements, SVG elements can be animated with transform shorthands. Additionally you can animate SVG attributes like , , , , , and even the SVG itself using an object.\n\nWhen we say anything we mean anything. GSAP doesn't even need DOM elements in order to animate properties. You can target literally any property of any object, even arbitrary ones you create like this:\n\nTo adjust how a tween behaves we can pass in some special properties. In fact, we've looked at one already - .\n\nLet's look at some of these in more detail...\n\ndoes exactly what you might think - it allows you to play an animation more than once. is often paired with in order to reverse the direction each cycle. Change the code to in the demo below to see the difference.\n\nYou can the start of an animation by a certain number of seconds. You can also use to add a delay to the start of any repeat iterations.\n\nSo far so good. But... these animations aren't very exciting yet. Easing to the rescue!"
    },
    {
        "link": "https://gsap.com/community/forums/topic/32378-curated-collection-of-gsap-examples-for-inspiration-with-code",
        "document": "Hey Cassie - Great suggestions, thank you! I will definitely dig into both. To answer your follow-up question, I was just searching Google, CodePen, the GSAP site, etc. for terms like \"GSAP examples with code\" or \"best GSAP animations\", or more specifically for things like \"gsap photo gallery examples\", etc. If I were to describe the ideal collection it would be: 2) Linked to code so I can see how the magic was done - sort of how Webflow Showcase examples often link to cloneables. 3) Tagged by feature type rather than GSAP element. So for example cool animations for cards, great hero animations, creative button animations, amazing photo gallery animations, etc. rather than ScrollTrigger animations and Observer animations etc. Sort of the way the Relume library or Flowbase have their components categorized. Clearly my goal is to get inspired by and build off of others' best work - respectfully of course. And I'd be remiss if I didn't also say how completely frickin' awesome GSAP is and how much the community appreciates your contributions and those of others who put so much time into this forum. Thank you!\n\n2) Linked to code so I can see how the magic was done - sort of how Webflow Showcase examples often link to cloneables. 3) Tagged by feature type rather than GSAP element. So for example cool animations for cards, great hero animations, creative button animations, amazing photo gallery animations, etc. rather than ScrollTrigger animations and Observer animations etc. Sort of the way the Relume library or Flowbase have their components categorized. \n\n Ah! I see - I think the issue here is that GSAP doesn't make our own 'components' like webflow, tailwind reflume etc. And we don't have the right to share code from people's live commercial websites. \n\n\n\n I'm planning on making an area to search for UI patterns in the learning center, but those will be more along the lines of minimal functional demos. Mainly to show how the GSAP side of things work. e.g. this draggable slider\n\n See the Pen PojYwPp by GreenSock (@GreenSock) on CodePen. \n\n\n\n Whereas It sounds like you're looking more for polished, designed, production examples for inspiration. But also access to the code. That's a tricky middle ground because it's up to the developers (and clients) whether they open source the code and many are under NDA. Clearly my goal is to get inspired by and build off of others' best work - respectfully of course. for 'building off' codepen is probably the best place to go for this, for 'get inspired by' (if you're looking for real world live websites) that would be awwwards or our showcase.\n\n\n\n It's pretty hard to bridge that gap in between. I'll ponder on it! Thanks so much for the input.\n\n\n\nI'd echo Jack and Cassie's thoughts from above. Definitely a nice idea @Eunomiac, but I wouldn't want to see a bunch of unanswered logic questions. There are active community members answering questions around here, but by and large, most are answered by Admins/Mods so I'm not sure many people would jump on the 3rd party, logic type questions. Most of us on the GSAP team wouldn't really have time either. That's pretty much the main problem. We're all trying to get all the GSAP related questions answered so diving deep into other code is a bit of a stretch. Most of the Mods are volunteers and have full-time jobs too so it's a balancing act. See if you can give a go at answering some unanswered questions here in the forums. That's some of the best advice you can get. Helping others is how I learned GSAP and probably 50%+ of what I know about vanilla JS. You'd be amazed how much you'll learn just by answering some questions. You might make a few mistakes (I made many), but that's how we learn. All the best and happy tweening to everyone.\n\nOn 5/21/2022 at 3:14 AM, Eunomiac said: (After dutifully heeding instructions by spending an hour and a half on a CodePen demo, receiving a referral to such a forum in reply would be less painful than being told one's question is an issue of code logic, not GSAP, and is thus ineligible for assistance. I've since recovered , but I should confess that particular experience didn't represent this community well! I definitely hear and understand everything that's been said on the difficulty of managing expectations of assistance, but I think this may have been lost in the shuffle (of course, me putting it in parentheses and presenting it as an afterthought may have had something to do with that ). Because there's certainly the potential for a great deal of frustration when, on one hand, the forum rules request that community members spend time creating a CodePen demo to illustrate their problem while, on the other hand, there's the very real \"risk\" that all that work will prove to have been in vain --- as @GreenSock put it: On 5/21/2022 at 1:11 PM, GreenSock said: Usually people don't have a solid understanding of where that line [between ineligible logic questions vs. eligible GSAP help] is ... which only exacerbates the problem. To be clear, I'm not complaining about any particular treatment I've received --- the frustration I describe above happened only once to me, and my every other experience here has been wonderful --- but I wanted to shine a light on this specific issue in particular. Moreover, it may be difficult for you to get a good read on just how many people have been frustrated by similar experiences if most people react the same way I did: grumble and silently depart, bemoaning the time wasted. I wish I had a solution, and perhaps it isn't as much of a concern as I'm making it out to be, but definitely something to be aware of!\n\nOn 5/21/2022 at 7:11 PM, GreenSock said: That's a very understandable and reasonable request. The tricky things are:\n• Usually people don't have a solid understanding of where that line is, nor do they like making decisions about which forum their question belongs in. They'll likely think \"I'm using GSAP...so my question belongs in the GSAP forum...\" . We could, of course, MOVE posts that don't belong. Not a deal-breaker, but I'm just pointing out that I don't think it'll be a clean solution.\n• In my experience, it's hard enough to get people to pitch in to answer GSAP-specific questions - the other ones about logic, 3rd party libraries, etc. are often much more complicated and I fear the forum you're suggesting would end up being a ghost town where lots of questions go to die Like...tons of unanswered questions which can ultimately reflect poorly on the brand. I don't know about you, but the vast majority of people in the forums want to take more than they give. They've got busy lives, deadlines looming, etc. While it's a lovely thought (a forum where a whole community is just waiting to help you solve logic issues and other general questions), I fear it isn't terribly realistic unless a lot of those people are eager to spend time helping others in their spare time. I do appreciate the suggestion, though, and I'm curious to hear what other people think. I do like trying to help others here, when time permits and mostly when I'm involved with gsap - which is only a percentage of my time. I'm not sure if it is only me, but I very often find it very hard to find questions to answer, as the team of mods is so quick and active 24/7 that oftentimes it happens, that when I have looked at a problem and starting to answer it, I already was too late with my answer. \n\n\n\n I generally agree that there may not be too many like me, and I'm also somewhat frustrated with all those framework questions - hate most of them for good reasons. On the other hand the knowledge found here in those forums is so great, and the culture is too, so that I often whish, that there were forums for frontend questions not (directly) related to gsap - as StackOverflow with ist catastrophic culture is dominating the market and is less and less helpful by the hour. Those could be a place to see if the community still might work a bit like in the olden times - thinking for example of the AS-forums on Flash, those were a great place to exchange ideas and get help even with Adobe sucking and not providing anything but the platform. \n\n But I'm getting sentimental."
    },
    {
        "link": "https://merixstudio.com/blog/how-animate-dom-elements-gsap-guide",
        "document": "GSAP, a GreenSock Animation Platform, is a JavaScript framework for animation of DOM elements. Its main advantages are high compatibility with browsers, efficiency and control over animations which we can’t be achieved by working with CSS or jQuery.animate()\n• TimelineMax/TimelineLite – enables the creation and management of animations’ sequences.\n\nAs you might have already guessed, Max and Lite versions differ mainly in the file weight and the possibilities they provide. In many cases the Light version is sufficient enough to handle most animations. However, if we want to use functions such as repeat() we have to use TweenMax.\n\nFirst steps in working with GSAP\n\nAlthough CSS enables working with animations, it only helps with establishing the duration of animation, with delaying it or with working on few simple easing functions. GSAP enables full control over the animation no matter the state it’s currently in. For instance, we can run the animation or stop it midway its execution and then run it backwards with doubled speed.\n\nFirstly, we have to implement the library into our website. We’ll load TweenMax, which includes the whole library in the single file.\n\nAfter that we’ll present some basic examples. It’s syntax is quite simple:\n• time – course of action of the animation [in seconds],\n• animation_properties – an array of properties including values, which are to be animated.\n\nThis short line is responsible for shifting the element that has #image id by 90% to the right over the course of 2 seconds.\n\nWe can execute the very same code while changing the function from .to() to .from(). It will make the animation start from values given in this line to values the animation had when we launched it.\n\nA keen eye will notice the .set() function, which sets the animation in the given spot without actually animating it. GSAP’s capabilities are not, obviously, limited to simple shifting of objects – we can , for instance, also animate any CSS properties.\n\nIn this example we used fromTo(), which allows to set not only destination values, but the starting values as well – in this case it animates the scale and rotation. Additionally, I gave this code a half-second delay and set easing, which made the animation look dynamic. Also, thanks to alert() function, the alert will show up after the animation finishes.\n\nApart from animation of element to specific value (what was shown above), we can also animate by specific value. By inserting “+=” or “-=” before the number, we’ll either add or subtract chosen value from the starting one. In this case it’ll widen the element by 20 pixels.\n\nWithout a doubt, some of the most interesting features of GSAP are easings, which you might know from CSS transition or animation (for instance linear or ease). TweenMax has even more options, what extends their capabilities even more!\n\nGreenSock team created a great tool that shows the capabilities of GSAP’s easings with the possibility of configuration, it also gives you a code that’s ready to use right from the spot. I think that checking it out is the best way to understand how it works!\n\nFew of the most important methods of TweenLite/Max\n• delay (number) - the time (measured in seconds) describing the delay of animation,\n• duration ([number]) - gets or sets duration of animation,\n• from (element, animation_time, object)- creates an instance in which we define an animated element, its duration (measured in seconds) and an array of values from which the object will be animated to the values that you have when you call the function,\n• fromTo (element, duration, start_values, end_values) - creates instances of animation in which we define animated item, its duration (measured in seconds) and two an object with properties to animate as keys and its values (first with the start values, second with final values of animation),\n• kill() - removes the instance of animation and given values of the element,\n• onComplete (function) - function activated at the end of the animation,\n• onStart (function) - function activated when you start the animation,\n• onUpdate (function) - function activated throughout every frame of the animation,\n• progress ([number]) - gets or sets the progress of animation in the range from 0 to 1,\n• repeat() – defines the number of repetitions of animation (only TweenMax),\n• repeatDelay() - defines the delay for repetition (only TweenMax),\n• reset() – restarts the animation and restores it to the initial values,\n• timeScale (number) – defines the speed of animation 0 1 means the speed is normal (default), 0.5 means a double exemption, 2 means double acceleration,\n• to (element, animation_time, variables) – initiates an instance in which we define an animated element, its time(in seconds) and an array of values that will receive the element in the course of the animation,\n• yoyo() - every second animation includes reverse feature – in the result we recieve the animation of returning to the original values (only TweenMax).\n\nThese methods are only part of the whole available package – you can check out the rest of them on the official Greensock website.\n\nYou can discover all capabilities of TweenMax library by combining it with TimelineMax, thanks to what it will be possible to combine animations in sequences.\n\nAs you can see in the first line of code, we assigned a new timeline to the tl variable, while in the rest of the lines we added animations by using the .add() function, about which we talked in previous paragraphs.\n\nIn this example after one of the animation is completed, the next one starts. However, as a second argument of the .add() function we can define at what time the animation should start. The final effect should look like this:\n\nYou have probably noticed that, in spite of the same instruction, the sequence of animation is different. Moreover, animations can even overlap – there is no problem too big for GSAP!\n\n* Remember, methods of working with TimelineLite / Max are the same as in the TweenLite / Max ones.\n\nThe extension and use of the opportunities\n\nGreenSock provides many plug-ins. Despite the fact that you might have to pay for the most interesting ones, you can still combine animations with each other and create really great results. Furthermore, TweenMax can be combined with other libraries, which greatly expand its features (see. ScrollMagic, which runes animation when the page is scrolled). Take a look at the website and documentation of GSAP, which will allow you to use the full potential of the library.\n\nThere are few alternatives of GSAP, such as Velocity, Transit or jQuery.animate(), but not without a reason Google recommends GSAP! Of all of the available frameworks, its the solution created by GreenSock that is the most flexible and powerful. You need more proof? Here you can check the comparison of the performance of several frameworks available for animation.\n\nAs you can see, working with GSAP is not so difficult - all you need is our guide and a lot of practise! ;) I used this framework while I was working on our Back to The Frontend project - check out my article where I'm decribing the whole creative process!"
    },
    {
        "link": "https://css-tricks.com/how-to-animate-on-the-web-with-greensock",
        "document": "There are truly thousands of ways to animate on the web. We’ve covered a comparison of different animation technologies here before. Today, we’re going to dive into a step-by-step guide of one of my favorite ways to get it done: using GreenSock.\n\nWhy do I prefer GreenSock to other methods? Technically speaking, it’s often the best tool for the job. Its usage is extremely straightforward, even for complex movement. Here are a few more reasons why I prefer using it:\n• You can use them on DOM elements as well as within WebGL/Canvas/Three.js contexts.\n• The easing is very sophisticated. CSS animations are limited to two bezier handles for ease, meaning if you want, say, a bounce effect, you would have to make keyframes up and down and up and down for each pass. GreenSock allows multiple bezier handles to create advanced effects. A bounce is a single line of code. You can see what I mean by checking out their ease visualizer.\n• You can sequence movement on a timeline. CSS animations can get a little spaghetti when you have to coordinate several things at once. GreenSock remains very legible and allows you to control the timeline itself. You can even animate your animations! 🤯\n• It will perform some calculations under the hood to prevent strange cross-browser behavior as well as things that the spec dictates should be true aren’t — like the way that stacking transforms work.\n• It offers a lot of advanced functionality, in the form of plugins, that you can use if you’d like to take your work a step further — things like Morphing SVG shapes, drawing SVG paths, dragging and dropping, inertia, and more.\n\nPeople sometimes ask me why I’d use this particular library over all of the other choices. It’s further along than most others — they’ve been around since the Flash was still a thing. This demo reel is pretty inspiring, and also gets the point across that serious web animators do tend to reach for this tool:\n\nWhat follows is a breakdown of how to create movement on the web, distilled down to the smallest units I could make them. Let’s get started!\n\nConsider a ball that we make with a that’s styled with a value of 50%. Here’s how we would scale and move it with GreenSock:\n\nIn this case, we’re telling GreenSock ( ) to take the element with the class of move it a few different properties. We’ve shortened the CSS properties of to a streamlined (note there’s no need for the units, but you can pass them as a string). We’re also not writing . Here’s a reference of the transforms you might want to use with animations, and their corresponding CSS syntax:\n\nDuration is what you might think it is: it’s a one-second stretch of time.\n\nSo, OK, how would we animate, say, an SVG? Let’s consider the same code above as an SVG:\n\nFrom an animation perspective, it’s actually exactly the same. It’s grabbing the element with the class on it, and translating those properties. Since SVGs are literally DOM elements, we can slap a class on any one of them and animate them just the same way!\n\nI mentioned before that eases are one of my favorite features, let’s take a look at how we’d use them.\n\nLet’s take the original ball. Maybe we want to try one of those more unique bounce eases. It would go like this:\n\nThat’s it! This version of GreenSock assumes that you want to use timing (which is better for entrances), so it applies that as a default. All you have to do is specify “bounce” as a string and you’re off to the races.\n\nYou might have noticed we also lengthened the duration a bit as well. That’s because the ball has to do more “work” in between the initial and end states. A one-second duration, though lovely for linear or sine easing, is a little too quick for a bounce or an elastic ease.\n\nI mentioned that the default timing function is good for entrances. What about an or ease-in-out exit? Let’s do that as well.\n\nYou might have noticed a few things happening. For example, we didn’t use on the second-to-last line ( ). Instead, we used another ease called for . We also passed in a configuration option because, as you can see with Greensock’s ease visualizer tool, we’re not limited to just the default configuration for that ease. We can adjust it to our needs. Neat!\n\nYou may have also noticed that we chained the animations using a delay. We took the length of the duration of the first animation and made sure the next one has a delay that matches. Now, that works here, but that’s pretty brittle. What if we want to change the length of the first one? Well, now we’ve got to go back through and change the delay that follows. And what if we have another animation after that? And another one after that? Well, we’d have to go back through and calculate all the other delays down the line. That’s a lot of manual work.\n\nWe can offload that work to the computer. Some of my more complex animations are hundreds of chained animations! If I finish my work and want to adjust something in the beginning, I don’t want to have to go back through everything. Enter timelines:\n\nThis instantiates a timeline and then chains the two animations off of it.\n\nBut we still have a bit of repetition where we keep using the same duration in each animation. Let’s create a default for that as an option passed to the timeline.\n\nThat’s pretty cool! Alright, you are probably starting to see how things are built this way. While it might not be a big deal in an animation this simple, defaults and timelines in really complex animations can truly keep code maintainable.\n\nNow, what if we want to mirror this motion in the other direction with the ball, and just… keep it going? In other words, what if we want a loop? That’s when we add , which can be applied either to a single animation or to the entire timeline.\n\nWe could also not only make it repeat but repeat and playback and forth, like a yoyo. That’s why we call this yoyo: true. To make the point clear, we’ll show this with just the first animation. You can see it plays forward, and then it plays in reverse.\n\nIt’s great that we can chain animations with ease, but real-life motion doesn’t exactly work this way. If you walk across the room to get a cup of water, you don’t walk. Then stop. Then pick up the water. Then drink it. You’re more likely to do things in one continuous movement. So let’s talk briefly about how to overlap movement and make things fire at once.\n\nIf we want to be sure things fire a little before and after each other on a timeline, we can use an incrementer or decrementer. If we take the following example that shows three balls animating one after another, it feels a little stiff.\n\nThings get smoother if we overlap the movement just slightly using those decrementers passed as strings:\n\nAnother way we can do this is to use something called a label. Labels make sure things fire off at a particular point in time in the playhead of the animation. It looks like this:\n\nWe can even increment and decrement from the label. I actually do this a lot in my animations. It looks like this .\n\nWhew! We’re able to do so much with this! Here’s an example of an animation that puts a lot of these premises together, with a bit of interaction using vanilla JavaScript. Be sure to click on the bell.\n\nIf you’re looking more for framework-based animation with GreenSock, here’s an article I wrote that covers this in Vue, and a talk I gave that addresses React — it’s a couple of years old but the base premises still apply.\n\nBut there’s still so much we haven’t cover, including staggers, morphing SVG, drawing SVG, throwing things around the screen, moving things along a path, animating text… you name it! I’d suggest heading over to GreenSock’s documentation for those details. I also have a course on Frontend Masters that covers all of these in much more depth and the materials are open source on my GitHub. I also have a lot of Pens that are open source for you to fork and play with.\n\nI hope this gets you started working with animation on the web! I can’t wait to see what you make!"
    },
    {
        "link": "https://gsap.com/docs/v3/GSAP/Tween",
        "document": "A Tween is what does all the animation work - think of it like a high-performance property setter. You feed in targets (the objects you want to animate), a duration, and any properties you want to animate and when its playhead moves to a new position, it figures out what the property values should be at that point applies them accordingly.\n\nMethods for creating a Tween (all of these methods return a Tween instance):\n\nFor simple animations, the methods above are all you need! For example:\n\nSince GSAP can animate any property of any object, you are NOT limited to CSS properties or DOM objects. Go crazy. You may be surprised by how many things can be animated with GSAP and it \"just works\".\n\nYou can do basic sequencing by using the special property, but Timelines make sequencing and complex choreography much, much easier. A Timeline is like a container for multiple Tween instances (and/or other Timelines) where you can position them in time and control them as a whole. See the Timeline docs for details.\n\nTo control the Tween instance later, assign it to a variable (GSAP is conveniently object-oriented):\n• targets - the object(s) whose properties you want to animate. This can be selector text like , , etc. (GSAP uses internally) or it can be direct references to elements, generic objects, or even an array of objects\n• vars - an object containing all the properties/values you want to animate, along with any special properties like , , , or (listed below).\n• None The scope to be used for all of the callbacks (onStart, onUpdate, onComplete, etc.).\n• None Assign arbitrary data to this property (a string, a reference to an object, whatever) and it gets attached to the tween instance itself so that you can reference it later like\n• None Amount of delay before the animation should begin (in seconds).\n• None The duration of the animation (in seconds).\n• None Controls the rate of change during the animation, giving it a specific feel. For example, for a list of all of the options. can be a String (most common) or a function that accepts a progress value between 0 and 1 and returns a converted, similarly normalized value.\n• None Allows you to (optionally) assign a unique identifier to your tween instance so that you can find it later with and it will show up in\n• None Normally a tween waits to render for the first time until the very next tick (update cycle) unless you specify a delay. Set to force it to render immediately upon instantiation. tweens or anything with a\n• None Normally tweens inherit from their parent timeline's object (if one is defined), but you can disable this on a per-tween basis by setting\n• None When a tween renders for the very first time and reads its starting values, GSAP will try to delay writing of values until the very end of the current \"tick\" which can improve performance because it avoids the read/write/read/write layout thrashing that browsers dislike. To disable lazy rendering for a particular tween, set . In most cases, there's no need to set\n• None A function to call when the animation has completed.\n• None An Array of parameters to pass the onComplete function. For example,\n• None A function to call each time the animation enters a new iteration cycle (repeats). Obviously this only occurs if you set a non-zero\n• None An Array of parameters to pass the onRepeat function.\n• None A function to call when the animation has reached its beginning again from the reverse direction (excluding repeats).\n• None An Array of parameters to pass the onReverseComplete function.\n• None A function to call when the animation begins (when its time changes from 0 to some other value which can happen more than once if the tween is restarted multiple times).\n• None An Array of parameters to pass the onStart function.\n• None A function to call every time the animation updates (on each \"tick\" that moves its playhead).\n• None An Array of parameters to pass the onUpdate function.\n• None , all tweens of the same targets will be killed immediately regardless of what properties they affect. If , when the tween renders for the first time it hunt down any conflicts in active animations (animating the same properties of the same targets) and kill of the other tweens. Non-conflicting parts remain intact. If , no overwriting strategies will be employed.\n• None , the animation will pause itself immediately upon creation.\n• None How many times the animation should repeat. So would play a total of two iterations.\n• None Amount of time to wait between repeats (in seconds).\n• None and re-record its starting/ending values internally on each full iteration (not including yoyo's). This is useful when you use dynamic values (relative, random, or function-based). For example, would get a new random x value on each repeat.\n• None , the animation will start out with its playhead reversed, meaning it will be oriented to move toward its start. Since the playhead begins at a time of 0 anyway, a reversed tween will paused initially because its playhead cannot move backward past the start.\n• None , the animation will invert its starting and ending values (this is what a tween does internally), though the ease doesn't get flipped. In other words, you can make a\n• None If multiple targets are defined, you can easily the start times for each by setting a value like (for 0.1 seconds between each start time). Or you can get much more advanced staggers by using a stagger object. For more information, see\n• None Defines starting values for any properties (even if they're not animating). For example,\n• None iteration will run in the opposite direction so that the tween appears to go back and forth. This has no affect on the property though. So if , it will look like: start - 1 - 2 - 3 - 1 - 2 - 3 - 1 - 2 - 3 - end. But if , it will look like: start - 1 - 2 - 3 - 3 - 2 - 1 - 1 - 2 - 3 - end.\n• None Allows you to alter the ease in the tween's phase. Set it to a specific ease like or set it to . Note: GSAP is smart enough to automatically set if you define any , so there's less code for you to write.\n• None To animate the targets to various states, use - an array of vars objects that serve as . All keyframes will be perfectly sequenced back-to-back, but you can define a value to add spacing between each step (or a negative delay would create an overlap). Keyframes are only to be used in\n\nA plugin adds extra capabilities to GSAP's core. Some plugins make it easier to work with rendering libraries like PIXI.js or EaselJS while other plugins add superpowers like morphing SVG shapes, adding drag and drop functionality, etc. This allows the GSAP core to remain relatively small and lets you add features only when you need them. See the full list of plugins here.\n\nGet incredibly dynamic animations by using a function for any value, and it will get called once for each target the first time the tween renders, and whatever is returned by that function will be used as the value. This can be very useful for applying conditional logic or randomizing things (though GSAP has baked-in randomizing capabilities too...scroll down for that).\n\nThe function is passed three parameters:\n• index - the index of the target in the array. For example, if there are 3 elements with the class \".box\", and you , the function gets called 3 times (once for each target); the index would be first, then , and finally .\n• target - the target itself (the element in this example)\n• targets - the array of targets (same as )\n\nDefine random values as a string like for a range or like for an array and GSAP will swap in a random value for each target accordingly! This makes advanced randomized effects simple. You can even have the random number rounded to the closest increment of any number! For example:\n\nOr use an array-like value and GSAP will randomly select one of those:\n\nThere's also a function that you can use directly if you prefer.\n\nUse a or prefix to indicate a relative value. For example, will animate 20 pixels less than whatever it is when the tween starts. would add 20.\n\nIf multiple targets are defined, you can easily stagger (offset) the start times for each by setting a value like (for 0.1 seconds between each start time). Or you can get much more advanced staggers by using a stagger object. For more information, see the stagger documentation.\n\nFor basic sequencing, you could use a on each tween (like ), but we strongly recommended using a for all but the simplest sequencing tasks because it gives you much greater flexibility, especially when you're experimenting with timing. It allows you to append tweens one-after-the-other and then control the entire sequence as a whole. You can even have the tweens overlap as much as you want, nest timelines as deeply as you want, and much, much more.\n\nTimelines have convenient to(), from(), and fromTo() methods as well so you can very easily chain them together and build complex sequences:\n\nIf you find yourself animating the same target over and over again, you should definitely check out Keyframes which can make your code much more concise. They also let you port animations over from CSS animations easily.\n• You can change the default ease via . The default is .\n• Kill all tweens of a particular object anytime with You can also use selector text like\n• You can kill all s to a particular function with\n• If you find GreenSock tools useful, please consider joining Club GSAP which not only helps to sustain ongoing development, but also gets you bonus plugins, classes and other benefits that are ONLY available to members. Learn more at the club page.\n\nGets or sets the animation's initial delay which is the length of time in seconds before the animation should begin. Gets or sets the animation's duration, not including any repeats or repeatDelays. Returns the time at which the animation will finish according to the parent timeline's local time. Gets or sets an event callback like or or along with any parameters that should be passed to that callback. Converts a local time to the corresponding time on the gsap.globalTimeline (factoring in all nesting, timeScales, etc.). [override] Flushes any internally-recorded starting/ending values which can be useful if you want to restart an animation without reverting to any previously recorded starting values. Indicates whether or not the animation is currently active (meaning the virtual playhead is actively moving across this instance's time span and it is not paused, nor are any of its ancestor timelines). Gets or sets the iteration (the current repeat) of tweens. Kills the animation entirely or in part depending on the parameters. To kill means to immediately stop the animation, remove it from its parent timeline, and release it for garbage collection. Gets or sets the animation's paused state which indicates whether or not the animation is currently paused. Begins playing forward, optionally from a specific time (by default playback begins from wherever the playhead currently is). [override] Gets or sets the tween's progress which is a value between 0 and 1 indicating the position of the virtual playhead (excluding repeats) where 0 is at the beginning, 0.5 is halfway complete, and 1 is complete. Gets or sets the number of times that the tween should repeat after its first iteration. Gets or sets the amount of time in seconds between repeats. Restarts and begins playing forward from the beginning. Reverses playback so that all aspects of the animation are oriented backwards including, for example, a tween's ease. Gets or sets the animation's reversed state which indicates whether or not the animation should be played backwards. Reverts the animation and kills it, returning the targets to their pre-animation state including the removal of inline styles added by the animation. Jumps to a specific time without affecting whether or not the instance is paused or reversed. Gets or sets the time at which the animation begins on its parent timeline (after any delay that was defined). Returns a promise so that you can uses promises to track when a tween or timeline is complete. [override] Gets or sets the local position of the playhead (essentially the current time), not including any repeats or repeatDelays. Factor that's used to scale time in the animation where 1 = normal speed (the default), 0.5 = half speed, 2 = double speed, etc. [override] Gets or sets the total duration of the tween in seconds including any repeats or repeatDelays. [override] Gets or sets the tween's totalProgress which is a value between 0 and 1 indicating the position of the virtual playhead (including repeats) where 0 is at the beginning, 0.5 is halfway complete, and 1 is complete. Gets or sets the position of the playhead according to the totalDuration which includes any repeats and repeatDelays. Gets or sets the tween's yoyo state, where true causes the tween to go back and forth, alternating backward and forward on each repeat."
    }
]