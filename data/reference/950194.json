[
    {
        "link": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-systemparametersinfoa",
        "document": "Retrieves or sets the value of one of the system-wide parameters. This function can also update the user profile while setting a parameter.\n\nThe system-wide parameter to be retrieved or set. The possible values are organized in the following tables of related parameters:\n\nThe following are the accessibility parameters.\n\nRetrieves information about the time-out period associated with the accessibility features. The pvParam parameter must point to an ACCESSTIMEOUT structure that receives the information. Set the cbSize member of this structure and the uiParam parameter to . Determines whether audio descriptions are enabled or disabled. The pvParam parameter is a pointer to an AUDIODESCRIPTION structure. Set the cbSize member of this structure and the uiParam parameter to . While it is possible for users who have visual impairments to hear the audio in video content, there is a lot of action in video that does not have corresponding audio. Specific audio description of what is happening in a video helps these users understand the content better. This flag enables you to determine whether audio descriptions have been enabled and in which language. Windows Server 2003 and Windows XP/2000: This parameter is not supported. Determines whether animations are enabled or disabled. The pvParam parameter must point to a BOOL variable that receives TRUE if animations are enabled, or FALSE otherwise. Display features such as flashing, blinking, flickering, and moving content can cause seizures in users with photo-sensitive epilepsy. This flag enables you to determine whether such animations have been disabled in the client area. Windows Server 2003 and Windows XP/2000: This parameter is not supported. Determines whether overlapped content is enabled or disabled. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled, or FALSE otherwise. Display features such as background images, textured backgrounds, water marks on documents, alpha blending, and transparency can reduce the contrast between the foreground and background, making it harder for users with low vision to see objects on the screen. This flag enables you to determine whether such overlapped content has been disabled. Windows Server 2003 and Windows XP/2000: This parameter is not supported. Retrieves information about the FilterKeys accessibility feature. The pvParam parameter must point to a FILTERKEYS structure that receives the information. Set the cbSize member of this structure and the uiParam parameter to . Retrieves the height, in pixels, of the top and bottom edges of the focus rectangle drawn with DrawFocusRect. The pvParam parameter must point to a UINT value. Windows 2000: This parameter is not supported. Retrieves the width, in pixels, of the left and right edges of the focus rectangle drawn with DrawFocusRect. The pvParam parameter must point to a UINT. Windows 2000: This parameter is not supported. Retrieves information about the HighContrast accessibility feature. The pvParam parameter must point to a HIGHCONTRAST structure that receives the information. Set the cbSize member of this structure and the uiParam parameter to . Retrieves a value that determines whether Windows 8 is displaying apps using the default scaling plateau for the hardware or going to the next higher plateau. This value is based on the current \"Make everything on your screen bigger\" setting, found in the Ease of Access section of PC settings: 1 is on, 0 is off. Apps can provide text and image resources for each of several scaling plateaus: 100%, 140%, and 180%. Providing separate resources optimized for a particular scale avoids distortion due to resizing. Windows 8 determines the appropriate scaling plateau based on a number of factors, including screen size and pixel density. When \"Make everything on your screen bigger\" is selected (SPI_GETLOGICALDPIOVERRIDE returns a value of 1), Windows uses resources from the next higher plateau. For example, in the case of hardware that Windows determines should use a scale of SCALE_100_PERCENT, this override causes Windows to use the SCALE_140_PERCENT scale value, assuming that it does not violate other constraints. Note You should not use this value. It might be altered or unavailable in subsequent versions of Windows. Instead, use the You should not use this value. It might be altered or unavailable in subsequent versions of Windows. Instead, use the GetScaleFactorForDevice function or the DisplayProperties class to retrieve the preferred scaling factor. Desktop applications should use desktop logical DPI rather than scale factor. Desktop logical DPI can be retrieved through the GetDeviceCaps function. Retrieves the time that notification pop-ups should be displayed, in seconds. The pvParam parameter must point to a ULONG that receives the message duration. Users with visual impairments or cognitive conditions such as ADHD and dyslexia might need a longer time to read the text in notification messages. This flag enables you to retrieve the message duration. Windows Server 2003 and Windows XP/2000: This parameter is not supported. Retrieves the state of the Mouse ClickLock feature. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled, or FALSE otherwise. For more information, see Mouse Input Overview. Windows 2000: This parameter is not supported. Retrieves the time delay before the primary mouse button is locked. The pvParam parameter must point to DWORD that receives the time delay, in milliseconds. This is only enabled if SPI_SETMOUSECLICKLOCK is set to TRUE. For more information, see Mouse Input Overview. Windows 2000: This parameter is not supported. Retrieves information about the MouseKeys accessibility feature. The pvParam parameter must point to a MOUSEKEYS structure that receives the information. Set the cbSize member of this structure and the uiParam parameter to . Retrieves the state of the Mouse Sonar feature. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled or FALSE otherwise. For more information, see Mouse Input Overview. Windows 2000: This parameter is not supported. Retrieves the state of the Mouse Vanish feature. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled or FALSE otherwise. For more information, see Mouse Input Overview. Windows 2000: This parameter is not supported. Determines whether a screen reviewer utility is running. A screen reviewer utility directs textual information to an output device, such as a speech synthesizer or Braille display. When this flag is set, an application should provide textual information in situations where it would otherwise present the information graphically. The pvParam parameter is a pointer to a BOOL variable that receives TRUE if a screen reviewer utility is running, or FALSE otherwise. Note Narrator, the screen reader that is included with Windows, does not set the SPI_SETSCREENREADER or SPI_GETSCREENREADER flags. This parameter is not supported. Windows Server 2003 and Windows XP/2000: The user should control this setting through the Control Panel. Determines whether the Show Sounds accessibility flag is on or off. If it is on, the user requires an application to present information visually in situations where it would otherwise present the information only in audible form. The pvParam parameter must point to a BOOL variable that receives TRUE if the feature is on, or FALSE if it is off. Using this value is equivalent to calling GetSystemMetrics with SM_SHOWSOUNDS. That is the recommended call. Retrieves information about the SoundSentry accessibility feature. The pvParam parameter must point to a SOUNDSENTRY structure that receives the information. Set the cbSize member of this structure and the uiParam parameter to . Retrieves information about the StickyKeys accessibility feature. The pvParam parameter must point to a STICKYKEYS structure that receives the information. Set the cbSize member of this structure and the uiParam parameter to . Retrieves information about the ToggleKeys accessibility feature. The pvParam parameter must point to a TOGGLEKEYS structure that receives the information. Set the cbSize member of this structure and the uiParam parameter to . Sets the time-out period associated with the accessibility features. The pvParam parameter must point to an ACCESSTIMEOUT structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to . Turns the audio descriptions feature on or off. The pvParam parameter is a pointer to an AUDIODESCRIPTION structure. While it is possible for users who are visually impaired to hear the audio in video content, there is a lot of action in video that does not have corresponding audio. Specific audio description of what is happening in a video helps these users understand the content better. This flag enables you to enable or disable audio descriptions in the languages they are provided in. Windows Server 2003 and Windows XP/2000: This parameter is not supported. Turns client area animations on or off. The pvParam parameter is a BOOL variable. Set pvParam to TRUE to enable animations and other transient effects in the client area, or FALSE to disable them. Display features such as flashing, blinking, flickering, and moving content can cause seizures in users with photo-sensitive epilepsy. This flag enables you to enable or disable all such animations. Windows Server 2003 and Windows XP/2000: This parameter is not supported. Turns overlapped content (such as background images and watermarks) on or off. The pvParam parameter is a BOOL variable. Set pvParam to TRUE to disable overlapped content, or FALSE to enable overlapped content. Display features such as background images, textured backgrounds, water marks on documents, alpha blending, and transparency can reduce the contrast between the foreground and background, making it harder for users with low vision to see objects on the screen. This flag enables you to enable or disable all such overlapped content. Windows Server 2003 and Windows XP/2000: This parameter is not supported. Sets the parameters of the FilterKeys accessibility feature. The pvParam parameter must point to a FILTERKEYS structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to . Sets the height of the top and bottom edges of the focus rectangle drawn with DrawFocusRect to the value of the pvParam parameter. Windows 2000: This parameter is not supported. Sets the height of the left and right edges of the focus rectangle drawn with DrawFocusRect to the value of the pvParam parameter. Windows 2000: This parameter is not supported. Sets the parameters of the HighContrast accessibility feature. The pvParam parameter must point to a HIGHCONTRAST structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to . Do not use. Sets the time that notification pop-ups should be displayed, in seconds. The pvParam parameter specifies the message duration. Users with visual impairments or cognitive conditions such as ADHD and dyslexia might need a longer time to read the text in notification messages. This flag enables you to set the message duration. Windows Server 2003 and Windows XP/2000: This parameter is not supported. Turns the Mouse ClickLock accessibility feature on or off. This feature temporarily locks down the primary mouse button when that button is clicked and held down for the time specified by SPI_SETMOUSECLICKLOCKTIME. The pvParam parameter specifies TRUE for on, or FALSE for off. The default is off. For more information, see Remarks and AboutMouse Input. Windows 2000: This parameter is not supported. Adjusts the time delay before the primary mouse button is locked. The uiParam parameter should be set to 0. The pvParam parameter points to a DWORD that specifies the time delay in milliseconds. For example, specify 1000 for a 1 second delay. The default is 1200. For more information, see Mouse Input Overview. Windows 2000: This parameter is not supported. Sets the parameters of the MouseKeys accessibility feature. The pvParam parameter must point to a MOUSEKEYS structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to . Turns the Sonar accessibility feature on or off. This feature briefly shows several concentric circles around the mouse pointer when the user presses and releases the CTRL key. The pvParam parameter specifies TRUE for on and FALSE for off. The default is off. For more information, see Mouse Input Overview. Windows 2000: This parameter is not supported. Turns the Vanish feature on or off. This feature hides the mouse pointer when the user types; the pointer reappears when the user moves the mouse. The pvParam parameter specifies TRUE for on and FALSE for off. The default is off. For more information, see Mouse Input Overview. Windows 2000: This parameter is not supported. Determines whether a screen review utility is running. The uiParam parameter specifies TRUE for on, or FALSE for off. Note Narrator, the screen reader that is included with Windows, does not set the SPI_SETSCREENREADER or SPI_GETSCREENREADER flags. This parameter is not supported. Windows Server 2003 and Windows XP/2000: The user should control this setting through the Control Panel. Turns the ShowSounds accessibility feature on or off. The uiParam parameter specifies TRUE for on, or FALSE for off. Sets the parameters of the SoundSentry accessibility feature. The pvParam parameter must point to a SOUNDSENTRY structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to . Sets the parameters of the StickyKeys accessibility feature. The pvParam parameter must point to a STICKYKEYS structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to . Sets the parameters of the ToggleKeys accessibility feature. The pvParam parameter must point to a TOGGLEKEYS structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to .\n\nThe following are the desktop parameters.\n\nThe following are the icon parameters.\n\nThe following are the input parameters. They include parameters related to the keyboard, mouse, touchpad, pen, input language, and the warning beeper.\n\nDetermines whether the warning beeper is on. The pvParam parameter must point to a BOOL variable that receives TRUE if the beeper is on, or FALSE if it is off. Retrieves a BOOL indicating whether an application can reset the screensaver's timer by calling the SendInput function to simulate keyboard or mouse input. The pvParam parameter must point to a BOOL variable that receives TRUE if the simulated input will be blocked, or FALSE otherwise. Retrieves the current contact visualization setting. The pvParam parameter must point to a ULONG variable that receives the setting. For more information, see Contact Visualization. Retrieves the input locale identifier for the system default input language. The pvParam parameter must point to an HKL variable that receives this value. For more information, see Languages, Locales, and Keyboard Layouts. Retrieves the current gesture visualization setting. The pvParam parameter must point to a ULONG variable that receives the setting. For more information, see Gesture Visualization. Determines whether menu access keys are always underlined. The pvParam parameter must point to a BOOL variable that receives TRUE if menu access keys are always underlined, and FALSE if they are underlined only when the menu is activated by the keyboard. Retrieves the keyboard repeat-delay setting, which is a value in the range from 0 (approximately 250 ms delay) through 3 (approximately 1 second delay). The actual delay associated with each value may vary depending on the hardware. The pvParam parameter must point to an integer variable that receives the setting. Determines whether the user relies on the keyboard instead of the mouse, and wants applications to display keyboard interfaces that would otherwise be hidden. The pvParam parameter must point to a BOOL variable that receives TRUE if the user relies on the keyboard; or FALSE otherwise. Retrieves the keyboard repeat-speed setting, which is a value in the range from 0 (approximately 2.5 repetitions per second) through 31 (approximately 30 repetitions per second). The actual repeat rates are hardware-dependent and may vary from a linear scale by as much as 20%. The pvParam parameter must point to a DWORD variable that receives the setting. Retrieves the two mouse threshold values and the mouse acceleration. The pvParam parameter must point to an array of three integers that receives these values. See mouse_event for further information. Retrieves the height, in pixels, of the rectangle within which the mouse pointer has to stay for TrackMouseEvent to generate a WM_MOUSEHOVER message. The pvParam parameter must point to a UINT variable that receives the height. Retrieves the time, in milliseconds, that the mouse pointer has to stay in the hover rectangle for TrackMouseEvent to generate a WM_MOUSEHOVER message. The pvParam parameter must point to a UINT variable that receives the time. Retrieves the width, in pixels, of the rectangle within which the mouse pointer has to stay for TrackMouseEvent to generate a WM_MOUSEHOVER message. The pvParam parameter must point to a UINT variable that receives the width. Retrieves the current mouse speed. The mouse speed determines how far the pointer will move based on the distance the mouse moves. The pvParam parameter must point to an integer that receives a value which ranges between 1 (slowest) and 20 (fastest). A value of 10 is the default. The value can be set by an end-user using the mouse control panel application or by an application using SPI_SETMOUSESPEED. Determines whether the Mouse Trails feature is enabled. This feature improves the visibility of mouse cursor movements by briefly showing a trail of cursors and quickly erasing them. The pvParam parameter must point to an integer variable that receives a value. if the value is zero or 1, the feature is disabled. If the value is greater than 1, the feature is enabled and the value indicates the number of cursors drawn in the trail. The uiParam parameter is not used. Windows 2000: This parameter is not supported. Retrieves the routing setting for mouse wheel input. The routing setting determines whether mouse wheel input is sent to the app with focus (foreground) or the app under the mouse cursor. The pvParam parameter must point to a DWORD variable that receives the routing option. The uiParam parameter is not used. If the value is zero (MOUSEWHEEL_ROUTING_FOCUS), mouse wheel input is delivered to the app with focus. If the value is 1 (MOUSEWHEEL_ROUTING_HYBRID), mouse wheel input is delivered to the app with focus (desktop apps) or the app under the mouse pointer (Windows Store apps). Starting with Windows 10: If the value is 2 (MOUSEWHEEL_ROUTING_MOUSE_POS), mouse wheel input is delivered to the app under the mouse pointer. This is the new default, and MOUSEWHEEL_ROUTING_HYBRID is no longer available in Settings. Retrieves the current pen gesture visualization setting. The pvParam parameter must point to a ULONG variable that receives the setting. For more information, see Pen Visualization. Determines whether the snap-to-default-button feature is enabled. If enabled, the mouse cursor automatically moves to the default button, such as OK or Apply, of a dialog box. The pvParam parameter must point to a BOOL variable that receives TRUE if the feature is on, or FALSE if it is off. Starting with Windows 8: Determines whether the system language bar is enabled or disabled. The pvParam parameter must point to a BOOL variable that receives TRUE if the language bar is enabled, or FALSE otherwise. Starting with Windows 8: Determines whether the active input settings have Local (per-thread, TRUE) or Global (session, FALSE) scope. The pvParam parameter must point to a BOOL variable. Starting with Windows 11, version 24H2: Retrieves details about the Precision Touchpad, including user settings and system information related to the touchpad. The pvParam parameter must point to a TOUCHPAD_PARAMETERS structure. The uiParam parameter must specify the size of the structure. The value of the versionNumber field in the TOUCHPAD_PARAMETERS structure must be set to the appropriate value for the version of the structure being used. Retrieves the number of characters to scroll when the horizontal mouse wheel is moved. The pvParam parameter must point to a UINT variable that receives the number of lines. The default value is 3. Retrieves the number of lines to scroll when the vertical mouse wheel is moved. The pvParam parameter must point to a UINT variable that receives the number of lines. The default value is 3. Turns the warning beeper on or off. The uiParam parameter specifies TRUE for on, or FALSE for off. Determines whether an application can reset the screensaver's timer by calling the SendInput function to simulate keyboard or mouse input. The uiParam parameter specifies TRUE if the screensaver will not be deactivated by simulated input, or FALSE if the screensaver will be deactivated by simulated input. Sets the current contact visualization setting. The pvParam parameter must point to a ULONG variable that identifies the setting. For more information, see Contact Visualization. Note If contact visualizations are disabled, gesture visualizations cannot be enabled. Sets the default input language for the system shell and applications. The specified language must be displayable using the current system character set. The pvParam parameter must point to an HKL variable that contains the input locale identifier for the default language. For more information, see Languages, Locales, and Keyboard Layouts. Sets the double-click time for the mouse to the value of the uiParam parameter. If the uiParam value is greater than 5000 milliseconds, the system sets the double-click time to 5000 milliseconds. The double-click time is the maximum number of milliseconds that can occur between the first and second clicks of a double-click. You can also call the SetDoubleClickTime function to set the double-click time. To get the current double-click time, call the GetDoubleClickTime function. Sets the height of the double-click rectangle to the value of the uiParam parameter. The double-click rectangle is the rectangle within which the second click of a double-click must fall for it to be registered as a double-click. To retrieve the height of the double-click rectangle, call GetSystemMetrics with the SM_CYDOUBLECLK flag. Sets the width of the double-click rectangle to the value of the uiParam parameter. The double-click rectangle is the rectangle within which the second click of a double-click must fall for it to be registered as a double-click. To retrieve the width of the double-click rectangle, call GetSystemMetrics with the SM_CXDOUBLECLK flag. Sets the current gesture visualization setting. The pvParam parameter must point to a ULONG variable that identifies the setting. For more information, see Gesture Visualization. Note If contact visualizations are disabled, gesture visualizations cannot be enabled. Sets the underlining of menu access key letters. The pvParam parameter is a BOOL variable. Set pvParam to TRUE to always underline menu access keys, or FALSE to underline menu access keys only when the menu is activated from the keyboard. Sets the keyboard repeat-delay setting. The uiParam parameter must specify 0, 1, 2, or 3, where zero sets the shortest delay approximately 250 ms) and 3 sets the longest delay (approximately 1 second). The actual delay associated with each value may vary depending on the hardware. Sets the keyboard preference. The uiParam parameter specifies TRUE if the user relies on the keyboard instead of the mouse, and wants applications to display keyboard interfaces that would otherwise be hidden; uiParam is FALSE otherwise. Sets the keyboard repeat-speed setting. The uiParam parameter must specify a value in the range from 0 (approximately 2.5 repetitions per second) through 31 (approximately 30 repetitions per second). The actual repeat rates are hardware-dependent and may vary from a linear scale by as much as 20%. If uiParam is greater than 31, the parameter is set to 31. Sets the hot key set for switching between input languages. The uiParam and pvParam parameters are not used. The value sets the shortcut keys in the keyboard property sheets by reading the registry again. The registry must be set before this flag is used. the path in the registry is HKEY_CURRENT_USER\\Keyboard Layout\\Toggle . Valid values are \"1\" = ALT+SHIFT, \"2\" = CTRL+SHIFT, and \"3\" = none. Sets the two mouse threshold values and the mouse acceleration. The pvParam parameter must point to an array of three integers that specifies these values. See mouse_event for further information. Swaps or restores the meaning of the left and right mouse buttons. The uiParam parameter specifies TRUE to swap the meanings of the buttons, or FALSE to restore their original meanings. To retrieve the current setting, call GetSystemMetrics with the SM_SWAPBUTTON flag. Sets the height, in pixels, of the rectangle within which the mouse pointer has to stay for TrackMouseEvent to generate a WM_MOUSEHOVER message. Set the uiParam parameter to the new height. Sets the time, in milliseconds, that the mouse pointer has to stay in the hover rectangle for TrackMouseEvent to generate a WM_MOUSEHOVER message. This is used only if you pass HOVER_DEFAULT in the dwHoverTime parameter in the call to TrackMouseEvent. Set the uiParam parameter to the new time. The time specified should be between USER_TIMER_MAXIMUM and USER_TIMER_MINIMUM. If uiParam is less than USER_TIMER_MINIMUM, the function will use USER_TIMER_MINIMUM. If uiParam is greater than USER_TIMER_MAXIMUM, the function will be USER_TIMER_MAXIMUM. Windows Server 2003 and Windows XP: The operating system does not enforce the use of USER_TIMER_MAXIMUM and USER_TIMER_MINIMUM until Windows Server 2003 with SP1 and Windows XP with SP2. Sets the width, in pixels, of the rectangle within which the mouse pointer has to stay for TrackMouseEvent to generate a WM_MOUSEHOVER message. Set the uiParam parameter to the new width. Sets the current mouse speed. The pvParam parameter is an integer between 1 (slowest) and 20 (fastest). A value of 10 is the default. This value is typically set using the mouse control panel application. Enables or disables the Mouse Trails feature, which improves the visibility of mouse cursor movements by briefly showing a trail of cursors and quickly erasing them. To disable the feature, set the uiParam parameter to zero or 1. To enable the feature, set uiParam to a value greater than 1 to indicate the number of cursors drawn in the trail. Windows 2000: This parameter is not supported. Sets the routing setting for mouse wheel input. The routing setting determines whether mouse wheel input is sent to the app with focus (foreground) or the app under the mouse cursor. The pvParam parameter must point to a DWORD variable that receives the routing option. Set the uiParam parameter to zero. If the value is zero (MOUSEWHEEL_ROUTING_FOCUS), mouse wheel input is delivered to the app with focus. If the value is 1 (MOUSEWHEEL_ROUTING_HYBRID), mouse wheel input is delivered to the app with focus (desktop apps) or the app under the mouse pointer (Windows Store apps). Starting with Windows 10: If the value is 2 (MOUSEWHEEL_ROUTING_MOUSE_POS), mouse wheel input is delivered to the app under the mouse pointer. This is the new default, and MOUSEWHEEL_ROUTING_HYBRID is no longer available in Settings. Sets the current pen gesture visualization setting. The pvParam parameter must point to a ULONG variable that identifies the setting. For more information, see Pen Visualization. Enables or disables the snap-to-default-button feature. If enabled, the mouse cursor automatically moves to the default button, such as OK or Apply, of a dialog box. Set the uiParam parameter to TRUE to enable the feature, or FALSE to disable it. Applications should use the ShowWindow function when displaying a dialog box so the dialog manager can position the mouse cursor. Starting with Windows 8: Turns the legacy language bar feature on or off. The pvParam parameter is a pointer to a BOOL variable. Set pvParam to TRUE to enable the legacy language bar, or FALSE to disable it. The flag is supported on Windows 8 where the legacy language bar is replaced by Input Switcher and therefore turned off by default. Turning the legacy language bar on is provided for compatibility reasons and has no effect on the Input Switcher. Starting with Windows 8: Determines whether the active input settings have Local (per-thread, TRUE) or Global (session, FALSE) scope. The pvParam parameter must be a BOOL variable, casted by PVOID. Starting with Windows 11, version 24H2: Sets details about the Precision Touchpad, including user settings and system information related to the touchpad. The pvParam parameter must point to a TOUCHPAD_PARAMETERS structure. The uiParam parameter must specify the size of the structure. The value of the versionNumber field in the TOUCHPAD_PARAMETERS structure must be set to the appropriate value for the version of the structure being used. Sets the number of characters to scroll when the horizontal mouse wheel is moved. The number of characters is set from the uiParam parameter. Sets the number of lines to scroll when the vertical mouse wheel is moved. The number of lines is set from the uiParam parameter. The number of lines is the suggested number of lines to scroll when the mouse wheel is rolled without using modifier keys. If the number is 0, then no scrolling should occur. If the number of lines to scroll is greater than the number of lines viewable, and in particular if it is WHEEL_PAGESCROLL (#defined as UINT_MAX), the scroll operation should be interpreted as clicking once in the page down or page up regions of the scroll bar.\n\nThe following are the menu parameters.\n\nThe following are the power parameters.\n\nBeginning with Windows Server 2008 and Windows Vista, these power parameters are not supported. Instead, to determine the current display power state, an application should register for GUID_MONITOR_POWER_STATE notifications. To determine the current display power down time-out, an application should register for notification of changes to the GUID_VIDEO_POWERDOWN_TIMEOUT power setting. For more information, see Registering for Power Events.\n\nWindows Server 2003 and Windows XP/2000: To determine the current display power state, use the following power parameters.\n\nThe following are the screen saver parameters.\n\nThe following are the time-out parameters for applications and services.\n\nThe following are the UI effects. The SPI_SETUIEFFECTS value is used to enable or disable all UI effects at once. This table contains the complete list of UI effect values.\n\nDetermines whether the slide-open effect for combo boxes is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE for enabled, or FALSE for disabled. Determines whether the cursor has a shadow around it. The pvParam parameter must point to a BOOL variable that receives TRUE if the shadow is enabled, FALSE if it is disabled. This effect appears only if the system has a color depth of more than 256 colors. Determines whether the gradient effect for window title bars is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE for enabled, or FALSE for disabled. For more information about the gradient effect, see the GetSysColor function. Determines whether hot tracking of user-interface elements, such as menu names on menu bars, is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE for enabled, or FALSE for disabled. Hot tracking means that when the cursor moves over an item, it is highlighted but not selected. You can query this value to decide whether to use hot tracking in the user interface of your application. Determines whether the smooth-scrolling effect for list boxes is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE for enabled, or FALSE for disabled. Determines whether the menu animation feature is enabled. This master switch must be on to enable menu animation effects. The pvParam parameter must point to a BOOL variable that receives TRUE if animation is enabled and FALSE if it is disabled. If animation is enabled, SPI_GETMENUFADE indicates whether menus use fade or slide animation. Determines whether the selection fade effect is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled or FALSE if disabled. The selection fade effect causes the menu item selected by the user to remain on the screen briefly while fading out after the menu is dismissed. Determines whether ToolTip animation is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled or FALSE if disabled. If ToolTip animation is enabled, SPI_GETTOOLTIPFADE indicates whether ToolTips use fade or slide animation. If SPI_SETTOOLTIPANIMATION is enabled, SPI_GETTOOLTIPFADE indicates whether ToolTip animation uses a fade effect or a slide effect. The pvParam parameter must point to a BOOL variable that receives TRUE for fade animation or FALSE for slide animation. For more information on slide and fade effects, see AnimateWindow. Determines whether UI effects are enabled or disabled. The pvParam parameter must point to a BOOL variable that receives TRUE if all UI effects are enabled, or FALSE if they are disabled. Enables or disables the slide-open effect for combo boxes. Set the pvParam parameter to TRUE to enable the gradient effect, or FALSE to disable it. Enables or disables a shadow around the cursor. The pvParam parameter is a BOOL variable. Set pvParam to TRUE to enable the shadow or FALSE to disable the shadow. This effect appears only if the system has a color depth of more than 256 colors. Enables or disables the gradient effect for window title bars. Set the pvParam parameter to TRUE to enable it, or FALSE to disable it. The gradient effect is possible only if the system has a color depth of more than 256 colors. For more information about the gradient effect, see the GetSysColor function. Enables or disables hot tracking of user-interface elements such as menu names on menu bars. Set the pvParam parameter to TRUE to enable it, or FALSE to disable it. Hot-tracking means that when the cursor moves over an item, it is highlighted but not selected. Enables or disables the smooth-scrolling effect for list boxes. Set the pvParam parameter to TRUE to enable the smooth-scrolling effect, or FALSE to disable it. Enables or disables menu animation. This master switch must be on for any menu animation to occur. The pvParam parameter is a BOOL variable; set pvParam to TRUE to enable animation and FALSE to disable animation. If animation is enabled, SPI_GETMENUFADE indicates whether menus use fade or slide animation. Set pvParam to TRUE to enable the selection fade effect or FALSE to disable it. The selection fade effect causes the menu item selected by the user to remain on the screen briefly while fading out after the menu is dismissed. The selection fade effect is possible only if the system has a color depth of more than 256 colors. Set pvParam to TRUE to enable ToolTip animation or FALSE to disable it. If enabled, you can use SPI_SETTOOLTIPFADE to specify fade or slide animation. If the SPI_SETTOOLTIPANIMATION flag is enabled, use SPI_SETTOOLTIPFADE to indicate whether ToolTip animation uses a fade effect or a slide effect. Set pvParam to TRUE for fade animation or FALSE for slide animation. The tooltip fade effect is possible only if the system has a color depth of more than 256 colors. For more information on the slide and fade effects, see the AnimateWindow function. Enables or disables UI effects. Set the pvParam parameter to TRUE to enable all UI effects or FALSE to disable all UI effects.\n\nThe following are the window parameters.\n\nDetermines whether active window tracking (activating the window the mouse is on) is on or off. The pvParam parameter must point to a BOOL variable that receives TRUE for on, or FALSE for off. Determines whether windows activated through active window tracking will be brought to the top. The pvParam parameter must point to a BOOL variable that receives TRUE for on, or FALSE for off. Retrieves the active window tracking delay, in milliseconds. The pvParam parameter must point to a DWORD variable that receives the time. Retrieves the animation effects associated with user actions. The pvParam parameter must point to an ANIMATIONINFO structure that receives the information. Set the cbSize member of this structure and the uiParam parameter to . Retrieves the border multiplier factor that determines the width of a window's sizing border. The pvParam parameter must point to an integer variable that receives this value. Retrieves the caret width in edit controls, in pixels. The pvParam parameter must point to a DWORD variable that receives this value. Determines whether a window is docked when it is moved to the top, left, or right edges of a monitor or monitor array. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled, or FALSE otherwise. Use SPI_GETWINARRANGING to determine whether this behavior is enabled. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Determines whether a maximized window is restored when its caption bar is dragged. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled, or FALSE otherwise. Use SPI_GETWINARRANGING to determine whether this behavior is enabled. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Determines whether dragging of full windows is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled, or FALSE otherwise. Retrieves the number of times SetForegroundWindow will flash the taskbar button when rejecting a foreground switch request. The pvParam parameter must point to a DWORD variable that receives the value. Retrieves the amount of time following user input, in milliseconds, during which the system will not allow applications to force themselves into the foreground. The pvParam parameter must point to a DWORD variable that receives the time. Retrieves the metrics associated with minimized windows. The pvParam parameter must point to a MINIMIZEDMETRICS structure that receives the information. Set the cbSize member of this structure and the uiParam parameter to . Retrieves the threshold in pixels where docking behavior is triggered by using a mouse to drag a window to the edge of a monitor or monitor array. The default threshold is 1. The pvParam parameter must point to a DWORD variable that receives the value. Use SPI_GETWINARRANGING to determine whether this behavior is enabled. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Retrieves the threshold in pixels where undocking behavior is triggered by using a mouse to drag a window from the edge of a monitor or a monitor array toward the center. The default threshold is 20. Use SPI_GETWINARRANGING to determine whether this behavior is enabled. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Retrieves the threshold in pixels from the top of a monitor or a monitor array where a vertically maximized window is restored when dragged with the mouse. The default threshold is 50. Use SPI_GETWINARRANGING to determine whether this behavior is enabled. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Retrieves the metrics associated with the nonclient area of nonminimized windows. The pvParam parameter must point to a NONCLIENTMETRICS structure that receives the information. Set the cbSize member of this structure and the uiParam parameter to . Windows Server 2003 and Windows XP/2000: See Remarks for NONCLIENTMETRICS. Retrieves the threshold in pixels where docking behavior is triggered by using a pen to drag a window to the edge of a monitor or monitor array. The default is 30. Use SPI_GETWINARRANGING to determine whether this behavior is enabled. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Retrieves the threshold in pixels where undocking behavior is triggered by using a pen to drag a window from the edge of a monitor or monitor array toward its center. The default threshold is 30. Use SPI_GETWINARRANGING to determine whether this behavior is enabled. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Retrieves the threshold in pixels from the top of a monitor or monitor array where a vertically maximized window is restored when dragged with the mouse. The default threshold is 50. Use SPI_GETWINARRANGING to determine whether this behavior is enabled. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Determines whether the IME status window is visible (on a per-user basis). The pvParam parameter must point to a BOOL variable that receives TRUE if the status window is visible, or FALSE if it is not. Determines whether a window is vertically maximized when it is sized to the top or bottom of a monitor or monitor array. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled, or FALSE otherwise. Use SPI_GETWINARRANGING to determine whether this behavior is enabled. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Determines whether window arrangement is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled, or FALSE otherwise. Window arrangement reduces the number of mouse, pen, or touch interactions needed to move and size top-level windows by simplifying the default behavior of a window when it is dragged or sized. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Sets active window tracking (activating the window the mouse is on) either on or off. Set pvParam to TRUE for on or FALSE for off. Determines whether or not windows activated through active window tracking should be brought to the top. Set pvParam to TRUE for on or FALSE for off. Sets the active window tracking delay. Set pvParam to the number of milliseconds to delay before activating the window under the mouse pointer. Sets the animation effects associated with user actions. The pvParam parameter must point to an ANIMATIONINFO structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to . Sets the border multiplier factor that determines the width of a window's sizing border. The uiParam parameter specifies the new value. Sets the caret width in edit controls. Set pvParam to the desired width, in pixels. The default and minimum value is 1. Sets whether a window is docked when it is moved to the top, left, or right docking targets on a monitor or monitor array. Set pvParam to TRUE for on or FALSE for off. SPI_GETWINARRANGING must be TRUE to enable this behavior. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Sets whether a maximized window is restored when its caption bar is dragged. Set pvParam to TRUE for on or FALSE for off. SPI_GETWINARRANGING must be TRUE to enable this behavior. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Sets dragging of full windows either on or off. The uiParam parameter specifies TRUE for on, or FALSE for off. Sets the height, in pixels, of the rectangle used to detect the start of a drag operation. Set uiParam to the new value. To retrieve the drag height, call GetSystemMetrics with the SM_CYDRAG flag. Sets the width, in pixels, of the rectangle used to detect the start of a drag operation. Set uiParam to the new value. To retrieve the drag width, call GetSystemMetrics with the SM_CXDRAG flag. Sets the number of times SetForegroundWindow will flash the taskbar button when rejecting a foreground switch request. Set pvParam to the number of times to flash. Sets the amount of time following user input, in milliseconds, during which the system does not allow applications to force themselves into the foreground. Set pvParam to the new time-out value. The calling thread must be able to change the foreground window, otherwise the call fails. Sets the metrics associated with minimized windows. The pvParam parameter must point to a MINIMIZEDMETRICS structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to . Sets the threshold in pixels where docking behavior is triggered by using a mouse to drag a window to the edge of a monitor or monitor array. The default threshold is 1. The pvParam parameter must point to a DWORD variable that contains the new value. SPI_GETWINARRANGING must be TRUE to enable this behavior. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Sets the threshold in pixels where undocking behavior is triggered by using a mouse to drag a window from the edge of a monitor or monitor array to its center. The default threshold is 20. The pvParam parameter must point to a DWORD variable that contains the new value. SPI_GETWINARRANGING must be TRUE to enable this behavior. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Sets the threshold in pixels from the top of the monitor where a vertically maximized window is restored when dragged with the mouse. The default threshold is 50. The pvParam parameter must point to a DWORD variable that contains the new value. SPI_GETWINARRANGING must be TRUE to enable this behavior. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Sets the metrics associated with the nonclient area of nonminimized windows. The pvParam parameter must point to a NONCLIENTMETRICS structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to . Also, the lfHeight member of the LOGFONT structure must be a negative value. Sets the threshold in pixels where docking behavior is triggered by using a pen to drag a window to the edge of a monitor or monitor array. The default threshold is 30. The pvParam parameter must point to a DWORD variable that contains the new value. SPI_GETWINARRANGING must be TRUE to enable this behavior. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Sets the threshold in pixels where undocking behavior is triggered by using a pen to drag a window from the edge of a monitor or monitor array to its center. The default threshold is 30. The pvParam parameter must point to a DWORD variable that contains the new value. SPI_GETWINARRANGING must be TRUE to enable this behavior. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Sets the threshold in pixels from the top of the monitor where a vertically maximized window is restored when dragged with a pen. The default threshold is 50. The pvParam parameter must point to a DWORD variable that contains the new value. SPI_GETWINARRANGING must be TRUE to enable this behavior. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Sets whether the IME status window is visible or not on a per-user basis. The uiParam parameter specifies TRUE for on or FALSE for off. Sets whether a window is vertically maximized when it is sized to the top or bottom of the monitor. Set pvParam to TRUE for on or FALSE for off. SPI_GETWINARRANGING must be TRUE to enable this behavior. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Sets whether window arrangement is enabled. Set pvParam to TRUE for on or FALSE for off. Window arrangement reduces the number of mouse, pen, or touch interactions needed to move and size top-level windows by simplifying the default behavior of a window when it is dragged or sized. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported.\n\nA parameter whose usage and format depends on the system parameter being queried or set. For more information about system-wide parameters, see the uiAction parameter. If not otherwise indicated, you must specify zero for this parameter.\n\nA parameter whose usage and format depends on the system parameter being queried or set. For more information about system-wide parameters, see the uiAction parameter. If not otherwise indicated, you must specify NULL for this parameter. For information on the PVOID datatype, see Windows Data Types.\n\nIf a system parameter is being set, specifies whether the user profile is to be updated, and if so, whether the WM_SETTINGCHANGE message is to be broadcast to all top-level windows to notify them of the change.\n\nThis parameter can be zero if you do not want to update the user profile or broadcast the WM_SETTINGCHANGE message, or it can be one or more of the following values.\n\nIf the function succeeds, the return value is a nonzero value.\n\nIf the function fails, the return value is zero. To get extended error information, call GetLastError.\n\nThis function is intended for use with applications that allow the user to customize the environment.\n\nA keyboard layout name should be derived from the hexadecimal value of the language identifier corresponding to the layout. For example, U.S. English has a language identifier of 0x0409, so the primary U.S. English layout is named \"00000409\". Variants of U.S. English layout, such as the Dvorak layout, are named \"00010409\", \"00020409\" and so on. For a list of the primary language identifiers and sublanguage identifiers that make up a language identifier, see the MAKELANGID macro.\n\nThere is a difference between the High Contrast color scheme and the High Contrast Mode. The High Contrast color scheme changes the system colors to colors that have obvious contrast; you switch to this color scheme by using the Display Options in the control panel. The High Contrast Mode, which uses SPI_GETHIGHCONTRAST and SPI_SETHIGHCONTRAST, advises applications to modify their appearance for visually-impaired users. It involves such things as audible warning to users and customized color scheme (using the Accessibility Options in the control panel). For more information, see HIGHCONTRAST. For more information on general accessibility features, see Accessibility.\n\nDuring the time that the primary button is held down to activate the Mouse ClickLock feature, the user can move the mouse. After the primary button is locked down, releasing the primary button does not result in a WM_LBUTTONUP message. Thus, it will appear to an application that the primary button is still down. Any subsequent button message releases the primary button, sending a WM_LBUTTONUP message to the application, thus the button can be unlocked programmatically or through the user clicking any button.\n\nThis API is not DPI aware, and should not be used if the calling thread is per-monitor DPI aware. For the DPI-aware version of this API, see SystemParametersInfoForDPI. For more information on DPI awareness, see the Windows High DPI documentation.\n\nThe following example uses SystemParametersInfo to double the mouse speed."
    },
    {
        "link": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-systemparametersinfow",
        "document": "Retrieves or sets the value of one of the system-wide parameters. This function can also update the user profile while setting a parameter.\n\nThe system-wide parameter to be retrieved or set. The possible values are organized in the following tables of related parameters:\n\nThe following are the accessibility parameters.\n\nRetrieves information about the time-out period associated with the accessibility features. The pvParam parameter must point to an ACCESSTIMEOUT structure that receives the information. Set the cbSize member of this structure and the uiParam parameter to . Determines whether audio descriptions are enabled or disabled. The pvParam parameter is a pointer to an AUDIODESCRIPTION structure. Set the cbSize member of this structure and the uiParam parameter to . While it is possible for users who have visual impairments to hear the audio in video content, there is a lot of action in video that does not have corresponding audio. Specific audio description of what is happening in a video helps these users understand the content better. This flag enables you to determine whether audio descriptions have been enabled and in which language. Windows Server 2003 and Windows XP/2000: This parameter is not supported. Determines whether animations are enabled or disabled. The pvParam parameter must point to a BOOL variable that receives TRUE if animations are enabled, or FALSE otherwise. Display features such as flashing, blinking, flickering, and moving content can cause seizures in users with photo-sensitive epilepsy. This flag enables you to determine whether such animations have been disabled in the client area. Windows Server 2003 and Windows XP/2000: This parameter is not supported. Determines whether overlapped content is enabled or disabled. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled, or FALSE otherwise. Display features such as background images, textured backgrounds, water marks on documents, alpha blending, and transparency can reduce the contrast between the foreground and background, making it harder for users with low vision to see objects on the screen. This flag enables you to determine whether such overlapped content has been disabled. Windows Server 2003 and Windows XP/2000: This parameter is not supported. Retrieves information about the FilterKeys accessibility feature. The pvParam parameter must point to a FILTERKEYS structure that receives the information. Set the cbSize member of this structure and the uiParam parameter to . Retrieves the height, in pixels, of the top and bottom edges of the focus rectangle drawn with DrawFocusRect. The pvParam parameter must point to a UINT value. Windows 2000: This parameter is not supported. Retrieves the width, in pixels, of the left and right edges of the focus rectangle drawn with DrawFocusRect. The pvParam parameter must point to a UINT. Windows 2000: This parameter is not supported. Retrieves information about the HighContrast accessibility feature. The pvParam parameter must point to a HIGHCONTRAST structure that receives the information. Set the cbSize member of this structure and the uiParam parameter to . Retrieves a value that determines whether Windows 8 is displaying apps using the default scaling plateau for the hardware or going to the next higher plateau. This value is based on the current \"Make everything on your screen bigger\" setting, found in the Ease of Access section of PC settings: 1 is on, 0 is off. Apps can provide text and image resources for each of several scaling plateaus: 100%, 140%, and 180%. Providing separate resources optimized for a particular scale avoids distortion due to resizing. Windows 8 determines the appropriate scaling plateau based on a number of factors, including screen size and pixel density. When \"Make everything on your screen bigger\" is selected (SPI_GETLOGICALDPIOVERRIDE returns a value of 1), Windows uses resources from the next higher plateau. For example, in the case of hardware that Windows determines should use a scale of SCALE_100_PERCENT, this override causes Windows to use the SCALE_140_PERCENT scale value, assuming that it does not violate other constraints. Note You should not use this value. It might be altered or unavailable in subsequent versions of Windows. Instead, use the You should not use this value. It might be altered or unavailable in subsequent versions of Windows. Instead, use the GetScaleFactorForDevice function or the DisplayProperties class to retrieve the preferred scaling factor. Desktop applications should use desktop logical DPI rather than scale factor. Desktop logical DPI can be retrieved through the GetDeviceCaps function. Retrieves the time that notification pop-ups should be displayed, in seconds. The pvParam parameter must point to a ULONG that receives the message duration. Users with visual impairments or cognitive conditions such as ADHD and dyslexia might need a longer time to read the text in notification messages. This flag enables you to retrieve the message duration. Windows Server 2003 and Windows XP/2000: This parameter is not supported. Retrieves the state of the Mouse ClickLock feature. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled, or FALSE otherwise. For more information, see Mouse Input Overview. Windows 2000: This parameter is not supported. Retrieves the time delay before the primary mouse button is locked. The pvParam parameter must point to DWORD that receives the time delay, in milliseconds. This is only enabled if SPI_SETMOUSECLICKLOCK is set to TRUE. For more information, see Mouse Input Overview. Windows 2000: This parameter is not supported. Retrieves information about the MouseKeys accessibility feature. The pvParam parameter must point to a MOUSEKEYS structure that receives the information. Set the cbSize member of this structure and the uiParam parameter to . Retrieves the state of the Mouse Sonar feature. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled or FALSE otherwise. For more information, see Mouse Input Overview. Windows 2000: This parameter is not supported. Retrieves the state of the Mouse Vanish feature. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled or FALSE otherwise. For more information, see Mouse Input Overview. Windows 2000: This parameter is not supported. Determines whether a screen reviewer utility is running. A screen reviewer utility directs textual information to an output device, such as a speech synthesizer or Braille display. When this flag is set, an application should provide textual information in situations where it would otherwise present the information graphically. The pvParam parameter is a pointer to a BOOL variable that receives TRUE if a screen reviewer utility is running, or FALSE otherwise. Note Narrator, the screen reader that is included with Windows, does not set the SPI_SETSCREENREADER or SPI_GETSCREENREADER flags. This parameter is not supported. Windows Server 2003 and Windows XP/2000: The user should control this setting through the Control Panel. Determines whether the Show Sounds accessibility flag is on or off. If it is on, the user requires an application to present information visually in situations where it would otherwise present the information only in audible form. The pvParam parameter must point to a BOOL variable that receives TRUE if the feature is on, or FALSE if it is off. Using this value is equivalent to calling GetSystemMetrics with SM_SHOWSOUNDS. That is the recommended call. Retrieves information about the SoundSentry accessibility feature. The pvParam parameter must point to a SOUNDSENTRY structure that receives the information. Set the cbSize member of this structure and the uiParam parameter to . Retrieves information about the StickyKeys accessibility feature. The pvParam parameter must point to a STICKYKEYS structure that receives the information. Set the cbSize member of this structure and the uiParam parameter to . Retrieves information about the ToggleKeys accessibility feature. The pvParam parameter must point to a TOGGLEKEYS structure that receives the information. Set the cbSize member of this structure and the uiParam parameter to . Sets the time-out period associated with the accessibility features. The pvParam parameter must point to an ACCESSTIMEOUT structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to . Turns the audio descriptions feature on or off. The pvParam parameter is a pointer to an AUDIODESCRIPTION structure. While it is possible for users who are visually impaired to hear the audio in video content, there is a lot of action in video that does not have corresponding audio. Specific audio description of what is happening in a video helps these users understand the content better. This flag enables you to enable or disable audio descriptions in the languages they are provided in. Windows Server 2003 and Windows XP/2000: This parameter is not supported. Turns client area animations on or off. The pvParam parameter is a BOOL variable. Set pvParam to TRUE to enable animations and other transient effects in the client area, or FALSE to disable them. Display features such as flashing, blinking, flickering, and moving content can cause seizures in users with photo-sensitive epilepsy. This flag enables you to enable or disable all such animations. Windows Server 2003 and Windows XP/2000: This parameter is not supported. Turns overlapped content (such as background images and watermarks) on or off. The pvParam parameter is a BOOL variable. Set pvParam to TRUE to disable overlapped content, or FALSE to enable overlapped content. Display features such as background images, textured backgrounds, water marks on documents, alpha blending, and transparency can reduce the contrast between the foreground and background, making it harder for users with low vision to see objects on the screen. This flag enables you to enable or disable all such overlapped content. Windows Server 2003 and Windows XP/2000: This parameter is not supported. Sets the parameters of the FilterKeys accessibility feature. The pvParam parameter must point to a FILTERKEYS structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to . Sets the height of the top and bottom edges of the focus rectangle drawn with DrawFocusRect to the value of the pvParam parameter. Windows 2000: This parameter is not supported. Sets the height of the left and right edges of the focus rectangle drawn with DrawFocusRect to the value of the pvParam parameter. Windows 2000: This parameter is not supported. Sets the parameters of the HighContrast accessibility feature. The pvParam parameter must point to a HIGHCONTRAST structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to . Do not use. Sets the time that notification pop-ups should be displayed, in seconds. The pvParam parameter specifies the message duration. Users with visual impairments or cognitive conditions such as ADHD and dyslexia might need a longer time to read the text in notification messages. This flag enables you to set the message duration. Windows Server 2003 and Windows XP/2000: This parameter is not supported. Turns the Mouse ClickLock accessibility feature on or off. This feature temporarily locks down the primary mouse button when that button is clicked and held down for the time specified by SPI_SETMOUSECLICKLOCKTIME. The pvParam parameter specifies TRUE for on, or FALSE for off. The default is off. For more information, see Remarks and AboutMouse Input. Windows 2000: This parameter is not supported. Adjusts the time delay before the primary mouse button is locked. The uiParam parameter should be set to 0. The pvParam parameter points to a DWORD that specifies the time delay in milliseconds. For example, specify 1000 for a 1 second delay. The default is 1200. For more information, see Mouse Input Overview. Windows 2000: This parameter is not supported. Sets the parameters of the MouseKeys accessibility feature. The pvParam parameter must point to a MOUSEKEYS structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to . Turns the Sonar accessibility feature on or off. This feature briefly shows several concentric circles around the mouse pointer when the user presses and releases the CTRL key. The pvParam parameter specifies TRUE for on and FALSE for off. The default is off. For more information, see Mouse Input Overview. Windows 2000: This parameter is not supported. Turns the Vanish feature on or off. This feature hides the mouse pointer when the user types; the pointer reappears when the user moves the mouse. The pvParam parameter specifies TRUE for on and FALSE for off. The default is off. For more information, see Mouse Input Overview. Windows 2000: This parameter is not supported. Determines whether a screen review utility is running. The uiParam parameter specifies TRUE for on, or FALSE for off. Note Narrator, the screen reader that is included with Windows, does not set the SPI_SETSCREENREADER or SPI_GETSCREENREADER flags. This parameter is not supported. Windows Server 2003 and Windows XP/2000: The user should control this setting through the Control Panel. Turns the ShowSounds accessibility feature on or off. The uiParam parameter specifies TRUE for on, or FALSE for off. Sets the parameters of the SoundSentry accessibility feature. The pvParam parameter must point to a SOUNDSENTRY structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to . Sets the parameters of the StickyKeys accessibility feature. The pvParam parameter must point to a STICKYKEYS structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to . Sets the parameters of the ToggleKeys accessibility feature. The pvParam parameter must point to a TOGGLEKEYS structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to .\n\nThe following are the desktop parameters.\n\nThe following are the icon parameters.\n\nThe following are the input parameters. They include parameters related to the keyboard, mouse, pen, input language, and the warning beeper.\n\nDetermines whether the warning beeper is on. The pvParam parameter must point to a BOOL variable that receives TRUE if the beeper is on, or FALSE if it is off. Retrieves a BOOL indicating whether an application can reset the screensaver's timer by calling the SendInput function to simulate keyboard or mouse input. The pvParam parameter must point to a BOOL variable that receives TRUE if the simulated input will be blocked, or FALSE otherwise. Retrieves the current contact visualization setting. The pvParam parameter must point to a ULONG variable that receives the setting. For more information, see Contact Visualization. Retrieves the input locale identifier for the system default input language. The pvParam parameter must point to an HKL variable that receives this value. For more information, see Languages, Locales, and Keyboard Layouts. Retrieves the current gesture visualization setting. The pvParam parameter must point to a ULONG variable that receives the setting. For more information, see Gesture Visualization. Determines whether menu access keys are always underlined. The pvParam parameter must point to a BOOL variable that receives TRUE if menu access keys are always underlined, and FALSE if they are underlined only when the menu is activated by the keyboard. Retrieves the keyboard repeat-delay setting, which is a value in the range from 0 (approximately 250 ms delay) through 3 (approximately 1 second delay). The actual delay associated with each value may vary depending on the hardware. The pvParam parameter must point to an integer variable that receives the setting. Determines whether the user relies on the keyboard instead of the mouse, and wants applications to display keyboard interfaces that would otherwise be hidden. The pvParam parameter must point to a BOOL variable that receives TRUE if the user relies on the keyboard; or FALSE otherwise. Retrieves the keyboard repeat-speed setting, which is a value in the range from 0 (approximately 2.5 repetitions per second) through 31 (approximately 30 repetitions per second). The actual repeat rates are hardware-dependent and may vary from a linear scale by as much as 20%. The pvParam parameter must point to a DWORD variable that receives the setting. Retrieves the two mouse threshold values and the mouse acceleration. The pvParam parameter must point to an array of three integers that receives these values. See mouse_event for further information. Retrieves the height, in pixels, of the rectangle within which the mouse pointer has to stay for TrackMouseEvent to generate a WM_MOUSEHOVER message. The pvParam parameter must point to a UINT variable that receives the height. Retrieves the time, in milliseconds, that the mouse pointer has to stay in the hover rectangle for TrackMouseEvent to generate a WM_MOUSEHOVER message. The pvParam parameter must point to a UINT variable that receives the time. Retrieves the width, in pixels, of the rectangle within which the mouse pointer has to stay for TrackMouseEvent to generate a WM_MOUSEHOVER message. The pvParam parameter must point to a UINT variable that receives the width. Retrieves the current mouse speed. The mouse speed determines how far the pointer will move based on the distance the mouse moves. The pvParam parameter must point to an integer that receives a value which ranges between 1 (slowest) and 20 (fastest). A value of 10 is the default. The value can be set by an end-user using the mouse control panel application or by an application using SPI_SETMOUSESPEED. Determines whether the Mouse Trails feature is enabled. This feature improves the visibility of mouse cursor movements by briefly showing a trail of cursors and quickly erasing them. The pvParam parameter must point to an integer variable that receives a value. if the value is zero or 1, the feature is disabled. If the value is greater than 1, the feature is enabled and the value indicates the number of cursors drawn in the trail. The uiParam parameter is not used. Windows 2000: This parameter is not supported. Retrieves the routing setting for wheel button input. The routing setting determines whether wheel button input is sent to the app with focus (foreground) or the app under the mouse cursor. The pvParam parameter must point to a DWORD variable that receives the routing option. If the value is zero or MOUSEWHEEL_ROUTING_FOCUS, mouse wheel input is delivered to the app with focus. If the value is 1 or MOUSEWHEEL_ROUTING_HYBRID (default), mouse wheel input is delivered to the app with focus (desktop apps) or the app under the mouse cursor (Windows Store apps). The uiParam parameter is not used. Retrieves the current pen gesture visualization setting. The pvParam parameter must point to a ULONG variable that receives the setting. For more information, see Pen Visualization. Determines whether the snap-to-default-button feature is enabled. If enabled, the mouse cursor automatically moves to the default button, such as OK or Apply, of a dialog box. The pvParam parameter must point to a BOOL variable that receives TRUE if the feature is on, or FALSE if it is off. Starting with Windows 8: Determines whether the system language bar is enabled or disabled. The pvParam parameter must point to a BOOL variable that receives TRUE if the language bar is enabled, or FALSE otherwise. Starting with Windows 8: Determines whether the active input settings have Local (per-thread, TRUE) or Global (session, FALSE) scope. The pvParam parameter must point to a BOOL variable. Starting with Windows 11, version 24H2: Retrieves details about the Precision Touchpad, including user settings and system information related to the touchpad. The pvParam parameter must point to a TOUCHPAD_PARAMETERS structure. The uiParam parameter must specify the size of the structure. The value of the versionNumber field in the TOUCHPAD_PARAMETERS structure must be set to the appropriate value for the version of the structure being used. Retrieves the number of characters to scroll when the horizontal mouse wheel is moved. The pvParam parameter must point to a UINT variable that receives the number of lines. The default value is 3. Retrieves the number of lines to scroll when the vertical mouse wheel is moved. The pvParam parameter must point to a UINT variable that receives the number of lines. The default value is 3. Turns the warning beeper on or off. The uiParam parameter specifies TRUE for on, or FALSE for off. Determines whether an application can reset the screensaver's timer by calling the SendInput function to simulate keyboard or mouse input. The uiParam parameter specifies TRUE if the screensaver will not be deactivated by simulated input, or FALSE if the screensaver will be deactivated by simulated input. Sets the current contact visualization setting. The pvParam parameter must point to a ULONG variable that identifies the setting. For more information, see Contact Visualization. Note If contact visualizations are disabled, gesture visualizations cannot be enabled. Sets the default input language for the system shell and applications. The specified language must be displayable using the current system character set. The pvParam parameter must point to an HKL variable that contains the input locale identifier for the default language. For more information, see Languages, Locales, and Keyboard Layouts. Sets the double-click time for the mouse to the value of the uiParam parameter. If the uiParam value is greater than 5000 milliseconds, the system sets the double-click time to 5000 milliseconds. The double-click time is the maximum number of milliseconds that can occur between the first and second clicks of a double-click. You can also call the SetDoubleClickTime function to set the double-click time. To get the current double-click time, call the GetDoubleClickTime function. Sets the height of the double-click rectangle to the value of the uiParam parameter. The double-click rectangle is the rectangle within which the second click of a double-click must fall for it to be registered as a double-click. To retrieve the height of the double-click rectangle, call GetSystemMetrics with the SM_CYDOUBLECLK flag. Sets the width of the double-click rectangle to the value of the uiParam parameter. The double-click rectangle is the rectangle within which the second click of a double-click must fall for it to be registered as a double-click. To retrieve the width of the double-click rectangle, call GetSystemMetrics with the SM_CXDOUBLECLK flag. Sets the current gesture visualization setting. The pvParam parameter must point to a ULONG variable that identifies the setting. For more information, see Gesture Visualization. Note If contact visualizations are disabled, gesture visualizations cannot be enabled. Sets the underlining of menu access key letters. The pvParam parameter is a BOOL variable. Set pvParam to TRUE to always underline menu access keys, or FALSE to underline menu access keys only when the menu is activated from the keyboard. Sets the keyboard repeat-delay setting. The uiParam parameter must specify 0, 1, 2, or 3, where zero sets the shortest delay approximately 250 ms) and 3 sets the longest delay (approximately 1 second). The actual delay associated with each value may vary depending on the hardware. Sets the keyboard preference. The uiParam parameter specifies TRUE if the user relies on the keyboard instead of the mouse, and wants applications to display keyboard interfaces that would otherwise be hidden; uiParam is FALSE otherwise. Sets the keyboard repeat-speed setting. The uiParam parameter must specify a value in the range from 0 (approximately 2.5 repetitions per second) through 31 (approximately 30 repetitions per second). The actual repeat rates are hardware-dependent and may vary from a linear scale by as much as 20%. If uiParam is greater than 31, the parameter is set to 31. Sets the hot key set for switching between input languages. The uiParam and pvParam parameters are not used. The value sets the shortcut keys in the keyboard property sheets by reading the registry again. The registry must be set before this flag is used. the path in the registry is HKEY_CURRENT_USER\\Keyboard Layout\\Toggle . Valid values are \"1\" = ALT+SHIFT, \"2\" = CTRL+SHIFT, and \"3\" = none. Sets the two mouse threshold values and the mouse acceleration. The pvParam parameter must point to an array of three integers that specifies these values. See mouse_event for further information. Swaps or restores the meaning of the left and right mouse buttons. The uiParam parameter specifies TRUE to swap the meanings of the buttons, or FALSE to restore their original meanings. To retrieve the current setting, call GetSystemMetrics with the SM_SWAPBUTTON flag. Sets the height, in pixels, of the rectangle within which the mouse pointer has to stay for TrackMouseEvent to generate a WM_MOUSEHOVER message. Set the uiParam parameter to the new height. Sets the time, in milliseconds, that the mouse pointer has to stay in the hover rectangle for TrackMouseEvent to generate a WM_MOUSEHOVER message. This is used only if you pass HOVER_DEFAULT in the dwHoverTime parameter in the call to TrackMouseEvent. Set the uiParam parameter to the new time. The time specified should be between USER_TIMER_MAXIMUM and USER_TIMER_MINIMUM. If uiParam is less than USER_TIMER_MINIMUM, the function will use USER_TIMER_MINIMUM. If uiParam is greater than USER_TIMER_MAXIMUM, the function will be USER_TIMER_MAXIMUM. Windows Server 2003 and Windows XP: The operating system does not enforce the use of USER_TIMER_MAXIMUM and USER_TIMER_MINIMUM until Windows Server 2003 with SP1 and Windows XP with SP2. Sets the width, in pixels, of the rectangle within which the mouse pointer has to stay for TrackMouseEvent to generate a WM_MOUSEHOVER message. Set the uiParam parameter to the new width. Sets the current mouse speed. The pvParam parameter is an integer between 1 (slowest) and 20 (fastest). A value of 10 is the default. This value is typically set using the mouse control panel application. Enables or disables the Mouse Trails feature, which improves the visibility of mouse cursor movements by briefly showing a trail of cursors and quickly erasing them. To disable the feature, set the uiParam parameter to zero or 1. To enable the feature, set uiParam to a value greater than 1 to indicate the number of cursors drawn in the trail. Windows 2000: This parameter is not supported. Sets the routing setting for wheel button input. The routing setting determines whether wheel button input is sent to the app with focus (foreground) or the app under the mouse cursor. The pvParam parameter must point to a DWORD variable that receives the routing option. If the value is zero or MOUSEWHEEL_ROUTING_FOCUS, mouse wheel input is delivered to the app with focus. If the value is 1 or MOUSEWHEEL_ROUTING_HYBRID (default), mouse wheel input is delivered to the app with focus (desktop apps) or the app under the mouse cursor (Windows Store apps). Set the uiParam parameter to zero. Sets the current pen gesture visualization setting. The pvParam parameter must point to a ULONG variable that identifies the setting. For more information, see Pen Visualization. Enables or disables the snap-to-default-button feature. If enabled, the mouse cursor automatically moves to the default button, such as OK or Apply, of a dialog box. Set the uiParam parameter to TRUE to enable the feature, or FALSE to disable it. Applications should use the ShowWindow function when displaying a dialog box so the dialog manager can position the mouse cursor. Starting with Windows 8: Turns the legacy language bar feature on or off. The pvParam parameter is a pointer to a BOOL variable. Set pvParam to TRUE to enable the legacy language bar, or FALSE to disable it. The flag is supported on Windows 8 where the legacy language bar is replaced by Input Switcher and therefore turned off by default. Turning the legacy language bar on is provided for compatibility reasons and has no effect on the Input Switcher. Starting with Windows 8: Determines whether the active input settings have Local (per-thread, TRUE) or Global (session, FALSE) scope. The pvParam parameter must be a BOOL variable, casted by PVOID. Starting with Windows 11, version 24H2: Sets details about the Precision Touchpad, including user settings and system information related to the touchpad. The pvParam parameter must point to a TOUCHPAD_PARAMETERS structure. The uiParam parameter must specify the size of the structure. The value of the versionNumber field in the TOUCHPAD_PARAMETERS structure must be set to the appropriate value for the version of the structure being used. Sets the number of characters to scroll when the horizontal mouse wheel is moved. The number of characters is set from the uiParam parameter. Sets the number of lines to scroll when the vertical mouse wheel is moved. The number of lines is set from the uiParam parameter. The number of lines is the suggested number of lines to scroll when the mouse wheel is rolled without using modifier keys. If the number is 0, then no scrolling should occur. If the number of lines to scroll is greater than the number of lines viewable, and in particular if it is WHEEL_PAGESCROLL (#defined as UINT_MAX), the scroll operation should be interpreted as clicking once in the page down or page up regions of the scroll bar.\n\nThe following are the menu parameters.\n\nThe following are the power parameters.\n\nBeginning with Windows Server 2008 and Windows Vista, these power parameters are not supported. Instead, to determine the current display power state, an application should register for GUID_MONITOR_POWER_STATE notifications. To determine the current display power down time-out, an application should register for notification of changes to the GUID_VIDEO_POWERDOWN_TIMEOUT power setting. For more information, see Registering for Power Events.\n\nWindows Server 2003 and Windows XP/2000: To determine the current display power state, use the following power parameters.\n\nThe following are the screen saver parameters.\n\nThe following are the time-out parameters for applications and services.\n\nThe following are the UI effects. The SPI_SETUIEFFECTS value is used to enable or disable all UI effects at once. This table contains the complete list of UI effect values.\n\nDetermines whether the slide-open effect for combo boxes is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE for enabled, or FALSE for disabled. Determines whether the cursor has a shadow around it. The pvParam parameter must point to a BOOL variable that receives TRUE if the shadow is enabled, FALSE if it is disabled. This effect appears only if the system has a color depth of more than 256 colors. Determines whether the gradient effect for window title bars is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE for enabled, or FALSE for disabled. For more information about the gradient effect, see the GetSysColor function. Determines whether hot tracking of user-interface elements, such as menu names on menu bars, is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE for enabled, or FALSE for disabled. Hot tracking means that when the cursor moves over an item, it is highlighted but not selected. You can query this value to decide whether to use hot tracking in the user interface of your application. Determines whether the smooth-scrolling effect for list boxes is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE for enabled, or FALSE for disabled. Determines whether the menu animation feature is enabled. This master switch must be on to enable menu animation effects. The pvParam parameter must point to a BOOL variable that receives TRUE if animation is enabled and FALSE if it is disabled. If animation is enabled, SPI_GETMENUFADE indicates whether menus use fade or slide animation. Determines whether the selection fade effect is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled or FALSE if disabled. The selection fade effect causes the menu item selected by the user to remain on the screen briefly while fading out after the menu is dismissed. Determines whether ToolTip animation is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled or FALSE if disabled. If ToolTip animation is enabled, SPI_GETTOOLTIPFADE indicates whether ToolTips use fade or slide animation. If SPI_SETTOOLTIPANIMATION is enabled, SPI_GETTOOLTIPFADE indicates whether ToolTip animation uses a fade effect or a slide effect. The pvParam parameter must point to a BOOL variable that receives TRUE for fade animation or FALSE for slide animation. For more information on slide and fade effects, see AnimateWindow. Determines whether UI effects are enabled or disabled. The pvParam parameter must point to a BOOL variable that receives TRUE if all UI effects are enabled, or FALSE if they are disabled. Enables or disables the slide-open effect for combo boxes. Set the pvParam parameter to TRUE to enable the gradient effect, or FALSE to disable it. Enables or disables a shadow around the cursor. The pvParam parameter is a BOOL variable. Set pvParam to TRUE to enable the shadow or FALSE to disable the shadow. This effect appears only if the system has a color depth of more than 256 colors. Enables or disables the gradient effect for window title bars. Set the pvParam parameter to TRUE to enable it, or FALSE to disable it. The gradient effect is possible only if the system has a color depth of more than 256 colors. For more information about the gradient effect, see the GetSysColor function. Enables or disables hot tracking of user-interface elements such as menu names on menu bars. Set the pvParam parameter to TRUE to enable it, or FALSE to disable it. Hot-tracking means that when the cursor moves over an item, it is highlighted but not selected. Enables or disables the smooth-scrolling effect for list boxes. Set the pvParam parameter to TRUE to enable the smooth-scrolling effect, or FALSE to disable it. Enables or disables menu animation. This master switch must be on for any menu animation to occur. The pvParam parameter is a BOOL variable; set pvParam to TRUE to enable animation and FALSE to disable animation. If animation is enabled, SPI_GETMENUFADE indicates whether menus use fade or slide animation. Set pvParam to TRUE to enable the selection fade effect or FALSE to disable it. The selection fade effect causes the menu item selected by the user to remain on the screen briefly while fading out after the menu is dismissed. The selection fade effect is possible only if the system has a color depth of more than 256 colors. Set pvParam to TRUE to enable ToolTip animation or FALSE to disable it. If enabled, you can use SPI_SETTOOLTIPFADE to specify fade or slide animation. If the SPI_SETTOOLTIPANIMATION flag is enabled, use SPI_SETTOOLTIPFADE to indicate whether ToolTip animation uses a fade effect or a slide effect. Set pvParam to TRUE for fade animation or FALSE for slide animation. The tooltip fade effect is possible only if the system has a color depth of more than 256 colors. For more information on the slide and fade effects, see the AnimateWindow function. Enables or disables UI effects. Set the pvParam parameter to TRUE to enable all UI effects or FALSE to disable all UI effects.\n\nThe following are the window parameters.\n\nDetermines whether active window tracking (activating the window the mouse is on) is on or off. The pvParam parameter must point to a BOOL variable that receives TRUE for on, or FALSE for off. Determines whether windows activated through active window tracking will be brought to the top. The pvParam parameter must point to a BOOL variable that receives TRUE for on, or FALSE for off. Retrieves the active window tracking delay, in milliseconds. The pvParam parameter must point to a DWORD variable that receives the time. Retrieves the animation effects associated with user actions. The pvParam parameter must point to an ANIMATIONINFO structure that receives the information. Set the cbSize member of this structure and the uiParam parameter to . Retrieves the border multiplier factor that determines the width of a window's sizing border. The pvParam parameter must point to an integer variable that receives this value. Retrieves the caret width in edit controls, in pixels. The pvParam parameter must point to a DWORD variable that receives this value. Determines whether a window is docked when it is moved to the top, left, or right edges of a monitor or monitor array. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled, or FALSE otherwise. Use SPI_GETWINARRANGING to determine whether this behavior is enabled. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Determines whether a maximized window is restored when its caption bar is dragged. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled, or FALSE otherwise. Use SPI_GETWINARRANGING to determine whether this behavior is enabled. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Determines whether dragging of full windows is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled, or FALSE otherwise. Retrieves the number of times SetForegroundWindow will flash the taskbar button when rejecting a foreground switch request. The pvParam parameter must point to a DWORD variable that receives the value. Retrieves the amount of time following user input, in milliseconds, during which the system will not allow applications to force themselves into the foreground. The pvParam parameter must point to a DWORD variable that receives the time. Retrieves the metrics associated with minimized windows. The pvParam parameter must point to a MINIMIZEDMETRICS structure that receives the information. Set the cbSize member of this structure and the uiParam parameter to . Retrieves the threshold in pixels where docking behavior is triggered by using a mouse to drag a window to the edge of a monitor or monitor array. The default threshold is 1. The pvParam parameter must point to a DWORD variable that receives the value. Use SPI_GETWINARRANGING to determine whether this behavior is enabled. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Retrieves the threshold in pixels where undocking behavior is triggered by using a mouse to drag a window from the edge of a monitor or a monitor array toward the center. The default threshold is 20. Use SPI_GETWINARRANGING to determine whether this behavior is enabled. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Retrieves the threshold in pixels from the top of a monitor or a monitor array where a vertically maximized window is restored when dragged with the mouse. The default threshold is 50. Use SPI_GETWINARRANGING to determine whether this behavior is enabled. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Retrieves the metrics associated with the nonclient area of nonminimized windows. The pvParam parameter must point to a NONCLIENTMETRICS structure that receives the information. Set the cbSize member of this structure and the uiParam parameter to . Windows Server 2003 and Windows XP/2000: See Remarks for NONCLIENTMETRICS. Retrieves the threshold in pixels where docking behavior is triggered by using a pen to drag a window to the edge of a monitor or monitor array. The default is 30. Use SPI_GETWINARRANGING to determine whether this behavior is enabled. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Retrieves the threshold in pixels where undocking behavior is triggered by using a pen to drag a window from the edge of a monitor or monitor array toward its center. The default threshold is 30. Use SPI_GETWINARRANGING to determine whether this behavior is enabled. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Retrieves the threshold in pixels from the top of a monitor or monitor array where a vertically maximized window is restored when dragged with the mouse. The default threshold is 50. Use SPI_GETWINARRANGING to determine whether this behavior is enabled. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Determines whether the IME status window is visible (on a per-user basis). The pvParam parameter must point to a BOOL variable that receives TRUE if the status window is visible, or FALSE if it is not. Determines whether a window is vertically maximized when it is sized to the top or bottom of a monitor or monitor array. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled, or FALSE otherwise. Use SPI_GETWINARRANGING to determine whether this behavior is enabled. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Determines whether window arrangement is enabled. The pvParam parameter must point to a BOOL variable that receives TRUE if enabled, or FALSE otherwise. Window arrangement reduces the number of mouse, pen, or touch interactions needed to move and size top-level windows by simplifying the default behavior of a window when it is dragged or sized. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Sets active window tracking (activating the window the mouse is on) either on or off. Set pvParam to TRUE for on or FALSE for off. Determines whether or not windows activated through active window tracking should be brought to the top. Set pvParam to TRUE for on or FALSE for off. Sets the active window tracking delay. Set pvParam to the number of milliseconds to delay before activating the window under the mouse pointer. Sets the animation effects associated with user actions. The pvParam parameter must point to an ANIMATIONINFO structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to . Sets the border multiplier factor that determines the width of a window's sizing border. The uiParam parameter specifies the new value. Sets the caret width in edit controls. Set pvParam to the desired width, in pixels. The default and minimum value is 1. Sets whether a window is docked when it is moved to the top, left, or right docking targets on a monitor or monitor array. Set pvParam to TRUE for on or FALSE for off. SPI_GETWINARRANGING must be TRUE to enable this behavior. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Sets whether a maximized window is restored when its caption bar is dragged. Set pvParam to TRUE for on or FALSE for off. SPI_GETWINARRANGING must be TRUE to enable this behavior. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Sets dragging of full windows either on or off. The uiParam parameter specifies TRUE for on, or FALSE for off. Sets the height, in pixels, of the rectangle used to detect the start of a drag operation. Set uiParam to the new value. To retrieve the drag height, call GetSystemMetrics with the SM_CYDRAG flag. Sets the width, in pixels, of the rectangle used to detect the start of a drag operation. Set uiParam to the new value. To retrieve the drag width, call GetSystemMetrics with the SM_CXDRAG flag. Sets the number of times SetForegroundWindow will flash the taskbar button when rejecting a foreground switch request. Set pvParam to the number of times to flash. Sets the amount of time following user input, in milliseconds, during which the system does not allow applications to force themselves into the foreground. Set pvParam to the new time-out value. The calling thread must be able to change the foreground window, otherwise the call fails. Sets the metrics associated with minimized windows. The pvParam parameter must point to a MINIMIZEDMETRICS structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to . Sets the threshold in pixels where docking behavior is triggered by using a mouse to drag a window to the edge of a monitor or monitor array. The default threshold is 1. The pvParam parameter must point to a DWORD variable that contains the new value. SPI_GETWINARRANGING must be TRUE to enable this behavior. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Sets the threshold in pixels where undocking behavior is triggered by using a mouse to drag a window from the edge of a monitor or monitor array to its center. The default threshold is 20. The pvParam parameter must point to a DWORD variable that contains the new value. SPI_GETWINARRANGING must be TRUE to enable this behavior. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Sets the threshold in pixels from the top of the monitor where a vertically maximized window is restored when dragged with the mouse. The default threshold is 50. The pvParam parameter must point to a DWORD variable that contains the new value. SPI_GETWINARRANGING must be TRUE to enable this behavior. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Sets the metrics associated with the nonclient area of nonminimized windows. The pvParam parameter must point to a NONCLIENTMETRICS structure that contains the new parameters. Set the cbSize member of this structure and the uiParam parameter to . Also, the lfHeight member of the LOGFONT structure must be a negative value. Sets the threshold in pixels where docking behavior is triggered by using a pen to drag a window to the edge of a monitor or monitor array. The default threshold is 30. The pvParam parameter must point to a DWORD variable that contains the new value. SPI_GETWINARRANGING must be TRUE to enable this behavior. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Sets the threshold in pixels where undocking behavior is triggered by using a pen to drag a window from the edge of a monitor or monitor array to its center. The default threshold is 30. The pvParam parameter must point to a DWORD variable that contains the new value. SPI_GETWINARRANGING must be TRUE to enable this behavior. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Sets the threshold in pixels from the top of the monitor where a vertically maximized window is restored when dragged with a pen. The default threshold is 50. The pvParam parameter must point to a DWORD variable that contains the new value. SPI_GETWINARRANGING must be TRUE to enable this behavior. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Sets whether the IME status window is visible or not on a per-user basis. The uiParam parameter specifies TRUE for on or FALSE for off. Sets whether a window is vertically maximized when it is sized to the top or bottom of the monitor. Set pvParam to TRUE for on or FALSE for off. SPI_GETWINARRANGING must be TRUE to enable this behavior. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported. Sets whether window arrangement is enabled. Set pvParam to TRUE for on or FALSE for off. Window arrangement reduces the number of mouse, pen, or touch interactions needed to move and size top-level windows by simplifying the default behavior of a window when it is dragged or sized. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP/2000: This parameter is not supported.\n\nA parameter whose usage and format depends on the system parameter being queried or set. For more information about system-wide parameters, see the uiAction parameter. If not otherwise indicated, you must specify zero for this parameter.\n\nA parameter whose usage and format depends on the system parameter being queried or set. For more information about system-wide parameters, see the uiAction parameter. If not otherwise indicated, you must specify NULL for this parameter. For information on the PVOID datatype, see Windows Data Types.\n\nIf a system parameter is being set, specifies whether the user profile is to be updated, and if so, whether the WM_SETTINGCHANGE message is to be broadcast to all top-level windows to notify them of the change.\n\nThis parameter can be zero if you do not want to update the user profile or broadcast the WM_SETTINGCHANGE message, or it can be one or more of the following values.\n\nIf the function succeeds, the return value is a nonzero value.\n\nIf the function fails, the return value is zero. To get extended error information, call GetLastError.\n\nThis function is intended for use with applications that allow the user to customize the environment.\n\nA keyboard layout name should be derived from the hexadecimal value of the language identifier corresponding to the layout. For example, U.S. English has a language identifier of 0x0409, so the primary U.S. English layout is named \"00000409\". Variants of U.S. English layout, such as the Dvorak layout, are named \"00010409\", \"00020409\" and so on. For a list of the primary language identifiers and sublanguage identifiers that make up a language identifier, see the MAKELANGID macro.\n\nThere is a difference between the High Contrast color scheme and the High Contrast Mode. The High Contrast color scheme changes the system colors to colors that have obvious contrast; you switch to this color scheme by using the Display Options in the control panel. The High Contrast Mode, which uses SPI_GETHIGHCONTRAST and SPI_SETHIGHCONTRAST, advises applications to modify their appearance for visually-impaired users. It involves such things as audible warning to users and customized color scheme (using the Accessibility Options in the control panel). For more information, see HIGHCONTRAST. For more information on general accessibility features, see Accessibility.\n\nDuring the time that the primary button is held down to activate the Mouse ClickLock feature, the user can move the mouse. After the primary button is locked down, releasing the primary button does not result in a WM_LBUTTONUP message. Thus, it will appear to an application that the primary button is still down. Any subsequent button message releases the primary button, sending a WM_LBUTTONUP message to the application, thus the button can be unlocked programmatically or through the user clicking any button.\n\nThis API is not DPI aware, and should not be used if the calling thread is per-monitor DPI aware. For the DPI-aware version of this API, see SystemParametersInfoForDPI. For more information on DPI awareness, see the Windows High DPI documentation.\n\nThe following example uses SystemParametersInfo to double the mouse speed."
    },
    {
        "link": "https://stackoverflow.com/questions/64249920/powershell-and-winapi-systemparametersinfo-function",
        "document": "According to the documentation, is the parameter that receives the current mouse speed, not the return value. The return value represents whether it is successful or not. It will return 0(failed) here, and then the 2nd call always sets the mouse speed to 1.\n• : is a point to an integer.\n• : It is an integer.\n\nSo you could declare its type as ：\n\nAnd then create a instance to receive the Integer, and read the Integer from the instance. Finally, conver the new value to a new and call set method:"
    },
    {
        "link": "https://stackoverflow.com/questions/21099025/messed-with-systemparametersinfo-and-booleans-pvparam-parameter",
        "document": "I'm trying to use function to set a Boolean parameter, this is just an example of one of the Booleans parameters that I will set:\n\nAnd this is other example:\n\nThe documentation for both in MSDN says to use a False boolean to disable the parameter:\n\nBut the truth is that I can't find the way to Disable them once they are enabled, I've tried to use directly a boolean value, also with a boolean variable, and with combinations of the SPIF parameter, no way, if I activate a parameter I can't turn it off, I supose that I'm doing something wrong but ...what is?.\n\nAnd this is the part:"
    },
    {
        "link": "http://raydbg.com/2017/Call-Native-Win32-API-in-PowerShell",
        "document": "Windows built-in DLLs exposes a lot of APIs for many low-level functionalities. It is quite useful to call native Windows API in PowerShell to accomplish specific tasks which are not being wrapped in any tools to commands. For example, if you want to set a system parameter of Windows, you will find that there is no commands or cmdlet to do that. But SystemParametersInfo function in user32.dll could help you. But writing a native Win32 application to just call this API for a specific task is too heavy. In PowerShell, everything become easy.\n\n\n\nMatt published an excellent blog on three ways of interacting with Windows API:\n• Use the Add-Type cmdlet to compile C# code. This is the officially documented method.\n• Get a reference to a private type in the .NET Framework that calls the method.\n• Use reflection to dynamically define a method that calls the Windows API function.\n\nIn this blog, I will choose first one.\n\nMy task is to set a Windows system parameters. Although you can play tricks with registry key if you can hack it, in some scenario it is hard to manipulate the key because the registry could be a combination of binary code.\n\nAfter some research, we found a native Windows API, SystemParametersInfo, for this task:\n\n BOOL WINAPI SystemParametersInfo(\n\n _In_ UINT uiAction,\n\n _In_ UINT uiParam,\n\n _Inout_ PVOID pvParam,\n\n _In_ UINT fWinIni\n\n);\n\n\n\nAdd-Type is a cmdlet allow us to extend PowerShell session with .NET Framework type (a class).\n\nThere is an example about how to call native Windows APIs in the document:\n\n\n\nFirst, use Add-Type to introduce the specific function into PowerShell session.\n\nSecond, call the API in your code. You can pass the parameters either in native code block or PowerShell code block."
    },
    {
        "link": "https://reddit.com/r/PowerShell/comments/15ay9ns/best_practice_executionpolicy",
        "document": "I'm trying to remotely remotely trigger a script to deploy some software and I believe I'm being stopped by the local computer execution policy being in Restricted mode. How are others handling this? Do you change the execution policy across the board? Or do you copy the script to the computers first then execute it like this... PowerShell.exe -ExecutionPolicy Bypass -File .runme.ps1"
    },
    {
        "link": "https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.5",
        "document": "Describes the PowerShell execution policies and explains how to manage them.\n\nPowerShell's execution policy is a safety feature that controls the conditions under which PowerShell loads configuration files and runs scripts. This feature helps prevent the execution of malicious scripts.\n\nOn a Windows computer you can set an execution policy for the local computer, for the current user, or for a particular session. You can also use a Group Policy setting to set execution policies for computers and users.\n\nExecution policies for the local computer and current user are stored in the PowerShell configuration files. You don't need to set execution policies in your PowerShell profile. The execution policy for a particular session is stored only in memory and is lost when the session is closed.\n\nThe execution policy isn't a security system that restricts user actions. For example, users can easily bypass a policy by typing the script contents at the command line when they cannot run a script. Instead, the execution policy helps users to set basic rules and prevents them from violating them unintentionally.\n\nOn non-Windows computers, the default execution policy is Unrestricted and cannot be changed. The cmdlet is available, but PowerShell displays a console message that it's not supported. While returns Unrestricted on non-Windows platforms, the behavior really matches Bypass because those platforms do not implement the Windows Security Zones.\n\nEnforcement of these policies only occurs on Windows platforms. The PowerShell execution policies are as follows:\n• \n• Requires that all scripts and configuration files be signed by a trusted publisher, including scripts that you write on the local computer.\n• Prompts you before running scripts from publishers that you haven't yet classified as trusted or untrusted.\n• \n• Nothing is blocked and there are no warnings or prompts.\n• This execution policy is designed for configurations in which a PowerShell script is built into a larger application or for configurations in which PowerShell is the foundation for a program that has its own security model.\n• \n• Requires a digital signature from a trusted publisher on scripts and configuration files that are downloaded from the internet which includes email and instant messaging programs.\n• Doesn't require digital signatures on scripts that are written on the local computer and not downloaded from the internet.\n• Runs scripts that are downloaded from the internet and not signed, if the scripts are unblocked, such as by using the cmdlet.\n• Risks running unsigned scripts from sources other than the internet and signed scripts that could be malicious.\n• \n• Permits individual commands, but does not allow scripts.\n• Prevents running of all script files, including formatting and configuration files ( ), module script files ( ), and PowerShell profiles ( ).\n• \n• There is no execution policy set in the current scope.\n• If the execution policy in all scopes is Undefined, the effective execution policy is Restricted for Windows clients and RemoteSigned for Windows Server.\n• \n• The default execution policy for non-Windows computers and cannot be changed.\n• Unsigned scripts can run. There is a risk of running malicious scripts.\n• Warns the user before running scripts and configuration files that are not from the local intranet zone. On systems that do not distinguish Universal Naming Convention (UNC) paths from internet paths, scripts that are identified by a UNC path might not be permitted to run with the RemoteSigned execution policy.\n\nYou can set an execution policy that is effective only in a particular scope.\n\nThe valid values for Scope are MachinePolicy, UserPolicy, Process, CurrentUser, and LocalMachine. LocalMachine is the default when setting an execution policy.\n\nThe Scope values are listed in precedence order. The policy that takes precedence is effective in the current session, even if a more restrictive policy was set at a lower level of precedence.\n\nFor more information, see Set-ExecutionPolicy.\n• Set by a Group Policy for all users of the computer.\n• Set by a Group Policy for the current user of the computer.\n• The Process scope only affects the current PowerShell session. The execution policy is saved in the environment variable , rather than the configuration file. When the PowerShell session is closed, the variable and value are deleted.\n• The execution policy affects only the current user. It's stored in the CurrentUser configuration file.\n• The execution policy affects all users on the current computer. It's stored in the AllUsers configuration file.\n\nTo get the effective execution policy for the current PowerShell session, use the cmdlet.\n\nThe following command gets the effective execution policy:\n\nTo get all of the execution policies that affect the current session and display them in precedence order:\n\nThe result looks similar to the following sample output:\n\nIn this case, the effective execution policy is RemoteSigned because the execution policy for the current user takes precedence over the execution policy set for the local computer.\n\nTo get the execution policy set for a particular scope, use the Scope parameter of .\n\nFor example, the following command gets the execution policy for the CurrentUser scope:\n\nTo change the PowerShell execution policy on your Windows computer, use the cmdlet. The change is effective immediately. You don't need to restart PowerShell.\n\nIf you set the execution policy for the scopes LocalMachine or the CurrentUser, the change is saved in the configuration file and remains effective until you change it again.\n\nIf you set the execution policy for the Process scope, it's not saved in the configuration file. The execution policy is retained until the current process and any child processes are closed.\n\nTo set the execution policy in a particular scope:\n\nA command to change an execution policy can succeed but still not change the effective execution policy.\n\nFor example, a command that sets the execution policy for the local computer can succeed but be overridden by the execution policy for the current user.\n\nTo remove the execution policy for a particular scope, set the execution policy to Undefined.\n\nFor example, to remove the execution policy for all the users of the local computer:\n\nTo remove the execution policy for a Scope:\n\nIf no execution policy is set in any scope, the effective execution policy is Restricted, which is the default for Windows clients.\n\nSet a different policy for one session\n\nYou can use the ExecutionPolicy parameter of to set an execution policy for a new PowerShell session. The policy affects only the current session and child sessions.\n\nTo set the execution policy for a new session, start PowerShell at the command line, such as or from PowerShell, and then use the ExecutionPolicy parameter of to set the execution policy.\n\nThe execution policy that you set isn't stored in the configuration file. Instead, it's stored in the environment variable. The variable is deleted when you close the session in which the policy is set. You cannot change the policy by editing the variable value.\n\nDuring the session, the execution policy that is set for the session takes precedence over an execution policy that is set in the configuration file for the local computer or current user. However, it doesn't take precedence over the execution policy set by using a Group Policy.\n\nYou can use the Turn on Script Execution Group Policy setting to manage the execution policy of computers in your enterprise. The Group Policy setting overrides the execution policies set in PowerShell in all scopes.\n\nThe Turn on Script Execution policy settings are as follows:\n• None If you disable Turn on Script Execution, scripts do not run. This is equivalent to the Restricted execution policy.\n• None If you enable Turn on Script Execution, you can select an execution policy. The Group Policy settings are equivalent to the following execution policy settings:\n• None If Turn on Script Execution is not configured, it has no effect. The execution policy set in PowerShell is effective.\n\nThe PowerShellExecutionPolicy.adm and PowerShellExecutionPolicy.admx files add the Turn on Script Execution policy to the Computer Configuration and User Configuration nodes in Group Policy Editor in the following path:\n\nPolicies set in the Computer Configuration node take precedence over policies set in the User Configuration node.\n\nFor more information, see about_Group_Policy_Settings.\n\nWhen determining the effective execution policy for a session, PowerShell evaluates the execution policies in the following precedence order:\n\nIn Windows, programs like Internet Explorer and Microsoft Edge add an alternate data stream to files that are downloaded. This marks the file as \"coming from the Internet\". If your PowerShell execution policy is RemoteSigned, PowerShell won't run unsigned scripts that are downloaded from the internet which includes email and instant messaging programs.\n\nYou can sign the script or elect to run an unsigned script without changing the execution policy.\n\nBeginning in PowerShell 3.0, you can use the Stream parameter of the cmdlet to detect files that are blocked because they were downloaded from the internet. Use the cmdlet to unblock the scripts so that you can run them in PowerShell.\n\nFor more information, see about_Signing, Get-Item, and Unblock-File.\n\nWhen PowerShell 6 is run on Windows Server Core or Windows Nano Server under certain conditions, execution policies can fail with the following error:\n\nPowerShell uses APIs in the Windows Desktop Shell ( ) to validate the Zone of a script file. The Windows Shell is not available on Windows Server Core and Windows Nano Server.\n\nYou could also get this error on any Windows system if the Windows Desktop Shell is unavailable or unresponsive. For example, during sign on, a PowerShell logon script could start execution before the Windows Desktop is ready, resulting in failure.\n\nUsing an execution policy of ByPass or AllSigned does not require a Zone check which avoids the problem."
    },
    {
        "link": "https://ninjaone.com/blog/understanding-powershell-execution-policies",
        "document": "Developed by Microsoft, PowerShell has become a modern standard in Windows administration, scripting, and automation. Combining a command-line interface with a scripting language, PowerShell has transformed the Windows management landscape.\n\nBased on the .NET framework, PowerShell integrates seamlessly with Microsoft technologies using concise commands, or cmdlets, to interact with system components, manipulate data, and automate administrative functions. This script-based approach enables users to streamline tasks, enhance efficiency, and automate common tasks. PowerShell also supports event handling, task scheduling, and remote management, offering a comprehensive solution for IT administrators, cybersecurity professionals, and scripting experts.\n\nThis guide focuses on PowerShell execution policies, explaining their importance, operation, management, impact on system security, and best practices. It seeks to provide an understanding of how these execution policies support effective script execution, and optimize system security in Windows environments.\n\nPowerShell execution policies function as a safeguard mechanism in Windows environments, determining the level of trust assigned to scripts before they are executed. These policies aim to strike a balance between enabling script execution for legitimate purposes and mitigating the potential security risks associated. By adhering to an execution policy, administrators can enforce a consistent and secure scripting environment, reducing the chances of malicious scripts compromising their systems.\n\nThe types of execution policies available are as follows:\n• AllSigned: With this policy, all scripts, including those created locally, must be digitally signed by a trusted publisher to execute. This approach ensures that only authorized scripts are permitted to run, but does run the risk of running any malicious scripts that have been signed.\n• Bypass: This policy permits the execution of any script without restriction. This policy should be used with extreme caution, if at all, as it can potentially expose systems to security risks by permitting the execution of unsigned and unverified scripts.\n• Default: With this type of policy, the default execution is set. Default sets the execution policy as restricted for Windows clients, and RemoteSigned for Windows servers. Both types of execution policies are explained below.\n• RemoteSigned: This policy requires that scripts downloaded from the internet be digitally signed for execution and be permitted. Locally created scripts can be executed without digital signature. This policy is considered by many to provide a pragmatic balance between usability and security.\n• Restricted: This policy is the most secure available. It blocks the execution of all scripts, whether locally created or downloaded, and all script files. However, individual commands can be executed in the PowerShell environment.\n• Undefined: This policy is used when no execution policy is explicitly set. It allows users to run scripts and offers flexibility, but it is best practice to select a specific policy to provide control and enhance security. If the policy is set as Undefined in all scopes, then it will automatically set the Default restrictions.\n• Unrestricted: This policy grants unrestricted script execution, enabling both local and internet-sourced scripts to run without any restrictions. While convenient for development and testing, it should not be used in production environments owing to the significant security risks it represents.\n\nUnderstanding these execution policies enables administrators and security professionals to adopt the approach that best fits the security requirements of their systems.\n\nIn the subsequent sections, we will explore the management, best practices, and implications of PowerShell execution policies.\n\nSetting and modifying PowerShell execution policies effectively is crucial to establishing a secure scripting environment. Administrators can use the Set-ExecutionPolicy cmdlet to configure these policies. By understanding the potential risks and benefits of different policy configurations, administrators can make informed decisions aligned with their security objectives.\n\nThe first consideration is execution policy scope, which offers the following options:\n• MachinePolicy: This scope is set by Group Policy, and sees the execution policy applied to all users and processes on a machine, ensuring uniformity across the system. Local user policies can override this policy.\n• UserPolicy: This scope is set by Group Policy, and enforces the execution policy for the users of a specific machine. It is particularly useful for maintaining a consistent scripting environment for all users.\n• Process: At this scope, execution policies are defined for the current PowerShell session only. It allows for more granular control over script execution based on specific needs.\n• CurrentUser: This scope enforces the execution policy for the current user’s session. It does not require any elevation of privileges.\n• LocalMachine: This is the default scope, and allocating a policy to this scope impacts all users on a particular machine. If a user policy exists, it takes precedence over this scope.\n\nChanges to execution policy have a direct impact on system security and script execution. A more restrictive policy, such as ‘Restricted’ or ‘AllSigned’ enhances security by reducing the risk of unauthorized or malicious scripts executing. This may, however, create a need for additional steps, such as signing scripts, which can introduce administrative overhead.\n\nA more lenient policy, like ‘Unrestricted’ or ‘Bypass,’ streamlines script execution by removing barriers but comes at the cost of potentially exposing the system to security risks. Care should be taken when adopting such policies, and they should only be employed in controlled environments for time-limited periods, or during development and testing phases. Administrators must consider their organization’s security requirements and the specific needs of their users when selecting and modifying execution policies. Striking the right balance between security and functionality ensures that the PowerShell scripting environment remains secure.\n\nIn the following sections, we look at the best practices associated with PowerShell execution policies, common issues faced while managing them, and their alignment with organizational security guidelines. These insights will empower administrators and security professionals to make informed decisions in their pursuit of a secure and efficient scripting environment.\n\nWhen selecting a PowerShell execution policy for different environments, it is best practice to consider the nature of the scripts that will be executed, the level of security required, and the role of the users. For example:\n• Production environment: In a production environment, it is prudent to adopt a more restrictive policy like ‘AllSigned’ or ‘RemoteSigned.’ This ensures that scripts are signed and authenticated before execution and reduces the risk of unauthorized or malicious code.\n• Development environment: In a development environment, a more flexible policy like ‘Bypass’ or ‘Unrestricted’ may be used to facilitate testing and troubleshooting. However, these policies should not be carried over to production environments.\n\nHow to safely manage and change policies\n\nAs IT administrators, cybersecurity professionals, and individuals involved in Windows administration and PowerShell scripting, it is crucial to appreciate how to safely manage these policies.\n\nBest practices for managing and altering PowerShell execution policies include:\n• Document execution policies: Ensure that administrators and users understand the implications of different execution policies. Create clear documentation outlining which policies are appropriate for specific scenarios.\n• Mandate script signing: For more restrictive policies like ‘AllSigned’ and ‘RemoteSigned,’ enforce the practice of signing scripts using digital signatures. This adds an extra layer of security by ensuring the authenticity of scripts.\n• Select the least permissive scope: Determine the appropriate scope for setting execution policies. Be mindful of the impact on users and processes within different scopes, as well as the impact on system security and alignment with security policy. Selecting the policy that offers least privilege while providing the function required is best practice.\n• Review policies : Regularly review and audit execution policies across the environment. Ensure that policies remain aligned with security requirements and organizational guidelines.\n\nSetting PowerShell execution policies can often lead to challenges impacting script and system operations. Some common issues include:\n• Access Denied: Users might encounter “Access Denied” errors when trying to change execution policies due to lack of administrative privileges.\n• Blocked scripts: More restrictive policies like ‘AllSigned’ can prevent the execution of unsigned or improperly signed scripts, causing frustration for users.\n• Untrusted scripts: Scripts from the internet might be blocked by policies like ‘RemoteSigned,’ even if they are safe and legitimate.\n\nTo address these issues and ensure successful script execution, follow these troubleshooting steps:\n• Elevate privileges: Ensure that you have administrative privileges when changing execution policies. Run PowerShell with administrative rights by right-clicking and selecting “Run as Administrator.”\n• Script signing: When using policies like ‘AllSigned,’ ensure that scripts are properly signed using valid digital signatures. This prevents false “Access Denied” errors.\n• Trust publishers: For ‘AllSigned’ and ‘RemoteSigned’ policies, establish trust with publishers by importing their certificates into the Certificate store.\n• Unblock files: If a script file was downloaded from the internet and is blocked, unblock it using the ‘Unblock-File’ cmdlet.\n• Check for scope issues: Be mindful of the execution policy scope. If encountering issues, ensure that the policy is set at the appropriate scope level.\n• Check for group policy restrictions: In domain environments, Group Policies may enforce specific execution policies. Verify the Group Policy settings that apply to the system, as well as its location.\n• Use PowerShell remoting : In case of ‘Restricted’ or ‘AllSigned’ policies blocking local execution, utilize PowerShell remoting to execute scripts on remote systems.\n• Check security software: Some security software may interfere with script execution. Temporarily disable or adjust settings to troubleshoot.\n• Check for conflicts: Be aware of potential conflicts between local and Group Policy settings. Ensure consistency in execution policy enforcement.\n\nAs always, a process of elimination approach should reveal the root of an issue. If a failing script works with elevated rights, delve deeper into permissions. If it works with a policy bypass, check machine restrictions, and so on. By addressing these common problems and following the troubleshooting steps above, administrators and professionals can effectively manage PowerShell execution policies, preventing roadblocks in script execution and maintaining a secure scripting environment.\n\nAligning Windows PowerShell execution policies with organizational security guidelines is vital for maintaining a secure and controlled scripting environment. Organizations often have specific security requirements and policies that dictate how scripts should be executed. By aligning execution policies with these guidelines, organizations can ensure consistency, reduce risks, and enhance overall security posture.\n\nThe Importance of regular audits and policy review\n\nRegular audits and policy reviews ensure that execution policies remain effective and up to date. As organizational needs evolve and security threats change, execution policies may need adjustments.\n• Adapt to a changing threat landscape: The cybersecurity landscape is dynamic. Regular policy reviews help organizations stay ahead of emerging threats and adjust policies accordingly.\n• Evaluate policy effectiveness: Organizations can assess whether the current execution policies are effectively mitigating risks or if adjustments are necessary.\n• Ensure compliance: Compliance requirements may change over time. Regular reviews help ensure that execution policies align with current compliance standards.\n• Identify policy conflicts: In complex environments, policy conflicts or unintended side effects can occur. Regular audits help identify and resolve such issues.\n• Maintain consistency: Over time, new scripts and users might be introduced. Audits help ensure that execution policies are consistently applied across the organization.\n• Mitigate unauthorized scripts: Regular reviews can help identify and address unauthorized or malicious scripts that may exist in production undetected.\n\nWith a well-defined and consistently enforced execution policy strategy, organizations can harness the power of PowerShell scripting while maintaining a robust security posture.\n\nConsidered use of PowerShell execution policies is a fundamental pillar of system security, and effective Windows administration. These policies serve as gatekeepers for script execution, acting as the safeguards that ensure only authorized and trusted scripts run within an environment. By establishing boundaries on script execution, organizations can limit the potential for malicious or inadvertent code to compromise their systems. The range of execution policies available, each designed for a specific security use case, demonstrates the granular control administrators possess over script execution behavior.\n\nPowerShell execution policies go beyond configuration rules and settings; they represent a commitment to consistent and secure IT operations. By adhering to the PowerShell execution policy best practices we’ve introduced, you are well on your way to a secure, efficient, and resilient Windows environment."
    },
    {
        "link": "https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy?view=powershell-7.5",
        "document": "The cmdlet changes PowerShell execution policies for Windows computers. For more information, see about_Execution_Policies. Beginning in PowerShell 6.0 for non-Windows computers, the default execution policy is and can't be changed. The cmdlet is available, but PowerShell displays a console message that it's not supported. An execution policy is part of the PowerShell security strategy. Execution policies determine whether you can load configuration files, such as your PowerShell profile, or run scripts. And, whether scripts must be digitally signed before they are run. The cmdlet's default scope is , which affects everyone who uses the computer. To change the execution policy for , start PowerShell with Run as Administrator. To display the execution policies for each scope, use . To see the effective execution policy for your PowerShell session use with no parameters.\n\nThis example shows how to set the execution policy for the local computer. The cmdlet uses the ExecutionPolicy parameter to specify the policy. The Scope parameter specifies the default scope value, . To view the execution policy settings, use the cmdlet with the List parameter.\n\nExample 2: Set an execution policy that conflicts with a Group Policy\n\nThis command attempts to set the scope's execution policy to . is more restrictive, but isn't the effective policy because it conflicts with a Group Policy. The policy is written to the registry hive . PS> Set-ExecutionPolicy -ExecutionPolicy Restricted -Scope LocalMachine Set-ExecutionPolicy : PowerShell updated your local preference successfully, but the setting is overridden by the Group Policy applied to your system. Due to the override, your shell will retain its current effective execution policy of \"AllSigned\". Contact your Group Policy administrator for more information. At line:1 char:20 + Set-ExecutionPolicy <<<< restricted PS> Get-ChildItem -Path HKLM:\\SOFTWARE\\Microsoft\\PowerShell\\1\\ShellIds Hive: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\PowerShell\\1\\ShellIds Name Property ---- -------- Microsoft.PowerShell Path : C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe ExecutionPolicy : Restricted ScriptedDiagnostics ExecutionPolicy : Unrestricted The cmdlet uses the ExecutionPolicy parameter to specify the policy. The Scope parameter specifies the default scope value, . The cmdlet uses the Path parameter with the drive to specify registry location.\n\nExample 3: Apply the execution policy from a remote computer to a local computer\n\nThis command gets the execution policy object from a remote computer and sets the policy on the local computer. sends a Microsoft.PowerShell.ExecutionPolicy object down the pipeline. accepts pipeline input and doesn't require the ExecutionPolicy parameter. The cmdlet is executed at the local computer and sends the ScriptBlock to the remote computer. The ComputerName parameter specifies the remote computer, Server01. The ScriptBlock parameter runs on the remote computer. The object is sent down the pipeline to the . applies the execution policy to the local computer's default scope, .\n\nExample 4: Set the scope for an execution policy\n\nThis example shows how to set an execution policy for a specified scope, . The scope only affects the user who sets this scope. uses the ExecutionPolicy parameter to specify the policy. The Scope parameter specifies the . To view the execution policy settings, use the cmdlet with the List parameter. The effective execution policy for the user becomes .\n\nExample 5: Remove the execution policy for the current user\n\nThis example shows how use the execution policy to remove an execution policy for a specified scope. uses the ExecutionPolicy parameter to specify the policy. The Scope parameter specifies the . To view the execution policy settings, use the cmdlet with the List parameter.\n\nExample 6: Set the execution policy for the current PowerShell session\n\nThe scope only affects the current PowerShell session. The execution policy is saved in the environment variable and is deleted when the session is closed. The uses the ExecutionPolicy parameter to specify the policy. The Scope parameter specifies the value . To view the execution policy settings, use the cmdlet with the List parameter.\n\nExample 7: Unblock a script to run it without changing the execution policy\n\nThis example shows how the execution policy prevents you from running unsigned scripts. A best practice is to read the script's code and verify it's safe before using the cmdlet. The cmdlet unblocks scripts so they can run, but doesn't change the execution policy. PS> Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope LocalMachine PS> Get-ExecutionPolicy RemoteSigned PS> .\\Start-ActivityTracker.ps1 .\\Start-ActivityTracker.ps1 : File .\\Start-ActivityTracker.ps1 cannot be loaded. The file .\\Start-ActivityTracker.ps1 is not digitally signed. The script will not execute on the system. For more information, see about_Execution_Policies at https://go.microsoft.com/fwlink/?LinkID=135170. At line:1 char:1 + .\\Start-ActivityTracker.ps1 + ~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : NotSpecified: (:) [], PSSecurityException + FullyQualifiedErrorId : UnauthorizedAccess PS> Unblock-File -Path .\\Start-ActivityTracker.ps1 PS> Get-ExecutionPolicy RemoteSigned PS> .\\Start-ActivityTracker.ps1 Task 1: The uses the ExecutionPolicy parameter to specify the policy. The policy is set for the default scope, . The cmdlet shows that is the effective execution policy for the current PowerShell session. The script is executed from the current directory. The script is blocked by because the script isn't digitally signed. For this example, the script's code was reviewed and verified as safe to run. The cmdlet uses the Path parameter to unblock the script. To verify that didn't change the execution policy, displays the effective execution policy, . The script, is executed from the current directory. The script begins to run because it was unblocked by the cmdlet.\n\nSpecifies the scope that is affected by an execution policy. The default scope is . The effective execution policy is determined by the order of precedence as follows:\n• - Set by a Group Policy for all users of the computer\n• - Set by a Group Policy for the current user of the computer\n• - Default scope that affects all users of the computer The scope only affects the current PowerShell session. The execution policy is saved in the environment variable , rather than the registry. When the PowerShell session is closed, the variable and value are deleted. Execution policies for the scope are written to the registry hive . Execution policies for the scope are written to the registry hive ."
    },
    {
        "link": "https://reddit.com/r/PowerShell/comments/p8f6dc/powershell_execution_policies_best_practices",
        "document": "Dumb question of the day. It appears most of our Windows 10 clients have the PowerShell Execution Policy set to Restricted. We want to run some PS scripts that do some various cleanup tasks on each machine, but those scripts fail due to the Execution Policy being set to 'Restricted' (which is the default for Windows clients). The initial thought (without really thinking) was to set the Execution Policy to Unrestricted and then run our scripts. Except nobody thought about the security ramifications of leaving that policy that way. Our scripts are very basic and we aren't clever enough to do any signing or else we would use a different policy.\n\nWhat's the easiest way to run our scripts without having to \"sign then\" but at the same time make sure we don't leave all our clients 'unrestricted'. I was thinking of running in unrestricted mode for just the one session, by running powershell with the \"-executionpolicy\" switch. And then making sure we have a GPO that sets the policy to the Defaults across all clients (to undo any changes we made recently). Thoughts?"
    }
]