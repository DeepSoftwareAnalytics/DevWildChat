[
    {
        "link": "https://developer.android.com/guide/fragments/transactions",
        "document": "At runtime, a can add, remove, replace, and perform other actions with fragments in response to user interaction. Each set of fragment changes that you commit is called a transaction, and you can specify what to do inside the transaction using the APIs provided by the class. You can group multiple actions into a single transaction—for example, a transaction can add or replace multiple fragments. This grouping can be useful for when you have multiple sibling fragments displayed on the same screen, such as with split views.\n\nYou can save each transaction to a back stack managed by the , allowing the user to navigate backward through the fragment changes—similar to navigating backward through activities.\n\nYou can get an instance of from the by calling , as shown in the following example:\n\nThe final call on each must commit the transaction. The call signals to the that all operations have been added to the transaction.\n\nAllow reordering of fragment state changes\n\nEach should use :\n\nFor behavior compatibility, the reordering flag is not enabled by default. It is required, however, to allow to properly execute your , particularly when it operates on the back stack and runs animations and transitions. Enabling the flag ensures that if multiple transactions are executed together, any intermediate fragments (i.e. ones that are added and then immediately replaced) do not go through lifecycle changes or have their animations or transitions executed. Note that this flag affects both the initial execution of the transaction and reversing the transaction with .\n\nTo add a fragment to a , call on the transaction. This method receives the ID of the container for the fragment, as well as the class name of the fragment you wish to add. The added fragment is moved to the state. It is strongly recommended that the container is a that is part of the view hierarchy.\n\nTo remove a fragment from the host, call , passing in a fragment instance that was retrieved from the fragment manager through or . If the fragment's view was previously added to a container, the view is removed from the container at this point. The removed fragment is moved to the state.\n\nUse to replace an existing fragment in a container with an instance of a new fragment class that you provide. Calling is equivalent to calling with a fragment in a container and adding a new fragment to that same container.\n\nThe following code snippet shows how you can replace one fragment with another:\n\nIn this example, a new instance of replaces the fragment, if any, that is currently in the layout container identified by .\n\nBy default, the changes made in a are not added to the back stack. To save those changes, you can call on the . For more information, see Fragment manager.\n\nCalling doesn't perform the transaction immediately. Rather, the transaction is scheduled to run on the main UI thread as soon as it is able to do so. If necessary, however, you can call to run the fragment transaction on your UI thread immediately.\n\nNote that is incompatible with . Alternatively, you can execute all pending submitted by calls that have not yet run by calling . This approach is compatible with .\n\nFor the vast majority of use cases, is all you need.\n\nThe order in which you perform operations within a is significant, particularly when using . This method applies the given animations to all fragment operations that follow it.\n\ncan affect the lifecycle state of individual fragments added within the scope of the transaction. When creating a , sets a maximum state for the given fragment. For example, uses to limit the off-screen fragments to the state.\n\nUse the methods and to show and hide the view of fragments that have been added to a container. These methods set the visibility of the fragment's views without affecting the lifecycle of the fragment.\n\nWhile you don't need to use a fragment transaction to toggle the visibility of the views within a fragment, these methods are useful for cases where you want changes to the visibility state to be associated with transactions on the back stack.\n\nThe method detaches the fragment from the UI, destroying its view hierarchy. The fragment remains in the same state ( ) as when it is put on the back stack. This means that the fragment was removed from the UI but is still managed by the fragment manager.\n\nThe method reattaches a fragment from which it was previously detached. This causes its view hierarchy to be recreated, attached to the UI, and displayed.\n\nAs a is treated as a single atomic set of operations, calls to both and on the same fragment instance in the same transaction effectively cancel each other out, thus avoiding the destruction and immediate recreation of the fragment's UI. Use separate transactions, separated by if using , if you want to detach and then immediately re-attach a fragment."
    },
    {
        "link": "https://developer.android.com/guide/fragments",
        "document": "A represents a reusable portion of your app's UI. A fragment defines and manages its own layout, has its own lifecycle, and can handle its own input events. Fragments can't live on their own. They must be hosted by an activity or another fragment. The fragment’s view hierarchy becomes part of, or attaches to, the host’s view hierarchy.\n\nFragments introduce modularity and reusability into your activity’s UI by letting you divide the UI into discrete chunks. Activities are an ideal place to put global elements around your app's user interface, such as a navigation drawer. Conversely, fragments are better suited to define and manage the UI of a single screen or portion of a screen.\n\nConsider an app that responds to various screen sizes. On larger screens, you might want the app to display a static navigation drawer and a list in a grid layout. On smaller screens, you might want the app to display a bottom navigation bar and a list in a linear layout.\n\nManaging these variations in the activity is unwieldy. Separating the navigation elements from the content can make this process more manageable. The activity is then responsible for displaying the correct navigation UI, while the fragment displays the list with the proper layout.\n\nDividing your UI into fragments makes it easier to modify your activity's appearance at runtime. While your activity is in the lifecycle state or higher, fragments can be added, replaced, or removed. And you can keep a record of these changes in a back stack that is managed by the activity, so that the changes can be reversed.\n\nYou can use multiple instances of the same fragment class within the same activity, in multiple activities, or even as a child of another fragment. With this in mind, only provide a fragment with the logic necessary to manage its own UI. Avoid depending on or manipulating one fragment from another.\n\nFor more documentation and resources related to fragments, see the following.\n• Single Activity: Why, when, and how (Android Dev Summit '18)"
    },
    {
        "link": "https://developer.android.com/guide/fragments/communicate",
        "document": "Stay organized with collections Save and categorize content based on your preferences.\n\nTo reuse fragments, build them as completely self-contained components that define their own layout and behavior. Once you define these reusable fragments, you can associate them with an activity and connect them with the application logic to realize the overall composite UI.\n\nTo properly react to user events and to share state information, you often need to have channels of communication between an activity and its fragments or between two or more fragments. To keep fragments self-contained, don't have fragments communicate directly with other fragments or with their host activity.\n\nThe library provides two options for communication: a shared and the Fragment Result API. The recommended option depends on the use case. To share persistent data with custom APIs, use a . For a one-time result with data that can be placed in a , use the Fragment Result API.\n\nThe following sections show you how to use and the Fragment Result API to communicate between your fragments and activities.\n\nis an ideal choice when you need to share data between multiple fragments or between fragments and their host activity. objects store and manage UI data. For more information about , see ViewModel overview.\n\nIn some cases, you might need to share data between fragments and their host activity. For example, you might want to toggle a global UI component based on an interaction within a fragment.\n\nConsider the following :\n\nIn this example, the stored data is wrapped in a class. is a lifecycle-aware observable data holder class. lets its value be changed. For more information about , see LiveData overview.\n\nBoth your fragment and its host activity can retrieve a shared instance of a with activity scope by passing the activity into the constructor. The handles instantiating the or retrieving it if it already exists. Both components can observe and modify this data.\n\nTwo or more fragments in the same activity often need to communicate with each other. For example, imagine one fragment that displays a list and another that lets the user apply various filters to the list. Implementing this case isn't trivial without the fragments communicating directly, but then they are no longer self-contained. Additionally, both fragments must handle the scenario where the other fragment is not yet created or visible.\n\nThese fragments can share a using their activity scope to handle this communication. By sharing the in this way, the fragments don't need to know about each other, and the activity doesn't need to do anything to facilitate the communication.\n\nThe following example shows how two fragments can use a shared to communicate:\n\nBoth fragments use their host activity as the scope for the . Because the fragments use the same scope, they receive the same instance of the , which enables them to communicate back and forth.\n\nWhen working with child fragments, your parent fragment and its child fragments might need to share data with each other. To share data between these fragments, use the parent fragment as the scope, as shown in the following example:\n\nIf you're using the Navigation library, you can also scope a to the lifecycle of a destination's . For example, the can be scoped to the for the :\n\nFor more information about scoping a to a , see Interact programmatically with the Navigation component.\n\nGet results using the Fragment Result API\n\nIn some cases, you might want to pass a one-time value between two fragments or between a fragment and its host activity. For example, you might have a fragment that reads QR codes, passing the data back to a previous fragment.\n\nIn Fragment version 1.3.0 and higher, each implements . This means that a can act as a central store for fragment results. This change lets components communicate with each other by setting fragment results and listening for those results, without requiring those components to have direct references to each other.\n\nTo pass data back to fragment A from fragment B, first set a result listener on fragment A, the fragment that receives the result. Call on fragment A's , as shown in the following example:\n\nIn fragment B, the fragment producing the result, set the result on the same by using the same . You can do so by using the API:\n\nFragment A then receives the result and executes the listener callback once the fragment is .\n\nYou can have only a single listener and result for a given key. If you call more than once for the same key, and if the listener is not , the system replaces any pending results with your updated result.\n\nIf you set a result without a corresponding listener to receive it, the result is stored in the until you set a listener with the same key. Once a listener receives a result and fires the callback, the result is cleared. This behavior has two major implications:\n• Fragments on the back stack do not receive results until they have been popped and are .\n• If a fragment listening for a result is when the result is set, the listener's callback then fires immediately.\n\nUse to test calls to and . Create a scenario for the fragment under test by using or , and then manually call the method that isn't being tested.\n\nTo test , create a scenario with the fragment that makes the call to . Next, call directly, and verify the result:\n\nTo test , create a scenario with the fragment that makes the call to . Next, call directly, and verify the result:\n\nTo pass a result from a child fragment to a parent, use from the parent fragment instead of when calling .\n\nThe child fragment sets the result on its . The parent then receives the result once the fragment is :\n\nTo receive a fragment result in the host activity, set a result listener on the fragment manager using ."
    },
    {
        "link": "https://developer.android.com/jetpack/androidx/releases/fragment",
        "document": "Save and categorize content based on your preferences.\n\nSegment your app into multiple, independent screens that are hosted within an Activity.\n\nTo add a dependency on Fragment, you must add the Google Maven repository to your project. Read Google's Maven repository for more information.\n\nAdd the dependencies for the artifacts you need in the file for your app or module:\n\nFor more information about dependencies, see Add build dependencies.\n\nYour feedback helps make Jetpack better. Let us know if you discover new issues or have ideas for improving this library. Please take a look at the existing issues in this library before you create a new one. You can add your vote to an existing issue by clicking the star button.\n\nSee the Issue Tracker documentation for more information.\n\nis released. Version 1.8.6 contains these commits.\n• 's override now takes a null listener, matching what the framework allows. (I575f0, b/282790626)\n\nis released. Version 1.8.5 contains these commits.\n• Fixed an triggered by only after a Predictive Back gesture was canceled or interrupted. (I3387d, b/342419080)\n\nis released. Version 1.8.4 contains these commits.\n• Fixed an issue where quickly pressing the system back button or quickly doing gesture back will cause Fragments to crash when using Androidx Transitions. (Ibc038, b/364804225)\n• Fixed an issue in fragments where interrupting a predictive back gesture would send the fragment manager into an undefined state and even up showing the wrong fragment. (If82e2, b/338624457)\n• Fixed an in when dynamically swapping out the Class your instance is using. (I12dea)\n\nis released. Version 1.8.3 contains these commits.\n• now correctly takes into account pending operations when handling the Predictive Back gesture. This should ensure that doing a system back no longer causes an . (I9ba32, b/342316801)\n• no longer crashes if it is added to composition while the containing activity/fragment's state is already saved. (I985e9, b/356643968)\n\nis released. Version 1.8.2 contains these commits.\n• now properly handles cases where the parent fragment is put on the Fragment back stack, avoiding 'No view found for id' issues when popping back to that fragment. (I94608)\n• Fragments added via the method that takes a now wait for before progressing to . This affects users of that API, such as , which now waits for the to re-enter composition before moving it through . (I94608)\n\nis released. Version 1.8.1 contains these commits.\n• Fixed an issue where fragments without a container were immediately when starting a predictive back gesture. Now they are held in the state until after the gesture is complete. (If6b83, b/345244539)\n\nis released. Version 1.8.0 contains these commits.\n• The artifact now contains an that allows adding fragments into the Compose hierarchy via the fragment class name. It automatically handles the saving and restoring of the Fragment’s state. This should be used as a direct replacement for the previously recommended approach of using to inflate a Fragment.\n• The callback on the ’s interface now fires as part of executing operations in , moving it closer in line with the timing of the callback.\n\nis released. Version 1.8.0-rc01 contains these commits.\n• The callback on the interface now fires as part of executing operations in , moving it closer in line with the timing of the callback. (I5ebfb, b/332916112)\n\nis released. Version 1.8.0-beta01 contains these commits.\n• From Fragment : Predictive back will now only run for transactions in which all of the fragments have either a Animator or a Seekable Androidx Transition. This fixes an issue where canceling a partially seekable transaction would cause a black screen. (I43037, b/339169168)\n\nis released. Version 1.8.0-alpha02 contains these commits.\n• From Fragment : Added logs to indicate why setting a without any other transitions will fail to run. (Iec48e)\n• From Fragment : Fixed a bug where if a non-seekable shared element was added to a transactions where all other transitions were seekable, there would be a crash. Now the transaction will correctly be considered non-seekable. (I18ccd)\n\nis released. Version 1.8.0-alpha01 contains these commits.\n• The new allows adding fragments into the Compose hierarchy via the fragment class name. It automatically handles the saving and restoring of the Fragment’s state. This can be used as a direct replacement for the AndroidViewBinding .(b/312895363, Icf841)\n• Updated documentation for the APIs to indicate when they are called and how they should be used. (I0bfd9)\n\nis released. Version 1.7.1 contains these commits.\n• Predictive back will now only run for transactions in which all of the fragments have either a Animator or a Seekable Androidx Transition. This fixes an issue where canceling a partially seekable transaction would cause a blank screen. (I43037, b/339169168)\n\nis released. Version 1.7.0 contains these commits.\n• Fragments now provide support for Predictive in-app back when using or when using AndroidX Transition 1.5.0. This allows users to use the back gesture to see the previous fragment by seeking your Animator/Transition before deciding to either commit the transaction via completing the gesture or canceling.\n\nIf you see any issues with Predictive Back support in Fragments after you’ve opted into the predictive back gesture, please file an issue against Fragment with a sample project that reproduces your issue. You can disable predictive back by using in the of your Activity.\n\nnow provides the and for receiving predictive back progress and canceled events respectively.\n\nA new artifact has been created that focuses on supporting apps that are in the process of moving from a Fragment based architecture to a fully Compose based architecture.\n\nThe first feature available in this new artifact is a extension method on that seeks to make it easier to use Compose for the UI of an individual Fragment by creating a for you and setting the correct .\n\nis released. Version 1.7.0-rc02 contains these commits.\n• Added logs to indicate why setting a without any other transitions will fail to run. (Iec48e)\n• Fixed a bug where if a non-seekable shared element was added to a transactions where all other transitions were seekable, there would be a crash. Now the transaction will correctly be considered non-seekable. (I18ccd)\n\nis released. Version 1.7.0-rc01 contains these commits.\n\nis released. Version 1.7.0-beta01 contains these commits.\n• is now written in Kotlin so that the nullability of the generic type of the Host matches the nullability of the return type of . (I40af5)\n• Fixed an issue where when committing a Predictive Back gesture on a fragment that is not in a container, that fragment would never be destroyed. The Fragment will now be immediately moved to the final state. (Ida0d9)\n• Fixed an issue in Fragments where interrupting incoming transitions with a Predictive back gesture would destroy the entering view, and leave a blank screen. (Id3f22, b/319531491)\n\nis released. Version 1.7.0-alpha10 contains these commits.\n• Fixed the known issue in the previous Fragment release where using Fragment's Predictive Back support for or AndroidX Transition, Fragments would throw a from if no has ever been added via . (I7c835)\n\nis released. Version 1.7.0-alpha09 contains these commits.\n\nA new artifact has been created that focuses on supporting apps that are in the process of moving from a Fragment based architecture to a fully Compose based architecture.\n\nThe first feature available in this new artifact is a extension method on that seeks to make it easier to use Compose for the UI of an individual Fragment by creating a for you and setting the correct . (561cb7, b/258046948)\n• now provides the and for receiving predictive back progress and canceled events respectively. (214b87)\n• When using Fragment's Predictive Back support for or AndroidX Transition, Fragments will throw a from if no has ever been added via . Manually adding a listener will work around the crash. A fix will be available for this in the next release of Fragments.\n\nis released. Version 1.7.0-alpha08 contains these commits.\n• Removed workaround for Transition library that has been fixed in Transition . (I04356)\n\nis released. Version 1.7.0-alpha07 contains these commits.\n• Fixed a caused by setting a shared element transition and failing to set an enter/exitTransition as well. (I8472b)\n• From Fragment : When the Fragment of a is inflated, its states such as , Host, and id are now accessible in the callback. (I1e44c, b/307427423)\n• From Fragment : When using to remove a set of fragments, any nested Fragment's will now be cleared when the parent fragment’s are cleared. (I6d83c, b/296173018)\n\nis released. Version 1.7.0-alpha06 contains these commits.\n• Fragments has been updated to depend on the new API added in Transition .\n\nis released. Version 1.7.0-alpha05 contains these commits.\n• Fragments now provide support for Predictive back when using Androidx Transitions. This allows you to use the back gesture to seek to the previous fragment with your custom Androidx Transition before deciding to either commit or cancel the transaction via the completed gesture. You must depend on the Transition release to enable this feature. (Ib49b4, b/285175724)\n• There is currently an issue where after you cancel a back gesture with a transition once, the next time you start the back gesture it will fail to run the transition, causing a blank screen. This could be caused by an issue in the Transition library. (b/300157785). If you see this issue, please file an issue against Fragment with a sample project that reproduces your issue. You can disable predictive back by using in the of your Activity.\n\nis released. Version 1.7.0-alpha04 contains these commits.\n• Fixed an issue when canceling a predictive back gesture where fragments failed to make it to the correct Lifecycle state. (I7cffe, b/297379023)\n• Fixed a regressions where Animations were allowed to run with Transitions. (I59f36)\n• Fixed an issue when using Predictive Back with fragments where attempting to go back twice in quick succession on the second to last fragment on the back stack would cause a crash. (Ifa1a4)\n\nis released. Version 1.7.0-alpha03 contains these commits.\n• Fixed an issue with Fragments when using predictive back that caused the first fragment in the fragment manager’s back stack to be skipped and the Activity to finish when using system back via 3 button navigation or the predictive back gesture. (I0664b, b/295231788)\n\nis released. Version 1.7.0-alpha02 contains these commits.\n• When using Fragments with Predictive Back Gestures from API 34, if you are using a transition system that does not support seeking ( , ) or no transitions at all, Fragments will now wait until the gesture is complete before executing the back action. (I8100c)\n\nis released. This version is developed in an internal branch.\n• Fragments now provide support for Predictive in-app back when using . This allows you to use the back gesture to see the previous fragment with your custom Animator before deciding to either commit the transaction via the completed gesture or cancel. You can also disable this new behavior by using the experimental and passing in .\n\nis released. Version 1.6.2 contains these commits.\n• When the Fragment of a is inflated, its states such as , Host, and id are now accessible in the callback. (I1e44c, b/307427423)\n• When using to remove a set of fragments, any nested Fragment's will now be cleared when the parent fragment’s are cleared. (I6d83c, b/296173018)\n\nis released. Version 1.6.1 contains these commits.\n• Fixed an issue where the saved state stored when the activity was stopped but not destroyed would be incorrectly cached even after the fragment instance was moved back to the state. This would cause that cached state to be reused if that fragment instance was on the back stack when using the multiple back stacks API to save and restore that fragment. (I71288, b/246289075)\n• Fragment now depends on Activity 1.7.2. This fixes an issue where Kotlin users could not extend without an explicit dependency on Activity. (b/287509323)\n\nis released. Version 1.6.0 contains these commits.\n• The saved state of s has been split entirely between private library state (custom classes) and state provided by the developer, which is now always stored in a that allows determining exactly where a fragment’s state is originating.\n• The interface has been expanded with two additional callbacks of and that are called with each right before they are added/removed from the fragment back stack and right after the transaction is committed, respectively.\n• added a new that detects when a child fragment is nested within it’s parent’s View hierarchy, but not added to the parent’s .\n• The and APIs that take an or are now properly annotated with to prevent passing in a null value as a null value would always immediately crash the respective android framework APIs these methods call into.\n• now provides access to underlying via the API.\n• None The artifact separates out the manifest entries from the rest of the fragment-testing components. This means you can do the following: This avoids conflicts due to version skew between and\n\nis released. Version 1.6.0-rc01 contains these commits.\n• Fixed as issue causing s to be sent with the incorrect request code when multiple requests have been made consecutively. (If0b9d, b/249519359)\n• Fixed an issue where the callbacks were being dispatched for transactions that did not actually change the back stack if they were mixed in with transactions that do. (I0eb5c, b/279306628)\n\nis released. Version 1.6.0-beta01 contains these commits.\n• Using with a timeout and then replacing the postponed fragment no longer results in leaking the postponed fragment. (I2ec7d, b/276375110)\n• The new and callbacks will now only dispatch a fragment a single time, even if multiple transactions contain the same fragment. (Ic6b69)\n\nis released. Version 1.6.0-alpha09 contains these commits.\n• now provides access to underlying via the API. (I022e3, b/234274777)\n• The fragment , , and APIs have been annotated with meaning they will now all throw build errors when they are not called from the main thread instead of waiting to fail at runtime. (Ic9665, b/236538905)\n• Fixed a bug in where saving and restoring in the same frame could cause a crash. (Ib36af, b/246519668)\n• and callbacks now only execute when the back stack is changed. (I66055, b/274788957)\n\nis released. Version 1.6.0-alpha08 contains these commits.\n• The timing of the callback has been adjusted to execute before fragment operations are executed. This ensures that the callback will never be passed a fragment that is detached. (I66a76, b/273568280)\n• From Fragment : Fixed an issue where calling inside a wouldn't work if the was already and a result was already available. (If7458)\n\nis released. Version 1.6.0-alpha07 contains these commits.\n• From Fragment : Fixed an issue where the removal of any Fragment, whether it had added Menu items or not, would invalidate the activity's menu. (50f098, b/244336571)\n\nis released. Version 1.6.0-alpha06 contains these commits.\n• The new callback on 's will now be executed before fragments begin to move to their target states. (I34726)\n\nis released. Version 1.6.0-alpha05 contains these commits.\n• The interface now offers two additional callbacks, and , that allow for additional information and control when back stack changes occur in the . (Ib7ce5, b/238686802)\n• The and APIs that take an or are now properly annotated with to prevent passing in a null value as a null value would always immediately crash the respective Android framework APIs these methods call into. (I06fd4)\n\nis released. Version 1.6.0-alpha04 contains these commits.\n• added a new that detects when a child fragment is nested within it’s parent’s View hierarchy, but not added to the parent’s . (I72521, b/249299268)\n• Fragments now restore their state before , ensuring that it is available from all upward lifecycle methods. (I1e2b1)\n• The artifact separates out the manifest entries from the rest of the fragment-testing components. This means you can do the following:\n\nThis avoids conflicts due to version skew between and .(I8e534, b/128612536)\n• From Fragment : Fragments will no longer incorrectly save the state as part of the view registry saved state. (I10d2b, b/253546214)\n\n, , and are released. Version 1.6.0-alpha03 contains these commits.\n• Classes extending will now be required to call super in their overrides. (I14798, b/238928865)\n• Fixed regressions caused by the integration of the new provider callback interfaces ( , , , ) to ensure that fragments always get the proper callbacks. (I9b380,I34581, (I8dfe6, b/242570955),If9d6b,Id0096,I690b3,I2cba2)\n\n, , and are released. Version 1.6.0-alpha02 contains these commits.\n• From Fragment : Fixed an issue where executing a and a transaction at the same time could cause exiting fragments to run the wrong / . (Ib1c07, b/214835303)\n\n, , and are released. Version 1.6.0-alpha01 contains these commits.\n• The saved state of s has been split entirely between private library state (custom classes) and state provided by the developer, which is now always stored in a that allows determining exactly where a fragment’s state is originating. (b/207158202)\n• From Fragment : Fix a regression in the where using the lint version bundled with AGP 7.4 would cause lint to crash. (b/237567009)\n• From Fragment : The Fragment library now depends on the Lifecycle . (Id204c)\n• From Fragment : The Fragment library now depends on Activity . (I10f07)\n\n, , and are released. Version 1.5.7 contains these commits.\n• Using with a timeout and then replacing the postponed fragment no longer results in leaking the postponed fragment. (I2ec7d, b/276375110)\n\n, , and are released. Version 1.5.6 contains these commits.\n• Fixed an issue where the removal of any Fragment, whether it had added Menu items or not, would invalidate the activity's menu. (50f098, b/244336571)\n• Fixed an issue where calling inside a wouldn't work if the was already and a result was already available. (If7458)\n\n, , and are released. Version 1.5.5 contains these commits.\n• Fragments will no longer incorrectly save the state as part of the view registry saved state. (I10d2b, b/253546214)\n\n, , and are released. Version 1.5.4 contains these commits.\n• Fixed an error where using a custom with a host that does not implement a provider callback interface ( , , , ) and calling its deprecated dispatch function would fail to dispatch to child fragments. (I9b380)\n\n, , and are released. Version 1.5.3 contains these commits.\n• Fixed an error that caused fragments on the back stack to get , , , and callbacks. (I34581, I8dfe6, b/242570955)\n• Nested child fragments will no longer receive multiple , , , or callbacks. (I690b3, Id0096, If9d6b, I2cba2)\n\n, , and are released. Version 1.5.2 contains these commits.\n• Fixed an issue where executing a and a transaction at the same time could cause exiting fragments to run the wrong / . (Ib1c07, b/214835303)\n\n, , and are released. Version 1.5.1 contains these commits.\n• Fix a regression in the where using the lint version bundled with AGP 7.4 would cause lint to crash. (b/237567009)\n• The Fragment library now depends on the Lifecycle . (Id204c)\n• The Fragment library now depends on Activity . (I10f07)\n\n, , and are released. Version 1.5.0 contains these commits.\n• CreationExtras Integration - now has the ability to provide a stateless via Lifecycle ’s .\n• Component Dialog Integration - now uses via Activity as the default dialog returned by .\n• Saved Instance State Refactoring - Fragments have begun to change the way they save their instance state. This is an effort to help clearly identify what state has been saved in the fragment and the source of the state. The current changes include the following:\n• now saves its saved instance state into a instead of directly in a custom .\n• Results set via the that have not yet been delivered are now saved separately from the internal state of the .\n• The state associated with each individual fragment is now saved separately from the internal state of the , thus allowing you to correlate the amount of saved state associated with an individual fragment with the unique IDs present in the debug logging.\n• now offers the ability for private third-party fragments to bypass specific violation penalties by using with the class name.\n• The Fragment APIs for providing a menu to your activity’s have been deprecated. The and APIs added in Activity provide a testable, lifecycle aware equivalent API surface that fragments should use.\n\n, , and are released. Version 1.5.0-rc01 contains these commits.\n• The state associated with each individual fragment is now saved separately from the internal state of the , thus allowing you to correlate the amount of saved state associated with an individual fragment with the unique IDs present in the Fragment debug logging. (a153e0, b/207158202)\n\n, , and are released. Version 1.5.0-beta01 contains these commits.\n• has added a new method that uses for parity with the function. Note that this will not make the be dismissed immediately, it will only synchronously update the state of the . (I15c36, b/72644830)\n• now saves its saved instance state into a instead of directly in a custom . This is the first step in providing additional transparency into what is actually being saved by Fragments. (I93807, b/207158202)\n• Results set via the Fragment Result APIs that have not yet been delivered are now saved separately from the internal state of the . This will allow for additional transparency into what results are being saved as part of your saved instance state. (I6ea12, b/207158202)\n\n, , and are released. Version 1.5.0-alpha05 contains these commits.\n• 's has been deprecated. To manage menus and their menu items, the new menu APIs should be used instead as per the Fragment release notes. (I7b4b4, b/226438239)\n\n, , and are released. Version 1.5.0-alpha04 contains these commits.\n• The Fragment APIs for providing a menu to your activity’s have been deprecated as they tightly couple your fragment to your activity and are not testable in isolation. The and APIs added in Activity provide a testable, lifecycle aware equivalent API surface that fragments should use. (I50a59, I20758)\n• now supports using even when it was initialized with a . If extras are provided, the initialized arguments are ignored. (I6c43b, b/224844583)\n\n, , and are released. Version 1.5.0-alpha03 contains these commits.\n• You can now pass to the and functions. (Ibefe7, b/217601110)\n• now uses as the default dialog returned by . (If3784, b/217618170)\n\n, , and are released. Version 1.5.0-alpha02 contains these commits.\n• now offers the ability for private third-party fragments to bypass specific violation penalties by using with the class name. (I8f678)\n\n, , and are released. Version 1.5.0-alpha01 contains these commits.\n• now integrates with ViewModel CreationExtras, introduced as part of Lifecycle . (I3060b, b/207012585)\n• From Fragment : no longer throws an illegal state exception when view IDs generated from xml have negative values. (Ic185b, b/213086140)\n• From Fragment : When using a custom lambda with the lazy function, it will now use the from that owner if a custom is not provided instead of always using the fragment's factory. (I56170, b/214106513)\n• Fixed a crash when accessing a for the very first time from a callback of a . (Iea2b3)\n\n, , and are released. Version 1.4.1 contains these commits.\n• no longer throws an illegal state exception when view IDs generated from xml have negative values. (Ic185b, b/213086140)\n• When using a custom lambda with the lazy function, it will now use the from that owner if a custom is not provided instead of always using the fragment's factory. (I56170, b/214106513)\n\n, , and are released. Version 1.4.0 contains these commits.\n• The APIs provide runtime checks that allow you to verify that your app or libraries you depend on are not calling deprecated fragment APIs. When a violation is detected, you can choose to print a log message, trigger your own custom listener, or crash your app. The that controls what checks are enabled and what “penalties” are triggered can be set on a via the new method. That policy applies to that and transitively to any child fragment managers that do not set their own unique policy. See StrictMode for fragments.\n• None now provides a method which returns the fragment that was most recently added to the container. This uses the same logic as with the ID of the , but allows chaining the call.\n• None now implements , allowing you to use it with Kotlin’s method or try-with-resources.\n• None Added to specify whether to enable the standard Activity-transition animation taken from your theme in Fragments transition.\n• None The experimental API of has been removed and the new state manager is now the only option available.\n\nThe maintains a back stack made up of fragment transactions that used . This allows you to pop those transactions and return to the previous state, using the mechanisms for Saving state with fragments to allow your fragments to restore their state appropriately.\n\nThis release expands on these mechanisms by providing three new APIs: , , and . These APIs use the same as to save the state of the and the state of every fragment that was added in those transactions and allow you to later restore those transactions and their fragments with their state in tact. This allows you to effectively ‘swap’ between multiple back stacks by saving the current back stack and restoring a saved back stack.\n\noperates similarly to in that it is asynchronous and results in all the fragment transactions back to that specific name to be reversed (‘popped’) and any added fragments to be destroyed and removed, but it differs in a few important ways:\n• Unlike which will pop all transactions on the back stack if the specified name is not found on the back stack or if a null name is provided, does nothing if you haven’t previously committed a fragment transaction using with that exact, non-null name.\n• The state of all fragments added from those transactions is saved. This means that the View state of every fragment is stored, of every fragment is called and that state is restored, and any instances associated with those fragments are retained (and is not called on them).\n\nThe fragment transactions that can be used with must meet certain criteria:\n• Every fragment transaction must use to ensure the transactions can be restored as a single, atomic operation.\n• The set of transactions saved must be self-contained (i.e., they must not explicitly reference any fragments outside of that set of transactions) to ensure that they can be restored at any later time, no matter what changes have been made to the back stack in the intervening time.\n• No fragment that is saved can be a retained fragment or have a retained fragment in their transitive set of child fragments to ensure that the does not return any references to saved fragments after the back stack is saved.\n\nSimilar to , and , which would restore a previously saved back stack or clear a previously saved back stack, respectively, both do nothing if you have not previously called with the same name.\n\nFor more information, see Multiple back stacks: A deep dive.\n\nreleased with no changes from Fragment 1.4.0-beta01. Version 1.4.0-rc01 contains these commits.\n\n, , and are released. Version 1.4.0-beta01 contains these commits.\n• Parent fragments will now dispatch down their entire hierarchy before launching their own callback. (Iedc20, b/77504618)\n• The keyboard will now close automatically when going from a fragment with an open keyboard to a fragment with a recycler view. (I8b842, b/196852211)\n• now uses for all transactions it creates when you call , , or . (Ie2c14)\n• The extremely long Lint warning of has been shortened to . (e9eca3)\n\n, , and are released. Version 1.4.0-alpha10 contains these commits.\n• Added the lint warning for detecting calling both and on the same in the same - as these complementary operations cancel each other out when done in the same transaction, they must be split into separate transactions to actually do anything. (aosp/1832956, b/200867930)\n• Added the lint error for correcting usages of the Fragment Lifecycle to the Fragment view Lifecycle when using the API of . (aosp/1830457, b/200326272)\n• The deprecation message for APIs now handled by the Activity Result APIs, namely , , , , and , have all been expanded with more details. (cce80f)\n• The deprecation message for for both and has all been expanded with more details. (224db4)\n\n, , and are released. Version 1.4.0-alpha09 contains these commits.\n• You can now call to clear any state previously saved with . (I70cd7)\n• The class has been rewritten in Kotlin ensuring that the function will properly respect nullability. (If694a, b/189629145)\n• FragmentStrictMode is now written in Kotlin (I11767, b/199183506)\n• Fixed an issue where the state of a Fragment that was added with and then immediately removed before executing pending transactions would not be properly cleaned up. (I8ccb8)\n\n, , and are released. Version 1.4.0-alpha08 contains these commits.\n• Improved the Lint check to better handle redundant parenthesis. (I2d865)\n\n, , and are released with no notable changes. Version 1.4.0-alpha07 contains these commits.\n\n, , and are released. Version 1.4.0-alpha06 contains these commits.\n• Fixed an issue with multiple back stacks when rapidly swapping between back stacks that would appear as an while restoring a or as a second copy of a fragment appearing. (I9039f)\n• Fixed an issue where would hold onto a copy of state previously saved via even after that state was restored. (Ied212)\n• The method of no longer crashes when you call it after the state is saved when specifically adding the DialogFragment via the method. (I84422)\n\n, , and are released. Version 1.4.0-alpha05 contains these commits.\n• From Fragment : The Fragment’s view is now properly set to when using when the root view has set. (aosp/1766655, b/193603427)\n• From Fragment : now always unlocks the saved state as its first operation in lifecycle callbacks it overrides. (I6db7a)\n• From Fragment : Fragments now depends on Activity (I3a66c)\n\n, , and are released. Version 1.4.0-alpha04 contains these commits.\n• now uses under the hood to save its state. The and methods have also been deprecated in . If you are using to host fragments outside of , you should have your implement . (Iba68e, b/188734238)\n• Fixed an issue where the call to as part of supporting multiple back stacks would fail when done at the same time as running a that used . (I73137)\n• Fixed a that would occur after manually restoring a saved back stack that contained multiple transactions when using the API for multiple back stack support. This also fixed an issue where was not being checked for all transactions. (I8c593)\n• Fixed an issue where would incorrectly continue to restore previously saved state of fragments even after those fragments were removed from the , thus causing the saved state to continuously grow over time. (I1fb8e)\n\n, , and are released. Version 1.4.0-alpha03 contains these commits.\n• All Fragment StrictMode classes have been updated with more detailed error messages that explain the details of the violation. (b/187871638)\n• now contains more detailed error message that container the parent container that the fragment would have been added to. (Ic33a7)\n• now has more detailed error message that includes the container that the fragment was being added to. (Ib55f8)\n• The use case classes for now have more detailed error messages to include the fragment causing the violation and any other contained information. (Icc6ac)\n• The classes extending now have more detailed error messages that include the fragment causing the violation. (I6bd55)\n• now has more detailed error message that includes the previous id of the fragment. (I28ce2)\n• now has more detailed error message that includes what the user visible hint was being set to. (Ib2d5f)\n• Reverted the restriction on calling on a - this no longer crashes your app. (6b8ddd, b/190622202)\n• From Fragment : Fixed a regression in shared element transitions introduced in Fragment by aosp/1679887. Fragments now correctly handle transition groups (either set directly via or indirectly via a or ) and shared elements will no longer throw s. (I16484, b/188679569, b/188969304)\n• The will no longer crash when you attempt to hide a removing fragment. (I573dd, b/183634730)\n• The lint check will no longer crash when evaluating a top level variable. (0a9efa, b/189967522)\n\n, , and are released. Version 1.4.0-alpha02 contains these commits.\n• will now always log violations when logging is enabled via the , regardless of the current strict mode policy being used. (I02df6, b/187872638)\n• None now supports exempting particular classes from strict mode s allowing that class to bypass any penalties. (Ib4e5d, b/184786736)\n• None The class has been expanded to add structure information based on each violation. This allows you to verify exactly what caused the violation along with the violating fragment (If5118, b/187871150), each contains the following:\n• now contains the that the was attempting to be added to. (I83c75, b/187871150)\n• has been expanded into, , , and , with containing the target fragment and request code. (I741b4, b/187871150)\n• now contains the boolean value passed into . (I00585, b/187871150)\n• now contains the ViewGroup that the tag was attempting to inflate a fragment into.(I5dbbc, b/187871150)\n• now contains the unique ID of the previous instance of the that caused the viotion. (I0544d, b/187871150)\n• is now abstract and has two subclasses, and , representing the two cases for the violation type. (Ic81e5, b/187871150)\n• now throws an exception when attempting to change the attribute programmatically or via XML. Insets should be handled by each individual fragment’s view. (Ie6651, b/187304502)\n\n, , and are released. Version 1.4.0-alpha01 contains these commits.\n• None now provides a method which returns the fragment that was most recently added to the container. This uses the same logic as with the ID of the , but allows chaining the call. (Ife17a, b/162527857)\n• None Added to specify whether to enable the standard Activity-transition animation taken from your theme in Fragments transition. (I46652)\n\nThe maintains a back stack made up of fragment transactions that used . This allows you to pop those transactions and return to the previous state, using the mechanisms for Saving state with fragments to allow your fragments to restore their state appropriately.\n\nThis release expands on these mechanisms by providing two new APIs: and . These APIs use the same as to save the state of the and the state of every fragment that was added in those transactions and allow you to later restore those transactions and their fragments with their state in tact. This allows you to effectively ‘swap’ between multiple back stacks by saving the current back stack and restoring a saved back stack.\n\noperates similarly to in that it is asynchronous and results in all the fragment transactions back to that specific name to be reversed (‘popped’) and any added fragments to be destroyed and removed, but it differs in a few important ways:\n• Unlike which will pop all transactions on the back stack if the specified name is not found on the back stack or if a null name is provided, does nothing if you haven’t previously committed a fragment transaction using with that exact, non-null name.\n• The state of all fragments added from those transactions is saved. This means that the View state of every fragment is stored, of every fragment is called and that state is restored, and any instances associated with those fragments are retained (and is not called on them).\n\nThe fragment transactions that can be used with must meet certain criteria:\n• Every fragment transaction must use to ensure the transactions can be restored as a single, atomic operation.\n• The set of transactions saved must be self-contained (i.e., they must not explicitly reference any fragments outside of that set of transactions) to ensure that they can be restored at any later time, no matter what changes have been made to the back stack in the intervening time.\n• No fragment that is saved can be a retained fragment or have a retained fragment in their transitive set of child fragments to ensure that the does not return any references to saved fragments after the back stack is saved.\n\nSimilar to , does nothing if you have not previously called with the same name. (b/80029773)\n\nThe APIs provide runtime checks that allow you to verify that your app or libraries you depend on are not calling deprecated fragment APIs. When a violation is detected, you can choose to print a log message, trigger your own custom listener, or crash your app. The that controls what checks are enabled and what “penalties” are triggered can be set on a via the new method. That policy applies to that and transitively to any child fragment managers that do not set their own unique policy. (#123, #131, #150, b/143774122)\n• detects whether a previously removed instance is being re-added to a . You should never interact with or keep a reference to a instance after it has been destroyed and removed from a . (#142, b/153738653)\n• detects when you are using the tag in your layout XML. You should always use when inflating fragments as part of your layout. (#141, b/153738235)\n• detects when you add a fragment to a container that is not a . You should always use as the container for fragments in your layout. (#146, b/181137036)\n• detects when you use the deprecated or APIs. (#140, b/153737954)\n• detects when you use the deprecated API. (#136, b/153738974)\n• detects when you use the deprecated , or APIs. (#139, b/153737745)\n• The experimental API of has been removed and the new state manager is now the only option available. (I90036, b/162776418)\n• now implements , allowing you to use it with Kotlin’s method or try-with-resources. (#121, b/143774122)\n• The Lint check now warns when using within a - you should always use the dialog fragment’s method to get the appropriate for . (#156, b/170781346)\n• The Lint check now warns when calling or in the method of a - these listeners are owned by the itself and you should override and to receive these callbacks. (#171, b/181780047, b/187524311)\n• From Fragment 1.3.4: Fixed a regression introduced in Fragment when using the API with or the Jetpack Compose method of inside a Fragment. These use cases now correctly use the provided by your Fragment if it overrides (as annotated Fragments do when using Hilt). If you do not override that method, a that saves and restores its state alongside the Fragment’s view is created as the default factory. (I5cbfa, b/186097368)\n• From Fragment 1.3.4: When using on API 29, insets will no longer dispatch indefinitely, fixing issues with and instances. (I1bb78, b/186012452)\n• From Fragment 1.3.4: You can now retrieve your Parcelable from the fragment result bundle after process death. (I65932, b/187443158)\n• From Fragment 1.3.4: When doing a shared element transition on a ViewGroup, if the ViewGroup has set to false, it will now properly transition. (I99675)\n• Thanks simonschiller for adding the entirety of the API for this release! (#123, #131, #150, b/143774122, #142, b/153738653, #141, b/153738235, #146, b/181137036, #140, b/153737954, #136, b/153738974, #139, b/153737745)\n• Thanks tatocaster for adding the Lint check. (#156, b/170781346)\n• Thanks tatocaster for adding the Lint check. (#171, b/181780047)\n\n, , and are released. Version 1.3.6 contains these commits.\n• From Fragment : The will no longer crash when you attempt to hide a removing fragment. (I573dd, b/183634730)\n• The Fragment’s view is now properly set to when using when the root view has set. (aosp/1766655, b/193603427)\n• now always unlocks the saved state as its first operation in lifecycle callbacks it overrides. (I6db7a)\n• From Fragment : Fragments now depends on Activity (I3a66c)\n\n, , and are released. Version 1.3.5 contains these commits.\n• Fixed a regression in shared element transitions introduced in Fragment by aosp/1679887. Fragments now correctly handle transition groups (either set directly via or indirectly via a or ) and shared elements will no longer throw s. (I16484, b/188679569, b/188969304)\n\n, , and are released. Version 1.3.4 contains these commits.\n• Fixed a regression introduced in Fragment when using the API with or the Jetpack Compose method of inside a Fragment when using Hilt. These use cases now correctly use the provided by your Fragment if it overrides (as annotated Fragments do). If you do not override that method, a that saves and restores its state alongside the Fragment’s view is created as the default factory. (I5cbfa, b/186097368)\n• When using on API 29, insets will no longer dispatch indefinitely, fixing issues with and instances. (I1bb78, b/186012452)\n• You can now retrieve your Parcelable from the fragment result bundle after process death. (I65932, b/187443158)\n• When doing a shared element transition on a ViewGroup, if the ViewGroup has set to false, it will now properly transition. (I99675)\n\n, , and are released. Version 1.3.3 contains these commits.\n• Using now works when used with the returned by using with the Fragment's View. (I21acf, b/181577191)\n• Fixed a regression introduced in Fragment which would cause animations to not run when popping a that included a operation, such as those used by . (I38c87, b/183877426)\n• now ensures that every is dispatched a new set of , ensuring that each fragment can now independently consume the insets. (I63f68, b/172153900)\n• now properly handles cases where a child fragment is added to a container that has the same ID as a container in your custom class, fixing view hierarchy issues when reusing IDs that are used internally by dialogs such as . (Ie6279, b/180021387)\n• now properly indents the first fragment in the list of active fragments. (If5c33, b/183705451)\n• The new fragment state manager now properly handles exit transitions with hide operations. (I9e4de, b/184830265)\n\n, , and are released. Version 1.3.2 contains these commits.\n• When running both and operations together, the last operation will now set the direction for all animations rather than running some pop animations and some enter animations. (I7072e, b/181142246)\n• Views within in a shared element hierarchy will no longer have their transition name cleared when doing a shared element transition. (I4d4a6, b/179934757)\n• Fragment now depends on Activity 1.2.2, fixing an issue with Activity’s lint check when using Fragment 1.3.1 or higher.\n\n, , and are released. Version 1.3.1 contains these commits.\n• Dialogs within a can now get access to ViewTree owners through their DecorView, ensuring that can be used with . (Ib9290, b/180691023)\n• Fragments inflated into an already activity using FragmentContainerView are now properly shown after a configuration change. (Ie14c8, b/180538371)\n• There is no longer an extra at the end of the fragment (I54705, b/177761088)\n• Overridden methods in FragmentActivity now properly inherit the base method javaDoc (I736ce, b/139548782)\n• The docs for and have updated their parameters docs to reflect that they no longer accept nullables (I990ba, b/178348386)\n• Fragments now properly call when using show/hide transactions (I8bce8, b/180255554)\n• Child fragments with transitions that start prior to the fragment being laid out will now properly reach (Ic11e6, b/180825150)\n• Fragments inflated using the tag will now always make it to (I452ac, (I9fa49)\n\n, , and are released. Version 1.3.0 contains these commits.\n• New State Manager: A significant rewrite of the internals of has fixed numerous issues around the dispatch of lifecycle events, animations and transitions, and how postponed fragments are handled.\n• None Activity Result API Integration: Added support for the API introduced in Activity to handle + as well as + flows without overriding methods in your Fragment in addition to providing hooks for testing these flows. See the updated Getting a Result from an Activity.\n• This release fixes a number of issues around invalid request codes and the dispatch of permission requests that prevent the Activity Result API from working on previous versions of . You must upgrade to Fragment 1.3.0 to use the Activity Result APIs in a or .\n• None Fragment Result API: Added support for passing results between two Fragments via new APIs on . This works for hierarchy fragments (parent/child), DialogFragments, and fragments in Navigation and ensures that results are only sent to your Fragment while it is at least . The target fragment APIs have been deprecated in favor of these new APIs. See Get Results using the Fragment Result API.\n• None : The callback on and have been deprecated. A new has been added to provide a more flexible alternative, allowing delegation of to separate, testable listeners and support for adding a listener to FragmentManagers other than your direct child FragmentManager.\n• None Improvements: The class from the artifact has been rewritten in Kotlin and has received a number of improvements:\n• now uses to implement , ensuring consistent behavior on all API levels and decoupling the Fragment’s state from the underlying Activity.\n• now supports setting an initial to support asserting the fragment’s state before moving to each for the first time.\n• There is now an alternative to the API of in the form of the Kotlin reified extension method that allows you to return a value. Notably, it rethrows exceptions raised in the given block.\n• None Support: now supports the , , and APIs added in Lifecycle and SavedState such that it will return the Fragment as the , and a and tied to the fragment’s view Lifecycle when using a within a .\n• None animation changes: The fragment default effects, , , and , now use instead of . The resources used to build these animators are now private.\n• None deprecation: The method on Fragments has been deprecated. With the introduction of ViewModels, developers have a specific API for retaining state that can be associated with Activities, Fragments, and Navigation graphs. This allows developers to use a normal, not retained Fragment and keep the specific state they want retained separate, avoiding a common source of leaks while maintaining the useful properties of a single creation and destruction of the retained state (namely, the constructor of the and the callback it receives).\n• None ViewPager 1 adapter deprecation: With the release of ViewPager2 , the and classes for interacting with have been deprecated. See Migrate from ViewPager to ViewPager2.\n\n, , and are released. Version 1.3.0-rc02 contains these commits.\n• Fixed an issue where a parent would appear above a child after a configuration change; child dialog fragments now always appear above a parent dialog fragment. (I30806, b/177439520)\n• Fixed issue where doing a operation with an would cause the hiding fragment to flash at the end of the animation. (I57e22, b/175417675)\n• Fragments with transitions added before the view hierarchy is attached now properly reach . (I1fc1d, b/177154873)\n• The Fragment’s view now properly handles cases where the Fragment’s view is destroyed before the reaches , avoiding exceptions stating “no event down from INITIALIZED”. (eda2bd, b/176138645)\n• Fragments that use an now appear in the proper order when using . (Id9aa3, b/176089197)\n\n, , and are released. Version 1.3.0-rc01 contains these commits.\n• now follows the same logic as and is no longer called when a parent fragment calls . (Id7de8, b/173203654)\n• Fixed leak and visual artifact when adding a fragment with an to a and then interrupting that addition with a pop operation. (I952d8)\n• Fixed an issue where the fragment's view would remain in the view hierarchy if it was replaced during its or methods. (I8a7d5)\n• Focus is now properly restored to Fragment root views when they are resumed. (Ifc84b)\n• Combining pop and replace operations in the same fragment transaction will now show the proper animations (Ifd4e4, b/170328691)\n\n, , and are released. Version 1.3.0-beta02 contains these commits.\n• has been fully converted to Kotlin while maintaining source and binary compatibility via usage of Kotlin 1.4's functional interfaces for . (I19d31)\n• FragmentContainerViews that do not inflate a fragment using the or attribute can now be used outside of a . (Id4397, b/172266337)\n• Attempting to set the max lifecycle of a fragment to will now throw an (Ie7651, b/170765622)\n• Initializing a FragmentScenario with a state will now throw an (I73590, b/170765622)\n• Fixed an issue where the view would not reach its final state if you interrupt a fragment transition that was using an or one of the options. (I92426, b/169874632)\n• Fixed an issue that prevented fragments with an exiting from being properly destroyed. (I83d65)\n• Exiting fragments that have their effects reversed now correctly cancel and restart with the proper entering effect. (I62226, b/167092035)\n• Fixed an issue where the exit of a would not run. (Id7ffe)\n• Fragments now properly appear when postponed and then immediately started. (Ie713b, b/170022857)\n• Fragments that remove their focused view during an animation will no longer attempt to restore the focus on the detached view once they reach (I38c65, b/172925703)\n• now caches fragment classes separately for different instances. Thanks Simon Schiller! (#87, b/113886460)\n\n, , and are released. Version 1.3.0-beta01 contains these commits.\n• now supports setting the state to as long as the fragment has not been moved to . (b/159662173)\n• Fragments inflated using the tag will now properly wait until their views are added to a container before moving to STARTED (I02f4c)\n• Fragments that are visible and then to now properly run their exit effects. (b/165822335)\n• Removing a detached fragment that is not added to the back stack no longer causes a memory leak. Courtesy of Nicklas Ansman Giertz! (b/166489383)\n• Active fragments will now always have a non-null and fragments with a non-null will always be considered active. (aosp/1422346)\n• The fragment default effects, , , and , now use instead of . (b/166155034)\n• Fragments now properly restore their view focus state from right before they start their animation. (Icc256)\n• Fragments that only have a shared element transition now properly complete their special effects meaning they actually move to their final state (Iaebc7, b/166658128)\n• Fragment views are now always removed from the container before being destroyed. (Id5876)\n• The new state manager now consistently removes the exiting fragment view before adding the entering one. (I41a6e)\n• Explicit changes to a fragment view’s visibility are now respected by the new state manager. This means that if you set an entering fragment’s view to before the animation begins, it will actually stay invisible. (b/164481490)\n• Fragments now prioritize over , meaning a fragment with both will only run the and ignore the . (b/167579557)\n• The new state manager no longer causes fragments to flash when using entering animations. (b/163084315)\n\nWhen using the new state manager, if you press back during an entering special effect instead of returning to the previous fragment, the old fragment is never re-added, resulting in a blank screen. (b/167259187, b/167092035, b/168442830)\n\n, , and are released. Version 1.3.0-alpha08 contains these commits.\n\nThis release includes a major refactoring of the internal state management of which affects the dispatch of lifecycle methods, animations and transitions, and how postponed transactions are handled. This is enabled by default. See the Fragments: Rebuilding the Internals blog post for more details. (b/139536619, b/147749580)\n• An experimental API in can be used to control whether FragmentManager uses the new state manager. (I7b6ee)\n\nThe following issues are fixed only when using the new state manager:\n• The previous fragment of a operation is now correctly stopped before the new fragment is started. (b/161654580)\n• Fragments now prevent multiple competing animations on the same fragments, avoiding cases where an would override all effects or an and a on an individual fragment would both run. (b/149569323)\n• The and of all fragments entering and exiting are now ran rather than only the last entering fragment and the first exiting fragment. (b/149344150)\n• Postponed fragments no longer get stuck at the state but instead move to with other fragments. (b/129035555)\n• Fixed an issue where would execute operations out of order when mixing a postponed re-ordered transaction and a non-reordered transaction. (b/147297731)\n• Popping multiple fragments simultaneously will no longer result in intermediate fragments being temporarily visible when postponing fragments. (b/37140383)\n• now returns the correct fragments when calling or from within the callback. (b/153082833)\n• Fragments no longer call on fragments being destroyed when the fragment replacing them is postponed. (b/143915710)\n• The error message when attempting to combine framework and AndroidX instances now mentions the fragment with the invalid transition. (b/155574969)\n• You can now call on an in the lifecycle method of a fragment. (b/161464278)\n• Calling after now throws an exception indicating that this is not allowed rather than silently failing to deliver results after a configuration change. (b/162255449)\n• now uses the API introduced in Activity to restore the state of the . Any listeners added to subclasses of will run after this listener. (I513da)\n• passed through when using are now respected. (b/162247961)\n• When using the new state manager, directly setting the visibility of the fragment’s root view after and before results in the visibility you set being overridden by , who controls the visibility of the root view. As a workaround, you should always use the and operations to change the visibility of your fragment. (b/164481490)\n\n, , and are released. Version 1.3.0-alpha07 contains these commits.\n• now supports setting an initial Lifecycle state of , , or rather than always moving the Fragment to the state. (b/159662750)\n• Added an alternative to the API of in the form of the Kotlin reified extension method that allows you to return a value. Notably, it rethrows exceptions raised in the given block. (b/158697631)\n• now uses to implement , ensuring consistent behavior on all API levels and decoupling the Fragment’s state from the underlying Activity. (b/156527405)\n• The returned by is now tied to the fragment view’s Lifecycle. This ensures that it has its state saved and restore at the same time as the fragment’s view. (b/158503763)\n• Fragments now wait for the fragment’s view to be attached before calling , avoiding cases where the inset request was being dropped. (b/158095749)\n\n, , and are released. Version 1.3.0-alpha06 contains these commits.\n• The callback on and have been deprecated. A new has been added to provide a more flexible alternative, allowing delegation of to separate, testable listeners and support for adding a listener to FragmentManagers other than your direct child FragmentManager. (I06d3d)\n• Parent fragments now have their view state restored before their child fragments, fixing a visual ordering issue after a configuration change when a would show another as a child fragment. (b/157195715)\n• Fixed an issue where the Lint check would not handle chained usages of the and operators correctly. (b/157677616)\n\n, , and are released. Version 1.3.0-alpha05 contains these commits.\n• Added support for from Lifecycle , and from SavedState when using a within a . (aosp/1297993, aosp/1300264)\n• The and APIs now take a non-null and , respectively. To explicitly clear a previously set result or listener, use the new and methods. (b/155416778)\n• The Kotlin extensions that take a lambda are now marked as . (b/155323404)\n• The previously deprecated , , and on now internally use , thus removing the restriction on using only the lower bits (below ) for your request codes when using those APIs. (b/155518741)\n• Expanded the documentation on the and constructors to clarify that they should be called from your subclasses’ no argument constructor when using the default . (b/153042497)\n\n, , and are released. Version 1.3.0-alpha04 contains these commits.\n• Added support for passing results between two Fragments via new APIs on . This works for hierarchy fragments (parent/child), DialogFragments, and fragments in Navigation and ensures that results are only sent to your Fragment while it is at least . (b/149787344)\n• The target fragment APIs have been deprecated. To pass data between fragments the new Fragment Result APIs should be used instead. (b/149787344)\n• The / and / APIs on Fragment have been deprecated. Please use the Activity Result APIs. (aosp/1290887)\n• Breaking change from Activity : the method has been renamed to . (aosp/1278717)\n• The fragment’s is now stopped before is called, mirroring the behavior of the fragment’s lifecycle. (b/154645875)\n• Calling on a fragment now correctly changes the visibility of menus provided by its child fragments. (b/153593580)\n• Fixed an when adding a fragment to a ’s view hierarchy with . (b/154366601)\n• The method on fragments no longer crashes when hosting your fragments outside of an activity. (b/153762914)\n\n, , and are released. Version 1.3.0-alpha03 contains these commits.\n• The methods on are now . (b/152439361)\n• Fixed a regression introduced in Fragment when using . (b/151652127, aosp/1263328, aosp/1265163)\n• Fixed a crash when using from a fragment after a configuration change. (b/152137004)\n• Fixed an issue where shared element and exit transitions are ignored when using . (b/152023196)\n• From Fragment : Updated the Fragment ProGuard rules to allow obfuscation of kept fragments. (b/151605338)\n• From Fragment : Disabled the Lint rule on classes as their lifecycle and view lifecycle are always in sync, making it safe to use either or when calling . (b/151765086)\n• Fragments depend on Activity , which had significant improvements to the Activity Result API introduced in Activity .\n\n, , and are released. Version 1.3.0-alpha02 contains these commits.\n• Added support for the API introduced in Activity to handle the + as well as + flows without overriding methods in your Fragment in addition to providing hooks for testing these flows. See the updated Getting a Result from an Activity. (b/125158199)\n• now provides a constructor that takes a that indicates the layout that should inflate by default. (b/150327080)\n• The method is now deprecated. Code touching the fragment's view should be done in (which is called immediately before ) and other initialization code should be in . To receive a callback specifically when the activity's is complete, a should be registered on the activity's in , and removed once the callback is received. (b/144309266)\n• From Fragment : Fixed a bug in that caused a when calling from within . (b/117894767, aosp/1258664)\n• From Fragment : Reduced the scope of Fragment’s included ProGuard rules to ensure that unused Fragment classes can be stripped. (b/149665169)\n• From Fragment : Fixed false positives in the Lint check when using a local variable name that shadowed the Kotlin property name. (b/149891163)\n• From Fragment : no longer throws an for using the incorrect constructor in layout preview. (b/149707833)\n• no longer properly positions its dialog on the screen. (b/151652127)\n\n, , and are released. Version 1.3.0-alpha01 contains these commits.\n• Added support for the API added in Lifecycle such that it will return the Fragment’s as the for any Views returned by . (aosp/1182955)\n• The method on Fragments has been deprecated. With the introduction of ViewModels, developers have a specific API for retaining state that can be associated with Activities, Fragments, and Navigation graphs. This allows developers to use a normal, not retained Fragment and keep the specific state they want retained separate, avoiding a common source of leaks while maintaining the useful properties of a single creation and destruction of the retained state (namely, the constructor of the and the callback it receives). (b/143911815)\n• With the release of ViewPager2 , the and classes for interacting with have been deprecated. See Migrate from ViewPager to ViewPager2. (b/145132715)\n• Fragment ProGuard rules now correctly only keep the default constructors classes that are used rather than for all instances, fixing a regression introduced in Fragment . (b/149665169\n• The Lint rules added in Fragment no longer false positive on local variables that share the same name as the shadowed Kotlin property names (i.e., ). (b/149891163)\n• no longer throws an when using the layout preview in Android Studio. (b/149707833)\n• Fixed an issue where retained fragments that were added after the state is saved would not be continually recreated and then destroyed after each configuration change. (b/145832397)\n\n, , and are released. Version 1.2.5 contains these commits.\n• The fragment’s is now stopped before is called, mirroring the behavior of the fragment’s lifecycle. This was previously released in Fragment . (b/154645875)\n• Calling on a fragment now correctly changes the visibility of menus provided by its child fragments. This was previously released in Fragment . (b/153593580)\n\n, , and are released. Version 1.2.4 contains these commits.\n• Updated the Fragment ProGuard rules to allow obfuscation of kept fragments. (b/151605338)\n• Disabled the Lint rule on classes as their lifecycle and view lifecycle are always in sync, making it safe to use either or when calling . (b/151765086)\n\n, , and are released. Version 1.2.3 contains these commits.\n• Fixed a bug in that caused a when calling from within . (b/117894767, aosp/1258665)\n• Reduced the scope of Fragment’s included ProGuard rules to ensure that unused Fragment classes can be stripped. (b/149665169)\n• Fixed false positives in the Lint check when using a local variable name that shadowed the Kotlin property name. (b/149891163)\n• no longer throws an for using the incorrect constructor in layout preview. (b/149707833)\n\n, , and are released. Version 1.2.2 contains these commits.\n• Lint suggests using the as the to calls into in , , and . (b/142117657)\n• Added a new Lint check that confirms that you are using the correct when using the artifact. (b/141500106)\n• Fragments now suggest using the associated methods for more descriptive error messages instead of , , or for all of the Fragment APIs that include both a and equivalent. (aosp/1202883)\n• Improved the existing Lint check suggesting using when using to also handle the extension method version of . (b/148996309)\n• Fixed the formatting for many of the Lint checks (aosp/1157012)\n• Thanks to Zac Sweers for contributing the Lint checks on behalf of Slack! (aosp/1202883)\n\n, , and are released. Version 1.2.1 contains these commits.\n• Fragments added via the and methods that take a instance (or the Kotlin reified versions) now have their default constructor kept by ProGuard. (b/148181315)\n• and no longer catch exceptions thrown by when running . (aosp/1208711)\n• Fixed an issue where did not work with fragments added via the tag. (b/147784323)\n• Fragments inflated using the tag now always receive a call to before when in the layout. (aosp/1215856)\n• Calling on a instance no longer throws a when the Activity is already destroyed. (b/148189412)\n\n, , and are released. Version 1.2.0 contains these commits.\n• FragmentContainerView: The is the strongly recommended container for dynamically added Fragments, replacing usage of or other layouts. It also supports the same , , and optional as the tag, but uses a normal to add this initial fragment, instead of the custom code path used by .\n• timing: Fragments now wait for exit animations, exit framework transitions, and exit AndroidX transitions (when using Transition ) to complete before calling .\n• Class based and : Added new overloads of and on that take a and optional of arguments. These methods use your to construct an instance of the Fragment to add. Kotlin extensions that use reified types (i.e, ) have also been added to .\n• Lifecycle ViewModel SavedState Integration: is now the default factory used when using , , the constructor, or with a Fragment.\n• New Lint checks: Added a new Lint check that ensures you are using when observing from , , or .\n• deprecation: The and methods on Fragment have been deprecated and replaced with a single method, which returns the non-null the Fragment is added to (you can use to determine if it is safe to call).\n• deprecation: The static method has been deprecated. FragmentManager now respects for the tag , allowing you to enable either or logging without re-compiling your app.\n• Fragments referenced only via the or attribute on a are not kept by ProGuard automatically, requiring that you manually add a keep rule for each fragment class. (b/142601969)\n• When adding a using or in XML with , you cannot use in of your Activity. (b/142847973)\n\n, , and are released. Version 1.2.0-rc05 contains these commits.\n• Fixed a regression in Fragment when using the tag which caused to be called incorrectly during activity destruction. (b/146290333)\n• Fragments added with the tag now properly have their non-config cleared even when they are only sometimes in the layout (i.e., only in your landscape layout). As a consequence, these Fragments are now correctly moved to even when not in your layout instead of being instantiated but never moving through any lifecycle methods. (b/145769287)\n\n, , and are released. Version 1.2.0-rc04 contains these commits.\n• Adjusted the animations for , , and to avoid visual issues. (b/145468417)\n\n, , and are released. Version 1.2.0-rc03 contains these commits.\n• Fixed an unintentional behavior change where Fragments who have been removed are still returned by / while their exit animations/transitions run. (b/143982969, aosp/1167585)\n• Child fragments are now correctly stopped before their parents when the containing activity calls . (b/144380645)\n• Fixed an issue where Views were incorrectly marked after popping a hidden Fragment. (b/70793925)\n• Fragment shared element transitions now handle Views that have been rotated, scaled, etc. (b/142835261)\n• Improved the documentation on and to better indicate that setting a will also affect child FragmentManagers. (aosp/1170095)\n• Fragments now depends on Lifecycle , Lifecycle ViewModel SavedState , and Activity .\n\n, , and are released. Version 1.2.0-rc02 contains these commits.\n• When in Kotlin, the LintFix for using when observing from , , or (introduced in Fragment ) now uses the Kotlin property access syntax instead of . (aosp/1143821)\n\n, , and are released. Version 1.2.0-rc01 contains these commits.\n• now supports the attribute in addition to , mirroring the functionality of the tag. (b/142722242)\n• Added a new Lint check that ensures you are using when observing from , , or . (b/137122478)\n• The and callbacks on now guarantee that the passed to them is non-null and that returns non-null when they are executed. (b/141974033)\n• now adds the Fragment defined by or as part of inflation, ensuring that and work immediately afterwards. (b/142520327)\n• Fixed an in due to the state being saved. (b/142580713)\n• Fixed an in when the class is obfuscated. (b/142657034)\n• Fragments referenced only via the or attribute on a are not kept by ProGuard automatically, requiring that you manually add a keep rule for each fragment class. We have disabled the Lint rule suggesting moving to until this is fixed via . (b/142601969)\n\n, , and are released. Version 1.2.0-beta02 contains these commits.\n• Fixed an issue where Fragment's did not receive proper attributes from , breaking cases such as . (b/142421837)\n\n, , and are released. Version 1.2.0-beta01 contains these commits.\n• adds support for adding an initial fragment with added support for the and optional XML attributes. Unlike the tag, uses a normal under the hood to add the initial fragment, allowing further operations on the and enables the usage of View Binding for the layout. (b/139830628, b/141177981)\n• Fragments now contains a Lint warning offering a quick fix to replace with . (b/139830056)\n• When using Transition , Fragments now wait for transitions (in addition to framework transitions and animations, which were fixed in Fragment and Fragment , respectively) to finish before dispatching . (aosp/1119841)\n• When using Transition , Fragments now properly cancel transitions before starting new transitions / animations on the same container. (aosp/1119841)\n• Fixed an issue on API 17 and lower when using transitions on the root view of your Fragment when using . (b/140361893)\n• The artifact now depends on AndroidX Test , fixing an incompatibility with the latest Espresso 3.2.0. (b/139100149)\n• Fragment's do not receive proper attributes from , breaking cases such as . (b/142421837)\n\n, , and are released. Version 1.2.0-alpha04 contains these commits.\n• The and methods on have been deprecated and replaced with a single method, which returns the non-null the Fragment is added to (you can use to determine if it is safe to call). (b/140574496)\n• The static method has been deprecated. FragmentManager now respects for the tag , allowing you to enable either or logging without re-compiling your app. (aosp/1116591)\n• Fragments are now properly destroyed while exit animations on other fragments are running. (b/140574199)\n• Fixed an issue where Fragments would call where before it did not. (aosp/1116431)\n\n, , and are released. The commits included in this version can be found here.\n• now properly reverses the draw order when popping fragments off the back stack. (b/139104187)\n• Fixed an issue where the wrong animation would run when both popping a fragment and adding a new fragment at the same time. (b/111659726)\n• Fragments now wait for transitions (in addition to animations, which was fixed in Fragment ) to finish before dispatching . (b/138741697)\n\n, , and is released. The commits included in this version can be found here.\n• is now the default factory used when using , , the constructor, or with a . (b/135716331)\n• The default animations when using , , with on a have been updated to match the animations used by activities on Android 10 devices. (aosp/1012812, aosp/1014730)\n• Introduces as the strongly recommended container for dynamically added Fragments, replacing usage of , etc. as it fixes animation z-ordering issues and window insets dispatching to Fragments. (b/37036000, aosp/985243, b/136494650)\n• Added a static method to retrieve the containing Fragment from a view inflated by a fragment. A Kotlin extension is also available in . (aosp/1090757)\n• Added new overloads of and on that take a and optional of arguments. These methods use your to construct an instance of the Fragment to add. Kotlin extension that use reified types (i.e, ) have also been added to . (b/126124987)\n• annotations have been added to lifecycle callbacks. (b/127272564)\n• The breadcrumb title related APIs on and have been deprecated. (b/138252944)\n• The method on has been deprecated. (aosp/1011537)\n• Many of the methods in are no longer . itself remains and should not be directly instantiated or extended; you should continue to only get an existing instance from , , etc.\n• From Fragment : Fragments now correctly cancel postponed transitions on Fragments have been popped. (b/138251858)\n• From Fragment : Fixed an issue where calling with a timeout more than once would not cancel previous timeouts. (b/137797118)\n• From Fragment : Fixed a crash in and when removing the current item. (b/137209870)\n• Fragments now wait for animations to finish before dispatching . (b/136110528)\n• Fragment animations from child fragments and their descendants are now properly handled when animating the parent Fragment. (b/116675313)\n• Fixed a when using shared element transitions and combining a pop and add operation. (b/120507394)\n• Added a workaround to s when using and in Robolectric tests. (b/137201343)\n\n, , and are released. The commits included in this version can be found here.\n• FragmentManager now calls after attaching the Fragment’s view and directly before calling , ensuring that your view always has the correct insets. (b/135945162)\n• Fixed a when popping a that used before . (b/134673465)\n\n, , and are released. The commits included in this version can be found here.\n• fragment-testing: The artifact provides a class for testing a fragment in isolation. See Test your app’s fragments documentation for more details.\n• FragmentFactory: You can now set a on a to manage the creation of fragment instances, removing the strict requirement to have a no-argument constructor.\n• Kotlin Property Delegates for ViewModels: The artifact now contains two Kotlin property delegates: for accessing ViewModels associated with the individual fragment and for accessing ViewModels scoped to the activity.\n• Max Lifecycle: You can now set a max Lifecycle state for a Fragment by calling on a . This replaces the now deprecated . and have a new constructor that allows you to switch to the new behavior.\n• FragmentActivity LayoutId constructor: Subclasses of can now optionally call into a constructor on that takes an ID, indicating the layout that should be set as the content view as an alternative to calling in . This does not change the requirement that your subclass have a no-argument constructor.\n• Fragment LayoutId constructor: Subclasses of can now optionally call into a constructor on that takes an ID, indicating the layout that should be used for this fragment as an alternative to overriding . The inflated layout can be configured in .\n• Postpone with a timeout: A new overload of has been added that takes a timeout.\n\n, , and is released. The commits included in this version can be found here.\n• Fragments now correctly cancel postponed transitions on Fragments have been popped. (b/138251858)\n\n, , and is released. The commits included in this version can be found here.\n• Fixed an issue where calling with a timeout more than once would not cancel previous timeouts. (b/137797118)\n\n, , and are released. The commits included in this version can be found here.\n• Fixed a crash in and when removing the current item. (b/137209870)\n\n, , and are released. The commits included in this version can be found here.\n• Fragments now properly update their visibility when using or operations while the transition is running. (b/133385058)\n• Fixed a when popping a that used before . (b/134673465)\n\n, , and are released. The commits included in this version can be found here.\n• callbacks (specifically related to , , , , and ) for nested Fragments are now properly nested. (b/133497591)\n• instances registered in a Fragment’s now properly take precedence over the child FragmentManager. (b/133175997)\n• Child fragments are no longer animated when their parent fragment is being replaced. (b/121017790)\n• Fragments animations and transitions are now ignored when using , fixing an issue where Fragments were not properly destroyed. (b/116257087)\n\n, , and are released. The commits included in this version can be found here.\n• Fragments now receive a callback to a new method when the primary navigation fragment changes. aosp/960857\n• Menu Items inflated by a child Fragment are now correctly removed when the Parent Fragment is removed. b/131581013\n\n, , and are released. The commits included in this version can be found here.\n\nThis release is incompatible with Preferences 1.1.0-alpha01 through 1.1.0-alpha04. Please upgrade to Preferences 1.1.0-alpha05 when using this version of Fragments.\n• Added a new overload of that takes a timeout, after which the Fragment will automatically call b/120803208\n• Breaking change: the previously deprecated method that took a has been removed. aosp/953856\n• Breaking change: The and constants in and have been renamed to and , respectively. aosp/954782\n• Fragments that have had their lifecycle capped via no longer get resumed before reaching their final state. b/131557151\n• When using , Fragments will properly have their view destroyed. aosp/954180\n\n, , and are released. The commits included in this version can be found here.\n• You can now set a max Lifecycle state for a Fragment by calling on a . This replaces the now deprecated . and have a new constructor that allows you to switch to the new behavior. (b/129780800)\n• on can now only be called on API 24+ devices. (b/129880016)\n• As a consequence of (b/129907905), fragments on the back stack will not get a callback to when the hosting activity is recreated. will now only be called when the fragment becomes visible (i.e., the back stack is popped).\n• Fixed an issue when using a tag in XML and the constructor of or . (b/129907905)\n• Corrected an issue where fragments on the back stack would not be moved to at least after a configuration change, causing ViewModels and child retained fragments to not be properly disposed. (b/129593351)\n• Fixed a crash in caused by a desync of the retained fragments after the instance state is saved. (b/130433793) (aosp/947824)\n• Fixed issues where an added with a fragment lifecycle would not be called if the had a back stack. See androidx.activity 1.0.0-alpha07 for more details. (aosp/948209)\n• Fragments no longer enforce for animations. If you specifically need a hardware layer animation, please set it as part of your animation. (b/129486478)\n\n, , and are released. The commits included in this version can be found here.\n• Exceptions thrown by FragmentManager now include the Fragment’s name in the message. (b/67759402)\n• and now contain a second constructor that takes a , which replaces the previous behavior of annotating your class with . This approach works in both app and library modules. (b/128352521)\n• FragmentActivity’s is now properly marked as . (b/127971684)\n• The FragmentFactory’s method that takes an argument Bundle has been deprecated and apps should use the new overload that does not take a Bundle. (b/128836103)\n• methods are now properly annotated with . (aosp/924193)\n• Fixed a regression in 1.1.0-alpha05 that caused the incoming Fragment to flash on the screen. (b/129405432)\n• Fixed an issue where the primary navigation fragment would be lost after a popBackStack+replace+popBackStack series of operations. (b/124332597)\n• Fixed an issue when using constructors on your Activity when restoring Fragment state. (b/127313094)\n• Corrected the logic of when replacing an existing target Fragment with a Fragment not yet attached to the FragmentManager. (aosp/932156)\n\n, , and are released. The full list of commits included in this version can be found here.\n• Calling , , , , and with a Fragment attached to a different FragmentManager now throws an rather than silently failing (aosp/904301)\n• for is now correctly marked with (b/124120586)\n• Fixed an issue where ’s could be called twice when using or (b/126563750)\n• Added support for the class annotation that allows you to indicate which layout XML file should be inflated as an alternative to overriding . It is recommended to do view related work in . (aosp/837619)\n• You can now use with to test Fragment hosted options menus (b/121126668)\n• Added a method which returns a or throws an (b/121196360)\n• Added a note that , , and should not be overridden and will be made final in a future release. Please file a feature request if you are currently overriding this method. (aosp/880714)\n• Added a note that should not be overridden and will be made final in a future release. Please file a feature request if you are currently overriding this method. (aosp/880713)\n• Fixed an issue with binary compatibility with previous releases of Fragments. (aosp/887877) (aosp/889834)\n• Target fragments are correctly cleared out when you pass to . (aosp/849969)\n• Fixed an issue where target Fragments were sometimes unavailable in or after . (b/122312935)\n• DialogFragment’s onDismiss() is now called before . (aosp/874133) (aosp/890734)\n• Fragment now implements and depends on the newly released SavedState library [aosp/824380]\n• A Kotlin property delegate has been added to retrieve ViewModels associated with the containing Activity [b/119050253]\n• The Kotlin property delegate has been expanded to take an optional lambda method for getting the , allowing you to pass in the parent Fragment or other custom with code such as [b/119050253]\n• now allows you to specify a theme such as [b/119054431]. This is a breaking change.\n• Added a method which returns a or throws an [b/120241368]\n• Added a method which returns a or throws an [b/112103783]\n• Fragments being restored from saved instance state will now always receive a non-null [b/119794496]\n• Removed Fragments no longer reuse their object if re-added [b/118880674]\n• FragmentScenario’s Kotlin extensions now let you use a lambda for Fragment construction as an alternative to passing in a instance. (aosp/812913)\n• Fixed an IllegalStateException when using nested Fragments on the back stack (b/119256498)\n• Fixed crash when using with a (aosp/820540)\n• Fixed an issue where target Fragments were not accessible after the Fragment was removed (aosp/807634)\n\nThis is the first release of the artifact and which is built on top of the androidx.test:core APIs. See the Fragment testing documentation for more details.\n• New FragmentScenario class for testing Fragments in isolation.\n• You can now set a on any to control how new Fragment instances are instantiated.\n• Added a new Kotlin property delegate for retrieving ViewModels from a Fragment.\n• Pending input events (such as clicks) are now canceled in a Fragment’s .\n• Significantly expanded the nullability annotations across the Fragment API surface.\n• Fix an issue which caused Fragment operations to fail from within LiveData (b/77944637)\n• Target Fragments cannot be accessed after a Fragment has been removed from the FragmentManager.\n• depends on instead of the correct ."
    },
    {
        "link": "https://geeksforgeeks.org/introduction-fragments-android",
        "document": "Fragment is a piece of an activity that enables a more modular activity design. A fragment encapsulates functionality so that it is easier to reuse within activities and layouts. Android devices exist in a variety of screen sizes and densities. Fragments simplify the reuse of components in different layouts and their logic. You can build single-pane layouts for handsets (phones) and multi-pane layouts for tablets. You can also use fragments also to support different layouts for landscape and portrait orientation on a smartphone. The below image shows the use cases of fragments through navigations.\n\nAndroid fragments have their own lifecycle very similar to an android activity.\n• onAttach() : The fragment instance is associated with an activity instance. The fragment and the activity is not fully initialized. Typically you get in this method a reference to the activity which uses the fragment for further initialization work.\n• onCreate() : The system calls this method when creating the fragment. You should initialize essential components of the fragment that you want to retain when the fragment is paused or stopped, then resumed.\n• onCreateView() : The system calls this callback when it’s time for the fragment to draw its user interface for the first time. To draw a UI for your fragment, you must return a View component from this method that is the root of your fragment’s layout. You can return null if the fragment does not provide a UI.\n• onActivityCreated() : The onActivityCreated() is called after the onCreateView() method when the host activity is created. Activity and fragment instance have been created as well as the view hierarchy of the activity. At this point, view can be accessed with the findViewById() method. example. In this method you can instantiate objects which require a Context object\n• onStart() : The onStart() method is called once the fragment gets visible.\n• onPause() : The system calls this method as the first indication that the user is leaving the fragment. This is usually where you should commit any changes that should be persisted beyond the current user session.\n• onStop() : Fragment going to be stopped by calling onStop()\n• onDestroyView() : Fragment view will destroy after call this method\n• onDestroy() : called to do final clean up of the fragment’s state but Not guaranteed to be called by the Android platform.\n• Single frame fragments : Single frame fragments are using for hand hold devices like mobiles, here we can show only one fragment as a view.\n• List fragments : fragments having special list view is called as list fragment\n• Fragments transaction : Using with fragment transaction. we can move one fragment to another fragment.\n• Resumed : The fragment is visible in the running activity.\n• Paused : Another activity is in the foreground and has focus, but the activity in which this fragment lives is still visible (the foreground activity is partially transparent or doesn’t cover the entire screen).\n• Stopped : The fragment is not visible. Either the host activity has been stopped or the fragment has been removed from the activity but added to the back stack. A stopped fragment is still alive (all state and member information is retained by the system). However, it is no longer visible to the user and will be killed if the activity is killed.\n\nTo define a new fragment we either extend the android.app.Fragment class or one of its subclasses.\n\nWhile for an dynamic activity we are set buttons for an interactive UI. If we are set after clicking the button the fragment should appear then we have to get help from Fragment Manager. It handle all the fragment in an activity. We need to set fragment transaction with the help of fragment manager and and begin transaction, and then simply replace the layout of the fragment with desired place. Below is the code that shows how to implement a fragment transaction."
    },
    {
        "link": "https://developer.android.com/guide/fragments/communicate",
        "document": "Stay organized with collections Save and categorize content based on your preferences.\n\nTo reuse fragments, build them as completely self-contained components that define their own layout and behavior. Once you define these reusable fragments, you can associate them with an activity and connect them with the application logic to realize the overall composite UI.\n\nTo properly react to user events and to share state information, you often need to have channels of communication between an activity and its fragments or between two or more fragments. To keep fragments self-contained, don't have fragments communicate directly with other fragments or with their host activity.\n\nThe library provides two options for communication: a shared and the Fragment Result API. The recommended option depends on the use case. To share persistent data with custom APIs, use a . For a one-time result with data that can be placed in a , use the Fragment Result API.\n\nThe following sections show you how to use and the Fragment Result API to communicate between your fragments and activities.\n\nis an ideal choice when you need to share data between multiple fragments or between fragments and their host activity. objects store and manage UI data. For more information about , see ViewModel overview.\n\nIn some cases, you might need to share data between fragments and their host activity. For example, you might want to toggle a global UI component based on an interaction within a fragment.\n\nConsider the following :\n\nIn this example, the stored data is wrapped in a class. is a lifecycle-aware observable data holder class. lets its value be changed. For more information about , see LiveData overview.\n\nBoth your fragment and its host activity can retrieve a shared instance of a with activity scope by passing the activity into the constructor. The handles instantiating the or retrieving it if it already exists. Both components can observe and modify this data.\n\nTwo or more fragments in the same activity often need to communicate with each other. For example, imagine one fragment that displays a list and another that lets the user apply various filters to the list. Implementing this case isn't trivial without the fragments communicating directly, but then they are no longer self-contained. Additionally, both fragments must handle the scenario where the other fragment is not yet created or visible.\n\nThese fragments can share a using their activity scope to handle this communication. By sharing the in this way, the fragments don't need to know about each other, and the activity doesn't need to do anything to facilitate the communication.\n\nThe following example shows how two fragments can use a shared to communicate:\n\nBoth fragments use their host activity as the scope for the . Because the fragments use the same scope, they receive the same instance of the , which enables them to communicate back and forth.\n\nWhen working with child fragments, your parent fragment and its child fragments might need to share data with each other. To share data between these fragments, use the parent fragment as the scope, as shown in the following example:\n\nIf you're using the Navigation library, you can also scope a to the lifecycle of a destination's . For example, the can be scoped to the for the :\n\nFor more information about scoping a to a , see Interact programmatically with the Navigation component.\n\nGet results using the Fragment Result API\n\nIn some cases, you might want to pass a one-time value between two fragments or between a fragment and its host activity. For example, you might have a fragment that reads QR codes, passing the data back to a previous fragment.\n\nIn Fragment version 1.3.0 and higher, each implements . This means that a can act as a central store for fragment results. This change lets components communicate with each other by setting fragment results and listening for those results, without requiring those components to have direct references to each other.\n\nTo pass data back to fragment A from fragment B, first set a result listener on fragment A, the fragment that receives the result. Call on fragment A's , as shown in the following example:\n\nIn fragment B, the fragment producing the result, set the result on the same by using the same . You can do so by using the API:\n\nFragment A then receives the result and executes the listener callback once the fragment is .\n\nYou can have only a single listener and result for a given key. If you call more than once for the same key, and if the listener is not , the system replaces any pending results with your updated result.\n\nIf you set a result without a corresponding listener to receive it, the result is stored in the until you set a listener with the same key. Once a listener receives a result and fires the callback, the result is cleared. This behavior has two major implications:\n• Fragments on the back stack do not receive results until they have been popped and are .\n• If a fragment listening for a result is when the result is set, the listener's callback then fires immediately.\n\nUse to test calls to and . Create a scenario for the fragment under test by using or , and then manually call the method that isn't being tested.\n\nTo test , create a scenario with the fragment that makes the call to . Next, call directly, and verify the result:\n\nTo test , create a scenario with the fragment that makes the call to . Next, call directly, and verify the result:\n\nTo pass a result from a child fragment to a parent, use from the parent fragment instead of when calling .\n\nThe child fragment sets the result on its . The parent then receives the result once the fragment is :\n\nTo receive a fragment result in the host activity, set a result listener on the fragment manager using ."
    },
    {
        "link": "https://stackoverflow.com/questions/65117300/how-to-use-interface-to-communicate-between-fragment-and-activity",
        "document": "I simply want to call a Fragment method from my MainActivity.\n\nSo I tried to use an Interface.\n\nIn my Fragment (TestFragment.java) I implement the interface and overrite the testMethod method.\n\nbut now I want to call this method from my MainActivity as soon as the onRewardedVideoCompleted get's called, but I'm not sure how to do it. I tried it like this:\n\nBut here I get an nullPointerException:\n\nHow do I call the method from my Interface in my MainActivity without getting an NullPointerException?"
    },
    {
        "link": "https://medium.com/@myofficework000/fragment-communications-847ab5772674",
        "document": "Android app development often involves building complex user interfaces with multiple fragments to enhance the user experience. However, as an app grows, managing communication and data sharing between these fragments becomes challenging. Fortunately, Android offers a robust mechanism known as “Fragment Communications using Interface” to address this issue. In this article, we will explore this powerful technique, its benefits, and how to implement it in your Android applications.\n\nIn Android, a fragment is a modular section of an activity, capable of hosting its own user interface and lifecycle. Fragments play a vital role in building flexible and reusable UI components. However, when fragments need to interact with each other or share data, they should not communicate directly, as this can lead to tightly coupled code and decreased maintainability.\n\nFragment communication using interfaces establishes a loosely coupled and more organized way for fragments to interact with each other. The primary idea is to define an interface within a fragment, which acts as a contract that other fragments must implement to exchange data and events seamlessly.\n\nBenefits of Using Interface for Fragment Communication\n\na. Decoupled Architecture: By employing interfaces, fragments can interact without directly knowing each other’s existence. This separation reduces dependency and makes code maintenance and changes more manageable.\n\nb. Reusability: The interface approach promotes reusability, allowing fragments to interact with different components implementing the same interface. This flexibility enables developers to use the same fragments in various parts of the app.\n\nc. Clean Code: Fragment communication through interfaces promotes a cleaner and more organized codebase. With clear contracts defined by interfaces, the code becomes easier to understand and maintain.\n\nTo implement fragment communication using interfaces, follow these steps:\n\nFragment communication using interfaces is an essential technique for achieving a well-structured and maintainable Android app. It allows fragments to interact efficiently without creating tight coupling between them. By defining clear contracts through interfaces, developers can enhance code reusability and maintain a clean, organized codebase. The implementation is straightforward and brings considerable benefits in terms of code maintainability and flexibility. Next time you build an Android app with multiple fragments, consider using interfaces for seamless communication between them."
    },
    {
        "link": "https://stackoverflow.com/questions/22212508/how-to-implement-listener-interface-in-fragment",
        "document": "I am trying to communicate between an activity and the fragment that sits on top of it, I want new data (image/text - retrieved from the db) to be passed into the frag every time an onclick occurs (onclick is in the activity). I made a simple interface to test (let me know if this is not suitable for images or if it is too slow or inefficient), and I am trying to have it included in my fragment so when an onclick occurs the fragment changes the image and the text.\n\nHere is the simple interface code:\n\nHere is the activity code:"
    },
    {
        "link": "https://anas-iqbal112.medium.com/communication-b-w-activity-and-fragment-using-interfaces-android-tutorial-787db9f49b66",
        "document": "Hello, In this post I’ll show you an easy and simple way to communicate between activity and fragment using interfaces, yeah that’s right. If you have already found a way to do it then that’s great, but if you are still looking for a way to do it then I guess the post will help, so let’s get started!\n\nBelow you can see a basic layout with for the first part, It’s an activity with a fragment inside, now the goal is to click on the button shown in the activity and do something on the fragment when it’s clicked.\n\nOk so now, we will make an interface inside activity and it will contain an abstract method, I’ll just share the snippets of relevant code, but you can find the complete project on the Github (link at the end of this post).\n\nAs you can see I just created an interface inside activity, it has an abstract method right now it doesn’t take any parameters but you can also add parameters and if you would like to send some data from activity to fragment. Now we will implement an interface on our fragment class.\n\nNow, I have implemented an interface in fragment class ,so now In my MainActivity class I can use an instance of fragment and call the function doSomething(). Now I am just gonna add a button on MainActivity and call the interface method when the button is clicked and it should change the text in fragment.\n\nPerfect! Now we will do the same but this time we will do something on activity when there is any event on fragment, so I’ll just create another fragment and declare an interface inside it.\n\nIn the code above you can see I just created an interface and then declared a variable of interface inside fragment and onAttach() method I am type casting the activity into the interface so we can trigger the interface method on fragment button click and then we will implement the interface in our activity class and do something on our activity when the button inside fragment is clicked.\n\nI guess that’s it, I just showed you a simple way to communicate between activity and fragment using interfaces, but sure you can use this same approach to communicate between adapter and activity or fragment. I hope it will help you in some way :)"
    }
]