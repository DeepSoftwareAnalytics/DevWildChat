[
    {
        "link": "https://openjscad.xyz/docs",
        "document": "JSCAD is an open source set of modular, browser and command line tools for creating parametric 2D and 3D designs with Javascript code. It provides a quick, precise and reproducible method for generating 3D models, and is especially useful for 3D printing applications.\n\nCheck out the Tutorials section for tips on getting started, and best practises.\n\nThere are different 'flavors' of JSCAD that you can use based on your needs\n• For browser-based modelling (no install) simply go to https://openjscad.xyz/\n• For the command line interface, install as part of a project using NPM. See JSCAD Command Line Interface at NPM\n• For other usage options, the first step is to visit JSCAD on GitHub\n• Review the available list of packages at GitHub\n• Packages are also available on NPM under the '@jscad' name\n\nOr chat with other users\n\nHUGE THANKS and SHOUTOUT to nodeBB for hosting our (awesome) forum for free ! Thanks a lot !\n\nThe various JSCAD packages and all source code are part of the JSCAD Organization, and maintained by a group of volunteers. We welcome and encourage anyone to pitch in but please take a moment to read the following guidelines.\n• If you want to submit a bug report please make sure to follow the Reporting Issues guide. Bug reports are accepted as Issues via GitHub.\n• If you want to submit a change or a patch, please read the Contributing Guide. New contributions are accepted as Pull Requests via GitHub.\n• We only accept bug reports and pull requests on GitHub.\n• If you have a question about how to use JSCAD, then please start a conversation at the JSCAD User Group. You might find the answer in the JSCAD User Guide.\n• If you have a change or new feature in mind, please start a conversation with the Core Developers and start contributing changes.\n\nA BIG THANKS to all the people who have already contributed changes to the JSCAD project!\n\nThank you to all our backers! 🙏 [Become a backer]\n\nThis project has some awesome sponsors! [Become a sponsor] Your logo will show up here with a link to your website.\n\nThe MIT License (MIT) (unless specified otherwise)\n\nThat's all for now,"
    },
    {
        "link": "https://github.com/jscad/OpenJSCAD.org",
        "document": "There are many ways to use JSCAD:\n\nAn online version, self hostable web based ui, as CLI (command-line interface) for server-side computations with Node.js, as well as an experimental desktop app or individual Node.js packages!!\n\nThis repository is a monorepo (container of multiple packages and tools) maintained with Lerna\n\nThere are different 'flavors' of JSCAD that you can use based on your needs\n• web: online (no install) simply go to https://openjscad.xyz/\n• web: self hosted: can be found here\n• cli: command line interface : can be found here\n• desktop app: pre pre alpha work in progress can be found here!\n• node.js: custom mix and match of packages\n• all the packages are available on NPM under the '@jscad' name\n\nPlease see here for details\n\nPlease see here for details\n\nPlease see here for details\n\nFrom version 1.0.0 onwards, almost all the individual parts of this project are available directly as scoped NPM packages, and can be used independently from the main repository. The full list of these is available here and here\n\nOne example of what can be achieved with this can be found here This means you can :\n• easily create your own renderer for the 3D and 2D geometries\n• use the specific packages as part of Node.js or Browserify projects\n• cherry pick formats you want to use for input/output without needing the dependencies of all packages\n\nThis will be expanded upon in the future, and is the backbone of the newer, modular JSCAD project.\n\nThe various JSCAD packages and all source code are part of the JSCAD Organization, and maintained by a group of volunteers. We welcome and encourage anyone to pitch in but please take a moment to read the following guidelines.\n• If you want to submit a bug report please make sure to follow the Reporting Issues guide. Bug reports are accepted as Issues via GitHub.\n• If you want to submit a change or a patch, please read the Contributing Guide. New contributions are accepted as Pull Requests via GitHub.\n• We only accept bug reports and pull requests on GitHub.\n• If you have a question about how to use JSCAD, then please start a conversation at the JSCAD User Group. You might find the answer in the JSCAD User Guide.\n• If you have a change or new feature in mind, please start a conversation with the Core Developers and start contributing changes.\n\nSmall Note: If editing this README, please conform to the standard-readme specification.\n\nA BIG THANKS to all the people who have already contributed to the JSCAD project!\n\nOr chat with other users\n\nHUGE THANKS and SHOUTOUT to nodeBB for hosting our (awesome) forum for free ! Thanks a lot !\n\nJSCAD and all sub components are built upon great open source packages, and contributions.\n\nand many more!\n\nThank you to all our backers! 🙏 [Become a backer]\n\nThis project has some awesome sponsors! [Become a sponsor] Your logo will show up here with a link to your website.\n\nThe MIT License (MIT) (unless specified otherwise)\n• OpenSCAD.net, another place of inspiration, where the OpenSCAD translator was adapted from\n\nThat's all for now,"
    },
    {
        "link": "https://openjscad.xyz/docs/tutorial-01_gettingStarted.html",
        "document": "The JSCAD tool allows you to write simple javascript code to produce 3D models. The output is precise, reproducible and easily configurable. Parametric modelling is made simple and easy, allowing you to produce and share re-usable scripts that can adjust a variety of needs without touching the code. This makes it an excellent option for 3D printing applications.\n\nThere are three options for using JSCAD. It can be run in a browser, in a stand-alone application, or as a command-line tool. Most users start with the in-browser application, which can be found at https://openjscad.xyz/. To explore the other options, you can get started by visiting the source code in GitHub, and checking out the code.\n\nIn all usage options, you start with a javascript text file that programmatically describes your model. The file (or even group of files) is handed off to JSCAD for processing. The model can be outputted as STL, AMF, DXF, JSON and X3D formats.\n\nYour JSCAD Project typically starts with creating a text file in the editor of your choice. Save it with a .js file extension, and when you are ready, drag it onto the JSCAD modeling window, or select it with the \"Load a JSCAD Project\" file dialog.\n\nThe simplest file that will render a cube in JSCAD looks like this:\n\nCode must be imported using require, but there are several different syntaxes for doing this:\n\nClean, readable code is one of the most important aspects of a useful design. In that respect, it can often be useful to break your code into simple methods that do part of the work for your design:\n\nA valuable practise when creating models is to store all but the most trivial values as parameters in the code, rather than using the numerical values directly. This can be done by storing them in constants in your file...\n\n... or, even better, to include runtime parameters in your design. This is done using the getParameterDefinitions method:\n\nIn JSCAD code, you will see a number of conventions that may be useful in your code..."
    },
    {
        "link": "https://en.wikibooks.org/wiki/OpenJSCAD_User_Guide",
        "document": "Welcome to OpenJSCAD User and Programming Guide.\n\nJust for sake of providing context, OpenJSCAD.org is built on OpenJsCad (Github), which itself was inspired by OpenSCAD.org, and essentially provides a programmers approach to develop 3D models. In particular, this enhancement is tuned towards creating precise models for 3D printing.\n\nOpenJSCAD programmers using OpenSCAD may welcome\n• ability to use JavaScript programming concepts and libraries\n• ability to create and manipulate 3D shapes, as well as 2D shapes\n• support for OpenSCAD source-code (approximately 80% of all functions)\n• additional functions to ease the transition to OpenJSCAD\n\n\n\n Read on to find about more about OpenJSCAD.\n\nThere is also a Quick Reference.\n\nOpenJSCAD can be used immediately by visiting the project website at openjscad.xyz or openjscad.com.\n\nOpenJSCAD presents a page which shows a 3D viewer, as well as an editor:\n\nFrom here, you can\n• edit online using the built-in editor, or\n\nYou can start editing by dragging a file or a folder to the area indicated.\n\nIn order to use your favorite editor, make sure Auto Reload is selected. Any changes to the files will be reloaded automatically.\n\nNote: Each browser (Firefox, Chrome, IE, etc) supports slightly different functionality. If you are having problems then please try another browser.\n\nOpenJSCAD can be installed locally via GitHub or NPM. You can then use your browser like a locally installed application by opening 'index.html'. To find the location of your index.html you might want to find out where your OpenJSCAD resides. E.g. if OpenJSCAD was installed in /usr/local/lib/node_modules/@jscad/openjscad then\n\nwill start your webbrowser (Example script works on MacOs)\n\nOpenJSCAD can be easily installed using Node Version Manager (NVM)\n\nNote: A LTS version of Node.js > 6.0.0 is required. We test OpenJSCAD using both Node.js version 6.x.x & 7.x.x.\n\nNow OpenJSCAD can be downloaded and installed by:\n\nOpenJSCAD can be easily installed from GitHub as well. This is the preferred installation if creating a website for online use.\n\nNOTE: You might need configuration changes to allow access to the some of the contents (examples etc).\n\nOnce installing locally, OpenJSCAD can be accessed by opening `index.html` with your browser. You can drag and drop a file or a folder to the browser.\n\nNote: Chrome and other browsers do not support drag and drop when offline.\n\nYou can drag and drop any of the examples, as well as other designs or files.\n\nAdditional you can import OpenSCAD (.scad), STL ASCII or Binary (.stl) and AMF (.amf) files, and create .jscad, .stl (ASCII or Binary), dxf or .amf:\n\nSee also how to pass variables from the CLI to main().\n\nCurrently following languages and file-formats are supported:\n\nWhen you drag & drop files, the language or format is set according the file extension (.jscad, etc). When you start to edit directly using your browser, the default language is JSCAD.\n\nYou can share designs with other people by providing creating special URL which combines OpenJSCAD and Design.\n\nIn general, designs are written using the JavaScript language. Training and help about JavaScript can be found online.\n\nCreating a new design starts by writing simple scripts which call CSG functions, and other special functions, as provided by OpenJSCAD. OpenJSCAD executes the script, and renders the 3D design for viewing.\n\nOpenJSCAD adheres to specific standards for passing parameters to functions. But most parameters are optional as default values are provided.\n\nWhen 3D vectors are required, parameters can be passed as an array. If a scalar (single value) is passed for a parameter which expects a 3D vector, the scalar is used for the x, y and z values. In other words: radius: 1 will give radius: [1,1,1].\n\nAn OpenJSCAD script must have at least one function defined, the main() function, which has to return a CSG object, or an array of non-intersecting CSG objects.\n\nor like this:\n\nBut this does work.\n\nBecause all CSG creations, like 3D primitives, have to occur within functions which are called by the main() function.\n\nAll rounded solids have a resolution parameter which controls tesselation. If resolution is set to 8, then 8 polygons per 360 degree of revolution are used. Beware that rendering time will increase dramatically when increasing the resolution. For a sphere, the number of polygons increases quadratically with the resolution used. If the resolution parameter is omitted, the following two global defaults are used\n\nThe former is used for 2D curves (circle, cylinder), the latter for 3D curves (sphere, 3D expand).\n\nOpenSCAD like functions support the fn parameter, which is the number of segments to approximate a sphere (default 32, total polygons per sphere fn*fn).\n\nCube or rather boxes can be created like this:\n\nSpheres can be created like this:\n\nIn case of ``type: 'geodesic'`` the fn tries to match the non-geodesic fn, yet, actually changes in steps of 6 (e.g. fn=6..11 is the same), fn = 1 reveals the base form: the icosahedron.\n\nNote: Creating spheres with high resolution and then operating with them, e.g. union(), intersection(), etc, slows down rendering / construction procedure due the large amount of polygons.\n\nCylinders and cones can be created like this:\n\nwhereas fn is the amount of segments to approximate the circular profile of the cylinder (default 32).\n\nA torus is defined as such:\n\nCreate a polyhedron with a list of points and a list of triangles or polygons. The point list is all the vertexes of the shape, the triangle list is how the points relates to the surfaces of the polyhedron:\n\nAdditionally you can also define `polygons: [ [0,1,4,5], [..] ]` too, not just `triangles:`.\n\nYou can also create a polyhedron at a more low-level:\n\n``vector_text(x,y,string)`` and ``vector_char(x,y,char)`` give you line segments of a text or character rendered in vector:\n\nAlso multiple-line with \"\n\n\" is supported, for now just left-align is supported. If you want to dive more into the details, you can request a single character:\n\nIt center() and .center() helps you to compose a symmetric whose complete size you don't know when composing, e.g. from parametric design.\n\nmultiple objects can be added, also arrays.\n\nmultiple objects can be intersected, also arrays.\n\nNote intersection() (openscad like) vs intersect() (function vs CSG objects' built in methods)\n\nmultiple objects can be differentiated (subtracted) from the first element, also arrays.\n\nA path is simply a series of points, connected by lines. A path can be open or closed (an additional line is drawn between the first and last point). 2D paths are supported through the CSG.Path2D class. The difference between a 2D Path and a 2D CAG is that a path is a 'thin' line, whereas a CAG is an enclosed area.\n\nPaths can be constructed either by giving the constructor an array of 2D coordinates, or through the various CSG.Path2D member functions, which include:\n• arc(endpoint, options): return a circular or ellipsoid curved path (see example below for usage).\n• appendPoint([x,y]): create & return a new Path2D containing the callee's points followed by the given point.\n• appendPoints([[x,y],...]): create & return a new Path2D containing the callee's points followed by the given points. [Note: as of 2016/08/13, this method also modifies the callee; this is probably a bug and might be changed in the future; see issue:165]\n• appendBezier([[x,y],...], options): create & return a new Path2D containing the callee's points followed by a Bezier curve ending at the last point given; all but the last point given are the control points of the Bezier; a null initial control point means use the last two points of the callee as control points for the new Bezier curve. options can specify {resolution: <NN>}.\n\nPaths can be concatenated with .concat(), the result is a new path.\n\nA path can be converted to a CAG in two ways:\n• expandToCAG(pathradius, resolution) traces the path with a circle, in effect making the path's line segments thick.\n• innerToCAG() creates a CAG bounded by the path. The path should be a closed path.\n\nCreating a 3D solid is currently supported by the rectangularExtrude() function. This creates a 3D shape by following the path with a 2D rectangle (upright, perpendicular to the path direction):\n\nYou can convex hull multiple 2D polygons (e.g. circle(), square(), polygon()) together.\n\nChained hulling is a variant of hull on multiple 2D forms, essentially sequential hulling and then union those, based on an idea by Whosa whatsis:\n\nExtruding 2D shapes into 3D, given height, twist (degrees), and slices (if twist is made):\n\nLinear extrusion of 2D shape, with optional twist. The 2d shape is placed in in z=0 plane and extruded into direction <offset> (a CSG.Vector3D). The final face is rotated <twistangle> degrees. Rotation is done around the origin of the 2d shape (i.e. x=0, y=0) twiststeps determines the resolution of the twist (should be >= 1), returns a CSG object:\n\nExtrude the path by following it with a rectangle (upright, perpendicular to the path direction), returns a CSG solid.\n\nSimplified (openscad like, even though OpenSCAD doesn't provide this) via rectangular_extrude(), where as\n• closed: whether path is closed or not (default: false)\n\nor more low-level via rectangularExtrude(), with following unnamed variables:\n• width of the extrusion, in the z=0 plane\n• height of the extrusion in the z direction\n• resolution, number of segments per 360 degrees for the curve in a corner\n• roundEnds: if true, the ends of the polygon will be rounded, otherwise they will be flat\n\nAdditional also rotate_extrude() is available:\n\nYou can essentially extrude any 2D polygon (circle, square or polygon).\n\nThe 'property' property of a solid can be used to store metadata for the object, for example the coordinate of a specific point of interest of the solid. Whenever the object is transformed (i.e. rotated, scaled or translated), the properties are transformed with it. So the property will keep pointing to the same point of interest even after several transformations have been applied to the solid.\n\nProperties can have any type, but only the properties of classes supporting a 'transform' method will actually be transformed. This includes CSG.Vector3D, CSG.Plane and CSG.Connector. In particular CSG.Connector properties (see below) can be very useful: these can be used to attach a solid to another solid at a predetermined location regardless of the current orientation.\n\nIt's even possible to include a CSG solid as a property of another solid. This could be used for example to define the cutout cylinders to create matching screw holes for an object. Those 'solid properties' get the same transformations as the owning solid but they will not be visible in the result of CSG operations such as union().\n\nOther kind of properties (for example, strings) will still be included in the properties of the transformed solid, but the properties will not get any transformation when the owning solid is transformed.\n\nAll primitive solids have some predefined properties, such as the center point of a sphere (TODO: document).\n\nThe solid resulting from CSG operations (union(), subtract(), intersect()) will get the merged properties of both source solids. If identically named properties exist, only one of them will be kept.\n\nThe CSG.Connector class is intended to facilitate attaching two solids to each other at a predetermined location and orientation. For example suppose we have a CSG solid depicting a servo motor and a solid of a servo arm: by defining a Connector property for each of them, we can easily attach the servo arm to the servo motor at the correct position (i.e. the motor shaft) and orientation (i.e. arm perpendicular to the shaft) even if we don't know their current position and orientation in 3D space.\n\nIn other words Connector give us the freedom to rotate and translate objects at will without the need to keep track of their positions and boundaries. And if a third party library exposes connectors for its solids, the user of the library does not have to know the actual dimensions or shapes, only the names of the connector properties.\n• axis: a CSG.Vector3D defining the direction vector of the connection (in the case of the servo motor example it would point in the direction of the shaft)\n• normal: a CSG.Vector3D direction vector somewhat perpendicular to axis; this defines the \"12 o'clock\" orientation of the connection.\n\nWhen connecting two connectors, the solid is transformed such that the point properties will be identical, the axis properties will have the same direction (or opposite direction if mirror == true), and the normals match as much as possible.\n\nConnectors can be connected by means of two methods: A CSG solid's connectTo() function transforms a solid such that two connectors become connected. Alternatively we can use a connector's getTransformationTo() method to obtain a transformation matrix which would connect the connectors. This can be used if we need to apply the same transform to multiple solids.\n\nThe getBounds() function can be used to retrieve the bounding box of an object, returning an array with two CSG.Vector3Ds specifying the minimum X,Y,Z coordinates and the maximum X,Y,Z coordinates.\n\nThe lieFlat() function lays an object onto the Z surface, in such a way that the Z-height is minimized and the object is centered around the Z axis. This can be useful for CNC milling, allowing an object to be transform into the space of the stock material during milling. Or for 3D printing: it is laid in such a way that it can be printed with minimal number of layers. Instead of the lieFlat() function, the getTransformationToFlatLying() function can be used, which returns a CSG.Matrix4x4 for the transformation.\n\nWhereas the named colors are case-insensitive, e.g. 'RED' is the same as 'red'.\n\nusing CSG objects' built in methods (r, g, b must be between 0 and 1, not 0 and 255):\n\nSee the Extended Color Keywords for all available colors.\n\nNote: There are some OpenGL Transparency Limitations, e.g. and depending on the order of colors, you might not see through otherwise partially transparent objects.\n\nFollowing functions to convert between color spaces:\n\nSee the Tor (multi-color) for an example.\n\nprints out on the JavaScript console: a=1, b=2\n\nJavascript provides several functions through the Math library. In addition, the following OpenSCAD compatible functions are available:\n\nAn OpenSCAD to OpenJSCAD translator is included, however the following features aren't working yet:\n• List Comprehension such as: list = [ for (i = [2, 3, 5, 7, 11]) i * i ];\n\nYou can edit OpenSCAD source in the built-in editor, just make sure the first line says:\n\nthen the source-code is shown with OpenSCAD syntax.\n\nFurther CAD languages support might arrive at a later time.\n\nIn order to translate your OpenSCAD into native OpenJSCAD code, consider this comparison.\n\nEssentially whenever named arguments in OpenSCAD appear func(a=1), translate it into func({a:1}), for example:\n\nModels can have interactive parameters, allowing users to change values via familiar forms, i.e. typing in numbers, sliding bars, pulling down menus, etc. This allows the user to change values and create any number of possible combinations, allowing the model to become dynamic in nature. Any number of custom designs can be created, which can then be down loaded in any supported format.\n\nInteractive parameters are possible by adding a specific function called getParameterDefinitions(). This function can be added anywhere in to your JSCAD script, but must return an array of parameter definitions.\n\nThe parameter definitions are used to create a set of fields which the user can change, i.e. options. The values of the fields are supplied to the main() function of your JSCAD script. For example, the value of the 'width' parameter is supplied as the 'params.width' attribute, and so on.\n\nAll the common HTML5 field types are available as interactive parameters. This includes checkbox (boolean), color, date, email, float, int, number, password, slider, text and url. As well as two special parameter types for pull down choices, and grouping parameters.\n\nA minimum parameter specification contains only 'name' and 'type'. However, a complete parameter specification should have a 'caption' and 'initial' value. In addition, there are 'min', 'max', 'step', 'checked', 'size, 'maxlength', and 'placeholder' which are relevant to specific parameter types. Just keep try different combinations to get a nice parameter specification. Here's an good example.\n\nIn addition, there is the 'choice' type which creates a drop down list of choices for the user. The choices are provided by specifying the 'values' and 'captions'. The chosen value is passed into the main() function of the model.\n\nThere are plenty of examples of \"Interactive\" parameters available at openjscad.xyz. See the Quick Reference for more information about the available parameter types, and browser support.\n\nThe command line interface, ``openjscad``, can pass parameters for the interactive designs. Either by\n\nAfter creating a few designs using OpenJSCAD, common functions and parts will become useful. The include() function allows one OpenJSCAD script to include another OpenJSCAD script.\n\nNote: the main must contain the call: myLib()\n\nA design for a Remote Control Holder that uses a class \"Box\" which is included from \"Box.jscad\". see also https://github.com/BITPlan/docker-openjscad/tree/master/workspace/RCHolder\n\nSee Platonics Example with a recursive use of include(). Yet, it's a rather bad example of not localize the function names. A clear writing style-guide will follow how an OpenJSCAD library should look like.\n• web-online remote (e.g. https://openjscad.xyz/): given you drag & dropped the files, or they are available on the web-server (e.g. the examples)\n• web-online local (e.g. http://localhost/OpenJSCAD/): given you drag & dropped the files, or they are available on the local web-server\n• web-offline local (e.g. file://..../OpenJSCAD/index.html): given you drag & dropped the files\n• command-line interface (CLI): given they are locally available in the filesystem\n\nExample of a setup with drag & dropped files:\n\nAssuming you want to create a larger OpenJSCAD project, you might use include() to split up the functionality:\n\nNote: The file named main.jscad must be present, and must contain the \"function main()\" declaration.\n\nDepending on your browser and your local setup, following applies:\n• Firefox (Version 19+): drag & drop all jscad files of the project to the drag & drop zone\n• Opera: not yet working (WebGL support not yet available)\n• IE10: not yet working (WebGL support not yet available)\n• Constructive Solid Geometry (CSG) Library, is a modelling technique that uses Boolean operations like union and intersection to combine 3D solids."
    },
    {
        "link": "https://github.com/jscad/OpenJSCAD.org/wiki/JSCAD-V3",
        "document": "These are thoughts about V3 of JSCAD, which includes API breaking changes across several core libraries. Some of these thoughts may become impractical or undesirable, so consider everything in flux and changing.\n\nIn addition, CLI / WEB applications will require changes in order to support the core library changes.\n• switch to Rollup (replace browserify) to package libraries with UMD / ES6 import bindings\n• NOTE: web UI cannot use Rollup due to webworkify / most libraries\n• NEW add dependency on array-utils (and drop duplicate functions)\n• Rework vectorChar() and vectorText() to return array of path2 objects #1067\n• Rework options to vectorChar() and vectorText() to align with the general API\n• Allow empty / sparse lists in all operations\n• Allow empty geometries in all operations\n• Unify offset and expand, and add a new parameter to control\n• Correct parameter names which are not camelCase\n• NEW union / intersect / subtract for paths (See http://tavmjong.free.fr/INKSCAPE/MANUAL/html/Paths-Combining.html)\n• NEW Connectors\n• re-implement as supported geometry (anonymous object form)\n• created from...\n• three points (of plane), and perpendicular\n• closest point on GEOMETRY to POINT, and perpendicular\n• adding 'properties' (name, id, etc) is possible\n• NEW Curves (See http://verbnurbs.com/ for inspiration)\n• NEW simplify for path2/path3/geom2/geom3 (see https://github.com/mourner/simplify-js and ??)\n• NEW path3 geometry for support of 3D arcs, etc\n• NEW functionality for converting external formats to JSCAD (separate functionality from Core)\n• Package all IO libraries as UMD and ES modules\n\nNote: AMF and SCAD packages will be kept but not included until someone ports the code to V3.\n• NEW 'use' function to include / evaluate a single source file (remote loading)\n• Rework evaluation to support async functions, both cli and web\n• Rework to use NEW IO functionality\n• NEW conversion and rendering of slice\n• Prepare to host both V2 and V3"
    },
    {
        "link": "https://instructables.com/Learn-How-to-Use-Customizable-3D-Models-With-OpenS",
        "document": "Introduction: Learn How to Use Customizable 3D Models With OpenSCAD More by the author: If you know how to use a Computer-Aided Design (CAD) software, 3D printing is an extremely powerful and versatile tool for DIY projects. However, even if you do not have the time or motivation to learn CAD, there is still a way to make your own, custom fit models with very little efforts required: The customizable models. Customizable models are 3D models designed with the open source software OpenSCAD. Contrarily to conventional CAD software in which you interact with an object in a virtual 3D space to refine the shape you want to make, OpenSCAD uses a programing language to \"code\" the shape of the object. While this approach is more time consuming and less user-friendly for the designer, the main advantage is the possibility to define variables to describe the main characteristics of the model. Once the code is finished, anyone can easily customize the object by changing the values of the parameters and recompiling the code. Since the release of OpenScad in 2010, thousands of contributors have generated a large amount of open-source customizable models. Those models are available in particular in Thingiverse that has a special function to categorize and search for them. In this tutorial i will show you how to look for customizable models, how to change their parameters and recompile the code to generate your own custom 3D models, and i will provide you with a few links and advices if you want to design models on you own.\n\nMost 3D model databases include customizable models. You can usually find them using the keywords \"parametric\" or \"customizable\". However Thingiverse is the most convenient database to use as it has a specific criteria in its research function called \"customizable\" to select only OpenScad parametric designs. In either cases, a customizable 3D file is characterized by the format \".scad\". Once you have found the file you want to personalize you have 3 main options to generate the printable STL file:\n• Use the Customized app included with thingiverse (only from thingiverse database) Those 3 options each have their ups and downs. In particular if you use a customizable files including letters, the font and the letter arrangement will vary depending on the option you chose. Installing OpenScad locally can allow you to select you choice of font and use special symbols. The customizer from thingiverse may not show correctly on all net browsers but some .scad files are coded specifically to show a user interface in this app. In the following steps i will illustrate how to use each of those options.\n\nIn this part i will show you how to use the online OpenScad app to generate your own STL file: 1) Find the \".scad\" file from your favorite database and download it 2) Open the file with the Notepad and copy the entirety of the file 3) open the app in your net browser from the address: https://openscad.cloud/openscad/ 4) Paste the whole file in the prompt area 5) Customize the variables. The variables are generally located at the beginning of the code and may or may not be accompanied by a commentary to explicit their function (in this case i did not comment i guess i was lazy that day...) Don't forget to read in details the description of the part where those details are usually written. 5b) You can also access the variables by opening the Customizer tab. Some codes are meant to be used that way and the variables will be difficult to localize in the bulk of the text. In reverse some variables including free prompt text will not appear here if it was not designed specially for the customizer. Specific selection option may also show in this tab so always check it before tweaking the parameters. 6) After modifying the parameters, generate the file by using the play button of the generate button in the customizer tab and check the geometry of the part generated in the visualization area. You can rotate the view with the left click, zoom in and out with the roll and translate the view with the right click. 7) once the part is to your liking download the 3D file using the Export STL button. You are now ready to go to your usual slicer.\n\nStep 3: Using OpenScad Locally on Your Computer In this part i will show you how to install OpenScad on your computer and use it to generate a file: 1) Download the app from the OpenScad website (https://openscad.org/) and install it 2) Find the \".scad\" file from your favorite database, download it and open it with OpenScad 3) Customize the variables. The variables are generally located at the beginning of the code and may or may not be accompanied by a commentary to explicit their function, Don't forget to read in details the description of the part where those details are usually written. Some files designed to be used in the customizer may have their variable \"hidden\" deep in the code. If you cannot identify them use the online OpenScad and refer to the previous step. 4) After modifying the parameters, you can preview the part using F5 or the preview button and check the geometry of the part in the visualization area. You can rotate the view with the left click, zoom in and out with the roll and translate the view with the right click. 5) When the geometry of the part is conform to what you want, render the part using F6 or the render button. Then save the file as STL using F7 or the dedicated button. You are now ready to go to your usual slicer.\n\nIn this part i will show you how to use Thingiverse's customizer to make you design. For this option you need a MakerBot account. 1) Go to Thingiverse and find the part you want to customize 2) Open the part in Customizer and change the parameters in the left area. The part will automatically be refresh in the visualization area. 3) When satisfied with your custom part generate the STL file using the \"create thing\" button. 4) Give a name to your file and select whether you want your newly created file to be published or not. 5) To find the STL file go to the contextual menu close to your profile image in the top right corner and go to \"My designs\". Your file will appear in the list and can be downloaded like any other Thingiverse file."
    },
    {
        "link": "https://mikekasberg.com/blog/2023/03/22/3d-printing-with-openscad.html",
        "document": "As I mentioned in my last blog post, I’ve been getting into 3D printing recently. The deeper I get into the 3D printing world, the more I become interested in designing my own 3D models. It’s cool to print a model that someone else created, but for me it’s way more fun to print something that I created. It scratches my itch to “build something out of nothing” in a very physical way.\n\nThere are a wide variety of 3D modeling applications, and I experimented with several as I learned more about 3D printing. Some are CAD programs that are ideal for designing precise parts, others come with more artistic features for designing life-like models. For a while I was using Tinkercad, and I still think that’s a great place to start for anyone new to 3D printing. But more recently, I’ve developed a strong affection for OpenSCAD. OpenSCAD is CAD-oriented software that describes itself as a “3D compiler”. Rather than using an interactive modeling UI, you write a script that produces a 3D model. As such, it’s well-suited to models that contain patterns and geometric shapes, since these are relatively easy to produce with a script compared to a UI. OpenSCAD is also well-suited to “parametric” and open source models – the model is just a text file, so you can even use git for version control! As someone with a programming background, I found it very natural and fun to work with.\n\nIf you’re curious about OpenSCAD, I’d encourage you to give it a try. The cheat sheet has everything you’ll need to get started. There are commands that generate geometric primitives (like cubes and spheres) and commands that add or subtract one shape from another. Once you know about six commands (translate, difference, rotate, and a few primitives), you already know enough to build some really intricate models. There aren’t many commands to learn, and once you get a feel for how OpenSCAD works it’s really intuitive!\n\nThe first project I modeled with OpenSCAD with it made me fall in love with it. I wanted to add a few 3D printed decorations around my desk, and I though a coaster would be a good place to start. A 3D printed coaster is a useful item that’s also simple enough that I could design it myself from sctatch. I came up with an idea to use a tiled hexagonal pattern, and the project seemed like a great fit for OpenSCAD. It was simple enough to be an achievable goal for someone new to the program, but hard enough to be interesting. My completed Customizable Hex Coaster model is available on Printables (and GitHub) if you want to check it out for yourself.\n\nBuilding the model in OpenSCAD was a lot of fun! I was a little surprised that I ended up using a decent amount of high-school level trigonometry to make everything fit right, and while that might sound daunting I actually really enjoyed it. It felt a lot like solving a crossword or sudoku, using a muscle I hadn’t exercised in a while. And it was cool to see a physical application of trig. After doing trig with hexagons for a couple hours, they’ve become my new favorite shape! Here are a few interesting properties I discovered along the way:\n• The length of an edge of a hexagon is exactly half the length of it’s longest centerline\n• You can break a hexagon down into 6 equilateral triangles, and those can be further broken down into 30-60-90 right triangles\n• You can use trig to find the proportion of a hexagon’s height to its width, or length of an edge to height\n\nFor me, there’s something very satisfying about getting the numbers exactly right so that you can create a repeating pattern of hexagon tiles. It’s trickier than you might initially expect! For example, here are some of the challenges I faced along the way:\n• Figuring out how to make a hexagon in OpenSCAD\n• Calculating the height of a hexagon from its width\n• Accounting for the thickness of the walls in the pattern\n• Figuring out how to tile a hexagon pattern within a hexagon\n\nNotably, I didn’t Google for the solution to any of these, which was refreshing – I had all the tools I needed to figure this out between some basic trig knowledge and the OpenSCAD cheat sheet.\n\nBuilding the hexagon coaster was fun, and it was a great intro to OpenSCAD. I have the coaster sitting on my desk, and I use it almost every day! But I have some even cooler projects coming down the pipeline. I’ve been experimenting more with OpenSCAD, and I’m working on an idea to incoporate real world data into my OpenSCAD scripts. So hopefully I’ll have more cool projects to share in a couple months!"
    },
    {
        "link": "https://amazon.com/Technical-Modeling-OpenSCAD-Tam-Hanna/dp/1907920994",
        "document": "Enter the characters you see below\n\nSorry, we just need to make sure you're not a robot. For best results, please make sure your browser is accepting cookies."
    },
    {
        "link": "https://makezine.com/projects/3d-models-with-openscad",
        "document": "I wrote recently about the excitement surrounding Clifford Wolf’s OpenSCAD program. OpenSCAD is free software. It uses a cool keep-it-super-simple approach to 3D modeling, eliminating the resource-hungry what-you-see-is-what-you-get (WYSIWYG) editing environment favored by most 3D modeling packages, and replacing it with a text-based scripting environment in which models are programmed, instead of sculpted. Basically, you write a script describing your model’s shape and then compile it to produce the actual model, which is then rendered onscreen and can be exported to STL format for 3D printing or other purposes.\n\nOpenSCAD has two powerful features to facilitate this programming process. The first is support for so-called “constructive solid geometry” (CSG) modeling, in which complex forms are built up as intersections, unions, and differences of simple primary shapes like boxes, cylinders, cones, and ellipsoids. If you’ve ever used the ray-tracing program POV-Ray before, this idea will be familiar to you.\n\nThe second, less-well-publicized (but perhaps equally powerful) feature of OpenSCAD is “DXF extrusion,” in which OpenSCAD will import a 2D drawing in AutoCAD’s popular drawing exchange format (DXF) and “extrude” it into the third dimension. OpenSCAD has support for linear extrusion, in which the resulting part has straight vertical sides, and also rotating extrusion, which results in a part with helical sides. Since a large number of models for rapid prototyping are simple extruded profiles, I expect this feature to see a lot of use.\n\nIn this tutorial, I’m going to show you how to use OpenSCAD to produce a simple 3D model by extruding a part profile produced in normal drawing software. I use Adobe Illustrator CS3 because I have access to it and am familiar with its interface, but the popular open source drawing program InkScape will read and write DXF files natively, and there’s no reason why it couldn’t serve just as well if you prefer it. There are a number of other free and low-cost programs that will export DXF files. OpenSCAD’s developer mentions QCAD, which, as of this writing, is available from its developer RibbonSoft for €24.\n\nThe part I’m making is one of 12 solid pentomino puzzle pieces based on the animals of the Chinese zodiac–in this case, the rabbit or “Z” pentomino. The designs are based on those of Japanese schoolteacher Sabu Oguro as published on p. 40 of Jerry Slocum and Jack Botermans’ 1986 book Puzzles Old & New: How to Make and Solve Them, an image from which is reproduced at the top of this article. My original DXF files and the extruded 3D STL files are freely available for download at Thingiverse. Becky Stern printed all the real-world models shown in this article on her MakerBot Cupcake 3D printer, and photographed them for this tutorial."
    }
]