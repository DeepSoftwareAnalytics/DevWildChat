[
    {
        "link": "https://en.cppreference.com/w/cpp/chrono",
        "document": "C++ includes support for two types of time manipulation:\n• The chrono library, a flexible collection of types that track time with varying degrees of precision (e.g., ).\n\nThe library defines several main types as well as utility functions and common typedefs:\n\nA clock consists of a starting point (or epoch) and a tick rate. For example, a clock may have an epoch of January 1, 1970 and tick every second. C++ defines several clock types:\n\nA time point is a duration of time that has passed since the epoch of a specific clock.\n\nA duration consists of a span of time, defined as some number of ticks of some time unit. For example, \"42 seconds\" could be represented by a duration consisting of 42 ticks of a 1-second time unit.\n\nsplits a duration representing time elapsed since midnight into hours, minutes, seconds, and fractional seconds, as applicable. It is primarily a formatting tool.\n\ntag class indicating the last day or weekday in a month \n\n represents a day of the week in the Gregorian calendar \n\n represents the last of a month \n\n represents the last day of a specific \n\n represents the last of a specific \n\n represents the last day of a specific and \n\n represents the nth of a specific and \n\n represents the last of a specific and \n\n\n\nAlso provided are the C-style date and time functions, such as std::time_t, std::difftime, and CLOCKS_PER_SEC."
    },
    {
        "link": "https://geeksforgeeks.org/chrono-in-c",
        "document": "<chrono> is a C++ header that provides a collection of types and functions to work with time. It is a part of the C++ Standard Template Library (STL) and it’s included in C++11 and later versions.\n\n<chrono> provides three main types of clocks: system_clock, steady_clock, and high_resolution_clock. These clocks are used to measure time in various ways.\n\nsystem_clock represents the system-wide real time wall clock. It’s affected by the system’s time adjustments.\n\nsteady_clock represents a monotonically increasing clock that’s not affected by changes to the system time.\n\nhigh_resolution_clock is the clock with the shortest tick period available on the system.\n\n<chrono> also provides a collection of duration types, including duration<Rep, Period>, that can be used to represent a duration of time. Rep is the representation type (such as int or long) and Period is the ratio of the duration (such as nanoseconds or seconds).\n\nAdditionally, <chrono> provides a collection of time point types, including time_point<Clock, Duration>, that can be used to represent a point in time. Clock is the clock type (such as system_clock) and Duration is the duration type (such as seconds)\n\nChrono library is used to deal with date and time. This library was designed to deal with the fact that timers and clocks might be different on different systems and thus to improve over time in terms of precision. The unique thing about chrono is that it provides a precision-neutral concept by separating duration and point of time (“timepoint”) from specific clocks. chrono is the name of a header and also of a sub-namespace: All the elements in this header (except for the common_type specializations) are not defined directly under the std namespace (like most of the standard library) but under the std::chrono namespace. The elements in this header deal with time. This is done mainly by means of three concepts:\n\nA duration object expresses a time span by means of a count like a minute, two hours, or ten milliseconds. For example, “42 seconds” could be represented by a duration consisting of 42 ticks of a 1-second time unit.\n\nA clock consists of a starting point (or epoch) and a tick rate. For example, a clock may have an epoch of February 22, 1996 and tick every second. C++ defines three clock types:\n• system_clock-It is the current time according to the system (regular clock which we see on the toolbar of the computer). It is written as- std::chrono::system_clock\n• steady_clock-It is a monotonic clock that will never be adjusted.It goes at a uniform rate. It is written as- std::chrono::steady_clock\n• high_resolution_clock– It provides the smallest possible tick period. It is written as-std::chrono::high_resolution_clock\n\nA time_point object expresses a point in time relative to a clock’s epoch. Internally, the object stores an object of a duration type, and uses the Clock type as a reference for its epoch.\n\nIt’s important to note that the precision and accuracy of the clocks and durations provided by <chrono> may vary depending on the system and platform, and it’s always a good idea to check the documentation of your platform for more information."
    },
    {
        "link": "https://learn.microsoft.com/en-us/cpp/standard-library/chrono?view=msvc-170",
        "document": "Include the standard header to define classes and functions that represent and manipulate time durations and time instants.\n\nBeginning in Visual Studio 2015, the implementation of has changed to meet the C++ Standard requirements for steadiness and monotonicity:\n• is now based on\n• is now a typedef for In the Microsoft C++ implementation, is now a for . However, this isn't necessarily the case for other implementations.\n\nRegional legislatures occasionally make changes to time zones, and an international standards body specifies when new leap seconds should be accounted for. A database of these changes was added to Windows 10. Specifically:\n\nUsing the time-zone facilities on older versions of Windows results in a runtime error.\n\nFor more information about ratio types that are used in the following typedefs, see .\n\n(C++11) The header defines the following user-defined literals that you can use for greater convenience, type-safety, and maintainability of your code. These literals are defined in the inline namespace and are in scope when is in scope.\n\nThe following examples show how to use literals:"
    },
    {
        "link": "https://en.cppreference.com/w/cpp/header/chrono",
        "document": "This header is part of the date and time library.\n\nstd chrono Rep, Period ratio duration Clock, Duration Clock time_point Rep1, Period1, Rep2, Period2 common_type chrono Rep1, Period1 , chrono Rep2, Period2 Clock, Duration1, Duration2 common_type chrono Clock, Duration1 , chrono Clock, Duration2 chrono Rep treat_as_floating_point Rep treat_as_floating_point_v treat_as_floating_point Rep Rep duration_values T is_clock T is_clock_v is_clock T Rep1, Period1, Rep2, Period2 common_type_t duration Rep1, Period1 , duration Rep2, Period2 operator duration Rep1, Period1 lhs, duration Rep2, Period2 rhs Rep1, Period1, Rep2, Period2 common_type_t duration Rep1, Period1 , duration Rep2, Period2 operator duration Rep1, Period1 lhs, duration Rep2, Period2 rhs Rep1, Period, Rep2 duration common_type_t Rep1, Rep2 , Period operator duration Rep1, Period d, Rep2 s Rep1, Rep2, Period duration common_type_t Rep1, Rep2 , Period operator Rep1 s, duration Rep2, Period d Rep1, Period, Rep2 duration common_type_t Rep1, Rep2 , Period operator duration Rep1, Period d, Rep2 s Rep1, Period1, Rep2, Period2 common_type_t Rep1, Rep2 operator duration Rep1, Period1 lhs, duration Rep2, Period2 rhs Rep1, Period, Rep2 duration common_type_t Rep1, Rep2 , Period operator duration Rep1, Period d, Rep2 s Rep1, Period1, Rep2, Period2 common_type_t duration Rep1, Period1 , duration Rep2, Period2 operator duration Rep1, Period1 lhs, duration Rep2, Period2 rhs Rep1, Period1, Rep2, Period2 operator duration Rep1, Period1 lhs, duration Rep2, Period2 rhs Rep1, Period1, Rep2, Period2 operator duration Rep1, Period1 lhs, duration Rep2, Period2 rhs Rep1, Period1, Rep2, Period2 operator duration Rep1, Period1 lhs, duration Rep2, Period2 rhs Rep1, Period1, Rep2, Period2 operator duration Rep1, Period1 lhs, duration Rep2, Period2 rhs Rep1, Period1, Rep2, Period2 operator duration Rep1, Period1 lhs, duration Rep2, Period2 rhs Rep1, Period1, Rep2, Period2 requires operator duration Rep1, Period1 lhs, duration Rep2, Period2 rhs ToDuration, Rep, Period ToDuration duration_cast duration Rep, Period d ToDuration, Rep, Period ToDuration floor duration Rep, Period d ToDuration, Rep, Period ToDuration ceil duration Rep, Period d ToDuration, Rep, Period ToDuration round duration Rep, Period d CharT, Traits, Rep, Period basic_ostream CharT, Traits operator basic_ostream CharT, Traits os, duration Rep, Period d CharT, Traits, Rep, Period, Alloc allocator CharT basic_istream CharT, Traits from_stream basic_istream CharT, Traits is, CharT fmt, duration Rep, Period d, basic_string CharT, Traits, Alloc abbrev nullptr, minutes offset nullptr nanoseconds duration /* signed integer type of at least 64 bits */ , nano microseconds duration /* signed integer type of at least 55 bits */ , micro milliseconds duration /* signed integer type of at least 45 bits */ , milli seconds duration /* signed integer type of at least 35 bits */ minutes duration /* signed integer type of at least 29 bits */ , ratio hours duration /* signed integer type of at least 23 bits */ , ratio days duration /* signed integer type of at least 25 bits */ , ratio_multiply ratio , hours weeks duration /* signed integer type of at least 22 bits */ , ratio_multiply ratio , days years duration /* signed integer type of at least 17 bits */ , ratio_multiply ratio , , days months duration /* signed integer type of at least 20 bits */ , ratio_divide years , ratio Clock, Duration1, Rep2, Period2 time_point Clock, common_type_t Duration1, duration Rep2, Period2 operator time_point Clock, Duration1 lhs, duration Rep2, Period2 rhs Rep1, Period1, Clock, Duration2 time_point Clock, common_type_t duration Rep1, Period1 , Duration2 operator duration Rep1, Period1 lhs, time_point Clock, Duration2 rhs Clock, Duration1, Rep2, Period2 time_point Clock, common_type_t Duration1, duration Rep2, Period2 operator time_point Clock, Duration1 lhs, duration Rep2, Period2 rhs Clock, Duration1, Duration2 common_type_t Duration1, Duration2 operator time_point Clock, Duration1 lhs, time_point Clock, Duration2 rhs Clock, Duration1, Duration2 operator time_point Clock, Duration1 lhs, time_point Clock, Duration2 rhs Clock, Duration1, Duration2 operator time_point Clock, Duration1 lhs, time_point Clock, Duration2 rhs Clock, Duration1, Duration2 operator time_point Clock, Duration1 lhs, time_point Clock, Duration2 rhs Clock, Duration1, Duration2 operator time_point Clock, Duration1 lhs, time_point Clock, Duration2 rhs Clock, Duration1, Duration2 operator time_point Clock, Duration1 lhs, time_point Clock, Duration2 rhs Clock, Duration1, three_way_comparable_with Duration1 Duration2 operator time_point Clock, Duration1 lhs, time_point Clock, Duration2 rhs ToDuration, Clock, Duration time_point Clock, ToDuration time_point_cast time_point Clock, Duration t ToDuration, Clock, Duration time_point Clock, ToDuration floor time_point Clock, Duration tp ToDuration, Clock, Duration time_point Clock, ToDuration ceil time_point Clock, Duration tp ToDuration, Clock, Duration time_point Clock, ToDuration round time_point Clock, Duration tp Rep, Period duration Rep, Period abs duration Rep, Period d system_clock Duration sys_time time_point system_clock, Duration sys_seconds sys_time seconds sys_days sys_time days CharT, Traits, Duration basic_ostream CharT, Traits operator basic_ostream CharT, Traits os, sys_time Duration tp CharT, Traits basic_ostream CharT, Traits operator basic_ostream CharT, Traits os, sys_days dp CharT, Traits, Duration, Alloc allocator CharT basic_istream CharT, Traits from_stream basic_istream CharT, Traits is, CharT fmt, sys_time Duration tp, basic_string CharT, Traits, Alloc abbrev nullptr, minutes offset nullptr utc_clock Duration utc_time time_point utc_clock, Duration utc_seconds utc_time seconds CharT, Traits, Duration basic_ostream CharT, Traits operator basic_ostream CharT, Traits os, utc_time Duration t CharT, Traits, Duration, Alloc allocator CharT basic_istream CharT, Traits from_stream basic_istream CharT, Traits is, CharT fmt, utc_time Duration tp, basic_string CharT, Traits, Alloc abbrev nullptr, minutes offset nullptr leap_second_info Duration leap_second_info get_leap_second_info utc_time Duration ut tai_clock Duration tai_time time_point tai_clock, Duration tai_seconds tai_time seconds CharT, Traits, Duration basic_ostream CharT, Traits operator basic_ostream CharT, Traits os, tai_time Duration t CharT, Traits, Duration, Alloc allocator CharT basic_istream CharT, Traits from_stream basic_istream CharT, Traits is, CharT fmt, tai_time Duration tp, basic_string CharT, Traits, Alloc abbrev nullptr, minutes offset nullptr gps_clock Duration gps_time time_point gps_clock, Duration gps_seconds gps_time seconds CharT, Traits, Duration basic_ostream CharT, Traits operator basic_ostream CharT, Traits os, gps_time Duration t CharT, Traits, Duration, Alloc allocator CharT basic_istream CharT, Traits from_stream basic_istream CharT, Traits is, CharT fmt, gps_time Duration tp, basic_string CharT, Traits, Alloc abbrev nullptr, minutes offset nullptr file_clock Duration file_time time_point file_clock, Duration CharT, Traits, Duration basic_ostream CharT, Traits operator basic_ostream CharT, Traits os, file_time Duration tp CharT, Traits, Duration, Alloc allocator CharT basic_istream CharT, Traits from_stream basic_istream CharT, Traits is, CharT fmt, file_time Duration tp, basic_string CharT, Traits, Alloc abbrev nullptr, minutes offset nullptr steady_clock high_resolution_clock local_t Duration local_time time_point local_t, Duration local_seconds local_time seconds local_days local_time days CharT, Traits, Duration basic_ostream CharT, Traits operator basic_ostream CharT, Traits os, local_time Duration tp CharT, Traits, Duration, Alloc allocator CharT basic_istream CharT, Traits from_stream basic_istream CharT, Traits is, CharT fmt, local_time Duration tp, basic_string CharT, Traits, Alloc abbrev nullptr, minutes offset nullptr DestClock, SourceClock clock_time_conversion DestClock, SourceClock, Duration clock_cast time_point SourceClock, Duration t last_spec day operator day x, day y strong_ordering operator day x, day y day operator day x, days y day operator days x, day y day operator day x, days y days operator day x, day y CharT, Traits basic_ostream CharT, Traits operator basic_ostream CharT, Traits os, day d CharT, Traits, Alloc allocator CharT basic_istream CharT, Traits from_stream basic_istream CharT, Traits is, CharT fmt, day d, basic_string CharT, Traits, Alloc abbrev nullptr, minutes offset nullptr month operator month x, month y strong_ordering operator month x, month y month operator month x, months y month operator months x, month y month operator month x, months y months operator month x, month y CharT, Traits basic_ostream CharT, Traits operator basic_ostream CharT, Traits os, month m CharT, Traits, Alloc allocator CharT basic_istream CharT, Traits from_stream basic_istream CharT, Traits is, CharT fmt, month m, basic_string CharT, Traits, Alloc abbrev nullptr, minutes offset nullptr year operator year x, year y strong_ordering operator year x, year y year operator year x, years y year operator years x, year y year operator year x, years y years operator year x, year y CharT, Traits basic_ostream CharT, Traits operator basic_ostream CharT, Traits os, year y CharT, Traits, Alloc allocator CharT basic_istream CharT, Traits from_stream basic_istream CharT, Traits is, CharT fmt, year y, basic_string CharT, Traits, Alloc abbrev nullptr, minutes offset nullptr weekday operator weekday x, weekday y weekday operator weekday x, days y weekday operator days x, weekday y weekday operator weekday x, days y days operator weekday x, weekday y CharT, Traits basic_ostream CharT, Traits operator basic_ostream CharT, Traits os, weekday wd CharT, Traits, Alloc allocator CharT basic_istream CharT, Traits from_stream basic_istream CharT, Traits is, CharT fmt, weekday wd, basic_string CharT, Traits, Alloc abbrev nullptr, minutes offset nullptr weekday_indexed operator weekday_indexed x, weekday_indexed y CharT, Traits basic_ostream CharT, Traits operator basic_ostream CharT, Traits os, weekday_indexed wdi weekday_last operator weekday_last x, weekday_last y CharT, Traits basic_ostream CharT, Traits operator basic_ostream CharT, Traits os, weekday_last wdl month_day operator month_day x, month_day y strong_ordering operator month_day x, month_day y CharT, Traits basic_ostream CharT, Traits operator basic_ostream CharT, Traits os, month_day md CharT, Traits, Alloc allocator CharT basic_istream CharT, Traits from_stream basic_istream CharT, Traits is, CharT fmt, month_day md, basic_string CharT, Traits, Alloc abbrev nullptr, minutes offset nullptr month_day_last operator month_day_last x, month_day_last y strong_ordering operator month_day_last x, month_day_last y CharT, Traits basic_ostream CharT, Traits operator basic_ostream CharT, Traits os, month_day_last mdl month_weekday operator month_weekday x, month_weekday y CharT, Traits basic_ostream CharT, Traits operator basic_ostream CharT, Traits os, month_weekday mwd month_weekday_last operator month_weekday_last x, month_weekday_last y CharT, Traits basic_ostream CharT, Traits operator basic_ostream CharT, Traits os, month_weekday_last mwdl year_month operator year_month x, year_month y strong_ordering operator year_month x, year_month y year_month operator year_month ym, months dm year_month operator months dm, year_month ym year_month operator year_month ym, months dm months operator year_month x, year_month y year_month operator year_month ym, years dy year_month operator years dy, year_month ym year_month operator year_month ym, years dy CharT, Traits basic_ostream CharT, Traits operator basic_ostream CharT, Traits os, year_month ym CharT, Traits, Alloc allocator CharT basic_istream CharT, Traits from_stream basic_istream CharT, Traits is, CharT fmt, year_month ym, basic_string CharT, Traits, Alloc abbrev nullptr, minutes offset nullptr year_month_day operator year_month_day x, year_month_day y strong_ordering operator year_month_day x, year_month_day y year_month_day operator year_month_day ymd, months dm year_month_day operator months dm, year_month_day ymd year_month_day operator year_month_day ymd, years dy year_month_day operator years dy, year_month_day ymd year_month_day operator year_month_day ymd, months dm year_month_day operator year_month_day ymd, years dy CharT, Traits basic_ostream CharT, Traits operator basic_ostream CharT, Traits os, year_month_day ymd CharT, Traits, Alloc allocator CharT basic_istream CharT, Traits from_stream basic_istream CharT, Traits is, CharT fmt, year_month_day ymd, basic_string CharT, Traits, Alloc abbrev nullptr, minutes offset nullptr year_month_day_last operator year_month_day_last x, year_month_day_last y strong_ordering operator year_month_day_last x, year_month_day_last y year_month_day_last operator year_month_day_last ymdl, months dm year_month_day_last operator months dm, year_month_day_last ymdl year_month_day_last operator year_month_day_last ymdl, years dy year_month_day_last operator years dy, year_month_day_last ymdl year_month_day_last operator year_month_day_last ymdl, months dm year_month_day_last operator year_month_day_last ymdl, years dy CharT, Traits basic_ostream CharT, Traits operator basic_ostream CharT, Traits os, year_month_day_last ymdl year_month_weekday operator year_month_weekday x, year_month_weekday y year_month_weekday operator year_month_weekday ymwd, months dm year_month_weekday operator months dm, year_month_weekday ymwd year_month_weekday operator year_month_weekday ymwd, years dy year_month_weekday operator years dy, year_month_weekday ymwd year_month_weekday operator year_month_weekday ymwd, months dm year_month_weekday operator year_month_weekday ymwd, years dy CharT, Traits basic_ostream CharT, Traits operator basic_ostream CharT, Traits os, year_month_weekday ymwdi year_month_weekday_last operator year_month_weekday_last x, year_month_weekday_last y year_month_weekday_last operator year_month_weekday_last ymwdl, months dm year_month_weekday_last operator months dm, year_month_weekday_last ymwdl year_month_weekday_last operator year_month_weekday_last ymwdl, years dy year_month_weekday_last operator years dy, year_month_weekday_last ymwdl year_month_weekday_last operator year_month_weekday_last ymwdl, months dm year_month_weekday_last operator year_month_weekday_last ymwdl, years dy CharT, Traits basic_ostream CharT, Traits operator basic_ostream CharT, Traits os, year_month_weekday_last ymwdl year_month operator year y, month m year_month operator year y, m month_day operator month m, day d month_day operator month m, d month_day operator m, day d month_day operator day d, month m month_day operator day d, m month_day_last operator month m, last_spec month_day_last operator m, last_spec month_day_last operator last_spec, month m month_day_last operator last_spec, m month_weekday operator month m, weekday_indexed wdi month_weekday operator m, weekday_indexed wdi month_weekday operator weekday_indexed wdi, month m month_weekday operator weekday_indexed wdi, m month_weekday_last operator month m, weekday_last wdl month_weekday_last operator m, weekday_last wdl month_weekday_last operator weekday_last wdl, month m month_weekday_last operator weekday_last wdl, m year_month_day operator year_month ym, day d year_month_day operator year_month ym, d year_month_day operator year y, month_day md year_month_day operator y, month_day md year_month_day operator month_day md, year y year_month_day operator month_day md, y year_month_day_last operator year_month ym, last_spec year_month_day_last operator year y, month_day_last mdl year_month_day_last operator y, month_day_last mdl year_month_day_last operator month_day_last mdl, year y year_month_day_last operator month_day_last mdl, y year_month_weekday operator year_month ym, weekday_indexed wdi year_month_weekday operator year y, month_weekday mwd year_month_weekday operator y, month_weekday mwd year_month_weekday operator month_weekday mwd, year y year_month_weekday operator month_weekday mwd, y year_month_weekday_last operator year_month ym, weekday_last wdl year_month_weekday_last operator year y, month_weekday_last mwdl year_month_weekday_last operator y, month_weekday_last mwdl year_month_weekday_last operator month_weekday_last mwdl, year y year_month_weekday_last operator month_weekday_last mwdl, y Duration hh_mm_ss CharT, Traits, Duration basic_ostream CharT, Traits operator basic_ostream CharT, Traits os, hh_mm_ss Duration hms is_am hours h is_pm hours h hours make12 hours h hours make24 hours h, is_pm tzdb tzdb_list tzdb get_tzdb tzdb_list get_tzdb_list time_zone locate_zone string_view tz_name time_zone current_zone tzdb reload_tzdb string remote_version nonexistent_local_time ambiguous_local_time sys_info CharT, Traits basic_ostream CharT, Traits operator basic_ostream CharT, Traits os, sys_info si local_info CharT, Traits basic_ostream CharT, Traits operator basic_ostream CharT, Traits os, local_info li choose earliest, latest time_zone operator time_zone x, time_zone y strong_ordering operator time_zone x, time_zone y T zoned_traits Duration, TimeZonePtr time_zone zoned_time zoned_seconds zoned_time seconds Duration1, Duration2, TimeZonePtr operator zoned_time Duration1, TimeZonePtr x, zoned_time Duration2, TimeZonePtr y CharT, Traits, Duration, TimeZonePtr basic_ostream CharT, Traits operator basic_ostream CharT, Traits os, zoned_time Duration, TimeZonePtr t leap_second operator leap_second x, leap_second y strong_ordering operator leap_second x, leap_second y Duration operator leap_second x, sys_time Duration y Duration operator leap_second x, sys_time Duration y Duration operator sys_time Duration x, leap_second y Duration operator leap_second x, sys_time Duration y Duration operator sys_time Duration x, leap_second y Duration operator leap_second x, sys_time Duration y Duration operator sys_time Duration x, leap_second y Duration operator leap_second x, sys_time Duration y Duration operator sys_time Duration x, leap_second y Duration requires three_way_comparable_with sys_seconds, sys_time Duration operator leap_second x, sys_time Duration y time_zone_link operator time_zone_link x, time_zone_link y strong_ordering operator time_zone_link x, time_zone_link y Duration Duration Duration local_time_format local_time Duration time, string abbrev nullptr, seconds offset_sec nullptr Rep, Period, CharT formatter chrono Rep, Period , CharT Duration, CharT formatter chrono Duration , CharT Duration, CharT formatter chrono Duration , CharT Duration, CharT formatter chrono Duration , CharT Duration, CharT formatter chrono Duration , CharT Duration, CharT formatter chrono Duration , CharT Duration, CharT formatter chrono Duration , CharT Duration, CharT formatter chrono Duration , CharT CharT formatter chrono , CharT CharT formatter chrono , CharT CharT formatter chrono , CharT CharT formatter chrono , CharT CharT formatter chrono , CharT CharT formatter chrono , CharT CharT formatter chrono , CharT CharT formatter chrono , CharT CharT formatter chrono , CharT CharT formatter chrono , CharT CharT formatter chrono , CharT CharT formatter chrono , CharT CharT formatter chrono , CharT CharT formatter chrono , CharT CharT formatter chrono , CharT Rep, Period, CharT formatter chrono duration Rep, Period , CharT CharT formatter chrono , CharT CharT formatter chrono , CharT Duration, TimeZonePtr, CharT formatter chrono Duration, TimeZonePtr , CharT chrono CharT, Parsable parse CharT fmt, Parsable tp CharT, Traits, Alloc, Parsable parse basic_string CharT, Traits, Alloc format, Parsable tp CharT, traits, Alloc, Parsable parse CharT fmt, Parsable tp, basic_string CharT, traits, Alloc abbrev CharT, Traits, Alloc, Parsable parse basic_string CharT, Traits, Alloc format, Parsable tp, basic_string CharT, Traits, Alloc abbrev CharT, Parsable parse CharT fmt, Parsable tp, minutes offset CharT, Traits, Alloc, Parsable parse basic_string CharT, Traits, Alloc format, Parsable tp, minutes offset CharT, traits, Alloc, Parsable parse CharT fmt, Parsable tp, basic_string CharT, traits, Alloc abbrev, minutes offset CharT, Traits, Alloc, Parsable parse basic_string CharT, Traits, Alloc format, Parsable tp, basic_string CharT, Traits, Alloc abbrev, minutes offset last_spec last weekday Sunday weekday Monday weekday Tuesday weekday Wednesday weekday Thursday weekday Friday weekday Saturday month January month February month March month April month May month June month July month August month September month October month November month December literals chrono_literals chrono operator h chrono , ratio , operator h chrono operator min chrono , ratio , operator min chrono operator s chrono operator s chrono operator ms chrono , milli operator ms chrono operator us chrono , micro operator us chrono operator ns chrono , nano operator ns chrono operator d d chrono operator y y chrono literals T hash Rep, Period hash chrono Rep, Period Clock, Duration hash chrono Clock, Duration hash chrono hash chrono hash chrono hash chrono hash chrono hash chrono hash chrono hash chrono hash chrono hash chrono hash chrono hash chrono hash chrono hash chrono hash chrono Duration, TimeZonePtr hash chrono Duration, TimeZonePtr hash chrono"
    },
    {
        "link": "https://stackoverflow.com/questions/23896664/c-11-stdchrono-measure-time-elapsed",
        "document": "Your comments are exactly correct. You can find documentation on here: http://en.cppreference.com/w/cpp/chrono\n\nThe above assumes you change to be a type. You really should avoid using generic integral types, because you don't get any type safety from them in terms of whether a tick represents a microsecond, a millisecond, or whatever. Users have to check the documentation and that doesn't work very well. Also if you template functions based on the duration then users can pass whatever duration type they like and you can handle any necessary conversion behind the scenes.\n\nThe way you're using variadic templates does not enable perfect forwarding. You may get some extra copies of the parameters besides the one that's needed to ensure the arguments live long enough.\n\ndoes not enable atomic accesses. Your write to is not sequenced with the reads and therefore causes a data race, leading to undefined behavior. The simplest fix is , but there are some other possibilities as well.\n\nThe parameter leads to the so called \"boolean trap\". Instead use an enum that will be more readable.\n\nYou don't need to be a pointer. In fact since you immediately detach it and never use it for anything except , you don't need this member at all. But IMO you'd be better off using and instead of a detached thread.\n\nThere's no point in and using the public function since they already have to know about the implementation of . It's safer to just access directly. Another alternative would be to introduce a counterpart to that is responsible for setting , and then and would not have to access directly at all.\n\nThe detached thread could continue running for a time after the timer object has been destroyed, causing it to access members of the Timer after they are no longer valid. If the thread is accessing member variables (such as ) then you must wait for the thread to complete before destruction completes.\n\nalready checks if the task is running, so the extra check in the destructor is unnecessary.\n\nThe order of arguments in the constructor can be changed so that passing an interval and a function with no autorun or arguments defaults to not auto running and not using . E.g.\n\nIt's a good idea to avoid default captures in lambdas because then you may not be sure what's getting captured. For example in your code use use reference capture by default, but then capture all the local variables by value. And since is a member variable it does not get captured by reference. Instead the lambda captures by value and accesses through that.\n\nYou can use the and member variables in your loop instead of capturing new copies.\n\nInstead of using and templating on and you can simply template on a generic type. That way you don't pay the expense of and don't have unnecessary and types that you don't use anywhere."
    },
    {
        "link": "https://stackoverflow.com/questions/9089842/c-chrono-system-time-in-milliseconds-time-operations",
        "document": "I've got a small problem caused by insufficient documentation of C++11.\n\nI'd like to obtain a time since epoch in milliseconds, or nanoseconds or seconds and then I will have to \"cast\" this value to another resolution. I can do it using gettimeofday() but it will be to easy, so I tried to achieve it using std::chrono.\n\nBut I have no idea what is a resolution of obtained in this way time_point, and I don't know how to get this time as a simple unsigned long long, and I haven't any conception how to cast it to another resolution."
    },
    {
        "link": "https://stackoverflow.com/questions/11062804/measuring-the-runtime-of-a-c-code",
        "document": "If you are using C++11 you can use :\n\nYou can also specify the granularity to use for representing a duration:\n\nIf you cannot use C++11, then have a look at chrono from Boost.\n\nThe best thing about using such a standard libraries is that their portability is really high (e.g., they both work in Linux and Windows). So you do not need to worry too much if you decide to port your application afterwards.\n\nThese libraries follow a modern C++ design too, as opposed to C-like approaches.\n\nEDIT: The example above can be used to measure wall-clock time. That is not, however, the only way to measure the execution time of a program. First, we can distinct between user and system time:\n• User time: The time spent by the program running in user space.\n• System time: The time spent by the program running in system (or kernel) space. A program enters kernel space for instance when executing a system call.\n\nDepending on the objectives it may be necessary or not to consider system time as part of the execution time of a program. For instance, if the aim is to just measure a compiler optimization on the user code then it is probably better to leave out system time. On the other hand, if the user wants to determine whether system calls are a significant overhead, then it is necessary to measure system time as well.\n\nMoreover, since most modern systems are time-shared, different programs may compete for several computing resources (e.g., CPU). In such a case, another distinction can be made:\n• Wall-clock time: By using wall-clock time the execution of the program is measured in the same way as if we were using an external (wall) clock. This approach does not consider the interaction between programs.\n• CPU time: In this case we only count the time that a program is actually running on the CPU. If a program (P1) is co-scheduled with another one (P2), and we want to get the CPU time for P1, this approach does not include the time while P2 is running and P1 is waiting for the CPU (as opposed to the wall-clock time approach).\n• , captures system-CPU time spent by the current process. A tuple-like class , that captures real, user-CPU, and system-CPU process times together.\n• A thread steady clock giving the time spent by the current thread (when supported by a platform).\n\nUnfortunately, C++11 does not have such clocks. But Boost is a wide-used library and, probably, these extra clocks will be incorporated into C++1x at some point. So, if you use Boost you will be ready when the new C++ standard adds them.\n\nFinally, if you want to measure the time a program takes to execute from the command line (as opposed to adding some code into your program), you may have a look at the time command, just as @BЈовић suggests. This approach, however, would not let you measure individual parts of your program (e.g., the time it takes to execute a function)."
    },
    {
        "link": "https://freecodecamp.org/news/cpp-std-chrono-api",
        "document": "Keeping track of time is a very important aspect of computer programs. Some common use cases are:\n• Measure/profile the performance of certain parts of code.\n• Do work at certain periods of time, from within a program.\n• Detect whether threads are in a deadlock / taking too long to complete an operation.\n• Synchronize tasks between different components of software\n\nThis article will guide you through how you can measure time in modern C++.\n• A basic understanding of C++: For readers not familiar with C++, Learn C++ Programming for Beginners – Free 31-Hour Course is a helpful resource.\n• A quick read through Linux time tracking infrastructure – such as you can find here – will help you get familiar with the ideas presented in the article.\n\nCommon Ways to Track Time in C++\n\nThis article covers how you can keep track of time in C++. In C, on UNIX like systems, you can use the clock_gettime() function to keep track of time. It returns time in a structured way through the struct.\n\nThe /gettimeofday function gives us back a filled struct which has two fields:\n• , which gives us the time in seconds since the time source – CLOCK_REALTIME / CLOCK_MONOTONIC that was passed into clock_gettime. The 'type' of this field is which is usually an integral value.\n• , which gives the time after , in nanoseconds since the time source that was specified while calling . The type of this field is a long int.\n\nSo why is not good enough? The answer is that the members of can easily be passed to functions as they're really just s / s. They're not strongly typed.\n\nIt's also easy to forget about the units in which they represent time while passing information around to functions. This can happen when you're dealing with projects that have thousands of lines of code.\n\nC++11 introduced the std::chrono API, which can help you avoid some of these problems.\n\nThere are 3 important parts of the API.\n\nAs its name suggests, is a type that represents a time interval. The official C++ reference mentions that is a templated type with the following signature:\n\nHere, the template parameter represents the type that is used to count 'ticks' of time. A tick is just a unit of time which is a given fraction of a second. , the second parameter, defines what exactly that fraction is.\n\nSo, for example, if you write:\n\nis a type that has been defined, which counts in units of milliseconds (1/1000th of a second). This count is expressed as an integer. As you might be able to guess, the template parameter is and Period is (which really is a way of saying 1/1000).\n\nNow that it's clear how durations are represented, let's see what we can and cannot do with these.\n\nIf there is a function that takes in a duration and you instead try to pass in any non- type, you'll get a compiler error.\n\nIt is possible to implicitly convert between different types of as long as information isn't lost with the type of , since the standard library can compute the relationship between two types. It is not possible to implicitly convert if there is a loss of information. For example:\n\nThe standard library also has some predefined template specializations for common time durations such as , , , and so on.\n\nYou can also get the 'count' value contained in a duration by using the method in a duration.\n\nInterestingly, converting from a unit with higher precision like to something with a lower precision such as may also lead to a loss of information. For these specific cases, you need to use an explicit cast for conversion. This is called . For example:\n\nNow that we know why is useful, let's move on. The next section explores .\n\nis a way of expressing a particular point in time – surprise, surprise!\n\nIf you think about it, how can you logically define a point in time ? We need to have a reference starting point and a duration from the starting point. This is exactly what does.\n\nThe class declaration looks like this:\n\nThere are two template parameters here:\n\nThe first one is which represents a reference clock relative to which the point in time is being measured. For now, some examples of clocks are:\n• : this represents a real-world wall clock. It's useful when you want to measure time in terms of real-world times. It's important to note that the system time can usually be changed on any system, so you shouldn't depend on this clock to calculate time periods between tasks / performance profiling.\n• : this represents a monotonically increasing clock. It's useful when you need stop-watch like clock accounting.\n\nThe second template parameter is which is what we discussed in the previous section. A needs to be associated with a type since that's what is being used to measure ticks since the 'epoch' of the .\n\nEpoch is just a way of saying a reference point in time. While there's no mandate for which reference to use, Unix Time - that is, the time since 00:00:00 Coordinated Universal Time (UTC), Thursday, 1 January 1970 is a common one.\n\nTime points based on the same clock can be subtracted and not added. For example:\n\nLet's now see what clocks are.\n\nA is a type that ties together and . It has a function that returns the current . The formal requirements for a type to be a can be found in the C++ spec here.\n\nAs mentioned before, and are two popular clocks provided by the standard library. Each clock has its own associated as well.\n\nEach is associated with some clock, since it really has to be relative to some given reference.\n\nFinally, let's see some examples of how you can tie together , , and . Let's say you want to measure the time that looping 100,000,000 times takes in nanoseconds, and you also want to print out the current wall time:\n\nThe output of the program is the following:\n\nThis article explored various facets of the API in C++. The API allows C++ programmers to safely keep track of time thanks to its strongly typed system. It also helps maintain support for convenient conversions between different 'types' of time points."
    },
    {
        "link": "https://geeksforgeeks.org/how-to-get-time-in-milliseconds-in-cpp",
        "document": "How to Get Time in Milliseconds in C++?\n\nIn programming measuring accurate time is a common requirement for most software development packages. In C++, we have the std::chrono library with various functions for durations, time, and clocks. In this article, we will learn how to get time in milliseconds in C++.\n\nTo get the time in milliseconds we can use the methods of <chrono> library. First, get the current time from the system clock by calling the std::chrono::system_clock::now() function and then convert the current time to time since epoch by using the time_since_epoch() function. Finally convert duration to milliseconds by using std::chrono::duration_cast with std::chrono::milliseconds and count() function.\n\nC++ Program to Get Time in Milliseconds\n\nThe below program demonstrates how we can get time in milliseconds in C++."
    },
    {
        "link": "https://en.cppreference.com/w/cpp/chrono/duration",
        "document": "It consists of a count of ticks of type and a tick period, where the tick period is a compile-time rational representing the time in seconds from one tick to the next.\n\nThe only data stored in a is a tick count of type . If is floating point, then the can represent fractions of ticks. is included as part of the duration's type, and is only used when converting between different durations.\n\nA type /* intXX */ used in the table below means a signed integer type of at least XX bits.\n\nNote: each of the predefined duration types up to covers a range of at least ±292 years.\n\nThis specialization of enables efficient implementation of and for printing a object when the template parameter enables it.\n\nThe actual time interval (in seconds) that is held by a duration object d is roughly equal to d.count() * D::period::num / D::period::den, where is of type and d is an object of such type."
    }
]