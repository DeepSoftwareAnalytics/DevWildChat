[
    {
        "link": "https://geeksforgeeks.org/the-c-standard-template-library-stl",
        "document": "The C++ Standard Template Library (STL) is a set of template classes and functions that provides the implementation of common data structures and algorithms such as lists, stacks, arrays, sorting, searching, etc. It also provides the iterators and functors which makes it easier to work with algorithms and containers.\n\nSTL was originally designed by Alexander Stepanov and was later accepted as the part of C++ standard in C++ 98. It is a generalized library so we can use it with almost every data type without repeating the implementation code.\n\nThe components of STL are the features provided by Standard Template Library (STL) in C++ that can be classified into 4 types:\n\nThese components are designed to be efficient, flexible, and reusable, making them an integral part of modern C++ programming.\n\nContainers are the data structures used to store objects and data according to the requirement. Each container is implemented as a template class that also contains the methods to perform basic operations on it. Every STL container is defined inside its own header file.\n\nContainers can be further classified into 4 types:\n\nIf you want to dive deep into STL and understand its full potential, our Complete C++ Course offers a complete guide to mastering containers, iterators, and algorithms provided by STL.\n\nSequence containers store the data in the linear manner. They are also used to implement container adaptors.\n\nThere are 5 sequence containers in C++ STL:\n• Arrays : The STL array is an implementation of a compile time non-resizable array. It contains various method for common array operations.\n• Vector : An STL vector can be defined as the dynamic sized array which can be resized automatically when new elements are added or removed.\n• Deque : Deque or Double-Ended Queue is sequence containers with the feature of expansion and contraction on both ends. It means we can add and remove the data to and from both ends.\n• Lists : List container stores data in non-contiguous memory unlike vectors and only provide sequential access to the stored data. It basically implements the doubly linked list.\n• Forward Lists: Forward lists also store the data in a sequential manner like lists, but with the difference that forward list stores the location of only the next elements in the sequence. It implements the singly linked list.\n\nThe container adapters are the type of STL containers that adapt existing container classes to suit specific needs or requirements.\n\nThere are 3 container adaptors in C++ STL:\n• Stack: STL Stack follows the Last In First Out (LIFO) principle of element insertion and deletion. Also, these operations are performed only at one end of the stack.\n• Queue: STL Queue follows the First In First Out (FIFO) principle, means the element are inserted first are removed first and the elements inserted last are removed at last. It uses deque container by default.\n• Priority Queue: STL Priority Queue does not follow any of the FIFO or LIFO principle, but the deletion of elements is done on the basis of its priority. So, the element with the highest (by default) is always removed first. By default, it uses vector as underlying container.\n\nAssociative containers are the type of containers that store the elements in a sorted order based on keys rather than their insertion order.\n\nThere are 4 associative containers in C++ STL:\n• Sets : STL Set is a type of associative container in which each element has to be unique because the value of the element identifies it. By default, the values are stored in ascending order.\n• Maps : STL Maps are associative containers that store elements in the form of a key-value pair. The keys have to be unique and the container is sorted on the basis of the values of the keys.\n• Multisets : STL Multiset is similar to the set container except that it can store duplicate values.\n• Multimaps : STL Multimap is similar to a map container but allows multiple mapped values to have same keys.\n\nUnordered associative containers store the data in no particular order, but they allow the fastest insertion, deletion and search operations among all the container types in STL.\n\nThere are 4 unordered associative containers in C++ STL:\n• Unordered Set : STL Unordered Set stores the unique keys in the form of hash table. The order is randomized but insertion, deletion and search are fast.\n• Unordered Multiset : STL Unordered Multiset works similarly to an unordered set but can store multiple copies of the same key.\n• Unordered Map : STL Unordered Map stores the key-value pair in a hash table, where key is hashed to find the storage place.\n• Unordered Multimap : STL Unordered Multimap container is similar to unordered map, but it allows multiple values mapped to the same key.\n\nSTL algorithms offer a wide range of functions to perform common operations on data (mainly containers). These functions implement the most efficient version of the algorithm for tasks such as sorting, searching, modifying and manipulating data in containers, etc. All STL algorithms are defined inside the <algorithm> and <numeric> header file.\n\nThere is no formal classification of STL algorithms, but we can group them into two types based on the type of operations they perform:\n\nManipulative algorithms perform operations that modifies the elements of the given container or rearrange their order.\n\nSome of the common manipulative algorithm includes:\n• copy : Copies a specific number of elements from one range to another.\n• fill : Assigns a specified value to all elements in a range.\n• transform : Applies a function to each element in a range and stores the result in another range.\n• replace : Replaces all occurrences of a specific value in a range with a new value.\n• swap : Exchanges the values of two variables.\n• reverse : Reverses the order of elements in a range.\n• rotate : Rotates the elements in a range such that a specific element becomes the first.\n• remove : Removes all elements with a specified value from a range but does not reduce the container size.\n\nNon-manipulating algorithms are the type of algorithms provided by the Standard Template Library (STL) that operate on elements in a range without altering their values or the order of the elements.\n\nThe below are the few examples of the STL’s non-manipulative algorithms:\n• max_element : Find the maximum element in the given range.\n• min_element : To find the minimum element in the given range.\n• accumulate : Finds the sum of the elements of the given range.\n• count : Counts the occurrences of given element in the range.\n• find : Returns an iterator to the first occurrence of an element in the range.\n• is_permutation : Checks if one range is a permutation of another.\n• is_sorted : Checks if the elements in a range are sorted in non-decreasing order.\n• partial_sum : Computes the cumulative sum of elements in a range.\n\nIterators are the pointer like objects that are used to point to the memory addresses of STL containers. They are one of the most important components that contributes the most in connecting the STL algorithms with the containers. Iterators are defined inside the <iterator> header file.\n\nIn C++ STL, iterators are of 5 types:\n• Input Iterators : Input Iterators can be used to read values from a sequence once and only move forward.\n• Output Iterators : Output Iterators can be used to write values into a sequence once and only move forward.\n• Forward Iterators : Forward Iterators combine the features of both input and output iterators.\n• Bidirectional Iterators : Bidirectional Iterators support all operations of forward iterators and additionally can move backward.\n• Random Access Iterators : Random Access Iterators support all operations of bidirectional iterators and additionally provide efficient random access to elements.\n\nFunctors are objects that can be treated as though they are a function. Functors are most commonly used along with STL algorithms. It overloads the function-call operator and allows us to use an object like a function. There are many predefined functors in C++ STL that are defined inside the <functional> header file.\n\nFunctors can be classified into multiple types based on the type of operator they perform:\n• plus – Returns the sum of two parameters.\n• minus – Returns the difference of two parameters.\n• multiplies – Returns the product of two parameters.\n• divides – Returns the result after dividing two parameters.\n• modulus – Returns the remainder after dividing two parameters.\n• negate – Returns the negated value of a parameter.\n• equal_to – Returns true if the two parameters are equal.\n• not_equal_to – Returns true if the two parameters are not equal.\n• greater – Returns true if the first parameter is greater than the second.\n• greater_equal – Returns true if the first parameter is greater than or equal to the second.\n• less – Returns true if the first parameter is less than the second.\n• less_equal – Returns true if the first parameter is less than or equal to the second.\n• logical_and – Returns the result of Logical AND operation of two parameters.\n• logical_or – Returns the result of Logical OR operation of two parameters.\n• logical_not – Returns the result of Logical NOT operation of the parameters.\n• bit_and – Returns the result of Bitwise AND operation of two parameters.\n• bit_or – Returns the result of Bitwise OR operation of two parameters.\n• bit_xor – Returns the result of Bitwise XOR operation of two parameters.\n\nThe Utility Library is a collection of utility components provided by the Standard Template Library (STL) that does not fall in the above categories. It offers various features such as pairs, tuples, etc.\n\nThe memory library contains the function that helps users to efficiently manage the memory such as std::move, smart pointers, etc.\n• Move Semantics : It allows the transfer of resources from one object to another without copying.\n• Smart Pointers : They are a wrapper over the raw pointers and helps in avoiding errors associated with pointers.\n• Utility Functions : Utility functions in C++ provide important operations like std::forward to facilitate efficient, generic and safe code manipulation.\n• Integer Sequence : Enable compile-time generation of integer sequences, useful in metaprogramming.\n\nThe key benefit of the STL is that it provides a way to write generic, reusable code and tested code that can be applied to different data types. This means you can write an algorithm once and then use it with other types of data without having to write separate code for each type.\n\nOther benefits include:\n• None STL provides flexibility through customizable templates, functors, and lambdas.\n• None Pre-implemented tools let you focus on problem-solving rather than low-level coding.\n\nThe major limitation of the C++ Standard Template Library (STL) is Performance Overheads. While STL is highly optimized for general use cases, its generic nature can lead to less efficient memory usage and execution time compared to custom and specialized solutions.\n\nOther limitations can be:\n\nDespite these limitations, STL remains an invaluable part of C++ programming, offering a wide range of powerful and flexible tools."
    },
    {
        "link": "https://stackoverflow.com/questions/66965686/implement-tree-structure-store-nodes-in-vector-and-denote-children-with-indices",
        "document": "The standard efficient C++ way of doing that is to write your data structure without worrying about how data are allocated, and use a dedicated allocator template parameter (like or ). This method helps to keep your code maintainable (thanks to separation of concerns) and be still quite efficient (thanks to templates). With this solution, you can first write your code easily (with the approach n°1) and then optimize allocations easily too (using for example the approach n°2).\n\nRegarding the optimization of allocation: yes, & could be slow (despite some platforms do this very efficiently). Since there are no node deleted, you can use a very fast monotonic arena/stack-based allocator (you can take a look to that seems to do that). The idea is to stack small allocated memory regions in memory chunks. Chunks can be pre-allocated or allocated on the fly one by one (possibly using a growing policy, but without resizing data). The chunk pointers can be stored in a very-small data structure (possibly fixed-sized array). When your data structure is deleted, you just need to delete the few chunks (you could even recycle them in loops). This strategy should be cheaper than your second approach, since resizing a vector is quite expensive. For more information, you can look the CppCon 2017 talk of John Lakos on Local ('Arena') Memory Allocators."
    },
    {
        "link": "https://cplusplus.com/forum/general/284864",
        "document": "i would like to create a tree like structure in c++. since the number of children per node is arbitrary i would like to use stl vector for tree creation.\n\n \n\n tree should look something like this:\n\n \n\n https://i.postimg.cc/8zzT6jvJ/Diagram1.png\n\n \n\n also\n\n \n\n each node should contain some data, including one stl vector.\n\n \n\n at the end i would like to be able to \"merge\" hierarchically in one large vector - something like this:\n\n \n\n K-vector + I-vector + F-vector + B-vector + A-vector\n\n \n\n thank you very much for your interest\n\n i would like to create a tree like structure in c++. since the number of children per node is arbitrary i would like to use stl vector for tree creation.tree should look something like this:alsoeach node should contain some data, including one stl vector.at the end i would like to be able to \"merge\" hierarchically in one large vector - something like this:K-vector + I-vector + F-vector + B-vector + A-vectorthank you very much for your interest\n\n\n\n \n\n i think that your spell can do the job, i'll try it as soon as i get to the computer.\n\n \n\n please explain to me this comment\n\n \n\n > Although you might consider smart, rather than plain pointers. <\n\n \n\n by merge i mean to combine values of the one line of branches, like on this picture:\n\n \n\n https://i.postimg.cc/6QWrVCKX/Untitled.png\n\n \n\n is there maybe a chance that you write down a minimalistic program - just to demonstrate how this actually works thank you for your reply keskiverto,i think that your spell can do the job, i'll try it as soon as i get to the computer.please explain to me this comment> Although you might consider smart, rather than plain pointers.\n\nYou don't have to use pointers at all :) \n\n you can use a container, like a vector for the memory management, so that when you push_back a new node you can use the vector's integer index where you would have used a pointer. \n\n \n\n I think this has likely been done. I don't like trees, but depending on how hard core and STL like you want this, it may be best to use an existing than recook it. If its for learning or playing, DIY ok. \n\n\n\nhello everybody\n\n \n\n thank you for your replies.\n\n \n\n jonnin, super idea -thanks\n\n2kaud did ask on that other forum:\n\n the more important question is when inserting data into the tree, what is the criteria for creating a new node - or to traverse existing nodes for insertion? \n\n A binary tree can easily have left < root < right. With multiple children the order is in no way obvious.\n\n \n\n That comes back when you search a value from the tree. Binary search can efficiently check ordered container (e.g. a binary tree). The search(T,X) answers question: \"Does tree T contain node with value X?\"\n\n \n\n A search can keep track of values that it has encountered. For example, a depth-first left-to-right search for K's value would collect:\n\n \n\n At this point K was found and collected data should be returned.\n\n If you seek value that is not in your tree, then you will visit every node and will return empty set. did ask on that other forum:A binary tree can easily have. With multiple children the order is in no way obvious.That comes back when you search a value from the tree. Binary search can efficiently check ordered container (e.g. a binary tree). The search(T,X) answers question: \"Does tree T contain node with value X?\"A search can keep track of values that it has encountered. For example, a depth-first left-to-right search for K's value would collect:At this point K was found and collected data should be returned.If you seek value that is not in your tree, then you will visit every node and will return empty set.\n\nN children tree may not always be a search tool, it can be organizational, like a family tree or the business's emergency call list or whatever weird hierarchy. \n\n \n\n I think you can cook up a search tree for an N tree, but you need a fixed N to do that. Otherwise, you just have 1 level where root has a million children. If you have a fixed N, when you reach N you can sort the children of the node and the next one goes to the first child it is less than or off the last one if greater than all, or something like that. then each node becomes its own binary search for which limb to take. Seems messy, but some scheme along those lines (if not exactly this one) should be doable? It may be doable for a variable N as well, but you need a rule for when to go across vs down.\n\nWhen we did this at Univ in the dim and distant past, we had the example of storing words. Each node contained one letter and the branch(s) were to the next letter in the word. So each node had a max of 26 branches and the rules for insertion etc were known. This was all done using memory and pointers. Using a fixed array for the node branches wasn't allowed..."
    },
    {
        "link": "https://en.cppreference.com/w/cpp/container",
        "document": "The Containers library is a generic collection of class templates and algorithms that allow programmers to easily implement common data structures like queues, lists and stacks. There are two(until C++11)three(since C++11) classes of containers:\n\neach of which is designed to support a different set of operations.\n\nThe container manages the storage space that is allocated for its elements and provides member functions to access them, either directly or through iterators (objects with properties similar to pointers).\n\nMost containers have at least several member functions in common, and share functionalities. Which container is the best for the particular application depends not only on the offered functionality, but also on its efficiency for different workloads.\n\nSequence containers implement data structures which can be accessed sequentially.\n\nAssociative containers implement sorted data structures that can be quickly searched (O(log n) complexity).\n\nUnordered associative containers implement unsorted (hashed) data structures that can be quickly searched (O(1) average, O(n) worst-case complexity).\n\nViews provide flexible facilities for interacting with one- or multi-dimensional views over a non-owning array of elements.\n\nRead-only methods never invalidate iterators or references. Methods which modify the contents of a container may invalidate iterators and/or references, as summarized in this table.\n\nHere, insertion refers to any method which adds one or more elements to the container and erasure refers to any method which removes one or more elements from the container.\n• Examples of insertion methods are , , , and .\n• Examples of erasure methods are , , , and .\n• invalidates all iterators and references. Because it erases all elements, this technically complies with the rules above.\n\nUnless otherwise specified (either explicitly or by defining a function in terms of other functions), passing a container as an argument to a library function never invalidate iterators to, or change the values of, objects within that container.\n\nThe past-the-end iterator deserves particular mention. In general this iterator is invalidated as though it were a normal iterator to a non-erased element. So std::set::end is never invalidated, std::unordered_set::end is invalidated only on rehash(since C++11), std::vector::end is always invalidated (since it is always after the modified elements), and so on.\n\nThere is one exception: an erasure which deletes the last element of a std::deque does invalidate the past-the-end iterator, even though it is not an erased element of the container (or an element at all). Combined with the general rules for std::deque iterators, the net result is that the only modifying operation which does not invalidate std::deque::end is an erasure which deletes the first element, but not the last.\n\nNote: std::basic_string is not treated as a container by the standard but behaves much like one due to its similarity. It is listed as 'Pseudo container' here for convenience.\n• Note: functions in two different lines have different meanings and syntax:\n\nThe following behavior-changing defect reports were applied retroactively to previously published C++ standards."
    },
    {
        "link": "https://stackoverflow.com/questions/31225434/can-i-use-a-vector-as-the-underlying-data-storage-for-a-binary-tree",
        "document": "In C++, there are:\n• None statically defined arrays - - for which the dimension must be a compile-time constant,\n• None dynamically allocated arrays a la , where the size can vary at run-time\n• None the Standard library class , which uses dynamically allocated memory and can vary its size at runtime as data is inserted, copying elements from the old to a larger newly dynamically allocated memory area when necessary\n\nThe latter library offerings are generally preferable to using or , as they add Object Oriented features such as member functions for , iterators, and for - a destructor performing automatic destruction of elements and deletion of memory.\n\nIf your tree will have a compile-time constant upper bound to size, you could use a , but would allow dynamic sizing which is a more flexible and robust solution.\n\nMore generally, your question may surprise or confuse C++ programmers as our common practice is to store binary trees having nodes linked by pointers, rather than contiguous storage. What you ask for is still considered a binary tree in Computing Science - see e.g. here - but most of us normally use the Standard library's for this that happens to use nodes linked by pointers."
    },
    {
        "link": "https://opensource.com/article/21/11/c-stdcout-cheat-sheet",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/1449818/formatting-c-console-output",
        "document": "I've been trying to format the output to the console for the longest time and nothing is really happening. I've been trying to use as much of as I can and the out functions.\n\nIs their anything that I can use to get it all properly aligned with each other? The functions that I'm calling are self-explanatory and all of different lengths, so that don't align very well with each other.\n\nI've tried just about everything in ."
    },
    {
        "link": "https://google.github.io/styleguide/cppguide.html",
        "document": "C++ is one of the main development languages used by many of Google's open-source projects. As every C++ programmer knows, the language has many powerful features, but this power brings with it complexity, which in turn can make code more bug-prone and harder to read and maintain.\n\nThe goal of this guide is to manage this complexity by describing in detail the dos and don'ts of writing C++ code. These rules exist to keep the code base manageable while still allowing coders to use C++ language features productively.\n\nStyle, also known as readability, is what we call the conventions that govern our C++ code. The term Style is a bit of a misnomer, since these conventions cover far more than just source file formatting.\n\nMost open-source projects developed by Google conform to the requirements in this guide.\n\nNote that this guide is not a C++ tutorial: we assume that the reader is familiar with the language.\n\nWhy do we have this document?\n\nThere are a few core goals that we believe this guide should serve. These are the fundamental whys that underlie all of the individual rules. By bringing these ideas to the fore, we hope to ground discussions and make it clearer to our broader community why the rules are in place and why particular decisions have been made. If you understand what goals each rule is serving, it should be clearer to everyone when a rule may be waived (some can be), and what sort of argument or alternative would be necessary to change a rule in the guide.\n\nThe goals of the style guide as we currently see them are as follows:\n\nThe intent of this document is to provide maximal guidance with reasonable restriction. As always, common sense and good taste should prevail. By this we specifically refer to the established conventions of the entire Google C++ community, not just your personal preferences or those of your team. Be skeptical about and reluctant to use clever or unusual constructs: the absence of a prohibition is not the same as a license to proceed. Use your judgment, and if you are unsure, please don't hesitate to ask your project leads to get additional input.\n\nCurrently, code should target C++20, i.e., should not use C++23 features. The C++ version targeted by this guide will advance (aggressively) over time.\n\nDo not use non-standard extensions.\n\nIn general, every file should have an associated file. There are some common exceptions, such as unit tests and small files containing just a function.\n\nCorrect use of header files can make a huge difference to the readability, size and performance of your code.\n\nThe following rules will guide you through the various pitfalls of using header files.\n\nHeader files should be self-contained (compile on their own) and end in . Non-header files that are meant for inclusion should end in and be used sparingly.\n\nAll header files should be self-contained. Users and refactoring tools should not have to adhere to special conditions to include the header. Specifically, a header should have header guards and include all other headers it needs.\n\nWhen a header declares inline functions or templates that clients of the header will instantiate, the inline functions and templates must also have definitions in the header, either directly or in files it includes. Do not move these definitions to separately included header ( ) files; this practice was common in the past, but is no longer allowed. When all instantiations of a template occur in one file, either because they're explicit or because the definition is accessible to only the file, the template definition can be kept in that file.\n\nThere are rare cases where a file designed to be included is not self-contained. These are typically intended to be included at unusual locations, such as the middle of another file. They might not use header guards, and might not include their prerequisites. Name such files with the extension. Use sparingly, and prefer self-contained headers when possible.\n\nAll header files should have guards to prevent multiple inclusion. The format of the symbol name should be .\n\nInclude What You Use\n\nIf a source or header file refers to a symbol defined elsewhere, the file should directly include a header file which properly intends to provide a declaration or definition of that symbol. It should not include header files for any other reason.\n\nDo not rely on transitive inclusions. This allows people to remove no-longer-needed statements from their headers without breaking clients. This also applies to related headers - should include if it uses a symbol from it even if includes .\n\nAvoid using forward declarations where possible. Instead, include the headers you need.\n\nA \"forward declaration\" is a declaration of an entity without an associated definition.\n• Forward declarations can save compile time, as s force the compiler to open more files and process more input.\n• Forward declarations can save on unnecessary recompilation. s can force your code to be recompiled more often, due to unrelated changes in the header.\n• Forward declarations can hide a dependency, allowing user code to skip necessary recompilation when headers change.\n• A forward declaration as opposed to an statement makes it difficult for automatic tooling to discover the module defining the symbol.\n• A forward declaration may be broken by subsequent changes to the library. Forward declarations of functions and templates can prevent the header owners from making otherwise-compatible changes to their APIs, such as widening a parameter type, adding a template parameter with a default value, or migrating to a new namespace.\n• It can be difficult to determine whether a forward declaration or a full is needed. Replacing an with a forward declaration can silently change the meaning of code: If the was replaced with forward decls for and , would call .\n• Forward declaring multiple symbols from a header can be more verbose than simply ing the header.\n• Structuring code to enable forward declarations (e.g., using pointer members instead of object members) can make the code slower and more complex.\n\nTry to avoid forward declarations of entities defined in another project.\n\nDefine functions inline only when they are small, say, 10 lines or fewer.\n\nYou can declare functions in a way that allows the compiler to expand them inline rather than calling them through the usual function call mechanism.\n\nInlining a function can generate more efficient object code, as long as the inlined function is small. Feel free to inline accessors and mutators, and other short, performance-critical functions.\n\nOveruse of inlining can actually make programs slower. Depending on a function's size, inlining it can cause the code size to increase or decrease. Inlining a very small accessor function will usually decrease code size while inlining a very large function can dramatically increase code size. On modern processors smaller code usually runs faster due to better use of the instruction cache.\n\nA decent rule of thumb is to not inline a function if it is more than 10 lines long. Beware of destructors, which are often longer than they appear because of implicit member- and base-destructor calls!\n\nAnother useful rule of thumb: it's typically not cost effective to inline functions with loops or switch statements (unless, in the common case, the loop or switch statement is never executed).\n\nIt is important to know that functions are not always inlined even if they are declared as such; for example, virtual and recursive functions are not normally inlined. Usually recursive functions should not be inline. The main reason for making a virtual function inline is to place its definition in the class, either for convenience or to document its behavior, e.g., for accessors and mutators.\n\nInclude headers in the following order: Related header, C system headers, C++ standard library headers, other libraries' headers, your project's headers.\n\nAll of a project's header files should be listed as descendants of the project's source directory without use of UNIX directory aliases (the current directory) or (the parent directory). For example, should be included as:\n\nHeaders should only be included using an angle-bracketed path if the library requires you to do so. In particular, the following headers require angle brackets:\n• C and C++ standard library headers (e.g. and ).\n\nIn or , whose main purpose is to implement or test the stuff in , order your includes as follows:\n• C system headers, and any other headers in angle brackets with the extension, e.g., , , .\n\nSeparate each non-empty group with one blank line.\n\nWith the preferred ordering, if the related header omits any necessary includes, the build of or will break. Thus, this rule ensures that build breaks show up first for the people working on these files, not for innocent people in other packages.\n\nand are usually in the same directory (e.g., and ), but may sometimes be in different directories too.\n\nNote that the C headers such as are essentially interchangeable with their C++ counterparts ( ). Either style is acceptable, but prefer consistency with existing code.\n\nWithin each section the includes should be ordered alphabetically. Note that older code might not conform to this rule and should be fixed when convenient.\n\nFor example, the includes in might look like this:\n\nSometimes, system-specific code needs conditional includes. Such code can put conditional includes after other includes. Of course, keep your system-specific code small and localized. Example:\n\nWith few exceptions, place code in a namespace. Namespaces should have unique names based on the project name, and possibly its path. Do not use using-directives (e.g., ). Do not use inline namespaces. For unnamed namespaces, see Internal Linkage.\n\nNamespaces subdivide the global scope into distinct, named scopes, and so are useful for preventing name collisions in the global scope.\n\nNamespaces provide a method for preventing name conflicts in large programs while allowing most code to use reasonably short names.\n\nFor example, if two different projects have a class in the global scope, these symbols may collide at compile time or at runtime. If each project places their code in a namespace, and are now distinct symbols that do not collide, and code within each project's namespace can continue to refer to without the prefix.\n\nInline namespaces automatically place their names in the enclosing scope. Consider the following snippet, for example:\n\nThe expressions and are interchangeable. Inline namespaces are primarily intended for ABI compatibility across versions.\n\nNamespaces can be confusing, because they complicate the mechanics of figuring out what definition a name refers to.\n\nInline namespaces, in particular, can be confusing because names aren't actually restricted to the namespace where they are declared. They are only useful as part of some larger versioning policy.\n\nIn some contexts, it's necessary to repeatedly refer to symbols by their fully-qualified names. For deeply-nested namespaces, this can add a lot of clutter.\n\nNamespaces should be used as follows:\n• Terminate multi-line namespaces with comments as shown in the given examples.\n• Namespaces wrap the entire source file after includes, gflags definitions/declarations and forward declarations of classes from other namespaces. // In the .h file namespace mynamespace { // All declarations are within the namespace scope. // Notice the lack of indentation. class MyClass { public: ... void Foo(); }; } // namespace mynamespace // In the .cc file namespace mynamespace { // Definition of functions is within scope of the namespace. void MyClass::Foo() { ... } } // namespace mynamespace More complex files might have additional details, like flags or using-declarations. #include \"a.h\" ABSL_FLAG(bool, someflag, false, \"a flag\"); namespace mynamespace { using ::foo::Bar; ...code for mynamespace... // Code goes against the left margin. } // namespace mynamespace\n• To place generated protocol message code in a namespace, use the specifier in the file. See Protocol Buffer Packages for details.\n• Do not declare anything in namespace , including forward declarations of standard library classes. Declaring entities in namespace is undefined behavior, i.e., not portable. To declare entities from the standard library, include the appropriate header file.\n• None You may not use a using-directive to make all names from a namespace available. // Forbidden -- This pollutes the namespace. using namespace foo;\n• None Do not use Namespace aliases at namespace scope in header files except in explicitly marked internal-only namespaces, because anything imported into a namespace in a header file becomes part of the public API exported by that file. // Shorten access to some commonly used names in .cc files. namespace baz = ::foo::bar::baz; // Shorten access to some commonly used names (in a .h file). namespace librarian { namespace internal { // Internal, not part of the API. namespace sidetable = ::pipeline_diagnostics::sidetable; } // namespace internal inline void my_inline_function() { // namespace alias local to a function (or method). namespace baz = ::foo::bar::baz; ... } } // namespace librarian\n• Do not use inline namespaces.\n• None Use namespaces with \"internal\" in the name to document parts of an API that should not be mentioned by users of the API. // We shouldn't use this internal name in non-absl code. using ::absl::container_internal::ImplementationDetail;\n• None Single-line nested namespace declarations are preferred in new code, but are not required.\n\nWhen definitions in a file do not need to be referenced outside that file, give them internal linkage by placing them in an unnamed namespace or declaring them . Do not use either of these constructs in files.\n\nAll declarations can be given internal linkage by placing them in unnamed namespaces. Functions and variables can also be given internal linkage by declaring them . This means that anything you're declaring can't be accessed from another file. If a different file declares something with the same name, then the two entities are completely independent.\n\nUse of internal linkage in files is encouraged for all code that does not need to be referenced elsewhere. Do not use internal linkage in files.\n\nFormat unnamed namespaces like named namespaces. In the terminating comment, leave the namespace name empty:\n\nPrefer placing nonmember functions in a namespace; use completely global functions rarely. Do not use a class simply to group static members. Static methods of a class should generally be closely related to instances of the class or the class's static data.\n\nNonmember and static member functions can be useful in some situations. Putting nonmember functions in a namespace avoids polluting the global namespace.\n\nNonmember and static member functions may make more sense as members of a new class, especially if they access external resources or have significant dependencies.\n\nSometimes it is useful to define a function not bound to a class instance. Such a function can be either a static member or a nonmember function. Nonmember functions should not depend on external variables, and should nearly always exist in a namespace. Do not create classes only to group static members; this is no different than just giving the names a common prefix, and such grouping is usually unnecessary anyway.\n\nIf you define a nonmember function and it is only needed in its file, use internal linkage to limit its scope.\n\nPlace a function's variables in the narrowest scope possible, and initialize variables in the declaration.\n\nC++ allows you to declare variables anywhere in a function. We encourage you to declare them in a scope as local as possible, and as close to the first use as possible. This makes it easier for the reader to find the declaration and see what type the variable is and what it was initialized to. In particular, initialization should be used instead of declaration and assignment, e.g.,:\n\nVariables needed for , and statements should normally be declared within those statements, so that such variables are confined to those scopes. E.g.:\n\nThere is one caveat: if the variable is an object, its constructor is invoked every time it enters scope and is created, and its destructor is invoked every time it goes out of scope.\n\nIt may be more efficient to declare such a variable used in a loop outside that loop:\n\nObjects with static storage duration are forbidden unless they are trivially destructible. Informally this means that the destructor does not do anything, even taking member and base destructors into account. More formally it means that the type has no user-defined or virtual destructor and that all bases and non-static members are trivially destructible. Static function-local variables may use dynamic initialization. Use of dynamic initialization for static class member variables or variables at namespace scope is discouraged, but allowed in limited circumstances; see below for details.\n\nAs a rule of thumb: a global variable satisfies these requirements if its declaration, considered in isolation, could be .\n\nEvery object has a , which correlates with its lifetime. Objects with static storage duration live from the point of their initialization until the end of the program. Such objects appear as variables at namespace scope (\"global variables\"), as static data members of classes, or as function-local variables that are declared with the specifier. Function-local static variables are initialized when control first passes through their declaration; all other objects with static storage duration are initialized as part of program start-up. All objects with static storage duration are destroyed at program exit (which happens before unjoined threads are terminated).\n\nInitialization may be , which means that something non-trivial happens during initialization. (For example, consider a constructor that allocates memory, or a variable that is initialized with the current process ID.) The other kind of initialization is initialization. The two aren't quite opposites, though: static initialization always happens to objects with static storage duration (initializing the object either to a given constant or to a representation consisting of all bytes set to zero), whereas dynamic initialization happens after that, if required.\n\nGlobal and static variables are very useful for a large number of applications: named constants, auxiliary data structures internal to some translation unit, command-line flags, logging, registration mechanisms, background infrastructure, etc.\n\nGlobal and static variables that use dynamic initialization or have non-trivial destructors create complexity that can easily lead to hard-to-find bugs. Dynamic initialization is not ordered across translation units, and neither is destruction (except that destruction happens in reverse order of initialization). When one initialization refers to another variable with static storage duration, it is possible that this causes an object to be accessed before its lifetime has begun (or after its lifetime has ended). Moreover, when a program starts threads that are not joined at exit, those threads may attempt to access objects after their lifetime has ended if their destructor has already run.\n\nWhen destructors are trivial, their execution is not subject to ordering at all (they are effectively not \"run\"); otherwise we are exposed to the risk of accessing objects after the end of their lifetime. Therefore, we only allow objects with static storage duration if they are trivially destructible. Fundamental types (like pointers and ) are trivially destructible, as are arrays of trivially destructible types. Note that variables marked with are trivially destructible.\n\nNote that references are not objects, and thus they are not subject to the constraints on destructibility. The constraint on dynamic initialization still applies, though. In particular, a function-local static reference of the form is allowed.\n\nInitialization is a more complex topic. This is because we must not only consider whether class constructors execute, but we must also consider the evaluation of the initializer:\n\nAll but the first statement expose us to indeterminate initialization ordering.\n\nThe concept we are looking for is called constant initialization in the formal language of the C++ standard. It means that the initializing expression is a constant expression, and if the object is initialized by a constructor call, then the constructor must be specified as , too:\n\nConstant initialization is always allowed. Constant initialization of static storage duration variables should be marked with or . Any non-local static storage duration variable that is not so marked should be presumed to have dynamic initialization, and reviewed very carefully.\n\nBy contrast, the following initializations are problematic:\n\nDynamic initialization of nonlocal variables is discouraged, and in general it is forbidden. However, we do permit it if no aspect of the program depends on the sequencing of this initialization with respect to all other initializations. Under those restrictions, the ordering of the initialization does not make an observable difference. For example:\n\nDynamic initialization of static local variables is allowed (and common).\n• Global strings: if you require a named global or static string constant, consider using a variable of , character array, or character pointer, pointing to a string literal. String literals have static storage duration already and are usually sufficient. See TotW #140.\n• Maps, sets, and other dynamic containers: if you require a static, fixed collection, such as a set to search against or a lookup table, you cannot use the dynamic containers from the standard library as a static variable, since they have non-trivial destructors. Instead, consider a simple array of trivial types, e.g., an array of arrays of ints (for a \"map from int to int\"), or an array of pairs (e.g., pairs of and ). For small collections, linear search is entirely sufficient (and efficient, due to memory locality); consider using the facilities from absl/algorithm/container.h for the standard operations. If necessary, keep the collection in sorted order and use a binary search algorithm. If you do really prefer a dynamic container from the standard library, consider using a function-local static pointer, as described below .\n• Smart pointers ( , ): smart pointers execute cleanup during destruction and are therefore forbidden. Consider whether your use case fits into one of the other patterns described in this section. One simple solution is to use a plain pointer to a dynamically allocated object and never delete it (see last item).\n• Static variables of custom types: if you require static, constant data of a type that you need to define yourself, give the type a trivial destructor and a constructor.\n• If all else fails, you can create an object dynamically and never delete it by using a function-local static pointer or reference (e.g., ).\n\nvariables that aren't declared inside a function must be initialized with a true compile-time constant, and this must be enforced by using the attribute. Prefer over other ways of defining thread-local data.\n\nVariables can be declared with the specifier:\n\nSuch a variable is actually a collection of objects, so that when different threads access it, they are actually accessing different objects. variables are much like static storage duration variables in many respects. For instance, they can be declared at namespace scope, inside functions, or as static class members, but not as ordinary class members.\n\nvariable instances are initialized much like static variables, except that they must be initialized separately for each thread, rather than once at program startup. This means that variables declared within a function are safe, but other variables are subject to the same initialization-order issues as static variables (and more besides).\n\nvariables have a subtle destruction-order issue: during thread shutdown, variables will be destroyed in the opposite order of their initialization (as is generally true in C++). If code triggered by the destructor of any variable refers to any already-destroyed on that thread, we will get a particularly hard to diagnose use-after-free.\n• Thread-local data is inherently safe from races (because only one thread can ordinarily access it), which makes useful for concurrent programming.\n• is the only standard-supported way of creating thread-local data.\n• Accessing a variable may trigger execution of an unpredictable and uncontrollable amount of other code during thread-start or first use on a given thread.\n• variables are effectively global variables, and have all the drawbacks of global variables other than lack of thread-safety.\n• The memory consumed by a variable scales with the number of running threads (in the worst case), which can be quite large in a program.\n• Data members cannot be unless they are also .\n• We may suffer from use-after-free bugs if variables have complex destructors. In particular, the destructor of any such variable must not call any code (transitively) that refers to any potentially-destroyed . This property is hard to enforce.\n• Approaches for avoiding use-after-free in global/static contexts do not work for s. Specifically, skipping destructors for globals and static variables is allowable because their lifetimes end at program shutdown. Thus, any \"leak\" is managed immediately by the OS cleaning up our memory and other resources. By contrast, skipping destructors for variables leads to resource leaks proportional to the total number of threads that terminate during the lifetime of the program.\n\nvariables at class or namespace scope must be initialized with a true compile-time constant (i.e., they must have no dynamic initialization). To enforce this, variables at class or namespace scope must be annotated with (or , but that should be rare):\n\nvariables inside a function have no initialization concerns, but still risk use-after-free during thread exit. Note that you can use a function-scope to simulate a class- or namespace-scope by defining a function or static method that exposes it:\n\nNote that variables will be destroyed whenever a thread exits. If the destructor of any such variable refers to any other (potentially-destroyed) we will suffer from hard to diagnose use-after-free bugs. Prefer trivial types, or types that provably run no user-provided code at destruction to minimize the potential of accessing any other .\n\nshould be preferred over other mechanisms for defining thread-local data.\n\nClasses are the fundamental unit of code in C++. Naturally, we use them extensively. This section lists the main dos and don'ts you should follow when writing a class.\n\nAvoid virtual method calls in constructors, and avoid initialization that can fail if you can't signal an error.\n\nIt is possible to perform arbitrary initialization in the body of the constructor.\n• No need to worry about whether the class has been initialized or not.\n• Objects that are fully initialized by constructor call can be and may also be easier to use with standard containers or algorithms.\n• If the work calls virtual functions, these calls will not get dispatched to the subclass implementations. Future modification to your class can quietly introduce this problem even if your class is not currently subclassed, causing much confusion.\n• There is no easy way for constructors to signal errors, short of crashing the program (not always appropriate) or using exceptions (which are forbidden).\n• If the work fails, we now have an object whose initialization code failed, so it may be an unusual state requiring a state checking mechanism (or similar) which is easy to forget to call.\n• You cannot take the address of a constructor, so whatever work is done in the constructor cannot easily be handed off to, for example, another thread.\n\nConstructors should never call virtual functions. If appropriate for your code , terminating the program may be an appropriate error handling response. Otherwise, consider a factory function or method as described in TotW #42. Avoid methods on objects with no other states that affect which public methods may be called (semi-constructed objects of this form are particularly hard to work with correctly).\n\nDo not define implicit conversions. Use the keyword for conversion operators and single-argument constructors.\n\nImplicit conversions allow an object of one type (called the ) to be used where a different type (called the ) is expected, such as when passing an argument to a function that takes a parameter.\n\nIn addition to the implicit conversions defined by the language, users can define their own, by adding appropriate members to the class definition of the source or destination type. An implicit conversion in the source type is defined by a type conversion operator named after the destination type (e.g., ). An implicit conversion in the destination type is defined by a constructor that can take the source type as its only argument (or only argument with no default value).\n\nThe keyword can be applied to a constructor or a conversion operator, to ensure that it can only be used when the destination type is explicit at the point of use, e.g., with a cast. This applies not only to implicit conversions, but to list initialization syntax:\n\nThis kind of code isn't technically an implicit conversion, but the language treats it as one as far as is concerned.\n• Implicit conversions can make a type more usable and expressive by eliminating the need to explicitly name a type when it's obvious.\n• Implicit conversions can be a simpler alternative to overloading, such as when a single function with a parameter takes the place of separate overloads for and .\n• List initialization syntax is a concise and expressive way of initializing objects.\n• Implicit conversions can hide type-mismatch bugs, where the destination type does not match the user's expectation, or the user is unaware that any conversion will take place.\n• Implicit conversions can make code harder to read, particularly in the presence of overloading, by making it less obvious what code is actually getting called.\n• Constructors that take a single argument may accidentally be usable as implicit type conversions, even if they are not intended to do so.\n• When a single-argument constructor is not marked , there's no reliable way to tell whether it's intended to define an implicit conversion, or the author simply forgot to mark it.\n• Implicit conversions can lead to call-site ambiguities, especially when there are bidirectional implicit conversions. This can be caused either by having two types that both provide an implicit conversion, or by a single type that has both an implicit constructor and an implicit type conversion operator.\n• List initialization can suffer from the same problems if the destination type is implicit, particularly if the list has only a single element.\n\nType conversion operators, and constructors that are callable with a single argument, must be marked in the class definition. As an exception, copy and move constructors should not be , since they do not perform type conversion.\n\nImplicit conversions can sometimes be necessary and appropriate for types that are designed to be interchangeable, for example when objects of two types are just different representations of the same underlying value. In that case, contact your project leads to request a waiver of this rule.\n\nConstructors that cannot be called with a single argument may omit . Constructors that take a single parameter should also omit , in order to support copy-initialization (e.g., ).\n\nA class's public API must make clear whether the class is copyable, move-only, or neither copyable nor movable. Support copying and/or moving if these operations are clear and meaningful for your type.\n\nA movable type is one that can be initialized and assigned from temporaries.\n\nA copyable type is one that can be initialized or assigned from any other object of the same type (so is also movable by definition), with the stipulation that the value of the source does not change. is an example of a movable but not copyable type (since the value of the source must be modified during assignment to the destination). and are examples of movable types that are also copyable. (For , the move and copy operations are the same; for , there exists a move operation that is less expensive than a copy.)\n\nFor user-defined types, the copy behavior is defined by the copy constructor and the copy-assignment operator. Move behavior is defined by the move constructor and the move-assignment operator, if they exist, or by the copy constructor and the copy-assignment operator otherwise.\n\nThe copy/move constructors can be implicitly invoked by the compiler in some situations, e.g., when passing objects by value.\n\nObjects of copyable and movable types can be passed and returned by value, which makes APIs simpler, safer, and more general. Unlike when passing objects by pointer or reference, there's no risk of confusion over ownership, lifetime, mutability, and similar issues, and no need to specify them in the contract. It also prevents non-local interactions between the client and the implementation, which makes them easier to understand, maintain, and optimize by the compiler. Further, such objects can be used with generic APIs that require pass-by-value, such as most containers, and they allow for additional flexibility in e.g., type composition.\n\nCopy/move constructors and assignment operators are usually easier to define correctly than alternatives like , or , because they can be generated by the compiler, either implicitly or with . They are concise, and ensure that all data members are copied. Copy and move constructors are also generally more efficient, because they don't require heap allocation or separate initialization and assignment steps, and they're eligible for optimizations such as copy elision.\n\nMove operations allow the implicit and efficient transfer of resources out of rvalue objects. This allows a plainer coding style in some cases.\n\nSome types do not need to be copyable, and providing copy operations for such types can be confusing, nonsensical, or outright incorrect. Types representing singleton objects ( ), objects tied to a specific scope ( ), or closely coupled to object identity ( ) cannot be copied meaningfully. Copy operations for base class types that are to be used polymorphically are hazardous, because use of them can lead to object slicing. Defaulted or carelessly-implemented copy operations can be incorrect, and the resulting bugs can be confusing and difficult to diagnose.\n\nCopy constructors are invoked implicitly, which makes the invocation easy to miss. This may cause confusion for programmers used to languages where pass-by-reference is conventional or mandatory. It may also encourage excessive copying, which can cause performance problems.\n\nEvery class's public interface must make clear which copy and move operations the class supports. This should usually take the form of explicitly declaring and/or deleting the appropriate operations in the section of the declaration.\n\nSpecifically, a copyable class should explicitly declare the copy operations, a move-only class should explicitly declare the move operations, and a non-copyable/movable class should explicitly delete the copy operations. A copyable class may also declare move operations in order to support efficient moves. Explicitly declaring or deleting all four copy/move operations is permitted, but not required. If you provide a copy or move assignment operator, you must also provide the corresponding constructor.\n\nThese declarations/deletions can be omitted only if they are obvious:\n• If the class has no section, like a struct or an interface-only base class, then the copyability/movability can be determined by the copyability/movability of any public data members.\n• If a base class clearly isn't copyable or movable, derived classes naturally won't be either. An interface-only base class that leaves these operations implicit is not sufficient to make concrete subclasses clear.\n• Note that if you explicitly declare or delete either the constructor or assignment operation for copy, the other copy operation is not obvious and must be declared or deleted. Likewise for move operations.\n\nA type should not be copyable/movable if the meaning of copying/moving is unclear to a casual user, or if it incurs unexpected costs. Move operations for copyable types are strictly a performance optimization and are a potential source of bugs and complexity, so avoid defining them unless they are significantly more efficient than the corresponding copy operations. If your type provides copy operations, it is recommended that you design your class so that the default implementation of those operations is correct. Remember to review the correctness of any defaulted operations as you would any other code.\n\nTo eliminate the risk of slicing, prefer to make base classes abstract, by making their constructors protected, by declaring their destructors protected, or by giving them one or more pure virtual member functions. Prefer to avoid deriving from concrete classes.\n\nUse a only for passive objects that carry data; everything else is a .\n\nThe and keywords behave almost identically in C++. We add our own semantic meanings to each keyword, so you should use the appropriate keyword for the data-type you're defining.\n\nshould be used for passive objects that carry data, and may have associated constants. All fields must be public. The struct must not have invariants that imply relationships between different fields, since direct user access to those fields may break those invariants. Constructors, destructors, and helper methods may be present; however, these methods must not require or enforce any invariants.\n\nIf more functionality or invariants are required, or struct has wide visibility and expected to evolve, then a is more appropriate. If in doubt, make it a .\n\nFor consistency with STL, you can use instead of for stateless types, such as traits, template metafunctions, and some functors.\n\nNote that member variables in structs and classes have different naming rules.\n\nPrefer to use a instead of a pair or a tuple whenever the elements can have meaningful names.\n\nWhile using pairs and tuples can avoid the need to define a custom type, potentially saving work when writing code, a meaningful field name will almost always be much clearer when reading code than , , or . While C++14's introduction of to access a tuple element by type rather than index (when the type is unique) can sometimes partially mitigate this, a field name is usually substantially clearer and more informative than a type.\n\nPairs and tuples may be appropriate in generic code where there are not specific meanings for the elements of the pair or tuple. Their use may also be required in order to interoperate with existing code or APIs.\n\nComposition is often more appropriate than inheritance. When using inheritance, make it .\n\nWhen a sub-class inherits from a base class, it includes the definitions of all the data and operations that the base class defines. \"Interface inheritance\" is inheritance from a pure abstract base class (one with no state or defined methods); all other inheritance is \"implementation inheritance\".\n\nImplementation inheritance reduces code size by re-using the base class code as it specializes an existing type. Because inheritance is a compile-time declaration, you and the compiler can understand the operation and detect errors. Interface inheritance can be used to programmatically enforce that a class expose a particular API. Again, the compiler can detect errors, in this case, when a class does not define a necessary method of the API.\n\nFor implementation inheritance, because the code implementing a sub-class is spread between the base and the sub-class, it can be more difficult to understand an implementation. The sub-class cannot override functions that are not virtual, so the sub-class cannot change implementation.\n\nMultiple inheritance is especially problematic, because it often imposes a higher performance overhead (in fact, the performance drop from single inheritance to multiple inheritance can often be greater than the performance drop from ordinary to virtual dispatch), and because it risks leading to \"diamond\" inheritance patterns, which are prone to ambiguity, confusion, and outright bugs.\n\nAll inheritance should be . If you want to do private inheritance, you should be including an instance of the base class as a member instead. You may use on classes when you don't intend to support using them as base classes.\n\nDo not overuse implementation inheritance. Composition is often more appropriate. Try to restrict use of inheritance to the \"is-a\" case: subclasses if it can reasonably be said that \"is a kind of\" .\n\nLimit the use of to those member functions that might need to be accessed from subclasses. Note that data members should be .\n\nExplicitly annotate overrides of virtual functions or virtual destructors with exactly one of an or (less frequently) specifier. Do not use when declaring an override. Rationale: A function or destructor marked or that is not an override of a base class virtual function will not compile, and this helps catch common errors. The specifiers serve as documentation; if no specifier is present, the reader has to check all ancestors of the class in question to determine if the function or destructor is virtual or not.\n\nMultiple inheritance is permitted, but multiple implementation inheritance is strongly discouraged.\n\nOverload operators judiciously. Do not use user-defined literals.\n\nC++ permits user code to declare overloaded versions of the built-in operators using the keyword, so long as one of the parameters is a user-defined type. The keyword also permits user code to define new kinds of literals using , and to define type-conversion functions such as .\n\nOperator overloading can make code more concise and intuitive by enabling user-defined types to behave the same as built-in types. Overloaded operators are the idiomatic names for certain operations (e.g., , , , and ), and adhering to those conventions can make user-defined types more readable and enable them to interoperate with libraries that expect those names.\n\nUser-defined literals are a very concise notation for creating objects of user-defined types.\n• Providing a correct, consistent, and unsurprising set of operator overloads requires some care, and failure to do so can lead to confusion and bugs.\n• Overuse of operators can lead to obfuscated code, particularly if the overloaded operator's semantics don't follow convention.\n• The hazards of function overloading apply just as much to operator overloading, if not more so.\n• Operator overloads can fool our intuition into thinking that expensive operations are cheap, built-in operations.\n• Finding the call sites for overloaded operators may require a search tool that's aware of C++ syntax, rather than e.g., grep.\n• If you get the argument type of an overloaded operator wrong, you may get a different overload rather than a compiler error. For example, may do one thing, while does something totally different.\n• Certain operator overloads are inherently hazardous. Overloading unary can cause the same code to have different meanings depending on whether the overload declaration is visible. Overloads of , , and (comma) cannot match the evaluation-order semantics of the built-in operators.\n• Operators are often defined outside the class, so there's a risk of different files introducing different definitions of the same operator. If both definitions are linked into the same binary, this results in undefined behavior, which can manifest as subtle run-time bugs.\n• User-defined literals (UDLs) allow the creation of new syntactic forms that are unfamiliar even to experienced C++ programmers, such as as a shorthand for . Existing notations are clearer, though less terse.\n• Because they can't be namespace-qualified, uses of UDLs also require use of either using-directives (which we ban) or using-declarations (which we ban in header files except when the imported names are part of the interface exposed by the header file in question). Given that header files would have to avoid UDL suffixes, we prefer to avoid having conventions for literals differ between header files and source files.\n\nDefine overloaded operators only if their meaning is obvious, unsurprising, and consistent with the corresponding built-in operators. For example, use as a bitwise- or logical-or, not as a shell-style pipe.\n\nDefine operators only on your own types. More precisely, define them in the same headers, files, and namespaces as the types they operate on. That way, the operators are available wherever the type is, minimizing the risk of multiple definitions. If possible, avoid defining operators as templates, because they must satisfy this rule for any possible template arguments. If you define an operator, also define any related operators that make sense, and make sure they are defined consistently.\n\nPrefer to define non-modifying binary operators as non-member functions. If a binary operator is defined as a class member, implicit conversions will apply to the right-hand argument, but not the left-hand one. It will confuse your users if compiles but doesn't.\n\nFor a type whose values can be compared for equality, define a non-member and document when two values of type are considered equal. If there is a single obvious notion of when a value of type is less than another such value then you may also define , which should be consistent with . Prefer not to overload the other comparison and ordering operators.\n\nDon't go out of your way to avoid defining operator overloads. For example, prefer to define , , and , rather than , , and . Conversely, don't define operator overloads just because other libraries expect them. For example, if your type doesn't have a natural ordering, but you want to store it in a , use a custom comparator rather than overloading .\n\nDo not overload , , (comma), or unary . Do not overload , i.e., do not introduce user-defined literals. Do not use any such literals provided by others (including the standard library).\n\nType conversion operators are covered in the section on implicit conversions. The operator is covered in the section on copy constructors. Overloading for use with streams is covered in the section on streams. See also the rules on function overloading, which apply to operator overloading as well.\n\nMake classes' data members , unless they are constants. This simplifies reasoning about invariants, at the cost of some easy boilerplate in the form of accessors (usually ) if necessary.\n\nFor technical reasons, we allow data members of a test fixture class defined in a file to be when using Google Test. If a test fixture class is defined outside of the file it is used in, for example in a file, make data members .\n\nA class definition should usually start with a section, followed by , then . Omit sections that would be empty.\n\nWithin each section, prefer grouping similar kinds of declarations together, and prefer the following order:\n• Types and type aliases ( , , , nested structs and classes, and types)\n• (Optionally, for structs only) non- data members\n• All other functions ( and non- member functions, and functions)\n• All other data members (static and non-static)\n\nDo not put large method definitions inline in the class definition. Usually, only trivial or performance-critical, and very short, methods may be defined inline. See Inline Functions for more details.\n\nThe output of a C++ function is naturally provided via a return value and sometimes via output parameters (or in/out parameters).\n\nPrefer using return values over output parameters: they improve readability, and often provide the same or better performance.\n\nPrefer to return by value or, failing that, return by reference. Avoid returning a raw pointer unless it can be null.\n\nParameters are either inputs to the function, outputs from the function, or both. Non-optional input parameters should usually be values or references, while non-optional output and input/output parameters should usually be references (which cannot be null). Generally, use to represent optional by-value inputs, and use a pointer when the non-optional form would have used a reference. Use non- pointers to represent optional outputs and optional input/output parameters.\n\nAvoid defining functions that require a reference parameter to outlive the call. In some cases reference parameters can bind to temporaries, leading to lifetime bugs. Instead, find a way to eliminate the lifetime requirement (for example, by copying the parameter), or pass retained parameters by pointer and document the lifetime and non-null requirements.\n\nWhen ordering function parameters, put all input-only parameters before any output parameters. In particular, do not add new parameters to the end of the function just because they are new; place new input-only parameters before the output parameters. This is not a hard-and-fast rule. Parameters that are both input and output muddy the waters, and, as always, consistency with related functions may require you to bend the rule. Variadic functions may also require unusual parameter ordering.\n\nWe recognize that long functions are sometimes appropriate, so no hard limit is placed on functions length. If a function exceeds about 40 lines, think about whether it can be broken up without harming the structure of the program.\n\nEven if your long function works perfectly now, someone modifying it in a few months may add new behavior. This could result in bugs that are hard to find. Keeping your functions short and simple makes it easier for other people to read and modify your code. Small functions are also easier to test.\n\nYou could find long and complicated functions when working with some code. Do not be intimidated by modifying existing code: if working with such a function proves to be difficult, you find that errors are hard to debug, or you want to use a piece of it in several different contexts, consider breaking up the function into smaller and more manageable pieces.\n\nUse overloaded functions (including constructors) only if a reader looking at a call site can get a good idea of what is happening without having to first figure out exactly which overload is being called.\n\nYou may write a function that takes a and overload it with another that takes . However, in this case consider instead.\n\nOverloading can make code more intuitive by allowing an identically-named function to take different arguments. It may be necessary for templatized code, and it can be convenient for Visitors.\n\nOverloading based on or ref qualification may make utility code more usable, more efficient, or both. (See TotW 148 for more.)\n\nIf a function is overloaded by the argument types alone, a reader may have to understand C++'s complex matching rules in order to tell what's going on. Also many people are confused by the semantics of inheritance if a derived class overrides only some of the variants of a function.\n\nYou may overload a function when there are no semantic differences between variants. These overloads may vary in types, qualifiers, or argument count. However, a reader of such a call must not need to know which member of the overload set is chosen, only that something from the set is being called. If you can document all entries in the overload set with a single comment in the header, that is a good sign that it is a well-designed overload set.\n\nDefault arguments are allowed on non-virtual functions when the default is guaranteed to always have the same value. Follow the same restrictions as for function overloading, and prefer overloaded functions if the readability gained with default arguments doesn't outweigh the downsides below.\n\nOften you have a function that uses default values, but occasionally you want to override the defaults. Default parameters allow an easy way to do this without having to define many functions for the rare exceptions. Compared to overloading the function, default arguments have a cleaner syntax, with less boilerplate and a clearer distinction between 'required' and 'optional' arguments.\n\nDefaulted arguments are another way to achieve the semantics of overloaded functions, so all the reasons not to overload functions apply.\n\nThe defaults for arguments in a virtual function call are determined by the static type of the target object, and there's no guarantee that all overrides of a given function declare the same defaults.\n\nDefault parameters are re-evaluated at each call site, which can bloat the generated code. Readers may also expect the default's value to be fixed at the declaration instead of varying at each call.\n\nFunction pointers are confusing in the presence of default arguments, since the function signature often doesn't match the call signature. Adding function overloads avoids these problems.\n\nDefault arguments are banned on virtual functions, where they don't work properly, and in cases where the specified default might not evaluate to the same value depending on when it was evaluated. (For example, don't write .)\n\nIn some other cases, default arguments can improve the readability of their function declarations enough to overcome the downsides above, so they are allowed. When in doubt, use overloads.\n\nUse trailing return types only where using the ordinary syntax (leading return types) is impractical or much less readable.\n\nC++ allows two different forms of function declarations. In the older form, the return type appears before the function name. For example:\n\nThe newer form uses the keyword before the function name and a trailing return type after the argument list. For example, the declaration above could equivalently be written:\n\nThe trailing return type is in the function's scope. This doesn't make a difference for a simple case like but it matters for more complicated cases, like types declared in class scope or types written in terms of the function parameters.\n\nTrailing return types are the only way to explicitly specify the return type of a lambda expression. In some cases the compiler is able to deduce a lambda's return type, but not in all cases. Even when the compiler can deduce it automatically, sometimes specifying it explicitly would be clearer for readers.\n\nSometimes it's easier and more readable to specify a return type after the function's parameter list has already appeared. This is particularly true when the return type depends on template parameters. For example:\n\nTrailing return type syntax is relatively new and it has no analogue in C++-like languages such as C and Java, so some readers may find it unfamiliar.\n\nExisting code bases have an enormous number of function declarations that aren't going to get changed to use the new syntax, so the realistic choices are using the old syntax only or using a mixture of the two. Using a single version is better for uniformity of style.\n\nIn most cases, continue to use the older style of function declaration where the return type goes before the function name. Use the new trailing-return-type form only in cases where it's required (such as lambdas) or where, by putting the type after the function's parameter list, it allows you to write the type in a much more readable way. The latter case should be rare; it's mostly an issue in fairly complicated template code, which is discouraged in most cases.\n\nPrefer to have single, fixed owners for dynamically allocated objects. Prefer to transfer ownership with smart pointers.\n\n\"Ownership\" is a bookkeeping technique for managing dynamically allocated memory (and other resources). The owner of a dynamically allocated object is an object or function that is responsible for ensuring that it is deleted when no longer needed. Ownership can sometimes be shared, in which case the last owner is typically responsible for deleting it. Even when ownership is not shared, it can be transferred from one piece of code to another.\n\n\"Smart\" pointers are classes that act like pointers, e.g., by overloading the and operators. Some smart pointer types can be used to automate ownership bookkeeping, to ensure these responsibilities are met. is a smart pointer type which expresses exclusive ownership of a dynamically allocated object; the object is deleted when the goes out of scope. It cannot be copied, but can be moved to represent ownership transfer. is a smart pointer type that expresses shared ownership of a dynamically allocated object. s can be copied; ownership of the object is shared among all copies, and the object is deleted when the last is destroyed.\n• It's virtually impossible to manage dynamically allocated memory without some sort of ownership logic.\n• Transferring ownership of an object can be cheaper than copying it (if copying it is even possible).\n• Transferring ownership can be simpler than 'borrowing' a pointer or reference, because it reduces the need to coordinate the lifetime of the object between the two users.\n• Smart pointers can improve readability by making ownership logic explicit, self-documenting, and unambiguous.\n• Smart pointers can eliminate manual ownership bookkeeping, simplifying the code and ruling out large classes of errors.\n• For objects, shared ownership can be a simple and efficient alternative to deep copying.\n• Ownership must be represented and transferred via pointers (whether smart or plain). Pointer semantics are more complicated than value semantics, especially in APIs: you have to worry not just about ownership, but also aliasing, lifetime, and mutability, among other issues.\n• The performance costs of value semantics are often overestimated, so the performance benefits of ownership transfer might not justify the readability and complexity costs.\n• APIs that transfer ownership force their clients into a single memory management model.\n• Code using smart pointers is less explicit about where the resource releases take place.\n• expresses ownership transfer using move semantics, which are relatively new and may confuse some programmers.\n• Shared ownership can be a tempting alternative to careful ownership design, obfuscating the design of a system.\n• Shared ownership requires explicit bookkeeping at run-time, which can be costly.\n• In some cases (e.g., cyclic references), objects with shared ownership may never be deleted.\n• Smart pointers are not perfect substitutes for plain pointers.\n\nIf dynamic allocation is necessary, prefer to keep ownership with the code that allocated it. If other code needs access to the object, consider passing it a copy, or passing a pointer or reference without transferring ownership. Prefer to use to make ownership transfer explicit. For example:\n\nDo not design your code to use shared ownership without a very good reason. One such reason is to avoid expensive copy operations, but you should only do this if the performance benefits are significant, and the underlying object is immutable (i.e., ). If you do use shared ownership, prefer to use .\n\nNever use . Instead, use .\n\nis a tool that reads a source file and identifies many style errors. It is not perfect, and has both false positives and false negatives, but it is still a valuable tool.\n\nUse rvalue references only in certain special cases listed below.\n\nRvalue references are a type of reference that can only bind to temporary objects. The syntax is similar to traditional reference syntax. For example, declares a function whose argument is an rvalue reference to a .\n\nWhen the token '&&' is applied to an unqualified template argument in a function parameter, special template argument deduction rules apply. Such a reference is called a forwarding reference.\n• Defining a move constructor (a constructor taking an rvalue reference to the class type) makes it possible to move a value instead of copying it. If is a , for example, then will probably just result in some simple pointer manipulation instead of copying a large amount of data. In many cases this can result in a major performance improvement.\n• Rvalue references make it possible to implement types that are movable but not copyable, which can be useful for types that have no sensible definition of copying but where you might still want to pass them as function arguments, put them in containers, etc.\n• is necessary to make effective use of some standard-library types, such as .\n• Forwarding references which use the rvalue reference token, make it possible to write a generic function wrapper that forwards its arguments to another function, and works whether or not its arguments are temporary objects and/or const. This is called 'perfect forwarding'.\n• Rvalue references are not yet widely understood. Rules like reference collapsing and the special deduction rule for forwarding references are somewhat obscure.\n• Rvalue references are often misused. Using rvalue references is counter-intuitive in signatures where the argument is expected to have a valid specified state after the function call, or where no move operation is performed.\n\nDo not use rvalue references (or apply the qualifier to methods), except as follows:\n• You may use them to define move constructors and move assignment operators (as described in Copyable and Movable Types).\n• You may use them to define -qualified methods that logically \"consume\" , leaving it in an unusable or empty state. Note that this applies only to method qualifiers (which come after the closing parenthesis of the function signature); if you want to \"consume\" an ordinary function parameter, prefer to pass it by value.\n• You may use forwarding references in conjunction with , to support perfect forwarding.\n• You may use them to define pairs of overloads, such as one taking and the other taking . Usually the preferred solution is just to pass by value, but an overloaded pair of functions sometimes yields better performance, for example if the functions sometimes don't consume the input. As always: if you're writing more complicated code for the sake of performance, make sure you have evidence that it actually helps.\n\nWe allow use of classes and functions, within reason.\n\nFriends should usually be defined in the same file so that the reader does not have to look in another file to find uses of the private members of a class. A common use of is to have a class be a friend of so that it can construct the inner state of correctly, without exposing this state to the world. In some cases it may be useful to make a unittest class a friend of the class it tests.\n\nFriends extend, but do not break, the encapsulation boundary of a class. In some cases this is better than making a member when you want to give only one other class access to it. However, most classes should interact with other classes solely through their public members.\n\nWe do not use C++ exceptions.\n• Exceptions allow higher levels of an application to decide how to handle \"can't happen\" failures in deeply nested functions, without the obscuring and error-prone bookkeeping of error codes.\n• Exceptions are used by most other modern languages. Using them in C++ would make it more consistent with Python, Java, and the C++ that others are familiar with.\n• Some third-party C++ libraries use exceptions, and turning them off internally makes it harder to integrate with those libraries.\n• Exceptions are the only way for a constructor to fail. We can simulate this with a factory function or an method, but these require heap allocation or a new \"invalid\" state, respectively.\n• Exceptions are really handy in testing frameworks.\n• When you add a statement to an existing function, you must examine all of its transitive callers. Either they must make at least the basic exception safety guarantee, or they must never catch the exception and be happy with the program terminating as a result. For instance, if calls calls , and throws an exception that catches, has to be careful or it may not clean up properly.\n• More generally, exceptions make the control flow of programs difficult to evaluate by looking at code: functions may return in places you don't expect. This causes maintainability and debugging difficulties. You can minimize this cost via some rules on how and where exceptions can be used, but at the cost of more that a developer needs to know and understand.\n• Exception safety requires both RAII and different coding practices. Lots of supporting machinery is needed to make writing correct exception-safe code easy. Further, to avoid requiring readers to understand the entire call graph, exception-safe code must isolate logic that writes to persistent state into a \"commit\" phase. This will have both benefits and costs (perhaps where you're forced to obfuscate code to isolate the commit). Allowing exceptions would force us to always pay those costs even when they're not worth it.\n• Turning on exceptions adds data to each binary produced, increasing compile time (probably slightly) and possibly increasing address space pressure.\n• The availability of exceptions may encourage developers to throw them when they are not appropriate or recover from them when it's not safe to do so. For example, invalid user input should not cause exceptions to be thrown. We would need to make the style guide even longer to document these restrictions!\n\nOn their face, the benefits of using exceptions outweigh the costs, especially in new projects. However, for existing code, the introduction of exceptions has implications on all dependent code. If exceptions can be propagated beyond a new project, it also becomes problematic to integrate the new project into existing exception-free code. Because most existing C++ code at Google is not prepared to deal with exceptions, it is comparatively difficult to adopt new code that generates exceptions.\n\nGiven that Google's existing code is not exception-tolerant, the costs of using exceptions are somewhat greater than the costs in a new project. The conversion process would be slow and error-prone. We don't believe that the available alternatives to exceptions, such as error codes and assertions, introduce a significant burden.\n\nOur advice against using exceptions is not predicated on philosophical or moral grounds, but practical ones. Because we'd like to use our open-source projects at Google and it's difficult to do so if those projects use exceptions, we need to advise against exceptions in Google open-source projects as well. Things would probably be different if we had to do it all over again from scratch.\n\nThis prohibition also applies to exception handling related features such as and .\n\nThere is an exception to this rule (no pun intended) for Windows code.\n\nSpecify when it is useful and correct.\n\nThe specifier is used to specify whether a function will throw exceptions or not. If an exception escapes from a function marked , the program crashes via .\n\nThe operator performs a compile-time check that returns true if an expression is declared to not throw any exceptions.\n• Specifying move constructors as improves performance in some cases, e.g., moves rather than copies the objects if T's move constructor is .\n• Specifying on a function can trigger compiler optimizations in environments where exceptions are enabled, e.g., compiler does not have to generate extra code for stack-unwinding, if it knows that no exceptions can be thrown due to a specifier.\n• In projects following this guide that have exceptions disabled it is hard to ensure that specifiers are correct, and hard to define what correctness even means.\n• It's hard, if not impossible, to undo because it eliminates a guarantee that callers may be relying on, in ways that are hard to detect.\n\nYou may use when it is useful for performance if it accurately reflects the intended semantics of your function, i.e., that if an exception is somehow thrown from within the function body then it represents a fatal error. You can assume that on move constructors has a meaningful performance benefit. If you think there is significant performance benefit from specifying on some other function, please discuss it with your project leads.\n\nPrefer unconditional if exceptions are completely disabled (i.e., most Google C++ environments). Otherwise, use conditional specifiers with simple conditions, in ways that evaluate false only in the few cases where the function could potentially throw. The tests might include type traits check on whether the involved operation might throw (e.g., for move-constructing objects), or on whether allocation can throw (e.g., for standard default allocation). Note in many cases the only possible cause for an exception is allocation failure (we believe move constructors should not throw except due to allocation failure), and there are many applications where it’s appropriate to treat memory exhaustion as a fatal error rather than an exceptional condition that your program should attempt to recover from. Even for other potential failures you should prioritize interface simplicity over supporting all possible exception throwing scenarios: instead of writing a complicated clause that depends on whether a hash function can throw, for example, simply document that your component doesn’t support hash functions throwing and make it unconditionally .\n\nRTTI allows a programmer to query the C++ class of an object at run-time. This is done by use of or .\n\nThe standard alternatives to RTTI (described below) require modification or redesign of the class hierarchy in question. Sometimes such modifications are infeasible or undesirable, particularly in widely-used or mature code.\n\nRTTI can be useful in some unit tests. For example, it is useful in tests of factory classes where the test has to verify that a newly created object has the expected dynamic type. It is also useful in managing the relationship between objects and their mocks.\n\nRTTI is useful when considering multiple abstract objects. Consider\n\nQuerying the type of an object at run-time frequently means a design problem. Needing to know the type of an object at runtime is often an indication that the design of your class hierarchy is flawed.\n\nUndisciplined use of RTTI makes code hard to maintain. It can lead to type-based decision trees or switch statements scattered throughout the code, all of which must be examined when making further changes.\n\nRTTI has legitimate uses but is prone to abuse, so you must be careful when using it. You may use it freely in unittests, but avoid it when possible in other code. In particular, think twice before using RTTI in new code. If you find yourself needing to write code that behaves differently based on the class of an object, consider one of the following alternatives to querying the type:\n• Virtual methods are the preferred way of executing different code paths depending on a specific subclass type. This puts the work within the object itself.\n• If the work belongs outside the object and instead in some processing code, consider a double-dispatch solution, such as the Visitor design pattern. This allows a facility outside the object itself to determine the type of class using the built-in type system.\n\nWhen the logic of a program guarantees that a given instance of a base class is in fact an instance of a particular derived class, then a may be used freely on the object. Usually one can use a as an alternative in such situations.\n\nDecision trees based on type are a strong indication that your code is on the wrong track.\n\nCode such as this usually breaks when additional subclasses are added to the class hierarchy. Moreover, when properties of a subclass change, it is difficult to find and modify all the affected code segments.\n\nDo not hand-implement an RTTI-like workaround. The arguments against RTTI apply just as much to workarounds like class hierarchies with type tags. Moreover, workarounds disguise your true intent.\n\nUse C++-style casts like , or brace initialization for conversion of arithmetic types like . Do not use cast formats like unless the cast is to . You may use cast formats like only when is a class type.\n\nC++ introduced a different cast system from C that distinguishes the types of cast operations.\n\nThe problem with C casts is the ambiguity of the operation; sometimes you are doing a conversion (e.g., ) and sometimes you are doing a cast (e.g., ). Brace initialization and C++ casts can often help avoid this ambiguity. Additionally, C++ casts are more visible when searching for them.\n\nThe C++-style cast syntax is verbose and cumbersome.\n\nIn general, do not use C-style casts. Instead, use these C++-style casts when explicit type conversion is necessary.\n• Use brace initialization to convert arithmetic types (e.g., ). This is the safest approach because code will not compile if conversion can result in information loss. The syntax is also concise.\n• Use to safely cast up a type hierarchy, e.g., casting a to a or casting a to a . C++ usually does this automatically but some situations need an explicit up-cast, such as use of the operator.\n• Use as the equivalent of a C-style cast that does value conversion, when you need to explicitly up-cast a pointer from a class to its superclass, or when you need to explicitly cast a pointer from a superclass to a subclass. In this last case, you must be sure your object is actually an instance of the subclass.\n• Use to remove the qualifier (see const).\n• Use to do unsafe conversions of pointer types to and from integer and other pointer types, including . Use this only if you know what you are doing and you understand the aliasing issues. Also, consider dereferencing the pointer (without a cast) and using to cast the resulting value.\n• Use to interpret the raw bits of a value using a different type of the same size (a type pun), such as interpreting the bits of a as .\n\nSee the RTTI section for guidance on the use of .\n\nUse streams where appropriate, and stick to \"simple\" usages. Overload for streaming only for types representing values, and write only the user-visible value, not any implementation details.\n\nStreams are the standard I/O abstraction in C++, as exemplified by the standard header . They are widely used in Google code, mostly for debug logging and test diagnostics.\n\nThe and stream operators provide an API for formatted I/O that is easily learned, portable, reusable, and extensible. , by contrast, doesn't even support , to say nothing of user-defined types, and is very difficult to use portably. also obliges you to choose among the numerous slightly different versions of that function, and navigate the dozens of conversion specifiers.\n\nStreams provide first-class support for console I/O via , , , and . The C APIs do as well, but are hampered by the need to manually buffer the input.\n• Stream formatting can be configured by mutating the state of the stream. Such mutations are persistent, so the behavior of your code can be affected by the entire previous history of the stream, unless you go out of your way to restore it to a known state every time other code might have touched it. User code can not only modify the built-in state, it can add new state variables and behaviors through a registration system.\n• It is difficult to precisely control stream output, due to the above issues, the way code and data are mixed in streaming code, and the use of operator overloading (which may select a different overload than you expect).\n• The practice of building up output through chains of operators interferes with internationalization, because it bakes word order into the code, and streams' support for localization is flawed.\n• The streams API is subtle and complex, so programmers must develop experience with it in order to use it effectively.\n• Resolving the many overloads of is extremely costly for the compiler. When used pervasively in a large code base, it can consume as much as 20% of the parsing and semantic analysis time.\n\nUse streams only when they are the best tool for the job. This is typically the case when the I/O is ad-hoc, local, human-readable, and targeted at other developers rather than end-users. Be consistent with the code around you, and with the codebase as a whole; if there's an established tool for your problem, use that tool instead. In particular, logging libraries are usually a better choice than or for diagnostic output, and the libraries in or the equivalent are usually a better choice than .\n\nAvoid using streams for I/O that faces external users or handles untrusted data. Instead, find and use the appropriate templating libraries to handle issues like internationalization, localization, and security hardening.\n\nIf you do use streams, avoid the stateful parts of the streams API (other than error state), such as , , and . Use explicit formatting functions (such as ) rather than stream manipulators or formatting flags to control formatting details such as number base, precision, or padding.\n\nOverload as a streaming operator for your type only if your type represents a value, and writes out a human-readable string representation of that value. Avoid exposing implementation details in the output of ; if you need to print object internals for debugging, use named functions instead (a method named is the most common convention).\n\nUse the prefix form ( ) of the increment and decrement operators unless you need postfix semantics.\n\nWhen a variable is incremented ( or ) or decremented ( or ) and the value of the expression is not used, one must decide whether to preincrement (decrement) or postincrement (decrement).\n\nA postfix increment/decrement expression evaluates to the value as it was before it was modified. This can result in code that is more compact but harder to read. The prefix form is generally more readable, is never less efficient, and can be more efficient because it doesn't need to make a copy of the value as it was before the operation.\n\nThe tradition developed, in C, of using post-increment, even when the expression value is not used, especially in loops.\n\nUse prefix increment/decrement, unless the code explicitly needs the result of the postfix increment/decrement expression.\n\nIn APIs, use whenever it makes sense. is a better choice for some uses of const.\n\nDeclared variables and parameters can be preceded by the keyword to indicate the variables are not changed (e.g., ). Class functions can have the qualifier to indicate the function does not change the state of the class member variables (e.g., ).\n\nEasier for people to understand how variables are being used. Allows the compiler to do better type checking, and, conceivably, generate better code. Helps people convince themselves of program correctness because they know the functions they call are limited in how they can modify your variables. Helps people know what functions are safe to use without locks in multi-threaded programs.\n\nis viral: if you pass a variable to a function, that function must have in its prototype (or the variable will need a ). This can be a particular problem when calling library functions.\n\nWe strongly recommend using in APIs (i.e., on function parameters, methods, and non-local variables) wherever it is meaningful and accurate. This provides consistent, mostly compiler-verified documentation of what objects an operation can mutate. Having a consistent and reliable way to distinguish reads from writes is critical to writing thread-safe code, and is useful in many other contexts as well. In particular:\n• If a function guarantees that it will not modify an argument passed by reference or by pointer, the corresponding function parameter should be a reference-to-const ( ) or pointer-to-const ( ), respectively.\n• For a function parameter passed by value, has no effect on the caller, thus is not recommended in function declarations. See TotW #109.\n• Declare methods to be unless they alter the logical state of the object (or enable the user to modify that state, e.g., by returning a non- reference, but that's rare), or they can't safely be invoked concurrently.\n\nUsing on local variables is neither encouraged nor discouraged.\n\nAll of a class's operations should be safe to invoke concurrently with each other. If that's not feasible, the class must be clearly documented as \"thread-unsafe\".\n\nWhere to put the const\n\nSome people favor the form to . They argue that this is more readable because it's more consistent: it keeps the rule that always follows the object it's describing. However, this consistency argument doesn't apply in codebases with few deeply-nested pointer expressions since most expressions have only one , and it applies to the underlying value. In such cases, there's no consistency to maintain. Putting the first is arguably more readable, since it follows English in putting the \"adjective\" ( ) before the \"noun\" ( ).\n\nThat said, while we encourage putting first, we do not require it. But be consistent with the code around you!\n\nUse of constexpr, constinit, and consteval\n\nUse to define true constants or to ensure constant initialization. Use to ensure constant initialization for non-constant variables.\n\nSome variables can be declared to indicate the variables are true constants, i.e., fixed at compilation/link time. Some functions and constructors can be declared which enables them to be used in defining a variable. Functions can be declared to restrict their use to compile time.\n\nUse of enables definition of constants with floating-point expressions rather than just literals; definition of constants of user-defined types; and definition of constants with function calls.\n\nPrematurely marking something as may cause migration problems if later on it has to be downgraded. Current restrictions on what is allowed in functions and constructors may invite obscure workarounds in these definitions.\n\ndefinitions enable a more robust specification of the constant parts of an interface. Use to specify true constants and the functions that support their definitions. may be used for code that must not be invoked at runtime. Avoid complexifying function definitions to enable their use with . Do not use or to force inlining.\n\nOf the built-in C++ integer types, the only one used is . If a program needs an integer type of a different size, use an exact-width integer type from , such as . If you have a value that could ever be greater than or equal to 2^31, use a 64-bit type such as . Keep in mind that even if your value won't ever be too large for an , it may be used in intermediate calculations which may require a larger type. When in doubt, choose a larger type.\n\nC++ does not specify exact sizes for the integer types like . Common sizes on contemporary architectures are 16 bits for , 32 bits for , 32 or 64 bits for , and 64 bits for , but different platforms make different choices, in particular for .\n\nThe sizes of integral types in C++ can vary based on compiler and architecture.\n\nThe standard library header defines types like , , , etc. You should always use those in preference to , and the like, when you need a guarantee on the size of an integer. Prefer to omit the prefix for these types, as the extra 5 characters do not merit the added clutter. Of the built-in integer types, only should be used. When appropriate, you are welcome to use standard type aliases like and .\n\nWe use very often, for integers we know are not going to be too big, e.g., loop counters. Use plain old for such things. You should assume that an is at least 32 bits, but don't assume that it has more than 32 bits. If you need a 64-bit integer type, use or .\n\nFor integers we know can be \"big\", use .\n\nYou should not use the unsigned integer types such as , unless there is a valid reason such as representing a bit pattern rather than a number, or you need defined overflow modulo 2^N. In particular, do not use unsigned types to say a number will never be negative. Instead, use assertions for this.\n\nIf your code is a container that returns a size, be sure to use a type that will accommodate any possible usage of your container. When in doubt, use a larger type rather than a smaller type.\n\nUse care when converting integer types. Integer conversions and promotions can cause undefined behavior, leading to security bugs and other problems.\n\nUnsigned integers are good for representing bitfields and modular arithmetic. Because of historical accident, the C++ standard also uses unsigned integers to represent the size of containers - many members of the standards body believe this to be a mistake, but it is effectively impossible to fix at this point. The fact that unsigned arithmetic doesn't model the behavior of a simple integer, but is instead defined by the standard to model modular arithmetic (wrapping around on overflow/underflow), means that a significant class of bugs cannot be diagnosed by the compiler. In other cases, the defined behavior impedes optimization.\n\nThat said, mixing signedness of integer types is responsible for an equally large class of problems. The best advice we can provide: try to use iterators and containers rather than pointers and sizes, try not to mix signedness, and try to avoid unsigned types (except for representing bitfields or modular arithmetic). Do not use an unsigned type merely to assert that a variable is non-negative.\n\nOf the built-in C++ floating-point types, the only ones used are and . You may assume that these types represent IEEE-754 binary32 and binary64, respectively.\n\nDo not use , as it gives non-portable results.\n\nWrite architecture-portable code. Do not rely on CPU features specific to a single processor.\n• When printing values, use type-safe numeric formatting libraries like , , , or instead of the family of functions.\n• When moving structured data into or out of your process, encode it using a serialization library like Protocol Buffers rather than copying the in-memory representation around.\n• If you need to work with memory addresses as integers, store them in s rather than s or s.\n• Use braced-initialization as needed to create 64-bit constants. For example:\n\nAvoid defining macros, especially in headers; prefer inline functions, enums, and variables. Name macros with a project-specific prefix. Do not use macros to define pieces of a C++ API.\n\nMacros mean that the code you see is not the same as the code the compiler sees. This can introduce unexpected behavior, especially since macros have global scope.\n\nThe problems introduced by macros are especially severe when they are used to define pieces of a C++ API, and still more so for public APIs. Every error message from the compiler when developers incorrectly use that interface now must explain how the macros formed the interface. Refactoring and analysis tools have a dramatically harder time updating the interface. As a consequence, we specifically disallow using macros in this way. For example, avoid patterns like:\n\nLuckily, macros are not nearly as necessary in C++ as they are in C. Instead of using a macro to inline performance-critical code, use an inline function. Instead of using a macro to store a constant, use a variable. Instead of using a macro to \"abbreviate\" a long variable name, use a reference. Instead of using a macro to conditionally compile code ... well, don't do that at all (except, of course, for the guards to prevent double inclusion of header files). It makes testing much more difficult.\n\nMacros can do things these other techniques cannot, and you do see them in the codebase, especially in the lower-level libraries. And some of their special features (like stringifying, concatenation, and so forth) are not available through the language proper. But before using a macro, consider carefully whether there's a non-macro way to achieve the same result. If you need to use a macro to define an interface, contact your project leads to request a waiver of this rule.\n\nThe following usage pattern will avoid many problems with macros; if you use macros, follow it whenever possible:\n• macros right before you use them, and them right after.\n• Do not just an existing macro before replacing it with your own; instead, pick a name that's likely to be unique.\n• Try not to use macros that expand to unbalanced C++ constructs, or at least document that behavior well.\n• Prefer not using to generate function/class/variable names.\n\nExporting macros from headers (i.e., defining them in a header without ing them before the end of the header) is extremely strongly discouraged. If you do export a macro from a header, it must have a globally unique name. To achieve this, it must be named with a prefix consisting of your project's namespace name (but upper case).\n\nUse for pointers, and for chars (and not the literal).\n\nFor pointers (address values), use , as this provides type-safety.\n\nUse for the null character. Using the correct type makes the code more readable.\n\nUse when you take the size of a particular variable. will update appropriately if someone changes the variable type either now or later. You may use for code unrelated to any particular variable, such as code that manages an external or internal data format where a variable of an appropriate C++ type is not convenient.\n\nUse type deduction only if it makes the code clearer to readers who aren't familiar with the project, or if it makes the code safer. Do not use it merely to avoid the inconvenience of writing an explicit type.\n\nThere are several contexts in which C++ allows (or even requires) types to be deduced by the compiler, rather than spelled out explicitly in the code:\n• C++ type names can be long and cumbersome, especially when they involve templates or namespaces.\n• When a C++ type name is repeated within a single declaration or a small code region, the repetition may not be aiding readability.\n• It is sometimes safer to let the type be deduced, since that avoids the possibility of unintended copies or type conversions.\n\nC++ code is usually clearer when types are explicit, especially when type deduction would depend on information from distant parts of the code. In expressions like:\n\nit may not be obvious what the resulting types are if the type of isn't very well known, or if was declared many lines earlier.\n\nProgrammers have to understand when type deduction will or won't produce a reference type, or they'll get copies when they didn't mean to.\n\nIf a deduced type is used as part of an interface, then a programmer might change its type while only intending to change its value, leading to a more radical API change than intended.\n\nThe fundamental rule is: use type deduction only to make the code clearer or safer, and do not use it merely to avoid the inconvenience of writing an explicit type. When judging whether the code is clearer, keep in mind that your readers are not necessarily on your team, or familiar with your project, so types that you and your reviewer experience as unnecessary clutter will very often provide useful information to others. For example, you can assume that the return type of is obvious, but the return type of probably isn't.\n\nThese principles apply to all forms of type deduction, but the details vary, as described in the following sections.\n\nFunction template argument deduction is almost always OK. Type deduction is the expected default way of interacting with function templates, because it allows function templates to act like infinite sets of ordinary function overloads. Consequently, function templates are almost always designed so that template argument deduction is clear and safe, or doesn't compile.\n\nFor local variables, you can use type deduction to make the code clearer by eliminating type information that is obvious or irrelevant, so that the reader can focus on the meaningful parts of the code:\n\nTypes sometimes contain a mixture of useful information and boilerplate, such as in the example above: it's obvious that the type is an iterator, and in many contexts the container type and even the key type aren't relevant, but the type of the values is probably useful. In such situations, it's often possible to define local variables with explicit types that convey the relevant information:\n\nIf the type is a template instance, and the parameters are boilerplate but the template itself is informative, you can use class template argument deduction to suppress the boilerplate. However, cases where this actually provides a meaningful benefit are quite rare. Note that class template argument deduction is also subject to a separate style rule.\n\nDo not use if a simpler option will work, because it's a fairly obscure feature, so it has a high cost in code clarity.\n\nUse return type deduction (for both functions and lambdas) only if the function body has a very small number of statements, and very little other code, because otherwise the reader may not be able to tell at a glance what the return type is. Furthermore, use it only if the function or lambda has a very narrow scope, because functions with deduced return types don't define abstraction boundaries: the implementation is the interface. In particular, public functions in header files should almost never have deduced return types.\n\nparameter types for lambdas should be used with caution, because the actual type is determined by the code that calls the lambda, rather than by the definition of the lambda. Consequently, an explicit type will almost always be clearer unless the lambda is explicitly called very close to where it's defined (so that the reader can easily see both), or the lambda is passed to an interface so well-known that it's obvious what arguments it will eventually be called with (e.g., the example above).\n\nInit captures are covered by a more specific style rule, which largely supersedes the general rules for type deduction.\n\nUnlike other forms of type deduction, structured bindings can actually give the reader additional information, by giving meaningful names to the elements of a larger object. This means that a structured binding declaration may provide a net readability improvement over an explicit type, even in cases where would not. Structured bindings are especially beneficial when the object is a pair or tuple (as in the example above), because they don't have meaningful field names to begin with, but note that you generally shouldn't use pairs or tuples unless a pre-existing API like forces you to.\n\nIf the object being bound is a struct, it may sometimes be helpful to provide names that are more specific to your usage, but keep in mind that this may also mean the names are less recognizable to your reader than the field names. We recommend using a comment to indicate the name of the underlying field, if it doesn't match the name of the binding, using the same syntax as for function parameter comments:\n\nAs with function parameter comments, this can enable tools to detect if you get the order of the fields wrong.\n\nUse class template argument deduction only with templates that have explicitly opted into supporting it.\n\nClass template argument deduction (often abbreviated \"CTAD\") occurs when a variable is declared with a type that names a template, and the template argument list is not provided (not even empty angle brackets):\n\nThe compiler deduces the arguments from the initializer using the template's \"deduction guides\", which can be explicit or implicit.\n\nExplicit deduction guides look like function declarations with trailing return types, except that there's no leading , and the function name is the name of the template. For example, the above example relies on this deduction guide for :\n\nConstructors in a primary template (as opposed to a template specialization) also implicitly define deduction guides.\n\nWhen you declare a variable that relies on CTAD, the compiler selects a deduction guide using the rules of constructor overload resolution, and that guide's return type becomes the type of the variable.\n\nCTAD can sometimes allow you to omit boilerplate from your code.\n\nThe implicit deduction guides that are generated from constructors may have undesirable behavior, or be outright incorrect. This is particularly problematic for constructors written before CTAD was introduced in C++17, because the authors of those constructors had no way of knowing about (much less fixing) any problems that their constructors would cause for CTAD. Furthermore, adding explicit deduction guides to fix those problems might break any existing code that relies on the implicit deduction guides.\n\nCTAD also suffers from many of the same drawbacks as , because they are both mechanisms for deducing all or part of a variable's type from its initializer. CTAD does give the reader more information than , but it also doesn't give the reader an obvious cue that information has been omitted.\n\nDo not use CTAD with a given template unless the template's maintainers have opted into supporting use of CTAD by providing at least one explicit deduction guide (all templates in the namespace are also presumed to have opted in). This should be enforced with a compiler warning if available.\n\nUses of CTAD must also follow the general rules on Type deduction.\n\nUse designated initializers only in their C++20-compliant form.\n\nDesignated initializers are a syntax that allows for initializing an aggregate (\"plain old struct\") by naming its fields explicitly:\n\nThe explicitly listed fields will be initialized as specified, and others will be initialized in the same way they would be in a traditional aggregate initialization expression like .\n\nDesignated initializers can make for convenient and highly readable aggregate expressions, especially for structs with less straightforward ordering of fields than the example above.\n\nWhile designated initializers have long been part of the C standard and supported by C++ compilers as an extension, they were not supported by C++ prior to C++20.\n\nThe rules in the C++ standard are stricter than in C and compiler extensions, requiring that the designated initializers appear in the same order as the fields appear in the struct definition. So in the example above, it is legal according to C++20 to initialize and then , but not and then .\n\nUse designated initializers only in the form that is compatible with the C++20 standard: with initializers in the same order as the corresponding fields appear in the struct definition.\n\nUse lambda expressions where appropriate. Prefer explicit captures when the lambda will escape the current scope.\n\nLambda expressions are a concise way of creating anonymous function objects. They're often useful when passing functions as arguments. For example:\n\nThey further allow capturing variables from the enclosing scope either explicitly by name, or implicitly using a default capture. Explicit captures require each variable to be listed, as either a value or reference capture:\n\nDefault captures implicitly capture any variable referenced in the lambda body, including if any members are used:\n\nA variable capture can also have an explicit initializer, which can be used for capturing move-only variables by value, or for other situations not handled by ordinary reference or value captures:\n\nSuch captures (often called \"init captures\" or \"generalized lambda captures\") need not actually \"capture\" anything from the enclosing scope, or even have a name from the enclosing scope; this syntax is a fully general way to define members of a lambda object:\n\nThe type of a capture with an initializer is deduced using the same rules as .\n• Lambdas are much more concise than other ways of defining function objects to be passed to STL algorithms, which can be a readability improvement.\n• Appropriate use of default captures can remove redundancy and highlight important exceptions from the default.\n• Lambdas, , and can be used in combination as a general purpose callback mechanism; they make it easy to write functions that take bound functions as arguments.\n• Variable capture in lambdas can be a source of dangling-pointer bugs, particularly if a lambda escapes the current scope.\n• Default captures by value can be misleading because they do not prevent dangling-pointer bugs. Capturing a pointer by value doesn't cause a deep copy, so it often has the same lifetime issues as capture by reference. This is especially confusing when capturing by value, since the use of is often implicit.\n• Captures actually declare new variables (whether or not the captures have initializers), but they look nothing like any other variable declaration syntax in C++. In particular, there's no place for the variable's type, or even an placeholder (although init captures can indicate it indirectly, e.g., with a cast). This can make it difficult to even recognize them as declarations.\n• Init captures inherently rely on type deduction, and suffer from many of the same drawbacks as , with the additional problem that the syntax doesn't even cue the reader that deduction is taking place.\n• It's possible for use of lambdas to get out of hand; very long nested anonymous functions can make code harder to understand.\n• Use lambda expressions where appropriate, with formatting as described below.\n• Prefer explicit captures if the lambda may escape the current scope. For example, instead of: { Foo foo; ... executor->Schedule([&] { Frobnicate(foo); }) ... } // BAD! The fact that the lambda makes use of a reference to `foo` and // possibly `this` (if `Frobnicate` is a member function) may not be // apparent on a cursory inspection. If the lambda is invoked after // the function returns, that would be bad, because both `foo` // and the enclosing object could have been destroyed. prefer to write: { Foo foo; ... executor->Schedule([&foo] { Frobnicate(foo); }) ... } // BETTER - The compile will fail if `Frobnicate` is a member // function, and it's clearer that `foo` is dangerously captured by // reference.\n• Use default capture by reference ( ) only when the lifetime of the lambda is obviously shorter than any potential captures.\n• Use default capture by value ( ) only as a means of binding a few variables for a short lambda, where the set of captured variables is obvious at a glance, and which does not result in capturing implicitly. (That means that a lambda that appears in a non-static class member function and refers to non-static class members in its body must capture explicitly or via .) Prefer not to write long or complex lambdas with default capture by value.\n• Use captures only to actually capture variables from the enclosing scope. Do not use captures with initializers to introduce new names, or to substantially change the meaning of an existing name. Instead, declare a new variable in the conventional way and then capture it, or avoid the lambda shorthand and define a function object explicitly.\n• See the section on type deduction for guidance on specifying the parameter and return types.\n\nTemplate metaprogramming refers to a family of techniques that exploit the fact that the C++ template instantiation mechanism is Turing complete and can be used to perform arbitrary compile-time computation in the type domain.\n\nTemplate metaprogramming allows extremely flexible interfaces that are type safe and high performance. Facilities like GoogleTest, , , and Boost.Spirit would be impossible without it.\n\nThe techniques used in template metaprogramming are often obscure to anyone but language experts. Code that uses templates in complicated ways is often unreadable, and is hard to debug or maintain.\n\nTemplate metaprogramming often leads to extremely poor compile time error messages: even if an interface is simple, the complicated implementation details become visible when the user does something wrong.\n\nTemplate metaprogramming interferes with large scale refactoring by making the job of refactoring tools harder. First, the template code is expanded in multiple contexts, and it's hard to verify that the transformation makes sense in all of them. Second, some refactoring tools work with an AST that only represents the structure of the code after template expansion. It can be difficult to automatically work back to the original source construct that needs to be rewritten.\n\nTemplate metaprogramming sometimes allows cleaner and easier-to-use interfaces than would be possible without it, but it's also often a temptation to be overly clever. It's best used in a small number of low level components where the extra maintenance burden is spread out over a large number of uses.\n\nThink twice before using template metaprogramming or other complicated template techniques; think about whether the average member of your team will be able to understand your code well enough to maintain it after you switch to another project, or whether a non-C++ programmer or someone casually browsing the code base will be able to understand the error messages or trace the flow of a function they want to call. If you're using recursive template instantiations or type lists or metafunctions or expression templates, or relying on SFINAE or on the trick for detecting function overload resolution, then there's a good chance you've gone too far.\n\nIf you use template metaprogramming, you should expect to put considerable effort into minimizing and isolating the complexity. You should hide metaprogramming as an implementation detail whenever possible, so that user-facing headers are readable, and you should make sure that tricky code is especially well commented. You should carefully document how the code is used, and you should say something about what the \"generated\" code looks like. Pay extra attention to the error messages that the compiler emits when users make mistakes. The error messages are part of your user interface, and your code should be tweaked as necessary so that the error messages are understandable and actionable from a user point of view.\n\nUse concepts sparingly. In general, concepts and constraints should only be used in cases where templates would have been used prior to C++20. Avoid introducing new concepts in headers, unless the headers are marked as internal to the library. Do not define concepts that are not enforced by the compiler. Prefer constraints over template metaprogramming, and avoid the syntax; instead, use the syntax.\n\nThe keyword is a new mechanism for defining requirements (such as type traits or interface specifications) for a template parameter. The keyword provides mechanisms for placing anonymous constraints on templates and verifying that constraints are satisfied at compile time. Concepts and constraints are often used together, but can be also used independently.\n• Concepts allow the compiler to generate much better error messages when templates are involved, which can reduce confusion and significantly improve the development experience.\n• Concepts can reduce the boilerplate necessary for defining and using compile-time constraints, often increasing the clarity of the resulting code.\n• Constraints provide some capabilities that are difficult to achieve with templates and SFINAE techniques.\n• As with templates, concepts can make code significantly more complex and difficult to understand.\n• Concept syntax can be confusing to readers, as concepts appear similar to class types at their usage sites.\n• Concepts, especially at API boundaries, increase code coupling, rigidity, and ossification.\n• Concepts and constraints can replicate logic from a function body, resulting in code duplication and increased maintenance costs.\n• Concepts muddy the source of truth for their underlying contracts, as they are standalone named entities that can be utilized in multiple locations, all of which evolve separately from each other. This can cause the stated and implied requirements to diverge over time.\n• Concepts and constraints affect overload resolution in novel and non-obvious ways.\n• As with SFINAE, constraints make it harder to refactor code at scale.\n\nPredefined concepts in the standard library should be preferred to type traits, when equivalent ones exist. (e.g., if would have been used before C++20, then should be used in C++20 code.) Similarly, prefer modern constraint syntax (via ). Avoid legacy template metaprogramming constructs (such as ) as well as the syntax.\n\nDo not manually re-implement any existing concepts or traits. For example, use instead of or the like.\n\nNew declarations should be rare, and only defined internally within a library, such that they are not exposed at API boundaries. More generally, do not use concepts or constraints in cases where you wouldn't use their legacy template equivalents in C++17.\n\nDo not define concepts that duplicate the function body, or impose requirements that would be insignificant or obvious from reading the body of the code or the resulting error messages. For example, avoid the following:\n\nInstead, prefer to leave code as an ordinary template unless you can demonstrate that concepts result in significant improvement for that particular case, such as in the resulting error messages for a deeply nested or non-obvious requirement.\n\nConcepts should be statically verifiable by the compiler. Do not use any concept whose primary benefits would come from a semantic (or otherwise unenforced) constraint. Requirements that are unenforced at compile time should instead be imposed via other mechanisms such as comments, assertions, or tests.\n\nDo not use C++20 Modules.\n\nC++20 introduces \"modules\", a new language feature designed as an alternative to textual inclusion of header files. It introduces three new keywords to support this: , export, and .\n\nModules are a big shift in how C++ is written and compiled, and we are still assessing how they may fit into Google's C++ ecosystem in the future. Furthermore, they are not currently well-supported by our build-systems, compilers, and other tooling, and need further exploration as to the best-practices when writing and using them.\n\nDo not use coroutines (yet).\n\nDo not include the header, or use the , , or keywords.\n\nNOTE: this ban is expected to be temporary, while further guidance is being developed.\n\nUse only approved libraries from the Boost library collection.\n\nThe Boost library collection is a popular collection of peer-reviewed, free, open-source C++ libraries.\n\nBoost code is generally very high-quality, is widely portable, and fills many important gaps in the C++ standard library, such as type traits and better binders.\n\nSome Boost libraries encourage coding practices which can hamper readability, such as metaprogramming and other advanced template techniques, and an excessively \"functional\" style of programming.\n\nAs with Boost, some modern C++ library functionality encourages coding practices that hamper readability—for example by removing checked redundancy (such as type names) that may be helpful to readers, or by encouraging template metaprogramming. Other extensions duplicate functionality available through existing mechanisms, which may lead to confusion and conversion costs.\n\nThe following C++ standard library features may not be used:\n• Compile-time rational numbers ( ), because of concerns that it's tied to a more template-heavy interface style.\n• The and headers, because many compilers do not support those features reliably.\n• The header, which does not have sufficient support for testing, and suffers from inherent security vulnerabilities.\n\nNonstandard extensions to C++ may not be used unless otherwise specified.\n\nCompilers support various extensions that are not part of standard C++. Such extensions include GCC's , intrinsic functions such as or SIMD, , inline assembly, , , compound statement expressions (e.g., , variable-length arrays and , and the \"Elvis Operator\" .\n• Nonstandard extensions may provide useful features that do not exist in standard C++.\n• Important performance guidance to the compiler can only be specified using extensions.\n• Nonstandard extensions do not work in all compilers. Use of nonstandard extensions reduces portability of code.\n• Even if they are supported in all targeted compilers, the extensions are often not well-specified, and there may be subtle behavior differences between compilers.\n• Nonstandard extensions add to the language features that a reader must know to understand the code.\n\nDo not use nonstandard extensions. You may use portability wrappers that are implemented using nonstandard extensions, so long as those wrappers are provided by a designated project-wide portability header.\n\nPublic aliases are for the benefit of an API's user, and should be clearly documented.\n\nThere are several ways to create names that are aliases of other entities:\n\nIn new code, is preferable to , because it provides a more consistent syntax with the rest of C++ and works with templates.\n\nLike other declarations, aliases declared in a header file are part of that header's public API unless they're in a function definition, in the private portion of a class, or in an explicitly-marked internal namespace. Aliases in such areas or in files are implementation details (because client code can't refer to them), and are not restricted by this rule.\n• Aliases can improve readability by simplifying a long or complicated name.\n• Aliases can reduce duplication by naming in one place a type used repeatedly in an API, which might make it easier to change the type later.\n• When placed in a header where client code can refer to them, aliases increase the number of entities in that header's API, increasing its complexity.\n• Clients can easily rely on unintended details of public aliases, making changes difficult.\n• It can be tempting to create a public alias that is only intended for use in the implementation, without considering its impact on the API, or on maintainability.\n• Aliases can create risk of name collisions\n• Aliases can reduce readability by giving a familiar construct an unfamiliar name\n• Type aliases can create an unclear API contract: it is unclear whether the alias is guaranteed to be identical to the type it aliases, to have the same API, or only to be usable in specified narrow ways\n\nDon't put an alias in your public API just to save typing in the implementation; do so only if you intend it to be used by your clients.\n\nWhen defining a public alias, document the intent of the new name, including whether it is guaranteed to always be the same as the type it's currently aliased to, or whether a more limited compatibility is intended. This lets the user know whether they can treat the types as substitutable or whether more specific rules must be followed, and can help the implementation retain some degree of freedom to change the alias.\n\nDon't put namespace aliases in your public API. (See also Namespaces).\n\nFor example, these aliases document how they are intended to be used in client code:\n\nThese aliases don't document intended use, and half of them aren't meant for client use:\n\nHowever, local convenience aliases are fine in function definitions, sections of classes, explicitly marked internal namespaces, and in files:\n\nIf not conditional on an enumerated value, switch statements should always have a case (in the case of an enumerated value, the compiler will warn you if any values are not handled). If the default case should never execute, treat this as an error. For example:\n\nFall-through from one case label to another must be annotated using the attribute. should be placed at a point of execution where a fall-through to the next case label occurs. A common exception is consecutive case labels without intervening code, in which case no annotation is needed.\n\nIn all code, including naming and comments, use inclusive language and avoid terms that other programmers might find disrespectful or offensive (such as \"master\" and \"slave\", \"blacklist\" and \"whitelist\", or \"redline\"), even if the terms also have an ostensibly neutral meaning. Similarly, use gender-neutral language unless you're referring to a specific person (and using their pronouns). For example, use \"they\"/\"them\"/\"their\" for people of unspecified gender (even when singular), and \"it\"/\"its\" for software, computers, and other things that aren't people.\n\nThe most important consistency rules are those that govern naming. The style of a name immediately informs us what sort of thing the named entity is: a type, a variable, a function, a constant, a macro, etc., without requiring us to search for the declaration of that entity. The pattern-matching engine in our brains relies a great deal on these naming rules.\n\nNaming rules are pretty arbitrary, but we feel that consistency is more important than individual preferences in this area, so regardless of whether you find them sensible or not, the rules are the rules.\n\nOptimize for readability using names that would be clear even to people on a different team.\n\nUse names that describe the purpose or intent of the object. Do not worry about saving horizontal space as it is far more important to make your code immediately understandable by a new reader. Minimize the use of abbreviations that would likely be unknown to someone outside your project (especially acronyms and initialisms). Do not abbreviate by deleting letters within a word. As a rule of thumb, an abbreviation is probably OK if it's listed in Wikipedia. Generally speaking, descriptiveness should be proportional to the name's scope of visibility. For example, may be a fine name within a 5-line function, but within the scope of a class, it's likely too vague.\n\nNote that certain universally-known abbreviations are OK, such as for an iteration variable and for a template parameter.\n\nFor the purposes of the naming rules below, a \"word\" is anything that you would write in English without internal spaces. This includes abbreviations, such as acronyms and initialisms. For names written in mixed case (also sometimes referred to as \"camel case\" or \"Pascal case\"), in which the first letter of each word is capitalized, prefer to capitalize abbreviations as single words, e.g., rather than .\n\nTemplate parameters should follow the naming style for their category: type template parameters should follow the rules for type names, and non-type template parameters should follow the rules for variable names.\n\nFilenames should be all lowercase and can include underscores ( ) or dashes ( ). Follow the convention that your project uses. If there is no consistent local pattern to follow, prefer \" \".\n\nC++ files should have a filename extension, and header files should have a extension. Files that rely on being textually included at specific points should end in (see also the section on self-contained headers).\n\nDo not use filenames that already exist in , such as .\n\nIn general, make your filenames very specific. For example, use rather than . A very common case is to have a pair of files called, e.g., and , defining a class called .\n\nType names start with a capital letter and have a capital letter for each new word, with no underscores: , .\n\nThe names of all types — classes, structs, type aliases, enums, and type template parameters — have the same naming convention. Type names should start with a capital letter and have a capital letter for each new word. No underscores. For example:\n\nConcept names follow the same rules as type names\n\nThe names of variables (including function parameters) and data members are (all lowercase, with underscores between words). Data members of classes (but not structs) additionally have trailing underscores. For instance: , , .\n\nData members of classes, both static and non-static, are named like ordinary nonmember variables, but with a trailing underscore.\n\nData members of structs, both static and non-static, are named like ordinary nonmember variables. They do not have the trailing underscores that data members in classes have.\n\nSee Structs vs. Classes for a discussion of when to use a struct versus a class.\n\nVariables declared or , and whose value is fixed for the duration of the program, are named with a leading \"k\" followed by mixed case. Underscores can be used as separators in the rare cases where capitalization cannot be used for separation. For example:\n\nAll such variables with static storage duration (i.e., statics and globals, see Storage Duration for details) should be named this way, including those in templates where different instantiations of the template may have different values. This convention is optional for variables of other storage classes, e.g., automatic variables; otherwise the usual variable naming rules apply. For example:\n\nRegular functions have mixed case; accessors and mutators may be named like variables.\n\nOrdinarily, functions should start with a capital letter and have a capital letter for each new word.\n\nAccessors and mutators (get and set functions) may be named like variables. These often correspond to actual member variables, but this is not required. For example, and .\n\nNamespace names are all lower-case, with words separated by underscores. Top-level namespace names are based on the project name . Avoid collisions between nested namespaces and well-known top-level namespaces.\n\nThe name of a top-level namespace should usually be the name of the project or team whose code is contained in that namespace. The code in that namespace should usually be in a directory whose basename matches the namespace name (or in subdirectories thereof).\n\nKeep in mind that the rule against abbreviated names applies to namespaces just as much as variable names. Code inside the namespace seldom needs to mention the namespace name, so there's usually no particular need for abbreviation anyway.\n\nAvoid nested namespaces that match well-known top-level namespaces. Collisions between namespace names can lead to surprising build breaks because of name lookup rules. In particular, do not create any nested namespaces. Prefer unique project identifiers ( , ) over collision-prone names like . Also avoid overly deep nesting namespaces (TotW #130).\n\nFor namespaces, be wary of other code being added to the same namespace causing a collision (internal helpers within a team tend to be related and may lead to collisions). In such a situation, using the filename to make a unique internal name is helpful ( for use in ).\n\nEnumerators (for both scoped and unscoped enums) should be named like constants, not like macros. That is, use not .\n\nUntil January 2009, the style was to name enum values like macros. This caused problems with name collisions between enum values and macros. Hence, the change to prefer constant-style naming was put in place. New code should use constant-style naming.\n\nYou're not really going to define a macro, are you? If you do, they're like this: .\n\nPlease see the description of macros; in general macros should not be used. However, if they are absolutely needed, then they should be named with all capitals and underscores, and with a project-specific prefix.\n\nIf you are naming something that is analogous to an existing C or C++ entity then you can follow the existing naming convention scheme.\n\nComments are absolutely vital to keeping our code readable. The following rules describe what you should comment and where. But remember: while comments are very important, the best code is self-documenting. Giving sensible names to types and variables is much better than using obscure names that you must then explain through comments.\n\nWhen writing your comments, write for your audience: the next contributor who will need to understand your code. Be generous — the next one may be you!\n\nUse either the or syntax, as long as you are consistent.\n\nYou can use either the or the syntax; however, is much more common. Be consistent with how you comment and what style you use where.\n\nIf a source file (such as a file) declares multiple user-facing abstractions (common functions, related classes, etc.), include a comment describing the collection of those abstractions. Include enough detail for future authors to know what does not fit there. However, the detailed documentation about individual abstractions belongs with those abstractions, not at the file level.\n\nFor instance, if you write a file comment for , you do not need to include a file comment in or . On the other hand, if you write a collection of classes in that has no associated header file, you must include a file comment in .\n\nIf you make significant changes to a file with an author line, consider deleting the author line. New files should usually not contain copyright notice or author line.\n\nEvery non-obvious class or struct declaration should have an accompanying comment that describes what it is for and how it should be used.\n\nThe class comment should provide the reader with enough information to know how and when to use the class, as well as any additional considerations necessary to correctly use the class. Document the synchronization assumptions the class makes, if any. If an instance of the class can be accessed by multiple threads, take extra care to document the rules and invariants surrounding multithreaded use.\n\nThe class comment is often a good place for a small example code snippet demonstrating a simple and focused usage of the class.\n\nWhen sufficiently separated (e.g., and files), comments describing the use of the class should go together with its interface definition; comments about the class operation and implementation should accompany the implementation of the class's methods.\n\nDeclaration comments describe use of the function (when it is non-obvious); comments at the definition of a function describe operation.\n\nAlmost every function declaration should have comments immediately preceding it that describe what the function does and how to use it. These comments may be omitted only if the function is simple and obvious (e.g., simple accessors for obvious properties of the class). Private methods and functions declared in files are not exempt. Function comments should be written with an implied subject of This function and should start with the verb phrase; for example, \"Opens the file\", rather than \"Open the file\". In general, these comments do not describe how the function performs its task. Instead, that should be left to comments in the function definition.\n\nTypes of things to mention in comments at the function declaration:\n• What the inputs and outputs are. If function argument names are provided in `backticks`, then code-indexing tools may be able to present the documentation better.\n• For class member functions: whether the object remembers reference or pointer arguments beyond the duration of the method call. This is quite common for pointer/reference arguments to constructors.\n• For each pointer argument, whether it is allowed to be null and what happens if it is.\n• For each output or input/output argument, what happens to any state that argument is in. (E.g. is the state appended to or overwritten?).\n• If there are any performance implications of how a function is used.\n\nHere is an example:\n\nHowever, do not be unnecessarily verbose or state the completely obvious.\n\nWhen documenting function overrides, focus on the specifics of the override itself, rather than repeating the comment from the overridden function. In many of these cases, the override needs no additional documentation and thus no comment is required.\n\nWhen commenting constructors and destructors, remember that the person reading your code knows what constructors and destructors are for, so comments that just say something like \"destroys this object\" are not useful. Document what constructors do with their arguments (for example, if they take ownership of pointers), and what cleanup the destructor does. If this is trivial, just skip the comment. It is quite common for destructors not to have a header comment.\n\nIf there is anything tricky about how a function does its job, the function definition should have an explanatory comment. For example, in the definition comment you might describe any coding tricks you use, give an overview of the steps you go through, or explain why you chose to implement the function in the way you did rather than using a viable alternative. For instance, you might mention why it must acquire a lock for the first half of the function but why it is not needed for the second half.\n\nNote you should not just repeat the comments given with the function declaration, in the file or wherever. It's okay to recapitulate briefly what the function does, but the focus of the comments should be on how it does it.\n\nIn general the actual name of the variable should be descriptive enough to give a good idea of what the variable is used for. In certain cases, more comments are required.\n\nThe purpose of each class data member (also called an instance variable or member variable) must be clear. If there are any invariants (special values, relationships between members, lifetime requirements) not clearly expressed by the type and name, they must be commented. However, if the type and name suffice ( ), no comment is needed.\n\nIn particular, add comments to describe the existence and meaning of sentinel values, such as nullptr or -1, when they are not obvious. For example:\n\nAll global variables should have a comment describing what they are, what they are used for, and (if unclear) why they need to be global. For example:\n\nIn your implementation you should have comments in tricky, non-obvious, interesting, or important parts of your code.\n\nTricky or complicated code blocks should have comments before them.\n\nWhen the meaning of a function argument is nonobvious, consider one of the following remedies:\n• If the argument is a literal constant, and the same constant is used in multiple function calls in a way that tacitly assumes they're the same, you should use a named constant to make that constraint explicit, and to guarantee that it holds.\n• Consider changing the function signature to replace a argument with an argument. This will make the argument values self-describing.\n• For functions that have several configuration options, consider defining a single class or struct to hold all the options , and pass an instance of that. This approach has several advantages. Options are referenced by name at the call site, which clarifies their meaning. It also reduces function argument count, which makes function calls easier to read and write. As an added benefit, you don't have to change call sites when you add another option.\n• As a last resort, use comments to clarify argument meanings at the call site.\n\nConsider the following example:\n\nDo not state the obvious. In particular, don't literally describe what code does, unless the behavior is nonobvious to a reader who understands C++ well. Instead, provide higher level comments that describe why the code does what it does, or make the code self describing.\n\nSelf-describing code doesn't need a comment. The comment from the example above would be obvious:\n\nPay attention to punctuation, spelling, and grammar; it is easier to read well-written comments than badly written ones.\n\nComments should be as readable as narrative text, with proper capitalization and punctuation. In many cases, complete sentences are more readable than sentence fragments. Shorter comments, such as comments at the end of a line of code, can sometimes be less formal, but you should be consistent with your style.\n\nAlthough it can be frustrating to have a code reviewer point out that you are using a comma when you should be using a semicolon, it is very important that source code maintain a high level of clarity and readability. Proper punctuation, spelling, and grammar help with that goal.\n\nUse comments for code that is temporary, a short-term solution, or good-enough but not perfect.\n\ns should include the string in all caps, followed by the bug ID, name, e-mail address, or other identifier of the person or issue with the best context about the problem referenced by the .\n\nIf your is of the form \"At a future date do something\" make sure that you either include a very specific date (\"Fix by November 2005\") or a very specific event (\"Remove this code when all clients can handle XML responses.\").\n\nCoding style and formatting are pretty arbitrary, but a project is much easier to follow if everyone uses the same style. Individuals may not agree with every aspect of the formatting rules, and some of the rules may take some getting used to, but it is important that all project contributors follow the style rules so that they can all read and understand everyone's code easily.\n\nEach line of text in your code should be at most 80 characters long.\n\nThose who favor this rule argue that it is rude to force them to resize their windows and there is no need for anything longer. Some folks are used to having several code windows side-by-side, and thus don't have room to widen their windows in any case. People set up their work environment assuming a particular maximum window width, and 80 columns has been the traditional standard. Why change it?\n\nProponents of change argue that a wider line can make code more readable. The 80-column limit is an hidebound throwback to 1960s mainframes; modern equipment has wide screens that can easily show longer lines.\n\nA line may exceed 80 characters if it is\n• a comment line which is not feasible to split without harming readability, ease of cut and paste or auto-linking -- e.g., if a line contains an example command or a literal URL longer than 80 characters.\n• a string literal that cannot easily be wrapped at 80 columns. This may be because it contains URIs or other semantically-critical pieces, or because the literal contains an embedded language, or a multiline literal whose newlines are significant like help messages. In these cases, breaking up the literal would reduce readability, searchability, ability to click links, etc. Except for test code, such literals should appear at namespace scope near the top of a file. If a tool like Clang-Format doesn't recognize the unsplittable content, disable the tool around the content as necessary. \n\n\n\n (We must balance between usability/searchability of such literals and the readability of the code around them.)\n\nNon-ASCII characters should be rare, and must use UTF-8 formatting.\n\nYou shouldn't hard-code user-facing text in source, even English, so use of non-ASCII characters should be rare. However, in certain cases it is appropriate to include such words in your code. For example, if your code parses data files from foreign sources, it may be appropriate to hard-code the non-ASCII string(s) used in those data files as delimiters. More commonly, unittest code (which does not need to be localized) might contain non-ASCII strings. In such cases, you should use UTF-8, since that is an encoding understood by most tools able to handle more than just ASCII.\n\nHex encoding is also OK, and encouraged where it enhances readability — for example, , or, even more simply, , is the Unicode zero-width no-break space character, which would be invisible if included in the source as straight UTF-8.\n\nWhen possible, avoid the prefix. It has significantly different semantics starting in C++20 than in C++17, producing arrays of rather than , and will change again in C++23.\n\nYou shouldn't use and character types, since they're for non-UTF-8 text. For similar reasons you also shouldn't use (unless you're writing code that interacts with the Windows API, which uses extensively).\n\nUse only spaces, and indent 2 spaces at a time.\n\nWe use spaces for indentation. Do not use tabs in your code. You should set your editor to emit spaces when you hit the tab key.\n\nReturn type on the same line as function name, parameters on the same line if they fit. Wrap parameter lists which do not fit on a single line as you would wrap arguments in a function call.\n\nFunctions look like this:\n\nIf you have too much text to fit on one line:\n\nor if you cannot fit even the first parameter:\n• A parameter name may be omitted only if the parameter is not used in the function's definition.\n• If you cannot fit the return type and the function name on a single line, break between them.\n• If you break after the return type of a function declaration or definition, do not indent.\n• The open parenthesis is always on the same line as the function name.\n• There is never a space between the function name and the open parenthesis.\n• There is never a space between the parentheses and the parameters.\n• The open curly brace is always on the end of the last line of the function declaration, not the start of the next line.\n• The close curly brace is either on the last line by itself or on the same line as the open curly brace.\n• There should be a space between the close parenthesis and the open curly brace.\n• All parameters should be aligned if possible.\n\nUnused parameters that are obvious from context may be omitted:\n\nUnused parameters that might not be obvious should comment out the variable name in the function definition:\n\nAttributes, and macros that expand to attributes, appear at the very beginning of the function declaration or definition, before the return type:\n\nFormat parameters and bodies as for any other function, and capture lists like other comma-separated lists.\n\nFor by-reference captures, do not leave a space between the ampersand ( ) and the variable name.\n\nShort lambdas may be written inline as function arguments.\n\nFloating-point literals should always have a radix point, with digits on both sides, even if they use exponential notation. Readability is improved if all floating-point literals take this familiar form, as this helps ensure that they are not mistaken for integer literals, and that the / of the exponential notation is not mistaken for a hexadecimal digit. It is fine to initialize a floating-point variable with an integer literal (assuming the variable type can exactly represent that integer), but note that a number in exponential notation is never an integer literal.\n\nEither write the call all on a single line, wrap the arguments at the parenthesis, or start the arguments on a new line indented by four spaces and continue at that 4 space indent. In the absence of other considerations, use the minimum number of lines, including placing multiple arguments on each line where appropriate.\n\nFunction calls have the following format:\n\nIf the arguments do not all fit on one line, they should be broken up onto multiple lines, with each subsequent line aligned with the first argument. Do not add spaces after the open paren or before the close paren:\n\nArguments may optionally all be placed on subsequent lines with a four space indent:\n\nPut multiple arguments on a single line to reduce the number of lines necessary for calling a function unless there is a specific readability problem. Some find that formatting with strictly one argument on each line is more readable and simplifies editing of the arguments. However, we prioritize for the reader over the ease of editing arguments, and most readability problems are better addressed with the following techniques.\n\nIf having multiple arguments in a single line decreases readability due to the complexity or confusing nature of the expressions that make up some arguments, try creating variables that capture those arguments in a descriptive name:\n\nOr put the confusing argument on its own line with an explanatory comment:\n\nIf there is still a case where one argument is significantly more readable on its own line, then put it on its own line. The decision should be specific to the argument which is made more readable rather than a general policy.\n\nSometimes arguments form a structure that is important for readability. In those cases, feel free to format the arguments according to that structure:\n\nFormat a braced initializer list exactly like you would format a function call in its place.\n\nIf the braced list follows a name (e.g., a type or variable name), format as if the were the parentheses of a function call with that name. If there is no name, assume a zero-length name.\n\nAt a high level, looping or branching statements consist of the following components:\n• One or more statement keywords (e.g. , , , , , or ).\n• One or more controlled statements, or blocks of controlled statements.\n• The components of the statement should be separated by single spaces (not line breaks).\n• Inside the condition or iteration specifier, put one space (or a line break) between each semicolon and the next token, except if the token is a closing parenthesis or another semicolon.\n• Inside the condition or iteration specifier, do not put a space after the opening parenthesis or before the closing parenthesis.\n• Inside the controlled blocks, put one line break immediately after the opening brace, and one line break immediately before the closing brace.\n\nFor historical reasons, we allow one exception to the above rules: the curly braces for the controlled statement or the line breaks inside the curly braces may be omitted if as a result the entire statement appears on either a single line (in which case there is a space between the closing parenthesis and the controlled statement) or on two lines (in which case there is a line break after the closing parenthesis and there are no braces).\n\nThis exception does not apply to multi-keyword statements like or .\n\nUse this style only when the statement is brief, and consider that loops and branching statements with complex conditions or controlled statements may be more readable with curly braces. Some projects require curly braces always.\n\nblocks in statements can have curly braces or not, depending on your preference. If you do include curly braces, they should be placed as shown below.\n\nEmpty loop bodies should use either an empty pair of braces or with no braces, rather than a single semicolon.\n\nNo spaces around period or arrow. Pointer operators do not have trailing spaces.\n\nThe following are examples of correctly-formatted pointer and reference expressions:\n• There are no spaces around the period or arrow when accessing a member.\n• Pointer operators have no space after the or .\n\nWhen referring to a pointer or reference (variable declarations or definitions, arguments, return types, template parameters, etc), you may place the space before or after the asterisk/ampersand. In the trailing-space style, the space is elided in some cases (template parameters, etc).\n\nYou should do this consistently within a single file. When modifying an existing file, use the style in that file.\n\nIt is allowed (if unusual) to declare multiple variables in the same declaration, but it is disallowed if any of those have pointer or reference decorations. Such declarations are easily misread.\n\nWhen you have a boolean expression that is longer than the standard line length, be consistent in how you break up the lines.\n\nIn this example, the logical AND operator is always at the end of the lines:\n\nNote that when the code wraps in this example, both of the logical AND operators are at the end of the line. This is more common in Google code, though wrapping all operators at the beginning of the line is also allowed. Feel free to insert extra parentheses judiciously because they can be very helpful in increasing readability when used appropriately, but be careful about overuse. Also note that you should always use the punctuation operators, such as and , rather than the word operators, such as and .\n\nDo not needlessly surround the expression with parentheses.\n\nUse parentheses in only where you would use them in .\n\nYou may choose between , , and ; the following are all correct:\n\nBe careful when using a braced initialization list on a type with an constructor. A nonempty braced-init-list prefers the constructor whenever possible. Note that empty braces are special, and will call a default constructor if available. To force the non- constructor, use parentheses instead of braces.\n\nAlso, the brace form prevents narrowing of integral types. This can prevent some types of programming errors.\n\nThe hash mark that starts a preprocessor directive should always be at the beginning of the line.\n\nEven when preprocessor directives are within the body of indented code, the directives should start at the beginning of the line.\n\nSections in , and order, each indented one space.\n\nThe basic format for a class definition (lacking the comments, see Class Comments for a discussion of what comments are needed) is:\n• Any base class name should be on the same line as the subclass name, subject to the 80-column limit.\n• The , , and keywords should be indented one space.\n• Except for the first instance, these keywords should be preceded by a blank line. This rule is optional in small classes.\n• Do not leave a blank line after these keywords.\n• The section should be first, followed by the and finally the section.\n• See Declaration Order for rules on ordering declarations within each of these sections.\n\nConstructor initializer lists can be all on one line or with subsequent lines indented four spaces.\n\nThe acceptable formats for initializer lists are:\n\nThe contents of namespaces are not indented.\n\nNamespaces do not add an extra level of indentation. For example, use:\n\nDo not indent within a namespace:\n\nUse of horizontal whitespace depends on location. Never put trailing whitespace at the end of a line.\n\nAdding trailing whitespace can cause extra work for others editing the same file, when they merge, as can removing existing trailing whitespace. So: Don't introduce trailing whitespace. Remove it if you're already changing that line, or do it in a separate clean-up operation (preferably when no-one else is working on the file).\n\nThis is more a principle than a rule: don't use blank lines when you don't have to. In particular, don't put more than one or two blank lines between functions, resist starting functions with a blank line, don't end functions with a blank line, and be sparing with your use of blank lines. A blank line within a block of code serves like a paragraph break in prose: visually separating two thoughts.\n\nThe basic principle is: The more code that fits on one screen, the easier it is to follow and understand the control flow of the program. Use whitespace purposefully to provide separation in that flow.\n\nSome rules of thumb to help when blank lines may be useful:\n• Blank lines at the beginning or end of a function do not help readability.\n• Blank lines inside a chain of if-else blocks may well help readability.\n• A blank line before a comment line usually helps readability — the introduction of a new comment suggests the start of a new thought, and the blank line makes it clear that the comment goes with the following thing instead of the preceding.\n• Blank lines immediately inside a declaration of a namespace or block of namespaces may help readability by visually separating the load-bearing content from the (largely non-semantic) organizational wrapper. Especially when the first declaration inside the namespace(s) is preceded by a comment, this becomes a special case of the previous rule, helping the comment to \"attach\" to the subsequent declaration.\n\nThe coding conventions described above are mandatory. However, like all good rules, these sometimes have exceptions, which we discuss here.\n\nWindows programmers have developed their own set of coding conventions, mainly derived from the conventions in Windows headers and other Microsoft code. We want to make it easy for anyone to understand your code, so we have a single set of guidelines for everyone writing C++ on any platform.\n\nIt is worth reiterating a few of the guidelines that you might forget if you are used to the prevalent Windows style:\n• Do not use Hungarian notation (for example, naming an integer ). Use the Google naming conventions, including the extension for source files.\n• Windows defines many of its own synonyms for primitive types, such as , , etc. It is perfectly acceptable, and encouraged, that you use these types when calling Windows API functions. Even so, keep as close as you can to the underlying C++ types. For example, use instead of .\n• When compiling with Microsoft Visual C++, set the compiler to warning level 3 or higher, and treat all warnings as errors.\n• Do not use ; instead use the standard Google include guards. The path in the include guards should be relative to the top of your project tree.\n• In fact, do not use any nonstandard extensions, like and , unless you absolutely must. Using and is allowed; however, you must use them through macros such as and , so that someone can easily disable the extensions if they share the code.\n\nHowever, there are just a few rules that we occasionally need to break on Windows:\n• Normally we strongly discourage the use of multiple implementation inheritance; however, it is required when using COM and some ATL/WTL classes. You may use multiple implementation inheritance to implement COM or ATL/WTL classes and interfaces.\n• Although you should not use exceptions in your own code, they are used extensively in the ATL and some STLs, including the one that comes with Visual C++. When using the ATL, you should define to disable exceptions. You should investigate whether you can also disable exceptions in your STL, but if not, it is OK to turn on exceptions in the compiler. (Note that this is only to get the STL to compile. You should still not write exception handling code yourself.)\n• The usual way of working with precompiled headers is to include a header file at the top of each source file, typically with a name like or . To make your code easier to share with other projects, avoid including this file explicitly (except in ), and use the compiler option to include the file automatically.\n• Resource headers, which are usually named and contain only macros, do not need to conform to these style guidelines."
    },
    {
        "link": "https://cplusplus.com/forum/beginner/143978",
        "document": "I want my first item to be aligned to the left, and the value of the items to be aligned to the right no matter what size characters the first item is, how do I do this? This is what I currently have but it's not working.\n\n ( i = 0; i < armory.size(); i++){ std::cout << armory[i].getName(); //every item has different name std::cout << std::right << std::setw(10) << armory[i].getValue() << std::endl; //this still aligns it only ten spaces from where the name ends for some reason. } \n\n \n\n This is what comes out :\n\n \n\n I am terribly bad when it comes to outputting data on the console, some help please? I am trying to format my output data like this:I want my first item to be aligned to the left, and the value of the items to be aligned to the right no matter what size characters the first item is, how do I do this? This is what I currently have but it's not working.This is what comes out :I am terribly bad when it comes to outputting data on the console, some help please?\n\nYou are almost there. You just have setw in wrong place:\n\n \n\n Avoid use of the flushing in loops, it can hamper perfomance.\n\nbefore that somewhere, do you? Try to do before that (and I think width of 15 is not enough, make it 20)\n\n \n\n EDIT: Oh, std::right is default. Pass std::left before outputting anything then.\n\n item { std::string name; value; std::string& getName() { name; } getValue() { value; } }; std; main () { item armory[] = {{ , 45}, { , 67}, { , 20}}; std::cout << std::left; ( & it: armory) std::cout << std::setw(18) << it.getName() << it.getValue() << ; } You didn't passbefore that somewhere, do you? Try to dobefore that (and I think width of 15 is not enough, make it 20)EDIT: Oh, std::right is default. Pass std::left before outputting anything then.\n\nIt works!\n\n \n\n @MiiNiPaa thanks man, any idea though why std::right is default and not left? \n\n Wouldn't it make more sense for it to be the opposite?\n\nI absolutely do not understand this. \n\n I am having trouble YET AGAIN with outputting something else the way I want to, can anyone enlighten me by sharing a link for dummies or by a good explanation? \n\n \n\n \n\n \n\n :(\n\n\n\n I was looking online and I saw some stuff posted on this same site that clarified things for me a bit such as determines minimum size of output. \n\n \n\n This is my code and it's outputting fine. Thanks for the response MiiNiPaa.\n\n \n\n \n\n \n\n \n\n This is the output: \n\n I solved it after I posted it, however, I still feel iffy when formatting new things.I was looking online and I saw some stuff posted on this same site that clarified things for me a bit such asdetermines minimum size of output.This is my code and it's outputting fine. Thanks for the response MiiNiPaa.This is the output:\n\n\n\n \n\n \n\n \n\n \n\n \n\n If this is correct, then why is my code not outputting numbers to the right?\n\n \n\n \n\n \n\n Output looks like this:\n\n Current Hit Points: ---------20.00 <- Max Hp: ---------------------20.00 <- Strength: -------------------0 Defense: --------------------5.00 < ----- Notice how numbers are not aligned to the right? \n\n \n\n By the way, just for information, earlier in the program just a few lines (like 6 lines) I use: \n\n \n\n \n\n Sorry this simple thing is a drag to me. According to what megatron 0 said std::right is supposed to be default. It seems correct and makes sense for it to be that way. As his example shows:If this is correct, then why is my code not outputting numbers to the right?Output looks like this:By the way, just for information, earlier in the program just a few lines (like 6 lines) I use:Sorry this simple thing is a drag to me.\n\nOuputs a properly aligned and filled line with width 0f 30.\n\n \n\n Ouputs a properly aligned and filled line with least possible width. Provide another setw() call before it and you will see the difference.\n\nYes.\n\n MiiNiPaa, you are awesome. You did not just hand me the answer you told me how to solve the issue.\n\n \n\n Thanks man. I guess the numbers were just conforming to the previously established minimum width correct? Once I created a new minimum width they all aligned properly to the right.\n\nworks only on next output. All outputs after that would be outputted as if was called. Some manipulators work to all output (like ). Some works only for next output. Consult reference to learn about behavior of specific manipulator:\n\n http://en.cppreference.com/w/cpp/io/manip works only on next output. All outputs after that would be outputted as ifwas called. Some manipulators work to all output (like). Some works only for next output. Consult reference to learn about behavior of specific manipulator:"
    },
    {
        "link": "https://stackoverflow.com/questions/5280858/indenting-paragraph-with-cout",
        "document": "Here are a couple of solutions that will work if you are willing to throw out any multiple spacing and/or other whitespace between words.\n\nThe first approach, which is the most straightforward, would be to read the text into an and extract words from the stream. Before printing each word, check to see whether the word will fit on the current line and print a newline if it won't. This particular implementation won't handle words longer than the maximum line length correctly, but it wouldn't be difficult to modify it to split long words.\n\nA second, more \"advanced\" option, would be to write a custom that formats lines as you expect them to be formatted. I've named this , for \"funny formatting,\" but you could name it something more appropriate if you wanted to use it. This implementation does correctly split long words.\n\nWhile the iterator implementation is a bit complex, the usage is quite straightforward:\n\nThe actual implementation of the iterator is as follows:\n\n[If you copy and paste this code snippet and the from above it, it should compile and run if your compiler supports the C++0x ; you can replace that with or if your compiler doesn't have C++0x support yet.]\n\nThis approach is a bit tricky because iterators have to be copyable and we have to be sure that any remaining buffered text is only printed exactly once. We do this by relying on the fact that any time an output iterator is written to, any copies of it are no longer usable."
    }
]