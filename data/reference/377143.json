[
    {
        "link": "https://devforum.roblox.com/t/making-a-minimap-with-image-labels/654060",
        "document": "I was wondering how I could make a minimap using ImageLabels? I couldn’t really find anything other methods of making a minimap other than using a plugin or viewport frames which I don’t really want to use.\n\nI’m not asking for full code to be provided, just a point n the right direction.\n\nAny help would be greatly appreicated!"
    },
    {
        "link": "https://devforum.roblox.com/t/how-to-make-a-minimap-utilizing-an-image-label/1896531",
        "document": "Ive seen a bunch of people make minimaps with imagelabels where they translate the poisition of the player to a UDim2 value to offset the position of the minimap from, but none of them have good tutorials that I can follow\n\nIve already made a minimap in the past by taking a render of the map I have, applying it as a decal, and having the camera follow the player. This works great, however the issue is the map I have is larger than what a parts maximum size is, and since imagelables dont get rendered in ViewportFrames with surfaceguis, im not sure how I would use viewport frames to do this. I could make a direct copy of the map inside of the viewport, however there is way too much assets for it to be performance friendly and there is also the issue of terrain, since most of the map is made out of terrain"
    },
    {
        "link": "https://devforum.roblox.com/t/how-to-make-a-minimap-from-a-image-label/1894475",
        "document": "There are two ways that I can think of, you could try just dividing the original image into sections based on the number of parts in the grey plane and uploading them as individual decals. Alternatively, a better method I think would be to use a texture on each of the parts and do some sort of maths to determine how much offset to apply based on the number of rows/columns around the part.\n\nEdit: Came back with some maths that might work? It’s based off an old gif player that used a single spritesheet on a texture. It’s a bit rushed so I might come back and polish it/make it easier to use if I get the chance."
    },
    {
        "link": "https://create.roblox.com/docs/reference/engine/classes/ImageLabel",
        "document": "This property is a content-type property that should hold the asset ID of a decal or image uploaded to Roblox. It functions identically to Decal.Texture with regards to loading the image from Roblox. The rendered image can be modified using ImageColor3 and ImageTransparency.\n\nThis property determines how an image is colorized. When set to white, no colorization occurs. This property is very useful for reusing image assets; if the source image is completely white with transparency, you can set the entire color of the image at once with this property.\n\nThis property should hold an asset URI or a reference to an EditableImage object. The asset URI can reference a decal or image uploaded to Roblox. It functions identically to Decal.Texture with regards to loading the image. The rendered image will be colorized using ImageButton.ImageColor3. It is possible to make the image render as tiled, scaled to fit, or 9-sliced, by adjusting the ImageButton.ScaleType property.\n\nAllows the partial display of an image in conjunction with ImageRectOffset. This property determines the pixel size of the image area to be displayed. If either dimension is set to 0, the entire image is displayed instead.\n\nThis property determines in what way an ImageLabel.Image is rendered when the UI element's absolute size differs from the source image's size. By default, this property is Enum.ScaleType.Stretch which will simply stretch/compact the image dimensions so it fits the UI element's space exactly. Since transparent pixels are set to black when uploading to Roblox, transparent images should apply alpha blending to avoid a blackish outline around scaled images. For Enum.ScaleType.Slice, the SliceCenter property will be revealed in the Properties window. This is for nine-slice UI: when scaling up, the corners will remain the source image size. The edges of the image will stretch to the width/height of the image. Finally, the center of the image will stretch to fill the center area of the image. Finally, for Enum.ScaleType.Tile, the TileSize property will be revealed in the Properties window. This is for tiled images, where the size of each image tile is determined by the TileSize property.\n\nThis property sets the slice boundaries of a 9-sliced image when ScaleType is set to Enum.ScaleType.Slice. Please note that this property is only visible in the Properties window under this condition. To learn more about 9-slice images, see UI 9 Slice Design.\n\nScales the 9-slice edges by the specified ratio. This means that the edges around the 9-slice will grow as if you'd uploaded a new version of the texture upscaled. Defaults to 1.0. See also ScaleType, SliceCenter, and SliceScale.\n\nThis property sets the tiling size of the ImageLabel with a default of . Tiling starts at the top-left corner of the image. This property is only active if the ScaleType for the ImageLabel is set to Enum.ScaleType.Tile. -- Set the source image to be a 64x64 padlock -- enough to fill the UI element's space -- Slice will turn the image into a nine-slice UI."
    },
    {
        "link": "https://create.roblox.com/docs/resources/battle-royale/minimap-system",
        "document": "The minimap shows a subset of the world map at the top-right corner of the player's screen. It also displays an indicator to show where you are, where the delivery vehicle is, and where your teammates are when playing in team mode. Lastly, it shows the current state of the storm and where the storm will be next so players know how to avoid it.\n\nPlayers can toggle between the minimap and world map by pressing M on a keyboard, pressing up on a gamepad's DPad, or by touching the minimap on touchscreens.\n\nThe minimap is simply an ImageLabel that displays a previously-generated image and uses CollectionService to show the position of objects with specific tags. All of the UI objects used for the minimap are inside of the minimap screen GUI located in ReplicatedStorage/Assets/GuiObjects.\n\nTo add new indicators that show up on the minimap, complete these steps:\n• None Using the Tag Editor, accessible from the View tab, apply a custom tag to the workspace object that you want to show up on the minimap.\n• None Add the ImageLabel you want to represent the object as a child of ReplicatedStorage/Assets/GuiObjects/minimap/mapframe and give it a unique name.\n• None Inside of ReplicatedStorage/Libraries/Guis/MinimapGui, locate the MinimapGui.start() function. Inside it, register the tag as shown below, where tag is the tag you registered in step #1 and indicatorLabel is the name of the ImageLabel you added in step #2.\n\nTo customize the minimap or use the minimap system with your own map and minimap image, you can change these values in ReplicatedFirst/Configurations/MainConfiguration:"
    },
    {
        "link": "https://devforum.roblox.com/t/making-a-minimap-with-image-labels/654060",
        "document": "I was wondering how I could make a minimap using ImageLabels? I couldn’t really find anything other methods of making a minimap other than using a plugin or viewport frames which I don’t really want to use.\n\nI’m not asking for full code to be provided, just a point n the right direction.\n\nAny help would be greatly appreicated!"
    },
    {
        "link": "https://create.roblox.com/docs/reference/engine/classes/ImageLabel",
        "document": "This property is a content-type property that should hold the asset ID of a decal or image uploaded to Roblox. It functions identically to Decal.Texture with regards to loading the image from Roblox. The rendered image can be modified using ImageColor3 and ImageTransparency.\n\nThis property determines how an image is colorized. When set to white, no colorization occurs. This property is very useful for reusing image assets; if the source image is completely white with transparency, you can set the entire color of the image at once with this property.\n\nThis property should hold an asset URI or a reference to an EditableImage object. The asset URI can reference a decal or image uploaded to Roblox. It functions identically to Decal.Texture with regards to loading the image. The rendered image will be colorized using ImageButton.ImageColor3. It is possible to make the image render as tiled, scaled to fit, or 9-sliced, by adjusting the ImageButton.ScaleType property.\n\nAllows the partial display of an image in conjunction with ImageRectOffset. This property determines the pixel size of the image area to be displayed. If either dimension is set to 0, the entire image is displayed instead.\n\nThis property determines in what way an ImageLabel.Image is rendered when the UI element's absolute size differs from the source image's size. By default, this property is Enum.ScaleType.Stretch which will simply stretch/compact the image dimensions so it fits the UI element's space exactly. Since transparent pixels are set to black when uploading to Roblox, transparent images should apply alpha blending to avoid a blackish outline around scaled images. For Enum.ScaleType.Slice, the SliceCenter property will be revealed in the Properties window. This is for nine-slice UI: when scaling up, the corners will remain the source image size. The edges of the image will stretch to the width/height of the image. Finally, the center of the image will stretch to fill the center area of the image. Finally, for Enum.ScaleType.Tile, the TileSize property will be revealed in the Properties window. This is for tiled images, where the size of each image tile is determined by the TileSize property.\n\nThis property sets the slice boundaries of a 9-sliced image when ScaleType is set to Enum.ScaleType.Slice. Please note that this property is only visible in the Properties window under this condition. To learn more about 9-slice images, see UI 9 Slice Design.\n\nScales the 9-slice edges by the specified ratio. This means that the edges around the 9-slice will grow as if you'd uploaded a new version of the texture upscaled. Defaults to 1.0. See also ScaleType, SliceCenter, and SliceScale.\n\nThis property sets the tiling size of the ImageLabel with a default of . Tiling starts at the top-left corner of the image. This property is only active if the ScaleType for the ImageLabel is set to Enum.ScaleType.Tile. -- Set the source image to be a 64x64 padlock -- enough to fill the UI element's space -- Slice will turn the image into a nine-slice UI."
    },
    {
        "link": "https://devforum.roblox.com/t/how-to-make-a-minimap-utilizing-an-image-label/1896531",
        "document": ""
    },
    {
        "link": "https://devforum.roblox.com/t/how-to-put-any-image-on-a-imagelabel/3149783",
        "document": "Step #1\n\n Do you know how to add a image to Roblox via Studio?\n\n (if not go research how)\n\nIn Studio…\n\n Click VIEW tab/Asset Manager\n\n in the Asset Manager window (that is now open)\n\n On Image, Right click/add image… pick your image.\n\nStep #2\n\n Do you know how to put an image into a Imagelable or a decal using the ID?\n\n (if not go research how)\n\n This always seems to come up on the wrong side of the object you need to make sure that is right.\n\n On the SurfaceGui/Face … front, back … whatever it is for you.\n\n On the Imagelable you need to set the size at {1, 0},{1, 0} for fully covered.\n\nIt is also way easier to use a Decal for this and skip the GUI.\n\n ImageLabel needs to use a SurfaceGui for the part used and the SurfaceGui setting Adornee needs to be set to the part used.\n\nHow to do both ramdom video on this.\n\n Odd way of getting the image however.\n\nNow all we need is the video image…\n\nThis is the actual video…\n\n … https://www.youtube.com/watch?v=xvFZjo5PgG0\n\n In the browser URL put…\n\n … http://img.youtube.com/vi/xvFZjo5PgG0/hqdefault.jpg\n\n See how xvFZjo5PgG0 was added to that line.\n\nSave the image from the browers with right click menu save image.\n\n Then back to step 1 and 2\n\noutcome:\n\n \n\n All this said … I have no clue if that image would be copyrighted.\n\n I’m thinking it would be. ???\n\n As far as doing this in real time … I wouldn’t even touch that\n\n due to copyrights.\n\nYes I post just like I program … refine, refine, refine"
    },
    {
        "link": "https://devforum.roblox.com/t/how-can-i-make-the-players-icon-go-on-the-screen-when-they-vote-for-a-map/2581038",
        "document": "I think I said it wrong I just realised. Here is my existing script for the voting system.\n\n Client:"
    }
]