[
    {
        "link": "https://postgresql.org/docs/current/sql-insert.html",
        "document": "inserts new rows into a table. One can insert one or more rows specified by value expressions, or zero or more rows resulting from a query. The target column names can be listed in any order. If no list of column names is given at all, the default is all the columns of the table in their declared order; or the first column names, if there are only columns supplied by the clause or . The values supplied by the clause or are associated with the explicit or implicit column list left-to-right. Each column not present in the explicit or implicit column list will be filled with a default value, either its declared default value or null if there is none. If the expression for any column is not of the correct data type, automatic type conversion will be attempted. into tables that lack unique indexes will not be blocked by concurrent activity. Tables with unique indexes might block if concurrent sessions perform actions that lock or modify rows matching the unique index values being inserted; the details are covered in Section 62.5. can be used to specify an alternative action to raising a unique constraint or exclusion constraint violation error. (See ON CONFLICT Clause below.) The optional clause causes to compute and return value(s) based on each row actually inserted (or updated, if an clause was used). This is primarily useful for obtaining values that were supplied by defaults, such as a serial sequence number. However, any expression using the table's columns is allowed. The syntax of the list is identical to that of the output list of . Only rows that were successfully inserted or updated will be returned. For example, if a row was locked but not updated because an ON CONFLICT DO UPDATE ... WHERE clause was not satisfied, the row will not be returned. You must have privilege on a table in order to insert into it. If is present, privilege on the table is also required. If a column list is specified, you only need privilege on the listed columns. Similarly, when is specified, you only need privilege on the column(s) that are listed to be updated. However, also requires privilege on any column whose values are read in the expressions or . Use of the clause requires privilege on all columns mentioned in . If you use the clause to insert rows from a query, you of course need to have privilege on any table or column used in the query.\n\nThis section covers parameters that may be used when only inserting new rows. Parameters exclusively used with the clause are described separately. The clause allows you to specify one or more subqueries that can be referenced by name in the query. See Section 7.8 and SELECT for details. It is possible for the ( statement) to also contain a clause. In such a case both sets of can be referenced within the , but the second one takes precedence since it is more closely nested. The name (optionally schema-qualified) of an existing table. A substitute name for . When an alias is provided, it completely hides the actual name of the table. This is particularly useful when targets a table named , since that will otherwise be taken as the name of the special table representing the row proposed for insertion. The name of a column in the table named by . The column name can be qualified with a subfield name or array subscript, if needed. (Inserting into only some fields of a composite column leaves the other fields null.) When referencing a column with , do not include the table's name in the specification of a target column. For example, INSERT INTO table_name ... ON CONFLICT DO UPDATE SET table_name.col = 1 is invalid (this follows the general behavior for ). If this clause is specified, then any values supplied for identity columns will override the default sequence-generated values. For an identity column defined as , it is an error to insert an explicit value (other than ) without specifying either or . (For an identity column defined as , is the normal behavior and specifying it does nothing, but PostgreSQL allows it as an extension.) If this clause is specified, then any values supplied for identity columns are ignored and the default sequence-generated values are applied. This clause is useful for example when copying values between tables. Writing INSERT INTO tbl2 OVERRIDING USER VALUE SELECT * FROM tbl1 will copy from all columns that are not identity columns in while values for the identity columns in will be generated by the sequences associated with . All columns will be filled with their default values, as if were explicitly specified for each column. (An clause is not permitted in this form.) An expression or value to assign to the corresponding column. The corresponding column will be filled with its default value. An identity column will be filled with a new value generated by the associated sequence. For a generated column, specifying this is permitted but merely specifies the normal behavior of computing the column from its generation expression. A query ( statement) that supplies the rows to be inserted. Refer to the SELECT statement for a description of the syntax. An expression to be computed and returned by the command after each row is inserted or updated. The expression can use any column names of the table named by . Write to return all columns of the inserted or updated row(s). A name to use for a returned column. The optional clause specifies an alternative action to raising a unique violation or exclusion constraint violation error. For each individual row proposed for insertion, either the insertion proceeds, or, if an arbiter constraint or index specified by is violated, the alternative is taken. ON CONFLICT DO NOTHING simply avoids inserting a row as its alternative action. updates the existing row that conflicts with the row proposed for insertion as its alternative action. can perform unique index inference. When performing inference, it consists of one or more columns and/or expressions, and an optional . All unique indexes that, without regard to order, contain exactly the -specified columns/expressions are inferred (chosen) as arbiter indexes. If an is specified, it must, as a further requirement for inference, satisfy arbiter indexes. Note that this means a non-partial unique index (a unique index without a predicate) will be inferred (and thus used by ) if such an index satisfying every other criteria is available. If an attempt at inference is unsuccessful, an error is raised. guarantees an atomic or outcome; provided there is no independent error, one of those two outcomes is guaranteed, even under high concurrency. This is also known as UPSERT — “UPDATE or INSERT”. Specifies which conflicts takes the alternative action on by choosing arbiter indexes. Either performs unique index inference, or names a constraint explicitly. For ON CONFLICT DO NOTHING , it is optional to specify a ; when omitted, conflicts with all usable constraints (and unique indexes) are handled. For , a must be provided. specifies an alternative action. It can be either , or a clause specifying the exact details of the action to be performed in case of a conflict. The and clauses in have access to the existing row using the table's name (or an alias), and to the row proposed for insertion using the special table. privilege is required on any column in the target table where corresponding columns are read. Note that the effects of all per-row triggers are reflected in values, since those effects may have contributed to the row being excluded from insertion. The name of a column. Used to infer arbiter indexes. Follows format. privilege on is required. Similar to , but used to infer expressions on columns appearing within index definitions (not simple columns). Follows format. privilege on any column appearing within is required. When specified, mandates that corresponding or use a particular collation in order to be matched during inference. Typically this is omitted, as collations usually do not affect whether or not a constraint violation occurs. Follows format. When specified, mandates that corresponding or use particular operator class in order to be matched during inference. Typically this is omitted, as the equality semantics are often equivalent across a type's operator classes anyway, or because it's sufficient to trust that the defined unique indexes have the pertinent definition of equality. Follows format. Used to allow inference of partial unique indexes. Any indexes that satisfy the predicate (which need not actually be partial indexes) can be inferred. Follows format. privilege on any column appearing within is required. Explicitly specifies an arbiter constraint by name, rather than inferring a constraint or index. An expression that returns a value of type . Only rows for which this expression returns will be updated, although all rows will be locked when the action is taken. Note that is evaluated last, after a conflict has been identified as a candidate to update. Note that exclusion constraints are not supported as arbiters with . In all cases, only constraints and unique indexes are supported as arbiters. with an clause is a “deterministic” statement. This means that the command will not be allowed to affect any single existing row more than once; a cardinality violation error will be raised when this situation arises. Rows proposed for insertion should not duplicate each other in terms of attributes constrained by an arbiter index or constraint. Note that it is currently not supported for the clause of an applied to a partitioned table to update the partition key of a conflicting row such that it requires the row be moved to a new partition. It is often preferable to use unique index inference rather than naming a constraint directly using . Inference will continue to work correctly when the underlying index is replaced by another more or less equivalent index in an overlapping way, for example when using before dropping the index being replaced.\n\nOn successful completion, an command returns a command tag of the form The is the number of rows inserted or updated. is always 0 (it used to be the assigned to the inserted row if was exactly one and the target table was declared and 0 otherwise, but creating a table is not supported anymore). If the command contains a clause, the result will be similar to that of a statement containing the columns and values defined in the list, computed over the row(s) inserted or updated by the command.\n\nIn this example, the column is omitted and therefore it will have the default value: This example uses the clause for the date columns rather than specifying a value: INSERT INTO films VALUES ('UA502', 'Bananas', 105, DEFAULT, 'Comedy', '82 minutes'); INSERT INTO films (code, title, did, date_prod, kind) VALUES ('T_601', 'Yojimbo', 106, DEFAULT, 'Drama'); To insert a row consisting entirely of default values: To insert multiple rows using the multirow syntax: INSERT INTO films (code, title, did, date_prod, kind) VALUES ('B6717', 'Tampopo', 110, '1985-02-10', 'Comedy'), ('HG120', 'The Dinner Game', 140, DEFAULT, 'Comedy'); This example inserts some rows into table from a table with the same column layout as : INSERT INTO films SELECT * FROM tmp_films WHERE date_prod < '2004-05-07'; This example inserts into array columns: -- Create an empty 3x3 gameboard for noughts-and-crosses INSERT INTO tictactoe (game, board[1:3][1:3]) VALUES (1, '{{\" \",\" \",\" \"},{\" \",\" \",\" \"},{\" \",\" \",\" \"}}'); -- The subscripts in the above example aren't really needed INSERT INTO tictactoe (game, board) VALUES (2, '{{X,\" \",\" \"},{\" \",O,\" \"},{\" \",X,\" \"}}'); Insert a single row into table , returning the sequence number generated by the clause: INSERT INTO distributors (did, dname) VALUES (DEFAULT, 'XYZ Widgets') RETURNING did; Increment the sales count of the salesperson who manages the account for Acme Corporation, and record the whole updated row along with current time in a log table: WITH upd AS ( UPDATE employees SET sales_count = sales_count + 1 WHERE id = (SELECT sales_person FROM accounts WHERE name = 'Acme Corporation') RETURNING * ) INSERT INTO employees_log SELECT *, current_timestamp FROM upd; Insert or update new distributors as appropriate. Assumes a unique index has been defined that constrains values appearing in the column. Note that the special table is used to reference values originally proposed for insertion: INSERT INTO distributors (did, dname) VALUES (5, 'Gizmo Transglobal'), (6, 'Associated Computing, Inc') ON CONFLICT (did) DO UPDATE SET dname = EXCLUDED.dname; Insert a distributor, or do nothing for rows proposed for insertion when an existing, excluded row (a row with a matching constrained column or columns after before row insert triggers fire) exists. Example assumes a unique index has been defined that constrains values appearing in the column: INSERT INTO distributors (did, dname) VALUES (7, 'Redline GmbH') ON CONFLICT (did) DO NOTHING; Insert or update new distributors as appropriate. Example assumes a unique index has been defined that constrains values appearing in the column. clause is used to limit the rows actually updated (any existing row not updated will still be locked, though): -- Don't update existing distributors based in a certain ZIP code INSERT INTO distributors AS d (did, dname) VALUES (8, 'Anvil Distribution') ON CONFLICT (did) DO UPDATE SET dname = EXCLUDED.dname || ' (formerly ' || d.dname || ')' WHERE d.zipcode <> '21201'; -- Name a constraint directly in the statement (uses associated -- index to arbitrate taking the DO NOTHING action) INSERT INTO distributors (did, dname) VALUES (9, 'Antwerp Design') ON CONFLICT ON CONSTRAINT distributors_pkey DO NOTHING; Insert new distributor if possible; otherwise . Example assumes a unique index has been defined that constrains values appearing in the column on a subset of rows where the Boolean column evaluates to : -- This statement could infer a partial unique index on \"did\" -- with a predicate of \"WHERE is_active\", but it could also -- just use a regular unique constraint on \"did\" INSERT INTO distributors (did, dname) VALUES (10, 'Conrad International') ON CONFLICT (did) WHERE is_active DO NOTHING;"
    },
    {
        "link": "https://stackoverflow.com/questions/3205468/insert-value-into-a-column-in-postgresql",
        "document": "I think we need a bit more info to understand the issue, it sounds like you just want...\n\nIf you've already got data there and you want to UPDATE that column for all rows then..."
    },
    {
        "link": "https://w3schools.com/postgresql/postgresql_insert_into.php",
        "document": "To insert data into a table in PostgreSQL, we use the statement.\n\nThe following SQL statement will insert one row of data into the table you created in the previous chapter.\n\nThe SQL Shell application will return the following:\n\nWhich means that row was inserted.\n\nDon't think about the , for now, just accept that it represents something else and will always be .\n\nAs you can see in the SQL statement above, string values must be written with apostrophes.\n\nNumeric values can be written without apostrophes, but you can include them if you want.\n\nTo check the result we can display the table with this SQL statement:\n\nWhich will return this result:\n\nTo insert multiple rows of data, we use the same statement, but with multiple values:\n\nThe SQL Shell application will return the following:\n\nTo check the result we can display the table with this SQL statement:\n\nClick the \"Run Example\" button to see the result of the select statement."
    },
    {
        "link": "https://postgresql.org/docs/7.4/sql-insert.html",
        "document": "allows one to insert new rows into a table. One can insert a single row at a time or several rows as a result of a query.\n\nThe columns in the target list may be listed in any order. Each column not present in the target list will be inserted using a default value, either its declared default value or null.\n\nIf the expression for each column is not of the correct data type, automatic type conversion will be attempted.\n\nYou must have privilege to a table in order to insert into it. If you use the clause to insert rows from a query, you also need to have privilege on any table used in the query."
    },
    {
        "link": "https://w3schools.com/sql/sql_insert.asp",
        "document": "The statement is used to insert new records in a table.\n\nIt is possible to write the statement in two ways:\n\n1. Specify both the column names and the values to be inserted:\n\n2. If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query. However, make sure the order of the values is in the same order as the columns in the table. Here, the syntax would be as follows:\n\nBelow is a selection from the Customers table used in the examples:\n\nThe following SQL statement inserts a new record in the \"Customers\" table:\n\nThe selection from the \"Customers\" table will now look like this:\n\nDid you notice that we did not insert any number into the CustomerID field?\n\nThe CustomerID column is an auto-increment field and will be generated automatically when a new record is inserted into the table.\n\nInsert Data Only in Specified Columns\n\nIt is also possible to only insert data in specific columns.\n\nThe following SQL statement will insert a new record, but only insert data in the \"CustomerName\", \"City\", and \"Country\" columns (CustomerID will be updated automatically):\n\nThe selection from the \"Customers\" table will now look like this:\n\nIt is also possible to insert multiple rows in one statement.\n\nTo insert multiple rows of data, we use the same statement, but with multiple values:\n\nMake sure you separate each set of values with a comma .\n\nThe selection from the \"Customers\" table will now look like this:"
    },
    {
        "link": "https://dev.mysql.com/doc/en/insert-select.html",
        "document": "With , you can quickly insert many rows into a table from the result of a statement, which can select from one or many tables. For example:\n\nstatement in place of , as shown here:\n\nis equivalent to . It can be useful when inserting all columns from the source table into the target table, and no filtering with WHERE is required. In addition, the rows from can be ordered by one or more columns using , and the number of rows inserted can be limited using a clause. For more information, see Section 15.2.16, “TABLE Statement”.\n\nThe following conditions hold for statements, and, except where noted, for as well:\n• None Specify to ignore rows that would cause duplicate-key violations.\n• None The target table of the statement may appear in the clause of the part of the query, or as the table named by . However, you cannot insert into a table and select from the same table in a subquery. When selecting from and inserting into the same table, MySQL creates an internal temporary table to hold the rows from the and then inserts those rows into the target table. However, you cannot use when is a table, because tables cannot be referred to twice in the same statement. For the same reason, you cannot use when is a temporary table. See Section 10.4.4, “Internal Temporary Table Use in MySQL”, and Section B.3.6.2, “TEMPORARY Table Problems”.\n• None To ensure that the binary log can be used to re-create the original tables, MySQL does not permit concurrent inserts for or statements (see Section 10.11.3, “Concurrent Inserts”).\n• None To avoid ambiguous column reference problems when the and the refer to the same table, provide a unique alias for each table used in the part, and qualify column names in that part with the appropriate alias. The statement does not support aliases.\n\nYou can explicitly select which partitions or subpartitions (or both) of the source or target table (or both) are to be used with a clause following the name of the table. When is used with the name of the source table in the portion of the statement, rows are selected only from the partitions or subpartitions named in its partition list. When is used with the name of the target table for the portion of the statement, it must be possible to insert all rows selected into the partitions or subpartitions named in the partition list following the option. Otherwise, the statement fails. For more information and examples, see Section 26.5, “Partition Selection”.\n\nFor statements, see Section 15.2.7.2, “INSERT ... ON DUPLICATE KEY UPDATE Statement” for conditions under which the columns can be referred to in an clause. This also works for .\n\nThe order in which a or statement with no clause returns rows is nondeterministic. This means that, when using replication, there is no guarantee that such a returns rows in the same order on the source and the replica, which can lead to inconsistencies between them. To prevent this from occurring, always write or statements that are to be replicated using an clause that produces the same row order on the source and the replica. See also Section 19.5.1.18, “Replication and LIMIT”.\n\nDue to this issue, and statements are flagged as unsafe for statement-based replication. Such statements produce a warning in the error log when using statement-based mode and are written to the binary log using the row-based format when using mode. (Bug #11758262, Bug #50439)\n\nSee also Section 19.2.1.1, “Advantages and Disadvantages of Statement-Based and Row-Based Replication”."
    },
    {
        "link": "https://stackoverflow.com/questions/15523597/mysql-insert-into-values-and-select",
        "document": "Is there a way to insert pre-set values and values I get from a select-query? For example:\n\nI have the value of \"A string\" and the number 5, but I've to find the [int] value from a select like this:\n\nthat gives me that id to put inside table1.\n\nHow to merge this into one statement?"
    },
    {
        "link": "https://medium.com/swlh/mysql-8-0-22-how-to-insert-or-select-data-in-the-table-where-clause-78fbb738e693",
        "document": "We’ve learned how to create database and table in MySQL last time.\n\nSo today, let’s put some actual data in the table we made.\n\nBefore we insert data, we need to create a table. I’ll name mine as ‘member’ and put some columns in it.\n\nWe can see that our last table has id, name, phone, age as columns.\n\nLet’s say that we got some new members in our database.\n\nHere, we call each member’s data ‘tuple’, so we have 3 tuples here. To put them into the table, we use .\n\nEach data have to be written in sequence, and varchar type of data need to be wrapped with single quote(‘ ’).\n\nshows you the entire data you typed in the table.\n\nIf you only want to see specific columns in the table, you can simply change the into the columns that you want to see. If I wanna know member’s id and phone numbers, simply type\n\n‘Where’ is the clause that helps you to search more specific data. I will show you some ways to use this clause.\n\n(1) To select the tuple of certain members.\n\n(2) To select name and age of people who’s age is between 20–25.\n\n(3) To select the people who’s name ends with the letter ‘e’\n\nIn here, % means anything. We can use it like (name starts with the letter ‘e’), or (name that has the letter ‘e’ in it).\n\nor there’s (under bar). It’s similar with the , but means any one letter.\n\nAs you see, i put two , and it means I want to select the person who has three letters name and it ends with the letter ‘e’.\n\nI’ll post some constraints and keys you can use when you create a table next time!"
    },
    {
        "link": "https://stackoverflow.com/questions/37079467/place-an-insert-statement-into-a-select-statement",
        "document": "I have read the other questions and all of the posted comments/answers to questions that are similar to this one. None of them seem to answer this question directly.\n\nI am wanting to know if there is a way to either concatenate or place an , or statement into a statement.\n\nIf so how? Could this be done by using a function or a statement?\n\nAnd example would be:\n\nbut place this into a statement\n\nThe big thing here is getting the INSERT statement into the SELECT statement in an unconventional way.\n\nThank you and hopefully this will strike up some good conversation/ideas/results!\n\nReason for wanting to know this:\n• Our current DBMS (Fishbowl) does not allow us to use an UPDATE, DELETE or INSERT statement with is SQL compiler and we are wanting to mass alter our fields/clean up our tables.\n• To know if it is possible"
    },
    {
        "link": "https://dev.mysql.com/doc/en/insert-optimization.html",
        "document": "To optimize insert speed, combine many small operations into a single large operation. Ideally, you make a single connection, send the data for many new rows at once, and delay all index updates and consistency checking until the very end.\n\nThe time required for inserting a row is determined by the following factors, where the numbers indicate approximate proportions:\n\nThis does not take into consideration the initial overhead to open tables, which is done once for each concurrently running query.\n\nThe size of the table slows down the insertion of indexes by log , assuming B-tree indexes.\n\nYou can use the following methods to speed up inserts:"
    }
]