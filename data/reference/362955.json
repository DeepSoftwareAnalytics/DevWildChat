[
    {
        "link": "https://create.roblox.com/docs/scripting",
        "document": "Scripts are plain text files that let you add custom, dynamic behavior to your experiences. You can use scripts to trigger in-game events, respond to player input, save player data, create leaderboards, spawn enemies, control NPC behavior, and much, much more.\n\nThis section is for creators with some coding experience who want to know the specifics of scripting in Roblox. If you've never written code before and want an introduction to programming, see Coding fundamentals, which covers concepts like variables, functions, conditionals, loops, and arrays. For a more guided, step-by-step approach, see the Basic gameplay tutorial.\n\nRoblox scripts use the Luau programming language, which is derived from Lua 5.1.\n• None Compared to Lua 5.1, Luau adds performance enhancements and many useful features, including an optional typing system, string interpolation, and generalized iteration for tables.\n• None All valid Lua 5.1 code is valid Luau code, but the opposite is not true.\n\nMost books and online resources for Lua are still broadly applicable to Luau. For a detailed summary of differences, see Compatibility in the Luau documentation. For language syntax, see the Luau reference.\n\nLuau is gradually typed, so you don't need to specify a type when you create a variable. You can use type() to check object type:\n\nLuau has global and local scopes, but it's almost always better to declare variables and functions locally with the local keyword:\n\nLua uses nil to represent nonexistence or nothingness, which evaluates as false in conditional statements:\n\nAs you might have noticed, -- starts a one-line comment. --[[]] creates a block comment:\n\nTables are the generic term for arrays and dictionaries. Arrays are one-based rather than zero-based, so the first item is [1]. You declare arrays and dictionaries with a single set of curly braces:\n\nYou can iterate over tables using for loops with the ipairs() function for arrays and the pairs() function for dictionaries, but Luau also lets you omit these functions for cleaner syntax:\n• None In Roblox Studio, hover over ServerScriptService in the Explorer window and click +.\n• None Right-click the script and rename it to HelloScript.\n• None Double-click the script to open it in the Script Editor.\n• None Add the following code to the file:\n• None Ensure that the Output window is open.\n\nA big part of adapting to a new development environment is configuring it to meet your needs and understanding the tools at your disposal:\n• None The section of lets you adjust quality of life features like font, colors, indentation, autocomplete, brackets, and tooltips. You might also want to enable dark mode in the section.\n• None or and clicking on a function or variable takes you to its declaration in your codebase (or its online documentation). Using Holdingorand clicking on a function or variable takes you to its declaration in your codebase (or its online documentation). Using can help you navigate larger projects.\n• None menu to enable and . The window is the most basic tool for understanding the behavior of your scripts. Use themenu to enableand\n• None The window shows a summary of errors and warnings, but you might find its utility limited; the Script Editor already highlights these issues as you type.\n• None or . Use and . Logging capabilities are minimal, with no concept of log levels likeor. Useand\n\nFor more information about configuring Studio for scripting, see Script Editor. For information on using your favorite text editor and version control system, see External tools.\n• None In Roblox Studio, add a script to ReplicatedStorage in the Explorer window and rename it to OhNo.\n• None Add the following code to the file:\n• None Note how the output is no different than when you ran your first script.\n\nTo understand why the script didn't run, see Script Types and Locations."
    },
    {
        "link": "https://devforum.roblox.com/t/lua-scripting-starter-guide/394618",
        "document": "Picking up programming and learning it for the first time works just like any other hobby–art, music, sports, photography, etc.–although, it may be difficult to know where to start as a beginner, especially if you’ve never had experience with it up until now. When I was younger, it was very difficult for me to get into programming as tutorials for a younger, completely unexperienced audience was rare. Although there was plenty of content available, I still had a hard time understanding the material or just got lost in the sea of information that was given to me. There are still plenty of places on either Youtube or other parts of the internet where beginners can learn, but I’ve specifically compiled this list so that you have a neat, simple page you can refer to if you feel lost, or don’t know where to go after searching for tutorials. Becoming an experienced programmer from scratch will not be easy, it will take a lot of effort and more importantly time to become an expert. I say this because many developers I’ve personally known, whether rookies or professionals, tend to bail halfway through their project or goal. Do not lose hope when things don’t come as quickly as you expected, patience is crucial. What sets poor and excellent students isn’t necessarily intelligence, but their willingness to put in work and always seeking new ways to become better at what they do. Think of this article as a legend for Lua, similar to the page in a large book that highlight specific terms or character in the book that the reader might not recognize. When you finish this guide, your ability to code things will be limited, but you should have a much easier time understanding tutorials on more advanced topics. Ultimately, I hope this article can help you get started, or at least guide you through your journey through programming.\n\nP.S. I’ve tried to make this tutorial as kid-friendly as possible, if it is still difficult to read or understand, please DM me on any platform and I’ll try my best fix it. Specific examples are appreciated.\n\nChances are, if you’ve ever played a game, you’ve wondered how it was made. How does a sword go from unequipped to swinging in just a matter of seconds? Why? How is this app able to stream the movies I select? How is the website we’re currently on even able to operate?\n\nComputer programming is an essential part of modern life, as it determines and allows for many technologies we use on a daily basis to operate. However, all code is not written in the same way, rather, there are distinct languages, or ways of writing code. In fact, you might already be familiar with the names of various programming languages, including but not limited to JavaScript or Python.\n\nIn this tutorial, we’ll be covering Lua, the official language of Roblox which can be used to create a variety of different games for users to play.\n\nIn this tutorial, we’ll be using a specific format to write, input, and receive the result of our script. To use a format identical to mine, click on View in the upper left side of your screen, then make sure you have selected and have the following settings:\n\nYour screen should look something similar to this\n\nScripts can be inserted almost everywhere, for the sake of keeping this tutorial short, head over to Model on the top panel and browse to the far left and click on Script, which will generate a script that we can use for our tutorial.\n\nPrint is a built-in function which prints out whatever statement you decide to give it. This can be either number or strings, which we’ll cover in this section. You’ll notice that once you launch a script, there is already a print function automatically typed out for you. This code always comes with your scripts, so we’ll erase it to continue with the next step.\n\nType out print in all lowercase letters. If print is typed incorrectly or typed with any capitals, the program will not recognize the command and will not run it. Add a pair of parenthesis after, studio should automatically add the second one. Make sure there is no space in between print and the parenthesis otherwise Lua will not be able to read it.\n\nNext, we need to add a string in-between the parenthesis so that we don’t just print empty space. A string is any character or words inside of a pair of quotes, such as “Hello World!” For our tutorial, we’ll be adding the string “YellowNoobs!” for the program to print.\n\nYou may replace \"YellowNoobs\" with any other text you wish as long as it is in-between the parenthesis (\"\"), the end result should look something like this,\n\nIf you want to include quotation marks in your quote, you can also use a pair of single quotes (’’) and put the double parenthesis, or vice-versa for single quotes to be printed.\n\nPrint also works for numbers and equations, which it’ll automatically simplify in the output. But before we write out our problem, we need to find the symbols needed to get the right answer.\n\nArithmetic operators are basically all the tools we use in programming to indicate a relationship between numbers. This sounds complicated, but it’s just what we call the symbols we use to add, subtract, multiply, and divide numbers.\n\nHere are the Arithmetic Operators used in Lua:\n\nNow, we’ll write our equation in-between the parenthesis, and paste it into the command bar once we’re ready to get the output. Feel free to mess around with the operators to get the hang of it.\n\nIf we put our code into the command bar we’ll get 81 instead. This is the answer to the equation, and Lua does this because it’s a simplified version, or answer to the problem we originally printed. An important thing to keep in mind is that Lua completes the math using the Order of Operations, meaning it starts with exponents, then division and multiplication, and finally addition and subtraction.\n\nTake this piece of code for example,\n\nWhile you may be tempted to say the answer is 12, since you add 1 + 5, getting 6 and multiplying it by 2, this is wrong. Instead, you multiply 5 and 2 first, then add 1, getting 11. This is a rule of both math and programming, so practice the concept until you can avoid printing the wrong number.\n\nIn order to combine two or more separate values together, you can use concatenation in the print function. We’ll still use the same format, but will add two periods or dots after each string. Do not place this inside of the string, otherwise Lua will interpret it as part of the string and produce an error.\n\nIf we paste this into the command bar, the output will show us a full statement as if it was a single string, meaning the concatenation was successful.\n\nNow that you’ve learned how to make a script, you’ll learn what variables are and how to make your own. Variables are considered vital because they save a lot of time and save you time and make your scripts simpler to review. They can be booleans, numbers, strings, or practically anything you want to assign a name to.\n\nIf you’re struggling to understand the concept of a variable, you can compare it to a nickname you might give someone who’s name may be too tedious to pronounce. Although it is not their birthname, calling them by their nickname will still get their attention as they’ve been given and called by it before.\n\nBelow, I’ve given an example of a variable. The term “variable” will be used interchangeably with the string “YellowNoobs!” whenever we use it in the script. If we put the variable inside of the print command, it will print the text assigned to it. Since the variable is identical to the string we assigned it, we do not need any quotes around the variable name. If you put quotes around a variable name, Lua will interpret it as a string, and print the actual name rather than the value.\n\nIf we copy and paste the code into the input, the output will print our statement.\n\nIt is necessary that you define your variables before using them in your code. Since Lua reads code from top to bottom, it will not know what the variable stands for when it executes the print function. If we paste the code into our command bar, we’ll get the output nil, which means nothing or no data.\n\nWhenever we define the variable, its scope covers all of the code below in the script. Variable scope is just another word for when the variable can be accessed in your script.\n\nThere are two types of variables which you’ll hear about, local and global. The variables we’ve made in this tutorial so far have been global variables, which means they can be accessed in all code below inside the script. Local variables will be covered later in this tutorial, but in simplest terms, they have a much more limited scope.\n\nVariables do not only have to be named “variable” when assigned to a given piece of code. In fact, your variables have to be different names in order for the program to recognize which variable you want it to use in the script.\n\nWhile you can almost freely name your variables, there are a few restrictions that exist inside Lua.\n\nYou can use:\n\nYou can not use:\n• Capital letters as the first letter of the variable (Not required, but common practice)\n• Numbers as the first letter of the variable\n\nComments are a simple green text that organize and give context to your lines of code, which can be a useful tool for yourself or others if you plan on sharing it.\n\nCreating comments is extremely easy, add - - and then your text after you are finished. It should appear something like this.\n\nIf you want your comment to cover more than one line, insert brackets, with your text inside.\n\nAny text attached to the comment will not be executed by the program, and will only be seen by the reader. This green text is helpful in case you want to find a specific piece of code in your script. Comments are also crucial if you plan on sharing your scripts and want the reader to understand what certain commands do. Besides context, you can use comments to credit yourself for your script, or write out directions that the user who uses your script might want to see.\n\nIf you want to change the settings (such as the transparency, or invisibility) of an object in the workspace, you have to write down the specifics before Lua knows what you want it to do.\n\nSo, if we want to change the transparency of the baseplate, we first need to define that the baseplate is inside game.Workspace, with game being the game we’re working on and workspace being the place where baseplate and the rest of our parts are stored. Then, we write the object we’ll be changing (baseplate) and the setting that we want to change (its transparency), and then assign a value to it. If we want it to be fully invisible, we’ll set the value to one, lowering this amount will make it so that it’s semi-transparent.\n\nIn the end, this should make the baseplate completely invisible if we run the code or play the game. Keep in mind that we can change the properties of object in Studio as long as you define it correctly in the code.\n\nWhen you’re writing a sequence of code that needs to be repeated, it may be a little tedious and also messy to write it out several times. Functions are a tool in Lua that we can use to put lines of different code in, which can be repeated and manipulated a lot easier by us. The functions in this segment are not to be confused with the built-in functions of Lua, such as print.\n\nTo define a function, we need to write function and then assign it a name. Then, add a pair of parenthesis after your function name without any spacing in-between, and press enter. I’ll be naming my function printStuff, but you can name yours differently.\n\nNow, we need to write our code for our function to actually execute it. You’ll notice that when you press enter after writing your function, you’ll automatically get end. This statement is here so that you can end, or close off your function, otherwise Lua would get an error.\n\nI want to print several strings, so I’ll insert the several sequences of code inside my function.\n\nWe now have our function, however, nothing will be happen since we haven’t written the command to execute it. We need to type the function name on the next line, and Lua will print our strings.\n\nNow, Lua will execute our code. If we paste all of the content into the command bar, we’ll see that our function is successful. It’s important to note that just like variables, functions need to defined before we actually execute them in our code, otherwise we’ll just get nil.\n\nWhen we covered local variables previously in our tutorial, I mentioned that the scope of it was much more limited. Whereas global variables can be accessed anywhere in our script after being defined, local variables are limited to a block.\n\nSo what is a code block? An example is basically the indented sequence of code that we see in our function. I’ll attach comments to the parts that are a part of the block of code for a visual demonstration.\n\nYou can also tell if something is a block by the small arrow that appears to the left. If you look closely, the arrow facing down next to function is indicating that the block is being shown, and when it is facing up, it means it is closed.\n\nIf we try to print the local variable outside the block, we’ll get nil since the variable can’t be accessed.\n\nA handy feature of functions is the ability to manipulate the variables with ease. You might’ve already noticed the pair of parenthesis when we define the function, and the two other parenthesis when we execute it. These are the spaces where we put our arguments and parameters.\n\nEvery time we execute a function, we might want to change certain parts of the code each time. Parameters are used to tell Lua which variables (and thus any information) inside the function you want to change. They are established when we first define our function, and are placed in-between the first pair of parenthesis on the same line. Make sure to not define the variable you’ll be changing inside of your function, otherwise the parameter will not work.\n\nNow that we’ve defined the parameter, we need to write an argument for the function to be properly executed. An argument is the value we assign the code when executing it. It comes inside our next pair of parenthesis, and can be changed every time we execute the function separately. We’ll print a string and a number, and the program should treat the argument as the variable in the function.\n\nNow if we put it in the output, the two values should be successfully printed.\n\nArguments and parameters aren’t just limited to a single pair, in fact there can be as many as you want. In order to add another pair, separate each parameter and argument by a comma with the next one you want in your function.\n\nNow if we paste it into our command bar, the output should print both statements in the order we gave them. It is important that you put the arguments and parameters in the same order or you will assign the wrong value to the variable. Also, you always have to define your parameters when you execute your function, otherwise Lua will not know what to assign to the variables.\n\nYou might’ve already noticed that below the option to create a script, there is something called a local script. This tutorial won’t go too in-depth about them, but offer a broad summary about its purpose.\n\nLocal scripts are scripts that only affect the user’s client rather than the server. A user’s client is basically what they see, rather than the whole server. So whereas you might be seeing something, your friend playing the same game as you might see something completely different. In comparison, scripts that affect the server are seen by everyone, and not just the individual’s client.\n\nThe concept is a bit difficult to describe by text, and I still can’t do it justice by talking about it in depth, so I urge you to look at this video by TheDevKing to get a better idea of what local scripts are capable of.\n\nYou might’ve heard this word in math class and it is related. Booleans in scripting are the conditions true or false.\n\nWhen comparing values you’ll get a Boolean as well, although you can simply write true or false too.\n\nRelational operators are the operators used to compare values with one another.\n• Equal to, not to be confused with equal which simply assigns something rather than comparing two values: ==\n• Not equal to, which is true if the values are not equal: ~=\n• Greater than or equal to: >=\n• Less than or equal to: <=\n\nNow, let’s take a look at some numbers and see if they represent a true or false boolean\n\nThe first one is false, since the value can only be greater than, and not equal to the other. The next one is true as the values are equal to one another. The last is clearly false, since 8 is not less than the number 2.\n\nIf statements make it so that specific commands only happen if the condition is met, it will execute the code.\n\nFor example, if 5 > 1 the Output will print “Congratulations” since 5 > 1 is true. If the script said 5 < 1 then the script will not print “Congratulations” in Output.\n\nThis is equivalent to saying true instead and will still print our string.\n\nSometimes, our code needs to be repeated in order to produce an outcome we’re looking for. Loops are statements that allow us to repeat code multiple times. They come in several different forms, which we’ll cover in this section of the tutorial.\n\nWhile loops repeat sequences of code while the statement is true. However, when the condition is false, it will not execute the code block. For example, while a variable is less than a certain value, it will continue to print out a string we decide to give it. This is just one of countless things you can do with a while loop, so feel free to get creative if you’re feeling ambitious.\n\nFor our while loop, we’ll assign a number to our variable, x. Afterwards, we go on the next line and write while. This helps Lua understand that it is a while loop, so that when the condition is true, it’ll execute the code block. The do you see after our boolean is simply telling Lua to execute the block of code that is part of the loop when the condition is true.\n\nIn this code, I defined my variable as 10 and made it so that the while loop would continue to run until it was no longer less than a 100. Each time it runs the code, I made it so that it would add 10 to the variable, meaning that once it ran several times, it would no longer execute the code since the condition is false.\n\nNotice the string being printed after the loop. This is not executed until the loop is finished, so not attaching it to the loop can be used to tell us when the loop is finished.\n\nFor loops are able to loop as many times as the user wants. First, we define a variable for the loop, and assign it to a starting and ending value. The loop will continue to repeat until the starting value reaches the end value. While the amount the starting value increases is by 1, you can change it by adding a comma after the end value. Below, is an example of a for loop.\n\nOur loop will now print 1, 6, 11, 16 all the way until 21 where it will stop since it can not go past 25.\n\nHere is the format for the for loop.\n\nA repeat loop repeats the statements assigned to it until a following condition is true.\n\nUnlike a while loop, it runs the statements first before checking if the condition is true.\n\nWriting break at the end of a loop will end the loop if a condition is true. In the example below, break is used to break out of an infinite loop that otherwise keeps running because it is always true.\n\nThis could also work if instead of true we wrote while x < 200 do. The result would be that the loop would end early, ending when x reaches 100 rather than 200.\n\nYou may also hear the term nested loop, which is used to describe a loop with another loop inside of it.\n\nTables are used for storing large sets of data that you might use while creating your script. With tables, you can access and manipulate the data easy, which can come in handy later on. In this section, you’ll be learning about just a single type of tables, arrays.\n\nArrays are simply a list of values compiled in a table. This can include strings, numbers, booleans, functions–pretty much anything that can be used outside the script. To make an array, start by assigning a name of your own to the table.\n\nAfter this first step, you need to assign the data to the table. Assign the table to the data by adding an “=” in between, and write a pair of curly brackets (the second bracket will be automatically typed for you).\n\nNext, you can place all of your values inside of the array. For this tutorial, we’ll place a few strings and numbers together, but you can add more variety to your table if you’re following along. Make sure to separate each value by adding commas in-between them.\n\nIf we want to print specific parts of our array, we can use the index to get what we want. Each value in our array has an index, or number assigned to it. The first value is 1, second value is 2, third value is 3, etc. To print a specific part of our array, we put our table name in the print function, then follow it up with the index of the value, in-between brackets ([]).\n\nIn the end, this should print out our first string, “Hello World” in the output.\n\nWhere Else Can I Learn About Scripting?\n\nThere are many other places to learn, but the sources listed above have helped me with learning or adapting to Lua.\n\nWhat is the Difference Between Input and Output?\n\nInput is the code given to the engine, while output is the received/finished command. For example, print(“YellowNoobs!”) is a input while YellowNoobs is the output.\n\nStopping exploiters isn’t a beginner issue, it is a little more advanced than what we’ve discussed so far. Throughout your scripting career, you’ll realize that the main reason for exploits is due to poor and weak scripts that hackers are able to bypass.\n\nOne feature that Roblox automatically now applies to all games is FilteringEnabled, which prevents hackers from messing with the server itself. To learn more about how it works, you can watch the following video by AlvinBlox,\n\nWhy does Studio Automatically Indent for me?\n\nTechnically, indenting is not necessary, but it is extremely helpful and keeps your code organized. For example, through indents, you can see where your code blocks are. Not only that, but it looks much cleaner. Writing without proper indentation would give both you and the programmers reviewing your code a headache to read.\n\nHow do I become better?\n\nPractice, practice makes perfect, no exceptions. Learning to program unique things by yourself is always something you should strive to achieve as a developer.\n\nThat’s it, the basic tutorial is now finally finished! Hopefully, now you’ll have a far easier time being able to understand new concepts and can use this as a reference whenever you feel stuck.\n\nIf you have any other questions or feedback, please reply in the comments below, good luck!"
    },
    {
        "link": "https://create.roblox.com/docs/reference/engine/classes/LocalScript",
        "document": "A LocalScript is a Lua code container that runs its contents on the client (player's device) instead of the server. It is used to access client-only objects such as the player's Camera.\n\nFor code run through LocalScripts, the LocalPlayer property of the Players service will return the player whose client is running the script.\n\nSee here for a table of valid container services from which LocalScripts will execute."
    },
    {
        "link": "https://create.roblox.com/docs/tutorials/use-case-tutorials/scripting/basic-scripting/intro-to-scripting",
        "document": "In Introduction to Roblox Studio, you learned how to create and manipulate parts in Roblox Studio. In this tutorial, you'll learn how to apply a script to parts to make a platform appear and disappear. You can use this in a platforming experience to span a gap, challenging users to time their jumps carefully to get to the other side.\n\nFirst off, you need a Part to act as the platform. Making and moving parts should be familiar to you from Introduction to Roblox Studio. You don't need a complicated world aside from the platform — you just need a gap that your users can't easily jump across.\n• None Insert a Part and rename it to DisappearingPlatform.\n• None Resize it to large enough for a user to jump on.\n• None Move it to a proper location so that you can reach it and jump on it when testing your experience.\n• None Set the Anchored property to true in the Properties window.\n\nCode in Roblox is written in a language called Luau which you can put in scripts within various containers in the Explorer. If you put a script under a Part, Roblox will run the script's code when the part is loaded into the game.\n• None Hover over the DisappearingPlatform part in the Explorer window and click the + button to insert a new script into the platform. Rename your new script as Disappear.\n\nIt's a good idea to start off your script by making a variable for the platform. A variable is a name associated with a value. Once a variable is created, it can be used again and again. You can change the value as needed.\n\nIn Luau, a variable is created as follows: local variableName = variableValue.\n\nThe term local means that the variable is only going to be used in the block of the script where it's declared. The = sign is used to set the value of the variable. Names for variables are typically written in camel case. This is lowercase with every word following the first being capitalized, justLikeThis.\n\nCopy the following code to create a variable for the platform called platform, where the value is script.Parent.\n\nTime to make the platform disappear. It's always best to group code for achieving a specific action into a function. A function is a named block of code that helps you organize your code and use it in multiple places without writing it again. Create a function in the script and call it disappear.\n\nThe first new line declares the function — it indicates the start of the function and names it as disappear. The code for a function goes between the first line and end.\n\nThe parentheses are for including additional information as needed. You'll learn more about passing information to functions in a later course.\n\nWhen the platform disappears, it needs to be invisible and users need to fall through it — but you can't just destroy the platform since it needs to reappear later.\n\nParts have various properties that can be used here. Remember that you can see a part's properties if you select it and look at the Properties window.\n\nA part can be made invisible by changing the Transparency property. Transparency can be a value between 0 and 1, where 1 is fully transparent and therefore invisible.\n\nThe CanCollide property determines if other parts (and users) can pass right through the part. If you set it to false, users will fall through the platform.\n\nJust like script.Parent, properties are accessed using a dot. Values are assigned using an equals sign.\n• None In the disappear function, set the CanCollide property of the platform to false.\n• None On the line following, set the Transparency property to 1.\n\nOnce you've declared a function, you can run it by writing its name with parentheses next to it. For example, disappear() will run the disappear function. This is known as calling a function.\n• None Call the disappear function at the end of the script.\n• None Test the code by pressing the Play button. If your code works, the platform should have disappeared by the time the user spawns into the game.\n\nYou can easily make the platform reappear by writing a function that does the exact opposite of the disappear function.\n• None Delete the disappear() line from the script.\n• None In the function body, set the CanCollide property to true and the Transparency property to 0.\n\nThe platform should be constantly disappearing and reappearing, with a few seconds between each change. It's impossible to write an infinite number of function calls — fortunately, with a while loop, you don't have to.\n\nA while loop runs the code inside it for as long as the statement after while remains true. This particular loop needs to run forever, so the statement should just be true. Create a while true loop at the end of your script.\n\nIn the while loop, you need to write code to wait a few seconds between the platform disappearing and reappearing.\n\nThe built-in function task.wait() can be used for this. In the parentheses the number of seconds to wait is needed: for example task.wait(3).\n\nThree seconds is a sensible starting point for the length of time between each platform state.\n• None In the while loop, call the function with in the parentheses.\n• None Call the function again with in the parentheses.\n\nThe code for the platform is now complete! Test your code now and you should find that the platform disappears after three seconds and reappears three seconds later in a loop.\n\nYou could duplicate this platform to cover a wider gap, but you need to change the wait times in each script. Otherwise, the platforms will all disappear at the same time and users will never be able to cross."
    },
    {
        "link": "https://devforum.roblox.com/t/scripting-basics-beginner-guide-to-lua-and-roblox/359838/20",
        "document": "Alright. So what this is loop for is iterating over something (It could be items in a table, Children of a Model or workspace, It could Descendances of a screen GUI, the possibilities are endless. Let’s break the code up a bit\n\nindex and value, what is this supposed to be? Well let us start off with Index first. So the Index is just the position of where the value is in the thing we are iterating over. Same shows in Python and JavaScript as well. The first item in our iteration will always take the index of 0 Take a look at this example\n\nOur table is myTable and contains 4 different pieces of information. My, Name, Is, John. Now our first Index will be My at the Index of? If you said 0 you are correct\n\nI could be wrong but for most programming languages the first Index of a table will ALWAYS be 0.\n\nSo if we continue our program our expected output will be\n\n 0\n\n 1\n\n 2\n\n 3\n\n We have 4 values but since 0 always takes the first index it will print only up to 3.\n\nSo now we know what the i is for, let’s dive into what the V is for. Always think like this\n\n Key = i, Value = v ; Key Value Pairs\n\nSo now that we know what the value of where to access the Value which is the index, how about we learn what is the value.\n\nSimple The value is just what the index is assign to. So My, Name, Is, John are all values of the table aka the Value. So when I said Key value pairs the I is the Key to access and the Value is just what it is assigned to and there is 2 of them making it a pair. Hence the term Key, Value pairs.\n\nNow the parameter. As you saw I passed myTable through the parameter of pairs. Why? That is because the program has to know what we want to even iterate over. We can iterate over anything. In this case we are iterating over a table. We can iterate over Children of a table. Like this\n\nThis will print all the names of The Children of the Folder.\n\nWhen to use\n\nNormally I’ve seen people use this if they want to iterate over something that appears a lot instead of writing a seperate variable for each seperate Child which is DRY Code.\n\nHopefully this helps clears up somethings on for i,v in pairs loops"
    },
    {
        "link": "https://devforum.roblox.com/t/so-how-do-you-actually-do-abilitys-for-a-game/2341268",
        "document": "So I am a beginner scripter, used studio for 4 years maybe dabbled in coding a bit, my expertise is literally just editing pre done scripts by spending 10 hours thinking about what that bit of code does, it has gotten me far yes, but I want my game to be original (everything in it so far except the map is predone)\n\n (with a few edits to make it look mine DONT WORRY THE CREATORS PUT IT ONLINE FOR FREE USE) but I want the fruits (which in my game which is a one piece game is just the basic super powers)\n\n to be MINE so I don’t want people saying Oh just read this, or do this tutorial I don’t want a tutorial I wanna know HOW not follow this I wanna know HOW don’t tell me what to script tell me what im scripting does so can anyone kinda create a 1:1 step course to creating powers, not like a tutorial more like a explanation of the functions used to create it and sorta referring me to what I can go to, to create my goals, so yes I just wanna learn how\n\nEDIT a year later I full know scripting and I am a professional,\n\n looking back on this I cringe every letter, thank you for putting up with me lol"
    },
    {
        "link": "https://devforum.roblox.com/t/what-is-the-best-way-of-handling-this/3441604",
        "document": "So basically i have abilities that players can use, The way it works is that players will click a button and it will fire a remote event to the server. And from there, the server can do whatever it needs to.\n\nBut i have a few abilities that do certain things only the player using the ability should see, Like highlighting other players and stuff like that. I’m pretty sure i should send a remote event back to the client to display the effects. But there are multiple abilities that do this kind of thing, But like with different effects or different highlight colors. I would like to know the best and most efficient way to do this. I couldn’t really find any other posts like this because it’s a pretty specific thing\n\ni have probably made like a thousand posts like this asking what the best way of doing something is"
    },
    {
        "link": "https://devforum.roblox.com/t/improved-how-to-actually-improve-performance-in-your-games/1221842",
        "document": "In my last post, I went over how to “improve performance and set performance goals” — that post is incredibly outdated and full of terrible advice. Do not follow it\n\nIt was very vague and my knowledge as a scripter & programmer has improved a lot\n\n This topic will list a bunch of useful things that have helped many projects I’ve worked on and I’ll split it into 2 parts: For Scripters & For Anyone!\n\nNote: The information provided here is updated in response to feedback and suggestions! I have been getting busier so some information may become outdated!\n• CanTouch, CanCollide & CanQuery\n\n BaseParts (Parts, MeshParts, Unions, etc) have the .CanTouch property which when set to false along with .CanCollide will have a small performance improvement and can still be hit by Raycasts and Region3 queries (so it’s best to set both of those properties to false on objects that don’t need to calculate physics and won’t be interacted with).\n\n CanQuery is another property that can be disabled for a small performance gain. To my knowledge, it’s pretty new.\n• Lighting\n\n If your game does not need the ShadowMap or Future technologies, by all means, don’t use them. Something as simple as using the Voxel lighting can make your game’s performance do a 180 in terms of lag! Rendering fewer shadows may also give your game small performance boosts (this may not produce noticeable gains and is not intended to be a performance-enhancing feature by Roblox); you can disable the .CastShadow property on BaseParts that you don’t want to cast shadows for that (potentially) small boost. [Lighting]\n• Collision & Render Fidelity\n\n Unions and MeshParts have this wonderful .CollisionFidelity property which when set to will change the hitbox of the Union or MeshPart to a box! This means less work for the server or client! BaseParts and Meshparts have the .RenderFidelity property, which when set to will change how the Instance looks when at a longer distance from the player.\n• Teleporting\n\n With teleportation you can teleport your players between places and massively increase the size of your game by splitting the game up! If there’s less to load, there’s less to load!\n• Useless Replication\n\n If something shouldn’t be replicated (shown) to the client then don’t put it in places like ReplicatedStorage, put it in a place like ServerStorage. Anything the client can see must first be replicated to them, which takes valuable resources. (Edit: You can check out more information on that here.)\n• ANCHOR\n\n Make sure you anchor things that shouldn’t move! I’ve worked with developers who have front-page games who just “forget” to anchor parts (you know who you are)! This makes Roblox calculate more physics, thus, causing beautiful lag.\n• Transparency\n\n While small, it is worth noting that the .Transparency property exists! In Roblox’s own words (here) \" Use partial object sparingly, as semi-transparent objects inhibit a lot of internal rendering optimizations. If you require transparency on several , attempt to merge them using solid modeling (a transparent union is more optimal than a group of 10 smaller transparent parts).\"\n• Textures\n\n Textures are amazing if you want more than Roblox’s materials but they come at a cost. You should use the built-in materials (and now the MaterialService) in favor of textures because textures occupy more memory than materials ( in the Developer Console under ). If you want to use textures I don’t advise against it, especially since you can really solidify a game’s feeling with textures!\n• Player Count\n\n Stress test your game! See how well it performs with a bunch of players and reduce the MaxPlayers you can have in one server!\n• Humanoids\n\n As a lot of developers know: humanoids can be very laggy when there are a lot of them together. You can disable HumanoidStateTypes you won’t use but in my experience, it appears to make no difference. You can also just stop them from moving and calculating physics by anchoring and changing properties. I recommend just not having dozens of humanoids near each other! If you were willing you could even make enemies or NPCs that don’t rely on the humanoid (that’s my personal favorite).\n• Content Streaming\n\n Please read the official documentation here. They explain it way better than I could.\n• Infinite Loops\n\n Good ol’ … I’m sure every scripter knows not to have tons of these. If you do, try using .Changed, :GetPropertyChangedSignal or parts of the RunService! Try not to use infinite loops where they aren’t needed!\n• FindFirstChild\n\n Roblox says it best: \n\n I’m not discouraging the use of FindFirstChild, I’m discouraging the use of FindFirstChild where it isn’t needed\n• Wait()\n\n Use instead of . This is explained later in the post.\n• Instance.new()\n\n Using and setting the parent with the second parameter is actually slower than instancing then setting the parent on another line, like and then \n\n Source\n• Connections\n\n (See Roblox’s Handling Events)\n\n This one might be rushed until I can refine it but here’s the basics: You can use the function to “connect” events to a function, you probably do this a lot already but might never use . The link listed above will go in more depth but do note that using on a script or an ancestor of a script will disconnect all connections and you may not need to disconnect functions if a script will soon be removed this way. You can also use instead of , this disconnects after the event is fired!\n• _G & Global Variables\n\n This post explains _G the best and reinforces the idea that _G is not slower than module scripts. A lot of scripters call _G bad practice when it’s just how you use it. If you’re storing everything in _G then yes, it’s bad practice. Using it in general is not bad and it’s down to preference and organization.\n• Repeating Expensive Calculations\n\n Don’t repeat expensive calculations (if you don’t need to)! Store the results of something like in a variable when possible.\n\nAn example is in one of my games. I wanted to give every player a point if they’ve completed a task during a specific trigger or remove points if they failed, and slowly increase points lost the further in the game they were.\n\nHey! The task library has great alternatives to and !\n\n is the same as but takes less time to write and with just is safe!\n\nScripters! You can use operators like and instead of \n\n When I learned this it saved me so much time!\n\nYou can also use FindFirstChild(“Name”, true) to loop through descendants (looping through a bunch of objects will have a delay)\n\n\n\nI whipped this topic up in just a few hours of research and will likely be adding more to it in the future. If you have any suggestions please suggest them!"
    },
    {
        "link": "https://gamedevacademy.org/roblox-event-handling-tutorial-complete-guide",
        "document": "In the dynamic world of game development, landing your hands on the right tools and mechanisms can open up a Pandora’s box of possibilities. Roblox, with its event handling feature, does exactly that for game developers of all skill levels. Designed to captivate and inspire, this guide will help you delve into the fundamentals of Roblox event handling, making your journey smoother and more insightful.\n\nRoblox event handling is the mechanism by which Roblox Lua scripts respond to certain actions (events) occurring within a game. It’s an essential aspect of game development in Roblox, allowing developers to dictate how a game reacts to specific triggers, player actions, or scenarios.\n\nWhat is it for?\n\nEvent handling is the backbone that orchestrates the interaction between the player and the game environment. It gives life to objects by enabling them to respond to player input and other game events, such as when a button is clicked, a collision occurs, or simply when a game starts or ends.\n\nWhy should I learn it?\n\nLearning event handling in Roblox provides you with a powerful scripting tool, facilitating unique game mechanics and player interactions. It will empower your Roblox development skills, allowing you to create more complex and interactive games that keep players engaged. Let’s break this down with useful code examples and explanations.\n\n\n\nUnderstanding the basics of event handling often begins with getting acquainted with the `event:connect()` function. This function allows developers to associate a particular event with a function that will be executed when the event occurs. Here is a simple illustration:\n\nIn this code snippet, we have a simple game part in the workspace. When this part is touched by another part, it triggers the `Touched` event, and our function `onTouch()` is then executed, which prints a message to the console.\n\nWorking with Different Types of Events\n\nRoblox supports a wide array of event types, including those triggered by user actions. Getting to grips with these types boosts your proficiency in designing diverse game dynamics. Let’s explore some relevant code examples:\n\n1. **Click Detector Event**: This event occurs when a player clicks on part tied with a Click Detector.\n\nThis code leverages a `ClickDetector` object introduced into our game part. When the part is clicked by a player, it activates the `MouseClick` event and the function `onClick()` is executed, outputting a message to the console.\n\n2. **Player Added Event**: This event triggers when a new player joins the game.\n\nIn this snippet, the `PlayerAdded` event is coupled with a `onPlayerAdded()` function. Whenever a player joins the game, a welcome message containing the player’s name is printed.\n\n3. **KeyPress Event**: This event occurs when the player presses a specific key.\n\nHere, a key press from the player triggers the `KeyDown` event, following which the code prints the key pressed. This method of event handling allows developers to associate different game dynamics with different key presses.\n\nAs you start delving into the myriad possibilities of event handlers in Roblox, you’ll find an empowering tool at your disposal, capable of revamping your game designs in more ways than one.\n\nThe versatility of event handling in Roblox is virtually endless. Let’s explore more comprehensive examples of event handling, ranging from triggering game actions to handling player interactions.\n\nEvents can also be used to dynamically change the properties of in-game objects. Check out this example:\n\nIn this script, clicking the part triggers the `MouseClick` event, which in turn changes the color of the part to bright red.\n\nWe can use events to create new game objects on the fly. Here’s an interesting example:\n\nIn this example, the `onPlayerAdded()` function creates a new Leaderstats folder with a Gold value for each player as they join the game.\n\nYou can handle events related to player chat messages:\n\nIn this code, the `PlayerChatted` event will trigger the `onChat` function whenever a player sends a chat message, printing it out.\n\nTo deal with events related to a player’s character spawn, use `CharacterAdded`:\n\nHere, when a player spawns within the game, the `CharacterAdded` event fires, and the `onCharAdded` function executes, printing a message.\n\nSimilarly, you can handle team changes with the `TeamChange` event.\n\nIn this scenario, whenever a player switches teams, the `TeamChange` event is called, thus printing the provided message.\n\nGetting your hands dirty with the practical implementation of events like these should give you a fair idea of Roblox’s versatile and dynamic event handling system. Remember, mastery comes from persistent practice. So, keep experimenting, exploring, and creating with Roblox Lua!\n\nAs you start mastering different types of Roblox events, you can unlock the ability to create impressive interactive dynamics within your games. Let’s delve deeper.\n\nEvent handlers can help initiate certain Roblox animations when an event occurs.\n\nIn this code, clicking the game part triggers the `MouseClick` event resulting in animating the part to ascend upward.\n\nWe can associate sounds with the `Touched` event to make our game environment more plentiful.\n\nIn this instance, when our game part is touched, it activates the `Touched` event, and our function `playSound()` is executed, playing the associated sound.\n\nEvent handling is particularly powerful when it comes to managing game mechanics. Levels, scoring, time limits, constraints – all of these can be managed through the clever use of events.\n\nA common use of event handlers is to manage timer-based game mechanics.\n\nThis simple example prints a message to the console after a 5-second timer completes.\n\nThe `onScore()` function is called each time a score event is supposed to occur, incrementing the score and printing the new score.\n\nLevel-based mechanics can also be managed using event handlers.\n\nHere, the `nextLevel()` function is triggered each time the player progresses to a new level, increasing the level and printing out the new level number.\n\nIn conclusion, event handling in Roblox gives you an extraordinary ability to control and manage the interactivity and mechanics of your game. While the examples presented in this guide merely skim the surface of what event handlers are capable of, we hope they have given you a solid foundation to build your Roblox scripting knowledge upon. As with anything, practice makes perfect. Keep coding, experimenting, and learning!\n\nWhere to go Next with Your Roblox Adventures?\n\nHaving decoded the basics of Roblox event handling, you’re likely excited about the boundless possibilities at your disposal. Well, why stop here? Keep that momentum going! There’s a wealth of knowledge to be explored, many complexities to unravel, and limitless gaming dynamics waiting for you to bring them to life.\n\nZenva Academy, known for its top-notch online courses devoted to programming, game development, and AI, brings you the incredibly comprehensive Roblox Game Development Mini-Degree. A specially designed collection of courses that walk you through the realm of game creation using Roblox Studio and Lua, this Mini-Degree touches upon a wide array of game genres, including obstacle courses and FPS games. Incorporating 3D level creation, platforming mechanics, multiplayer combat and leaderboards, this flexible, high-paced learning format is suitable for beginners, as well seasoned developers, looking to polish their skills.\n\nTo cater to a broader range of learning requirements and interests, feel free to explore our diverse collection of Roblox-related courses. With Zenva Academy, your journey from novice to pro in your desired field is not only possible, but accelerated and enriched.\n\nKeep coding, stay curious, and enjoy your journey into the fascinating world of Roblox game development!\n\nArmed with the power and versatility of event handling in Roblox, the world of interactive and captivating gaming awaits your exploration. Your journey of learning and developing should always be thriving – a quest that can be exciting, enlightening, and empowering. At Zenva Academy, we are here to nurture your endeavors, providing you with high-quality, user-friendly learning paths to pave your way to becoming a sought-after game developer.\n\nEnrich your learning experiences by applying these event handling skills in developing dynamic and engaging games in Roblox. Journey through our Roblox Game Development Mini-Degree, to give your game development career a strong kickstart, taking your creativity and technical skills to a whole new level. As you continue to experiment, create, and innovate, always remember that your passion and Zenva’s expertise are the ingredients to transforming your game development dreams into reality. Happy scripting!"
    },
    {
        "link": "https://devforum.roblox.com/t/how-you-should-secure-your-game-a-beginner-guide-for-secure-networking-and-developing-anticheats/351775",
        "document": "I’ve now open sourced an implementation of one of my anticheats for use in my game Hexolus! \n\n You can find more info and the repo links here: Hexolus' Server-sided Anticheat\n\nThis is a super long thread so read it at your own pace.\n\nHow you should secure your game\n\nYou may have seen the “never trust the client” phrase tossed around if you’ve read or created scripting support threads about remotes or game security. I’m going to explain this phrase and give some useful information about remote and client security as well as give some information about effective anticheats.\n\nMost developers when they first start learning about game security will ask, “Why can’t exploiters just be stopped with a script on the client?” Well think about it like this. The server has to send some kind of code to the client so that the client can run this code. That means this code must be stored somewhere for the client to use it. And that code is stored in the client’s memory. This “code” isn’t like the lua code that you write though. It’s a version of the lua code called “bytecode” which the client can interpret. When you write your game’s lua code it will be compiled when the game starts and each LocalScript’s (and ModuleScript’s!) bytecode will be sent to the client.\n\nThis bytecode and the values and functions the bytecode accesses can be changed at any time. The fact that this code is stored in memory and an exploiter has access to it also means it can be “decompiled.” A decompiler on a basic level just tries to create lua code which produces the same bytecode when compiled. That means any information which is not included, like local variable names and comments also cannot be decompiled. This absent information would make the decompiled code much easier for an exploiter to read. Keep in mind, since the bytecode for server scripts (and module scripts located in ServerStorage and ServerScriptService) are not sent to the client, they can’t be decompiled!\n\nAn exploiter has access to the client side code in your game and can change all of it’s functionality, whether that be editing the script somehow, or changing the values and functions it uses. That means any client side checks you place on the client can just be removed by an exploiter and the values it checks can also be changed! Any functions you call on an instance or from the global libraries like math and table can be changed by the exploiter without you ever knowing. That means they can even intercept the data that your client receives from or sends to the server. All remote traffic from and to your client is visible to the exploiter!\n\nWhat code should you run on the client?\n\nThe client should always “pretend” like it’s right. You can think of the client like a mini version of the server that the player has control over. You want the client to mimic your server code by itself and then notify the server that it performed the action. The server must verify that this action is allowed using the same code the client does.\n\nSometimes you need to resync the client such as for placing an invalid object. If the client places an item they don’t have they should see it before the server tells them to remove it. This is a sign that you’re doing it right even if it seems like that’s wrong. For example, input events should be handled on the client and when an action is done on the client, like an attack, the client should ask the server to also perform the attack action. The server will verify and clamp the request before it performs it.\n\nWhat code should you run on the server?\n\nObviously any server-side objects should run code on the server. In this case the server is like the client without any user input. The server is also the “authority” meaning anything the server says to other clients should always be your definition of correct. You always want to avoid a client making something invalid on the server.\n\nThe server should always verify the client’s requests. This is usually as easy as simply sharing some server and client code and having the server mimick what it thinks the client should be doing.\n\nHere’s some pseudo code for example:\n\nYou should limit yourself to one basic remote request per frame for something like ping. Don’t send a lot of data per frame! If you are sending a complex table which needs to be updated you should send the initial table once and then update each value in the table individually only when the value changes! You always want to make sure you aren’t sending too much information to the client since this can slowly increase a client’s ping to several seconds! Don’t worry about sending too much data once as long as it means you aren’t sending it anymore after. Treat all of your remote requests like they are one big request.\n\nPersonally I classify anticheats into two main categories. Passive anticheats, and aggressive anticheats. Which one you choose is up to your preferences.\n\nA passive anticheat is an anticheat which prevents a player from doing unwanted behaviors. This is my personal preference because it is usually more accurate and results in an overall better user experience if done correctly. These anticheats are hard if you’re a beginner.\n\nExamples of a passive style anticheat:\n\n If a player moves too fast or teleports without the server move them back to their previous position. (I usually just set their previous position when I need to teleport them on the server)\n\n If a player is floating move them to the ground.\n\n If a player noclips, move them back to their previous position.\n\nAggressive anticheats punish the player for misbehaving. For example, if the player makes an unauthorized request that they can’t make on their own such as using another player’s items/structures, or attacking with a weapon they don’t have the player can be kicked or banned. This can also include detecting cheating.\n\nPermanently banning a player is a huge risk for not a lot of effect. If a player is exploiting they are most likely using an alternate account and will just create a new one.\n\nHoneypots are used to trick exploiters into firing a fake remote. For example, if your game has currency you can have a fake remote called “AddMoney”. Under normal circumstances having a real remote like this is an extremely bad idea. But it happens and that’s reason to turn it into a Honeypot! When the remote is fired you know that it was fired by an exploiter.\n\nWhen developing anticheats you should remember that you can have false positives. You should always make sure you won’t invalidly punish a player even if it means reducing the strength of the anticheat. You can also combine both anticheats to get the best of both worlds. One example of this might literally be using both forms of anticheat, or it could be making it annoying for the player to play if they’re cheating without effecting them negatively. For example, instead of banning or kicking the player you can temporarily remove their ability to purchase items or interact with certain things. You can even disguise this as a glitch such as giving them a fake item named “Invalid Item” or something and maybe they’ll complain . Make it fun!"
    }
]