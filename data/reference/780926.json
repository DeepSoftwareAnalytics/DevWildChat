[
    {
        "link": "https://learn.microsoft.com/en-us/office/vba/api/excel.worksheet.autofilter",
        "document": "Returns an AutoFilter object if filtering is on. Read-only.\n\nThe property returns Nothing if filtering is off.\n\nTo create an AutoFilter object for a worksheet, you must turn autofiltering on for a range on the worksheet either manually or by using the AutoFilter method of the Range object.\n\nThe following example returns AutoFilter for the current worksheet.\n\nHave questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback."
    },
    {
        "link": "https://learn.microsoft.com/en-us/office/vba/api/excel.range.autofilter",
        "document": "Filters a list by using the AutoFilter.\n\nIf you omit all the arguments, this method simply toggles the display of the AutoFilter drop-down arrows in the specified range.\n\nExcel for Mac does not support this method. Similar methods on Selection and ListObject are supported.\n\nThis example filters a list starting in cell A1 on Sheet1 to display only the entries in which field one is equal to the string Otis. The drop-down arrow for field one will be hidden.\n\nThis example filters a list starting in cell A1 on Sheet1 to display only the entries in which the values of field one contain a SubField, Admin Division 1 (State/province/other), where the value is Washington.\n\nThis example filters a table, Table1, on Sheet1 to display only the entries in which the values of field one have a \"(Display Value)\" that is either 1, 3, Seattle, or Redmond.\n\nData types can apply multiple SubField filters. This example filters a table, Table1, on Sheet1 to display only the entries in which the values of field one contain a SubField, Time Zone(s), where the value is Pacific Time Zone, and where the SubField named Date Founded is either 1851 or there is \"(No Data)\".\n\nThis example filters a table, Table1, on Sheet1 to display the Top 10 entries for field one based off the Population SubField.\n\nThis example filters a table, Table1, on Sheet1 to display the all entries for January 2019 and February 2019 for field one. There does not have to be a row containing January the 31.\n\nHave questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback."
    },
    {
        "link": "https://learn.microsoft.com/en-us/office/vba/api/excel.autofilter",
        "document": "Represents autofiltering for the specified worksheet.\n\nUse the AutoFilter property of the Worksheet object to return the AutoFilter object. Use the Filters property to return a collection of individual column filters. Use the Range property to return the Range object that represents the entire filtered range.\n\nThe following example stores the address and filtering criteria for the current filtering, and then applies new filters.\n\nTo create an AutoFilter object for a worksheet, you must turn autofiltering on for a range on the worksheet either manually or by using the AutoFilter method of the Range object. The following example uses the values stored in module-level variables in the previous example to restore the original autofiltering to the Crew worksheet.\n\nHave questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback."
    },
    {
        "link": "https://trumpexcel.com/vba-autofilter",
        "document": "A lot of Excel functionalities are also available to be used in VBA – and the Autofilter method is one such functionality.\n\nIf you have a dataset and you want to filter it using a criterion, you can easily do it using the Filter option in the Data ribbon.\n\nAnd if you want a more advanced version of it, there is an advanced filter in Excel as well.\n\nThen Why Even Use the AutoFilter in VBA?\n\nIf you just need to filter data and do some basic stuff, I would recommend stick to the inbuilt Filter functionality that Excel interface offers.\n\nYou should use VBA Autofilter when you want to filter the data as a part of your automation (or if it helps you save time by making it faster to filter the data).\n\nFor example, suppose you want to quickly filter the data based on a drop-down selection, and then copy this filtered data into a new worksheet.\n\nWhile this can be done using the inbuilt filter functionality along with some copy-paste, it can take you a lot of time to do this manually.\n\nIn such a scenario, using VBA Autofilter can speed things up and save time.\n\nNote: I will cover this example (on filtering data based on a drop-down selection and copying into a new sheet) later in this tutorial.\n• Expression: This is the range on which you want to apply the auto filter.\n• Field: [Optional argument] This is the column number that you want to filter. This is counted from the left in the dataset. So if you want to filter data based on the second column, this value would be 2.\n• Criteria1: [Optional argument] This is the criteria based on which you want to filter the dataset.\n• Operator: [Optional argument] In case you’re using criteria 2 as well, you can combine these two criteria based on the Operator. The following operators are available for use: xlAnd, xlOr, xlBottom10Items, xlTop10Items, xlBottom10Percent, xlTop10Percent, xlFilterCellColor, xlFilterDynamic, xlFilterFontColor, xlFilterIcon, xlFilterValues\n• Criteria2: [Optional argument] This is the second criteria on which you can filter the dataset.\n• VisibleDropDown: [Optional argument] You can specify whether you want the filter drop-down icon to appear in the filtered columns or not. This argument can be TRUE or FALSE.\n\nApart from Expression, all the other arguments are optional.\n\nIn case you don’t use any argument, it would simply apply or remove the filter icons to the columns.\n\nThe above code would simply apply the Autofilter method to the columns (or if it’s already applied, it will remove it).\n\nThis simply means that if you can not see the filter icons in the column headers, you will start seeing it when this above code is executed, and if you can see it, then it will be removed.\n\nIn case you have any filtered data, it will remove the filters and show you the full dataset.\n\nNow let’s see some examples of using Excel VBA Autofilter that will make it’s usage clear.\n\nSuppose you have a dataset as shown below and you want to filter it based on the ‘Item’ column.\n\nThe below code would filter all the rows where the item is ‘Printer’.\n\nThe above code refers to Sheet1 and within it, it refers to A1 (which is a cell in the dataset).\n\nNote that here we have used Field:=2, as the item column is the second column in our dataset from the left.\n\nBut before I show you those, let me first cover a few examples to show you what all the AutoFilter method can do.\n\nClick here to download the example file and follow along.\n\nExample: Multiple Criteria (AND/OR) in the Same Column\n\nSuppose I have the same dataset, and this time I want to filter all the records where the item is either ‘Printer’ or ‘Projector’.\n\nThe below code would do this:\n\nNote that here I have used the xlOR operator.\n\nThis tells VBA to use both the criteria and filter the data if any of the two criteria are met.\n\nSimilarly, you can also use the AND criteria.\n\nFor example, if you want to filter all the records where the quantity is more than 10 but less than 20, you can use the below code:\n\nExample: Multiple Criteria With Different Columns\n\nSuppose you have the following dataset.\n\nWith Autofilter, you can filter multiple columns at the same time.\n\nFor example, if you want to filter all the records where the item is ‘Printer’ and the Sales Rep is ‘Mark’, you can use the below code:\n\nExample: Filter Top 10 Records Using the AutoFilter Method\n\nSuppose you have the below dataset.\n\nBelow is the code that will give you the top 10 records (based on the quantity column):\n\nIn the above code, I have used ActiveSheet. You can use the sheet name if you want.\n\nNote that in this example, if you want to get the top 5 items, just change the number in Criteria1:=”10″ from 10 to 5.\n\nSo for top 5 items, the code would be:\n\nIt may look weird, but no matter how many top items you want, the Operator value always remains xlTop10Items.\n\nSimilarly, the below code would give you the bottom 10 items:\n\nAnd if you want the bottom 5 items, change the number in Criteria1:=”10″ from 10 to 5.\n\nExample: Filter Top 10 Percent Using the AutoFilter Method\n\nSuppose you have the same data set (as used in the previous examples).\n\nBelow is the code that will give you the top 10 percent records (based on the quantity column):\n\nIn our dataset, since we have 20 records, it will return the top 2 records (which is 10% of the total records).\n\nExample: Using Wildcard Characters in Autofilter\n\nSuppose you have a dataset as shown below:\n\nIf you want to filter all the rows where the item name contains the word ‘Board’, you can use the below code:\n\nIn the above code, I have used the wildcard character * (asterisk) before and after the word ‘Board’ (which is the criteria).\n\nAn asterisk can represent any number of characters. So this would filter any item that has the word ‘board’ in it.\n\nExample: Copy Filtered Rows into a New Sheet\n\nIf you want to not only filter the records based on criteria but also copy the filtered rows, you can use the below macro.\n\nIt copies the filtered rows, adds a new worksheet, and then pastes these copied rows into the new sheet.\n\nThe above code would check if there are any filtered rows in Sheet1 or not.\n\nIf there are no filtered rows, it will show a message box stating that.\n\nAnd if there are filtered rows, it will copy those, insert a new worksheet, and paste these rows on that newly inserted worksheet.\n\nExample: Filter Data based on a Cell Value\n\nUsing Autofilter in VBA along with a drop-down list, you can create a functionality where as soon as you select an item from the drop-down, all the records for that item are filtered.\n\nSomething as shown below:\n\nClick here to download the example file and follow along.\n\nThis type of construct can be useful when you want to quickly filter data and then use it further in your work.\n\nBelow is the code that will do this:\n\nThis is a worksheet event code, which gets executed only when there is a change in the worksheet and the target cell is B2 (where we have the drop-down).\n\nAlso, an If Then Else condition is used to check if the user has selected ‘All’ from the drop down. If All is selected, the entire data set is shown.\n\nThis code is NOT placed in a module.\n\nInstead, it needs to be placed in the backend of the worksheet that has this data.\n\nHere are the steps to put this code in the worksheet code window:\n• In the Project Explorer pane, double-click on the Worksheet name in which you want this filtering functionality.\n• In the worksheet code window, copy and paste the above code.\n\nNow when you use the drop-down list, it will automatically filter the data.\n\nThis is a worksheet event code, which gets executed only when there is a change in the worksheet and the target cell is B2 (where we have the drop-down).\n\nAlso, an If Then Else condition is used to check if the user has selected ‘All’ from the drop down. If All is selected, the entire data set is shown.\n\nWhen applying Autofilter to a range of cells, there may already be some filters in place.\n\nYou can use the below code turn off any pre-applied auto filters:\n\nThis code checks the entire sheets and removes any filters that have been applied.\n\nIf you don’t want to turn off filters from the entire sheet but only from a specific dataset, use the below code:\n\nThe above code checks whether there are already filters in place or not.\n\nIf filters are already applied, it removes it, else it does nothing.\n\nSimilarly, if you want to turn on AutoFilter, use the below code:\n\nCheck if AutoFilter is Already Applied\n\nIf you have a sheet with multiple datasets and you want to make sure you know that there are no filters already in place, you can use the below code.\n\nThis code uses a message box function that displays a message ‘There are Filters already in place’ when it finds filters on the sheet, else it shows ‘There are no filters’.\n\nIf you have filters applied to the dataset and you want to show all the data, use the below code:\n\nThe above code checks whether the FilterMode is TRUE or FALSE.\n\nIf it’s true, it means a filter has been applied and it uses the ShowAllData method to show all the data.\n\nNote that this does not remove the filters. The filter icons are still available to be used.\n\nBy default, when you protect a sheet, the filters won’t work.\n\nIn case you already have filters in place, you can enable AutoFilter to make sure it works even on protected sheets.\n\nTo do this, check the Use Autofilter option while protecting the sheet.\n\nWhile this works when you already have filters in place, in case you try to add Autofilters using a VBA code, it won’t work.\n\nSince the sheet is protected, it wouldn’t allow any macro to run and make changes to the Autofilter.\n\nSo you need to use a code to protect the worksheet and make sure auto filters are enabled in it.\n\nThis can be useful when you have created a dynamic filter (something I covered in the example – ‘Filter Data based on a Cell Value’).\n\nBelow is the code that will protect the sheet, but at the same time, allow you to use Filters as well as VBA macros in it.\n\nThis code needs to be placed in ThisWorkbook code window.\n\nHere are the steps to put the code in ThisWorkbook code window:\n• In the Project Explorer pane, double-click on the ThisWorkbook object.\n• In the code window that opens, copy and paste the above code.\n\nAs soon as you open the workbook and enable macros, it will run the macro automatically and protect Sheet1.\n\nHowever, before doing that, it will specify ‘EnableAutoFilter = True’, which means that the filters would work in the protected sheet as well.\n\nAlso, it sets the ‘UserInterfaceOnly’ argument to ‘True’. This means that while the worksheet is protected, the VBA macros code would continue to work.\n\nYou May Also Like the Following VBA Tutorials:"
    },
    {
        "link": "https://ozgrid.com/VBA/autofilter-vba.htm",
        "document": "How to use AutoFilters in Excel VBA Macros\n\nGot any Excel Questions? Free Excel Help\n\nSee Also: AutoFilters via User Interface | Display Excel AutoFilter Criteria\n\nAutoFilter provides us with a MUCH faster alternative to loops of all kinds.\n\nIn the majority of cases it's faster and more efficient to use one of Excel's built in features as apposed to re-inventing the wheel with VBA code. This is why those that have learnt Excel from the ground-up know what native features Excel has to offer. While those only familiar with VB/VBA tend to be the ones who re-invent the wheel.\n\n \n\n Ok, the first thing we need to know is how to apply AutoFilter to a range. When we do apply AutoFilter via VBA one SHOULD always turn the off any current filters and remove them completely. Why not check if the AutoFilter is already in place and go from there? The answer is simple, while we can determine if AutoFilter has/is on a specific Worksheet, we cannot guarantee (with extra checking) that it is in use on the range we need! For example, we could use the code below to check.\n\nFrom the code above we will know if AutoFilters are visible, but not necessarily in Filter mode (more on that soon). However, we cannot tell if the AutoFilterMode is applied to the correct range. Let's now see how we can determine if the AutoFilters and in use and are being used to filter down.\n\nAs you can see, we have used the FilterMode Property of the Worksheet to determine whether the AutoFilters are filtering data down. So, in summary, AutoFilterMode tells us if the AutoFilter arrows are visible and FilterMode tells us if they are in use. However, as I mentioned above this does not tell us which range has had AutoFilter applied. So, with this in mind, we are better off simply removing any existing Autofilter and then applying them to our required range. Here is how, assuming we want A1:D1 to have the AutoFilters.\n\nAnother advantage to applying AutoFilter is this manner is that no error occurs if AutoFilterMode is already false. By the way, we cannot use: AutoFilterMode = True to apply AutoFilters. To apply AutoFilter (at this time with no criteria) we would use Range(\"A1:D1\").AutoFilter. If we are to first check the range that AutoFilter is applied to, we would use code like below;\n\nIn my mind though, this code is superfluous when compared with simply removing and applying AutoFilters. Let's now look at how we apply AutoFilter to a SINGLE cell in a range. If we had our table in the range A1:D200 on the Active sheet and we used the \"ApplyAutoFilters\" Procedure with .Range(\"A1\").AutoFilter we would likely end up with AutoFilter applied to ALL contiguous headings across row 1. This due to the fact that Excel will detect the contiguous headings across row 1 and assume that we want all headings to have AutoFilters. We can force Excel to not do this by specifying a 2 row single column range. For example;\n\nExcel Dashboard Reports & Excel Dashboard Charts 50% Off Become an ExcelUser Affiliate & Earn Money\n\nFree Choice of Complete Excel Training Course OR Excel Add-ins Collection on all purchases totaling over $64.00. ALL purchases totaling over $150.00 gets you BOTH! Purchases MUST be made via this site . Send payment proof to [email protected] 31 days after purchase date.\n\n\n\n Instant Download and Money Back Guarantee on Most Software\n\nExcel Trader Package Technical Analysis in Excel With $139.00 of FREE software!\n\nSome of our more popular products are below...\n\nConvert Excel Spreadsheets To Webpages | Trading In Excel | Construction Estimators | Finance Templates & Add-ins Bundle | Code-VBA | Smart-VBA | Print-VBA | Excel Data Manipulation & Analysis | Convert MS Office Applications To...... | Analyzer Excel | Downloader Excel | MSSQL Migration Toolkit | Monte Carlo Add-in | Excel Costing Templates"
    },
    {
        "link": "https://trumpexcel.com/vba-autofilter",
        "document": "A lot of Excel functionalities are also available to be used in VBA – and the Autofilter method is one such functionality.\n\nIf you have a dataset and you want to filter it using a criterion, you can easily do it using the Filter option in the Data ribbon.\n\nAnd if you want a more advanced version of it, there is an advanced filter in Excel as well.\n\nThen Why Even Use the AutoFilter in VBA?\n\nIf you just need to filter data and do some basic stuff, I would recommend stick to the inbuilt Filter functionality that Excel interface offers.\n\nYou should use VBA Autofilter when you want to filter the data as a part of your automation (or if it helps you save time by making it faster to filter the data).\n\nFor example, suppose you want to quickly filter the data based on a drop-down selection, and then copy this filtered data into a new worksheet.\n\nWhile this can be done using the inbuilt filter functionality along with some copy-paste, it can take you a lot of time to do this manually.\n\nIn such a scenario, using VBA Autofilter can speed things up and save time.\n\nNote: I will cover this example (on filtering data based on a drop-down selection and copying into a new sheet) later in this tutorial.\n• Expression: This is the range on which you want to apply the auto filter.\n• Field: [Optional argument] This is the column number that you want to filter. This is counted from the left in the dataset. So if you want to filter data based on the second column, this value would be 2.\n• Criteria1: [Optional argument] This is the criteria based on which you want to filter the dataset.\n• Operator: [Optional argument] In case you’re using criteria 2 as well, you can combine these two criteria based on the Operator. The following operators are available for use: xlAnd, xlOr, xlBottom10Items, xlTop10Items, xlBottom10Percent, xlTop10Percent, xlFilterCellColor, xlFilterDynamic, xlFilterFontColor, xlFilterIcon, xlFilterValues\n• Criteria2: [Optional argument] This is the second criteria on which you can filter the dataset.\n• VisibleDropDown: [Optional argument] You can specify whether you want the filter drop-down icon to appear in the filtered columns or not. This argument can be TRUE or FALSE.\n\nApart from Expression, all the other arguments are optional.\n\nIn case you don’t use any argument, it would simply apply or remove the filter icons to the columns.\n\nThe above code would simply apply the Autofilter method to the columns (or if it’s already applied, it will remove it).\n\nThis simply means that if you can not see the filter icons in the column headers, you will start seeing it when this above code is executed, and if you can see it, then it will be removed.\n\nIn case you have any filtered data, it will remove the filters and show you the full dataset.\n\nNow let’s see some examples of using Excel VBA Autofilter that will make it’s usage clear.\n\nSuppose you have a dataset as shown below and you want to filter it based on the ‘Item’ column.\n\nThe below code would filter all the rows where the item is ‘Printer’.\n\nThe above code refers to Sheet1 and within it, it refers to A1 (which is a cell in the dataset).\n\nNote that here we have used Field:=2, as the item column is the second column in our dataset from the left.\n\nBut before I show you those, let me first cover a few examples to show you what all the AutoFilter method can do.\n\nClick here to download the example file and follow along.\n\nExample: Multiple Criteria (AND/OR) in the Same Column\n\nSuppose I have the same dataset, and this time I want to filter all the records where the item is either ‘Printer’ or ‘Projector’.\n\nThe below code would do this:\n\nNote that here I have used the xlOR operator.\n\nThis tells VBA to use both the criteria and filter the data if any of the two criteria are met.\n\nSimilarly, you can also use the AND criteria.\n\nFor example, if you want to filter all the records where the quantity is more than 10 but less than 20, you can use the below code:\n\nExample: Multiple Criteria With Different Columns\n\nSuppose you have the following dataset.\n\nWith Autofilter, you can filter multiple columns at the same time.\n\nFor example, if you want to filter all the records where the item is ‘Printer’ and the Sales Rep is ‘Mark’, you can use the below code:\n\nExample: Filter Top 10 Records Using the AutoFilter Method\n\nSuppose you have the below dataset.\n\nBelow is the code that will give you the top 10 records (based on the quantity column):\n\nIn the above code, I have used ActiveSheet. You can use the sheet name if you want.\n\nNote that in this example, if you want to get the top 5 items, just change the number in Criteria1:=”10″ from 10 to 5.\n\nSo for top 5 items, the code would be:\n\nIt may look weird, but no matter how many top items you want, the Operator value always remains xlTop10Items.\n\nSimilarly, the below code would give you the bottom 10 items:\n\nAnd if you want the bottom 5 items, change the number in Criteria1:=”10″ from 10 to 5.\n\nExample: Filter Top 10 Percent Using the AutoFilter Method\n\nSuppose you have the same data set (as used in the previous examples).\n\nBelow is the code that will give you the top 10 percent records (based on the quantity column):\n\nIn our dataset, since we have 20 records, it will return the top 2 records (which is 10% of the total records).\n\nExample: Using Wildcard Characters in Autofilter\n\nSuppose you have a dataset as shown below:\n\nIf you want to filter all the rows where the item name contains the word ‘Board’, you can use the below code:\n\nIn the above code, I have used the wildcard character * (asterisk) before and after the word ‘Board’ (which is the criteria).\n\nAn asterisk can represent any number of characters. So this would filter any item that has the word ‘board’ in it.\n\nExample: Copy Filtered Rows into a New Sheet\n\nIf you want to not only filter the records based on criteria but also copy the filtered rows, you can use the below macro.\n\nIt copies the filtered rows, adds a new worksheet, and then pastes these copied rows into the new sheet.\n\nThe above code would check if there are any filtered rows in Sheet1 or not.\n\nIf there are no filtered rows, it will show a message box stating that.\n\nAnd if there are filtered rows, it will copy those, insert a new worksheet, and paste these rows on that newly inserted worksheet.\n\nExample: Filter Data based on a Cell Value\n\nUsing Autofilter in VBA along with a drop-down list, you can create a functionality where as soon as you select an item from the drop-down, all the records for that item are filtered.\n\nSomething as shown below:\n\nClick here to download the example file and follow along.\n\nThis type of construct can be useful when you want to quickly filter data and then use it further in your work.\n\nBelow is the code that will do this:\n\nThis is a worksheet event code, which gets executed only when there is a change in the worksheet and the target cell is B2 (where we have the drop-down).\n\nAlso, an If Then Else condition is used to check if the user has selected ‘All’ from the drop down. If All is selected, the entire data set is shown.\n\nThis code is NOT placed in a module.\n\nInstead, it needs to be placed in the backend of the worksheet that has this data.\n\nHere are the steps to put this code in the worksheet code window:\n• In the Project Explorer pane, double-click on the Worksheet name in which you want this filtering functionality.\n• In the worksheet code window, copy and paste the above code.\n\nNow when you use the drop-down list, it will automatically filter the data.\n\nThis is a worksheet event code, which gets executed only when there is a change in the worksheet and the target cell is B2 (where we have the drop-down).\n\nAlso, an If Then Else condition is used to check if the user has selected ‘All’ from the drop down. If All is selected, the entire data set is shown.\n\nWhen applying Autofilter to a range of cells, there may already be some filters in place.\n\nYou can use the below code turn off any pre-applied auto filters:\n\nThis code checks the entire sheets and removes any filters that have been applied.\n\nIf you don’t want to turn off filters from the entire sheet but only from a specific dataset, use the below code:\n\nThe above code checks whether there are already filters in place or not.\n\nIf filters are already applied, it removes it, else it does nothing.\n\nSimilarly, if you want to turn on AutoFilter, use the below code:\n\nCheck if AutoFilter is Already Applied\n\nIf you have a sheet with multiple datasets and you want to make sure you know that there are no filters already in place, you can use the below code.\n\nThis code uses a message box function that displays a message ‘There are Filters already in place’ when it finds filters on the sheet, else it shows ‘There are no filters’.\n\nIf you have filters applied to the dataset and you want to show all the data, use the below code:\n\nThe above code checks whether the FilterMode is TRUE or FALSE.\n\nIf it’s true, it means a filter has been applied and it uses the ShowAllData method to show all the data.\n\nNote that this does not remove the filters. The filter icons are still available to be used.\n\nBy default, when you protect a sheet, the filters won’t work.\n\nIn case you already have filters in place, you can enable AutoFilter to make sure it works even on protected sheets.\n\nTo do this, check the Use Autofilter option while protecting the sheet.\n\nWhile this works when you already have filters in place, in case you try to add Autofilters using a VBA code, it won’t work.\n\nSince the sheet is protected, it wouldn’t allow any macro to run and make changes to the Autofilter.\n\nSo you need to use a code to protect the worksheet and make sure auto filters are enabled in it.\n\nThis can be useful when you have created a dynamic filter (something I covered in the example – ‘Filter Data based on a Cell Value’).\n\nBelow is the code that will protect the sheet, but at the same time, allow you to use Filters as well as VBA macros in it.\n\nThis code needs to be placed in ThisWorkbook code window.\n\nHere are the steps to put the code in ThisWorkbook code window:\n• In the Project Explorer pane, double-click on the ThisWorkbook object.\n• In the code window that opens, copy and paste the above code.\n\nAs soon as you open the workbook and enable macros, it will run the macro automatically and protect Sheet1.\n\nHowever, before doing that, it will specify ‘EnableAutoFilter = True’, which means that the filters would work in the protected sheet as well.\n\nAlso, it sets the ‘UserInterfaceOnly’ argument to ‘True’. This means that while the worksheet is protected, the VBA macros code would continue to work.\n\nYou May Also Like the Following VBA Tutorials:"
    },
    {
        "link": "https://reddit.com/r/excel/comments/4o3gzq/vba_essentials_manipulating_tables_with_autofilter",
        "document": "I recently faced an issue where it was necessary for me to whip into shape when it came to manipulating filtered data on a spreadsheet. I felt like it would be a good idea to share my knowledge and perhaps you can add in some things that I skipped, or that I just don’t know!\n\nBeing able to automate tables/filters efficiently can cut hours of tedious manual sub calculations from your daily, weekly, or monthly data manipulation/analysis duties. In this tutorial I will cover the basics of automating these things. To understand fully what I’m covering, you’ll need to be familiar with dictionaries and simple loops. If you’ve yet to grasp the basics of the dictionary or loops, here is a link to my VBA Essentials: Dictionaries tutorial and my Simple Loops in VBA tutorial, all from right here on r/excel. Let’s begin!\n\nCreating an autofilter is extremely simple. You’ll either need to have a header row, or create one before proceeding. The following example creates an autofilter in the modules parent workbook on the first sheet from columns A to H.\n\nYou can filter any column of data by anything contained in the column. If you filter it by a value that is not contained in the column, it will simply filter everything out and you’ll be left with only the header. In the following example I filter a table by a known value. We’ll assume it’s the table I created in the above example.\n\nNotice here that I’ve filtered column “A” for “yes” by choosing Field:= 1 and Criteria1:= “yes”. Similarly, in the next line, I’ve filtered column “B” for “blue” and “red”. As you see above, an “Operator” has to be used to filter a column for more than one item and each subsequent criteria has to be followed with a number; first criteria is “Criteria1”, second is “Criteria2” and so on. The “Operator” is simple stating “I want to filter items that are “red” OR “blue”. Here is a link to the autofilter syntax and the operator syntax and options. The most important thing to take from this example is that the RANGE OBJECT ONLY NEEDS TO SPECIFY A SINGLE CELL IN THE HEADER; the internet has all kinds of folks putting crazy stuff in there, but not us, right?\n\nHere’s where we can do some interesting things by integrating dictionaries into our macro. The situation is that you need to do multiple filters and do calculations with each set of filters i.e. you need to do some sums for each item category for each month. If you have 30 item categories and two months you’re already at 60 manual filters and if you need to do 4 sums per filter, you can do the math. Check out the example below and I’ll do some explanation afterwards.\n\nOk, I understand, this looks pretty intimidating, but it’s not; if you understand simple loops, dictionaries, and the easy-peasy stuff from the top of this tutorial, you already know how to do this. Here is a screenshot of my header, let’s go through it.\n\nThe basic concept here is to create a “Top 25” (luckily all of the accounts in these reports are top 25 accounts so we don’t worry about filtering out non-top 25 accounts) category in our “National Account Name” column that does multiple sums for each “Item cat 1” per “Year/Month”. This issues we face is we don’t know how many or what item categories we have and we don’t know how many months the data spans. The simplest way to find out what we’re dealing with is to roll these columns into a dictionary and see what unique values we’re left with. That’s exactly what the first part of this macro does, it finds unique “Item cat 1” and “Year/Month” values. Once we have these, all we have to do is loop the “Item cat 1” values inside of the “Year/Month”. I then do an error check because not all of the Items are paired with all the dates, attempting to Sum when no rows are visible throws an error. After that I do some simple calculations utilizing the SpecialCells method. I also added in a simple way to loop using the SpecialCells method but this loop is taken from a different part of my original macro so it doesn't make much sense in this context(just wanted to show how to loop through visible cells).\n\nManipulating tables can be extremely time consuming and there’s no reason why you shouldn’t automate calculations that you need to do on a regular basis. By utilizing the Range.Autofilter method it allows you to write code that does not have to take the whole dataset into consideration when attempting to do calculations.\n\nI hope y’all enjoyed this and please comment with corrections and additional information."
    },
    {
        "link": "https://excelcampus.com/vba/macros-filters-autofilter-method",
        "document": "Bottom line: Learn how to create macros that apply filters to ranges and Tables with the AutoFilter method in VBA. The post contains links to examples for filtering different data types including text, numbers, dates, colors, and icons.\n\nThe Excel file that contains the code can be downloaded below. This file contains code for filtering different data types and filter types.\n\nFilters are a great tool for analyzing data in Excel. For most analysts and frequent Excel users, filters are a part of our daily lives. We use the filter drop-down menus to apply filters to individual columns in a data set. This helps us tie out numbers with reports and do investigative work on our data.\n\nFiltering can also be a time consuming process. Especially when we are applying filters to multiple columns on large worksheets, or filtering data to then copy/paste it to other worksheets or workbooks.\n\nThis article explains how to create macros to automate the filtering process. This is an extensive guide on the AutoFilter method in VBA.\n\nI also have articles with examples for different filters and data types including: blanks, text, numbers, dates, colors & icons, and clearing filters.\n\nThe Macro Recorder is Your Friend (& Enemy)\n\nWe can easily get the VBA code for filters by turning on the macro recorder, then applying one or more filters to a range/Table.\n\nHere are the steps to create a filter macro with the macro recorder:\n• Turn the macro recorder on:\n• Give the macro a name, choose where you want the code saved, and press OK.\n• Apply one or more filters using the filter drop-down menus.\n• Open the VB Editor (Developer tab > Visual Basic) to view the code.\n\nIf you've already used the macro recorder for this process, then you know how useful it can be. Especially as our filter criteria gets more complex.\n\nThe code will look something like the following.\n\nWe can see that each line uses the AutoFilter method to apply the filter to the column. It also contains information about the criteria for the filter.\n\nThis is where it can get complex, confusing, and frustrating. It can be difficult to understand what the code means when trying to modify it for a different data set or scenario. So let's take a look at how the AutoFilter method works.\n\nThe AutoFilter method is used to clear and apply filters to a single column in a range or Table in VBA. It automates the process of applying filters through the filter drop-down menus, and does all that work for us. 🙂\n\nIt can be used to apply filters to multiple columns by writing multiple lines of code, one for each column. We can also use AutoFilter to apply multiple filter criteria to a single column, just like you would in the filter drop-down menu by selecting multiple check boxes or specifying a date range.\n\nHere are step-by-step instructions for writing a line of code for AutoFilter\n\nThe AutoFilter method is a member of the Range object. So we must reference a range or Table that the filters are applied to on the sheet. This will be the entire range that the filters are applied to.\n\nThe following examples will enable/disable filters on range B3:G1000 on the AutoFilter Guide sheet.\n\nHere is an example using Excel Tables.\n\nThe AutoFilter method has 5 optional parameters, which we'll look at next. If we don't specify any of the parameters, like the examples above, then the AutoFilter method will turn the filters on/off for the referenced range. It is toggle. If the filters are on they will be turned off, and vice-versa.\n\nFilters work the same on both regular ranges and Excel Tables.\n\nMy preferred method is to use Tables because we don't have to worry about changing range references as the table grows or shrinks. However, the code will be the same for both objects. The rest of the code examples use Excel tables, but you can easily modify this for regular ranges.\n\nThe AutoFilter method has 5 (or 6) optional parameters that are used to specify the filter criteria for a column. Here is a list of the parameters.\n\nWe can use a combination of these parameters to apply various filter criteria for different data types. The first four are the most important, so let's take a look at how to apply those.\n\nThe first parameter is the Field. For the Field parameter we specify a number that is the column number that the filter will be applied to. This is the column number within the filter range that is the parent of the AutoFilter method. It is NOT number of the column on the worksheet.\n\nIn the example below Field 4 is the Product column because it is the 4th column in the filter range/Table.\n\nThe column filter is cleared when we only specify the the Field parameter, and no other criteria.\n\nWe can also use a variable for the Field parameter and set it dynamically. I explain that in more detail below.\n\nThere are two parameters that can be used to specify the filter Criteria, Criteria1 and Criteria2. We use a combination of these parameters and the Operator parameter for different types of filters. This is where things get tricky, so let's start with a simple example.\n\nThis would be the same as selecting a single item from the checkbox list in the filter drop-down menu.\n\nThe values we specify for Criteria1 and Criteria2 can get tricky. Here are some general guidelines for how to reference the Criteria parameter values.\n• The criteria value is a string wrapped in quotation marks. There are a few exceptions where the criteria is a constant for date time period and above/below average.\n• When specifying filters for single numbers or dates, the number formatting must match the number formatting that is applied in the range/table.\n• The comparison operator for greater/less than is also included inside the quotation marks, before the number.\n• Quotation marks are also used for filters for blanks “=” and non-blanks “<>”.\n\nWhat if we want to select multiple items from the filter drop-down? Or do a filter for a range of dates or numbers?\n\nFor this we need the Operator. The Operator parameter is used to specify what type of filter we want to apply. This can vary based on the type of data in the column. One of the following 11 constants must be used for the Operator.\n\nHere is a link to the MSDN help page that contains the list of constants for XlAutoFilterOperator Enumeration.\n\nThe operator is used in combination with Criteria1 and/or Criteria2, depending on the data type and filter type. Here are a few examples.\n\nSo that is the basics of writing a line of code for the AutoFilter method. It gets more complex with different data types. So I've provided many examples below that contain most of the combinations of Criteria and Operator for different types of filters.\n\nWhen an AutoFilter line of code is run, it first clears any filters applied to that column (Field), then applies the filter criteria that is specified in the line of code.\n\nThis means it is NOT additive. The following 2 lines will NOT create a filter for Product 1 and Product 2. After the macro is run, the Product column will only be filtered for Product 2.\n\nIf you want to apply a filter with multiple criteria to a single column, then you can specify that with the Criteria and Operator parameters.\n\nHow to Set the Field Number Dynamically\n\nIf we add/delete/move columns in the filter range, then the field number for a filtered column might change. Therefore, I try to avoid hard-coding a number for the Field parameter whenever possible.\n\nWe can use a variable instead and use some code to find the column number by it's name. Here are two examples for regular ranges and Tables.\n\nThe column number will be found every time we run the macro. We don't have to worry about changing the field number when the column moves. This saves time and prevents errors (win-win)! 🙂\n\nThere are a lot of advantages to using Excel Tables, especially with the AutoFilter method. Here are a few of the major reasons I prefer Tables.\n• We don't have to redefine the range in VBA as the data range changes size (rows/columns are added/deleted). The entire Table is referenced with the ListObject object.\n• It's easy to reference the data in the Table after filters are applied. We can use the DataBodyRange property to reference visible rows to copy/paste, format, modify values, etc.\n• We can have multiple Tables on the same sheet, and therefore multiple filter ranges. With regular ranges we can only have one filtered range per sheet.\n• The code to clear all filters on a Table is easier to write.\n\nThe filter drop-down menu options change based on what type of data is in the column. We have different filters for text, numbers, dates, and colors. This creates A LOT of different combinations of Operators and Criteria for each type of filter.\n\nI created separate posts for each of these filter types. The posts contain explanations and VBA code examples.\n• How to Clear Filters with VBA\n• How to Filter for Blank & Non-Blank Cells\n• How to Filter for Text with VBA\n• How to Filter for Numbers with VBA\n• How to Filter for Dates with VBA\n• How to Filter for Colors & Icons with VBA\n\nThe file in the downloads section above contains all of these code samples in one place. You can add it to your Personal Macro Workbook and use the macros in your projects.\n\nWhy is the AutoFilter Method so Complex?\n\nThis post was inspired by a question from Chris, a member of The VBA Pro Course. The combinations of Criteria and Operators can be confusing and complex. Why is this?\n\nWell, filters have evolved over the years. We saw a lot of new filter types introduced in Excel 2010, and the feature is continuing to be improved. However, the parameters of the AutoFilter method haven't changed. This is great for compatibility with older versions, but also means the new filter types are being worked into the existing parameters.\n\nMost of the filter code makes sense, but can be tricky to figure out at first. Fortunately we have the macro recorder to help with that.\n\nI hope you can use this post and Excel file as a guide to writing macros for filters. Automating filters can save us and our users a ton of time, especially when using these techniques in a larger data automation project.\n\nPlease leave a comment below with any questions or suggestions. Thank you! 🙂"
    },
    {
        "link": "https://stackoverflow.com/questions/31264942/autofilter-in-another-sheet-using-vba",
        "document": "I intend to filter values that begins with 314 in column F, and clear its contents(entire row). The workbook has 30,000+ rows and I think looping is not a good option when filtering in another sheet(sA). I recorded the following code below.\n\nWhen I ran the code, a Runtime Error 1004 appears. I think because of the ActiveCell, because I ran the code in a different sheet(sB, where the button for filtering sheets in sA is found). What could be the possible fix to this? Any suggestions?"
    },
    {
        "link": "https://stackoverflow.com/questions/35007125/optimal-data-manipulation-excel",
        "document": "I wonder if you'd be better off looking at this task in a different way. At the moment you appear to be talking in terms of a database of employee details that you'd like to run a query on and then output the results to Excel. Obviously this would better suit a genuine database application but you could mimic that task in Excel using a worksheet as the data storage, a UserForm as the query interface and VBA to manage the data processing. Your question seems to want simply to automate some Excel keystrokes in an efficient manner, whereas it might be better to ask how VBA could create this mini database application.\n\nIn particular, for genuine efficiency, you really need to steer clear of multiple interrogations of values, such as with , , etc. as reading values is time-consuming. You're usually better off reading the database values just once into an array and then interrogating that array. Fortunately, these tasks are really quite straight forward in VBA.\n\nSo ... first of all, I'd create a with for each filter that you want to use. In the example below, I've just done three but you could do all of the columns if you wished. Make sure you set the property to :\n\nIn the code behind the , add the following (you can change the name of the listboxes if you wish, but I've used , and ):\n\nNow just add the data reading and data filtering procedures into a , like so:\n\nYou could go further, such as by utilising LINQ syntax to simplify the query code, but this example should give you an idea of how you could think about VBA as more of an application solution."
    }
]