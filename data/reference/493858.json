[
    {
        "link": "https://docs.oracle.com/en/java/javase/17/install/overview-jdk-installation.html",
        "document": "The type of installation depends on your requirement and the platform that you choose to install.\n\nTo learn about the files and directories that are created after JDK installation, see Installed Directory Structure of JDK."
    },
    {
        "link": "https://docs.oracle.com/en/java/javase/21/install/overview-jdk-installation.html",
        "document": "The type of installation depends on your requirement and the platform that you choose to install.\n\nTo learn about the files and directories that are created after JDK installation, see Installed Directory Structure of JDK."
    },
    {
        "link": "https://geeksforgeeks.org/download-and-install-java-development-kit-jdk-on-windows-mac-and-linux",
        "document": "Java Development Kit (JDK) is one of the most essential tool for developers to build, compile, and run Java applications. Whether you’re a beginner or an experienced programmers, installing JDK is the first step towards working with the Java development. You can download JDK to create Android application source file as well using the Java or Kotlin programming language.\n\nThe system will execute the code using a set of Libraries and Compilers. JDK, JRE, and JVM should not be confused with one another.\n\nThis article describes the step-by-step process for installing and configuring the JDK on Windows, Mac and Linux. Let’s begin:\n\nThe JDK can be installed on the following Platforms:\n\nWe need to download the JDK first, find the steps below to get started:\n\nGo to the Official JDK website to download the file.\n\nSince JDK is an open-source, so you can get it from OpenJDK in a few clicks.\n\nAs of 2025, the latest stable versions are JDK 23 (SE) and JDK 21 (LTS). Select the compatible version as per your operating system (Windows, Mac or Linux)\n\nGo through all the License and Agreement before downloading (from Oracle website), it will not ask if you’ll download it from OpenJDK website.\n\nFollow the below steps to install JDK on Windows environment i.e. Windows 7, Windows 8, Windows 8.1, Windows 10, and Windows 11.\n\nLocate the downloaded .exe file (e.g. jdk-23-windows-x64_bin.exe) and make the double click to begin the Installation process. Follow the installation wizard prompts to complete the installation process.\n\nOnce the installation gets completed, you need to configure environment variables to notify the system about the directory in which the JDK files are located.\n\nProceed to C:\\Program Files\\Java\\jdk-{YOUR_JDK_VERSION}\\bin (replace {-} with your JDK version)\n\nStep 2.1: To set the Environment Variables, you need to search Environment Variables in the Task Bar and click on “Edit the system environment variables”.\n\nStep 2.2: Under the Advanced section, Click on “Environment Variables”.\n\nStep 2.3: Under System variables, select the “Path” variable and click on “Edit”. Click on “New” then paste the Path Address i.e. C:\\Program Files\\Java\\jdk-{YOUR_JDK_VERSION}\\bin. Click on “OK”.\n\nStep 2.4: Now, in the Environment Variables dialogue, under System variables, click on “New” and then under Variable name: JAVA_HOME and Variable value: paste address i.e.\n\nOpen Command Prompt and enter the following commands:\n\nFollow the steps below to install the Java software Development Kit on a Linux environment. These instructions are applicable to various Linux distributions such as Ubuntu, Fedora, and CentOS.\n\nTo install the downloaded JDK File using terminal, Open terminal and change your directory to downloads by using the command:\n\nTo list files and packages present in the directory, Type\n\nStep 1.1: Now we use Debian Package Manager to configure our downloaded file for installation by typing\n\nEnter your password as we have run an elevated prompt, i.e. the sudo or superuser do command, which is a quick way to grant specific users permission to perform specific system commands at the system’s root (most powerful) level.\n\nStep 1.2: Now, Type the following commands to proceed with the installation\n\nOpen the terminal and enter the following commands\n\nAfter the installation is complete, we have to configure environment variables to notify the system about the directory in which jdk files are located. To find the Location of the JDK Files, run this command and copy the File Location.\n\nIn order to set the environment variable, you need to edit the environment file using the following command:\n\nProceed to save and close the file.\n\nStep 3.2: Now we have to refresh the environment file by using this command:\n\nFollow the steps below to install the Java Development Kit (JDK) on macOS. These instructions are compatible with various versions of macOS, including Mojave, Catalina, Big Sur, Monterey, Ventura, Sonoma the latest macOS Sequoia.\n\nProceed to Install the JDK kit by following the bootstrapped steps:\n\nOpen the terminal and pass the following commands. To find the Location of the JAVA_HOME, run this command:\n\nStep 2.1: We have to set this output as our JAVA_HOME Environment Variable. You can use any command or code editor to edit the file, here we are using VS Code\n\nStep 2.2: At the very bottom, we have to export the path we obtained earlier i.e.\n\nStep 2.3: Now we have to refresh the environment file by using this command\n\nIn the terminal, enter the following commands\n\nInstalling the latest JDK version is a simple process, whether you’re on Windows, macOS or Linux. By following this guide, you can setup JDK and start developing Java applications in just a few steps. You can easily download the latest jdk 23 in your system and start with Java development today.\n\nDownload and Install Java Development Kit (JDK) on Windows, Mac, and Linux – FAQ’s\n\nWhat is JDK, and why do we need it?\n\nHow do I install JDK on Windows, Mac and Linux?\n\nIs JDK free to use?\n\nWhich JDK version should I use in 2025?"
    },
    {
        "link": "https://java.com/en/download/help/windows_manual_download.html",
        "document": ""
    },
    {
        "link": "https://nkamphoa.com/install-and-configure-the-java-development-kit-jdk-on-macos-linux-and-windows",
        "document": "Begin your Java programming journey with our comprehensive JDK installation guide. Whether on macOS, Linux, or Windows, this beginner-friendly walkthrough ensures a seamless setup of your development environment with the Java Development Kit (JDK).\n\nAs we saw in the previous article on the difference between JRE, JDK, and JVM, the JDK is the essential tool for getting started with Java programming. It contains everything you need to compile and run your Java code. Before starting with this JDK installation guide, let’s have a quick look at the Java Platform, Standard Edition (Java SE).\n\n3. What do you need to know?\n\nJava Platform, Standard Edition (Java SE) is a specification that outlines the fundamental tools and libraries necessary for Java application development. It defines a set of standards that ensure compatibility across various implementations.\n\nMultiple organizations provide their implementations of Java SE, each offering a version of the platform that adheres to the specified standards. However, all JDK implementations are based on the OpenJDK reference implementation, which is an open-source project.\n\nThese are the two JDK implementations you’re most likely to hear about :\n• OpenJDK: The official reference implementation of the Java Platform, Standard Edition (Java SE). It is an open-source project, and many other JDK builds are based on the OpenJDK codebase.\n• Oracle JDK: Provided by Oracle, it is based on the OpenJDK codebase and includes additional features, tools, and commercial support. Oracle JDK has traditionally been one of the most widely used JDKs.\n\nFor all our articles, we’ll be working exclusively with OpenJDK.\n\nBefore proceeding with the installation, please check what JDK version is currently installed on your computer.\n\nEnter the following commands from a command prompt or terminal (depending on your OS):\n\nIf you don’t have any JDK installed, you should have an output similar to this one:\n\nYou can also check the version of the JRE installed with the following command:\n\nAs with the JDK, you’ll get an output similar to this:\n\nIf you don’t get the same results as shown here, you may already have another version of JDK (JRE) installed. This is not a problem, as you’ll modify your system to indicate which JDK version to use.\n\nOracle’s OpenJDK JDK binaries for Windows, macOS, and Linux are available on release-specific pages of jdk.java.net as .tar.gz or .zip archives.\n\nYou will be installing OpenJDK 17. By the time of writing this article, you can find it here.\n\nJust download the archive file corresponding to your Operating System.\n\nCreate an apps directory at the root of your user directory. Copy/Paste the downloaded archive into that directory.\n\nThen run the following commands from the terminal:\n\nFrom the terminal, open your Shell profile:\n\nUpdate your Shell profile by adding the following lines at the beginning of the file:\n\nReplace “user01” with your username and “jdk-17.0.1.jdk” to match your downloaded JDK version.\n\nSource your profile file to see the changes:\n\nYou can simply restart the terminal to see the changes as well.\n\nRun the following command to test your installation:\n\nYou will see this in your console:\n\nCreate an apps directory at the root of your user directory. Copy/Paste the downloaded archive into this directory.\n\nThen run the following commands from the terminal:\n\nFrom the terminal, open your Shell profile:\n\nUpdate your Shell profile by adding the following lines at the beginning of the file:\n\nReplace “user01” with your username and “jdk-17.0.1.jdk” to match your downloaded JDK version.\n\nSource your profile file to see the changes:\n\nYou can simply restart the terminal to see the changes as well.\n\nRun the following commands to test your installation.\n\nYou will see this in your console:\n\nCreate an apps directory at the root directory of drive C. Copy/Paste the downloaded archive into this directory.\n\nThen run the following commands from the command line:\n\nCreate a user environment variable named JAVA_HOME with the following value: C:\\apps\\jdk-17.0.1.jdk\n\nUpdate the PATH environment variable by adding the following value: %JAVA_HOME%\\bin\n\nReplace “jdk-17.0.1.jdk” to match the JDK version you downloaded.\n\nRun the following commands to test your installation.\n\nYou will see this in your console:\n\nCongratulations on completing the JDK installation guide! In the upcoming article, embark on the exciting journey of crafting your first Java project with our step-by-step tutorial.\n\nIf you have any difficulty completing this tutorial, leave a comment, and I’ll be happy to assist you."
    },
    {
        "link": "https://medium.com/@AlexanderObregon/maven-best-practices-tips-and-tricks-for-java-developers-438eca03f72b",
        "document": "Maven is a widely used build automation tool for Java projects. It simplifies the build process and helps manage dependencies, making the developer’s life easier. In this article, we will discuss some best practices, tips, and tricks to optimize your Maven usage and improve your Java development experience.\n\nMaven follows a standard directory structure to maintain consistency across projects. Adhering to this structure makes it easier for developers to understand and navigate your project.\n\nBy default, Maven compiles your project using Java 8. However, if you wish to compile your project with a different Java version, you can configure it in your file using the Maven Compiler Plugin. For projects using JDK 9 and above, it's recommended to use the property for setting the Java version.\n\nMaven’s dependency management system is one of its most powerful features. Use the tag in the file to manage the versions of your dependencies in a centralized manner. This helps avoid conflicts and ensures that all modules use the same version of a dependency:\n\nWhile Maven profiles allow for configuring build settings tailored to different environments, it’s essential to exercise caution. Modern application design, following the 12-factor app principles, suggests that applications should remain environment agnostic. This ensures portability across different deployment environments without changing the application’s code or configuration.\n\nHowever, there can be valid use cases for Maven profiles. For instance:\n• Distinct Build Processes: If your project requires different build processes for development, testing, and production but remains functionally identical across these environments, profiles might be helpful.\n• External Integrations: During development, you might want to integrate with a mock service, whereas in production, you’d connect to an actual service.\n• Resource Optimization: Different profiles can help in optimizing resources for specific environments, such as using minimized assets in production but detailed ones in development.\n\nHowever, it’s crucial to ensure that the core functionality of the application remains consistent across different profiles. When making a release, consider the implications of having multiple environment profiles and ensure that the right profile is activated, or better yet, avoid environment-specific configurations that could hinder the release process.\n\nWhile Maven profiles can be powerful, they should be used judiciously, ensuring the application’s core remains environment agnostic.\n\nKeep Your Clean and Organized\n\nA well-organized file is easier to maintain and understand. Here are some guidelines and best practices:\n• Grouping: Keep similar dependencies and plugins together. This aids in quickly understanding the purpose and structure of your project setup.\n• Documentation: Use comments within your to describe the purpose of specific dependencies or plugins, especially if they might not be immediately obvious to other developers.\n• Version Management with Properties: Utilize the section to manage versions, particularly when you have shared version numbers across multiple artifacts.\n• Using the section to manage version numbers can simplify the maintenance of your . For example, when you have multiple artifacts that share the same version, you can centralize that version:\n\nThen, you can reference the version in multiple dependencies:\n\nHowever, if there’s just one artifact version to manage, it’s cleaner and more direct to specify the version within the dependency itself or in the section. This direct specification ensures that version information is localized, streamlining the .\n\nMaven Wrapper ensures that the build process uses the correct Maven version, even if it is not installed on the system. To use Maven Wrapper, run the following command in your project directory:\n\nThis command generates the Maven Wrapper files in your project. Now you can use (or on Windows) instead of to execute Maven commands.\n\nIntegrating your Maven project with a Continuous Integration (CI) system, such as Jenkins or GitHub Actions, ensures that your code is built, tested, and deployed automatically. CI helps catch issues early and provides a consistent build process across the team. Here’s an example of a simple GitHub Actions workflow for a Maven project:\n\nOne of the common requirements when working with Maven is the creation of a ‘fat jar’ or ‘uber jar’. Essentially, this type of JAR bundles all the project’s dependencies into a single JAR file. This can be particularly useful when you want to distribute your application or when deploying microservices.\n\nHere’s how you can create a fat jar using Maven:\n\nStep 1: Add the to your .\n\nStep 2: Configure the plugin to use the descriptor.\n\nAfter adding this configuration, run . Maven will produce a fat jar in the target directory with the suffix . This JAR will contain all the dependencies, and you can run it using the command.\n\nNote: Ensure you specify the main class in the manifest section if you want to make your jar executable.\n\nI’d like to extend my gratitude to Stanislav Gaponov for suggesting the addition of this section on creating a fat jar with Maven. Your feedback is invaluable and helps to ensure the content is comprehensive and beneficial to all.\n\nThere are numerous Maven plugins available to extend Maven’s functionality. Some popular plugins include:\n\nExplore the available plugins and configure them in your file to enhance your development process.\n\nMaven is a powerful tool that simplifies the build process and dependency management for Java projects. By following these best practices and tips, you can optimize your Maven usage and improve your Java development experience. Remember to use a standard directory structure, manage dependencies effectively, leverage profiles for different environments, and integrate your project with a Continuous Integration system to ensure consistent builds. Happy coding!\n\nSpecial Thanks to Karl Heinz Marbaise for pointing out outdated information in the code examples. Your feedback was invaluable, and the necessary updates have been made. I’ve also incorporated more updated points mentioned to ensure the content remains current and beneficial.\n\nFor more in-depth information on Maven governance and enforcing specific conditions in your builds, check out this excellent article on the Apache Maven Enforcer Plugin:\n\nThis article provides a great guide on setting up and using the Apache Maven Enforcer Plugin to enforce conditions like requiring a specific Maven version, among other things."
    },
    {
        "link": "https://maven.apache.org/guides/getting-started",
        "document": "Ok, so you now have Maven installed and we're ready to go. Before we jump into our examples we'll very briefly go over what Maven is and how it can help you with your daily work and collaborative efforts with team members. Maven will, of course, work for small projects, but Maven shines in helping teams operate more effectively by allowing team members to focus on what the stakeholders of a project require. You can leave the build infrastructure to Maven!\n\nThis guide is intended as a reference for those working with Maven for the first time, but is also intended to serve as a cookbook with self-contained references and solutions for common use cases. For first time users, it is recommended that you step through the material in a sequential fashion. For users more familiar with Maven, this guide endeavours to provide a quick solution for the need at hand. It is assumed at this point that you have downloaded Maven and installed Maven on your local machine. If you have not done so please refer to the Download and Installation instructions.\n• How can Maven benefit my development process?\n• How do I make my first Maven project?\n• How do I compile my application sources?\n• How do I compile my test sources and run my unit tests?\n• How do I create a JAR and install it in my local repository?\n• How do I use plugins?\n• How do I add resources to my JAR?\n• How do I use external dependencies?\n• How do I deploy my jar in my remote repository?\n• How do I build other types of projects?\n• How do I build more than one project at once?\n\nHow do I make my first Maven project? We are going to jump headlong into creating your first Maven project! To create our first Maven project we are going to use Maven's archetype mechanism. An archetype is defined as an original pattern or model from which all other things of the same kind are made. In Maven, an archetype is a template of a project which is combined with some user input to produce a working Maven project that has been tailored to the user's requirements. We are going to show you how the archetype mechanism works now, but if you would like to know more about archetypes please refer to our Introduction to Archetypes. On to creating your first project! In order to create the simplest of Maven projects, execute the following from the command line: Once you have executed this command, you will notice a few things have happened. First, you will notice that a directory named has been created for the new project, and this directory contains a file named that should look like this: <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.mycompany.app</groupId> <artifactId>my-app</artifactId> <version>1.0-SNAPSHOT</version> <name>my-app</name> <!-- FIXME change it to the project's website --> <url>http://www.example.com</url> <properties> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <maven.compiler.release>17</maven.compiler.release> </properties> <dependencyManagement> <dependencies> <dependency> <groupId>org.junit</groupId> <artifactId>junit-bom</artifactId> <version>5.11.0</version> <type>pom</type> <scope>import</scope> </dependency> </dependencies> </dependencyManagement> <dependencies> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-api</artifactId> <scope>test</scope> </dependency> <!-- Optionally: parameterized tests support --> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-params</artifactId> <scope>test</scope> </dependency> </dependencies> <build> <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --> ... lots of helpful plugins </pluginManagement> </build> </project> contains the Project Object Model (POM) for this project. The POM is the basic unit of work in Maven. This is important to remember because Maven is inherently project-centric in that everything revolves around the notion of a project. In short, the POM contains every important piece of information about your project and is essentially one-stop-shopping for finding anything related to your project. Understanding the POM is important and new users are encouraged to refer to the Introduction to the POM. This is a very simple POM but still displays the key elements every POM contains, so let's walk through each of them to familiarize you with the POM essentials:\n• project This is the top-level element in all Maven files.\n• modelVersion This element indicates what version of the object model this POM is using. The version of the model itself changes very infrequently but it is mandatory in order to ensure stability of use if and when the Maven developers deem it necessary to change the model.\n• groupId This element indicates the unique identifier of the organization or group that created the project. The groupId is one of the key identifiers of a project and is typically based on the fully qualified domain name of your organization. For example is the designated groupId for all Maven plugins.\n• artifactId This element indicates the unique base name of the primary artifact being generated by this project. The primary artifact for a project is typically a JAR file. Secondary artifacts like source bundles also use the artifactId as part of their final name. A typical artifact produced by Maven would have the form <artifactId>-<version>.<extension> (for example, ).\n• version This element indicates the version of the artifact generated by the project. Maven goes a long way to help you with version management and you will often see the designator in a version, which indicates that a project is in a state of development. We will discuss the use of snapshots and how they work further on in this guide.\n• name This element indicates the display name used for the project. This is often used in Maven's generated documentation.\n• url This element indicates where the project's site can be found. This is often used in Maven's generated documentation.\n• properties This element contains value placeholders accessible anywhere within a POM.\n• dependencies This element's children list dependencies. The cornerstone of the POM.\n• build This element handles things like declaring your project's directory structure and managing plugins. For a complete reference of what elements are available for use in the POM please refer to our POM Reference. Now let's get back to the project at hand. After the archetype generation of your first project you will also notice that the following directory structure has been created: As you can see, the project created from the archetype has a POM, a source tree for your application's sources and a source tree for your test sources. This is the standard layout for Maven projects (the application sources reside in and test sources reside in , where represents the directory containing ). If you were to create a Maven project by hand this is the directory structure that we recommend using. This is a Maven convention and to learn more about it you can read our Introduction to the Standard Directory Layout. Now that we have a POM, some application sources, and some test sources you are probably asking...\n\nHow do I compile my application sources? Change to the directory where is created by archetype:generate and execute the following command to compile your application sources: Upon executing this command you should see output like the following: [INFO] Scanning for projects... [INFO] [INFO] ----------------------< com.mycompany.app:my-app >---------------------- [INFO] Building my-app 1.0-SNAPSHOT [INFO] --------------------------------[ jar ]--------------------------------- [INFO] [INFO] --- maven-resources-plugin:3.0.2:resources (default-resources) @ my-app --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] skip non existing resourceDirectory <dir>/my-app/src/main/resources [INFO] [INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ my-app --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 1 source file to <dir>/my-app/target/classes [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 0.899 s [INFO] Finished at: 2020-07-12T11:31:54+01:00 [INFO] ------------------------------------------------------------------------ The first time you execute this (or any other) command, Maven will need to download all the plugins and related dependencies it needs to fulfill the command. From a clean installation of Maven, this can take quite a while (in the output above, it took almost 4 minutes). If you execute the command again, Maven will now have what it needs, so it won't need to download anything new and will be able to execute the command much more quickly. As you can see from the output, the compiled classes were placed in , which is another standard convention employed by Maven. So, if you're a keen observer, you'll notice that by using the standard conventions, the POM above is very small and you haven't had to tell Maven explicitly where any of your sources are or where the output should go. By following the standard Maven conventions, you can get a lot done with very little effort! Just as a casual comparison, let's take a look at what you might have had to do in Ant to accomplish the same thing. Now, this is simply to compile a single tree of application sources and the Ant script shown is pretty much the same size as the POM shown above. But we'll see how much more we can do with just that simple POM!\n\nHow do I create a JAR and install it in my local repository? Making a JAR file is straight forward enough and can be accomplished by executing the following command: You can now take a look in the directory and you will see the generated JAR file. Now you'll want to install the artifact you've generated (the JAR file) in your local repository ( is the default location). For more information on repositories you can refer to our Introduction to Repositories but let's move on to installing our artifact! To do so execute the following command: Upon executing this command you should see the following output: [INFO] Scanning for projects... [INFO] [INFO] ----------------------< com.mycompany.app:my-app >---------------------- [INFO] Building my-app 1.0-SNAPSHOT [INFO] --------------------------------[ jar ]--------------------------------- [INFO] [INFO] --- maven-resources-plugin:3.0.2:resources (default-resources) @ my-app --- ... [INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ my-app --- [INFO] Nothing to compile - all classes are up to date [INFO] [INFO] --- maven-resources-plugin:3.0.2:testResources (default-testResources) @ my-app --- ... [INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ my-app --- [INFO] Nothing to compile - all classes are up to date [INFO] [INFO] --- maven-surefire-plugin:2.22.1:test (default-test) @ my-app --- [INFO] [INFO] ------------------------------------------------------- [INFO] T E S T S [INFO] ------------------------------------------------------- [INFO] Running com.mycompany.app.AppTest [INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.025 s - in com.mycompany.app.AppTest [INFO] [INFO] Results: [INFO] [INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0 [INFO] [INFO] [INFO] --- maven-jar-plugin:3.0.2:jar (default-jar) @ my-app --- [INFO] Building jar: <dir>/my-app/target/my-app-1.0-SNAPSHOT.jar [INFO] [INFO] --- maven-install-plugin:2.5.2:install (default-install) @ my-app --- [INFO] Installing <dir>/my-app/target/my-app-1.0-SNAPSHOT.jar to <local-repository>/com/mycompany/app/my-app/1.0-SNAPSHOT/my-app-1.0-SNAPSHOT.jar [INFO] Installing <dir>/my-app/pom.xml to <local-repository>/com/mycompany/app/my-app/1.0-SNAPSHOT/my-app-1.0-SNAPSHOT.pom [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 1.678 s [INFO] Finished at: 2020-07-12T12:04:45+01:00 [INFO] ------------------------------------------------------------------------ Note that the surefire plugin (which executes the test) looks for tests contained in files with a particular naming convention. By default the tests included are: And the default excludes are: You have walked through the process for setting up, building, testing, packaging, and installing a typical Maven project. This is likely the vast majority of what projects will be doing with Maven and if you've noticed, everything you've been able to do up to this point has been driven by an 18-line file, namely the project's model or POM. If you look at a typical Ant build file that provides the same functionality that we've achieved thus far you'll notice it's already twice the size of the POM and we're just getting started! There is far more functionality available to you from Maven without requiring any additions to our POM as it currently stands. To get any more functionality out of our example Ant build file you must keep making error-prone additions. So what else can you get for free? There are a great number of Maven plugins that work out of the box with even a simple POM like we have above. We'll mention one here specifically as it is one of the highly prized features of Maven: without any work on your part this POM has enough information to generate a web site for your project! You will most likely want to customize your Maven site but if you're pressed for time all you need to do to provide basic information about your project is execute the following command: There are plenty of other standalone goals that can be executed as well, for example: This will remove the directory with all the build data before starting so that it is fresh.\n\nHow do I use plugins? Whenever you want to customise the build for a Maven project, this is done by adding or reconfiguring plugins. For this example, we will configure the Java compiler to allow JDK 5.0 sources. This is as simple as adding this to your POM: You'll notice that all plugins in Maven look much like a dependency - and in some ways they are. This plugin will be automatically downloaded and used - including a specific version if you request it (the default is to use the latest available). The element applies the given parameters to every goal from the compiler plugin. In the above case, the compiler plugin is already used as part of the build process and this just changes the configuration. It is also possible to add new goals to the process, and configure specific goals. For information on this, see the Introduction to the Build Lifecycle. To find out what configuration is available for a plugin, you can see the Plugins List and navigate to the plugin and goal you are using. For general information about how to configure the available parameters of a plugin, have a look at the Guide to Configuring Plugins.\n\nHow do I add resources to my JAR? Another common use case that can be satisfied which requires no changes to the POM that we have above is packaging resources in the JAR file. For this common task, Maven again relies on the Standard Directory Layout, which means by using standard Maven conventions you can package resources within JARs simply by placing those resources in a standard directory structure. You see below in our example we have added the directory into which we place any resources we wish to package in our JAR. The simple rule employed by Maven is this: any directories or files placed within the directory are packaged in your JAR with the exact same structure starting at the base of the JAR. So you can see in our example that we have a directory with an file within that directory. If you unpacked the JAR that Maven created for you and took a look at it you would see the following: As you can see, the contents of can be found starting at the base of the JAR and our file is there in the directory. You will also notice some other files there like as well as a and file. These come standard with generation of a JAR in Maven. You can create your own manifest if you choose, but Maven will generate one by default if you don't. (You can also modify the entries in the default manifest. We will touch on this later.) The and files are packaged up in the JAR so that each artifact produced by Maven is self-describing and also allows you to utilize the metadata in your own application if the need arises. One simple use might be to retrieve the version of your application. Operating on the POM file would require you to use some Maven utilities but the properties can be utilized using the standard Java API and look like the following: To add resources to the classpath for your unit tests, you follow the same pattern as you do for adding resources to the JAR except the directory you place resources in is . At this point you would have a project directory structure that would look like the following: In a unit test you could use a simple snippet of code like the following to access the resource required for testing: ... // Retrieve resource InputStream is = getClass().getResourceAsStream( \"/test.properties\" ); // Do something with the resource ...\n\nSometimes a resource file will need to contain a value that can only be supplied at build time. To accomplish this in Maven, put a reference to the property that will contain the value into your resource file using the syntax . The property can be one of the values defined in your , a value defined in the user's , a property defined in an external properties file, or a system property. To have Maven filter resources when copying, simply set to true for the resource directory in your : You'll notice that we had to add the , , and elements which weren't there before. In addition, we had to explicitly state that the resources are located in the directory. All of this information was provided as default values previously, but because the default value for is false, we had to add this to our in order to override that default value and set to true. To reference a property defined in your , the property name uses the names of the XML elements that define the value, with \"pom\" being allowed as an alias for the project (root) element. So refers to the name of the project, refers to the version of the project, refers to the final name of the file created when the built project is packaged, etc. Note that some elements of the POM have default values, so don't need to be explicitly defined in your for the values to be available here. Similarly, values in the user's can be referenced using property names beginning with \"settings\" (for example, refers to the path of the user's local repository). To continue our example, let's add a couple of properties to the file (which we put in the directory) whose values will be supplied when the resource is filtered: With that in place, you can execute the following command (process-resources is the build lifecycle phase where the resources are copied and filtered): and the file under (and will eventually go into the jar) looks like this: To reference a property defined in an external file, all you need to do is add a reference to this external file in your . First, let's create our external properties file and call it : Next, we'll add a reference to this new file in the : Then, if we add a reference to this property in the file: the next execution of the command will put our new property value into . As an alternative to defining the my.filter.value property in an external file, you could also have defined it in the section of your and you'd get the same effect (notice I don't need the references to either): Filtering resources can also get values from system properties; either the system properties built into Java (like or ) or properties defined on the command line using the standard Java -D parameter. To continue the example, let's change our file to look like this: Now, when you execute the following command (note the definition of the command.line.prop property on the command line), the file will contain the values from the system properties.\n\nHow do I use external dependencies? You've probably already noticed a element in the POM we've been using as an example. You have, in fact, been using an external dependency all this time, but here we'll talk about how this works in a bit more detail. For a more thorough introduction, please refer to our Introduction to Dependency Mechanism. The section of the lists all of the external dependencies that our project needs in order to build (whether it needs that dependency at compile time, test time, run time, or whatever). Right now, our project is depending on JUnit only (I took out all of the resource filtering stuff for clarity): For each external dependency, you'll need to define at least 4 things: groupId, artifactId, version, and scope. The groupId, artifactId, and version are the same as those given in the for the project that built that dependency. The scope element indicates how your project uses that dependency, and can be values like , , and . For more information on everything you can specify for a dependency, see the Project Descriptor Reference. For more information about the dependency mechanism as a whole, see Introduction to Dependency Mechanism. With this information about a dependency, Maven will be able to reference the dependency when it builds the project. Where does Maven reference the dependency from? Maven looks in your local repository ( is the default location) to find all dependencies. In a previous section, we installed the artifact from our project (my-app-1.0-SNAPSHOT.jar) into the local repository. Once it's installed there, another project can reference that jar as a dependency simply by adding the dependency information to its : What about dependencies built somewhere else? How do they get into my local repository? Whenever a project references a dependency that isn't available in the local repository, Maven will download the dependency from a remote repository into the local repository. You probably noticed Maven downloading a lot of things when you built your very first project (these downloads were dependencies for the various plugins used to build the project). By default, the remote repository Maven uses can be found (and browsed) at https://repo.maven.apache.org/maven2/. You can also set up your own remote repository (maybe a central repository for your company) to use instead of or in addition to the default remote repository. For more information on repositories you can refer to the Introduction to Repositories. Let's add another dependency to our project. Let's say we've added some logging to the code and need to add log4j as a dependency. First, we need to know what the groupId, artifactId, and version are for log4j. The appropriate directory on Maven Central is called /maven2/log4j/log4j. In that directory is a file called maven-metadata.xml. Here's what the maven-metadata.xml for log4j looks like: From this file, we can see that the groupId we want is \"log4j\" and the artifactId is \"log4j\". We see lots of different version values to choose from; for now, we'll just use the latest version, 1.2.12 (some maven-metadata.xml files may also specify which version is the current release version: see repository metadata reference). Alongside the maven-metadata.xml file, we can see a directory corresponding to each version of the log4j library. Inside each of these, we'll find the actual jar file (e.g. log4j-1.2.12.jar) as well as a pom file (this is the for the dependency, indicating any further dependencies it might have and other information) and another maven-metadata.xml file. There's also an md5 file corresponding to each of these, which contains an MD5 hash for these files. You can use this to authenticate the library or to figure out which version of a particular library you may be using already. Now that we know the information we need, we can add the dependency to our pom.xml: Now, when we compile the project ( ), we'll see Maven download the log4j dependency for us.\n\nHow do I build more than one project at once? The concept of dealing with multiple modules is built in to Maven. In this section, we will show how to build the WAR above, and include the previous JAR as well in one step. Firstly, we need to add a parent file in the directory above the other two, so it should look like this: The POM file you'll create should contain the following: We'll need a dependency on the JAR from the webapp, so add this to : Finally, add the following element to both of the other files in the subdirectories: Now, try it... from the top level directory, run: The WAR has now been created in , and the JAR is included: How does this work? Firstly, the parent POM created (called ), has a packaging of and a list of modules defined. This tells Maven to run all operations over the set of projects instead of just the current one (to override this behaviour, you can use the command line option). Next, we tell the WAR that it requires the JAR. This does a few things: it makes it available on the classpath to any code in the WAR (none in this case), it makes sure the JAR is always built before the WAR, and it indicates to the WAR plugin to include the JAR in its library directory. You may have noticed that was a dependency, but didn't end up in the WAR. The reason for this is the element - it is only required for testing, and so is not included in the web application as the compile time dependency is. The final step was to include a parent definition. This ensures that the POM can always be located even if the project is distributed separately from its parent by looking it up in the repository."
    },
    {
        "link": "https://stackoverflow.com/questions/47554948/maven-how-to-create-a-pom-xml-for-java-project-through-command-line",
        "document": "Currently working on a work training on Maven. I've never used it before and the training is very limited. One of the assessments is asking me to do the following using command line.\n• Place the downloaded project in this directory and create maven build file(pom.xml).**\n• In pom.xml file create a project element, In project element create default elements such as modelVersion,groupId,artifactId,packaging,version,name for project\n\nIts the number 2 I can't seem to get write. I know how to create a new maven project using command line(below), however when I try to create the pom.xml for a project, it doesn't work.\n\nAny help would be great thanks."
    },
    {
        "link": "https://digitalocean.com/community/tutorials/maven-commands-options-cheat-sheet",
        "document": "Maven is one of the most popular project and dependency management tools for Java applications. Maven provides a lot of commands and options to help you in your day to day tasks.\n\nThis cheat sheet uses a sample Maven project to demonstrate some useful Maven commands. It was originally written for OpenJDK 13.0.1 and Maven 3.6.3. These commands have been verified with OpenJDK 19.0.1 and Maven 3.8.7.\n\nThis command cleans the Maven project by deleting the target directory:\n\nExample of the output:\n\nThis command compiles the Java source classes of the Maven project:\n\nExample of the output:\n\nThis command compiles the test classes of the Maven project:\n\nExample of the output:\n\nThis command builds the Maven project and packages it into a , , etc.:\n\nExample of the output:\n\nThe output shows the location of the file just before the message. Notice the goal executes , , and goals before packaging the build.\n\nThis command builds the Maven project and installs the project files ( , , , etc.) to the local repository:\n\nExample of the output:\n\nThis command deploys the artifact to the remote repository:\n\nThe remote repository should be configured properly in the project file tag. The server entries in the Maven file are used to provide authentication details.\n\nThis command validates the Maven project to ensure that everything is correct and all the necessary information is available:\n\nThis command generates the dependency tree of the Maven project:\n\nExample of the output:\n\nThis command analyzes the maven project to identify the unused declared and used undeclared dependencies:\n\nExample of the output:\n\nIt’s useful in reducing the build size by identifying the unused dependencies and removing them from the file.\n\nThis command generates skeleton Maven projects of different types, such as , web application, Maven site, etc:\n\nExample of the output:\n\nThis command generates a site for the project:\n\nYou will notice a directory in the directory after executing this command.\n\nThere will be multiple HTML files inside the directory that provide information related to the project.\n\nThis command runs the test cases of the project:\n\nExample of the output:\n\nThis command compiles the source Java classes of the project:\n\nExample of the output:\n\nIt is similar to the previous command, but runs the entire Maven lifecycle up to .\n\nThis command builds the project, runs all the test cases and run any checks on the results of the integration tests to ensure quality criteria are met:\n\nMaven provides a lot of command-line options to alter the Maven build process:\n\nThis command-line option prints the Maven usage and all the available options:\n\nExample of the output:\n\nThis command-line option builds a project from a different location:\n\nProvide the file location to build the project. It’s useful when you have to run a Maven build from a script.\n\nThis command-line option runs the Maven build in offline mode:\n\nIt’s useful when you have all the required s downloaded in the local repository and you don’t want Maven to look for any s in the remote repository.\n\nThis command-line option runs the Maven build in quiet mode, so that only the test case results and errors are displayed:\n\nThis command-line option prints the Maven version and runs the build in debug mode, so that all messages are displayed:\n\nExample of the output:\n\nExample of the output:\n\nThis command-line option prints the Maven version and then continues with the build:\n\nThis command-line option applies the system property to skip the unit test cases from the build cycle:\n\nYou can also skip the test cases execution:\n\nThis command-line option tells Maven to run parallel builds using the specified thread count:\n\nIt’s useful in multiple module projects where modules can be built in parallel. It can reduce the build time of the project."
    },
    {
        "link": "https://docs.microfocus.com/doc/Operations_Orchestration/24.4/BestPracticesMavenProjects",
        "document": ""
    }
]