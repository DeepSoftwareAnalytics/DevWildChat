[
    {
        "link": "https://overleaf.com/learn/latex/Hyperlinks",
        "document": "LaTeX is a great tool for printable professional-looking documents, but can be also used to generate PDF files with excellent navigation tools. This article describes how to create hyperlinks in your document, and how to set up LaTeX documents to be viewed with a PDF-reader.\n\nLet's start with a minimal working example, by simply importing the hyperref package all cross-referenced elements become hyperlinked.\n\nOpen this example in Overleaf\n\nThe lines in the table of contents become links to the corresponding pages in the document by simply adding in the preamble of the document the line\n\nOne must be careful when importing : usually, it has to be the last package to be imported—but there might be some exceptions to this rule.\n\nThe default formatting for links can be changed so the information in your documents is more clearly presented. Below you can see an example:\n\nOpen an example of the package in Overleaf\n\nThis is a complete example, it will be fully explained in the rest of the article. Below is a description of the commands related to the colour and styling of the links.\n\nLinks to a web address or email can added to a LaTeX file using the command to display the actual link or to use a hidden link and show a word/sentence instead.\n\nThere are two commands in the example that generate a link in the final document:\n\nOpen an example of the hyperref package in Overleaf\n\nThe commands and presented in the previous section can be used to open local files\n\nThe command prints the text that links to a local file called located in the current working directory. Notice the text before the path to the file.\n\nThe file path follows the conventions of UNIX systems, using to refer the current directory and for the previous directory.\n\nThe command can also be used, with the same syntax described for the path, but it's reported to have some problems.\n\nOpen an example of the hyperref package in Overleaf\n\nIt was mentioned before that all cross-referenced elements become links once hyperref is imported, thus we can use anywhere in the document and refer later those labels to create links. This is not the only manner to insert hyperlinks manually.\n\nThere are two commands to create user-defined links.\n\nOpen an example of the hyperref package in Overleaf\n\nLinks in a document are created having in mind a document that will be read in PDF format. The PDF file can be further personalized to add additional information and change the way the PDF viewer displays it. Below an example:\n\nUsing the command , described in the section styles and colours, accepts extra parameters to set up the final PDF file.\n\nSee the reference guide for a full list of options that can be passed to .\n\nOpen an example of the hyperref package in Overleaf\n\nFor more information see"
    },
    {
        "link": "https://tex.stackexchange.com/questions/553758/different-mechanics-of-hyperlink-vs-hyperref",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://en.wikibooks.org/wiki/LaTeX/Hyperlinks",
        "document": "LaTeX enables typesetting of hyperlinks, useful when the resulting format is PDF, and the hyperlinks can be followed. It does so using the package hyperref.\n\nThe package hyperref[1] provides LaTeX the ability to create hyperlinks within the document. It works with pdflatex and also with standard \"latex\" used with dvips and ghostscript or dvipdfm to build a PDF file. If you load it, you will have the possibility to include interactive external links and all your internal references will be turned to hyperlinks. The compiler pdflatex makes it possible to create PDF files directly from the LaTeX source, and PDF supports more features than DVI. In particular PDF supports hyperlinks. Moreover, PDF can contain other information about a document such as the title, the author, etc., which can be edited using this same package.\n\nThe basic usage with the standard settings is straightforward. Just load the package in the preamble:\n\nThis will automatically turn all your internal references into hyperlinks. It won't affect the way to write your documents: just keep on using the standard - system (discussed in the chapter on Labels and Cross-referencing); with hyperref those \"connections\" will become links and you will be able to click on them to be redirected to the right page. Moreover the table of contents, list of figures/tables and index will be made of hyperlinks, too. The hyperlinks will not show up if you are working in draft mode.\n\nThe package provides some useful commands for inserting links pointing outside the document.\n\nThis will have the same effect as but will make the text link text a full link, instead. The two can be combined. If the lemma labelled as mainlemma was number 4.1.1 the following example would result in\n\nwith the hyperlink as expected. Note the \"*\" after for avoiding nested hyperlinks.\n\nIt will show the URL using a mono-spaced font and, if you click on it, your browser will be opened pointing at it.\n\nIt will show the string description using standard document font but, if you click on it, your browser will be opened pointing at my_url. Here is an example:\n\nBoth point at the same page, but in the first case the URL will be shown, while in the second case the URL will be hidden. Note that, if you print your document, the link stored using will not be shown anywhere in the document.\n\nApart from linking to websites discussed above, hyperref can be used to provide mailto links, links to local files, and links to anywhere within the PDF output file.\n\nA possible way to insert email links is by\n\nIt just shows your email address (so people can know it even if the document is printed on paper) but, if the reader clicks on it, (s)he can easily send you an email. Or, to incorporate the url package's formatting and line breaking abilities into the displayed text, use[2]\n\nWhen using this form, note that the command is fragile and if the hyperlink is inside of a moving argument, it must be preceded by a command.\n\nFiles can also be linked using the url or the href commands. You simply have to add the string run: at the beginning of the link string:\n\nFollowing http://tex.stackexchange.com/questions/46488/link-to-local-pdf-file the version with does not always work, but does.\n\n\n\n It is possible to use relative paths to link documents near the location of your current document; in order to do so, use the standard Unix-like notation ( is the current directory, is the previous directory, etc.)\n\nIt is also possible to create an anchor anywhere in the document (with or without caption) and to link to it. To create an anchor, use:\n\nand to link to it, use:\n\nwhere the target caption and link caption are the text that is displayed at the target location and link location respectively.\n\nNote also that if you put a hypertarget, when clicking a link to that hypertarget, it may actually direct to the line after the hypertarget, which is not desirable. Therefore if this occurs, you can report the bug and refer to here for a solution.\n\nYou can also get an external URL to the hypertarget by appending #label to the URL for the file, or right clicking one of the hyperlinks to the target and copying the URL, or getting the link from the headings in the sidebar of the PDF, or through a process of deduction from viewing (e.g. subsubsection 11.5.1 would have the label subsubsection.11.5.1). This can be useful e.g. for academic and pedagogical purposes. The URL will then direct to the target if you enable a PDF viewer that is compatible with PDF 1.5 in a browser, such as PDF Viewer for Chrome or Chromium browsers, and No PDF Download for Firefox; and on Android the Xodo app works best with links as it renders them with the correct border as with PDF desktop programs, followed by the Foxit PDF app which renders links highlighted in grey (while in other apps links may also work but without any special rendering, such as the Dropbox PDF viewer app; and yet others do not work with links, e.g Drive PDF viewer, PDF reader and Google PDF viewer). You may need to open the URL to the PDF in a new tab, otherwise it may prompt to download it (i.e. if you are clicking on the URL, don't left click, right click and select to open it in a new tab).\n\nThe standard settings should be fine for most users, but if you want to change something, that is also possible. There are several variables and two methods to pass those to the package. Options can be passed as an argument of the package when it is loaded (the standard way packages work), or the command can be used as follows:\n\nyou can pass as many options as you want; separate them with a comma. Options have to be in the form:\n\nexactly the same format has to be used if you pass those options to the package while loading it, like this:\n\nHere is a list of the possible variables you can change (for the complete list, see the official documentation). The default values are written in an upright font:\n\nPlease note, that explicit RGB specification is only allowed for the border colors (like linkbordercolor etc.), while the others may only assigned to named colors (which you can define your own, see Colors). In order to speed up your customization process, here is a list with the variables with their default value. Copy it in your document and make the changes you want. Next to the variables, there is a short explanations of their meaning:\n\nIf you don't need such a high customization, here are some smaller but useful examples. When creating PDFs destined for printing, colored links are not a good thing as they end up in gray in the final output, making it difficult to read. You can use color frames, which are not printed:\n\nWhen you just want to provide information for the Document Info section of the PDF file, as well as enabling back references inside bibliography:\n\nBy default, URLs are printed using mono-spaced fonts. If you don't like it and you want them to be printed with the same style of the rest of the text, you can use this:\n\nMessages like the following\n\nappear, when you have done something like\n\nThe error disappears, if you use instead this form:\n\nBeware that the shown line number is often completely different from the erroneous line.\n\nPossible solution: Place the amsmath package before the hyperref package.\n\nMessages like the following\n\nappear when you use inside an environment.\n\nPossible solution: Add the following to your preamble:\n\nNote: The same error appears if you use a colon \" \" as part of a label, i.e. . Replacing that will help.\n\nMessages like the following:\n\nappear when a counter gets reinitialized, for example by using the command provided by the book document class. It resets the page number counter to 1 prior to the first chapter of the book. But as the preface of the book also has a page number 1 all links to \"page 1\" would not be unique anymore, hence the notice that \"duplicate has been ignored.\" The counter measure consists of putting into the hyperref options. This unfortunately only helps with the page counter. An even more radical solution is to use the option , but this will cause the page links in the index to stop working.\n\nThe best solution is to give each page a unique name by using the command:\n\nAnother solution is to use before the command , which will give the title page the label page.a. Since the page number is suppressed, it won't make a difference to the output.\n\nBy changing the page numbering every time before the counter is reset, each page gets a unique name. In this case, the pages would be numbered a, b, c, i, ii, iii, iv, v, 1, 2, 3, 4, 5, ...\n\nIf you don't want the page numbers to be visible (for example, during the front matter part), use . The important point is that although the numbers are not visible, each page will have a unique name.\n\nAnother more flexible approach is to set the counter to something negative:\n\nwhich will give the first pages a unique negative number.\n\nThe problem can also occur with the package: because each algorithm uses the same line-numbering scheme, the line identifiers for the second and follow-on algorithms will be duplicates of the first.\n\nThe problem occurs with equation identifiers if you use on every line of an eqnarray environment. In this case, use the *'ed form instead, e.g. (which is an unnumbered equation array), and remove the now unnecessary commands.\n\nIf your url's are too long and running off of the page, try using the package to split the url over multiple lines. This is especially important in a multicolumn environment where the line width is greatly shortened.\n\nThe text displayed by bookmarks does not always look like you expect it to look. Because bookmarks are \"just text\", much fewer characters are available for bookmarks than for normal LaTeX text. Hyperref will normally notice such problems and put up a warning:\n\nYou can now work around this problem by providing a text string for the bookmarks, which replaces the offending text:\n\nMath expressions are a prime candidate for this kind of problem:\n\nwhich turns to in the bookmark area. Color changes also do not travel well into bookmarks:\n\nproduces the string \"redRed!\". The command gets ignored but its argument (red) gets printed. If you use:\n\nthe result will be much more legible.\n\nIf you write your document in unicode and use the unicode option for the hyperref package you can use unicode characters in bookmarks. This will give you a much larger selection of characters to pick from when using .\n\nThe links created by hyperref point to the label created within the float environment, which, as previously described, must always be set after the caption. Since the caption is usually below a figure or table, the figure or table itself will not be visible upon clicking the link[4]. A workaround exists by using the package hypcap [2] with:\n\nBe sure to call this package after loading hyperref.\n\nIf you use the wrapfig package[5] mentioned in the \"Wrapping text around figures\" section of the \"Floats, Figures and Captions\" chapter, or other similar packages that define their own environments, you will need to manually include in those environments, e.g.:\n\nThere is an issue when using with hyperref for long captions or long titles. This happens when the captions (or the titles) are longer than the page width (about 7-9 words depending on your settings). To fix this, you need to use the option breaklinks when first declaring:\n\nThis will then cause the links in the to word wrap properly.\n\nThe format of some of the auxiliary files generated by latex changes when you include the hyperref package. One can therefore encounter errors like\n\nwhen the document is typeset with hyperref for the first time and these files already exist. The solution to the problem is to delete all the files that latex uses to get references right and typeset again.\n\nis broken when pointed at a label. Instead of sending the user to the desired label, upon clicking the user will be sent to the first frame. A simple work around exists; instead of using\n\nto label your frames, use\n\nand reference it with\n\nWARNING! Please note that if you have activated the \"draft\"-option in your \\documentclass declaration the hyperlinks will not show up in the table of contents, or anywhere else for that matter!!!\n\nThe hyperlinks can be re-enabled by using the \"final=true\" option in the following initialization of the hyperref package, just after the package was included:\n\nA good source of further options for the hyperref package can be found here [6]."
    },
    {
        "link": "https://baeldung.com/cs/latex-hyperref-url-hyperlinks",
        "document": "In this tutorial, we’ll show how to insert clickable hyperlinks into a LaTeX text using package hyperref. We’ll cover internal links to other parts of our document (e.g., sections and footnotes) and external links, which lead to web resources.\n\nWe’ll now review the hyperref package, the options it needs, and its main commands.\n\nTo use it, we need to include it and set the formatting options (about which we’ll talk later):\n\nIt offers three commands we can use to insert links: \\href, \\url, and \\hyperref, which we detail in the following sections.\n\nWe use \\href to create a link to an outside resource. Its syntax is:\n\nWhen LaTeX renders this command, it will place clickable TEXT within the document. Clicking on TEXT will take us to the resource URL points. For example:\n\nSince the URLs point to websites, clicking the links will open the corresponding web pages in our browser.\n\nWe can also insert links to local files. Let’s suppose the directory with the current document contains file sample.txt. We could access it using the run option:\n\nWhen we compile this code, we get:\n\nWhen we click on the colored link, we will see the target file. That may not happen if our viewer has security controls. Furthermore, the \\url command is known to malfunction in some cases.\n\nInstead of ./sample.txt, which is a file in the current directory, we can also specify a file with respect to its parent directory, or give its absolute path. In the case of Windows, we can also specify the drive:\n\n\n\nWe note that a forward slash is used in Windows, unlike normal Windows conventions.\n\nWe use the \\url command to just list the URL alone. In this case, we explicitly see the URL, and clicking on it takes us to the corresponding website. In the following example, we also include an ordinary footnote to demonstrate that the link is shown in red (as dictated by the linkcolor=red option to hyperref).\n\nAfter compiling, we see that the URLs are explicitly shown in the text:\n\nClicking on a URL takes us to the corresponding website. Clicking on the red footnote symbol “1” moves us to the corresponding footnote text.\n\n\\hyperref[LABEL]{TEXT} creates a link, shown as TEXT, that points to our document’s element (e.g., section or figure) whose label is LABEL. Clicking on TEXT takes us to it.\n\nThat is useful when we want internal links. For example:\n\nThe link texts point to the corresponding sections within the document.\n\nIn previous examples, the links appeared as text of various colors. We can control links’ appearance by setting the options when including the package. Here are the most commonly used options:\n\nNow, let’s take a look at a few examples.\n\nIf we set colorlinks=false, the ensuing output is obtained:\n\nIf we alternatively use:\n\nwe get the following, in which the default colors are used:\n\nWe can change this as desired. For instance:\n\nThat yields the following output:\n\nHere is a more elaborate example, where we’ve used the xcolor package to access a wider range of colors:\n\nThe end result in this case is:\n\nIn this article, we showed how to incorporate hyperlinks into a LaTeX document with the hyperref package. Its command \\href takes us to external resources, while \\hyperref allows us to navigate to different parts of our document."
    },
    {
        "link": "https://tex.stackexchange.com/questions/674998/can-i-have-a-list-of-all-hyperref-links-at-the-end-of-the-document-for-printing",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://overleaf.com/learn/latex/Hyperlinks",
        "document": "LaTeX is a great tool for printable professional-looking documents, but can be also used to generate PDF files with excellent navigation tools. This article describes how to create hyperlinks in your document, and how to set up LaTeX documents to be viewed with a PDF-reader.\n\nLet's start with a minimal working example, by simply importing the hyperref package all cross-referenced elements become hyperlinked.\n\nOpen this example in Overleaf\n\nThe lines in the table of contents become links to the corresponding pages in the document by simply adding in the preamble of the document the line\n\nOne must be careful when importing : usually, it has to be the last package to be imported—but there might be some exceptions to this rule.\n\nThe default formatting for links can be changed so the information in your documents is more clearly presented. Below you can see an example:\n\nOpen an example of the package in Overleaf\n\nThis is a complete example, it will be fully explained in the rest of the article. Below is a description of the commands related to the colour and styling of the links.\n\nLinks to a web address or email can added to a LaTeX file using the command to display the actual link or to use a hidden link and show a word/sentence instead.\n\nThere are two commands in the example that generate a link in the final document:\n\nOpen an example of the hyperref package in Overleaf\n\nThe commands and presented in the previous section can be used to open local files\n\nThe command prints the text that links to a local file called located in the current working directory. Notice the text before the path to the file.\n\nThe file path follows the conventions of UNIX systems, using to refer the current directory and for the previous directory.\n\nThe command can also be used, with the same syntax described for the path, but it's reported to have some problems.\n\nOpen an example of the hyperref package in Overleaf\n\nIt was mentioned before that all cross-referenced elements become links once hyperref is imported, thus we can use anywhere in the document and refer later those labels to create links. This is not the only manner to insert hyperlinks manually.\n\nThere are two commands to create user-defined links.\n\nOpen an example of the hyperref package in Overleaf\n\nLinks in a document are created having in mind a document that will be read in PDF format. The PDF file can be further personalized to add additional information and change the way the PDF viewer displays it. Below an example:\n\nUsing the command , described in the section styles and colours, accepts extra parameters to set up the final PDF file.\n\nSee the reference guide for a full list of options that can be passed to .\n\nOpen an example of the hyperref package in Overleaf\n\nFor more information see"
    },
    {
        "link": "https://tex.stackexchange.com/questions/331210/how-to-i-use-a-command-in-a-href",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://tex.stackexchange.com/questions/649087/href-command-of-package-hyperref-does-not-work-as-it-should",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://ctan.math.washington.edu/tex-archive/macros/latex/contrib/hyperref/doc/hyperref-doc.html",
        "document": "As can be already seen in the following introduction, hyperref has a long history and has seen many changes over time. The introduction mentions workflows, drivers and problems that are no longer (or only in edge cases) relevant. The documentation reflects this varied history: changes and extensions and explanations were and are spread over various papers and sources or have been incorporated later and so are not always in a coherent order and in sync which each other.\n\nThis history is continuing: If you are using the new LATEX PDF management which is currently distributed as a testphase package pdfmanagement-testphase then hyperref will for the PDF output use a new generic driver which contains a number of changes and new features. The documentation of this driver hyperref-generic.pdf is currently a part of the pdfmanagement-testphase documentation. One important change of the new driver is that it removed the old hyperref code for book marks and uses the bookmark package instead. So to learn about options to extend the bookmarks you should consult the bookmark documentation too.\n\nhyperref has over time patched quite a number of packages to resolve clashes and incompabilities. Many of them are either no longer needed or should be done by the original packages. Those patches are now slowly removed from hyperref. It should normally not lead to problems, but in case that the patches should be restored they can be loaded through the package hyperref-patches which is a part of this bundle.\n\nThe package derives from, and builds on, the work of the HyperTEX project, described at http://xxx.lanl.gov/hypertex/ . It extends the functionality of all the LATEX cross-referencing commands (including the table of contents, bibliographies etc) to produce \\special commands which a driver can turn into hypertext links; it also provides new commands to allow the user to write ad hoc hypertext links, including those to external documents and URLs.\n\nThe package is currently maintained at https://github.com/latex3/hyperref/ and issues should be reported there.\n\nThis manual provides a brief overview of the hyperref package. For more details, you should read the additional documentation distributed with the package, as well as the complete documentation by processing hyperref.dtx. You should also read the chapter on hyperref in The LATEX Web Companion, where you will find additional examples.\n\nThe HyperTEX specification says that conformant viewers/translators must recognize the following set of \\special constructs:\n\nThe href, name and end commands are used to do the basic hypertext operations of establishing links between sections of documents. The image command is intended (as with current HTML viewers) to place an image of arbitrary graphical format on the page in the current location. The base_name command is be used to communicate to the DVI viewer the full (URL) location of the current document so that files specified by relative URLs may be retrieved correctly.\n\nThe href and name commands must be paired with an end command later in the TeX file—the TeX commands between the two ends of a pair form an anchor in the document. In the case of an href command, the anchor is to be highlighted in the DVI viewer, and when clicked on will cause the scene to shift to the destination specified by href_string. The anchor associated with a name command represents a possible location to which other hypertext links may refer, either as local references (of the form with the name_string identical to the one in the name command) or as part of a URL (of the form URL#name_string). Here href_string is a valid URL or local identifier, while name_string could be any string at all: the only caveat is that ‘ ’ characters should be escaped with a backslash (\\), and if it looks like a URL name it may cause problems.\n\nHowever, the drivers intended to produce only PDF use literal PostScript or PDF commands. The commands are defined in configuration files for different drivers, selected by package options or for most current engines autodetected; at present, the following drivers are supported:\n\nOutput from dvips or dvipsone must be processed using Acrobat Distiller to obtain a PDF file. The result is generally preferable to that produced by using the hypertex driver, and then processing with dvips -z, but the DVI file is not portable. The main advantage of using the HyperTeX \\special commands is that you can also use the document in hypertext DVI viewers, such as xdvi.\n\nThis package can be used with more or less any normal LaTeX document by specifying in the document preamble\n\nMake sure it comes last of your loaded packages, to give it a fighting chance of not being over-written, since its job is to redefine many LaTeX commands.\n\nDo not load it in \\AtBeginDocument or the begindocument hook! While this often worked in the past this is not officially supported. As hyperref and nameref use this hook too to initialize commands, timing of code execution is tricky and fragile if the packages are loaded there. If you want to delay the loading, use the begindocument/before hook.\n\nHopefully you will find that all cross-references work correctly as hypertext. For example, \\section commands will produce a bookmark and a link, whereas \\section* commands will only show links when paired with a corresponding \\addcontentsline command.\n\nIn addition, the hyperindex option (see below) attempts to make items in the index by hyperlinked back to the text, and the option backref inserts extra ‘back’ links into the bibliography for each entry. Other options control the appearance of links, and give extra control over PDF output. For example, colorlinks, as its name well implies, colors the links instead of using boxes; this is the option used in this document.\n\nhyperlink features are nowadays a common requirement. hyperref patches quite a number of commands from the LaTeX core and from packages to add such features. But this is rather fragile and it add dependencies on the loading order and can break if the external packages changes. It is therefore much better if packages add suitable support to their commands directly. Quite a lot packages actually did this, but due to missing documentation of the interface they often looked into the code and then used internal commands not meant as public command.\n\nThe following tries to describe the existing variables and commands that can be viewed as public interfaces or which should or can be set by packages to stay compatible with the hyperref command. Documented user commands are naturally interfaces too, they are not explicitly mentioned here again.\n\nThis section is work in progress. Suggestions or comments are welcome.\n\nCounters play an important part in the code. They are used to create destination names and to define hierarchies like the bookmarks. To work correctly often they require some additional setups.\n\nWhenNew in version 7.00s a key is set either in the package options or with \\hypersetup hyperref typically stores the result in internal variables, or executes some code or sets a internal boolean. Package and class authors should here not rely on the names or the details of the key processing.\n\nBut as other packages sometimes need to know which value has been set, some values can be retrieved with the expandable \\GetDocumentProperties. The values are given back surrounded by \\exp_not:n, so can be used safely in an \\edef. So for example to get the pdfauthor you can do.\n\nThe values are given back as entered by the user! If they should be used in a PDF context \\pdfstringdef or something equivalent must still be applied.\n\nCurrently this interface can be used for the keys pdfauthor, pdftitle, pdfproducer, pdfcreator, pdfsubject and pdfkeywords. If used with a unknown key an empty value is returned. The interface works also if the new PDF management is loaded with \\DocumentMetadata, in this case more keys gives back their value.\n\nThe following commands are provided by all drivers to create links. They can be used by packages if the user commands are not sufficient. New drivers must provide these commands with similar arguments.\n\nInternal links and bookmarks need something they can jump to. In a PDF this is normally called a destination (and the primitive is therefor called \\pdfdest), in HTML it is more common to call this an anchor (and the hyperref uses therefor \\hyper@anchor). History can not be undone but future commands and descriptions will use the generic target unless the PDF specific destination is meant.\n\nTargets are created automatically when \\refstepcounter is used and in many cases this does the right thing and nothing more is needed. But there are exceptions:\n• A needed target can be missing for example if a sectioning command doesn’t have a number as the starred version is used or due to the setting of secnumdepth.\n• The target created by the \\refstepcounter can be in the wrong place.\n• The target created by the \\refstepcounter can affect spacing.\n• The target name created by the \\refstepcounter is not usable, e.g. in \\bibitem where you need a target name bases on the bib-key.\n\nPackage authors and users can use the following commands to create and manipulate targets. The commands are described in more detail in hyperref-linktarget.pdf.\n\nThe first four commands will be defined also in LaTeX directly as no-op and so can be used even if hyperref is not loaded.\n\nUntil LaTeX is updated package authors can also provide these definitions directly:\n\nPatches and how to suppress them\n\nThe patches to external commands made by hyperref can be avoided completely by loading hyperref with the option implicit=false. But suppressing everything is often too drastic. There is a work in progress to classify the patches and to offer interfaces to suppress them in a more granular way.\n\nAll user-configurable aspects of hyperref are set using a single ‘key=value’ scheme (using the keyval package) with the key Hyp. The options can be set either in the optional argument to the \\usepackage command, or using the \\hypersetup macro. When the package is loaded, a file hyperref.cfg is read if it can be found, and this is a convenient place to set options on a site-wide basis.\n\nNote however that some options (for example unicode) can only be used as package options, and not in as the option settings are processed as the package is read. The following tabular lists (hopefully all) these options. Be aware that some of the options do nothing or have changed behaviour if the new pdfmanagement and so the new generic hyperref driver is used.\n\nAs an example, the behavior of a particular file could be controlled by:\n• a site-wide hyperref.cfg setting up the look of links, adding backreferencing, and setting a PDF display default:\n• A global option in the file, which is passed down to hyperref:\n• File-specific options in the \\usepackage commands, which override the ones set in hyperref.cfg:\n\nAs seen in the previous example, information entries (pdftitle, pdfauthor, …) should be set after the package is loaded. Otherwise LaTeX expands the values of these options prematurely. Also LaTeX strips spaces in options. Especially option ‘pdfborder’ requires some care. Curly braces protect the value, if given as package option. They are not necessary in .\n\nSome options can be given at any time, but many are restricted: before , only in , before first use, etc.\n\nIn the key descriptions that follow, many options do not need a value, as they default to the value true if used. These are the ones classed as ‘boolean’. The values true and false can always be specified, however.\n\nFirstly, the options to specify general behavior and page size.\n\nDestinations names (also anchor, target or link names) are internal names that identify a position on a page in the document. They are used in link targets for inner document links or the bookmarks, for example.\n\nUsually anchors are set, if \\refstepcounter is called. Thus there is a counter name and value. Both are used to construct the destination name. By default the counter value follows the counter name separated by a dot. Example for the fourth chapter:\n\nThis scheme is used by:\n\nIt is very important that the destination names are unique, because two destinations must not share the same name. The counter value \\the<counter> is not always unique for the counter. For example, table and figures can be numbered inside the chapter without having the chapter number in their number. Therefore hyperref has introduced \\theH<counter> that allows a unique counter value without messing up with the appearance of the counter number. For example, the number of the second table in the third chapter might be printed as 2, the result of \\thetable. But the destination name table.2.4 is unique because it has used \\theHtable that gives in this case.\n\nOften the user do not need to set \\theH<counter>. Defaults for standard cases (chapter, …) are provided. And after hyperref is loaded, new counters with parent counters also define \\theH<counter> automatically, if \n\newcounter, \\@addtoreset or \n\numberwithin of package amsmath are used.\n\nUsually problems with duplicate destination names can be solved by an appropriate definition of \\theH<counter>. If option hypertexnames is disabled, then a unique artificial number is used instead of the counter value. In case of page anchors the absolute page anchor is used. With option plainpages the page anchors use the arabic form. In both latter cases \\hyperpage for index links is affected and might not work properly.\n\nIf an unnumbered entity gets an anchor (starred forms of chapters, sections, …) or \\phantomsection is used, then the dummy counter name section* and an artificial unique number is used.\n\nIf the final PDF file is going to be merged with another file, than the destination names might clash, because both documents might contain chapter.1 or page.1. Also hyperref sets anchor with name Doc-Start at the begin of the document. This can be resolved by redefining \\HyperDestNameFilter. Package hyperref calls this macro each time, it uses a destination name. The macro must be expandable and expects the destination name as only argument. As example, the macro is redefined to add a prefix to all destination names:\n\nIn document docA the destination name chapter.2 becomes docA-chapter.2.\n\nDestination names can also be used from the outside in URIs, (if the driver has not removed or changed them), for example:\n\nHowever using a number seems unhappy. If another chapter is added before, the number changes. But it is very difficult to pass a new name for the destination to the anchor setting process that is usually deep hidden in the internals. The first name of \\label after the anchor setting seems a good approximation:\n\nOption destlabel checks for each \\label, if there is a new destination name active and replaces the destination name by the label name. Because the destination name is already in use because of the anchor setting, the new name is recorded in the .aux file and used in the subsequent LATEX run. The renaming is done by a redefinition of \\HyperDestNameFilter. That leaves the old destination names intact (e.g., they are needed for \\autoref). This redefinition is also available as \\HyperDestLabelReplace, thus that an own redefinition can use it. The following example also adds a prefix for all destination names:\n\nThe other case that only files prefixed that do not have a corresponding \\label is more complicate, because \\HyperDestLabelReplace needs the unmodified destination name as argument. This is solved by an expandable string test (\\pdfstrcmp of pdfTEX or \\strcmp of XƎTEX, package pdftexcmds also supports LuaTEX):\n\nWith option destlabel destinations can also be named manually, if the destination is not yet renamed:\n\nHint: Anchors can also be named and set by \\hypertarget.\n\nIn a PDF hyperref adds to every page an target for links (in the upper left corner). These targets are for example used by the index to references the pages of the entries. Unlike the targets generated by other counters it is not possible to change the names of these targets by defining a \\theHpage command: the name can currently not be stored in a label and so is not referenceable. Nevertheless a few options exists, they are already mentioned elsewhere in the documentation but we provide here a summary:\n\nStarting with version 7.01c hyperref stores the name of the page target it has just set into the (global) variable \\@currentHpage. The fallback value is Doc-Start. As the target is set when the page is shipout, \\@currentHpage is only reliable at shipout. With a LATEX format from 2023-11-01 the name can be labeled like this:\n\nNote for option : The correct value is automatically set according to the driver features. It can be overwritten for drivers that do not support broken links. However, at any case, the link area will be wrong and displaced.\n\nIf no driver is specified, the package tries to find a driver in the following order:\n• Autodetection, some TeX processors can be detected at TeX macro level (pdfTeX, XeTeX, VTeX).\n• Option driverfallback. If this option is set, its value is taken as driver option.\n• Macro \\Hy@defaultdriver. The macro takes a driver file name (without file extension).\n\nMany distributions are using a driver file hypertex.cfg that define \\Hy@defaultdriver with hdvips. This is recommended because driver dvips provides much more features than hypertex for PDF generation.\n\nIf you use dviwindo, you may need to redefine the macro \\wwwbrowser (the default is ) to tell dviwindo what program to launch. Thus, users of Internet Explorer might add something like this to hyperref.cfg:\n\nNote that all color names must be defined before use, following the normal system of the standard LaTeX color package.\n\nThe color of link borders used to be specified only as 3 numbers in the range 0..1, giving an rgb color. Since version 6.76a, the usual color specifications of package (x)color can be used if xcolor has been loaded. For further information see description of package hycolor.\n\nThe bookmark commands are stored in a file called jobname.out. The file is not processed by LaTeX so any markup is passed through. You can postprocess this file as needed; as an aid for this, the .out file is not overwritten on the next TeX run if it is edited to contain the line\n\nThe dates and are normally set automatically to the current date/time when the compilation started. If they should be changed (e.g. for regression tests to produce reproducible documents) they can be set with with the keys , or externally by setting the environment variable.\n\nThe format should be a full date/time in PDF format, so one of these (naturally the numbers can change):\n\nEach link in Acrobat carries its own magnification level, which is set using PDF coordinate space, which is not the same as TeX’s. The unit is bp and the origin is in the lower left corner. See also that is explained on page 64. pdfTeX works by supplying default values for XYZ (horizontal × vertical × zoom) and FitBH. However, drivers using pdfmark do not supply defaults, so hyperref passes in a value of -32768, which causes Acrobat to set (usually) sensible defaults. The following are possible values for the pdfview, pdfstartview and pdfremotestartview parameters.\n\nThe pdfpagelayout can be one of the following values.\n\nFinally, the pdfpagetransition can be one of the following values, where /Di stands for direction of motion in degrees, generally in 90 degree steps, /Dm is a horizontal (/H) or vertical (/V) dimension (e.g. Blinds /Dm /V), and /M is for motion, either in (/I) or out (/O).\n\nThe information entries can be set using pdftitle, pdfsubject, …. Option pdfinfo provides an alternative interface. It takes a key value list. The key names are the names that appear in the PDF information dictionary directly. Known keys such as Title, Subject, Trapped and other are mapped to options pdftitle, subject, trapped, …Unknown keys are added to the information dictionary. Their values are text strings (see PDF specification). Example:\n\nThe following is a complete listing of available options for hyperref, arranged alphabetically.\n\nIf you need to make references to URLs, or write explicit links, the following low-level user macros are provided:\n\nThe text is made into a hyperlink to the URL; this must be a full URL (relative to the base URL, if that is defined). The special characters # and % do not need to be escaped in any way (unless the command is used in the argument of another command).\n\nThe optional argument options recognizes the hyperref options pdfremotestartview, pdfnewwindow and the following key value options:\n\nSimilar to \\href URL \n\nolinkurl URL . Depending on the driver also tries to detect the link type. Thus the result can be a url link, file link, …. The implementation makes use of the url package and its commands can be used to format and fine tune the url, but the behaviour of \\url is different to the behaviour in the url package: Most importantly the hyperref \\url expands commands. If the behaviour or the original \\url is needed, the url package should be loaded first and the command should be copied into some alias command.\n\nWrite URL in the same way as described above, without creating a hyperlink.\n\nA base URL is established, which is prepended to other specified URLs, to make it easier to write portable documents. When creating a PDF the command can be used only once as the URL is written into the catalog.\n\nThe link to the image referenced by the URL is inserted, using text as the anchor.\n\nFor drivers that produce HTML, the image itself is inserted by the browser, with the text being ignored completely.\n\nA target area of the document (the text) is marked, and given the name category.name\n\ntext is made into a link to URL#category.name\n\ntext is made into a link to the same place as label would be linked.\n\nA simple internal link is created with , with two parameters of an anchor name, and anchor text. has two arguments, the name of a hypertext object defined somewhere by , and the text which is used as the link on the page.\n\nNote that in HTML parlance, the command inserts a notional # in front of each link, making it relative to the current testdocument; expects a full URL.\n\nThis sets an anchor at this location. It works similar to with an automatically chosen anchor name. Often it is used in conjunction with for sectionlike things (index, bibliography, preface). refers to the latest previous location where an anchor is set. Example:\n\nNow the entry in the table of contents (and bookmarks) for the index points to the start of the index page, not to a location before this page.\n\nThis retrieves the anchor or the page anchor from a label in an expandable way. It takes into account. It can e.g. be used with the from the bookmark package to set a destination to a label:\n\nAs pageanchor retrieves the page number from the label it can’t be used together with the option plainpages.\n\nThis retrieves the last anchor that has been set. It too takes into account.\n\nThis is a replacement for the usual command that places a contextual label in front of the reference. This gives your users a bigger target to click for hyperlinks (e.g. ‘section 2’ instead of merely the number ‘2’).\n\nThe label is worked out from the context of the original command by hyperref by using the macros listed below (shown with their default values). The macros can be (re)defined in documents using ; note that some of these macros are already defined in the standard document classes. The mixture of lowercase and uppercase initial letters is deliberate and corresponds to the author’s practice.\n\nFor each macro below, hyperref checks \\*autorefname before \\*name. For instance, it looks for \\figureautorefname before \\figurename.\n\nExample for a redefinition if babel is used:\n\nHint: \\autoref works via the counter name that the reference is based on. Sometimes \\autoref chooses the wrong name, if the counter is used for different things. For example, it happens with \n\newtheorem if a lemma shares a counter with theorems. Then package aliascnt provides a method to generate a simulated second counter that allows the differentiation between theorems and lemmas:\n\nIt replaces and adds the name for page in front of the page reference. First \\pageautorefname is checked before \\pagename.\n\nFor instances where you want a reference to use the correct counter, but not to create a link, there are starred forms (these starred forms exist even if hyperref has been loaded with ):\n\nA typical use would be to write\n\nWe want to generate the correct number, but not to form a link, since we do this ourselves with \\hyperref.\n\n\\pdfstringdef returns a macro containing the PDF string. (Currently this is done globally, but do not rely on it.) All the following tasks, definitions and redefinitions are made in a group to keep them local:\n• Disabling commands that do not provide useful functionality in bookmarks: , , , , , , etc.\n• Support for provided by the xspace package\n\nIn addition, parentheses are protected to avoid the danger of unsafe unbalanced parentheses in the PDF string. For further details, see Heiko Oberdiek’s EuroTeX paper distributed with hyperref.\n\nSometimes we just don’t want the wretched package interfering with us. Define an environment we can put in manually, or include in a style file, which stops the hypertext functions doing anything. This is used, for instance, in the Elsevier classes, to stop playing havoc in the front matter.\n\nUsually hyperref automatically adds bookmarks for and similar macros. But they can also set manually.\n\ncreates a bookmark with the specified text and at the given level (default is 0). As name for the internal anchor name is used (in conjunction with level). Therefore the name must be unique (similar to ).\n\ncreates a bookmark one step down in the bookmark hierarchy. Internally the current level is increased by one.\n\ncreates a bookmark below the current bookmark level. However after the command the current bookmark level has not changed.\n• Usually only one LaTeX run is needed.\n• More control over the bookmark appearance (color, font).\n\nTherefore I recommend using this package.\n\nhyperref takes the text for bookmarks from the arguments of commands like \\section, which can contain things like math, colors, or font changes, none of which will display in bookmarks as is.\n\n\\pdfstringdef executes the hook before it expands the string. Therefore, you can use this hook to perform additional tasks or to disable additional commands.\n\nHowever, for disabling commands, an easier way is via \\pdfstringdefDisableCommands, which adds its argument to the definition of \\pdfstringdefPreHook (‘@’ can here be used as letter in command names):\n\nThis allows to change format of the page number shown in the tool bar of a PDF viewer for a specific page, for example\n\nThe command affects the page on which it is executed, so asynchronous page breaking should be taken into account. It should be used in places where for example can be used too.\n\ntakes a TeX dimen specification and converts it to bp and returns the number without the unit. This is useful for options , and . Example:\n\nThe origin of the PDF coordinate system is the lower left corner.\n\nNote, for calculations you need either package calc or ε-TEX. Nowadays the latter should automatically be enabled for LATEX formats. Users without ε-TEX, please, look in the source documentation for further limitations.\n\nAlso \\hypercalcbp cannot be used in option specifications of \\documentclass and \\usepackage, because LATEX expands the option lists of these commands. However package hyperref is not yet loaded and an undefined control sequence error would arise.\n\nOption ‘pdflinkmargin’ is an experimental option for specifying a link margin, if the driver supports this. Default is 1 pt for supporting drivers.\n\nFields with calculated values are calculated in document order by default. If calculated field values depend on other calculated fields that appear later in the document, then the correct calculation order can be specified with option ‘calculatesortkey’. Its value is used as key to lexicographically sort the calculated fields. The sort key do not need to be unique. Fields that share the same key are sorted in document order.\n\nCurrently the field option ‘calculatesortkey’ is only supported by the driver for pdfTeX.\n\nThis option allows to overwrite the anchor name of the next anchor. This makes it possible to give for example the heading of the table of contents an anchor name which can be referenced with a command from the bookmark package:\n\nWhenDeprecated 2022-04-27 v7.00o an anchor is set (e.g. via , then the anchor name is globally set to the current anchor name.\n\nWith the default global setting (localanchorname=false) a reference to ‘sec:foobar’ jumps to the equation before. With option ‘localanchorname’ the anchor of the equation is forgotten after the environment and the reference ‘sec:foobar’ jumps to the section title.\n\nOption ‘localanchorname’ is an experimental option, there might be situations, where the anchor name is not available as expected.\n\nThe option is deprecated: it makes it difficult for package authors to add targets for links if it is unclear if is set locally or globally.\n\nThe value of option ‘customdriver’ is the name of an external driver file without extension ‘.def’. The file must have with a version date and number that match the date and number of ‘hyperref’, otherwise a warning is given.\n\nBecause the interface, what needs to be defined in the driver, is not well defined and quite messy, the option is mainly intended to ease developing, testing, debugging the driver part.\n\nLaTeX’s NFSS is used to assist the conversion of arbitrary TeX strings to PDF strings (bookmarks, PDF information entries). Many math command names ( , , ...) are not in control of NFSS, therefore they are defined with prefix ‘text’ ( , , ...). They can be mapped to short names during the processing to PDF strings. The disadvantage is that they are many hundreds macros that need to be redefined for each PDF string conversion. Therefore this can be enabled or disabled as option ‘psdextra’. On default the option is turned off (set to ‘false’). Turning the option on means that the short names are available. Then can directly be used instead of .\n\nWhen XeTeX generates a link annotation, it does not look at the boxes (as the other drivers), but only at the character glyphs. If there are no glyphs (images, rules, ...), then it does not generate a link annotation. Macro puts its argument in a box and adds spaces at the lower left and upper right corners. An additional margin can be specified by setting it to the dimen register . The default is 2pt.\n\nIf a hyperref OPTION is a boolean, that means it takes values ‘true’ or ‘false’, then calls YES, otherwise NO.\n\nMacro calls YES, if OPTION exists as boolean and is enabled. Otherwise NO is executed.\n\nBoth macros are expandable. Additionally option ‘stoppedearly’ is available. It is enabled if or end hyperref prematurely.\n\nIf a Unicode character is not supported by puenc.def, it can be given by using . Its name and syntax is inherited from package ‘ucs’. However it is defined independently for use in hyperref’s (that converts arbitrary TeX code to PDF strings or tries to do this).\n\n‘\"’ must not be a babel shorthand character or otherwise active. Otherwise prefix it with :\n\nUsers of (n)german packages or babel options may use instead:\n\nSome features of the PDF specification needs PDF strings. Examples are bookmarks or the entries in the information dictionary. The PDF specification allows two encodings ‘PDFDocEncoding’ (8-bit encoding) and ‘Unicode’ (UTF-16). The user can help using to replace complicate TeX constructs by a representation for the PDF string. However does not distinguish the two encodings. This gap closes . It is only allowed in the second argument of and takes two arguments, the first allows the full range of Unicode. The second is limited to the characters available in PDFDocEncoding.\n\nAs example we take a macro definition for the Vietnamese name of Hàn Thế Thành. Correctly written it needs some accented characters, one character even with a double accent. Class ‘tugboat.cls’ defines a macro for the typesetted name:\n\nIt’s not entirely correct, the second accent over the ‘e’ is not an acute, but a hook. However standard LaTeX does not provide such an accent.\n\nNow we can extend the definition to support hyperref. The first and the last word are already supported automatically. Characters with two or more accents are a difficult business in LaTeX, because the NFSS2 macros of the LaTeX kernel do not support more than one accent. Therefore also puenc.def misses support for them. But we can provide it using . The character in question is:\n\nThus we can put this together:\n\nFor PDFDocEncoding (PD1) the variant above has dropped the second accent. Alternatively we could provide a representation without accents instead of wrong accents:\n\nFor hyperlink support in the index, hyperref inserts into the index macros. After processing with Makeindex, analyzes its argument to detect page ranges and page comma lists. However, only the standard settings are supported directly:\n\n(See manual page/documentation of Makeindex that explains the keys that can be used in style files for Makeindex.) Customized versions of needs markup that can detect and knows that this stuff does not belong to a page number. Makro serves as this markup. Put the customized code for these keys inside , e.g.:\n\nThe idea are colored links, when viewed, but printed without colors. This new experimental option ‘ocgcolorlinks’ uses Optional Content Groups, a feature introduced in PDF 1.5.\n\nA better implementation which hasn’t the disadvantage to prevent line breaks is in the ocgx2 package. Check its documentation for details how to use it.\n• The option must be given for package loading:\n• Main disadvantage: Links cannot be broken across lines. PDF reference 1.7: 4.10.2 “Making Graphical Content Optional”: Graphics state operations, such as setting the color, ..., are still applied. Therefore the link text is put in a box and set twice, with and without color.\n• The feature can be switched of by inside the document.\n• The PDF version should be at least 1.5. It is automatically set for pdfTeX, LuaTeX and dvipdfmx.\n\nThe new option ‘pdfa’ tries to avoid violations of PDF/A in code generated by hyperref. However, the result is usually not in PDF/A, because many features aren’t controlled by hyperref (XMP metadata, fonts, colors, driver dependend low level stuff, ...).\n\nCurrently, option ‘pdfa’ sets and disables the following items:\n• Many things are disabled in PDF formulars:\n• Interactive Forms: Flag NeedAppearances is the default ‘false’ (Because of this, hyperref’s implementation of Forms looks ugly). [PDF/A 6.9]\n\nThe default value of the new option ‘pdfa’ is ‘false’. It influences the loading of the package and cannot be changed after hyperref is loaded ( ).\n\nThe new option ‘linktoc’ allows more control which part of an entry in the table of contents is made into a link:\n• ‘linktoc=all’ (both the section and page part are links)\n\nRationale: There is a difference between setting to ‘false’ and an absent entry. In the former case the new document replaces the old one, in the latter case the PDF viewer application should respect the user preference.\n\nPDF form field macros ( , , ...) support boolean flag options. The option name is the lowercase version of the names in the PDF specification (1.7):\n\nOptions (convert to lowercase) except flags in square brackets:\n• 1 Invisible \n\n2 Hidden (PDF 1.2) \n\n3 Print (PDF 1.2) \n\n4 NoZoom (PDF 1.3) \n\n5 NoRotate (PDF 1.3) \n\n6 NoView (PDF 1.3) \n\n[7 ReadOnly (PDF 1.3)] ignored for widget annotations, see table 8.70 \n\n8 Locked (PDF 1.4) \n\n9 ToggleNoView (PDF 1.5) \n\n10 LockedContents (PDF 1.7)\n• 18 Combo (set: combo box, clear: list box) \n\n19 Edit (only useful if Combo is set) \n\n20 (Sort) for authoring tools, not PDF viewers \n\n22 MultiSelect (PDF 1.4) \n\n23 DoNotSpellCheck (PDF 1.4) (only useful if Combo and Edit are set) \n\n27 CommitOnSelChange (PDF 1.5)\n• [1 Include/Exclude] unsupported, use ‘noexport’ (table 8.70) instead \n\n2 IncludeNoValueFields \n\n[3 ExportFormat] handled by option ‘export’ \n\n4 GetMethod \n\n5 SubmitCoordinates \n\n[6 XFDF (PDF 1.4)] handled by option ‘export’ \n\n7 IncludeAppendSaves (PDF 1.4) \n\n8 IncludeAnnotations (PDF 1.4) \n\n[9 SubmitPDF (PDF 1.4)] handled by option ‘export’ \n\n10 CanonicalFormat (PDF 1.4) \n\n11 ExclNonUserAnnots (PDF 1.4) \n\n12 ExclFKey (PDF 1.4) \n\n14 EmbedForm (PDF 1.5)\n\nNew option ‘export’ sets the export format of a submit action. Valid values are (upper- or lowercase):\n\nThis is an experimental option. It notifies ‘hyperref’ about the intended PDF version. Currently this is used in code for PDF forms (implementation notes 116 and 122 of PDF spec 1.7).\n\nValues: 1.2, 1.3, 1.4, 1.5, 1.6, 1.7. Values below 1.2 are not supported, because most drivers expect higher PDF versions.\n\nThe option must be used early, not after .\n\nIn theory this option should also set the PDF version, but this is not generally supported.\n• Ghostscript: option -dCompatibilityLevel (this is set in ‘ps2pdf12’, ‘ps2pdf13’, ‘ps2pdf14’).\n\nThe current PDF version is used as default if this version can be detected (only pdfTeX ≥ 1.10a). Otherwise the lowest version 1.2 is assumed. Thus ‘hyperref’ tries to avoid PDF code that breaks this version, but is free to use ignorable higher PDF features.\n\nMany form objects uses the label argument for several purposes:\n• As name in HTML structures.\n\nCode that is suitable for layouting with TeX can break in the structures of the output format. If option ‘name’ is given, then its value is used as name in the different output structures. Thus the value should consist of letters only.\n\nThe PDF format allows two encodings for bookmarks and entries in the information dictionary: PDFDocEncoding and Unicode as UTF-16BE. Option pdfencoding selects between these encodings:\n• pdfdoc uses PDFDocEncoding. It uses just one byte per character, but the supported characters are limited (244 in PDF-1.7).\n• unicode sets Unicode. It is encoded as UTF-16BE. Two bytes are used for most characters, surrogates need four bytes.\n• auto PDFDocEncoding if the string does not contain characters outside the encoding (outside ascii if an unicode engine is used) and Unicode otherwise. This option is not intended for the unicode engines.\n\nAll drivers use unicode by default now. If another encoding should be forced, it should be done in .\n\nIf option pdfusetitle is set then hyperref tries to derive the values for pdftitle and pdfauthor from and . An optional argument for and is supported (class amsart).\n\ngenerates a reference without link as or .\n\nLinks can be underlined instead of the default rectangle or options colorlinks, frenchlinks. This is done by option\n• AR7/Linux seems to have a bug, that don’t use the default value for the width, but zero, thus that the underline is not visible without . The same applies for dashed boxes, eg.: pdfborderstyle=/S/D/D[3 2]/W 1\n• The syntax is described in the PDF specification, look for “border style”, eg. Table 8.13 “Entries in a border style dictionary” (specification for version 1.6)\n• The border style is removed by pdfborderstyle= This is automatically done if option colorlinks is enabled.\n• Be aware that not all PDF viewers support this feature, not even Acrobat Reader itself:\n• AR7/Linux: underline and dashed, but the border width must be given.\n\nThe depth of the bookmarks can be controlled by the new option bookmarksdepth. The option acts globally and distinguishes three cases:\n• bookmarksdepth without value Then hyperref uses the current value of counter tocdepth. This is the compatible behaviour and the default.\n• , the value is number (also negative): The depth for the bookmarks are set to this number.\n• The <name> is a document division name (part, chapter, ...). It must not start with a digit or minus to avoid mixing up with the number case. Internally hyperref uses the value of macro . Examples: \\hypersetup{bookmarksdepth=paragraph} \\hypersetup{bookmarksdepth=4} % same as before \\hypersetup{bookmarksdepth} % counter \"tocdepth\" is used\n\nThere are many places where arbitrary strings end up as PS or PDF strings. The PS/PDF strings in parentheses form require the protection of some characters, e.g. unmatched left or right parentheses need escaping or the escape character itself (backslash). Since 2006/02/12 v6.75a the PS/PDF driver should do this automatically. However I assume a problem with compatibility, especially regarding the form part where larger amounts of JavaScript code can be present. It would be a pain to remove all the escaping, because an additional escaping layer can falsify the code.\n\nTherefore a new option pdfescapeform was introduced:\n• pdfescapeform=false Escaping for the formulars are disabled, this is the compatibility behaviour, therefore this is the default.\n• pdfescapeform=true Then the PS/PDF drivers do all the necessary escaping. This is the logical choice and the recommended setting. For example, the user writes JavaScript as JavaScript and do not care about escaping characters for PS/PDF output.\n\n(hyperref ≥ 6.72s) If no driver is given, hyperref tries its best to guess the most suitable driver. Thus it loads hpdftex, if pdfTeX is detected running in PDF mode. Or it loads the corresponding VTeX driver for VTeX’s working modes. Unhappily many driver programs run after the TeX compiler, so hyperref does not have a chance (dvips, dvipdfm, ...). In this case driver hypertex is loaded that supports the HyperTeX features that are recognized by xdvi for example. This behaviour, however, can easily be changed in the configuration file :\n\nfor the default behaviour of hyperref.\n\nSee also the new option ‘driverfallback’.\n\nAlternative interface for formatting of backref entries, example:\n\nSet an anchor at this location. It is often used in conjunction with for sectionlike things (index, bibliography, preface). refers to the latest previous location where an anchor is set.\n\nNow the entry in the table of contents (and bookmarks) for the index points to the start of the index page, not to a location before this page.\n\nThe unicode option loads for the bookmarks puenc.def which contains quite a lot definitions of commands for the bookmarks. As unicode is now true for all engines, this file is now also loaded with pdflatex. Some of the definitions in puenc.def clash with other uses. To reduce the impact hyperref uses two strategies.\n• A number of commands are only defined conditionally: The commands for the cyrillic block if \\CYRDZE is defined, greek if \\textBeta is defined, and hebrew if \\hebdalet is defined. The greek block is in an extra file, puenc-greekbasic.def, which can be loaded manually if needed.\n• Other commands are moved to an extra file puenc-extra.def which is not loaded automatically, but can be loaded in the preamble if needed. Currently this file contains all definitions for the accent \\G.\n\nIf you want to access the menu options of Acrobat Reader or Exchange, the following macro is provided in the appropriate drivers:\n\nThe text is used to create a button which activates the appropriate menuoption. The following table lists the option names you can use—comparison of this with the menus in Acrobat Reader or Exchange will show what they do. Obviously some are only appropriate to Exchange.\n\nYou must put your fields inside a Form environment. The environment does some general setups, so should be used only once in a document. Using simply \\Form at the begin of the document is possible too.\n\nThere are six macros to prepare fields:\n\nThe way forms and their labels are laid out is determined by:\n\nWhat is actually shown in the field is determined by:\n\nThese macros default to , except the last, which defaults to #1; it is used for buttons, and the special \\Submit and \\Reset macros.\n\nYou may also want to redefine the following macros:\n\nNote that all colors must be expressed as rgb triples, in the range 0..1 (i.e. color=0 0 0.5)\n\nA hyperref driver has to provide definitions for eight macros:\n\nThe draft option defines the macros as follows\n\nPackage hyperref aims to cooperate with other packages, but while the long term goal is to remove patches and to move link support into the kernel, classes and packages there are still several possible sources for conflict, such as\n• Packages that manipulate the bibliographic mechanism. Peter William’s harvard package is supported. However, the recommended package is either Patrick Daly’s natbib package that has specific hyperref hooks to allow reliable interaction or the biblatex package. Both packages cover a very wide variety of layouts and citation styles, all of which work with hyperref.\n• Packages that changes \\label and \\ref macros. Since LaTeX 2023-06-01 the kernel and hyperref/nameref use the same \\label definition. \\label has a hook for external packages. There should be no need for external packages and classes to redefine them.\n• Packages that do anything serious with the index.\n• Packages that do anything serious with sectioning commands and the toc.\n\nThe hyperref package is distributed with a variant of the xr, xr-hyper , which support crossdocument links using LATEX’s normal \\label/\\ref mechanisms.\n\nCurrently only package loading orders are available:\n\nThe environments equation and eqnarray are not supported too well. For example, there might be spacing problems (eqnarray isn’t recommended anyway, see CTAN:info/l2tabu/, the situation for equation is unclear, because nobody is interested in investigating). Consider using the environments that package amsmath provide, e.g. gather for equation. The environment equation can even redefined to use gather:\n\nThe documentation of amsrefs claims that the package must be loaded after hyperref (it is unclear if that is really true) so the recommended package loading order is:\n\nPackage longtable must be put before hyperref and arydshln, hyperref after arydshln generates an error, thus the resulting package order is then:\n\nThe old version 2005/03/30 v1.4j will not work. You need at least version 1.5, maintained by Péter Szabó, see CTAN:language/hungarian/babel/.\n\nBabel’s spanish.ldf redefines ‘ ’ to support ‘ ’. In bookmarks ( ) only ‘ ’ is supported. If ‘ ’ is needed, can be used instead.\n\nhyperref does not support package bigfoot. And package bigfoot does not support hyperref’s footnotes and disables them (hyperfootnotes=false).\n\nPackage chappg uses that is redefined by hyperref. The package order is therefore:\n\nPackage ‘count1to’ adds several commands that confuse ‘hyperref’. Therefore has to be fixed:\n\npd1enc.def or puenc.def should be loaded before:\n\nor see entry for vietnam.\n\nThis packages redefines after package hyperref (pd1enc.def/puenc.def should be loaded before):\n\n(this will lead to wrong ellipsis in the bookmarks, so is needed).\n• Several commands are not supported inside one float object.\n• Anchor are set at top of the float object, if its style is controlled by float.sty.\n\nUpdate to version 2008/01/28 v2.1.4b: Since version 6.77a hyperref does not hack into , it uses package ‘atbegshi’ instead, that hooks into . Thus the patch of ‘foils.cls’ regarding hyperref is now obsolete and causes an undefined error message about . This is fixed in FoilTeX 2.1.4b.\n\nThis package is not supported, you have to disable hyperref’s footnote support by using option .\n\nBoth mathenv and hyperref messes around with environment eqnarray. You can load mathenv after hyperref to avoid an error message. But will not work inside environment eqnarray properly, for example.\n\nThis package is obsolete, use the up-to-date original package minitoc instead.\n\nExample for introducing links for the page numbers:\n\nThis package is not fully supported. The thref option should not be used at all as it breaks the command. It also not garantied that links to theorems always work properly as the package redefines many internals and but offers no proper interface for hyperlinks.\n\nThis package is obsolete, use the up-to-date original package ntheorem instead.\n\nFor equations the following might work:\n\nThe package is obsolete. Use either subfig or subcaption\n\nLinked footnotes are not supported inside environment tabularx, because they uses the optional argument of , see section ‘Limitations’. Before version 2011/09/28 6.82i hyperref had disabled footnotes entirely by hyperfootnotes=false.\n\nnameref supports titlesec, but hyperref does not (unsolved is the anchor setting, missing with unnumbered section, perhaps problems with page breaks with numbered ones).\n\nNote: utf8 is now the default in LaTeX and ucs is no longer recommended.\n\nThe first time a multibyte UTF8 sequence is called, it does some calculations and stores the result in a macro for speeding up the next calls of that UTF8 sequence. However this makes the first call non-expandable and will break if used in information entries or bookmarks. Package ucs offers or to solve this:\n\nThe notation with two carets avoids trouble with 8-bit bytes for the README file, you can use the characters directly.\n\nMost previous problems with varioref should be resolved. There is only an open issue regarding \\vrefformat (https://github.com/latex3/hyperref/issues/225).\n\nIt is recommended to load varioref always with the option nospace, see the documentation.\n\nDefault for the encoding of bookmarks is . That means the strings are always treated as unicode strings. If or is forced it applies only if the string restricts to the printable ASCII set, The reason is that the does not support PDFDocEncoding.\n\nIn older versions hyperref contained special conversion code from UTF-16BE back to UTF-8 in a number of places for xetex to avoid the xdvipdfmx warning\n\nThis is no longer needed with a current xdvipdfmx, so this code has been removed. should no longer be used.\n\nOnly few drivers support automatically wrapped/broken links, e.g. pdftex, dvipdfmx, hypertex. Other drivers lack this feature, e.g. dvips, dvipsone.\n• For long section or caption titles in the table of contents or list of figures/tables option linktocpage can be used. Then the page number will be a link, and the overlong section title is not forced into an one line link with overfull warning.\n• The option breaklinks is intended for internal use. But it can be used to force link wrapping, e.g. when printing a document. However, when such a document is converted to PDF and viewed with a PDF viewer, the active link area will be misplaced. Another limitation: some penalties are “optimized” by TeX, thus there are missing break points, especially within . (See thread “hyperref.sty, breaklinks and url.sty 3.2” in comp.text.tex 2005-09).\n\nIn general they have problems:\n• Some driver doesn’t support them at all (see above).\n• The driver allows it, but the link result might include the footer and/or header. This can currently (2023) be avoided by using the PDF management and to load at least the new-or-1 module from latex-lab:\n\nLaTeX allows the separation of the footnote mark and the footnote text ( , ). This interface might be enough for visual typesetting. But the relation between to is not as strong as to . Therefore it is not clear in general which references which . But that is necessary to implement hyperlinking. Thus the implementation of hyperref does not support the optional argument of and .\n\nUnhappily LaTeX strips spaces from options if they are given in or (or ), e.g.:\n\nand the result is an invalid PDF file. As workaround braces can be used:\n\nSome options can also be given in\n\nIn the options are directly processed as key value options (see package keyval) without space stripping in the value part.\n\nAlternatively, LaTeX’s option handling system can be adapted to key value options by one of the packages kvoptions-patch (from project kvoptions) or xkvltxp (from project xsetkeys).\n• Package hyperref adds commands by the encap mechanism (see documentation of Makeindex), if option hyperindex is set (default). uses the page anchors that are set by hyperref at each page (default). However in the default case page numbers are used in anchor names in arabic form. If the page numbers in other formats are used (book class with , , ...), then the page anchors are not unique. Therefore option is recommended.\n• The encap mechanism of Makeindex allows to use one command only (see documentation of Makeindex). If the user sets such a command, hyperref suppresses its command. With logical markup this situation can easily be solved:\n• Scientic Word/Scientific WorkPlace users can use package robustindex with hyperindex=false.\n• Other encap characters can be set by option encap. Example for use of “?”:\n• Another possibility is the insertion of by a style file for makeindex. For this case, hyperref’s insertion will be disabled by . will be defined regardless of setting of hyperindex.\n\nGetting rid of it:\n\nThe caption command increments the counter and here is the place where hyperref set the corresponding anchor. Unhappily the caption is set below the figure, so the figure is not visible if a link jumps to a figure. In this case, try package hypcap that implements a method to circumvent the problem.\n\nThe first characters of the line in the file are hex values, convert each byte and prepend them with a backslash. (This will go into the PDF file.)\n\nHyperref must know where the first byte starts, this is marked by (8 and 9 cannot occur in octal numbers):\n\nOptional: is used for abbreviations:\n\nThe footnote support is rather limited. It is beyond the scope to use and out of order or reusing . Here you can either disable hyperref’s footnote support by or fiddle with internal macros, nasty examples:\n\nSome counters do not have unique values and require the value of other counters to be unique. For example, sections or figures might be numbered within chapters or is used with an optional counter argument. Internally LaTeX uses to reset a counter in dependency to another counter. Package hyperref hooks into to catch this situation. Also of package amsmath is caught by hyperref.\n\nHowever, if the definition of subordinate counters take place before hyperref is loaded, the old meaning of is called without hyperref’s additions. Then the companion counter macro can be redefined accordingly. Or move the definition of subordinate counters after hyperref is loaded.\n\nThe original authors of hyperbasics.tex and hypertex.sty, from which this package descends, are Tanmoy Bhattacharya and Thorsten Ohl. Package hyperref started as a simple port of their work to LATEX2ε standards, but eventually I rewrote nearly everything, because I didn’t understand a lot of the original, and was only interested in getting it to work with LATEX. I would like to thank Arthur Smith, Tanmoy Bhattacharya, Mark Doyle, Paul Ginsparg, David Carlisle, T. V. Raman and Leslie Lamport for comments, requests, thoughts and code to get the package into its first useable state. Various other people are mentioned at the point in the source where I had to change the code in later versions because of problems they found.\n\nTanmoy found a great many of the bugs, and (even better) often provided fixes, which has made the package more robust. The days spent on RevTeX are entirely due to him! The investigations of Bill Moss into the later versions including native PDF support uncovered a good many bugs, and his testing is appreciated. Hans Hagen provided a lot of insight into PDF.\n\nBerthold Horn provided help, encouragement and sponsorship for the dvipsone and dviwindo drivers. Sergey Lesenko provided the changes needed for dvipdf, and Hàn Thế Thành supplied all the information needed for pdftex. Patrick Daly kindly updated his natbib package to allow easy integration with hyperref. Michael Mehlich’s hyper package (developed in parallel with hyperref) showed me solutions for some problems. Hopefully the two packages will combine one day.\n\nThe forms creation section owes a great deal to: T. V. Raman, for encouragement, support and ideas; Thomas Merz, whose book Web Publishing with Acrobat/PDF provided crucial insights; D. P. Story, whose detailed article about pdfmarks and forms solved many practical problems; and Hans Hagen, who explained how to do it in pdftex.\n\nSteve Peter recreated the manual source in July 2003 after it had been lost.\n\nEspecial extra thanks to David Carlisle for the backref module, the ps2pdf and dviwindo support, frequent general rewrites of my bad code, and for working on changes to the xr package to suit hyperref.\n\nCopyright © 2000,2001,2002 Free Software Foundation, Inc.\n\n59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n\nThe purpose of this License is to make a manual, textbook, or other functional and useful document “free” in the sense of freedom: to assure everyone the effective freedom to copy and redistribute it, with or without modifying it, either commercially or noncommercially. Secondarily, this License preserves for the author and publisher a way to get credit for their work, while not being considered responsible for modifications made by others.\n\nThis License is a kind of “copyleft”, which means that derivative works of the document must themselves be free in the same sense. It complements the GNU General Public License, which is a copyleft license designed for free software.\n\nWe have designed this License in order to use it for manuals for free software, because free software needs free documentation: a free program should come with manuals providing the same freedoms that the software does. But this License is not limited to software manuals; it can be used for any textual work, regardless of subject matter or whether it is published as a printed book. We recommend this License principally for works whose purpose is instruction or reference.\n\nThis License applies to any manual or other work, in any medium, that contains a notice placed by the copyright holder saying it can be distributed under the terms of this License. Such a notice grants a world-wide, royalty-free license, unlimited in duration, to use that work under the conditions stated herein. The “Document”, below, refers to any such manual or work. Any member of the public is a licensee, and is addressed as “you”. You accept the license if you copy, modify or distribute the work in a way requiring permission under copyright law.\n\nA “Modified Version” of the Document means any work containing the Document or a portion of it, either copied verbatim, or with modifications and/or translated into another language.\n\nA “Secondary Section” is a named appendix or a front-matter section of the Document that deals exclusively with the relationship of the publishers or authors of the Document to the Document’s overall subject (or to related matters) and contains nothing that could fall directly within that overall subject. (Thus, if the Document is in part a textbook of mathematics, a Secondary Section may not explain any mathematics.) The relationship could be a matter of historical connection with the subject or with related matters, or of legal, commercial, philosophical, ethical or political position regarding them.\n\nThe “Invariant Sections” are certain Secondary Sections whose titles are designated, as being those of Invariant Sections, in the notice that says that the Document is released under this License. If a section does not fit the above definition of Secondary then it is not allowed to be designated as Invariant. The Document may contain zero Invariant Sections. If the Document does not identify any Invariant Sections then there are none.\n\nThe “Cover Texts” are certain short passages of text that are listed, as Front-Cover Texts or Back-Cover Texts, in the notice that says that the Document is released under this License. A Front-Cover Text may be at most 5 words, and a Back-Cover Text may be at most 25 words.\n\nA “Transparent” copy of the Document means a machine-readable copy, represented in a format whose specification is available to the general public, that is suitable for revising the document straightforwardly with generic text editors or (for images composed of pixels) generic paint programs or (for drawings) some widely available drawing editor, and that is suitable for input to text formatters or for automatic translation to a variety of formats suitable for input to text formatters. A copy made in an otherwise Transparent file format whose markup, or absence of markup, has been arranged to thwart or discourage subsequent modification by readers is not Transparent. An image format is not Transparent if used for any substantial amount of text. A copy that is not “Transparent” is called “Opaque”.\n\nExamples of suitable formats for Transparent copies include plain ASCII without markup, Texinfo input format, LaTeX input format, SGML or XML using a publicly available DTD, and standard-conforming simple HTML, PostScript or PDF designed for human modification. Examples of transparent image formats include PNG, XCF and JPG. Opaque formats include proprietary formats that can be read and edited only by proprietary word processors, SGML or XML for which the DTD and/or processing tools are not generally available, and the machine-generated HTML, PostScript or PDF produced by some word processors for output purposes only.\n\nThe “Title Page” means, for a printed book, the title page itself, plus such following pages as are needed to hold, legibly, the material this License requires to appear in the title page. For works in formats which do not have any title page as such, “Title Page” means the text near the most prominent appearance of the work’s title, preceding the beginning of the body of the text.\n\nA section “Entitled XYZ” means a named subunit of the Document whose title either is precisely XYZ or contains XYZ in parentheses following text that translates XYZ in another language. (Here XYZ stands for a specific section name mentioned below, such as “Acknowledgements”, “Dedications”, “Endorsements”, or “History”.) To “Preserve the Title” of such a section when you modify the Document means that it remains a section “Entitled XYZ” according to this definition.\n\nThe Document may include Warranty Disclaimers next to the notice which states that this License applies to the Document. These Warranty Disclaimers are considered to be included by reference in this License, but only as regards disclaiming warranties: any other implication that these Warranty Disclaimers may have is void and has no effect on the meaning of this License.\n\nYou may copy and distribute the Document in any medium, either commercially or noncommercially, provided that this License, the copyright notices, and the license notice saying this License applies to the Document are reproduced in all copies, and that you add no other conditions whatsoever to those of this License. You may not use technical measures to obstruct or control the reading or further copying of the copies you make or distribute. However, you may accept compensation in exchange for copies. If you distribute a large enough number of copies you must also follow the conditions in section 15.3.\n\nYou may also lend copies, under the same conditions stated above, and you may publicly display copies.\n\nIf you publish printed copies (or copies in media that commonly have printed covers) of the Document, numbering more than 100, and the Document’s license notice requires Cover Texts, you must enclose the copies in covers that carry, clearly and legibly, all these Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on the back cover. Both covers must also clearly and legibly identify you as the publisher of these copies. The front cover must present the full title with all words of the title equally prominent and visible. You may add other material on the covers in addition. Copying with changes limited to the covers, as long as they preserve the title of the Document and satisfy these conditions, can be treated as verbatim copying in other respects.\n\nIf the required texts for either cover are too voluminous to fit legibly, you should put the first ones listed (as many as fit reasonably) on the actual cover, and continue the rest onto adjacent pages.\n\nIf you publish or distribute Opaque copies of the Document numbering more than 100, you must either include a machine-readable Transparent copy along with each Opaque copy, or state in or with each Opaque copy a computer-network location from which the general network-using public has access to download using public-standard network protocols a complete Transparent copy of the Document, free of added material. If you use the latter option, you must take reasonably prudent steps, when you begin distribution of Opaque copies in quantity, to ensure that this Transparent copy will remain thus accessible at the stated location until at least one year after the last time you distribute an Opaque copy (directly or through your agents or retailers) of that edition to the public.\n\nIt is requested, but not required, that you contact the authors of the Document well before redistributing any large number of copies, to give them a chance to provide you with an updated version of the Document.\n\nYou may copy and distribute a Modified Version of the Document under the conditions of sections 15.2 and 15.3 above, provided that you release the Modified Version under precisely this License, with the Modified Version filling the role of the Document, thus licensing distribution and modification of the Modified Version to whoever possesses a copy of it. In addition, you must do these things in the Modified Version:\n• Use in the Title Page (and on the covers, if any) a title distinct from that of the Document, and from those of previous versions (which should, if there were any, be listed in the History section of the Document). You may use the same title as a previous version if the original publisher of that version gives permission.\n• List on the Title Page, as authors, one or more persons or entities responsible for authorship of the modifications in the Modified Version, together with at least five of the principal authors of the Document (all of its principal authors, if it has fewer than five), unless they release you from this requirement.\n• State on the Title page the name of the publisher of the Modified Version, as the publisher.\n• Preserve all the copyright notices of the Document.\n• Add an appropriate copyright notice for your modifications adjacent to the other copyright notices.\n• Include, immediately after the copyright notices, a license notice giving the public permission to use the Modified Version under the terms of this License, in the form shown in the Addendum below.\n• Preserve in that license notice the full lists of Invariant Sections and required Cover Texts given in the Document’s license notice.\n• Include an unaltered copy of this License.\n• Preserve the section Entitled “History”, Preserve its Title, and add to it an item stating at least the title, year, new authors, and publisher of the Modified Version as given on the Title Page. If there is no section Entitled “History” in the Document, create one stating the title, year, authors, and publisher of the Document as given on its Title Page, then add an item describing the Modified Version as stated in the previous sentence.\n• Preserve the network location, if any, given in the Document for public access to a Transparent copy of the Document, and likewise the network locations given in the Document for previous versions it was based on. These may be placed in the “History” section. You may omit a network location for a work that was published at least four years before the Document itself, or if the original publisher of the version it refers to gives permission.\n• For any section Entitled “Acknowledgements” or “Dedications”, Preserve the Title of the section, and preserve in the section all the substance and tone of each of the contributor acknowledgements and/or dedications given therein.\n• Preserve all the Invariant Sections of the Document, unaltered in their text and in their titles. Section numbers or the equivalent are not considered part of the section titles.\n• Delete any section Entitled “Endorsements”. Such a section may not be included in the Modified Version.\n• Do not retitle any existing section to be Entitled “Endorsements” or to conflict in title with any Invariant Section.\n\nIf the Modified Version includes new front-matter sections or appendices that qualify as Secondary Sections and contain no material copied from the Document, you may at your option designate some or all of these sections as invariant. To do this, add their titles to the list of Invariant Sections in the Modified Version’s license notice. These titles must be distinct from any other section titles.\n\nYou may add a section Entitled “Endorsements”, provided it contains nothing but endorsements of your Modified Version by various parties–for example, statements of peer review or that the text has been approved by an organization as the authoritative definition of a standard.\n\nYou may add a passage of up to five words as a Front-Cover Text, and a passage of up to 25 words as a Back-Cover Text, to the end of the list of Cover Texts in the Modified Version. Only one passage of Front-Cover Text and one of Back-Cover Text may be added by (or through arrangements made by) any one entity. If the Document already includes a cover text for the same cover, previously added by you or by arrangement made by the same entity you are acting on behalf of, you may not add another; but you may replace the old one, on explicit permission from the previous publisher that added the old one.\n\nThe author(s) and publisher(s) of the Document do not by this License give permission to use their names for publicity for or to assert or imply endorsement of any Modified Version.\n\nYou may combine the Document with other documents released under this License, under the terms defined in section 15.4 above for modified versions, provided that you include in the combination all of the Invariant Sections of all of the original documents, unmodified, and list them all as Invariant Sections of your combined work in its license notice, and that you preserve all their Warranty Disclaimers.\n\nThe combined work need only contain one copy of this License, and multiple identical Invariant Sections may be replaced with a single copy. If there are multiple Invariant Sections with the same name but different contents, make the title of each such section unique by adding at the end of it, in parentheses, the name of the original author or publisher of that section if known, or else a unique number. Make the same adjustment to the section titles in the list of Invariant Sections in the license notice of the combined work.\n\nIn the combination, you must combine any sections Entitled “History” in the various original documents, forming one section Entitled “History”; likewise combine any sections Entitled “Acknowledgements”, and any sections Entitled “Dedications”. You must delete all sections Entitled “Endorsements”.\n\nYou may make a collection consisting of the Document and other documents released under this License, and replace the individual copies of this License in the various documents with a single copy that is included in the collection, provided that you follow the rules of this License for verbatim copying of each of the documents in all other respects.\n\nYou may extract a single document from such a collection, and distribute it individually under this License, provided you insert a copy of this License into the extracted document, and follow this License in all other respects regarding verbatim copying of that document.\n\nA compilation of the Document or its derivatives with other separate and independent documents or works, in or on a volume of a storage or distribution medium, is called an “aggregate” if the copyright resulting from the compilation is not used to limit the legal rights of the compilation’s users beyond what the individual works permit. When the Document is included in an aggregate, this License does not apply to the other works in the aggregate which are not themselves derivative works of the Document.\n\nIf the Cover Text requirement of section 15.3 is applicable to these copies of the Document, then if the Document is less than one half of the entire aggregate, the Document’s Cover Texts may be placed on covers that bracket the Document within the aggregate, or the electronic equivalent of covers if the Document is in electronic form. Otherwise they must appear on printed covers that bracket the whole aggregate.\n\nTranslation is considered a kind of modification, so you may distribute translations of the Document under the terms of section 15.4. Replacing Invariant Sections with translations requires special permission from their copyright holders, but you may include translations of some or all Invariant Sections in addition to the original versions of these Invariant Sections. You may include a translation of this License, and all the license notices in the Document, and any Warranty Disclaimers, provided that you also include the original English version of this License and the original versions of those notices and disclaimers. In case of a disagreement between the translation and the original version of this License or a notice or disclaimer, the original version will prevail.\n\nIf a section in the Document is Entitled “Acknowledgements”, “Dedications”, or “History”, the requirement (section 15.4) to Preserve its Title (section 15.1) will typically require changing the actual title.\n\nYou may not copy, modify, sublicense, or distribute the Document except as expressly provided for under this License. Any other attempt to copy, modify, sublicense or distribute the Document is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.\n\nThe Free Software Foundation may publish new, revised versions of the GNU Free Documentation License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. See http://www.gnu.org/copyleft/.\n\nEach version of the License is given a distinguishing version number. If the Document specifies that a particular numbered version of this License “or any later version” applies to it, you have the option of following the terms and conditions either of that specified version or of any later version that has been published (not as a draft) by the Free Software Foundation. If the Document does not specify a version number of this License, you may choose any version ever published (not as a draft) by the Free Software Foundation.\n\nAddendum: how to use this license for your documents\n\nTo use this License in a document you have written, include a copy of the License in the document and put the following copyright and license notices just after the title page:\n\nIf you have Invariant Sections, Front-Cover Texts and Back-Cover Texts, replace the “with...Texts.” line with this:\n\nwith the Invariant Sections being LIST THEIR TITLES, with the Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.\n\nIf you have Invariant Sections without Cover Texts, or some other combination of the three, merge those two alternatives to suit the situation.\n\nIf your document contains nontrivial examples of program code, we recommend releasing these examples in parallel under your choice of free software license, such as the GNU General Public License, to permit their use in free software."
    },
    {
        "link": "https://mirrors.mit.edu/CTAN/macros/latex/contrib/hyperref/doc/hyperref-doc.tex",
        "document": ""
    }
]