[
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill",
        "document": "The method is a mutating method. It does not alter the length of , but it will change the content of .\n\nThe method fills empty slots in sparse arrays with as well.\n\nThe method is generic. It only expects the value to have a property. Although strings are also array-like, this method is not suitable to be applied on them, as strings are immutable.\n\nNote: Using on an empty array ( ) would not modify it as the array has nothing to be modified. To use when declaring an array, make sure the array has non-zero . See example."
    },
    {
        "link": "https://w3schools.com/jsref/jsref_fill.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://geeksforgeeks.org/javascript-array-fill-method-2",
        "document": "The method in JavaScript is used to fill all the elements of an array from a start index to an end index with a static value.\n\nIt mutates the original array and returns the modified array.\n\nThis method accepts three parameters as described below:\n\nThis method does not return a new array. Instead of it modifies the array on which this method is applied.\n\nExample 1: Filling Array with a Specified Value using JavaScript’s fill() Method\n\nThe function initializes an array with values. It then uses to replace all elements with the value . The modified array is logged to the console.\n\nThe function initializes an array with values. Using , it replaces elements from index 1 to 3 (exclusive) with the value 87. The modified array is logged to the console.\n\nWe have a complete list of Javascript Array methods, to check those please go through this Javascript Array Complete reference article.\n\nSupported Browsers: The browsers supported by the JavaScript Array fill() method are listed below:\n\nWe have a Cheat Sheet on Javascript where we covered all the important topics of Javascript to check those please go through Javascript Cheat Sheet-A Basic guide to JavaScript."
    },
    {
        "link": "https://medium.com/@wisecobbler/4-ways-to-populate-an-array-in-javascript-836952aea79f",
        "document": "Occasionally in JavaScript it’s necessary to populate an array with some defaults — an object, string or numbers. What’s the best approach for the job?\n\nLately, I’ve been working with Oleksii Trekhleb on a new book based on his Github repo: JavaScript Algorithms and Data Structures. As I’ve worked on writing some chapters and editing the book I came across some gotchas in working with arrays in JavaScript. There are a few different options for creating an array and filling it with default values in JavaScript, and this blog post explains the pros and cons of each option.\n\nUsing the method is an obvious choice — you supply the method with the value you want to populate your array with, and the method returns a modified version of the array.\n\nFor example, if we want to set up an array with ten slots and populate it with the string “hello” we’d write some code like this:\n\nThis method works great for immutable values like numbers, strings, and booleans. What if we wanted to populate an array with objects though?\n\nThis also populates the array with objects, but they all refer to the same object. In the MDN web docs on the method it says:\n\nSo if we change that object like this:\n\nIt will change every object in the array because they are all referencing the same object. If we want to populate an array with unique objects, we’d need to use a different approach:\n\nIn this approach, we are creating an array with ten empty slots, then filling those slots with the value, then creating a new array with unique objects. Now when we change an object in the array, we are only changing a specific object, not a reference to an object.\n\nUsing the method is rather expensive though because the method returns a completely new array, instead of using the existing array. For large datasets, this could get rather expensive. There are some other alternatives to populating an array with objects.\n\nRather than using the fill and map methods, we could create a new array like this:\n\nThen loop over the array the old fashioned way like this:\n\nThis avoids using the method.\n\nAnother alternative is to use the method. From the MDN docs:\n\nIn this one-liner, the first argument of the method is the object we want to create an array from. In this case, we are creating an empty object with a length property set to 10. The second argument is a function that fills the array with whatever the result of our function is — in our case it is our hello object.\n\nOur final option is to use the array spread syntax:\n\nThe array spread syntax allows you to expand an array or string and create a new array from the expanded elements. By using the array spread syntax, we avoid the need to use the method but we’re still using the method which can get expensive.\n\nI’m excited about the launch of this book in early March. Sign up below if you want to get more updates on book progress and get some good discounts when it launches!\n\nThanks to Devin Abbott and Nate Murray for help with writing this blog post."
    },
    {
        "link": "https://geeksforgeeks.org/javascript-array-fill-method",
        "document": "The JavaScript Array fill() Method fills a given range of array elements with the given value. This method is used to manipulate the existing array according to our needs.\n• Value: Value to be filled.\n• Start: Start index (included) and its default value is 0.\n• End: End index (excluded) and its default index is this.length.\n\nExample 1: In this example, we will fill an array with 0 starting from an index at 2 till the end index of 4.\n\nExample 2: In this example, we will fill the array with 9 starting from an index at 2 till the end index of the array.\n\nExample 3: In this example, we will fill the array completely with 6. This is done by not giving the start and end index to the fill method.\n\nWe have a complete list of Javascript Array methods, to check those please go through this article.\n\nThe browsers supported by JavaScript Array join() method are listed below:\n\nWhat does do in JavaScript arrays?\n\nCan replace elements with different types?\n\nHow does handle undefined or sparse arrays?\n\nWe have a Cheat Sheet on Javascript where we covered all the important topics of Javascript to check those please go through ."
    },
    {
        "link": "https://w3schools.com/js/js_htmldom_events.asp",
        "document": "HTML DOM allows JavaScript to react to HTML events:\n\nA JavaScript can be executed when an event occurs, like when a user clicks on an HTML element.\n\nTo execute code when a user clicks on an element, add JavaScript code to an HTML event attribute:\n• When an image has been loaded\n• When the mouse moves over an element\n• When an input field is changed\n• When an HTML form is submitted\n\nIn this example, the content of the element is changed when a user clicks on it:\n\nIn this example, a function is called from the event handler:\n\nTo assign events to HTML elements you can use event attributes.\n\nIn the example above, a function named will be executed when the button is clicked.\n\nThe HTML DOM allows you to assign events to HTML elements using JavaScript:\n\nIn the example above, a function named is assigned to an HTML element with the .\n\nThe function will be executed when the button is clicked.\n\nThe and events are triggered when the user enters or leaves the page.\n\nThe event can be used to check the visitor's browser type and browser version, and load the proper version of the web page based on the information.\n\nThe and events can be used to deal with cookies.\n\nThe event is often to some action while the user input data.\n\nBelow is an example of how to use the oninput to change the content of an input field.\n\nThe event is often used in combination with validation of input fields.\n\nBelow is an example of how to use the onchange. The function will be called when a user changes the content of an input field.\n\nThe and events can be used to trigger a function when the user mouses over, or out of, an HTML element:\n\nTry it Yourself »\n\nThe , , and events are all parts of a mouse-click. First when a mouse-button is clicked, the onmousedown event is triggered, then, when the mouse-button is released, the onmouseup event is triggered, finally, when the mouse-click is completed, the onclick event is triggered.\n\nTry it Yourself »\n\nonmousedown and onmouseup\n\n Change an image when a user holds down the mouse button.\n\nonload\n\n Display an alert box when the page has finished loading.\n\nonfocus\n\n Change the background-color of an input field when it gets focus.\n\nMouse Events\n\n Change the color of an element when the cursor moves over it.\n\nFor a list of all HTML DOM events, look at our complete HTML DOM Event Object Reference."
    },
    {
        "link": "https://freecodecamp.org/news/dom-manipulation-in-javascript",
        "document": "JavaScript, the language of the web, empowers developers to create dynamic and interactive web pages. One of the key features that enables this interactivity is Document Object Model (DOM) manipulation.\n\nDOM manipulation allows developers to interact with and modify the structure, style, and content of web pages. In this article, we'll explore the fundamentals of DOM manipulation in JavaScript, breaking down complex concepts into easy-to-understand snippets.\n\nWhat is the DOM?\n\nThe Document Object Model (DOM) is a programming interface for web documents. It represents the structure of a document as a tree of objects, where each object corresponds to a part of the document, such as elements, attributes, and text. JavaScript can manipulate this tree structure, allowing developers to dynamically alter the content and appearance of a webpage.\n\nTo manipulate the DOM, we need to access its elements. This is commonly done using the object, which represents the entire HTML document. Let's look at a simple example:\n\nIn the code snippet above, we use , , and to retrieve specific elements. The returned values can then be stored in variables for further manipulation.\n\nOnce we have access to an element, we can modify its content using the property:\n\nIn the example above, we changed the content of the to . This is a simple yet powerful way to update the text within an element.\n\nEvents are actions or occurrences that happen in the browser, such as a user clicking a button or resizing the window. JavaScript allows us to handle these events and execute code in response. Event handling is a crucial aspect of creating interactive web pages.\n\nTo respond to events, we can use event listeners. These are functions that \"listen\" for a specific event on a particular element. Let's consider a button click event as an example:\n\nIn this example, when the button with the ID is clicked, an alert saying will pop up. Event listeners provide a way to execute custom code based on user interactions.\n\nDOM manipulation also extends to modifying the styles of elements, allowing us to create visually appealing and dynamic web pages.\n\nWe can use the property of an element to change its appearance. Let's take an example of changing the color of a paragraph when a button is clicked:\n\nIn this example, when the button with the ID is clicked, the text color of the paragraph with the ID is changed to blue.\n\nHow to Create and Modify Elements\n\nIn addition to modifying existing elements, JavaScript allows us to create new elements and add them to the DOM.\n\nHow to create new elements\n\nThe method is used to create a new HTML element. Let's create a new paragraph element and append (add) it to the body of the document:\n\nIn this example, we create a new (paragraph) element, set its text content, and then append it to the body of the document.\n\nWe can also modify the attributes of existing elements. Let's consider changing the source of an image dynamically:\n\nHere, we access an image element with the ID and change its attribute to , dynamically updating the displayed image.\n\nLet's consider a scenario where you want to update the value of a text input based on user interaction:\n\nIn this example, as the user types in the text input with the ID , a paragraph with the ID is dynamically updated to reflect the input value.\n\nYou can toggle the visibility of an element by using the style property. Let's create a button that toggles the visibility of a paragraph:\n\nHere, the paragraph with the ID is initially visible. Clicking the button with the ID toggles its visibility.\n\nWhile DOM manipulation is a powerful tool for creating dynamic web pages, beginners often encounter common pitfalls that can lead to unexpected behavior or errors. Let's explore some of these pitfalls and provide tips on how to avoid them.\n\nManipulating the DOM before it's ready\n\nWe may sometimes attempt to manipulate the DOM before it has fully loaded. This can lead to JavaScript trying to access elements that haven't been rendered yet. To avoid this, it's crucial to wait for the DOM to be fully loaded before executing any JavaScript code:\n\nBy wrapping your DOM manipulation code inside the event listener, you ensure that it runs only when the DOM is ready.\n\nNot checking if an element exists\n\nWhen attempting to access an element using methods like , we might assume the element exists and proceed with manipulation. However, if the element is not present on the page, it can lead to errors.\n\nAlways check if an element exists before manipulating it:\n\nThis simple check prevents errors when working with elements that may or may not be present.\n\nWhen handling events, forgetting to prevent the default action can result in unexpected page behavior. For instance, if a form is submitted without preventing the default action, the page might reload, causing loss of data:\n\nBy calling , you stop the default behavior associated with the event, giving you full control over how the event is handled.\n\nPerforming inefficient DOM queries, especially within loops, can degrade performance. Each query involves traversing the DOM, and unnecessary queries can slow down your webpage.\n\nInstead of repeatedly querying the DOM, cache references to elements:\n\nBy querying the DOM once and reusing the reference, you optimize your code.\n\nDifferent browsers may interpret JavaScript and DOM manipulation slightly differently. Failing to account for cross-browser compatibility can lead to inconsistent behavior.\n\nUse feature detection and consider using libraries like jQuery or modern frameworks to handle cross-browser inconsistencies:\n\nBy checking for features before using them, you ensure your code works across various browsers.\n\nHow to Use Frameworks for DOM Manipulation\n\nWhile JavaScript allows for direct DOM manipulation, modern web development often involves using frameworks like React or Vue.js. These frameworks provide a more structured way to build and manage user interfaces.\n\nIn this React example, a component is created to handle a button click event, demonstrating a more declarative approach to UI development.\n\nHere, a Vue.js instance is created to manage data and methods, showcasing the reactivity and component-based structure of Vue.js.\n\nIn this comprehensive guide, we've delved into the world of DOM manipulation in JavaScript. From accessing elements to handling events, and from modifying styles to creating new elements, we've covered the essential concepts in a straightforward manner.\n\nRemember, DOM manipulation is at the core of creating dynamic and interactive web pages. By mastering these fundamental techniques, you'll be well-equipped to build engaging and user-friendly web applications. As you continue your journey with JavaScript, practice and experimentation will deepen your understanding of these concepts, paving the way for your success as a web developer."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Events",
        "document": "Events are things that happen in the system you are programming, which the system tells you about so your code can react to them. For example, if the user clicks a button on a webpage, you might want to react to that action by displaying an information box. In this article, we discuss some important concepts surrounding events, and look at the fundamentals of how they work in browsers. An understanding of HTML and the fundamentals of CSS, familiarity with JavaScript basics as covered in previous lessons.\n• What events are — a signal fired by the browser when something significant happens, which the developer can run some code in response to.\n• Setting up event handlers using (and ) and event handler properties.\n• Inline event handler attributes, and why you shouldn't use them.\n\nWhat is an event? Events are things that happen in the system you are programming — the system produces (or \"fires\") a signal of some kind when an event occurs, and provides a mechanism by which an action can be automatically taken (that is, some code running) when the event occurs. Events are fired inside the browser window, and tend to be attached to a specific item that resides in it. This might be a single element, a set of elements, the HTML document loaded in the current tab, or the entire browser window. There are many different types of events that can occur.\n• The user selects, clicks, or hovers the cursor over a certain element.\n• The user presses a key on the keyboard.\n• The user resizes or closes the browser window. You can gather from this (and from glancing at the MDN event reference) that there are a lot of events that can be fired. To react to an event, you attach an event handler to it. This is a block of code (usually a JavaScript function that you as a programmer create) that runs when the event fires. When such a block of code is defined to run in response to an event, we say we are registering an event handler. Note: Event handlers are sometimes called event listeners — they are pretty much interchangeable for our purposes, although strictly speaking, they work together. The listener listens out for the event happening, and the handler is the code that runs in response to it happening. Note: Web events are not part of the core JavaScript language — they are defined as part of the APIs built into the browser.\n\nIn the following example, we have a single in the page: Then we have some JavaScript. We'll look at this in more detail in the next section, but for now we can just say: it adds an event handler to the button's event, and the handler reacts to the event by setting the page background to a random color: The example output is as follows. Try clicking the button:\n\nIf you've added an event handler using , you can remove it again using the method. For example, this would remove the event handler: Event handlers can also be removed by passing an to and then later calling on the controller owning the . For example, to add an event handler that we can remove with an : const controller = new AbortController(); btn.addEventListener(\"click\", () => { const rndCol = `rgb(${random(255)} ${random(255)} ${random(255)})`; document.body.style.backgroundColor = rndCol; }, { signal: controller.signal } // pass an AbortSignal to this handler ); Then the event handler created by the code above can be removed like this: controller.abort(); // removes any/all event handlers associated with this controller For simple, small programs, cleaning up old, unused event handlers isn't necessary, but for larger, more complex programs, it can improve efficiency. Also, the ability to remove event handlers allows you to have the same button performing different actions in different circumstances: all you have to do is add or remove handlers.\n\nObjects (such as buttons) that can fire events also usually have properties whose name is followed by the name of the event. For example, elements have a property . This is called an event handler property. To listen for the event, you can assign the handler function to the property. For example, we could rewrite the random-color example like this: You can also set the handler property to a named function: With event handler properties, you can't add more than one handler for a single event. For example, you can call on an element multiple times, with different functions specified in the second argument: This is impossible with event handler properties because any subsequent attempts to set the property will overwrite earlier ones:\n\nYou might also see a pattern like this in your code: The earliest method of registering event handlers found on the Web involved event handler HTML attributes (or inline event handlers) like the one shown above — the attribute value is literally the JavaScript code you want to run when the event occurs. The above example invokes a function defined inside a element on the same page, but you could also insert JavaScript directly inside the attribute, for example: <button onclick=\"alert('Hello, this is my old-fashioned event handler!');\"> Press me </button> You can find HTML attribute equivalents for many of the event handler properties; however, you shouldn't use these — they are considered bad practice. It might seem easy to use an event handler attribute if you are doing something really quick, but they quickly become unmanageable and inefficient. For a start, it is not a good idea to mix up your HTML and your JavaScript, as it becomes hard to read. Keeping your JavaScript separate is a good practice, and if it is in a separate file you can apply it to multiple HTML documents. Even in a single file, inline event handlers are not a good idea. One button is OK, but what if you had 100 buttons? You'd have to add 100 attributes to the file; it would quickly turn into a maintenance nightmare. With JavaScript, you could easily add an event handler function to all the buttons on the page no matter how many there were, using something like this: Finally, many common server configurations will disallow inline JavaScript, as a security measure. You should never use the HTML event handler attributes — those are outdated, and using them is bad practice.\n\nSometimes, inside an event handler function, you'll see a parameter specified with a name such as , , or . This is called the event object, and it is automatically passed to event handlers to provide extra features and information. For example, let's rewrite our random color example again slightly: Note: You can find the full source code for this example on GitHub (also see it running live). Here you can see we are including an event object, e, in the function, and in the function setting a background color style on — which is the button itself. The property of the event object is always a reference to the element the event occurred upon. So, in this example, we are setting a random background color on the button, not the page. Note: You can use any name you like for the event object — you just need to choose a name that you can then use to reference it inside the event handler function. / / is most commonly used by developers because they are short and easy to remember. It's always good to be consistent — with yourself, and with others if possible.\n\nSometimes, you'll come across a situation where you want to prevent an event from doing what it does by default. The most common example is that of a web form, for example, a custom registration form. When you fill in the details and click the submit button, the natural behavior is for the data to be submitted to a specified page on the server for processing, and the browser to be redirected to a \"success message\" page of some kind (or the same page, if another is not specified). The trouble comes when the user has not submitted the data correctly — as a developer, you want to prevent the submission to the server and give an error message saying what's wrong and what needs to be done to put things right. Some browsers support automatic form data validation features, but since many don't, you are advised to not rely on those and implement your own validation checks. Let's look at an example. First, a simple HTML form that requires you to enter your first and last name: Now some JavaScript — here we implement a very simple check inside a handler for the event (the submit event is fired on a form when it is submitted) that tests whether the text fields are empty. If they are, we call the function on the event object — which stops the form submission — and then display an error message in the paragraph below our form to tell the user what's wrong: const form = document.querySelector(\"form\"); const fname = document.getElementById(\"fname\"); const lname = document.getElementById(\"lname\"); const para = document.querySelector(\"p\"); form.addEventListener(\"submit\", (e) => { if (fname.value === \"\" || lname.value === \"\") { e.preventDefault(); para.textContent = \"You need to fill in both names!\"; } }); Obviously, this is pretty weak form validation — it wouldn't stop the user from validating the form with spaces or numbers entered into the fields, for example — but it is OK for example purposes. The output is as follows: Note: For the full source code, see preventdefault-validation.html (also see it running live here)."
    },
    {
        "link": "https://w3schools.com/js/js_htmldom_eventlistener.asp",
        "document": "The method attaches an event handler to the specified element.\n\nThe method attaches an event handler to an element without overwriting existing event handlers.\n\nYou can add many event handlers to one element.\n\nYou can add many event handlers of the same type to one element, i.e two \"click\" events.\n\nYou can add event listeners to any DOM object not only HTML elements. i.e the window object.\n\nThe method makes it easier to control how the event reacts to bubbling.\n\nWhen using the method, the JavaScript is separated from the HTML markup, for better readability and allows you to add event listeners even when you do not control the HTML markup.\n\nYou can easily remove an event listener by using the method.\n\n\n\nThe first parameter is the type of the event (like \" \" or \" \" or any other HTML DOM Event.)\n\nThe second parameter is the function we want to call when the event occurs.\n\nThe third parameter is a boolean value specifying whether to use event bubbling or event capturing. This parameter is optional.\n\nAdd an Event Handler to an Element\n\nYou can also refer to an external \"named\" function:\n\nAdd Many Event Handlers to the Same Element\n\nThe method allows you to add many events to the same element, without overwriting existing events:\n\nYou can add events of different types to the same element:\n\nAdd an Event Handler to the window Object\n\nThe method allows you to add event listeners on any HTML DOM object such as HTML elements, the HTML document, the window object, or other objects that support events, like the object.\n\nWhen passing parameter values, use an \"anonymous function\" that calls the specified function with the parameters:\n\nThere are two ways of event propagation in the HTML DOM, bubbling and capturing.\n\nEvent propagation is a way of defining the element order when an event occurs. If you have a <p> element inside a <div> element, and the user clicks on the <p> element, which element's \"click\" event should be handled first?\n\nIn bubbling the inner most element's event is handled first and then the outer: the <p> element's click event is handled first, then the <div> element's click event.\n\nIn capturing the outer most element's event is handled first and then the inner: the <div> element's click event will be handled first, then the <p> element's click event.\n\nWith the addEventListener() method you can specify the propagation type by using the \"useCapture\" parameter:\n\nThe default value is false, which will use the bubbling propagation, when the value is set to true, the event uses the capturing propagation.\n\nThe method removes event handlers that have been attached with the addEventListener() method:\n\nFor a list of all HTML DOM events, look at our complete HTML DOM Event Object Reference."
    },
    {
        "link": "https://stackoverflow.com/questions/62095304/javascript-manipulating-dom-onclick-event",
        "document": "It seems like you are trying to create a for loop instead of your function? There is some logic issues as well. Here are some pointers that might help you understand the code below:\n• Every variable declared within a function, will only be declared when that function is called. After the function is called, the variables are destroyed and in most cases you cannot access them again.\n• You seem to be trying to select all your elements on the dom within the same function? You wont need to do that if you just modify the style property before appending to the dom.\n• Take some time to do some research about the fundamentals, it will really help you put some quality code together."
    }
]