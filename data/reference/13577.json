[
    {
        "link": "https://developer.android.com/guide/topics/resources/string-resource",
        "document": "Stay organized with collections Save and categorize content based on your preferences.\n\nA string resource provides text strings for your application with optional text styling and formatting. There are three types of resources that can provide your application with strings:\n\nAll strings are capable of applying some styling markup and formatting arguments. For information about styling and formatting strings, see the section about Formatting and Styling.\n\nA single string that can be referenced from the application or from other resource files (such as an XML layout).\n\nNote: A string is a simple resource that is referenced using the value provided in the attribute (not the name of the XML file). So, you can combine string resources with other simple resources in the one XML file, under one element.\n\nAn array of strings that can be referenced from the application.\n\nNote: A string array is a simple resource that is referenced using the value provided in the attribute (not the name of the XML file). As such, you can combine string array resources with other simple resources in the one XML file, under one element.\n\nDifferent languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write \"1 book\", but for any other quantity we'd write \"n books\". This distinction between singular and plural is very common, but other languages make finer distinctions. The full set supported by Android is , , , , , and .\n\nThe rules for deciding which case to use for a given language and quantity can be very complex, so Android provides you with methods such as to select the appropriate resource for you.\n\nAlthough historically called \"quantity strings\" (and still called that in API), quantity strings should only be used for plurals. It would be a mistake to use quantity strings to implement something like Gmail's \"Inbox\" versus \"Inbox (12)\" when there are unread messages, for example. It might seem convenient to use quantity strings instead of an statement, but it's important to note that some languages (such as Chinese) don't make these grammatical distinctions at all, so you'll always get the string.\n\nThe selection of which string to use is made solely based on grammatical necessity. In English, a string for is ignored even if the quantity is 0, because 0 isn't grammatically different from 2, or any other number except 1 (\"zero books\", \"one book\", \"two books\", and so on). Conversely, in Korean only the string is ever used.\n\nDon't be misled either by the fact that, say, sounds like it could only apply to the quantity 2: a language may require that 2, 12, 102 (and so on) are all treated like one another but differently to other quantities. Rely on your translator to know what distinctions their language actually insists upon.\n\nIf your message doesn't contain the quantity number, it is probably not a good candidate for a plural. For example, in Lithuanian the singular form is used for both 1 and 101, so \"1 book\" is translated as \"1 knyga\", and \"101 books\" is translated as \"101 knyga\". Meanwhile \"a book\" is \"knyga\" and \"many books\" is \"daug knygų\". If an English plural message contains \"a book\" (singular) and \"many books\" (plural) without the actual number, it can be translated as \"knyga\" (a book)/\"daug knygų\" (many books), but with Lithuanian rules, it will show \"knyga\" (a single book), when the number happens to be 101.\n\nIt's often possible to avoid quantity strings by using quantity-neutral formulations such as \"Books: 1\". This makes your life and your translators' lives easier, if it's an acceptable style for your application.\n\nOn API 24+ you can use the much more powerful ICU class instead.\n\nNote: A plurals collection is a simple resource that is referenced using the value provided in the attribute (not the name of the XML file). As such, you can combine plurals resources with other simple resources in the one XML file, under one element.\n\nHere are a few important things you should know about how to properly format and style your string resources.\n\nWhen a string contains characters that have special usage in XML, you must escape the characters according to the standard XML/HTML escaping rules. If you need to escape a character that has special meaning in Android you should use a preceding backslash.\n\nBy default Android will collapse sequences of whitespace characters into a single space. You can avoid this by enclosing the relevant part of your string in double quotes. In this case all whitespace characters (including new lines) will get preserved within the quoted region. Double quotes will allow you to use regular single unescaped quotes as well.\n\nWhitespace collapsing and Android escaping happens after your resource file gets parsed as XML. This means that (space, punctuation space, Unicode Em space) all collapse to a single space ( ), because they are all Unicode spaces after the file is parsed as an XML. To preserve those spaces as they are, you can either quote them ( ) or use Android escaping ( ).\n\nNote: From XML parser's perspective, there is no difference between and whatsoever. Both forms will not show any quotes but trigger Android whitespace-preserving quoting (that will have no practical effect in this case).\n\nIf you need to format your strings, then you can do so by putting your format arguments in the string resource, as demonstrated by the following example resource.\n\nIn this example, the format string has two arguments: is a string and is a decimal number. Then, format the string by calling . For example:\n\nYou can add styling to your strings with HTML markup. For example:\n\nThe following HTML elements are supported:\n• Setting font properties: <font face=”font_family“ color=”hex_color”>. Examples of possible font families include , , and .\n\nIf you aren't applying formatting, you can set TextView text directly by calling . In some cases, however, you may want to create a styled text resource that is also used as a format string. Normally, this doesn't work because the and methods strip all the style information from the string. The work-around to this is to write the HTML tags with escaped entities, which are then recovered with , after the formatting takes place. For example:\n• Store your styled text resource as an HTML-escaped string: <resources> <string name=\"welcome_messages\">Hello, %1$s! You have <b>%2$d new messages</b>.</string> </resources> In this formatted string, a element is added. Notice that the opening bracket is HTML-escaped, using the notation.\n• Then format the string as usual, but also call to convert the HTML text into styled text:\n\nBecause the method formats all HTML entities, be sure to escape any possible HTML characters in the strings you use with the formatted text, using . For instance, if you are formatting a string that contains characters such as \"<\" or \"&\", then they must be escaped before formatting, so that when the formatted string is passed through , the characters come out the way they were originally written. For example:\n\nA is a text object that you can style with typeface properties such as color and font weight. You use to build your text and then apply styles defined in the package to the text.\n\nYou can use the following helper methods to set up much of the work of creating spannable text:\n\nThe following , , and methods wrap the helper methods above and demonstrate specific examples of applying styles defined in the package. You can create similar methods to do other types of text styling.\n\nHere's an example of how to chain these methods together to apply various styles to individual words within a phrase:\n\nThe core-ktx Kotlin module also contains extension functions that make working with spans even easier. You can check out the android.text package documentation on GitHub to learn more.\n\nFor more information on working with spans, see the following links:\n\nYou can apply complex or custom styling by using the class along with the tag in your strings.xml resource files. The annotation tag allows you to mark parts of the string for custom styling by defining custom key-value pairs in the XML that the framework then converts into spans. You can then retrieve these annotations and use the key and value to apply the styling.\n\nWhen creating annotations, make sure you add the tag to all translations of the string in every strings.xml file.\n\n\n\n Applying a custom typeface to the word “text” in all languages\n• Add the tag, and define the key-value pair. In this case, the key is font, and the value is the type of font we want to use: title_emphasis\n• Load the string resource and find the annotations with the font key. Then create a custom span and replace the existing span. // get the text as SpannedString so we can get the spans attached to the text // get all the annotation spans from the text // create a copy of the title text as a SpannableString. // the constructor copies both the text and the spans. so we can add and remove spans // iterate through all the annotation spans // look for the span with the key font // check the value associated to the annotation key // set the span at the same indices as the annotation // now, the spannableString contains both the annotation spans and the CustomTypefaceSpan // get the text as SpannedString so we can get the spans attached to the text // get all the annotation spans from the text // create a copy of the title text as a SpannableString. // the constructor copies both the text and the spans. so we can add and remove spans // iterate through all the annotation spans // look for the span with the key font // check the value associated to the annotation key // set the span at the same indices as the annotation // now, the spannableString contains both the annotation spans and the CustomTypefaceSpan\n\nIf you’re using the same text multiple times, you should construct the SpannableString object once and reuse it as needed to avoid potential performance and memory issues.\n\nFor more examples of annotation usage, see Styling internationalized text in Android\n\nBecause spans are also , the key-value pairs are parceled and unparceled. As long as the receiver of the parcel knows how to interpret the annotations, you can use spans to apply custom styling to the parceled text.\n\nTo keep your custom styling when you pass the text to an Intent Bundle, you first need to add spans to your text. You can do this in the XML resources via the <annotation> tag, as shown in the example above, or in code by creating a new and setting it as a span, as shown below:\n\nRetrieve the text from the as a and then parse the annotations attached, as shown in the example above.\n\nFor more information on text styling, see the following links:\n• Google I/O 2018 talk - Best practices for text on Android"
    },
    {
        "link": "https://docs.weblate.org/en/latest/formats/android.html",
        "document": "The same file format is also used by JetBrains Compose Multiplatform Kotlin Resources.\n\nAndroid string resources are monolingual, the Monolingual base language file is stored in a different location from the other files – .\n\nWeblate does following escaping of strings:\n• None If a strings is valid XML, it is inserted as XML to translation.\n• None and are escaped with a at the beginning of the string to avoid interpreting them as style or resource references.\n• None In case string contains multiple spaces, it is quoted with double quotes ( ).\n• None Newlines are escaped as , but the actual newline is kept for readability as well.\n\nAndroid structures are not currently supported. To work around this, you can break your string arrays apart: The that points to the elements should be stored in a different file, and not be made available for translation. This script may help pre-process your existing strings.xml files and translations: https://gist.github.com/paour/11291062\n\nTo avoid translating some strings, these can be marked as non-translatable. This can be especially useful for string references:"
    },
    {
        "link": "https://developer.android.com/studio/write/translations-editor",
        "document": "The Translations Editor provides a consolidated and editable view of all of your default and translated string resources.\n\nFor an introduction to translating your app for different languages, read Supporting different languages and cultures.\n\nThe string resources for a project are contained in files. Your project has a default file that contains string resources in the default language for your app, which is the language you expect most of your app users to speak. You can also have translated files that contain string resources for other languages that you want your app to accommodate.\n\nOnce you have your default file completed, you can add the translations yourself, or pay a professional service to do the translations. Either way, you should take advantage of the Android Studio features to help you manage and test localizable text. For information about professional translation services, see Order translation services.\n\nYou can access the Translations Editor from the following places in Android Studio.\n• In the Project > Android panel on the left, select > res > values.\n• Right-click the strings.xml file, and select Open Translations Editor. The Translations Editor displays the key and value pairs from the file. Note: When you have translated files, your project has multiple corresponding values folders with suffixes that indicate the language, such as values-es for Spanish. Your default file is always in the values (no suffix) folder.\n\nFigure 1 shows the default app text (in this case, English) in the Translations Editor for a simple app before translation work has been done. The contents of translated files will appear to the right of the Untranslatable column with one column per language as shown in figure 2.\n\nYou can access the Translations Editor from within any of your files.\n• In the Project > Android panel on the left, select > res > values.\n• Double-click strings.xml to open it for editing.\n• In strings.xml, click the Open editor link in the upper-right corner.\n\nNote: If you click the Hide notification link, the Open editor link goes away. To bring it back, close and reopen the project.\n\nYou can open the Translations Editor from the Layout Editor's Design Editor to edit your default and translated text to better fit your layout. For information about switching languages in the Design Editor, see Display translated text in the Design Editor.\n• In the Project > Android panel on the left, select > res > layout.\n• Double-click content_main.xml to open it for editing.\n• Click the Design tab in the lower-left corner to display the Design Editor.\n• In the Design Editor, select the Language drop-down list.\n\nIn the Translations Editor, you can select Unstranslatable to indicate that you do not want the text in this row to be translated. Text that you would not want translated might be product-specific text like trade names and trade marks, or technical terms that do not have a translation.\n\nWhen you check Untranslatable, the corresponding line in the default file adds translatable=\"false\". In the following example, EasyApp in the top line is not translated because it is the product name.\n\nThe Translations Editor supports BCP 47 and combines locale and region (country) codes into a single selection for targeted localizations. A locale defines more than the language. A locale includes country-dependent formatting for things like the date and time, currencies, and decimals.\n\nTo add a language, do the following:\n• In the Translations Editor, click the globe icon .\n• From the drop-down list, select the language you want to add. The new language appears in the Translations Editor, and a values-* folder with a file is added to the project. For example, values-es for Spanish.\n\nTo delete a language, do the following:\n\nYou can delete a language in the Translations Editor by deleting every value in the column (see Edit, add, or delete text), or you can delete the project folder for that language, as follows:\n• In the Project > Android panel on the left, select > res.\n• Right click the values-* folder for the language you want to delete. For example, values-hi for Hindi.\n• From the drop-down list, select Delete to delete the folder and its strings.xml file.\n\nYou can operate on the text settings directly in the file or through the Translations Editor. This section describes the Translations Editor approach. In the Translations Editor, you can edit, add, or delete text through the list view or through the Translation field at the bottom of the Translations Editor.\n\nFigure 2. List view on the top and the Translation field on the bottom\n\nTo edit or add text, do the following:\n• Double-click the cell where you want to edit or add text.\n• Do a keyboard copy-paste, or if you have a keyboard that supports diacritic marks, type directly into the list view.\n• Tab or move the cursor out of the field.\n\nTo delete text, do the following:\n• Double-click the cell you want to delete.\n• In the list view, select the text and press Delete.\n• Tab or move the cursor out of the field.\n\nTo edit or add text, do the following:\n• In the list view, single-click the cell where you want to edit or add text.\n• In the Translation field, do a keyboard copy-paste, or if you have a keyboard that supports diacritic marks, type directly into the Translation field.\n• Tab or move the cursor out of the field.\n\nTo delete text, do the following:\n• Single-click the cell you want to delete.\n• In the Translation field, select the text and press Delete.\n\nIn the Translations Editor, the Key column lists the unique identifiers for each data item in your files. You can add and delete keys through the Translations Editor. When you delete a key, the Translations Editor deletes it and all of its associated translations. The Translations Editor uses the Safe Delete refactoring to delete a key so you know if the key text is used elsewhere and have a chance to make necessary adjustments before you delete the key. The Safe Delete refatoring ensures that your code still compiles after you delete the key.\n\nTo add a key, do the following:\n• In the dialog, enter a key name, default value, and the location of the default strings.xml file.\n\nTo delete a key, do the following:\n• In the Translations Editor, select the key you want to delete.\n• None In the Delete dialog, decide if you want a safe delete and whether you want to search in comments and strings, and click OK. If there are no references (usages) to the deleted key, or if all references are safely collapsible, the key is deleted. Otherwise, the Translations Editor displays the Usages Detected dialog with information about the problems detected.\n• Select View Usages to review what will be deleted. The Find Safe Delete Conflicts dialog shows all of the usages that are not safe to delete so you can edit your corresponding code.\n• Right-click a usage to display the context menu and select Jump to Source so you can make the needed changes.\n• In the Find Safe Delete Conflicts panel, select Rerun Safe Delete to make sure there are no other usages that need attention.\n• When the usages are cleaned up, click Do Refactor to delete the key.\n\nFigure 7 shows the Translations Editor displaying the contents of the English, Spanish, and French files. The red text indicates lines that have errors.\n\nFigure 7. Red text indicates an error condition that you must fix\n\nTo correct an error, hover over the red text to display an explanation of the problem and its resolution.\n\nWhen you make changes in the Translations Editor, the underlying files update with your changes. When you make changes in a file, the corresponding column in the Translations Editor updates with your changes.\n• Figure 7 shows that the app_name row has Untranslatable checked, but there is a Spanish translation provided. Delete the Spanish translation to correct the error.\n• Figure 7 shows that the next_page row is missing a French translation. Use your keyboard to copy Page Suivante into the cell to correct the error. A keyboard copy-paste operation copies the text with the diacritic marks into the cell.\n\nTo see how the translated text displays in your app layout, toggle the text between the default and translated versions in the Design Editor, as follows:\n• In the Project > Android panel on the left, select > res > layout.\n• Double-click content_main.xml to open it for editing.\n• Click the Design tab in the lower-left corner to display the Design Editor.\n• In the Design Editor, select the Language drop-down list.\n• Select the language you want to use to view your app.\n\nThe Design Editor displays your app layout in the selected language, which in this case is Spanish.\n\nSet the Design Editor to the default language\n\nTo set the language back to the default, select es > Language .\n\nThe Android platform and Android Studio provide several features to help you manage and test your localizable app text. These features have options to help you target issues with right-to-left (RTL) scripts, such as Arabic or Hebrew. Testing your localizable text allows you to make adjustments to the UI text and its layout before you commit your messages to the source repository to be sent for translation later.\n\nAndroid Studio has a refactoring command that enables support for bidirectional text in , , and elements so your apps can display and allow users to edit text in both left-to-right (LTR) and right-to-left (RTL) scripts. The command also provides automatic mirroring of app UI layouts and all view widgets. To see the text direction change and the layout mirroring, you must also set the text and layout direction properties in the Layout Editor.\n\nThe following procedure shows how to refactor your project for RTL support:\n• Select Refactor > Add RTL support where possible to display the dialog shown in figure 11.\n• If the element in your file does not have the attribute, then select the Update AndroidManifest.xml checkbox.\n• If your app's is 17 or higher, select Replace Left/Right Properties with Start/End Properties. In this case, your properties should use \"start\" and \"end\" instead of \"left\" and \"right\". For example, becomes .\n• If your app's is 16 or less, select Generate -v17 Versions In this case, your XML should use both sets of properties. For example, your XML should use both and .\n\nFor more information about refactoring your project for RTL support, see Native RTL support in Android 4.2.\n\nThe Properties window on the right provides the textDirection property to use with text widgets and the layoutDirection property to use with layout widgets to change the direction of text and layout components. The direction properties are listed in the Properties window on the right, and work with API Level 17 or higher.\n\nTo see the text direction change and the layout mirroring, you must also refactor the project for RTL support. In English, the text direction change moves only punctuation from the right side to the left side of the text; for example, \"Hello World!\" becomes \"!Hello World\". To see LTR text switch to RTL, you have to use an RTL language in your app. If you want to use English and see the text switch to RTL for testing purposes, use pseudolocales. Pseudolocales are independent of the refactoring command and the direction properties.\n\nTo access and use the direction properties, do the following:\n• Open the Properties window and search for the RTL property you want to use. To set the property value, select one of the following:\n• firstStrong: Default for the root view. The first strong directional character determines the paragraph direction. If there is no strong directional character, the paragraph direction is the view's resolved layout direction.\n• anyRtl: The paragraph direction is RTL if it contains any strong RTL character; otherwise, it is LTR if it contains any strong LTR characters. If there are neither, the paragraph direction is the view's resolved layout direction.\n• locale: The paragraph direction comes from the system locale.\n• inherit: Default. Use the direction set in the parent. Note: Strong directional characters have their own predefined direction, such as most alphabetic and syllabic characters, non-European and non-Arabic digits, Han ideographs, and punctuation characters that are specific to only those scripts.\n• To review the reversed text and layout, run the app.\n\nA pseudolocale is a simulated locale that is designed to assume the characteristics of languages that cause UI, layout, RTL, and other translation problems when an app is translated. Pseudolocales provide instant and automatic translations that are readable in English for all localizable messages. This makes it possible for you to catch untranslatable messages in your source code.\n\nFor information about how to use pseudolocales, see Test Your App with Pseudolocales."
    },
    {
        "link": "https://medium.com/@sandeepkella23/string-resources-managing-translations-in-android-450b986d14b8",
        "document": "Managing string resources and translations is a crucial aspect of Android development, especially if you aim to reach a global audience. Android provides a comprehensive system for managing string resources and their translations, making it easier to create multilingual applications. Here’s everything you need to know about managing string resources and translations in Android.\n• Purpose: Store text values separately from the code to simplify localization and reuse.\n• File Location: String resources are stored in XML files under the directory.\n• File Naming: Create separate files for each locale under .\n• Changing Locale: Test your app by changing the device locale in settings.\n• Preview in Android Studio: Use the Translations Editor for previewing and editing translations.\n• Recommendation: Always use string resources instead of hardcoding strings in your code or layouts.\n• Purpose: Suppress warnings for hardcoded text in debug builds or for specific exceptions.\n• Purpose: Visual editor for managing and editing string resources and translations.\n• Purpose: Use services like Google Translate, Transifex, or Crowdin for professional translations and collaboration.\n• Purpose: Change the locale within the app programmatically.\n\npublic void setLocale(String languageCode) {\n\n Locale locale = new Locale(languageCode);\n\n Locale.setDefault(locale);\n\n Configuration config = new Configuration();\n\n config.locale = locale;\n\n getResources().updateConfiguration(config, getResources().getDisplayMetrics());\n\n recreate(); // Restart activity to apply changes\n\n}\n• Recommendation: Save the user’s preferred locale in and apply it on app startup.\n\nBy following these guidelines and best practices, you can effectively manage string resources and translations in your Android application, ensuring a smooth and localized experience for users worldwide."
    },
    {
        "link": "https://docs.weblate.org/en/weblate-5.5.5/formats/android.html",
        "document": "Android string resources are monolingual, the Monolingual base language file is stored in a different location from the other files – .\n\nWeblate does following escaping of strings:\n• None If a strings is valid XML, it is inserted as XML to translation.\n• None and are escaped with a at the beginning of the string to avoid interpreting them as style or resource references.\n• None In case string contains multiple spaces, it is quoted with double quotes ( ).\n• None Newlines are escaped as , but the actual newline is kept for readability as well.\n\nAndroid structures are not currently supported. To work around this, you can break your string arrays apart: The that points to the elements should be stored in a different file, and not be made available for translation. This script may help pre-process your existing strings.xml files and translations: https://gist.github.com/paour/11291062\n\nTo avoid translating some strings, these can be marked as non-translatable. This can be especially useful for string references:"
    },
    {
        "link": "https://phrase.com/blog/posts/best-practices-for-android-localization-revisited-and-expanded",
        "document": "In 2021, the number of mobile users worldwide surpassed 7B, and it will likely rise to roughly 7.5B in 2025. People across the globe spend more time than ever before using mobile apps—with China and India overtaking the US in terms of revenue generated by mobile apps. Non-English usage is even higher for Android-based applications. In fact, the highest app download rates in Google Play are in non-English speaking countries.\n\nFor most Android app development companies, this figures make it obvious that running an English-only app can hardly meet the expectations of all users across markets. Therefore, making an app adaptable to multiple cultures and languages can play a key role in staying ahead of the competition. This tutorial will walk you through the process of Android internationalization step by step to help you make the most of your app for global users.\n\nWhen it comes to multilingual Android apps, the mobile operating system relies on a combination of language and locale. Language is what gets translated, and locale dictates how regional settings related to the language are displayed: currency, time, dates, etc. Android users can go to Settings ➞ Languages and select a combination of language/locale, which would make all the installed apps adhere to them.\n\n🗒 Note » A user can have multiple languages/locales selected and list them in order of priority. If the app doesn’t support the default language/locale, the next language/locale in the list will be used instead. If the app doesn’t support any of the languages/locales in the user’s list, it will display content from project’s default resources.\n\nHow do I add languages to an Android application?\n\nTo add multiple languages to your Android app, go to Module Name ➞ res ➞ values, right-click the file, and select Open Translations Editor. The editor will give you the overview of all the string keys and values used in the application.\n\n🗒 Note » You will notice that there is already a file and a key ( ) added in the translations editor. This is the default file which will be used if your app doesn’t support user’s preferred Android OS language. We will use English (en) as the default language for this tutorial.\n\nTo add a new locale, click on the “Add Locale” button, i.e. the globe icon. You can either choose a language or a combination of a language and locale (for API versions higher than 24), depending on your use case.\n\nAfter adding locales, the translations editor will list the newly added locales (Japanese and Spanish in this example).\n\nHow do I add a new string and its translations in the Translations Editor?\n\nWe will now add a new string key “greeting” and its values in all the locales we’ve chosen. Click the “+” icon, and an Add Key dialog box will appear. In the Key field, enter “greeting,” add “Hello” to the Default Value field, and click OK. We will use this key to reference the string when we remove the hardcoded string from the app code.\n\nYou will now see the newly added key in the translations editor.\n\nNow we need to add the translations for the key “greeting” in Japanese and Spanish (our supported languages).\n\n🗒 Note » The translations editor will mark the key in red if you miss to add the translation for any of the locales. You can mark a key untranslatable from the checkbox for any strings that you do not want to translate and only use default values instead.\n\nAfter adding the keys as well as their values, the translation editor will look like this.\n\n🔗 Resource » Get the code for the Android demo app used in this tutorial on GitHub.\n\n🗒 Note » You can also add locales and their translated strings manually without using the Translations Editor using Strings.xml files.\n\nWe have added string keys and values for multiple locales, now we need to reference those keys.\n\nCurrently, our Android application is using hardcoded strings in a Text composable located in . The text value is set to “Hello”.\n\nWhen we run the app on an Android Phone, whose default language is set to English, Japanese or Spanish, we can see that the app always displays the same piece of text.\n\nWe need to replace the hardcoded text with the string keys we had defined for our Android app to be able to display content in the user’s preferred language. To do that, go to and replace the hardcoded string with the following:\n\nIf we run the application again, we will see that it is able to display translated content, based on the user’s preferred language (from left to right in English, Japanese, and Spanish).\n\nHow can I support a user’s app-specific locale preference in Android?\n\nIn the past, Android used to apply the user’s preferred language to all apps installed on a smartphone, but as of Android 13, users can set their preferred language for each app. To take advantage of these new APIs, we need to list all supported languages for our application: Create a file called and specify your app’s languages as follows:\n\nIn the manifest, add a line pointing to this new file:\n\n🗒 Note » You might face build issues while linking this file on Android Gradle plugin (AGP) version 7.3.0-alpha07 through 7.3.0-beta02. Use AGP 7.3.0-beta04 or later, AGP 7.4.0-alpha05 or later, or a prior AGP release.\n\nUsers can now chose the language of our Android application in 2 ways:\n• System Settings: Go to Settings ➞ System ➞ Languages & Input ➞ App Languages ➞ (select app). Here you will see the all languages our Android application supports. By default, it will pick up the system’s default language.\n• In the App Language Picker: Newer APIs make it possible for a user to select their preferred language from within the application. We’ll cover that next.\n\nHow do I add a language picker to an Android app?\n\nLet’s implement now an in-app language picker for our Android application. In the app, we have a dropdown menu where users can select a locale from those supported by our app.\n\nIn the file, add the following code to the method:\n\nhelps us get the current locale or set another one. The changes to the locale made using persist even after closing and restarting the app. We use to get the , which is the current locale of our app. We then convert it to a language tag (“en”, “ja,” etc.), which is a string.\n\n🗒 Note » will return empty if there is no language set for our app. In this case, our app will use the system’s default language.\n\nNow we need to display a dropdown menu for the user to be able to select a locale. In the composable inside , add the following code to the method:\n\nWe are done, feel free to check out the project on GitHub.\n\n🗒 Note » To support newer APIs on Android 12 or lower, use the AndroidX support library.\n\nHow to localize numbers in Android?\n\nNumbers are formatted differently depending on the locale. For example, “1000000” will be display as\n• 1,000,000 in the US (en-US)\n\n🤿 Go deeper » A Concise Guide to Number Localization covers numeral systems, separators, percentages and more.\n\nAt the moment, we have an application that only shows an Integer in a Text composable by directly converting it into a string in the file.\n\nAs we can see above, without internationalization in place, the number looks the same in all locales, and it doesn’t have any formatting. To change that, we will format the number based on the locale using the class. Add the following code to the file:\n\nThe number is now formatted according to the locale. Check out the final code on GitHub.\n\n🔗 Resource » When using TalkBack, Google’s screen reader included on Android devices, numbers are always read based on the user’s locale. Find out more about it in our Android Accessibility Tutorial for Multilingual Apps.\n\nHow do I localize currency in Android?\n\nWhenever we want to display an amount of money, we use a currency symbol ($, €, etc.) or an ISO 4217 currency code (USD, EUR, etc.) next to the formatted amount. When it comes to Android, the class provides a method to format a sum depending on the user’s locale. We will keep using the previous example to format an amount of 1000000 units in the respective currency. Add the following code to the file:\n\nThe amount is now formatted based on the locale.\n\nBy default, will take in the current locale of your app. You can also pass any other locale tags in the function, for example, to format an amount in any locale.\n\n🗒 Note » To get a currency code in the ISO 4217 format, you can use the method.\n\nHow does localizing date and time formats work in Android?\n\nTo give an overview of localizing date and time formats in Android, we will convert the standard time format into a human-readable format, taking the user’s time zone and locale into consideration. We will use the ISO 8601 format, which is a string used to represent the Coordinated Universal Time (UTC). For example, the UTC format of January 31, 2022, 17:55:50, is represented as 2022-01-31T17:55:50Z in the ISO 8601 format. The Z at the end represents a zero UTC offset.\n\nWe will use APIs to internationalize and localize the time format.\n\n🗒 Note » To use APIs for Android versions lower than 26, you will need to add a backwards compatibility.\n\nFirst, we will convert the UTC timestamp into the user’s time zone and display it (without localization). Go to the and add the following code:\n\ntakes in the UTC string as a parameter and returns a Java time Instant object. The Java time class represents time passed in seconds since the origin (epoch) .\n\nWith the help of the method, we convert from UTC time into the user’s time zone.\n\n🗒 Note » Both and represent a moment in time. The only difference is that has extra helper methods related to time zones and time offsets while Instant has no timezone or offset specified.\n\nInside the Text composable in the file, we convert into a string.\n\nLet’s run the application with users in different time zones. Here is what users in India (on the left) and the UK (on the right) get displayed on their screens:\n\nAs you can see, the UTC timestamp is converted to the user’s default time zone (in the ISO 8601 format). We can now localize this timestamp taking the user’s locale settings into account with the help of the class. In the file, make the following changes:\n\nLet’s run the app again. In the locale, the date is displayed in the following way:\n\nUsers whose locale is set to , will see the same date as follows:\n\nYou can get the final version of the app on GitHub. In the example above, we have added absolute date and time, but you can add relative date and time formats (today, yesterday, etc.) as well.\n\nHow to handle plurals in translated strings in Android?\n\nDifferent languages have different grammatical rules for expressing quantity. In English, for example, you write “1 minute”, but for any other quantity, including 0, you write “n minutes”. Other languages like Arabic make finer distinctions.\n\nAt the moment, our application lets users type in a number of minutes for a timer.\n\nAs you can see, the “minute” label does’t change even when you type in “0” in the text field. The same can be observed from the code in :\n\nAnd the associated key in file in res ➞ values.\n\nTo make sure that the minute labels respond to the quantity, we need to define all possible labels within the tag in the file for the default language of our app, i.e. English.\n\n🗒 Note » Besides and , Android also supports more attributes, including , , , . This allows for complex plurals, like those in Arabic, for example.\n\nNow, in the file, do the following:\n\nOn running the final application, we can see that the correct string is loaded, respecting the entered quantity.\n\nHow do I work with dynamic values in translated strings in Android?\n\nStrings may sometime contain text that should not be translated into other languages. This could be a brand name, URL address, Unicode emoji character, an address, etc. You can use the placeholder tag in the file to mark text that should not be translated.\n\nFor example, our application displays the following text:\n\nInside the file, we have a Text composable.\n\nAnd the associated key in file in res ➞ values.\n\nHere, you can notice that the website URL, , must remain same in all languages. However, the relative position of the URL might differ depending on the language. To mark the text that should not be translated, we use the placeholder tag. Go to Module Name ➞ res ➞ values ➞ strings and make the following changes to the files.\n\nAlways add an attribute to the placeholder tag which explains what the placeholder is for. This is for your translators to understand the context of the untranslatable string. Let’s run the final version of the app in the English and German locales to see the difference.\n\nNote the relative position of the URL is different in both languages.\n\n🗒 Note » You can also use dynamic strings with tags which will be displayed in run time.\n\nHow to localize accessibility for Android apps?\n\nAs briefly noted above, Android is using Talkback, Google’s reader included on all Android devices, to cater to people with disability. Talkback helps users navigate with gestures and describes the content displayed on the screen. It can also take advantage of all the strategies for i18n and l10n we have already discussed without any extra work. However, there are some APIs that are exclusively meant for accessibility.\n\nWhen you define an Image or Icon composable, Talkback needs a textual description of the visual element. This can be achieved by adding a parameter. For example, for an composable, can be set by passing a string to the composable.\n\nWhen the user now hovers over the share icon, Talkback says “share” to the user. However, because we used a hard coded string, Talkback will not respect the user’s locale settings. To fix this, do the following:\n\n🗒 Note » You can also set to for decorative images.\n\nNow, Talkback will narrate the label in the user’s language. Check out our Android Accessibility Tutorial for Multilingual Apps to learn more.\n\nOther best practices for Android internationalization\n\nLet’s review briefly some other Android i18n best practices so you don’t miss anything:\n• Provide a sufficient description for string resources declared in the file for the translator to understand the context in which a string is used. Instead of just declaring a string key in file, provide comments explaining the context. <!-- The action for signing up after filling a form. This text is displayed on a button. --> <string name=\"sign_up_button\">Sign Up</string>\n• Design a flexible layout. It can be challenging to guess the exact width or height that a piece of text in any language will require on screens. For example, the English word “skip” takes only 4 characters but its German equivalent, “überspringen,” takes up 12 characters. Avoiding making widths and heights fixed—unless really important. Instead, make Composables wrap content or make them scrollable, depending on your use case. Check out a few examples of how to make localization-friendly layouts using Jetpack Compose.\n• Just as we defined different files for all locales, you can also add different images for all locales. Android will switch to default images in case it cannot find images for the user’s locale.\n\nHow do I test my Android app with pseudolocales?\n\nPseudolocalization is a method to simulate internationalization of text that might lead to UI, layout, and other translation-related issues while maintaining readability. Pseudolocalization helps you test localization without actually needing to translate your Android application. To use Android pseudolocales, you need to be running an API level 18 or higher.\n\nLet us run an application whose default language is set to English, installed on a phone whose locale is set to .\n\nTo enable pseudolocale testing on an Android device, go to the file of your project and add the following code:\n\n🗒 Note » Only enable pseudoLocalesEnabled for debug builds and not for a release build.\n\nSync and run the project. Now, turn on the developer options from the phone settings and restart your device or emulator. Android provides the following 2 pseudolocales to test your application.\n• English(XA): Adds Latin accents to base English UI text and expands on original text by adding non-accented text to showcase any UI bugs that might have originated because of expanded text.\n• AR(XB): Sets the direction of content from left-to-right(LTR) to right-to-left(RTL), reversing the order of characters; this is to mimic behaviour for various RTL languages like Hebrew, Urdu, etc.\n\nNavigate the phone settings and select English(XA) as the default system language. On running the app, when you select English(XA) as the default locale, you will notice the following:\n\nAs we can see:\n• The Text composable and the Next button now contain added accents and expanded texts, which does not break out the UI. ✅\n• The Back button is same as before instead of using accents and expanded text. This means we have hard coded the string. ❌\n\nSimilar to that, you can select to run the app again after selecting AR(XB) as the default locale to check if there are any UI issues when viewing RTL locales.\n\n🔗 Resource » Check out our guide to supporting RTL layouts in Android apps.\n\nIn conclusion, pseudolocalization has helped us fix UI issues without needing to translate our application.\n\nAnd that about does it for this one. We hope you’ve enjoyed this foray into some best practices for making Android apps ready for global markets. As soon as your translators are ready to take over the process, have a look at Phrase Strings.\n\nWith its CLI and Bitbucket, GitHub, and GitLab sync, your i18n can be on autopilot. The fully-featured Phrase web console, with machine learning and smart suggestions, is a joy for translators to use. Once translations are ready, they can sync back to your project automatically. You set it and forget it, leaving you to focus on the code you love.\n\nCheck out all Phrase features for developers and see for yourself how they can streamline your app localization workflows."
    },
    {
        "link": "https://oneskyapp.com/academy/android-app-localization-tutorial-basics",
        "document": "Did you know that Android has 72.83% of the global mobile operating system market share, and Google Play Store is available in over 146 countries?\n\nIf you want to enter the global market, you must make your app relevant and appealing to Android users. But what does the localization process entail, and how to localize your app for Android phones?\n\nWe have put together step-by-step instructions with android localization best practices to show you the nuts and bolts of successful android localization.\n\nLocalization (l10n) turns the content on an app or website into other languages. Besides translation, you must address cultural references, slang, etc., to ensure that the content resonates with the local audience while presenting a consistent brand image across markets.\n\nAndroid localization also involves adjusting various elements, such as the date, time, numbers, and currency formatting, to avoid misunderstanding and frustration. You may need to update audio files, add captions to videos, and adjust graphics to make them appropriate for each local market.\n\nBefore localizing an app, you must internationalize it. Internationalization removes language dependencies (e.g., ensure that text is not hardcoded) so you can adapt the app to different languages, regions, and cultures.\n\nThe process identifies and separates elements in an app that require localization. The usual suspects include text strings, images, audio files, plus date, time, number, and currency formats. It also considers how varying text lengths may affect the layout and how changing text direction may impact the user experience.\n\nHere’s the good news: Android comes with built-in internationalization features, so you don’t have to start from scratch. When you create a new project using Google’s Android SDK tool, it will automatically generate files needed for app localization (more on that soon.)\n\nHow To Localize an Android App\n\nYou can localize your Android App using Android Studio. Here are the key steps to follow in your Android localization project:\n\nSet up your project and internationalize the content to get it ready for localization:\n• Download our sample Android project or create a new Android Studio basic project with the name Android Localization Guide.\n• You’ll find a /res/ directory at the top level of the project, which contains the default file.\n• Open strings.xml in /res/values/strings.xml, which will be the default strings resources file for externalizing and declaring all of your text (i.e., Java and UI.) The app’s name, Android Localization Guide, should already exist as a string resource.\n• In the Design tab of content_main.xml, add a Plain Text View sample text (e.g., “This is my first Android localization project!”)\n• This text string is currently hard-coded in the app, so we have to take it through the i18n process. Externalize it into a strings.xml file by clicking on the textview element, pressing Alt + Enter, and selecting the option: [I18N]: Hardcoded string “This is my first Android localization project!”, should use @string resource.\n• An “Extract Resource” window will appear. Check the box for “values” and click OK. The textview resource will appear in strings.xml.\n• After externalizing the string resources, you can access them in your app:\n• Java: resource IDs generated in your project’s R class would look like R.string.this_is_my_first_android_localization_project\n• UI: referencing through attributes is presented as android:text=”@string/this_is_my_first_android_localization_project”\n\nThe localization process starts with adding a new language. Here’s how:\n• Right-click on the default strings.xml in the project panel and select Open Translations Editor\n• On the Translations Editor tab, click on the upper left blue globe icon to add French (fr) and create a French (fr) column.\n• Enter the translation for this_is_my_first_android_localization_project, “Ceci est mon premier projet de localisation Android!” into the French (fr) column.\n• A new strings.xml for your French translations is automatically created in the directory /res/values-fr/strings.xml. You can open fr/strings.xml to see the French text.\n\nMake sure the translated text shows up as you’d expect, here’s how:\n• Import the following libraries into MainActivity.java: android.content.res.Configuration and java.util.Locale\n• Add (or uncomment) the following code in the onCreate() function:\n\n Locale locale = new Locale(“fr”);\n\n Configuration config = getBaseContext().getResources().getConfiguration();\n\n config.locale = locale;\n\n getBaseContext().getResources().updateConfiguration(config, getBaseContext().getResources().getDisplayMetrics());\n• Run the emulator to see your French translation!\n\nThere are three types of string resources:\n\nRegardless of the string type, you may encounter some formatting challenges.\n\nFor example, you have a dynamic string that says OneSky translated 1 out of 3 languages.\n\nYou can follow the Android string formatting resource.\n\nBut you may run into positioning issues in some languages. For example, the string above will be translated into “OneSky 翻譯了 3 個語言中的 1 個。” in Chinese, which essentially flips the meaning of the original sentence. (Even if you can’t read Chinese, you’ll notice that 3 precedes 1).\n\nTo fix the issue, use positional specifiers to notate the order by inserting n$ into the format specifier, e.g., %1$s, %2$d, %3$d.\n\nThe format string for Traditional Chinese would look like this in values-zh-Hant/strings.xml:\n\nIf we use the example above,but make it “OneSky translated 1 out of 1 language,” we have a grammatical mistake.\n\nThe good news is that Android Studio has nifty string arrays that can handle pluralization. Here’s how to enable pluralization support:\n• In the default values/strings.xml, insert the following quantity string:\n\n <plurals name=”languages”>\n\n <item quantity=”one”>%d language</item>\n\n <item quantity=”other”>%d languages</item>\n\n </plurals>\n• Test the plural form with the following code:\n\n int numLang = 1;\n\n Resources res = getResources();\n\n String numLanguages = res.getQuantityString(R.plurals.languages, numLang, numLang);\n• The first numLang parameter in res.getQuantityString() will return the correct string form, while the second numLang parameter replaces the %d placeholder if present. (Otherwise, you only need to call it once.)\n• The string numLanguages now has the value 1 language.\n\nGetting pluralization right can be tedious because each language has unique grammatical rules. The good news is that Android’s built-in support for quantity strings (plurals) will make it a breeze.\n\nA successful localization project involves more than coding. Follow these best practices to ensure that you have a high-quality app for every locale.\n\nDecide which countries and languages to localize for. You may prioritize your efforts based on market size, sales potential, etc. Then, assemble a team that consists of a localization manager, developers, designers, translators, reviewers, local marketers, and legal advisers.\n\nNext, map out your localization workflow, validate the timeline, and select a localization platform to manage translation, development, quality assurance (QA), and other tasks to ensure nothing falls through the cracks.\n\nA locale combines a country and a language to represent a geographical, political, or cultural region. For example, the U.S. and UK are two separate locales. Even though users in both countries speak English, they use different formats to represent dates, times, and numbers. They also use different expressions and call the same things differently (e.g., truck vs. lorry.)\n\nAvoid hardcoding text or resources so your app can adapt to different languages, regions, and cultures in a flexible, scalable, and efficient way. Place text and resources in the default strings.xml file, so you can easily modify the content for multiple locales without recompiling the source code.\n\nAnother way to make the localization process more cost-efficient is to avoid including text in images. Keep the text as strings whenever possible, so you don’t have to create a new graphic for every language.\n\nTranslators who work on your content may only see the strings without much knowledge about your app or brand. Make their jobs easier by including information about the context of each string in the strings.xml file.\n\nProviding context is particularly important for shorter text. For instance, “clear” in English can mean either delete or transparent, depending on how the word is used. Contextual information can help you manage text strings efficiently and increase translation accuracy.\n• Give the strings a meaningful name. For example, <string name=”login_button”>LOG IN</string> for a login button.\n• Add comment to the string:\n\n <!– This is the login page’s button –>\n\n <string name=”login_button”>LOG IN</string>\n\nSome content, such as code, value placeholder, special symbols, or proper nouns, won’t require translation. Indicate these texts using an <xliff:g> tag in the strings.xml, so translators know not to change them.\n\nYou can also use the id attribute to explain the purpose of a placeholder text or an example attribute to show how you plan to display the string using the placeholder to provide more context.\n\nLocalization must also address visual styling and overall UI. Here are a few tips:\n• Indicate text length limit to preserve UI layout:\n\n <!– This is the login page’s button, limit to 10 characters –>\n\n <string name=”login_button”>LOG IN</string>\n• Spacing and other visual conventions. For example, E-mail: hello@oneskyapp.com requires a space after the colon. However, in Chinese, 電郵：hello@oneskyapp.com, the colon includes a natural space. Therefore, you should include extra spaces in the strings’ resource file for languages that need it.\n• Android XML requires phrases that need a preserved trailing space to be encased in double-quotes: <string name=”email”>”E-mail: “</string>. But in Chinese, you don’t need the double quotes because no trailing space is required: <string name=”email”>電郵：</string>.\n\nResources refer to static assets such as text strings, graphics, images, sounds, etc., used by an Android app. You may need to create multiple sets of resources, each for a specific device configuration (e.g., selected language, screen size, country code, etc.) Android will automatically load the resources most appropriate for a user’s device and locale.\n\nTo start, create specific directories within res/, one for each locale. Use the naming format “values-<ISO language code>” for text string resources and put locale-specific graphics and layout into the res/drawable-<qualifiers>/ and res/layout-<qualifiers>/ folders.\n\nWhat if the resources are incomplete for a specific user’s locale? Then, Android will display the default version of app resources.\n\nTo define default resources, place them in the app’s res/ directory. The app’s default language should be one most likely used by your target audience. Then, put localized sets in appropriately named subdirectories within the res/ directory.\n\nIf a resource doesn’t exist in the default directory, the application won’t run, and users will see an error. To ensure a seamless user experience, verify that a default resource is defined for each reference in the Android app.\n\nWhile Android will pull default resources if the localized version doesn’t exist, this would often lead to poor usability and a disjointed user experience. Double-check that all the resource sets are complete, and keep incomplete sets separate from the app until you have everything ready.\n\nKeeping all your resource sets current and in sync requires substantial time and effort when you expand into different markets. To streamline workflows and avoid errors, keep the number of resource files to a reasonable minimum without impacting the user experience.\n\nFor example, separating images from text means you only need to update one graphic for most locales. When localizing for regions with extensively overlapping variations, such as the U.S. and UK markets, you can set American English as the default and only localize a small amount of text containing different nouns or expressions.\n\nLike text strings, don’t hardcode these locale-specific elements into the app. Thankfully, Android has several built-in utilities to help you format them correctly across locales.\n\nUse getDateTimeInstance in the DateFormat class to ensure that dates and times are displayed appropriately for each locale. String.format() or DecimalFormat does the same for numbers and currency, while PhoneNumberUtils ensures that phone numbers are displayed according to local conventions.\n\nWhen you get the translated text from your translation service, move the files into the resource structure in your app. Use the appropriate language and locale qualifiers to ensure proper loading based on the selected region. Then, test the app for each locale and check that everything is displayed correctly.\n\nTranslate your app description for Google Play Store and target the right keywords for each locale. Research and select search terms based on the market, e.g., consider the competitiveness of each keyword and your audience’s search behaviors.\n\nWork with a local SEO expert to find the most effective keywords, which may differ from those in the default language version.\n\nAfter you have ticked all the boxes, it’s time to sign the app, make the final build, and upload it to Google Play.\n\nSelect the language for your localized app and upload the .apk file. Then, add translations for the store listing page, Google Ads campaign, and the localized versions of promotional graphics or videos for each language.\n\nManaging All the Moving Parts of Android App Localization\n\nAndroid localization may not be a stroll in the park, but the good news is that you don’t have to do it all on your own! Savvy global brands, developers, and product managers use robust localization platforms to help them translate, localize, and test their apps.\n\nOneSky’s end-to-end localization solution allows you to work with nearly 40 file formats, order professional translations in 50+ languages, and communicate with your translators all in one place. Learn more and get started for free."
    },
    {
        "link": "https://smartling.com/blog/android-localization",
        "document": "Subscribe to our newsletter for exclusive access to game-changing strategies and our must-read eBook on scaling global content faster and smarter."
    },
    {
        "link": "https://smartcat.com/blog/android-app-localization",
        "document": "What tools do you need for successful app localization?\n\n1. Plan and prepare your app design for localization\n\n5. Adapt visual and multimedia content to the new culture\n\nHow can you measure the success of your localization efforts?\n\nHow to localize your app in Smartcat: A step-by-step guide\n\n2. Import the keys and strings for translation\n\nWhat are best practices in app localization?\n\n1. Plan for localization from the start\n\n2. Set the app default language to align with the primary user base\n\n6. Think of the translators when you create strings\n\nWhat makes Smartcat the best localization tool for Android apps?\n\nHow long does it take to localize an Android app?\n\nWhat’s the cost of localizing an Android app?\n\nHow many languages should I localize my app into?\n\nDo I need professional translators, or can I use machine translation?\n\nCan I localize my app without changing its code?"
    },
    {
        "link": "https://crowdin.com/blog/2022/08/10/android-app-localization-tutorial",
        "document": "Android is used by many people worldwide, so getting Android localization right has become an essential part of making apps.\n\nYou might be a beginner developer making your first Android app or an experienced programmer adding to your dozen or so other Android apps. But the main question is: who are you making this app for? This article will help you learn the key steps for the Android localization and reaching new markets.\n\nUse these best practices for Android localization to make sure it can reach as many people as possible.\n\nA leading media and information brand for the app industry, Business of Apps, says that Android is the most popular operating system in the world, with more than 2.5 billion active users in more than 190 countries. That is why Android apps are used by many people worldwide, so getting Android localization right has become an essential part of creating mobile apps. Localization of Android apps is the process of adapting a mobile app for people who speak different languages or live in different countries.\n\nYou probably want your app to grow and be used by more people than just those in your local area. You want it to reach people on other continents and eventually go global. The problem is that not everyone speaks English. You will need to support more than one language sooner or later. It is an excellent reason to think about adding localization support to your Android app from the beginning.\n\nLocalization can also be a part of app store optimization processes as a separate step for improving the visibility of your app. App localization is a lot about translation, but it’s not the only thing. Localization includes a full review of how an app works to ensure it works well in each locale. Localizing app descriptions in the Google Play app stores is also essential for worldwide app store optimization (ASO).\n\nEven though localization takes time and work, it pays off in terms of downloads, new users, and money. A study by Distomo found that localized apps had 128% more downloads from the app store than apps that were not localized. Also, localized apps brought in 26 percent more money in each region. These numbers show that localizing your Android apps for a global audience is a great idea.\n\nBy following best practices, you can make the process of localizing cheaper and less time-consuming while also making it easy to scale and maintain.\n\nWhen localizing Android apps, the most crucial choice is which markets to focus on. There is a cost to making your app work in a particular place. So, you shouldn’t just try to make your Android app work in every language because you can.\n\nAlso, the cost of making your app work in a different language is not the same in every case. It would help to consider how much money you will get back.\n\nFocus on the most common languages on the internet to get started. There are the five most-used languages on the internet. In order, the most common languages are English (25%), Chinese (19.8%), Spanish (8%), Arabic (4%) and Portuguese (4%).\n\nThe three languages – English, Chinese, and Spanish – make up 55% of all the content on the internet, so they should be the first ones to be localized. When you are done localizing for these languages, you can move on to the next one.\n\nDifferent languages need different lengths for texts. When designing your app’s UI, you should consider how text grows and shrinks in different languages. It’s typically recommended that UI elements have 30% more space in other languages.\n\nThere are three main rules of design you should stick to\n• You shouldn’t give UI elements fixed widths and heights (buttons, text fields, menus, labels, images). If not, when texts are translated into other languages, they might be cut off or have too many spaces.\n• You should put elements together in a way that makes sense. And put them in the same place every time. They need to be rearranged to make sense in the new languages. For example, if you have some numbered instructions on an Android app with buttons or other UI elements.\n• Containers and wrappers should be able to change their sizes to fit the things they hold. A container can contain, for example, 3 buttons (you can find “ViewGroup” in the Android documentation). If the text is longer on another locale, then this container must correctly display the same 3 buttons without covering anything else.\n\nIf you need to rearrange your layout to fit a specific language, you can create an alternative layout for that language (for example, ). However, doing this can make your app harder to maintain. It is better to create a single layout that is more flexible.\n\nThink about languages written and read from right to left\n\nSome languages are written and read from right to left. Hebrew and Arabic are good examples. You need to make layouts that can be turned around if necessary. It could be an expensive process that must go through many steps. That’s why it’s essential to think carefully about which languages you want to support before you start developing. Most of the time, modular design is thought to be the best way to go in this situation.\n\nHow words are split up is another crucial difference between languages. Even though space is used to separate words in many western languages, East Asian languages like Chinese and Japanese don’t use spaces to do this.\n\nConsider the last example:\n\nEnglish: You should localize your Android app.\n\nChinese: 您應該本地化您的 Android 應用程序 (Disclaimer: it’s text from Google Translate, I can’t guarantee the accuracy of this translation)\n\nIn Chinese, there are no spaces between words. The Chinese language is based on the separation of syllables.\n\nUse fonts that can be applied to more than one language\n\nWhen choosing fonts for your texts, you need to be careful so that they look and feel the same in different languages. The font choice can significantly affect how easily the text reads. A few things should be kept in mind.\n\nBut the most crucial thing for translation is whether or not fonts are Unicode or not (such as ASCII). The Universal Coded Character Set (UCS), a complete set of characters and glyphs from many languages, is used to make Unicode fonts. These characters are encoded to ensure they look the same on all platforms and systems. ASCII, on the other hand, is only used for one language. ASCII may look nice in English, but it can’t be translated well. So, you should be careful to use a font that works with Unicode. Be careful because some fonts say they are Unicode, but they only work with some code points. It could cause trouble with languages.\n\nIn different languages, the same font size may be hard to read differently. For example, 12px is easy to read in English, but the same size in Japanese could be hard to understand.\n\nFor each language, you must change the font sizes on the fly. For that, you need to keep separate style sheets for each language.\n\nYou shouldn’t use hardcoded strings in layouts. For a beginner, this is very tempting. But this could be a big problem when it’s time to localize your Android application into a different language.\n\nThe good news is that Android Studio tells us about this. If you have already added hardcoded strings, Android Studio has an excellent way to add them to the string.xml file:\n• Right-click on the text and select Show Context Actions, and then Extract resource string.\n• Give that string value a preferred name.\n• Now, look at the file and the layout page.\n\nPut all the strings in strings.xml\n\nDon’t hardcore any code strings when you develop your apps. Instead, put all your strings in a default and mark them as resources. The strings in the file can then be quickly taken out, translated, and put back into your app (with the proper qualifiers) without having to change the code that was compiled.\n\nDon’t make more text strings and resource files than you need\n\nYou probably don’t need to make a different version of every resource in your app for each locale. For example, the layout in the file might work in any locale, so you wouldn’t need to make any other layout files.\n\nThe default Android language for your app is American English. In , all of the American English spellings for the strings used by the app are listed.\n\nYou should use British English spelling for a few crucial phrases. You want these alternative strings to be used when your app runs on a device in the United Kingdom. To do this, you could make a tiny file called with only the strings that should be different when the app runs in the U.K. The app uses the defaults for the rest of the strings, which are set in .\n\nStrings are the most important objects In a localization process. Let’s look at what we need to do to make strings work in different locales.\n\nFollow the rules for UI strings in Android\n\nMake sure you pay close attention to how you talk to your users as you design and build your UIs. In general, use a style that is short, friendly, and to the point, and use the same style throughout your UIs.\n\nRead the Material Design suggestions for writing style and word choice and follow them.\n\nAlso, always use the standard terms for Android, like Action Bar, Options Menu, System Bar, Notifications, and so on, whenever possible. Consistently using the correct Android terms make localization easier and the end product better for users. Additionally, you can use the glossary, which lets you create, store, and manage your project’s terms in one place.\n\nWhen you declare strings in your strings.xml file, explain how they are used. This information is beneficial to the translator and translates better. It also helps you keep track of your strings better.\n\nHere’s what we mean:\n\nConsider giving additional information, such as: When does it show up on the user’s screen? What is the location of this text? Is it a button or a title? Should it be translated as a verb or as a noun?\n\nTo stay flexible during localization, put in some time and provide context before the translation starts. In the long run, this will pay off. For example, the previous article summarizes all the different ways to give context during localization. So that you can be sure your translators always have a great place to work.\n\nFor each language, you usually need at least one translator. Each of them might ask a dozen questions, and most of those questions are likely to be very similar. It would take you a long time to answer each one. Attaching screenshots is a very different thing.\n\nScreenshots will help all translators understand many things at once, as each translator would see a screenshot with the current string’s location marked.\n\nA good idea would be to run the app version with Real-Time Preview set up on the Android Emulators you prefer to use. If you use Appetize.io, for example, give your team of translators the link to the app installed on the emulator so they can run it in their browsers. Or, give your translators the version they need, and they will put it on their devices.\n\nMark parts of the message that don’t need to be translated\n\nOften, strings have text that shouldn’t be translated into other languages. Typical examples are a piece of code, a placeholder for a value, a special symbol, or a name. As you get your strings ready to be translated, look for text that shouldn’t be changed and mark it, so the translator doesn’t change it. Translators do not have to translate such strings because they can break the code.\n\nUse an placeholder tag to mark text that shouldn’t be translated. Here’s an example of a tag that makes sure the text “percent 1$s” doesn’t get changed during translation, which could make the message wrong:\n\nWhen you declare a placeholder tag, you should always add an id attribute that says what the placeholder is for. If your apps later change the value of the placeholder, make sure to add an example attribute to show how it should be used.\n\nYou can see in Crowdin the highlighted text that translators should not translate. Additionally, they will receive a notification “do not translate”.\n\nHow to Automate the Sync of Source Content and Translations?\n\nYou may already know there’s more to localization than downloading resource files, sending them to translators, and putting the translations into the codebase:\n• It’s a waste of time to do everything by hand.\n• You must start downloading, sending, and integrating again if the source texts change, or you get a new copy.\n• If you send translators a spreadsheet with strings but no context, you can expect to get a lot of questions about the lack of context, and the number of target languages will multiply those questions.\n\nYou can set up several integrations with Git tools in Crowdin. They all do a great job of keeping your systems’ content in sync. For example, use integrations with GitHub, GitLab, Bitbucket, and Azure Repos. It is also possible to integrate with GitHub Actions. You can also use the Crowdin CLI or the Android Studio plugin to automatically upload source files to Crowdin and easily add translations to the codebase.\n\nSometimes, the same strings will appear in different places on your app. For example, you may have two “Next” buttons that are represented by the button next and next button translation keys. These keys, on the other hand, will have the same translation Next. It means that these keys are essentially duplicates.\n\nIf there are duplicate strings in your project, you can choose how the system should handle them:\n• Show – translators will translate each instance (string) separately. Duplicated strings won’t be hidden.\n• Show, but auto-translate them – Duplicated strings will be automatically translated but will stay visible to translators. Once the string is translated, its translation is automatically shared between the duplicates. Translators may review and re-translate those strings if necessary.\n• Show within a version branch (regular detection) – duplicates will be hidden only between version branches.\n• Show within a version branch (strict detection) – duplicates will be hidden only between version branches.\n• Hide (regular detection) – all duplicates will share the same translation.\n• Hide (strict detection) – all duplicates will share the same translation.\n\nStrict duplicates detection: When Crowdin compares strings, it looks at both the keys and the source texts.\n\nAdditionally, Crowdin offers a feature – Auto-substitution. It is meant to make the Translation Memory (TM) more useful by suggesting translations that are a better match. With this feature, tags, HTML entities, placeholders, numbers, and other things that can’t be translated are changed to the ones used in the source strings.\n\nOnce the project owner or manager turns on the feature in the project settings, everyone who is part of the project can use it. If you are not the owner or manager of the project, ask someone who is to help you. To turn on Auto-substitution, go to Project Settings, click on the General tab, scroll down to the Translation Memory section, and check the Enable Auto-Substitution box.\n\nUsually, the localization of an app starts when the resource files are sent to translators, either by email (please don’t)) or automatically. The resource file comes first, and you can move on to localization.\n\nLet’s switch this up and send strings directly from your design tool (like Figma, Sketch, or Adobe XD) to be translated. Crowdin’s design and development teams can work on UI localization without using resource files. It’s a new way to do localization.\n\nDesigners working on prototypes in Adobe XD, Figma, or Sketch can send strings to be translated by using keys and rules for dividing up text.\n\nBecause each localization string has its unique identifier, it’s easy for development teams to add the original and translated content to the codebase.\n\nAlso, if the source files in Crowdin are in a format other than Android XML and Strings, engineers can run the custom exporters and download files in the correct format. They can use either the Crowdin API or the Crowdin download targets command in CLI versions 3.4.0.\n\nCrowdin Bundles lets you upload a single source file (like Android XML) to your project, translate it, and then use bundles to export translations for multiple platforms by creating different file formats (Android XML for the Android app). You can add bundles and set them up so that you can export groups of strings in one of the file formats.\n\nCrowdin’s integration with design tools (Figma, Sketch, or Adobe XD) is an excellent way for designers to preview translated mockups, change them if needed, or let engineers know about the parts that should be scaled.\n\nFind out more about the Crowdin plugins for design teams and how they make it easier to localize user interfaces.\n\nYou don’t have to put out a new version of the app on Google Play every time you want to add a new language. Install Crowdin SDK on your app, and your Crowdin project will send you ready-to-go translations immediately. Three new features will make getting the latest translations directly from your Crowdin project’s distribution, automatically upload screenshots, and see what translations look like in the app in real-time.\n\nOver-The-Air Content Delivery - Crowdin can send new translations to your app over the air, so you don’t have to update your app on Google Play. The Crowdin SDK for Android has two extra parts that you can connect: a real-time preview of the translation and an easy way to upload and tag screenshots.\n\nReal-Time Preview - Crowdin lets translators see an instant preview of the translations they make on their app. LQA (linguistic quality assurance) should be made easier so your team can check the translated content in context.\n\nScreenshots - Project owners and managers can take screenshots in the app version where this component is turned on. Screenshots will automatically be added to the project if the source strings are marked.\n\nYou Know How to Do Localization Now\n\nWe’ve gone over everything you need to think about when you start tailoring your app for your target market. There are two common myths. The first is to think everyone will use your app in English. The second would be that you can handle localization without technology.\n\nCrowdin knows that the localization of your mobile app is a vital part of growing your market share and sales in other countries. We make it easy for you to localize your Android app, so you don’t have to deal with spreadsheets.\n\nSign up for a Crowdin or Crowdin Enterprise account to get started. Book a personal demo with our tech manager if you’d like to learn more about best practices and talk about the unique ways you work."
    }
]