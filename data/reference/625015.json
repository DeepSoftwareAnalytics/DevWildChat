[
    {
        "link": "https://php.net/manual/en/function.file-get-contents.php",
        "document": "file_get_contents() is the preferred way to read the contents of a file into a string. It will use memory mapping techniques if supported by your OS to enhance performance. If you're opening a URI with special characters, such as spaces, you need to encode the URI with urlencode().\n\nName of the file to read. The constant can be used to trigger include path search. This is not possible if strict typing is enabled, since is an int. Use instead. A valid context resource created with stream_context_create(). If you don't need to use a custom context, you can skip this parameter by . The offset where the reading starts on the original stream. Negative offsets count from the end of the stream. Seeking ( ) is not supported with remote files. Attempting to seek on non-local files may work with small offsets, but this is unpredictable because it works on the buffered stream. Maximum length of data read. The default is to read until end of file is reached. Note that this parameter is applied to the stream processed by the filters.\n\nThe function returns the read data or on failure. Warning This function may return Boolean , but may also return a non-Boolean value which evaluates to . Please read the section on Booleans for more information. Use the === operator for testing the return value of this function.\n\nAn level error is generated if cannot be found, is less than zero, or if seeking to the specified in the stream fails. When file_get_contents() is called on a directory, an level error is generated on Windows, and as of PHP 7.4 on other operating systems as well.\n\nExample #1 Get and output the source of the homepage of a website Example #2 Searching within the include_path The above example will output something similar to: // Open the file using the HTTP headers set above\n\n\n\nTip A URL can be used as a filename with this function if the fopen wrappers have been enabled. See fopen() for more details on how to specify the filename. See the Supported Protocols and Wrappers for links to information about what abilities the various wrappers have, notes on their usage, and information on any predefined variables they may provide. Warning When using SSL, Microsoft IIS will violate the protocol by closing the connection without sending a indicator. PHP will report this as \"SSL: Fatal Protocol Error\" when you reach the end of the data. To work around this, the value of error_reporting should be lowered to a level that does not include warnings. PHP can detect buggy IIS server software when you open the stream using the wrapper and will suppress the warning. When using fsockopen() to create an socket, the developer is responsible for detecting and suppressing this warning."
    },
    {
        "link": "https://stackoverflow.com/questions/66607500/php-file-get-contents-is-ignoring-the-request-body-when-making-a-get-request",
        "document": "I am trying to make a simple HTTP GET request to query Elasticsearch. The Elasticsearch syntax allow the use of a request body in a GET request to add addition query options. I am using the PHP function file_get_contents() to make the GET request.\n\nThe problem is that file_get_contents() seems to be ignoring the body of the request when making a GET request yet it works fine when using a POST request instead.\n\nHow can I get file_get_contents() to process the body of the GET request correctly? The code I am using is shown below.\n• I want to use file_get_contents() to do this, NOT php cURL, php Request2, or the elasticsearch-php library\n• I would like to keep this as a GET request, changing it to a POST request instead is not what I am after"
    },
    {
        "link": "https://stackoverflow.com/questions/33561979/how-do-i-retrieve-information-from-file-get-contentsphp-input",
        "document": "I am trying to fix a callbackurl and in the old system I could simply use a when trying to retrieve the data. Unfortunately that no longer seems to be possible.\n\nThe new system uses this line of code:\n\nAccording to the technical data sheet the is now simply called , but how do I use to retrieve it? Something like ?"
    },
    {
        "link": "https://w3schools.com/php/func_filesystem_file_get_contents.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://geeksforgeeks.org/how-to-post-data-using-file_get_contents-in-php",
        "document": "The file_get_contents() function in PHP is used to read the contents of a file and make HTTP requests using GET and get HTTP responses using POST methods. The HTTP POST request can be made using the $context parameter of the file_get_contents() function, which posts the specified data to the URL specified using the $path parameter. The following syntax is used to POST requests to the required path:\n• $path: A required parameter that specifies the URL to post data.\n• $include_path: It is an optional parameter that specifies if we wish to search for files in the included path while reading.\n• $context: It specifies the data in the form of a JSON stream to be posted to the URL.\n• $start: It is an optional parameter that is used to specify the starting point in the file for reading.\n• $max_length: It is an optional parameter that is used to specify the number of bytes to be read.\n\nTherefore, a content stream can be created and then, injected into the respective path. The data can contain information in the form of key-value pairs. The context stream is created by the stream_context_create($options) function with the parameters supplied in the $options argument. The parameters contain the ‘method’ consisting of either GET or POST and ‘content’ parameter containing the data that has to appear on the URL.\n\nThe code snippet indicates a sample program to post data to the URL using the file_get_contents() method. We create a folder by the name Demo which contains two files “index.php” and “demo1.php” and run it using the MAMP server.\n\n\n\n The following code is included in ‘index.php’.\n\nTo view the items in the content, the following code is written in ‘demo1.php’:\n\nThe code prints the following output on the specified URL:"
    },
    {
        "link": "https://stackoverflow.com/questions/39826454/how-do-i-send-json-request-and-post-form-data-request-together",
        "document": "So this is an API which should accept the following parameters in POST request:\n\nNow my problem is that i'm not able to send the form data and JSON data together in the same POST request. Since, the form-data uses and JSON needs to have I'm not sure how do I send both of them together. I'm using Postman.\n\nSo the api will call the function and I need to do something like this:\n\nBut instead I'm not able to get the JSON data and form data together.\n\nI have to do this to get JSON data only"
    },
    {
        "link": "https://stackoverflow.com/questions/9684315/php-get-put-request-body",
        "document": "I'm currently developing a Restful Json-API in PHP. I want to send a PUT-Request to to update a record. The data will be transferred as .\n\nI want to call the API with\n\nOn the server side, I'm not able the retrieve the request body. I tried\n\nbut this returns an empty string. Also a / combination doesn't work.\n\nWhen calling via POST, everything works great, I can read the json perfectly on the server side. But the API isn't Restful anymore. Does anyone have a solution for this? Is there another way to send and receive Json?\n\nbtw, I'm developing the API with the Slim Framework."
    },
    {
        "link": "https://lornajane.net/posts/2008/accessing-incoming-put-data-from-php",
        "document": "Recently I started writing a REST service. I began in the usual way, writing a php script, calling it with a GET request, accessing the variables using the PHP superglobal variable $_GET. I wrote code to handle a POST request and used the variables I found in $_POST. Then I tried to write a PUT request.\n\nPHP doesn’t have a built-in way to do this, and at first I was a little confused as to how I could reach this information. It turns out that this can be read from the incoming stream to PHP, php://input.\n\nThe above line provided me with a query string similar to what you might see on the URL with a GET request. key/value pairs separated by question marks. I was rescued from attempting to parse this monster with a regex by someone pointing out to me that parse_str() is intended for this purpose (seriously, I write a lot of PHP, I don’t know how I miss these things but its always fun when I do “discover” them) – it takes a query string and parses out the variables. Look out for a major health warning on str_parse() – by default it will create all the variables all over your local scope!! Pass in the second parameter though and it will put them in there as an associatvive array instead – I’d strongly recommend this approach and I’ve used it here with my $post_vars variable.\n\nThis loads the variable $post_vars with the associative array of variables just like you’d expect to see from a GET request.\n\nIts a bit of a contrived example but it shows use of the REQUEST_METHOD setting from the $_SERVER variable to figure out when we need to grab the post vars. Firstly, here’s the script:\n\nAnd here’s what happened when I request the same script using two different HTTP verbs. I’m using cURL to show the example simply because I think it shows it best.\n\nPurists will tell me that I shouldn’t be returning data from a PUT request, and they’d be right! But this does show how to access the incoming variables and detect which verb was being used. If you’re going to write a REST service then the correct naming of resources and the correct response to each resource being accessed in various ways is really important, but its a story I’ll save for another day. If you use this, or perhaps you access the variables another way, then do post a comment – there aren’t a lot of resources available on this topic for PHP."
    },
    {
        "link": "https://sitepoint.com/community/t/submitting-json-via-post-in-php/5023",
        "document": "I’m working on a project that involves a kiosk submitting JSON data via POST. While I’ve received JSON data and successfully parsed it I’ve never sent JSON data via post. I have to submit a json object that contains a client’s address, name etc… to a web address. Once that JSON object is received on the other end it will be parsed and read into a database. I’m aware of the json_encode, json_decode aspect. So here’s my questions:\n• How do I go about submitting the json object? Do I simply add it to a post element? For instance will I have a post element that is something like: “$_POST[jsonOBJ]” and I put my JSON into that POST element?\n• Since JSON is essentially text can I simply submit it as a string? There are lots of great tutorials out there on consuming JSON from a source but very little instructing people how to send JSON from PHP.\n\nHey thanks for the quick reply! Hmm that’s interesting the programmers I’m working with are insisting it be sent as a complete JSON object. So I’m more inclined to place the JSON object into a post array if possible. (Which it sounds like I can). Personally I like your method better however, probably because it follows convention and also because I’m more familiar with it. heh Any other advice, tips, help is appreciated!\n\nFor what they want you to do, you’ll probably need to extend the Object prototype (or your custom object’s prototype) with a toJsonString() method that converts the object to a JSON string. That would entail about the same amount of processing as converting it to individual POST variables, which process consists of building a query string and putting it in the request body. No real difference either way. I use the stdClass coercion in PHP to build an object from an array before JSON-encoding it because JavaScript has no notion of a hash or associative array - therefore it makes little sense to send a hash response to JavaScript.\n\nI’m sure you have your reasons, but why do you need to submit the data as JSON? Is there something wrong with using a normal form POST and dealing with it through the $_POST array? I’m working with another development team and they claim its easier for them to make changes later if they receive a JSON submission. Personally I think it’s a better choice to go the simplest route which would be a POST submission but I’m trying to determine how much work it is to submit a JSON object. Something I’ve never done before.\n\nCouple more questions about this process. Would something like this work:\n• Create the array of associated data, I’ll use the example from php docs:\n\n $arr = array (‘a’=>1,‘b’=>2,‘c’=>3,‘d’=>4,‘e’=>5);\n• Encode the array as a JSON object and save it to a value:\n\n $jsonOBJ = json_encode($arr)\n• Place the JSON object directly into a post array and send it off:\n\n $_POST[‘jsonResp’] = $jsonOBJ This is just an example to show my train of though it’s not meant to be code you can run. Also I’m using curl to submit the post data so I’ll add the insertion of JSON into post then.\n\nAh ok it’s starting to make sense, here’s another wrench to the whole discussion. The kiosk interface is flash based. So the process is something like so: actionscript submits post array (via ajax call) to —> php and curl —> curl then sends to client website for processing. My challenge is getting the json respons preped and sent. I’m thinking I’ll send a set of regular POST elements to php from actionscript since the tools to create and manipulate JSON in actionscript a very limited. I’ll then use PHP to JSONify (using json_encode) the post elements and then curl will send the json object off. Does that make sense to anyone or am I nuts?"
    },
    {
        "link": "https://w3schools.com/js/js_json_php.asp",
        "document": "A common use of JSON is to read data from a web server, and display the data in a web page.\n\nThis chapter will teach you how to exchange JSON data between the client and a PHP server.\n\nPHP has some built-in functions to handle JSON.\n\nObjects in PHP can be converted into JSON by using the PHP function json_encode():\n\nHere is a JavaScript on the client, using an AJAX call to request the PHP file from the example above:\n\nArrays in PHP will also be converted into JSON when using the PHP function json_encode():\n\nHere is a JavaScript on the client, using an AJAX call to request the PHP file from the array example above:\n\nPHP is a server side programming language, and can be used to access a database.\n\nImagine you have a database on your server, and you want to send a request to it from the client where you ask for the 10 first rows in a table called \"customers\".\n\nOn the client, make a JSON object that describes the numbers of rows you want to return.\n\nBefore you send the request to the server, convert the JSON object into a string and send it as a parameter to the url of the PHP page:\n• Define an object containing a \"limit\" property and value.\n• Send a request to the PHP file, with the JSON string as a parameter.\n• Wait until the request returns with the result (as JSON)\n• Display the result received from the PHP file.\n\nTake a look at the PHP file:\n• Convert the request into an object, using the PHP function .\n• Access the database, and fill an array with the requested data.\n• Add the array to an object, and return the object as JSON using the function.\n\nWhen sending data to the server, it is often best to use the HTTP method.\n\nTo send AJAX requests using the method, specify the method, and the correct header.\n\nThe data sent to the server must now be an argument to the method:\n\nThe only difference in the PHP file is the method for getting the transferred data."
    }
]