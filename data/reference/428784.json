[
    {
        "link": "https://w3schools.com/mysql/mysql_create_db.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://dev.mysql.com/doc/mysql/en/creating-database.html",
        "document": "If the administrator creates your database for you when setting up your permissions, you can begin using it. Otherwise, you need to create it yourself:\n\nUnder Unix, database names are case-sensitive (unlike SQL keywords), so you must always refer to your database as , not as , , or some other variant. This is also true for table names. (Under Windows, this restriction does not apply, although you must refer to databases and tables using the same lettercase throughout a given query. However, for a variety of reasons, the recommended best practice is always to use the same lettercase that was used when the database was created.)\n\nIf you get an error such as ERROR 1044 (42000): Access denied for user 'micah'@'localhost' to database 'menagerie' when attempting to create a database, this means that your user account does not have the necessary privileges to do so. Discuss this with the administrator or see Section 8.2, “Access Control and Account Management”.\n\nCreating a database does not select it for use; you must do that explicitly. To make the current database, use this statement:\n\nYour database needs to be created only once, but you must select it for use each time you begin a mysql session. You can do this by issuing a statement as shown in the example. Alternatively, you can select the database on the command line when you invoke mysql. Just specify its name after any connection parameters that you might need to provide. For example:\n\nin the command just shown is not your password. If you want to supply your password on the command line after the option, you must do so with no intervening space (for example, as , not as ). However, putting your password on the command line is not recommended, because doing so exposes it to snooping by other users logged in on your machine."
    },
    {
        "link": "https://stackoverflow.com/questions/2428416/how-to-create-a-database-from-shell-command-in-mysql",
        "document": "If you create a new database it's good to create user with permissions only for this database (if anything goes wrong you won't compromise root user login and password). So everything together will look like this:\n\nWhere:\n\n base_user is the name for user with all privileges (probably the root)\n\n base_user_pass it's the password for base_user (lack of space between -p and base_user_pass is important)\n\n new_db is name for newly created database\n\n new_db_user is name for the new user with access only for new_db\n\n new_db_user_pass it's the password for new_db_user"
    },
    {
        "link": "https://dev.mysql.com/doc/en/create-database.html",
        "document": "creates a database with the given name. To use this statement, you need the privilege for the database. is a synonym for .\n\nAn error occurs if the database exists and you did not specify .\n\nis not permitted within a session that has an active statement.\n\nEach specifies a database characteristic. Database characteristics are stored in the data dictionary.\n\nA database in MySQL is implemented as a directory containing files that correspond to tables in the database. Because there are no tables in a database when it is initially created, the statement creates only a directory under the MySQL data directory. Rules for permissible database names are given in Section 11.2, “Schema Object Names”. If a database name contains special characters, the name for the database directory contains encoded versions of those characters as described in Section 11.2.4, “Mapping of Identifiers to File Names”.\n\nCreating a database directory by manually creating a directory under the data directory (for example, with mkdir) is unsupported in MySQL 8.4.\n\nWhen you create a database, let the server manage the directory and the files in it. Manipulating database directories and files directly can cause inconsistencies and unexpected results.\n\nMySQL has no limit on the number of databases. The underlying file system may have a limit on the number of directories.\n\nYou can also use the mysqladmin program to create databases. See Section 6.5.2, “mysqladmin — A MySQL Server Administration Program”."
    },
    {
        "link": "https://geeksforgeeks.org/mysql-create-database-statement",
        "document": "The MySQL CREATE DATABASE statement is used to create a new database. It allows you to specify the database name and optional settings, such as character set and collation, ensuring the database is ready for storing and managing data.\n\nIn this article, we are going to learn how we can create databases in the MySQL database management system through the command line client tool and the MySQL Workbench application. We will provide a step-by-step tutorial to create databases in both of these applications.\n\nThe MySQL Command Line Client allows you to create a database using the CREATE DATABASE statement. By entering SQL commands directly, users can efficiently manage databases, tables, and data, making it a powerful tool for database administration.\n• Nameof_database : The name of the database to be created.\n• IF NOT EXISTS : Optional; checks if a database with the same name already exists to prevent an error.\n• Nameof_charset : Optional; specifies the character set for the database.\n• Nameof_Collation : Optional; specifies the collation for the database.\n\nHow to Create a Database Using the MySQL Command Line Client\n\nThe command line client comes as a default tool when you install MySQL on your system. You can follow this article if you want a step-by-step guide to installing MYSQL on your systems.\n\nThe MYSQL command line client is a command line interface that allows the users to directly interact with the MYSQL database server directly through the command. It provides a text-based environment to the users for executing the SQL queries directly and allows the users to manage their databases as well. To create a database through the MYSQL command line client follows the below steps:\n\n1. Search for MYSQL Command line Client at the start.\n\n2. Open the application and then Enter your password.\n\n3. Run the following command to check the existing databases in the system.\n\n4. After that run the following command to create a database of your choice.\n\nIf you see the following output then you can ensure that your database was successfully created.\n\n5. Again run the SHOW Databases command and you will see your database is created.\n\n6. Run the following command to use the database you have just created.\n\nThe MySQL Workbench is a visual database design and management tool that provides a GUI for interacting with MySQL databases. It is suitable for users who prefer a visual interface over a command-line tool.\n\nHow to Create Database Using the MySQL Workbench Application\n\nYou can follow this article if you want to install MYSQL Workbench on your systems.\n\nThe MySQL Workbench is a visual database design and management tool that provides a user-friendly Graphical user interface(GUI) to the users through which they can interact with the MySQL database directly. This application is beneficial for those users who prefer a visual approach to the development of databases rather than command-line interfaces. To create a database through MySQL Workbench follow the below steps:\n\n2. Click on the following icon to create a local instance for your database.\n\n3. Enter Local as your connection name and click on the Test connection button.\n\n4. Enter your Password. The password should be the same one you set during the MYSQL installation.\n\n5. If the connection was successful then you will see the following output.\n\n6. Click on the Local instance you created.\n\n7. Click on this icon to create the database schema.\n\n8. Enter the name of your database here select the optional charset and collation values if you want and then click on apply.\n\n\n\n9. Click on the apply button don't change any default settings here.\n\n10. Click on the finish button to finish the database creation.\n\n11. You will be able to see your created database on the left panel of your screen.\n\n12. Right-click on the database you created and click on Set, as Default Schema to use your database. Now your database is ready to use.\n\nIn this article, we have learned how we can create databases in MYSQL. We have explored 2 methods step by step which allow the users to create databases in MYSQL. The choice of method completely depends on the user, if the user is not comfortable with the command line environment then they can use the second method of MYSQL workbench to create the databases they want. We hope this article has helped you to learn about the CREATE Database statement in MYSQL."
    },
    {
        "link": "https://dev.mysql.com/doc/en/show-databases.html",
        "document": "lists the databases on the MySQL server host. is a synonym for . The clause, if present, indicates which database names to match. The clause can be given to select rows using more general conditions, as discussed in Section 28.8, “Extensions to SHOW Statements”.\n\nYou see only those databases for which you have some kind of privilege, unless you have the global privilege. You can also get this list using the mysqlshow command.\n\nIf the server was started with the option, you cannot use this statement at all unless you have the privilege.\n\nMySQL implements databases as directories in the data directory, so this statement simply lists directories in that location. However, the output may include names of directories that do not correspond to actual databases.\n\nDatabase information is also available from the table. See Section 28.3.31, “The INFORMATION_SCHEMA SCHEMATA Table”.\n\nBecause any static global privilege is considered a privilege for all databases, any static global privilege enables a user to see all database names with or by examining the table of , except databases that have been restricted at the database level by partial revokes."
    },
    {
        "link": "https://kinsta.com/blog/list-mysql-databases",
        "document": "MySQL is one of today’s most widely used relational database management systems (RDBMS). It’s a robust database platform that allows for creating and managing scalable databases, mainly using a structured query language (SQL).\n\nThe MySQL server is the environment in which the databases reside — and where they are accessed. As a server administrator, you will often need to retrieve details about this environment — listing the databases that live on the server, displaying tables from a particular database, viewing user roles and privileges, accessing constraints, and so on.\n\nThis article will explain the ins and outs of how to list MySQL databases via the command prompt.\n\nYou must have the MySQL server running on your local machine to get started. If you don’t have MySQL, there are a few ways to install it:\n• Install WAMPServer, XAMPP, MAMP, or any other software distribution stack that includes MySQL.\n• Download and run the MySQL installer directly from their official website, going through the setup process to configure and install the MySQL server and other tools.\n\nTo conveniently run MySQL commands using the command line, you’ll need to add the MySQL executable’s path to your system’s environment. If you installed MySQL using option two, this step is unnecessary, so feel free to skip the next section.\n\nAdd the MySQL Path To Your System’s Variables Environment\n\nThis section guides you on adding the MySQL executable path to your system’s variable environment if you’re running XAMPP or WAMP on a Windows computer.\n\nFirst, launch your Windows file explorer and navigate to This PC. Click the drive where you’ve installed the WAMP or XAMPP package (C:).\n\nIf you’re running XAMPP, navigate to xampp > mysql > bin and copy the full path to the bin folder. For WAMP, navigate through {your-wamp-version} > bin > mysql > {your-mysql-version} > bin to its full path.\n\nClick the Start menu and search for “path.” Click Edit the system environment variable.\n\nThen, click Environment Variables under Startup and Recovery, select the PATH variable and click Edit.\n\nNext, click New and paste the full path to your MySQL executable (which you copied earlier).\n\nThen, save the changes by clicking OK.\n\nNow that the path has been added, you can execute MySQL commands in the terminal.\n\nTo list MySQL databases, the user must be authorized to access all databases, or you must set a global privilege that grants access to all users.\n\nMake sure your MySQL server is running before logging in via the command prompt:\n\nNOTE: replace with your username. The default username for MySQL is , and the password is empty (there’s no password by default).\n\nNow that you’re logged in, you can list MySQL databases present in the server by executing the command:\n\nIn return, you get all the databases present in the storage:\n\nOut of the six databases returned, and are the default databases that are automatically generated when you install MySQL.\n\nThe database is a non-modifiable database that stores all the information related to databases and other objects (views, user privileges, tables, constraints, etc.) stored in the MySQL server.\n\nPreviously, you returned all of the databases on the MySQL server with , but you often have to filter the database output, mainly when there are many databases on the server.\n\nThe clause filters the result of based on a specified pattern. Here’s the general syntax:\n\nIt must be a string representing the pattern you want to match. The string must end with the percentage symbol, , which denotes one or more characters.\n\nFor example, if you want to display just the databases whose names start with the letter , you do so by running the following:\n\nEarlier, you saw how the database stores all the information related to databases, tables, and other objects in the MySQL server environment.\n\nThe database makes use of the schemata table to store information about all databases. For database filtering, you can perform a complex search to query the schema table for specific databases.\n\nFor example, if you want databases whose names start with either “samp” or “word,” you can combine several other clauses to make a complex query:\n\nIn addition, you have the table from the database, which contains information about all tables. Similarly, you can perform a query to retrieve only the tables that match a specified pattern.\n\nFor example, the following query returns the schema information of only the WordPress tables — only the tables whose names start with “wp_”:\n\nOther tables found in include , , , , and .\n\nOne of the most common causes of errors when executing SQL is the failure to use a semicolon at the end of statements.\n\nAnother is using an invalid SQL syntax or an incorrectly spelled table/column name. To avoid this, cross-check the table or column name to ensure it is spelled correctly. Be sure to cross-check your syntax as well.\n\nHere are some other best practices to keep in mind.\n\nWhen writing SQL code, always use uppercase for SQL keywords and lowercase for table names and column names. This makes your code more readable and less susceptible to errors.\n\nSo, instead of this:\n\nAvoid using in your SQL queries. Your request is unclear because you can’t always know what it will return. Instead, specify the columns you want to select from the table.\n\nSo instead of this:\n\nFinally, one more tip to make finding errors easier is to indent your code. It makes it more readable!\n\nAlternatively, you can choose to manage your databases without writing SQL through the use of a database manager. This allows users access to database management functions without needing to write SQL queries. This software connects to a MySQL server and provides a user interface to expose the database functions. Once connected, the UI will show all databases on the server. The look and feel vary across management tools, but the process is similar.\n\nSeveral tools are available to choose from, including phpMyAdmin and Adminer, both of which are accessible through DevKinsta. The default management tool for DevKinsta is Adminer, as it is lightweight, easy, and fast, but phpMyAdmin can be accessed with ease.\n\nAs a server administrator, you need to be able to efficiently and accurately retrieve details about the databases on your MySQL server. The abilities to see which databases are on the server, view specific tables and the information from within them, and access information about user roles and privileges are all crucial tasks. Fortunately, using SQL from your command line can make this all a breeze.\n\nWhen your database management needs to stretch beyond querying tables, Kinsta can help. Learn more about our scalable database hosting options today!"
    },
    {
        "link": "https://devart.com/dbforge/mysql/studio/how-to-show-all-database-list-in-mysql.html",
        "document": "MySQL SHOW DATABASES command to get list of databases\n\nRun the following query to show list of databases:\n\nYou can run this statement from MySQL Command Line Client, MySQL Shell, as well as from any GUI tool that supports SQL—for example, dbForge Studio for MySQL.\n\nMySQL returns the results in a table with one column—Database. The databases are ordered in alphabetical order. The summary line tells you how many rows (or databases) there are.\n\nNote Unless you have the global SHOW DATABASES privilege, you will see only those databases you have some kind privilege for. You can also grant all privileges in MySQL for the required user so that they could see all the databases on a server."
    },
    {
        "link": "https://dev.mysql.com/doc/mysql/en/getting-information.html",
        "document": "What if you forget the name of a database or table, or what the structure of a given table is (for example, what its columns are called)? MySQL addresses this problem through several statements that provide information about the databases and tables it supports.\n\nYou have previously seen , which lists the databases managed by the server. To find out which database is currently selected, use the function:\n\nIf you have not yet selected any database, the result is .\n\nTo find out what tables the default database contains (for example, when you are not sure about the name of a table), use this statement:\n\nThe name of the column in the output produced by this statement is always , where is the name of the database. See Section 15.7.7.39, “SHOW TABLES Statement”, for more information.\n\nIf you want to find out about the structure of a table, the statement is useful; it displays information about each of a table's columns:\n\nindicates the column name, is the data type for the column, indicates whether the column can contain values, indicates whether the column is indexed, and specifies the column's default value. displays special information about columns: If a column was created with the option, the value is rather than empty.\n\nis a short form of . See Section 15.8.1, “DESCRIBE Statement”, for more information.\n\nYou can obtain the statement necessary to create an existing table using the statement. See Section 15.7.7.11, “SHOW CREATE TABLE Statement”.\n\nIf you have indexes on a table, produces information about them. See Section 15.7.7.23, “SHOW INDEX Statement”, for more about this statement."
    },
    {
        "link": "https://stackoverflow.com/questions/924729/how-to-best-display-in-terminal-a-mysql-select-returning-too-many-fields",
        "document": "has many fields and this results in many columns trying to be displayed in the terminal. The fields wrap onto the next line so it is very hard to line up column titles with field values.\n\nWhat solutions are there for viewing such data in terminal?\n\nI don't have nor want access to phpMyAdmin - or any other GUI interfaces. I'm looking for command-line solutions such as this one: Save MySQL Query results into text or CVS file"
    }
]