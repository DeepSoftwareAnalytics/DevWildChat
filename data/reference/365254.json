[
    {
        "link": "https://github.com/SixLabors/ImageSharp.Drawing/discussions/124",
        "document": "To see all available qualifiers, see our documentation .\n\nSaved searches Use saved searches to filter your results more quickly\n\nWe read every piece of feedback, and take your input very seriously.\n\nYou signed in with another tab or window. Reload to refresh your session.\n\nYou signed out in another tab or window. Reload to refresh your session.\n\nYou switched accounts on another tab or window. Reload to refresh your session."
    },
    {
        "link": "https://docs.sixlabors.com/api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.DrawTextExtensions.html",
        "document": "Draws the text using the given options onto the image filled via the brush then outlined via the pen.\n\nDraws the text using the given drawing options onto the image filled via the brush then outlined via the pen.\n\nDraws the text using the given options onto the image filled via the brush then outlined via the pen."
    },
    {
        "link": "https://stackoverflow.com/questions/75038378/sixlabors-image-sharp-how-to-write-text-to-image-c-sharp",
        "document": "I have searched for a long time. I know it is part of the extended package, but I cannot seem to find any examples. Even a hello world example on how to write text to an Image Sharp image. Thanks for any help."
    },
    {
        "link": "https://github.com/SixLabors/ImageSharp/issues/811",
        "document": "To see all available qualifiers, see our documentation .\n\nSaved searches Use saved searches to filter your results more quickly\n\nWe read every piece of feedback, and take your input very seriously.\n\nYou signed in with another tab or window. Reload to refresh your session.\n\nYou signed out in another tab or window. Reload to refresh your session.\n\nYou switched accounts on another tab or window. Reload to refresh your session."
    },
    {
        "link": "https://nuget.org/packages/SixLabors.ImageSharp/1.0.3",
        "document": ""
    },
    {
        "link": "https://github.com/SixLabors/ImageSharp/discussions/1510",
        "document": "To see all available qualifiers, see our documentation .\n\nSaved searches Use saved searches to filter your results more quickly\n\nWe read every piece of feedback, and take your input very seriously.\n\nYou signed in with another tab or window. Reload to refresh your session.\n\nYou signed out in another tab or window. Reload to refresh your session.\n\nYou switched accounts on another tab or window. Reload to refresh your session."
    },
    {
        "link": "https://stackoverflow.com/questions/76023548/imagesharp-watermark-net6",
        "document": "I found few examples on how to add a Watermark on a ImageSharp Image, but I get this error:\n\nI tried few more examples but with the same result. The official code is not up to date anymore."
    },
    {
        "link": "https://adamrussell.com/adding-image-watermark-text-in-c-with-imagesh",
        "document": "There may be times you want to add a watermark, or a bit of text, to an image programmatically. Here's how to do that with ImageSharp. As of the this writing, it requires a couple pre-release NuGet packages, but the ImageSharp libraries seem to work pretty well for at least basic use. Note that they do change the API while the libraries are in pre-release/beta, so the code below may not work by the time the libraries get to release versions, though hopefully any changes will be small.\n\nHere are the NuGet packages you'll want to reference (you'll need to check the Include prerelease checkbox if doing this through the UI if you do this near the time of this article):\n\nAnd here's some example code to load an image and draw some watermark text on it:\n\nSome of this is a little contrived for example purposes; e.g., you might not want to draw such a large watermark on an image. The example draws text of a simple copyright notice in the bottom right corner of the image. It does this by measuring the text to be drawn, then applying padding against the image dimensions. One downside to the code above is that it uses a particular font family name, and the font needs to be installed on the system, otherwise the code will throw an exception. from the example is free, and can be easily installed on Windows, macOS, or Linux (if you want to run the above code, you'll need to make sure Roboto is installed, or just change to something that's installed on your system).\n\nHere's an example output image from a photo I took of a fiddler crab:"
    },
    {
        "link": "https://stackoverflow.com/questions/58988842/how-to-add-image-watermark-using-sixlabors-imagesharp-package-in-net-core",
        "document": "The code being used to create image using SixLabors.ImageSharp(1.0.0-beta0006) nuget is as below\n\nI also want to add an image watermark on the current image with some opacity. I tried several ways but was unable to do it. Please let me know how this can be done."
    },
    {
        "link": "https://khalidabuhakmeh.com/aspnet-core-placeholder-images-with-imagesharp",
        "document": "An essential part of building web applications is understanding what elements may look like in an evolving user interface. For most users, the web is a visual medium with complex components that include many images. This trend has accelerated since the introduction of broadband in more regions worldwide. Who doesn’t love a pretty-looking picture on a website? That said, when you first start building your applications, image assets might be far and few between and may not be essential to the structure of your web application.\n\nIn this short post, we’ll see how to use ImageSharp.Web and ASP.NET Core to build a local placeholder image service to help you prototype an expanding UI component library.\n\nPlaceholder Images and Why Not A Service?\n\nPlaceholder images help you fill out the structure of an HTML component. If you’ve seen any HTML component library, such as Bootstrap, you’re likely familiar with some of the components requiring an image element. The most notable is the card component, where an image is at the top of the component, followed by a title, subtitle, and content.\n\nThese components don’t look right until you have an image placed in them, so what is one to do? Well, in most cases, you’d likely reach for an image placeholder service. Here are a few:\n\nEasy enough, right? A few drawbacks should make you cautious about using these third-party services.\n• These services can have intermittent issues that cause your layout to break.\n• Slow transfer speeds of placeholder images can make your app seem slow to clients. In some scenarios, slow images can pause the rendering of your page until the client has fully downloaded the image.\n• You could be sending cookie data to an unknown third party.\n\nIssue 2 is particularly problematic if you’re doing automated testing or have performance alerts for page rendering times. These warnings can lead you to spend hours looking for performance bottlenecks in your code when the issue is with these placeholder services.\n\nLuckily for you, there’s an effortless way of creating a local placeholder image service with ASP.NET Core and ImageSharp.Web. But before we get to code, you’ll need an abstract image that can be stretched and resized without affecting the image’s content. In my case, I’ve created one in my favorite image editor. Feel free to use it.\n\nOk, let’s get to some code.\n\nIn a new ASP.NET Core project, you’ll want to add the following NuGet dependency of .\n\nOnce you’ve installed the package, you’ll want to set up the ASP.NET Core pipeline. First, you’ll register the ImageSharp services, then add the middleware to your application’s request pipeline.\n\nIt’s important that you register ImageSharp middleware before the static file middleware, or else ASP.NET Core won’t process images from your static folders properly. Next, let’s create a specialized tag helper to make adding placeholder images more straightforward in our Razor views.\n\nAt this point, you should create a folder named under your folder and add the placeholder image there.\n\nFinally, let’s add our tag helper to our so we can reference the new tag in all of our Razor views. Be sure to adjust the namespace to match your particular project’s namespace.\n\nLet’s use the tag in some Razor views.\n\nCool! Let’s also see what it looks like rendered.\n\nIf you look at the developer tools at the bottom of the screenshot, you’ll notice that each image is rendered precisely for the use case it is applied within. You also have the added benefit of caching each image, so your app stays more performant as more images are processed. Finally, all images are processed and served locally, so you can accurately represent the performance of your application profile.\n\nAdding The Dimensions To The Image\n\nWhile not completely necessary, adding the dimensions of your placeholder image can help debug layout issues faster than without them. Luckily, ImageSharp.Web has an extensible command pipeline that you can use to your advantage.\n\nThe first step is to create a class. This will give us an opportunity to add additional context to our original placeholder image. Before pasting this class into your project you’ll need a few additional packages in your project: and .\n\nNow, you’ll need to create a class. Thanks to Adam Russel for the watermark blog post. You can modify the below code to load custom fonts, change sizes of the dimensions, and the location. For this use case, I felt having the values in the bottom-right were fine.\n\nOnce you have the watermark processor in your project, you’ll need to add the processor to the ImageSharp middleware pipeline. Back in your file, you’ll need to call .\n\nFinally, let’s update the implementation to include the additional command that the expects. Note, you could modify the value of to allow for configurability of the watermark.\n\nLet’s see what the updated placeholders look like now.\n\nI hope you enjoyed this short post. As you can see, with a few bits of code, you can create a local placeholder service designed specifically for your needs. Suppose you want to go the extra mile. In that case, you can explore the ImageSharp APIs and develop processors to generate custom images and watermarks to help uniquely identify image placeholders.\n\nAgain, thank you for reading, and I hope you share this post with friends and colleagues. Also, remember to follow me on Twitter at @buhakmeh for more #dotnet news and discussions."
    }
]