[
    {
        "link": "https://w3schools.com/sql/sql_groupby.asp",
        "document": "The statement groups rows that have the same values into summary rows, like \"find the number of customers in each country\".\n\nThe statement is often used with aggregate functions ( , , , , ) to group the result-set by one or more columns.\n\nBelow is a selection from the \"Customers\" table in the Northwind sample database:\n\nThe following SQL statement lists the number of customers in each country:\n\nThe following SQL statement lists the number of customers in each country, sorted high to low:\n\nBelow is a selection from the \"Orders\" table in the Northwind sample database:\n\nAnd a selection from the \"Shippers\" table:\n\nGROUP BY With JOIN Example\n\nThe following SQL statement lists the number of orders sent by each shipper:\n\nSELECT Shippers.ShipperName, COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders\n\nLEFT JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID\n\n GROUP BY ShipperName; Try it Yourself »"
    },
    {
        "link": "https://w3schools.com/sql/sql_Groupby.asp",
        "document": "The statement groups rows that have the same values into summary rows, like \"find the number of customers in each country\".\n\nThe statement is often used with aggregate functions ( , , , , ) to group the result-set by one or more columns.\n\nBelow is a selection from the \"Customers\" table in the Northwind sample database:\n\nThe following SQL statement lists the number of customers in each country:\n\nThe following SQL statement lists the number of customers in each country, sorted high to low:\n\nBelow is a selection from the \"Orders\" table in the Northwind sample database:\n\nAnd a selection from the \"Shippers\" table:\n\nGROUP BY With JOIN Example\n\nThe following SQL statement lists the number of orders sent by each shipper:\n\nSELECT Shippers.ShipperName, COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders\n\nLEFT JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID\n\n GROUP BY ShipperName; Try it Yourself »"
    },
    {
        "link": "https://stackoverflow.com/questions/6424092/how-to-use-group-by-clause-when-we-use-aggregate-function-in-the-joins",
        "document": "I want to join three tables and to calculate the Sum(Quantity) of the Table A. I tried something and I get the desired output. But still I have confusion based on aggregate function and Group By clause.\n\nWhile calculating the sum value by joining two or more tables, what are the columns we need to mention in the Group By clause and why do we need to give those columns?\n\nFor Example: Here is my table and the desired query.\n\nI want to get the Sum(Quantity) based on , , and .\n\nI wrote the following query and it's working fine. But if I remove any column in the Group By clause, it doesn't give the desired result. Why? What does the Group By clause do here? How to specify the Group By clause when using Aggregate function? Here is my Query.\n\nAny one please give suggestion about the Group By Clause by considering this as an example."
    },
    {
        "link": "https://stackoverflow.com/questions/20561335/multiple-inner-join-with-group-by-and-aggregate-function",
        "document": "I'm back with another question. I've been tinkering with this for 1 and a half days now and still no luck. So I have the tables below.\n\nI currently can achieve this result.\n\nHowever, I'd like to achieve this result shown below.\n\nI'd like to check Table3 first if it has a 'Shipped' Field2 then it includes everything in Table1 with 'Active' Field4. It should not include 'Cancelled' Field4. And if Table3 has a Field2 of Pending, it should also not include it. I'd appreciate any little help. Thank you."
    },
    {
        "link": "https://geeksforgeeks.org/how-to-group-and-aggregate-data-using-sql",
        "document": "In SQL, grouping and aggregating data are essential techniques for analyzing datasets. When dealing with large volumes of data, we often need to summarize or categorize it into meaningful groups. The combination of the clause and aggregate functions like , , , , and makes it easy to perform such tasks.\n\nIn this article, we will explain how to group and aggregate data in SQL to make our queries more efficient and insightful.\n\nGrouping Data: The clause in SQL is used to arrange identical data into groups based on one or more columns. Once data is grouped, aggregate functions can be used to summarize the information within those groups.\n\nAggregating Data: Aggregate functions perform calculations on multiple rows of data and return a single result. Common aggregate functions include , , , , and . These help us get summaries like totals, averages, and counts for different categories or groups\n\nLet’s consider the table in a database. This table stores information about sales orders, including the client number, order date, and order status.The table contains details about orders made by clients, including their order status.\n\nLet’s say we want to count how many orders are still “In Process” for each client. To do this, we use the function along with\n\nIn this case, we grouped the data by and counted how many orders are in the “In Process” status for each client. From this output, we can easily see that clients and each have one order that is still “In Process“.\n\nNow, let’s move to another table called . This table contains sales data for different places, where each sale is associated with a location and a price. The table stores data on products sold, including the location and price of each item sold.\n\nLet’s say we want to calculate the total revenue from sales in different places. we will use the function along with the clause to calculate the total sales price for each place.\n\nSQL allows us to use multiple aggregate functions in a single query. This can provide a more comprehensive view of your data. In this example, we will use the , , and functions to calculate the average, maximum, and minimum price for sales in each place.\n\nGrouping and aggregating data in SQL are powerful techniques for summarizing large datasets. By using the clause along with aggregate functions like , , , , and , we can efficiently analyze and summarize our data in meaningful ways. With this knowledge, we can start writing more efficient SQL queries, performing complex analyses, and gaining deeper insights from our datasets.\n\nCan you GROUP BY an aggregate function in SQL?\n\nHow do you group data in an SQL query?\n\nWhat is the difference between aggregate and GROUP BY in SQL?"
    },
    {
        "link": "https://mode.com/sql-tutorial/sql-case",
        "document": "Starting here? This lesson is part of a full-length tutorial in using SQL for Data Analysis. Check out the beginning.\n\nIn this lesson we'll cover:\n\nFor the next few lessons, you'll work with data on College Football Players. This data was collected from ESPN on January 15, 2014 from the rosters listed on this page using a Python scraper available here. In this particular lesson, you'll stick to roster information. This table is pretty self-explanatory—one row per player, with columns that describe attributes for that player. Run this query to check out the raw data:\n\nThe statement is SQL's way of handling if/then logic. The statement is followed by at least one pair of and statements—SQL's equivalent of IF/THEN in Excel. Because of this pairing, you might be tempted to call this SQL , but is the accepted term.\n\nEvery statement must end with the statement. The statement is optional, and provides a way to capture values not specified in the / statements. is easiest to understand in the context of an example:\n• The statement checks each row to see if the conditional statement— is true.\n• For any given row, if that conditional statement is true, the word \"yes\" gets printed in the column that we have named .\n• In any row for which the conditional statement is false, nothing happens in that row, leaving a null value in the column.\n• At the same time all this is happening, SQL is retrieving and displaying all the values in the and columns.\n\nThe above query makes it pretty easy to see what's happening because we've included the statement along with the column itself. You can check each row to see whether meets the condition and then see the result in the column generated using the statement.\n\nBut what if you don't want null values in the column? The following query replaces those nulls with \"no\":\n\nYou can also define a number of outcomes in a statement by including as many / statements as you'd like:\n\nIn the above example, the / statements will get evaluated in the order that they're written. So if the value in the column of a given row is 300, it will produce a result of \"over 250.\" Here's what happens if the value in the column is 180, SQL will do the following:\n• Check to see if is greater than 250. 180 is not greater than 250, so move on to the next /\n• Check to see if is greater than 200. 180 is not greater than 200, so move on to the next /\n• Check to see if is greater than 175. 180 is greater than 175, so record \"175-200\" in the column.\n\nWhile the above works, it's really best practice to create statements that don't overlap. and overlap for every value greater than 250, which is a little confusing. A better way to write the above would be:\n\nYou can also string together multiple conditional statements with and the same way you might in a clause:\n• The statement always goes in the clause\n• must include the following components: , , and . is an optional component.\n• You can make any conditional statement using any conditional operator (like ) between and . This includes stringing together multiple conditional statements using and .\n• You can include multiple statements, as well as an statement to deal with any unaddressed conditions.\n\n's slightly more complicated and substantially more useful functionality comes from pairing it with aggregate functions. For example, let's say you want to only count rows that fulfill a certain condition. Since ignores nulls, you could use a statement to evaluate the condition and produce null or non-null values depending on the outcome:\n\nNow, you might be thinking \"why wouldn't I just use a clause to filter out the rows I don't want to count?\" You could do that—it would look like this:\n\nBut what if you also wanted to count a couple other conditions? Using the clause only allows you to count one condition. Here's an example of counting multiple conditions in one query:\n\nThe above query is an excellent place to use numbers instead of columns in the clause because repeating the statement in the clause would make the query obnoxiously long. Alternatively, you can use the column's alias in the clause like this:\n\nNote that if you do choose to repeat the entire statement, you should remove the column naming when you copy/paste into the clause:\n\nCombining statements with aggregations can be tricky at first. It's often helpful to write a query containing the statement first and run it on its own. Using the previous example, you might first write:\n\nThe above query will show all columns in the table, as well as a column showing the results of the statement. From there, you can replace the with an aggregation and add a clause. Try this process if you struggle with either of the following practice problems.\n\nIn the previous examples, data was displayed vertically, but in some instances, you might want to show data horizontally. This is known as \"pivoting\" (like a pivot table in Excel). Let's take the following query:\n\nIt's worth noting that going from horizontal to vertical orientation can be a substantially more difficult problem depending on the circumstances, and is covered in greater depth in a later lesson."
    },
    {
        "link": "https://stackoverflow.com/questions/72695222/sql-how-to-categorize-a-case-statement",
        "document": "In this sample dataset, I have some Colors : \"Red\" and \"Blue\" and some Fruit: \"Apple\" and \"Grapes\" associated with a person/name.\n\nMy goal is to add a column for each of these groupings, called \"Colors\" and Fruit. These newly added columns would count +1 whenever the value is > 0 for each of their respective grouping.\n\nFor example if either \"Red\" or \"Blue\" contain a value > 0, we will add +1 to Colors. For John Smith, since both the Red and Blue columns contain a value > 0, the Colors column will be 2. Here is the expected output:\n\nI know case statements can add 1 or 0, but how do we do this when we have 2 columns per grouping?"
    },
    {
        "link": "https://datalemur.com/sql-tutorial/sql-case-statement",
        "document": "The statement in SQL allows you to shape, transform, manipulate, and filter data based on specified conditions. It's a conditional expression tool that lets you customize query results, create new categories, and apply conditional logic.\n\nHere's what we'll be covering:\n\nThe statement in the statement is used to create new columns, categorize data, or perform calculations based on specified conditions. It helps tailor the output of your query to meet specific requirements.\n\nThe statement evaluates the specified conditions sequentially and returns a value when it encounters the first true condition. If none of the conditions are met, the clause provides a default value.\n\nUsing CASE Statement in WHERE Clause\n\nThe statement in the clause is used to filter rows based on specified conditions within the dataset.\n\nThe statement evaluates conditions for each row, determining whether it meets the filtering criteria. Rows satisfying the conditions specified in the statement are included in the result.\n\nIn this tutorial, we'll explore different ways of using the statement with the dataset. This dataset contains information about Marvel Avengers actors and their associated social media presence.\n\nHere's an example that determines the popularity category of each Marvel character based on their number of followers (\"Popular\" if they have 500,000 or more followers).\n\nWe can create groups using multiple conditions in the statement. For example, we can categorize the Marvel actors based on their social media engagement rates as follows:\n• High Engagement: Engagement rate greater than or equal to 8.0\n\nUsing CASE-ELSE Clause with CASE Statement in SELECT Statement\n\nWhen none of the previous conditions match, we can use the clause to provide a default value.\n\nFor the Marvel Avengers characters, let's classify their into three categories based on their number of followers:\n• For characters with 700,000 or more followers, label them as \"Highly Popular.\"\n• For characters with followers between 300,000 and 699,999, label them as \"Moderately Popular.\"\n• For characters with fewer than 300,000 followers, label them as \"Less Popular.\"\n\nNow, it's your turn to practice writing a SQL query in an exercise which uses and statements.\n\nAnalyze the marvel actors dataset, and categorize them based on the average number of likes:\n• \"Super Likes\" for characters with an average of 15,000 or more likes.\n• \"Good Likes\" for characters with an average between 5,000 and 14,999 likes (inclusive).\n• \"Low Likes\" for characters with an average of fewer than 5,000 likes.\n\nFiltering Conditions with CASE Statement in WHERE Clause\n\nSuppose we want to filter the dataset based on the social media platforms, but we want to include an option to filter based on different criteria for each platform. We'll use the statement in the clause to achieve this.\n• For Instagram, we're filtering actors with 500,000 or more followers.\n• For Twitter, we're filtering actors with 200,000 or more followers.\n• For other platforms, we're filtering actors with 100,000 or more followers.\n\nThe aggregate function within a statement is used to count occurrences based on various conditions within the dataset. If you need a refresher, check out our SQL Aggregate Functions tutorial with COUNT(), SUM() and AVG()!\n\nAssume we're given the following conditions:\n• Assign to if number of actors with followers greater than or equal to 500,000 followers.\n• Assign to if number of actors with followers less than 500,000 followers.\n\nThe aggregate function within a statement allows us to add values based on specific conditions within the dataset, providing a cumulative value.\n\nIn the example below, we're adding up the followers of actors based on their engagement rates grouped by platform:\n• If the engagement rate is 8.0 or higher, add the followers in the \"high_engagement_followers_sum\".\n• Otherwise, add them in the \"low_engagement_followers_sum\".\n\nLet's use the statement, along with function to solve a real SQL Interview Question from NYTimes. In this SQL assesment, you're given a table on user viewership categorized by device type where the three types are laptop, tablet, and phone.\n\nWrite a query that calculates the total viewership for laptops and mobile devices where mobile is defined as the sum of tablet and phone viewership. Output the total viewership for laptops as and the total viewership for mobile devices as .\n\nBased on the example output, can you give the question a go?\n\nThe aggregate function within a statement calculates averages based on specific conditions within the dataset, providing an average value.\n\nLet's say we're calculating the average number of followers of actors based on their engagement rates. If the engagement rate is 8.0 or higher, assign to \"high_engagement_followers\", otherwise, assign to \"low_engagement_followers\" for each platform.\n\nUp until now, we've focused on analyzing a single table of data at a time. Whether it be the , , or datasets, we've only been applying all these fancy arithmetic operators, hunting down nulls, and applying to data that come from a single table.\n\nIt's time to change it up, and start analyzing data from TWO tables using the keyword!"
    },
    {
        "link": "https://hightouch.com/sql-dictionary/sql-case",
        "document": "What is the SQL CASE Function?\n\nThe SQL CASE function is a powerful and versatile conditional expression that allows you to perform conditional logic within SQL queries. It is used to evaluate multiple conditions and return different values or perform different actions based on the results of these conditions. Essentially, it's a way to create conditional statements within your SQL queries.\n\nWhen You Would Use the SQL CASE Function\n\nYou would use the SQL CASE function when you need to perform different operations or return different values based on specified conditions in your SQL queries. Common use cases include:\n• Data Transformation: Transforming data values based on certain conditions, like categorizing data into different groups or ranges.\n• Data Filtering: Filtering rows based on specific conditions, such as excluding or including certain records in the result set.\n• Ordering: Changing the order in which data is displayed in the result set.\n\nThe basic syntax for the SQL CASE function is as follows:\n• , , etc.: The conditions to be evaluated.\n• , , etc.: The values or expressions to return when the corresponding condition is true.\n• (optional): The value to return when none of the conditions are met.\n\nThe statement can be used in both the and statements.\n• , , etc.: These are conditions that you want to evaluate. These can be simple conditions, expressions, or even subqueries.\n• , , etc.: The values or expressions to return when the corresponding condition is true. These can be literals, column values, or expressions.\n• (optional): The value to return when none of the conditions are met. It is also possible to omit the clause.\n\nConsider a simple example where you want to categorize employees based on their salary into three categories: 'Low', 'Medium', and 'High'. The SQL query would look like this:\n\nThe result set of the above query might look like this:\n\nThe SQL CASE function is commonly used in various scenarios, including:\n• Data Cleaning: Standardize or clean data by replacing or categorizing values.\n• Security and Permissions: Control access to data based on user roles or permissions.\n• Data Aggregation: Perform complex aggregations with different rules for different groups.\n\nThe SQL CASE function is widely supported and available in many SQL database systems, including but not limited to:\n\nThe specific syntax and behavior may vary slightly between database systems, but the fundamental concept of conditional logic remains consistent. Always consult the documentation of your specific database system for exact details on its usage."
    },
    {
        "link": "https://stackoverflow.com/questions/77145703/case-when-statement-to-categorized-values",
        "document": "I want to use a case when statement to categorize Col 1 as \"good\" or \"bad\" into a new column. I have come up with the following query:\n\nThis results in the TABLE_2:\n\nHow do I fix this so that if A is both good and bad, it will just take the bad status? I would like TABLE_3 to be my result"
    }
]