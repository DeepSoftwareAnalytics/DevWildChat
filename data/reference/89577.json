[
    {
        "link": "https://pytba.readthedocs.io",
        "document": "TeleBot is synchronous and asynchronous implementation of Telegram Bot API."
    },
    {
        "link": "https://pypi.org/project/pyTelegramBotAPI",
        "document": "A required part of this site couldn’t load. This may be due to a browser extension, network issues, or browser settings. Please check your connection, disable any ad blockers, or try using a different browser."
    },
    {
        "link": "https://github.com/eternnoir/pyTelegramBotAPI",
        "document": "A simple, but extensible Python implementation for the Telegram Bot API.\n• General API Documentation\n• General use of the API\n• Advanced use of the API\n• Controlling the amount of Threads used by TeleBot\n• F.A.Q.\n• How can I distinguish a User and a GroupChat in message.chat?\n\nThis API is tested with Python 3.9-3.13 and Pypy 3. There are two ways to install the library:\n\nIt is generally recommended to use the first option.\n\nWhile the API is production-ready, it is still under development and it has regular updates, do not forget to update it regularly by calling\n\nIt is presumed that you have obtained an API token with @BotFather. We will call this token . Furthermore, you have basic knowledge of the Python programming language and more importantly the Telegram Bot API.\n\nThe TeleBot class (defined in _init_.py) encapsulates all API calls in a single class. It provides functions such as ( , etc.) and several ways to listen for incoming messages.\n\nCreate a file called . Then, open the file and create an instance of the TeleBot class.\n\nNote: Make sure to actually replace TOKEN with your own API token.\n\nAfter that declaration, we need to register some so-called message handlers. Message handlers define filters which a message must pass. If a message passes the filter, the decorated function is called and the incoming message is passed as an argument.\n\nA function which is decorated by a message handler can have an arbitrary name, however, it must have only one parameter (the message).\n\nThis one echoes all incoming text messages back to the sender. It uses a lambda function to test a message. If the lambda returns True, the message is handled by the decorated function. Since we want all messages to be handled by this function, we simply always return True.\n\nNote: all handlers are tested in the order in which they were declared\n\nWe now have a basic bot which replies a static message to \"/start\" and \"/help\" commands and which echoes the rest of the sent messages. To start the bot, add the following to our source file:\n\nAlright, that's it! Our source file now looks like this:\n\nTo start the bot, simply open up a terminal and enter to run the bot! Test it by sending commands ('/start' and '/help') and arbitrary text messages.\n\nAll types are defined in types.py. They are all completely in line with the Telegram API's definition of the types, except for the Message's field, which is renamed to (because is a Python reserved token). Thus, attributes such as can be accessed directly with . Note that can be either an instance of or (see How can I distinguish a User and a GroupChat in message.chat?).\n\nThe Message object also has a attribute, which defines the type of the Message. can be one of the following strings: , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , .\n\nYou can use some types in one function. Example:\n\nAll API methods are located in the TeleBot class. They are renamed to follow common Python naming conventions. E.g. is renamed to and to .\n\nOutlined below are some general use cases of the API.\n\nA message handler is a function that is decorated with the decorator of a TeleBot instance. Message handlers consist of one or multiple filters. Each filter must return True for a certain message in order for a message handler to become eligible to handle that message. A message handler is declared in the following way (provided is an instance of TeleBot):\n\nis not bound to any restrictions. Any function name is permitted with message handlers. The function must accept at most one argument, which will be the message that the function must handle. is a list of keyword arguments. A filter is declared in the following manner: . One handler may have multiple filters. TeleBot supports the following filters:\n\nHere are some examples of using the filters and message handlers:\n\nImportant: all handlers are tested in the order in which they were declared\n\nHandle updates of a the bot's member status in a chat\n\nHandle updates of a chat member's status in a chat Note: \"chat_member\" updates are not requested by default. If you want to allow all update types, set in / to\n\nNow, you can use inline_handler to get inline queries in telebot.\n\nUse chosen_inline_handler to get chosen_inline_result in telebot. Don't forget to add the /setinlinefeedback command for @Botfather.\n\nA middleware handler is a function that allows you to modify requests or the bot context as they pass through the Telegram to the bot. You can imagine middleware as a chain of logic connection handled before any other handlers are executed. Middleware processing is disabled by default, enable it by setting .\n\nThere are other examples using middleware handler in the examples/middleware directory.\n\nThere are class-based middlewares. Basic class-based middleware looks like this:\n\nClass-based middleware should have two functions: post and pre process. So, as you can see, class-based middlewares work before and after handler execution. For more, check out in examples\n\nAlso, you can use built-in custom filters. Or, you can create your own filter.\n\nAlso, we have examples on them. Check this links:\n\nYou can check some built-in filters in source code\n\nExample of filtering by id\n\nExample of filtering by text\n\nIf you want to add some built-in filter, you are welcome to add it in custom_filters.py file.\n\nHere is example of creating filter-class:\n\nAll functions of TeleBot take an optional argument. This argument must be an instance of , or , which are defined in types.py.\n\nThe last example yields this result:\n\nThis object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc. Attributes:\n\nHere's an Example: \n\n Here is the entity number or order of entity in a reply, for if incase there are multiple entities in the reply/message.\n\n returns a list of entities object. \n\n would give the type of the first entity\n\n Refer Bot Api for extra details\n\nSince version 5.0 of the Bot API, you have the possibility to run your own Local Bot API Server. pyTelegramBotAPI also supports this feature.\n\nImportant: Like described here, you have to log out your bot from the Telegram server before switching to your local API server. in pyTelegramBotAPI use\n\nNote: 4200 is an example port\n\nNew: There is an asynchronous implementation of telebot. To enable this behaviour, create an instance of AsyncTeleBot instead of TeleBot.\n\nNow, every function that calls the Telegram API is executed in a separate asynchronous task. Using AsyncTeleBot allows you to do the following:\n\nSee more in examples\n\nSometimes you must send messages that exceed 5000 characters. The Telegram API can not handle that many characters in one request, so we need to split the message in multiples. Here is how to do that using the API:\n\nOr you can use the new function to get more meaningful substrings:\n\nThe TeleBot constructor takes the following optional arguments:\n• threaded: True/False (default True). A flag to indicate whether TeleBot should execute message handlers on it's polling Thread.\n\nAs an alternative to the message handlers, one can also register a function as a listener to TeleBot.\n\nNOTICE: handlers won't disappear! Your message will be processed both by handlers and listeners. Also, it's impossible to predict which will work at first because of threading. If you use threaded=False, custom listeners will work earlier, after them handlers will be called. Example:\n\nWhen using webhooks telegram sends one Update per call, for processing it you should call process_new_messages([update.message]) when you recieve it.\n\nThere are some examples using webhooks in the examples/webhook_examples directory.\n\nYou can use the Telebot module logger to log debug info about Telebot. Use to get the logger of the TeleBot module. It is possible to add custom logging Handlers to the logger. Refer to the Python logging module page for more info.\n\nYou can use proxy for request. object will use by call proxies argument.\n\nIf you want to use socket5 proxy you need install dependency and make sure, that you have the latest version of , , , and .\n\nYou can disable or change the interaction with real Telegram server by using\n\nparameter. You can pass there your own function that will be called instead of requests.request.\n\nThen you can use API and proceed requests in your handler code.\n\nWe have a fully asynchronous version of TeleBot. This class is not controlled by threads. Asyncio tasks are created to execute all the stuff.\n\nAs you can see here, keywords are await and async.\n\nAsynchronous tasks depend on processor performance. Many asynchronous tasks can run parallelly, while thread tasks will block each other.\n\nAsyncTeleBot is asynchronous. It uses aiohttp instead of requests module.\n\nSee more examples in our examples folder\n\nBot instances that were idle for a long time might be rejected by the server when sending a message due to a timeout of the last used session. Add to your initialisation to force recreation after 5 minutes without any activity.\n\nJoin the News channel. Here we will post releases and updates.\n\nTemplate is a ready folder that contains architecture of basic project. Here are some examples of template:\n• SiteAlert bot (source) by ilteoood - Monitors websites and sends a notification on changes\n• Telegram LMGTFY_bot by GabrielRF - Let me Google that for you.\n• ComedoresUGRbot (source) by alejandrocq - Telegram bot to check the menu of Universidad de Granada dining hall.\n• DonantesMalagaBot - DonantesMalagaBot facilitates information to Malaga blood donors about the places where they can donate today or in the incoming days. It also records the date of the last donation so that it helps the donors to know when they can donate again. - by vfranch\n• DuttyBot by Dmytryi Striletskyi - Timetable for one university in Kiev.\n• wat-bridge by rmed - Send and receive messages to/from WhatsApp through Telegram\n• filmratingbot(source) by jcolladosp - Telegram bot using the Python API that gets films rating from IMDb and metacritic\n• RastreioBot (source) by GabrielRF - Bot used to track packages on the Brazilian Mail Service.\n• Spbu4UBot(link) by EeOneDown - Bot with timetables for SPbU students.\n• LearnIt(link) - A Telegram Bot created to help people to memorize other languages’ vocabulary.\n• VigoBusTelegramBot (GitHub) - Bot that provides buses coming to a certain stop and their remaining time for the city of Vigo (Galicia - Spain)\n• kaishnik-bot (source) by airatk - bot which shows all the necessary information to KNTRU-KAI students.\n• Robbie (source) by @FacuM - Support Telegram bot for developers and maintainers.\n• AsadovBot (source) by @DesExcile - Сatalog of poems by Eduard Asadov.\n• thesaurus_com_bot (source) by @LeoSvalov - words and synonyms from dictionary.com and thesaurus.com in the telegram.\n• InfoBot (source) by @irevenko - An all-round bot that displays some statistics (weather, time, crypto etc...)\n• Sporty (source) by @0xnu - Telegram bot for displaying the latest news, sports schedules and injury updates.\n• JoinGroup Silencer Bot (source) by @zeph1997 - A Telegram Bot to remove \"join group\" and \"removed from group\" notifications.\n• MyElizaPsychologistBot (source) by @Pablo-Davila - An implementation of the famous Eliza psychologist chatbot.\n• Frcstbot (source) by Mrsqd. A Telegram bot that will always be happy to show you the weather forecast.\n• MineGramBot by ModischFabrications. This bot can start, stop and monitor a minecraft server.\n• Tabletop DiceBot by dexpiper. This bot can roll multiple dices for RPG-like games, add positive and negative modifiers and show short descriptions to the rolls.\n• BarnameKon by Anvaari. This Bot make \"Add to google calendar\" link for your events. It give information about event and return link. It work for Jalali calendar and in Tehran Time. Source code\n• Translator bot by Areeg Fahad. This bot can be used to translate texts.\n• Digital Cryptocurrency bot by Areeg Fahad. With this bot, you can now monitor the prices of more than 12 digital Cryptocurrency.\n• Anti-Tracking Bot by Leon Heess (source). Send any link, and the bot tries its best to remove all tracking from the link you sent.\n• Developer Bot by Vishal Singh (source code) This telegram bot can do tasks like GitHub search & clone,provide c++ learning resources ,Stackoverflow search, Codeforces(profile visualizer,random problems)\n• oneIPO bot by Aadithya & Amol Soans This Telegram bot provides live updates , data and documents on current and upcoming IPOs(Initial Public Offerings)\n• CoronaGraphsBot (source) by TrevorWinstral - Gets live COVID Country data, plots it, and briefs the user\n• ETHLectureBot (source) by TrevorWinstral - Notifies ETH students when their lectures have been uploaded\n• Vlun Finder Bot by Resinprotein2333. This bot can help you to find The information of CVE vulnerabilities.\n• ETHGasFeeTrackerBot (Source by DevAdvik - Get Live Ethereum Gas Fees in GWEI\n• Google Sheet Bot by JoachimStanislaus. This bot can help you to track your expenses by uploading your bot entries to your google sheet.\n• GrandQuiz Bot by Carlosma7. This bot is a trivia game that allows you to play with people from different ages. This project addresses the use of a system through chatbots to carry out a social and intergenerational game as an alternative to traditional game development.\n• Diccionario de la RAE (source) This bot lets you find difinitions of words in Spanish using RAE's dictionary. It features direct message and inline search.\n• remoteTelegramShell by EnriqueMoran. Control your LinuxOS computer through Telegram.\n• Commerce Telegram Bot. Make purchases of items in a store with an Admin panel for data control and notifications.\n• Pyfram-telegram-bot Query wolframalpha.com and make use of its API through Telegram.\n• TranslateThisVideoBot This Bot can understand spoken text in videos and translate it to English\n• Zyprexa (source) Zyprexa can solve, help you solve any mathematical problem you encounter and convert your regular mathematical expressions into beautiful imagery using LaTeX.\n• Bincode-telegram-bot by tusharhero - Makes bincodes from text provides and also converts them back to text.\n• Gugumoe-bot (source) by 咕谷酱 GuXiaoJiang is a multi-functional robot, such as OSU game information query, IP test, animation screenshot search and other functions.\n• Feedback-bot A feedback bot for user-admin communication. Made on AsyncTeleBot, using template.\n• TeleServ by ablakely This is a Telegram to IRC bridge which links as an IRC server and makes Telegram users appear as native IRC users.\n• Simple Store Bot by Anton Glyzin This is a simple telegram-store with an admin panel. Designed according to a template.\n• Media Rating Bot (source)by CommanderCRM. This bot aggregates media (movies, TV series, etc.) ratings from IMDb, Rotten Tomatoes, Metacritic, TheMovieDB, FilmAffinity and also provides number of votes of said media on IMDb.\n• Spot Seek Bot (source) by Arashnm80. This is a free & open source telegram bot for downloading tracks, albums or playlists from spotify.\n• CalendarIT Bot (source)by CodeByZen. A simple, but extensible Python Telegram bot, can post acquainted with what is happening today, tomorrow or what happened 20 years ago to channel.\n• DownloadMusicBOT by Francisco Griman - It is a simple bot that downloads audio from YouTube videos on Telegram.\n• AwesomeChatGPTBot - Simple ChatGTP-3.5 bot. It is FREE and can remember chat history for a while With pre-defined roles!\n• QR-Code For You Bot (source) by Arashnm80. Telegram qrcode generator bot created with pyhton and telebot.\n• Best Instagram Downloader Bot (source) by Arashnm80. Free and open source telegram bot to download posts and reels from Instagram.\n• DrinkGenius-Bot (source) by Povladarchik. Your personal assistant in the world of cocktails.\n• Pytgpt-Bot (source) by Smartwa. AI powered bot for chatting, text-to-image and text-to-speech conversions.\n\nWant to have your bot listed here? Just make a pull request. Only bots with public source code are accepted."
    },
    {
        "link": "https://docs.python-telegram-bot.org",
        "document": "We have made you a wrapper you can’t refuse\n\nWe have a vibrant community of developers helping each other in our Telegram group. Join us!\n\nStay tuned for library updates and new releases on our Telegram Channel.\n\nYou can install or upgrade via To install a pre-release, use the flag in addition. You can also install from source, though this is usually not necessary. To enable you to verify that a release file that you downloaded was indeed provided by the team, we have taken the following measures. Starting with v21.4, all releases are signed via sigstore. The corresponding signature files are uploaded to the GitHub releases page. To verify the signature, please install the sigstore Python client and follow the instructions for verifying signatures from GitHub Actions. As input for the parameter, please use the value . Earlier releases are signed with a GPG key. The signatures are uploaded to both the GitHub releases page and the PyPI project and end with a suffix . Please find the public keys here. The keys are named in the format . In addition, the GitHub release page also contains the sha1 hashes of the release files in the files with the suffix . tries to use as few 3rd party dependencies as possible. However, for some features using a 3rd party library is more sane than implementing the functionality again. As these features are optional, the corresponding 3rd party dependencies are not installed by default. Instead, they are listed as optional dependencies. This allows to avoid unnecessary dependency conflicts for users who don’t need the optional features. The only required dependency is httpx ~= 0.27 for , the default networking backend. is most useful when used along with additional libraries. To minimize dependency conflicts, we try to be liberal in terms of version requirements on the (optional) dependencies. On the other hand, we have to ensure stability of , which is why we do apply version bounds. If you encounter dependency conflicts due to these bounds, feel free to reach out. PTB can be installed with optional dependencies:\n• None installs the cryptography>=39.0.1 library. Use this, if you want to use Telegram Passport related functionality.\n• None installs httpx[socks]. Use this, if you want to work behind a Socks5 server.\n• None installs httpx[http2]. Use this, if you want to use HTTP/2.\n• None installs aiolimiter~=1.1,<1.3. Use this, if you want to use .\n• None installs the tornado~=6.4 library. Use this, if you want to use / .\n• None installs the cachetools>=5.3.3,<5.6.0 library. Use this, if you want to use arbitrary callback_data.\n• None installs the APScheduler>=3.10.4,<3.12.0 library. Use this, if you want to use the . To install multiple optional dependencies, separate them by commas, e.g. .\n• None installs all optional dependencies that are related to , i.e. .\n\nOnce you have installed the library, you can begin working with it - so let’s get started! Our Wiki contains an Introduction to the API explaining how the pure Bot API can be accessed via . Moreover, the Tutorial: Your first Bot gives an introduction on how chatbots can be easily programmed with the help of the module.\n• None The package documentation is the technical reference for . It contains descriptions of all available classes, modules, methods and arguments as well as the changelog.\n• None The wiki is home to number of more elaborate introductions of the different features of and other useful resources that go beyond the technical documentation.\n• None Our examples section contains several examples that showcase the different features of both the Bot API and . Even if it is not your approach for learning, please take a look at . It is the de facto base for most of the bots out there. The code for these examples is released to the public domain, so you can start by grabbing the code and building on top of it.\n• None The official Telegram Bot API documentation is of course always worth a read. If the resources mentioned above don’t answer your questions or simply overwhelm you, there are several ways of getting help.\n• None We have a vibrant community of developers helping each other in our Telegram group. Join us! Asking a question here is often the quickest way to get a pointer in the right direction.\n• None You can even ask for help on Stack Overflow using the python-telegram-bot tag. Since v20.0, is built on top of Pythons module. Because is in general single-threaded, does currently not aim to be thread-safe. Noteworthy parts of API that are likely to cause issues (e.g. race conditions) when used in a multi-threaded setting include:\n• None all classes in the module that allow to add/remove allowed users/chats at runtime\n\nOccasionally we are asked if we accept donations to support the development. While we appreciate the thought, maintaining PTB is our hobby, and we have almost no running costs for it. We therefore have nothing set up to accept donations. If you still want to donate, we kindly ask you to donate to another open source project/initiative of your choice instead.\n\nYou may copy, distribute and modify the software provided that modifications are described and licensed for free under LGPL-3. Derivative works (including modifications or anything statically linked to the library) can only be redistributed under LGPL-3, but applications that use the library don’t have to be."
    },
    {
        "link": "https://pytba.readthedocs.io/_/downloads/en/latest/pdf",
        "document": ""
    },
    {
        "link": "https://github.com/PyMySQL/PyMySQL",
        "document": "This package contains a pure-Python MySQL and MariaDB client library, based on PEP 249.\n• Python -- one of the following:\n• MySQL Server -- one of the following:\n\nYou can install it with pip:\n\nTo use \"sha256_password\" or \"caching_sha2_password\" for authenticate, you need to install additional dependency:\n\nTo use MariaDB's \"ed25519\" authentication method, you need to install additional dependency:\n\nFor support, please refer to the StackOverflow.\n\nThe following examples make use of a simple table\n\n. . ( , , , , . . ) : . () : . ( , ( , )) # connection is not autocommit by default. So you must commit to save . () . () : . ( , ( ,)) . () ( )\n\nThis example will print:\n• Getting Help With MariaDB https://mariadb.com/kb/en/getting-help-with-mariadb/\n\nPyMySQL is released under the MIT License. See LICENSE for more information."
    },
    {
        "link": "https://stackoverflow.com/questions/67983882/trying-to-change-an-sql-insert-into-pymysql-from-mysqldb-on-python",
        "document": "I wrote a code for MySQLdb that had this structure and it worked perfectly.\n\nHowever, now I need to write it for Python3, which is not compatible with MySQLdb, and reading the documentation of pymysql I think I can't do it like that, so I tried something like this but does not work:\n\nThe result when I comment the try"
    },
    {
        "link": "https://pymysql.readthedocs.io/en/latest/user/examples.html",
        "document": "# connection is not autocommit by default. So you must commit to save"
    },
    {
        "link": "https://medium.com/data-science/pymysql-connecting-python-and-sql-for-data-science-91e7582d21d7",
        "document": "SQL and Python are indispensable tools for data practitioners to work effectively with data.\n\nA common use case would be the initial retrieval of data from relational databases using SQL queries, followed by subsequent manipulation and analysis of the data in Python with libraries such as pandas.\n\nBut did you know that these two seemingly isolated tasks can be combined into a single Python script to easily deliver the same outcome?\n\nIn this article, we discover the concepts and implementation of PyMySQL for connecting to and interacting with MySQL databases from Python.\n\n(1) What is PyMySQL, and Why Use It?"
    },
    {
        "link": "https://stackoverflow.com/questions/41858177/insert-data-with-pymysql-using-inputs",
        "document": "I'm working on a DB and I'm having trouble when using pymysql to INSERT some values\n\nWhere name, size and type are strings and is_done is a bool\n\nIt gives me the typical error You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near , so I suppose the problem is a , but how can I solve it?\n\nI should also add that the name value is retrieved from a MySQL DB"
    }
]