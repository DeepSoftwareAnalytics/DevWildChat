[
    {
        "link": "https://pandas.pydata.org/pandas-docs/version/1.5/reference/api/pandas.DataFrame.divide.html",
        "document": "Get Floating division of dataframe and other, element-wise (binary operator ).\n\nEquivalent to , but with support to substitute a fill_value for missing data in one of the inputs. With reverse version, .\n\nAny single or multiple element data structure, or list-like object. Whether to compare by the index (0 or ‘index’) or columns. (1 or ‘columns’). For Series input, axis to match Series index on. Broadcast across a level, matching Index values on the passed MultiIndex level. fill_value float or None, default None Fill existing missing (NaN) values, and any new element needed for successful DataFrame alignment, with this value before computation. If data in both corresponding DataFrame locations is missing the result will be missing.\n\nMismatched indices will be unioned together.\n\nAdd a scalar with operator version which return the same results.\n\nSubtract a list and Series by axis with operator version.\n\nMultiply a DataFrame of different shape with operator version."
    },
    {
        "link": "https://pandas.pydata.org/pandas-docs/version/1.5.0rc0/reference/api/pandas.DataFrame.divide.html",
        "document": "Get Floating division of dataframe and other, element-wise (binary operator ).\n\nEquivalent to , but with support to substitute a fill_value for missing data in one of the inputs. With reverse version, .\n\nAny single or multiple element data structure, or list-like object. Whether to compare by the index (0 or ‘index’) or columns. (1 or ‘columns’). For Series input, axis to match Series index on. Broadcast across a level, matching Index values on the passed MultiIndex level. fill_value float or None, default None Fill existing missing (NaN) values, and any new element needed for successful DataFrame alignment, with this value before computation. If data in both corresponding DataFrame locations is missing the result will be missing.\n\nMismatched indices will be unioned together.\n\nAdd a scalar with operator version which return the same results.\n\nSubtract a list and Series by axis with operator version.\n\nMultiply a DataFrame of different shape with operator version."
    },
    {
        "link": "https://pandas.pydata.org/docs/user_guide/basics.html",
        "document": "Here we discuss a lot of the essential functionality common to the pandas data structures. To begin, let’s create some example objects like we did in the 10 minutes to pandas section:\n\npandas objects have a number of attributes enabling you to access the metadata\n• None shape: gives the axis dimensions of the object, consistent with ndarray Note, these attributes can be safely assigned to! pandas objects ( , , ) can be thought of as containers for arrays, which hold the actual data and do the actual computation. For many types, the underlying array is a . However, pandas and 3rd party libraries may extend NumPy’s type system to add support for custom arrays (see dtypes). To get the actual data inside a or , use the property will always be an . The exact details of what an is and why pandas uses them are a bit beyond the scope of this introduction. See dtypes for more. If you know you need a NumPy array, use or . When the Series or Index is backed by an , may involve copying data and coercing values. See dtypes for more. gives some control over the of the resulting . For example, consider datetimes with timezones. NumPy doesn’t have a dtype to represent timezone-aware datetimes, so there are two possibly useful representations:\n• None An object-dtype with objects, each with the correct\n• None A -dtype , where the values have been converted to UTC and the timezone discarded Timezones may be preserved with Or thrown away with Getting the “raw data” inside a is possibly a bit more complex. When your only has a single data type for all the columns, will return the underlying data: If a DataFrame contains homogeneously-typed data, the ndarray can actually be modified in-place, and the changes will be reflected in the data structure. For heterogeneous data (e.g. some of the DataFrame’s columns are not all the same dtype), this will not be the case. The values attribute itself, unlike the axis labels, cannot be assigned to. When working with heterogeneous data, the dtype of the resulting ndarray will be chosen to accommodate all of the data involved. For example, if strings are involved, the result will be of object dtype. If there are only floats and integers, the resulting array will be of float dtype. In the past, pandas recommended or for extracting the data from a Series or DataFrame. You’ll still find references to these in old code bases and online. Going forward, we recommend avoiding and using or . has the following drawbacks:\n• None When your Series contains an extension type, it’s unclear whether returns a NumPy array or the extension array. will always return an , and will never copy data. will always return a NumPy array, potentially at the cost of copying / coercing values.\n• None When your DataFrame contains a mixture of data types, may involve copying data and coercing values to a common dtype, a relatively expensive operation. , being a method, makes it clearer that the returned NumPy array may not be a view on the same data in the DataFrame.\n\nWith binary operations between pandas data structures, there are two key points of interest: We will demonstrate how to manage these issues independently, though they can be handled simultaneously. DataFrame has the methods , , , and related functions , , … for carrying out binary operations. For broadcasting behavior, Series input is of primary interest. Using these functions, you can use to either match on the index or columns via the axis keyword: Furthermore you can align a level of a MultiIndexed DataFrame with a Series. Series and Index also support the builtin. This function takes the floor division and modulo operation at the same time returning a two-tuple of the same type as the left hand side. For example: We can also do elementwise : In Series and DataFrame, the arithmetic functions have the option of inputting a fill_value, namely a value to substitute when at most one of the values at a location are missing. For example, when adding two DataFrame objects, you may wish to treat NaN as 0 unless both DataFrames are missing that value, in which case the result will be NaN (you can later replace NaN with some other value using if you wish). Series and DataFrame have the binary comparison methods , , , , , and whose behavior is analogous to the binary arithmetic operations described above: These operations produce a pandas object of the same type as the left-hand-side input that is of dtype . These objects can be used in indexing operations, see the section on Boolean indexing. You can apply the reductions: , , , and to provide a way to summarize a boolean result. You can reduce to a final boolean value. You can test if a pandas object is empty, via the property. Asserting the truthiness of a pandas object will raise an error, as the testing of the emptiness or values is ambiguous. Traceback (most recent call last) in in : The truth value of a DataFrame is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all(). Traceback (most recent call last) in in : The truth value of a DataFrame is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all(). See gotchas for a more detailed discussion. Often you may find that there is more than one way to compute the same result. As a simple example, consider and . To test that these two computations produce the same result, given the tools shown above, you might imagine using . But in fact, this expression is False: Notice that the boolean DataFrame contains some False values! This is because NaNs do not compare as equals: So, NDFrames (such as Series and DataFrames) have an method for testing equality, with NaNs in corresponding locations treated as equal. Note that the Series or DataFrame index needs to be in the same order for equality to be True: You can conveniently perform element-wise comparisons when comparing a pandas data structure with a scalar value: pandas also handles element-wise comparisons between different array-like objects of the same length: Trying to compare or objects of different lengths will raise a ValueError: Traceback (most recent call last) in in in : Can only compare identically-labeled Series objects Traceback (most recent call last) in in in : Can only compare identically-labeled Series objects A problem occasionally arising is the combination of two similar data sets where values in one are preferred over the other. An example would be two data series representing a particular economic indicator where one is considered to be of “higher quality”. However, the lower quality series might extend further back in history or have more complete data coverage. As such, we would like to combine two DataFrame objects where missing values in one DataFrame are conditionally filled with like-labeled values from the other DataFrame. The function implementing this operation is , which we illustrate: The method above calls the more general . This method takes another DataFrame and a combiner function, aligns the input DataFrame and then passes the combiner function pairs of Series (i.e., columns whose names are the same). So, for instance, to reproduce as above:\n\nThere exists a large number of methods for computing descriptive statistics and other related operations on Series, DataFrame. Most of these are aggregations (hence producing a lower-dimensional result) like , , and , but some of them, like and , produce an object of the same size. Generally speaking, these methods take an axis argument, just like ndarray.{sum, std, …}, but the axis can be specified by name or integer: All such methods have a option signaling whether to exclude missing data ( by default): Combined with the broadcasting / arithmetic behavior, one can describe various statistical procedures, like standardization (rendering data zero mean and standard deviation of 1), very concisely: Note that methods like and preserve the location of values. This is somewhat different from and since behavior is furthermore dictated by a parameter. Here is a quick reference summary table of common functions. Each also takes an optional parameter which applies only if the object has a hierarchical index. Standard error of the mean Note that by chance some NumPy methods, like , , and , will exclude NAs on Series input by default: will return the number of unique non-NA values in a Series: There is a convenient function which computes a variety of summary statistics about a Series or the columns of a DataFrame (excluding NAs of course): You can select specific percentiles to include in the output: By default, the median is always included. For a non-numerical Series object, will give a simple summary of the number of unique values and most frequently occurring values: Note that on a mixed-type DataFrame object, will restrict the summary to include only numerical columns or, if none are, only categorical columns: This behavior can be controlled by providing a list of types as / arguments. The special value can also be used: That feature relies on select_dtypes. Refer to there for details about accepted inputs. The and functions on Series and DataFrame compute the index labels with the minimum and maximum corresponding values: When there are multiple rows (or columns) matching the minimum or maximum value, and return the first matching index: and are called and in NumPy. The Series method computes a histogram of a 1D array of values. It can also be used as a function on regular arrays: The method can be used to count combinations across multiple columns. By default all columns are used but a subset can be selected using the argument. Similarly, you can get the most frequently occurring value(s), i.e. the mode, of the values in a Series or DataFrame: Continuous values can be discretized using the (bins based on values) and (bins based on sample quantiles) functions: computes sample quantiles. For example, we could slice up some normally distributed data into equal-size quartiles like so: We can also pass infinite values to define the bins:\n\nTo apply your own or another library’s functions to pandas objects, you should be aware of the three methods below. The appropriate method to use depends on whether your function expects to operate on an entire or , row- or column-wise, or elementwise. and can be passed into functions. However, if the function needs to be called in a chain, consider using the method. and are functions taking and returning . Now compare the following: pandas encourages the second style, which is known as method chaining. makes it easy to use your own or another library’s functions in method chains, alongside pandas’ methods. In the example above, the functions and each expected a as the first positional argument. What if the function you wish to apply takes its data as, say, the second argument? In this case, provide with a tuple of . will route the to the argument specified in the tuple. For example, we can fit a regression using statsmodels. Their API expects a formula first and a as the second argument, . We pass in the function, keyword pair to : The pipe method is inspired by unix pipes and more recently dplyr and magrittr, which have introduced the popular (read pipe) operator for R. The implementation of here is quite clean and feels right at home in Python. We encourage you to view the source code of . Arbitrary functions can be applied along the axes of a DataFrame using the method, which, like the descriptive statistics methods, takes an optional argument: The method will also dispatch on a string method name. The return type of the function passed to affects the type of the final output from for the default behaviour:\n• None If the applied function returns a , the final output is a . The columns match the index of the returned by the applied function.\n• None If the applied function returns any other type, the final output is a . This default behaviour can be overridden using the , which accepts three options: , , and . These will determine how list-likes return values expand (or not) to a . combined with some cleverness can be used to answer many questions about a data set. For example, suppose we wanted to extract the date where the maximum value for each column occurred: You may also pass additional arguments and keyword arguments to the method. Another useful feature is the ability to pass Series methods to carry out some Series operation on each column or row: Finally, takes an argument which is False by default, which converts each row or column into a Series before applying the function. When set to True, the passed function will instead receive an ndarray object, which has positive performance implications if you do not need the indexing functionality. The aggregation API allows one to express possibly multiple aggregation operations in a single concise way. This API is similar across pandas objects, see groupby API, the window API, and the resample API. The entry point for aggregation is , or the alias . We will use a similar starting frame from above: Using a single function is equivalent to . You can also pass named methods as strings. These will return a of the aggregated output: # these are equivalent to a ``.sum()`` because we are aggregating Single aggregations on a this will return a scalar value: You can pass multiple aggregation arguments as a list. The results of each of the passed functions will be a row in the resulting . These are naturally named from the aggregation function. On a , multiple functions return a , indexed by the function names: Passing a named function will yield that name for the row: Passing a dictionary of column names to a scalar or a list of scalars, to allows you to customize which functions are applied to which columns. Note that the results are not in any particular order, you can use an instead to guarantee ordering. Passing a list-like will generate a output. You will get a matrix-like output of all of the aggregators. The output will consist of all unique functions. Those that are not noted for a particular column will be : With it is possible to easily create a custom describe function, similar to the built in describe function. The method returns an object that is indexed the same (same size) as the original. This API allows you to provide multiple operations at the same time rather than one-by-one. Its API is quite similar to the API. We create a frame similar to the one used in the above sections. Transform the entire frame. allows input functions as: a NumPy function, a string function name or a user defined function. Here received a single function; this is equivalent to a ufunc application. Passing a single function to with a will yield a single in return. Passing multiple functions will yield a column MultiIndexed DataFrame. The first level will be the original frame column names; the second level will be the names of the transforming functions. Passing multiple functions to a Series will yield a DataFrame. The resulting column names will be the transforming functions. Passing a dict of functions will allow selective transforming per column. Passing a dict of lists will generate a MultiIndexed DataFrame with these selective transforms. Since not all functions can be vectorized (accept NumPy arrays and return another array or value), the methods on DataFrame and analogously on Series accept any Python function taking a single value and returning a single value. For example: has an additional feature; it can be used to easily “link” or “map” values defined by a secondary series. This is closely related to merging/joining functionality:\n\nis the fundamental data alignment method in pandas. It is used to implement nearly all other features relying on label-alignment functionality. To reindex means to conform the data to match a given set of labels along a particular axis. This accomplishes several things:\n• None Reorders the existing data to match a new set of labels\n• None Inserts missing value (NA) markers in label locations where no data for that label existed\n• None If specified, fill data for missing labels using logic (highly relevant to working with time series data) Here is a simple example: Here, the label was not contained in the Series and hence appears as in the result. With a DataFrame, you can simultaneously reindex the index and columns: Note that the objects containing the actual axis labels can be shared between objects. So if we have a Series and a DataFrame, the following can be done: This means that the reindexed Series’s index is the same Python object as the DataFrame’s index. also supports an “axis-style” calling convention, where you specify a single argument and the it applies to. MultiIndex / Advanced Indexing is an even more concise way of doing reindexing. When writing performance-sensitive code, there is a good reason to spend some time becoming a reindexing ninja: many operations are faster on pre-aligned data. Adding two unaligned DataFrames internally triggers a reindexing step. For exploratory analysis you will hardly notice the difference (because has been heavily optimized), but when CPU cycles matter sprinkling a few explicit calls here and there can have an impact. Reindexing to align with another object# You may wish to take an object and reindex its axes to be labeled the same as another object. While the syntax for this is straightforward albeit verbose, it is a common enough operation that the method is available to make this simpler: Aligning objects with each other with # The method is the fastest way to simultaneously align two objects. It supports a argument (related to joining and merging):\n• None : take the union of the indexes (default) It returns a tuple with both of the reindexed Series: For DataFrames, the join method will be applied to both the index and the columns by default: You can also pass an option to only align on the specified axis: If you pass a Series to , you can choose to align both objects either on the DataFrame’s index or columns using the argument: takes an optional parameter which is a filling method chosen from the following table: Fill from the nearest index value We illustrate these fill methods on a simple Series: These methods require that the indexes are ordered increasing or decreasing. Note that the same result could have been achieved using ffill (except for ) or interpolate: will raise a ValueError if the index is not monotonically increasing or decreasing. and will not perform any checks on the order of the index. The and arguments provide additional control over filling while reindexing. Limit specifies the maximum count of consecutive matches: In contrast, tolerance specifies the maximum distance between the index and indexer values: Notice that when used on a , or , will coerced into a if possible. This allows you to specify tolerance with appropriate strings. A method closely related to is the function. It removes a set of labels from an axis: Note that the following also works, but is a bit less obvious / clean: The method allows you to relabel an axis based on some mapping (a dict or Series) or an arbitrary function. If you pass a function, it must return a value when called with any of the labels (and must produce a set of unique values). A dict or Series can also be used: If the mapping doesn’t include a column/index label, it isn’t renamed. Note that extra labels in the mapping don’t throw an error. also supports an “axis-style” calling convention, where you specify a single and the to apply that mapping to. Finally, also accepts a scalar or list-like for altering the attribute. The methods and allow specific names of a to be changed (as opposed to the labels).\n\nThe behavior of basic iteration over pandas objects depends on the type. When iterating over a Series, it is regarded as array-like, and basic iteration produces the values. DataFrames follow the dict-like convention of iterating over the “keys” of the objects. Thus, for example, iterating over a DataFrame gives you the column names: pandas objects also have the dict-like method to iterate over the (key, value) pairs. To iterate over the rows of a DataFrame, you can use the following methods:\n• None : Iterate over the rows of a DataFrame as (index, Series) pairs. This converts the rows to Series objects, which can change the dtypes and has some performance implications.\n• None : Iterate over the rows of a DataFrame as namedtuples of the values. This is a lot faster than , and is in most cases preferable to use to iterate over the values of a DataFrame. Iterating through pandas objects is generally slow. In many cases, iterating manually over the rows is not needed and can be avoided with one of the following approaches:\n• None Look for a vectorized solution: many operations can be performed using built-in methods or NumPy functions, (boolean) indexing, …\n• None When you have a function that cannot work on the full DataFrame/Series at once, it is better to use instead of iterating over the values. See the docs on function application.\n• None If you need to do iterative manipulations on the values but performance is important, consider writing the inner loop with cython or numba. See the enhancing performance section for some examples of this approach. You should never modify something you are iterating over. This is not guaranteed to work in all cases. Depending on the data types, the iterator returns a copy and not a view, and writing to it will have no effect! For example, in the following case setting the value has no effect: Consistent with the dict-like interface, iterates through key-value pairs: allows you to iterate through the rows of a DataFrame as Series objects. It returns an iterator yielding each index value along with a Series containing the data in each row: Because returns a Series for each row, it does not preserve dtypes across the rows (dtypes are preserved across columns for DataFrames). For example, All values in , returned as a Series, are now upcasted to floats, also the original integer value in column : To preserve dtypes while iterating over the rows, it is better to use which returns namedtuples of the values and which is generally much faster than . For instance, a contrived way to transpose the DataFrame would be: The method will return an iterator yielding a namedtuple for each row in the DataFrame. The first element of the tuple will be the row’s corresponding index value, while the remaining values are the row values. This method does not convert the row to a Series object; it merely returns the values inside a namedtuple. Therefore, preserves the data type of the values and is generally faster as . The column names will be renamed to positional names if they are invalid Python identifiers, repeated, or start with an underscore. With a large number of columns (>255), regular tuples are returned.\n\npandas supports three kinds of sorting: sorting by index labels, sorting by column values, and sorting by a combination of both. The and methods are used to sort a pandas object by its index levels. Sorting by index also supports a parameter that takes a callable function to apply to the index being sorted. For objects, the key is applied per-level to the levels specified by . For information on key sorting by value, see value sorting. The method is used to sort a by its values. The method is used to sort a by its column or row values. The optional parameter to may used to specify one or more columns to use to determine the sorted order. The parameter can take a list of column names, e.g.: These methods have special treatment of NA values via the argument: Sorting also supports a parameter that takes a callable function to apply to the values being sorted. will be given the of values and should return a or array of the same shape with the transformed values. For objects, the key is applied per column, so the key should still expect a Series and return a Series, e.g. The name or type of each column can be used to apply different functions to different columns. Strings passed as the parameter to may refer to either columns or index level names. If a string matches both a column name and an index level name then a warning is issued and the column takes precedence. This will result in an ambiguity error in a future version. Series has the method, which works similarly to . has the and methods which return the smallest or largest \\(n\\) values. For a large this can be much faster than sorting the entire Series and calling on the result. also has the and methods. You must be explicit about sorting when the column is a MultiIndex, and fully specify all levels to .\n\nFor the most part, pandas uses NumPy arrays and dtypes for Series or individual columns of a DataFrame. NumPy provides support for , , , and (note that NumPy does not support timezone-aware datetimes). pandas and third-party libraries extend NumPy’s type system in a few places. This section describes the extensions pandas has made internally. See Extension types for how to write your own extension that works with pandas. See the ecosystem page for a list of third-party libraries that have implemented an extension. The following table lists all of pandas extension types. For methods requiring arguments, strings can be specified as indicated. See the respective documentation sections for more on each type. pandas has two ways to store strings.\n• None dtype, which can hold any Python object, including strings.\n• None , which is dedicated to strings. Generally, we recommend using . See Text data types for more. Finally, arbitrary objects may be stored using the dtype, but should be avoided to the extent possible (for performance and interoperability with other libraries and methods. See object conversion). A convenient attribute for DataFrame returns a Series with the data type of each column. On a object, use the attribute. If a pandas object contains data with multiple dtypes in a single column, the dtype of the column will be chosen to accommodate all of the data types ( is the most general). # these ints are coerced to floats The number of columns of each type in a can be found by calling . Numeric dtypes will propagate and can coexist in DataFrames. If a dtype is passed (either directly via the keyword, a passed , or a passed ), then it will be preserved in DataFrame operations. Furthermore, different numeric dtypes will NOT be combined. The following example will give you a taste. By default integer types are and float types are , regardless of platform (32-bit or 64-bit). The following will all result in dtypes. Note that Numpy will choose platform-dependent types when creating arrays. The following WILL result in on 32-bit platform. Types can potentially be upcasted when combined with other types, meaning they are promoted from the current type (e.g. to ). will return the lower-common-denominator of the dtypes, meaning the dtype that can accommodate ALL of the types in the resulting homogeneous dtyped NumPy array. This can force some upcasting. You can use the method to explicitly convert dtypes from one to another. These will by default return a copy, even if the dtype was unchanged (pass to change this behavior). In addition, they will raise an exception if the astype operation is invalid. Upcasting is always according to the NumPy rules. If two different dtypes are involved in an operation, then the more general one will be used as the result of the operation. Convert a subset of columns to a specified type using . Convert certain columns to a specific dtype by passing a dict to . When trying to convert a subset of columns to a specified type using and , upcasting occurs. tries to fit in what we are assigning to the current dtypes, while will overwrite them taking the dtype from the right hand side. Therefore the following piece of code produces the unintended result. pandas offers various functions to try to force conversion of types from the dtype to other types. In cases where the data is already of the correct type, but stored in an array, the and methods can be used to soft convert to the correct type. Because the data was transposed the original inference stored all columns as object, which will correct. The following functions are available for one dimensional object arrays or scalars to perform hard conversion of objects to a specified type: To force a conversion, we can pass in an argument, which specifies how pandas should deal with elements that cannot be converted to desired dtype or object. By default, , meaning that any errors encountered will be raised during the conversion process. However, if , these errors will be ignored and pandas will convert problematic elements to (for datetime and timedelta) or (for numeric). This might be useful if you are reading in data which is mostly of the desired dtype (e.g. numeric, datetime), but occasionally has non-conforming elements intermixed that you want to represent as missing: In addition to object conversion, provides another argument , which gives the option of downcasting the newly (or already) numeric data to a smaller dtype, which can conserve memory: As these methods apply only to one-dimensional arrays, lists or scalars; they cannot be used directly on multi-dimensional objects such as DataFrames. However, with , we can “apply” the function over each column efficiently: Performing selection operations on type data can easily upcast the data to . The dtype of the input data will be preserved in cases where are not introduced. See also Support for integer NA."
    },
    {
        "link": "https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html",
        "document": ""
    },
    {
        "link": "https://docs.dask.org/en/stable/changelog.html",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/68440884/element-wise-division-between-two-dataframes-with-tickers-and-date-index",
        "document": "I have two dataframes with as index,\n\n as follows:\n\nAnd as follows:\n\nI checked that both dataframes have the same number of rows and columns, and no . ie, for both dataframes, returns .\n\nAnd I would like to calculate the element-wise division between those two division, ie, for the first element, I want the value of .\n\n I've seen the post here: What does .div do in Pandas (Python)\n\n So I simply try which returns all values, but doubles the number of columns.\n\nThanks for @Rafa's comment, I checked with the columns, but\n\nSo I checked with the index.\n\nbut if tried\n\nNow I am confused with whether my is a multiindex dataframe or not?\n\nAnd how I should proceed? Thanks for help."
    },
    {
        "link": "https://stackoverflow.com/questions/39494981/how-to-divide-two-dataframes-with-different-length-and-duplicated-indexs-in-pyth",
        "document": "What doesn't work in your case is not DataFrame division, which you can easily check:\n\nThe problem is that in the process of this division loses track of the order of index . Then when you are trying to assign the result back to the , you have duplicates in your index and doesn't know how to merge them, because it is an ambiguous situation to have. In general having duplicates in your index is not a good idea. Get rid of the duplicates and your code will work."
    },
    {
        "link": "https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.div.html",
        "document": "Get Floating division of dataframe and other, element-wise (binary operator ).\n\nEquivalent to , but with support to substitute a fill_value for missing data in one of the inputs. With reverse version, .\n\nAny single or multiple element data structure, or list-like object. Whether to compare by the index (0 or ‘index’) or columns. (1 or ‘columns’). For Series input, axis to match Series index on. Broadcast across a level, matching Index values on the passed MultiIndex level. fill_value float or None, default None Fill existing missing (NaN) values, and any new element needed for successful DataFrame alignment, with this value before computation. If data in both corresponding DataFrame locations is missing the result will be missing.\n\nMismatched indices will be unioned together.\n\nAdd a scalar with operator version which return the same results.\n\nSubtract a list and Series by axis with operator version.\n\nMultiply a DataFrame of different shape with operator version."
    },
    {
        "link": "https://geeksforgeeks.org/split-pandas-dataframe-by-rows",
        "document": "In this article, we will explore the process of Split Pandas Dataframe by Rows. The Pandas DataFrame serves as the focal point, and throughout this discussion, we will experiment with various methods to Split Pandas Dataframe by Rows.\n\nIn this article, we will elucidate several commonly employed methods for Split Pandas Dataframe by Rows. These methods are widely utilized for the purpose of dividing a Pandas DataFrame, and we will discuss the which are following:\n\nConsider a dataset: To illustrate, let’s consider a dataset featuring information about diamonds.\n\nIn the below code, the dataframe is divided into two parts, first 1000 rows, and remaining rows. We can see the shape of the newly formed dataframes as the output of the given code.\n\nHere, we will first grouped the data by column value “color”. The newly formed dataframe consists of grouped data with color = “E”.\n\nIn the above code, we can see that we have formed a new dataset of a size of 0.6 i.e. 60% of total rows (or length of the dataset), which now consists of 32364 rows. These rows are selected randomly.\n\nIn the below code , code randomly selects 50% of rows from DataFrame into a new DataFrame . It then prints and its index-reset version using .\n\nIn summary, splitting Pandas DataFrames by rows offers a flexible way to organize and analyze data, allowing exploration of subsets through methods like random sampling or predetermined chunk sizes. This capability is valuable for tasks such as training machine learning models, exploratory data analysis, and efficient data processing, enhancing data manipulation in the field of data science."
    },
    {
        "link": "https://datascience.stackexchange.com/questions/122893/genuinely-stumped-i-cant-divide-using-a-dataframe",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    }
]