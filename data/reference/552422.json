[
    {
        "link": "https://manual.gamemaker.io/lts/en/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio.htm",
        "document": "GameMaker has a complete audio engine that is based on the *.ogg, *.mp3 and *.wav sound formats. Sounds of these types added to the IDE can then be used in your game using the basic audio functions shown below. For things more complex than basic sound effects or playing a single piece of music you can refer to the advanced audio functions which let you modify how a sound is played. There are also a selection of more specialised functions dedicated to streaming audio, positioning audio - to give 3D sound - and grouping audio.\n\nIMPORTANT! When using audio on the HTML5 target, you should be aware that not all browsers support Web Audio and so may not play any sound for your project when run. You can get a general idea of Web Audio support from the following link: Can I Use Web Audio?.\n\nThe following functions are for dealing with audio in the most straightforward and simple way possible, avoiding the use of emitters and permitting the user to generate sounds and play music easily as these sounds are always generated at the listener position (see the section linked below for more details on the listener) and so are generally not affected by any changes to the listener:\n\nThe following functions are designed to give more control over how the audio engine works, and how the sounds played through it will be \"heard\" by the listener. As such it is recommended that you have a good working knowledge of how the rest of the GameMaker audio engine works before using any of the following functions:\n\nFurther advanced functionality, like setting listeners, recording audio, or synchronising multiple audio tracks over time can all be found from the sub-sections listed below:\n\nWhen creating games for the HTML5 target platform, the audio engine requires Web Audio support, and this in turn means that sometimes your audio won't play when or how you expect it. This is because the Web Audio context may not be running or may stop running when your game is being played. What causes this varies greatly between browsers, and even between different versions of the same browser, and so detecting when the web audio context status changes is very important, e.g.: to detect when the context changes and pause/start looping audio like background music.\n\nTo help with this issue, GameMaker has two separate ways to detect the change in Web Audio context status, either using the following function:\n\nYou may also use the Asynchronous System Event, which will be triggered whenever the Web Audio status changes. In this event you will get the built in async_load DS map populated with the key \"event_type\" which in turn will hold the string \"audio_system_status\" if it is an audio event. When this key exists, there will also be a further \"status\" key which will be either \"available\" or \"unavailable\". Note that this event will be triggered on all platforms, but on everything except HTML5 it will only be triggered once on Game Start when the audio engine is first initialised. For more information please see the section:"
    },
    {
        "link": "https://forum.gamemaker.io/index.php?threads/gms2-tracker-music-files-mod-mid-it-xm-s3m.14389/",
        "document": "You act like this is a DAW and not a Game Engine. Emitters allow panning just fine. But they allow for much more advanced panning based on spatial data vs just a knob. If you wanted simple LR panning you can just pop a listener in the center of the room and keep all the z values at 0. Then you move to the left, it pans to the left and vice versa. Really simple stuff.\n\nThanks for backing me up there, but why do you think mod would be more useful than midi? Every digital instrument and professional composition software/DAW out there still use MIDI, while only weird little demoscene programs still use mod, as far as I know...Not that I don't like trackers - I do! I'd just never compose in one over Cubase or Pro Logic or Reaper or Finale or whatever...Of course. That doesn't explain why all the 3D enthusiasts here who swear GM is capable of Unreal level stuff have never put anything out that looks better than a ps2 game, though. There's a difference between \"possible\" and \"feasible,\" which a lot of people here don't understand when they talk about what's possible in GM. Like I said, I'd love to have MIDI support for my game, but the few cool tricks I'd pull off with it aren't worth doubling my dev time on my project, hahah. :'DMaybe I'll try to dig for it later. It was from like a month and a half ago, though, so don't hold your breath. ):Don't make me take out the bold text again. Obviously midi controls panning, attack, volume, and all those other effects.Sure, and when we have ten instruments, we can set up and take down ten emitters and assign them all to instruments whenever a new song plays. You're right that it's not impossible or anything, but it'd be a pain to set up. You'd be converting midi signals to screen-space positions for something as simple as panning. And this is the simplest example I could think of. I promise it'd get real hacky, real fast.I believe in our programmers here. I don't believe GM is capable of handling MIDI/VSTi out of the box.Like I said, I'd love to be proven wrong. I don't think Mike even knows what MIDI is if he's calling it \"terrible\" while singing the praises of .mod files."
    },
    {
        "link": "https://manual.gamemaker.io/monthly/en",
        "document": ""
    },
    {
        "link": "https://reddit.com/r/gamemaker/comments/3oxo03/controlling_music_and_sound_effects_audio",
        "document": "I'm working on my menu system, and I'm trying to create controls for sound effects volume and music volume. The code I have so far works for turning down all of my audio.\n\nBasically it just says if I press right it turns up the \"vol\" variable (globally defined as 1 at initialize) or down if I press left, and plays a sound effect to give you an example.\n\nThe problem is this turns down ALL audio, and I'd like to separate sound effects and music into two controllable categories. I've looked a bit into audio groups and it seems like this would be a good way to handle it, but it seems controlling an audio group isn't handled the same way.\n\nDoes anyone have experience doing this, or know of a good walkthrough for how to set it up? Doing some research it seems more complicated than I would have thought at first brush... Thanks."
    },
    {
        "link": "https://manual.gamemaker.io/lts/en/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_play_sound.htm",
        "document": "With this function you can play any sound asset in your game.\n\nYou provide the sound asset and assign it a priority, which is then used to determine how sounds are dealt with when the number of sounds playing is over the limit set by the function audio_channel_num(). Lower priority sounds will be stopped in favour of higher priority sounds, and the priority value can be any real number (the actual value is arbitrary, and can be from 0 to 1 or 0 to 100, as GameMaker will prioritize them the same). The higher the number the higher the priority, so a sound with priority 100 will be favoured over a sound with priority 1.\n\nThe third argument is for making the sound loop and setting it to true will make the sound repeat until it's stopped manually, and setting it to false will play the sound once only.\n\nThis function will also return a unique index for the sound being played, which can be stored in a variable so you can later pause it or stop it. This means that if you have multiple instances of the same sound playing at any one time, you can target just one instance of that sound using the audio functions.\n\nThere are four optional arguments that allow you to change the Audio Properties of the sound being played at the instance/voice level: They are applied to the sound immediately. This fixes the issues you would face when calling a separate function to change any of these values, which could cause an undesired delay in the change. These properties are multiplied by their corresponding value of the sound asset. See Audio Properties Overview for a full overview. NOTE To change the value of any of these properties after playback of a sound has been started, see audio_sound_gain for gain, audio_sound_set_track_position for offset, audio_sound_pitch for pitch and audio_sound_set_listener_mask for listener mask.\n\nThe above code checks the \"health\" global variable and if it is less than or equal to 0, it will remove 1 from the \"lives\" global variable and play a sound.\n\nThe above code checks if the instance is past the right bound of the room and plays a sound with a gain of 1.1 and a pitch of 2 (twice the normal pitch)."
    },
    {
        "link": "https://forum.gamemaker.io/index.php?threads/collision-and-interaction.75037/",
        "document": "I'm having some issues with object interaction. I'm scoured the manual looking for different options but thus far, I've only found one solution but it's not good one.\n\n \n\n I have a hierarchy that handles interactable objects:\n\n \n\n Collision Object --> Interactable Object Parent Handler --> Interactable Object\n\n \n\n This way, every object, within this category, that I place automatically has a solid collision mask and I don't need to go in and manually click and drag collision objects onto my other objects. However, this has led to the creation of another problem. Whenever I want to perform an interaction (dialogue) it doesn't work because there is no collision overlap so I'm forced to do this:\n\n \n\n \n\n \n\n I think you all can see the kinds of problems I'd encounter with this method. I considered another method, which was using: . It would work, but I'd need to create a different one for every object in the game and that would just be a huge time waste. I wanted a method to be able to get the mask height/width but I haven't found any function like this in GMS2. Ideally, if there was something like this, I'd simply use it then extend the mask detection range through a parent object.\n\n \n\n Does anyone have any ideas, or is there a function like this that I'm unaware of?"
    },
    {
        "link": "https://forum.gamemaker.io/index.php?threads/collision-check-between-two-objects.5727/",
        "document": "place_meeting(X, Y, OBJ) sets the x and y coordinates of the executing instance to X and Y respectively.\n\n It then checks to see if there's a collision between the executing instance and any other instance of type OBJ.\n\n It then resets the x and y coordinates to what they were before calling place_meeting and returns the result.\n\n The reason this function asks for X and Y coordinates is because you don't always want to know\n\n if the executing instance currently collides, but if it would collide if it were placed a couple of bits further.\n\n For example, you can check if the instance is on the ground by checking if the instance would collide with the ground if it were placed 1 pixel lower.\n\n You would then use place_meeting(x, y + 1, obj_ground)."
    },
    {
        "link": "https://reddit.com/r/gamemaker/comments/1ely83s/object_interaction_using_player_collision_line",
        "document": "Hi. I have done some pretty extensive searching for object interaction / collisions and have found somewhat mixed opinions. Please note I am quite new to GML and may be missing something obvious.\n\nI am making a pixel RPG (surprise) and am implementing a simple mechanic of [player collision with object] + [pressing the E key] = specific script executes based on the object. HOWEVER, after a lot of googling, it seemed like using a player collision line would be the easiest since I don't want my player object to physically have to be on top of another object to make it interactable, nor do I want to make a large \"collision/interact\" box since I read there can be issues with different interactable objects overlapping etc. For the player collision line, picture a white line extending from the center of my player sprite (based on the direction I am facing, which is another reason I wanted to use collision lines) that can identity instances it is colliding with, and a variable that holds the ID of the instance it touched. (That seems to be all collision_line can do - return the instance ID).\n\nThis is where I am running into a logic issue. I don't want every single object interaction to be coded inside my player object. I want, say, the lamp object to run the script that turns the light off if the player interacts with it rather than doing that in the player object step event. However...and this is where I feel like a newbie...how do I get my lamp object, for example, to register the collision? It seems like collision_line only identifies collisions from the player object's perspective. I'm just having trouble making the jump from my player object identified a collision to then executing the interaction in the object the player is colliding with.\n\nI tried having this in the lamp object's step event:\n\nI also tried the same code with place_meeting instead of instance_place.\n\nI also tried making a collision event with the player for the lamp object as well. But the lamp doesn't register any collision whatsoever (because the player collision line isn't being registered on the lamp object's end, I guess). I also thought about each object having a collision line instead, but that would be much harder to code since objects don't necessarily face one direction (i.e., a bed) nor would there be a good way to code how long the collision line should be.\n\nAny help would be much appreciated, or any additional ideas on a better way to handle object interactions. I mainly was looking for a method that could be handled through a parent object with the correct script being the only code unique to each object. I didn't include much code since I believe this is more of a logic issue than anything."
    },
    {
        "link": "https://manual.gamemaker.io/lts/en/GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/Collisions.htm",
        "document": "When planning motions or deciding on certain actions, it is often important to see whether there are collisions with other objects at certain places within the game world, and often choosing the right collision function for the job is the most important task of all. GameMaker has a number of built-in functions to help you deal with collisions correctly and in accordance with the needs of your project.\n\nThe simplest way to check for collisions against objects is to use place_meeting.\n\nThis checks for collisions against instances of obj_rock only. If there is no rock at x + 4, it changes the X position to move the instance there.\n\nYou can check for collisions against multiple objects, in two ways:\n• Assign a parent to those objects, and check against that single parent\n• Or, pass an array containing the objects you want to check against\n\nUsing the second method of passing an array, your code would look like this:\n\nThis checks for collisions against instances of obj_rock and obj_bush in the same function call.\n\nTIP It is recommended to use the parenting method for multiple collision checks, as you can use the same parent in multiple function calls, without having to keep track of an array.\n\nThe place_meeting function only returns true or false. If you need to access the instance that was found in collision, use instance_place, which returns an instance handle.\n\nIn addition to objects, you can also pass a Tile Map Element ID to a collision function. This will check for collisions with that Tile Map.\n\nUse layer_tilemap_get_id to get the Tile Map ID for a layer, and then pass that ID into a collision function.\n\nYou can combine objects and Tile Maps when passing an array to a collision function.\n• Collisions against Tile Maps are checked using the collision mask of the sprite used for the Tile Set, which can be modified in The Sprite Editor.\n• A function like or (and other equivalents) may return 0 if a collision was found with a Tile Map having the ID 0. This means you should not use the return value as a boolean condition. Instead, check whether the return value is not , meaning a collision was found.\n• \"Disable Source Sprite Export\" needs to be unchecked in your Tile Set's editor for tile collisions to work.\n\nSome instances will use a rectangular bounding box for checking collisions (unless a different mask shape is selected).\n\nThese bounding boxes use an inclusive system, i.e. they include the bottom-most and right-most edges. This means that the bounding box for a 16x16 collision mask is generated from (0.0, 0.0) to (16.0, 16.0) (relative to the instance).\n\nNOTE You can get these values using the bbox_left, bbox_top, bbox_right and bbox_bottom variables.\n\nNOTE Since the bounding box is inclusive (as explained above), it will always extend 1 pixel beyond its bottom-right corner compared to the sprite's bounding box. For example, a 16x16 square sprite's right edge offset will be 15.0 (the 16th pixel when starting from 0), however an instance using this sprite will give you a bbox_right of 16 (+ its X position).\n\nFor two instances to be in collision, their bounding boxes have to overlap. At a pixel level, an overlap is counted when the centre of that pixel is covered.\n\nFor example, if you're trying to collide with a bounding box covering the area from (0.0, 0.0) to (16.0, 16.0), the edge of your mask has to touch the area between (0.5, 0.5) and (15.5, 15.5) for a collision to be counted.\n\nThe following functions deal with the various ways in which you can have an instance check for collisions with another instance:\n\nThe following functions can be used for this (as well as other functions detailed in the sections relating to Moving Around and Instances). These collision functions all work slightly differently but they maintain three common arguments which we will explain here:\n• obj: This is where we specify the object that the function has to check for a collision with. It can be an instance id, an object type, or the special GM keyword all. It is also worth noting that if the object type chosen is the designated parent of other objects, then all children of that object will be included in this check too.\n• prec: This can be either or and relates to the precision of the collision checking. If set to , then precise collisions are to be calculated (but only if the object being checked for has \"precise\" marked for its collision detection in its mask properties) which is a slightly more complex task for the CPU and so should be used with caution. If then collisions will be calculated based on the bounding box of the object to be checked for.\n• notme: You may need to check for collisions with an object that has the same index as the object that runs the code, so to prevent the code finding a collision with itself, you can set this to . If you are specifically looking for the instance of the object running the code, or it's not important, it can be left as .\n\nThe basic functions will return either the ID of an instance found to be colliding, or the special keyword noone when there is no collision, while the list functions will return the number of instances that are in collision and populate a pre-made DS list with their IDs. Note that if there are multiple collisions with the areas defined by these functions and instances of the given object, only one instance ID is returned, and it can be any one of the instances in the collision.\n\nThe following functions exist that deal with advanced collisions.\n\nAll of the above functions are related to collision checking instances, and as such rely on the collision mask that is defined for the instance. However, there are many moments when you require to check for \"collisions\" with a point or an area, especially when your instance does not have a sprite assigned, or when you are working with the mouse etc... Therefore GameMaker also provides the following functions to help you in these situations:\n\nWhen using the built-in physics, the above collision functions are not guaranteed to work for physics enabled instances. This is mainly due to the fact that these instances no longer use the majority of the regular built in variables (instead, physics enabled instances have their own set of variables) and neither do they use the collision mask or bounding box, as they use fixtures instead. However there is a special function for testing collisions with physics enabled that checks for overlapping fixtures:"
    },
    {
        "link": "https://reddit.com/r/gamemaker/comments/11hhad3/pixelperfect_objectbased_collision_tutorial",
        "document": "NOTE: This tutorial does NOT take diagonal/slope collisions into account.\n\nThis tutorial is to help anyone who is having gaps/overlaps in their collision code. The purpose of this tutorial is to correct these gaps/overlaps by providing a solution using a pixel- and subpixel-perfect collision system.\n\nIf you have followed previous tutorials on collision code, then you should be familiar with how basic collisions are commonly set up.\n\n...then check for vertical collisions the same way.\n\nThis code is fine and is certainly a way to check for collisions. However, it is not pixel-perfect. Let me explain why.\n\nWhen we are moving at whole number increments (move speed does not contain a decimal), this system should run perfectly. No gaps, no overlaps. Completely pixel-perfect. Right? Well, no. Once we add fractional/decimal movement (such as friction, acceleration, and/or gravity), things start to get messy. You may find gaps/overlaps in your game, which isn't good because it can break the player experience. For example, the image below shows a player (white square) with a move speed of 0.99 colliding with the wall (red squares) using the collision system above. As you can probably tell, there are some issues. There's a gap, an overlap, and the x and y coordinates are not whole numbers, meaning the player is not flush with the wall.\n\nThe reason for this is because if we are moving at a fractional/decimal speed and we approach a wall using this collision code, the code will check to see if we are 0.99 pixels away from the wall, and if we are, then the \"while\" loop will move us forward one whole pixel. We don't want to move forward 1 pixel, we want to move 0.99 pixels so that we can be flush with the wall. We can attempt to fix this by making the rate at which we inch up to the wall smaller, but it still won't be quite as precise.\n\nSo how do we fix this? Well, I have a simple solution. We can \"snap\" the player to the wall before we collide with it, putting the player exactly where he needs to be. So if we approach a wall from our right, we can use the left side of the wall to match the right side of the player. To do this, we need to establish a few variables first.\n\nThese variables give us the distance between the player's origin and the sides of our bounding box, which will be useful for re-aligning the player later on. If you've seen GM Wolf's video on tilemap collisions, then this should look familiar.\n\nNOTE: If your collision mask differs from the sprite itself, change \"sprite_index\" to \"mask_index\". (Use Ctrl+F to find and replace)\n\nAlright, so here is the code for our new collision system:\n\nSo what's happening here is we're getting the instance id of the wall we are about to collide with (this is important so that we can use the bounding box variables of the wall) and directly moving the player up to the wall depending on which direction the player is moving. For directions \"right\" and \"down\", we have to subtract 1 (reasons why explained in this video). After that, we set our speed to 0.\n\nAnd we're done! Here are the results (player's move speed is still 0.99):\n\nAs you can see, the player is completely flush with the wall. No gaps, no overlaps, and our x and y coordinates are whole numbers. This is pixel-perfect.\n\nReally that's all there is to it. You can insert this code into the \"Step\" event of the player, or just put it all into a script and call it from there.\n\nHope this tutorial helps and if you have any questions/comments, feel free to leave them down below. :)\n\nEDIT: So I noticed that when working with very small speeds (below 0.25 I found), \"instance_place\" seems to not work as intended and the system breaks. I found the player \"jumping\" into position whenever they collide with a wall at a speed lower than 0.25 using this system. I think this is because there is a tolerance value applied to \"instance_place\" where the player has to be within the wall a certain amount of subpixels before the collision registers. Luckily, I've developed a solution that directly compares the bounding boxes of both the calling instance (player) and the colliding instance (wall) to get a precise collision without this tolerance value. It's a script I call \"collision_real\", and there's two versions: \"collision_real(obj)\", which simply returns true if there's a collision with a given object, and \"collision_real_id(obj)\", which returns the id of the colliding object upon collision.\n\nTo use, create a script in your project (name it whatever you want), then copy/paste the code into the script (or use the GitHub link above). This should fix this minor bug."
    }
]