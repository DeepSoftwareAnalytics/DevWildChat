[
    {
        "link": "https://isocpp.org/wiki/faq/freestore-mgmt",
        "document": "How do I deal with memory leaks?\n\nBy writing code that doesn’t have any. Clearly, if your code has operations, operations, and pointer arithmetic all over the place, you are going to mess up somewhere and get leaks, stray pointers, etc. This is true independently of how conscientious you are with your allocations: eventually the complexity of the code will overcome the time and effort you can afford.\n\nIt follows that successful techniques rely on hiding allocation and deallocation inside more manageable types: For single objects, prefer or . For multiple objects, prefer using standard containers like and as they manage memory for their elements better than you could without disproportionate effort. Consider writing this without the help of and :\n\nWhat would be your chance of getting it right the first time? And how would you know you didn’t have a leak?\n\nNote the absence of explicit memory management, macros, casts, overflow checks, explicit size limits, and pointers. By using a function object and a standard algorithm, the code could additionally have eliminated the pointer-like use of the iterator, but that seemed overkill for such a tiny program.\n\nThese techniques are not perfect and it is not always easy to use them systematically. However, they apply surprisingly widely and by reducing the number of explicit allocations and deallocations you make the remaining examples much easier to keep track of. As early as 1981, Stroustrup pointed out that by reducing the number of objects that he had to keep track of explicitly from many tens of thousands to a few dozens, he had reduced the intellectual effort needed to get the program right from a Herculean task to something manageable, or even easy.\n\nIf your application area doesn’t have libraries that make programming that minimizes explicit memory management easy, then the fastest way of getting your program complete and correct might be to first build such a library.\n\nTemplates and the standard libraries make this use of containers, resource handles, etc., much easier than it was even a few years ago. The use of exceptions makes it close to essential.\n\nIf you cannot handle allocation/deallocation implicitly as part of an object you need in your application anyway, you can use a resource handle to minimize the chance of a leak. Here is an example where you need to return an object allocated on the free store from a function. This is an opportunity to forget to delete that object. After all, we cannot tell just looking at pointer whether it needs to be deallocated and if so who is responsible for that. Using a resource handle, here the standard library , makes it clear where the responsibility lies:\n\nThink about resources in general, rather than simply about memory.\n\nIf systematic application of these techniques is not possible in your environment (you have to use code from elsewhere, part of your program was written by Neanderthals, etc.), be sure to use a memory leak detector as part of your standard development procedure, or plug in a garbage collector.\n\nCan I use just as in Java?\n\nSort of, but don’t do it blindly, if you do want it prefer to spell it as or , and there are often superior alternatives that are simpler and more robust than any of that. Consider:\n\nThe clumsy use of for is unnecessary and slow compared with the idiomatic use of a local variable ( ). You don’t need to use to create an object if you also that object in the same scope; such an object should be a local variable.\n\nShould I use or or ?\n\nYou should use as the null pointer value. The others still work for backward compatibility with older code.\n\nA problem with both and as a null pointer value is that is a special “maybe an integer value and maybe a pointer” value. Use only for integers, and that confusion disappears.\n\nDoes delete the pointer , or the pointed-to-data ?\n\nThe keyword should really be . The same abuse of English occurs when ing the memory pointed to by a pointer in C: really means .\n\nIs it safe to the same pointer twice?\n\nNo! (Assuming you didn’t get that pointer back from in between.)\n\nFor example, the following is a disaster:\n\nThat second line might do some really bad things to you. It might, depending on the phase of the moon, corrupt your heap, crash your program, make arbitrary and bizarre changes to objects that are already out there on the heap, etc. Unfortunately these symptoms can appear and disappear randomly. According to Murphy’s law, you’ll be hit the hardest at the worst possible moment (when the customer is looking, when a high-value transaction is trying to post, etc.).\n\nNote: some runtime systems will protect you from certain very simple cases of double . Depending on the details, you might be okay if you happen to be running on one of those systems and if no one ever deploys your code on another system that handles things differently and if you are deleting something that doesn’t have a destructor and if you don’t do anything significant between the two s and if no one ever changes your code to do something significant between the two s and if your thread scheduler (over which you likely have no control!) doesn’t happen to swap threads between the two s and if, and if, and if. So back to Murphy: since it can go wrong, it will, and it will go wrong at the worst possible moment.\n\nDo NOT email me saying you tested it and it doesn’t crash. Get a clue. A non-crash doesn’t prove the absence of a bug; it merely fails to prove the presence of a bug.\n\nTrust me: double- is bad, bad, bad. Just say no.\n\nCan I pointers allocated with ? Can I pointers allocated with ?\n\nNo! In brief, conceptually and allocate from different heaps, so can’t or each other’s memory. They also operate at different levels – raw memory vs. constructed objects.\n\nYou can use and in the same program. But you cannot allocate an object with and free it using . Nor can you allocate with and with or use on an array allocated by .\n\nThe C++ operators and guarantee proper construction and destruction; where constructors or destructors need to be invoked, they are. The C-style functions , , , and don’t ensure that. Furthermore, there is no guarantee that the mechanism used by and to acquire and release raw memory is compatible with and . If mixing styles works on your system, you were simply “lucky” – for now.\n\nIf you feel the need for – and many do – then consider using a standard library . For example\n\nSee also the examples and discussion in “Learning Standard C++ as a New Language”, which you can download from Stroustrup’s publications list.\n\nWhat is the difference between and ?\n\nFirst, (or ) are nearly always superior to both and and completely eliminate and .\n\nHaving said that, here’s the difference between those two:\n\nis a function that takes a number (of bytes) as its argument; it returns a pointing to unitialized storage. is an operator that takes a type and (optionally) a set of initializers for that type as its arguments; it returns a pointer to an (optionally) initialized object of its type. The difference is most obvious when you want to allocate an object of a user-defined type with non-trivial initialization semantics. Examples:\n\nNote that when you specify a initializer using the “(value)” notation, you get initialization with that value. Often, a is a better alternative to a free-store-allocated array (e.g., consider exception safety).\n\nWhenever you use you must consider initialization and conversion of the return pointer to a proper type. You will also have to consider if you got the number of bytes right for your use. There is no performance difference between and when you take initialization into account.\n\nreports memory exhaustion by returning . reports allocation and initialization errors by throwing exceptions ( ).\n\nObjects created by are destroyed by . Areas of memory allocated by are deallocated by .\n\nWhy should I use instead of trustworthy old ?\n\nFirst, (or ) are nearly always superior to both and and completely eliminate and .\n\nHaving said that, benefits of using instead of are: Constructors/destructors, type safety, overridability.\n• Type safety: returns a which isn’t type safe. returns a pointer of the right type (a ).\n• Overridability: is an that can be overridden by a class, while is not overridable on a per-class basis.\n\nCan I use on pointers allocated via ?\n\nWhen has to copy the allocation, it uses a bitwise copy operation, which will tear many C++ objects to shreds. C++ objects should be allowed to copy themselves. They use their own copy constructor or assignment operator.\n\nBesides all that, the heap that uses may not be the same as the heap that and use!\n\nWhy doesn’t C++ have an equivalent to ?\n\nIf you want to, you can of course use . However, is only guaranteed to work on arrays allocated by (and similar functions) containing objects without user-defined copy constructors. Also, please remember that contrary to naive expectations, occasionally does copy its argument array.\n\nIn C++, a better way of dealing with reallocation is to use a standard library container, such as , and let it grow naturally.\n\nDo I need to check for null after ?\n\nNo! (But if you have an ancient, stone-age compiler, you may have to force the operator to an exception if it runs out of memory.)\n\nIt turns out to be a real pain to always write explicit tests after every allocation. Code like the following is very tedious:\n\nIf your compiler doesn’t support (or if you refuse to use) exceptions, your code might be even more tedious:\n\nTake heart. In C++, if the runtime system cannot allocate bytes of memory during , a exception will be thrown. Unlike , never returns null!\n\nTherefore you should simply write:\n\nOn the second thought. Scratch that. You should simply write:\n\nThere, there… Much better now!\n\nHowever, if your compiler is ancient, it may not yet support this. Find out by checking your compiler’s documentation under “ ”. If it is ancient, you may have to force the compiler to have this behavior.\n\nHow can I convince my (older) compiler to automatically check to see if it returns null?\n\nIf you have an old compiler that doesn’t automagically perform the null test, you can force the runtime system to do the test by installing a “new handler” function. Your “new handler” function can do anything you want, such as an exception, some objects and return (in which case will retry the allocation), print a message and the program, etc.\n\nHere’s a sample “new handler” that prints a message and s an exception. The handler is installed using :\n\nAfter the line is executed, will call your if/when it runs out of memory. This means that will never return null:\n\nNote: If your compiler doesn’t support exception handling, you can, as a last resort, change the line … to:\n\nNote: If some namespace-scope / global / static object’s constructor uses , it might not use the function since that constructor often gets called before begins. Unfortunately there’s no convenient way to guarantee that the will be called before the first use of . For example, even if you put the call in the constructor of a global object, you still don’t know if the module (“compilation unit”) that contains that global object will be elaborated first or last or somewhere inbetween. Therefore you still don’t have any guarantee that your call of will happen before any other namespace-scope / global’s constructor gets invoked.\n\nDo I need to check for null before ?\n\nThe C++ language guarantees that will do nothing if is null. Since you might get the test backwards, and since most testing methodologies force you to explicitly test every branch point, you should not put in the redundant test.\n\nWhat are the two steps that happen when I say ?\n\nis a two-step process: it calls the destructor, then releases the memory. The code generated for is functionally similar to this (assuming is of type ):\n\nThe statement calls the destructor for the object pointed to by .\n\nThe statement calls the memory deallocation primitive, . This primitive is similar in spirit to . (Note, however, that these two are not interchangeable; e.g., there is no guarantee that the two memory deallocation primitives even use the same heap!)\n\nWhy doesn’t null out its operand?\n\nFirst, you should normally be using smart pointers, so you won’t care – you won’t be writing anyway.\n\nFor those rare cases where you really are doing manual memory management and so do care, consider:\n\nIf the part doesn’t touch then the second is a serious error that a C++ implementation cannot effectively protect itself against (without unusual precautions). Since deleting a null pointer is harmless by definition, a simple solution would be for to do a after it has done whatever else is required. However, C++ doesn’t guarantee that.\n\nOne reason is that the operand of need not be an lvalue. Consider:\n\nHere, the implementation of does not have a pointer to which it can null out. These examples may be rare, but they do imply that it is not possible to guarantee that “any pointer to a deleted object is null.” A simpler way of bypassing that “rule” is to have two pointers to an object:\n\nC++ explicitly allows an implementation of to null out an lvalue operand, but that idea doesn’t seem to have become popular with implementers.\n\nIf you consider zeroing out pointers important, consider using a destroy function:\n\nConsider this yet-another reason to minimize explicit use of and by relying on standard library smart pointers, containers, handles, etc.\n\nNote that passing the pointer as a reference (to allow the pointer to be nulled out) has the added benefit of preventing from being called for an rvalue:\n\nWhy isn’t the destructor called at the end of scope?\n\nThe simple answer is “of course it is!”, but have a look at the kind of example that often accompany that question:\n\nThat is, there was some (mistaken) assumption that the object created by would be destroyed at the end of a function.\n\nBasically, you should only use heap allocation if you want an object to live beyond the lifetime of the scope you create it in. Even then, you should normally use or . In those rare cases where you do want heap allocation and you opt to use , you need to use to destroy the object. For example:\n\nIf you want an object to live in a scope only, don’t use heap allocation at all but simply define a variable:\n\nThe variable is implicitly destroyed at the end of the scope.\n\nCode that creates an object using and then s it at the end of the same scope is ugly, error-prone, inefficient, and usually not exception-safe. For example:\n\nIn , does the memory “leak” if the constructor throws an exception?\n\nIf an exception occurs during the constructor of , the C++ language guarantees that the memory bytes that were allocated will automagically be released back to the heap.\n\nHere are the details: is a two-step process:\n• bytes of memory are allocated using the primitive . This primitive is similar in spirit to . (Note, however, that these two are not interchangeable; e.g., there is no guarantee that the two memory allocation primitives even use the same heap!).\n• It constructs an object in that memory by calling the constructor. The pointer returned from the first step is passed as the parameter to the constructor. This step is wrapped in a … block to handle the case when an exception is thrown during this step.\n\nThus the actual generated code is functionally similar to:\n\nThe statement marked “Placement ” calls the constructor. The pointer becomes the pointer inside the constructor, .\n\nHow do I allocate / unallocate an array of things?\n\nAny time you allocate an array of objects via (usually with the n in the expression), you must use in the statement. This syntax is necessary because there is no syntactic difference between a pointer to a thing and a pointer to an array of things (something we inherited from C).\n\nWhat if I forget the when ing an array allocated via ?\n\nAll life comes to a catastrophic end.\n\nIt is the programmer’s —not the compiler’s— responsibility to get the connection between and correct. If you get it wrong, neither a compile-time nor a run-time error message will be generated by the compiler. Heap corruption is a likely result. Or worse. Your program will probably die.\n\nCan I drop the when ing an array of some built-in type ( , , etc)?\n\nSometimes programmers think that the in the only exists so the compiler will call the appropriate destructors for all elements in the array. Because of this reasoning, they assume that an array of some built-in type such as or can be d without the . E.g., they assume the following is valid code:\n\nBut the above code is wrong, and it can cause a disaster at runtime. In particular, the code that’s called for is , but the code that’s called for is . The default behavior for the latter is to call the former, but users are allowed to replace the latter with a different behavior (in which case they would normally also replace the corresponding code in ). If they replaced the code so it wasn’t compatible with the code, and you called the wrong one (i.e., if you said rather than ), you could end up with a disaster at runtime.\n\nAfter , how does the compiler know there are objects to be destructed during ?\n\nLong answer: The run-time system stores the number of objects, , somewhere where it can be retrieved if you only know the pointer, . There are two popular techniques that do this. Both these techniques are in use by commercial-grade compilers, both have tradeoffs, and neither is perfect. These techniques are:\n• Over-allocate the array and put just to the left of the first object.\n• Use an associative array with as the key and as the value.\n\nIs it legal (and moral) for a member function to say ?\n\nAs long as you’re careful, it’s okay (not evil) for an object to commit suicide ( ).\n• You must be absolutely 100% positively sure that object was allocated via (not by , nor by placement , nor a local object on the stack, nor a namespace-scope / global, nor a member of another object; but by plain ordinary ).\n• You must be absolutely 100% positively sure that your member function will be the last member function invoked on object.\n• You must be absolutely 100% positively sure that the rest of your member function (after the line) doesn’t touch any piece of object (including calling any other member functions or touching any data members). This includes code that will run in destructors for any objects allocated on the stack that are still alive.\n• You must be absolutely 100% positively sure that no one even touches the pointer itself after the line. In other words, you must not examine it, compare it with another pointer, compare it with , print it, cast it, do anything with it.\n\nNaturally the usual caveats apply in cases where your pointer is a pointer to a base class when you don’t have a virtual destructor.\n\nHow do I allocate multidimensional arrays using ?\n\nThere are many ways to do this, depending on how flexible you want the array sizing to be. On one extreme, if you know all the dimensions at compile-time, you can allocate multidimensional arrays statically (as in C):\n\nMore commonly, the size of the matrix isn’t known until run-time but you know that it will be rectangular. In this case you need to use the heap (“freestore”), but at least you are able to allocate all the elements in one freestore chunk.\n\nFinally at the other extreme, you may not even be guaranteed that the matrix is rectangular. For example, if each row could have a different length, you’ll need to allocate each row individually. In the following function, is the number of columns in row number , where varies between and inclusive.\n\nNote the funny use of in the deletion process. This prevents wrap-around of the value when goes one step below zero.\n\nFinally, note that pointers and arrays are evil. It is normally much better to encapsulate your pointers in a class that has a safe and simple interface. The following FAQ shows how to do this.\n\nBut the previous FAQ’s code is SOOOO tricky and error prone! Isn’t there a simpler way?\n\nThe reason the code in the previous FAQ was so tricky and error prone was that it used pointers, and we know that pointers and arrays are evil. The solution is to encapsulate your pointers in a class that has a safe and simple interface. For example, we can define a class that handles a rectangular matrix so our user code will be vastly simplified when compared to the the rectangular matrix code from the previous FAQ:\n\nThe main thing to notice is the lack of clean-up code. For example, there aren’t any statements in the above code, yet there will be no memory leaks, assuming only that the destructor does its job correctly.\n\nHere’s the code that makes the above possible:\n\nNote that the above class accomplishes two things: it moves some tricky memory management code from the user code (e.g., ) to the class, and it reduces the overall bulk of program. The latter point is important. For example, assuming is even mildly reusable, moving complexity from the users [plural] of into itself [singular] is equivalent to moving complexity from the many to the few. Anyone who has seen Star Trek 2 knows that the good of the many outweighs the good of the few… or the one.\n\nBut the above class is specific to ! Isn’t there a way to make it generic?\n\nHere’s how this can be used:\n\nNow it’s easy to use for things other than . For example, the following uses a of (where is the standard string class):\n\nYou can thus get an entire family of classes from a template. For example, , , , etc.\n\nHere’s one way that the template can be implemented:\n\nWhat’s another way to build a template?\n\nUse the standard template, and make a of .\n\nThe following uses a .\n\nNote how much simpler this is than the previous: there is no explicit in the constructor, and there is no need for any of The Big Three (destructor, copy constructor or assignment operator). Simply put, your code is a lot less likely to have memory leaks if you use than if you use explicit and .\n\nNote also that doesn’t force you to allocate numerous chunks of memory. If you prefer to allocate only one chunk of memory for the entire matrix, as was done in the previous, just change the type of to and add member variables and . You’ll figure out the rest: initialize using , change to , etc.\n\nDoes C++ have arrays whose length can be specified at run-time?\n\nYes, in the sense that the standard library has a template that provides this behavior.\n\nNo, in the sense that built-in array types need to have their length specified at compile time.\n\nYes, in the sense that even built-in array types can specify the first index bounds at run-time. E.g., comparing with the previous FAQ, if you only need the first array dimension to vary then you can just ask new for an array of arrays, rather than an array of pointers to arrays:\n\nYou can’t do this if you need anything other than the first dimension of the array to change at run-time.\n\nBut please, don’t use arrays unless you have to. Arrays are evil. Use some object of some class if you can. Use arrays only when you have to.\n\nHow can I force objects of my class to always be created via rather than as local, namespace-scope, global, or ?\n\nAs usual with the Named Constructor Idiom, the constructors are all or , and there are one or more methods (the so-called “named constructors”), one per constructor. In this case the methods allocate the objects via . Since the constructors themselves are not , there is no other way to create objects of the class.\n\nNow the only way to create objects is via :\n\nMake sure your constructors are in the section if you expect to have derived classes.\n\nNote also that you can make another class a of if you want to allow a to have a member object of class , but of course this is a softening of the original goal, namely to force objects to be allocated via .\n\nHow do I do simple reference counting?\n\nIf all you want is the ability to pass around a bunch of pointers to the same object, with the feature that the object will automagically get d when the last pointer to it disappears, you can use something like the following “smart pointer” class:\n\nNaturally you can use nested classes to rename to .\n\nNote that you can soften the “never ” rule above with a little more checking in the constructor, copy constructor, assignment operator, and destructor. If you do that, you might as well put a check into the “ ” and “ ” operators (at least as an ). I would recommend against an method, since that would let people accidentally get at the .\n\nOne of the implicit constraints on is that it must only point to objects which have been allocated via . If you want to be really safe, you can enforce this constraint by making all of ’s constructors , and for each constructor have a ( ) method which allocates the object via and returns a (not a ). That way the only way anyone could create a object would be to get a (“ ” would be replaced by “ ”). Thus no one could accidentally subvert the reference counting mechanism.\n\nFor example, if had a and a , the changes to would be:\n\nThe end result is that you now have a way to use simple reference counting to provide “pointer semantics” for a given object. Users of your explicitly use objects, which act more or less like pointers. The benefit is that users can make as many copies of their “smart pointer” objects, and the pointed-to object will automagically get d when the last such object vanishes.\n\nIf you’d rather give your users “reference semantics” rather than “pointer semantics,” you can use reference counting to provide “copy on write”.\n\nHow do I provide reference counting with copy-on-write semantics?\n\nReference counting can be done with either pointer semantics or reference semantics. The previous FAQ shows how to do reference counting with pointer semantics. This FAQ shows how to do reference counting with reference semantics.\n\nThe basic idea is to allow users to think they’re copying your objects, but in reality the underlying implementation doesn’t actually do any copying unless and until some user actually tries to modify the underlying object.\n\nClass houses all the data that would normally go into the . also has an extra data member, , to manage the reference counting. Class ends up being a “smart reference” that (internally) points to a .\n\nIf it is fairly common to call ’s default constructor, you can avoid all those calls by sharing a common object for all s that are constructed via . To avoid initialization order problems, this shared object is created “on first use” inside a function. Here are the changes that would be made to the above code (note that the shared object’s destructor is never invoked; if that is a problem, either hope you don’t have any initialization order problems, or drop back to the approach described above):\n\nNote: You can also provide reference counting for a hierarchy of classes if your class would normally have been a base class.\n\nHow do I provide reference counting with copy-on-write semantics for a hierarchy of classes?\n\nThe previous FAQ presented a reference counting scheme that provided users with reference semantics, but did so for a single class rather than for a hierarchy of classes. This FAQ extends the previous technique to allow for a hierarchy of classes. The basic difference is that is now the root of a hierarchy of classes, which probably cause it to have some functions. Note that class itself will still not have any functions.\n\nThe Virtual Constructor Idiom is used to make copies of the objects. To select which derived class to create, the sample code below uses the Named Constructor Idiom, but other techniques are possible (a statement in the constructor, etc). The sample code assumes two derived classes: and . Methods in the derived classes are unaware of the reference counting.\n\nNaturally the constructors and methods for and will need to be implemented in whatever way is appropriate.\n\nCan I absolutely prevent people from subverting the reference counting mechanism, and if so, should I?\n\nNo, and (normally) no.\n\nThere are two basic approaches to subverting the reference counting mechanism:\n• The scheme could be subverted if someone got a (rather than being forced to use a ). Someone could get a if class has an that returns a : . Yes it’s bizarre and unexpected, but it could happen. This hole could be closed in two ways: overload so it returns a , or change the return type of so it returns a ( would be a class that simulates a reference; it would need to have all the methods that has, and it would need to forward all those method calls to the underlying object; there might be a performance penalty for this second choice depending on how good the compiler is at inlining methods). Another way to fix this is to eliminate — and lose the corresponding ability to get and use a . But even if you did all this, someone could still generate a by explicitly calling : .\n• The scheme could be subverted if someone had a leak and/or dangling pointer to a . Basically what we’re saying here is that is now safe, but we somehow want to prevent people from doing stupid things with objects. (And if we could solve that via objects, we’d have the same problem again with them). One hole here is if someone created a using , then allowed the to leak (worst case this is a leak, which is bad but is usually a little better than a dangling pointer). This hole could be plugged by declaring as , thus preventing someone from saying . Another hole here is if someone creates a local object, then takes the address of that and passed around the . If that lived longer than the , you could have a dangling pointer — shudder. This hole could be plugged by preventing people from taking the address of a (by overloading as ), with the corresponding loss of functionality. But even if you did all that, they could still create a which is almost as dangerous as a , simply by doing this: (or by passing the to someone else).\n\nAnd even if we closed all those holes, C++ has those wonderful pieces of syntax called pointer casts. Using a pointer cast or two, a sufficiently motivated programmer can normally create a hole that’s big enough to drive a proverbial truck through. (By the way, pointer casts are evil.)\n\nSo the lessons here seem to be: (a) you can’t prevent espionage no matter how hard you try, and (b) you can easily prevent mistakes.\n\nSo I recommend settling for the “low hanging fruit”: use the easy-to-build and easy-to-use mechanisms that prevent mistakes, and don’t bother trying to prevent espionage. You won’t succeed, and even if you do, it’ll (probably) cost you more than it’s worth.\n\nSo if we can’t use the C++ language itself to prevent espionage, are there other ways to do it? Yes. I personally use old fashioned code reviews for that. And since the espionage techniques usually involve some bizarre syntax and/or use of pointer-casts and unions, you can use a tool to point out most of the “hot spots.”\n\nCan I use a garbage collector in C++?\n\nIf you want automatic garbage collection, there are good commercial and public-domain garbage collectors for C++. For applications where garbage collection is suitable, C++ is an excellent garbage collected language with a performance that compares favorably with other garbage collected languages. See The C++ Programming Language (4th Edition) for a discussion of automatic garbage collection in C++. See also, Hans-J. Boehm’s site for C and C++ garbage collection.\n\nAlso, C++ supports programming techniques that allows memory management to be safe and implicit without a garbage collector. Garbage collection is useful for specific needs, such as inside the implementation of lock-free data structures to avoid ABA issues, but not as a general-purpose default way of handling for resource management. We are not saying that GC is not useful, just that there are better approaches in many situations.\n\nCompared with the “smart pointer” techniques, the two kinds of garbage collector techniques are:\n• usually more efficient (especially when the average object size is small or in multithreaded environments)\n• able to handle “cycles” in the data (reference counting techniques normally “leak” if the data structures can form a cycle)\n• sometimes leak other objects (since the garbage collectors are necessarily conservative, they sometimes see a random bit pattern that appears to be a pointer into an allocation, especially if the allocation is large; this can allow the allocation to leak)\n• work better with existing libraries (since smart pointers need to be used explicitly, they may be hard to integrate with existing libraries)\n\nWhat are the two kinds of garbage collectors for C++?\n\nIn general, there seem to be two flavors of garbage collectors for C++:\n• Conservative garbage collectors. These know little or nothing about the layout of the stack or of C++ objects, and simply look for bit patterns that appear to be pointers. In practice they seem to work with both C and C++ code, particularly when the average object size is small. Here are some examples, in alphabetical order:\n• Hybrid garbage collectors. These usually scan the stack conservatively, but require the programmer to supply layout information for heap objects. This requires more work on the programmer’s part, but may result in improved performance. Here are some examples, in alphabetical order:\n\nSince garbage collectors for C++ are normally conservative, they can sometimes leak if a bit pattern “looks like” it might be a pointer to an otherwise unused block. Also they sometimes get confused when pointers to a block actually point outside the block’s extent (which is illegal, but some programmers simply must push the envelope; sigh) and (rarely) when a pointer is hidden by a compiler optimization. In practice these problems are not usually serious, however providing the collector with hints about the layout of the objects can sometimes ameliorate these issues.\n\nWhere can I get more info on garbage collectors for C++?\n\nFor more information, see the Garbage Collector FAQ.\n\nWhat is an and why isn’t there an ?\n\nIt’s now spelled , which supports both single objects and arrays.\n\nis an old standard smart pointer that has been deprecated, and is only being kept in the standard for backward compatibility with older code. It should not be used in new code."
    },
    {
        "link": "https://stackoverflow.com/questions/17208490/string-operations-and-memory-management",
        "document": "I want to write a convenient wrapper to a C-style function strftime. And I've come to some options to convert char-array to string and vise-versa. Here is my code:\n\n№0 option looks safe since no exceptions can be thrown before memory freeing (Edit: can throw one, try-catch needed around that line)\n\n№1 const-casting always looks like a hack\n\n№2 seems to be the best by I do not know if there could be some issues with it\n\nCan you please tell me, which one is the most safe, correct, optimal and maybe kind of best-practice."
    },
    {
        "link": "https://stackoverflow.com/questions/19623054/why-char-c-can-be-assigned-with-a-string-without-allocation-or-reference",
        "document": "C and C++ happen to provide a syntax, the string literal, for creating a value of type array of with a specified initial value.\n\nIn C, the string literal is of type (5 for the length of the string plus 1 for the terminating ). In C++, it's of type . The difference is for historical reasons. In either language, string literals should always be treated as read-only.\n\nAnd like any expression of array type, it's implicitly converted, in most contexts, to a pointer to its first element. That's why\n\nis valid. The string literal itself creates an anonymous array object, and the initialization causes to point to the array object's first element.\n\nThere doesn't happen to be such a built-in syntax for creating an object of type .\n\nWell, actually there is. C99 added compound literals, letting you write:\n\nwhich creates an array object of type , with the same implicit conversion to . (C++ doesn't have compound literals.) (The lifetime of the array object depends on the context in which it appears; if it's inside a function body, the array ceases to exist when the enclosing block finishes. String literals, on the other hand, have static storage duration and exist for the entire execution of the program.)\n\nis incorrect; you want , not . But it's better written as:\n\nCasting the result of is unnecessary in C, and can hide errors in some cases. And using makes the code more robust; if you later change from an to, say, a , you only have to change the type in one place."
    },
    {
        "link": "https://en.cppreference.com/w/cpp/keyword/char",
        "document": ""
    },
    {
        "link": "https://geeksforgeeks.org/strings-in-cpp",
        "document": "In C++, strings are sequences of characters that are used to store words and text. They are also used to store data, such as numbers and other types of information in the form of text. Strings are provided by <string> header file in the form of std::string class.\n\nCreating a string means creating an instance of std::string class as shown:\n\nwhere str_name is the name of the string.\n\nInitializing means assigning some initial value to the string. This can be done by using assignment operator and the text enclosed inside “” double quotes.\n\nThe text inside “” is called string literal and it is the value that is assigned to the string variables. It doesn’t need to have any meaning. It can be any text that is the sequence of characters from the ASCII charset.\n\nA string can be referred using its name anywhere in the scope once it is declared. For example, the below example prints string using cout:\n\nThe individual characters of the strings can also be accessed using their position (or index) like arrays with [] square brackets. The index in C++ starts from 0 and goes till size – 1, so be careful not go outside this limit.\n\nThe string variable can be updated store a new string literal in a similar way it is initialized.\n\nA single character can also be changed by first accessing the character and then using assignment operator to assign value.\n\nThe following operations aims to improve your understanding of the strings in C++ and introduce you to some of the most commonly used operations provided by C++:\n\nThe string can be passed to a function in the same was as any other type of variable.\n\nC++ is a superset of C language, so it also inherits the way in which we used to create strings in C. In C, strings were nothing, but an array of characters terminated by a NULL character ‘\\0’. They were created as:\n\nDue to being array, there were limitations on C strings:\n• Fixed Size : Once declared, the size of the C string cannot be changed.\n• Lack of Easy String Operations: No high-level operations like concatenation or substring extraction. Moreover, updating was also complex.\n\nC++ strings resolve this issue by providing a lot of operations that are easy to perform. Internally, these strings are still implemented as dynamic array of characters (or more precisely vectors) Thats why we can access a single character by its index. But the std::string class act as a wrapper and provides lot of built-in functionality for easier and more efficient handling of strings.\n\nC++ String vs C Strings\n\nThe main difference between a string and a character array is that strings are immutable, while character arrays are not.\n\nKnow more about the difference between strings and character arrays in C++\n\nC++ provides some inbuilt functions which are used for string manipulation, such as the strcpy() and strcat() functions for copying and concatenating strings. Some of them are:\n\nThis function returns the length of the string. This function is used to swap the values of 2 strings. Used to find the size of string This function is used to resize the length of the string up to the given number of characters. Used to find the string which is passed in parameters This function is used to push the passed character at the end of the string This function is used to pop the last character from the string This function is used to remove all the elements of the string. This function compares at most the first num bytes of both passed strings. This function is similar to strcpy() function, except that at most n bytes of src are copied This function locates the last occurrence of a character in the string. This function appends a copy of the source string to the end of the destination string This function is used to search for a certain substring inside a string and returns the position of the first character of the substring. This function is used to replace each element in the range [first, last) that is equal to old value with new value. This function is used to create a substring from a given string. This function is used to compare two strings and returns the result in the form of an integer. This function is used to remove a certain part of a string. This function is used to find the string’s last occurrence.\n\nThese functions are discussed in this article in more detail – String Function in C++"
    },
    {
        "link": "https://stackoverflow.com/questions/32442600/memory-allocation-for-char-array",
        "document": "When you know (or have a reasonable idea how large your array needs to be, you can simply declare an array of sufficient size to handle your input (i.e. if you names are no longer than 25 characters, then you could safely declare . For strings, you always need at minimum the + (for the null-terminating character).\n\nIf there may be a few characters more than 25, there's nothing wrong with declaring your array few bytes longer than needed to protect against accidental writing beyond the end of the array. Say .\n\nLet's declare an array of below and look at how the information is stored in memory.\n\nThe above declaration creates an array of on the stack for your use. e.g., you can visualize the 5-bytes of memory initialized to zero as follows:\n\nNote: when using to hold a 'character string', the actual string can be no longer than 4 chars because you must end a sting with a null-terminating character, which is the null-character (or simply numeric , both are equivalent)\n\nTo store information in , you can either do it by assigning characters one-at-a-time:\n\nIn memory you now have:\n\nOf course, nobody assigns one character at a time in this manner. You options are many, using one of the functions provided by C, e.g. , , , or by reading information from a file stream, or file descriptor with , , or by using a simple and to do the assignment, or by using one of the string formatting functions, e.g. , etc... For example you can accomplish the same thing with any of the following:\n\nNote: above with , if you had NOT initialized all element to (the last of which will serve as your character, and then used you would need to manually terminate the string with , otherwise you would not have a valid string (you would have an unterminated array of chars which would lead to if you used where a string was expected.)\n\nIf you do not explicitly understand this STOP, go read and understand what a is and how it differs from an . Seriously, stop now and go learn, it is that fundamental to C. (if it doesn't end with a character - it isn't a c-string.\n\nWhat if I don't know how many characters I need to store?\n\nWhen you do not know how many characters you need to store (or generally how many of whatever data type), the normal approach is to declare a pointer to type, and then allocate a reasonably anticipated amount of memory (just based on your best understanding of what you are dealing with), and then reallocate to add additional memory as required. There is no magic to it, it is just a different way of telling the compiler how to manage the memory. Just remember, when you allocate the memory, you own it. You are responsible for (1) preserving a pointer to the beginning address of the memory block (so it can be freed later); and (2) freeing the memory when you are done with it.\n\nA simple example will help. Most of the memory allocation/free functions are declared in .\n\nNote: does NOT initialize the contents of the memory it allocates. If you want to initialize your new block of memory with zero (as we did with the static array), then use instead of . You can also use and then call as well.\n\nWhat happens if I allocate memory, then need More?\n\nAs mentioned above discussing dynamic memory, the general scheme is to allocate a reasonable anticipated amount, then as required. You use to reallocate the original block of memory created by . essentially creates a new block of memory, copies the memory from your old block to the new, and then frees the old block of memory. Since the old block of memory is freed, you want to use a temporary pointer for reallocation. If reallocation fails, you still have your original block of memory available to you.\n\nYou are free to add as little or as much memory as you like at any call to . The standard scheme usually seen is to start with some initial allocation, then reallocate twice that amount each time you run out. (the means you need to keep track of how much memory is currently allocated).\n\nTo sew this up, let's end with a simple example that simply reads a string of any length as the first argument to the program (use quotes if your string contains whitespace). It will then allocates space to hold the string, then reallocate to append more text to the end of the original string. Finally it will free all memory in use before exit:\n\nWhen you dynamically allocate memory, it is up to you to validate you are using the memory correctly and that you track and free all the memory you allocate. Use a memory error checker like to veryify your memory use is correct. (there is no excuse not to, it is dead-bang-simple to do) Just type\n\nIn the output, the following lines are of particular significance:\n\nThis tells you that all memory allocated during your program has been properly freed. (make sure you close all open file streams, they are dynamically allocated as well).\n\nOf equal importance is the :\n\nThere are no errors in the memory use. If you attempt to read, write or free memory from a location outside your block, or from an unitialized location or that would leave other memory unreachable, that information will show as an error.\n\nThis ended up longer than intended, but if it helps, it was worth it. Good luck."
    },
    {
        "link": "https://stackoverflow.com/questions/30482552/how-to-allocate-memory-dynamically-for-a-char-array-in-c",
        "document": "The of output streams has an overload to that interprets the character array as a string instead of a generic pointer. Thus, it prints the value of the string. Use to print the address.\n\nDereferencing the string gives you a , which is not a string.\n\nIf you are using C++, prefer using instead of character arrays. If you need a C-style string for something, you can get a character array representation of the string by calling the method."
    },
    {
        "link": "https://geeksforgeeks.org/new-and-delete-operators-in-cpp-for-dynamic-memory",
        "document": "Dynamic memory allocation in C/C++ refers to performing memory allocation manually by a programmer. Dynamically allocated memory is allocated on Heap, and non-static and local variables get memory allocated on Stack (Refer to Memory Layout C Programs for details).\n• None One use of dynamically allocated memory is to allocate memory of variable size, which is not possible with compiler allocated memory except for\n• None The most important use is the flexibility provided to programmers. We are free to allocate and deallocate memory whenever we need it and whenever we don’t need it anymore. There are many cases where this flexibility helps. Examples of such cases are\n\nHow is it different from memory allocated to normal variables?\n\nFor normal variables like “int a”, “char str[10]”, etc, memory is automatically allocated and deallocated. For dynamically allocated memory like “int *p = new int[10]”, it is the programmer’s responsibility to deallocate memory when no longer needed. If the programmer doesn’t deallocate memory, it causes a memory leak (memory is not deallocated until the program terminates).\n\nHow is memory allocated/deallocated in C++? \n\nC uses the malloc() and calloc() function to allocate memory dynamically at run time and uses a free() function to free dynamically allocated memory. C++ supports these functions and also has two operators new and delete, that perform the task of allocating and freeing the memory in a better and easier way.\n\nThe new operator denotes a request for memory allocation on the Free Store. If sufficient memory is available, a new operator initializes the memory and returns the address of the newly allocated and initialized memory to the pointer variable.\n\nSyntax to use new operator\n\nHere, the pointer variable is the pointer of type data-type. Data type could be any built-in data type including array or any user-defined data type including structure and class. \n\nExample:\n\nInitialize memory: We can also initialize the memory for built-in data types using a new operator. For custom data types, a constructor is required (with the data type as input) for initializing the value. Here’s an example of the initialization of both data types :\n\nAllocate a block of memory: a new operator is also used to allocate a block(an array) of memory of type data type.\n\nwhere size(a variable) specifies the number of elements in an array.\n\nDynamically allocates memory for 10 integers continuously of type int and returns a pointer to the first element of the sequence, which is assigned top(a pointer). p[0] refers to the first element, p[1] refers to the second element, and so on.\n\nNormal Array Declaration vs Using new \n\nThere is a difference between declaring a normal array and allocating a block of memory using new. The most important difference is, that normal arrays are deallocated by the compiler (If the array is local, then deallocated when the function returns or completes). However, dynamically allocated arrays always remain there until either they are deallocated by the programmer or the program terminates.\n\nWhat if enough memory is not available during runtime? \n\nIf enough memory is not available in the heap to allocate, the new request indicates failure by throwing an exception of type std::bad_alloc, unless “nothrow” is used with the new operator, in which case it returns a NULL pointer (scroll to section “Exception handling of new operator” in this article). Therefore, it may be a good idea to check for the pointer variable produced by the new before using its program.\n\nSince it is the programmer’s responsibility to deallocate dynamically allocated memory, programmers are provided delete operator in C++ language.\n\nHere, the pointer variable is the pointer that points to the data object created by new.\n\nTo free the dynamically allocated array pointed by pointer variable, use the following form of delete:\n\nTime Complexity: O(n), where n is the given memory size.\n• None Quiz on new and delete"
    },
    {
        "link": "https://reddit.com/r/Cplusplus/comments/1dvcd2r/how_is_memory_allocated_in_c_strings",
        "document": "Edit: thanks for the answers! They are detailed, straight to the point, and even considering details of the post text. I wish all threads in reddit went like this =) You folks are awesome!\n\nSorry for the silly question but most of my experience is in Java. When I learned C++, the string class was quite recent and almost never used, so I was still using C-like strings. Now I'm doing some C++ as part of a larger project, my programs work but I became curious about some details.\n\nThe goal of this code is to see what happens to \"i\" when the value of the string changes. The output of the program is 0 showing that \"i\" was not affected.\n\nIf this were a C-like string, I would have caused it to overflow, overwriting the stack, changing the value of \"i\" and possibly other stuff, it could even cause the program to crash (SIGABRT on Unix). In fact, in C:\n\nThe output is 875770417 showing that it overflowed. Surprisingly it was not aborted, though of course I won't do this in production code.\n\nBut the C++ version works and \"i\" was not affected. My guess is that the string internally has a pointer or a reference to the buffer.\n\nQuestion 1: is this \"safe\" behavior in C++ given by the standard, or just an implementation detail? Can I rely on it?\n\nNow suppose that I return a string by value:\n\nThis is creating objects in the stack, so they will no longer exist when the function returns. It's being returned by value, so the destructors and copy constructors will be executed when this method returns and the fact that the originals do not exist shouldn't be an issue. It works, but...\n\nQuestion 2: is this memory-safe? Where are the buffers allocated? If they are on the heap, do the string constructors and destructors make sure everything is properly allocated and deallocated when no longer used?\n\nIf you answer it's not memory safe then I'll probably have to change this (maybe I could allocate it on the heap and use shared_ptr)."
    },
    {
        "link": "https://modernescpp.com/index.php/c-core-guidelines-allocating-and-deallocating",
        "document": "The guidelines have six rules for explicit memory allocation and deallocation. Six! Maybe you are surprised because there is a simple rule in modern C++: don’t use new and delete. The story is not so simple.\n\nHere are the six rules.\n• R.12: Immediately give the result of an explicit resource allocation to a manager object\n• R.13: Perform at most one explicit resource allocation in a single expression statement\n\nI will not write about the last two rules. First, rule R.14 is not baked enough, and second, rule R.15 is quite special. If you want to learn more about overloading new and delete, you should read my posts on memory allocation and deallocation.\n\nBefore I dive into the rules, let me give you a little background necessary for understanding the rules. Creating an object in C++ with new consists of two steps.\n• Allocate the memory for the object\n• Constructing the object into the allocated memory\n\noperator new or operator new [] makes the first step; the constructor the second step.\n\nThe same strategy applies to the destruction but the other way around. First, the destructor is called (if any), and then the memory is deallocated with operator delete or operator delete []. This two-step creation and destruction is the reason for the four rules. So, let’s start.\n\nWhat is the difference between new and malloc, or delete and free? The C-functions malloc and free do only half of the job. malloc allocates the memory and free only deallocates the memory. Neither does malloc invoke the constructor, nor does free invoke the destructor.\n\nThis means if you use an object which was just created via malloc, you will get undefined behavior.\n\nI only allocate in (1) memory for my Record object. The result is that the output p1->name in (3) is undefined behavior. In contrast, call (2) invokes the constructor in line (4). Undefined behavior means that you can not make any assumptions about the program’s output.\n\nDepending on the used platform and the used GCC, the result of the program is entirely different.\n\nYou should keep this rule in mind. The emphasis in this rule lies on the word explicitly because using smart pointers or containers of the Standard Template Library gives you the object which use implicitly new and delete.\n\nR.12: Immediately give the result of an explicit resource allocation to a manager object\n\nThis is the key idea of a smart pointer such as std::unique_ptr<int> upInt(new int()) and will not hold in the counterexample from the guidelines. If the allocation of the buffer fails, the file handle will be lost.\n\nR.13: Perform at most one explicit resource allocation in a single expression statement\n\nThis rule is a little bit tricky. \n\n\n\nThis function call is not exception-safe and may result in a memory leak. Why? The reason is that four operations must be performed to initialize the shared pointers.\n\nThe compiler can allocate the memory for Widget(1) and Widget(2) and then construct both.\n\nIf one of the constructors throws an exception, the memory of the other object will not be automatically freed, and we will get a memory leak.\n\nIt’s easy to overcome this issue using the factory function std::make_shared to create a std::shared_ptr. \n\n\n\nstd::make_shared guarantees that the function will have no effect if an exception is thrown. The pendant function std::make_unique for creating a std::unique_ptr guarantees the same.\n\nThe next rules to resource management will follow Rule R.11: avoid calling new and delete explicitly; therefore, the next post will be about the smart pointers std::unique_ptr, std::shared_ptr, and std::weak_ptr."
    }
]