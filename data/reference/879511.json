[
    {
        "link": "https://learn.microsoft.com/en-us/powershell/module/activedirectory/get-aduser?view=windowsserver2025-ps",
        "document": "The Get-ADUser cmdlet gets a specified user object or performs a search to get multiple user objects. The Identity parameter specifies the Active Directory user to get. You can identify a user by its distinguished name (DN), GUID, security identifier (SID), or Security Account Manager (SAM) account name. You can also set the parameter to a user object variable such as or pass a user object through the pipeline to the Identity parameter. To search for and retrieve more than one user, use the Filter or LDAPFilter parameters. The Filter parameter uses the PowerShell Expression Language to write query strings for Active Directory. PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. For more information about the Filter parameter syntax, type . If you have existing Lightweight Directory Access Protocol (LDAP) query strings, you can use the LDAPFilter parameter. This cmdlet retrieves a default set of user object properties. To retrieve additional properties use the Properties parameter. For more information about how to determine the properties for user objects, see the Properties parameter description.\n\nExample 1: Get all of the users in a container\n\nExample 2: Get a filtered list of users\n\nExample 3: Get all of the properties for a specified user\n\nExample 4: Get a specified user\n\nExample 5: Get all enabled user accounts\n\nSpecifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default. To specify this parameter, you can type a user name, such as User1 or Domain01\\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object. If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error.\n\nSpecifies a query string that retrieves Active Directory objects. This string uses the PowerShell Expression Language syntax. The PowerShell Expression Language syntax provides rich type-conversion support for value types received by the Filter parameter. The syntax uses an in-order representation, which means that the operator is placed between the operand and the value. For more information about the Filter parameter, type . The following syntax uses Backus-Naur form to show how to use the PowerShell Expression Language for this parameter. <value>::= <compare this value with an <attr> by using the specified <FilterOperator>> For a list of supported types for <value>, type . Note: For String parameter type, PowerShell will cast the filter query to a string while processing the command. When using a string variable as a value in the filter component, make sure that it complies with the PowerShell Quoting Rules. For example, if the filter expression is double-quoted, the variable should be enclosed using single quotation marks: Get-ADUser -Filter \"Name -like '$UserName'\". On the contrary, if curly braces are used to enclose the filter, the variable should not be quoted at all: Get-ADUser -Filter {Name -like $UserName}. Note: PowerShell wildcards other than *, such as ?, are not supported by the Filter syntax. Note: To query using LDAP query strings, use the LDAPFilter parameter.\n\nSpecifies an Active Directory user object by providing one of the following property values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are: The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. This parameter can also get this object through the pipeline or you can set this parameter to an object instance.\n\nSpecifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first, and when a default value can be determined, no further rules are evaluated. In AD DS environments, a default value for Partition is set in the following cases:\n• If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.\n• If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.\n• If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain. In AD LDS environments, a default value for Partition is set in the following cases:\n• If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.\n• If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.\n• If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent object (nTDSDSA) for the AD LDS instance.\n• If none of the previous cases apply, the Partition parameter does not take any default value.\n\nSpecifies the properties of the output object to retrieve from the server. Use this parameter to retrieve properties that are not included in the default set. Specify properties for this parameter as a comma-separated list of names. To display all of the attributes that are set on the object, specify * (asterisk). To specify an individual extended property, use the name of the property. For properties that are not default or extended properties, you must specify the LDAP display name of the attribute. To retrieve properties and display them for an object, you can use the Get-* cmdlet associated with the object and pass the output to the Get-Member cmdlet.\n\nSpecifies an Active Directory path to search under. When you run a cmdlet from an Active Directory provider drive, the default value of this parameter is the current path of the drive. When you run a cmdlet outside of an Active Directory provider drive against an AD DS target, the default value of this parameter is the default naming context of the target domain. When you run a cmdlet outside of an Active Directory provider drive against an AD LDS target, the default value is the default naming context of the target LDS instance if one has been specified by setting the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance. If no default naming context has been specified for the target AD LDS instance, then this parameter has no default value. When the value of the SearchBase parameter is set to an empty string and you are connected to a GC port, all partitions are searched. If the value of the SearchBase parameter is set to an empty string and you are not connected to a GC port, an error is thrown.\n\nReturns one or more user objects. This cmdlet returns a default set of ADUser property values. To retrieve additional ADUser properties, use the Properties parameter. To get a list of the default set of properties of an ADUser object, use the following command: To get a list of the most commonly used properties of an ADUser object, use the following command: To get a list of all the properties of an ADUser object, use the following command:"
    },
    {
        "link": "https://blog.netwrix.com/2023/04/26/get-aduser-powershell-cmdlet-for-managing-active-directory-users",
        "document": "The Get-ADUser cmdlet in PowerShell provides many parameters for finding one or more users in an Active Directory (AD) domain.\n\nBy default, PowerShell runs using the account that is logged on to the machine. If you want to run a command using a different account, you can force PowerShell to prompt you for the credentials by using this switch before your command:\n\nUse the -Identity parameter if you know which AD user you want to get:\n\nSpecify one of the following for the identifier:\n\nUse the -SearchBase parameter to limit the search to a specific OU, specified by its distinguished name (DN):\n\nCombine the SearchBase and SearchScope parameters to limit the search to a particular OU and a specified number of levels of sub-OUs. For example, to find user accounts in an OU and its immediate child OUs, specify a value of 1 for SearchScope. To include both child and grandchild OUs, use a value of 2.\n\nIf you don’t know the exact value of any identifier, you can specify a property to filter on and a value for the filter, as follows:\n\nFinding Users with a Certain Given Name\n\nTo search for a user with his or her first name or part of the name, use the -Filter parameter with the -like clause and a value.\n\nThe following example shows the use of the Filter parameter, that involves the AD attribute, givenName. It returns users whose givenName contains Abbey.\n\nYou can modify the previous command using the wildcard operator to get all users whose name starts with a particular string, as follows:\n\nIf you want to see all enabled users, you can use this cmdlet:\n\nFinding disabled users can be quite valuable to facilitate AD cleanup. Using a simple command with one filter, “-Filter “Enabled -eq ‘false’”” could return hundreds of disabled users, as some companies prefer to keep their Active Directory objects for auditing purposes. Use the -SearchBase filter with a specific OU to limit results. For example, this cmdlet will find all disabled user accounts in a particular OU:\n\nTo find all users who have mailboxes assigned to them, use the following command:\n\nTo strengthen security, you might want to find all accounts whose ‘passwordneverexpires’ attribute is set to true, as follows:\n\nAt times, we need to filter out the user accounts that have not been in use for some time. Here is how to find all user accounts that have not been used during the last 60 days:\n\nTo see all user accounts created on a particular date in Active Directory, you can use this command:\n\nYou can combine multiple filters to define complex criteria for finding users.\n\nThe following command will return all enabled users from the Sales department:\n\nThe following cmdlet will return all users whose department attribute is not null and whose name begins with the letter A:\n\nBy default, the Get-ADUser command returns only a handful of parameters. If you want the extended list of properties of a user, use this cmdlet:\n\nAlternatively, you can explicitly list the properties you want to see for a user:\n\nTo see the membership of a user, use this cmdlet:\n\nIf you want to see a specific user’s email address, use this cmdlet:\n\nTo retrieve a user’s UPN, use this cmdlet:\n\nTo display a user’s SAM account name, use this cmdlet:\n\nIf you want to see the display name of a user (for example, since it might be different in ADUC), you can use this cmdlet:\n\nTo see the distinguished name of a user, use this cmdlet:\n\nIf you want to see the proxy addresses of a user, use this cmdlet:\n\nTo show the SAM account name of a user’s manager, use this command:\n\nTo see the employee ID of a user, use this cmdlet:\n\nTo find all phone numbers of a user, use this command:\n\nTo display these values in the form of a table, use this command:\n\nTo see the password expiry date for an account, use this cmdlet:\n\nTo see when a user account was created in AD, use this command:\n\nIf you want to see the last time a user logged on to any system, use this cmdlet:\n\nTo see when a user last changed their password, use this cmdlet:\n\nOrganizations can use AD extension attributes to store additional information about users. For example, O365 license information can be stored in ExtensionAttribute1. To see this information, use this cmdlet:\n\nTo sort the output of the Get-ADUser command using a particular property, use the following command:\n\nThe following command will find all user accounts created in the last 180 days, sort them by name, and export selected information about them to a CSV file:\n\nThe command below finds all users in a particular OU and outputs selected details about them to a to a CSV file:\n\nHere is the CSV file:\n\nThe Get-ADUser command is a versatile way to find one or more users that meet certain criteria. You can control which user properties are displayed and how the information is sorted, and export the output to a CSV file.\n\nIf you’re interested in a more comprehensive Active Directory and Azure AD management solution, take a look at Netwrix GroupID. It offers a more advanced management shell that is also fully compatible with PowerShell."
    },
    {
        "link": "https://agdiwo.com/en/get-aduser-in-powershell",
        "document": "Get-ADUser is a PowerShell cmdlet that allows you to retrieve user objects from Active Directory. It is a powerful tool that enables administrators to quickly and easily access user information, such as usernames, email addresses, and group memberships. This can be particularly useful in large enterprise environments where managing user accounts can be a complex and time-consuming task. By leveraging get-ADuser, administrators can automate many routine tasks, such as user provisioning and deprovisioning, as well as generate reports and perform analysis on user data. Overall, get-ADuser is a valuable tool for any IT professional working with Active Directory.\n\nGet-ADUser in PowerShell instead of ADUC If you work with Active Directory, you know how important it is to be able to search for and manage user accounts. But did you know that you can do it much faster and easier with Get-ADUser in PowerShell instead of using ADUC (Active Directory Users and Computers)? Get-ADUser allows you to retrieve information about one or more user accounts in Active Directory. You can filter and sort the results by various properties such as name, department, email address, last login, and much more. You can also use Get-ADUser to modify or remove user accounts using other cmdlets such as Set-ADUser and Remove-ADUser.\n\nGet More Done in Less Time\n\nThe benefits of using Get-ADUser in PowerShell instead of ADUC are many:\n• You can write and run scripts that automate common tasks, such as creating new users, updating existing users, or disabling expired users.\n• You can save time and resources by only retrieving the information you need, instead of opening a graphical interface that loads all the information about all users.\n• You can integrate Get-ADUser with other cmdlets and tools to perform more advanced operations, such as exporting data to a CSV file, sending email messages to users, or generating reports.\n\nIn addition to the benefits mentioned above, another advantage of using Get-ADUser in PowerShell is that it allows you to perform bulk operations on multiple user accounts at once. For example, you can use the ForEach-Object cmdlet to loop through a list of user accounts and perform the same action on each account.\n\nAnother useful feature of Get-ADUser is its ability to search for user accounts using wildcard characters. This means that you can search for users whose names contain a specific string or pattern, without having to know the exact name of the user account. Furthermore, using PowerShell and Get-ADUser can be particularly helpful in large environments with many user accounts, where managing user accounts manually can be a time-consuming and error-prone task. By automating tasks with PowerShell, you can reduce the risk of human error and improve the overall efficiency of your Active Directory management tasks.\n\nThe syntax for the Get-ADUser cmdlet is as follows:\n\nHere’s a brief description of each parameter:\n• : Specifies the user account to retrieve. This can be the user’s distinguished name (DN), samAccountName, userPrincipalName (UPN), or security identifier (SID).\n• : Specifies the type of authentication to use. The default is Negotiate, which uses Kerberos or NTLM, depending on the network configuration.\n• : Specifies a user account to use for authentication. This can be used to run the cmdlet under a different user context than the current one.\n• : Specifies the AD partition to search for the user. The default is the domain partition of the current domain controller.\n• : Specifies the AD attributes to retrieve for the user. By default, all attributes are retrieved.\n• : Specifies the number of objects to retrieve in each page of results. The default is 256.\n• : Specifies the maximum number of objects to retrieve. The default is 1000.\n• : Specifies the DN of the search base for the query. The default is the domain partition of the current domain controller.\n• : Specifies the scope of the search. The default is Subtree, which searches the entire subtree below the search base.\n• : Specifies the AD server to use for the query. The default is the current domain controller.\n\nHere’s an example of how to use the Get-ADUser cmdlet:\n\nLastly, here’s a quick guide to get you started:\n• Open PowerShell: You can open PowerShell by searching for “PowerShell” in the Start menu or by using the Run dialog (Windows key + R) and typing “powershell” followed by Enter.\n• Import the Active Directory module: Before you can use the Get-ADUser cmdlet, you need to import the Active Directory module. You can do this by running the following command:\n• Get user information with Get-ADUser: Once you have imported the Active Directory module, you can use the Get-ADUser cmdlet to retrieve information about users. For example, to get information about a specific user, you can run the following command: This will return all of the information that Active Directory has about the specified user.\n• Filter user information with Get-ADUser: You can also use the Get-ADUser cmdlet to filter user information based on specific criteria. For example, to get a list of all users in a specific department, you can run the following command: This will return all users whose Department property matches the specified department name.\n• Modify user information with Set-ADUser: Once you have retrieved user information with Get-ADUser, you can use the Set-ADUser cmdlet to modify that information. For example, to set a user’s email address, you can run the following command: This will update the specified user’s email address to the specified value.\n• Remove users with Remove-ADUser: Finally, if you need to remove a user from Active Directory, you can use the Remove-ADUser cmdlet. For example, to remove a specific user, you can run the following command: This will permanently delete the specified user from Active Directory.\n\nThese are just a few examples of what you can do with Get-ADUser in PowerShell.\n\nInterested in Powershell? Read more about how you can use Powershell to work more efficiently here and here"
    },
    {
        "link": "https://activedirectorypro.com/get-aduser-examples",
        "document": "Looking for a list of Get-ADUser examples and filters? Then look no further.\n\nIn this guide, I’ll show you how to use get-aduser PowerShell command to find user objects in Active Directory.\n\nI’ll also show you how to use the get-aduser filter command to search AD for specific users or for all users in an organizational unit. By default the get-aduser command does not list all user attributes, to fix this you can use the -properties parameter to list all user attributes.\n\nIf you don’t like videos or need more instructions, then continue reading.\n\nTo view all Get-ADUser properties and syntax refer to the Microsoft Get-ADUser documentation.\n\nTo get a single user use the -identity parameter. You can identify a user by its distinguished name (DN), GUID, security identifier (SID), or Security Account Manager (SAM) account name.\n\nIn all the examples I’ll be using the SAM account name to identify user accounts.\n\nIn this example, I get the user robert.allen.\n\nExample 2: Get a Single User and All User Properties\n\nBy default, the get-aduser command only returns a few user attributes. To get all the attributes that are set on the user, use -properties *.\n\nExample 3: Get All Users in the Domain\n\nTo list all users in the domain use the -filter * parameter.\n\nThis will list all users and the default attributes.\n\nExample 4: Get All Users and Format the Output\n\nTo make the previous example easier to read you can output the results in columns using the format-table option.\n\nYou can see below this format is much easier to read.\n\nExample 5: Get All Users & The Department Attribute\n\nIn this example, I will get all users by their displayname and get the department attribute.\n\nExample 6: Get All Users Email Addresses\n\nIn this example, I will get all user’s first and last names and email addresses.\n\nExample 7. Get All Users from an OU\n\nIn this example, I’ll get all users from an organizational unit.\n\nYou first need to get the distinguishedName of the OU.\n\nTo do this, right click on the OU, and select properties. Then select the Attribute Editor Tab and find the distinguishedName value.\n\nIn the screenshot above the Accounting OU distinguishedName is OU=Accounting,OU=ADPRO Users,DC=ad,DC=activedirectorypro,DC=com.\n\nSee the below example for the complete command. This example will get all users from the Accounting OU.\n\nExample 8: Find Users by First Name\n\nTo list all users with a specific first name, use the -eq filter. In this example, I’ll get all users with the first name “Mark”.\n\nExample 9. Find Users by Last Name\n\nTo list all users with a specific last name use the -eq filter. In this example, I’ll get all users with the last name “smith”.\n\nExample 10: Get All Users with a Logon Script\n\nIn this example, I will list all users that have a logon script set.\n\nExample 11: Users That Can Log On To All Computers\n\nYou can search accounts that have log on restrictions set on the Account tab. In this example, I’ll list all accounts that can log on to all computers.\n\nExample 12: Get All Phone Numbers for a User\n\nThis is a neat trick, you can use a wildcard with the select-object to get all properties. Instead of listing each phone attribute, you can use *phone* to get all associated phone numbers for a user.\n\nIn this example, I’ll find all users that have “Indianapolis” set for their City.\n\nI hope you enjoyed this article, if you have questions leave a comment below. If you want to get Azure users then refer to my article PowerShell Get Azure AD Users."
    },
    {
        "link": "https://commandline.ninja/get-aduser-syntax-and-examples",
        "document": "is probably the first cmdlet you will encounter when you use PowerShell to manage Active Directory. It is the most popular cmdlet in the RSAT module for Active Directory and for good reason. One of the most common tasks of Active Directory is managing users and their attributes.\n\nI will walk you through the PowerShell code needed to do some common queries of Active Directory using . Then I will follow that up with some queries that you may wish to do, but the syntax to run those queries could be trickier to master. Follow along and let’s review the basics and then we will build on the basics to do more complex searches.\n• CODE EXAMPLES\n• Getting All users from Active Directory using the -filter property\n\nThe Get-ADUser cmdlet gets a user object or performs a search to retrieve multiple user objects.\n\nThe Identity parameter specifies the Active Directory user to get. You can identify a user by its distinguished name (DN), GUID, security identifier (SID), Security Accounts Manager (SAM) account name or name. You can also set the parameter to a user object variable, such as or pass a user object through the pipeline to the Identity parameter.\n\nTo search for and retrieve multiple users, use the Filter or LDAPFilter parameters. The Filter parameter uses the PowerShell Expression Language to write query strings for Active Directory.\n\nSearching in Active Directory can be a simple process but can also be a frustrating operation when searching for multiple parameters. This is because the cmdlets in RSAT module for Active Directory don’t always behave as expected. The RSAT module has been around for a long time and is due for a code rewrite, but that will not happen with the prevalence of AzureAD in the Microsoft ecosystem.\n\nWe have to work with the cmdlets as they are written today and we should not expect any new PowerShell cmdlets for Active Directory in the foreseeable future.\n\nAll PowerShell cmdlets include generous help files and the RSAT AD cmdlets are no different. Let’s start by getting a list of all parameters. The syntax to access help is simply Get-Help followed by the cmdlet you want help for. Also, the alias for Get-Help is just Help.\n\nAnd if you’re wondering, I use the built-in help files multiple times a day to remember syntax usage I don’t use all the time.\n\nYou can also see some of the included examples of PowerShell syntax by typing Help Get-ADUser -examples\n\nI am going to skip the built-in examples that are included and jump into some of my own examples to share with you that I think cover all the major points. Querying a user account\n\nLet’s start by getting the data for a user account in my test domain. When you query a user account, there are default properties and extended properties. What this means is that Active Directory will return the default set of properties for an account unless you tell it to do otherwise. The default parameters are 10 fields from a longer list of close to 100 properties for a user account.\n\nThe list above is the 10 default properties returned for an account. If I want to add a property, I would use the parameter. Let’s add the property.\n\nYou can see that we added the phone property and now we have 11 fields. If we wanted to see all the properties for an account, then we could use for a value in the field. Get all properties for a user\n\nThis command syntax will list ALL properties for the account BGoodman and the list will scroll all 100+ properties that are available until it reaches the end of the list. I did not display the output since it is over 100 lines long.\n\nYou can see the full list of default and extended properties on the Microsoft website.\n\nWhen you use , you can add more properties than just the default 10 properties as you saw in the previous example. You can also specify which properties you want to display by using the cmdlet. Here I am choosing the four fields I would like to see in the output.\n\nWe can take this a step farther by adding all the properties and then using wildcards with . In the next example, I will display all phone numbers associated with a user account by using a simple wild-card of . This syntax tells AD to return all fields that contain the word phone.\n\nAnother example would be if we wanted to see logon timestamps. We could add the word logon to Select-Object and grab all those properties.\n\nHow about all the people who are direct reports of a particular user? Active Directory keeps a hierarchical relationship between accounts that we can use to generate a simple organization reporting chain.\n\nWe can make that look a little better by using parameter. What AD returns is the distinguishedname of the accounts that are direct reports of CRILEY.\n\nWe can also take that previous query one step further and get the actual names of three employees with some advanced syntax. In the example below, I am doing one lookup and saving the results to a variable.\n\nThen I loop through each value in the variable and do another AD lookup to get the values I want.\n\nWe can also go the other way and resolve a person’s manager.\n\nThe results returned show the DistinguishedName for the manager. If we want the Display Name of the manager, we can do that with a calculated property also known as an expression.\n\nThat can be a bit confusing, let’s walk through that syntax together. First, we did a normal get-aduser query and added the manager property. We send the results down the pipeline to Select-Object and we add a calculated property. The calculated property starts with the name that we want displayed for the property. I chose Manager.\n\nThen I perform another Get-ADUser lookup using the $_ variable which contains the results from the left side of the query (the output of our first lookup) and add a to access just the manager property. When we add the that means we want to call one of the previous properties we already looked up. Here, it’s the value for Manager. We then wrap all that output in a set of parentheses and use another . to call the displayname.\n\nSo let me just say that the previous query is complex and hard to understand. With practice, you can get a hand on how to handle these complex scenarios. For now, you can refer to this article when you need manager or directreports syntax for queries. Querying the password and login info for a user\n\nEach user account in Active Directory also contains properties about a user’s password expiration dates and login information. You can query the information and keep a tab on when passwords are expiring for an account.\n\nThat funky value for BadPasswordTime and other properties is expected. The values are displayed in “ticks”. You can convert ticks to seconds with some math. 💡 Ticks are a time format in .NET Framework and start at 12:00 AM January 1, 0001. Ticks are equal to one ten-millionth of a second, which means there are 10,000 ticks per millisecond. PowerShell and .NET Framework both can use ticks to represent date-time values. There are math cmdlets that can convert ticks into a standard date format.\n\nIn this example, I have used another expression to calculate the value as a datetime value.\n\nGetting All users from Active Directory using the -filter property\n\nUp to now, we have been getting the properties of one user. You can filter for users that match a set criteria. Let’s start with the easiest filter: get all users. In this query, I am running only the name property.\n\nThe filter parameter is powerful and can be used for some very creative searches. Let’s look at a few that might interest you.\n\nHere’s a search for all users with the last name of Stanley\n\nHere I am searching for employees who have a City of Miami in their profile. Some companies only use address info in Active Directory for office locations, while others will use Active Directory to use personal and work addresses. Each company is different.\n\nThere are several dates recorded for all accounts in Active Directory. One useful date stamped on every account is the account creation date. You can pull this data with a simple PowerShell query.\n\nLet’s break down the syntax into small bite size nuggets that are easy to digest. The first part of the code does a lookup of all users and adds the Created property to the results. After that I am using the cmdlet to find all accounts created in the last 270 days from today. I am using to get today’s date and then I instruct PowerShell to subtract 270 days from today. PowerShell then checks the date against all accounts found in the first part of the query and only shows the accounts that are created 270 days ago or less.\n\nThe last part of the query is displaying the results. I am using to pick which properties I want displayed. After that I am using Sort-Object to sort the accounts by account creation date. The very last part of the code uses to force PowerShell to present the results as a table view.\n\nWe can take this same query we just ran even farther by exporting the results to a CSV file. CSV’s are good for importing into Excel and making beautiful tables. To export the data, we add the Export-CSV cmdlet to the end of the syntax. But first we must get rid of the Format-List cmdlet because Format-List tells PowerShell, hey, no more data is sent to the pipeline after this cmdlet. So Export-CSV wouldn’t work if we added it to the end of the syntax.\n\nI hope all of these examples help you to achieve the results you need. I am always available of you have questions about these examples or one you might know of that is represented here."
    },
    {
        "link": "https://learn.microsoft.com/en-us/powershell/module/activedirectory/get-adgroupmember?view=windowsserver2025-ps",
        "document": "The Get-ADGroupMember cmdlet gets the members of an Active Directory group. Members can be users, groups, and computers. The Identity parameter specifies the Active Directory group to access. You can identify a group by its distinguished name, GUID, security identifier, or Security Account Manager (SAM) account name. You can also specify the group by passing a group object through the pipeline. For example, you can use the Get-ADGroup cmdlet to get a group object and then pass the object through the pipeline to the Get-ADGroupMember cmdlet. If the Recursive parameter is specified, the cmdlet gets all members in the hierarchy of the group that do not contain child objects. For example, if the group SaraDavisReports contains the user KarenToh and the group JohnSmithReports, and JohnSmithReports contains the user JoshPollock, then the cmdlet returns KarenToh and JoshPollock. For Active Directory Lightweight Directory Services (AD LDS) environments, the Partition parameter must be specified except in the following two conditions:\n• The cmdlet is run from an Active Directory provider drive.\n• A default naming context or partition is defined for the AD LDS environment. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent object (nTDSDSA) for the AD LDS instance.\n\nExample 1: Get all members of a group\n\nExample 2: Get all group members of all domain local groups\n\nExample 3: Get all Administrators group members\n\nExample 4: Get members of a group including the members of child groups\n\nSpecifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default. To specify this parameter, you can type a user name, such as User1 or Domain01\\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object. If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error.\n\nSpecifies an Active Directory group object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are: The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. This parameter can also get this object through the pipeline or you can set this parameter to an object instance.\n\nSpecifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated. In Active Directory Domain Services (AD DS) environments, a default value for Partition is set in the following cases:\n• If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.\n• If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.\n• If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain. In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Partition is set in the following cases:\n• If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.\n• If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.\n• If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent object (nTDSDSA) for the AD LDS instance.\n• If none of the previous cases apply, the Partition parameter does not take a default value.\n\nSpecifies that the cmdlet get all members in the hierarchy of a group that do not contain child objects. If the specified group does not have any members, then nothing is returned.\n\nSpecifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance. Specify the AD DS instance in one of the following ways: The default value for this parameter is determined by one of the following methods in the order that they are listed:\n• By using the Server value from objects passed through the pipeline\n• By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive\n• By using the domain of the computer running Windows PowerShell"
    },
    {
        "link": "https://blog.netwrix.com/2023/05/08/get-adgroupmember-cmdlet-in-powershell",
        "document": "Using Active Directory security groups is a best practice for quickly and accurately assigning permissions to users, computers, and groups. But how can you get a list of all the members of a security group?\n\nWhile you could use the PowerShell cmdlet Get-ADGroup, group members will be identified by their distinguished names, making the results difficult to read. A better option is to use the Get-ADGroupMember cmdlet. This article provides the syntax of this cmdlet and lots of useful examples.\n\nTo get a list of all members of a security group, simply enter the Get-ADGroupMember cmdlet in a PowerShell window and you’ll be prompted to input the group name:\n\nThe Get-ADGroupMember cmdlet accepts the following parameters:\n\nThe Identity and Recursive parameters are most used, so let’s dive into each of them.\n\nUse the Identity parametertospecify the AD group whose members you want to list. You can specify the group by its distinguished name, GUID, SID or SAM account name.\n\nTo get the output in a more readable tabular format, we will use the following command:\n\nA security group can have other groups among its members; this is called group nesting. To see the members of the nested groups using the ADGroupMember cmdlet, we need to use the Recursive parameter.\n\nFor example, suppose the security group TestOrg8-Versacorp has five members, which are all groups: Engineering, Finance, Marketing, Operations and Sales. Running the Get-ADGroupMember cmdlet on TestOrg8-Versacorp without the Recursive parameter will return those five groups, but not their members, as shown here:\n\nBut if we add the Recursive parameter, the Get-ADGroupMember cmdlet will list the members of all the nested groups:\n\nLet’s review some other common use cases for Get-ADGroupMember.\n\nSpecify which Member Properties to Display\n\nIf you want to specify exactly which properties to display about each group member, you can use the Select-Object cmdlet, as shown here:\n\nLimit the Output to Members with a Specific Object Type\n\nAs noted earlier, a security group can have users, computers, and nested groups as members. But you can easily limit the output of the Get-ADGroupMember cmdlet to just one of these object classes.\n\nIf you want to see only the members who are user objects, use this cmdlet:\n\nSimilarly, if you want to see only the nested groups, use this cmdlet:\n\nAnd if you want to see only the computer objects that are members, use this cmdlet:\n\nHere is the output from all three commands:\n\nHere’s how you can export the output of the Get-ADGroupMember cmdlet to a CSV file:\n\nThere are three cmdlets at work here:\n• Get-ADGroupMember gets the members of the specified AD group and delivers the results to the second cmdlet (Get-ADUser).\n• Get-ADUser retrieves the specified properties of those members (name, email address, department, title, and employee ID) and passes the results to the third cmdlet (Export-csv).\n• Export-csv exports the results to a CSV file, as shown below:\n\nExport the Members from a Specific OU to a CSV File\n\nUsers, computers, and group objects all reside in OUs within Active Directory.\n\nRun the following PowerShell script to export group members from a specified OU to a CSV file:\n• The first line defines the path to the desired OU.\n• The second line uses the Get-ADGroup cmdlet to get all AD groups from that OU.\n• Then the script cycles through those AD groups, getting each group’s name and members.\n• The last line uses the Export-csv cmdlet export the results to a CSV file.\n\nAnd here is the resulting CSV file:\n\nView the Output in an Interactive Table\n\nTo display the output in an interactive table, use the Out-GridView cmdlet:\n\nIn the resulting table, you can easily reorder the columns, sort the rows, filter the data, and more.\n\nList the Members of Global (or Universal) Groups Only\n\nTo list the members of Global groups only, use Get-ADGroup with Get-ADGroupMember as shown here:\n\nThe Get-ADGroupMember cmdlet returns only information from the group’s ‘member’ attribute, which consists mainly of each member’s CN, OU, and domain name.\n\nIf you need additional information, such as members’ email addresses and display names, then you can pipe the output of Get-ADGroupMember into the Get-ADUser cmdlet and specify the additional properties you want to see, as follows:"
    },
    {
        "link": "https://stackoverflow.com/questions/5072996/how-to-get-all-groups-that-a-user-is-a-member-of",
        "document": "PowerShell's Get-ADGroupMember cmdlet returns members of a specific group. Is there a cmdlet or property to get all the groups that a particular user is a member of?\n\nA more concise alternative to the one posted by Canoas, to get group membership for the currently-logged-on user. I came across this method in this blog post: http://www.travisrunyard.com/2013/03/26/auto-create-outlook-mapi-user-profiles/ An even better version which uses a regex to strip the LDAP guff and leaves the group names only: More details about using the [ADSISEARCHER] type accelerator can be found on the scripting guy blog: http://blogs.technet.com/b/heyscriptingguy/archive/2010/08/24/use-the-powershell-adsisearcher-type-accelerator-to-search-active-directory.aspx\n\nWhile there are many excellent answers here, there is one which I was personally looking for that was missing. Once I figured it out - I thought I should post it in case I want to find it later, or it actually manages to help someone else at some point: A second approach for presenting this is to specify the individual columns you are interested in eg: This gives all the AD groups the username belongs to - but also presents all of the default properties of each group formatted nicely as a table. The key benefit this gives you is you can see at a glance which are distribution lists, & which are Security groups. You can further see at a glance which are Universal, which are DomainLocal & which are Global.\n\n Why would you care about this last bit?\n• Universal group is a security or distribution group that contains users, groups, and computers from any domain in its forest as members. You can give universal security groups rights and permissions on resources in any domain in the forest.\n• Global group is a group that can be used in its own domain, in member servers and in workstations of the domain, and in trusting domains. In all those locations, you can give a global group rights and permissions and the global group can become a member of local groups. However, a global group can contain user accounts that are only from its own domain.\n• Domain local group is a security or distribution group that can contain universal groups, global groups, other domain local groups from its own domain, and accounts from any domain in the forest. You can give domain local security groups rights and permissions on resources that reside only in the same domain where the domain local group is located.\n\nFor LOCAL users and groups (ie not in Active Directory), and if you don't want to, or aren't allowed to, or can't install RSAT and/or and/or then here's a pure, pre-installed powershell (5.1+) way to do it. $username = \"user002\" Get-LocalGroup | ForEach-Object { # the usernames are returned in the string form \"computername\\username\" if (Get-LocalGroupMember -Group $_ | Where-Object name -like \"*\\$username\") { $_.name } }\n\nI couldn't get the following to work for a particular user: It threw an error that I was not willing to troubleshoot. I did however come up with a different solution using Get-ADUser. I like it a bit better because if you don't know the account name then you can get it based off of a wildcard on the user's actual name. Just fill in PartOfUsersName and away it goes. #Get the groups that list of users are the member of using a wildcard search [string]$UserNameLike = \"*PartOfUsersName*\" #Use * for wildcards here [array]$AccountNames = $(Get-ADUser -Filter {Name -like $UserNameLike}).SamAccountName ForEach ($AccountName In $AccountNames) { Write-Host \"`nGETTING GROUPS FOR\" $AccountName.ToUpper() \":\" (Get-ADUser -Identity $AccountName -Properties MemberOf|select MemberOf).MemberOf| Get-ADGroup|select Name|sort name } Huge props to schmeckendeugler and 8DH for getting me to this solution. +1 to both of you.\n\nThere is no need for PowerShell, you could use the command line tool as follows: You may omit the portion to display the information for the currently logged on user: Microsoft (R) Windows (R) Operating System Group Policy Result tool v2.0 © Microsoft Corporation. All rights reserved. Created on ‎10/‎01/‎2024 at 10:14:48 RSOP data for DOMAIN\\username on SYSTEM : Logging Mode ------------------------------------------------------- OS Configuration: Member Workstation OS Version: 10.0.19045 Site Name: N/A Roaming Profile: N/A Local Profile: C:\\Users\\username Connected over a slow link?: No USER SETTINGS -------------- CN=full name,OU=organisation unit,DC=some Last time Group Policy was applied: 10/01/2024 at 09:00:00 Group Policy was applied from: server Group Policy slow link threshold: 500 kbps Domain Name: MEDEL Domain Type: Windows 2008 or later Applied Group Policy Objects ----------------------------- usrPolWindowsAccounts (list of applied group policies) The following GPOs were not applied because they were filtered out ------------------------------------------------------------------- usrPolGermanGermany Filtering: Denied (Security) (list of denied group policies) The user is a part of the following security groups --------------------------------------------------- Domain Users Everyone Remote Desktop Users BUILTIN\\Users NT AUTHORITY\\INTERACTIVE CONSOLE LOGON NT AUTHORITY\\Authenticated Users This Organization LOCAL secUsersEnglish (list of security groups) In contrast to the command (as suggested in user4511672's answer), the group names are not truncated."
    },
    {
        "link": "https://lepide.com/how-to/export-members-of-a-particular-ad-group-using-poweshell.html",
        "document": "The Get-ADGroupMember cmdlet is used to get of members of an Active Directory group. In this post, we will show you how to use Get-ADGroupMember cmdlet to get the list of members and how to export them to CSV.\n\nHow to Use Get-ADGroupMember cmdlet You can just type the Get-ADGroupMember cmdlet in a PowerShell window and you’ll be prompted to enter the name of the group you want to use. Note that you must be logged in to Windows with a domain user account that has permission to read the group(s) you want to list. You must also have the Active Directory module for Windows PowerShell installed on the device where you want to run the Get-ADGroupMember cmdlet. You can add the name of the group to the command as shown below and format the output by piping the results to the Select-Object cmdlet: Combine the Get-ADGroup and Get-ADGroupMember cmdlets to perform more complex searches. In the example below, I list all members of groups with domain local scope: You can add the -Recursive parameter to Get-ADGroupMember to list all members of child groups. Note that the group name is enclosed using apostrophes because it contains a space. Don’t forget that Out-GridView can be useful for sorting and filtering the results using a simple GUI interface.\n\nIf you want a keepsake or want to perform further processing, you can export the list to a comma-delimited file that can be opened in Excel or used by another program. The command below saves the group members list to the current working directory in a file called adgroupmembers.csv.\n\nBelow is the list of Get-ADGroupMember parameters: This specifies the authentication method to use. The acceptable values for this parameter are: A Secure Sockets Layer (SSL) connection is required for the Basic authentication method. This specifies the user account credentials to use to perform this task. The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory module for Windows PowerShell provider drive. If the cmdlet is run from such a provider drive, the account associated with the drive is the default. To specify this parameter, you can type a user name, such as User1 or Domain01\\User01 or you can specify a PSCredential object. If you specify a user name for this parameter, the cmdlet prompts for a password. You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet. You can then set the Credential parameter to the PSCredential object. If the acting credentials do not have directory-level permission to perform the task, Active Directory module for Windows PowerShell returns a terminating error. This specifies an Active Directory group object by providing one of the following values. The identifier in parentheses is the LDAP display name for the attribute. The acceptable values for this parameter are: The cmdlet searches the default naming context or partition to find the object. If two or more objects are found, the cmdlet returns a non-terminating error. This parameter can also get this object through the pipeline or you can set this parameter to an object instance. Specifies the distinguished name of an Active Directory partition. The distinguished name must be one of the naming contexts on the current directory server. The cmdlet searches this partition to find the object defined by the Identity parameter. In many cases, a default value is used for the Partition parameter if no value is specified. The rules for determining the default value are given below. Note that rules listed first are evaluated first and once a default value can be determined, no further rules are evaluated. In Active Directory Domain Services (AD DS) environments, a default value for Partition is set in the following cases:\n• If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.\n• If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.\n• If none of the previous cases apply, the default value of Partition is set to the default partition or naming context of the target domain. In Active Directory Lightweight Directory Services (AD LDS) environments, a default value for Partition is set in the following cases:\n• If the Identity parameter is set to a distinguished name, the default value of Partition is automatically generated from this distinguished name.\n• If running cmdlets from an Active Directory provider drive, the default value of Partition is automatically generated from the current path in the drive.\n• If the target AD LDS instance has a default naming context, the default value of Partition is set to the default naming context. To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent object (nTDSDSA) for the AD LDS instance.\n• If none of the previous cases apply, the Partition parameter does not take a default value. Specifies that the cmdlet get all members in the hierarchy of a group that do not contain child objects. If the specified group does not have any members, then nothing is returned. Specifies the AD DS instance to connect to, by providing one of the following values for a corresponding domain name or directory server. The service may be any of the following: AD LDS, AD DS, or Active Directory snapshot instance. Specify the AD DS instance in one of the following ways: The default value for this parameter is determined by one of the following methods in the order that they are listed:\n• By using the Server value from objects passed through the pipeline\n• By using the server information associated with the AD DS Windows PowerShell provider drive, when the cmdlet runs in that drive\n• By using the domain of the computer running Windows PowerShell"
    },
    {
        "link": "https://reddit.com/r/PowerShell/comments/1fhljif/get_adgroup_members_from_a_list_of_ad_group",
        "document": "I have a list of 40 AD group and I need to list out to csv file the member of each group. Normally for a single AD Group I use (each AD Group is less than 60 users)\n\nBut this script means I have to run the script 40 times for each AD Group. How do I get Powershell to read a text file containing a list of ADGroups and produce an output to csv file? I also need to add the name of the AD Group on each member listed in the csv file:\n\nOr break the csv file out into section for each AD Group followed by the members name:"
    },
    {
        "link": "https://varonis.com/blog/powershell-active-directory-module",
        "document": "Are you tired of managing Active Directory using the graphical interface? Then you might be interested in the Active Directory PowerShell module! This module gives you the ability to manage Active Directory using commands in PowerShell. Harnessing the module opens up the possibilities of automating management tasks like user creation and removal.\n\nGet the free PowerShell and Active Directory Video Course\n\nIn this post, you will learn more about the Active Directory PowerShell module, installing the module on different Windows operating systems, and importing the module into a PowerShell console. To follow along with this tutorial, you will need:\n• A computer with Windows Server 2008 or higher (this tutorial uses Windows Server 2019 Enterprise)\n\nWhat is the PowerShell Active Directory Module?\n\nThe Active Directory PowerShell module consolidates a group of cmdlets used to administer on-premises Active Directory. You use these cmdlets for domain management and managing users, groups, and objects.\n\nNeed to manage Azure Active Directory or Office 365? Check out Jeff Brown's article How to Connect to Office 365 PowerShell (Azure AD Modules)!\n\nWhile you can manage your environment using graphical interfaces (like Active Directory Users and Computers), PowerShell provides the ability to make changes at scale. You issue PowerShell commands that can iterate through a user list to modify an attribute much faster than the graphical interface.\n\nThe Active Directory PowerShell module is automatically installed on domain controllers in your environment. However, if you want to manage your Active Directory environment remotely, you need to install the module on your system. The following sections outline multiple ways to install the modules based on your operating system.\n\nInstalling the PowerShell module is not standardized across Microsoft's multiple Windows operating systems. Review the sections below and find the method that fits your scenario!\n\nThe procedure for installing the Active Directory PowerShell module depends on the Windows 10 version. To determine your version of Windows 10:\n• Click the Start button and search for \"settings.\" Select Settings from the search results.\n• In the Systems section, select About. On the right, look for the Windows specifications section and note the current Version.\n\n\n\nTo see a complete list of Windows 10 versions and release dates, check out this article from Microsoft:\n\nBefore Windows 10 version 1809, Microsoft made the Active Directory PowerShell module available through the Remote Server Administration Tools for Windows 10. This software install includes the module as well as several other remote management features.\n• On the Windows 10 system, open a Web browser and navigate to this address to download the RSAT Tools for Windows 10:https://www.microsoft.com/en-us/download/details.aspx?id=45520\n• Select your language, then click Download. On the file list page, select the x86 for 32-bit systems or x64 for 64-bit systems of the WS_1803 installer. Click Next.\n• Save the installer to a location on your system that you can locate again. Once finished, navigate to that location and open the installer.\n• The installer verifies that the update applies to your system, then prompts if you want to install the update. Click Yes.\n• On the update window, review the license terms, then click I Accept. Monitor the installation, and upon successful installation, click Restart Now.\n• Once the system has restarted, click the Start button and search for \"control panel.\" Select the Control Panel app from the search results.\n• In the Control Panel, click Programs, then Programs and Features. Depending on your view settings, Programs and Features may already be displayed.\n• In Programs and Features, select Turn Windows features on or off.\n• In the Windows Features window, navigate to Remote Server Administration Tools > Role Administration Tools > AD DS and AD LDS Tools.\n• If the Active Directory Module for Windows PowerShell does not have a checkmark next to its name, select the option, and click OK.\n\n\n\nInstallation for Windows 10 version 1809 and later\n\nIn October 2018, Microsoft released Windows 10 version 1809, which changed how you install the Active Directory PowerShell Module. The RSAT Tools for Windows 10 are now part of the operating system and are an optional installation feature. There are two installation methods available for these later versions.\n\nTo install the RSAT Tools using the Settings app:\n• Click the Start button and search for \"settings.\" Select Settings from the search results.\n• Select + Add a feature, then type \"Active Directory\" in the search bar. Select RSAT: Active Directory Domain Services and Lightweight Directory Services from the results, then click Install.\n\n\n\nA second option is to enable the same feature from Method 1 using PowerShell.\n• Click the Start button and search for \"powershell.\" Select Windows PowerShell from the search results.\n• In the PowerShell console, use the Add-WindowsCapability cmdlet to install the Active Directory RSAT tools. Specify the (Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0) and the parameter to use Windows Update to install the feature.\n\nWhile Windows 10 has different installation procedures based on version, Windows Server has maintained the same installation method across multiple versions. While this tutorial focuses on Windows Server 2019, these methods should be valid for other versions such as:\n• Click on Start and click Server Manager from the Start menu.\n• In Server Manager, click Manage in the upper right corner, then click Add Roles and Features.\n• In the Add Roles and Features Wizard, click Next if the Before you begin window is displayed. If not, proceed to the next step.\n• For the installation type, select the Role-based or feature-based installation option, then click Next.\n• For the server selection, select the Select a server from the server pool option, then select the server name from the server pool. Click Next.\n• On the Server Roles page, no changes need to be made. Click Next.\n• On the Features page, expand Remote Server Administration Tools > Role Administration Tools > AD DS and AD LDS Tools, then select Active Directory module for Windows Powershell. Once selected, click Next.\n• On the Confirmation page, click Install. Once the install completes successfully, click Close.\n• Click the Start button and search for \"powershell.\" Select Windows PowerShell from the search results.\n• In the PowerShell console, use the Install-WindowsFeature cmdlet to install the Active Directory PowerShell module. Specify the feature -Name (RSAT-AD-PowerShell) and add the -IncludeAllSubFeature parameter to add any child features.\n\nWhile there are many installation methods, there is only one way to import the module! The following steps are valid for both Windows 10 and all server versions. To import the Active Directory PowerShell module:\n• Click the Start button and search for \"powershell.\" Select Windows PowerShell from the search results.\n• To verify the module is available, run the Get-Module command specifying the (ActiveDirectory) and the parameter to search all modules installed on the system. If a result is returned like in the screenshot below, you are good to go!\n• Import the module using the Import-Module cmdlet, again specifying the module's name (ActiveDirectory) using the parameter.\n\nSuccess! You have installed and imported the Active Directory PowerShell module!\n\nWhat is Active Directory Module for PowerShell?\n\nThe Active Directory PowerShell module is a set of cmdlets used for managing Active Directory domains and objects. You can install the module on Windows operating systems like Windows 10 and Windows Server.\n\nHow do I import the Active Directory PowerShell module?\n\nUse the Import-Module cmdlet with the -Name ActiveDirectory parameter and value.\n\nHow do I install the Active Directory PowerShell module on Windows Server?\n\nIn a PowerShell console, run the command Install-WindowsFeature -Name \"RSAT-AD-PowerShell\" -IncludeAllSubFeature.\n\nThe Active Directory PowerShell module is a powerful tool for administrators. In this article, you learned how to install the module on non-domain controller systems for remote management. Next, explore all the commands in the module to see what tasks you can automate!\n\nWant to learn more about PowerShell scripting for Active Directory? Check out Michael Buckbee's article How to Get Started with PowerShell and Active Directory Scripting!"
    },
    {
        "link": "https://scriptrunner.com/en/blog/administer-active-directory-with-powershell",
        "document": "PowerShell is a powerful environment when it comes to querying information in Windows. PowerShell can be an important..."
    },
    {
        "link": "https://coreview.com/blog/6-common-active-directory-powershell-commands",
        "document": "With over 16 years in Microsoft and IT infrastructure, Roy uses his SharePoint, Power Automate, and Microsoft Teams expertise to help organizations develop strategies for adoption, collaboration, automation, and governance.\n\nIn any Windows-centric environment, Microsoft Active Directory is an indispensable tool for managing user accounts, device connectivity, security policies, folder access, and more. It is with Active Directory (AD) that administrators can set up and assign ownership to email distribution lists and shared mailboxes. AD also can play a role in controlling group membership and permissions for Microsoft SharePoint sites and team spaces in Microsoft Teams.\n\nIn short, AD underpins everything in a complex Microsoft environment, whether it’s an on-premise implementation or the Microsoft 365 cloud-based environment.\n\nAD has a graphical user interface (GUI) for administrators to execute their day-to-day tasks. It also enables users to generate all manner of built-in reports. But sometimes system administrators want more than what the AD GUI can provide:\n• Many tasks in AD are repetitive and cumbersome to execute with the GUI. This leads to mistakes that can increase security risks.\n• Administrators often need reports that aren’t among the built-in AD reports. Sometimes the desired report has to be cobbled together manually (in Excel or some other tool) after exporting data from several different built-in reports.\n\nTo fill these gaps and achieve some level of automation, many organizations have turned to Microsoft PowerShell. PowerShell (PS) is a scripting tool that enables users to write complex command-line scripts that can automate almost anything that can be done from the Windows command line. Microsoft has implemented PS functionality for many Microsoft GUI applications, including AD. And more AD functionality is being made available for PS with each new version of the PS framework.\n\nBefore getting started, there are some prerequisites you should be aware of. The most important is knowing something about PowerShell. If you aren’t familiar with PS or the syntax of its scripting language, there are numerous online tutorials available to get you up to speed.\n\nNext, your computing environment (the administrative PC you will use and the server on which AD runs) must meet the following conditions:\n\nFinally, the PS Active Directory module must be available to import into the PS session. The most common way to do this is to first install the module on the administrative PC. The method for installing the module varies by Windows or Windows Server operating system, so search online for the method that applies to you.\n\nOnce the module is installed, you must import it into the PS session. This must be done with every new PS session to make the relevant commands (known in PS parlance as “cmdlets”) available in that session. The import command is simple:\n\nNow: On to the commands!\n\nAdding a new user account is one of the most common tasks for AD administrators. Specifying all the necessary information for a user account can be a tedious and error-prone task in the AD GUI, so if some of the parameters are the same for all users or can be derived from other information, it can be helpful to automate the process by leveraging the New-ADUser cmdlet.\n\nNew-ADUser is quite powerful. You can use the -Instance parameter to load an existing user object as a template and override only those attributes that are unique to the new user. If you have a large number of user accounts to add, you can create all of them at once by loading the data from a comma-separated-valued (CSV) file. Learn more about New-ADUser.\n\nAnother common task is creating an account for a computer, such as a PC, server, or other device. You can use the New-ADComputer cmdlet to create the computer object before joining the computer to an AD domain.\n\nLike user accounts, computer objects can be created using a template or en masse by uploading a CSV file. Learn more about New_ADComputer.\n\nOnce a computer object is created, it can be joined to an AD domain, which involves updating the device itself. This task is necessary so that the device and its users can access resources within the AD domain. The task can be automated (to a degree) with the Add-Computer cmdlet.\n\nJoining a computer to a domain requires the device to be rebooted. The user will be prompted for an administrative password prior to rebooting the device, so full automation is somewhat limited. Learn more about Add-Computer.\n\nUsers have an annoying habit of locking their user accounts (by allowing their passwords to expire or by mistyping their passwords too many times) or forgetting their passwords. Either of these situations usually results in a help desk call.\n\nUnlocking a locked user account can be accomplished with the Unlock-ADAccount cmdlet:\n\nResetting a user’s password can be done with the Set-ADAccountPassword cmdlet:\n\nOf course, the administrator should verify that the person requesting a password reset is that actual user and not some impostor trying to hack the user’s account.\n\n\n\nLearn more about Unlock-ADAccount and Set-ADAccountPassword.\n\nAdding or Removing AD Objects To and From Groups\n\nAD groups are one of the most powerful and useful concepts in Active Directory. Groups simplify the task of managing the users or computers that can access certain resources. For example, instead of granting different folder access permissions to individual users and dealing with the resulting management nightmare, administrators can grant permissions to a security group for that folder and add or remove users from the group as needed.\n\n\n\nAs such, modifying a group’s membership is a common AD administrator task. The cmdlets for adding and removing group members are, respectively, Add-ADGroupMember and Remove-ADGroupMember.\n\n\n\nIn both of these examples, the -Members parameter argument is a comma-separated list of objects (users or computers). The -Members parameter has multiple ways to specify a list of objects. Learn more about Add-ADGroupMember and Remove-ADGroupMember.\n\nThe AD PS commands enable reporting on specific types of objects (such as users or computers) or all AD objects. Each object type has a “Get” cmdlet (Get-ADUser, Get-ADComputer, Get-ADGroup, and so on) for extracting information on one or more objects. The -Filter parameter in each of these cmdlets is a powerful wildcard-enabled search tool that narrows the search results to specific matching objects.\n\n\n\nUnlike the “Get” cmdlets for individual object types, the Get-ADObject cmdlet can be applied to search through any and all AD objects. For example, if you want a list of all objects that were changed after a certain date, you could run the following:\n\nThe first line creates a variable called $ChangeDate with the datetime value of interest (18 November 2022 at 1:40:02 a.m., in this case), and the second executes Get-ADObject to return all objects, regardless of object type, that were changed after that datetime value.\n\nThe -Filter parameter has a specific syntax with many options. Learn more about Get-ADObject and the -Filter parameter syntax.\n\n\n\nPutting It All Together\n\nAs you can see, the AD PS commands provide a way to automate many AD management and reporting tasks. Multiple cmdlets can be combined into powerful scripts that can save administrators time, reduce errors, maintain security, and increase customer satisfaction. There is much more to learn about the AD PS commands, and Microsoft provides a complete reference.\n\n\n\nBuilding PS scripts to automate AD tasks must be done with extreme care. It’s all too easy to mess up your AD environment beyond recognition if you aren’t careful. Every script should be reviewed and tested before deployment in the production environment. (For this reason, most AD cmdlets have a -WhatIf parameter that shows what would happen if the cmdlet were run, without making any actual changes.)\n\nIf you don’t think you or your team are quite ready to start automating your AD tasks and reporting with PowerShell, there’s another way: CoreView. CoreView has identified numerous AD tasks that can be automated and has done the scripting and testing for you, all in one intuitive, visual package. CoreView takes much of the drudgery and tedium out of managing your AD environment and provides advanced reports so you know what’s going on in your environment at any time.\n\n\n\nFor more information about how CoreView can help automate your AD management tasks, contact a CoreView representative today."
    },
    {
        "link": "https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/deploy/install-active-directory-domain-services--level-100-",
        "document": "This topic explains how to install AD DS in Windows Server 2012 by using any of the following methods:\n\nThe following credentials are required to run Adprep.exe and install AD DS.\n• None To install a new forest, you must be logged on as the local Administrator for the computer.\n• None To install a new child domain or new domain tree, you must be logged on as a member of the Enterprise Admins group.\n• None To install an additional domain controller in an existing domain, you must be a member of the Domain Admins group. If you do not run adprep.exe command separately and you are installing the first domain controller that runs Windows Server 2012 in an existing domain or forest, you will be prompted to supply credentials to run Adprep commands. The credential requirements are as follows:\n• None To introduce the first Windows Server 2012 domain controller in the forest, you need to supply credentials for a member of Enterprise Admins group, the Schema Admins group, and the Domain Admins group in the domain that hosts the schema master.\n• None To introduce the first Windows Server 2012 domain controller in a domain, you need to supply credentials for a member of the Domain Admins group.\n• None To introduce the first read-only domain controller (RODC) in the forest, you need to supply credentials for a member of the Enterprise Admins group. If you have already run adprep /rodcprep in Windows Server 2008 or Windows Server 2008 R2, you do not need to run it again for Windows Server 2012.\n\nBeginning with Windows Server 2012, you can install AD DS using Windows PowerShell. Dcpromo.exe is deprecated beginning with Windows Server 2012, but you can still run dcpromo.exe by using an answer file (dcpromo /unattend:<answerfile> or dcpromo /answer:<answerfile>). The ability to continue running dcpromo.exe with an answer file provides organizations that have resources invested in existing automation time to convert the automation from dcpromo.exe to Windows PowerShell. For more information about running dcpromo.exe with an answer file, see https://support.microsoft.com/kb/947034.\n\nFor more information about removing AD DS using Windows PowerShell, see Remove AD DS using Windows PowerShell.\n\nStart with adding the role using Windows PowerShell. This command installs the AD DS server role and installs the AD DS and AD LDS server administration tools, including GUI-based tools such as Active Directory Users and Computers and command-line tools such as dcdia.exe. Server administration tools are not installed by default when you use Windows PowerShell. You need to specify \"IncludeManagementTools to manage the local server or install Remote Server Administration Tools to manage a remote server.\n\nThere is no reboot required until after the AD DS installation is complete.\n\nYou can then run this command to see the available cmdlets in the ADDSDeployment module.\n\nTo see the list of arguments that can be specified for a cmdlets and syntax:\n\nFor example, to see the arguments for creating an unoccupied read-only domain controller (RODC) account, type\n\nYou can also download the latest Help examples and concepts for Windows PowerShell cmdlets. For more information, see about_Updatable_Help.\n\nYou can run Windows PowerShell cmdlets against remote servers:\n• None In Windows PowerShell, use Invoke-Command with the ADDSDeployment cmdlet. For example, to install AD DS on a remote server named ConDC3 in the contoso.com domain, type:\n• In Server Manager, create a server group that includes the remote server. Right-click the name of the remote server and click Windows PowerShell.\n\nThe next sections explain how to run ADDSDeployment module cmdlets to install AD DS.\n• None Installing a new child or tree domain using Windows PowerShell\n\nThe following table lists arguments for the ADDSDeployment cmdlets in Windows PowerShell. Arguments in bold are required. Equivalent arguments for dcpromo.exe are listed in parentheses if they are named different in Windows PowerShell.\n\nWindows PowerShell switches accept $TRUE or $FALSE arguments. Arguments that are $TRUE by default do not need to be specified.\n\nTo override default values, you can specify the argument with a $False value. For example, because -InstallDNS is automatically run for a new forest installation if it is not specified, the only way to prevent DNS installation when you install a new forest is to use:\n\nSimilarly, because -InstallDNS has a default value of $False if you install a domain controller in an environment that does not host Windows Server DNS server, you need to specify the following argument in order to install DNS server:\n\nADPrepCredential <PS Credential> Note: Required if you are installing the first Windows Server 2012 domain controller in a domain or forest and the credentials of the current user are insufficient to perform the operation. Specifies the account with Enterprise Admins and Schema Admins group membership that can prepare the forest, according to the rules of Get-Credential and a PSCredential object. If no value is specified, the value of the credential argument is used. Specifies whether to continue installing this writable domain controller, although another writable domain controller account with the same name is detected. Use $True only if you are sure that the account is not currently used by another writable domain controller. This argument is not valid for an RODC. Specifies whether an existing domain is recreated. Specifies the names of user accounts, group accounts, and computer accounts whose passwords can be replicated to this RODC. Use an empty string \"\" if you want to keep the value empty. By default, only the Allowed RODC Password Replication Group is allowed, and it is originally created empty. Supply values as a string array. For example: ApplicationPartitionsToReplicate <string []> Note: There is no equivalent option in the UI. If you install using the UI, or using IFM, then all application partitions will be replicated. Specifies the application directory partitions to replicate. This argument is applied only when you specify the -InstallationMediaPath argument to install from media (IFM). By default, all application partitions will replicate based on their own scopes. Supply values as a string array. For example: Prompts you for confirmation before running the cmdlet. CreateDnsDelegation Note: You cannot specify this argument when you run the Add-ADDSReadOnlyDomainController cmdlet. Indicates whether to create a DNS delegation that references the new DNS server that you are installing along with the domain controller. Valid for Active Directory\"integrated DNS only. Delegation records can be created only on Microsoft DNS servers that are online and accessible. Delegation records cannot be created for domains that are immediately subordinate to top-level domains such as .com, .gov, .biz, .edu or two-letter country code domains such as .nz and .au. The default is computed automatically based on the environment. Credential <PS Credential> Note: Required only if the credentials of the current user are insufficient to perform the operation. Specifies the domain account that can logon to the domain, according to the rules of Get-Credential and a PSCredential object. If no value is specified, the credentials of the current user are used. Specifies whether the AD DS installation operation performs only critical replication before reboot and then continues. The noncritical replication happens after the installation finishes and the computer reboots. Using this argument is not recommended. There is no equivalent for this option in the user interface (UI). Specifies the fully qualified, non\"Universal Naming Convention (UNC) path to a directory on a fixed disk of the local computer that contains the domain database, for example, C:\\Windows\\NTDS. The default is %SYSTEMROOT%\\NTDS. Important: While you can store the AD DS database and log files on volume formatted with Resilient File System (ReFS), there are no specific benefits for hosting AD DS on ReFS, other than the normal benefits of resiliency you get for hosting any data on ReFS. Specifies the name of the user or group that can install and administer the RODC. By default, only members of the Domain Admins group can administer an RODC. Specifies the names of user accounts, group accounts, and computer accounts whose passwords are not to be replicated to this RODC. Use an empty string \"\" if you do not want to deny the replication of credentials of any users or computers. By default, Administrators, Server Operators, Backup Operators, Account Operators, and the Denied RODC Password Replication Group are denied. By default, the Denied RODC Password Replication Group includes Cert Publishers, Domain Admins, Enterprise Admins, Enterprise Domain Controllers, Enterprise Read-Only Domain Controllers, Group Policy Creator Owners, the krbtgt account, and Schema Admins. Supply values as a string array. For example: DnsDelegationCredential <PS Credential> Note: You cannot specify this argument when you run the Add-ADDSReadOnlyDomainController cmdlet. Specifies the user name and password for creating DNS delegation, according to the rules of Get-Credential and a PSCredential object. Specifies the domain functional level during the creation of a new domain. The domain functional level cannot be lower than the forest functional level, but it can be higher. The default value is automatically computed and set to the existing forest functional level or the value that is set for -ForestMode. Specifies the FQDN of the domain in which you want to install an additional domain controller. DomainNetbiosName <string> Required for Install-ADDSForest if FQDN prefix name is longer than 15 characters. Use with Install-ADDSForest. Assigns a NetBIOS name to the new forest root domain. Indicates the type of domain that you want to create: a new domain tree in an existing forest, a child of an existing domain, or a new forest. The default for DomainType is ChildDomain. When this parameter is specified any warnings that might normally appear during the installation and addition of the domain controller will be suppressed to allow the cmdlet to complete its execution. This parameter can be useful to include when scripting installation. Specifies the forest functional level when you create a new forest. The default value is Win2012. Indicates the location of the installation media that will be used to install a new domain controller. Specifies whether the DNS Server service should be installed and configured on the domain controller. For a new forest, the default is $True and DNS Server is installed. For a new child domain or domain tree, if the parent domain (or forest root domain for a domain tree) already hosts and stores the DNS names for the domain, then the default for this parameter is $True. For a domain controller installation in an existing domain, if this parameter is left unspecified and the current domain already hosts and stores the DNS names for the domain, then the default for this parameter is $True. Otherwise, if DNS domain names are hosted outside of Active Directory, the default is $False and no DNS Server is installed. Specifies the fully qualified, non-UNC path to a directory on a fixed disk of the local computer that contains the domain log files, for example, C:\\Windows\\Logs. The default is %SYSTEMROOT%\\NTDS. Important: Do not store the Active Directory log files on a data volume formatted with Resilient File System (ReFS). Specifies whether to transfer the infrastructure master operations master role (also known as flexible single master operations or FSMO) to the domain controller that you are creating \"in case it is currently hosted on a global catalog server\" and you do not plan to make the domain controller that you are creating a global catalog server. Specify this parameter to transfer the infrastructure master role to the domain controller that you are creating in case the transfer is needed; in this case, specify the NoGlobalCatalog option if you want the infrastructure master role to remain where it currently is. Specifies the single domain name for the new domain. For example, if you want to create a new child domain named emea.corp.fabrikam.com, you should specify emea as the value of this argument. NewDomainNetbiosName <string> Required for Install-ADDSDomain if FQDN prefix name is longer than 15 characters. Use with Install-ADDSDomain. Assigns a NetBIOS name to the new domain. The default value is derived from the value of \"NewDomainName. Specifies that DNS service is not available on the network. This parameter is used only when the IP setting of the network adapter for this computer is not configured with the name of a DNS server for name resolution. It indicates that a DNS server will be installed on this computer for name resolution. Otherwise, the IP settings of the network adapter must first be configured with the address of a DNS server. Omitting this parameter (the default) indicates that the TCP/IP client settings of the network adapter on this server computer will be used to contact a DNS server. Therefore, if you are not specifying this parameter, ensure that TCP/IP client settings are first configured with a preferred DNS server address. Specifies that you do not want the domain controller to be a global catalog server. Domain controllers that run Windows Server 2012 are installed with the global catalog by default. In other words, this runs automatically without computation, unless you specify: Specifies whether to restart the computer upon completion of the command, regardless of success. By default, the computer will restart. To prevent the server from restarting, specify: There is no equivalent for this option in the user interface (UI). Specifies the FQDN of an existing parent domain. You use this argument when you install a child domain or new domain tree. For example, if you want to create a new child domain named emea.corp.fabrikam.com, you should specify corp.fabrikam.com as the value of this argument. Indicates the FQDN of the partner domain controller from which you replicate the domain information. The default is automatically computed. Supplies the password for the administrator account when the computer is started in Safe Mode or a variant of Safe Mode, such as Directory Services Restore Mode. The default is an empty password. You must supply a password. The password must be supplied in a System.Security.SecureString format, such as that provided by read-host -assecurestring or ConvertTo-SecureString. The SafeModeAdministratorPassword argument's operation is special:If not specified as an argument, the cmdlet prompts you to enter and confirm a masked password. This is the preferred usage when running the cmdlet interactively. If specified without a value, and there are no other arguments specified to the cmdlet, the cmdlet prompts you to enter a masked password without confirmation. This is not the preferred usage when running the cmdlet interactively. If specified with a value, the value must be a secure string. This is not the preferred usage when running the cmdlet interactively. For example, you can manually prompt for a password by using the Read-Host cmdlet to prompt the user for a secure string:-safemodeadministratorpassword (read-host -prompt \"Password:\" -assecurestring). You can also provide a secure string as a converted clear-text variable, although this is highly discouraged. -safemodeadministratorpassword (convertto-securestring \"Password1\" -asplaintext -force) Specifies the site where the domain controller will be installed. There is no sitename argument when you run Install-ADDSForest because the first site created is Default-First-Site-Name. The site name must already exist when provided as an argument to -sitename. The cmdlet will not create the site. Skips automatic configuration of DNS client settings, forwarders, and root hints. This argument is in effect only if the DNS Server service is already installed or automatically installed with -InstallDNS. Specifies the system key for the media from which you replicate the data. Data must be in format provided by read-host -assecurestring or ConvertTo-SecureString. Specifies the fully qualified, non-UNC path to a directory on a fixed disk of the local computer, for example, C:\\Windows\\SYSVOL. The default is %SYSTEMROOT%\\SYSVOL. Important: SYSVOL cannot be stored on a data volume formatted with Resilient File System (ReFS). Does not run the prerequisite checks before starting installation. It is not advisable to use this setting. Shows what would happen if the cmdlet runs. The cmdlet is not run.\n\nYou can specify credentials without revealing them in plain text on screen by using Get-credential.\n\nThe operation for the -SafeModeAdministratorPassword and LocalAdministratorPassword arguments is special:\n• None If not specified as an argument, the cmdlet prompts you to enter and confirm a masked password. This is the preferred usage when running the cmdlet interactively.\n• None If specified with a value, the value must be a secure string. This is not the preferred usage when running the cmdlet interactively.\n\nFor example, you can manually prompt for a password by using the Read-Host cmdlet to prompt the user for a secure string\n\nYou can also provide a secure string as a converted clear-text variable, although this is highly discouraged:\n\nEach ADDSDeployment cmdlet has a corresponding test cmdlet. The test cmdlets runs only the prerequisite checks for the installation operation; no installation settings are configured. The arguments for each test cmdlet are the same as for the corresponding installation cmdlet, but \"SkipPreChecks is not available for test cmdlets.\n\nThe command syntax for installing a new forest is as follows. Optional arguments appear within square brackets.\n\nFor example, to install a new forest named corp.contoso.com and be securely prompted to provide the DSRM password, type:\n\nTo install a new forest named corp.contoso.com, create a DNS delegation in the contoso.com domain, set domain functional level to Windows Server 2008 R2 and set forest functional level to Windows Server 2008, install the Active Directory database and SYSVOL on the D:\\ drive, install the log files on the E:\\ drive, and be prompted to provide the Directory Services Restore Mode password and type:\n\nInstalling a new child or tree domain using Windows PowerShell\n\nThe command syntax for installing a new domain is as follows. Optional arguments appear within square brackets.\n\nFor example, to use credentials of corp\\EnterpriseAdmin1 to create a new child domain named child.corp.contoso.com, install DNS server, create a DNS delegation in the corp.contoso.com domain, set domain functional level to Windows Server 2003, make the domain controller a global catalog server in a site named Houston, use DC1.corp.contoso.com as the replication source domain controller, install the Active Directory database and SYSVOL on the D:\\ drive, install the log files on the E:\\ drive, and be prompted to provide the Directory Services Restore Mode password but not prompted to confirm the command, type:\n\nThe command syntax for installing an additional domain controller is as follows. Optional arguments appear within square brackets.\n\nTo install a domain controller and DNS server in the corp.contoso.com domain and be prompted to supply the domain Administrator credentials and the DSRM password, type:\n\nIf the computer is already domain joined and you are a member of the Domain Admins group, you can use:\n\nTo be prompted for the domain name, type:\n\nThe following command will use credentials of Contoso\\EnterpriseAdmin1 to install a writable domain controller and a global catalog server in a site named Boston, install DNS server, create a DNS delegation in the contoso.com domain, install from media that is stored in the c:\\ADDS IFM folder, install the Active Directory database and SYSVOL on the D:\\ drive, install the log files on the E:\\ drive, have the server automatically restart after AD DS installation is complete, and be prompted to provide the Directory Services Restore Mode password:\n\nThe command syntax to create an RODC account is as follows. Optional arguments appear within square brackets.\n\nThe command syntax to attach a server to an RODC account is as follows. Optional arguments appear within square brackets.\n\nFor example, to create an RODC account named RODC1:\n\nThen run the following commands on the server that you want to attach to the RODC1 account. The server cannot be joined to the domain. First, install the AD DS server role and management tools:\n\nThe run the following command to create the RODC:\n\nPress Y to confirm or include the \"confirm argument to prevent the confirmation prompt.\n\nAD DS can be installed in Windows Server 2012 by using the Add Roles Wizard in Server Manager, followed by the Active Directory Domain Services Configuration Wizard, which is new beginning in Windows Server 2012. The Active Directory Domain Services Installation Wizard (dcpromo.exe) is deprecated beginning in Windows Server 2012.\n\nThe following sections explain how to create server pools in order to install and manage AD DS on multiple servers, and how to use the wizards to install AD DS.\n\nServer Manager can pool other servers on the network as long as they are accessible from the computer running Server Manager. Once pooled, you choose those servers for remote installation of AD DS or any other configuration options possible within Server Manager. The computer running Server Manager automatically pools itself. For more information about server pools, see Add Servers to Server Manager.\n\nThe credential requirements to install AD DS vary depending on which deployment configuration you choose. For more information, see Credential requirements to run Adprep.exe and install Active Directory Domain Services.\n\nUse the following procedures to install AD DS using the GUI method. The steps can be performed locally or remotely. For more detailed explanation of these steps, see the following topics:\n\nTo install AD DS by using Server Manager\n• None In Server Manager, click Manage and click Add Roles and Features to start the Add Roles Wizard.\n• None On the Before you begin page, click Next.\n• None On the Select installation type page, click Role-based or feature-based installation and then click Next.\n• None On the Select destination server page, click Select a server from the server pool, click the name of the server where you want to install AD DS and then click Next. To select remote servers, first create a server pool and add the remote servers to it. For more information about creating server pools, see Add Servers to Server Manager.\n• None On the Select server roles page, click Active Directory Domain Services, then on the Add Roles and Features Wizard dialog box, click Add Features, and then click Next.\n• None On the Select features page, select any additional features you want to install and click Next.\n• None On the Active Directory Domain Services page, review the information and then click Next.\n• None On the Results page, verify that the installation succeeded, and click Promote this server to a domain controller to start the Active Directory Domain Services Configuration Wizard. If you close Add Roles Wizard at this point without starting the Active Directory Domain Services Configuration Wizard, you can restart it by clicking Tasks in Server Manager.\n• None On the Deployment Configuration page, choose one of the following options:\n• None If you are installing an additional domain controller in an existing domain, click Add a domain controller to an existing domain, and type the name of the domain (for example, emea.corp.contoso.com) or click Select... to choose a domain, and credentials (for example, specify an account that is a member of the Domain Admins group) and then click Next. The name of the domain and current user credentials are supplied by default only if the machine is domain-joined and you are performing a local installation. If you are installing AD DS on a remote server, you need to specify the credentials, by design. If current user credentials are not sufficient to perform the installation, click Change... in order to specify different credentials. For more information, see Install a Replica Windows Server 2012 Domain Controller in an Existing Domain (Level 200).\n• None If you are installing a new child domain, click Add a new domain to an existing forest, for Select domain type, select Child Domain, type or browse to the name of the parent domain DNS name (for example, corp.contoso.com), type the relative name of the new child domain (for example emea), type credentials to use to create the new domain, and then click Next. For more information, see Install a New Windows Server 2012 Active Directory Child or Tree Domain (Level 200).\n• None If you are installing a new domain tree, click Add new domain to an existing forest, for Select domain type, choose Tree Domain, type the name of the root domain (for example, corp.contoso.com), type the DNS name of the new domain (for example, fabrikam.com), type credentials to use to create the new domain, and then click Next. For more information, see Install a New Windows Server 2012 Active Directory Child or Tree Domain (Level 200).\n• None If you are installing a new forest, click Add a new forest and then type the name of the root domain (for example, corp.contoso.com). For more information, see Install a New Windows Server 2012 Active Directory Forest (Level 200).\n• None On the Domain Controller Options page, choose one of the following options:\n• None If you are creating a new forest or domain, select the domain and forest functional levels, click Domain Name System (DNS) server, specify the DSRM password, and then click Next.\n• None If you are adding a domain controller to an existing domain, click Domain Name System (DNS) server, Global Catalog (GC), or Read Only Domain Controller (RODC) as needed, choose the site name, and type the DSRM password and then click Next. For more information about which options on this page are available or not available under different conditions, see Domain Controller Options.\n• None On the DNS Options page (which appears only if you install a DNS server), click Update DNS delegation as needed. If you do, provide credentials that have permission to create DNS delegation records in the parent DNS zone. If a DNS server that hosts the parent zone cannot be contacted, the Update DNS Delegation option is not available. For more information about whether you need to update the DNS delegation, see Understanding Zone Delegation. If you attempt to update the DNS delegation and encounter an error, see DNS Options.\n• None On the RODC Options page (which appears only if you install an RODC), specify the name of a group or user who will manage the RODC, add accounts to or remove accounts from the Allowed or Denied password replication groups, and then click Next. For more information, see Password Replication Policy.\n• None On the Additional Options page, choose one of the following options:\n• None If you are creating a new domain, type a new NetBIOS name or verify the default NetBIOS name of the domain, and then click Next.\n• None If you are adding a domain controller to an existing domain, select the domain controller that you want to replicate the AD DS installation data from (or allow the wizard to select any domain controller). If you are installing from media, click Install from media path type and verify the path to the installation source files, and then click Next. You cannot use install from media (IFM) to install the first domain controller in a domain. IFM does not work across different operating system versions. In other words, in order to install an additional domain controller that runs Windows Server 2012 by using IFM, you must create the backup media on a Windows Server 2012 domain controller. For more information about IFM, see Installing an Additional Domain Controller by Using IFM.\n• None On the Paths page, type the locations for the Active Directory database, log files, and SYSVOL folder (or accept default locations), and click Next. Do not store the Active Directory database, log files, or SYSVOL folder on a data volume formatted with Resilient File System (ReFS).\n• None On the Preparation Options page, type credentials that are sufficient to run adprep. For more information, see Credential requirements to run Adprep.exe and install Active Directory Domain Services.\n• None On the Review Options page, confirm your selections, click View script if you want to export the settings to a Windows PowerShell script, and then click Next.\n• None On the Prerequisites Check page, confirm that prerequisite validation completed and then click Install.\n• None On the Results page, verify that the server was successfully configured as a domain controller. The server will be restarted automatically to complete the AD DS installation.\n\nA staged RODC installation allows you to create an RODC in two stages. In the first stage, a member of the Domain Admins group creates an RODC account. In the second stage, a server is attached to the RODC account. The second stage can be completed by a member of the Domain Admins group or a delegated domain user or group.\n• None You can create the RODC account using Active Directory Administrative Center or Active Directory Users and Computers.\n• None In the navigation pane (left pane), click the name of the domain.\n• None In the Management list (center pane), click the Domain Controllers OU.\n• None In the Tasks Pane (right pane), click Pre-create a read-only domain controller account.\n• None Click Start, click Administrative Tools, and then click Active Directory Users and Computers.\n• None Either right-click the Domain Controllers organizational unit (OU) or click the Domain Controllers OU, and then click Action.\n• None On the Welcome to the Active Directory Domain Services Installation Wizard page, if you want to modify the default the Password Replication Policy (PRP), select Use advanced mode installation, and then click Next.\n• None On the Network Credentials page, under Specify the account credentials to use to perform the installation, click My current logged on credentials or click Alternate credentials, and then click Set. In the Windows Security dialog box, provide the user name and password for an account that can install the additional domain controller. To install an additional domain controller, you must be a member of the Enterprise Admins group or the Domain Admins group. When you are finished providing credentials, click Next.\n• None On the Specify the Computer Name page, type the computer name of the server that will be the RODC.\n• None On the Select a Site page, select a site from the list or select the option to install the domain controller in the site that corresponds to the IP address of the computer on which you are running the wizard, and then click Next.\n• None On the Additional Domain Controller Options page, make the following selections, and then click Next:\n• None DNS server: This option is selected by default so that your domain controller can function as a Domain Name System (DNS) server. If you do not want the domain controller to be a DNS server, clear this option. However, if you do not install the DNS server role on the RODC and the RODC is the only domain controller in the branch office, users in the branch office will not be able to perform name resolution when the wide area network (WAN) to the hub site is offline.\n• None Global catalog: This option is selected by default. It adds the global catalog, read-only directory partitions to the domain controller, and it enables global catalog search functionality. If you do not want the domain controller to be a global catalog server, clear this option. However, if you do not install a global catalog server in the branch office or enable universal group membership caching for the site that includes the RODC, users in the branch office will not be able to log on to the domain when the WAN to the hub site is offline.\n• None Read-only domain controller. When you create an RODC account, this option is selected by default and you cannot clear it.\n• None If you selected the Use advanced mode installation check box on the Welcome page, the Specify the Password Replication Policy page appears. By default, no account passwords are replicated to the RODC, and security-sensitive accounts (such as members of the Domain Admins group) are explicitly denied from ever having their passwords replicated to the RODC. To add other accounts to policy, click Add, then click Allow passwords for the account to replicate to this RODC or click Deny passwords for the account from replicating to this RODC and then select the accounts. When complete (or to accept the default setting), click Next.\n• None On the Delegation of RODC Installation and Administration page, type the name of the user or the group who will attach the server to the RODC account that you are creating. You can type the name of only one security principal. To search the directory for a specific user or group, click Set. In Select User or Group, type the name of the user or group. We recommend that you delegate RODC installation and administration to a group. This user or group will also have local administrative rights on the RODC after the installation. If you do not specify a user or group, only members of the Domain Admins group or the Enterprise Admins group will be able to attach the server to the account. When you are finished, click Next.\n• None On the Summary page, review your selections. Click Back to change any selections, if necessary. To save the settings that you selected to an answer file that you can use to automate subsequent AD DS operations, click Export settings. Type a name for your answer file, and then click Save. When you are sure that your selections are accurate, click Next to create the RODC account.\n• None On the Completing the Active Directory Domain Services Installation Wizard page, click Finish.\n\nAfter an RODC account is created, you can attach a server to account to complete the RODC installation. This second stage can be completed in the branch office where the RODC will be located. The server where you perform this procedure must not be joined to the domain. Beginning in Windows Server 2012, you use the Add Roles Wizard in Server Manager to attach a server to an RODC account.\n\nTo attach a server to an RODC account using Server Manager\n• None On the Before you begin page, click Next.\n• None On the Select installation type page, click Role-based or feature-based installation and then click Next.\n• None On the Select destination server page, click Select a server from the server pool, click the name of the server where you want to install AD DS and then click Next.\n• None On the Select server roles page, click Active Directory Domain Services, click Add Features and then click Next.\n• None On the Select features page, select any additional features that you want to install and click Next.\n• None On the Active Directory Domain Services page, review the information and then click Next.\n• None On the Results page, verify Installation succeeded, and click Promote this server to a domain controller to start the Active Directory Domain Services Configuration Wizard. If you close Add Roles Wizard at this point without starting the Active Directory Domain Services Configuration Wizard, you can restart it by clicking Tasks in Server Manager.\n• None On the Deployment Configuration page, click Add a domain controller to an existing domain, type the name of the domain (for example, emea.contoso.com) and credentials (for example, specify an account that is delegated to manage and install the RODC), and then click Next.\n• None On the Domain Controller Options page, click Use existing RODC account, type and confirm the Directory Services Restore Mode password, and then click Next.\n• None On the Additional Options page, if you are installing from media, click Install from media path type and verify the path to the installation source files, select the domain controller that you want to replicate the AD DS installation data from (or allow the wizard to select any domain controller) and then click Next.\n• None On the Paths page, type the locations for the Active Directory database, log files, and SYSVOL folder, or accept default locations, and then click Next.\n• None On the Review Options page, confirm your selections, click View Script to export the settings to a Windows PowerShell script, and then click Next.\n• None On the Prerequisites Check page, confirm that prerequisite validation completed and then click Install. To complete the AD DS installation, the server will restart automatically.\n\nTroubleshooting Domain Controller Deployment Install a New Windows Server 2012 Active Directory Forest (Level 200) Install a New Windows Server 2012 Active Directory Child or Tree Domain (Level 200) Install a Replica Windows Server 2012 Domain Controller in an Existing Domain (Level 200)"
    },
    {
        "link": "https://stackoverflow.com/questions/67746180/powershell-activedirectory-module",
        "document": "I don't like the idea of installing administrative tools for non-admins. Even if you could get away with copying files and not doing the full-blown RSAT installation. Not the least of reasons is you are dramatically increasing the attack surface for malicious actors. The better solution is (Just Enough Administration) JEA, or a philosophically similar approach.\n\nJEA / Contrained endpoints can get complicated, but a summary of what you can do looks something like this:\n\nRun these commands on a system that has the ActiveDirectory module (likely the whole RSAT component) installed, it doesn't need to be a Domain Controller. It will create a new PowerShell remoting endpoint configuration that exposes only the commands you wish. The command will display a security dialog where you can permission which users you want to allow to connect, you want to grant them read & execute permission. Once that's done, you can get the results with an command like this:\n\nYou can add the parameter in the command without issue. You can expand the cmdlets you are allowing in the command.\n\nAgain this is very much a summary of a more complex topic but should be enough to get what you want.\n\nPersonally, I don't use configuration files as much as I use startup scripts. I think the latter is more flexible. You can get some information about that here. If you really want to dig into this there are references at the end of the article including a link to the PowerShell JEA documentation. There's also a link to some of the MVP articles I used to develop my own endpoints."
    }
]