[
    {
        "link": "https://medium.com/@nickpaolino/implementing-a-bulletin-board-in-react-js-5e4de5a43ff0",
        "document": "I recently worked on a React implementation of a resource-sharing bulletin board. The goal was to create a subject-specific space where users could post links to relevant resources. The links were formatted as sticky notes so that users could arrange their position on each board as they’d like. Each user could see the same representation of the bulletin board and add, delete, and rearrange the links. A link to the demo pages for the application can be found here.\n\nThe implementation of the board took a lot of premeditation. My backend JSON API was written in Ruby on Rails and I had to decide how I would structure my routes and controllers to appropriate the requests and send efficient, nested responses. On the frontend side, my two main tools were React Draggable and Redux. A harmonious flow between the Draggable components, the Redux store, and the API was necessary to achieve success with this project.\n\nMy first considerations were to do with the mechanics of how notes were to be saved on the board. I considered whether data about notes should be persisted in real-time, after user actions, or at a regular interval. With real-time, the requests would be made on every position change of a note. In terms of React Draggable’s built-in methods, the requests would be made using the onDrag method. These patch requests would only update the relevant axis. If a user was dragging a note along the Y axis, the Rails controller responsible for the patch requests would ignore the static number on the X axis. In order for a user on the same board to be able to see these real-time changes, a web socket would need to be setup to send and receive the updated position of the note. Each patch request would need to be broadcast to a Action Cable channel so that the note’s new position is immediately received by the other users viewing the board. Overall, the data flow would be as follows.\n\nOutside of the data consumption that this would require, there are two main reasons why this approach was faulty. First, React Draggable’s onDrag method updated a note’s movement in terms of milliseconds. Sending that many patch requests and subsequently re-rendering the note component for User 2 would be a taxing procedure and would likely be too slow. When User 1 moves the note, the note is being optimistically rendered whereas User 2 is seeing a real-time representation of the note’s actual data footprint. Writing a component that allows User 1 to be able to render optimistically without receiving the data simultaneously would be a challenge as well. The second issue has to do with user experience. While User 2 is viewing the board, a voodoo moving note might not be a welcoming experience. This last reason, simple and straightforward as it is, combined with the large data consumption was the main push behind my decision not to implement a real-time bulletin board.\n\nAnother option was to make the patch requests at regular intervals. Considering that this wouldn’t be efficient because the requests would be impartial to user actions, I ruled this option out very quickly. For User 2, receiving the updates at a set interval would contribute to the user experience problem I encountered when I considered a real-time board. Every so often User 2's optimistically rendered board would shift with the most recent changes that User 1 had made. This would interrupt the natural flow for User 2 and so I ditched the idea of using an interval for sending and receiving requests and responses.\n\nAfter deliberation, I decided that the most effective way to implement this was to allow each user their own optimistically rendered board for as long as they remained on the page without refresh. For User 1, pocketing these patch requests behind certain user actions was the most effective way to send the data to the database and make the collaborative bulletin board work. React Draggable’s built-in onStop method allowed me to send a patch request with the note’s updated position after a user had finished dragging a note. This seemed the most natural point to send data to the API. In addition to the note’s updated position, I decided that a request would be sent to the API every time a note was created, deleted, or its content edited with the relevant data.\n\nFrom the perspective of User 2, however, this data would not be received after User 1 made these actions. Rather, I leaned on the importance of each user having their own optimistically rendered board during each session. From a user experience point of view, I wanted each period of time in between refreshes to be a branch in which the user could manipulate the latest version of the board to their liking without other user’s interference. Only when a user switches over to another board or refreshes the page is the other user’s changes integrated into their own.\n\nThe one drawback to this method is the way that competing requests are resolved. If two users move the same note, both updates are going to be persisted to the database. The update that was persisted last is the update that remains. This does not happen when a user adds a note. If two users add a note separately of each other, both notes will be present to both users on refresh. If a user deletes a note while another tries to update that same note, this will result in a deleted note on refresh and a patch request error for the user trying to update the note. While this is how the application currently works, I designed the components with a fix to this problem in mind. Going forward, I will have a note become locked as soon as a user begins editing it. If User 1 is changing the text on a note, then the locked note will be represented to User 2 with a colored border and a caption describing that User 1 is currently editing it.\n\nThis will introduce the need for a simple web socket to be setup to broadcast and subscribe to this data in order to represent it for each user. In the meantime, however, the bulletin board has been implemented without the use of web sockets, which has been reserved for the real-time chat on each board. I built the Action Cable channel and the chatroom component in such a way that the web socket can be repurposed to send and receive data about which notes are currently being edited.\n\nNow that I’ve covered the overview of my thought process in approaching the data needs and user experience concerns of the bulletin board, I’ll delve into my implementation of it. Using React for this implementation was a great advantage as the component-based structure made it easier to realize.\n\nThere are three components involved in the bulletin board. The first is the bulletin container which is responsible for interacting with the Redux store, sending and receiving note data, and passing this data down as props to render the note components. The second component is the board component which has the sole responsibility of filtering the bulletin container’s note props and rendering the note components. While the board component seems superfluous, its role in receiving the data from the bulletin container and restructuring it so that the note component can render itself properly was invaluable. As an intermediary, it allowed me to compartmentalize the API response from the database in the bulletin container and the frontend necessities of rendering that data in the note component.\n\nEach note components’ position is determined by the pixel position on the div’s css. When a new note is created, a randomly generated left and top pixel value is created within the bounds of the board. These bounds are determined by the board div’s css properties. I made this a fixed distance and so when a screen is resized, the board compensates by becoming scrollable. While I had considered having the board distance be fluid and resizable, the method of using percentages instead of pixels would have made it hard for users to view the same arrangement of each board. Using pixels made this process easier and the transformations that occur when a note is moved were straightforward and required only determining the difference in pixels. This data is then sent through the bulletin container and that note instance is updated in the PostgreSQL database accordingly.\n\nAchieving a draggable bulletin board required that each note could only be dragged within a given bound. Creating this logic required that I made each note component’s draggable bounds equal to that component’s parent div. By having each component’s draggable range determined by its parent div rather than a fixed distance opened the door to making the bulletin components easily reusable. This feature is a driving factor behind my other implementation of the bulletin board feature in the application. I was able to repurpose the board and note components and set up another bulletin board on the user home page to showcase a user’s boards as sticky note representations.\n\nThe use case agnostic approach to the entire component structure made reusing it to visualize a user’s boards a simple procedure. There are only two significant changes in the implementation of this meta-visualization. The first is the container, which in this case is the profile container. The profile container interacts with the Redux store and API in a similar way as the bulletin container. The only significant difference is that the Profile Container is reading from the user’s board list and not the board display page’s data. Besides the swapped containers, the way in which the position of a user’s boards is stored is different since each user has the ability to visualize their own boards in whichever arrangement they prefer. For this reason, the positional data is stored on a join table for the board and users rather than the note model itself in the case of the board display page. Altogether the mechanics of the rendering from the container down to the note components are the same.\n\nWhile I’m confident that the basic mechanics of the collaborative bulletin board hold against any interfering bugs, the final product is far from polished with all of the intricate considerations of a seamless user experience. Going forward, implementing a board that makes collaborating not only possible but essential to resource-sharing will require an implementation of some form of a web socket for the bulletin components. By flagging to users who else is currently working on a board, the collaborative nature of the board are emphasized and the chat can be used to discuss the resources and their arrangement. With the current component structure and the chatroom’s built-in web socket approach, implementing these additional features will be a task within reach of the current product."
    },
    {
        "link": "https://novu.co/blog/building-a-forum-with-react-nodejs",
        "document": "I know, there are no forums today like before, it’s all about the Reddit, Facebook communities (and smaller ones like Devto and Mastodon), but! Once upon a time, when I was a boy, I was addicted to forums, I have actually created a few with PHPBB and vBulletin, back when PHP was a thing. being so nostalgic made me write this blog post 😎\n\nI am trying to get Novu to 20k stars, can you help me out by starring the repository? it helps me to create more content every week.\n\nHere, I’ll guide you through creating the project environment for the web application. We’ll use React.js for the front end and Node.js for the backend server.\n\nCreate the project folder for the web application by running the code below:\n\nNavigate into the server folder and create a file.\n\nExpressJS is a fast, minimalist framework that provides several features for building web applications in Node.js, CORS is a Node.js package that allows communication between different domains, and Nodemon is a Node.js tool that automatically restarts the server after detecting file changes.\n\nCreate an file – the entry point to the web server.\n\nSet up a Node.js server using Express.js. The code snippet below returns a JSON object when you visit the in your browser.\n\nConfigure Nodemon by adding the start command to the list of scripts in the file. The code snippet below starts the server using Nodemon.\n\nCongratulations! You can now start the server by using the command below.\n\nNavigate into the client folder via your terminal and create a new React.js project.\n\nInstall React Router – a JavaScript library that enables us to navigate between pages in a React application.\n\nDelete the redundant files, such as the logo and the test files from the React app, and update the file to display “Hello World” as done below.\n\nCopy the CSS file required for styling the project here into the file.\n\nHere, we’ll create the user interface for the forum system to enable users to create, reply and react to various threads.\n\nCreate a components folder within the folder containing the , , , , and files.\n• From the code snippet above:\n• The and files are the authentication pages of the web application.\n• The file represents the dashboard page shown after authentication. It allows users to create and react to the post threads.\n• The file displays the response on each post and allows users to reply to the post thread.\n• The is the navigation bar where we will configure Novu.\n\nUpdate the file to render the components using React Router\n\nCopy the code below into the file to render a form that accepts the user’s email and password.\n\nUpdate the file to display the registration form that allows users to create an account using their email, username, and password.\n\nUpdate the file to render a navigation bar that shows the application’s title and a sign-out button. Later in this article, I’ll guide you through adding Novu’s notification bell within this component.\n\nIt is the home page after the user’s authentication. They can create and react to posts (threads) within the Home component. Copy the code below into the file.\n\nThe code snippet above displays the navigation bar and an input field for the posts. We’ll update the component in the upcoming sections.\n\nThis page is a dynamic route that allows users to reply and view comments on a post thread. Update the file with the code snippet below:\n\nCongratulations! You’ve designed the application’s user interface. Next, you’ll learn how to register and log users into the application.\n\nHere, I’ll guide you through authenticating users and how to allow only authorised users to access protected pages within the web application.\n\nAdd a POST route on the server that accepts the user’s credentials – email, username, and password.\n\nCreate a function within the file that sends the user’s credentials to the endpoint on the server.\n\nCall the function when a user submits the form as done below:\n\nUpdate the route to save the user’s credentials and return a response to the front-end.\n\nThe code snippet above accepts the user’s credentials from the React.js application and checks if there is no existing user with the same credentials before saving the user to the database (array).\n\nFinally, display the server’s response by updating the function as done below.\n\nThe code snippet above displays a success or error message from the Node.js server and redirects the user to the login page after successfully creating the account.\n\nAdd a POST route on the server that accepts the user’s email and password and authenticates the users before granting them access to the web application.\n\nCreate a function within the file that sends the user’s email and password to the Node.js server.\n\nThe code snippet above sends the user’s credentials to the Node.js server and displays the response on the front end. The application redirects authenticated users to the component and saves their to the local storage for easy identification.\n\nUpdate the function within the file to remove the from the local storage when a user logs out.\n\nCreating and retrieving post threads within the application\n\nHere, you’ll learn how to create and retrieve the posts from the Node.js server.\n\nAdd a POST route within the file that accepts the post title and the user’s id from the React.js application.\n\nNext, send the user’s id and the post title to the server. Before then, let’s ensure the route is protected. Add a hook within the Home component to determine whether the user is authenticated.\n\nWhen users sign in to the application, we save their to the local storage for easy identification. The code snippet above checks if the exists; otherwise, the user is redirected to the login page.\n\nAdd a function within the Home component that sends the user’s id and the post title to the Node.js server when the form is submitted.\n\nSave the post and send all the available posts to the client for display.\n\nThe code snippet above accepts the user’s id and post title from the front end. Then, save an object that holds the post details and returns a response containing all the saved posts.\n\nCreate a state that will hold all the posts within the Home component.\n\nUpdate the function as done below:\n\nThe function retrieves all the posts available within the application and saves them into the state.\n\nUpdate the file to display the available posts as done below:\n• From the code snippet above:\n• All the posts are displayed within the Home component.\n• I added two new components – Likes and Comments. They both contain SVG icons from Heroicons.\n• The component accepts the post id and the number of likes on a post – length of the likes array on each post.\n• The component accepts the length of the array, the post id, and its title.\n\nCopy the code below into the file.\n\nThe code snippet above contains the SVG element for displaying the Like icon. The component also renders the number of likes on a post.\n\nCopy the code below into the file.\n\nThe code snippet contains the SVG element for the Comments button and the number of comments on the post.\n\nThe function is triggered when a user clicks the comment icon. It redirects the user to the component where they can view and add to the replies on each post.\n\nSo far, we’ve been able to display the available posts only when we create a new post. Next, let’s retrieve them when the component is mounted.\n\nAdd a GET route on the server that returns all the posts.\n\nUpdate the hook within the Home component to fetch all the posts from the server.\n\nCongratulations on making it this far! Next, you’ll learn how to react and reply to the posts.\n\nHow to react and reply to each posts\n\nIn this section, you’ll learn how to react and reply to each post. Users will be able to drop a like or comment on each post.\n\nCreate a function within the file that runs when a user clicks on the Like icon.\n\nCreate a POST route on the server that validates the reaction.\n• From the code snippet above:\n• The route accepts the post id and the user’s id from the React.js application and searches for the post that received a reaction.\n• Then, validates the reaction before adding the user to the likes array.\n\nUpdate the to send a POST request to the endpoint whenever a user reacts to the post.\n\nDisplaying the replies on each post\n\nHere, I’ll guide you through displaying the replies on each post within the React app.\n\nAdd a POST route on the server that accepts a post ID from the front end and returns the title and all the responses under such post.\n\nNext, update the Replies component to send a request to the endpoint on the server and display the title and replies when the page loads.\n• From the code snippet above:\n• The hook sends a request to the server’s endpoint and retrieves the post title and its replies.\n• The and states hold both the title and replies respectively.\n• The variable holds the post ID retrieved from the URL via dynamic routing in React Router.\n\nDisplay the replies on each post as done below:\n\nThe code snippet above shows the layout of the Replies component displaying the post title, replies, and a form field for replying to a post.\n\nCreate an endpoint on the server that allows users to add new replies as done below:\n\nThe code snippet above accepts the post id, user id, and reply from the React app, searches for the post via its ID, and adds the user’s id, username, and reply to the post replies.\n\nCreate a function that sends a request to the endpoint.\n\nCongratulations on making it thus far! In the upcoming sections, you’ll learn how to send notifications to multiple users using the Topics API provided by Novu.\n\nHow to send notifications via the Topic API in Novu\n\nIn this section, we’ll use the Novu Topic API to send notifications to multiple users simultaneously. To do this, the API allows us to create a unique topic, assign subscribers to the topic, and send a bulk notification to the subscribers at once.\n\nNavigate into the client folder and create a Novu project by running the code below.\n\nSelect your application name and sign in to Novu. The code snippet below contains the steps you should follow after running .\n\nVisit the demo page, copy your subscriber ID from the page, and click the Skip Tutorial button.\n\nCreate a notification template with a workflow as shown below:\n\nUpdate the In-App notification template to send this message to the post creator when there is a new reply.\n\nInstall the Novu Notification package within your React project.\n\nUpdate the file to contain the Novu notification bell according to its documentation.\n\nThe code snippet above adds Novu’s notification bell icon to the Nav component, enabling us to view all the notifications in our app. Replace the Subscriber ID variable with yours.\n\nSelect Settings on your Novu Admin Panel and copy your App ID and API key. Ensure you add the App ID into its variable within the file.\n\nInstall the Novu SDK for Node.js into the server folder.\n\nImport Novu from the package and create an instance using your API Key. Replace the API Key variable with your API key copied earlier.\n\nTo begin with, you’ll need to add the users as subscribers when they login to the application. Therefore, update the route to add the user as a Novu subscriber.\n\nThe code snippet above creates a Novu subscriber via the user’s email and id.\n\nNext, add each new post as a Novu topic and add the user as a subscriber to the topic.\n\nFinally, send notifications to the subscriber when there is a new response on the thread\n\nCongratulations!🎉 You’ve completed the project for this tutorial.\n\nSo far, you’ve learnt how to authenticate users, communicate between a React and Node.js app, and send bulk notifications using the Novu Topic API.\n\nNovu is an open-source notification infrastructure that enables you to send SMS, chat, push, and e-mail notifications from a single dashboard. The Topic API is just one of the exciting features Novu provides; feel free to learn more about us here.\n\nThe source code for this tutorial is available here:\n\nThank you for reading!"
    },
    {
        "link": "https://guttitech.com/phpfusion/articles.php?article_id=1201&rowstart=27",
        "document": "A new JavaScript library has arrived: React. js. React. js is designed to make the process of building modular, reusable user interface components simple and intuitive. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. In this course, Eve Porcello helps you get started with React. js, guiding you through the interface design of a sample bulletin board app. She reviews components, properties, and component state, as well as the foundational parent/child relationships within React. js. Eve also describes the lifecycle of components and how developers can trigger creation, lifetime, and teardown events. The course wraps with a chapter dedicated to building a more complete app with React. js and companion tools like Babel, NPM, and more.\n\n\n\n Topics include:\n\n\n\n - What is React.js?\n\n - Introducing JSX\n\n - Creating a React component\n\n - Handling events\n\n - Using state\n\n - Working with PropTypes\n\n - Adding child elements\n\n - Mounting and updating components\n\n - Creating a React.js app"
    },
    {
        "link": "https://stackoverflow.com/questions/46566830/how-to-use-create-react-app-with-an-older-react-version",
        "document": "If you already created with , you can downgrade version 18 to previous verions of react with a few steps. You will need to do modifications in two files which are and . You should delete also\n\nYour probably looks like this now\n\nYou should change import of and cancel line\n\nNew code of should be like this\n\nGo to your file and update desired react version in dependencies\n\nDelede your node_modules and If you are using npm do . If you are using yarn do . After this step you are good to run app with or .\n\nStep 4 (OPTIONAL: If you are still having problems but I do not recommend doing it)\n\nDelete your (for npm) or file (for yarn) and start back from Step 3"
    },
    {
        "link": "https://lo-victoria.com/lets-build-a-simple-bulletin-board-react-app",
        "document": "In an article I wrote on Making Draggable Components in React, a reader requested to share how I built the Bulletin Board App, a simple demo app to showcase draggable components in React.\n\nIn this article, I'll be showing step-by-step how I made this simple app, perfect for React beginners to learn how to implement draggable components in their projects. Let's get started!\n\nThis app can do the following:\n• Allows user to type something in an input and press ENTER to generate a note of a random colour.\n• Allows user to drag the note anywhere. Its position, colour and content will be saved even after the user exits the app.\n• Allows the user to delete the note by clicking on the top-right 'X' button.\n\nSo let's build the app according to its 3 use cases.\n\nInitialize a new Create React App by running the command:\n\nThen, in the project's root folder, install the following packages that we need:\n• : to implement draggable features for the notes\n• : allow notes to be generated in random colours\n\nIn , import the packages and React and hooks.\n\nWe need to create and initialize 2 states using hook.\n• : this is the value of the input field. Initialize as empty string.\n• : this is an array that contains all the notes generated, saved to localStorage. Initialize as empty array if localStorage has no saved .\n\nWe can create the HTML input and button elements in the return function of as follows:\n\nIt looks something like:\n\nhas the following attributes:\n• : set to the value of the state\n• : update state every time there is a change in the input's value\n• : description when there's nothing in the input field\n• : calls the function that checks if the key pressed is ENTER, call the function.\n\nThe keyPress function is written like so:\n\nThis way, the user can type something in the input field then press ENTER key or click on the ENTER button to generate a new note on screen.\n\nAs for the ENTER button, when the user clicks on it, the function will be called. Let's write this function next.\n\nThis function generates a new note on the screen with the string the user typed in input (i.e. ). A note is an object with the following properties:\n• : the string content of the note, which is the state 's value\n• : the background colour of the note, generated with\n• : the x and y coordinates of the note. Initialized to .\n\nNow, let's update our localStorage every time our array is updated. We can use the hook to achieve this:\n\nNow we should display our note objects from our array on screen.\n\nIn our return function, below our input and button element, we can display our notes using the array method:\n\nFor every note object in the array, we will create a component in which:\n• of the component = of the object.\n• , which is when the user stops dragging the note on screen, will call the function.\n\nInside the component, we have the that will render the note's property on a background with the note's property. And finally, we have an 'X' button which calls the function upon clicked.\n\nNow, we should be able to generate a new randomly-coloured note on screen every time we type something in the input and press ENTER.\n\nHowever, if we dragged the note and reload the page, the note's position will not be saved because we haven't written our function. Let's write that function next.\n\nThis function is called every time we stop dragging the note. That way, we can save the final position of the note to our array in localStorage.\n\nThe next time we visit the page, the app will remember the last position of the note. It won't reset to 100, y:0}` all the time.\n• We pass as the first parameter of the function. It contains the x and y coordinates of our note.\n• Clone our array into a new array called .\n• Get the index of the note in the array we want to update from the 2nd parameter .\n• Set the new coordinate values of the note in its property.\n• Set to the value of the .\n\nGreat! Now the position of any note will be updated and saved to localStorage whenever it changes. Let's move on to the final function: .\n\nIn this function, the note will be deleted from both on screen and from the array in localStorage.\n\nThis function is pretty straightforward. We can simply use the array method to remove the note whose property matches the parameter of the function.\n\nAnd that's it!\n\nWe should now have a simple working bulletin board app like the one below:\n\nThanks for reading. I hope this is a helpful to implement React Draggable into your projects. For more details on React Draggable, feel free to check out my article Making Draggable Components in React.\n\nPlease like and share this article if it is helpful, and leave any questions in the comments below. Check out the demo or the repo of this app. For more information on the packages we used to build this app, feel free to read the section below.\n\nSpecial thanks to Manas Garg for requesting this article. Sorry it took so long to finally publish. Thanks and cheers!"
    },
    {
        "link": "https://digitalocean.com/community/tutorials/how-to-create-user-interactions-with-events-in-vue",
        "document": "The author selected Open Sourcing Mental Illness to receive a donation as part of the Write for DOnations program.\n\nIn Vue.js development, a client’s web browser reads HTML and JavaScript and renders web pages based off of the instructions that the developer writes for it. But the web page or application not only needs to process data; it also needs to process user interactions. To do this, developers use events in JavaScript that execute code when the user interacts with HTML elements.\n\nAn event can capture any user interaction with a user interface button or a physical keyboard or mouse. In JavaScript, you would create event listeners that wait for that event to occur and then execute a block of code. In Vue.js, you are not required to listen for an event; that is done automatically with the directive.\n\nIn this tutorial, you will use events in Vue to create an application of airport codes. When the user selects an airport code, the app will add that airport to a “favorites” collection. By following along with this project, you will learn what events are, how to use Vue’s built-in events, and how to create your own custom events.\n\nTo complete this tutorial, you will need:\n• Node.js version or greater installed on your computer. To install this on macOS or Ubuntu 20.04, follow the steps in How To Install Node.js and Create a Local Development Environment on macOS or the section of How To Install Node.js on Ubuntu 20.04.\n• Vue CLI installed on your machine by following of How To Generate a Vue.js Single Page App With the Vue CLI. You will use this to create your Vue application in the first step of this tutorial.\n• You will also need a basic knowledge of JavaScript, HTML, and CSS, which you can find in our How To Build a Website With HTML series, How To Build a Website With CSS series, and in How To Code in JavaScript.\n\nThe first step in this tutorial will be to set up a demo project with some data to display in the view. This will include an array of JavaScript objects that contain airport data and a Vue component to iterate over and render the data.\n\nThis will create a project named . This tutorial will use Vue 3, so when prompted, select the option :\n\nOnce you have created the project, make a directory to hold all of your local data for this project. First, make the new project folder your working directory:\n\nNext, make a directory in the directory:\n\nIn your text editor of choice, open a file called . Add the following data to the file:\n\nThis data is an array of objects consisting of a few airports in the United States. Next, you are going to iterate through this data to generate cards consisting of the , , , and properties. When the user clicks on a card, the app will emit an event up to the parent, which will add that airport to a collection of data that will represent your favorite airports.\n\nTo render the data, create a single-file component (SFC) with the name and open it in your text editor. This component will contain all of the styles and logic for the airport card.\n\nAdd the following contents to the file:\n\nThis component contains a prop, which in Vue.js is a way to pass data down from a parent component to a child component. The section then renders this data. For more on single-file components, check out the How To Create Reusable Blocks of Code with Vue Single-File Components tutorial.\n\nYou may notice that there is some CSS included in the code snippet. In the component, the wrapper contains the class of . This CSS adds some styling to the generated HTML by adding borders to give each airport the appearance of a card. and are pseudo-selectors that apply different styling to the first and last tags in the HTML inside of the with the class of .\n\nSave the file and exit from your text editor.\n\nNext, modify the existing component to iterate through the data and render a series of components. Open in your text editor and replace the contents with the following highlighted code:\n\nThis imports the data and the SFC, then uses the directive to iterate over the data, creating an airport card for each object in the array. It also adds additional CSS targeted to the class, which uses CSS grid to manage the layout of the cards.\n\nSave and exit the file. With the project now set up, run a local development server with the following command:\n\nThis will start a server on your , usually on port . Open your web browser of choice and visit to find the following:\n\nNow that you have your sample project set up, you’ll next explore built-in events using the directive. When this event is fired, an alert pop-up box will appear with the airport code of the airport associated with that event.\n\nStep 2 — Listening for Events With the Directive\n\nAs stated earlier, events are a way to execute functions when the user interacts with HTML elements in the DOM (Document Object Model). When writing vanilla JavaScript, to execute a function on an event, you may write something called an event listener. An event listener is a function that waits for that interaction to occur, then executes some code. With Vue, however, you can use the directive for this purpose. A directive is a piece of re-useable code that a developer can use in order to manipulate the DOM. The directive is provided by Vue.js out of the box.\n\nIn this step, you will create a function in your application that runs when a user clicks on a card. Open the component in your text editor of choice.\n\nCreate a function that alerts the user of the airport that they clicked on by adding the following highlighted code:\n\nIn Vue.js 3, reactive functions need to be defined and exported in the component method. This tells Vue that it can execute the function in the .\n\nWith the function defined, you’ll now attach it to an event on an HTML element. As stated before, you can use the directive and attach an event with the name of ; this is an event provided by Vue.js. In the component, add the directive to the wrapper :\n\nOnce you have added this code, save and exit the file.\n\nNow, when you click on a card, an alert will pop-up with the message provided. If you click on for example, you will find the following:\n\nThe event is not the only event that is provided to you out-of-the-box by Vue.js. In fact, you can use any native JavaScript event, like:\n\nNext, you will change this listener to to illustrate how Vue.js listens for events. is an event that fires whenever a mouse cursor moves over an HTML element.\n\nOpen up again and update your file with the following highlighted code:\n\nAs shown here, Vue also has shorthand syntax for events. To use the shorthand syntax, you replaced with . Save and exit the file.\n\nNow when you visit and hover over a card, that function will execute and display a native alert.\n\nThis functionality is good for testing purposes, but may be undesired since it displays the alert every time a user hovers over it. A better experience might be to only display it the first time a user hovers over that card. In vanilla JavaScript, you may track the amount of times a user hovers over a card, then prevent further executions. Vue.js has event modifiers that you can leverage to accomplish the same thing with less code.\n\nIn the next section, you are going to explore event modifiers and use them for a better user experience.\n\nIn the previous section, you executed a function on the and events. You also learned about the Vue.js shorthand for events. Now you will expand on this further by attaching a modifier to this event so your function executes only once.\n\nVue.js provides a number of event modifiers for you. Some of these include:\n• : handles an event targeting an inner element before the selected element\n• : only triggers the handler if is the element itself\n• : only executes the function once\n• : enables the element’s default behavior to happen immediately instead of waiting for the event, which can be used for optimizing performance for scroll on mobile devices\n\nIn this case, you’ll use the modifier. In your text editor, open the component and add the modifier to the existing event:\n\nSave the file. Visit your application in the browser and you’ll find that the event only fires once on the first event.\n\nNext, you’ll continue exploring modifiers by using key modifiers. These key modifiers are associated with keystroke events, such as . For this next part, imagine that you want to make this clicking action a little more explicit. One way you can do that is by adding a key modifier to the event on the in your template.\n\nTo do that, change the to and add the modifier:\n\nSave the changes and open the application in your browser. If you click on a card without holding the key, the alert does nothing. Now, try holding down the key when clicking on a card. Your function will now execute, and you will receive an alert.\n\nIn this section, you learned about Vue’s built-in events and the modifiers associated with those events. You can get a lot done with these built-in events, but there will be times when you’ll need to have a custom event. In the next section, you’re going to use custom events to emit an action up to a parent so that it will execute a function.\n\nWhen developing applications in Vue.js, there will be times when you need to pass data up to a parent component via a custom event. Props are read-only data that are passed down to a child from the parent, but a custom action via an is the opposite of that. To create the most reusable components, it’s best to think of these as functions. You pass data down through props (arguments), and emit values back up to the parent (a value).\n\nTo emit an event from the child component to the parent, you use the function. Before implementing this, this tutorial will guide you through an example to demonstrate how this works.\n\nThe function accepts two arguments: the action name (a string), and the value to pass up to the parent. In the following example, when the user clicks on the button, you are sending the value to the parent component under the action :\n\nIn the parent component, you would use the directive and listen for the event. When this custom event is fired, the code will do something with the value:\n\nThe value of the event will be . In this case, is actually , which you then store in a reactive data property called .\n\nNow that you know what a custom event looks like, you will put it into practice by implementing this custom event into your application.\n\nOpen the component in your text editor. In the event, remove the reference to the function and replace it with . Remember, the first arugment is the name of the event and the second is the value that you are emitting:\n\nSave the file. Now, when the user clicks on the airport card, a custom event will fire and pass up that object.\n\nNext, open to add some HTML to the template. You will show the favorite airports list after the six cards that are already present:\n\nIn this code snippet, you are creating a reactive data property called , which is an empty array. In the , you iterate through the empty array to render the components, much like you did in an earlier step.\n\nNow you need to add the event for your custom event:\n\nIn the custom event, you used the JavaScript method to add the airport from the child ( ) to the reactive data property.\n\nOpen you browser and navigate to your project at . When you click on one of the airport cards, that card will appear under .\n\nIn this section, you learned about custom events, what they are, and how to use them. A custom event is a way to pass data up to a parent component through the function provided by Vue. Once that data has been emitted, you can further manipulate it in the parent component, like adding it to an array.\n\nIn this tutorial, you learned how Vue.js listens for a number of built-in events, such as and . In addition to that, you tried out event and key modifiers, small pieces of code that you appended to your event to provide additional functionality. With this, you set up your app to execute the function once with the modifier and to only fire when holding down the key using the modifier.\n\nVue provides an efficient way to listen for events that lets you focus on manipulating data over manually setting up event listeners. In addition to that, Vue allows you to think of components as functions: They accept data and can return a value with .\n\nTo learn more about Vue components, it is recommended to read through the Vue documentation. For more tutorials on Vue, check out the How To Develop Websites with Vue.js series page."
    },
    {
        "link": "https://quora.com/What-are-some-of-the-best-practices-for-structuring-a-Vue-js-application",
        "document": "Something went wrong. Wait a moment and try again."
    },
    {
        "link": "https://telerik.com/blogs/10-good-practices-building-maintaining-large-vuejs-projects",
        "document": "Here are the top best practices I've developed while working on Vue projects with a large code base. These tips will help you develop more efficient code that is easier to maintain and share.\n\nWhen freelancing this year, I had the opportunity to work on some large Vue applications. I am talking about projects with more than 😰 a dozen Vuex stores, a high number of components (sometimes hundreds) and many views (pages). 😄 It was actually quite a rewarding experience for me as I discovered many interesting patterns to make the code scalable. I also had to fix some bad practices that resulted in the famous spaghetti code dilemma. 🍝\n\nThus, today I’m sharing 10 best practices with you that I would recommend to follow if you are dealing with a large code base. 🧚🏼‍♀️\n\n1. Use Slots to Make Your Components Easier to Understand and More Powerful\n\nI recently wrote an article about some important things you need to know regarding slots in Vue.js. It highlights how slots can make your components more reusable and easier to maintain and why you should use them.\n\n🧐 But what does this have to do with large Vue.js projects? A picture is usually worth a thousand words, so I will paint you a picture about the first time I deeply regretted not using them.\n\nOne day, I simply had to create a popup. Nothing really complex at first sight as it was just including a title, a description and some buttons. So what I did was to pass everything as props. I ended up with three props that you would use to customize the components and an event was emitted when people clicked on the buttons. Easy peasy! 😅\n\nBut, as the project grew over time, the team requested that we display a lot of other new things in it: form fields, different buttons depending on which page it was displayed on, cards, a footer, and the list goes on. I figured out that if I kept using props to make this component evolve, it would be ok. But god, 😩 how wrong I was! The component quickly became too complex to understand as it was including countless child components, using way too many props and emitting a large number of events. 🌋 I came to experience that terrible situation in which when you make a change somewhere and somehow it ends up breaking something else on another page. I had built a Frankenstein monster instead of a maintainable component! 🤖\n\nHowever, things could have been better if I had relied on slots from the start. I ended up refactoring everything to come up with this tiny component. Easier to maintain, faster to understand and way more extendable!\n\nMy point is that, from experience, projects built by developers who know when to use slots does make a big difference on its future maintainability. Way fewer events are being emitted, the code is easier to understand, and it offers way more flexibility as you can display whatever components you wish inside.\n\nUsually, new Vue.js developers start to learn about Vuex because they stumbled upon on of these two issues:\n• Either they need to access the data of a given component from another one that’s actually too far apart in the tree structure, or\n• They need the data to persist after the component is destroyed.\n\nThat's when they create their first Vuex store, learn about modules and start organizing them in their application. 💡\n\nThe thing is that there is no single pattern to follow when creating modules. However, 👆🏼 I highly recommend you think about how you want to organize them. From what I've seen, most developers prefer to organize them per feature. For instance:\n\n😜 On my side, I find it easier to understand when they are organized according to the data models they fetch from the API. For example:\n\nWhich one you choose is up to you. The only thing to keep in mind is that a well-organized Vuex store will result in a more productive team in the long run. It will also make newcomers better predisposed to wrap their minds around your code base when they join your team.\n\n3. Use Actions to Make API Calls and Commit the Data\n\nMost of my API calls (if not all) are made inside my Vuex actions. You may wonder: why is that a good place to do so? 🤨\n\n🤷🏼‍♀️ Simply because most of them fetch the data I need to commit in my store. Besides, they provide a level of encapsulation and reusability I really enjoy working with. Here are some other reasons I do so:\n• If I need to fetch the first page of articles in two different places (let's say the blog and the homepage), I can just call the appropriate dispatcher with the right parameters. The data will be fetched, committed and returned with no duplicated code other than the dispatcher call.\n• If I need to create some logic to avoid fetching this first page when it has already been fetched, I can do so in one place. In addition to decreasing the load on my server, I am also confident that it will work everywhere.\n• I can track most of my Mixpanel events inside these actions, making the analytics code base really easy to maintain. I do have some applications where all the Mixpanel calls are solely made in the actions. 😂 I can't tell you how much of a joy it is to work this way when I don't have to understand what is tracked from what is not and when they are being sent.\n\n4. Simplify Your Code Base with mapState, mapGetters, mapMutations and mapActions\n\nThere usually is no need to create multiple computed properties or methods when you just need to access your state/getters or call your actions/mutations inside your components. Using , , and can help you shorten your code and make things easier to understand by grouping what is coming from your store modules in one place.\n\nAll the information you'll need on these handy helpers is available here in the official Vuex documentation. 🤩\n\nI usually like to create a helper that I can call anywhere to fetch my API endpoints. At the root of my project, I have an folder that includes all my classes (see one of them below).\n\nEach one is grouping all the endpoints for its category. Here is how I initialize this pattern with a plugin in my Nuxt applications (it is quite a similar process in a standard Vue app).\n\nNow, I can simply call them in my components or Vuex actions like this:\n\n6. Use \\$config to access your environment variables (especially useful in templates)\n\nYour project probably have some global configuration variables defined in some files:\n\nI like to quickly access them through a helper, especially when I am inside a template. As always, it's quite easy to extend the Vue object:\n\n7. Follow a Single Convention to Name Your Commits\n\nAs the project grows, you will need to browse the history for your components on a regular basis. If your team does not follow the same convention to name their commits, it will make it harder to understand what each one does.\n\nI always use and recommend the Angular commit message guidelines. I follow it in every project I work on, and in many cases other team members are quick to figure out that it's better to follow too.\n\nFollowing these guidelines leads to more readable messages that make commits easier to track when looking through the project history. In a nutshell, here is how it works:\n\nHave a look at their README file to learn more about it and its conventions.\n\n8. Always Freeze Your Package Versions When Your Project is in Production\n\nI know... All packages should follow the semantic versioning rules. But the reality is, some of them don't. 😅\n\nTo avoid having to wake up in the middle of the night because one of your dependencies broke your entire project, locking all your package versions should make your mornings at work less stressful. 😇\n\nWhat it means is simply this: avoid versions prefixed with :\n\n9. Use Vue Virtual Scroller When Displaying a Large Amount of Data\n\nWhen you need to display a lot of rows in a given page or when you need to loop over a large amount of data, you might have noticed that the page can quickly become quite slow to render. To fix this, you can use vue-virtual-scoller.\n\nIt will render only the visible items in your list and re-use components and dom elements to be as efficient and performant as possible. It really is easy to use and works like a charm! ✨\n\n10. Track the Size of Your Third-Party Packages\n\nWhen a lot of people work in the same project, the number of installed packages can quickly become incredibly high if no one is paying attention to them. To avoid your application becoming slow (especially on slow mobile networks), I use the import cost package in Visual Studio Code. This way, I can see right from my editor how large an imported module library is, and can check out what's wrong when it's getting too large.\n\nFor instance, in a recent project, the entire lodash library was imported (which is approximately 24kB gzipped). The issue? Only the cloneDeep method was used. By identifying this issue with the import cost package, we fixed it with:\n\nThe clonedeep function could then be imported where needed:\n\nDo you have other best practices when dealing with a large Vue code base? Feel free to tell me in the comments below or to reach out to me on Twitter @RifkiNada. 🤠"
    },
    {
        "link": "https://reddit.com/r/vuejs/comments/1fg0fbp/vuejs_best_practices",
        "document": "Hello everyone I'm a new learner in the world of vuejs, loving it so far. But i've been kinda winging it when it comes to fetching data and using components, composables etc.. Sometimes my code looks messy and appears to be barely holding it together. So what are your guys's favourite practices and preferences to work with? Any libraries or tools? Where can i find guides or resources to help me learn these things? Love you"
    },
    {
        "link": "https://community.auth0.com/t/best-practices-for-retrieving-user-permissions-in-a-spa-vue-js-with-node-js-api-using-auth0/122017",
        "document": "I am developing a Single Page Application (SPA) using Vue.js with a Node.js API, where I am utilizing Auth0 for authentication and access control. However, I have encountered challenges in obtaining user permissions on the SPA side and am seeking guidance on best practices for handling this situation.\n\nI have two endpoints in my API:\n\nAnd two corresponding screens in the SPA:\n\nMy goal is to ensure that different users have access to specific functionalities based on their permissions. For example, the user Jhon, who is an administrator, has permissions to access both screens and endpoints, while James, a project manager, has access only to the “Project List” screen and endpoint.\n\nWhile I have successfully implemented permission validation in my Node.js API using features provided by Auth0, I am facing difficulties in finding the best practice for accessing this information on the SPA side.\n• Create a custom endpoint in the API that, based on the access token, returns the user’s permissions/roles.\n• Create an API endpoint to consume https://{yourDomain}/api/v2/users/USER_ID/permissions and retrieve the permissions/roles.\n• Add permissions information directly to the Token ID and access the token through the SDK in the SPA .\n\nChallenges with Custom Claims in the Token ID:\n\nI attempted to implement an action that sets the value within the Token ID but encountered difficulties in capturing user permissions, such as . My current code:\n\nQuestion:\n\n Given these options and challenges, I am seeking guidance on which approach is more recommended or if there is a standard practice for handling the retrieval of user permissions in a SPA with an API using Auth0. Any suggestions or similar experiences that can guide my decision would be greatly appreciated."
    }
]