[
    {
        "link": "https://en.cppreference.com/w/cpp/io/manip",
        "document": "Manipulators are helper functions that make it possible to control input/output streams using operator<< or operator>>.\n\nThe manipulators that are invoked without arguments (e.g. std::cout << std::boolalpha; or std::cin >> std::hex;) are implemented as functions that take a reference to a stream as their only argument. The special overloads of and accept pointers to these functions. These functions (or instantiations of function templates) are the only addressable functions in the standard library.(since C++20)\n\nThe manipulators that are invoked with arguments (e.g. std::cout << std::setw(10);) are implemented as functions returning objects of unspecified type. These manipulators define their own or which perform the requested manipulation."
    },
    {
        "link": "https://cplusplus.com/reference/iomanip/setprecision",
        "document": ""
    },
    {
        "link": "https://wscubetech.com/resources/cpp/input-output",
        "document": ""
    },
    {
        "link": "https://geeksforgeeks.org/manipulators-in-c-with-examples",
        "document": "Manipulators are helping functions that can modify the input or output stream. They can be included in the I/O statement to alter the format parameters of a stream. They are defined inside <iomanip> and some are also defined inside <iostream> header file.\n\nFor example, if we want to print the hexadecimal value of 100 then we can print it as:\n\nThere are various types of manipulators classified on the basis type of entity they manipulate:\n\nOutput stream manipulators are used to control and format the output stream, such as setting the width, precision, or alignment of printed data. They allow for a better presentation of output.\n\nInput stream manipulators are used to modify the behaviour of the input stream. They help in processing input efficiently, such as skipping unnecessary whitespaces with ws.\n\nBoolean manipulators are used to format boolean values in output. They allow displaying boolean values as true or false or as 1 and 0, depending on the requirement.\n\nThese manipulators control how text and numbers are aligned or how their signs are displayed in the output.\n\nFollowing table lists some common alignment and sign manipulators:\n\nBase manipulators are used to format numbers in different bases, such as decimal, hexadecimal, or octal. They help in representing numbers in a way suited to specific applications.\n\nWhat is the difference between endl and \n\n?\n\nCan manipulators be used without arguments?\n\nWhat happens if setw() is used with text shorter than the specified width?"
    },
    {
        "link": "https://stackoverflow.com/questions/12560291/set-back-default-floating-point-print-precision-in-c",
        "document": "I want to control the precision for a double during a comparison, and then come back to default precision, with C++.\n\nI intend to use to set precision. What is then syntax, if any, to set precision back to default?\n\nI am doing something like this\n\nI do some stuff, and I would like to come back to default double comparison right afterwards.\n\nI modified like this, and I still have some errors\n\nwith false at compilation, and also false at compilation. Could you help?"
    },
    {
        "link": "https://stackoverflow.com/questions/47545774/is-it-safe-to-use-double-for-scientific-constants-in-c",
        "document": "floating point arithmetic and accuracy is a very tricky subject. Read absolutely the floating-point-gui.de site.\n\nErrors of many floating point operations can accumulate to the point of giving meaningless results. Several catastrophic events (loss of life, billions of dollars crashes) happened because of this. More will happen in the future.\n\nThere are some static source analyzers dedicated to detect them, for example Fluctuat (by my CEA colleagues, several now at Ecole Polytechnique, Palaiseau, France) and others. But Rice's theorem applies so that static analysis problem is unsolvable in general.\n\nThere are also some programs instrumenting calculations, for example CADNA from LIP6 in Paris, France.\n\nYou could design your numerical algorithms to be less sensitive to floating point errors. This is very difficult (and you'll need years of work to acquire the relevant skills and expertise).\n\nYou could also use arbitrary-precision arithmetic, or extended precision one (e.g. 128 bit floats or quad-precision). This slows down the computations.\n\nAn important consideration is how much effort (time and money) you can allocate to hunt floating point errors, and how much do they matter to your particular problem. But there is No Silver Bullet, and the question of floating point accurary remains a very difficult issue (you could work your entire life on it).\n\nPS. I am not a floating point expert. I just happen to know some."
    },
    {
        "link": "https://quantstart.com/articles/Mathematical-Constants-in-C",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/21925401/how-to-efficiently-calculate-double-to-two-decimal-precision-in-c-c",
        "document": "\"express them to upto 2 decimal places\" means you have only 2 digits in the output.\n\nSo, working with mantissa, it is impossible to show the result not using floats or doubles.\n\nIn , the keys g and G set the number of significant digits. %2g - exactly 2 decimal places.\n\nAs for counting, the decimal division is not a problem operation (as + or -). So, simply divide them, multiply by 100, to show in percents - no problems."
    },
    {
        "link": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines",
        "document": "This is a living document under continuous improvement. Had it been an open-source (code) project, this would have been release 0.8. Copying, use, modification, and creation of derivative works from this project is licensed under an MIT-style license. Contributing to this project requires agreeing to a Contributor License. See the accompanying LICENSE file for details. We make this project available to “friendly users” to use, copy, modify, and derive from, hoping for constructive input.\n\nComments and suggestions for improvements are most welcome. We plan to modify and extend this document as our understanding improves and the language and the set of available libraries improve. When commenting, please note the introduction that outlines our aims and general approach. The list of contributors is here.\n• The sets of rules have not been completely checked for completeness, consistency, or enforceability.\n• Update reference sections; many pre-C++11 sources are too old.\n\nYou can read an explanation of the scope and structure of this Guide or just jump straight in:\n\nYou can sample rules for specific language features:\n• derived : when to use – as interface – destructors – copy – getters and setters – multiple inheritance – overloading – slicing –\n• destructor: and constructors – when needed? – must not fail\n• exception: errors – – for errors only – – minimize – what if no exceptions?\n• : range-for and for – for and while – for-initializer – empty body – loop variable – loop variable type ???\n• lambda expression: when to use\n• : for organizing data – use if no invariant – no private members\n\nYou can look at design concepts used to express the rules:\n\nThis document is a set of guidelines for using C++ well. The aim of this document is to help people to use modern C++ effectively. By “modern C++” we mean effective use of the ISO C++ standard (currently C++20, but almost all of our recommendations also apply to C++17, C++14 and C++11). In other words, what would you like your code to look like in 5 years’ time, given that you can start now? In 10 years’ time?\n\nThe guidelines are focused on relatively high-level issues, such as interfaces, resource management, memory management, and concurrency. Such rules affect application architecture and library design. Following the rules will lead to code that is statically type safe, has no resource leaks, and catches many more programming logic errors than is common in code today. And it will run fast – you can afford to do things right.\n\nWe are less concerned with low-level issues, such as naming conventions and indentation style. However, no topic that can help a programmer is out of bounds.\n\nOur initial set of rules emphasizes safety (of various forms) and simplicity. They might very well be too strict. We expect to have to introduce more exceptions to better accommodate real-world needs. We also need more rules.\n\nYou will find some of the rules contrary to your expectations or even contrary to your experience. If we haven’t suggested you change your coding style in any way, we have failed! Please try to verify or disprove rules! In particular, we’d really like to have some of our rules backed up with measurements or better examples.\n\nYou will find some of the rules obvious or even trivial. Please remember that one purpose of a guideline is to help someone who is less experienced or coming from a different background or language to get up to speed.\n\nMany of the rules are designed to be supported by an analysis tool. Violations of rules will be flagged with references (or links) to the relevant rule. We do not expect you to memorize all the rules before trying to write code. One way of thinking about these guidelines is as a specification for tools that happens to be readable by humans.\n\nThe rules are meant for gradual introduction into a code base. We plan to build tools for that and hope others will too.\n\nComments and suggestions for improvements are most welcome. We plan to modify and extend this document as our understanding improves and the language and the set of available libraries improve.\n\nThis is a set of core guidelines for modern C++ (currently C++20 and C++17) taking likely future enhancements and ISO Technical Specifications (TSs) into account. The aim is to help C++ programmers to write simpler, more efficient, more maintainable code.\n• In.struct: The structure of this document\n\nAll C++ programmers. This includes programmers who might consider C.\n\nThe purpose of this document is to help developers to adopt modern C++ (currently C++20 and C++17) and to achieve a more uniform style across code bases.\n\nWe do not suffer the delusion that every one of these rules can be effectively applied to every code base. Upgrading old systems is hard. However, we do believe that a program that uses a rule is less error-prone and more maintainable than one that does not. Often, rules also lead to faster/easier initial development. As far as we can tell, these rules lead to code that performs as well or better than older, more conventional techniques; they are meant to follow the zero-overhead principle (“what you don’t use, you don’t pay for” or “when you use an abstraction mechanism appropriately, you get at least as good performance as if you had handcoded using lower-level language constructs”). Consider these rules ideals for new code, opportunities to exploit when working on older code, and try to approximate these ideals as closely as feasible. Remember:\n\nTake the time to understand the implications of a guideline rule on your program.\n\nThese guidelines are designed according to the “subset of superset” principle (Stroustrup05). They do not simply define a subset of C++ to be used (for reliability, safety, performance, or whatever). Instead, they strongly recommend the use of a few simple “extensions” (library components) that make the use of the most error-prone features of C++ redundant, so that they can be banned (in our set of rules).\n\nThe rules emphasize static type safety and resource safety. For that reason, they emphasize possibilities for range checking, for avoiding dereferencing , for avoiding dangling pointers, and the systematic use of exceptions (via RAII). Partly to achieve that and partly to minimize obscure code as a source of errors, the rules also emphasize simplicity and the hiding of necessary complexity behind well-specified interfaces.\n\nMany of the rules are prescriptive. We are uncomfortable with rules that simply state “don’t do that!” without offering an alternative. One consequence of that is that some rules can be supported only by heuristics, rather than precise and mechanically verifiable checks. Other rules articulate general principles. For these more general rules, more detailed and specific rules provide partial checking.\n\nThese guidelines address the core of C++ and its use. We expect that most large organizations, specific application areas, and even large projects will need further rules, possibly further restrictions, and further library support. For example, hard-real-time programmers typically can’t use free store (dynamic memory) freely and will be restricted in their choice of libraries. We encourage the development of such more specific rules as addenda to these core guidelines. Build your ideal small foundation library and use that, rather than lowering your level of programming to glorified assembly code.\n\nThe rules are designed to allow gradual adoption.\n\nSome rules aim to increase various forms of safety while others aim to reduce the likelihood of accidents, many do both. The guidelines aimed at preventing accidents often ban perfectly legal C++. However, when there are two ways of expressing an idea and one has shown itself a common source of errors and the other has not, we try to guide programmers towards the latter.\n\nThe rules are not intended to be minimal or orthogonal. In particular, general rules can be simple, but unenforceable. Also, it is often hard to understand the implications of a general rule. More specialized rules are often easier to understand and to enforce, but without general rules, they would just be a long list of special cases. We provide rules aimed at helping novices as well as rules supporting expert use. Some rules can be completely enforced, but others are based on heuristics.\n\nThese rules are not meant to be read serially, like a book. You can browse through them using the links. However, their main intended use is to be targets for tools. That is, a tool looks for violations and the tool returns links to violated rules. The rules then provide reasons, examples of potential consequences of the violation, and suggested remedies.\n\nThese guidelines are not intended to be a substitute for a tutorial treatment of C++. If you need a tutorial for some given level of experience, see the references.\n\nThis is not a guide on how to convert old C++ code to more modern code. It is meant to articulate ideas for new code in a concrete fashion. However, see the modernization section for some possible approaches to modernizing/rejuvenating/upgrading. Importantly, the rules support gradual adoption: It is typically infeasible to completely convert a large code base all at once.\n\nThese guidelines are not meant to be complete or exact in every language-technical detail. For the final word on language definition issues, including every exception to general rules and every feature, see the ISO C++ standard.\n\nThe rules are not intended to force you to write in an impoverished subset of C++. They are emphatically not meant to define a, say, Java-like subset of C++. They are not meant to define a single “one true C++” language. We value expressiveness and uncompromised performance.\n\nThe rules are not value-neutral. They are meant to make code simpler and more correct/safer than most existing C++ code, without loss of performance. They are meant to inhibit perfectly valid C++ code that correlates with errors, spurious complexity, and poor performance.\n\nThe rules are not precise to the point where a person (or machine) can follow them without thinking. The enforcement parts try to be that, but we would rather leave a rule or a definition a bit vague and open to interpretation than specify something precisely and wrong. Sometimes, precision comes only with time and experience. Design is not (yet) a form of Math.\n\nThe rules are not perfect. A rule can do harm by prohibiting something that is useful in a given situation. A rule can do harm by failing to prohibit something that enables a serious error in a given situation. A rule can do a lot of harm by being vague, ambiguous, unenforceable, or by enabling every solution to a problem. It is impossible to completely meet the “do no harm” criteria. Instead, our aim is the less ambitious: “Do the most good for most programmers”; if you cannot live with a rule, object to it, ignore it, but don’t water it down until it becomes meaningless. Also, suggest an improvement.\n\nRules with no enforcement are unmanageable for large code bases. Enforcement of all rules is possible only for a small weak set of rules or for a specific user community.\n• But we want lots of rules, and we want rules that everybody can use.\n• But different people have different needs.\n• But people don’t like to read lots of rules.\n\nSo, we need subsetting to meet a variety of needs.\n\nWe want guidelines that help a lot of people, make code more uniform, and strongly encourage people to modernize their code. We want to encourage best practices, rather than leave all to individual choices and management pressures. The ideal is to use all rules; that gives the greatest benefits.\n\nThis adds up to quite a few dilemmas. We try to resolve those using tools. Each rule has an Enforcement section listing ideas for enforcement. Enforcement might be done by code review, by static analysis, by compiler, or by run-time checks. Wherever possible, we prefer “mechanical” checking (humans are slow, inaccurate, and bore easily) and static checking. Run-time checks are suggested only rarely where no alternative exists; we do not want to introduce “distributed bloat”. Where appropriate, we label a rule (in the Enforcement sections) with the name of groups of related rules (called “profiles”). A rule can be part of several profiles, or none. For a start, we have a few profiles corresponding to common needs (desires, ideals):\n• type: No type violations (reinterpreting a as a through casts, unions, or varargs)\n• bounds: No bounds violations (accessing beyond the range of an array)\n• lifetime: No leaks (failing to or multiple ) and no access to invalid objects (dereferencing , using a dangling reference).\n\nThe profiles are intended to be used by tools, but also serve as an aid to the human reader. We do not limit our comment in the Enforcement sections to things we know how to enforce; some comments are mere wishes that might inspire some tool builder.\n\nTools that implement these rules shall respect the following syntax to explicitly suppress a rule:\n\nand optionally with a message (following usual C++11 standard attribute syntax):\n• is a string literal with the anchor name of the item where the Enforcement rule appears (e.g., for C.134 it is “Rh-public”), the name of a profile group-of-rules (“type”, “bounds”, or “lifetime”), or a specific rule in a profile (type.4, or bounds.2). Any text that is not one of those should be rejected.\n\nIn.struct: The structure of this document\n\nEach rule (guideline, suggestion) can have several parts:\n• The rule itself – e.g., no naked\n• A rule reference number – e.g., C.7 (the 7th rule related to classes). Since the major sections are not inherently ordered, we use letters as the first part of a rule reference “number”. We leave gaps in the numbering to minimize “disruption” when we add or remove rules.\n• Reasons (rationales) – because programmers find it hard to follow rules they don’t understand\n• Examples – because rules are hard to understand in the abstract; can be positive or negative\n• Exceptions – we prefer simple general rules. However, many rules apply widely, but not universally, so exceptions must be listed\n• Enforcement – ideas about how the rule might be checked “mechanically”\n• See alsos – references to related rules and/or further discussion (in this document or elsewhere)\n• Notes (comments) – something that needs saying that doesn’t fit the other classifications\n• Discussion – references to more extensive rationale and/or examples placed outside the main lists of rules\n\nSome rules are hard to check mechanically, but they all meet the minimal criteria that an expert programmer can spot many violations without too much trouble. We hope that “mechanical” tools will improve with time to approximate what such an expert programmer notices. Also, we assume that the rules will be refined over time to make them more precise and checkable.\n\nA rule is aimed at being simple, rather than carefully phrased to mention every alternative and special case. Such information is found in the Alternative paragraphs and the Discussion sections. If you don’t understand a rule or disagree with it, please visit its Discussion. If you feel that a discussion is missing or incomplete, enter an Issue explaining your concerns and possibly a corresponding PR.\n• Examples are not intended to be production quality or to cover all tutorial dimensions. For example, many examples are language-technical and use names like , , and .\n• We try to ensure that “good” examples follow the Core Guidelines.\n• Comments are often illustrating rules where they would be unnecessary and/or distracting in “real code.”\n• We assume knowledge of the standard library. For example, we use plain rather than .\n\nThis is not a language manual. It is meant to be helpful, rather than complete, fully accurate on technical details, or a guide to existing code. Recommended information sources can be found in the references.\n\nThese sections are not orthogonal.\n\nEach section (e.g., “P” for “Philosophy”) and each subsection (e.g., “C.hier” for “Class Hierarchies (OOP)”) have an abbreviation for ease of searching and reference. The main section abbreviations are also used in rule numbers (e.g., “C.11” for “Make concrete types regular”).\n\nThe rules in this section are very general.\n• P.6: What cannot be checked at compile time should be checkable at run time\n• P.11: Encapsulate messy constructs, rather than spreading through the code\n• P.12: Use supporting tools as appropriate\n• P.13: Use support libraries as appropriate\n\nPhilosophical rules are generally not mechanically checkable. However, individual rules reflecting these philosophical themes are. Without a philosophical basis, the more concrete/specific/checkable rules lack rationale.\n\nCompilers don’t read comments (or design documents) and neither do many programmers (consistently). What is expressed in code has defined semantics and can (in principle) be checked by compilers and other tools.\n\nThe first declaration of is explicit about returning a and about not modifying the state of the object. The second version leaves the reader guessing and opens more possibilities for uncaught bugs.\n\nThis loop is a restricted form of :\n\nA much clearer expression of intent would be:\n\nA well-designed library expresses intent (what is to be done, rather than just how something is being done) far better than direct use of language features.\n\nA C++ programmer should know the basics of the standard library, and use it where appropriate. Any programmer should know the basics of the foundation libraries of the project being worked on, and use them appropriately. Any programmer using these guidelines should know the guidelines support library, and use it appropriately.\n\nA better approach is to be explicit about the meaning of the double (new speed or delta on old speed?) and the unit used:\n\nWe could have accepted a plain (unit-less) as a delta, but that would have been error-prone. If we wanted both absolute speed and deltas, we would have defined a type.\n• use consistently (check if member functions modify their object; check if functions modify arguments passed by pointer or reference)\n• flag uses of casts (casts neuter the type system)\n\nThis is a set of guidelines for writing ISO Standard C++.\n\nThere are environments where extensions are necessary, e.g., to access system resources. In such cases, localize the use of necessary extensions and control their use with non-core Coding Guidelines. If possible, build interfaces that encapsulate the extensions so they can be turned off or compiled away on systems that do not support those extensions.\n\nExtensions often do not have rigorously defined semantics. Even extensions that are common and implemented by multiple compilers might have slightly different behaviors and edge case behavior as a direct result of not having a rigorous standard definition. With sufficient use of any such extension, expected portability will be impacted.\n\nUsing valid ISO C++ does not guarantee portability (let alone correctness). Avoid dependence on undefined behavior (e.g., undefined order of evaluation) and be aware of constructs with implementation defined meaning (e.g., ).\n\nThere are environments where restrictions on use of standard C++ language or library features are necessary, e.g., to avoid dynamic memory allocation as required by aircraft control software standards. In such cases, control their (dis)use with an extension of these Coding Guidelines customized to the specific environment.\n\nUse an up-to-date C++ compiler (currently C++20 or C++17) with a set of options that do not accept extensions.\n\nUnless the intent of some code is stated (e.g., in names or comments), it is impossible to tell whether the code does what it is supposed to do.\n\nThe intent of “just” looping over the elements of is not expressed here. The implementation detail of an index is exposed (so that it might be misused), and outlives the scope of the loop, which might or might not be intended. The reader cannot know from just this section of code.\n\nNow, there is no explicit mention of the iteration mechanism, and the loop operates on a reference to elements so that accidental modification cannot happen. If modification is desired, say so:\n\nFor more details about for-statements, see ES.71. Sometimes better still, use a named algorithm. This example uses the from the Ranges TS because it directly expresses the intent:\n\nThe last variant makes it clear that we are not interested in the order in which the elements of are handled.\n\nA programmer should be familiar with\n• Whatever foundation libraries are used for the current project(s)\n\nAlternative formulation: Say what should be done, rather than just how it should be done.\n\nSome language constructs express intent better than others.\n\nIf two s are meant to be the coordinates of a 2D point, say so:\n\nLook for common patterns for which there are better alternatives\n• functions with many parameters of built-in types\n\nThere is a huge scope for cleverness and semi-automated program transformation.\n\nIdeally, a program would be completely statically (compile-time) type safe. Unfortunately, that is not possible. Problem areas:\n\nThese areas are sources of serious problems (e.g., crashes and security violations). We try to provide alternative techniques.\n\nWe can ban, restrain, or detect the individual problem categories separately, as required and feasible for individual programs. Always suggest an alternative. For example:\n• casts – minimize their use; templates can help\n• array decay – use (from the GSL)\n• narrowing conversions – minimize their use and use or (from the GSL) where they are necessary\n\nCode clarity and performance. You don’t need to write error handlers for errors caught at compile time.\n\nThis example fails to achieve what it is trying to achieve (because overflow is undefined) and should be replaced with a simple :\n\nOr better still just use the type system and replace with .\n\nAlternative formulation: Don’t postpone to run time what can be done well at compile time.\n• Look for run-time checks for range violations.\n\nP.6: What cannot be checked at compile time should be checkable at run time\n\nLeaving hard-to-detect errors in a program is asking for crashes and bad results.\n\nIdeally, we catch all errors (that are not errors in the programmer’s logic) at either compile time or run time. It is impossible to catch all errors at compile time and often not affordable to catch all remaining errors at run time. However, we should endeavor to write programs that in principle can be checked, given sufficient resources (analysis programs, run-time checks, machine resources, time).\n\nHere, a crucial bit of information (the number of elements) has been so thoroughly “obscured” that static analysis is probably rendered infeasible and dynamic checking can be very difficult when is part of an ABI so that we cannot “instrument” that pointer. We could embed helpful information into the free store, but that requires global changes to a system and maybe to the compiler. What we have here is a design that makes error detection very hard.\n\nWe can of course pass the number of elements along with the pointer:\n\nPassing the number of elements as an argument is better (and far more common) than just passing the pointer and relying on some (unstated) convention for knowing or discovering the number of elements. However (as shown), a simple typo can introduce a serious error. The connection between the two arguments of is conventional, rather than explicit.\n\nAlso, it is implicit that is supposed to its argument (or did the caller make a second mistake?).\n\nThe standard library resource management pointers fail to pass the size when they point to an object:\n\nWe need to pass the pointer and the number of elements as an integral object:\n\nThis design carries the number of elements along as an integral part of an object, so that errors are unlikely and dynamic (run-time) checking is always feasible, if not always affordable.\n\nHow do we transfer both ownership and all information needed for validating use?\n• show how possible checks are avoided by interfaces that pass polymorphic base classes around, when they actually know what they need? Or strings as “free-style” options\n• Flag (pointer, count)-style interfaces (this will flag a lot of examples that can’t be fixed for compatibility reasons)\n\nHere we made a small error in that will lead to corrupted data or a crash. The (pointer, count)-style interface leaves with no realistic way of defending itself against out-of-range errors. If we could check subscripts for out of range access, then the error would not be discovered until was accessed. We could check earlier and improve the code:\n\nNow, can be checked at the point of call (early) rather than later. If all we had was a typo so that we meant to use as the bound, the code could be further simplified (eliminating the possibility of an error):\n\nDon’t repeatedly check the same value. Don’t pass structured data as strings:\n\nThe date is validated twice (by the constructor) and passed as a character string (unstructured data).\n\nExcess checking can be costly. There are cases where checking early is inefficient because you might never need the value, or might only need part of the value that is more easily checked than the whole. Similarly, don’t add validity checks that change the asymptotic behavior of your interface (e.g., don’t add a check to an interface with an average complexity of ).\n\nThe physical law for a jet ( ) is not an invariant because of the possibility for measurement errors.\n• Look at pointers and arrays: Do range-checking early and not repeatedly\n• Look at conversions: Eliminate or mark narrowing conversions\n• Look for unchecked values coming from input\n• Look for structured data (objects of classes with invariants) being converted into strings\n\nEven a slow growth in resources will, over time, exhaust the availability of those resources. This is particularly important for long-running programs, but is an essential piece of responsible programming behavior.\n\nSee also: The resource management section\n\nA leak is colloquially “anything that isn’t cleaned up.” The more important classification is “anything that can no longer be cleaned up.” For example, allocating an object on the heap and then losing the last pointer that points to that allocation. This rule should not be taken as requiring that allocations within long-lived objects must be returned during program shutdown. For example, relying on system guaranteed cleanup such as file closing and memory deallocation upon process shutdown can simplify code. However, relying on abstractions that implicitly clean up can be as simple, and often safer.\n\nEnforcing the lifetime safety profile eliminates leaks. When combined with resource safety provided by RAII, it eliminates the need for “garbage collection” (by generating no garbage). Combine this with enforcement of the type and bounds profiles and you get complete type- and resource-safety, guaranteed by tools.\n• Look at pointers: Classify them into non-owners (the default) and owners. Where feasible, replace owners with standard-library resource handles (as in the example above). Alternatively, mark an owner as such using from the GSL.\n• Look for naked and\n• Look for known resource allocating functions returning raw pointers (such as , , and )\n\nThis is C++.\n\nTime and space that you spend well to achieve a goal (e.g., speed of development, resource safety, or simplification of testing) is not wasted. “Another benefit of striving for efficiency is that the process forces you to understand the problem in more depth.” - Alex Stepanov\n\nYes, this is a caricature, but we have seen every individual mistake in production code, and worse. Note that the layout of guarantees that at least 6 bytes (and most likely more) are wasted. The spurious definition of copy operations disables move semantics so that the return operation is slow (please note that the Return Value Optimization, RVO, is not guaranteed here). The use of and for is redundant; if we really needed a local string, we should use a local . There are several more performance bugs and gratuitous complication.\n\nThis is actually an example from production code. We can see that in our condition we have . This expression will be evaluated on every iteration of the loop, which means that must walk through string every loop to discover its length. While the string contents are changing, it’s assumed that will not affect the length of the string, so it’s better to cache the length outside the loop and not incur that cost each iteration.\n\nAn individual example of waste is rarely significant, and where it is significant, it is typically easily eliminated by an expert. However, waste spread liberally across a code base can easily be significant and experts are not always as available as we would like. The aim of this rule (and the more specific rules that support it) is to eliminate most waste related to the use of C++ before it happens. After that, we can look at waste related to algorithms and requirements, but that is beyond the scope of these guidelines.\n\nMany more specific rules aim at the overall goals of simplicity and elimination of gratuitous waste.\n• Flag an unused return value from a user-defined non-defaulted postfix or function. Prefer using the prefix form instead. (Note: “User-defined non-defaulted” is intended to reduce noise. Review this enforcement if it’s still too noisy in practice.)\n\nIt is easier to reason about constants than about variables. Something immutable cannot change unexpectedly. Sometimes immutability enables better optimization. You can’t have a data race on a constant.\n\nP.11: Encapsulate messy constructs, rather than spreading through the code\n\nMessy code is more likely to hide bugs and harder to write. A good interface is easier and safer to use. Messy, low-level code breeds more such code.\n\nThis is low-level, verbose, and error-prone. For example, we “forgot” to test for memory exhaustion and assign new value to . Instead, we could use :\n\nThe standards library and the GSL are examples of this philosophy. For example, instead of messing with the arrays, unions, cast, tricky lifetime issues, , etc., that are needed to implement key abstractions, such as , , , and , we use the libraries designed and implemented by people with more time and expertise than we usually have. Similarly, we can and should design and implement more specialized libraries, rather than leaving the users (often ourselves) with the challenge of repeatedly getting low-level code well. This is a variant of the subset of superset principle that underlies these guidelines.\n• Look for “messy code” such as complex pointer manipulation and casting outside the implementation of abstractions.\n\nThere are many things that are done better “by machine”. Computers don’t tire or get bored by repetitive tasks. We typically have better things to do than repeatedly do routine tasks.\n\nRun a static analyzer to verify that your code follows the guidelines you want it to follow.\n\nThere are many other kinds of tools, such as source code repositories, build tools, etc., but those are beyond the scope of these guidelines.\n\nBe careful not to become dependent on over-elaborate or over-specialized tool chains. Those can make your otherwise portable code non-portable.\n\nP.13: Use support libraries as appropriate\n\nUsing a well-designed, well-documented, and well-supported library saves time and effort; its quality and documentation are likely to be greater than what you could do if the majority of your time must be spent on an implementation. The cost (time, effort, money, etc.) of a library can be shared over many users. A widely used library is more likely to be kept up-to-date and ported to new systems than an individual application. Knowledge of a widely-used library can save time on other/future projects. So, if a suitable library exists for your application domain, use it.\n\nUnless you are an expert in sorting algorithms and have plenty of time, this is more likely to be correct and to run faster than anything you write for a specific application. You need a reason not to use the standard library (or whatever foundational libraries your application uses) rather than a reason to use it.\n\nIf no well-designed, well-documented, and well-supported library exists for an important domain, maybe you should design and implement it, and then use it.\n\nAn interface is a contract between two parts of a program. Precisely stating what is expected of a supplier of a service and a user of that service is essential. Having good (easy-to-understand, encouraging efficient use, not error-prone, supporting testing, etc.) interfaces is probably the most important single aspect of code organization.\n• I.9: If an interface is a template, document its parameters using concepts\n• I.10: Use exceptions to signal a failure to perform a required task\n• I.11: Never transfer ownership by a raw pointer ( ) or reference ( )\n• I.12: Declare a pointer that must not be null as\n• I.13: Do not pass an array as a single pointer\n• I.23: Keep the number of function arguments low\n• I.24: Avoid adjacent parameters that can be invoked by the same arguments in either order with different meaning\n• I.26: If you want a cross-compiler ABI, use a C-style subset\n• I.27: For stable library ABI, consider the Pimpl idiom\n\nCorrectness. Assumptions not stated in an interface are easily overlooked and hard to test.\n\nControlling the behavior of a function through a global (namespace scope) variable (a call mode) is implicit and potentially confusing. For example:\n\nIt will not be obvious to a caller that the meaning of two calls of might give different results.\n\nSometimes we control the details of a set of operations by an environment variable, e.g., normal vs. verbose output or debug vs. optimized. The use of a non-local control is potentially confusing, but controls only implementation details of otherwise fixed semantics.\n\nReporting through non-local variables (e.g., ) is easily ignored. For example:\n\nWhat if the connection goes down so that no logging output is produced? See I.???.\n\nAlternative: Throw an exception. An exception cannot be ignored.\n\nAlternative formulation: Avoid passing information across an interface through non-local or implicit state. Note that non- member functions pass information to other member functions through their object’s state.\n\nAlternative formulation: An interface should be a function or a set of functions. Functions can be function templates and sets of functions can be classes or class templates.\n• (Simple) A function should not make control-flow decisions based on the values of variables declared at namespace scope.\n• (Simple) A function should not write to variables declared at namespace scope.\n\nNon- global variables hide dependencies and make the dependencies subject to unpredictable changes.\n\nWho else might modify ?\n\nWarning: The initialization of global objects is not totally ordered. If you use a global object initialize it with a constant. Note that it is possible to get undefined initialization order even for objects.\n\nA global object is often better than a singleton.\n\nThe rule against global variables applies to namespace scope variables as well.\n\nAlternative: If you use global (more generally namespace scope) data to avoid copying, consider passing the data as an object by reference to . Another solution is to define the data as the state of some object and the operations as member functions.\n\nWarning: Beware of data races: If one thread can access non-local data (or data passed by reference) while another thread executes the callee, we can have a data race. Every pointer or reference to mutable data is a potential data race.\n\nUsing global pointers or references to access and change non-const, and otherwise non-global, data isn’t a better alternative to non-const global variables since that doesn’t solve the issues of hidden dependencies or potential race conditions.\n\nYou cannot have a race condition on immutable data.\n\nReferences: See the rules for calling functions.\n\nThe rule is “avoid”, not “don’t use.” Of course there will be (rare) exceptions, such as , , and .\n\n(Simple) Report all non- variables declared at namespace scope and global pointers/references to non-const data.\n\nThere are many variants of the singleton idea. That’s part of the problem.\n\nIf you don’t want a global object to change, declare it or .\n\nYou can use the simplest “singleton” (so simple that it is often not considered a singleton) to get initialization on first use, if any:\n\nThis is one of the most effective solutions to problems related to initialization order. In a multi-threaded environment, the initialization of the static object does not introduce a race condition (unless you carelessly access a shared object from within its constructor).\n\nNote that the initialization of a local does not imply a race condition. However, if the destruction of involves an operation that needs to be synchronized we must use a less simple solution. For example:\n\nNow someone must that object in some suitably thread-safe way. That’s error-prone, so we don’t use that technique unless\n• that object needs to be destroyed (e.g., because it releases a resource), and\n• ’s destructor’s code needs to be synchronized.\n\nIf you, as many do, define a singleton as a class for which only one object is created, functions like are not singletons, and this useful technique is not an exception to the no-singleton rule.\n• Look for classes with names that include .\n• Look for classes for which only a single object is created (by counting objects or by examining constructors).\n• If a class X has a public static function that contains a function-local static of the class’ type X and returns a pointer or reference to it, ban that.\n\nTypes are the simplest and best documentation, improve legibility due to their well-defined meaning, and are checked at compile time. Also, precisely typed code is often optimized better.\n\nCallers are unsure what types are allowed and if the data may be mutated as is not specified. Note all pointer types implicitly convert to , so it is easy for callers to provide this value.\n\nThe callee must data to an unverified type to use it. That is error-prone and verbose.\n\nOnly use for passing in data in designs that are indescribable in C++. Consider using a or a pointer to base instead.\n\nAlternative: Often, a template parameter can eliminate the turning it into a or . For generic code these s can be general or concept constrained template parameters.\n\nIt is clear that the caller is describing a rectangle, but it is unclear what parts they relate to. Also, an can carry arbitrary forms of information, including values of many units, so we must guess about the meaning of the four s. Most likely, the first two are an , coordinate pair, but what are the last two?\n\nComments and parameter names can help, but we could be explicit:\n\nObviously, we cannot catch all errors through the static type system (e.g., the fact that a first argument is supposed to be a top-left point is left to convention (naming and comments)).\n\nThe parameter types and their values do not communicate what settings are being specified or what those values mean.\n\nThis design is more explicit, safe and legible:\n\nFor the case of a set of boolean values consider using a flags ; a pattern that expresses a set of boolean values.\n\nIn the following example, it is not clear from the interface what means: Seconds? Milliseconds?\n\nThe function can also be written in such a way that it will accept any time duration unit.\n• (Simple) Report the use of as a parameter or return type.\n• (Simple) Report the use of more than one parameter.\n• (Hard to do well) Look for functions that use too many primitive type arguments.\n\nArguments have meaning that might constrain their proper use in the callee.\n\nHere must be non-negative. The type system cannot (easily and naturally) express that, so we must use other means. For example:\n\nSome preconditions can be expressed as assertions. For example:\n\nIdeally, that should be part of the interface of but that’s not easily done. For now, we place it in the definition (function body).\n\nReferences: is described in GSL.\n\nPrefer a formal specification of requirements, such as . If that is infeasible, use English text in comments, such as // the sequence [p:q) is ordered using < .\n\nMost member functions have as a precondition that some class invariant holds. That invariant is established by a constructor and must be reestablished upon exit by every member function called from outside the class. We don’t need to mention it for each member function.\n\nSee also: The rules for passing pointers. ???\n\nTo make it clear that the condition is a precondition and to enable tool use.\n\nPreconditions can be stated in many ways, including comments, -statements, and . This can make them hard to distinguish from ordinary code, hard to update, hard to manipulate by tools, and might have the wrong semantics (do you always want to abort in debug mode and check nothing in productions runs?).\n\nPreconditions should be part of the interface rather than part of the implementation, but we don’t yet have the language facilities to do that. Once language support becomes available (e.g., see the contract proposal) we will adopt the standard version of preconditions, postconditions, and assertions.\n\ncan also be used to check a condition in the middle of an algorithm.\n\nNo, using is not a good way to sidestep the problem of ensuring that a value is non-negative.\n\n(Not enforceable) Finding the variety of ways preconditions can be asserted is not feasible. Warning about those that can be easily identified ( ) has questionable value in the absence of a language facility.\n\nTo detect misunderstandings about the result and possibly catch erroneous implementations.\n\nHere, we (incautiously) left out the precondition specification, so it is not explicit that height and width must be positive. We also left out the postcondition specification, so it is not obvious that the algorithm ( ) is wrong for areas larger than the largest integer. Overflow can happen. Consider using:\n\nThere was no postcondition stating that the buffer should be cleared and the optimizer eliminated the apparently redundant call:\n\nPostconditions are often informally stated in a comment that states the purpose of a function; can be used to make this more systematic, visible, and checkable.\n\nPostconditions are especially important when they relate to something that is not directly reflected in a returned result, such as a state of a data structure used.\n\nConsider a function that manipulates a , using a to avoid race conditions:\n\nHere, we “forgot” to state that the should be released, so we don’t know if the failure to ensure release of the was a bug or a feature. Stating the postcondition would have made it clear:\n\nThe bug is now obvious (but only to a human reading comments).\n\nBetter still, use RAII to ensure that the postcondition (“the lock must be released”) is enforced in code:\n\nIdeally, postconditions are stated in the interface/declaration so that users can easily see them. Only postconditions related to the users can be stated in the interface. Postconditions related only to internal state belongs in the definition/implementation.\n\n(Not enforceable) This is a philosophical guideline that is infeasible to check directly in the general case. Domain specific checkers (like lock-holding checkers) exist for many toolchains.\n\nTo make it clear that the condition is a postcondition and to enable tool use.\n\nPostconditions can be stated in many ways, including comments, -statements, and . This can make them hard to distinguish from ordinary code, hard to update, hard to manipulate by tools, and might have the wrong semantics.\n\nAlternative: Postconditions of the form “this resource must be released” are best expressed by RAII.\n\nIdeally, that should be part of the interface, but that’s not easily done. For now, we place it in the definition (function body). Once language support becomes available (e.g., see the contract proposal) we will adopt the standard version of preconditions, postconditions, and assertions.\n\n(Not enforceable) Finding the variety of ways postconditions can be asserted is not feasible. Warning about those that can be easily identified ( ) has questionable value in the absence of a language facility.\n\nI.9: If an interface is a template, document its parameters using concepts\n\nMake the interface precisely specified and compile-time checkable in the (not so distant) future.\n\nUse the C++20 style of requirements specification. For example:\n\nSee also: Generic programming and concepts.\n\nWarn if any non-variadic template parameter is not constrained by a concept (in its declaration or mentioned in a clause).\n\nI.10: Use exceptions to signal a failure to perform a required task\n\nIt should not be possible to ignore an error because that could leave the system or a computation in an undefined (or unexpected) state. This is a major source of errors.\n\nWhat is an error?\n\nAn error means that the function cannot achieve its advertised purpose (including establishing postconditions). Calling code that ignores an error could lead to wrong results or undefined systems state. For example, not being able to connect to a remote server is not by itself an error: the server can refuse a connection for all kinds of reasons, so the natural thing is to return a result that the caller should always check. However, if failing to make a connection is considered an error, then a failure should throw an exception.\n\nMany traditional interface functions (e.g., UNIX signal handlers) use error codes (e.g., ) to report what are really status codes, rather than errors. You don’t have a good alternative to using such, so calling these does not violate the rule.\n\nIf you can’t use exceptions (e.g., because your code is full of old-style raw-pointer use or because there are hard-real-time constraints), consider using a style that returns a pair of values:\n\nThis style unfortunately leads to uninitialized variables. Since C++17 the “structured bindings” feature can be used to initialize variables directly from the return value:\n\nWe don’t consider “performance” a valid reason not to use exceptions.\n• Often, explicit error checking and handling consume as much time and space as exception handling.\n• Often, cleaner code yields better performance with exceptions (simplifying the tracing of paths through the program and their optimization).\n• A good rule for performance critical code is to move checking outside the critical part of the code.\n• In the longer term, more regular code gets better optimized.\n\nSee also: I.5 and I.7 for reporting precondition and postcondition violations.\n• (Not enforceable) This is a philosophical guideline that is infeasible to check directly.\n\nI.11: Never transfer ownership by a raw pointer ( ) or reference ( )\n\nIf there is any doubt whether the caller or the callee owns an object, leaks or premature destruction will occur.\n\nWho deletes the returned ? The problem would be harder to spot if returned a reference. Consider returning the result by value (use move semantics if the result is large):\n\nAlternative: Pass ownership using a “smart pointer”, such as (for exclusive ownership) and (for shared ownership). However, that is less elegant and often less efficient than returning the object itself, so use smart pointers only if reference semantics are needed.\n\nAlternative: Sometimes older code can’t be modified because of ABI compatibility requirements or lack of resources. In that case, mark owning pointers using from the guidelines support library:\n\nThis tells analysis tools that is an owner. That is, its value must be d or transferred to another owner, as is done here by the .\n\nis used similarly in the implementation of resource handles.\n\nEvery object passed as a raw pointer (or iterator) is assumed to be owned by the caller, so that its lifetime is handled by the caller. Viewed another way: ownership transferring APIs are relatively rare compared to pointer-passing APIs, so the default is “no ownership transfer.”\n\nSee also: Argument passing, use of smart pointer arguments, and value return.\n• (Simple) Warn on of a raw pointer that is not an . Suggest use of standard-library resource handle or use of .\n• (Simple) Warn on failure to either or explicitly an pointer on every code path.\n• (Simple) Warn if the return value of or a function call with an return value is assigned to a raw pointer or non- reference.\n\nI.12: Declare a pointer that must not be null as\n\nTo help avoid dereferencing errors. To improve performance by avoiding redundant checks for .\n\nBy stating the intent in source, implementers and tools can provide better diagnostics, such as finding some classes of errors through static analysis, and perform optimizations, such as removing branches and null tests.\n\nis defined in the guidelines support library.\n\nThe assumption that the pointer to pointed to a C-style string (a zero-terminated string of characters) was still implicit, and a potential source of confusion and errors. Use in preference to .\n\nNote: is, of course, in disguise.\n• (Simple) ((Foundation)) If a function checks a pointer parameter against before access, on all control-flow paths, then warn it should be declared .\n• (Complex) If a function with pointer return value ensures it is not on all return paths, then warn the return type should be declared .\n\nI.13: Do not pass an array as a single pointer\n\n(pointer, size)-style interfaces are error-prone. Also, a plain pointer (to array) must rely on some convention to allow the callee to determine the size.\n\nWhat if there are fewer than elements in the array pointed to by ? Then, we overwrite some probably unrelated memory. What if there are fewer than elements in the array pointed to by ? Then, we read some probably unrelated memory. Either is undefined behavior and a potentially very nasty bug.\n\nPassing as the argument might be a mistake: the most common convention is to assume but that is nowhere stated. Worse is that the call of compiled at all: there was an implicit conversion from array to pointer (array decay) and then another implicit conversion from to . There is no way that can safely iterate through that array: it has no way of knowing the size of the elements.\n\nAlternative: Use a support class that ensures that the number of elements is correct and prevents dangerous implicit conversions. For example:\n\nThis passes the same amount of information to , but makes the fact that it is supposed to be a range of s explicit. See ???.\n\nUse and to represent C-style, zero-terminated strings. But when doing so, use or from the GSL to prevent range errors.\n• (Simple) ((Bounds)) Warn for any expression that would rely on implicit conversion of an array type to a pointer type. Allow exception for zstring/czstring pointer types.\n• (Simple) ((Bounds)) Warn for any arithmetic operation on an expression of pointer type that results in a value of pointer type. Allow exception for zstring/czstring pointer types.\n\nComplex initialization can lead to undefined order of execution.\n\nSince and are in different translation units the order of calls to and is undefined; one will access an uninitialized . This shows that the order-of-initialization problem for global (namespace scope) objects is not limited to global variables.\n\nOrder of initialization problems become particularly difficult to handle in concurrent code. It is usually best to avoid global (namespace scope) objects altogether.\n• Flag initializers of globals that call non- functions\n\nI.23: Keep the number of function arguments low\n\nHaving many arguments opens opportunities for confusion. Passing lots of arguments is often costly compared to alternatives.\n\nThe two most common reasons why functions have too many parameters are:\n• Missing an abstraction. There is an abstraction missing, so that a compound value is being passed as individual elements instead of as a single object that enforces an invariant. This not only expands the parameter list, but it leads to errors because the component values are no longer protected by an enforced invariant.\n• Violating “one function, one responsibility.” The function is trying to do more than one job and should probably be refactored.\n\nThe standard-library is at the limit of what we can comfortably handle:\n\nNote that this is because of problem 1 above – missing abstraction. Instead of passing a range (abstraction), STL passed iterator pairs (unencapsulated component values).\n\nHere, we have four template arguments and six function arguments. To simplify the most frequent and simplest uses, the comparison argument can be defaulted to :\n\nThis doesn’t reduce the total complexity, but it reduces the surface complexity presented to many users. To really reduce the number of arguments, we need to bundle the arguments into higher-level abstractions:\n\nGrouping arguments into “bundles” is a general technique to reduce the number of arguments and to increase the opportunities for checking.\n\nAlternatively, we could use a standard library concept to define the notion of three types that must be usable for merging:\n\nHere, using an abstraction has safety and robustness benefits, and naturally also reduces the number of parameters.\n\nHow many parameters are too many? Try to use fewer than four (4) parameters. There are functions that are best expressed with four individual parameters, but not many.\n\nAlternative: Use better abstraction: Group arguments into meaningful objects and pass the objects (by value or by reference).\n\nAlternative: Use default arguments or overloads to allow the most common forms of calls to be done with fewer arguments.\n• Warn when a function declares two iterators (including pointers) of the same type instead of a range or a view.\n• (Not enforceable) This is a philosophical guideline that is infeasible to check directly.\n\nI.24: Avoid adjacent parameters that can be invoked by the same arguments in either order with different meaning\n\nAdjacent arguments of the same type are easily swapped by mistake.\n\nThis is a nasty variant of a K&R C-style interface. It is easy to reverse the “to” and “from” arguments.\n\nUse for the “from” argument:\n\nIf the order of the parameters is not important, there is no problem:\n\nDefine a as the parameter type and name the fields for those parameters accordingly:\n\nThis tends to make invocations of this clear to future readers, as the parameters are often filled in by name at the call site.\n\nOnly the interface’s designer can adequately address the source of violations of this guideline.\n\n(Simple) Warn if two consecutive parameters share the same type\n\nWe are still looking for a less-simple enforcement.\n\nAbstract classes that are empty (have no non-static member data) are more likely to be stable than base classes with state.\n\nYou just knew that would turn up somewhere :-)\n\nThis will force every derived class to compute a center – even if that’s non-trivial and the center is never used. Similarly, not every has a , and many s are best represented without an outline defined as a sequence of s. Using an abstract class is better:\n\n(Simple) Warn if a pointer/reference to a class is assigned to a pointer/reference to a base of and the base class contains data members.\n\nI.26: If you want a cross-compiler ABI, use a C-style subset\n\nDifferent compilers implement different binary layouts for classes, exception handling, function names, and other implementation details.\n\nCommon ABIs are emerging on some platforms freeing you from the more draconian restrictions.\n\nIf you use a single compiler, you can use full C++ in interfaces. That might require recompilation after an upgrade to a new compiler version.\n\n(Not enforceable) It is difficult to reliably identify where an interface forms part of an ABI.\n\nI.27: For stable library ABI, consider the Pimpl idiom\n\nBecause private data members participate in class layout and private member functions participate in overload resolution, changes to those implementation details require recompilation of all users of a class that uses them. A non-polymorphic interface class holding a pointer to implementation (Pimpl) can isolate the users of a class from changes in its implementation at the cost of an indirection.\n\nSee GOTW #100 and cppreference for the trade-offs and additional implementation details associated with this idiom.\n\n(Not enforceable) It is difficult to reliably identify where an interface forms part of an ABI.\n\nTo keep code simple and safe. Sometimes, ugly, unsafe, or error-prone techniques are necessary for logical or performance reasons. If so, keep them local, rather than “infecting” interfaces so that larger groups of programmers have to be aware of the subtleties. Implementation complexity should, if at all possible, not leak through interfaces into user code.\n\nConsider a program that, depending on some form of input (e.g., arguments to ), should consume input from a file, from the command line, or from standard input. We might write\n\nThis violated the rule against uninitialized variables, the rule against ignoring ownership, and the rule against magic constants. In particular, someone has to remember to somewhere write\n\nWe could handle this particular example by using with a special deleter that does nothing for , but that’s complicated for novices (who can easily encounter this problem) and the example is an example of a more general problem where a property that we would like to consider static (here, ownership) needs infrequently be addressed at run time. The common, most frequent, and safest examples can be handled statically, so we don’t want to add cost and complexity to those. But we must also cope with the uncommon, less-safe, and necessarily more expensive cases. Such examples are discussed in [Str15].\n\nNow, the dynamic nature of ownership has been encapsulated. Presumably, a bit of checking for potential errors would be added in real code.\n• Hard, it is hard to decide what rule-breaking code is essential\n\nA function specifies an action or a computation that takes the system from one consistent state to the next. It is the fundamental building block of programs.\n\nIt should be possible to name a function meaningfully, to specify the requirements of its argument, and clearly state the relationship between the arguments and the result. An implementation is not a specification. Try to think about what a function does as well as about how it does it. Functions are the most critical part in most interfaces, so see the interface rules.\n• F.4: If a function might have to be evaluated at compile time, declare it\n• F.5: If a function is very small and time-critical, declare it inline\n• F.6: If your function must not throw, declare it\n• F.7: For general use, take or arguments rather than smart pointers\n• F.10: If an operation can be reused, give it a name\n• F.11: Use an unnamed lambda if you need a simple function object in one place only\n• F.16: For “in” parameters, pass cheaply-copied types by value and others by reference to\n• F.17: For “in-out” parameters, pass by reference to non-\n• F.18: For “will-move-from” parameters, pass by and the parameter\n• F.19: For “forward” parameters, pass by and only the parameter\n• F.60: Prefer over when “no argument” is a valid option\n• F.22: Use or to designate a single object\n• F.23: Use a to indicate that “null” is not a valid value\n• F.24: Use a or a to designate a half-open sequence\n• F.25: Use a or a to designate a C-style string\n• F.26: Use a to transfer ownership where a pointer is needed\n• F.42: Return a to indicate a position (only)\n• F.43: Never (directly or indirectly) return a pointer or a reference to a local object\n• F.44: Return a when copy is undesirable and “returning no object” isn’t needed\n• F.46: is the return type for\n• F.50: Use a lambda when a function won’t do (to capture local variables, or to write a local function)\n• F.51: Where there is a choice, prefer default arguments over overloading\n• F.52: Prefer capturing by reference in lambdas that will be used locally, including passed to algorithms\n• F.53: Avoid capturing by reference in lambdas that will be used non-locally, including returned, stored on the heap, or passed to another thread\n• F.54: When writing a lambda that captures or any class data member, don’t use default capture\n\nFunctions have strong similarities to lambdas and function objects.\n\nSee also: C.lambdas: Function objects and lambdas\n\nA function definition is a function declaration that also specifies the function’s implementation, the function body.\n\nFactoring out common code makes code more readable, more likely to be reused, and limit errors from complex code. If something is a well-specified action, separate it out from its surrounding code and give it a name.\n\nAlmost everything is wrong with . It reads, it writes (to a fixed ), it writes error messages (to a fixed ), it handles only s. There is nothing to reuse, logically separate operations are intermingled and local variables are in scope after the end of their logical use. For a tiny example, this looks OK, but if the input operation, the output operation, and the error handling had been more complicated the tangled mess could become hard to understand.\n\nIf you write a non-trivial lambda that potentially can be used in more than one place, give it a name by assigning it to a (usually non-local) variable.\n\nNaming that lambda breaks up the expression into its logical parts and provides a strong hint to the meaning of the lambda.\n\nThe shortest code is not always the best for performance or maintainability.\n\nLoop bodies, including lambdas used as loop bodies, rarely need to be named. However, large loop bodies (e.g., dozens of lines or dozens of pages) can be a problem. The rule Keep functions short and simple implies “Keep loop bodies short.” Similarly, lambdas used as callback arguments are sometimes non-trivial, yet unlikely to be reusable.\n• See Keep functions short and simple\n• Flag identical and very similar lambdas used in different places.\n\nA function that performs a single operation is simpler to understand, test, and reuse.\n\nThis is a monolith that is tied to a specific input and will never find another (different) use. Instead, break functions up into suitable logical parts and parameterize:\n\nThese can now be combined where needed:\n\nIf there was a need, we could further templatize and on the data type, the I/O mechanism, the response to errors, etc. Example:\n• Consider functions with more than one “out” parameter suspicious. Use return values instead, including for multiple return values.\n• Consider “large” functions that don’t fit on one editor screen suspicious. Consider factoring such a function into smaller well-named suboperations.\n• Consider functions with 7 or more parameters suspicious.\n\nLarge functions are hard to read, more likely to contain complex code, and more likely to have variables in larger than minimal scopes. Functions with complex control structures are more likely to be long and more likely to hide logical errors\n\nThis is too complex. How would you know if all possible alternatives have been correctly handled? Yes, it breaks other rules also.\n\n“It doesn’t fit on a screen” is often a good practical definition of “far too large.” One-to-five-line functions should be considered normal.\n\nBreak large functions up into smaller cohesive and named functions. Small simple functions are easily inlined where the cost of a function call is significant.\n• Flag functions that do not “fit on a screen.” How big is a screen? Try 60 lines by 140 characters; that’s roughly the maximum that’s comfortable for a book page.\n• Flag functions that are too complex. How complex is too complex? You could use cyclomatic complexity. Try “more than 10 logical paths through.” Count a simple switch as one path.\n\nF.4: If a function might have to be evaluated at compile time, declare it\n\nis needed to tell the compiler to allow compile-time evaluation.\n\nThis is C++14. For C++11, use a recursive formulation of .\n\ndoes not guarantee compile-time evaluation; it just guarantees that the function can be evaluated at compile time for constant expression arguments if the programmer requires it or the compiler decides to do so to optimize.\n\nDon’t try to make all functions . Most computation is best done at run time.\n\nAny API that might eventually depend on high-level run-time configuration or business logic should not be made . Such customization can not be evaluated by the compiler, and any functions that depended upon that API would have to be refactored or drop .\n\nImpossible and unnecessary. The compiler gives an error if a non- function is called where a constant is required.\n\nF.5: If a function is very small and time-critical, declare it\n\nSome optimizers are good at inlining without hints from the programmer, but don’t rely on it. Measure! Over the last 40 years or so, we have been promised compilers that can inline better than humans without hints from humans. We are still waiting. Specifying inline (explicitly, or implicitly when writing member functions inside a class definition) encourages the compiler to do a better job.\n\nDo not put an function in what is meant to be a stable interface unless you are certain that it will not change. An inline function is part of the ABI.\n\nFunction templates (including member functions of class templates and member function templates ) are normally defined in headers and therefore inline.\n\nConsider making functions out of line if they are more than three statements and can be declared out of line (such as class member functions).\n\nF.6: If your function must not throw, declare it\n\nIf an exception is not supposed to be thrown, the program cannot be assumed to cope with the error and should be terminated as soon as possible. Declaring a function helps optimizers by reducing the number of alternative execution paths. It also speeds up the exit after failure.\n\nPut on every function written completely in C or in any other language without exceptions. The C++ Standard Library does that implicitly for all functions in the C Standard Library.\n\nfunctions can throw when evaluated at run time, so you might need conditional for some of those.\n\nYou can use even on functions that can throw:\n\nIf runs out of memory, the program crashes. Unless the program is crafted to survive memory exhaustion, that might be just the right thing to do; might generate suitable error log information (but after memory runs out it is hard to do anything clever).\n\nYou must be aware of the execution environment that your code is running when deciding whether to tag a function , especially because of the issue of throwing and allocation. Code that is intended to be perfectly general (like the standard library and other utility code of that sort) needs to support environments where a exception could be handled meaningfully. However, most programs and execution environments cannot meaningfully handle a failure to allocate, and aborting the program is the cleanest and simplest response to an allocation failure in those cases. If you know that your application code cannot respond to an allocation failure, it could be appropriate to add even on functions that allocate.\n\nPut another way: In most programs, most functions can throw (e.g., because they use , call functions that do, or use library functions that reports failure by throwing), so don’t just sprinkle all over the place without considering whether the possible exceptions can be handled.\n\nis most useful (and most clearly correct) for frequently used, low-level functions.\n\nDestructors, functions, move operations, and default constructors should never throw. See also C.44.\n• Flag functions that are not , yet cannot throw.\n\nF.7: For general use, take or arguments rather than smart pointers\n\nPassing a smart pointer transfers or shares ownership and should only be used when ownership semantics are intended. A function that does not manipulate lifetime should take raw pointers or references instead.\n\nPassing by smart pointer restricts the use of a function to callers that use smart pointers. A function that needs a should be able to accept any object, not just ones whose lifetimes are managed by a particular kind of smart pointer.\n\nWe can catch many common cases of dangling pointers statically (see lifetime safety profile). Function arguments naturally live for the lifetime of the function call, and so have fewer lifetime problems.\n• (Simple) Warn if a function takes a parameter of a smart pointer type (that overloads or ) that is copyable but the function only calls any of: , or . Suggest using a or instead.\n• Flag a parameter of a smart pointer type (a type that overloads or ) that is copyable/movable but never copied/moved from in the function body, and that is never modified, and that is not passed along to another function that could do so. That means the ownership semantics are not used. Suggest using a or instead.\n• Prefer over when “no argument” is a valid option\n\nPure functions are easier to reason about, sometimes easier to optimize (and even parallelize), and sometimes can be memoized.\n\nAllowing parameters to be unnamed was introduced in the early 1980s to address this problem.\n\nIf parameters are conditionally unused, declare them with the attribute. For example:\n\nF.10: If an operation can be reused, give it a name\n\nThere is a useful function lurking here (case insensitive string comparison), as there often is when lambda arguments get large.\n\nOr maybe (if you prefer to avoid the implicit name binding to n):\n• Lambdas logically used only locally, such as an argument to and similar control flow algorithms.\n\nF.11: Use an unnamed lambda if you need a simple function object in one place only\n\nThat makes the code concise and gives better locality than alternatives.\n\nNaming a lambda can be useful for clarity even if it is used only once.\n• Look for identical and near identical lambdas (to be replaced with named functions or named lambdas).\n\nThere are a variety of ways to pass parameters to a function and to return values.\n\nUsing “unusual and clever” techniques causes surprises, slows understanding by other programmers, and encourages bugs. If you really feel the need for an optimization beyond the common techniques, measure to ensure that it really is an improvement, and document/comment because the improvement might not be portable.\n\nThe following tables summarize the advice in the following Guidelines, F.16-21.\n\nUse the advanced techniques only after demonstrating need, and document that need in a comment.\n\nFor passing sequences of characters see String.\n\nTo express shared ownership using types, rather than following guidelines F.16-21, follow R.34, R.35, and R.36.\n\nF.16: For “in” parameters, pass cheaply-copied types by value and others by reference to\n\nBoth let the caller know that a function will not modify the argument, and both allow initialization by rvalues.\n\nWhat is “cheap to copy” depends on the machine architecture, but two or three words (doubles, pointers, references) are usually best passed by value. When copying is cheap, nothing beats the simplicity and safety of copying, and for small objects (up to two or three words) it is also faster than passing by reference because it does not require an extra indirection to access from the function.\n\nFor advanced uses (only), where you really need to optimize for rvalues passed to “input-only” parameters:\n• If the function is going to unconditionally move from the argument, take it by . See F.18.\n• If the function is going to keep a locally modifiable copy of the argument only for its own local use, taking it by value is fine\n• If the function is going to keep a copy of the argument to pass to another destination (to another function, or store in a non-local location), in addition to passing by (for lvalues), add an overload that passes the parameter by (for rvalues) and in the body s it to its destination. Essentially this overloads a “will-move-from”; see F.18.\n• In special cases, such as multiple “input + copy” parameters, consider using perfect forwarding. See F.19.\n\nAvoid “esoteric techniques” such as passing arguments as “for efficiency”. Most rumors about performance advantages from passing by are false or brittle (but see F.18 and F.19).\n\nA reference can be assumed to refer to a valid object (language rule). There is no (legitimate) “null reference.” If you need the notion of an optional value, use a pointer, , or a special value used to denote “no value.”\n• (Simple) ((Foundation)) Warn when a parameter being passed by value has a size greater than . Suggest using a reference to instead.\n• (Simple) ((Foundation)) Warn when a parameter passed by reference to has a size less or equal than . Suggest passing by value instead.\n• (Simple) ((Foundation)) Warn when a parameter passed by reference to is d.\n\nTo express shared ownership using types, follow R.34 or R.36, depending on whether or not the function unconditionally takes a reference to the argument.\n\nF.17: For “in-out” parameters, pass by reference to non-\n\nThis makes it clear to callers that the object is assumed to be modified.\n\nSome user-defined and standard library types, such as or the iterators are cheap to copy and may be passed by value, while doing so has mutable (in-out) reference semantics:\n\nA argument can pass information into a function as well as out of it. Thus could be an in-out-parameter. That can in itself be a problem and a source of errors:\n\nHere, the writer of is supplying a buffer for to fill, but simply replaces it (at a somewhat higher cost than a simple copy of the characters). A bad logic error can happen if the writer of incorrectly assumes the size of the .\n• (Moderate) ((Foundation)) Warn about functions regarding reference to non- parameters that do not write to them.\n• (Simple) ((Foundation)) Warn when a non- parameter being passed by reference is d.\n\nF.18: For “will-move-from” parameters, pass by and the parameter\n\nIt’s efficient and eliminates bugs at the call site: binds to rvalues, which requires an explicit at the call site if passing an lvalue.\n\nNote that the makes it possible for to leave in a moved-from state. That could be dangerous.\n\nUnique owner types that are move-only and cheap-to-move, such as , can also be passed by value which is simpler to write and achieves the same effect. Passing by value does generate one extra (cheap) move operation, but prefer simplicity and clarity first.\n\nIf the “will-move-from” parameter is a follow R.34 and pass the by value.\n• Flag all parameters (where is not a template type parameter name) where the function body uses them without .\n\nF.19: For “forward” parameters, pass by and only the parameter\n\nIf the object is to be passed onward to other code and not directly used by this function, we want to make this function agnostic to the argument -ness and rvalue-ness.\n\nIn that case, and only that case, make the parameter where is a template type parameter – it both ignores and preserves -ness and rvalue-ness. Therefore any code that uses a is implicitly declaring that it itself doesn’t care about the variable’s -ness and rvalue-ness (because it is ignored), but that intends to pass the value onward to other code that does care about -ness and rvalue-ness (because it is preserved). When used as a parameter is safe because any temporary objects passed from the caller will live for the duration of the function call. A parameter of type should essentially always be passed onward via in the body of the function.\n\nUsually you forward the entire parameter (or parameter pack, using ) exactly once on every static control flow path:\n\nSometimes you may forward a composite parameter piecewise, each subobject once on every static control flow path:\n• Flag a function that takes a parameter (where is a template type parameter name) and does anything with it other than ing it exactly once on every static path, or ing it more than once but qualified with a different data member exactly once on every static path.\n\nA return value is self-documenting, whereas a could be either in-out or out-only and is liable to be misused.\n\nThis includes large objects like standard containers that use implicit move operations for performance and to avoid explicit memory management.\n\nIf you have multiple values to return, use a tuple or similar multi-member type.\n\nA of many (individually cheap-to-move) elements might be in aggregate expensive to move.\n• For non-concrete types, such as types in an inheritance hierarchy, return the object by or .\n• If a type is expensive to move (e.g., ), consider allocating it on the free store and return a handle (e.g., ), or passing it in a reference to non- target object to fill (to be used as an out-parameter).\n• To reuse an object that carries capacity (e.g., , ) across multiple calls to the function in an inner loop: treat it as an in/out parameter and pass by reference.\n\nAssuming that has move operations (possibly by keeping its elements in a ):\n\nThe return value optimization doesn’t handle the assignment case, but the move assignment does.\n• Flag reference to non- parameters that are not read before being written to and are a type that could be cheaply returned; they should be “out” return values.\n\nA return value is self-documenting as an “output-only” value. Note that C++ does have multiple return values, by convention of using tuple-like types ( , , , etc.), possibly with the extra convenience of structured bindings (C++17) at the call site. Prefer using a named if possible. Otherwise, a is useful in variadic templates.\n\nC++98’s standard library used this style in places, by returning in some functions. For example, given a , consider:\n\nWith C++17 we are able to use “structured bindings” to give each member a name:\n\nA with meaningful names is more common in modern C++. See for example , , and others.\n\nSometimes, we need to pass an object to a function to manipulate its state. In such cases, passing the object by reference is usually the right technique. Explicitly passing an in-out parameter back out again as a return value is often not necessary. For example:\n\nHere, both and are used as in-out parameters. We pass by (non- ) reference to be able to manipulate its state. We pass to avoid repeated allocations. By reusing (passed by reference), we allocate new memory only when we need to expand ’s capacity. This technique is sometimes called the “caller-allocated out” pattern and is particularly useful for types, such as and , that needs to do free store allocations.\n\nTo compare, if we passed out all values as return values, we would write something like this:\n\nWe consider that significantly less elegant with significantly less performance.\n\nFor a truly strict reading of this rule (F.21), the exception isn’t really an exception because it relies on in-out parameters, rather than the plain out parameters mentioned in the rule. However, we prefer to be explicit, rather than subtle.\n\nIn most cases, it is useful to return a specific, user-defined type. For example:\n\nThe overly generic and should be used only when the value returned represents independent entities rather than an abstraction.\n\nAnother option is to use or , rather than or . When used appropriately these types convey more information about what the members mean than or do.\n\nWhen the object to be returned is initialized from local variables that are expensive to copy, explicit may be helpful to avoid copying:\n\nNote this is different from the anti-pattern from ES.56\n• Output parameters should be replaced by return values. An output parameter is one that the function writes to, invokes a non- member function, or passes on as a non- .\n• or return types should be replaced by , if possible. In variadic templates, is often unavoidable.\n\nF.60: Prefer over when “no argument” is a valid option\n\nA pointer ( ) can be a and a reference ( ) cannot, there is no valid “null reference”. Sometimes having as an alternative to indicated “no object” is useful, but if it is not, a reference is notationally simpler and might yield better code.\n\nIt is possible, but not valid C++ to construct a reference that is essentially a (e.g., ). That error is very uncommon.\n\nIf you prefer the pointer notation ( and/or vs. ), provides the same guarantee as .\n\nF.22: Use or to designate a single object\n\nReadability: it makes the meaning of a plain pointer clear. Enables significant tool support.\n\nIn traditional C and C++ code, plain is used for many weakly-related purposes, such as:\n• Identify a (single) object (not to be deleted by this function)\n• Point to an object allocated on the free store (and delete it later)\n• Identify an array with a length specified separately\n\nThis makes it hard to understand what the code does and is supposed to do. It complicates checking and tool support.\n\nAlso: Assume that a obtained from a smart pointer to (e.g., ) points to a single element.\n\nSee also: Do not pass an array as a single pointer\n• (Simple) ((Bounds)) Warn for any arithmetic operation on an expression of pointer type that results in a value of pointer type.\n\nF.23: Use a to indicate that “null” is not a valid value\n\nClarity. A function with a parameter makes it clear that the caller of the function is responsible for any checks that might be necessary. Similarly, a function with a return value of makes it clear that the caller of the function does not need to check for .\n\nmakes it obvious to a reader (human or machine) that a test for is not necessary before dereference. Additionally, when debugging, and can be instrumented to check for correctness.\n\nWhen I call should I check if is first? Should the implementation of check if is ?\n\nA is assumed not to be the ; a might be the ; both can be represented in memory as a (so no run-time overhead is implied).\n\nis not just for built-in pointers. It works for , , and other pointer-like types.\n• (Simple) Warn if a raw pointer is dereferenced without being tested against (or equivalent) within a function, suggest it is declared instead.\n• (Simple) Error if a raw pointer is sometimes dereferenced after first being tested against (or equivalent) within the function and sometimes is not.\n• (Simple) Warn if a pointer is tested against within a function.\n\nF.24: Use a or a to designate a half-open sequence\n\nRanges are extremely common in C++ code. Typically, they are implicit and their correct use is very hard to ensure. In particular, given a pair of arguments designating an array , it is in general impossible to know if there really are elements to access following . and are simple helper classes designating a range and a range starting with and ending with the first element for which a predicate is true, respectively.\n\nA represents a range of elements, but how do we manipulate elements of that range?\n\nA object does not own its elements and is so small that it can be passed by value.\n\nPassing a object as an argument is exactly as efficient as passing a pair of pointer arguments or passing a pointer and an integer count.\n\n(Complex) Warn where accesses to pointer parameters are bounded by other parameters that are integral types and suggest they could use instead.\n\nF.25: Use a or a to designate a C-style string\n\nC-style strings are ubiquitous. They are defined by convention: zero-terminated arrays of characters. We must distinguish C-style strings from a pointer to a single character or an old-fashioned pointer to an array of characters.\n\nIf you don’t need null termination, use .\n\nWhen I call should I check if is first? Should the implementation of check if is ?\n\nF.26: Use a to transfer ownership where a pointer is needed\n\nUsing is the cheapest way to pass a pointer safely.\n\nSee also: C.50 regarding when to return a from a factory.\n\nYou need to pass a pointer rather than an object if what you are transferring is an object from a class hierarchy that is to be used through an interface (base class).\n\n(Simple) Warn if a function returns a locally allocated raw pointer. Suggest using either or instead.\n\nUsing is the standard way to represent shared ownership. That is, the last owner deletes the object.\n\nPrefer a over a if there is never more than one owner at a time. is for shared ownership.\n\nNote that pervasive use of has a cost (atomic operations on the ’s reference count have a measurable aggregate cost).\n\nHave a single object own the shared object (e.g. a scoped object) and destroy that (preferably implicitly) when all users have completed.\n\n(Not enforceable) This is a too complex pattern to reliably detect.\n\nF.42: Return a to indicate a position (only)\n\nThat’s what pointers are good for. Returning a to transfer ownership is a misuse.\n\nIf it isn’t the , the pointer returned by indicates a holding . Importantly, that does not imply a transfer of ownership of the pointed-to object to the caller.\n\nPositions can also be transferred by iterators, indices, and references. A reference is often a superior alternative to a pointer if there is no need to use or if the object referred to should not change.\n\nDo not return a pointer to something that is not in the caller’s scope; see F.43.\n\nSee also: discussion of dangling pointer prevention\n• Flag , , etc. applied to a plain . Only owners should be deleted.\n• Flag , , etc. assigned to a plain . Only owners should be responsible for deletion.\n\nF.43: Never (directly or indirectly) return a pointer or a reference to a local object\n\nTo avoid the crashes and data corruption that can result from the use of such a dangling pointer.\n\nAfter the return from a function its local objects no longer exist:\n\nHere on one popular implementation I got the output:\n\nI expected that because the call of reuses the stack space abandoned by the call of so refers to the space now occupied by .\n• Imagine what would happen if and were of different types.\n• Imagine what would happen if or was a type with an invariant.\n• Imagine what would happen if more that dangling pointer was passed around among a larger set of functions.\n• Imagine what a cracker could do with that dangling pointer.\n\nFortunately, most (all?) modern compilers catch and warn against this simple case.\n\nThis applies to references as well:\n\nThis applies only to non- local variables. All variables are (as their name indicates) statically allocated, so that pointers to them cannot dangle.\n\nNot all examples of leaking a pointer to a local variable are that obvious:\n\nHere I managed to read the location abandoned by the call of . The pointer stored in could be used much later and cause trouble in unpredictable ways.\n\nThe address of a local variable can be “returned”/leaked by a return statement, by a out-parameter, as a member of a returned object, as an element of a returned array, and more.\n\nSimilar examples can be constructed “leaking” a pointer from an inner scope to an outer one; such examples are handled equivalently to leaks of pointers out of a function.\n\nA slightly different variant of the problem is placing pointers in a container that outlives the objects pointed to.\n\nSee also: Another way of getting dangling pointers is pointer invalidation. It can be detected/prevented with similar techniques.\n• Compilers tend to catch return of reference to locals and could in many cases catch return of pointers to locals.\n• Static analysis can catch many common patterns of the use of pointers indicating positions (thus eliminating dangling pointers)\n\nF.44: Return a when copy is undesirable and “returning no object” isn’t needed\n\nThe language guarantees that a refers to an object, so that testing for isn’t necessary.\n\nSee also: The return of a reference must not imply transfer of ownership: discussion of dangling pointer prevention and discussion of ownership.\n\nFlag functions where no expression could yield\n\nIt’s asking to return a reference to a destroyed temporary object. A is a magnet for temporary objects.\n\nA returned rvalue reference goes out of scope at the end of the full expression to which it is returned:\n\nThis kind of use is a frequent source of bugs, often incorrectly reported as a compiler bug. An implementer of a function should avoid setting such traps for users.\n\nThe lifetime safety profile will (when completely implemented) catch such problems.\n\nReturning an rvalue reference is fine when the reference to the temporary is being passed “downward” to a callee; then, the temporary is guaranteed to outlive the function call (see F.18 and F.19). However, it’s not fine when passing such a reference “upward” to a larger caller scope. For passthrough functions that pass in parameters (by ordinary reference or by perfect forwarding) and want to return values, use simple return type deduction (not ).\n\nAssume that returns by value:\n\nand do return , but they are just casts – used by convention only in expression contexts where a reference to a temporary object is passed along within the same expression before the temporary is destroyed. We don’t know of any other good examples of returning .\n\nFlag any use of as a return type, except in and .\n\nF.46: is the return type for\n\nIt’s a language rule, but violated through “language extensions” so often that it is worth mentioning. Declaring (the one global of a program) limits portability.\n\nWe mention this only because of the persistence of this error in the community. Note that despite its non-void return type, the main function does not require an explicit return statement.\n• The compiler should do it\n• If the compiler doesn’t do it, let tools flag it\n\nThe convention for operator overloads (especially on concrete types) is for to perform the assignment and then return (non- ) . This ensures consistency with standard-library types and follows the principle of “do as the ints do.”\n\nHistorically there was some guidance to make the assignment operator return . This was primarily to avoid code of the form – such code is not common enough to warrant violating consistency with standard types.\n\nThis should be enforced by tooling by checking the return type (and return value) of any assignment operator.\n\nReturning a local variable implicitly moves it anyway. An explicit is always a pessimization, because it prevents Return Value Optimization (RVO), which can eliminate the move completely.\n\nThis should be enforced by tooling by checking the return expression .\n\nIt is not recommended to return a value. Such older advice is now obsolete; it does not add value, and it interferes with move semantics.\n\nThe argument for adding to a return value is that it prevents (very rare) accidental access to a temporary. The argument against is that it prevents (very frequent) use of move semantics.\n\nSee also: F.20, the general item about “out” output values\n• Flag returning a value. To fix: Remove to return a non- value instead.\n\nF.50: Use a lambda when a function won’t do (to capture local variables, or to write a local function)\n\nFunctions can’t capture local variables or be defined at local scope; if you need those things, prefer a lambda where possible, and a handwritten function object where not. On the other hand, lambdas and function objects don’t overload; if you need to overload, prefer a function (the workarounds to make lambdas overload are ornate). If either will work, prefer writing a function; use the simplest tool necessary.\n\nGeneric lambdas offer a concise way to write function templates and so can be useful even when a normal function template would do equally well with a little more syntax. This advantage will probably disappear in the future once all functions gain the ability to have Concept parameters.\n• Warn on use of a named non-generic lambda (e.g., ) that captures nothing and appears at global scope. Write an ordinary function instead.\n\nF.51: Where there is a choice, prefer default arguments over overloading\n\nDefault arguments simply provide alternative interfaces to a single implementation. There is no guarantee that a set of overloaded functions all implement the same semantics. The use of default arguments can avoid code replication.\n\nThere is a choice between using default argument and overloading when the alternatives are from a set of arguments of the same types. For example:\n\nThere is not a choice when a set of functions are used to do a semantically equivalent operation to a set of types. For example:\n• Warn on an overload set where the overloads have a common prefix of parameters (e.g., , , ). (Note: Review this enforcement if it’s too noisy in practice.)\n\nF.52: Prefer capturing by reference in lambdas that will be used locally, including passed to algorithms\n\nFor efficiency and correctness, you nearly always want to capture by reference when using the lambda locally. This includes when writing or calling parallel algorithms that are local because they join before returning.\n\nThe efficiency consideration is that most types are cheaper to pass by reference than by value.\n\nThe correctness consideration is that many calls want to perform side effects on the original object at the call site (see example below). Passing by value prevents this.\n\nUnfortunately, there is no simple way to capture by reference to to get the efficiency for a local call but also prevent side effects.\n\nHere, a large object (a network message) is passed to an iterative algorithm, and it is not efficient or correct to copy the message (which might not be copyable):\n\nThis is a simple three-stage parallel pipeline. Each object encapsulates a worker thread and a queue, has a function to enqueue work, and in its destructor automatically blocks waiting for the queue to empty before ending the thread.\n\nFlag a lambda that captures by reference, but is used other than locally within the function scope or passed to a function by reference. (Note: This rule is an approximation, but does flag passing by pointer as those are more likely to be stored by the callee, writing to a heap location accessed via a parameter, returning the lambda, etc. The Lifetime rules will also provide general rules that flag escaping pointers and references including via lambdas.)\n\nF.53: Avoid capturing by reference in lambdas that will be used non-locally, including returned, stored on the heap, or passed to another thread\n\nPointers and references to locals shouldn’t outlive their scope. Lambdas that capture by reference are just another place to store a reference to a local object, and shouldn’t do so if they (or a copy) outlive the scope.\n\nIf a non-local pointer must be captured, consider using ; this handles both lifetime and synchronization.\n\nIf the pointer must be captured, consider using capture, which creates a copy of the entire object.\n• (Simple) Warn when capture-list contains a reference to a locally declared variable\n• (Complex) Flag when capture-list contains a reference to a locally declared variable and the lambda is passed to a non- and non-local context\n\nF.54: When writing a lambda that captures or any class data member, don’t use default capture\n\nIt’s confusing. Writing in a member function appears to capture by value, but actually captures data members by reference because it actually captures the invisible pointer by value. If you meant to do that, write explicitly.\n\nIf you intend to capture a copy of all class data members, consider C++17 .\n• Flag any lambda capture-list that specifies a capture-default of and also captures (whether explicitly or via the default capture and a use of in the body)\n\nReading from a assumes that the correct type was actually passed. Passing to varargs assumes the correct type will be read. This is fragile because it cannot generally be enforced to be safe in the language and so relies on programmer discipline to get it right.\n\nDeclaring a parameter is sometimes useful for techniques that don’t involve actual argument passing, notably to declare “take-anything” functions so as to disable “everything else” in an overload set or express a catchall case in a template metaprogram.\n• Issue a diagnostic for using , , or .\n• Issue a diagnostic for passing an argument to a vararg parameter of a function that does not offer an overload for a more specific type in the position of the vararg. To fix: Use a different function, or .\n\nShallow nesting of conditions makes the code easier to follow. It also makes the intent clearer. Strive to place the essential code at outermost scope, unless this obscures intent.\n\nUse a guard-clause to take care of exceptional cases and return early.\n\nA class is a user-defined type, for which a programmer can define the representation, operations, and interfaces. Class hierarchies are used to organize related classes into hierarchical structures.\n• C.2: Use if the class has an invariant; use if the data members can vary independently\n• C.3: Represent the distinction between an interface and an implementation using a class\n• C.4: Make a function a member only if it needs direct access to the representation of a class\n• C.5: Place helper functions in the same namespace as the class they support\n• C.7: Don’t define a class or enum and declare a variable of its type in the same statement\n• C.8: Use rather than if any member is non-public\n\nEase of comprehension. If data is related (for fundamental reasons), that fact should be reflected in code.\n\nA simple class without virtual functions implies no space or time overhead.\n\nFrom a language perspective and differ only in the default visibility of their members.\n\nProbably impossible. Maybe a heuristic looking for data items used together is possible.\n\nC.2: Use if the class has an invariant; use if the data members can vary independently\n\nReadability. Ease of comprehension. The use of alerts the programmer to the need for an invariant. This is a useful convention.\n\nAn invariant is a logical condition for the members of an object that a constructor must establish for the public member functions to assume. After the invariant is established (typically by a constructor) every member function can be called for the object. An invariant can be stated informally (e.g., in a comment) or more formally using .\n\nIf all data members can vary independently of each other, no invariant is possible.\n\nIf a class has any data, a user cannot completely initialize an object without the use of a constructor. Hence, the class definer will provide a constructor and must specify its meaning. This effectively means the definer need to define an invariant.\n• Prefer to place the interface first in a class\n\nLook for s with all data private and es with public members.\n\nC.3: Represent the distinction between an interface and an implementation using a class\n\nAn explicit distinction between interface and implementation improves readability and simplifies maintenance.\n\nFor example, we can now change the representation of a without affecting its users (recompilation is likely, though).\n\nUsing a class in this way to represent the distinction between interface and implementation is of course not the only way. For example, we can use a set of declarations of freestanding functions in a namespace, an abstract base class, or a function template with concepts to represent an interface. The most important issue is to explicitly distinguish between an interface and its implementation “details.” Ideally, and typically, an interface is far more stable than its implementation(s).\n\nC.4: Make a function a member only if it needs direct access to the representation of a class\n\nLess coupling than with member functions, fewer functions that can cause trouble by modifying object state, reduces the number of functions that needs to be modified after a change in representation.\n\nThe “helper functions” have no need for direct access to the representation of a .\n\nThis rule becomes even better if C++ gets “uniform function call”.\n\nThe language requires functions to be members, and not all functions directly access data. In particular, members of an abstract class rarely do.\n\nThe language requires operators , , , and to be members.\n\nAn overload set could have some members that do not directly access data:\n\nSimilarly, a set of functions could be designed to be used in a chain:\n\nTypically, some but not all of such functions directly access data.\n• Look for non- member functions that do not touch data members directly. The snag is that many member functions that do not need to touch data members directly do.\n• Ignore functions that are part of an overload set out of which at least one function accesses members.\n\nC.5: Place helper functions in the same namespace as the class they support\n\nA helper function is a function (usually supplied by the writer of a class) that does not need direct access to the representation of the class, yet is seen as part of the useful interface to the class. Placing them in the same namespace as the class makes their relationship to the class obvious and allows them to be found by argument dependent lookup.\n\nThis is especially important for overloaded operators.\n\nC.7: Don’t define a class or enum and declare a variable of its type in the same statement\n\nMixing a type definition and the definition of another entity in the same declaration is confusing and unnecessary.\n• Flag if the of a class or enumeration definition is not followed by a . The is missing.\n\nC.8: Use rather than if any member is non-public\n\nReadability. To make it clear that something is being hidden/abstracted. This is a useful convention.\n\nThere is nothing wrong with this code as far as the C++ language rules are concerned, but nearly everything is wrong from a design perspective. The private data is hidden far from the public data. The data is split in different parts of the class declaration. Different parts of the data have different access. All of this decreases readability and complicates maintenance.\n\nPrefer to place the interface first in a class, see NL.16.\n\nFlag classes declared with if there is a or member.\n\nEncapsulation. Information hiding. Minimize the chance of unintended access. This simplifies maintenance.\n\nWhatever we do in the -part, an arbitrary user of a can arbitrarily and independently change its and . In a large code base, we cannot easily find which code does what to the members of . This might be exactly what we want, but if we want to enforce a relation among members, we need to make them and enforce that relation (invariant) through constructors and member functions. For example:\n\nIf the set of direct users of a set of variables cannot be easily determined, the type or usage of that set cannot be (easily) changed/improved. For and data, that’s usually the case.\n\nA class can provide two interfaces to its users. One for derived classes ( ) and one for general users ( ). For example, a derived class might be allowed to skip a run-time check because it has already guaranteed correctness:\n\nPrefer the order members before members before members; see NL.16.\n• C.12: Don’t make data members or references in a copyable or movable type\n\nA concrete type is fundamentally simpler than a type in a class hierarchy: easier to design, easier to implement, easier to use, easier to reason about, smaller, and faster. You need a reason (use cases) for using a hierarchy.\n\nIf a class is part of a hierarchy, we (in real code if not necessarily in small examples) must manipulate its objects through pointers or references. That implies more memory overhead, more allocations and deallocations, and more run-time overhead to perform the resulting indirections.\n\nConcrete types can be stack-allocated and be members of other classes.\n\nThe use of indirection is fundamental for run-time polymorphic interfaces. The allocation/deallocation overhead is not (that’s just the most common case). We can use a base class as the interface of a scoped object of a derived class. This is done where dynamic allocation is prohibited (e.g. hard-real-time) and to provide a stable interface to some kinds of plug-ins.\n\nRegular types are easier to understand and reason about than types that are not regular (irregularities requires extra effort to understand and use).\n\nThe C++ built-in types are regular, and so are standard-library classes such as , , and . Concrete classes without assignment and equality can be defined, but they are (and should be) rare.\n\nIn particular, if a concrete type is copyable, prefer to also give it an equality comparison operator, and ensure that implies .\n\nFor structs intended to be shared with C code, defining may not be feasible.\n\nHandles for resources that cannot be cloned, e.g., a for a , are concrete types but typically cannot be copied (instead, they can usually be moved), so they can’t be regular; instead, they tend to be move-only.\n\nC.12: Don’t make data members or references in a copyable or movable type\n\nand reference data members are not useful in a copyable or movable type, and make such types difficult to use by making them at least partly uncopyable/unmovable for subtle reasons.\n\nThe and data members make this class “only-sort-of-copyable” – copy-constructible but not copy-assignable.\n\nIf you need a member to point to something, use a pointer (raw or smart, and if it should not be null) instead of a reference.\n\nFlag a data member that is , , or in a type that has any copy or move operation.\n\nThese functions control the lifecycle of objects: creation, copy, move, and destruction. Define constructors to guarantee and simplify initialization of classes.\n\nBy default, the compiler defines each of these operations if it is used, but the default can be suppressed.\n\nThe default operations are a set of related operations that together implement the lifecycle semantics of an object. By default, C++ treats classes as value-like types, but not all types are value-like.\n• C.20: If you can avoid defining any default operations, do\n• C.21: If you define or any copy, move, or destructor function, define or them all\n• C.30: Define a destructor if a class needs an explicit action at object destruction\n• C.31: All resources acquired by a class must be released by the class’s destructor\n• C.32: If a class has a raw pointer ( ) or reference ( ), consider whether it might be owning\n• C.33: If a class has an owning pointer member, define a destructor\n• C.35: A base class destructor should be either public and virtual, or protected and non-virtual\n• C.40: Define a constructor if a class has an invariant\n• C.42: If a constructor cannot construct a valid object, throw an exception\n• C.44: Prefer default constructors to be simple and non-throwing\n• C.45: Don’t define a default constructor that only initializes data members; use member initializers instead\n• C.47: Define and initialize data members in the order of member declaration\n• C.48: Prefer default member initializers to member initializers in constructors for constant initializers\n• C.50: Use a factory function if you need “virtual behavior” during initialization\n• C.51: Use delegating constructors to represent common actions for all constructors of a class\n• C.52: Use inheriting constructors to import constructors into a derived class that does not need further explicit initialization\n• C.60: Make copy assignment non- , take the parameter by , and return by non-\n• C.63: Make move assignment non- , take the parameter by , and return by non-\n• C.64: A move operation should move and leave its source in a valid state\n• C.80: Use if you have to be explicit about using the default semantics\n• C.81: Use when you want to disable default behavior (without wanting an alternative)\n• C.86: Make symmetric with respect of operand types and\n• C.90: Rely on constructors and assignment operators, not memset and memcpy\n\nBy default, the language supplies the default operations with their default semantics. However, a programmer can disable or replace these defaults.\n\nC.20: If you can avoid defining default operations, do\n\nIt’s the simplest and gives the cleanest semantics.\n\nSince and have all the special functions, no further work is needed.\n\nThis is known as “the rule of zero”.\n\n(Not enforceable) While not enforceable, a good static analyzer can detect patterns that indicate a possible improvement to meet this rule. For example, a class with a (pointer, size) pair of members and a destructor that s the pointer could probably be converted to a .\n\nC.21: If you define or any copy, move, or destructor function, define or them all\n\nThe semantics of copy, move, and destruction are closely related, so if one needs to be declared, the odds are that others need consideration too.\n\nDeclaring any copy/move/destructor function, even as or , will suppress the implicit declaration of a move constructor and move assignment operator. Declaring a move constructor or move assignment operator, even as or , will cause an implicitly generated copy constructor or implicitly generated copy assignment operator to be defined as deleted. So as soon as any of these are declared, the others should all be declared to avoid unwanted effects like turning all potential moves into more expensive copies, or making a class move-only.\n\nGiven that “special attention” was needed for the destructor (here, to deallocate), the likelihood that the implicitly-defined copy and move assignment operators will be correct is low (here, we would get double deletion).\n\nThis is known as “the rule of five.”\n\nIf you want a default implementation (while defining another), write to show you’re doing so intentionally for that function. If you don’t want a generated default function, suppress it with .\n\nWhen a destructor needs to be declared just to make it , it can be defined as defaulted.\n\nTo prevent slicing as per C.67, make the copy and move operations protected or d, and add a :\n\nDefining only the move operations or only the copy operations would have the same effect here, but stating the intent explicitly for each special member makes it more obvious to the reader.\n\nCompilers enforce much of this rule and ideally warn about any violation.\n\nRelying on an implicitly generated copy operation in a class with a destructor is deprecated.\n\nWriting these functions can be error-prone. Note their argument types:\n\nA minor mistake (such as a misspelling, leaving out a , using instead of , or leaving out a special function) can lead to errors or warnings. To avoid the tedium and the possibility of errors, try to follow the rule of zero.\n\n(Simple) A class should have a declaration (even a one) for either all or none of the copy/move/destructor functions.\n\nThe default operations are conceptually a matched set. Their semantics are interrelated. Users will be surprised if copy/move construction and copy/move assignment do logically different things. Users will be surprised if constructors and destructors do not provide a consistent view of resource management. Users will be surprised if copy and move don’t reflect the way constructors and destructors work.\n\nThese operations disagree about copy semantics. This will lead to confusion and bugs.\n• (Complex) A copy/move constructor and the corresponding copy/move assignment operator should write to the same data members at the same level of dereference.\n• (Complex) Any data members written in a copy/move constructor should also be initialized by all other constructors.\n• (Complex) If a copy/move constructor performs a deep copy of a data member, then the destructor should modify the data member.\n• (Complex) If a destructor is modifying a data member, that data member should be written in any copy/move constructors or assignment operators.\n\n“Does this class need a destructor?” is a surprisingly insightful design question. For most classes the answer is “no” either because the class holds no resources or because destruction is handled by the rule of zero; that is, its members can take care of themselves as concerns destruction. If the answer is “yes”, much of the design of the class follows (see the rule of five).\n\nC.30: Define a destructor if a class needs an explicit action at object destruction\n\nA destructor is implicitly invoked at the end of an object’s lifetime. If the default destructor is sufficient, use it. Only define a non-default destructor if a class needs to execute code that is not already part of its members’ destructors.\n\nThe whole purpose of is to get a piece of code (usually a lambda) executed upon destruction.\n\nThere are two general categories of classes that need a user-defined destructor:\n• A class with a resource that is not already represented as a class with a destructor, e.g., a or a transaction class.\n• A class that exists primarily to execute an action upon destruction, such as a tracer or .\n\nThe default destructor does it better, more efficiently, and can’t get it wrong.\n\nLook for likely “implicit resources”, such as pointers and references. Look for classes with destructors even though all their data members have destructors.\n\nC.31: All resources acquired by a class must be released by the class’s destructor\n\nPrevention of resource leaks, especially in error cases.\n\nFor resources represented as classes with a complete set of default operations, this happens automatically.\n\n’s implicitly closes any file it might have open upon destruction of its .\n\nWhat about a socket that won’t close? A destructor, close, or cleanup operation should never fail. If it does nevertheless, we have a problem that has no really good solution. For starters, the writer of a destructor does not know why the destructor is called and cannot “refuse to act” by throwing an exception. See discussion. To make the problem worse, many “close/release” operations are not retryable. Many have tried to solve this problem, but no general solution is known. If at all possible, consider failure to close/cleanup a fundamental design error and terminate.\n\nA class can hold pointers and references to objects that it does not own. Obviously, such objects should not be d by the class’s destructor. For example:\n\nHere refers to but does not own it.\n• (Simple) If a class has pointer or reference members that are owners (e.g., deemed owners by using ), then they should be referenced in its destructor.\n• (Hard) Determine if pointer or reference members are owners when there is no explicit statement of ownership (e.g., look into the constructors).\n\nC.32: If a class has a raw pointer ( ) or reference ( ), consider whether it might be owning\n\nThere is a lot of code that is non-specific about ownership.\n\nThe only way to determine ownership may be code analysis.\n\nOwnership should be clear in new code (and refactored legacy code) according to R.20 for owning pointers and R.3 for non-owning pointers. References should never own R.4.\n\nLook at the initialization of raw member pointers and member references and see if an allocation is used.\n\nC.33: If a class has an owning pointer member, define a destructor\n\nAn owned object must be upon destruction of the object that owns it.\n\nA pointer member could represent a resource. A should not do so, but in older code, that’s common. Consider a a possible owner and therefore suspect.\n\nNote that if you define a destructor, you must define or delete all default operations:\n\nThe default copy operation will just copy the into leading to a double destruction of . Be explicit about ownership:\n\nOften the simplest way to get a destructor is to replace the pointer with a smart pointer (e.g., ) and let the compiler arrange for proper destruction to be done implicitly.\n\nWhy not just require all owning pointers to be “smart pointers”? That would sometimes require non-trivial code changes and might affect ABIs.\n• A class with an should define its default operations.\n\nC.35: A base class destructor should be either public and virtual, or protected and non-virtual\n\nTo prevent undefined behavior. If the destructor is public, then calling code can attempt to destroy a derived class object through a base class pointer, and the result is undefined if the base class’s destructor is non-virtual. If the destructor is protected, then calling code cannot destroy through a base class pointer and the destructor does not need to be virtual; it does need to be protected, not private, so that derived destructors can invoke it. In general, the writer of a base class does not know the appropriate action to be done upon destruction.\n\nSee this in the Discussion section.\n\nA virtual function defines an interface to derived classes that can be used without looking at the derived classes. If the interface allows destroying, it should be safe to do so.\n\nA destructor must be non-private or it will prevent using the type:\n\nWe can imagine one case where you could want a protected virtual destructor: When an object of a derived type (and only of such a type) should be allowed to destroy another object (not itself) through a pointer to base. We haven’t seen such a case in practice, though.\n• A class with any virtual functions should have a destructor that is either public and virtual or else protected and non-virtual.\n• If a class inherits publicly from a base class, the base class should have a destructor that is either public and virtual or else protected and non-virtual.\n\nIn general we do not know how to write error-free code if a destructor should fail. The standard library requires that all classes it deals with have destructors that do not exit by throwing.\n\nMany have tried to devise a fool-proof scheme for dealing with failure in destructors. None have succeeded to come up with a general scheme. This can be a real practical problem: For example, what about a socket that won’t close? The writer of a destructor does not know why the destructor is called and cannot “refuse to act” by throwing an exception. See discussion. To make the problem worse, many “close/release” operations are not retryable. If at all possible, consider failure to close/cleanup a fundamental design error and terminate.\n\nDeclare a destructor . That will ensure that it either completes normally or terminates the program.\n\nIf a resource cannot be released and the program must not fail, try to signal the failure to the rest of the system somehow (maybe even by modifying some global state and hope something will notice and be able to take care of the problem). Be fully aware that this technique is special-purpose and error-prone. Consider the “my connection will not close” example. Probably there is a problem at the other end of the connection and only a piece of code responsible for both ends of the connection can properly handle the problem. The destructor could send a message (somehow) to the responsible part of the system, consider that to have closed the connection, and return normally.\n\nIf a destructor uses operations that could fail, it can catch exceptions and in some cases still complete successfully (e.g., by using a different clean-up mechanism from the one that threw an exception).\n\n(Simple) A destructor should be declared if it could throw.\n\nA destructor must not fail. If a destructor tries to exit with an exception, it’s a bad design error and the program had better terminate.\n\nA destructor (either user-defined or compiler-generated) is implicitly declared (independently of what code is in its body) if all of the members of its class have destructors. By explicitly marking destructors , an author guards against the destructor becoming implicitly through the addition or modification of a class member.\n\nNot all destructors are noexcept by default; one throwing member poisons the whole class hierarchy\n\nSo, if in doubt, declare a destructor noexcept.\n\nWhy not then declare all destructors noexcept? Because that would in many cases – especially simple cases – be distracting clutter.\n\n(Simple) A destructor should be declared if it could throw.\n\nA constructor defines how an object is initialized (constructed).\n\nC.40: Define a constructor if a class has an invariant\n\nThat’s what constructors are for.\n\nIt is often a good idea to express the invariant as an on the constructor.\n\nA constructor can be used for convenience even if a class does not have an invariant. For example:\n\nThe C++11 initializer list rule eliminates the need for many constructors. For example:\n\nThe constructor is redundant. Also, the default for would be better done as a default member initializer.\n\nSee also: construct valid object and constructor throws.\n• Flag classes with user-defined copy operations but no constructor (a user-defined copy is a good indicator that the class has an invariant)\n\nA constructor establishes the invariant for a class. A user of a class should be able to assume that a constructed object is usable.\n\nIf a valid object cannot conveniently be constructed by a constructor, use a factory function.\n• (Simple) Every constructor should initialize every data member (either explicitly, via a delegating ctor call or via default construction).\n• (Unknown) If a constructor has an contract, try to see if it holds as a postcondition.\n\nIf a constructor acquires a resource (to create a valid object), that resource should be released by the destructor. The idiom of having constructors acquire resources and destructors release them is called RAII (“Resource Acquisition Is Initialization”).\n\nC.42: If a constructor cannot construct a valid object, throw an exception\n\nLeaving behind an invalid object is asking for trouble.\n\nFor a variable definition (e.g., on the stack or as a member of another object) there is no explicit function call from which an error code could be returned. Leaving behind an invalid object and relying on users to consistently check an function before use is tedious, error-prone, and inefficient.\n\nThere are domains, such as some hard-real-time systems (think airplane controls) where (without additional tool support) exception handling is not sufficiently predictable from a timing perspective. There the technique must be used. In such cases, check consistently and immediately to simulate RAII.\n\nIf you feel tempted to use some “post-constructor initialization” or “two-stage initialization” idiom, try not to do that. If you really have to, look at factory functions.\n\nOne reason people have used functions rather than doing the initialization work in a constructor has been to avoid code replication. Delegating constructors and default member initialization do that better. Another reason has been to delay initialization until an object is needed; the solution to that is often not to declare a variable until it can be properly initialized\n\nThat is, ensure that if a concrete class is copyable it also satisfies the rest of “semiregular.”\n\nMany language and library facilities rely on default constructors to initialize their elements, e.g. and . A default constructor often simplifies the task of defining a suitable moved-from state for a type that is also copyable.\n\nThe default constructor is only auto-generated if there is no user-declared constructor, hence it’s impossible to initialize the vector in the example above. The absence of a default value can cause surprises for users and complicate its use, so if one can be reasonably defined, it should be.\n\nis chosen to encourage thought: There is no “natural” default date (the big bang is too far back in time to be useful for most people), so this example is non-trivial. is not a valid date in most calendar systems, so choosing that would be introducing something like floating-point’s . However, most realistic classes have a “first date” (e.g. January 1, 1970 is popular), so making that the default is usually trivial.\n\nA class with members that all have default constructors implicitly gets a default constructor:\n\nBeware that built-in types are not properly default constructed:\n\nStatically allocated objects of built-in types are by default initialized to , but local built-in variables are not. Beware that your compiler might default initialize local built-in variables, whereas an optimized build will not. Thus, code like the example above might appear to work, but it relies on undefined behavior. Assuming that you want initialization, an explicit default initialization can help:\n\nClasses that don’t have a reasonable default construction are usually not copyable either, so they don’t fall under this guideline.\n\nFor example, a base class should not be copyable, and so does not necessarily need a default constructor:\n\nA class that must acquire a caller-provided resource during construction often cannot have a default constructor, but it does not fall under this guideline because such a class is usually not copyable anyway:\n\nA class that has a “special state” that must be handled separately from other states by member functions or users causes extra work (and most likely more errors). Such a type can naturally use the special state as a default constructed value, whether or not it is copyable:\n\nSimilar special-state types that are copyable, such as copyable smart pointers that have the special state “==nullptr”, should use the special state as their default constructed value.\n\nHowever, it is preferable to have a default constructor default to a meaningful state such as s and s .\n• Flag classes that are copyable by without a default constructor\n• Flag classes that are comparable with but not copyable\n\nC.44: Prefer default constructors to be simple and non-throwing\n\nBeing able to set a value to “the default” without operations that might fail simplifies error handling and reasoning about move operations.\n\nThis is nice and general, but setting a to empty after an error involves an allocation, which might fail. Also, having a default represented as seems wasteful. For example, costs 100 allocations.\n\nUsing makes cheap, but a special case and implies run-time checks. Setting a to empty after detecting an error is trivial.\n\nC.45: Don’t define a default constructor that only initializes data members; use default member initializers instead\n\nUsing default member initializers lets the compiler generate the function for you. The compiler-generated function can be more efficient.\n\n(Simple) A default constructor should do more than just initialize data members with constants.\n\nIf you really want an implicit conversion from the constructor argument type to the class type, don’t use :\n\nSee also: Discussion of implicit conversions\n\nCopy and move constructors should not be made because they do not perform conversions. Explicit copy/move constructors make passing and returning by value difficult.\n\n(Simple) Single-argument constructors should be declared . Good single argument non- constructors are rare in most code bases. Warn for all that are not on a “positive list”.\n\nC.47: Define and initialize data members in the order of member declaration\n\nTo minimize confusion and errors. That is the order in which the initialization happens (independent of the order of member initializers).\n\n(Simple) A member initializer list should mention the members in the same order they are declared.\n\nC.48: Prefer default member initializers to member initializers in constructors for constant initializers\n\nMakes it explicit that the same value is expected to be used in all constructors. Avoids repetition. Avoids maintenance problems. It leads to the shortest and most efficient code.\n\nHow would a maintainer know whether was deliberately uninitialized (probably a bad idea anyway) and whether it was intentional to give the default value in one case and in another (almost certainly a bug)? The problem with (forgetting to initialize a member) often happens when a new member is added to an existing class.\n\nAlternative: We can get part of the benefits from default arguments to constructors, and that is not uncommon in older code. However, that is less explicit, causes more arguments to be passed, and is repetitive when there is more than one constructor:\n• (Simple) Every constructor should initialize every data member (either explicitly, via a delegating ctor call or via default construction).\n• (Simple) Default arguments to constructors suggest a default member initializer might be more appropriate.\n\nAn initialization explicitly states that initialization, rather than assignment, is done and can be more elegant and efficient. Prevents “use before set” errors.\n\nExample, better still\n\nInstead of those s we could use C++17 or as a more general way to present arguments to a function:\n\nC.50: Use a factory function if you need “virtual behavior” during initialization\n\nIf the state of a base class object must depend on the state of a derived part of the object, we need to use a virtual function (or equivalent) while minimizing the window of opportunity to misuse an imperfectly constructed object.\n\nThe return type of the factory should normally be by default; if some uses are shared, the caller can the into a . However, if the factory author knows that all uses of the returned object will be shared uses, return and use in the body to save an allocation.\n\nrequires that the constructor is public. By requiring a protected the constructor cannot be publicly called anymore, so we avoid an incompletely constructed object escaping into the wild. By providing the factory function , we make construction (on the free store) convenient.\n\nConventional factory functions allocate on the free store, rather than on the stack or in an enclosing object.\n\nC.51: Use delegating constructors to represent common actions for all constructors of a class\n\nThe common action gets tedious to write and might accidentally not be common.\n\nSee also: If the “repeated action” is a simple initialization, consider a default member initializer.\n\nC.52: Use inheriting constructors to import constructors into a derived class that does not need further explicit initialization\n\nIf you need those constructors for a derived class, re-implementing them is tedious and error-prone.\n\nhas a lot of tricky constructors, so if I want my own , I don’t want to reimplement them:\n\nMake sure that every member of the derived class is initialized.\n\nConcrete types should generally be copyable, but interfaces in a class hierarchy should not. Resource handles might or might not be copyable. Types can be defined to move for logical as well as performance reasons.\n\nC.60: Make copy assignment non- , take the parameter by , and return by non-\n\nIt is simple and efficient. If you want to optimize for rvalues, provide an overload that takes a (see F.18).\n\nBut what if you can get significantly better performance by not making a temporary copy? Consider a simple intended for a domain where assignment of large, equal-sized s is common. In this case, the copy of elements implied by the implementation technique could cause an order of magnitude increase in cost:\n\nBy writing directly to the target elements, we will get only the basic guarantee rather than the strong guarantee offered by the technique. Beware of self-assignment.\n\nAlternatives: If you think you need a assignment operator, and understand why that’s deeply problematic, don’t call it . Make it a named function like . See copy constructor vs. .\n• (Simple) An assignment operator should not be virtual. Here be dragons!\n• (Simple) An assignment operator should return to enable chaining, not alternatives like which interfere with composability and putting objects in containers.\n• (Moderate) An assignment operator should (implicitly or explicitly) invoke all base and member assignment operators. Look at the destructor to determine if the type has pointer semantics or value semantics.\n\nThat is the generally assumed semantics. After , we should have . After a copy and can be independent objects (value semantics, the way non-pointer built-in types and the standard-library types work) or refer to a shared object (pointer semantics, the way pointers work).\n\nPrefer value semantics unless you are building a “smart pointer”. Value semantics is the simplest to reason about and what the standard-library facilities expect.\n\nIf changes the value of , people will be surprised and bad errors will occur (often including leaks).\n\nThe default assignment generated from members that handle self-assignment correctly handles self-assignment.\n\nYou can handle self-assignment by explicitly testing for self-assignment, but often it is faster and more elegant to cope without such a test (e.g., using ).\n\nThis is obviously safe and apparently efficient. However, what if we do one self-assignment per million assignments? That’s about a million redundant tests (but since the answer is essentially always the same, the computer’s branch predictor will guess right essentially every time). Consider:\n\nis safe for self-assignment and so are . All the cost is carried by the (rare) case of self-assignment.\n\n(Simple) Assignment operators should not contain the pattern if (this == &a) return *this; ???\n\nC.63: Make move assignment non- , take the parameter by , and return by non-\n\nIt is simple and efficient.\n\nSee: The rule for copy-assignment.\n\nEquivalent to what is done for copy-assignment.\n• (Simple) An assignment operator should not be virtual. Here be dragons!\n• (Simple) An assignment operator should return to enable chaining, not alternatives like which interfere with composability and putting objects in containers.\n• (Moderate) A move assignment operator should (implicitly or explicitly) invoke all base and member move assignment operators.\n\nC.64: A move operation should move and leave its source in a valid state\n\nThat is the generally assumed semantics. After the value of should be the value had and should be in a valid state.\n\nIdeally, that moved-from should be the default value of the type. Ensure that unless there is an exceptionally good reason not to. However, not all types have a default value and for some types establishing the default value can be expensive. The standard requires only that the moved-from object can be destroyed. Often, we can easily and cheaply do better: The standard library assumes that it is possible to assign to a moved-from object. Always leave the moved-from object in some (necessarily specified) valid state.\n\nUnless there is an exceptionally strong reason not to, make work with the conventional semantics.\n\n(Not enforceable) Look for assignments to members in the move operation. If there is a default constructor, compare those assignments to the initializations in the default constructor.\n\nIf changes the value of , people will be surprised and bad errors can occur. However, people don’t usually directly write a self-assignment that turn into a move, but it can occur. However, is implemented using move operations so if you accidentally do where and refer to the same object, failing to handle self-move could be a serious and subtle error.\n\nThe one-in-a-million argument against if (this == &a) return *this; tests from the discussion of self-assignment is even more relevant for self-move.\n\nThere is no known general way of avoiding an if (this == &a) return *this; test for a move assignment and still get a correct answer (i.e., after the value of is unchanged).\n\nThe ISO standard guarantees only a “valid but unspecified” state for the standard-library containers. Apparently this has not been a problem in about 10 years of experimental and production use. Please contact the editors if you find a counter example. The rule here is more caution and insists on complete safety.\n\nHere is a way to move a pointer without a test (imagine it as code in the implementation a move assignment):\n• (Moderate) In the case of self-assignment, a move assignment operator should not leave the object holding pointer members that have been d or set to .\n• (Not enforceable) Look at the use of standard-library container types (incl. ) and consider them safe for ordinary (not life-critical) uses.\n\nA throwing move violates most people’s reasonable assumptions. A non-throwing move will be used more efficiently by standard-library and language facilities.\n\nThese operations do not throw.\n\nThis is not just inefficient, but since a vector copy requires allocation, it can throw.\n\nA polymorphic class is a class that defines or inherits at least one virtual function. It is likely that it will be used as a base class for other derived classes with polymorphic behavior. If it is accidentally passed by value, with the implicitly generated copy constructor and assignment, we risk slicing: only the base portion of a derived object will be copied, and the polymorphic behavior will be corrupted.\n\nIf the class has no data, the copy/move functions. Otherwise, make them protected.\n\nIf you need to create deep copies of polymorphic objects, use functions: see C.130.\n\nClasses that represent exception objects need both to be polymorphic and copy-constructible.\n\nIn addition to the operations for which the language offers default implementations, there are a few operations that are so foundational that specific rules for their definition are needed: comparisons, , and .\n\nC.80: Use if you have to be explicit about using the default semantics\n\nThe compiler is more likely to get the default semantics right and you cannot implement these functions better than the compiler.\n\nBecause we defined the destructor, we must define the copy and move operations. The is the best and simplest way of doing that.\n\nWriting out the bodies of the copy and move operations is verbose, tedious, and error-prone. A compiler does it better.\n\n(Moderate) The body of a user-defined operation should not have the same semantics as the compiler-generated version, because that would be redundant.\n\nC.81: Use when you want to disable default behavior (without wanting an alternative)\n\nIn a few cases, a default operation is not desirable.\n\nA can be moved, but not copied. To achieve that its copy operations are deleted. To avoid copying it is necessary to its copy operations from lvalues:\n\nNote that deleted functions should be public.\n\nThe elimination of a default operation is (should be) based on the desired semantics of the class. Consider such classes suspect, but maintain a “positive list” of classes where a human has asserted that the semantics is correct.\n\nThe function called will be that of the object constructed so far, rather than a possibly overriding function in a derived class. This can be most confusing. Worse, a direct or indirect call to an unimplemented pure virtual function from a constructor or destructor results in undefined behavior.\n\nNote that calling a specific explicitly qualified function is not a virtual call even if the function is .\n\nSee also factory functions for how to achieve the effect of a call to a derived class function without risking undefined behavior.\n\nThere is nothing inherently wrong with calling virtual functions from constructors and destructors. The semantics of such calls is type safe. However, experience shows that such calls are rarely needed, easily confuse maintainers, and become a source of errors when used by novices.\n• Flag calls of virtual functions from constructors and destructors.\n\nA can be handy for implementing a number of idioms, from smoothly moving objects around to implementing assignment easily to providing a guaranteed commit function that enables strongly error-safe calling code. Consider using swap to implement copy assignment in terms of copy construction. See also destructors, deallocation, and swap must never fail.\n\nProviding a non-member function in the same namespace as your type for callers’ convenience.\n• (Simple) When a class has a member function, it should be declared .\n\nis widely used in ways that are assumed never to fail and programs cannot easily be written to work correctly in the presence of a failing . The standard-library containers and algorithms will not work correctly if a swap of an element type fails.\n\nThis is not just slow, but if a memory allocation occurs for the elements in , this could throw and would make STL algorithms fail if used with them.\n\n(Simple) When a class has a member function, it should be declared .\n\nA must not fail. If a tries to exit with an exception, it’s a bad design error and the program had better terminate.\n\n(Simple) When a class has a member function, it should be declared .\n\nC.86: Make symmetric with respect to operand types and\n\nAsymmetric treatment of operands is surprising and a source of errors where conversions are possible. is a fundamental operation and programmers should be able to use it without fear of failure.\n\n’s comparison accepts conversions for its second operand, but not its first.\n\nIf a class has a failure state, like ’s , there is a temptation to make a comparison against the failure state throw. The alternative is to make two failure states compare equal and any valid state compare false against the failure state.\n\nThis rule applies to all the usual comparison operators: , , , , and .\n• Flag an for which the argument types differ; same for other comparison operators: , , , , and .\n• Flag member s; same for other comparison operators: , , , , and .\n\nIt is really hard to write a foolproof and useful for a hierarchy.\n\n’s comparison accepts conversions for its second operand, but not its first.\n\nOf course there are ways of making work in a hierarchy, but the naive approaches do not scale\n\nThis rule applies to all the usual comparison operators: , , , , , and .\n• Flag a virtual ; same for other comparison operators: , , , , , and .\n\nUsers of hashed containers use hash indirectly and don’t expect simple access to throw. It’s a standard-library requirement.\n\nIf you have to define a specialization, try simply to let it combine standard-library specializations with (xor). That tends to work better than “cleverness” for non-specialists.\n\nC.90: Rely on constructors and assignment operators, not and\n\nThe standard C++ mechanism to construct an instance of a type is to call its constructor. As specified in guideline C.41: a constructor should create a fully initialized object. No additional initialization, such as by , should be required. A type will provide a copy constructor and/or copy assignment operator to appropriately make a copy of the class, preserving the type’s invariants. Using memcpy to copy a non-trivially copyable type has undefined behavior. Frequently this results in slicing, or data corruption.\n\nThis is type-unsafe and overwrites the vtable.\n\nThis is also type-unsafe and overwrites the vtable.\n\nA container is an object holding a sequence of objects of some type; is the archetypical container. A resource handle is a class that owns a resource; is the typical resource handle; its resource is its sequence of elements.\n• C.104: Give a container a default constructor that sets it to empty\n• C.109: If a resource handle has pointer semantics, provide and\n\nThe STL containers are familiar to most C++ programmers and a fundamentally sound design.\n\nThere are of course other fundamentally sound design styles and sometimes reasons to depart from the style of the standard library, but in the absence of a solid reason to differ, it is simpler and easier for both implementers and users to follow the standard.\n\nIn particular, and provide useful relatively simple models.\n\nHere, the STL style is followed, but incompletely. That’s not uncommon. Provide only as much functionality as makes sense for a specific container. The key is to define the conventional constructors, assignments, destructors, and iterators (as meaningful for the specific container) with their conventional semantics. From that base, the container can be expanded as needed. Here, special constructors from were added.\n\nRegular objects are simpler to think and reason about than irregular ones. Familiarity.\n\nIf meaningful, make a container (the concept). In particular, ensure that an object compares equal to its copy.\n\nContainers tend to get large; without a move constructor and a copy constructor an object can be expensive to move around, thus tempting people to pass pointers to it around and getting into resource management problems.\n\nA user can reasonably assume that returning a standard-like container is cheap.\n\nPeople expect to be able to initialize a container with a set of values. Familiarity.\n\nC.104: Give a container a default constructor that sets it to empty\n\nC.109: If a resource handle has pointer semantics, provide and\n\nThat’s what is expected from pointers. Familiarity.\n\nA function object is an object supplying an overloaded so that you can call it. A lambda expression (colloquially often shortened to “a lambda”) is a notation for generating a function object. Function objects should be cheap to copy (and therefore passed by value).\n• F.10: If an operation can be reused, give it a name\n• F.11: Use an unnamed lambda if you need a simple function object in one place only\n• F.50: Use a lambda when a function won’t do (to capture local variables, or to write a local function)\n• F.52: Prefer capturing by reference in lambdas that will be used locally, including passed to algorithms\n• F.53: Avoid capturing by reference in lambdas that will be used non-locally, including returned, stored on the heap, or passed to another thread\n• ES.28: Use lambdas for complex initialization, especially of variables\n\nA class hierarchy is constructed to represent a set of hierarchically organized concepts (only). Typically base classes act as interfaces. There are two major uses for hierarchies, often named implementation inheritance and interface inheritance.\n• C.120: Use class hierarchies to represent concepts with inherent hierarchical structure (only)\n• C.121: If a base class is used as an interface, make it a pure abstract class\n• C.122: Use abstract classes as interfaces when complete separation of interface and implementation is needed\n• C.127: A class with a virtual function should have a virtual or protected destructor\n• C.128: Virtual functions should specify exactly one of , , or\n• C.129: When designing a class hierarchy, distinguish between implementation inheritance and interface inheritance\n• C.130: For making deep copies of polymorphic classes prefer a virtual function instead of public copy construction/assignment\n• C.134: Ensure all non- data members have the same access level\n• C.136: Use multiple inheritance to represent the union of implementation attributes\n• C.138: Create an overload set for a derived class and its bases with\n• C.140: Do not provide different default arguments for a virtual function and an overrider\n• C.146: Use where class hierarchy navigation is unavoidable\n• C.147: Use to a reference type when failure to find the required class is considered an error\n• C.148: Use to a pointer type when failure to find the required class is considered a valid alternative\n• C.149: Use or to avoid forgetting to objects created using\n• C.150: Use to construct objects owned by s\n• C.151: Use to construct objects owned by s\n• C.152: Never assign a pointer to an array of derived class objects to a pointer to its base\n\nC.120: Use class hierarchies to represent concepts with inherent hierarchical structure (only)\n\nDirect representation of ideas in code eases comprehension and maintenance. Make sure the idea represented in the base class exactly matches all derived types and there is not a better way to express it than using the tight coupling of inheritance.\n\nDo not use inheritance when simply having a data member will do. Usually this means that the derived type needs to override a base virtual function or needs access to a protected member.\n\nDo not represent non-hierarchical domain concepts as class hierarchies.\n\nHere most overriding classes cannot implement most of the functions required in the interface well. Thus the base class becomes an implementation burden. Furthermore, the user of cannot rely on the member functions actually performing meaningful operations reasonably efficiently; it might throw an exception instead. Thus users have to resort to run-time checking and/or not using this (over)general interface in favor of a particular interface found by a run-time type inquiry (e.g., a ).\n• Look for classes with lots of members that do nothing but throw.\n• Flag every use of a non-public base class where the derived class does not override a virtual function or access a protected member in , and is not one of the following: empty, a template parameter or parameter pack of , a class template specialized with .\n\nC.121: If a base class is used as an interface, make it a pure abstract class\n\nA class is more stable (less brittle) if it does not contain data. Interfaces should normally be composed entirely of public pure virtual functions and a default/empty virtual destructor.\n\nThe is d through its interface, so its is leaked. Give a virtual destructor and all is well.\n• Warn on any class that contains data members and also has an overridable (non- ) virtual function that wasn’t inherited from a base class.\n\nC.122: Use abstract classes as interfaces when complete separation of interface and implementation is needed\n\nSuch as on an ABI (link) boundary.\n\nA user can now use s and s interchangeably through the interface provided by . Furthermore, we can update and in ways that are not binary compatible with older versions as long as all access goes through .\n\nAn abstract class typically does not have any data for a constructor to initialize.\n• A base class constructor that does work, such as registering an object somewhere, might need a constructor.\n• In extremely rare cases, you might find it reasonable for an abstract class to have a bit of data shared by all derived classes (e.g., use statistics data, debug information, etc.); such classes tend to have constructors. But be warned: Such classes also tend to be prone to requiring virtual inheritance.\n\nC.127: A class with a virtual function should have a virtual or protected destructor\n\nA class with a virtual function is usually (and in general) used via a pointer to base. Usually, the last user has to call delete on a pointer to base, often via a smart pointer to base, so the destructor should be public and virtual. Less commonly, if deletion through a pointer to base is not intended to be supported, the destructor should be protected and non-virtual; see C.35.\n\nThere are people who don’t follow this rule because they plan to use a class only through a : Here, the shared pointer will take care of deletion, so no leak will occur from an inappropriate of the base. People who do this consistently can get a false positive, but the rule is important – what if one was allocated using ? It’s not safe unless the author of ensures that it can never be misused, such as by making all constructors private and providing a factory function to enforce the allocation with .\n• A class with any virtual functions should have a destructor that is either public and virtual or else protected and non-virtual.\n• Flag of a class with a virtual function but no virtual destructor.\n\nC.128: Virtual functions should specify exactly one of , , or\n\nReadability. Detection of mistakes. Writing explicit , , or is self-documenting and enables the compiler to catch mismatch of types and/or names between base and derived classes. However, writing more than one of these three is both redundant and a potential source of errors.\n• means exactly and only “this is a new virtual function.”\n• means exactly and only “this is a non-final overrider.”\n• means exactly and only “this is a final overrider.”\n\nWe want to eliminate two particular classes of errors:\n• implicit virtual: the programmer intended the function to be implicitly virtual and it is (but readers of the code can’t tell); or the programmer intended the function to be implicitly virtual but it isn’t (e.g., because of a subtle parameter list mismatch); or the programmer did not intend the function to be virtual but it is (because it happens to have the same signature as a virtual in the base class)\n• implicit override: the programmer intended the function to be implicitly an overrider and it is (but readers of the code can’t tell); or the programmer intended the function to be implicitly an overrider but it isn’t (e.g., because of a subtle parameter list mismatch); or the programmer did not intend the function to be an overrider but it is (because it happens to have the same signature as a virtual in the base class – note this problem arises whether or not the function is explicitly declared virtual, because the programmer might have intended to create either a new virtual function or a new non-virtual function)\n\nNote: On a class defined as , it doesn’t matter whether you put or on an individual virtual function.\n\nNote: Use on functions sparingly. It does not necessarily lead to optimization, and it precludes further overriding.\n• Compare virtual function names in base and derived classes and flag uses of the same name that does not override.\n• Flag overrides with neither nor .\n• Flag function declarations that use more than one of , , and .\n\nC.129: When designing a class hierarchy, distinguish between implementation inheritance and interface inheritance\n\nImplementation details in an interface make the interface brittle; that is, make its users vulnerable to having to recompile after changes in the implementation. Data in a base class increases the complexity of implementing the base and can lead to replication of code.\n• interface inheritance is the use of inheritance to separate users from implementations, in particular to allow derived classes to be added and changed without affecting the users of base classes.\n• implementation inheritance is the use of inheritance to simplify implementation of new facilities by making useful operations available for implementers of related new operations (sometimes called “programming by difference”).\n\nA pure interface class is simply a set of pure virtual functions; see I.25.\n\nIn early OOP (e.g., in the 1980s and 1990s), implementation inheritance and interface inheritance were often mixed and bad habits die hard. Even now, mixtures are not uncommon in old code bases and in old-style teaching material.\n\nThe importance of keeping the two kinds of inheritance increases\n• with the size of a hierarchy (e.g., dozens of derived classes),\n• with the length of time the hierarchy is used (e.g., decades), and\n• with the number of distinct organizations in which a hierarchy is used (e.g., it can be difficult to distribute an update to a base class)\n• As the hierarchy grows and more data is added to , the constructors get harder to write and maintain.\n• Why calculate the center for the ? we might never use it.\n• Add a data member to (e.g., drawing style or canvas) and all classes derived from and all code using will need to be reviewed, possibly changed, and probably recompiled.\n\nThe implementation of is an example of implementation inheritance: we have defined once and for all, for all derived classes. The more code there is in such base class member function implementations and the more data is shared by placing it in the base, the more benefits we gain - and the less stable the hierarchy is.\n\nThis Shape hierarchy can be rewritten using interface inheritance:\n\nNote that a pure interface rarely has constructors: there is nothing to construct.\n\nThe interface is now less brittle, but there is more work in implementing the member functions. For example, has to be implemented by every class derived from .\n\nHow can we gain the benefit of stable hierarchies from interface hierarchies and the benefit of implementation reuse from implementation inheritance? One popular technique is dual hierarchies. There are many ways of implementing the idea of dual hierarchies; here, we use a multiple-inheritance variant.\n\nFirst we devise a hierarchy of interface classes:\n\nTo make this interface useful, we must provide its implementation classes (here, named equivalently, but in the namespace):\n\nNow is a poor example of a class with an implementation, but bear with us because this is just a simple example of a technique aimed at more complex hierarchies.\n\nAnd we could extend the hierarchies by adding a Smiley class (:-)):\n\nThere are now two hierarchies:\n\nSince each implementation is derived from its interface as well as its implementation base class we get a lattice (DAG):\n\nAs mentioned, this is just one way to construct a dual hierarchy.\n\nThe implementation hierarchy can be used directly, rather than through the abstract interface.\n\nThis can be useful when the implementation class has members that are not offered in the abstract interface or if direct use of a member offers optimization opportunities (e.g., if an implementation member function is )\n\nAnother (related) technique for separating interface and implementation is Pimpl.\n\nThere is often a choice between offering common functionality as (implemented) base class functions and freestanding functions (in an implementation namespace). Base classes give a shorter notation and easier access to shared data (in the base) at the cost of the functionality being available only to users of the hierarchy.\n• Flag a derived to base conversion to a base with both data and virtual functions (except for calls from a derived class member to a base class member)\n\nC.130: For making deep copies of polymorphic classes prefer a virtual function instead of public copy construction/assignment\n\nCopying a polymorphic class is discouraged due to the slicing problem, see C.67. If you really need copy semantics, copy deeply: Provide a virtual function that will copy the actual most-derived type and return an owning pointer to the new object, and then in derived classes return the derived type (use a covariant return type).\n\nGenerally, it is recommended to use smart pointers to represent ownership (see R.20). However, because of language rules, the covariant return type cannot be a smart pointer: can’t return a while returns . Therefore, you either need to consistently return in all overrides, or use utility from the Guidelines Support Library.\n\nA trivial getter or setter adds no semantic value; the data item could just as well be .\n\nConsider making such a class a – that is, a behaviorless bunch of variables, all public data and no member functions.\n\nNote that we can put default initializers on data members: C.49: Prefer initialization to assignment in constructors.\n\nThe key to this rule is whether the semantics of the getter/setter are trivial. While it is not a complete definition of “trivial”, consider whether there would be any difference beyond syntax if the getter/setter was a public data member instead. Examples of non-trivial semantics would be: maintaining a class invariant or converting between an internal type and an interface type.\n\nFlag multiple and member functions that simply access a member without additional semantics.\n\nRedundant increases run-time and object-code size. A virtual function can be overridden and is thus open to mistakes in a derived class. A virtual function ensures code replication in a templated hierarchy.\n\nThis kind of “vector” isn’t meant to be used as a base class at all.\n• Flag a class with virtual functions but no derived classes.\n• Flag a class where all member functions are virtual and have implementations.\n\ndata is a source of complexity and errors. data complicates the statement of invariants. data inherently violates the guidance against putting data in base classes, which usually leads to having to deal with virtual inheritance as well.\n\nNow it is up to every derived to manipulate the protected data correctly. This has been popular, but also a major source of maintenance problems. In a large class hierarchy, the consistent use of protected data is hard to maintain because there can be a lot of code, spread over a lot of classes. The set of classes that can touch that data is open: anyone can derive a new class and start manipulating the protected data. Often, it is not possible to examine the complete set of classes, so any change to the representation of the class becomes infeasible. There is no enforced invariant for the protected data; it is much like a set of global variables. The protected data has de facto become global to a large body of code.\n\nProtected data often looks tempting to enable arbitrary improvements through derivation. Often, what you get is unprincipled changes and errors. Prefer data with a well-specified and enforced invariant. Alternative, and often better, keep data out of any class used as an interface.\n\nProtected member function can be just fine.\n\nC.134: Ensure all non- data members have the same access level\n\nPrevention of logical confusion leading to errors. If the non- data members don’t have the same access level, the type is confused about what it’s trying to do. Is it a type that maintains an invariant or simply a collection of values?\n\nThe core question is: What code is responsible for maintaining a meaningful/correct value for that variable?\n\nThere are exactly two kinds of data members:\n• A: Ones that don’t participate in the object’s invariant. Any combination of values for these members is valid.\n• B: Ones that do participate in the object’s invariant. Not every combination of values is meaningful (else there’d be no invariant). Therefore all code that has write access to these variables must know about the invariant, know the semantics, and know (and actively implement and enforce) the rules for keeping the values correct.\n\nData members in category A should just be (or, more rarely, if you only want derived classes to see them). They don’t need encapsulation. All code in the system might as well see and manipulate them.\n\nData members in category B should be or . This is because encapsulation is important. To make them non- and non- would mean that the object can’t control its own state: An unbounded amount of code beyond the class would need to know about the invariant and participate in maintaining it accurately – if these data members were , that would be all calling code that uses the object; if they were , it would be all the code in current and future derived classes. This leads to brittle and tightly coupled code that quickly becomes a nightmare to maintain. Any code that inadvertently sets the data members to an invalid or unexpected combination of values would corrupt the object and all subsequent uses of the object.\n\nMost classes are either all A or all B:\n• All public: If you’re writing an aggregate bundle-of-variables without an invariant across those variables, then all the variables should be . By convention, declare such classes rather than\n• All private: If you’re writing a type that maintains an invariant, then all the non- variables should be private – it should be encapsulated.\n\nOccasionally classes will mix A and B, usually for debug reasons. An encapsulated object might contain something like non- debug instrumentation that isn’t part of the invariant and so falls into category A – it isn’t really part of the object’s value or meaningful observable state either. In that case, the A parts should be treated as A’s (made , or in rarer cases if they should be visible only to derived classes) and the B parts should still be treated like B’s ( or ).\n\nFlag any class that has non- data members with different access levels.\n\nNot all classes will necessarily support all interfaces, and not all callers will necessarily want to deal with all operations. Especially to break apart monolithic interfaces into “aspects” of behavior supported by a given derived class.\n\nprovides the interface to input operations; provides the interface to output operations. provides the union of the and interfaces and the synchronization needed to allow both on a single stream.\n\nThis is a very common use of inheritance because the need for multiple different interfaces to an implementation is common and such interfaces are often not easily or naturally organized into a single-rooted hierarchy.\n\nC.136: Use multiple inheritance to represent the union of implementation attributes\n\nSome forms of mixins have state and often operations on that state. If the operations are virtual the use of inheritance is necessary, if not using inheritance can avoid boilerplate and forwarding.\n\nprovides the interface to input operations (and some data); provides the interface to output operations (and some data). provides the union of the and interfaces and the synchronization needed to allow both on a single stream.\n\nThis a relatively rare use because implementation can often be organized into a single-rooted hierarchy.\n\nSometimes, an “implementation attribute” is more like a “mixin” that determine the behavior of an implementation and inject members to enable the implementation of the policies it requires. For example, see or various bases from boost.intrusive (e.g. or ).\n\nAllow separation of shared data and interface. To avoid all shared data to being put into an ultimate base class.\n\nFactoring out makes sense if many derived classes share significant “implementation details.”\n\nObviously, the example is too “theoretical”, but it is hard to find a small realistic example. is the root of an interface hierarchy and is the root of an implementation hierarchy. Here is a slightly more realistic example with an explanation.\n\nOften, linearization of a hierarchy is a better solution.\n\nC.138: Create an overload set for a derived class and its bases with\n\nWithout a using declaration, member functions in the derived class hide the entire inherited overload sets.\n\nThis issue affects both virtual and non-virtual member functions\n\nFor variadic bases, C++17 introduced a variadic form of the using-declaration,\n\nCapping a hierarchy with classes is rarely needed for logical reasons and can be damaging to the extensibility of a hierarchy.\n\nNot every class is meant to be a base class. Most standard-library classes are examples of that (e.g., and are not designed to be derived from). This rule is about using on classes with virtual functions meant to be interfaces for a class hierarchy.\n\nClaims of performance improvements from should be substantiated. Too often, such claims are based on conjecture or experience with other languages.\n\nThere are examples where can be important for both logical and performance reasons. One example is a performance-critical AST hierarchy in a compiler or language analysis tool. New derived classes are not added every year and only by library implementers. However, misuses are (or at least have been) far more common.\n\nFlag uses of on classes.\n\nC.140: Do not provide different default arguments for a virtual function and an overrider\n\nThat can cause confusion: An overrider does not inherit default arguments.\n\nFlag default arguments on virtual functions if they differ between base and derived declarations.\n\nIf you have a class with a virtual function, you don’t (in general) know which class provided the function to be used.\n\nYou can safely access a named polymorphic object in the scope of its definition, just don’t slice it.\n\nC.146: Use where class hierarchy navigation is unavoidable\n\nUse of the other casts can violate type safety and cause the program to access a variable that is actually of type to be accessed as if it were of an unrelated type :\n\nLike other casts, is overused. Prefer virtual functions to casting. Prefer static polymorphism to hierarchy navigation where it is possible (no run-time resolution necessary) and reasonably convenient.\n\nSome people use where a would have been more appropriate; is a general “is kind of” operation for discovering the best interface to an object, whereas is a “give me the exact type of this object” operation to discover the actual type of an object. The latter is an inherently simpler operation that ought to be faster. The latter ( ) is easily hand-crafted if necessary (e.g., if working on a system where RTTI is – for some reason – prohibited), the former ( ) is far harder to implement correctly in general.\n\nThe result of is actually implementation defined. We added it to warn of the dangers of home-brew RTTI. This code might work as expected for years, just to fail on a new machine, new compiler, or a new linker that does not unify character literals.\n\nIf you implement your own RTTI, be careful.\n\nIf your implementation provided a really slow , you might have to use a workaround. However, all workarounds that cannot be statically resolved involve explicit casting (typically ) and are error-prone. You will basically be crafting your own special-purpose . So, first make sure that your really is as slow as you think it is (there are a fair number of unsupported rumors about) and that your use of is really performance critical.\n\nWe are of the opinion that current implementations of are unnecessarily slow. For example, under suitable conditions, it is possible to perform a in fast constant time. However, compatibility makes changes difficult even if all agree that an effort to optimize is worthwhile.\n\nIn very rare cases, if you have measured that the overhead is material, you have other means to statically guarantee that a downcast will succeed (e.g., you are using CRTP carefully), and there is no virtual inheritance involved, consider tactically resorting with a prominent comment and disclaimer summarizing this paragraph and that human attention is needed under maintenance because the type system can’t verify correctness. Even so, in our experience such “I know what I’m doing” situations are still a known bug source.\n• Flag all uses of for downcasts, including C-style casts that perform a .\n• This rule is part of the type-safety profile.\n\nC.147: Use to a reference type when failure to find the required class is considered an error\n\nCasting to a reference expresses that you intend to end up with a valid object, so the cast must succeed. will then throw if it does not succeed.\n\nC.148: Use to a pointer type when failure to find the required class is considered a valid alternative\n\nThe conversion allows to test whether a pointer is pointing at a polymorphic object that has a given class in its hierarchy. Since failure to find the class merely returns a null value, it can be tested during run time. This allows writing code that can choose alternative paths depending on the results.\n\nContrast with C.147, where failure is an error, and should not be used for conditional execution.\n\nThe example below describes the function of a that takes ownership of constructed objects. The objects are also sorted into views, according to their geometric attributes. In this example, does not inherit from . Only its subclasses do.\n\nA failure to find the required class will cause to return a null value, and de-referencing a null-valued pointer will lead to undefined behavior. Therefore the result of the should always be treated as if it might contain a null value, and tested.\n• (Complex) Unless there is a null test on the result of a of a pointer type, warn upon dereference of the pointer.\n\nC.149: Use or to avoid forgetting to objects created using\n• Flag initialization of a naked pointer with the result of a\n\nC.150: Use to construct objects owned by s\n\nC.151: Use to construct objects owned by s\n\nC.152: Never assign a pointer to an array of derived class objects to a pointer to its base\n\nSubscripting the resulting base pointer will lead to invalid object access and probably to memory corruption.\n• Flag all combinations of array decay and base to derived conversions.\n• Pass an array as a rather than as a pointer, and don’t let the array name suffer a derived-to-base conversion before getting into the\n\nA virtual function call is safe, whereas casting is error-prone. A virtual function call reaches the most derived function, whereas a cast might reach an intermediate class and therefore give a wrong result (especially as a hierarchy is modified during maintenance).\n\nYou can overload ordinary functions, function templates, and operators. You cannot overload function objects.\n• C.163: Overload only for operations that are roughly equivalent\n• C.166: Overload unary only as part of a system of smart pointers and references\n• C.167: Use an operator for an operation with its conventional meaning\n• C.168: Define overloaded operators in the namespace of their operands\n• C.170: If you feel like overloading a lambda, use a generic lambda\n\nHere, the conventional semantics is maintained: Copies compare equal.\n\nNon-member operators should be either friends or defined in the same namespace as their operands. Binary operators should treat their operands equivalently.\n\nIf you use member functions, you need two. Unless you use a non-member function for (say) , and will be subtly different.\n\nHaving different names for logically equivalent operations on different argument types is confusing, leads to encoding type information in function names, and inhibits generic programming.\n\nThese three functions all print their arguments (appropriately). Conversely:\n\nThese three functions all print their arguments (appropriately). Adding to the name just introduced verbosity and inhibits generic code.\n\nC.163: Overload only for operations that are roughly equivalent\n\nHaving the same name for logically different functions is confusing and leads to errors when using generic programming.\n\nThe two operations are fundamentally different (and unrelated) so it is good that their names differ. Conversely:\n\nThe two operations are still fundamentally different (and unrelated) but the names have been reduced to their (common) minimum, opening opportunities for confusion. Fortunately, the type system will catch many such mistakes.\n\nBe particularly careful about common and popular names, such as , , , and .\n\nImplicit conversions can be essential (e.g., to ) but often cause surprises (e.g., to C-style string).\n\nPrefer explicitly named conversions until a serious need is demonstrated. By “serious need” we mean a reason that is fundamental in the application domain (such as an integer to complex number conversion) and frequently needed. Do not introduce implicit conversions (through conversion operators or non- constructors) just to gain a minor convenience.\n\nThe surprising and potentially damaging implicit conversion can occur in arbitrarily hard-to spot contexts, e.g.,\n\nThe string returned by is destroyed before the returned pointer into it can be used.\n\nTo find function objects and functions defined in a separate namespace to “customize” a common function.\n\nConsider . It is a general (standard-library) function with a definition that will work for just about any type. However, it is desirable to define specific s for specific types. For example, the general will copy the elements of two s being swapped, whereas a good specific implementation will not copy elements at all.\n\nThe in does exactly what we asked it to do: it calls the in namespace . Unfortunately, that’s probably not what we wanted. How do we get considered?\n\nBut that might not be what we wanted for generic code. There, we typically want the specific function if it exists and the general function if not. This is done by including the general function in the lookup for the function:\n\nUnlikely, except for known customization points, such as . The problem is that the unqualified and qualified lookups both have uses.\n\nC.166: Overload unary only as part of a system of smart pointers and references\n\nThe operator is fundamental in C++. Many parts of the C++ semantics assume its default meaning.\n\nIf you “mess with” operator be sure that its definition has matching meanings for , , , and on the result type. Note that operator currently cannot be overloaded so a perfect system is impossible. We hope to remedy that: Operator Dot (R2). Note that always yields a built-in pointer.\n\nTricky. Warn if is user-defined without also defining for the result type.\n\nC.167: Use an operator for an operation with its conventional meaning\n\nBy itself, would be OK, but it is not usable/composable with code that rely on the convention for output:\n\nThere are strong and vigorous conventions for the meaning of most operators, such as\n\nDon’t define those unconventionally and don’t invent your own names for them.\n\nC.168: Define overloaded operators in the namespace of their operands\n\nReadability. Ability for find operators using ADL. Avoiding inconsistent definition in different namespaces\n\nHere, the meaning of differs in and . This can be most confusing. Remove the definition of and the confusion is replaced by an opportunity to make the mistake.\n\nIf a binary operator is defined for two types that are defined in different namespaces, you cannot follow this rule. For example:\n\nThis might be something best avoided.\n\nThis is a special case of the rule that helper functions should be defined in the same namespace as their class.\n• Flag operator definitions that are not in the namespace of their operands\n\nC.170: If you feel like overloading a lambda, use a generic lambda\n\nYou cannot overload by defining two different lambdas with the same name.\n\nThe compiler catches the attempt to overload a lambda.\n\nA is a where all members start at the same address so that it can hold only one member at a time. A does not keep track of which member is stored so the programmer has to get it right; this is inherently error-prone, but there are ways to compensate.\n\nA type that is a plus an indicator of which member is currently held is called a tagged union, a discriminated union, or a variant.\n\nA allows a single piece of memory to be used for different types of objects at different times. Consequently, it can be used to save memory when we have several objects that are never used at the same time.\n\nA naked union is a union without an associated indicator which member (if any) it holds, so that the programmer has to keep track. Naked unions are a source of type errors.\n\nSo far, so good, but we can easily misuse the :\n\nNote that the type error happened without any explicit cast. When we tested that program the last value printed was which is the integer value for the bit pattern for . What we have here is an “invisible” type error that happens to give a result that could easily look innocent.\n\nAnd, talking about “invisible”, this code produced no output:\n\nWrap a in a class together with a type field.\n\nThe C++17 type (found in ) does that for you:\n\nA well-designed tagged union is type safe. An anonymous union simplifies the definition of a class with a (tag, union) pair.\n\nThis example is mostly borrowed from TC++PL4 pp216-218. You can look there for an explanation.\n\nThe code is somewhat elaborate. Handling a type with user-defined assignment and destructor is tricky. Saving programmers from having to write such code is one reason for including in the standard.\n\nIt is undefined behavior to read a member with a different type from the one with which it was written. Such punning is invisible, or at least harder to spot than using a named cast. Type punning using a is a source of errors.\n\nThe idea of is to be able to look at the character representation of an .\n\nIf you wanted to see the bytes of an , use a (named) cast:\n\nAccessing the result of a from the object’s declared type to , , or is defined behavior. (Using is discouraged, but at least we can see that something tricky is going on.)\n\nUnfortunately, s are commonly used for type punning. We don’t consider “sometimes, it works as expected” a conclusive argument.\n\nC++17 introduced a distinct type to facilitate operations on raw object representation. Use that type instead of or for these operations.\n\nEnumerations are used to define sets of integer values and for defining types for such sets of values. There are two kinds of enumerations, “plain” s and s.\n• Enum.2: Use enumerations to represent sets of related named constants\n• Enum.4: Define operations on enumerations for safe and simple use\n• Enum.7: Specify the underlying type of an enumeration only when necessary\n• Enum.8: Specify enumerator values only when necessary\n\nMacros do not obey scope and type rules. Also, macro names are removed during preprocessing and so usually don’t appear in tools like debuggers.\n\nFirst some bad old code:\n\nInstead use an :\n\nWe used an to avoid name clashes.\n\nAlso consider and variables.\n\nFlag macros that define integer values. Use or or another non-macro alternative instead.\n\nEnum.2: Use enumerations to represent sets of related named constants\n\nAn enumeration shows the enumerators to be related and can be a named type.\n\nSwitching on an enumeration is common and the compiler can warn against unusual patterns of case labels. For example:\n\nSuch off-by-one -statements are often the results of an added enumerator and insufficient testing.\n• Flag -statements where the s cover most but not all enumerators of an enumeration.\n• Flag -statements where the s cover a few enumerators of an enumeration, but there is no .\n\nTo minimize surprises: traditional enums convert to int too readily.\n\nInstead use an :\n\nEnum.4: Define operations on enumerations for safe and simple use\n\nConvenience of use and avoidance of errors.\n\nThe use of a is not pretty, but\n\nis an infinite recursion, and writing it without a cast, using a on all cases is long-winded.\n\nIf you can’t name an enumeration, the values are not related\n\nSuch code is not uncommon in code written before there were convenient alternative ways of specifying integer constants.\n\nUse values instead. For example:\n\nEnum.7: Specify the underlying type of an enumeration only when necessary\n\nThe default is the easiest to read and write. is the default integer type. is compatible with C s.\n\nSpecifying the underlying type is necessary to forward-declare an enum or enum class:\n\nor to ensure that values of that type have a specified bit-precision:\n\nEnum.8: Specify enumerator values only when necessary\n\nIt’s the simplest. It avoids duplicate enumerator values. The default gives a consecutive set of values that is good for -statement implementations.\n\nSpecifying values is necessary to match conventional values (e.g., ) and where consecutive values are undesirable (e.g., to get separate bits as in ).\n\nThis section contains rules related to resources. A resource is anything that must be acquired and (explicitly or implicitly) released, such as memory, file handles, sockets, and locks. The reason it must be released is typically that it can be in short supply, so even delayed release might do harm. The fundamental aim is to ensure that we don’t leak any resources and that we don’t hold a resource longer than we need to. An entity that is responsible for releasing a resource is called an owner.\n\nThere are a few cases where leaks can be acceptable or even optimal: If you are writing a program that simply produces an output based on an input and the amount of memory needed is proportional to the size of the input, the optimal strategy (for performance and ease of programming) is sometimes simply never to delete anything. If you have enough memory to handle your largest input, leak away, but be sure to give a good error message if you are wrong. Here, we ignore such cases.\n• \n• R.1: Manage resources automatically using resource handles and RAII (Resource Acquisition Is Initialization)\n• R.2: In interfaces, use raw pointers to denote individual objects (only)\n• \n• R.12: Immediately give the result of an explicit resource allocation to a manager object\n• R.13: Perform at most one explicit resource allocation in a single expression statement\n• \n• R.20: Use or to represent ownership\n• R.21: Prefer over unless you need to share ownership\n• R.24: Use to break cycles of s\n• R.30: Take smart pointers as parameters only to explicitly express lifetime semantics\n• R.31: If you have non- smart pointers, follow the basic pattern from\n• R.32: Take a parameter to express that a function assumes ownership of a\n• R.33: Take a parameter to express that a function reseats the\n• R.35: Take a parameter to express that a function might reseat the shared pointer\n• R.36: Take a parameter to express that it might retain a reference count to the object ???\n• R.37: Do not pass a pointer or reference obtained from an aliased smart pointer\n\nR.1: Manage resources automatically using resource handles and RAII (Resource Acquisition Is Initialization)\n\nTo avoid leaks and the complexity of manual resource management. C++’s language-enforced constructor/destructor symmetry mirrors the symmetry inherent in resource acquire/release function pairs such as / , / , and / . Whenever you deal with a resource that needs paired acquire/release function calls, encapsulate that resource in an object that enforces pairing for you – acquire the resource in its constructor, and release it in its destructor.\n\nIn this code, you have to remember to , , and on all paths, and do each exactly once. Further, if any of the code marked throws an exception, then is leaked and remains locked.\n\nNow all resource cleanup is automatic, performed once on all paths whether or not there is an exception. As a bonus, the function now advertises that it takes over ownership of the pointer.\n\nWhat is ? A handy wrapper that encapsulates the resource:\n\nWhere a resource is “ill-behaved” in that it isn’t represented as a class with a destructor, wrap it in a class or use\n\nR.2: In interfaces, use raw pointers to denote individual objects (only)\n\nArrays are best represented by a container type (e.g., (owning)) or a (non-owning). Such containers and views hold sufficient information to do range checking.\n\nThe compiler does not read comments, and without reading other code you do not know whether really points to elements. Use a instead.\n\nC-style strings are passed as single pointers to a zero-terminated sequence of characters. Use rather than to indicate that you rely on that convention.\n\nMany current uses of pointers to a single element could be references. However, where is a possible value, a reference might not be a reasonable alternative.\n• Flag pointer arithmetic (including ) on a pointer that is not part of a container, view, or iterator. This rule would generate a huge number of false positives if applied to an older code base.\n\nThere is nothing (in the C++ standard or in most code) to say otherwise and most raw pointers are non-owning. We want owning pointers identified so that we can reliably and efficiently delete the objects pointed to by owning pointers.\n\nThe protects against leaks by guaranteeing the deletion of its object (even in the presence of exceptions). The does not.\n\nWe can fix that problem by making ownership explicit:\n\nA major class of exception is legacy code, especially code that must remain compilable as C or interface with C and C-style C++ through ABIs. The fact that there are billions of lines of code that violate this rule against owning s cannot be ignored. We’d love to see program transformation tools turning 20-year-old “legacy” code into shiny modern code, we encourage the development, deployment and use of such tools, we hope the guidelines will help the development of such tools, and we even contributed (and contribute) to the research and development in this area. However, it will take time: “legacy code” is generated faster than we can renovate old code, and so it will be for a few years.\n\nThis code cannot all be rewritten (even assuming good code transformation software), especially not soon. This problem cannot be solved (at scale) by transforming all owning pointers to s and s, partly because we need/use owning “raw pointers” as well as simple pointers in the implementation of our fundamental resource handles. For example, common implementations have one owning pointer and two non-owning pointers. Many ABIs (and essentially all interfaces to C code) use s, some of them owning. Some interfaces cannot be simply annotated with because they need to remain compilable as C (although this would be a rare good use for a macro, that expands to in C++ mode only).\n\nhas no default semantics beyond . It can be used without changing any code using it and without affecting ABIs. It is simply an indicator to programmers and analysis tools. For example, if an is a member of a class, that class better have a destructor that s it.\n\nReturning a (raw) pointer imposes a lifetime management uncertainty on the caller; that is, who deletes the pointed-to object?\n\nIn addition to suffering from the problem of leak, this adds a spurious allocation and deallocation operation, and is needlessly verbose. If Gadget is cheap to move out of a function (i.e., is small or has an efficient move operation), just return it “by value” (see “out” return values):\n\nIf pointer semantics are required (e.g., because the return type needs to refer to a base class of a class hierarchy (an interface)), return a “smart pointer.”\n• (Simple) Warn on of a raw pointer that is not an .\n• (Moderate) Warn on failure to either or explicitly an pointer on every code path.\n• (Simple) Warn if the return value of is assigned to a raw pointer.\n• (Simple) Warn if a function returns an object that was allocated within the function but has a move constructor. Suggest considering returning it by value instead.\n\nThere is nothing (in the C++ standard or in most code) to say otherwise and most raw references are non-owning. We want owners identified so that we can reliably and efficiently delete the objects pointed to by owning pointers.\n\nSee also: The raw pointer rule\n\nA scoped object is a local object, a global object, or a member. This implies that there is no separate allocation and deallocation cost in excess of that already used for the containing scope or object. The members of a scoped object are themselves scoped and the scoped object’s constructor and destructor manage the members’ lifetimes.\n\nThe following example is inefficient (because it has unnecessary allocation and deallocation), vulnerable to exception throws and returns in the part (leading to leaks), and verbose:\n• (Moderate) Warn if an object is allocated and then deallocated on all paths within a function. Suggest it should be a local stack object instead.\n\nIf your stack space is limited, it is OK to create a local to store the object on the heap instead of the stack.\n\nand do not support construction and destruction, and do not mix well with and .\n\nIn some implementations that and that might work, or maybe they will cause run-time errors.\n\nThere are applications and sections of code where exceptions are not acceptable. Some of the best such examples are in life-critical hard-real-time code. Beware that many bans on exception use are based on superstition (bad) or by concerns for older code bases with unsystematic resource management (unfortunately, but sometimes necessary). In such cases, consider the versions of .\n\nFlag explicit use of and .\n\nThe pointer returned by should belong to a resource handle (that can call ). If the pointer returned by is assigned to a plain/naked pointer, the object can be leaked.\n\nIn a large program, a naked (that is a in application code, rather than part of code devoted to resource management) is a likely bug: if you have N s, how can you be certain that you don’t need N+1 or N-1? The bug might be latent: it might emerge only during maintenance. If you have a naked , you probably need a naked somewhere, so you probably have a bug.\n\n(Simple) Warn on any explicit use of and . Suggest using instead.\n\nR.12: Immediately give the result of an explicit resource allocation to a manager object\n\nIf you don’t, an exception or a return might lead to a leak.\n\nThe allocation of might fail and leak the file handle.\n\nThe use of the file handle (in ) is simple, efficient, and safe.\n• Flag explicit allocations used to initialize pointers (problem: how many direct resource allocations can we recognize?)\n\nR.13: Perform at most one explicit resource allocation in a single expression statement\n\nIf you perform two explicit resource allocations in one statement, you could leak resources because the order of evaluation of many subexpressions, including function arguments, is unspecified.\n\nThis can be called like this:\n\nThis is exception-unsafe because the compiler might reorder the two expressions building the function’s two arguments. In particular, the compiler can interleave execution of the two expressions: Memory allocation (by calling ) could be done first for both objects, followed by attempts to call the two constructors. If one of the constructor calls throws an exception, then the other object’s memory will never be released!\n\nThis subtle problem has a simple solution: Never perform more than one explicit resource allocation in a single expression statement. For example:\n\nThe best solution is to avoid explicit allocation entirely use factory functions that return owning objects:\n\nWrite your own factory wrapper if there is not one already.\n• Flag expressions with multiple explicit resource allocations (problem: how many direct resource allocations can we recognize?)\n\nAn array decays to a pointer, thereby losing its size, opening the opportunity for range errors. Use to preserve size information.\n\nOtherwise you get mismatched operations and chaos.\n\nIf you want memory that cannot be deallocated, the deallocation operation. Don’t leave it undeclared.\n\nR.20: Use or to represent ownership\n\nThis will leak the object used to initialize (only).\n• (Simple) Warn if the return value of is assigned to a raw pointer.\n• (Simple) Warn if the result of a function returning a raw owning pointer is assigned to a raw pointer.\n\nR.21: Prefer over unless you need to share ownership\n\nA is conceptually simpler and more predictable (you know when destruction happens) and faster (you don’t implicitly maintain a use count).\n\nThis is more efficient:\n\n(Simple) Warn if a function uses a with an object allocated within the function, but never returns the or passes it to a function requiring a . Suggest using instead.\n\ngives a more concise statement of the construction. It also gives an opportunity to eliminate a separate allocation for the reference counts, by placing the ’s use counts next to its object. It also ensures exception safety in complex expressions (in pre-C++17 code).\n\nThe version mentions only once, so it is usually shorter (as well as faster) than the version with the explicit .\n\n(Simple) Warn if a is constructed from the result of rather than .\n\ngives a more concise statement of the construction. It also ensures exception safety in complex expressions (in pre-C++17 code).\n\n(Simple) Warn if a is constructed from the result of rather than .\n\nR.24: Use to break cycles of s\n\n’s rely on use counting and the use count for a cyclic structure never goes to zero, so we need a mechanism to be able to destroy a cyclic structure.\n\n??? (HS: A lot of people say “to break cycles”, while I think “temporary shared ownership” is more to the point.) ???(BS: breaking cycles is what you must do; temporarily sharing ownership is how you do it. You could “temporarily share ownership” simply by using another .)\n\n??? probably impossible. If we could statically detect cycles, we wouldn’t need\n\nR.30: Take smart pointers as parameters only to explicitly express lifetime semantics\n\nR.31: If you have non- smart pointers, follow the basic pattern from\n\nThe rules in the following section also work for other kinds of third-party and custom smart pointers and are very useful for diagnosing common smart pointer errors that cause performance and correctness problems. You want the rules to work on all the smart pointers you use.\n\nAny type (including primary template or specialization) that overloads unary and is considered a smart pointer:\n• If it is copyable, it is recognized as a reference-counted .\n• If it is not copyable, it is recognized as a unique .\n\nBoth cases are an error under the guideline: is a , but nothing about its sharedness is used here and passing it by value is a silent pessimization; these functions should accept a smart pointer only if they need to participate in the widget’s lifetime management. Otherwise they should accept a , if it can be . Otherwise, and ideally, the function should accept a . These smart pointers match the concept, so these guideline enforcement rules work on them out of the box and expose this common pessimization.\n\nR.32: Take a parameter to express that a function assumes ownership of a\n\nUsing in this way both documents and enforces the function call’s ownership transfer.\n• (Simple) Warn if a function takes a parameter by lvalue reference and does not either assign to it or call on it on at least one code path. Suggest taking a or instead.\n\nR.33: Take a parameter to express that a function reseats the\n\nUsing in this way both documents and enforces the function call’s reseating semantics.\n\n“reseat” means “making a pointer or a smart pointer refer to a different object.”\n• (Simple) Warn if a function takes a parameter by lvalue reference and does not either assign to it or call on it on at least one code path. Suggest taking a or instead.\n• (Simple) Warn if a function takes a parameter by lvalue reference and does not either assign to it or call on it on at least one code path. Suggest taking a or instead.\n• (Simple) ((Foundation)) Warn if a function takes a by value or by reference to and does not copy or move it to another on at least one code path. Suggest taking a or instead.\n• (Simple) ((Foundation)) Warn if a function takes a by rvalue reference. Suggesting taking it by value instead.\n\nR.35: Take a parameter to express that a function might reseat the shared pointer\n\n“reseat” means “making a reference or a smart pointer refer to a different object.”\n• (Simple) Warn if a function takes a parameter by lvalue reference and does not either assign to it or call on it on at least one code path. Suggest taking a or instead.\n• (Simple) ((Foundation)) Warn if a function takes a by value or by reference to and does not copy or move it to another on at least one code path. Suggest taking a or instead.\n• (Simple) ((Foundation)) Warn if a function takes a by rvalue reference. Suggesting taking it by value instead.\n\nR.36: Take a parameter to express that it might retain a reference count to the object ???\n• (Simple) Warn if a function takes a parameter by lvalue reference and does not either assign to it or call on it on at least one code path. Suggest taking a or instead.\n• (Simple) ((Foundation)) Warn if a function takes a by value or by reference to and does not copy or move it to another on at least one code path. Suggest taking a or instead.\n• (Simple) ((Foundation)) Warn if a function takes a by rvalue reference. Suggesting taking it by value instead.\n\nR.37: Do not pass a pointer or reference obtained from an aliased smart pointer\n\nViolating this rule is the number one cause of losing reference counts and finding yourself with a dangling pointer. Functions should prefer to pass raw pointers and references down call chains. At the top of the call tree where you obtain the raw pointer or reference from a smart pointer that keeps the object alive. You need to be sure that the smart pointer cannot inadvertently be reset or reassigned from within the call tree below.\n\nTo do this, sometimes you need to take a local copy of a smart pointer, which firmly keeps the object alive for the duration of the function and the call tree.\n\nThe following should not pass code review:\n\nThe fix is simple – take a local copy of the pointer to “keep a ref count” for your call tree:\n• (Simple) Warn if a pointer or reference obtained from a smart pointer variable ( or ) that is non-local, or that is local but potentially aliased, is used in a function call. If the smart pointer is a then suggest taking a local copy of the smart pointer and obtain a pointer or reference from that instead.\n\nExpressions and statements are the lowest and most direct way of expressing actions and computation. Declarations in local scopes are statements.\n\nFor naming, commenting, and indentation rules, see NL: Naming and layout.\n• ES.1: Prefer the standard library to other libraries and to “handcrafted code”\n• ES.2: Prefer suitable abstractions to direct use of language features\n• ES.6: Declare names in for-statement initializers and conditions to limit scope\n• ES.7: Keep common and local names short, and keep uncommon and non-local names longer\n• ES.10: Declare one name (only) per declaration\n• ES.11: Use to avoid redundant repetition of type names\n• ES.12: Do not reuse names in nested scopes\n• ES.21: Don’t introduce a variable (or constant) before you need to use it\n• ES.22: Don’t declare a variable until you have a value to initialize it with\n• ES.25: Declare an object or unless you want to modify its value later on\n• ES.26: Don’t use a variable for two unrelated purposes\n• ES.27: Use or for arrays on the stack\n• ES.28: Use lambdas for complex initialization, especially of variables\n• ES.31: Don’t use macros for constants or “functions”\n• ES.32: Use for all macro names\n• ES.33: If you must use macros, give them unique names\n• ES.41: If in doubt about operator precedence, parenthesize\n• ES.42: Keep use of pointers simple and straightforward\n• ES.44: Don’t depend on order of evaluation of function arguments\n• ES.47: Use rather than or\n• ES.49: If you must use a cast, use a named cast\n• ES.55: Avoid the need for range checking\n• ES.56: Write only when you need to explicitly move an object to another scope\n• ES.61: Delete arrays using and non-arrays using\n• ES.64: Use the notation for construction\n• ES.70: Prefer a -statement to an -statement when there is a choice\n• ES.71: Prefer a range- -statement to a -statement when there is a choice\n• ES.72: Prefer a -statement to a -statement when there is an obvious loop variable\n• ES.73: Prefer a -statement to a -statement when there is no obvious loop variable\n• ES.74: Prefer to declare a loop variable in the initializer part of a -statement\n• ES.77: Minimize the use of and in loops\n• ES.79: Use to handle common cases (only)\n• ES.84: Don’t try to declare a local variable with no name\n• ES.106: Don’t try to avoid negative values by using\n\nES.1: Prefer the standard library to other libraries and to “handcrafted code”\n\nCode using a library can be much easier to write than code working directly with language features, much shorter, tend to be of a higher level of abstraction, and the library code is presumably already tested. The ISO C++ Standard Library is among the most widely known and best tested libraries. It is available as part of all C++ implementations.\n\na range version of would be even better:\n\nLarge parts of the standard library rely on dynamic allocation (free store). These parts, notably the containers but not the algorithms, are unsuitable for some hard-real-time and embedded applications. In such cases, consider providing/using similar facilities, e.g., a standard-library-style container implemented using a pool allocator.\n\nNot easy. ??? Look for messy loops, nested loops, long functions, absence of function calls, lack of use of built-in types. Cyclomatic complexity?\n\nES.2: Prefer suitable abstractions to direct use of language features\n\nA “suitable abstraction” (e.g., library or class) is closer to the application concepts than the bare language, leads to shorter and clearer code, and is likely to be better tested.\n\nThe more traditional and lower-level near-equivalent is longer, messier, harder to get right, and most likely slower:\n\nOnce the checking for overflow and error handling has been added that code gets quite messy, and there is the problem remembering to the returned pointer and the C-style strings that array contains.\n\nNot easy. ??? Look for messy loops, nested loops, long functions, absence of function calls, lack of use of built-in types. Cyclomatic complexity?\n\nDuplicated or otherwise redundant code obscures intent, makes it harder to understand the logic, and makes maintenance harder, among other problems. It often arises from cut-and-paste programming.\n\nUse standard algorithms where appropriate, instead of writing some own implementation.\n• Use a static analyzer. It will catch at least some redundant constructs.\n\nA declaration is a statement. A declaration introduces a name into a scope and might cause the construction of a named object.\n\nAlternative formulation: Don’t declare a name in an unnecessarily large scope.\n\nThis function is by most measures too long anyway, but the point is that the resources used by and the file handle held by are retained for much longer than needed and that unanticipated use of and could happen later in the function. In this case, it might be a good idea to factor out the read:\n• Flag loop variable declared outside a loop and not used after the loop\n• Flag when expensive resources, such as file handles and locks are not used for N-lines (for some suitable N)\n\nES.6: Declare names in for-statement initializers and conditions to limit scope\n\nReadability. Limit the loop variable visibility to the scope of the loop. Avoid using the loop variable for other purposes after the loop. Minimize resource retention.\n\nSee also: Don’t use a variable for two unrelated purposes\n• Warn when a variable modified inside the -statement is declared outside the loop and not being used outside the loop.\n• (hard) Flag loop variables declared before the loop and used after the loop for an unrelated purpose.\n\nDiscussion: Scoping the loop variable to the loop body also helps code optimizers greatly. Recognizing that the induction variable is only accessible in the loop body unblocks optimizations such as hoisting, strength reduction, loop-invariant code motion, etc.\n\nNote: C++17 and C++20 also add , , and range- initializer statements. These require C++17 and C++20 support.\n\nC++17 and C++20 enforcement (if using a C++17 or C++20 compiler)\n• Flag selection/loop variables declared before the body and not used after the body\n• (hard) Flag selection/loop variables declared before the body and used after the body for an unrelated purpose.\n\nES.7: Keep common and local names short, and keep uncommon and non-local names longer\n\nReadability. Lowering the chance of clashes between unrelated non-local names.\n\nAn index is conventionally called and there is no hint about the meaning of the vector in this generic function, so is as good name as any. Compare\n\nYes, it is a caricature, but we have seen worse.\n\nHere, there is a chance that the reader knows what means and that the reader can remember it after looking it up.\n\nArgument names of large functions are de facto non-local and should be meaningful:\n\nWe recommend keeping functions short, but that rule isn’t universally adhered to and naming should reflect that.\n\nCheck length of local and non-local names. Also take function length into account.\n\nCode clarity and readability. Too-similar names slow down comprehension and increase the likelihood of error.\n\nDo not declare a non-type with the same name as a type in the same scope. This removes the need to disambiguate with a keyword such as or . It also removes a source of errors, as can implicitly declare if lookup fails.\n\nAntique header files might declare non-types and types with the same name in the same scope.\n• Check names against a list of known confusing letter and digit combinations.\n• Flag a declaration of a variable, function, or enumerator that hides a class or enumeration declared in the same scope.\n\nSuch names are commonly used for macros. Thus, name are vulnerable to unintended macro substitution.\n\nDo not use for constants just because constants used to be macros.\n\nFlag all uses of ALL CAPS. For older code, accept ALL CAPS for macro names and flag all non-ALL-CAPS macro names.\n\nES.10: Declare one name (only) per declaration\n\nOne declaration per line increases readability and avoids mistakes related to the C/C++ grammar. It also leaves room for a more descriptive end-of-line comment.\n\nA function declaration can contain several function argument declarations.\n\nA structured binding (C++17) is specifically designed to introduce several variables:\n\nor better using concepts:\n\nIn a long list of declarators it is easy to overlook an uninitialized variable.\n\nES.11: Use to avoid redundant repetition of type names\n• When you use , the name of the declared entity is in a fixed position in the declaration, increasing readability.\n• In a function template declaration the return type can be a member type.\n\nIn each case, we save writing a longish, hard-to-remember type that the compiler already knows but a programmer could get wrong.\n\nAvoid for initializer lists and in cases where you know exactly which type you want and where an initializer might require conversion.\n\nAs of C++20, we can (and should) use concepts to be more specific about the type we are deducing:\n\nES.12: Do not reuse names in nested scopes\n\nIt is easy to get confused about which variable is used. Can cause maintenance problems.\n\nIf this is a large -statement, it is easy to overlook that a new has been introduced in the inner scope. This is a known source of bugs. Sometimes such reuse of a name in an inner scope is called “shadowing”.\n\nShadowing is primarily a problem when functions are too large and too complex.\n\nShadowing of function arguments in the outermost block is disallowed by the language:\n\nReuse of a member name as a local variable can also be a problem:\n\nWe often reuse function names from a base class in a derived class:\n\nThis is error-prone. For example, had we forgotten the using declaration, a call would not have found the version of .\n\n??? Do we need a specific rule about shadowing/hiding in class hierarchies?\n• Flag reuse of a name in nested local scopes\n• Flag reuse of a member name as a local variable in a member function\n• Flag reuse of a global name as a local variable or a member name\n• Flag reuse of a base class member name in a derived class (except for function names)\n\nAvoid used-before-set errors and their associated undefined behavior. Avoid problems with comprehension of complex initialization. Simplify refactoring.\n\nNo, does not initialize ; it assigns to it. Also, can be read in the part. Better:\n\nThe always initialize rule is deliberately stronger than the an object must be set before used language rule. The latter, more relaxed rule, catches the technical bugs, but:\n• It leads to less readable code\n• It encourages people to declare names in greater than necessary scopes\n• It leads to harder to read code\n• It leads to logic bugs by encouraging complex code\n\nThe always initialize rule is a style rule aimed to improve maintainability as well as a rule protecting against used-before-set errors.\n\nHere is an example that is often considered to demonstrate the need for a more relaxed rule for initialization\n\nThis cannot trivially be rewritten to initialize and with initializers. Note that for types with a default constructor, attempting to postpone initialization simply leads to a default initialization followed by an assignment. A popular reason for such examples is “efficiency”, but a compiler that can detect whether we made a used-before-set error can also eliminate any redundant double initialization.\n\nAssuming that there is a logical connection between and , that connection should probably be expressed in code:\n\nIf the function is otherwise redundant, we can eliminate it by using a lambda ES.28:\n\nUsing a value representing “uninitialized” is a symptom of a problem and not a solution:\n\nNow the compiler cannot even simply detect a used-before-set. Further, we’ve introduced complexity in the state space for widget: which operations are valid on an widget and which are not?\n\nComplex initialization has been popular with clever programmers for decades. It has also been a major source of errors and complexity. Many such errors are introduced during maintenance years after the initial implementation.\n\nThe compiler will flag the uninitialized because it is a , but it will not catch the lack of initialization of . Usually, a rare spurious member initialization is worth the absence of errors from lack of initialization and often an optimizer can eliminate a redundant initialization (e.g., an initialization that occurs immediately before an assignment).\n\nIf you are declaring an object that is just about to be initialized from input, initializing it would cause a double initialization. However, beware that this might leave uninitialized data beyond the input – and that has been a fertile source of errors and security breaches:\n\nThe cost of initializing that array could be significant in some situations. However, such examples do tend to leave uninitialized variables accessible, so they should be treated with suspicion.\n\nBecause of the restrictive initialization rules for arrays and , they offer the most compelling examples of the need for this exception.\n\nWhen feasible use a library function that is known not to overflow. For example:\n\nDon’t consider simple variables that are targets for input operations exceptions to this rule:\n\nIn the not uncommon case where the input target and the input operation get separated (as they should not) the possibility of used-before-set opens up.\n\nA good optimizer should know about input operations and eliminate the redundant operation.\n\nSometimes, a lambda can be used as an initializer to avoid an uninitialized variable:\n• Flag every uninitialized variable. Don’t flag variables of user-defined types with default constructors.\n• Check that an uninitialized buffer is written into immediately after declaration. Passing an uninitialized variable as a reference to non- argument can be assumed to be a write into the variable.\n\nES.21: Don’t introduce a variable (or constant) before you need to use it\n\nReadability. To limit the scope in which the variable can be used.\n\nFlag declarations that are distant from their first use.\n\nES.22: Don’t declare a variable until you have a value to initialize it with\n\nReadability. Limit the scope in which a variable can be used. Don’t risk used-before-set. Initialization is often more efficient than assignment.\n\nThis would be fine if there was a default initialization for that wasn’t too expensive. Otherwise, a programmer might very well wonder if every possible path through the maze of conditions has been covered. If not, we have a “use before set” bug. This is a maintenance trap.\n\nFor initializers of moderate complexity, including for variables, consider using a lambda to express the initializer; see ES.28.\n• Flag declarations with default initialization that are assigned to before they are first read.\n• Flag any complicated computation after an uninitialized variable and before its use.\n\nPrefer . The rules for initialization are simpler, more general, less ambiguous, and safer than for other forms of initialization.\n\nUse only when you are sure that there can be no narrowing conversions. For built-in arithmetic types, use only with .\n\nFor containers, there is a tradition for using for a list of elements and for sizes:\n\n-initializers do not allow narrowing conversions (and that is usually a good thing) and allow explicit constructors (which is fine, we’re intentionally initializing a new variable).\n\ninitialization can be used for nearly all initialization; other forms of initialization can’t:\n\nFor that reason, -initialization is often called “uniform initialization” (though there unfortunately are a few irregularities left).\n\nInitialization of a variable declared using with a single value, e.g., , had surprising results until C++17. The C++17 rules are somewhat less surprising:\n\nUse if you really want an\n\ngives copy initialization whereas gives direct initialization. Like the distinction between copy-initialization and direct-initialization itself, this can lead to surprises. accepts constructors; does not. For example:\n\nUse plain -initialization unless you specifically want to disable explicit constructors.\n• Flag uses of to initialize arithmetic types where narrowing occurs.\n• Flag uses of initialization syntax that are actually declarations. (Many compilers should warn on this already.)\n\nUsing is the simplest way to avoid leaks. It is reliable, it makes the type system do much of the work to validate ownership safety, it increases readability, and it has zero or near zero run-time cost.\n\nIf the object pointed to by is leaked and the object pointed to by is not. The same is the case when throws. In both cases, the statement is not reached.\n\nLook for raw pointers that are targets of , , or functions that might return such pointers.\n\nES.25: Declare an object or unless you want to modify its value later on\n\nThat way you can’t change the value by mistake. That way might offer the compiler optimization opportunities.\n\nLook to see if a variable is actually mutated, and flag it if not. Unfortunately, it might be impossible to detect when a non- was not intended to vary (vs when it merely did not vary).\n\nES.26: Don’t use a variable for two unrelated purposes\n\nAs an optimization, you might want to reuse a buffer as a scratch pad, but even then prefer to limit the variable’s scope as much as possible and be careful not to cause bugs from data left in a recycled buffer as this is a common source of security bugs.\n\nES.27: Use or for arrays on the stack\n\nThey are readable and don’t implicitly convert to pointers. They are not confused with non-standard extensions of built-in arrays.\n\nThe definition of is legal C++ and has always been. There is a lot of such code. It is error-prone, though, especially when the bound is non-local. Also, it is a “popular” source of errors (buffer overflow, pointers from array decay, etc.). The definition of is C but not C++ and is considered a security risk\n\nES.28: Use lambdas for complex initialization, especially of variables\n\nIt nicely encapsulates local initialization, including cleaning up scratch variables needed only for the initialization, without needing to create a needless non-local yet non-reusable function. It also works for variables that should be but only after some initialization work.\n\nIf at all possible, reduce the conditions to a simple set of alternatives (e.g., an ) and don’t mix up selection and initialization.\n\nHard. At best a heuristic. Look for an uninitialized variable followed by a loop assigning to it.\n\nMacros are a major source of bugs. Macros don’t obey the usual scope and type rules. Macros ensure that the human reader sees something different from what the compiler sees. Macros complicate tool building.\n\nThis innocuous-looking macro makes a single lower case instead of a into a bad flow-control bug.\n\nThis rule does not ban the use of macros for “configuration control” use in s, etc.\n\nIn the future, modules are likely to eliminate the need for macros in configuration control.\n\nThis rule is meant to also discourage use of for stringification and for concatenation. As usual for macros, there are uses that are “mostly harmless”, but even these can create problems for tools, such as auto completers, static analyzers, and debuggers. Often the desire to use fancy macros is a sign of an overly complex design. Also, and encourages the definition and use of macros:\n\nThere are workarounds for low-level string manipulation using macros. For example:\n\nThis is not as convenient as a macro to define, but as easy to use, has zero overhead, and is typed and scoped.\n\nIn the future, static reflection is likely to eliminate the last needs for the preprocessor for program text manipulation.\n\nScream when you see a macro that isn’t just used for source control (e.g., )\n\nES.31: Don’t use macros for constants or “functions”\n\nMacros are a major source of bugs. Macros don’t obey the usual scope and type rules. Macros don’t obey the usual rules for argument passing. Macros ensure that the human reader sees something different from what the compiler sees. Macros complicate tool building.\n\nEven if we hadn’t left a well-known bug in there are much better behaved alternatives; for example:\n\nScream when you see a macro that isn’t just used for source control (e.g., )\n\nES.32: Use for all macro names\n\nScream when you see a lower case macro.\n\nES.33: If you must use macros, give them unique names\n\nAvoid macros if you can: ES.30, ES.31, and ES.32. However, there are billions of lines of code littered with macros and a long tradition for using and overusing macros. If you are forced to use macros, use long names and supposedly unique prefixes (e.g., your organization’s name) to lower the likelihood of a clash.\n\nNot type safe. Requires messy cast-and-macro-laden code to get working right.\n\nThis is basically the way is implemented.\n\nSome of these expressions are unconditionally bad (e.g., they rely on undefined behavior). Others are simply so complicated and/or unusual that even good programmers could misunderstand them or overlook a problem when in a hurry.\n\nC++17 tightens up the rules for the order of evaluation (left-to-right except right-to-left in assignments, and the order of evaluation of function arguments is unspecified; see ES.43), but that doesn’t change the fact that complicated expressions are potentially confusing.\n\nA programmer should know and use the basic rules for expressions.\n\nTricky. How complicated must an expression be to be considered complicated? Writing computations as statements with one operation each is also confusing. Things to consider:\n• side effects: side effects on multiple non-local variables (for some definition of non-local) can be suspect, especially if the side effects are in separate subexpressions\n• more than N operators (and what should N be?)\n• uses undefined behavior (can we catch all undefined behavior?)\n\nES.41: If in doubt about operator precedence, parenthesize\n\nAvoid errors. Readability. Not everyone has the operator table memorized.\n\nNote: We recommend that programmers know their precedence table for the arithmetic operations, the logical operations, but consider mixing bitwise logical operations with other operators in need of parentheses.\n\nYou should know enough not to need parentheses for:\n• Flag combinations of bitwise-logical operators and other operators.\n• Flag assignment operators not as the leftmost operator.\n\nES.42: Keep use of pointers simple and straightforward\n\nUse instead. Pointers should only refer to single objects. Pointer arithmetic is fragile and easy to get wrong, the source of many, many bad bugs and security violations. is a bounds-checked, safe type for accessing arrays of data. Access into an array with known bounds using a constant as a subscript can be validated by the compiler.\n\nSubscripting with a variable is difficult for both tools and humans to validate as safe. is a run-time bounds-checked, safe type for accessing arrays of data. is another alternative that ensures single accesses are bounds-checked. If iterators are needed to access an array, use the iterators from a constructed over the array.\n\nTooling can offer rewrites of array accesses that involve dynamic index expressions to use instead:\n\nTurning an array into a pointer (as the language does essentially always) removes opportunities for checking, so avoid it\n\nIf you want to pass an array, say so:\n• Flag any arithmetic operation on an expression of pointer type that results in a value of pointer type.\n• Flag any indexing expression on an expression or variable of array type (either static array or ) where the indexer is not a compile-time constant expression with a value between and the upper bound of the array.\n• Flag any expression that would rely on implicit conversion of an array type to a pointer type.\n\nThis rule is part of the bounds-safety profile.\n\nYou have no idea what such code does. Portability. Even if it does something sensible for you, it might do something different on another compiler (e.g., the next release of your compiler) or with a different optimizer setting.\n\nC++17 tightens up the rules for the order of evaluation: left-to-right except right-to-left in assignments, and the order of evaluation of function arguments is unspecified.\n\nHowever, remember that your code might be compiled with a pre-C++17 compiler (e.g., through cut-and-paste) so don’t be too clever.\n\nA good rule of thumb is that you should not read a value twice in an expression where you write to it.\n\nCan be detected by a good analyzer.\n\nES.44: Don’t depend on order of evaluation of function arguments\n\nBecause that order is unspecified.\n\nC++17 tightens up the rules for the order of evaluation, but the order of evaluation of function arguments is still unspecified.\n\nBefore C++17, the behavior is undefined, so the behavior could be anything (e.g., ). Since C++17, this code does not have undefined behavior, but it is still not specified which argument is evaluated first. The call will be or , but you don’t know which.\n\nOverloaded operators can lead to order of evaluation problems:\n\nIn C++17, these examples work as expected (left to right) and assignments are evaluated right to left (just as =’s binding is right-to-left)\n\nCan be detected by a good analyzer.\n\nUnnamed constants embedded in expressions are easily overlooked and often hard to understand:\n\nNo, we don’t all know that there are 12 months, numbered 1..12, in a year. Better:\n\nFlag literals in code. Give a pass to , , , , , and others on a positive list.\n\nThe guidelines support library offers a operation for specifying that narrowing is acceptable and a (“narrow if”) that throws an exception if a narrowing would throw away legal values:\n\nWe also include lossy arithmetic casts, such as from a negative floating point type to an unsigned integral type:\n\nThis rule does not apply to contextual conversions to bool:\n\nA good analyzer can detect all narrowing conversions. However, flagging all narrowing conversions will lead to a lot of false positives. Suggestions:\n• Flag all floating-point to integer conversions (maybe only -> and -> . Here be dragons! we need data).\n• Flag all -> (I suspect -> is very common. Here be dragons! we need data).\n• Consider narrowing conversions for function arguments especially suspect.\n\nES.47: Use rather than or\n\nReadability. Minimize surprises: cannot be confused with an . also has a well-specified (very restrictive) type, and thus works in more scenarios where type deduction might do the wrong thing on or .\n\nFlag uses of and for pointers. The transformation might be helped by simple program transformation.\n\nCasts are a well-known source of errors and make some optimizations unreliable.\n\nWhat would you think this fragment prints? The result is at best implementation defined. I got\n\nProgrammers who write casts typically assume that they know what they are doing, or that writing a cast makes the program “easier to read”. In fact, they often disable the general rules for using values. Overload resolution and template instantiation usually pick the right function if there is a right function to pick. If there is not, maybe there ought to be, rather than applying a local fix (cast).\n\nCasts are necessary in a systems programming language. For example, how else would we get the address of a device register into a pointer? However, casts are seriously overused as well as a major source of errors.\n\nIf you feel the need for a lot of casts, there might be a fundamental design problem.\n\nNever cast to to ignore a return value. If you deliberately want to discard such a result, first think hard about whether that is really a good idea (there is usually a good reason the author of the function or of the return type used in the first place). If you still think it’s appropriate and your code reviewer agrees, use to turn off the warning which is simple, portable, and easy to grep.\n\nCasts are widely (mis)used. Modern C++ has rules and constructs that eliminate the need for casts in many contexts, such as\n• Rely on the well-defined, safe, implicit conversions between pointer types\n• Flag functional style casts using . Use instead which is not narrowing. (See ES.64.)\n• Flag identity casts between pointer types, where the source and target types are the same (#Pro-type-identitycast).\n• Flag an explicit pointer cast that could be implicit.\n\nES.49: If you must use a cast, use a named cast\n\nReadability. Error avoidance. Named casts are more specific than a C-style or functional cast, allowing the compiler to catch some errors.\n• // is an rvalue reference to\n• // is an rvalue or an lvalue reference to depending on\n• // is if or it throws\n\nThe example was synthesized from real-world bugs where used to be derived from , but someone refactored the hierarchy. The C-style cast is dangerous because it can do any kind of conversion, depriving us of any protection from mistakes (now or in the future).\n\nWhen converting between types with no information loss (e.g. from to or from to ), brace initialization might be used instead.\n\nThis makes it clear that the type conversion was intended and also prevents conversions between types that might result in loss of precision. (It is a compilation error to try to initialize a from a in this fashion, for example.)\n\ncan be essential, but the essential uses (e.g., turning a machine address into pointer) are not type safe:\n• Flag functional style casts using . Use instead which is not narrowing. (See ES.64.)\n• The type profile warns when using between arithmetic types.\n\nIt makes a lie out of . If the variable is actually declared , modifying it results in undefined behavior.\n\nSometimes, you might be tempted to resort to to avoid code duplication, such as when two accessor functions that differ only in -ness have similar implementations. For example:\n\nInstead, prefer to share implementations. Normally, you can just have the non- function call the function. However, when there is complex logic this can lead to the following pattern that still resorts to a :\n\nAlthough this pattern is safe when applied correctly, because the caller must have had a non- object to begin with, it’s not ideal because the safety is hard to enforce automatically as a checker rule.\n\nInstead, prefer to put the common code in a common helper function – and make it a template so that it deduces . This doesn’t use any at all:\n\nNote: Don’t do large non-dependent work inside a template, which leads to code bloat. For example, a further improvement would be if all or part of can be non-dependent and factored out into a common non-template function, for a potentially big reduction in code size.\n\nYou might need to cast away when calling -incorrect functions. Prefer to wrap such functions in inline -correct wrappers to encapsulate the cast in one place.\n\nSometimes, “cast away ” is to allow the updating of some transient information of an otherwise immutable object. Examples are caching, memoization, and precomputation. Such examples are often handled as well or better using or an indirection than with a .\n\nConsider keeping previously computed results around for a costly operation:\n\nHere, is logically constant, so we would like to make it a member. To do this we still need to mutate , so people sometimes resort to a :\n\nFortunately, there is a better solution: State that is mutable even for a object:\n\nAn alternative solution would be to store a pointer to the :\n\nThat solution is the most flexible, but requires explicit construction and destruction of (most likely in the constructor and destructor of ).\n\nIn any variant, we must guard against data races on the in multi-threaded code, possibly using a .\n• This rule is part of the type-safety profile for the related Profile.\n\nES.55: Avoid the need for range checking\n\nConstructs that cannot overflow do not overflow (and usually run faster):\n\nLook for explicit range checks and heuristically suggest alternatives.\n\nES.56: Write only when you need to explicitly move an object to another scope\n\nWe move, rather than copy, to avoid duplication and for improved performance.\n\nA move typically leaves behind an empty object (C.64), which can be surprising or even dangerous, so we try to avoid moving from lvalues (they might be accessed later).\n\nMoving is done implicitly when the source is an rvalue (e.g., value in a treatment or a function result), so don’t pointlessly complicate code in those cases by writing explicitly. Instead, write short functions that return values, and both the function’s return and the caller’s accepting of the return will be optimized naturally.\n\nIn general, following the guidelines in this document (including not making variables’ scopes needlessly large, writing short functions that return values, returning local variables) help eliminate most need for explicit .\n\nExplicit is needed to explicitly move an object to another scope, notably to pass it to a “sink” function and in the implementations of the move operations themselves (move constructor, move assignment operator) and swap operations.\n\nUsually, a is used as an argument to a parameter. And after you do that, assume the object has been moved from (see C.64) and don’t read its state again until you first set it to a new value.\n\nis a cast to in disguise; it doesn’t itself move anything, but marks a named object as a candidate that can be moved from. The language already knows the common cases where objects can be moved from, especially when returning values from functions, so don’t complicate code with redundant ’s.\n\nNever write just because you’ve heard “it’s more efficient.” In general, don’t believe claims of “efficiency” without data (???). In general, don’t complicate your code without reason (??). Never write on a const object, it is silently transformed into a copy (see Item 23 in Meyers15)\n\nNever write , because the language already knows the variable is a move candidate. Writing in this code won’t help, and can actually be detrimental because on some compilers it interferes with RVO (the return value optimization) by creating an additional reference alias to the local variable.\n\nNever write on a returned value such as where returns by value. The language already knows that a returned value is a temporary object that can be moved from.\n• Flag use of where is an rvalue or the language will already treat it as an rvalue, including and on a function that returns by value.\n• Flag functions taking an parameter if there is no overload to take care of lvalues.\n• Flag a d argument passed to a parameter, except when the parameter type is an rvalue reference or the type is move-only and the parameter is passed by value.\n• Flag when is applied to a forwarding reference ( where is a template parameter type). Use instead.\n• Flag when is applied to other than an rvalue reference to non-const. (More general case of the previous rule to cover the non-forwarding cases.)\n• Flag when is applied to an rvalue reference ( where is a non-template parameter type). Use instead.\n• Flag when is applied to other than a forwarding reference. (More general case of the previous rule to cover the non-moving cases.)\n• Flag when an object is potentially moved from and the next operation is a operation; there should first be an intervening non- operation, ideally assignment, to first reset the object’s value.\n\nDirect resource management in application code is error-prone and tedious.\n\nThis is also known as the rule of “No naked !”\n\nThere can be code in the part that causes the never to happen.\n\nES.61: Delete arrays using and non-arrays using\n\nThat’s what the language requires, and mismatches can lead to resource release errors and/or memory corruption.\n\nThis example not only violates the no naked rule as in the previous example, it has many more problems.\n• Flag mismatched and if they are in the same scope.\n• Flag mismatched and if they are in a constructor/destructor pair.\n\nThe result of doing so is undefined.\n\nThis example has many more problems.\n\nSlicing – that is, copying only part of an object using assignment or initialization – most often leads to errors because the object was meant to be considered as a whole. In the rare cases where the slicing was deliberate the code can be surprising.\n\nThe result will be meaningless because the center and radius will not be copied from into . The first defense against this is to define the base class not to allow this.\n\nIf you mean to slice, define an explicit operation to do so. This saves readers from confusion. For example:\n\nES.64: Use the notation for construction\n\nThe construction syntax makes it explicit that construction is desired. The construction syntax doesn’t allow narrowing. is the only safe and general expression for constructing a value of type from an expression . The casts notations and are neither safe nor general.\n\nFor built-in types, the construction notation protects against narrowing and reinterpretation\n\nThe integer to/from pointer conversions are implementation defined when using the or notations, and non-portable between platforms with different integer and pointer sizes.\n\nAvoid casts (explicit type conversion) and if you must prefer named casts.\n\nWhen unambiguous, the can be left out of .\n\nThe construction notation is the most general initializer notation.\n\nand other containers were defined before we had as a notation for construction. Consider:\n\nHow do we get a of 10 default initialized s?\n\nThe use of rather than for number of elements is conventional (going back to the early 1980s), hard to change, but still a design error: for a container where the element type can be confused with the number of elements, we have an ambiguity that must be resolved. The conventional resolution is to interpret as a list of one element and use to distinguish a size.\n\nThis mistake need not be repeated in new code. We can define a type to represent the number of elements:\n\nThe main problem left is to find a suitable name for .\n\nDereferencing an invalid pointer, such as , is undefined behavior, typically leading to immediate crashes, wrong results, or memory corruption.\n\nBy pointer here we mean any indirection to an object, including equivalently an iterator or view.\n\nThis rule is an obvious and well-known language rule, but can be hard to follow. It takes good coding style, library support, and static analysis to eliminate violations without major overhead. This is a major part of the discussion of C++’s model for type- and resource-safety.\n• Use the bounds profile to avoid range errors.\n\nTo resolve the problem, either extend the lifetime of the object the pointer is intended to refer to, or shorten the lifetime of the pointer (move the dereference to before the pointed-to object’s lifetime ends).\n\nUnfortunately, most invalid pointer problems are harder to spot and harder to fix.\n\nThere is a huge amount of such code. Most works – after lots of testing – but in isolation it is impossible to tell whether could be the . Consequently, this is also a major source of errors. There are many approaches to dealing with this potential problem:\n\nThere are two potential problems with testing for :\n• it is not always obvious what to do if we find\n• the test can be redundant and/or relatively expensive\n• it is not obvious if the test is to protect against a violation or part of the required logic.\n\nThis would carry a cost only when the assertion checking was enabled and would give a compiler/analyzer useful information. This would work even better if/when C++ gets direct support for contracts:\n\nAlternatively, we could use to ensure that is not the .\n\nThese remedies take care of only. Remember that there are other ways of getting an invalid pointer.\n\nThis rule is part of the lifetime safety profile\n• Flag a dereference of a pointer that points to an object that has gone out of scope\n• Flag a dereference of a pointer that might have been invalidated by assigning a\n• Flag a dereference of a pointer that might have been invalidated by a\n• Flag a dereference to a pointer to a container element that might have been invalidated by dereference\n\nStatements control the flow of control (except for function calls and exception throws, which are expressions).\n\nES.70: Prefer a -statement to an -statement when there is a choice\n• Efficiency: A compares against constants and is usually better optimized than a series of tests in an - - chain.\n• A enables some heuristic consistency checking. For example, have all values of an been covered? If not, is there a ?\n\nFlag - - chains that check against constants (only).\n\nES.71: Prefer a range- -statement to a -statement when there is a choice\n\nA human or a good static analyzer might determine that there really isn’t a side effect on in so that the loop can be rewritten.\n\n“Messing with the loop variable” in the body of a loop is typically best avoided.\n\nDon’t use expensive copies of the loop variable of a range- loop:\n\nThis will copy each element of into . Better:\n\nBetter still, if the loop variable isn’t modified or copied:\n\nLook at loops, if a traditional loop just looks at each element of a sequence, and there are no side effects on what it does with the elements, rewrite the loop to a ranged- loop.\n\nES.72: Prefer a -statement to a -statement when there is an obvious loop variable\n\nReadability: the complete logic of the loop is visible “up front”. The scope of the loop variable can be limited.\n\nES.73: Prefer a -statement to a -statement when there is no obvious loop variable\n\nThe “event loop” is misleading because the counter has nothing to do with the loop condition ( ). Better\n\nFlag actions in -initializers and -increments that do not relate to the -condition.\n\nES.74: Prefer to declare a loop variable in the initializer part of a -statement\n\nReadability, avoidance of errors. The termination condition is at the end (where it can be overlooked) and the condition is not checked the first time through.\n\nYes, there are genuine examples where a -statement is a clear statement of a solution, but also many bugs.\n\nReadability, avoidance of errors. There are better control structures for humans; is for machine generated code.\n\nBreaking out of a nested loop. In that case, always jump forwards.\n\nThere is a fair amount of use of the C goto-exit idiom:\n\nThis is an ad-hoc simulation of destructors. Declare your resources with handles with destructors that clean up. If for some reason you cannot handle all cleanup with destructors for the variables used, consider as a cleaner and more reliable alternative to\n• Flag . Better still flag all s that do not jump from a nested loop to the statement immediately after a nest of loops.\n\nES.77: Minimize the use of and in loops\n\nIn a non-trivial loop body, it is easy to overlook a or a .\n\nA in a loop has a dramatically different meaning than a in a -statement (and you can have -statement in a loop and a loop in a -case).\n\nOften, a loop that requires a is a good candidate for a function (algorithm), in which case the becomes a .\n\nOften, a loop that uses can equivalently and as clearly be expressed by an -statement.\n\nIf you really need to break out a loop, a is typically better than alternatives such as modifying the loop variable or a :\n\nAlways end a non-empty with a . Accidentally leaving out a is a fairly common bug. A deliberate fallthrough can be a maintenance hazard and should be rare and explicit.\n\nMultiple case labels of a single statement is OK:\n\nReturn statements in a case label are also OK:\n\nIn rare cases if fallthrough is deemed appropriate, be explicit and use the annotation:\n\nES.79: Use to handle common cases (only)\n\nHere it is clear that there is a default action and that cases and are special.\n\nBut what if there is no default action and you mean to handle only specific cases? In that case, have an empty default or else it is impossible to know if you meant to handle all cases:\n\nIf you leave out the , a maintainer and/or a compiler might reasonably assume that you intended to handle all cases:\n\nDid you forget case or deliberately leave it out? Forgetting a case typically happens when a case is added to an enumeration and the person doing so fails to add it to every switch over the enumerators.\n\nFlag -statements over an enumeration that don’t handle all enumerators and do not have a . This might yield too many false positives in some code bases; if so, flag only es that handle most but not all cases (that was the strategy of the very first C++ compiler).\n\nES.84: Don’t try to declare a local variable with no name\n\nThere is no such thing. What looks to a human like a variable without a name is to the compiler a statement consisting of a temporary that immediately goes out of scope.\n\nThis declares an unnamed object that immediately goes out of scope at the point of the semicolon. This is not an uncommon mistake. In particular, this particular example can lead to hard-to find race conditions.\n\nFlag statements that are just a temporary.\n\nFlag empty statements that are not blocks and don’t contain comments.\n\nThe loop control up front should enable correct reasoning about what is happening inside the loop. Modifying loop counters in both the iteration-expression and inside the body of the loop is a perennial source of surprises and bugs.\n\nFlag variables that are potentially updated (have a non- use) in both the loop control iteration-expression and the loop body.\n\nDoing so avoids verbosity and eliminates some opportunities for mistakes. Helps make style consistent and conventional.\n\nBy definition, a condition in an -statement, -statement, or a -statement selects between and . A numeric value is compared to and a pointer value to .\n\nOften, is read as “if is valid” which is a direct expression of the programmers intent, whereas would be a long-winded workaround.\n\nThis rule is especially useful when a declaration is used as a condition\n\nNote that implicit conversions to bool are applied in conditions. For example:\n\nExplicit comparison of an integer to is in general not redundant. The reason is that (as opposed to pointers and Booleans) an integer often has more than two reasonable values. Furthermore (zero) is often used to indicate success. Consequently, it is best to be specific about the comparison.\n\nAlways remember that an integer can have more than two values.\n\nIt has been noted that\n\nis a common beginners error. If you use C-style strings, you must know the functions well. Being verbose and writing\n\nwould not in itself save you.\n\nThe opposite condition is most easily expressed using a negation:\n\nEasy, just check for redundant use of and in conditions.\n\nIt is harder to spot the problem in more realistic examples.\n\nUnfortunately, C++ uses signed integers for array subscripts and the standard library uses unsigned integers for container subscripts. This precludes consistency. Use for subscripts; see ES.107.\n• Compilers already know and sometimes warn.\n• (To avoid noise) Do not flag on a mixed signed/unsigned comparison where one of the arguments is or a call to container and the other is .\n\nUnsigned types can also be useful for modular arithmetic. However, if you want modular arithmetic add comments as necessary noting the reliance on wraparound behavior, as such code can be surprising for many programmers.\n• Just about impossible in general because of the use of unsigned subscripts in the standard library\n\nBecause most arithmetic is assumed to be signed; yields a negative number when except in the rare cases where you really want modular arithmetic.\n\nUnsigned arithmetic can yield surprising results if you are not expecting it. This is even more true for mixed signed and unsigned arithmetic.\n\nHere we have been very explicit about what’s happening, but if you had seen or , would you reliably have suspected that the result would print as ?\n\nUse unsigned types if you really want modular arithmetic - add comments as necessary noting the reliance on overflow behavior, as such code is going to be surprising for many programmers.\n\nThe standard library uses unsigned types for subscripts. The built-in array uses signed types for subscripts. This makes surprises (and bugs) inevitable.\n\nUse for subscripts; see ES.107.\n• Flag results of unsigned arithmetic assigned to or printed as signed.\n• (To avoid noise) Do not flag on a mixed signed/unsigned comparison where one of the arguments is or a call to container and the other is .\n\nOverflow usually makes your numeric algorithm meaningless. Incrementing a value beyond a maximum value can lead to memory corruption and undefined behavior.\n\nUse unsigned types if you really want modular arithmetic.\n\nAlternative: For critical applications that can afford some overhead, use a range-checked integer and/or floating-point type.\n\nDecrementing a value beyond a minimum value can lead to memory corruption and undefined behavior.\n\nUse unsigned types if you really want modular arithmetic.\n\nThe result is undefined and probably a crash.\n\nThis also applies to .\n\nAlternative: For critical applications that can afford some overhead, use a range-checked integer and/or floating-point type.\n• Flag division by an integral value that could be zero\n\nES.106: Don’t try to avoid negative values by using\n\nChoosing implies many changes to the usual behavior of integers, including modular arithmetic, can suppress warnings related to overflow, and opens the door for errors related to signed/unsigned mixes. Using doesn’t actually eliminate the possibility of negative values.\n\nThese problems with such (perfectly legal) constructs are hard to spot in real code and are the source of many real-world errors. Consider:\n\nRemember that when assigned to an becomes the largest . Also, since unsigned arithmetic is modular arithmetic the multiplication didn’t overflow, it wrapped around.\n\nHad been a signed , we could have warned about the undefined behavior upon overflow.\n• use signed integers and check for\n\nTo avoid signed/unsigned confusion. To enable better optimization. To enable better error detection. To avoid the pitfalls with and .\n\nThe built-in array allows signed subscripts. The standard-library containers use unsigned subscripts. Thus, no perfect and fully compatible solution is possible (unless and until the standard-library containers change to use signed subscripts someday in the future). Given the known problems with unsigned and signed/unsigned mixtures, better stick to (signed) integers of a sufficient size, which is guaranteed by .\n• Very tricky as long as the standard-library containers get it wrong.\n• (To avoid noise) Do not flag on a mixed signed/unsigned comparison where one of the arguments is or a call to container and the other is .\n\n??? should this section be in the main guide???\n\nThis section contains rules for people who need high performance or low-latency. That is, these are rules that relate to how to use as little time and as few resources as possible to achieve a task in a predictably short time. The rules in this section are more restrictive and intrusive than what is needed for many (most) applications. Do not naïvely try to follow them in general code: achieving the goals of low latency requires extra work.\n• Per.4: Don’t assume that complicated code is necessarily faster than simple code\n• Per.5: Don’t assume that low-level code is necessarily faster than high-level code\n• Per.14: Minimize the number of allocations and deallocations\n• Per.15: Do not allocate on a critical branch\n• Per.17: Declare the most used member of a time-critical struct first\n\nIf there is no need for optimization, the main result of the effort will be more errors and higher maintenance costs.\n\nSome people optimize out of habit or because it’s fun.\n\nElaborately optimized code is usually larger and harder to change than unoptimized code.\n\nOptimizing a non-performance-critical part of a program has no effect on system performance.\n\nIf your program spends most of its time waiting for the web or for a human, optimization of in-memory computation is probably useless.\n\nPut another way: If your program spends 4% of its processing time doing computation A and 40% of its time doing computation B, a 50% improvement on A is only as impactful as a 5% improvement on B. (If you don’t even know how much time is spent on A or B, see Per.1 and Per.2.)\n\nPer.4: Don’t assume that complicated code is necessarily faster than simple code\n\nSimple code can be very fast. Optimizers sometimes do marvels with simple code\n\nPer.5: Don’t assume that low-level code is necessarily faster than high-level code\n\nLow-level code sometimes inhibits optimizations. Optimizers sometimes do marvels with high-level code.\n\nThe field of performance is littered with myth and bogus folklore. Modern hardware and optimizers defy naive assumptions; even experts are regularly surprised.\n\nGetting good performance measurements can be hard and require specialized tools.\n\nA few simple microbenchmarks using Unix or the standard-library can help dispel the most obvious myths. If you can’t measure your complete system accurately, at least try to measure a few of your key operations and algorithms. A profiler can help tell you which parts of your system are performance critical. Often, you will be surprised.\n\nBecause we often need to optimize the initial design. Because a design that ignores the possibility of later improvement is hard to change.\n\nFrom the C (and C++) standard:\n\nWhen did you even want to sort memory? Really, we sort sequences of elements, typically stored in containers. A call to throws away much useful information (e.g., the element type), forces the user to repeat information already known (e.g., the element size), and forces the user to write extra code (e.g., a function to compare s). This implies added work for the programmer, is error-prone, and deprives the compiler of information needed for optimization.\n\nFrom the point of view of interface design, throws away useful information.\n\nWe can do better (in C++98)\n\nHere, we use the compiler’s knowledge about the size of the array, the type of elements, and how to compare s.\n\nWith C++20, we can do better still\n\nThe key is to pass sufficient information for a good implementation to be chosen. In this, the interfaces shown here still have a weakness: They implicitly rely on the element type having less-than ( ) defined. To complete the interface, we need a second version that accepts a comparison criterion:\n\nThe standard-library specification of offers those two versions, and more.\n\nPremature optimization is said to be the root of all evil, but that’s not a reason to despise performance. It is never premature to consider what makes a design amenable to improvement, and improved performance is a commonly desired improvement. Aim to build a set of habits that by default results in efficient, maintainable, and optimizable code. In particular, when you write a function that is not a one-off implementation detail, consider\n• Information passing: Prefer clean interfaces carrying sufficient information for later improvement of implementation. Note that information flows into and out of an implementation through the interfaces we provide.\n• Compact data: By default, use compact data, such as and access it in a systematic fashion. If you think you need a linked structure, try to craft the interface so that this structure isn’t seen by users.\n• Function argument passing and return: Distinguish between mutable and non-mutable data. Don’t impose a resource management burden on your users. Don’t impose spurious run-time indirections on your users. Use conventional ways of passing information through an interface; unconventional and/or “optimized” ways of passing data can seriously complicate later reimplementation.\n• Abstraction: Don’t overgeneralize; a design that tries to cater for every possible use (and misuse) and defers every design decision for later (using compile-time or run-time indirections) is usually a complicated, bloated, hard-to-understand mess. Generalize from concrete examples, preserving performance as we generalize. Do not generalize based on mere speculation about future needs. The ideal is zero-overhead generalization.\n• Libraries: Use libraries with good interfaces. If no library is available build one yourself and imitate the interface style from a good library. The standard library is a good first place to look for inspiration.\n• Isolation: Isolate your code from messy and/or old-style code by providing an interface of your choosing to it. This is sometimes called “providing a wrapper” for the useful/necessary but messy code. Don’t let bad designs “bleed into” your code.\n\nwill tell you whether is in or not. However, it will not tell you where that is or whether there are more than one .\n\nSometimes, just passing the minimal amount of information back (here, or ) is sufficient, but a good interface passes needed information back to the caller. Therefore, the standard library also offers\n\nreturns an iterator to the first match if any, otherwise to the first element greater than , or if no such element is found.\n\nHowever, still doesn’t return enough information for all uses, so the standard library also offers\n\nreturns a of iterators specifying the first and one beyond last match.\n\nObviously, these three interfaces are implemented by the same basic code. They are simply three ways of presenting the basic binary search algorithm to users, ranging from the simplest (“make simple things simple!”) to returning complete, but not always needed, information (“don’t hide useful information”). Naturally, crafting such a set of interfaces requires experience and domain knowledge.\n\nDo not simply craft the interface to match the first implementation and the first use case you think of. Once your first initial implementation is complete, review it; once you deploy it, mistakes will be hard to remedy.\n\nA need for efficiency does not imply a need for low-level code. High-level code isn’t necessarily slow or bloated.\n\nThings have costs. Don’t be paranoid about costs (modern computers really are very fast), but have a rough idea of the order of magnitude of cost of what you use. For example, have a rough idea of the cost of a memory access, a function call, a string comparison, a system call, a disk access, and a message through a network.\n\nIf you can only think of one implementation, you probably don’t have something for which you can devise a stable interface. Maybe, it is just an implementation detail - not every piece of code needs a stable interface - but pause and consider. One question that can be useful is “what interface would be needed if this operation should be implemented using multiple threads? be vectorized?”\n\nThis rule does not contradict the Don’t optimize prematurely rule. It complements it, encouraging developers to enable later - appropriate and non-premature - optimization, if and where needed.\n\nTricky. Maybe looking for function arguments will find examples of interfaces that hinder later optimization.\n\nType violations, weak types (e.g. s), and low-level code (e.g., manipulation of sequences as individual bytes) make the job of the optimizer much harder. Simple code often optimizes better than hand-crafted complex code.\n\nTo decrease code size and run time. To avoid data races by using constants. To catch errors at compile time (and thus eliminate the need for error-handling code).\n\nCode like the initialization of isn’t uncommon, especially for initialization that’s a bit more complicated than . However, compared to the initialization of there are two problems:\n• we suffer the overhead of a function call at run time\n• just might be accessed by another thread before the initialization happens.\n\nNote: you can’t have a data race on a constant.\n\nConsider a popular technique for providing a handle for storing small objects in the handle itself and larger ones on the heap.\n\nAssume that and provide compatible user interfaces. Here we compute the optimal type to use at compile time. There are similar techniques for selecting the optimal function to call.\n\nThe ideal is not to try to execute everything at compile time. Obviously, most computations depend on inputs, so they can’t be moved to compile time, but beyond that logical constraint is the fact that complex compile-time computation can seriously increase compile times and complicate debugging. It is even possible to slow down code by compile-time computation. This is admittedly rare, but by factoring out a general computation into separate optimal sub-calculations, it is possible to render the instruction cache less effective.\n• Look for simple functions that might be constexpr (but are not).\n• Look for functions called with all constant-expression arguments.\n• Look for macros that could be constexpr.\n\nPer.14: Minimize the number of allocations and deallocations\n\nPer.15: Do not allocate on a critical branch\n\nPer.17: Declare the most used member of a time-critical struct first\n\nPerformance is very sensitive to cache performance, and cache algorithms favor simple (usually linear) access to adjacent data.\n\nWe often want our computers to do many tasks at the same time (or at least appear to do them at the same time). The reasons for doing so vary (e.g., waiting for many events using only a single processor, processing many data streams simultaneously, or utilizing many hardware facilities) and so do the basic facilities for expressing concurrency and parallelism. Here, we articulate principles and rules for using the ISO standard C++ facilities for expressing basic concurrency and parallelism.\n\nThreads are the machine-level foundation for concurrent and parallel programming. Threads allow running multiple sections of a program independently, while sharing the same memory. Concurrent programming is tricky, because protecting shared data between threads is easier said than done. Making existing single-threaded code execute concurrently can be as trivial as adding or strategically, or it can necessitate a full rewrite, depending on whether the original code was written in a thread-friendly way.\n\nThe concurrency/parallelism rules in this document are designed with three goals in mind:\n• To help in writing code that is amenable to being used in a threaded environment\n• To show clean, safe ways to use the threading primitives offered by the standard library\n• To offer guidance on what to do when concurrency and parallelism aren’t giving the performance gains needed\n\nIt is also important to note that concurrency in C++ is an unfinished story. C++11 introduced many core concurrency primitives, C++14 and C++17 improved on them, and there is much interest in making the writing of concurrent programs in C++ even easier. We expect some of the library-related guidance here to change significantly over time.\n\nThis section needs a lot of work (obviously). Please note that we start with rules for relative non-experts. Real experts must wait a bit; contributions are welcome, but please think about the majority of programmers who are struggling to get their concurrent programs correct and performant.\n• CP.1: Assume that your code will run as part of a multi-threaded program\n• CP.4: Think in terms of tasks, rather than threads\n• CP.8: Don’t try to use for synchronization\n• CP.9: Whenever feasible use tools to validate your concurrent code\n\nCP.1: Assume that your code will run as part of a multi-threaded program\n\nIt’s hard to be certain that concurrency isn’t used now or won’t be used sometime in the future. Code gets reused. Libraries not using threads might be used from some other part of a program that does use threads. Note that this rule applies most urgently to library code and least urgently to stand-alone applications. However, over time, code fragments can turn up in unexpected places.\n\nAlthough works perfectly in a single-threaded environment, in a multi-threaded environment the two variables result in data races and thus undefined behavior.\n\nHere the cache is stored as member data of a object, rather than as shared static state. This refactoring essentially delegates the concern upward to the caller: a single-threaded program might still choose to have one global , while a multi-threaded program might have one instance per thread, or one per “context” for any definition of “context.” The refactored function no longer attempts to manage the allocation of . In that sense, this is an application of the Single Responsibility Principle.\n\nIn this specific example, refactoring for thread-safety also improved reusability in single-threaded programs. It’s not hard to imagine that a single-threaded program might want two instances for use in different parts of the program, without having them overwrite each other’s cached data.\n\nThere are several other ways one might add thread-safety to code written for a standard multi-threaded environment (that is, one where the only form of concurrency is ):\n• Mark the state variables as instead of .\n• Implement concurrency control, for example, protecting access to the two variables with a .\n• Provide two implementations: one for single-threaded environments and another for multi-threaded environments.\n\nCode that is never run in a multi-threaded environment.\n\nBe careful: there are many examples where code that was “known” to never run in a multi-threaded program was run as part of a multi-threaded program, often years later. Typically, such programs lead to a painful effort to remove data races. Therefore, code that is never intended to run in a multi-threaded environment should be clearly labeled as such and ideally come with compile or run-time enforcement mechanisms to catch those usage bugs early.\n\nUnless you do, nothing is guaranteed to work and subtle errors will persist.\n\nIn a nutshell, if two threads can access the same object concurrently (without synchronization), and at least one is a writer (performing a non- operation), you have a data race. For further information of how to use synchronization well to eliminate data races, please consult a good book about concurrency (See Carefully study the literature).\n\nThere are many examples of data races that exist, some of which are running in production software at this very moment. One very simple example:\n\nThe increment here is an example of a data race. This can go wrong in many ways, including:\n• Thread A loads the value of , the OS context switches A out for some period, during which other threads create hundreds of IDs. Thread A is then allowed to run again, and is written back to that location as A’s read of plus one.\n• Thread A and B load and increment it simultaneously. They both get the same ID.\n\nHere, we have a (nasty) data race on the elements of ( will both read and write). All data races are nasty. Here, we managed to get a data race on data on the stack. Not all data races are as easy to spot as this one.\n\nNow, a compiler that does not know that can change will most likely implement that using a jump table with five entries. Then, a outside the range will cause a jump to an address that could be anywhere in the program, and execution would proceed there. Really, “all bets are off” if you get a data race. Actually, it can be worse still: by looking at the generated code you might be able to determine where the stray jump will go for a given value; this can be a security risk.\n\nSome is possible, do at least something. There are commercial and open-source tools that try to address this problem, but be aware that solutions have costs and blind spots. Static tools often have many false positives and run-time tools often have a significant cost. We hope for better tools. Using multiple tools can catch more problems than a single one.\n\nThere are other ways you can mitigate the chance of data races:\n• More use of concrete types on the stack (and don’t pass pointers around too much)\n• More use of immutable data (literals, , and )\n\nIf you don’t share writable data, you can’t have a data race. The less sharing you do, the less chance you have to forget to synchronize access (and get data races). The less sharing you do, the less chance you have to wait on a lock (so performance can improve).\n\nWithout those s, we would have to review every asynchronously invoked function for potential data races on . Making be (with respect to this function) allow reasoning using only the function body.\n\nImmutable data can be safely and efficiently shared. No locking is needed: You can’t have a data race on a constant. See also CP.mess: Message Passing and CP.31: prefer pass by value.\n\nCP.4: Think in terms of tasks, rather than threads\n\nA is an implementation concept, a way of thinking about the machine. A task is an application notion, something you’d like to do, preferably concurrently with other tasks. Application concepts are easier to reason about.\n\nWith the exception of , the standard-library facilities are low-level, machine-oriented, threads-and-lock level. This is a necessary foundation, but we have to try to raise the level of abstraction: for productivity, for reliability, and for performance. This is a potent argument for using higher level, more applications-oriented libraries (if possible, built on top of standard-library facilities).\n\nCP.8: Don’t try to use for synchronization\n\nIn C++, unlike some other languages, does not provide atomicity, does not synchronize between threads, and does not prevent instruction reordering (neither compiler nor hardware). It simply has nothing to do with concurrency.\n\nHere we have a problem: This is perfectly good code in a single-threaded program, but have two threads execute this and there is a race condition on so that two threads might get the same value and . That’s (obviously) a bad data race, so people trained in other languages might try to fix it like this:\n\nThis has no effect on synchronization: The data race is still there!\n\nThe C++ mechanism for this is types:\n\nNow the operation is atomic, rather than a read-increment-write sequence where another thread might get in-between the individual operations.\n\nUse types where you might have used in some other language. Use a for more complicated examples.\n\nExperience shows that concurrent code is exceptionally hard to get right and that compile-time checking, run-time checks, and testing are less effective at finding concurrency errors than they are at finding errors in sequential code. Subtle concurrency errors can have dramatically bad effects, including memory corruption, deadlocks, and security vulnerabilities.\n\nThread safety is challenging, often getting the better of experienced programmers: tooling is an important strategy to mitigate those risks. There are many tools “out there”, both commercial and open-source tools, both research and production tools. Unfortunately people’s needs and constraints differ so dramatically that we cannot make specific recommendations, but we can mention:\n• Static enforcement tools: both clang and some older versions of GCC have some support for static annotation of thread safety properties. Consistent use of this technique turns many classes of thread-safety errors into compile-time errors. The annotations are generally local (marking a particular data member as guarded by a particular mutex), and are usually easy to learn. However, as with many static tools, it can often present false negatives; cases that should have been caught but were allowed.\n• dynamic enforcement tools: Clang’s Thread Sanitizer (aka TSAN) is a powerful example of dynamic tools: it changes the build and execution of your program to add bookkeeping on memory access, absolutely identifying data races in a given execution of your binary. The cost for this is both memory (5-10x in most cases) and CPU slowdown (2-20x). Dynamic tools like this are best when applied to integration tests, canary pushes, or unit tests that operate on multiple threads. Workload matters: When TSAN identifies a problem, it is effectively always an actual data race, but it can only identify races seen in a given execution.\n\nIt is up to an application builder to choose which support tools are valuable for a particular application.\n\nThis section focuses on relatively ad-hoc uses of multiple threads communicating through shared data.\n• For inter-task communication without explicit sharing, see messaging\n• CP.21: Use or to acquire multiple es\n• CP.23: Think of a joining as a scoped container\n• CP.24: Think of a as a global container\n• CP.31: Pass small amounts of data between threads by value, rather than by reference or pointer\n• CP.32: To share ownership between unrelated s use\n• CP.44: Remember to name your s and s\n• CP.50: Define a together with the data it guards. Use where possible\n• ??? when to use a spinlock\n• ??? when to use\n• ??? when to prefer over\n\nSooner or later, someone will forget the , place a in the , throw an exception, or something.\n\nCP.21: Use or to acquire multiple es\n\nThis is asking for deadlock:\n\nor (better, but C++17 only):\n\nHere, the writers of and are still not agreeing on the order of the es, but order no longer matters.\n\nIn real code, es are rarely named to conveniently remind the programmer of an intended relation and intended order of acquisition. In real code, es are not always conveniently acquired on consecutive lines.\n\nIn C++17 it’s possible to write plain\n\nand have the type deduced.\n\nDetect the acquisition of multiple es. This is undecidable in general, but catching common simple examples (like the one above) is easy.\n\nIf you don’t know what a piece of code does, you are risking deadlock.\n\nIf you don’t know what does (maybe it is a virtual function invoking a derived class member of a class not yet written), it might call (recursively) and cause a deadlock on . Maybe it will lock on a different mutex and not return in a reasonable time, causing delays to any code calling .\n\nA common example of the “calling unknown code” problem is a call to a function that tries to gain locked access to the same object. Such problem can often be solved by using a . For example:\n\nIf, as it is likely, invokes operations on , we must make sure that the object’s invariant holds before the call.\n\nCP.23: Think of a joining as a scoped container\n\nTo maintain pointer safety and avoid leaks, we need to consider what pointers are used by a . If a joins, we can safely pass pointers to objects in the scope of the and its enclosing scopes.\n\nA is a with a destructor that joins and that cannot be . By “OK” we mean that the object will be in scope (“live”) for as long as a can use the pointer to it. The fact that s run concurrently doesn’t affect the lifetime or ownership issues here; these s can be seen as just a function object called from .\n\nEnsure that s don’t . After that, the usual lifetime and ownership (for local objects) enforcement applies.\n\nCP.24: Think of a as a global container\n\nTo maintain pointer safety and avoid leaks, we need to consider what pointers are used by a . If a is detached, we can safely pass pointers to static and free store objects (only).\n\nBy “OK” we mean that the object will be in scope (“live”) for as long as a can use the pointers to it. By “bad” we mean that a might use a pointer after the pointed-to object is destroyed. The fact that s run concurrently doesn’t affect the lifetime or ownership issues here; these s can be seen as just a function object called from .\n\nEven objects with static storage duration can be problematic if used from detached threads: if the thread continues until the end of the program, it might be running concurrently with the destruction of objects with static storage duration, and thus accesses to such objects might race.\n\nThis rule is redundant if you don’t and use . However, converting code to follow those guidelines could be difficult and even impossible for third-party libraries. In such cases, the rule becomes essential for lifetime safety and type safety.\n\nIn general, it is undecidable whether a is executed for a , but simple common cases are easily detected. If we cannot prove that a does not , we must assume that it does and that it outlives the scope in which it was constructed; After that, the usual lifetime and ownership (for global objects) enforcement applies.\n\nFlag attempts to pass local variables to a thread that might .\n\nA is a thread that joins at the end of its scope. Detached threads are hard to monitor. It is harder to ensure absence of errors in detached threads (and potentially detached threads).\n\nMake “immortal threads” globals, put them in an enclosing scope, or put them on the free store rather than . Don’t .\n\nBecause of old code and third party libraries using , this rule can be hard to introduce.\n• Suggest use of or C++20 .\n• Suggest “exporting ownership” to an enclosing scope if it detaches.\n• Warn if it is not obvious whether a thread joins or detaches.\n\nOften, the need to outlive the scope of its creation is inherent in the s task, but implementing that idea by makes it harder to monitor and communicate with the detached thread. In particular, it is harder (though not impossible) to ensure that the thread completed as expected or lives for as long as expected.\n\nThis is a reasonable use of a thread, for which is commonly used. There are problems, though. How do we monitor the detached thread to see if it is alive? Something might go wrong with the heartbeat, and losing a heartbeat can be very serious in a system for which it is needed. So, we need to communicate with the heartbeat thread (e.g., through a stream of messages or notification events using a ).\n\nAn alternative, and usually superior solution is to control its lifetime by placing it in a scope outside its point of creation (or activation). For example:\n\nThis heartbeat will (barring error, hardware problems, etc.) run for as long as the program does.\n\nSometimes, we need to separate the point of creation from the point of ownership:\n\nCP.31: Pass small amounts of data between threads by value, rather than by reference or pointer\n\nA small amount of data is cheaper to copy and access than to share it using some locking mechanism. Copying naturally gives unique ownership (simplifies code) and eliminates the possibility of data races.\n\nThe call of involves copying two values; the call of does not. On the other hand, the implementation of is exactly as we would have written it for single-threaded code, whereas the implementation of will need some form of locking to avoid data races. If the string is short (say 10 characters), the call of can be surprisingly fast; essentially all the cost is in the switch. If the string is long (say 1,000,000 characters), copying it twice is probably not a good idea.\n\nNote that this argument has nothing to do with as such. It applies equally to considerations about whether to use message passing or shared memory.\n\nCP.32: To share ownership between unrelated s use\n\nIf threads are unrelated (that is, not known to be in the same scope or one within the lifetime of the other) and they need to share free store memory that needs to be deleted, a (or equivalent) is the only safe way to ensure proper deletion.\n• A static object (e.g. a global) can be shared because it is not owned in the sense that some thread is responsible for its deletion.\n• An object on free store that is never to be deleted can be shared.\n• An object owned by one thread can be safely shared with another as long as that second thread doesn’t outlive the owner.\n\nThis spawns a per message, and the is presumably managed to destroy those tasks once they are finished.\n\nInstead, we could have a set of pre-created worker threads processing the messages\n\nIf your system has a good thread pool, use it. If your system has a good message queue, use it.\n\nA without a condition can miss a wakeup or wake up simply to find that there is no work to do.\n\nHere, if some other consumes ’s notification, can wait forever.\n\nNow if the queue is empty when a thread executing wakes up (e.g., because another thread has gotten to before it), it will immediately go back to sleep, waiting.\n\nThe less time is spent with a taken, the less chance that another has to wait, and suspension and resumption are expensive.\n\nHere, we are holding the lock for longer than necessary: We should not have taken the lock before we needed it and should have released it again before starting the cleanup. We could rewrite this to\n\nBut that compromises safety and violates the use RAII rule. Instead, add a block for the critical section:\n\nCP.44: Remember to name your s and s\n\nAn unnamed local object is a temporary that immediately goes out of scope.\n\nThis looks innocent enough, but it isn’t. At (A), is a default-constructed local , which shadows the global (and does not lock it). At (B) an unnamed temporary is constructed and locks , but immediately goes out of scope and unlocks again. For the rest of the function neither mutex is locked.\n\nCP.50: Define a together with the data it guards. Use where possible\n\nIt should be obvious to a reader that the data is to be guarded and how. This decreases the chance of the wrong mutex being locked, or the mutex not being locked.\n\nUsing a ensures that the data has a mutex, and the right mutex is locked when the data is accessed. See the WG21 proposal to add to a future TS or revision of the C++ standard.\n\nThis section focuses on uses of coroutines.\n• CP.51: Do not use capturing lambdas that are coroutines\n• CP.52: Do not hold locks or other synchronization primitives across suspension points\n• CP.53: Parameters to coroutines should not be passed by reference\n\nCP.51: Do not use capturing lambdas that are coroutines\n\nUsage patterns that are correct with normal lambdas are hazardous with coroutine lambdas. The obvious pattern of capturing variables will result in accessing freed memory after the first suspension point, even for refcounted smart pointers and copyable types.\n\nA lambda results in a closure object with storage, often on the stack, that will go out of scope at some point. When the closure object goes out of scope the captures will also go out of scope. Normal lambdas will have finished executing by this time so it is not a problem. Coroutine lambdas may resume from suspension after the closure object has destructed and at that point all captures will be use-after-free memory access.\n\nFlag a lambda that is a coroutine and has a non-empty capture list.\n\nCP.52: Do not hold locks or other synchronization primitives across suspension points\n\nThis pattern creates a significant risk of deadlocks. Some types of waits will allow the current thread to perform additional work until the asynchronous operation has completed. If the thread holding the lock performs work that requires the same lock then it will deadlock because it is trying to acquire a lock that it is already holding.\n\nIf the coroutine completes on a different thread from the thread that acquired the lock then that is undefined behavior. Even with an explicit return to the original thread an exception might be thrown before coroutine resumes and the result will be that the lock guard is not destructed.\n\nThis pattern is also bad for performance. When a suspension point is reached, such as co_await, execution of the current function stops and other code begins to run. It may be a long period of time before the coroutine resumes. For that entire duration the lock will be held and cannot be acquired by other threads to perform work.\n\nFlag all lock guards that are not destructed before a coroutine suspends.\n\nCP.53: Parameters to coroutines should not be passed by reference\n\nOnce a coroutine reaches the first suspension point, such as a co_await, the synchronous portion returns. After that point any parameters passed by reference are dangling. Any usage beyond that is undefined behavior which may include writing to freed memory.\n\nThis problem does not apply to reference parameters that are only accessed before the first suspension point. Subsequent changes to the function may add or move suspension points which would reintroduce this class of bug. Some types of coroutines have the suspension point before the first line of code in the coroutine executes, in which case reference parameters are always unsafe. It is safer to always pass by value because the copied parameter will live in the coroutine frame that is safe to access throughout the coroutine.\n\nThe same danger applies to output parameters. F.20: For “out” output values, prefer return values to output parameters discourages output parameters. Coroutines should avoid them entirely.\n\nBy “parallelism” we refer to performing a task (more or less) simultaneously (“in parallel with”) on many data items.\n• Where appropriate, prefer the standard-library parallel algorithms\n• Use algorithms that are designed for parallelism, not algorithms with unnecessary dependency on linear evaluation\n\nThe standard-library facilities are quite low-level, focused on the needs of close-to the hardware critical programming using s, es, types, etc. Most people shouldn’t work at this level: it’s error-prone and development is slow. If possible, use a higher level facility: messaging libraries, parallel algorithms, and vectorization. This section looks at passing messages so that a programmer doesn’t have to do explicit synchronization.\n• CP.60: Use a to return a value from a concurrent task\n\n???? should there be a “use X rather than ” where X is something that would use a better specified thread pool?\n\n??? Is worth using in light of future (and even existing, as libraries) parallelism facilities? What should the guidelines recommend if someone wants to parallelize, e.g., (with the additional precondition of commutativity), or merge sort?\n\nCP.60: Use a to return a value from a concurrent task\n\nA preserves the usual function call return semantics for asynchronous tasks. There is no explicit locking and both correct (value) return and error (exception) return are handled simply.\n\nSimilar to R.12, which tells you to avoid raw owning pointers, you should also avoid raw threads and raw promises where possible. Use a factory function such as , which handles spawning or reusing a thread without exposing raw threads to your own code.\n\nUnfortunately, is not perfect. For example, it doesn’t use a thread pool, which means that it might fail due to resource exhaustion, rather than queuing up your tasks to be executed later. However, even if you cannot use , you should prefer to write your own -returning factory function, rather than using raw promises.\n\nThis example shows two different ways to succeed at using , but to fail at avoiding raw management.\n\nThis example shows one way you could follow the general pattern set by , in a context where itself was unacceptable for use in production.\n\nAny threads spawned to execute the code of are hidden behind the call to . The user code deals only with objects, never with raw , , or objects.\n\nVectorization is a technique for executing a number of tasks concurrently without introducing explicit synchronization. An operation is simply applied to elements of a data structure (a vector, an array, etc.) in parallel. Vectorization has the interesting property of often requiring no non-local changes to a program. However, vectorization works best with simple data structures and with algorithms specifically crafted to enable it.\n\nSynchronization using es and s can be relatively expensive. Furthermore, it can lead to deadlock. For performance and to eliminate the possibility of deadlock, we sometimes have to use the tricky low-level “lock-free” facilities that rely on briefly gaining exclusive (“atomic”) access to memory. Lock-free programming is also used to implement higher-level concurrency mechanisms, such as s and es.\n• CP.100: Don’t use lock-free programming unless you absolutely have to\n• use a lock-free data structure rather than hand-crafting specific lock-free access\n• CP.110: Do not write your own double-checked locking for initialization\n• CP.111: Use a conventional pattern if you really need double-checked locking\n\nCP.100: Don’t use lock-free programming unless you absolutely have to\n\nIt’s error-prone and requires expert level knowledge of language features, machine architecture, and data structures.\n\nSpot the bug. It would be really hard to find through testing. Read up on the ABA problem.\n\nAtomic variables can be used simply and safely, as long as you are using the sequentially consistent memory model (memory_order_seq_cst), which is the default.\n\nHigher-level concurrency mechanisms, such as s and es are implemented using lock-free programming.\n\nAlternative: Use lock-free data structures implemented by others as part of some library.\n\nThe low-level hardware interfaces used by lock-free programming are among the hardest to implement well and among the areas where the most subtle portability problems occur. If you are doing lock-free programming for performance, you need to check for regressions.\n\nInstruction reordering (static and dynamic) makes it hard for us to think effectively at this level (especially if you use relaxed memory models). Experience, (semi)formal models and model checking can be useful. Testing - often to an extreme extent - is essential. “Don’t fly too close to the sun.”\n\nHave strong rules for re-testing in place that covers any change in hardware, operating system, compiler, and libraries.\n\nWith the exception of atomics and a few other standard patterns, lock-free programming is really an expert-only topic. Become an expert before shipping lock-free code for others to use.\n• Boehm, Adve, You Don’t Know Jack About Shared Variables or Memory Models , Communications of the ACM, Feb 2012.\n• Adve, Boehm, “Memory Models: A Case for Rethinking Parallel Languages and Hardware”, Communications of the ACM, August 2010.\n• Boehm, Adve, “Foundations of the C++ Concurrency Memory Model”, PLDI 08.\n• Damian Dechev, Peter Pirkelbauer, and Bjarne Stroustrup: Understanding and Effectively Preventing the ABA Problem in Descriptor-based Lock-free Designs. 13th IEEE Computer Society ISORC 2010 Symposium. May 2010.\n• Damian Dechev, Peter Pirkelbauer, Nicolas Rouquette, and Bjarne Stroustrup: Semantically Enhanced Containers for Concurrent Real-Time Systems. Proc. 16th Annual IEEE International Conference and Workshop on the Engineering of Computer Based Systems (IEEE ECBS). April 2009.\n\nCP.110: Do not write your own double-checked locking for initialization\n\nSince C++11, static local variables are now initialized in a thread-safe way. When combined with the RAII pattern, static local variables can replace the need for writing your own double-checked locking for initialization. std::call_once can also achieve the same purpose. Use either static local variables of C++11 or std::call_once instead of writing your own double-checked locking for initialization.\n\nExample with thread-safe static local variables of C++11.\n\n??? Is it possible to detect the idiom?\n\nCP.111: Use a conventional pattern if you really need double-checked locking\n\nDouble-checked locking is easy to mess up. If you really need to write your own double-checked locking, in spite of the rules CP.110: Do not write your own double-checked locking for initialization and CP.100: Don’t use lock-free programming unless you absolutely have to, then do it in a conventional pattern.\n\nThe uses of the double-checked locking pattern that are not in violation of CP.110: Do not write your own double-checked locking for initialization arise when a non-thread-safe action is both hard and rare, and there exists a fast thread-safe test that can be used to guarantee that the action is not needed, but cannot be used to guarantee the converse.\n\nThe use of volatile does not make the first check thread-safe, see also CP.200: Use only to talk to non-C++ memory\n\nFine-tuned memory order might be beneficial where acquire load is more efficient than sequentially-consistent load\n\n??? Is it possible to detect the idiom?\n• CP.200: Use only to talk to non-C++ memory\n\nCP.200: Use only to talk to non-C++ memory\n\nis used to refer to objects that are shared with “non-C++” code or hardware that does not follow the C++ memory model.\n\nThis describes a register constantly updated by a clock circuit. is because its value will change without any action from the C++ program that uses it. For example, reading twice will often yield two different values, so the optimizer had better not optimize away the second read in this code:\n\nis because the program should not try to write to .\n\nUnless you are writing the lowest level code manipulating hardware directly, consider an esoteric feature that is best avoided.\n\nUsually C++ code receives memory that is owned elsewhere (hardware or another language):\n\nSometimes C++ code allocates the memory and shares it with “elsewhere” (hardware or another language) by deliberately escaping a pointer:\n\nlocal variables are nearly always wrong – how can they be shared with other languages or hardware if they’re ephemeral? The same applies almost as strongly to data members, for the same reason.\n\nIn C++, unlike in some other languages, has nothing to do with synchronization.\n• Flag local and data members; almost certainly you intended to use instead.\n\n???UNIX signal handling???. Might be worth reminding how little is async-signal-safe, and how to communicate with a signal handler (best is probably “not at all”)\n• Transmitting information about an error to some handler code\n\nIt is not possible to recover from all errors. If recovery from an error is not possible, it is important to quickly “get out” in a well-defined way. A strategy for error handling must be simple, or it becomes a source of even worse errors. Untested and rarely executed error-handling code is itself the source of many bugs.\n\nThe rules are designed to help avoid several kinds of errors:\n• Lifetime errors (e.g., accessing an object after it has been d)\n• Complexity errors (logical errors made likely by overly complex expression of ideas)\n• Interface errors (e.g., an unexpected value is passed through an interface)\n• E.2: Throw an exception to signal that a function can’t perform its assigned task\n• E.3: Use exceptions for error handling only\n• E.5: Let a constructor establish an invariant, and throw if it cannot\n• E.12: Use when exiting a function because of a is impossible or unacceptable\n• E.13: Never throw while being the direct owner of an object\n• E.14: Use purpose-designed user-defined types as exceptions (not built-in types)\n• E.15: Throw by value, catch exceptions from a hierarchy by reference\n• E.16: Destructors, deallocation, , and exception type copy/move construction must never fail\n• E.17: Don’t try to catch every exception in every function\n• E.18: Minimize the use of explicit /\n• E.19: Use a object to express cleanup if no suitable resource handle is available\n• E.25: If you can’t throw exceptions, simulate RAII for resource management\n• E.26: If you can’t throw exceptions, consider failing fast\n• E.27: If you can’t throw exceptions, use error codes systematically\n\nA consistent and complete strategy for handling errors and resource leaks is hard to retrofit into a system.\n\nE.2: Throw an exception to signal that a function can’t perform its assigned task\n\nHere, and s constructors might not be able to allocate sufficient memory for their elements, s constructor might not be able to copy the s in its initializer list, and might not be able to open the required file. In each case, they throw an exception for ’s caller to handle. If could handle the failure to construct it can take control using / . In either case, ’s constructor correctly destroys constructed members before passing control to whatever tried to create a . Note that there is no return value that could contain an error code.\n\nThe constructor might be defined like this:\n\nIt is often said that exceptions are meant to signal exceptional events and failures. However, that’s a bit circular because “what is exceptional?” Examples:\n• A precondition that cannot be met\n• A constructor that cannot construct an object (failure to establish its class’s invariant)\n• Inability to acquire a resource (e.g., the network is down)\n\nIn contrast, termination of an ordinary loop is not exceptional. Unless the loop was meant to be infinite, termination is normal and expected.\n\nDon’t use a as simply an alternative way of returning a value from a function.\n\nSome systems, such as hard-real-time systems require a guarantee that an action is taken in a (typically short) constant maximum time known before execution starts. Such systems can use exceptions only if there is tool support for accurately predicting the maximum time to recover from a .\n\nBefore deciding that you cannot afford or don’t like exception-based error handling, have a look at the alternatives; they have their own complexities and problems. Also, as far as possible, measure before making claims about efficiency.\n\nE.3: Use exceptions for error handling only\n\nTo keep error handling separated from “ordinary code.” C++ implementations tend to be optimized based on the assumption that exceptions are rare.\n\nThis is more complicated and most likely runs much slower than the obvious alternative. There is nothing exceptional about finding a value in a .\n\nWould need to be heuristic. Look for exception values “leaked” out of clauses.\n\nTo use an object it must be in a valid state (defined formally or informally by an invariant) and to recover from an error every object not destroyed must be in a valid state.\n\nAn invariant is a logical condition for the members of an object that a constructor must establish for the public member functions to assume.\n\nE.5: Let a constructor establish an invariant, and throw if it cannot\n\nLeaving an object without its invariant established is asking for trouble. Not all member functions can be called.\n\nThe class invariant - here stated as a comment - is established by the constructors. throws if it cannot allocate the required memory. The operators, notably the subscript operator, rely on the invariant.\n\nSee also: If a constructor cannot construct a valid object, throw an exception\n\nFlag classes with state without a constructor (public, protected, or private).\n\nLeaks are typically unacceptable. Manual resource release is error-prone. RAII (“Resource Acquisition Is Initialization”) is the simplest, most systematic way of preventing leaks.\n\nWe could carefully release the resource before the throw:\n\nThis is verbose. In larger code with multiple possible s explicit releases become repetitive and error-prone.\n\nNote that this works even when the is implicit because it happened in a called function:\n\nUnless you really need pointer semantics, use a local resource object:\n\nThat’s even simpler and safer, and often more efficient.\n\nIf there is no obvious resource handle and for some reason defining a proper RAII object/handle is infeasible, as a last resort, cleanup actions can be represented by a object.\n\nBut what do we do if we are writing a program where exceptions cannot be used? First challenge that assumption; there are many anti-exceptions myths around. We know of only a few good reasons:\n• We are on a system so small that the exception support would eat up most of our 2K memory.\n• We are in a hard-real-time system and we don’t have tools that guarantee us that an exception is handled within the required time.\n• We are in a system with tons of legacy code using lots of pointers in difficult-to-understand ways (in particular without a recognizable ownership strategy) so that exceptions could cause leaks.\n• Our implementation of the C++ exception mechanisms is unreasonably poor (slow, memory consuming, failing to work correctly for dynamically linked libraries, etc.). Complain to your implementation purveyor; if no user complains, no improvement will happen.\n• We get fired if we challenge our manager’s ancient wisdom.\n\nOnly the first of these reasons is fundamental, so whenever possible, use exceptions to implement RAII, or design your RAII objects to never fail. When exceptions cannot be used, simulate RAII. That is, systematically check that objects are valid after construction and still release all resources in the destructor. One strategy is to add a operation to every resource handle:\n\nObviously, this increases the size of the code, doesn’t allow for implicit propagation of “exceptions” ( checks), and checks can be forgotten. Prefer to use exceptions.\n\nSee also: Use of\n\nE.12: Use when exiting a function because of a is impossible or unacceptable\n\nHere, we know that will not throw because it is composed out of operations that don’t throw. By declaring to be , we give the compiler and human readers information that can make it easier for them to understand and manipulate .\n\nMany standard-library functions are including all the standard-library functions “inherited” from the C Standard Library.\n\nThe here states that I am not willing or able to handle the situation where I cannot construct the local . That is, I consider memory exhaustion a serious design error (on par with hardware failures) so that I’m willing to crash the program if it happens.\n\nDo not use traditional exception-specifications.\n\nE.13: Never throw while being the direct owner of an object\n\nThat would be a leak.\n\nOne way of avoiding such problems is to use resource handles consistently:\n\nAnother solution (often better) would be to use a local variable to eliminate explicit use of pointers:\n\nIf you have a local “thing” that requires cleanup, but is not represented by an object with a destructor, such cleanup must also be done before a . Sometimes, can make such unsystematic cleanup a bit more manageable.\n\nE.14: Use purpose-designed user-defined types as exceptions (not built-in types)\n\nA user-defined type can better transmit information about an error to a handler. Information can be encoded into the type itself and the type is unlikely to clash with other people’s exceptions.\n\nDeriving from gives the flexibility to catch the specific exception or handle generally through :\n\nExceptions do not need to be derived from :\n\nLibrary types derived from can be used as generic exceptions if no useful information can be added at the point of detection:\n\nE.15: Throw by value, catch exceptions from a hierarchy by reference\n\nThrowing by value (not by pointer) and catching by reference prevents copying, especially slicing base subobjects.\n\nor - typically better still - a reference:\n\nMost handlers do not modify their exception and in general we recommend use of .\n\nCatch by value can be appropriate for a small value type such as an value.\n\nTo rethrow a caught exception use not . Using would throw a new copy of (sliced to the static type , when the exception is caught by ) instead of rethrowing the original exception of type . (But keep Don’t try to catch every exception in every function and Minimize the use of explicit / in mind.)\n• Flag catching by value of a type that has a virtual function.\n\nE.16: Destructors, deallocation, , and exception type copy/move construction must never fail\n\nWe don’t know how to write reliable programs if a destructor, a swap, a memory deallocation, or attempting to copy/move-construct an exception object fails; that is, if it exits by an exception or simply doesn’t perform its required action.\n\nMany have tried to write reliable code violating this rule for examples, such as a network connection that “refuses to close”. To the best of our knowledge nobody has found a general way of doing this. Occasionally, for very specific examples, you can get away with setting some state for future cleanup. For example, we might put a socket that does not want to close on a “bad socket” list, to be examined by a regular sweep of the system state. Every example we have seen of this is error-prone, specialized, and often buggy.\n\nThe standard library assumes that destructors, deallocation functions (e.g., ), and do not throw. If they do, basic standard-library invariants are broken.\n• Most destructors are implicitly by default.\n• If writing a type intended to be used as an exception type, ensure its copy constructor is . In general we cannot mechanically enforce this, because we do not know whether a type is intended to be used as an exception type.\n• Try not to a type whose copy constructor is not . In general we cannot mechanically enforce this, because even could throw but does not in practice.\n• Catch such operations that are not .\n\nE.17: Don’t try to catch every exception in every function\n\nCatching an exception in a function that cannot take a meaningful recovery action leads to complexity and waste. Let an exception propagate until it reaches a function that can handle it. Let cleanup actions on the unwinding path be handled by RAII.\n• Flag source code files with a too high ratio of try-blocks to functions. (??? Problem: define “too high”)\n\nE.18: Minimize the use of explicit /\n\n/ is verbose and non-trivial uses are error-prone. / can be a sign of unsystematic and/or low-level resource management or error handling.\n\nThis code is messy. There could be a leak from the naked pointer in the block. Not all exceptions are handled. an object that failed to construct is almost certainly a mistake. Better:\n\nE.19: Use a object to express cleanup if no suitable resource handle is available\n\nfrom the GSL is less verbose and harder to get wrong than / .\n\nis not as messy as / , but it is still ad-hoc. Prefer proper resource management objects. Consider a last resort.\n\nUse of is a systematic and reasonably clean alternative to the old technique for dealing with cleanup where resource management is not systematic.\n\nE.25: If you can’t throw exceptions, simulate RAII for resource management\n\nEven without exceptions, RAII is usually the best and most systematic way of dealing with resources.\n\nError handling using exceptions is the only complete and systematic way of handling non-local errors in C++. In particular, non-intrusively signaling failure to construct an object requires an exception. Signaling errors in a way that cannot be ignored requires exceptions. If you can’t use exceptions, simulate their use as best you can.\n\nA lot of fear of exceptions is misguided. When used for exceptional circumstances in code that is not littered with pointers and complicated control structures, exception handling is almost always affordable (in time and space) and almost always leads to better code. This, of course, assumes a good implementation of the exception handling mechanisms, which is not available on all systems. There are also cases where the problems above do not apply, but exceptions cannot be used for other reasons. Some hard-real-time systems are an example: An operation has to be completed within a fixed time with an error or a correct answer. In the absence of appropriate time estimation tools, this is hard to guarantee for exceptions. Such systems (e.g. flight control software) typically also ban the use of dynamic (heap) memory.\n\nSo, the primary guideline for error handling is “use exceptions and RAII.” This section deals with the cases where you either do not have an efficient implementation of exceptions, or have such a rat’s nest of old-style code (e.g., lots of pointers, ill-defined ownership, and lots of unsystematic error handling based on tests of error codes) that it is infeasible to introduce simple and systematic exception handling.\n\nBefore condemning exceptions or complaining too much about their cost, consider examples of the use of error codes. Consider the cost and complexity of the use of error codes. If performance is your worry, measure.\n\nIf the isn’t correctly constructed, exits with an exception. If we cannot throw an exception, we can simulate this RAII style of resource handling by adding a member function to :\n\nThe problem is of course that the caller now has to remember to test the return value. To encourage doing so, consider adding a .\n\nPossible (only) for specific versions of this idea: e.g., test for systematic test of after resource handle construction\n\nE.26: If you can’t throw exceptions, consider failing fast\n\nIf you can’t do a good job at recovering, at least you can get out before too much consequential damage is done.\n\nIf you cannot be systematic about error handling, consider “crashing” as a response to any error that cannot be handled locally. That is, if you cannot recover from an error in the context of the function that detected it, call , , or a similar function that will trigger some sort of system restart.\n\nIn systems where you have lots of processes and/or lots of computers, you need to expect and handle fatal crashes anyway, say from hardware failures. In such cases, “crashing” is simply leaving error handling to the next level of the system.\n\nMost programs cannot handle memory exhaustion gracefully anyway. This is roughly equivalent to\n\nTypically, it is a good idea to log the reason for the “crash” before exiting.\n\nE.27: If you can’t throw exceptions, use error codes systematically\n\nSystematic use of any error-handling strategy minimizes the chance of forgetting to handle an error.\n\nThere are several issues to be addressed:\n• How do you transmit an error indicator from out of a function?\n• How do you release all resources from a function before doing an error exit?\n• What do you use as an error indicator?\n\nIn general, returning an error indicator implies returning two values: The result and an error indicator. The error indicator can be part of the object, e.g. an object can have a indicator or a pair of values can be returned.\n\nThis approach fits with simulated RAII resource management. The function could return an (e.g. a member of an enumeration).\n\nWhat if we cannot or do not want to modify the type? In that case, we must return a pair of values. For example:\n\nAs shown, is a possible return type. Some people prefer a specific type. For example:\n\nOne reason to prefer a specific return type is to have names for its members, rather than the somewhat cryptic and and to avoid confusion with other uses of .\n\nIn general, you must clean up before an error exit. This can be messy:\n\nSimulating RAII can be non-trivial, especially in functions with multiple resources and multiple possible errors. A not uncommon technique is to gather cleanup at the end of the function to avoid repetition (note that the extra scope around is undesirable but necessary to make the version compile):\n\nThe larger the function, the more tempting this technique becomes. can ease the pain a bit. Also, the larger the program becomes the harder it is to apply an error-indicator-based error-handling strategy systematically.\n\nGlobal state is hard to manage and it is easy to forget to check it. When did you last test the return value of ?\n\nC-style error handling is based on the global variable , so it is essentially impossible to avoid this style completely.\n\nException specifications make error handling brittle, impose a run-time cost, and have been removed from the C++ standard.\n\nIf throws an exception different from and the unexpected handler is invoked, which by default terminates. That’s OK, but say that we have checked that this cannot happen and is changed to throw a new exception , we now have a crash on our hands unless we change (and re-test everything). The snag is that might be in a library we do not control and the new exception is not anything that can do anything about or is in any way interested in. We can change to pass through, but now ’s callers probably need to be modified. This quickly becomes unmanageable. Alternatively, we can add a - to to map into an acceptable exception. This too, quickly becomes unmanageable. Note that changes to the set of exceptions often happens at the lowest level of a system (e.g., because of changes to a network library or some middleware), so changes “bubble up” through long call chains. In a large code base, this could mean that nobody could update to a new version of a library until the last user was modified. If is part of a library, it might not be possible to update it because a change could affect unknown clients.\n\nThe policy of letting exceptions propagate until they reach a function that potentially can handle it has proven itself over the years.\n\nNo. This would not be any better had exception specifications been statically enforced. For example, see Stroustrup94.\n\nIf no exception can be thrown, use .\n\n-clauses are evaluated in the order they appear and one clause can hide another.\n\nIf is derived from the -handler will never be invoked. The “catch everything” handler ensured that the -handler will never be invoked.\n\nYou can’t have a race condition on a constant. It is easier to reason about a program when many of the objects cannot change their values. Interfaces that promise “no change” of objects passed as arguments greatly increase readability.\n• Con.3: By default, pass pointers and references to s\n• Con.4: Use to define objects with values that do not change after construction\n• Con.5: Use for values that can be computed at compile time\n\nImmutable objects are easier to reason about, so make objects non- only when there is a need to change their value. Prevents accidental or hard-to-notice change of value.\n\nA local variable that is returned by value and is cheaper to move than copy should not be declared because it can force an unnecessary copy.\n\nFunction parameters passed by value are rarely mutated, but also rarely declared . To avoid confusion and lots of false positives, don’t enforce this rule for function parameters.\n\nNote that a function parameter is a local variable so changes to it are local.\n• Flag non- variables that are not modified (except for parameters to avoid many false positives and returned local variables)\n\nA member function should be marked unless it changes the object’s observable state. This gives a more precise statement of design intent, better readability, more errors caught by the compiler, and sometimes more optimization opportunities.\n\nIt is not inherently bad to pass a pointer or reference to non- , but that should be done only when the called function is supposed to modify the object. A reader of code must assume that a function that takes a “plain” or will modify the object referred to. If it doesn’t now, it might do so later without forcing recompilation.\n\nThere are code/libraries that offer functions that declare a even though those functions do not modify that . This is a problem for people modernizing code. You can\n• update the library to be -correct; preferred long-term solution\n\nNote that this wrapper solution is a patch that should be used only when the declaration of cannot be modified, e.g. because it is in a library that you cannot modify.\n\nA member function can modify the value of an object that is or accessed through a pointer member. A common use is to maintain a cache rather than repeatedly do a complicated computation. For example, here is a that caches (memoizes) its string representation to simplify repeated uses:\n\nAnother way of saying this is that ness is not transitive. It is possible for a member function to change the value of members and the value of objects accessed through non- pointers. It is the job of the class to ensure such mutation is done only when it makes sense according to the semantics (invariants) it offers to its users.\n• Flag a member function that is not marked , but that does not perform a non- operation on any data member.\n\nCon.3: By default, pass pointers and references to s\n\nTo avoid a called function unexpectedly changing the value. It’s far easier to reason about programs when called functions don’t modify state.\n\nIt is not inherently bad to pass a pointer or reference to non- , but that should be done only when the called function is supposed to modify the object.\n\nDo not cast away .\n• Flag a function that does not modify an object passed by pointer or reference to non-\n• Flag a function that (using a cast) modifies an object passed by pointer or reference to\n\nCon.4: Use to define objects with values that do not change after construction\n\nAs is not , we must assume that it is modified somewhere in the loop.\n\nCon.5: Use for values that can be computed at compile time\n\nBetter performance, better compile-time checking, guaranteed compile-time evaluation, no possibility of race conditions.\n\nGeneric programming is programming using types and algorithms parameterized by types, values, and algorithms. In C++, generic programming is supported by the language mechanisms.\n\nArguments to generic functions are characterized by sets of requirements on the argument types and values involved. In C++, these requirements are expressed by compile-time predicates called concepts.\n\nTemplates can also be used for meta-programming; that is, programs that compose code at compile time.\n\nA central notion in generic programming is “concepts”; that is, requirements on template arguments presented as compile-time predicates. “Concepts” were standardized in C++20, although they were first made available, in slightly older syntax, in GCC 6.1.\n• T.1: Use templates to raise the level of abstraction of code\n• T.2: Use templates to express algorithms that apply to many argument types\n• T.3: Use templates to express containers and ranges\n• T.5: Combine generic and OO techniques to amplify their strengths, not their costs\n• T.10: Specify concepts for all template arguments\n• T.11: Whenever possible use standard concepts\n• T.23: Differentiate a refined concept from its more general case by adding new use patterns\n• T.24: Use tag classes or traits to differentiate concepts that differ only in semantics\n• T.26: Prefer to define concepts in terms of use-patterns rather than simple syntax\n• T.40: Use function objects to pass operations to algorithms\n• T.42: Use template aliases to simplify notation and hide implementation details\n• T.44: Use function templates to deduce class template argument types (where feasible)\n• T.46: Require template arguments to be at least semiregular\n• T.48: If your compiler does not support concepts, fake them with\n• T.64: Use specialization to provide alternative implementations of class templates\n• T.65: Use tag dispatch to provide alternative implementations of functions\n• T.67: Use specialization to provide alternative implementations for irregular types\n• T.68: Use rather than within templates to avoid ambiguities\n• T.69: Inside a template, don’t make an unqualified non-member function call unless you intend it to be a customization point\n• T.81: Do not mix hierarchies and arrays // ??? somewhere in “hierarchies”\n• T.84: Use a non-template core implementation to provide an ABI-stable interface\n• T.100: Use variadic templates when you need a function that takes a variable number of arguments of a variety of types\n• T.101: ??? How to pass arguments to a variadic template ???\n• T.102: ??? How to process arguments to a variadic template ???\n• T.120: Use template metaprogramming only when you really need to\n• T.122: Use templates (usually template aliases) to compute types at compile time\n• T.123: Use functions to compute values at compile time\n• T.125: If you need to go beyond the standard-library TMP facilities, use an existing library\n• T.140: If an operation can be reused, give it a name\n• T.141: Use an unnamed lambda if you need a simple function object in one place only\n\nGeneric programming is programming using types and algorithms parameterized by types, values, and algorithms.\n\nT.1: Use templates to raise the level of abstraction of code\n\nConceptually, the following requirements are wrong because what we want of is more than just the very low-level concepts of “can be incremented” or “can be added”:\n\nAssuming that does not support and does not support , we have overconstrained implementers of and . And, in this case, missed an opportunity for a generalization.\n\nAssuming that requires both and , we have constrained the user of to provide a complete arithmetic type. That is not a minimal requirement, but it gives the implementer of algorithms much needed freedom and ensures that any type can be used for a wide variety of algorithms.\n\nFor additional generality and reusability, we could also use a more general or concept instead of committing to only one container, .\n\nIf we define a template to require exactly the operations required for a single implementation of a single algorithm (e.g., requiring just rather than also and ) and only those, we have overconstrained maintainers. We aim to minimize requirements on template arguments, but the absolutely minimal requirements of an implementation is rarely a meaningful concept.\n\nTemplates can be used to express essentially everything (they are Turing complete), but the aim of generic programming (as expressed using templates) is to efficiently generalize operations/algorithms over a set of types with similar semantic properties.\n• Flag algorithms with “overly simple” requirements, such as direct use of specific operators without a concept.\n• Do not flag the definition of the “overly simple” concepts themselves; they might simply be building blocks for more useful concepts.\n\nT.2: Use templates to express algorithms that apply to many argument types\n\nThat’s the foundation of the STL. A single algorithm easily works with any kind of input range:\n\nDon’t use a template unless you have a realistic need for more than one template argument type. Don’t overabstract.\n\nT.3: Use templates to express containers and ranges\n\nContainers need an element type, and expressing that as a template argument is general, reusable, and type safe. It also avoids brittle or inefficient workarounds. Convention: That’s the way the STL does it.\n\nThis doesn’t directly express the intent of the programmer and hides the structure of the program from the type system and optimizer.\n\nHiding the behind macros simply obscures the problems and introduces new opportunities for confusion.\n\nExceptions: If you need an ABI-stable interface, you might have to provide a base implementation and express the (type-safe) template in terms of that. See Stable base.\n• Flag uses of s and casts outside low-level implementation code\n\nT.5: Combine generic and OO techniques to amplify their strengths, not their costs\n\nDynamic helps static: Offer a generic, comfortable, statically bound interface, but internally dispatch dynamically, so you offer a uniform object layout. Examples include type erasure as with ’s deleter (but don’t overuse type erasure).\n\nIn a class template, non-virtual functions are only instantiated if they’re used – but virtual functions are instantiated every time. This can bloat code size, and might overconstrain a generic type by instantiating functionality that is never needed. Avoid this, even though the standard-library facets made this mistake.\n\nSee the reference to more specific rules.\n\nConcepts is a C++20 facility for specifying requirements for template arguments. They are crucial in the thinking about generic programming and the basis of much work on future C++ libraries (standard and other).\n• T.10: Specify concepts for all template arguments\n• T.11: Whenever possible use standard concepts\n• T.23: Differentiate a refined concept from its more general case by adding new use patterns\n• T.24: Use tag classes or traits to differentiate concepts that differ only in semantics\n• T.26: Prefer to define concepts in terms of use-patterns rather than simple syntax\n\nT.10: Specify concepts for all template arguments\n\nCorrectness and readability. The assumed meaning (syntax and semantics) of a template argument is fundamental to the interface of a template. A concept dramatically improves documentation and error handling for the template. Specifying concepts for template arguments is a powerful design tool.\n\nor equivalently and more succinctly:\n\nPlain (or ) is the least constraining concept. It should be used only rarely when nothing more than “it’s a type” can be assumed. This is typically only needed when (as part of template metaprogramming code) we manipulate pure expression trees, postponing type checking.\n\nT.11: Whenever possible use standard concepts\n\n“Standard” concepts (as provided by the GSL and the ISO standard itself) save us the work of thinking up our own concepts, are better thought out than we can manage to do in a hurry, and improve interoperability.\n\nUnless you are creating a new generic library, most of the concepts you need will already be defined by the standard library.\n\nThis is quite plausible, but it is very similar to the concept in the standard library. Is it better? Is it right? Does it accurately reflect the standard’s requirements for ? It is better and simpler just to use :\n\nThe set of “standard” concepts is evolving as we approach an ISO standard including concepts.\n• Look for unconstrained arguments, templates that use “unusual”/non-standard concepts, templates that use “homebrew” concepts without axioms.\n\nis the weakest concept. Concept names convey more meaning than just .\n\nTo say “ is ”:\n\nThe shorter versions better match the way we speak. Note that many templates don’t need to use the keyword.\n• Not feasible in the short term when people convert from the and > notation.\n• Later, flag declarations that first introduce a typename and then constrain it with a simple, single-type-argument concept.\n\nDefining good concepts is non-trivial. Concepts are meant to represent fundamental concepts in an application domain (hence the name “concepts”). Similarly throwing together a set of syntactic constraints to be used for the arguments for a single class or algorithm is not what concepts were designed for and will not give the full benefits of the mechanism.\n\nObviously, defining concepts is most useful for code that can use an implementation (e.g., C++20 or later) but defining concepts is in itself a useful design technique and help catch conceptual errors and clean up the concepts (sic!) of an implementation.\n\nConcepts are meant to express semantic notions, such as “a number”, “a range” of elements, and “totally ordered.” Simple constraints, such as “has a operator” and “has a operator” cannot be meaningfully specified in isolation and should be used only as building blocks for meaningful concepts, rather than in user code.\n\nMaybe the concatenation was expected. More likely, it was an accident. Defining minus equivalently would give dramatically different sets of accepted types. This violates the mathematical rule that addition is supposed to be commutative: .\n\nThe ability to specify meaningful semantics is a defining characteristic of a true concept, as opposed to a syntactic constraint.\n\nConcepts with multiple operations have far lower chance of accidentally matching a type than a single-operation concept.\n• Flag single-operation when used outside the definition of other .\n• Flag uses of that appear to simulate single-operation .\n\nThis is a specific variant of the general rule that a concept must make semantic sense.\n\nThis makes no semantic sense. You need at least to make meaningful and useful.\n\nThis rule applies whether we use direct language support for concepts or not. It is a general design rule that even applies to non-templates:\n\nThis is minimal, but surprising and constraining for users. It could even be less efficient.\n\nThe rule supports the view that a concept should reflect a (mathematically) coherent set of operations.\n\nIt can be a nuisance to define all operators, but not hard. Ideally, that rule should be language supported by giving you comparison operators by default.\n• Flag classes that support “odd” subsets of a set of operators, e.g., but not or but not . Yes, is “odd”, but it’s too late to change that.\n\nA meaningful/useful concept has a semantic meaning. Expressing these semantics in an informal, semi-formal, or formal way makes the concept comprehensible to readers and the effort to express it can catch conceptual errors. Specifying semantics is a powerful design tool.\n\nThis is an axiom in the mathematical sense: something that can be assumed without proof. In general, axioms are not provable, and when they are the proof is often beyond the capability of a compiler. An axiom might not be general, but the template writer can assume that it holds for all inputs actually used (similar to a precondition).\n\nIn this context axioms are Boolean expressions. See the Palo Alto TR for examples. Currently, C++ does not support axioms (even the ISO Concepts TS), so we have to make do with comments for a longish while. Once language support is available, the in front of the axiom can be removed\n\nThe GSL concepts have well-defined semantics; see the Palo Alto TR and the Ranges TS.\n\nEarly versions of a new “concept” still under development will often just define simple sets of constraints without a well-specified semantics. Finding good semantics can take effort and time. An incomplete set of constraints can still be very useful:\n\nSo a must supply at least these operations on a tree , but we are not yet ready to specify detailed semantics because a new kind of balanced tree might require more operations and the precise general semantics for all nodes is hard to pin down in the early stages of design.\n\nA “concept” that is incomplete or without a well-specified semantics can still be useful. For example, it allows for some checking during initial experimentation. However, it should not be assumed to be stable. Each new use case might require such an incomplete concept to be improved.\n• Look for the word “axiom” in concept definition comments\n\nT.23: Differentiate a refined concept from its more general case by adding new use patterns.\n\nOtherwise they cannot be distinguished automatically by the compiler.\n\nThe compiler can determine refinement based on the sets of required operations (here, suffix ). This decreases the burden on implementers of these types since they do not need any special declarations to “hook into the concept”. If two concepts have exactly the same requirements, they are logically equivalent (there is no refinement).\n• Flag a concept that has exactly the same requirements as another already-seen concept (neither is more refined). To disambiguate them, see T.24.\n\nT.24: Use tag classes or traits to differentiate concepts that differ only in semantics.\n\nTwo concepts requiring the same syntax but having different semantics leads to ambiguity unless the programmer differentiates them.\n\nThe programmer (in a library) must define (a trait) appropriately.\n\nWrapping a tag class into a concept leads to a simpler expression of this idea:\n\nThe programmer (in a library) must define (a trait) appropriately.\n\nTraits can be trait classes or type traits. These can be user-defined or standard-library ones. Prefer the standard-library ones.\n• The compiler flags ambiguous use of identical concepts.\n\nClarity. Maintainability. Functions with complementary requirements expressed using negation are brittle.\n\nInitially, people will try to define functions with complementary requirements:\n\nThis is better:\n\nThe compiler will choose the unconstrained template only when is unsatisfied. If you do not want to (or cannot) define an unconstrained version of , then delete it.\n\nThe compiler will select the overload, or emit an appropriate error.\n\nComplementary constraints are unfortunately common in code:\n\nComplementary requirements on one requirement is sometimes (wrongly) considered manageable. However, for two or more requirements the number of definitions needs can go up exponentially (2,4,8,16,…):\n\nNow the opportunities for errors multiply.\n• Flag pairs of functions with and constraints\n\nT.26: Prefer to define concepts in terms of use-patterns rather than simple syntax\n\nThe definition is more readable and corresponds directly to what a user has to write. Conversions are taken into account. You don’t have to remember the names of all the type traits.\n\nYou might be tempted to define a concept like this:\n\nObviously, it would be better and easier just to use the standard , but - just as an example - if you had to define such a concept, prefer:\n\nas opposed to defining two meaningless concepts and just as helpers in the definition of . By “meaningless” we mean that we cannot specify the semantics of in isolation.\n\nOver the years, programming with templates have suffered from a weak distinction between the interface of a template and its implementation. Before concepts, that distinction had no direct language support. However, the interface to a template is a critical concept - a contract between a user and an implementer - and should be carefully designed.\n\nT.40: Use function objects to pass operations to algorithms\n\nFunction objects can carry more information through an interface than a “plain” pointer to function. In general, passing function objects gives better performance than passing pointers to functions.\n\nYou can, of course, generalize those functions using or concepts. For example:\n\nThe performance argument depends on compiler and optimizer technology.\n• Flag pointers to functions passed as arguments to a template (risk of false positives).\n\nShould this be rewritten to:\n\nAfter all, there is nothing in that requires support. On the other hand, there is nothing in the fundamental idea of sorting that says anything about debugging.\n\nIf we require every operation used to be listed among the requirements, the interface becomes unstable: Every time we change the debug facilities, the usage data gathering, testing support, error reporting, etc., the definition of the template would need change and every use of the template would have to be recompiled. This is cumbersome, and in some environments infeasible.\n\nConversely, if we use an operation in the implementation that is not guaranteed by concept checking, we might get a late compile-time error.\n\nBy not using concept checking for properties of a template argument that is not considered essential, we delay checking until instantiation time. We consider this a worthwhile tradeoff.\n\nNote that using non-local, non-dependent names (such as and ) also introduces context dependencies that might lead to “mysterious” errors.\n\nIt can be hard to decide which properties of a type are essential and which are not.\n\nT.42: Use template aliases to simplify notation and hide implementation details\n\nImproved readability. Implementation hiding. Note that template aliases replace many uses of traits to compute a type. They can also be used to wrap a trait.\n\nThis saves the user of from having to know that its elements are stored in a and also saves the user from repeatedly typing .\n\nThis saves the user of from having to know the technique used to implement s.\n\nA simple, common use could be expressed: “Wrap traits!”\n• Flag use of as a disambiguator outside declarations.\n\nImproved readability: With , the new name comes first rather than being embedded somewhere in a declaration. Generality: can be used for template aliases, whereas s can’t easily be templates. Uniformity: is syntactically similar to .\n• Flag uses of . This will give a lot of “hits” :-(\n\nT.44: Use function templates to deduce class template argument types (where feasible)\n\nWriting the template argument types explicitly can be tedious and unnecessarily verbose.\n\nNote the use of the suffix to ensure that the string is a , rather than a C-style string.\n\nSince you can trivially write a function, so could the compiler. Thus, functions might become redundant in the future.\n\nSometimes there isn’t a good way of getting the template arguments deduced and sometimes, you want to specify the arguments explicitly:\n\nNote that C++17 will make this rule redundant by allowing the template arguments to be deduced directly from constructor arguments: Template parameter deduction for constructors (Rev. 3). For example:\n\nFlag uses where an explicitly specialized type exactly matches the types of the arguments used.\n\nT.46: Require template arguments to be at least semiregular\n\nReadability. Preventing surprises and errors. Most uses support that anyway.\n• Flag types used as template arguments that are not at least semiregular.\n\nAn unconstrained template argument is a perfect match for anything so such a template can be preferred over more specific types that require minor conversions. This is particularly annoying/dangerous when ADL is used. Common names make this problem more likely.\n\nNow the in was designed to cause trouble, but would you have spotted the problem in real code? The problem is that returns an integer so that a conversion is needed to call the local ; the in requires no conversions. Realistic types, such as the standard-library iterators can be made to exhibit similar anti-social tendencies.\n\nIf an unconstrained template is defined in the same namespace as a type, that unconstrained template can be found by ADL (as happened in the example). That is, it is highly visible.\n\nThis rule should not be necessary, but the committee cannot agree to exclude unconstrained templates from ADL.\n\nUnfortunately this will get many false positives; the standard library violates this widely, by putting many unconstrained templates and types into the single namespace .\n\nFlag templates defined in a namespace where concrete types are also defined (maybe not feasible until we have concepts).\n\nT.48: If your compiler does not support concepts, fake them with\n\nBecause that’s the best we can do without direct concept support. can be used to conditionally define functions and to select among a set of functions.\n\nBeware of complementary constraints. Faking concept overloading using sometimes forces us to use that error-prone design technique.\n\nType erasure incurs an extra level of indirection by hiding type information behind a separate compilation boundary.\n\nExceptions: Type erasure is sometimes appropriate, such as for .\n\nA template definition (class or function) can contain arbitrary code, so only a comprehensive review of C++ programming techniques would cover this topic. However, this section focuses on what is specific to template implementation. In particular, it focuses on a template definition’s dependence on its context.\n\nTemplates typically appear in header files so their context dependencies are more vulnerable to order dependencies than functions in files.\n\nHaving a template operate only on its arguments would be one way of reducing the number of dependencies to a minimum, but that would generally be unmanageable. For example, algorithms usually use other algorithms and invoke operations that do not exclusively operate on arguments. And don’t get us started on macros!\n\nA member that does not depend on a template parameter cannot be used except for a specific template argument. This limits use and typically increases code size.\n\nThis looks innocent enough, but now formally depends on the allocator (even though it doesn’t use the allocator). This forces redundant instantiations that can be surprisingly costly in some real-world scenarios. Typically, the solution is to make what would have been a nested class non-local, with its own minimal set of template parameters.\n\nSome people found the idea that the no longer was hidden inside the list scary, so we named the technique SCARY. From that academic paper: “The acronym SCARY describes assignments and initializations that are Seemingly erroneous (appearing Constrained by conflicting generic parameters), but Actually work with the Right implementation (unconstrained bY the conflict due to minimized dependencies).”\n\nThis also applies to lambdas that don’t depend on all of the template parameters.\n• Flag member types that do not depend on every template parameter\n• Flag member functions that do not depend on every template parameter\n• Flag lambdas or variable templates that do not depend on every template parameter\n\nAllow the base class members to be used without specifying template arguments and without template instantiation.\n\nA more general version of this rule would be “If a class template member depends on only N template parameters out of M, place it in a base class with only N parameters.” For N == 1, we have a choice of a base class of a class in the surrounding scope as in T.61.\n\nT.64: Use specialization to provide alternative implementations of class templates\n\nA template defines a general interface. Specialization offers a powerful mechanism for providing alternative implementations of that interface.\n\nT.65: Use tag dispatch to provide alternative implementations of a function\n• Tag dispatch allows us to select implementations based on specific properties of an argument type.\n\nThis is a simplified version of (ignoring the possibility of non-contiguous sequences)\n\nThis is a general and powerful technique for compile-time algorithm selection.\n\nWith C++20 constraints, such alternatives can be distinguished directly:\n\nT.67: Use specialization to provide alternative implementations for irregular types\n\nT.68: Use rather than within templates to avoid ambiguities\n\nT.69: Inside a template, don’t make an unqualified non-member function call unless you intend it to be a customization point\n\nThere are three major ways to let calling code customize a template.\n\nA trait is usually a type alias to compute a type, a function to compute a value, or a traditional traits template to be specialized on the user’s type.\n\nIf you intend to call your own helper function with a value that depends on a template type parameter, put it in a namespace and qualify the call as . An unqualified call becomes a customization point where any function in the namespace of ’s type can be invoked; this can cause problems like unintentionally invoking unconstrained function templates.\n• In a template, flag an unqualified call to a non-member function that passes a variable of dependent type when there is a non-member function of the same name in the template’s namespace.\n\nTemplates are the backbone of C++’s support for generic programming and class hierarchies the backbone of its support for object-oriented programming. The two language mechanisms can be used effectively in combination, but a few design pitfalls must be avoided.\n\nTemplating a class hierarchy that has many functions, especially many virtual functions, can lead to code bloat.\n\nIt is probably a bad idea to define a as a member function of a container, but it is not unheard of and it makes a good example of what not to do.\n\nGiven this, the compiler cannot know if is called, so it must generate code for it. Similar for . Unless those two functions are called that’s code bloat. Imagine what this would do to a class hierarchy with dozens of member functions and dozens of derived classes with many instantiations.\n\nIn many cases you can provide a stable interface by not parameterizing a base; see “stable base” and OO and GP\n\nT.81: Do not mix hierarchies and arrays\n\nAn array of derived classes can implicitly “decay” to a pointer to a base class with potential disastrous results.\n\nAssume that and are two kinds of s.\n\nProbably, will be a (without the use of a cast!). If the access to will not be aligned to the proper start of an object in the array. We have a type violation and possibly (probably) a memory corruption. Never write such code.\n\nNote that violates the a points to an individual object rule.\n\nNote that the assignment in violated the no-slicing rule.\n\nC++ does not support that. If it did, vtbls could not be generated until link time. And in general, implementations must deal with dynamic linking.\n\nWe need a rule because people keep asking about this\n\nT.84: Use a non-template core implementation to provide an ABI-stable interface\n\nIt could be a base class:\n\nNow there is only one copy of the operations linking and unlinking elements of a . The and classes do nothing but type manipulation.\n\nInstead of using a separate “base” type, another common technique is to specialize for or and have the general template for be just the safely-encapsulated casts to and from the core implementation.\n\nT.100: Use variadic templates when you need a function that takes a variable number of arguments of a variety of types\n\nVariadic templates is the most general mechanism for that, and is both efficient and type-safe. Don’t use C varargs.\n• Flag uses of in user code.\n\nT.101: ??? How to pass arguments to a variadic template ???\n\nT.102: How to process arguments to a variadic template\n\nThere are more precise ways of specifying a homogeneous sequence, such as an .\n\nMetaprogramming is programming where at least one input or one result is a type. Templates offer Turing-complete (modulo memory capacity) duck typing at compile time. The syntax and techniques needed are pretty horrendous.\n\nT.120: Use template metaprogramming only when you really need to\n\nTemplate metaprogramming is hard to get right, slows down compilation, and is often very hard to maintain. However, there are real-world examples where template metaprogramming provides better performance than any alternative short of expert-level assembly code. Also, there are real-world examples where template metaprogramming expresses the fundamental ideas better than run-time code. For example, if you really need AST manipulation at compile time (e.g., for optional matrix operation folding) there might be no other way in C++.\n\nInstead, use concepts. But see How to emulate concepts if you don’t have language support.\n\nAlternative: If the result is a value, rather than a type, use a function.\n\nIf you feel the need to hide your template metaprogramming in macros, you have probably gone too far.\n\nWhere C++20 is not available, we need to emulate them using TMP. Use cases that require concepts (e.g. overloading based on concepts) are among the most common (and simple) uses of TMP.\n\nSuch code is much simpler using concepts:\n\nT.122: Use templates (usually template aliases) to compute types at compile time\n\nTemplate metaprogramming is the only directly supported and half-way principled way of generating types at compile time.\n\n“Traits” techniques are mostly replaced by template aliases to compute types and functions to compute values.\n\nT.123: Use functions to compute values at compile time\n\nA function is the most obvious and conventional way of expressing the computation of a value. Often a function implies less compile-time overhead than alternatives.\n\n“Traits” techniques are mostly replaced by template aliases to compute types and functions to compute values.\n• Flag template metaprograms yielding a value. These should be replaced with functions.\n\nFacilities defined in the standard, such as , , and , are portable and can be assumed to be known.\n\nT.125: If you need to go beyond the standard-library TMP facilities, use an existing library\n\nGetting advanced TMP facilities is not easy and using a library makes you part of a (hopefully supportive) community. Write your own “advanced TMP support” only if you really have to.\n\nT.140: If an operation can be reused, give it a name\n\nT.141: Use an unnamed lambda if you need a simple function object in one place only\n\nGenerality. Reusability. Don’t gratuitously commit to details; use the most general facilities available.\n\nUse instead of to compare iterators; works for more objects because it doesn’t rely on ordering.\n\nOf course, range- is better still where it does what you want.\n\nUse the least-derived class that has the functionality you need.\n• Flag comparison of iterators using instead of .\n• Flag when or is available. Emptiness works for more containers than size(), because some containers don’t know their size or are conceptually of unbounded size.\n• Flag functions that take a pointer or reference to a more-derived type but only use functions declared in a base type.\n\nYou can’t partially specialize a function template per language rules. You can fully specialize a function template but you almost certainly want to overload instead – because function template specializations don’t participate in overloading, they don’t act as you probably wanted. Rarely, you should actually specialize by delegating to a class template that you can specialize properly.\n\nExceptions: If you do have a valid reason to specialize a function template, just write a single function template that delegates to a class template, then specialize the class template (including the ability to write partial specializations).\n• Flag all specializations of a function template. Overload instead.\n\nIf you intend for a class to match a concept, verifying that early saves users’ pain.\n\nSomewhere, possibly in an implementation file, let the compiler check the desired properties of :\n\nC and C++ are closely related languages. They both originate in “Classic C” from 1978 and have evolved in ISO committees since then. Many attempts have been made to keep them compatible, but neither is a subset of the other.\n• CPL.1: Prefer C++ to C\n• CPL.2: If you must use C, use the common subset of C and C++, and compile the C code as C++\n• CPL.3: If you must use C for interfaces, use C++ in the calling code using such interfaces\n\nCPL.1: Prefer C++ to C\n\nC++ provides better type checking and more notational support. It provides better support for high-level programming and often generates faster code.\n\nThe rules for implicit casting to and from in C are subtle and unenforced. In particular, this example violates a rule against converting to a type with stricter alignment.\n\nCPL.2: If you must use C, use the common subset of C and C++, and compile the C code as C++\n\nThat subset can be compiled with both C and C++ compilers, and when compiled as C++ is better type checked than “pure C.”\n• Flag if using a build mode that compiles code as C.\n• The C++ compiler will enforce that the code is valid C++ unless you use C extension options.\n\nCPL.3: If you must use C for interfaces, use C++ in the calling code using such interfaces\n\nC++ is more expressive than C and offers better support for many types of programming.\n\nFor example, to use a 3rd party C library or C systems interface, define the low-level interface in the common subset of C and C++ for better type checking. Whenever possible encapsulate the low-level interface in an interface that follows the C++ guidelines (for better abstraction, memory safety, and resource safety) and use that C++ interface in C++ code.\n\nYou can call C from C++:\n\nYou can call C++ from C:\n\nDistinguish between declarations (used as interfaces) and definitions (used as implementations). Use header files to represent interfaces and to emphasize logical structure.\n• SF.1: Use a suffix for code files and for interface files if your project doesn’t already follow another convention\n• SF.2: A header file must not contain object definitions or non-inline function definitions\n• SF.3: Use header files for all declarations used in multiple source files\n• SF.4: Include header files before other declarations in a file\n• SF.5: A file must include the header file(s) that defines its interface\n• SF.6: Use directives for transition, for foundation libraries (such as ), or within a local scope (only)\n• SF.8: Use guards for all header files\n• SF.12: Prefer the quoted form of for files relative to the including file and the angle bracket form everywhere else\n• SF.21: Don’t use an unnamed (anonymous) namespace in a header\n• SF.22: Use an unnamed (anonymous) namespace for all internal/non-exported entities\n\nSF.1: Use a suffix for code files and for interface files if your project doesn’t already follow another convention\n\nSF.2: A header file must not contain object definitions or non-inline function definitions\n\nIncluding entities subject to the one-definition rule leads to linkage errors.\n\nLinking and will give two linker errors.\n\nAlternative formulation: A header file must contain only:\n• s of other header files (possibly with include guards)\n\nSF.3: Use header files for all declarations used in multiple source files\n\nA maintainer of cannot find all declarations of if its type needs changing. The user of cannot know if the interface used is complete and correct. At best, error messages come (late) from the linker.\n• Flag declarations of entities in other source files not placed in a .\n\nSF.4: Include header files before other declarations in a file\n\nThis applies to both and files.\n\nThere is an argument for insulating code from declarations and macros in header files by headers after the code we want to protect (as in the example labeled “bad”). However\n• that only works for one file (at one level): Use that technique in a header included with other headers and the vulnerability reappears.\n• a namespace (an “implementation namespace”) can protect against many context dependencies.\n• Working Draft, Extensions to C++ for Modules\n\nSF.5: A file must include the header file(s) that defines its interface\n\nThis enables the compiler to do an early consistency check.\n\nThe errors will not be caught until link time for a program calling or .\n\nThe return-type error for is now caught immediately when is compiled. The argument-type error for cannot be caught until link time because of the possibility of overloading, but systematic use of files increases the likelihood that it is caught earlier by the programmer.\n\nSF.6: Use directives for transition, for foundation libraries (such as ), or within a local scope (only)\n\ncan lead to name clashes, so it should be used sparingly. However, it is not always possible to qualify every name from a namespace in user code (e.g., during transition) and sometimes a namespace is so fundamental and prevalent in a code base, that consistent qualification would be verbose and distracting.\n\nHere (obviously), the standard library is used pervasively and apparently no other library is used, so requiring everywhere could be distracting.\n\nThe use of leaves the programmer open to a name clash with a name from the standard library\n\nHowever, this is not particularly likely to lead to a resolution that is not an error and people who use are supposed to know about and about this risk.\n\nA file is a form of local scope. There is little difference in the opportunities for name clashes in an N-line containing a , an N-line function containing a , and M functions each containing a with N lines of code in total.\n\nDoing so takes away an r’s ability to effectively disambiguate and to use alternatives. It also makes d headers order-dependent as they might have different meaning when included in different orders.\n\nAn exception is . This is necessary to use string literals in header files and given the rules - users are required to name their own UDLs - they will not collide with the standard library.\n\nSF.8: Use guards for all header files\n\nTo avoid files being d several times.\n\nIn order to avoid include guard collisions, do not just name the guard after the filename. Be sure to also include a key and good differentiator, such as the name of library or component the header file is part of.\n\nSome implementations offer vendor extensions like as alternative to include guards. It is not standard and it is not portable. It injects the hosting machine’s filesystem semantics into your program, in addition to locking you down to a vendor. Our recommendation is to write in ISO C++: See rule P.2.\n\nCycles complicate comprehension and slow down compilation. They also complicate conversion to use language-supported modules (when they become available).\n\nEliminate cycles; don’t just break them with guards.\n\nAvoid surprises. Avoid having to change s if an d header changes. Avoid accidentally becoming dependent on implementation details and logically separate entities included in a header.\n\nexposes the definition of (“why?” makes for a fun trivia question), but it is not required to do so by transitively including the entire header, resulting in the popular beginner question “why doesn’t work?” or even an occasional “ s cannot be compared with ”).\n\nThe solution is to explicitly :\n\nSome headers exist exactly to collect a set of consistent declarations from a variety of headers. For example:\n\na user can now get that set of declarations with a single\n\nThis rule against implicit inclusion is not meant to prevent such deliberate aggregation.\n\nEnforcement would require some knowledge about what in a header is meant to be “exported” to users and what is there to enable implementation. No really good solution is possible until we have modules.\n\nUsability, headers should be simple to use and work when included on their own. Headers should encapsulate the functionality they provide. Avoid clients of a header having to manage that header’s dependencies.\n\nFailing to follow this results in difficult to diagnose errors for clients of a header.\n\nA header should include all its dependencies. Be careful about using relative paths because C++ implementations diverge on their meaning.\n\nA test should verify that the header file itself compiles or that a cpp file which only includes the header file compiles.\n\nSF.12: Prefer the quoted form of for files relative to the including file and the angle bracket form everywhere else\n\nThe standard provides flexibility for compilers to implement the two forms of selected using the angle ( ) or quoted ( ) syntax. Vendors take advantage of this and use different search algorithms and methods for specifying the include path.\n\nNevertheless, the guidance is to use the quoted form for including files that exist at a relative path to the file containing the statement (from within the same component or project) and to use the angle bracket form everywhere else, where possible. This encourages being clear about the locality of the file relative to files that include it, or scenarios where the different search algorithm is required. It makes it easy to understand at a glance whether a header is being included from a local relative file versus a standard library header or a header from the alternate search path (e.g. a header from another library or a common set of includes).\n\nFailing to follow this results in difficult to diagnose errors due to picking up the wrong file by incorrectly specifying the scope when it is included. For example, in a typical case where the search algorithm might search for a file existing at a local relative path first, then using this form to refer to a file that is not locally relative could mean that if a file ever comes into existence at the local relative path (e.g. the including file is moved to a new location), it will now be found ahead of the previous include file and the set of includes will have been changed in an unexpected way.\n\nLibrary creators should put their headers in a folder and have clients include those files using the relative path\n\nA test should identify whether headers referenced via could be referenced with .\n\nThe standard does not specify how compilers uniquely locate headers from an identifier in an directive, nor does it specify what constitutes uniqueness. For example, whether the implementation considers the identifiers to be case-sensitive, or whether the identifiers are file system paths to a header file, and if so, how a hierarchical file system path is delimited.\n\nTo maximize the portability of directives across compilers, guidance is to:\n• use case-sensitivity for the header identifier, matching how the header is defined by the standard, specification, implementation, or file that provides the header.\n• when the header identifier is a hierarchical file path, use forward-slash to delimit path components as this is the most widely-accepted path-delimiting character.\n\nIt is only possible to enforce on implementations where header identifiers are case-sensitive and which only support as a file path delimiter.\n\nSF.21: Don’t use an unnamed (anonymous) namespace in a header\n\nIt is almost always a bug to mention an unnamed namespace in a header file.\n• Flag any use of an anonymous namespace in a header file.\n\nSF.22: Use an unnamed (anonymous) namespace for all internal/non-exported entities\n\nNothing external can depend on an entity in a nested unnamed namespace. Consider putting every definition in an implementation source file in an unnamed namespace unless that is defining an “external/exported” entity.\n\nAn API class and its members can’t live in an unnamed namespace; but any “helper” class or function that is defined in an implementation source file should be at an unnamed namespace scope.\n\nUsing only the bare language, every task is tedious (in any language). Using a suitable library any task can be reasonably simple.\n\nThe standard library has steadily grown over the years. Its description in the standard is now larger than that of the language features. So, it is likely that this library section of the guidelines will eventually grow in size to equal or exceed all the rest.\n\n« ??? We need another level of rule numbering ??? »\n• SL.1: Use libraries wherever possible\n• SL.2: Prefer the standard library to other libraries\n• SL.3: Do not add non-standard entities to namespace\n• SL.4: Use the standard library in a type-safe manner\n\nSL.1: Use libraries wherever possible\n\nSave time. Don’t re-invent the wheel. Don’t replicate the work of others. Benefit from other people’s work when they make improvements. Help other people when you make improvements.\n\nSL.2: Prefer the standard library to other libraries\n\nMore people know the standard library. It is more likely to be stable, well-maintained, and widely available than your own code or most other libraries.\n\nSL.3: Do not add non-standard entities to namespace\n\nAdding to might change the meaning of otherwise standards conforming code. Additions to might clash with future versions of the standard.\n\nPossible, but messy and likely to cause problems with platforms.\n\nSL.4: Use the standard library in a type-safe manner\n\nBecause, obviously, breaking this rule can lead to undefined behavior, memory corruption, and all kinds of other bad errors.\n\nThis is a semi-philosophical meta-rule, which needs many supporting concrete rules. We need it as an umbrella for the more specific rules.\n• SL.4: Use the standard library in a type-safe manner\n• SL.con.1: Prefer using STL or instead of a C array\n• SL.con.2: Prefer using STL by default unless you have a reason to use a different container\n• SL.con.4: don’t use or for arguments that are not trivially-copyable\n\nSL.con.1: Prefer using STL or instead of a C array\n\nC arrays are less safe, and have no advantages over and . For a fixed-length array, use , which does not degenerate to a pointer when passed to a function and does know its size. Also, like a built-in array, a stack-allocated keeps its elements on the stack. For a variable-length array, use , which additionally can change its size and handles memory allocation.\n\nUse for non-owning references into a container.\n\nComparing the performance of a fixed-sized array allocated on the stack against a with its elements on the free store is bogus. You could just as well compare a on the stack against the result of a accessed through a pointer. For most code, even the difference between stack allocation and free-store allocation doesn’t matter, but the convenience and safety of does. People working with code for which that difference matters are quite capable of choosing between and .\n• Flag declaration of a C array inside a function or class that also declares an STL container (to avoid excessive noisy warnings on legacy non-STL code). To fix: At least change the C array to a .\n\nSL.con.2: Prefer using STL by default unless you have a reason to use a different container\n\nand are the only standard containers that offer the following advantages:\n• the fastest default access pattern (begin-to-end or end-to-begin is prefetcher-friendly);\n• the lowest space overhead (contiguous layout has zero per-element overhead, which is cache-friendly).\n\nUsually you need to add and remove elements from the container, so use by default; if you don’t need to modify the container’s size, use .\n\nEven when other containers seem more suited, such as for O(log N) lookup performance or a for efficient insertion in the middle, a will usually still perform better for containers up to a few KB in size.\n\nshould not be used as a container of individual characters. A is a textual string; if you want a container of characters, use or instead.\n\nIf you have a good reason to use another container, use that instead. For example:\n• If suits your needs but you don’t need the container to be variable size, use instead.\n• If you want a dictionary-style lookup container that guarantees O(K) or O(log N) lookups, the container will be larger (more than a few KB) and you perform frequent inserts so that the overhead of maintaining a sorted is infeasible, go ahead and use an or instead.\n\nTo initialize a vector with a number of elements, use -initialization. To initialize a vector with a list of elements, use -initialization.\n• Flag a whose size never changes after construction (such as because it’s or because no non- functions are called on it). To fix: Use an instead.\n\nRead or write beyond an allocated range of elements typically leads to bad errors, wrong results, crashes, and security violations.\n\nThe standard-library functions that apply to ranges of elements all have (or could have) bounds-safe overloads that take . Standard types such as can be modified to perform bounds-checks under the bounds profile (in a compatible way, such as by adding contracts), or used with .\n\nIdeally, the in-bounds guarantee should be statically enforced. For example:\n• a range- cannot loop beyond the range of the container to which it is applied\n• a is easily determined to be bounds safe\n\nSuch loops are as fast as any unchecked/unsafe equivalent.\n\nOften a simple pre-check can eliminate the need for checking of individual indices. For example\n• for the can easily be checked against\n\nSuch loops can be much faster than individually checked element accesses.\n\nAlso, or or even an empty initializer are better candidates than .\n\nIf code is using an unmodified standard library, then there are still workarounds that enable use of and in a bounds-safe manner. Code can call the member function on each class, which will result in an exception being thrown. Alternatively, code can call the free function, which will result in fail-fast (or a customized action) on a bounds violation.\n• Issue a diagnostic for any call to a standard-library function that is not bounds-checked. ??? insert link to a list of banned functions\n\nThis rule is part of the bounds profile.\n\nSL.con.4: don’t use or for arguments that are not trivially-copyable\n\nDoing so messes the semantics of the objects (e.g., by overwriting a ).\n• Flag the use of those functions for types that are not trivially copyable\n• Impact on the standard library will require close coordination with WG21, if only to ensure compatibility even if never standardized.\n• We are considering specifying bounds-safe overloads for stdlib (especially C stdlib) functions like and shipping them in the GSL.\n• For existing stdlib functions and types like that are not fully bounds-checked, the goal is for these features to be bounds-checked when called from code with the bounds profile on, and unchecked when called from legacy code, possibly using contracts (concurrently being proposed by several WG21 members).\n\nText manipulation is a huge topic. doesn’t cover all of it. This section primarily tries to clarify ’s relation to , , , and . The important issue of non-ASCII character sets and encodings (e.g., , Unicode, and UTF-8) will be covered elsewhere.\n\nHere, we use “sequence of characters” or “string” to refer to a sequence of characters meant to be read as text (somehow, eventually). We don’t consider ???\n• SL.str.1: Use to own character sequences\n• SL.str.2: Use or to refer to character sequences\n• SL.str.3: Use or to refer to a C-style, zero-terminated, sequence of characters\n• SL.str.4: Use to refer to a single character\n• SL.str.5: Use to refer to byte values that do not necessarily represent characters\n• SL.str.10: Use when you need to perform locale-sensitive string operations\n• SL.str.11: Use rather than when you need to mutate a string\n• SL.str.12: Use the suffix for string literals meant to be standard-library s\n\nSL.str.1: Use to own character sequences\n\ncorrectly handles allocation, ownership, copying, gradual expansion, and offers a variety of useful operations.\n\nNote how and are provided for (as examples of useful operations) and there are no explicit allocations, deallocations, or range checks ( takes care of those).\n\nIn C++17, we might use as the argument, rather than to allow more flexibility to callers:\n\nDon’t use C-style strings for operations that require non-trivial memory management\n\nDid we get that right? Will the caller remember to the returned pointer? Will this code pass a security review?\n\nDo not assume that is slower than lower-level techniques without measurement and remember that not all code is performance critical. Don’t optimize prematurely\n\nSL.str.2: Use or to refer to character sequences\n\nor provides simple and (potentially) safe access to character sequences independently of how those sequences are allocated and stored.\n\nSL.str.3: Use or to refer to a C-style, zero-terminated, sequence of characters\n\nReadability. Statement of intent. A plain can be a pointer to a single character, a pointer to an array of characters, a pointer to a C-style (zero-terminated) string, or even to a small integer. Distinguishing these alternatives prevents misunderstandings and bugs.\n\nAll we know is that it is supposed to be the nullptr or point to at least one character\n\nDon’t convert a C-style string to unless there is a reason to.\n\nLike any other “plain pointer”, a should not represent ownership.\n\nThere are billions of lines of C++ “out there”, most use and without documenting intent. They are used in a wide variety of ways, including to represent ownership and as generic pointers to memory (instead of ). It is hard to separate these uses, so this guideline is hard to follow. This is one of the major sources of bugs in C and C++ programs, so it is worthwhile to follow this guideline wherever feasible.\n• Flag uses of on a\n• Flag uses of on a\n• Flag uses of on a\n\nSL.str.4: Use to refer to a single character\n\nThe variety of uses of in current code is a major source of errors.\n\nThe array is not a C-style string because it is not zero-terminated.\n• Flag uses of on a\n\nSL.str.5: Use to refer to byte values that do not necessarily represent characters\n\nUse of to represent a pointer to something that is not necessarily a character causes confusion and disables valuable optimizations.\n\nSL.str.10: Use when you need to perform locale-sensitive string operations\n\nSL.str.11: Use rather than when you need to mutate a string\n\nThe compiler will flag attempts to write to a .\n\nSL.str.12: Use the suffix for string literals meant to be standard-library s\n\ns is a type safe, extensible, formatted and unformatted I/O library for streaming I/O. It supports multiple (and user extensible) buffering strategies and multiple locales. It can be used for conventional I/O, reading and writing to memory (string streams), and user-defined extensions, such as streaming across networks (asio: not yet standardized).\n• SL.io.1: Use character-level input only when you have to\n• SL.io.2: When reading, always consider ill-formed input\n• SL.io.10: Unless you use -family functions call\n\nSL.io.1: Use character-level input only when you have to\n\nUnless you genuinely just deal with individual characters, using character-level input leads to the user code performing potentially error-prone and potentially inefficient composition of tokens out of characters.\n\nBetter (much simpler and probably faster):\n\nand the is probably not worthwhile.\n\nSL.io.2: When reading, always consider ill-formed input\n\nErrors are typically best handled as soon as possible. If input isn’t validated, every function must be written to cope with bad data (and that is not practical).\n\nis a user-defined type and its I/O is defined without modifying the library.\n\nIt is often (and often correctly) pointed out that the family has two advantages compared to s: flexibility of formatting and performance. This has to be weighed against s advantages of extensibility to handle user-defined types, resilience against security violations, implicit memory management, and handling.\n\nIf you need I/O performance, you can almost always do better than .\n\n, using , and using are security hazards (vulnerable to buffer overflow and generally error-prone). C11 defines some “optional extensions” that do extra checking of their arguments. If present in your C library, , , and might be safer alternatives, but they are still not type safe.\n\nSL.io.10: Unless you use -family functions call\n\nSynchronizing with I/O can be costly. and are by default synchronized with .\n\nThe manipulator is mostly equivalent to and ; as most commonly used it simply slows down output by doing redundant s. This slowdown can be significant compared to -style output.\n\nFor / (and equivalent) interaction, there is no reason to flush; that’s done automatically. For writing to a file, there is rarely a need to .\n\nFor string streams (specifically ), the insertion of an is entirely equivalent to the insertion of a character, but also in this case, might be significantly slower.\n\ndoes not take care of producing a platform specific end-of-line sequence (like on Windows). So for a string stream, just inserts a single character, .\n\nApart from the (occasionally important) issue of performance, the choice between and is almost completely aesthetic.\n\nis the standard C++ regular expression library. It supports a variety of regular expression pattern conventions.\n\n(defined in namespace ) provides the notions of and together with functions for outputting time in various units. It provides clocks for registering .\n\na ignores destructors, thus invalidating all resource-management strategies relying on RAII\n\nFlag all occurrences of and\n\nThis section contains ideas about higher-level architectural ideas and libraries.\n• A.4: There should be no cycles among libraries\n\nIsolating less stable code facilitates its unit testing, interface improvement, refactoring, and eventual deprecation.\n\nA library is a collection of declarations and definitions maintained, documented, and shipped together. A library could be a set of headers (a “header-only library”) or a set of headers plus a set of object files. You can statically or dynamically link a library into a program, or you can a header-only library.\n\nA.4: There should be no cycles among libraries\n• Cycles are hard to understand and might introduce indeterminism (unspecified behavior).\n\nA library can contain cyclic references in the definition of its components. For example:\n\nHowever, a library should not depend on another that depends on it.\n\nThis section contains rules and guidelines that are popular somewhere, but that we deliberately don’t recommend. We know perfectly well that there have been times and places where these rules made sense, and we have used them ourselves at times. However, in the context of the styles of programming we recommend and support with the guidelines, these “non-rules” would do harm.\n\nEven today, there can be contexts where the rules make sense. For example, lack of suitable tool support can make exceptions unsuitable in hard-real-time systems, but please don’t naïvely trust “common wisdom” (e.g., unsupported statements about “efficiency”); such “wisdom” might be based on decades-old information or experiences from languages with very different properties than C++ (e.g., C or Java).\n\nThe positive arguments for alternatives to these non-rules are listed in the rules offered as “Alternatives”.\n• NR.1: Don’t insist that all declarations should be at the top of a function\n• NR.2: Don’t insist on having only a single -statement in a function\n• NR.4: Don’t insist on placing each class definition in its own source file\n• NR.6: Don’t place all cleanup actions at the end of a function and\n\nNR.1: Don’t insist that all declarations should be at the top of a function\n\nThe “all declarations on top” rule is a legacy of old programming languages that didn’t allow initialization of variables and constants after a statement. This leads to longer programs and more errors caused by uninitialized and wrongly initialized variables.\n\nThe larger the distance between the uninitialized variable and its use, the larger the chance of a bug. Fortunately, compilers catch many “used before set” errors. Unfortunately, compilers cannot catch all such errors and unfortunately, the bugs aren’t always as simple to spot as in this small example.\n• ES.21: Don’t introduce a variable (or constant) before you need to use it\n\nNR.2: Don’t insist on having only a single -statement in a function\n\nThe single-return rule can lead to unnecessarily convoluted code and the introduction of extra state variables. In particular, the single-return rule makes it harder to concentrate error checking at the top of a function.\n\nto use a single return only we would have to do something like\n\nThis is both longer and likely to be less efficient. The larger and more complicated the function is, the more painful the workarounds get. Of course many simple functions will naturally have just one because of their simpler inherent logic.\n\nIf we applied the rule, we’d get something like\n\nNote that we (deliberately) violated the rule against uninitialized variables because this style commonly leads to that. Also, this style is a temptation to use the goto exit non-rule.\n• Feel free to use multiple statements (and to throw exceptions).\n\nThere seem to be four main reasons given for not using exceptions:\n• the exception-handling run-time support takes up too much space\n\nThere is no way we can settle this issue to the satisfaction of everybody. After all, the discussions about exceptions have been going on for 40+ years. Some languages cannot be used without exceptions, but others do not support them. This leads to strong traditions for the use and non-use of exceptions, and to heated debates.\n\nHowever, we can briefly outline why we consider exceptions the best alternative for general-purpose programming and in the context of these guidelines. Simple arguments for and against are often inconclusive. There are specialized applications where exceptions indeed can be inappropriate (e.g., hard-real-time systems without support for reliable estimates of the cost of handling an exception).\n\nConsider the major objections to exceptions in turn\n• Exceptions are inefficient: Compared to what? When comparing make sure that the same set of errors are handled and that they are handled equivalently. In particular, do not compare a program that immediately terminates on seeing an error to a program that carefully cleans up resources before logging an error. Yes, some systems have poor exception handling implementations; sometimes, such implementations force us to use other error-handling approaches, but that’s not a fundamental problem with exceptions. When using an efficiency argument - in any context - be careful that you have good data that actually provides insight into the problem under discussion.\n• Exceptions lead to leaks and errors. They do not. If your program is a rat’s nest of pointers without an overall strategy for resource management, you have a problem whatever you do. If your system consists of a million lines of such code, you probably will not be able to use exceptions, but that’s a problem with excessive and undisciplined pointer use, rather than with exceptions. In our opinion, you need RAII to make exception-based error handling simple and safe – simpler and safer than alternatives.\n• Exception performance is not predictable. If you are in a hard-real-time system where you must guarantee completion of a task in a given time, you need tools to back up such guarantees. As far as we know such tools are not available (at least not to most programmers).\n• The exception-handling run-time support takes up too much space. This can be the case in small (usually embedded) systems. However, before abandoning exceptions consider what space consistent error-handling using error-codes would require and what failure to catch an error would cost.\n\nMany, possibly most, problems with exceptions stem from historical needs to interact with messy old code.\n\nThe fundamental arguments for the use of exceptions are\n• They clearly differentiate between erroneous return and ordinary return\n• They cannot be forgotten or ignored\n• They can be used systematically\n• Exceptions are for reporting errors (in C++; other languages can have different uses for exceptions).\n• Exceptions are not for errors that can be handled locally.\n• Don’t try to catch every exception in every function (that’s tedious, clumsy, and leads to slow code).\n• Exceptions are not for errors that require instant termination of a module/system after a non-recoverable error.\n• Contracts/assertions: Use GSL’s and (until we get language support for contracts)\n\nNR.4: Don’t insist on placing each class definition in its own source file\n\nThe resulting number of files from placing each class in its own file are hard to manage and can slow down compilation. Individual classes are rarely a good logical unit of maintenance and distribution.\n• Use namespaces containing logically cohesive sets of classes and functions.\n\nSplitting initialization into two leads to weaker invariants, more complicated code (having to deal with semi-constructed objects), and errors (when we didn’t deal correctly with semi-constructed objects consistently).\n• Don’t define an object before it is needed.\n\nNR.6: Don’t place all cleanup actions at the end of a function and\n\nis error-prone. This technique is a pre-exception technique for RAII-like resource and error handling.\n\ndata is a source of errors. data can be manipulated from an unbounded amount of code in various places. data is the class hierarchy equivalent to global data.\n\nMany coding standards, rules, and guidelines have been written for C++, and especially for specialized uses of C++. Many\n• focus on lower-level issues, such as the spelling of identifiers\n• are written by C++ novices\n• see “stopping programmers from doing unusual things” as their primary aim\n• aim at portability across many compilers (some 10 years old)\n• are written to preserve decades old code bases\n• are ignored (must be ignored by programmers to get their work done well)\n\nA bad coding standard is worse than no coding standard. However an appropriate set of guidelines are much better than no standards: “Form is liberating.”\n\nWhy can’t we just have a language that allows all we want and disallows all we don’t want (“a perfect language”)? Fundamentally, because affordable languages (and their tool chains) also serve people with needs that differ from yours and serve more needs than you have today. Also, your needs change over time and a general-purpose language is needed to allow you to adapt. A language that is ideal for today would be overly restrictive tomorrow.\n\nCoding guidelines adapt the use of a language to specific needs. Thus, there cannot be a single coding style for everybody. We expect different organizations to provide additions, typically with more restrictions and firmer style rules.\n• AUTOSAR Guidelines for the use of the C++14 language in critical and safety-related systems v17.10\n• Bloomberg: BDE C++ Coding. Has a strong emphasis on code organization and layout.\n• GCC Coding Conventions. C++03 and (reasonably) a bit backwards looking.\n• Google C++ Style Guide. Geared toward C++17 and (also) older code bases. Google experts are now actively collaborating here on helping to improve these Guidelines, and hopefully to merge efforts so these can be a modern common set they could also recommend.\n• JSF++: JOINT STRIKE FIGHTER AIR VEHICLE C++ CODING STANDARDS. Document Number 2RDU00001 Rev C. December 2005. For flight control software. For hard-real-time. This means that it is necessarily very restrictive (“if the program fails somebody dies”). For example, no free store allocation or deallocation is allowed to occur after the plane takes off (no memory overflow and no fragmentation allowed). No exception is allowed to be used (because there was no available tool for guaranteeing that an exception would be handled within a fixed short time). Libraries used have to have been approved for mission critical applications. Any similarities to this set of guidelines are unsurprising because Bjarne Stroustrup was an author of JSF++. Recommended, but note its very specific focus.\n• MISRA C++:2023 Guidelines for the use C++17 in critical systems.\n• Using C++ in Mozilla Code. As the name indicates, this aims for portability across many (old) compilers. As such, it is restrictive.\n• SEI CERT: Secure C++ Coding Standard. A very nicely done set of rules (with examples and rationales) done for security-sensitive code. Many of their rules apply generally.\n• llvm. Somewhat brief, based on C++14, and (not unreasonably) adjusted to its domain.\n• SuttAlex05 Sutter and Alexandrescu: C++ Coding Standards. Addison-Wesley 2005. More a set of meta-rules than a set of rules. Pre-C++11.\n• Stroustrup14 Stroustrup: A Tour of C++. Addison Wesley 2014. Each chapter ends with an advice section consisting of a set of recommendations.\n• Stroustrup13 Stroustrup: The C++ Programming Language (4th Edition). Addison Wesley 2013. Each chapter ends with an advice section consisting of a set of recommendations.\n• Stroustrup: Style Guide for Programming: Principles and Practice using C++. Mostly low-level naming and layout rules. Primarily a teaching tool.\n• TC++PL4: A thorough description of the C++ language and standard libraries for experienced programmers.\n• Tour++: An overview of the C++ language and standard libraries for experienced programmers.\n• Programming: Principles and Practice using C++: A textbook for beginners and relative novices.\n• Bjarne Stroustrup: The Essence of C++: With Examples in C++84, C++98, C++11, and C++14. 2013\n• All the talks from CppCon ‘14\n• Bjarne Stroustrup: The essence of C++ at the University of Edinburgh. 2014.\n• Bjarne Stroustrup: The Evolution of C++ Past, Present and Future. CppCon 2016 keynote.\n• Herb Sutter: Writing Good C++14… By Default. CppCon 2015 keynote about the Core Guidelines.\n\nThis section contains materials that have been useful for presenting the core guidelines and the ideas behind them:\n• Stroustrup, Sutter, and Dos Reis: A brief introduction to C++’s model for type- and resource-safety. A paper with lots of examples.\n• Sergey Zubkov: a Core Guidelines talk and here are the slides. In Russian. 2017.\n• Neil MacIntosh: The Guideline Support Library: One Year Later. CppCon 2016.\n• Peter Sommerlad: C++ Core Guidelines - Modernize your C++ Code Base. ACCU 2017.\n• Bjarne Stroustrup: No Littering!. Bay Area ACCU 2016. It gives some idea of the ambition level for the Core Guidelines.\n\nNote that slides for CppCon presentations are available (links with the posted videos).\n\nContributions to this list would be most welcome.\n\nThanks to the many people who contributed rules, suggestions, supporting information, references, etc.:\n\nand see the contributor list on the github.\n\nIdeally, we would follow all of the guidelines. That would give the cleanest, most regular, least error-prone, and often the fastest code. Unfortunately, that is usually impossible because we have to fit our code into large code bases and use existing libraries. Often, such code has been written over decades and does not follow these guidelines. We must aim for gradual adoption.\n\nWhatever strategy for gradual adoption we adopt, we need to be able to apply sets of related guidelines to address some set of problems first and leave the rest until later. A similar idea of “related guidelines” becomes important when some, but not all, guidelines are considered relevant to a code base or if a set of specialized guidelines is to be applied for a specialized application area. We call such a set of related guidelines a “profile”. We aim for such a set of guidelines to be coherent so that they together help us reach a specific goal, such as “absence of range errors” or “static type safety.” Each profile is designed to eliminate a class of errors. Enforcement of “random” rules in isolation is more likely to be disruptive to a code base than delivering a definite improvement.\n\nA “profile” is a set of deterministic and portably enforceable subset of rules (i.e., restrictions) that are designed to achieve a specific guarantee. “Deterministic” means they require only local analysis and could be implemented in a compiler (though they don’t need to be). “Portably enforceable” means they are like language rules, so programmers can count on different enforcement tools giving the same answer for the same code.\n\nCode written to be warning-free using such a language profile is considered to conform to the profile. Conforming code is considered to be safe by construction with regard to the safety properties targeted by that profile. Conforming code will not be the root cause of errors for that property, although such errors might be introduced into a program by other code, libraries or the external environment. A profile might also introduce additional library types to ease conformance and encourage correct code.\n\nIn the future, we expect to define many more profiles and add more checks to existing profiles. Candidates include:\n• selected undefined behavior: Start with Gabriel Dos Reis’s UB list developed for the WG21 study group\n• violations: Mostly done by compilers already, but we can catch inappropriate casting and underuse of .\n\nEnabling a profile is implementation defined; typically, it is set in the analysis tool used.\n\nTo suppress enforcement of a profile check, place a annotation on a language contract. For example:\n\nNow can scramble memory to its heart’s content. Obviously, suppression should be very rare.\n\nThis profile makes it easier to construct code that uses types correctly and avoids inadvertent type punning. It does so by focusing on removing the primary sources of type violations, including unsafe uses of casts and unions.\n\nFor the purposes of this section, type-safety is defined to be the property that a variable is not used in a way that doesn’t obey the rules for the type of its definition. Memory accessed as a type should not be valid memory that actually contains an object of an unrelated type . Note that the safety is intended to be complete when combined also with Bounds safety and Lifetime safety.\n\nAn implementation of this profile shall recognize the following patterns in source code as non-conforming and issue a diagnostic.\n• \n• Don’t use ; A strict version of Avoid casts and prefer named casts.\n• Don’t use for arithmetic types; A strict version of Avoid casts and prefer named casts.\n• Don’t cast between pointer types where the source type and the target type are the same; A strict version of Avoid casts.\n• Don’t cast between pointer types when the conversion could be implicit; A strict version of Avoid casts.\n• Type.2: Don’t use to downcast: Use instead.\n• Type.3: Don’t use to cast away (i.e., at all): Don’t cast away const.\n• Type.4: Don’t use C-style or functional casts: Prefer construction or named casts or .\n• Type.5: Don’t use a variable before it has been initialized: always initialize.\n• Type.6: Always initialize a data member: always initialize, possibly using default constructors or default member initializers.\n\nWith the type-safety profile you can trust that every operation is applied to a valid object. An exception can be thrown to indicate errors that cannot be detected statically (at compile time). Note that this type-safety can be complete only if we also have Bounds safety and Lifetime safety. Without those guarantees, a region of memory could be accessed independent of which object, objects, or parts of objects are stored in it.\n\nThis profile makes it easier to construct code that operates within the bounds of allocated blocks of memory. It does so by focusing on removing the primary sources of bounds violations: pointer arithmetic and array indexing. One of the core features of this profile is to restrict pointers to only refer to single objects, not arrays.\n\nWe define bounds-safety to be the property that a program does not use an object to access memory outside of the range that was allocated for it. Bounds safety is intended to be complete only when combined with Type safety and Lifetime safety, which cover other unsafe operations that allow bounds violations.\n• Bounds.1: Don’t use pointer arithmetic. Use instead: Pass pointers to single objects (only) and Keep pointer arithmetic simple.\n• Bounds.2: Only index into arrays using constant expressions: Pass pointers to single objects (only) and Keep pointer arithmetic simple.\n• Bounds.3: No array-to-pointer decay: Pass pointers to single objects (only) and Keep pointer arithmetic simple.\n• Bounds.4: Don’t use standard-library functions and types that are not bounds-checked: Use the standard library in a type-safe manner.\n\nBounds safety implies that access to an object - notably arrays - does not access beyond the object’s memory allocation. This eliminates a large class of insidious and hard-to-find errors, including the (in)famous “buffer overflow” errors. This closes security loopholes as well as a prominent source of memory corruption (when writing out of bounds). Even if an out-of-bounds access is “just a read”, it can lead to invariant violations (when the accessed isn’t of the assumed type) and “mysterious values.”\n\nAccessing through a pointer that doesn’t point to anything is a major source of errors, and very hard to avoid in many traditional C or C++ styles of programming. For example, a pointer might be uninitialized, the , point beyond the range of an array, or to a deleted object.\n\nSee the current design specification here.\n\nOnce completely enforced through a combination of style rules, static analysis, and library support, this profile\n• eliminates one of the major sources of nasty errors in C++\n\nThe GSL is a small library of facilities designed to support this set of guidelines. Without these facilities, the guidelines would have to be far more restrictive on language details.\n\nThe Core Guidelines support library is defined in namespace and the names might be aliases for standard library or other well-known library names. Using the (compile-time) indirection through the namespace allows for experimentation and for local variants of the support facilities.\n\nThe GSL is header only, and can be found at GSL: Guidelines support library. The support library facilities are designed to be extremely lightweight (zero-overhead) so that they impose no overhead compared to using conventional alternatives. Where desirable, they can be “instrumented” with additional functionality (e.g., checks) for tasks such as debugging.\n\nThese Guidelines use types from the standard (e.g., C++17) in addition to ones from the GSL. For example, we assume a type, but this is not currently in GSL. Eventually, use the one voted into C++17.\n\nSome of the GSL types listed below might not be supported in the library you use due to technical reasons such as limitations in the current versions of C++. Therefore, please consult your GSL documentation to find out more.\n\nFor each GSL type below we state an invariant for that type. That invariant holds as long as user code only changes the state of a GSL object using the type’s provided member/free functions (i.e., user code does not bypass the type’s interface to change the object’s value/bits by violating any other Guidelines rule).\n\nWe plan for a “ISO C++ standard style” semi-formal specification of the GSL.\n\nWe rely on the ISO C++ Standard Library and hope for parts of the GSL to be absorbed into the standard library.\n\nThese types allow the user to distinguish between owning and non-owning pointers and between pointers to a single object and pointers to the first element of a sequence.\n\nThese “views” are never owners.\n\nReferences are never owners (see R.4). Note: References have many opportunities to outlive the objects they refer to (returning a local variable by reference, holding a reference to an element of a vector and doing , binding to , etc). The Lifetime safety profile aims to address those things, but even so does not make sense and is discouraged.\n\nThe names are mostly ISO standard-library style (lower case and underscore):\n• // The is not an owner, might be null; assumed to be pointing to a single element.\n• // The is not an owner and can never be a “null reference”; references are always bound to objects.\n\nThe “raw-pointer” notation (e.g. ) is assumed to have its most common meaning; that is, a pointer points to an object, but does not own it. Owners should be converted to resource handles (e.g., or ) or marked .\n• // a that owns the object pointed/referred to; might be .\n\nis used to mark owning pointers in code that cannot be upgraded to use proper resource handles. Reasons for that include:\n• The pointer is used with an ABI.\n• The pointer is part of the implementation of a resource handle.\n\nAn differs from a resource handle for a by still requiring an explicit .\n\nAn is assumed to refer to an object on the free store (heap).\n\nIf something is not supposed to be , say so:\n• // is usually a pointer type (e.g., and ) that must not be . can be any type for which is meaningful.\n• // , constructor from and ; is the pointer type\n• // where is the first element for which is true\n\nA refers to zero or more mutable s unless is a type. All accesses to elements of the span, notably via , are guaranteed to be bounds-checked by default.\n\n“Pointer arithmetic” is best done within s. A that points to more than one but is not a C-style string (e.g., a pointer into an input buffer) should be represented by a .\n• // a supposed to be a C-style string; that is, a zero-terminated sequence of or\n• // a supposed to be a C-style string; that is, a zero-terminated sequence of or\n\nLogically, those last two aliases are not needed, but we are not always logical, and they make the distinction between a pointer to one and a pointer to a C-style string explicit. A sequence of characters that is not assumed to be zero-terminated should be a , or if that is impossible because of ABI issues a , rather than a .\n\nUse for C-style strings that cannot be . ??? Do we need a name for ? or is its ugliness a feature?\n• // A stack-allocated array. The number of elements is determined at construction and fixed thereafter. The elements are mutable unless is a type.\n• // A container, non-growing dynamically allocated array. The number of elements is determined at construction and fixed thereafter. The elements are mutable unless is a type. Basically a that allocates and owns its elements.\n• // precondition assertion. Currently placed in function bodies. Later, should be moved to declarations. // terminates the program unless // is under control of some options (enforcement, error message, alternatives to terminate)\n• // postcondition assertion. Currently placed in function bodies. Later, should be moved to declarations.\n\nThese assertions are currently macros (yuck!) and must appear in function definitions (only) pending standard committee decisions on contracts and assertion syntax. See the contract proposal; using the attribute syntax, for example, will become .\n• // is if with no signedness promotions, or it throws (e.g., throws)\n• // “Marker” to put on single-argument constructors to explicitly make them non-explicit.\n• // a type to use for all container and array indexing (currently an alias for )\n\nThese concepts (type predicates) are borrowed from Andrew Sutton’s Origin library, the Range proposal, and the ISO WG21 Palo Alto TR. Many of them are very similar to what became part of the ISO C++ standard in C++20.\n• // A type with , , , and default construction (default construction is assumed to set the singular “null” value)\n• // A type that matches , is movable, and is not copyable\n• // A type that matches , and is copyable\n\nConsistent naming and layout are helpful. If for no other reason because it minimizes “my style is better than your style” arguments. However, there are many, many, different styles around and people are passionate about them (pro and con). Also, most real-world projects include code from many sources, so standardizing on a single style for all code is often impossible. After many requests for guidance from users, we present a set of rules that you might use if you have no better ideas, but the real aim is consistency, rather than any particular rule set. IDEs and tools can help (as well as hinder).\n• NL.1: Don’t say in comments what can be clearly stated in code\n• NL.7: Make the length of a name roughly proportional to the length of its scope\n• NL.9: Use for macro names only\n• NL.20: Don’t place two statements on the same line\n• NL.21: Declare one name (only) per declaration\n• NL.25: Don’t use as an argument type\n• NL.27: Use a suffix for code files and for interface files\n\nMost of these rules are aesthetic and programmers hold strong opinions. IDEs also tend to have defaults and a range of alternatives. These rules are suggested defaults to follow unless you have reasons not to.\n\nWe have had comments to the effect that naming and layout are so personal and/or arbitrary that we should not try to “legislate” them. We are not “legislating” (see the previous paragraph). However, we have had many requests for a set of naming and layout conventions to use when there are no external constraints.\n\nMore specific and detailed rules are easier to enforce.\n\nThese rules bear a strong resemblance to the recommendations in the PPP Style Guide written in support of Stroustrup’s Programming: Principles and Practice using C++.\n\nCompilers do not read comments. Comments are less precise than code. Comments are not updated as consistently as code.\n\nBuild an AI program that interprets colloquial English text and see if what is said could be better expressed in C++.\n\nCode says what is done, not what is supposed to be done. Often intent can be stated more clearly and concisely than the implementation.\n\nIf the comment and the code disagree, both are likely to be wrong.\n\nVerbosity slows down understanding and makes the code harder to read by spreading it around in the source file.\n\nUse intelligible English. I might be fluent in Danish, but most programmers are not; the maintainers of my code might not be. Avoid SMS lingo and watch your grammar, punctuation, and capitalization. Aim for professionalism, not “cool.”\n\nAlways indenting the statement after , , and is usually a good idea:\n\nIf names reflect types rather than functionality, it becomes hard to change the types used to provide that functionality. Also, if the type of a variable is changed, code using it will have to be modified. Minimize unintentional conversions.\n\nNames with types encoded are either verbose or cryptic.\n\nRequiring techniques like Hungarian notation to encode a type has been used in untyped languages, but is generally unnecessary and actively harmful in a strongly statically-typed language like C++, because the annotations get out of date (the warts are just like comments and rot just like them) and they interfere with good use of the language (use the same name and overload resolution instead).\n\nSome styles use very general (not type-specific) prefixes to denote the general use of a variable.\n\nThis is not harmful and does not fall under this guideline because it does not encode type information.\n\nSome styles distinguish members from local variable, and/or from global variable.\n\nThis is not harmful and does not fall under this guideline because it does not encode type information.\n\nLike C++, some styles distinguish types from non-types. For example, by capitalizing type names, but not the names of functions and variables.\n\nThis is not harmful and does not fall under this guideline because it does not encode type information.\n\nNL.7: Make the length of a name roughly proportional to the length of its scope\n\nRationale: The larger the scope the greater the chance of confusion and of an unintended name clash.\n\nThe use of for pointer and for a floating-point variable is conventional and non-confusing in a restricted scope.\n\nThere are many styles and when you use multiple libraries, you can’t follow all their different conventions. Choose a “house style”, but leave “imported” libraries with their original style.\n\nISO Standard, use lower case only and digits, separate words with underscores:\n\nAvoid identifier names that contain double underscores or that start with an underscore followed by a capital letter (e.g., ). Such identifiers are reserved for the C++ implementation.\n\nStroustrup: ISO Standard, but with upper case used for your own types and concepts:\n\nSome conventions capitalize the first letter, some don’t.\n\nTry to be consistent in your use of acronyms and lengths of identifiers:\n\nWould be possible except for the use of libraries with varying conventions.\n\nNL.9: Use for macro names only\n\nTo avoid confusing macros with names that obey scope and type rules.\n\nIn particular, this avoids confusing macros with non-macro symbolic constants (see also Enum.5: Don’t use for enumerators)\n\nThe use of underscores to separate parts of a name is the original C and C++ style and used in the C++ Standard Library.\n\nThis rule is a default to use only if you have a choice. Often, you don’t have a choice and must follow an established style for consistency. The need for consistency beats personal taste.\n\nThis is a recommendation for when you have no constraints or better ideas. This rule was added after many requests for guidance.\n\nStroustrup: ISO Standard, but with upper case used for your own types and concepts:\n\nUse digit separators to avoid long strings of digits\n\nUse literal suffixes where clarification is needed\n\nLiterals should not be sprinkled all over the code as “magic constants”, but it is still a good idea to make them readable where they are defined. It is easy to make a typo in a long string of integers.\n\nFlag long digit sequences. The trouble is to define “long”; maybe 7.\n\nToo much space makes the text larger and distracts.\n\nSome IDEs have their own opinions and add distracting space.\n\nThis is a recommendation for when you have no constraints or better ideas. This rule was added after many requests for guidance.\n\nWe value well-placed whitespace as a significant help for readability. Just don’t overdo it.\n\nWhen declaring a class use the following order\n\nUse the before before order.\n\nThis is a recommendation for when you have no constraints or better ideas. This rule was added after many requests for guidance.\n\nSometimes, the default order of members conflicts with a desire to separate the public interface from implementation details. In such cases, private types and functions can be placed with private data.\n\nAvoid multiple blocks of declarations of one access (e.g., ) dispersed among blocks of declarations with different access (e.g. ).\n\nThe use of macros to declare groups of members often leads to violation of any ordering rules. However, using macros obscures what is being expressed anyway.\n\nFlag departures from the suggested order. There will be a lot of old code that doesn’t follow this rule.\n\nThis is the original C and C++ layout. It preserves vertical space well. It distinguishes different language constructs (such as functions and classes) well.\n\nIn the context of C++, this style is often called “Stroustrup”.\n\nThis is a recommendation for when you have no constraints or better ideas. This rule was added after many requests for guidance.\n\nNote the space between and\n\nUse separate lines for each statement, the branches of an , and the body of a .\n\nThe for a and a is not on a separate line, but the for a function is.\n\nCapitalize the names of your user-defined types to distinguish them from standards-library types.\n\nIf you want enforcement, use an IDE to reformat.\n\nThe C-style layout emphasizes use in expressions and grammar, whereas the C++-style emphasizes types. The use in expressions argument doesn’t hold for references.\n\nThis is a recommendation for when you have no constraints or better ideas. This rule was added after many requests for guidance.\n\nImpossible in the face of history.\n\nReadability. Not everyone has screens and printers that make it easy to distinguish all characters. We easily confuse similarly spelled and slightly misspelled words.\n\nNL.20: Don’t place two statements on the same line\n\nReadability. It is really easy to overlook a statement when there is more on a line.\n\nNL.21: Declare one name (only) per declaration\n\nNL.25: Don’t use as an argument type\n\nIt’s verbose and only needed where C compatibility matters.\n\nEven Dennis Ritchie deemed an abomination. You can make an argument for that abomination in C when function prototypes were rare so that banning:\n\nwould have caused major problems, but not in the 21st century and in C++.\n\nConventional notation is more familiar to more programmers. Consistency in large code bases.\n\nWe are well aware that you could claim the “bad” examples are more logical than the ones marked “OK”, but they also confuse more people, especially novices relying on teaching material using the far more common, conventional OK style.\n\nAs ever, remember that the aim of these naming and layout rules is consistency and that aesthetics vary immensely.\n\nThis is a recommendation for when you have no constraints or better ideas. This rule was added after many requests for guidance.\n\nFlag used as a suffix for a type.\n\nNL.27: Use a suffix for code files and for interface files\n\nIt’s a longstanding convention. But consistency is more important, so if your project uses something else, follow that.\n\nThis convention reflects a common use pattern: Headers are more often shared with C to compile as both C++ and C, which typically uses , and it’s easier to name all headers instead of having different extensions for just those headers that are intended to be shared with C. On the other hand, implementation files are rarely shared with C and so should typically be distinguished from files, so it’s normally best to name all C++ implementation files something else (such as ).\n\nThe specific names and are not required (just recommended as a default) and other names are in widespread use. Examples are , , and . Use such names equivalently. In this document, we refer to and as a shorthand for header and implementation files, even though the actual extension might be different.\n\nYour IDE (if you use one) might have strong opinions about suffixes.\n\nprovides the interface to . Global variables are best avoided.\n\ntwice in a program and you get a linker error for two one-definition-rule violations.\n• Check that and (and equivalents) follow the rules below.\n\nThis section covers answers to frequently asked questions about these guidelines.\n\nFAQ.1: What do these guidelines aim to achieve?\n\nSee the top of this page. This is an open-source project to maintain modern authoritative guidelines for writing C++ code using the current C++ Standard. The guidelines are designed to be modern, machine-enforceable wherever possible, and open to contributions and forking so that organizations can easily incorporate them into their own corporate coding guidelines.\n\nFAQ.2: When and where was this work first announced?\n\nIt was announced by Bjarne Stroustrup in his CppCon 2015 opening keynote, “Writing Good C++14”. See also the accompanying isocpp.org blog post, and for the rationale of the type and memory safety guidelines see Herb Sutter’s follow-up CppCon 2015 talk, “Writing Good C++14 … By Default”.\n\nFAQ.3: Who are the authors and maintainers of these guidelines?\n\nThe initial primary authors and maintainers are Bjarne Stroustrup and Herb Sutter, and the guidelines so far were developed with contributions from experts at CERN, Microsoft, Morgan Stanley, and several other organizations. At the time of their release, the guidelines are in a “0.6” state, and contributions are welcome. As Stroustrup said in his announcement: “We need help!”\n\nSee CONTRIBUTING.md. We appreciate volunteer help!\n\nFAQ.5: How can I become an editor/maintainer?\n\nBy contributing a lot first and having the consistent quality of your contributions recognized. See CONTRIBUTING.md. We appreciate volunteer help!\n\nFAQ.6: Have these guidelines been approved by the ISO C++ standards committee? Do they represent the consensus of the committee?\n\nNo. These guidelines are outside the standard. They are intended to serve the standard, and be maintained as current guidelines about how to use the current Standard C++ effectively. We aim to keep them in sync with the standard as that is evolved by the committee.\n\nFAQ.7: If these guidelines are not approved by the committee, why are they under ?\n\nBecause is the Standard C++ Foundation; the committee’s repositories are under github.com/cplusplus. Some neutral organization has to own the copyright and license to make it clear this is not being dominated by any one person or vendor. The natural entity is the Foundation, which exists to promote the use and up-to-date understanding of modern Standard C++ and the work of the committee. This follows the same pattern that isocpp.org did for the C++ FAQ, which was initially the work of Bjarne Stroustrup, Marshall Cline, and Herb Sutter and contributed to the open project in the same way.\n\nFAQ.8: Will there be a C++98 version of these Guidelines? a C++11 version?\n\nNo. These guidelines are about how to best use modern standard C++ and write code assuming you have a modern conforming compiler.\n\nFAQ.9: Do these guidelines propose new language features?\n\nNo. These guidelines are about how to best use modern Standard C++, and they limit themselves to recommending only those features.\n\nFAQ.10: What version of Markdown do these guidelines use?\n\nThese coding standards are written using CommonMark, and HTML anchors.\n\nWe are considering the following extensions from GitHub Flavored Markdown (GFM):\n• fenced code blocks (consistently using indented vs. fenced is under discussion)\n• tables (none yet but we’ll likely need them, and this is a GFM extension)\n\nAvoid other HTML tags and other extensions.\n\nNote: We are not yet consistent with this style.\n\nFAQ.50: What is the GSL (guidelines support library)?\n\nThe GSL is the small set of types and aliases specified in these guidelines. As of this writing, their specification herein is too sparse; we plan to add a WG21-style interface specification to ensure that different implementations agree, and to propose as a contribution for possible standardization, subject as usual to whatever the committee decides to accept/improve/alter/reject.\n\nNo. That is just a first implementation contributed by Microsoft. Other implementations by other vendors are encouraged, as are forks of and contributions to that implementation. As of this writing one week into the public project, at least one GPLv3 open-source implementation already exists. We plan to produce a WG21-style interface specification to ensure that different implementations agree.\n\nFAQ.52: Why not supply an actual GSL implementation in/with these guidelines?\n\nWe are reluctant to bless one particular implementation because we do not want to make people think there is only one, and inadvertently stifle parallel implementations. And if these guidelines included an actual implementation, then whoever contributed it could be mistakenly seen as too influential. We prefer to follow the long-standing approach of the committee, namely to specify interfaces, not implementations. But at the same time we want at least one implementation available; we hope for many.\n\nFAQ.53: Why weren’t the GSL types proposed through Boost?\n\nBecause we want to use them immediately, and because they are temporary in that we want to retire them as soon as types that fill the same needs exist in the standard library.\n\nFAQ.54: Has the GSL (guidelines support library) been approved by the ISO C++ standards committee?\n\nNo. The GSL exists only to supply a few types and aliases that are not currently in the standard library. If the committee decides on standardized versions (of these or other types that fill the same need) then they can be removed from the GSL.\n\nFAQ.55: If you’re using the standard types where available, why is the GSL different from the in the Library Fundamentals 1 Technical Specification and C++17 Working Paper? Why not just use the committee-approved ?\n\nThe consensus on the taxonomy of views for the C++ Standard Library was that “view” means “read-only”, and “span” means “read/write”. If you only need a read-only view of characters that does not need guaranteed bounds-checking and you have C++17, use C++17 . Otherwise, if you need a read-write view that does not need guaranteed bounds-checking and you have C++20, use C++20 . Otherwise, use .\n\nFAQ.56: Is the same as the proposed ?\n\nNo. owns, is an alias, and can be applied to any indirection type. The main intent of is to signify a non-owning pointer.\n\nFAQ.57: Is the same as the standard ?\n\nNo. is guaranteed to be allocated on the stack. Although a contains its storage directly inside itself, the object can be put anywhere, including the heap.\n\nFAQ.58: Is the same as or the proposed ?\n\nNo. is a container, like , but it is not resizable; its size is fixed at runtime when it is constructed. It is a safe way to refer to a dynamically “heap”-allocated fixed-size array. Unlike , it is intended to replace array- . Unlike the that has been proposed in the committee, this does not anticipate compiler/language magic to somehow allocate it on the stack when it is a member of an object that is allocated on the stack; it simply refers to a “dynamic” or heap-based array.\n\nFAQ.59: Is the same as ?\n\nNo. It is a placeholder for language support for contract preconditions.\n\nFAQ.60: Is the same as ?\n\nNo. It is a placeholder for language support for contract postconditions.\n\nThis section lists recommended libraries, and explicitly recommends a few.\n\n??? Suitable for the general guide? I think not ???\n\nIdeally, we follow all rules in all code. Realistically, we have to deal with a lot of old code:\n• application code written before the guidelines were formulated or known\n• code that we just haven’t gotten around to modernizing\n\nIf we have a million lines of new code, the idea of “just changing it all at once” is typically unrealistic. Thus, we need a way of gradually modernizing a code base.\n\nUpgrading older code to modern style can be a daunting task. Often, the old code is both a mess (hard to understand) and working correctly (for the current range of uses). Typically, the original programmer is not around and the test cases incomplete. The fact that the code is a mess dramatically increases the effort needed to make any change and the risk of introducing errors. Often, messy old code runs unnecessarily slowly because it requires outdated compilers and cannot take advantage of modern hardware. In many cases, automated “modernizer”-style tool support would be required for major upgrade efforts.\n\nThe purpose of modernizing code is to simplify adding new functionality, to ease maintenance, and to increase performance (throughput or latency), and to better utilize modern hardware. Making code “look pretty” or “follow modern style” are not by themselves reasons for change. There are risks implied by every change and costs (including the cost of lost opportunities) implied by having an outdated code base. The cost reductions must outweigh the risks.\n\nThere is no one approach to modernizing code. How best to do it depends on the code, the pressure for updates, the backgrounds of the developers, and the available tool. Here are some (very general) ideas:\n• The ideal is “just upgrade everything.” That gives the most benefits for the shortest total time. In most circumstances, it is also impossible.\n• We could convert a code base module for module, but any rules that affects interfaces (especially ABIs), such as use , cannot be done on a per-module basis.\n• We could convert code “bottom up” starting with the rules we estimate will give the greatest benefits and/or the least trouble in a given code base.\n• We could start by focusing on the interfaces, e.g., make sure that no resources are lost and no pointer is misused. This would be a set of changes across the whole code base, but would most likely have huge benefits. Afterwards, code hidden behind those interfaces can be gradually modernized without affecting other code.\n\nWhichever way you choose, please note that the most advantages come with the highest conformance to the guidelines. The guidelines are not a random set of unrelated rules where you can randomly pick and choose with an expectation of success.\n\nWe would dearly love to hear about experience and about tools used. Modernization can be much faster, simpler, and safer when supported with analysis tools and even code transformation tools.\n\nThis section contains follow-up material on rules and sets of rules. In particular, here we present further rationale, longer examples, and discussions of alternatives.\n\nDiscussion: Define and initialize data members in the order of member declaration\n\nData members are always initialized in the order they are declared in the class definition, so write them in that order in the constructor initialization list. Writing them in a different order just makes the code confusing because it won’t run in the order you see, and that can make it hard to see order-dependent bugs.\n\nIn this example, will be constructed before and because it is declared first. That means its constructor will attempt to use and too soon – not just before they are set to the desired values, but before they are constructed at all.\n\nIf the class definition and the constructor body are in separate files, the long-distance influence that the order of data member declarations has over the constructor’s correctness will be even harder to spot.\n\nDiscussion: Use of , , and as initializers\n\nDiscussion: Use a factory function if you need “virtual behavior” during initialization\n\nIf your design wants virtual dispatch into a derived class from a base class constructor or destructor for functions like and , you need other techniques, such as a post-constructor – a separate member function the caller must invoke to complete initialization, which can safely call and because in member functions virtual calls behave normally. Some techniques for this are shown in the References. Here’s a non-exhaustive list of options:\n• Pass the buck: Just document that user code must call the post-initialization function right after constructing an object.\n• Post-initialize lazily: Do it during the first call of a member function. A Boolean flag in the base class tells whether or not post-construction has taken place yet.\n• Use virtual base class semantics: Language rules dictate that the constructor of the most-derived class decides which base constructor will be invoked; you can use that to your advantage. (See [Taligent94].)\n• Use a factory function: This way, you can easily force a mandatory invocation of a post-constructor function.\n\nHere is an example of the last option:\n\nThis design requires the following discipline:\n• Derived classes such as must not expose a publicly callable constructor. Otherwise, ’s users could create objects that don’t invoke .\n• Allocation is limited to . can, however, override (see Items 45 and 46 in SuttAlex05).\n• must define a constructor with the same parameters that selected. Defining several overloads of can assuage this problem, however; and the overloads can even be templated on the argument types.\n\nIf the requirements above are met, the design guarantees that has been called for any fully constructed -derived object. doesn’t need to be virtual; it can, however, invoke virtual functions freely.\n\nIn summary, no post-construction technique is perfect. The worst techniques dodge the whole issue by simply asking the caller to invoke the post-constructor manually. Even the best require a different syntax for constructing objects (easy to check at compile time) and/or cooperation from derived class authors (impossible to check at compile time).\n\nDiscussion: Make base class destructors public and virtual, or protected and non-virtual\n\nShould destruction behave virtually? That is, should destruction through a pointer to a class be allowed? If yes, then ’s destructor must be public in order to be callable, and virtual otherwise calling it results in undefined behavior. Otherwise, it should be protected so that only derived classes can invoke it in their own destructors, and non-virtual since it doesn’t need to behave virtually.\n\nThe common case for a base class is that it’s intended to have publicly derived classes, and so calling code is just about sure to use something like a :\n\nIn rarer cases, such as policy classes, the class is used as a base class for convenience, not for polymorphic behavior. It is recommended to make those destructors protected and non-virtual:\n\nThis simple guideline illustrates a subtle issue and reflects modern uses of inheritance and object-oriented design principles.\n\nFor a base class , calling code might try to destroy derived objects through pointers to , such as when using a . If ’s destructor is public and non-virtual (the default), it can be accidentally called on a pointer that actually points to a derived object, in which case the behavior of the attempted deletion is undefined. This state of affairs has led older coding standards to impose a blanket requirement that all base class destructors must be virtual. This is overkill (even if it is the common case); instead, the rule should be to make base class destructors virtual if and only if they are public.\n\nTo write a base class is to define an abstraction (see Items 35 through 37). Recall that for each member function participating in that abstraction, you need to decide:\n• Whether it should behave virtually or not.\n• Whether it should be publicly available to all callers using a pointer to or else be a hidden internal implementation detail.\n\nAs described in Item 39, for a normal member function, the choice is between allowing it to be called via a pointer to non-virtually (but possibly with virtual behavior if it invokes virtual functions, such as in the NVI or Template Method patterns), virtually, or not at all. The NVI pattern is a technique to avoid public virtual functions.\n\nDestruction can be viewed as just another operation, albeit with special semantics that make non-virtual calls dangerous or wrong. For a base class destructor, therefore, the choice is between allowing it to be called via a pointer to virtually or not at all; “non-virtually” is not an option. Hence, a base class destructor is virtual if it can be called (i.e., is public), and non-virtual otherwise.\n\nNote that the NVI pattern cannot be applied to the destructor because constructors and destructors cannot make deep virtual calls. (See Items 39 and 55.)\n\nCorollary: When writing a base class, always write a destructor explicitly, because the implicitly generated one is public and non-virtual. You can always the implementation if the default body is fine and you’re just writing the function to give it the proper visibility and virtuality.\n\nSome component architectures (e.g., COM and CORBA) don’t use a standard deletion mechanism, and foster different protocols for object disposal. Follow the local patterns and idioms, and adapt this guideline as appropriate.\n\nConsider also this rare case:\n• is both a base class and a concrete class that can be instantiated by itself, and so the destructor must be public for objects to be created and destroyed.\n• Yet also has no virtual functions and is not meant to be used polymorphically, and so although the destructor is public it does not need to be virtual.\n\nThen, even though the destructor has to be public, there can be great pressure to not make it virtual because as the first virtual function it would incur all the run-time type overhead when the added functionality should never be needed.\n\nIn this rare case, you could make the destructor public and non-virtual but clearly document that further-derived objects must not be used polymorphically as ’s. This is what was done with .\n\nIn general, however, avoid concrete base classes (see Item 35). For example, is a bundle-of-typedefs that was never intended to be instantiated standalone. It really makes no sense to give it a public destructor; a better design would be to follow this Item’s advice and give it a protected non-virtual destructor.\n\nDiscussion: Destructors, deallocation, and swap must never fail\n\nNever allow an error to be reported from a destructor, a resource deallocation function (e.g., ), or a function using . It is nearly impossible to write useful code if these operations can fail, and even if something does go wrong it nearly never makes any sense to retry. Specifically, types whose destructors might throw an exception are flatly forbidden from use with the C++ Standard Library. Most destructors are now implicitly by default.\n• objects are hard to use safely even as local variables: void test(string& s) { Nefarious n; // trouble brewing string copy = s; // copy the string } // destroy copy and then n Here, copying could throw, and if that throws and if ’s destructor then also throws, the program will exit via because two exceptions can’t be propagated simultaneously.\n• Classes with members or bases are also hard to use safely, because their destructors must invoke ’ destructor, and are similarly poisoned by its bad behavior: class Innocent_bystander { Nefarious member; // oops, poisons the enclosing class's destructor // ... }; void test(string& s) { Innocent_bystander i; // more trouble brewing string copy2 = s; // copy the string } // destroy copy and then i Here, if constructing throws, we have the same problem because ’s destructor now also can throw, and if so we’ll invoke .\n• You can’t reliably create global or static objects either: static Nefarious n; // oops, any destructor exception can't be caught\n• The behavior of arrays is undefined in the presence of destructors that throw because there is no reasonable rollback behavior that could ever be devised. Just think: What code can the compiler generate for constructing an where, if the fourth object’s constructor throws, the code has to give up and in its cleanup mode tries to call the destructors of the already-constructed objects … and one or more of those destructors throws? There is no satisfactory answer.\n• You can’t use objects in standard containers: The standard library forbids all destructors used with it from throwing. You can’t store objects in standard containers or use them with any other part of the standard library.\n\nThese are key functions that must not fail because they are necessary for the two key operations in transactional programming: to back out work if problems are encountered during processing, and to commit work if no problems occur. If there’s no way to safely back out using no-fail operations, then no-fail rollback is impossible to implement. If there’s no way to safely commit state changes using a no-fail operation (notably, but not limited to, ), then no-fail commit is impossible to implement.\n\nConsider the following advice and requirements found in the C++ Standard:\n\nDeallocation functions, including specifically overloaded and , fall into the same category, because they too are used during cleanup in general, and during exception handling in particular, to back out of partial work that needs to be undone. Besides destructors and deallocation functions, common error-safety techniques rely also on operations never failing – in this case, not because they are used to implement a guaranteed rollback, but because they are used to implement a guaranteed commit. For example, here is an idiomatic implementation of for a type that performs copy construction followed by a call to a no-fail :\n\nFortunately, when releasing a resource, the scope for failure is definitely smaller. If using exceptions as the error reporting mechanism, make sure such functions handle all exceptions and other errors that their internal processing might generate. (For exceptions, simply wrap everything sensitive that your destructor does in a block.) This is particularly important because a destructor might be called in a crisis situation, such as failure to allocate a system resource (e.g., memory, files, locks, ports, windows, or other system objects).\n\nWhen using exceptions as your error handling mechanism, always document this behavior by declaring these functions . (See Item 75.)\n\nIf you define a copy constructor, you must also define a copy assignment operator.\n\nIf you define a move constructor, you must also define a move assignment operator.\n\nIf you define a destructor, you should not use the compiler-generated copy or move operation; you probably need to define or suppress copy and/or move.\n\nIf you define copying, and any base or member has a type that defines a move operation, you should also define a move operation.\n\nIf you define any of the copy constructor, copy assignment operator, or destructor, you probably should define the others.\n\nIf you need to define any of these five functions, it means you need it to do more than its default behavior – and the five are asymmetrically interrelated. Here’s how:\n• If you write/disable either of the copy constructor or the copy assignment operator, you probably need to do the same for the other: If one does “special” work, probably so should the other because the two functions should have similar effects. (See Item 53, which expands on this point in isolation.)\n• If you explicitly write the copying functions, you probably need to write the destructor: If the “special” work in the copy constructor is to allocate or duplicate some resource (e.g., memory, file, socket), you need to deallocate it in the destructor.\n• If you explicitly write the destructor, you probably need to explicitly write or disable copying: If you have to write a non-trivial destructor, it’s often because you need to manually release a resource that the object held. If so, it is likely that those resources require careful duplication, and then you need to pay attention to the way objects are copied and assigned, or disable copying completely.\n\nIn many cases, holding properly encapsulated resources using RAII “owning” objects can eliminate the need to write these operations yourself. (See Item 13.)\n\nPrefer compiler-generated (including ) special members; only these can be classified as “trivial”, and at least one major standard library vendor heavily optimizes for classes having trivial special members. This is likely to become common practice.\n\nExceptions: When any of the special functions are declared only to make them non-public or virtual, but without special semantics, it doesn’t imply that the others are needed. In rare cases, classes that have members of strange types (such as reference members) are an exception because they have peculiar copy semantics. In a class holding a reference, you likely need to write the copy constructor and the assignment operator, but the default destructor already does the right thing. (Note that using a reference member is almost always wrong.)\n• Provide strong resource safety; that is, never leak anything that you think of as a resource\n• Never return or throw while holding a resource not owned by a handle\n• A “raw” pointer or reference is never a resource handle\n• Never let a pointer outlive the object it points to\n• Use templates to express containers (and other resource handles)\n• Return containers by value (relying on move or copy elision for efficiency)\n• If a class is a resource handle, it needs a constructor, a destructor, and copy and/or move operations\n• If a class is a container, give it an initializer-list constructor\n\nDiscussion: Provide strong resource safety; that is, never leak anything that you think of as a resource\n\nPrevent leaks. Leaks can lead to performance degradation, mysterious error, system crashes, and security violations.\n\nAlternative formulation: Have every resource represented as an object of some class managing its lifetime.\n\nThis class is a resource handle. It manages the lifetime of the s. To do so, must define or delete the copy, move, and destruction operations.\n\nThe basic technique for preventing leaks is to have every resource owned by a resource handle with a suitable destructor. A checker can find “naked s”. Given a list of C-style allocation functions (e.g., ), a checker can also find uses that are not managed by a resource handle. In general, “naked pointers” can be viewed with suspicion, flagged, and/or analyzed. A complete list of resources cannot be generated without human input (the definition of “a resource” is necessarily too general), but a tool can be “parameterized” with a resource list.\n\nDiscussion: Never return or throw while holding a resource not owned by a handle\n\nThat would be a leak.\n\nIf the file handle for is leaked. On the other hand, the for will correctly close its file (upon destruction). If you must use an explicit pointer, rather than a resource handle with specific semantics, use a or a with a custom deleter:\n\nA checker must consider all “naked pointers” suspicious. A checker probably must rely on a human-provided list of resources. For starters, we know about the standard-library containers, , and smart pointers. The use of and should help a lot (they are not resource handles).\n\nDiscussion: A “raw” pointer or reference is never a resource handle\n\nTo be able to distinguish owners from views.\n\nThis is independent of how you “spell” pointer: , , and are not owners.\n\nDiscussion: Never let a pointer outlive the object it points to\n\nTo avoid extremely hard-to-find errors. Dereferencing such a pointer is undefined behavior and could lead to violations of the type system.\n\nThe s of are destroyed upon exit from and so is itself. The returned pointer points to unallocated memory on the free store. This memory (pointed into by ) might have been reallocated by the time is executed. There might be no to read and a write through could easily corrupt objects of unrelated types.\n\nMost compilers already warn about simple cases and have the information to do more. Consider any pointer returned from a function suspect. Use containers, resource handles, and views (e.g., known not to be resource handles) to lower the number of cases to be examined. For starters, consider every class with a destructor as resource handle.\n\nDiscussion: Use templates to express containers (and other resource handles)\n\nDiscussion: Return containers by value (relying on move or copy elision for efficiency)\n\nTo simplify code and eliminate a need for explicit memory management. To bring an object into a surrounding scope, thereby extending its lifetime.\n\nSee also: F.20, the general item about “out” output values\n\nSee the Exceptions in F.20.\n\nCheck for pointers and references returned from functions and see if they are assigned to resource handles (e.g., to a ).\n\nDiscussion: If a class is a resource handle, it needs a constructor, a destructor, and copy and/or move operations\n\nTo provide complete control of the lifetime of the resource. To provide a coherent set of operations on the resource.\n\nIf all members are resource handles, rely on the compiler-generated operations where possible.\n\nNow has a default constructor, a destructor, and efficient copy and move operations, provided has.\n\nIn general, a tool cannot know if a class is a resource handle. However, if a class has some of the default operations, it should have all, and if a class has a member that is a resource handle, it should be considered as resource handle.\n\nDiscussion: If a class is a container, give it an initializer-list constructor\n\nIt is common to need an initial set of elements.\n\nThis section contains a list of tools that directly support adoption of the C++ Core Guidelines. This list is not intended to be an exhaustive list of tools that are helpful in writing good C++ code. If a tool is designed specifically to support and links to the C++ Core Guidelines it is a candidate for inclusion.\n\nClang-tidy has a set of rules that specifically enforce the C++ Core Guidelines. These rules are named in the pattern .\n\nThe Microsoft compiler’s C++ code analysis contains a set of rules specifically aimed at enforcement of the C++ Core Guidelines.\n\nA relatively informal definition of terms used in the guidelines (based off the glossary in Programming: Principles and Practice using C++)\n\nMore information on many topics about C++ can be found on the Standard C++ Foundation’s site.\n• ABI: Application Binary Interface, a specification for a specific hardware platform combined with the operating system. Contrast with API.\n• abstract class: a class that cannot be directly used to create objects; often used to define an interface to derived classes. A class is made abstract by having a pure virtual function or only protected constructors.\n• abstraction: a description of something that selectively and deliberately ignores (hides) details (e.g., implementation details); selective ignorance.\n• address: a value that allows us to find an object in a computer’s memory.\n• algorithm: a procedure or formula for solving a problem; a finite series of computational steps to produce a result.\n• alias: an alternative way of referring to an object; often a name, pointer, or reference.\n• API: Application Programming Interface, a set of functions that form the communication between various software components. Contrast with ABI.\n• application: a program or a collection of programs that is considered an entity by its users.\n• approximation: something (e.g., a value or a design) that is close to the perfect or ideal (value or design). Often an approximation is a result of trade-offs among ideals.\n• argument: a value passed to a function or a template, in which it is accessed through a parameter.\n• assertion: a statement inserted into a program to state (assert) that something must always be true at this point in the program.\n• base class: a type that is intended to be derived from (e.g., has a non- virtual function), and objects of the type are intended to be used only indirectly (e.g., by pointer). [In strict terms, “base class” could be defined as “something we derived from” but we are specifying in terms of the class designer’s intent.] Typically a base class has one or more virtual functions.\n• bit: the basic unit of information in a computer. A bit can have the value 0 or the value 1.\n• byte: the basic unit of addressing in most computers. Typically, a byte holds 8 bits.\n• class: a user-defined type that can contain data members, function members, and member types.\n• code: a program or a part of a program; ambiguously used for both source code and object code.\n• complexity: a hard-to-precisely-define notion or measure of the difficulty of constructing a solution to a problem or of the solution itself. Sometimes complexity is used to (simply) mean an estimate of the number of operations needed to execute an algorithm.\n• computation: the execution of some code, usually taking some input and producing some output.\n• concept: (1) a notion, and idea; (2) a set of requirements, usually for a template argument.\n• concrete type: a type that is not a base class, and objects of the type are intended to be used directly (not only by pointer/indirection), its size is known, it can typically be allocated anywhere the programmer wants (e.g., stack or statically).\n• constant: a value that cannot be changed (in a given scope); not mutable.\n• constructor: an operation that initializes (“constructs”) an object. Typically a constructor establishes an invariant and often acquires resources needed for an object to be used (which are then typically released by a destructor).\n• container: an object that holds elements (other objects).\n• copy: an operation that makes two objects have values that compare equal. See also move.\n• correctness: a program or a piece of a program is correct if it meets its specification. Unfortunately, a specification can be incomplete or inconsistent, or can fail to meet users’ reasonable expectations. Thus, to produce acceptable code, we sometimes have to do more than just follow the formal specification.\n• cost: the expense (e.g., in programmer time, run time, or space) of producing a program or of executing it. Ideally, cost should be a function of complexity.\n• debugging: the act of searching for and removing errors from a program; usually far less systematic than testing.\n• declaration: the specification of a name with its type in a program.\n• definition: a declaration of an entity that supplies all information necessary to complete a program using the entity. Simplified definition: a declaration that allocates memory.\n• derived class: a class derived from one or more base classes.\n• design: an overall description of how a piece of software should operate to meet its specification.\n• destructor: an operation that is implicitly invoked (called) when an object is destroyed (e.g., at the end of a scope). Often, it releases resources.\n• encapsulation: protecting something meant to be private (e.g., implementation details) from unauthorized access.\n• error: a mismatch between reasonable expectations of program behavior (often expressed as a requirement or a users’ guide) and what a program actually does.\n• executable: a program ready to be run (executed) on a computer.\n• feature creep: a tendency to add excess functionality to a program “just in case.”\n• floating-point number: a computer’s approximation of a real number, such as 7.93 and 10.78e-3.\n• function: a named unit of code that can be invoked (called) from different parts of a program; a logical unit of computation.\n• generic programming: a style of programming focused on the design and efficient implementation of algorithms. A generic algorithm will work for all argument types that meet its requirements. In C++, generic programming typically uses templates.\n• handle: a class that allows access to another through a member pointer or reference. See also resource, copy, move.\n• header: a file containing declarations used to share interfaces between parts of a program.\n• hiding: the act of preventing a piece of information from being directly seen or accessed. For example, a name from a nested (inner) scope can prevent that same name from an outer (enclosing) scope from being directly used.\n• ideal: the perfect version of something we are striving for. Usually we have to make trade-offs and settle for an approximation.\n• implementation: (1) the act of writing and testing code; (2) the code that implements a program.\n• infinite loop: a loop where the termination condition never becomes true. See iteration.\n• infinite recursion: a recursion that doesn’t end until the machine runs out of memory to hold the calls. In reality, such recursion is never infinite but is terminated by some hardware error.\n• information hiding: the act of separating interface and implementation, thus hiding implementation details not meant for the user’s attention and providing an abstraction.\n• initialize: giving an object its first (initial) value.\n• input: values used by a computation (e.g., function arguments and characters typed on a keyboard).\n• integer: a whole number, such as 42 and -99.\n• interface: a declaration or a set of declarations specifying how a piece of code (such as a function or a class) can be called.\n• invariant: something that must be always true at a given point (or points) of a program; typically used to describe the state (set of values) of an object or the state of a loop before entry into the repeated statement.\n• iteration: the act of repeatedly executing a piece of code; see recursion.\n• iterator: an object that identifies an element of a sequence.\n• ISO: International Organization for Standardization. The C++ language is an ISO standard, ISO/IEC 14882. More information at iso.org.\n• library: a collection of types, functions, classes, etc. implementing a set of facilities (abstractions) meant to be potentially used as part of more than one program.\n• lifetime: the time from the initialization of an object until it becomes unusable (goes out of scope, is deleted, or the program terminates).\n• linker: a program that combines object code files and libraries into an executable program.\n• literal: a notation that directly specifies a value, such as 12 specifying the integer value “twelve.”\n• loop: a piece of code executed repeatedly; in C++, typically a for-statement or a -statement.\n• move: an operation that transfers a value from one object to another leaving behind a value representing “empty.” See also copy.\n• move-only type: a concrete type that is movable but not copyable.\n• mutable: changeable; the opposite of immutable, constant, and invariable.\n• object: (1) an initialized region of memory of a known type which holds a value of that type; (2) a region of memory.\n• object code: output from a compiler intended as input for a linker (for the linker to produce executable code).\n• object-oriented programming: (OOP) a style of programming focused on the design and use of classes and class hierarchies.\n• operation: something that can perform some action, such as a function and an operator.\n• output: values produced by a computation (e.g., a function result or lines of characters written on a screen).\n• overflow: producing a value that cannot be stored in its intended target.\n• overload: defining two functions or operators with the same name but different argument (operand) types.\n• override: defining a function in a derived class with the same name and argument types as a virtual function in the base class, thus making the function callable through the interface defined by the base class.\n• paradigm: a somewhat pretentious term for design or programming style; often used with the (erroneous) implication that there exists a paradigm that is superior to all others.\n• parameter: a declaration of an explicit input to a function or a template. When called, a function can access the arguments passed through the names of its parameters.\n• pointer: (1) a value used to identify a typed object in memory; (2) a variable holding such a value.\n• post-condition: a condition that must hold upon exit from a piece of code, such as a function or a loop.\n• pre-condition: a condition that must hold upon entry into a piece of code, such as a function or a loop.\n• program: code (possibly with associated data) that is sufficiently complete to be executed by a computer.\n• programming: the art of expressing solutions to problems as code.\n• pseudo code: a description of a computation written in an informal notation rather than a programming language.\n• pure virtual function: a virtual function that must be overridden in a derived class.\n• RAII: (“Resource Acquisition Is Initialization”) a basic technique for resource management based on scopes.\n• range: a sequence of values that can be described by a start point and an end point. For example, means the values 0, 1, 2, 3, and 4.\n• recursion: the act of a function calling itself; see also iteration.\n• reference: (1) a value describing the location of a typed value in memory; (2) a variable holding such a value.\n• regular: a semiregular type that is equality-comparable (see concept). After a copy, the copied object compares equal to the original object. A regular type behaves similarly to built-in types like and can be compared with . In particular, an object of a regular type can be copied and the result of a copy is a separate object that compares equal to the original. See also semiregular type.\n• requirement: (1) a description of the desired behavior of a program or part of a program; (2) a description of the assumptions a function or template makes of its arguments.\n• resource: something that is acquired and must later be released, such as a file handle, a lock, or memory. See also handle, owner.\n• rounding: conversion of a value to the mathematically nearest value of a less precise type.\n• scope: the region of program text (source code) in which a name can be referred to.\n• semiregular: a concrete type that is copyable (including movable) and default-constructible (see concept). The result of a copy is an independent object with the same value as the original. A semiregular type behaves roughly like a built-in type like , but possibly without a operator. See also regular type.\n• sequence: elements that can be visited in a linear order.\n• software: a collection of pieces of code and associated data; often used interchangeably with program.\n• source code: code as produced by a programmer and (in principle) readable by other programmers.\n• specification: a description of what a piece of code should do.\n• standard: an officially agreed upon definition of something, such as a programming language.\n• STL: the containers, iterators, and algorithms part of the standard library.\n• style: a set of techniques for programming leading to a consistent use of language features; sometimes used in a very restricted sense to refer just to low-level rules for naming and appearance of code.\n• subtype: derived type; a type that has all the properties of a type and possibly more.\n• supertype: base type; a type that has a subset of the properties of a type.\n• system: (1) a program or a set of programs for performing a task on a computer; (2) a shorthand for “operating system”, that is, the fundamental execution environment and tools for a computer.\n• TS: Technical Specification, A Technical Specification addresses work still under technical development, or where it is believed that there will be a future, but not immediate, possibility of agreement on an International Standard. A Technical Specification is published for immediate use, but it also provides a means to obtain feedback. The aim is that it will eventually be transformed and republished as an International Standard.\n• template: a class or a function parameterized by one or more types or (compile-time) values; the basic C++ language construct supporting generic programming.\n• trade-off: the result of balancing several design and implementation criteria.\n• truncation: loss of information in a conversion from a type into another that cannot exactly represent the value to be converted.\n• type: something that defines a set of possible values and a set of operations for an object.\n• uninitialized: the (undefined) state of an object before it is initialized.\n• unit: (1) a standard measure that gives meaning to a value (e.g., km for a distance); (2) a distinguished (e.g., named) part of a larger whole.\n• use case: a specific (typically simple) use of a program meant to test its functionality and demonstrate its purpose.\n• value: a set of bits in memory interpreted according to a type.\n• value type: a term some people use to mean a regular or semiregular type.\n• variable: a named object of a given type; contains a value unless uninitialized.\n• virtual function: a member function that can be overridden in a derived class.\n• word: a basic unit of memory in a computer, often the unit used to hold an integer.\n\nThis is our to-do list. Eventually, the entries will become rules or parts of rules. Alternatively, we will decide that no change is needed and delete the entry.\n• Should physical design (what’s in a file) and large-scale design (libraries, groups of libraries) be addressed?\n• Avoid using directives in the global scope (except for std, and other “fundamental” namespaces (e.g. experimental))\n• How granular should namespaces be? All classes/functions designed to work together and released together (as defined in Sutter/Alexandrescu) or something narrower or wider?\n• Should there be inline namespaces (à la )?\n• Const member functions should be thread safe … aka, but I don’t really change the variable, just assign it a value the first time it’s called … argh\n• Always initialize variables, use initialization lists for data members.\n• Anyone writing a public interface which takes or returns should have their toes set on fire. That one has been a personal favorite of mine for a number of years. :)\n• Use -ness wherever possible: member functions, variables and (yippee)\n• Never pass a pointer down the call stack\n• Should there be guidelines to choose between polymorphisms? YES. classic (virtual functions, reference semantics) vs. Sean Parent style (value semantics, type-erased, kind of like ) vs. CRTP/static? YES Perhaps even vs. tag dispatch?\n• should virtual calls be banned from ctors/dtors in your guidelines? YES. A lot of people ban them, even though I think it’s a big strength of C++ that they are ??? -preserving (D disappointed me so much when it went the Java way). WHAT WOULD BE A GOOD EXAMPLE?\n• Speaking of lambdas, what would weigh in on the decision between lambdas and (local?) classes in algorithm calls and other callback scenarios?\n• And speaking of , Stephen T. Lavavej criticizes it so much I’m starting to wonder if it is indeed going to fade away in future. Should lambdas be recommended instead?\n• What to do with leaks out of temporaries? :\n• void bad() { int* p = new int[700]; int* q = &p[7]; delete p; vector<int> v(700); int* q2 = &v[7]; v.resize(900); // ... use q and q2 ... }\n• Use RAII lock guards ( , , ), never call and directly (RAII)\n• Prefer non-recursive locks (often used to work around bad reasoning, overhead)\n• Join your threads! (because of in destructor if not joined or detached … is there a good reason to detach threads?) – ??? could support library provide a RAII wrapper for ?\n• If two or more mutexes must be acquired at the same time, use (or another deadlock avoidance algorithm?)\n• When using a , always protect the condition by a mutex (atomic bool whose value is set outside of the mutex is wrong!), and use the same mutex for the condition variable itself.\n• Never use with (differences in padding matter, while in a loop converges to stable padding)\n• individual objects are not thread-safe: two threads cannot wait on the same object (they can wait on copies of a that refer to the same shared state)\n• individual objects are not thread-safe: different threads can call non- member functions on different s that refer to the same shared object, but one thread cannot call a non- member function of a object while another thread accesses that same object (if you need that, consider instead)\n• [C++03]: ISO/IEC 14882:2003(E), Programming Languages — C++ (updated ISO and ANSI C++ Standard including the contents of (C++98) plus errata corrections).\n• [Koenig97]: A. Koenig and B. Moo. Ruminations on C++ (Addison-Wesley, 1997).\n• [Stroustrup94]: B. Stroustrup. The Design and Evolution of C++ (Addison-Wesley, 1994).\n• [Stroustrup15]: B. Stroustrup, Herb Sutter, and G. Dos Reis: A brief introduction to C++’s model for type- and resource-safety."
    },
    {
        "link": "https://langdev.stackexchange.com/questions/2075/what-obstacles-prevented-c-and-c-from-standardizing-%CF%80",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    }
]