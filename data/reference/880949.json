[
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByTagName",
        "document": "The method of interface returns an of elements with the given tag name. The complete document is searched, including the root node. The returned is live, meaning that it updates itself automatically to stay in sync with the DOM tree without having to call again.\n\nIn the following example, starts from a particular parent element and searches top-down recursively through the DOM from that parent element, building a collection of all descendant elements which match the tag parameter. This demonstrates both and the functionally identical , which starts the search at a specific element within the DOM tree. Clicking the buttons uses to count the descendant paragraph elements of a particular parent (either the document itself or one of two nested elements). <!doctype html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\" /> <title>getElementsByTagName example</title> <script> function getAllParaElems() { const allParas = document.getElementsByTagName(\"p\"); const num = allParas.length; alert(`There are ${num} paragraph in this document`); } function div1ParaElems() { const div1 = document.getElementById(\"div1\"); const div1Paras = div1.getElementsByTagName(\"p\"); const num = div1Paras.length; alert(`There are ${num} paragraph in #div1`); } function div2ParaElems() { const div2 = document.getElementById(\"div2\"); const div2Paras = div2.getElementsByTagName(\"p\"); const num = div2Paras.length; alert(`There are ${num} paragraph in #div2`); } </script> </head> <body style=\"border: solid green 3px\"> <p>Some outer text</p> <p>Some outer text</p> <div id=\"div1\" style=\"border: solid blue 3px\"> <p>Some div1 text</p> <p>Some div1 text</p> <p>Some div1 text</p> <div id=\"div2\" style=\"border: solid red 3px\"> <p>Some div2 text</p> <p>Some div2 text</p> </div> </div> <p>Some outer text</p> <p>Some outer text</p> <button onclick=\"getAllParaElems();\"> Show all p elements in document </button> <br /> <button onclick=\"div1ParaElems();\"> Show all p elements in div1 element </button> <br /> <button onclick=\"div2ParaElems();\"> Show all p elements in div2 element </button> </body> </html>\n\nWhen called on an HTML document, lower-cases its argument before proceeding. This is undesirable when trying to match camel case SVG elements in a subtree in an HTML document. is useful in that case. See also Firefox bug 499656. is similar to , except that its search encompasses the whole document."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagName",
        "document": "This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015 .\n\nThe method returns a live of elements with the given tag name.\n\nAll descendants of the specified element are searched, but not the element itself. The returned list is live, which means it updates itself with the DOM tree automatically. Therefore, there is no need to call with the same element and arguments repeatedly if the DOM changes in between calls.\n\nWhen called on an HTML element in an HTML document, lower-cases the argument before searching for it. This is undesirable when trying to match camel-cased SVG elements (such as ) in an HTML document. Instead, use , which preserves the capitalization of the tag name.\n\nis similar to , except that it only searches for elements that are descendants of the specified element."
    },
    {
        "link": "https://w3schools.com/jsref/met_document_getelementsbytagname.asp",
        "document": "Get all elements with the tag name \"li\": Try it Yourself » Get all elements in the document: Try it Yourself » Change the inner HTML of the first <p> element in the document: Try it Yourself »\n\nThe method returns a collection of all elements with a specified tag name.\n\nreturns all elements in the document.\n\nAn HTMLCollection is an array-like collection (list) of HTML elements.\n\nThe length Property returns the number of elements in the collection.\n\nThe elements can be accessed by index (starts at 0).\n\nAn HTMLCollection is live. It is automatically updated when the document is changed.\n\nIt is fully supported in all browsers:"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByName",
        "document": "The attribute can only be applied in (X)HTML documents.\n\nThe returned Collection contains all elements with the given , such as , , and even elements which do not support the attribute at all."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document",
        "document": "This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015 . * Some parts of this feature may have varying levels of support.\n\nThe interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree. The DOM tree includes elements such as and , among many others. It provides functionality globally to the document, like how to obtain the page's URL and create new elements in the document. The interface describes the common properties and methods for any kind of document. Depending on the document's type (e.g. HTML, XML, SVG, …), a larger API is available: HTML documents, served with the content type, also implement the interface, whereas XML and SVG documents implement the interface.\n\nThis interface also inherits from the and interfaces. Returns the that currently has focus. Add an array of constructed stylesheets to be used by the document. These stylesheets may also be shared with shadow DOM subtrees of the same document. Returns the or node of the current document. Returns the character set being used by the document. Returns the number of child elements of the current document. Returns the child elements of the current document. Indicates whether the document is rendered in quirks or strict mode. Returns the Content-Type from the MIME Header of the current document. Returns the element whose script is currently being processed and isn't a JavaScript module. Returns the Document Type Definition (DTD) of the current document. Returns the that is a direct child of the document. For HTML documents, this is normally the object representing the document's element. Returns an of the embedded elements in the document. Returns the interface with the feature policies applied to the document. Returns the first child element of the current document. Returns the interface of the current document. Returns an of the elements in the document. Returns the for the current document. The element that's currently in full screen mode for this document. Returns the element of the current document. Returns a Boolean value indicating if the page is considered hidden or not. Returns an of the images in the document. Returns the DOM implementation associated with the current document. Returns the last child element of the current document. Returns an of the hyperlinks in the document. Returns the currently being presented in picture-in-picture mode in this document. Returns true if the picture-in-picture feature is enabled. Returns an of the available plugins. Returns the element set as the target for mouse events while the pointer is locked. if lock is pending, pointer is unlocked, or if the target is in another document. Returns a boolean that indicates whether the document is currently in the process of prerendering, as initiated via the Speculation Rules API. Returns an of the elements in the document. Returns a reference to the that scrolls the document. Returns a of objects for stylesheets explicitly linked into, or embedded in a document. Returns timeline as a special instance of that is automatically created on page load. Returns a denoting the visibility state of the document. Possible values are , , , and .\n\nReturns or sets the color of active links in the document body. Provides access to all elements in the document — it returns an rooted at the document node. This is a legacy, non-standard property and should not be used. Returns a list of all of the anchors in the document. Returns an empty . Legacy property that used to return the list of applets within a document. Gets/sets the background color of the current document. Alias of . Use this property instead. Gets/sets the domain of the current document. Gets/sets the foreground color, or text color, of the current document. Returns when the document is in fullscreen mode. Alias of . Use this property instead. Returns the name of the style sheet set that was last enabled. Has the value until the style sheet is changed by setting the value of . Gets/sets the color of hyperlinks in the document. Returns the preferred style sheet set as specified by the page author. Like , but only for root elements. Use this property instead. Returns which style sheet set is currently in use. Returns a list of the style sheet sets available on the document. Returns the encoding as determined by the XML declaration. Returns if the XML declaration specifies the document to be standalone (e.g., An external part of the DTD affects the document's content), else . Returns the version number as specified in the XML declaration or if the declaration is absent.\n\nThis interface also inherits from the and interfaces. Inserts a set of objects or strings after the last child of the document. Returns a promise that fulfills with an array of objects representing the top topics for the user, one from each of the last three epochs. By default, the method also causes the browser to record the current page visit as observed by the caller, so the page's hostname can later be used in topics calculation. See the Topics API for more details. Returns a object containing the DOM node containing the caret, and caret's character offset within that node. Gets a object for the document fragment under the specified coordinates. Creates a new object and returns it. Creates a new attribute node in a given namespace and returns it. Creates a new CDATA node and returns it. Creates a new comment node and returns it. Creates a new element with the given tag name. Creates a new element with the given tag name and namespace URI. Returns the topmost element at the specified coordinates. Returns an array of all elements at the specified coordinates. Enables the style sheets for the specified style sheet set. Remove the video from the floating picture-in-picture window back to its original container. Returns an array of all objects currently in effect, whose target elements are descendants of the . Returns a list of objects representing the CSS fragments of the node. Returns an object reference to the identified element. Returns a list of elements with the given class name. Returns a list of elements with the given tag name. Returns a list of elements with the given tag name and namespace. Returns a object representing the range of text selected by the user, or the current position of the caret. Returns a that resolves with a boolean value indicating whether the document has access to unpartitioned cookies. New name for . Returns a clone of a node from an external document. Allows you to change the element being used as the background image for a specified element ID. Inserts a set of objects or strings before the first child of the document. Returns the first Element node within the document, in document order, that matches the specified selectors. Returns a list of all the Element nodes within the document that match the specified selectors. Releases the current mouse capture if it's on an element in this document. Replaces the existing children of a document with a specified new set of children. Allows a document loaded in a third-party context (i.e. embedded in an ) to request access to unpartitioned cookies, in cases where user agents by default block access to unpartitioned cookies by sites loaded in a third-party context to improve privacy. Allows top-level sites to request third-party cookie access on behalf of embedded content originating from another site in the same related website set. Starts a new view transition and returns a object to represent it. The interface is extended with the interface: Compiles an which can then be used for (repeated) evaluations.\n\nListen to these events using or by assigning an event listener to the property of this interface. In addition to the events listed below, many events can bubble from nodes contained in the document tree. Fired when a static is about to start executing. Fired on a prerendered document when it is activated (i.e. the user views the page). Fired when the content of a tab has become visible or has been hidden."
    },
    {
        "link": "https://stackoverflow.com/questions/222841/most-efficient-way-to-convert-an-htmlcollection-to-an-array",
        "document": "will have the same effect using \"native\" code.\n\nSince this gets a lot of views, note (per @oriol's comment) that the following more concise expression is effectively equivalent:\n\nBut note per @JussiR's comment, that unlike the \"verbose\" form, it does create an empty, unused, and indeed unusable array instance in the process. What compilers do about this is outside the programmer's ken.\n\nSince ECMAScript 2015 (ES 6) there is also Array.from:\n\nECMAScript 2015 also provides the spread operator, which is functionally equivalent to (although note that supports a mapping function as the second argument).\n\nI've confirmed that both of the above work on ."
    },
    {
        "link": "https://geeksforgeeks.org/most-efficient-way-to-convert-an-htmlcollection-to-an-array",
        "document": "Most efficient Way to Convert an HTMLCollection to an Array\n\nAn HTMLCollection is a collection of HTML elements that looks like an array, and it is returned by various DOM methods, such as “getElementsByTagName” or “querySelectorAll”. However, this collection is not an actual array, and it does not support array-specific operations. Therefore, it may be necessary to convert the HTMLCollection to an array to perform certain array-specific operations. This article will explore all possible methods of converting an HTMLCollection to an array.\n\nIn this method, we bind the call() method with Array.prototype.slice(). This will invoke Array.prototype.slice() on HTMLCollection. This method converts the HTMLCollection to the array by creating a shallow copy of it. Below is the syntax we’ll use.\n\nExample: This example uses the Array.prototype.slice() method to convert an HTMLCollection to an Array in an HTML document.\n\nThe Array.from() method is available from ES6. This method takes an array-like iterable object and returns a new array with the same elements. In our case the array-like iterable object is HTMLCollection. We simply pass it to this method and accept an array from it.\n\nExample: This example uses the Array.from() method to convert an HTMLCollection to an Array in an HTML document.\n\nUsing spread opera also we can convert an HTMLCollection to an array. The spread operator(. . .) expands an iterable object into multiple elements. With the use of the spread syntax inside the square brackets, we can create an array containing the same element as HTMLCollection.\n\nExample: This example uses the spread operator to convert an HTMLCollection to an Array in an HTML document.\n\nThis is the most common approach to convert an HTMLCollection to an array. Here we simply iterate over the HTMLCollection and push each element into a new array.\n\nExample: This example uses the for loop approach to convert an HTMLCollection to an Array in an HTML document."
    },
    {
        "link": "https://stackoverflow.com/questions/75677346/how-to-convert-htmlcollection-to-array-performance-point-of-view-for-around-50",
        "document": "I am trying to develop a reusable accordion component where I have to find all the accordion items which are giving me HTMLCollection which seems like an Array form but if you go and try to manipulate with some methods like then you will get an error.\n\nI am looking for the easiest and most optimized way around fixing such issues while using pure JavaScript.\n\nI tried with but that failed.\n\nWhat worked for me:\n\nI have a question about the best performance optimization to take a minimum time for the DOM manipulation if have multiple instances of the same component on a page."
    },
    {
        "link": "https://supunkavinda.blog/js-htmlcollection-to-array",
        "document": "Unlocking the full potential of JavaScript Array functions, such as map and filter, on an HTMLCollection requires a conversion to an Array. In this article, we explore various methods to seamlessly transform an HTMLCollection to an Array using JavaScript.\n\nWhen dealing with an HTMLCollection, it’s essential to convert it into an Array to leverage the versatility of Array functions. Here are three distinct methods to achieve this conversion in JavaScript.\n\nTo convert an HTMLCollection to an Array, the long version involves using the `Array.prototype.slice.call()` method. This method extracts elements from a collection and converts them into an Array.\n\nFor a more concise approach, the short version utilizes the `[].slice.call()` method. This achieves the same result as the long version but with a reduced syntax.\n\nIn modern JavaScript (ES6 and later), a succinct method involves using the spread operator (`…`). This streamlined approach simplifies the conversion process.\n\nNow that we’ve explored different methods for converting HTMLCollections to Arrays, let’s delve into real-world scenarios where this transformation proves invaluable.\n\nOnce your HTMLCollection is in Array form, you can leverage powerful Array functions like map, filter, and reduce for seamless iteration. This opens the door to more concise and expressive code, enhancing the readability of your scripts.\n\nEnhance your coding prowess with the best tips for PHP Structure and Syntax in this comprehensive guide.\n\nFiltering elements based on specific criteria becomes a breeze with the Array’s filter function. This is particularly useful when you need to work with a subset of elements from the original HTMLCollection.\n\nWhile converting HTMLCollections to Arrays enhances flexibility, it’s crucial to consider compatibility and potential performance implications. Ensure that your chosen method aligns with your project’s requirements and is supported across various browsers.\n\nVerify that the conversion method you adopt is compatible with the browsers your project targets. The ES6 spread operator, for instance, may not be supported in older browser versions.\n\nEvaluate the performance impact of each conversion method, especially when dealing with large HTMLCollections. Profiling your code and choosing the most efficient approach is essential for optimal execution.\n\nEffortlessly harnessing the capabilities of Array functions within JavaScript when dealing with HTMLCollections necessitates a seamless conversion process. By exploring the long, short, and ES6 versions of converting an HTMLCollection to an Array, developers can choose the method that aligns with their coding preferences.\n\nThis newfound flexibility enhances the efficiency and functionality of JavaScript code, providing a smoother development experience. As you embark on your JavaScript journey, remember that mastering such fundamental transformations contributes significantly to your overall proficiency in web development."
    },
    {
        "link": "https://reddit.com/r/javascript/comments/5qmu3l/htmlcollection_nodelist_and_array_of_objects",
        "document": "Create your account and connect with a world of communities.\n\nBy continuing, you agree to our\n\nand acknowledge that you understand the"
    }
]