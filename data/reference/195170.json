[
    {
        "link": "https://p5js.org/reference/p5/draw",
        "document": "A function that's called repeatedly while the sketch runs.\n\nDeclaring the function sets a code block to run repeatedly once the sketch starts. It’s used to create animations and respond to user inputs:\n\nThis is often called the \"draw loop\" because p5.js calls the code in in a loop behind the scenes. By default, tries to run 60 times per second. The actual rate depends on many factors. The drawing rate, called the \"frame rate\", can be controlled by calling frameRate(). The number of times has run is stored in the system variable frameCount().\n\nCode placed within begins looping after setup() runs. will run until the user closes the sketch. can be stopped by calling the noLoop() function. can be resumed by calling the loop() function."
    },
    {
        "link": "https://p5js.org/examples",
        "document": ""
    },
    {
        "link": "https://happycoding.io/tutorials/p5js/animation",
        "document": "Now you know how to call functions and create functions, how to use variables and create variables, and how to use statements.\n\nYou’ve seen that the function is called 60 times per second, and you know how to use operators like and to get new values.\n\nThis tutorial combines all of those ideas to create animations.\n\nIn a way, animations are an illusion. When you watch a video (whether that’s a cartoon, a tv show, or a movie), what you’re really seeing is a series of still images, or frames.\n\nHere’s an example series of frames:\n\nBy showing a series of frames sequentially, animations trick your brain into seeing a moving object:\n\nThe above animation is slow, so you can still see the individual frames. Typically, animations look much more smooth if they have more frames and the difference between each frame is smaller (in other words, if the ball doesn’t move so far each frame).\n\nThis tutorial introduces techniques you can use to create animations in p5.js.\n\nWhen you think about animation, it’s helpful to think about what displays each frame. Try to break the scene down into a series of variables. Those variables represent the state of the scene.\n\nFor example, the state of a ball might be represented by and variables. You might pass those variables into the function to draw a circle at a specific position.\n\nTo change the state of the circle, you would modify those variables. Increasing the variable would move the circle right, and increasing the variable would move the circle down.\n\nYou can think of an animation as three steps:\n• Create variables that represent the state of your scene.\n• Use those variables to draw your scene.\n\nYou’ve already seen the first two steps; next you’ll learn more about the third step.\n\nOne thing you might not have seen yet is that after you create a variable, you can reassign it by giving it a new value.\n\nTo reassign a variable, you type its name, then the equals operator , and then the new value it should have.\n\nAt the end of this code, now holds the value .\n\nNotice that you don’t use the keyword when you reassign it, because it’s already been created. Also note that you can’t reassign variables that you created using the keyword- it has to be the keyword.\n\nCreating a variable is also called declaring a variable. The first time you point it to a value using the operator (which is often in the same line as declaring it) is called initializing a variable. If you then change the value of the variable, that’s called reassigning the variable.\n\nNow you know how to declare, initialize, and reassign a variable.\n\nAnd you know that you can use variables anywhere you can use a value, and that you can use operators to get new values.\n\nThis code uses the variable and divides it by to get a new value, and then points to that value.\n\nYou can combine those ideas to change a variable over time, by basing its new value on its old value.\n\nAt the end of this code, will point to the value .\n\nIf this is confusing, try reading the right side of the reassignment line first: the code takes , which is , and then adds to get . The code then reassigns so it points to that value instead of its old value.\n\nThis might not seem very interesting yet, but it becomes much more useful when you combine it with the function.\n\nRemember that p5.js automatically calls the function 60 times per second. So if your function draws a scene based on a set of variables, and then changes those variables, then the next frame will show something different.\n\nFirst, this code declares a variable named and initializes it to point to the value . Every time the function is called, the code draws a gray background, and then draws a circle with a vertical position of . Then, the code adds to the variable!\n\nThe next time is called, will be , which causes the circle to be drawn just a little bit lower in the window. Then will be , then , then , etc. The code repeats that 60 times per second, which makes it look like the circle is falling.\n\nNotice that the above code declares the variable at the top of the sketch, outside the function. Code that’s outside of any functions is run once at the very beginning of the program.\n\nWhat if you declared the variable inside the function?\n\nEvery frame, this program declares a variable named and initializes it to point to . It then clears out old frames, draws a circle, and reassigns the value. But then at the beginning of the next frame, the code declares a new variable named and initializes it to . Every frame will show the same thing, and the circle won’t move at all.\n\nIn other words, the variable “forgets” its old value, since it’s recreated every frame. If you want a variable to remember its value between frames, then you have to declare it at the top of your sketch, outside of any functions!\n\nSimilarly, what if you declared the variable inside the function?\n\nYou might think this makes sense because the function is only called once at the beginning of the program, but this code has a big problem: if you declare a variable inside a function, you can only access it inside that function! Since you declare the variable inside the function, you can only access it inside the function. So when you try to use it in the function, you’ll get an error.\n\nThe places you can access a variable is called the variable’s scope. To make sure you can access a variable between multiple calls to the function, you have to declare it at the top of the sketch. I call this a sketch-level variable.\n\nA common thing to do is declare a variable at the top of the sketch, then initialize it in the function, and then reassign it in the function:\n\nThis program declares the variable at the sketch level. Then in the function, it sets the size and initializes the variable to the value calculated from . If you tried to do this calculation at the top of the sketch, it wouldn’t work because the size hasn’t been set yet!\n\nFinally, the function uses the variable to draw the scene, and then reassigns it to create an animation.\n\nNow you have an animation, but the circle falls off the bottom window and never comes back. Chances are that’s not what you want.\n\nTo fix this, you can use an statement to check whether the circle has fallen off the bottom of the window. You know the circle is below the bottom of the window when is greater than . When this happens, you can reassign to move the circle back to the top of the window.\n\nThis code is mostly the same: it declares a variable named , initialize it to , and uses that variable to draw a circle. It then reassigns every frame, which creates an animation.\n\nThe new part is the statement. After reassigning the variable, the code checks whether the new value is greater than . If it is, then the variable is reassigned to the value . The next time the function is called, will be , the circle will be drawn at the top of the window, and the animation starts over again.\n\nWhen the circle reaches the bottom of the window, you could make it bounce instead of teleporting it back to the top of the window.\n\nOne way to do this is to use a variable to hold the direction the circle should travel. Then when you detect the circle has fallen off the bottom of the window (when ), you can reassign the variable:\n\nNow when , the code multiplies the variable by , which makes it negative. Adding that to causes to decrease, which moves the circle up.\n\nYou can expand that to make the ball bounce off all of the sides of the screen:\n\nThis program creates variables to hold the position of the ball ( and ), and two variables to hold the speed of the ball ( and ). Every frame, the code draws a ball at that position, and then modifies the position by that speed. It then uses an statement to check whether the ball has gone off the left or right side of the window, and reverses the variable if it has. Similarly, it uses another statement to check whether the ball has gone off the top or bottom of the window, and reverses the variable if it has. This causes the ball to bounce off every side of the window.\n\nYou can read more about this in the collision detection tutorial. (This is for Processing instead of p5.js, but the same concepts apply.)\n\nAll of the above programs call to draw a gray background at the start of every frame. This “paints over” anything drawn by previous frames, clearing out anything that was already in the window.\n\nThis approach of clearing out old frames is useful for most animations, but it depends on what kind of effect you’re going for. See what happens if you remove the call from the above program:\n\nIf you don’t clear out old frames, then the frames “stack” as you draw the new frame directly on top of the old frames.\n\nHere’s an example that intentionally draws new frames on top of old frames without clearing them out:\n\nWhether or not you clear out old frames depends on what you’re trying to create!\n\nThe above examples uses syntax like this to reassign a variable:\n\nThis line of code adds to the variable.\n\nYou can also use the add assign operator, which looks like , to do the same thing without needing to type twice:\n\nThis code does the exact same thing, except it’s less typing. It adds to and then reassigns to that new value, all in one step.\n\nSimilarly, if you’re adding to a variable, you can use the increment operator, which looks like after the variable name:\n\nThis code adds to and then reassigns to that value, all in one step.\n\nThere are similar shortcuts for subtraction, multiplication, and division. You don’t have to use the shortcuts, but you’ll probably see them in other people’s code, so it’s good to be familiar with them.\n• Add gravity to the bouncing ball program. Hint: changes every frame. Gravity changes every frame!\n• Add a rectangle to the bouncing ball program. The ball should bounce off the rectangle as well as the edges of the window.\n• Create an animation that shows a full day- start out with a sunrise, show the sun moving across the sky, then sunset, and finally the moon and stars.\n• Remember your drawing program from previous homeworks? Animate it by either bouncing it around the screen or by changing it over time."
    },
    {
        "link": "https://p5js.org/tutorials/conditionals-and-interactivity",
        "document": "In this tutorial, you will learn new ways to add user interaction to your sketches, and control the order in which code runs.\n\nYou will learn these basic programming concepts by creating an interactive sun sketch and a sunrise animation:\n\nControlling the flow of your program is central to the power of computing and makes creating exciting animations and games in p5.js possible. Typically, lines of code run in order. In previous tutorials, you have seen how the function runs code from top to bottom repeatedly. This allows for overlapping shapes and “flip book” animations.\n\nBefore you begin, you should be able to:\n• Add and customize shapes and text on the canvas using p5.js\n• Use built-in variables such as and\n• Declare, initialize, use and update custom variables using and the assignment operator\n• Incorporate both linear and random motion by using , and\n• Comment code and address error messages - to learn more about error messages and debugging, read the Field Guide to Debugging reference.\n\nCreating an interactive sun sketch is a great way to learn how to use conditional statements and user interaction.\n\nThe top half of a yellow circle peaks out behind a green rectangle on a black canvas.\n\nConditional statements control when specific lines of code run. For example, before sunrise the sky is dark. Once the sun comes up it is daytime, and the sky is a lighter color. You can write a conditional statement (also known as an if statement) to change the color of the sky based on the position of the sun. IF the sun is high, then the sky should be a light color; otherwise the sky should be dark. If statements can check the sun’s position, and control the code that runs depending on where it is in the sky.\n\nBefore we can use conditional statements that check for the sun’s position, we can add custom variables to help us update the sun’s position as the mouse pointer is dragged across the canvas.\n• None Open a new p5.js project, name it “Interactive Sun”, and save the sketch.\n• None Declare a custom variable for the y-coordinate for the sun called , and a custom variable for the y-coordinate of the horizon called . Initialize the variable for the horizon with 200.\n• None Add the following lines of code to your sketch before :\n• None Update the to the y-coordinate of the mouse pointer, .\n\nYour code should look like this:\n\nSince the sun’s height is changing, we store the y-coordinate of the mouse, , in the variable . Doing this in continuously updates each time runs. Although the horizon is not changing, a custom variable for the horizon is used as a reference point and to make code more readable.\n\nVisit the p5.js reference for more information about and .\n\nStep Two: Draw shapes and color the canvas\n• None Draw a sun that uses the custom variable as its y-coordinate.\n\nYour code should look like this:\n\nThe sun follows the mouse pointer as it moves vertically on the canvas because is used as the argument for the circle’s y-coordinate in: . A line is drawn on the canvas with as an argument for the y-coordinates of each endpoint: . This marks the horizon line on the canvas which will be used to change the background color.\n\nVisit the p5.js reference pages for 2D shapes, color, foundations and mouse events to learn more about shapes and variables. Read the Field Guide to Debugging (Examples 1 & 2) for help with common bugs.\n\nStep Three: Use a conditional statement with a Boolean expression to change the background color\n• Set the background color to light blue when the sun is above the horizon.\n• None Add the following lines to your sketch inside after the line of code: : //light blue background if sun is above horizon\n\nYour code should look like this:\n\nRun the code and experiment with moving the sun using the mouse!\n\nIn the code above, the background is black by default because the first statement that is read in is . When the sun is below the horizon line, the background remains black because the if statement skips the code block inside the curly braces: . When the sun is above the horizon line, the code block inside the curly braces runs. This resets the color from the default black color to a light blue color.\n\nHere you are controlling when and runs. A conditional statement (or if statement) is a way to control when specific lines of code run, which changes what happens in the sketch.\n\nAn if statement begins with the keyword , followed by condition(s) within parenthesis, and lines of code called a code block inside of curly braces. The code block runs if the condition is . The syntax for an if statement is defined as follows:\n\nThe code inside the parentheses after the keyword can be a Boolean value or a Boolean expression. In the example below, a Boolean expression is used to check if the value in the variable is less than the value in the variable:\n\nBoolean expressions are statements that result in a Boolean value. Boolean values can either be or . Unlike numbers or strings, there are only two Boolean values. Boolean expressions help check if conditions are or ; therefore, they use symbols called comparison operators. Comparison operators are special symbols that compare two values (see the table below).\n\nComparison operator symbols you can use to create Boolean expressions include:\n\nVisit the MDN reference to learn more about expressions and operators.\n\nYou can think of Boolean expressions as the computer asking a question. In the code added in step three, the Boolean expression is . It is asking if the value of the variable is less than the value of the variable . If the answer to the question is yes, if results in a value of , then the code block runs. If the answer is no, the code block is skipped.\n\nWe can view the value of in the console by adding in after . Observe how the value printed in the console changes from to as you move your mouse around the canvas: the value is when the sun is below the horizon line, and when it is above the horizon line. See this sketch for an example.\n\nVisit the p5.js reference page for foundations to learn more about if statements and Boolean values.\n\nAnother important conditional is the if-else statement, where there are two code blocks that can be controlled. The syntax for the if-else statement is defined as follows:\n\nIf the condition is , then the first code block runs. If it is , then the code block that follows the keyword runs. If your code requires two changes based on one condition, the if-else statement is a better way to structure your code. It is helpful to visualize if statements as bubble maps, like the one below, that shows how the 1st code block runs when the condition is true, and the 2nd code block runs when the condition is false.\n\nFor example, you can modify the if statement in your sunset animation by removing the function and adding the following if-else statement:\n\nIn the code above, we see that if the sun is above the horizon, returns , and the code runs. When is NOT less than the horizon the code block after the keyword, , runs. Although both ways of writing the code have the same visual effect, sometimes it can be clearer and more efficient to use if-else, especially when two different code blocks can be controlled.\n\nVisit the p5.js reference page for and to learn more.\n\nStep Four: Add grass to hide the sun\n\nAdd a grassy landscape to your sketch so that you can’t see the sun below the horizon.\n• Draw a green rectangle on the landscape after the sun so that it hides the sun when it’s below the horizon. The argument for the y-coordinate of this rectangle is the location of the line.\n• None Add the following code in after the line for the horizon:\n\nYour code should look like this:\n\nRun the sketch and move the sun below the horizon. See how the sky changes as the sun disappears? Link to sunrise animation sample sketch.\n\nNext, you will make a sunrise animation where the sun moves on its own, and creates a gradual change in the color of the sky.\n\nStep One: Declare and initialize variables for sun location and background color\n• None Open a new p5.js project, name it “Sunrise Animation,” and save it.\n• None Declare a custom variable for the y-coordinate for the sun and initialize it with 600.\n• None Add the following lines to your sketch before :\n• None Declare a custom variable for the value of the red and green components of the sky color, and initialize them with 0.\n• None Add the following lines to your sketch before :\n\nReview the p5.js reference for or the MDN reference for RGB to remind you about color codes.\n\nYour code should look like this:\n\nIn this step you created the variables , , and to store values that will be used in the program. The initial value for is a point below the horizon, and the initial values for and indicate a black color. These set the sun’s position and the color of the sky when the animation begins. These are called the initial conditions of the animation. Now these variables are available to make changes on the canvas.\n\nStep Two: Use custom variables to draw landscape\n• None Draw the background based on the custom variables for red and green.\n• None //the value of blue is set to 0 and will not change\n• None Draw a sun that uses the custom variable as its y-coordinate.\n• None Add the following code after filling the background:\n• None Add some triangular mountains to the landscape.\n• None Add the following code after drawing the sun:\n\nYour code should look like this:\n\nIn this step you customized the landscape for your animation by using custom variables in your and functions. Remember, the sun is hiding behind the mountains because it was drawn first!\n• None Make the sun move by changing the variable as long as it is less than 130.\n• None // reduce sunHeight by 2 until it reaches 130\n• None Gradually change the color of the sky by changing the values in the variables and while the variable is less than 480.\n• None // increase color variables by 4 or 1 during sunrise\n\nYour code should look like this:\n\nWhen the sketch runs, the sun moves on its own! The motion is caused by the statement which decreases the value in by each time runs. The value in stops changing once the Boolean expression in the if statement, , is . This happens when is any value greater than 130.\n\nWhen the value in a variable decreases by a value, it is called decrementing, and the subtract assign symbol is used. When a variable increases by a value, it is called incrementing, and the add assign += operator is used. Any time a variable is incremented or decremented, the value stored in that variable is changed, and the new value is stored in the same variable.\n\nVisit the MDN reference for the following operators to learn more: | |\n\nThe color of the sky changes because and gradually change. According to the Boolean expression in the second conditional statement, when is less than 480, variables for color change: increases by 4, and increases by 1. Each time runs, and increase and are used to modify the background color the next time it runs. This creates an animated sunrise effect.\n\nThe statement can also be written as . is called the increment operator, and is called the decrement operator.\n\nThe following statements have the same effect:\n\nVisit the MDN reference for ++ and — to learn more.\n\nThe first time runs, the background is black and decreases. After the sun reaches a y-coordinate of 480, the color of the sky begins to change as the values in and increase. The sun stops moving when reaches 130 because of the first conditional statement:\n\nHere, decreases by 2 every time runs as long as is greater than 130. When it reaches 130 or less, the Boolean expression in the parentheses is , and the code inside the curly braces does not run anymore. This causes the sun to stop moving when its y-coordinate is 130 or less.\n\nWhen testing for multiple conditions at the same time, you can “nest” one condition inside another like this:\n\nWhen you put an if statement inside another if statement, it is called a nested conditional statement. This requires both Boolean expressions to be for code blocks to run. The difference in this example, compared to your code before the nested condition, is that now the color of the sky also stops changing once the sun reaches a y-value of 130.\n\nIn the code above, if is greater than 130, the code block inside the curly braces runs:\n• The is decreased by 2\n• As long as and are , the code block that changes the values of and runs.\n\nNotice that if the Boolean expression in the first if statement is , the second condition is not checked. This means that as long as is between 130 and 480, and will change. After reaches 130 or less, all variables will stop changing. In this case, must be and must be for the block in the nested conditional statement to run. Link to finished project example with in setup to remove shape outlines.\n\nAnother way to write conditional statements with more than one condition is by using logical operators. The AND operator ( ) is used when both conditions must be for a code block to run. The OR operator ( ) is used when either condition must be true for a code block to run.\n\nWe can rewrite the nested conditional in the animated sunrise sketch using the AND ( ) logical operator since it requires that is less than 130 AND greater than 480. In the code sample below, Boolean expressions on each side of the operator must be in order for the code in its code block to run:\n\nVisit the MDN reference for logical AND ( ) and logical OR ( ) to learn more about logical operators.\n\nand are special variables built into p5.js that contain Boolean values. is when the mouse button is pressed down on the canvas; otherwise it is . is when any key on the keyboard is pressed down; otherwise it is .\n\nExplore this example to see the value stored in change in the console when the mouse button is pressed down.\n\nIn the “Try this!” challenge, when is equal to 130 AND the mouse button is pressed down, the sky becomes dark. Perhaps it shows a solar eclipse!\n\nWe can even use on its own in the if statement:\n\nSince already stores a value of or , we do not need to use a comparison operator to create a Boolean expression. Boolean expressions evaluate to Boolean values, and Boolean variables store Boolean values. Conditional statements only require Boolean values to be for code to run. If is , the code block for the conditional statement will run.\n\nExplore these examples that use and :\n• Mouse and keys: Explore how and can be used in conditional statements without logical operators.\n• Clickable button: Explore this example that uses mouseIsPressed, mouseX and mouseY to make a clickable button!\n• Multiple keys: Explore this example that uses multiple keys to make changes on the canvas.\n\nVisit the p5.js reference pages for , and to learn more.\n\nNow that you have a timed sunrise animation, explore changing the shapes and colors to modify the sketch. Try adding new features and interactions, perhaps even some new conditional statements. Maybe you can try starting the animation with a key press or mouse press."
    },
    {
        "link": "https://stackoverflow.com/questions/42804556/p5-js-achieving-smooth-animation-with-draw-function",
        "document": "I am making a Monopoly style game written in javascript (Using the p5.js library). I am trying to create an animation of a card, using , sliding on top of a 2d object with a fixed width and height. Here are my 3 functions that show my thought process:\n\nThis is a snippet of my function (p5.js function which is invoked continuously unless conditional logic is used or a p5.js function is called) inside of my game.js:\n\nLastly, this function creates an instance of the property card that I'm trying to animate:\n\nWhen I try to create the animation, I end up rendering a static image that shows the cards overlapping each other across descending values. How can I get the card to slide over my created rectangle and stop at a certain point? The picture below shows what I am seeing:"
    },
    {
        "link": "https://p5js.org/reference/p5/loadImage",
        "document": "interprets the first parameter one of three ways. If the path to an image file is provided, will load it. Paths to local files should be relative, such as . URLs such as may be blocked due to browser security. Raw image data can also be passed as a base64 encoded image in the form .\n\nThe second parameter is optional. If a function is passed, it will be called once the image has loaded. The callback function can optionally use the new p5.Image object.\n\nThe third parameter is also optional. If a function is passed, it will be called if the image fails to load. The callback function can optionally use the event error.\n\nImages can take time to load. Calling in preload() ensures images load before they're used in setup() or draw()."
    },
    {
        "link": "https://geeksforgeeks.org/p5-js-loadimage-function",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/51984930/correct-way-to-use-loadimage-in-p5-js",
        "document": "I'm loading image URLs from a json file. I have everything working fine, except displaying the actual images.\n\nIt's a simple clik carousel. Hit the click and it moves index onto the next one. I want to make sure the images display at the same time, obviously but it's not working (images are referenced, but don't display).\n\nAnyone know what I am doing wrong?"
    },
    {
        "link": "https://p5js.org/reference",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/58330838/use-image-uploaded-through-html-dom-file-uploader-in-p5js",
        "document": "I am attempting to allow users to upload their image file through DOM file uploader ( that is ) but after I do that I am unsure how to move the image to JavaScript and process it using p5.js. How do I convert an HTML file to a p5.js file or an array of pixels, or really anything I can work with or read as values in JavaScript?\n\nFirst I restricted the element to only accept and files.\n\nThen I tried using syntax and tried to load the image through its path using inside of the function.\n\nNeither works, and I am just generally unsure as to what to do from this point."
    }
]