[
    {
        "link": "https://learn.microsoft.com/en-us/powershell/module/netadapter/get-netadapter?view=windowsserver2025-ps",
        "document": "The Get-NetAdapter cmdlet gets the basic network adapter properties. By default only visible adapters are returned. To see the common network adapter properties, pipe the output into the Format-List cmdlet. To see all the properties, pipe the output to the Format-List cmdlet with the Property parameter specified as the wildcard character \"*\". This cmdlet supports multiple views. The default view is as a table. To see more information regarding various network adapter identifiers use the names view using the Format-Table cmdlet with the View parameter specified as name. To see more information regarding the miniport, device driver, such as driver date or version use the driver view using the Format-Table cmdlet with the View parameter specified as driver.\n\nExample 1: Get all visible network adapters\n\nExample 2: Get all visible and hidden network adapters\n\nExample 3: Get all physical network adapters\n\nExample 4: Get a network adapter by the specified name\n\nExample 5: Get a network adapter by the specified name\n\nExample 6: Display the common properties for the specified network adapter\n\nExample 7: Display all properties for the specified network adapter\n\nExample 8: Get all network adapters using the interface description that matches a prefix pattern\n\nExample 9: Display parameter values for all network adapters\n\nExample 10: Get the visible network adapters on the specified server\n\nExample 11: Get the visible network adapters and format the output\n\nExample 12: Gets visible network adapters and format the output\n\nRuns the cmdlet as a background job. Use this parameter to run commands that take a long time to complete. The cmdlet immediately returns an object that represents the job and then displays the command prompt. You can continue to work in the session while the job completes. To manage the job, use the cmdlets. To get the job results, use the Receive-Job cmdlet. For more information about Windows PowerShell® background jobs, see about_Jobs.\n\nRuns the cmdlet in a remote session or on a remote computer. Enter a computer name or a session object, such as the output of a New-CimSession or Get-CimSession cmdlet. The default is the current session on the local computer.\n\nIndicates that the cmdlet includes both visible and hidden network adapters in the operation. By default only visible network adapters are included. If a wildcard character is used in identifying a network adapter and this parameter has been specified, then the wildcard string is matched against both hidden and visible network adapters.\n\nSpecifies an array of network adapter interface descriptions. For a physical network adapter this is typically the name of the vendor of the network adapter followed by a part number and description, such as .\n\nSpecifies the maximum number of concurrent operations that can be established to run the cmdlet. If this parameter is omitted or a value of is entered, then Windows PowerShell® calculates an optimum throttle limit for the cmdlet based on the number of CIM cmdlets that are running on the computer. The throttle limit applies only to the current cmdlet, not to the session or to the computer."
    },
    {
        "link": "https://learn.microsoft.com/th-th/powershell/module/netadapter/get-netadapter?view=windowsserver2022-ps&viewFallbackFrom=win10-ps",
        "document": "The Get-NetAdapter cmdlet gets the basic network adapter properties. By default only visible adapters are returned. To see the common network adapter properties, pipe the output into the Format-List cmdlet. To see all the properties, pipe the output to the Format-List cmdlet with the Property parameter specified as the wildcard character \"*\". This cmdlet supports multiple views. The default view is as a table. To see more information regarding various network adapter identifiers use the names view using the Format-Table cmdlet with the View parameter specified as name. To see more information regarding the miniport, device driver, such as driver date or version use the driver view using the Format-Table cmdlet with the View parameter specified as driver.\n\nExample 1: Get all visible network adapters\n\nExample 2: Get all visible and hidden network adapters\n\nExample 3: Get all physical network adapters\n\nExample 4: Get a network adapter by the specified name\n\nExample 5: Get a network adapter by the specified name\n\nExample 6: Display the common properties for the specified network adapter\n\nExample 7: Display all properties for the specified network adapter\n\nExample 8: Get all network adapters using the interface description that matches a prefix pattern\n\nExample 9: Display parameter values for all network adapters\n\nExample 10: Get the visible network adapters on the specified server\n\nExample 11: Get the visible network adapters and format the output\n\nExample 12: Gets visible network adapters and format the output\n\nRuns the cmdlet as a background job. Use this parameter to run commands that take a long time to complete. The cmdlet immediately returns an object that represents the job and then displays the command prompt. You can continue to work in the session while the job completes. To manage the job, use the cmdlets. To get the job results, use the Receive-Job cmdlet. For more information about Windows PowerShell® background jobs, see about_Jobs.\n\nRuns the cmdlet in a remote session or on a remote computer. Enter a computer name or a session object, such as the output of a New-CimSession or Get-CimSession cmdlet. The default is the current session on the local computer.\n\nIndicates that the cmdlet includes both visible and hidden network adapters in the operation. By default only visible network adapters are included. If a wildcard character is used in identifying a network adapter and this parameter has been specified, then the wildcard string is matched against both hidden and visible network adapters.\n\nSpecifies an array of network adapter interface descriptions. For a physical network adapter this is typically the name of the vendor of the network adapter followed by a part number and description, such as .\n\nSpecifies the maximum number of concurrent operations that can be established to run the cmdlet. If this parameter is omitted or a value of is entered, then Windows PowerShell® calculates an optimum throttle limit for the cmdlet based on the number of CIM cmdlets that are running on the computer. The throttle limit applies only to the current cmdlet, not to the session or to the computer."
    },
    {
        "link": "https://github.com/MicrosoftDocs/windows-powershell-docs/blob/main/docset/winserver2025-ps/netadapter/Get-NetAdapter.md",
        "document": "The Get-NetAdapter cmdlet gets the basic network adapter properties. By default only visible adapters are returned. To see the common network adapter properties, pipe the output into the Format-List cmdlet. To see all the properties, pipe the output to the Format-List cmdlet with the Property parameter specified as the wildcard character \"*\". This cmdlet supports multiple views. The default view is as a table. To see more information regarding various network adapter identifiers use the names view using the Format-Table cmdlet with the View parameter specified as name. To see more information regarding the miniport, device driver, such as driver date or version use the driver view using the Format-Table cmdlet with the View parameter specified as driver.\n\nThis command gets all of the visible network adapters.\n\nThis command gets all of the network adapters.\n\nThis command gets all of the physical network adapters.\n\nThis command gets the network adapter named Ethernet 2.\n\nThis command gets adapters starting with \"E\" and ending in \"2\" using wildcard characters.\n\nThis command displays the common properties for the network adapter named Ethernet 3 and formats the list using the Format-List cmdlet.\n\nThis command displays all of the properties for the network adapter named Ethernet 6.\n\nThis command gets all of the network adapters using the interface description that matches the prefix pattern VendorAdapter.\n\nThis command displays the Name, InterfaceDescription, and InterfaceName parameter values for all network adapters.\n\nThis command gets the visible network adapters on the server named Server5. The server named Server5 can be a remote computer.\n\nThis command gets the visible network adapters and formats the output to present driver information.\n\nThis command gets the visible network adapters and formats the output to present various names by which a network adapter can be identified such as the Name, InterfaceDescription, and InterfaceName parameter values.\n\nRuns the cmdlet as a background job. Use this parameter to run commands that take a long time to complete. The cmdlet immediately returns an object that represents the job and then displays the command prompt. You can continue to work in the session while the job completes. To manage the job, use the cmdlets. To get the job results, use the Receive-Job cmdlet. For more information about Windows PowerShell® background jobs, see about_Jobs.\n\nRuns the cmdlet in a remote session or on a remote computer. Enter a computer name or a session object, such as the output of a New-CimSession or Get-CimSession cmdlet. The default is the current session on the local computer.\n\nIndicates that the cmdlet includes both visible and hidden network adapters in the operation. By default only visible network adapters are included. If a wildcard character is used in identifying a network adapter and this parameter has been specified, then the wildcard string is matched against both hidden and visible network adapters.\n\nSpecifies an array of network adapter interface descriptions. For a physical network adapter this is typically the name of the vendor of the network adapter followed by a part number and description, such as .\n\nSpecifies the network adapter interface index number as an array.\n\nIndicates that the cmdlet gets all physical network adapters.\n\nSpecifies the maximum number of concurrent operations that can be established to run the cmdlet. If this parameter is omitted or a value of is entered, then Windows PowerShell® calculates an optimum throttle limit for the cmdlet based on the number of CIM cmdlets that are running on the computer. The throttle limit applies only to the current cmdlet, not to the session or to the computer.\n\nThis cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.\n\nThe object is a wrapper class that displays Windows Management Instrumentation (WMI) objects. The path after the pound sign ( ) provides the namespace and class name for the underlying WMI object."
    },
    {
        "link": "https://pdq.com/powershell/get-netadapter",
        "document": "The Get-NetAdapter cmdlet gets the basic network adapter properties. By default only visible adapters are returned. To see the common network adapter properties, pipe the output into the Format-List cmdlet. To see all the properties, pipe the output to the Format-List cmdlet with the Property parameter specified as the wildcard character \"*\". This cmdlet supports multiple views. The default view is as a table. To see more information regarding various network adapter identifiers use the names view using the Format-Table cmdlet with the View parameter specified as name. To see more information regarding the miniport, device driver, such as driver date or version use the driver view using the Format-Table cmdlet with the View parameter specified as driver.\n\nRuns the cmdlet in a remote session or on a remote computer. Enter a computer name or a session object, such as the output of a New-CimSession or Get-CimSession cmdlet. The default is the current session on the local computer.\n\nIndicates that the cmdlet includes both visible and hidden network adapters in the operation. By default only visible network adapters are included. If a wildcard character is used in identifying a network adapter and this parameter has been specified, then the wildcard string is matched against both hidden and visible network adapters.\n• This value is\n\nSpecifies an array of network adapter interface descriptions. For a physical network adapter this is typically the name of the vendor of the network adapter followed by a part number and description, such as Contoso 12345 Gigabit Network Device.\n• This value is\n\nSpecifies the maximum number of concurrent operations that can be established to run the cmdlet. If this parameter is omitted or a value of 0 is entered, then Windows PowerShellr calculates an optimum throttle limit for the cmdlet based on the number of CIM cmdlets that are running on the computer. The throttle limit applies only to the current cmdlet, not to the session or to the computer.\n\nThe Microsoft.Management.Infrastructure.CimInstance object is a wrapper class that displays Windows Management Instrumentation (WMI) objects. The path after the pound sign (#) provides the namespace and class name for the underlying WMI object."
    },
    {
        "link": "https://github.com/MicrosoftDocs/windows-powershell-docs/blob/main/docset/winserver2022-ps/netadapter/Get-NetAdapter.md",
        "document": "The Get-NetAdapter cmdlet gets the basic network adapter properties. By default only visible adapters are returned. To see the common network adapter properties, pipe the output into the Format-List cmdlet. To see all the properties, pipe the output to the Format-List cmdlet with the Property parameter specified as the wildcard character \"*\". This cmdlet supports multiple views. The default view is as a table. To see more information regarding various network adapter identifiers use the names view using the Format-Table cmdlet with the View parameter specified as name. To see more information regarding the miniport, device driver, such as driver date or version use the driver view using the Format-Table cmdlet with the View parameter specified as driver.\n\nThis command gets all of the visible network adapters.\n\nThis command gets all of the network adapters.\n\nThis command gets all of the physical network adapters.\n\nThis command gets the network adapter named Ethernet 2.\n\nThis command gets adapters starting with \"E\" and ending in \"2\" using wildcard characters.\n\nThis command displays the common properties for the network adapter named Ethernet 3 and formats the list using the Format-List cmdlet.\n\nThis command displays all of the properties for the network adapter named Ethernet 6.\n\nThis command gets all of the network adapters using the interface description that matches the prefix pattern VendorAdapter.\n\nThis command displays the Name, InterfaceDescription, and InterfaceName parameter values for all network adapters.\n\nThis command gets the visible network adapters on the server named Server5. The server named Server5 can be a remote computer.\n\nThis command gets the visible network adapters and formats the output to present driver information.\n\nThis command gets the visible network adapters and formats the output to present various names by which a network adapter can be identified such as the Name, InterfaceDescription, and InterfaceName parameter values.\n\nRuns the cmdlet as a background job. Use this parameter to run commands that take a long time to complete. The cmdlet immediately returns an object that represents the job and then displays the command prompt. You can continue to work in the session while the job completes. To manage the job, use the cmdlets. To get the job results, use the Receive-Job cmdlet. For more information about Windows PowerShell® background jobs, see about_Jobs.\n\nRuns the cmdlet in a remote session or on a remote computer. Enter a computer name or a session object, such as the output of a New-CimSession or Get-CimSession cmdlet. The default is the current session on the local computer.\n\nIndicates that the cmdlet includes both visible and hidden network adapters in the operation. By default only visible network adapters are included. If a wildcard character is used in identifying a network adapter and this parameter has been specified, then the wildcard string is matched against both hidden and visible network adapters.\n\nSpecifies an array of network adapter interface descriptions. For a physical network adapter this is typically the name of the vendor of the network adapter followed by a part number and description, such as .\n\nSpecifies the network adapter interface index number as an array.\n\nIndicates that the cmdlet gets all physical network adapters.\n\nSpecifies the maximum number of concurrent operations that can be established to run the cmdlet. If this parameter is omitted or a value of is entered, then Windows PowerShell® calculates an optimum throttle limit for the cmdlet based on the number of CIM cmdlets that are running on the computer. The throttle limit applies only to the current cmdlet, not to the session or to the computer.\n\nThis cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.\n\nThe object is a wrapper class that displays Windows Management Instrumentation (WMI) objects. The path after the pound sign ( ) provides the namespace and class name for the underlying WMI object."
    },
    {
        "link": "https://reddit.com/r/vmware/comments/197yo9h/iscsi_how_to_configure_the_iscsi_target_properly",
        "document": "For storage purposes I am about to set up a single iSCSI target for an existing 2-Node Cluster.\n\nI have read a lot about it now and what I understood is that it is recommended to prevent any kind of LACP configuration within the whole iSCSI network chain.\n\nBut what I found very confusing is what this official article describes when it comes into port binding:\n\nThe picture shows an iSCSI target presented by a single IP address. But how can this be a single IP address when there is no LACP configuration for multiple NICs on the iSCSI target? How can this be accomplished? Is this kind of configuration possible somehow by using special kind of HBAs (I am not experienced in HBAs yet, unfortunately)?\n\nIn my case, the iSCSI target has two dedicated physical 10Gb NICS for iSCSI traffic. My plan is to give each of those two physical NICs a dedicated IP address within the same dedicated iSCSI IP subnet. Please correct me if my plan is wrong as I am very confused now by the article linked above where the iSCSI target is presented by a single IP address but somehow without using LACP.\n\nThank you in advance!"
    },
    {
        "link": "https://support.purestorage.com/bundle/m_microsoft_platform_guide/page/Solutions/Microsoft_Platform_Guide/FlashArray_Connectivity/topics/concept/c_setup_iscsi_on_windows_server_with_windows_powershell.html",
        "document": "Powered by Zoomin Software. For more details please contact Zoomin"
    },
    {
        "link": "https://forums.starwindsoftware.com/viewtopic.php?f=5&t=6897",
        "document": "Hi there I am wondering how do I specify the correct interface and IP address to be used for the iSCSI targets when setting up a HA LUN using the PowerShell script \"CreateHA_2\". I have no problem getting the script to create the HA LUN however when it does it is using the \"management\" interface as opposed to the correct \"data\" interface as seen in the below photos.Below is the script configuration options I am using, if you could please help me out with this or point me in the direction of the correct documentation because I was unsuccessful trying to locate it. Appreciate any and all help and thanks for your help."
    },
    {
        "link": "https://support.purestorage.com/bundle/m_microsoft_platform_guide/page/Solutions/Microsoft_Platform_Guide/Quick_Setup_Steps/library/common_content/c_setting_the_default_mpio_policy.html",
        "document": "Powered by Zoomin Software. For more details please contact Zoomin"
    },
    {
        "link": "https://sqlshack.com/installing-and-configuring-the-iscsi-target-server-on-windows-server-2016",
        "document": "In this article, I am going to explain how we can install and configure the iSCSI Target Server Role on Windows Server 2016. iSCSI stands for Internet Small Computer System Interface and iSCSI Target Server allows you to boot multiple computers from a single operating system (OS) image.\n\nTo demonstrate the deployment process, I have created two virtual machines on my workstation. I have installed Windows Server 2016 on the virtual machines. Following is the configuration of the virtual machines.\n\nFirst, let us create an iSCSI server. To do that, we must install the iSCSI server role.\n\nTo configure the iSCSI target server, we must install the “File and iSCSI Services” role in Windows Server. To do that, Open Server Manager and click on “Manage” and select “Add roles and features.” See the following image.\n\nOn Add Roles and Features Wizard screen, you can see the detailed information about the wizard. We can skip this screen by checking on “Skip this page by default” checkbox. Click Next. See the following image:\n\nOn Select Installation Type screen, you can choose to install a role on a dedicated computer or install a role on a virtual hard disk. We want to install the iSCSI service on a virtual machine; therefore, choose “Role-based or feature-based installation” Click on Next. See the following image:\n\nOn the “Select destination server” screen, we can choose the server or the virtual disk on which we want to install the desired role or feature. We want to install the iSCSI services on SAN.DC.Local hence, choose SAN.DC.Local from the list of servers within Server Pool.\n\nOn the “Select server roles” screen, we can choose the desired role from the list of roles. We want to install File and iSCSI Services. To do that, expand, File and Storage Services, expand “File and iSCSI Services” and select “iSCSI Target Server”. See the following image:\n\nOn the “Select features” screen, we can choose the required feature that we want to install. We do not want to install any feature, hence click on Next. See the following image:\n\nOn Confirm installation selections screen, you can see the summary of the roles and the list of features that you are going to install on the server. Some roles and features require to restart the server during the installation process so you can enable the option to restart the server automatically during installation. Review the details of roles and click on Install. See the following image:\n\nTo verify that the iSCSI target server role has been installed successfully, open Server Manager and expand “File and Storage Services.” See the following image:\n\nIn the left pan, you can view the iSCSI target server that has been installed. See the following image:\n\nOnce the iSCSI target server has been configured, let us create an iSCSI virtual disk. To do that,\n• On the right pan, click on “Start the new iSCSI virtual disk wizard”\n\nSee the following image:\n\nNew iSCSI disk wizard starts. On the “Select iSCSI virtual disk location” screen, you can choose the location of the virtual disk. If you have installed the iSCSI Target Server role on multiple servers, then you can choose the desired server from the list. The list of servers with the iSCSI target role will be populated automatically in the “Servers” text box. The disk volume can be selected from the “Select by Volume” list. You can also provide the custom path in the “Type a custom path” text box. We are going to create a virtual disk on the C drive of the SAN.DC.Local, hence choose C: from the “Select by Volume” textbox. Click on Next. See the following image:\n\nOn the “Specify iSCSI virtual disk name” screen, you can provide the desired name of the virtual disk name. Click on Next. See the following image:\n\nOn the “Specify iSCSI virtual disk size” screen, you can specify the size of the virtual disk. You can create any of the following disk types:\n• Fixed Size: When we choose the fixed size, the wizard creates the disk that has the size specified in the “Size” textbox. This disk type is useful when you want to run the application that involves high disk activity. When you add or remove the data from the disk, the size of the disk does not change\n• Dynamically expanding: When we choose dynamically expanding disk type, the wizard creates a disk with a small size. Later, the size of the disk increases based on the volume of the data that has been added\n• Differencing: If you have a scenario when you want to create multiple child virtual disk in one parent disk. The changes should be made in child disks, and those changes can be revert. This setup can be configured using the differencing disk type\n\nWe want to create a disk that can be expanded based on the amount of the data added to the disk hence, choose “Dynamically expanding” disk type, enter the desired size of the disk in the “Size” textbox and click on Next. See the following image:\n\nOn the “Assign iSCSI target” screen, we can provide the desired name of the iSCSI target. The iSCSI target name is used by the iSCSI initiators to identify the specific target. If you have created an iSCSI target, you can choose it from “Existing iSCSI target.” We have not created any target yet, so select “New iSCSI target” and click on “Next.” See the following image:\n\nOn the “Specify target name” screen, you can provide the name of the target that can be used by iSCSI initiators. Provide the desired name in “Name” textbox and click on Next. See the following image:\n\nOn the “Specify Server Access” screen, you can specify the list of iSCSI initiators that can access the virtual disk. To add the iSCSI initiators, click on Add. See the following image:\n\nBy default, the iSCSI initiator cannot connect to the target server. We must install/enable iSCSI initiators. To connect to the iSCSI target server, we can use any of the following:\n• Query initiator for computer ID: In “Query initiator for computer ID” text box, you can specify the fully qualified hostname of the computer that has iSCSI initiator. This method is supported by windows server 2008 R2 OR windows 7 or later operating systems\n• IQN: You can specify the IQN of the machine that has an iSCSI initiator. IQN is a qualified name of the iSCSI. The format of the IQN is “<Type>.<Date>.<Naming Authority>.<string defined by naming authority>”\n• DNS Name: You can specify the DNS name of the computer where the iSCSI initiator has been installed\n• IP Address: If you want to use the iSCSI target from outside of the domain, we can specify the IP Address of the computer that has iSCSI initiator\n• Mac Address: You can also specify the MAC address of the computer that has an iSCSI initiator\n\nWe are going to connect the iSCSI target from DC. Local computer. To do that, on “Select a method to identify the initiator” screen, choose “DNS Name” from the type drop-down box and enter “DC.Local” in “Value” text box and click on OK to close the screen. See the following image:\n\nBack to the “Specify Server access” screen, you can see that the initiator has been added to the list. Click on Next. See the following image:\n\nIf you want to enable CHAP (Challenge-handshake authentication protocol) or reverse CHAP, click on “Enable CHAP” and “Enable reverse CHAP” and provide username and password. We do not want to enable CHAP or Reverse CHAP, hence click on Next. See the following image:\n\nOn confirm selection screen, review all the settings, and click on “Create” to create an iSCSI virtual disk. See the following image:\n\nOn the “View Result” screen, you can see that disk has been created successfully. You can close the window. See the following image:\n\nOnce the disk has been created, you can see the list of iSCSI virtual disks in the server manager. See the following image.\n\nIn this article, I have explained how we can install the iSCSI Target Server Role and configure the iSCSI Target Server on Windows Server 2016. In my next article, I will explain that how we can configure the iSCSI initiator and use it to connect to the iSCSI virtual disk. Stay tuned!"
    }
]