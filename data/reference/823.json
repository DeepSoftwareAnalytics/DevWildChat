[
    {
        "link": "https://geeksforgeeks.org/program-for-bisection-method",
        "document": "The bisection method is a technique for finding solutions to equations with a single unknown variable. Among various numerical methods, it stands out for its simplicity and effectiveness, particularly when dealing with transcendental equations (those that cannot be solved using algebraic methods alone). The method is also called the interval halving method, the binary search method or the dichotomy method.\n\nThis method is used to find root of an equation in a given interval that is value of ‘x’ for which f(x) = 0 . \n\n\n\nThe bisection method is based on the Intermediate Value Theorem, which states that if f(x) is a continuous function on the interval [a, b] and f(a) and f(b) have opposite signs (i.e., f(a)⋅f(b)<0), then there is at least one root of the equation f(x)=0 in the interval (a,b).\n• None If f(c) = 0, then c is the root of the equation.\n• None\n• None If f(a)⋅f(c)<0, the root lies between a and c, so we recur with the interval [ a, c].\n• None Else, if f(b)⋅f(c)<0, the root lies between b and ccc, so we recur with the interval [ c, b].\n• None If neither of these conditions hold, then the function does not satisfy the assumptions of the bisection method.\n• None Since the root may be a floating-point number, we repeat the above steps until the difference between a and b is less than or equal to a very small value\n\nWe use the bisection method to find the root of the polynomial: f(x)=x3−x−2 Since f(1) and f(2) have opposite signs, there is a root between 1 and 2. Step 2: First Iteration, Calculate the midpoint: [Tex]c_1 = \\frac{1 + 2}{2} = 1.5[/Tex]\n\nEvaluate the function at c ​: f(1.5) = −0.125 Since f(1.5) is negative, update the interval to [1.5, 2]. Step 3: Repeat: Repeat the process until the interval becomes sufficiently small, converging on the root.\n\nA few steps of the bisection method applied over the starting range [a ;b ]. The bigger red dot is the root of the function.\n\n\n\nBelow is implementation of above steps. \n\n\n\n// C++ program for implementation of Bisection Method for // An example function whose solution is determined using // Prints root of func(x) with error of EPSILON \"You have not assumed right a and b // Decide the side to repeat the steps \"The value of root is : \" // An example function whose solution is determined using // Prints root of func(x) with error of EPSILON // Decide the side to repeat the steps //prints value of c upto 4 decimal places \"The value of root is : %.4f\" // This code is contributed by Nirmal Patel # Python program for implementation of Bisection Method for solving equations # An example function whose solution is determined using Bisection Method. \"You have not assumed right a and b # Decide the side to repeat the steps \"The value of root is : \" // An example function whose // This code is contributed by ajit // An example function whose solution is determined using // Prints root of func(x) with error of EPSILON // Decide the side to repeat the steps //prints value of c upto 4 decimal places // This code is contributed by susmitakundugoaldanga. // An example function whose \"The value of root is : \" // This code is contributed by ajit\n\nThe value of root is : -1.0025\n\nDetermine the root of the given equation x2−3 = 0 for x∈[1,2]x .\n\nNow, find the value of f(x)at a=1 and b=2.\n\nf(1)=12−3=1−3=−2 (which is <0), \n\nf(2)=22−3=4−3=1 (which is >0)\n\nThe given function is continuous, and since f(1)⋅f(2) < 0 , the root lies in the interval [1, 2].\n\nLet t be the midpoint of the interval: [Tex]t = \\frac{1 + 2}{2} = \\frac{3}{2} = 1.5[/Tex]\n\nNow, find the value of the function at t=1.5 :\n\nf(1.5)=(1.5)2−3=2.25−3=−0.75 (which is <0)\n\nIterations for the Given Function:\n\nAt iteration 7, the final interval is [1.7266, 1.7344].\n\nHence, the approximated solution is 1.7344.\n• Guaranteed Convergence: It always converges to a root if the function is continuous and f(a)⋅f(b) < 0.\n• No Derivatives Needed: Unlike other methods, it doesn’t require the derivative of the function.\n• Robust: Can be used for a wide range of equations, even in real-world applications.\n• Reliable: Provides a stable solution, though with slower convergence compared to some other methods.\n\nDisadvantage of Bisection Method is that it cannot detect multiple roots.\n\nProblem 1: Use the bisection method to find the root of f(x) = x2−5 in the interval [2,3] up to 4 decimal places.\n\nProblem 2: Apply the bisection method to solve f(x) = cos⁡(x)−x in the interval [0, 1] up to 3 decimal places.\n\nProblem 3: Use the bisection method to find the root of f(x) = x3−2x−5min the interval [2 , 3 ]up to 5 decimal places.\n\nProblem 4: Solve the equation f(x) = x2−2x−3 for a root in the interval [1, 4] using the bisection method.\n\nProblem 5: Use the bisection method to approximate the root of f(x)=ex−3 in the interval [0, 2] to 3 decimal places.\n\nHow accurate is the bisection method?\n\nWhat are Algebraic and Transcendental functions?\n\nCan the bisection method find all types of roots?\n\nWhat happens if f(a)⋅f(b) ≥ 0 ?\n\nHow does the bisection method compare to other root-finding methods?"
    },
    {
        "link": "https://stackoverflow.com/questions/70225820/equation-solving-using-bisection-method-using-python",
        "document": "See we know that Bisection, Newton-Raphson, or most of all Numerical methods are the iteration processes so better we use function inside of function: Of course! by checking the conditions.\n\nHere, I have used this is something which we can't use for quadratic/cubic or higher-order polynomials because getting the exact root will not be possible for all the types of equations say like where However, we can define the iterations to be performed. By asking like Please enter the number of iterations to be performed:"
    },
    {
        "link": "https://codesansar.com/numerical-methods/bisection-method-python-program.htm",
        "document": "This program implements Bisection Method for finding real root of nonlinear equation in python programming language.\n\nIn this python program, and are two initial guesses, is tolerable error and nonlinear function is defined using python function definition ."
    },
    {
        "link": "https://courses.grainger.illinois.edu/cs357/sp2021/notes/ref-14-solve_nd.html",
        "document": "\n• Set up a problem with one parameter\n\nConsider a function . The point is called the root of if .\n\nFinding the values of for which is useful for many applications, but a more general task is to find the values of for which . The same techniques used to find the root of a function can be used to solve an equation by manipulating the function like so:\n\nThe new function has a root at the solution to the original equation .\n\nGiven we define the Jacobian matrix as:\n\nLinear functions are trivial to solve, as are quadratic functions if you have the quadratic formula memorized. However, polynomials of higher degree and non-polynomial functions are much more difficult to solve. The simplest technique for solving these types of equations is to use an iterative root-finding technique.\n\nWe will try out the following techniques using the function:\n\nThe bisection method is the simplest root-finding technique.\n\nThe algorithm for bisection is analogous to binary search:\n• Take two points, and , on each side of the root such that and have opposite signs.\n• Evaluate and use to replace either or , keeping the signs of the endpoints opposite.\n\nWith this algorithm we successively half the length of the interval known to contain the root each time. We can repeat this process until the length of the interval is less than the tolerance to which we want to know the root.\n\nConceptually bisection method uses 2 function evaluations at each iteration. However, at each step either one of or stays the same. So, at each iteration (after the first iteration), one of or was computed during the previous iteration. Therefore, bisection method requires only one new function evaluation per iteration. Depending on how costly the function is to evaluate, this can be a significant cost savings.\n\nBisection method has linear convergence, with a constant of 1/2.\n\nThe bisection method requires us to know a little about our function. Specifically, must be continuous and we must have an interval such that\n\nThen, by the intermediate value theorem, we know that there must be a root in the interval .\n\nThis restriction means that the bisection method cannot solve for the root of , as it never crosses the x-axis and becomes negative.\n\nFrom the graph above, we can see that has a root somewhere between 1 and 2. It is difficult to tell exactly what the root is, but we can use the bisection method to approximate it. Specifically, we can set and .\n\nSince and are both positive, we will replace with and further narrow our interval.\n\nSince and are both negative, we will replace with and further narrow our interval.\n\nNote that as described above, we didn’t need to recalculate or as we had already calculated them during the previous iteration. Reusing these values can be a significant cost savings.\n\nSince and are both positive, we will replace with and further narrow our interval.\n\nWhen running the code for bisection method given below, the resulting approximate root determined is 1.324717957244502. With bisection, we can approximate the root to a desired tolerance (the value above is for the default tolerances).\n\nThe Newton-Raphson Method (a.k.a. Newton’s Method) uses a Taylor series approximation of the function to find an approximate solution. Specifically, it takes the first 2 terms:\n\nStarting with the Taylor series above, we can find the root of this new function like so:\n\nThis value of can now be used to find a value of closer to the root of :\n\nGeometrically, is the intersection of the x-axis and the tangent of the graph at .\n\nBy repeatedly this procedure, we can get closer and closer to the actual root.\n\nWith Newton’s method, at each iteration we must evaluate both and .\n\nAlthough Newton’s Method converges quickly, the additional cost of evaluating the derivative makes each iteration slower to compute. Many functions are not easily differentiable, so Newton’s Method is not always possible. Even in cases when it is possible to evaluate the derivative, it may be quite costly.\n\nConvergence only works well if you are already close to the root. Specifically, if started too far from the root Newton’s method may not converge at all.\n\nWe will need the following equations:\n\nFrom the graph above, we can see that the root is somewhere near . We will use this as our starting position, .\n\nAs you can see, Newton’s Method is already converging significantly faster than the Bisection Method.\n\nWhen running the code for Newton’s method given below, the resulting approximate root determined is 1.324717957244746.\n\nLike Newton’s Method, secant method uses the Taylor Series to find the solution. However, you may not always be able to take the derivative of a function. Secant method gets around this by approximating the derivative as:\n\nThe steps involved in the Secant Method are identical to those of the Newton Method, with the derivative replaced by an approximation for the slope of the tangent.\n\nSimilar to bisection, although secant method conceptually requires 2 function evaluations per iteration, one of the function evaluations will have been computed in the previous iteration and can be reused. So, secant method requires 1 new function evaluation per iteration (after the first iteration).\n\nMore specifically, the rate of convergence is:\n\nThis happens to be the golden ratio.\n\nThis technique has many of the same drawbacks as Newton’s Method, but does not require a derivative. It does not converge as quickly as Newton’s Method. It also requires two starting guesses near the root.\n\nFirst, find an approximate for the derivative (slope):\n\nThen, use this for Newton’s Method:\n\nWhen running the code for secant method given below, the resulting approximate root determined is 1.324717957244753.\n\nSciPy’s method serves double-duty. If given a function and a first derivative , it will use Newton’s Method. If it is not given a derivative, it will instead use the Secant Method to approximate it:\n\nSimilar to root-finding in 1 dimension, we can also perform root-finding for multiple equations in dimensions. Mathematically, we are trying to solve for . In other words, is now a vector-valued function\n\nIf we are instead looking for the solution to , we can rework our function like so:\n\nWe can think of each equation as a function that describes a surface. We are looking for vectors that describe the intersection of these surfaces.\n\nThe multi-dimensional equivalent of Newton’s Method involves approximating a function as:\n\nwhere is the Jacobian matrix of .\n\nBy setting this to and rearranging, we get:\n\nNote that in practice we would not actually invert the Jacobian, but would instead solve the linear system in to determine the step.\n\nSimilar to the way we solved for in 1 dimension, we can solve for:\n\nwhere $\\boldsymbol{s_k}$ is determined by solving the linear system\n\nJust like in 1D, Newton’s Method only converges locally. It may also be expensive to compute at each iteration and we must solve a linear system at each iteration.\n\nThe corresponding Jacobian and inverse Jacobian are:\n\nIn this example, as the Jacobian is a matrix with a simple inverse, we work explicitly with the inverse, even though we would not explicitly compute the inverse for a real problem.\n\nWhen running the code for Newton’s method given below, the resulting approximate root determined is .\n• 2017-12-02 Erin Carrier ecarrie2@illinois.edu: adds review questions, adds a little more cost information, a few other minor fixes"
    },
    {
        "link": "https://github.com/motisoltani/Bisection-Method",
        "document": "The simplest root finding algorithm is the bisection method. This program implements Bisection Method for finding real root of nonlinear equation in python programming language. This program shows you table and graph related to the function and the root. I hope you find it useful. \n\n Parameters \n\n---------- \n\nf : function \n\n The function for which we are trying to approximate a solution f(x)=0. \n\nxl , xu : numbers \n\n The interval in which to search for a solution. The function returns \n\n None if f(xl)*f(xu) >= 0 since a solution is not guaranteed. \n\nN : number of iterations \n\neps : Acceptable Error \n\nEpsilon : (xm(new)-xm(old))/xm(new))*100 \n\nxm : (xl-xu)/2"
    },
    {
        "link": "https://github.com/TheAlgorithms/Python/blob/master/physics/archimedes_principle_of_buoyant_force.py",
        "document": "To see all available qualifiers, see our documentation .\n\nSaved searches Use saved searches to filter your results more quickly\n\nWe read every piece of feedback, and take your input very seriously.\n\nYou signed in with another tab or window. Reload to refresh your session.\n\nYou signed out in another tab or window. Reload to refresh your session.\n\nYou switched accounts on another tab or window. Reload to refresh your session."
    },
    {
        "link": "https://stackoverflow.com/questions/46594908/archimedes-pi-approximation-in-python",
        "document": "expects angles to be specified in radians.\n\nYou are specifying it in degrees. Specify the angle in radians instead:\n\nOr, if you don't want to use so explicitly, use the helper function to convert units:"
    },
    {
        "link": "https://geeksforgeeks.org/archimedes-principle",
        "document": "Archimedes Principle is a fundamental concept in fluid mechanics, credited to the ancient Greek mathematician and physicist Archimedes. According to Archimedes' Principle, when an object is immersed in a fluid the object experiences an upward force whose magnitude is equal to the weight of the fluid displaced by the object.\n\nArchimedes' principle has applications in various fields, from ship design to understanding the behavior of objects in water. Archimedes' Principle is important for class 9 students.\n\nIn this article, we are going to learn about what is Archimedes Principle, its formula, how to derive it, its application, and its experimental verification of Archimedes\n\nArchimedes Principle states that when an object is submerged in a fluid, it experiences an upward buoyant force equal to the weight of the fluid it displaces. This principle explains why objects appear to weigh less when placed in a fluid and why some objects float while others sink. The buoyant force is directly proportional to the volume of the fluid displaced by the submerged object, and it counteracts the object's weight. As a result, if the weight of the fluid displaced is greater than or equal to the weight of the object, it will float, while if the weight of the fluid displaced is less, the object will sink.\n\nIt was in the year 246 BC that Archimedes had an idea about the weight displacement by liquids. After a lot of tests about the density and volume of different things, he stated the \"Archimedes' Principle\".\n\nIt means that when a body is partially or completely submerged in a liquid, it experiences an apparent loss in because of a force acting in upward direction (Buoyancy), which is equal to the weight of liquid displaced by the submerged part of the body. This force acting in upward direction was later named as Upthrust or force acting vertically upwards.\n\nThe best example of Archimedes Principle is that when a ship is launched into water it displaces the amount of water equal to its weight.\n\nWe have learnt that as per Archimedes Principle, the upthrust experienced by an object immersed in fluid is equal to the weight of the fluid displaced by the object. Let's us see how we can verify it experimentally.\n\nIn the figure, the solid weighs 300gf in air and 200gf in water, and the water collected in the can is 100ml, i.e. 100cm3\n\nWhen the object is immersed in the fluid, the object feels lighter due to the loss of apparent weight which is equal to the weight of the fluid displaced by the liquid.\n\nLets take a cylinder 'PQRS' with upper surface 'PQ' and lower surface 'RS', dipped in a liquid of density D the height of the cylinder is 'h' and it is at a depth 'd'. Since the depth at PQ is d and at RS is (d+h)\n\nUsing the formula for pressure (P = ρ × h × g)\n\nAccording to the laws of liquid pressure, pressure at a point inside the liquid increases with the depth from its free surface.\n\nAccording to the laws of liquid pressure, liquid pressure is the same in all directions about a point in a liquid. So, there will be an upward force acting on the bottom surface RS, which is the Upthrust or Buoyant Force\n\nF = P × A where P is Pressure and A is Area\n\nThere are three possible cases as per Archimedes Principle, these cases are mentioned below:\n\nCase 1: If the F = Weight then the object will float in completely submerged position;\n\nCase 2: If F > W then the object will float;\n\nCase 3: When F < W then the object will sink.\n\nArchimedes Principle in simple words states that when an object is immersed in water it displaces the amount of liquid weight of the object. When object is immersed it experiences an upward force called buoyant force. The magnitude of this buoyant force is equal to the weight of the object immersed.\n\nArchimedes' principle is crucial in designing ships, submarines, and other watercraft. By understanding how the buoyant force works, engineers can design vessels that can float and maintain stability. This principle is also used to calculate the maximum cargo capacity of ships and to ensure they don't exceed their weight limits. Let's see some of the applications of Archimedes Principle\n• Submarines : Submarines use Archimedes' principle to control their depth. By adjusting their ballast tanks to change the amount of water they displace, submarines can either rise to the surface or dive to greater depths.\n• Hot Air Balloons : The principle is applied in hot air balloons, where the heated air inside the balloon is less dense than the surrounding air, creating a buoyant force that allows the balloon to rise.\n• Life Jackets and Buoyancy Aids : Life jackets and buoyancy aids are designed to help people float in water. They work by increasing the buoyant force acting on the person, thus preventing them from sinking.\n• Density Measurement : Archimedes' principle is used to determine the density of irregularly shaped objects. By measuring the weight of an object in air and then in a fluid (usually water), the volume of the object can be calculated, which, in turn, allows for the determination of its density.\n• Hydrometers : A hydrometer is an instrument that measures the density of a liquid, typically used in applications like determining the sugar content in a liquid (e.g., in winemaking or brewing).\n• Oil Extraction : In the oil industry, Archimedes' principle is employed to separate oil from water by using large tanks. The less dense oil rises to the surface, making it easier to collect.\n\nExample 1: A body weighs 400 gf in air and 280 gf when completely immersed in water. Calculate: (1)the loss in weight of the body. (2) Calculate the volume of water displaced. (3) The upthrust on the body.\n\nExample 2: A piece of iron of density 7.8× 103 kg m-3 and volume 100cm3 is completely immersed in water(ρ = 1000kgm-3). Calculate : (1) the weight of iron piece in air, (2) the upthrust and, (3) its apparent weight in water.(Take g = 10ms-2)\n\nExample 3: A metal sphere of radius 7cm3 and density 9gcm-3 is suspended by a thread and is immersed completely in a liquid of density 3gcm-3. Find: (1) the weight of the sphere, (2)the upthrust on the sphere and, (3) the tension on the thread.\n\nQ1. A body of volume 100cm3 weighs 5kgf in air. It is completely immersed in a liquid of density 1.8 × 103 kg m-3. Find : (1) upthrust due to the liquid, (2) the weight of the body in the liquid\n\nQ2. A spherical ball of density ρ=7.7g cm-3 has a radius of r=14cm. If the ball is placed on the surface of water and released, how much of the ball becomes submerged in the water? (g=10ms-2)\n\nQ3. The mass of a block made of a certain material is 13.5kg and its volume is 15 × 10-3m3.(1) Calculate the upthrust on the block if it is held full immersed in water, (2)Will the block sink or float on releasing? Give reason for your answer, (3)What will be the upthrust on the block while floating? take D = 1000kg m-3\n\nQ4. A body of mass 3.5kg displaces 1L of water when fully immersed in it. Calculate: (1)The volume of the body, (2)the upthrust on the body, (3) the apparent weight of the body in water.\n\nQ5. A metal cube with edge 5cm and density 9.0 gcm-3 is suspended by thread so as to be completely in a liquid of density 1.2 g cm-3. Find the the tension in the thread. (take g = 10 m s-2)\n\nQ6. A block of wood is floating with tis dimension 75 cm × 75 cm × 75cm inside water. Calculate the buoyant force acting on the the block. Take g = 9.8 N kg-1.\n\nQ7. You are provided with a hollow iron ball A of volume 15 cm-3 and mass 12 g and a sold iron ball B of mass 12g. Both are placed on the surface of water contained in a large tub. (1) FInd the upthrust on each ball, (2) Which ball will sink? Give reason for your answer. (Density = 8.0 g cm-1)\n\nQ8. Two spheres A and B, each of volume 100cm3 are placed on water (density = 1.0 g cm-3). The sphere A is made of wood of density = 0.3 g cm-3 and the sphere B is made of iron of density 8.9 g cm-3. Find: (1) the weight of each sphere, (2) the upthrust on each sphere. Which sphere will float? Give reason.\n\n1. What is Archimedes Principle Class 9? Who stated it?\n\n3. How can we Experimentally Verify Archimedes' Principle.\n\n5. When does the Object Float?\n\n6. What is an Example of Archimedes' Principle in our daily life?\n\n8. What is Archimedes' Principle of Density?"
    },
    {
        "link": "https://medium.com/@manuelcastro1/calculating-pi-using-the-archimedes-method-155c8f5010c3",
        "document": "Pi is one of the most important number in geometry and maths, but, do you know how to calculate it?\n\nWell, let’s calculate it using Python and some geometry.\n\nThere are many different ways to calculate pi (or approach it), but today we will use the Archimedes method to do that.\n\nAround 250 Before Crist Archimedes planted that one can estimate pi by estimating the perimiter of a regular polygon with a huge quantity of sides.\n\nRemember that a regular polygon is a polygon that is equiangular and equilater, that means that all angles and sides are equal.\n\nOur first step will be determine one side length and the number of sided that the polygon will have. Let’s start with a pentagon (5 sides) with a length of 1 for the example.\n\nYou should remember that the perimiter of a polygon is the sum of its sides, but in this case we can simplify the perimiter as:\n\nNow think in a circle, how can we calculate its perimiter? \n\n We know that the perimiter must be a funcion of one of the known circle’s measure, and one of the measures that we know is the radius: the distance between the center and the border.\n\nIn this point let’s sopose that the pi is a constant and is unknown and the perimiter is a function of the diameter instead of the radius, but the diameter is just two times the radius, so we have:\n\nBut, how can we join this two conceps?, how can we estimate pi using regular polygons?\n\nThink in a polygon with a lot of sides, 100 or 100000 sides, it will look like as circle as you can see below.\n\nAs you can see, if the number of sides of the polygon y too large, it will look like a circle, so we can approach the circle perimiter calculating the polygon perimeter:\n\nLet’s supose 2 cases: \n\n — We know the side length, but not the radius. \n\n — We know the radius but not the side length.\n\nFor the first case, we know that the side length is “L”, but if we divide it by 2, we obtain 2 rigth triangles with the radius as hypothenuse, L/2 as the opposite and “A” as the adyacent. \n\n For the angle α (alpha) will be 360° divided by the number of sides, in this case\n\nIf we apply some of geometry, we can calculate the radius using the sin of the angle.\n\nIf we sopose that L = 1 in this pentagon, r will be\n\nNow we can apply the formula to approach pi:\n\nWell, this result is very innacurate to pi, so we have to use much more sides, Let’s see this python code:\n\nAnd the output will be the approach and then the actual value of pi.\n\nNow we will change the number of sides by 20 and let’s see what happens\n\nPlease, note that this new value is nearest to pi than the previos one, now let’s change the number of sides by 10000.\n\nIn this case, the value is difference is very small, and as you can see in the graph below, wou will note that the greater number of sides the greater accurancy will be.\n\nFor the second case, when we do not know the side length, but know the radius, we can use the formula we used previusly:\n\nAnd then we replace to calculate pi, in this case, we gonna sopose that the radius is 1\n\nAnd the Python code is very similar:\n\nTo conclude, we can find pi by using the Archimedes method and some knowledge in geometry and apply the solution using computational tools as Python to calculate it and better understand where pi comes from.\n\nYou can interact or download the Python Script (Jupyter notebook) by clicking here.\n\nDo not forget see my other projects in Github and in this page."
    },
    {
        "link": "https://sweetstudy.com/files/numericalpythonassignment-pdf",
        "document": "Due: Specified on the Moodle assignment page. Late submissions will automatically be marked as late and NOT GRADED. Please make sure you submit your assignment far in advance of the stated deadline, so that you avoid losing credit due to bad networks, etc. It is recommended that you start early and if you have questions, ask them in the course Moodle Discussion forum. If you wait until the last minute to ask questions, it’s very likely that nobody will answer you in time. It is also recommended that you turn in something, even if it’s not complete. Even if you weren’t able to complete the assignment, taking the time to explain what you tried and what problems you faced will likely prevent you from getting a zero. Grading: Grading is somewhat subjective in this assignment, on a scale of 0 to 10, roughly equivalent to a standard grading scale where 10 would be an A+ (Excellent), 9 would be a B+/A- (Good), 8 would be a C+/B- (Fair), etc. In this particular assignment, if you do all that is asked of you, you should receive a 10. If you neglect, or poorly explain 2 or more minor items, you should receive a 9, and so on. The primary goals of this assignment are ● To gain additional proficiency in the programming and documentation of Python for scientific applications in the Jupyter Notebook environment ● To gain practical experience in a root-finding problem. The deliverable that you should plan on submitting is a SINGLE Jupyter Notebook (.ipynb) file that contains your code and discussions in a professional-looking formatted report. Information on the VM that I have created for you, along with Jupyter setup is available via the course Moodle site. These assignments have been set up with the VM in mind, so you don’t have to worry about installing new software. You are, of course, welcome to use your own distributions, but you are on your own if you run into technical problems. All grading will be done in this Jupyter VM environment. This problem is motivated by Problem 5.19 of your Chapra textbook, but adds to it and provides additional explanations. The following graphic illustrates an empty sphere suspended in a body of fluid (usually water). Your goal will be to find the value of , the distance from the water surface to the top of the sphere, as a function of various parameters including the density of the sphere and the water, as well as the volume of the sphere.\n\nThe portion of the sphere that will be exposed above the water surface depends on the buoyancy force, which is equal to the weight of fluid displaced by the submerged portion of an object. The Archimedes principle states this mathematically as follows: where is the total sphere volume and is the below-water volume. The above-water volume is given as and it naturally follows that To find the value of for the specified parameters, you will want to find the root of the equation presented in the Archimedes principle recognizing that will cancel out, and that and can be expressed in terms of and/or . To make it even clearer for you, your job is ultimately to find the value of which makes the above equation true (recast the equation to zero, and find the root of that equation). To do this, you should - all within a Jupyter notebook - write code that defines the function you want to find the root of, plots the function (see following example - not correct solution) with the parameters in the title (these values should not be hardcoded into the plot statements - they should use constants defined at the top of the program)\n\nso that you can get a rough idea of where the root is, then uses the secant root finding method to calculate the root of the equation out to six significant digits. Your code should neatly print each iteration so that it is easy to see how it is converging. The following is an example of neatly-formatted output (but not correct solutions): Further, your code should be neat and very well documented, and equations should be expressed as constants and variables so that the code is readable and reusable, and can be easily (by changing a single variable) used to perform a variety of experiments. In Appendix 1 I give an example of good coding versus bad coding Here are specific requirements for the assignment 1. In a well-formatted introductory section of your Notebook, describe the problem in your own words. Jupyter allows you to use Markdown to neatly format your code. Additionally, if you want to typeset your equations, Jupyter allows you to do so in a Markdown section by using LaTeX within $ delimiters. However, this is not required of you, and it can be tedious if you’re not used to it. For those who might be interested, I’ve provided an example in Appendix 3. 2. Create a neatly-formatted and well-documented code that solves the problem described above. It should create a plot and a neatly-formatted set of iterations as described above. Your constants , and should be clearly defined at the top of your code so that they can be easily modified to perform experiments. 3. Perform a first experiment using values of , and . Save these values, as you will put them in a table below. 4. Perform another experiment, this time using a sphere density of . 5. Perform another experiment using the original sphere density, but placing the sphere in salt water rather than fresh water.\n\n6. Perform another experiment using the original sphere density, but placing the sphere in liquid mercury. 7. Create a neatly-formatted concluding Markdown section in your Jupyter notebook, which includes a table of the above results, and a discussion of why you think your model is correct based on your results, and any other knowledge you might be able to add. See Appendix 2 of this document for an example of creating a table in Markdown. Your work should be submitted as a single .ipynb Jupyter notebook Appendix 1 - Example of good coding and bad coding The following is modeled after Problem 5.15 of the Chapra text, and is meant to show you both good and bad examples of coding equations. graphically estimate the value of that satisfies this equation, given In other words, find the value of such that In the following code I illustrate two acceptable ways to code the function, and one that’s unacceptable. They each produce exactly the same graphic."
    },
    {
        "link": "https://w3resource.com/python-exercises/python-basic-exercise-15.php",
        "document": "Write a Python program to get the volume of a sphere with radius six.\n\nA sphere is a three-dimensional solid with no face, no edge, no base and no vertex. It is a round body with all points on its surface equidistant from the center. The volume of a sphere is measured in cubic units.\n\nThe volume of the sphere is : V = 4/3 × π × r3 = π × d3/6.\n\nThe said code assigns the value of pi as 3.1415926535897931 to the variable \"pi\" and 6.0 to the variable \"r\". The code uses the formula V = 4/3 * pi * r^3 to calculate the volume of a sphere. Volume of the sphere is stored in the variable \"V\".\n\nIt then prints the message \"The volume of the sphere is:\" followed by the volume of the sphere using print statement.\n\nIn this case, the code will output \"The volume of the sphere is: 904.7786842338603\".\n\nFor more Practice: Solve these Related Problems:\n• Write a Python program to calculate the surface area of a sphere given its radius.\n• Write a script that computes the volume of a cylinder given its radius and height.\n• Write a Python program to find the volume of a cone given its radius and height.\n• Write a script that finds the radius of a sphere when given its volume.\n\nPrevious: Write a Python program to calculate number of days between two dates.\n\n Next: Write a Python program to get the difference between a given number and 17, if the number is greater than 17 return double the absolute difference."
    },
    {
        "link": "https://quora.com/How-do-you-write-a-Python-function-that-computes-the-volume-of-a-sphere-given-its-radius",
        "document": "Something went wrong. Wait a moment and try again."
    },
    {
        "link": "https://geeksforgeeks.org/how-to-find-the-volume-of-a-sphere",
        "document": "How to find the Volume of a Sphere?\n\nThe volume of a sphere is equal to V = [Tex]\\frac {4\\pi r^3} {3}[/Tex]\n\nA sphere is defined as a three-dimensional solid object such that all points on its surface are equidistant from its center. In other words, it is defined as a group of points in three-dimensional space that are all at the same distance from a given point, similar to a circle, which is geometrically a two-dimensional object. The distance between any point on a sphere’s surface and its center is called its radius.\n\nThe volume of a sphere equals the amount of space occupied by it. It determines the area or region enclosed by the sphere. Its formula is equal to four times the product of pi and the cube of radius divided by 3. Its standard unit of measurement is cubic meters (m3).\n\nThe formula for volume of sphere is derived by using the method of integration. Consider a sphere of radius R divided into many small circular discs of radius r and thickness dy. The total volume of the sphere can be calculated by adding the volume of all such possible discs. In other words, we have to integrate the above volume integral from lower limit -R to upper limit +R. So, the volume of sphere is calculated as, This derives the formula for volume of a sphere.\n\nHow to Find the Volume of a Sphere?\n\nLet’s take an example to understand how we can calculate the volume of a sphere. Example: Calculate the volume of a sphere of radius 3 m.\n• Step 1: Observe the radius of sphere. In this example, the radius of the sphere is 3 m.\n• Step 2: It is known that the volume of a sphere is equal to 4πR /3. Put the given value of radius in the formula.\n• Step 3: So, the volume of sphere is calculated as, (4/3) × 3.14 × (3)\n\nSample Problems on How to Find the Volume of a Sphere\n\nProblem 1: Calculate the volume of a sphere of radius of 5 m.\n\nProblem 2: Calculate the volume of a sphere of radius 8 m.\n\nProblem 3: Calculate the volume of a sphere of radius 12 m.\n\nProblem 4: Calculate the volume of a sphere of radius 23 m.\n\nProblem 5: Calculate the radius of a sphere if its volume is 300 m3.\n\nProblem 6: Calculate the radius of a sphere if its volume is 670 m3.\n\nProblem 7: Calculate the diameter of a sphere if its volume is 1020 m3."
    },
    {
        "link": "https://discuss.python.org/t/please-help-me-find-this-volume-of-sphere-in-python/31155",
        "document": "You are given a positive integer r denoting the radius of a sphere as a parameter. Write a program to calculate the volume of the sphere. The volume of a sphere having radius R is given by (4 * π * R3) / 3. NOTE: Return the volume of the sphere up to two decimal places. You can use round(). NOTE2: Use pi as 22/7 (not math.pi). The first line indicates the number of the test cases. For each testcase there will be one line of input: The one line contains r in integer format. The volume of the sphere in float format is printed for each testcase in a new line.\n\nI am really sorry back there is a mistake but I would like to inform you start I have just copy pasted the question which is given on the scaler website on which I’m taking the course also I really appreciate that you actually tried helping me but but could you please provide me the answer put question if you have understood it.\n\nAll the elements that you need are right there and Matthew has even corrected it for you. Maybe it’s a case of ‘the first line of code is the hardest’, so here’s a start, but the best way to learn, is to try, make mistakes, learn from them and try again. Now, all you need is and a call to the function. Don’t worry too much about the rounding for now; we can get to that.\n\nWell, the question is more a math question than a Python one, so a quick internet search will result in pages of hits. But you don’t need to do that, because as I’ve said, you already have all the element that you need. Without the rounding, you should be able to have a simple script (no more than four line of code, of which I’ve given you two) that will display , given that the radius ‘r’ is equal to 8.\n\ncould you please provide me the answer put question if you have understood it. No. We’re not here to do your homework for you. People have attempted to help you to understand the question, but ultimately, this is for you to solve, not us.\n\nIs there any technique which I can learn to understand the questions first What exactly don’t you understand about the question? Do you know what a sphere is?\n\n Do you know what “volume” means?\n\n Do you know what “radius” means?\n\n Do you understand how to find the volume of a sphere, if you know its radius?\n\nI wrote the answer but I thought it was best to delete it. What rob42 said was best. They gave you what v is, just have to plug 22/7 for pi. Make r into an input function which I am assuming you can do then use the print function and round volume by how many decimals the question tells you to. Hope this helps"
    },
    {
        "link": "https://stackoverflow.com/questions/58357064/calculate-the-output-of-volume-and-surface-area-of-a-sphere",
        "document": "The volume and surface area of a sphere can be calculated with the following formulas. Create this as a terminal application. Write one function for volume and another function for surface area. The results should display both the volume and the surface area rounded to 2 decimal places. Use pi from Python’s math module. Include the following doctests. You must get pass all tests to receive full credit. Pay close attention to how you name your functions. They must match"
    }
]