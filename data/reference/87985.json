[
    {
        "link": "https://psutil.readthedocs.io",
        "document": "Return system CPU times as a named tuple. Every attribute represents the seconds the CPU has spent in the given mode. The attributes availability varies depending on the platform:\n• None user: time spent by normal processes executing in user mode; on Linux this also includes guest time\n• None nice (UNIX): time spent by niced (prioritized) processes executing in user mode; on Linux this also includes guest_nice time\n• None iowait (Linux): time spent waiting for I/O to complete. This is not accounted in idle time counter.\n• None steal (Linux 2.6.11+): time spent by other operating systems running in a virtualized environment\n• None guest (Linux 2.6.24+): time spent running a virtual CPU for guest operating systems under the control of the Linux kernel\n• None guest_nice (Linux 3.2.0+): time spent running a niced guest (virtual CPU for guest operating systems under the control of the Linux kernel)\n• None interrupt (Windows): time spent for servicing hardware interrupts ( similar to “irq” on UNIX)\n• None dpc (Windows): time spent servicing deferred procedure calls (DPCs); DPCs are interrupts that run at a lower priority than standard interrupts. When percpu is return a list of named tuples for each logical CPU on the system. First element of the list refers to first CPU, second element to second CPU and so on. The order of the list is consistent across calls. Example output on Linux: Changed in version 4.1.0: added interrupt and dpc fields on Windows. CPU times are always supposed to increase over time, or at least remain the same, and that’s because time cannot go backwards. Surprisingly sometimes this might not be the case (at least on Windows and Linux), see #1210. Return a float representing the current system-wide CPU utilization as a percentage. When interval is > compares system CPU times elapsed before and after the interval (blocking). When interval is or compares system CPU times elapsed since last call or module import, returning immediately. That means the first time this is called it will return a meaningless value which you are supposed to ignore. In this case it is recommended for accuracy that this function be called with at least seconds between calls. When percpu is returns a list of floats representing the utilization as a percentage for each CPU. First element of the list refers to first CPU, second element to second CPU and so on. The order of the list is consistent across calls. Internally this function maintains a global map (a dict) where each key is the ID of the calling thread (threading.get_ident). This means it can be called from different threads, at different intervals, and still return meaningful and independent results. the first time this function is called with interval = or it will return a meaningless value which you are supposed to ignore. Changed in version 5.9.6: function is now thread safe. Same as but provides utilization percentages for each specific CPU time as is returned by . interval and percpu arguments have the same meaning as in . On Linux “guest” and “guest_nice” percentages are not accounted in “user” and “user_nice” percentages. the first time this function is called with interval = or it will return a meaningless value which you are supposed to ignore. Changed in version 4.1.0: two new interrupt and dpc fields are returned on Windows. Changed in version 5.9.6: function is now thread safe. Return the number of logical CPUs in the system (same as os.cpu_count) or if undetermined. “logical CPUs” means the number of physical cores multiplied by the number of threads that can run on each core (this is known as Hyper Threading). If logical is return the number of physical cores only, or if undetermined. On OpenBSD and NetBSD always return . Example on a system having 2 cores + Hyper Threading: Note that may not necessarily be equivalent to the actual number of CPUs the current process can use. That can vary in case process CPU affinity has been changed, Linux cgroups are being used or (in case of Windows) on systems using processor groups or having more than 64 CPUs. The number of usable CPUs can be obtained with:\n• None soft_interrupts: number of software interrupts since boot. Always set to on Windows and SunOS.\n• None syscalls: number of system calls since boot. Always set to on Linux. Return CPU frequency as a named tuple including current, min and max frequencies expressed in Mhz. On Linux current frequency reports the real-time value, on all other platforms this usually represents the nominal “fixed” value (never changing). If percpu is and the system supports per-cpu frequency retrieval (Linux and FreeBSD), a list of frequencies is returned for each CPU, if not, a list with a single element is returned. If min and max cannot be determined they are set to . Availability: Linux, macOS, Windows, FreeBSD, OpenBSD. percpu only supported on Linux and FreeBSD. Return the average system load over the last 1, 5 and 15 minutes as a tuple. The “load” represents the processes which are in a runnable state, either using the CPU or waiting to use the CPU (e.g. waiting for disk I/O). On UNIX systems this relies on os.getloadavg. On Windows this is emulated by using a Windows API that spawns a thread which keeps running in background and updates results every 5 seconds, mimicking the UNIX behavior. Thus, on Windows, the first time this is called and for the next 5 seconds it will return a meaningless tuple. The numbers returned only make sense if related to the number of CPU cores installed on the system. So, for instance, a value of on a system with 10 logical CPUs means that the system load was 31.4% percent over the last N minutes. Return statistics about system memory usage as a named tuple including the following fields, expressed in bytes.\n• None available: the memory that can be given instantly to processes without the system going into swap. This is calculated by summing different memory metrics that vary depending on the platform. It is supposed to be used to monitor actual memory usage in a cross platform fashion.\n• None used: memory used, calculated differently depending on the platform and designed for informational purposes only. total - free does not necessarily match used.\n• None free: memory not being used at all (zeroed) that is readily available; note that this doesn’t reflect the actual memory available (use available instead). total - used does not necessarily match free.\n• None active (UNIX): memory currently in use or very recently used, and so it is in RAM.\n• None inactive (UNIX): memory that is marked as not used.\n• None shared (Linux, BSD): memory that may be simultaneously accessed by multiple processes.\n• None wired (BSD, macOS): memory that is marked to always stay in RAM. It is never moved to disk. The sum of used and available does not necessarily equal total. On Windows available and free are the same. See meminfo.py script providing an example on how to convert bytes in a human readable form. if you just want to know how much physical memory is left in a cross platform fashion simply rely on available and percent fields. Return system swap memory statistics as a named tuple including the following fields:\n• None used: used swap memory in bytes\n• None sin: the number of bytes the system has swapped in from disk (cumulative)\n• None sout: the number of bytes the system has swapped out from disk (cumulative) sin and sout on Windows are always set to . See meminfo.py script providing an example on how to convert bytes in a human readable form. Changed in version 5.2.3: on Linux this function relies on /proc fs instead of sysinfo() syscall so that it can be used in conjunction with in order to retrieve memory info about Linux containers such as Docker and Heroku. Return all mounted disk partitions as a list of named tuples including device, mount point and filesystem type, similarly to “df” command on UNIX. If all parameter is it tries to distinguish and return physical devices only (e.g. hard disks, cd-rom drives, USB keys) and ignore all others (e.g. pseudo, memory, duplicate, inaccessible filesystems). Note that this may not be fully reliable on all systems (e.g. on BSD this parameter is ignored). See disk_usage.py script providing an example usage. Returns a list of named tuples with the following fields:\n• None device: the device path (e.g. ). On Windows this is the drive letter (e.g. ).\n• None mountpoint: the mount point path (e.g. ). On Windows this is the drive letter (e.g. ).\n• None fstype: the partition filesystem (e.g. on UNIX or on Windows).\n• None opts: a comma-separated string indicating different mount options for the drive/partition. Platform-dependent. Return disk usage statistics about the partition which contains the given path as a named tuple including total, used and free space expressed in bytes, plus the percentage usage. is raised if path does not exist. Starting from Python 3.3 this is also available as shutil.disk_usage (see BPO-12442). See disk_usage.py script providing an example usage. UNIX usually reserves 5% of the total disk space for the root user. total and used fields on UNIX refer to the overall total and used space, whereas free represents the space available for the user and percent represents the user utilization (see source code). That is why percent value may look 5% bigger than what you would expect it to be. Also note that both 4 values match “df” cmdline utility. Changed in version 4.3.0: percent value takes root reserved space into account. Return system-wide disk I/O statistics as a named tuple including the following fields:\n• None read_time: (all except NetBSD and OpenBSD) time spent reading from disk (in milliseconds)\n• None write_time: (all except NetBSD and OpenBSD) time spent writing to disk (in milliseconds) If perdisk is return the same information for every physical disk installed on the system as a dictionary with partition names as the keys and the named tuple described above as the values. See iotop.py for an example application. On some systems such as Linux, on a very busy or long-lived system, the numbers returned by the kernel may overflow and wrap (restart from zero). If nowrap is psutil will detect and adjust those numbers across function calls and add “old value” to “new value” so that the returned numbers will always be increasing or remain the same, but never decrease. can be used to invalidate the nowrap cache. On Windows it may be necessary to issue command from cmd.exe first in order to enable IO counters. On diskless machines this function will return or if perdisk is . on Windows command may need to be executed first otherwise this function won’t find any disk. Changed in version 5.3.0: numbers no longer wrap (restart from zero) across calls thanks to new nowrap argument. Changed in version 4.0.0: NetBSD no longer has read_time and write_time fields. Return system-wide network I/O statistics as a named tuple including the following attributes:\n• None dropin: total number of incoming packets which were dropped\n• None dropout: total number of outgoing packets which were dropped (always 0 on macOS and BSD) If pernic is return the same information for every network interface installed on the system as a dictionary with network interface names as the keys and the named tuple described above as the values. On some systems such as Linux, on a very busy or long-lived system, the numbers returned by the kernel may overflow and wrap (restart from zero). If nowrap is psutil will detect and adjust those numbers across function calls and add “old value” to “new value” so that the returned numbers will always be increasing or remain the same, but never decrease. can be used to invalidate the nowrap cache. On machines with no network interfaces this function will return or if pernic is . Also see nettop.py and ifconfig.py for an example application. Changed in version 5.3.0: numbers no longer wrap (restart from zero) across calls thanks to new nowrap argument. Return system-wide socket connections as a list of named tuples. Every named tuple provides 7 attributes:\n• None fd: the socket file descriptor. If the connection refers to the current process this may be passed to socket.fromfd to obtain a usable socket object. On Windows and SunOS this is always set to .\n• None family: the address family, either AF_INET, AF_INET6 or AF_UNIX.\n• None type: the address type, either SOCK_STREAM, SOCK_DGRAM or SOCK_SEQPACKET.\n• None laddr: the local address as a named tuple or a in case of AF_UNIX sockets. For UNIX sockets see notes below.\n• None raddr: the remote address as a named tuple or an absolute in case of UNIX sockets. When the remote endpoint is not connected you’ll get an empty tuple (AF_INET*) or (AF_UNIX). For UNIX sockets see notes below.\n• None status: represents the status of a TCP connection. The return value is one of the psutil.CONN_* constants (a string). For UDP and UNIX sockets this is always going to be .\n• None pid: the PID of the process which opened the socket, if retrievable, else . On some platforms (e.g. Linux) the availability of this field changes depending on process privileges (root is needed). The kind parameter is a string which filters for connections matching the following criteria: the sum of all the possible families and protocols On macOS and AIX this function requires root privileges. To get per-process connections use . Also, see netstat.py example script. Example: (macOS and AIX) is always raised unless running as root. This is a limitation of the OS and does the same. (Linux, FreeBSD, OpenBSD) raddr field for UNIX sockets is always set to (empty string). This is a limitation of the OS. Changed in version 5.3.0: : socket “fd” is now set for real instead of being . Changed in version 5.3.0: : laddr and raddr are named tuples. Changed in version 5.9.5: : OpenBSD: retrieve laddr path for AF_UNIX sockets (before it was an empty string). Return the addresses associated to each NIC (network interface card) installed on the system as a dictionary whose keys are the NIC names and value is a list of named tuples for each address assigned to the NIC. Each named tuple includes 5 fields:\n• None family: the address family, either AF_INET or AF_INET6 or , which refers to a MAC address.\n• None netmask: the netmask address (may be ).\n• None broadcast: the broadcast address (may be ).\n• None ptp: stands for “point to point”; it’s the destination address on a point to point interface (typically a VPN). broadcast and ptp are mutually exclusive. May be . See also nettop.py and ifconfig.py for an example application. if you’re interested in others families (e.g. AF_BLUETOOTH) you can use the more powerful netifaces extension. you can have more than one address of the same family associated with each interface (that’s why dict values are lists). broadcast and ptp are not supported on Windows and are always . Changed in version 4.4.0: added support for netmask field on Windows which is no longer . Changed in version 7.0.0: added support for broadcast field on Windows which is no longer . Return information about each NIC (network interface card) installed on the system as a dictionary whose keys are the NIC names and value is a named tuple with the following fields:\n• None isup: a bool indicating whether the NIC is up and running (meaning ethernet cable or Wi-Fi is connected).\n• None duplex: the duplex communication type; it can be either , or .\n• None speed: the NIC speed expressed in mega bits (MB), if it can’t be determined (e.g. ‘localhost’) it will be set to .\n• None flags: a string of comma-separated flags on the interface (may be an empty string). Possible flags are: , , , , , , , , , , , , , , , , , , , , and (some flags are only available on certain platforms). Also see nettop.py and ifconfig.py for an example application. Changed in version 5.7.3: on UNIX also checks whether the NIC is running. Changed in version 5.9.3: flags field was added on POSIX. Return hardware temperatures. Each entry is a named tuple representing a certain hardware temperature sensor (it may be a CPU, an hard disk or something else, depending on the OS and its configuration). All temperatures are expressed in celsius unless fahrenheit is set to . If sensors are not supported by the OS an empty dict is returned. Example: See also temperatures.py and sensors.py for an example application. Return hardware fans speed. Each entry is a named tuple representing a certain hardware sensor fan. Fan speed is expressed in RPM (revolutions per minute). If sensors are not supported by the OS an empty dict is returned. Example: See also fans.py and sensors.py for an example application. Return battery status information as a named tuple including the following values. If no battery is installed or metrics can’t be determined is returned.\n• None secsleft: a rough approximation of how many seconds are left before the battery runs out of power. If the AC power cable is connected this is set to . If it can’t be determined it is set to .\n• None power_plugged: if the AC power cable is connected, if not or if it can’t be determined. See also battery.py and sensors.py for an example application. Return the system boot time expressed in seconds since the epoch. Example: on Windows this function may return a time which is off by 1 second if it’s used across different processes (see issue #1007). Return users currently connected on the system as a list of named tuples including the following fields:\n• None name: the name of the user.\n• None terminal: the tty or pseudo-tty associated with the user, if any, else .\n• None host: the host name associated with the entry, if any.\n• None started: the creation time as a floating point number expressed in seconds since the epoch.\n• None pid: the PID of the login process (like sshd, tmux, gdm-session-worker, …). On Windows and OpenBSD this is always set to .\n\nconstants which define what platform you’re on. E.g. if on Windows, constant will be , all others will be . deprecated in version 5.4.7; use instead. The path of the /proc filesystem on Linux, Solaris and AIX (defaults to ). You may want to re-set this constant right after importing psutil in case your /proc filesystem is mounted elsewhere or if you want to retrieve information about Linux containers such as Docker, Heroku or LXC (see here for more info). It must be noted that this trick works only for APIs which rely on /proc filesystem (e.g. memory APIs and most class methods). Changed in version 3.4.2: also available on Solaris. Changed in version 5.4.0: also available on AIX. Represent the priority of a process on Windows (see SetPriorityClass). They can be used in conjunction with to get or set process priority. A set of integers representing the I/O priority of a process on Linux. They can be used in conjunction with to get or set process I/O priority. IOPRIO_CLASS_NONE and IOPRIO_CLASS_BE (best effort) is the default for any process that hasn’t set a specific I/O priority. IOPRIO_CLASS_RT (real time) means the process is given first access to the disk, regardless of what else is going on in the system. IOPRIO_CLASS_IDLE means the process will get I/O time when no-one else needs the disk. For further information refer to manuals of ionice command line utility or ioprio_get system call. A set of integers representing the I/O priority of a process on Windows. They can be used in conjunction with to get or set process I/O priority. Constants used for getting and setting process resource limits to be used in conjunction with . See resource.getrlimit for further information. A set of strings representing the status of a TCP connection. Returned by and ( field). Constant which identifies a MAC address associated with a network interface. To be used in conjunction with . Constants which identifies whether a NIC (network interface card) has full or half mode speed. NIC_DUPLEX_FULL means the NIC is able to send and receive data (files) simultaneously, NIC_DUPLEX_FULL means the NIC can either send or receive data at a time. To be used in conjunction with . Whether the remaining time of the battery cannot be determined or is unlimited. May be assigned to ’s secsleft field."
    },
    {
        "link": "https://pypi.org/project/psutil",
        "document": "A required part of this site couldn’t load. This may be due to a browser extension, network issues, or browser settings. Please check your connection, disable any ad blockers, or try using a different browser."
    },
    {
        "link": "https://github.com/giampaolo/psutil",
        "document": "psutil (process and system utilities) is a cross-platform library for retrieving information on running processes and system utilization (CPU, memory, disks, network, sensors) in Python. It is useful mainly for system monitoring, profiling and limiting process resources and management of running processes. It implements many functionalities offered by classic UNIX command line tools such as ps, top, iotop, lsof, netstat, ifconfig, free and others. psutil currently supports the following platforms:\n\nSupported Python versions are cPython 3.6+ and PyPy. Latest psutil version supporting Python 2.7 is psutil 6.1.1.\n\nWhile psutil is free software and will always be, the project would benefit immensely from some funding. Keeping up with bug reports and maintenance has become hardly sustainable for me alone in terms of time. If you're a company that's making significant use of psutil you can consider becoming a sponsor via GitHub Sponsors, Open Collective or PayPal and have your logo displayed in here and psutil doc.\n\nThis represents pretty much the whole psutil API.\n\n( . ()) [ ( , ) , ( , ) , ( , ) , ( , ) , ...] . ( ) . () { : , : 'Provides support for 3rd party protocol plug-ins for Internet Connection Sharing' , : , : , : , : , : , : }"
    },
    {
        "link": "https://lira.no-ip.org:8443/doc/python-psutil-doc/html",
        "document": "Return system CPU times as a named tuple. Every attribute represents the seconds the CPU has spent in the given mode. The attributes availability varies depending on the platform:\n• None user: time spent by normal processes executing in user mode; on Linux this also includes guest time\n• None nice (UNIX): time spent by niced (prioritized) processes executing in user mode; on Linux this also includes guest_nice time\n• None iowait (Linux): time spent waiting for I/O to complete. This is not accounted in idle time counter.\n• None steal (Linux 2.6.11+): time spent by other operating systems running in a virtualized environment\n• None guest (Linux 2.6.24+): time spent running a virtual CPU for guest operating systems under the control of the Linux kernel\n• None guest_nice (Linux 3.2.0+): time spent running a niced guest (virtual CPU for guest operating systems under the control of the Linux kernel)\n• None interrupt (Windows): time spent for servicing hardware interrupts ( similar to \"irq\" on UNIX)\n• None dpc (Windows): time spent servicing deferred procedure calls (DPCs); DPCs are interrupts that run at a lower priority than standard interrupts. When percpu is return a list of named tuples for each logical CPU on the system. First element of the list refers to first CPU, second element to second CPU and so on. The order of the list is consistent across calls. Example output on Linux: Changed in version 4.1.0: added interrupt and dpc fields on Windows. CPU times are always supposed to increase over time, or at least remain the same, and that's because time cannot go backwards. Surprisingly sometimes this might not be the case (at least on Windows and Linux), see #1210. Return a float representing the current system-wide CPU utilization as a percentage. When interval is > compares system CPU times elapsed before and after the interval (blocking). When interval is or compares system CPU times elapsed since last call or module import, returning immediately. That means the first time this is called it will return a meaningless value which you are supposed to ignore. In this case it is recommended for accuracy that this function be called with at least seconds between calls. When percpu is returns a list of floats representing the utilization as a percentage for each CPU. First element of the list refers to first CPU, second element to second CPU and so on. The order of the list is consistent across calls. the first time this function is called with interval = or it will return a meaningless value which you are supposed to ignore. Same as but provides utilization percentages for each specific CPU time as is returned by . interval and percpu arguments have the same meaning as in . On Linux \"guest\" and \"guest_nice\" percentages are not accounted in \"user\" and \"user_nice\" percentages. the first time this function is called with interval = or it will return a meaningless value which you are supposed to ignore. Changed in version 4.1.0: two new interrupt and dpc fields are returned on Windows. Return the number of logical CPUs in the system (same as os.cpu_count in Python 3.4) or if undetermined. \"logical CPUs\" means the number of physical cores multiplied by the number of threads that can run on each core (this is known as Hyper Threading). If logical is return the number of physical cores only, or if undetermined. On OpenBSD and NetBSD always return . Example on a system having 2 cores + Hyper Threading: Note that may not necessarily be equivalent to the actual number of CPUs the current process can use. That can vary in case process CPU affinity has been changed, Linux cgroups are being used or (in case of Windows) on systems using processor groups or having more than 64 CPUs. The number of usable CPUs can be obtained with:\n• None soft_interrupts: number of software interrupts since boot. Always set to on Windows and SunOS.\n• None syscalls: number of system calls since boot. Always set to on Linux. Return CPU frequency as a named tuple including current, min and max frequencies expressed in Mhz. On Linux current frequency reports the real-time value, on all other platforms this usually represents the nominal \"fixed\" value (never changing). If percpu is and the system supports per-cpu frequency retrieval (Linux only) a list of frequencies is returned for each CPU, if not, a list with a single element is returned. If min and max cannot be determined they are set to . Return the average system load over the last 1, 5 and 15 minutes as a tuple. The \"load\" represents the processes which are in a runnable state, either using the CPU or waiting to use the CPU (e.g. waiting for disk I/O). On UNIX systems this relies on os.getloadavg. On Windows this is emulated by using a Windows API that spawns a thread which keeps running in background and updates results every 5 seconds, mimicking the UNIX behavior. Thus, on Windows, the first time this is called and for the next 5 seconds it will return a meaningless tuple. The numbers returned only make sense if related to the number of CPU cores installed on the system. So, for instance, a value of on a system with 10 logical CPUs means that the system load was 31.4% percent over the last N minutes. Return statistics about system memory usage as a named tuple including the following fields, expressed in bytes. Main metrics:\n• None available: the memory that can be given instantly to processes without the system going into swap. This is calculated by summing different memory values depending on the platform and it is supposed to be used to monitor actual memory usage in a cross platform fashion.\n• None used: memory used, calculated differently depending on the platform and designed for informational purposes only. total - free does not necessarily match used.\n• None free: memory not being used at all (zeroed) that is readily available; note that this doesn't reflect the actual memory available (use available instead). total - used does not necessarily match free.\n• None active (UNIX): memory currently in use or very recently used, and so it is in RAM.\n• None inactive (UNIX): memory that is marked as not used.\n• None shared (Linux, BSD): memory that may be simultaneously accessed by multiple processes.\n• None wired (BSD, macOS): memory that is marked to always stay in RAM. It is never moved to disk. The sum of used and available does not necessarily equal total. On Windows available and free are the same. See meminfo.py script providing an example on how to convert bytes in a human readable form. if you just want to know how much physical memory is left in a cross platform fashion simply rely on the available field. Return system swap memory statistics as a named tuple including the following fields:\n• None used: used swap memory in bytes\n• None sin: the number of bytes the system has swapped in from disk (cumulative)\n• None sout: the number of bytes the system has swapped out from disk (cumulative) sin and sout on Windows are always set to . See meminfo.py script providing an example on how to convert bytes in a human readable form. Changed in version 5.2.3: on Linux this function relies on /proc fs instead of sysinfo() syscall so that it can be used in conjunction with in order to retrieve memory info about Linux containers such as Docker and Heroku. Return all mounted disk partitions as a list of named tuples including device, mount point and filesystem type, similarly to \"df\" command on UNIX. If all parameter is it tries to distinguish and return physical devices only (e.g. hard disks, cd-rom drives, USB keys) and ignore all others (e.g. pseudo, memory, duplicate, inaccessible filesystems). Note that this may not be fully reliable on all systems (e.g. on BSD this parameter is ignored). See disk_usage.py script providing an example usage. Returns a list of named tuples with the following fields:\n• None device: the device path (e.g. ). On Windows this is the drive letter (e.g. ).\n• None mountpoint: the mount point path (e.g. ). On Windows this is the drive letter (e.g. ).\n• None fstype: the partition filesystem (e.g. on UNIX or on Windows).\n• None opts: a comma-separated string indicating different mount options for the drive/partition. Platform-dependent.\n• None maxfile: the maximum length a file name can have.\n• None maxpath: the maximum length a path name (directory name + base file name) can have. Return disk usage statistics about the partition which contains the given path as a named tuple including total, used and free space expressed in bytes, plus the percentage usage. is raised if path does not exist. Starting from Python 3.3 this is also available as shutil.disk_usage (see BPO-12442). See disk_usage.py script providing an example usage. UNIX usually reserves 5% of the total disk space for the root user. total and used fields on UNIX refer to the overall total and used space, whereas free represents the space available for the user and percent represents the user utilization (see source code). That is why percent value may look 5% bigger than what you would expect it to be. Also note that both 4 values match \"df\" cmdline utility. Changed in version 4.3.0: percent value takes root reserved space into account. Return system-wide disk I/O statistics as a named tuple including the following fields:\n• None read_time: (all except NetBSD and OpenBSD) time spent reading from disk (in milliseconds)\n• None write_time: (all except NetBSD and OpenBSD) time spent writing to disk (in milliseconds) If perdisk is return the same information for every physical disk installed on the system as a dictionary with partition names as the keys and the named tuple described above as the values. See iotop.py for an example application. On some systems such as Linux, on a very busy or long-lived system, the numbers returned by the kernel may overflow and wrap (restart from zero). If nowrap is psutil will detect and adjust those numbers across function calls and add \"old value\" to \"new value\" so that the returned numbers will always be increasing or remain the same, but never decrease. can be used to invalidate the nowrap cache. On Windows it may be ncessary to issue command from cmd.exe first in order to enable IO counters. On diskless machines this function will return or if perdisk is . on Windows command may need to be executed first otherwise this function won't find any disk. Changed in version 5.3.0: numbers no longer wrap (restart from zero) across calls thanks to new nowrap argument. Changed in version 4.0.0: NetBSD no longer has read_time and write_time fields. Return system-wide network I/O statistics as a named tuple including the following attributes:\n• None dropin: total number of incoming packets which were dropped\n• None dropout: total number of outgoing packets which were dropped (always 0 on macOS and BSD) If pernic is return the same information for every network interface installed on the system as a dictionary with network interface names as the keys and the named tuple described above as the values. On some systems such as Linux, on a very busy or long-lived system, the numbers returned by the kernel may overflow and wrap (restart from zero). If nowrap is psutil will detect and adjust those numbers across function calls and add \"old value\" to \"new value\" so that the returned numbers will always be increasing or remain the same, but never decrease. can be used to invalidate the nowrap cache. On machines with no network interfaces this function will return or if pernic is . Also see nettop.py and ifconfig.py for an example application. Changed in version 5.3.0: numbers no longer wrap (restart from zero) across calls thanks to new nowrap argument. Return system-wide socket connections as a list of named tuples. Every named tuple provides 7 attributes:\n• None fd: the socket file descriptor. If the connection refers to the current process this may be passed to socket.fromfd to obtain a usable socket object. On Windows and SunOS this is always set to .\n• None family: the address family, either AF_INET, AF_INET6 or AF_UNIX.\n• None type: the address type, either SOCK_STREAM, SOCK_DGRAM or SOCK_SEQPACKET.\n• None laddr: the local address as a named tuple or a in case of AF_UNIX sockets. For UNIX sockets see notes below.\n• None raddr: the remote address as a named tuple or an absolute in case of UNIX sockets. When the remote endpoint is not connected you'll get an empty tuple (AF_INET*) or (AF_UNIX). For UNIX sockets see notes below.\n• None status: represents the status of a TCP connection. The return value is one of the psutil.CONN_* constants (a string). For UDP and UNIX sockets this is always going to be .\n• None pid: the PID of the process which opened the socket, if retrievable, else . On some platforms (e.g. Linux) the availability of this field changes depending on process privileges (root is needed). The kind parameter is a string which filters for connections matching the following criteria: the sum of all the possible families and protocols On macOS and AIX this function requires root privileges. To get per-process connections use . Also, see netstat.py example script. Example: (macOS and AIX) is always raised unless running as root. This is a limitation of the OS and does the same. (Linux, FreeBSD) \"raddr\" field for UNIX sockets is always set to \"\". This is a limitation of the OS. (OpenBSD) \"laddr\" and \"raddr\" fields for UNIX sockets are always set to \"\". This is a limitation of the OS. Changed in version 5.3.0: : socket \"fd\" is now set for real instead of being . Changed in version 5.3.0: : \"laddr\" and \"raddr\" are named tuples. Return the addresses associated to each NIC (network interface card) installed on the system as a dictionary whose keys are the NIC names and value is a list of named tuples for each address assigned to the NIC. Each named tuple includes 5 fields:\n• None family: the address family, either AF_INET or AF_INET6 or , which refers to a MAC address.\n• None netmask: the netmask address (may be ).\n• None broadcast: the broadcast address (may be ).\n• None ptp: stands for \"point to point\"; it's the destination address on a point to point interface (typically a VPN). broadcast and ptp are mutually exclusive. May be . See also nettop.py and ifconfig.py for an example application. if you're interested in others families (e.g. AF_BLUETOOTH) you can use the more powerful netifaces extension. you can have more than one address of the same family associated with each interface (that's why dict values are lists). broadcast and ptp are not supported on Windows and are always . Changed in version 4.4.0: added support for netmask field on Windows which is no longer . Return information about each NIC (network interface card) installed on the system as a dictionary whose keys are the NIC names and value is a named tuple with the following fields:\n• None isup: a bool indicating whether the NIC is up and running (meaning ethernet cable or Wi-Fi is connected).\n• None duplex: the duplex communication type; it can be either , or .\n• None speed: the NIC speed expressed in mega bits (MB), if it can't be determined (e.g. 'localhost') it will be set to .\n• None flags: a string of comma-separated flags on the interface (may be an empty string). Possible flags are: , , , , , , , , , , , , , , , , , , , , and (some flags are only available on certain platforms). Also see nettop.py and ifconfig.py for an example application. Changed in version 5.7.3: on UNIX also checks whether the NIC is running. Changed in version 5.9.3: flags field was added on POSIX. Return hardware temperatures. Each entry is a named tuple representing a certain hardware temperature sensor (it may be a CPU, an hard disk or something else, depending on the OS and its configuration). All temperatures are expressed in celsius unless fahrenheit is set to . If sensors are not supported by the OS an empty dict is returned. Example: See also temperatures.py and sensors.py for an example application. Return hardware fans speed. Each entry is a named tuple representing a certain hardware sensor fan. Fan speed is expressed in RPM (revolutions per minute). If sensors are not supported by the OS an empty dict is returned. Example: See also fans.py and sensors.py for an example application. Return battery status information as a named tuple including the following values. If no battery is installed or metrics can't be determined is returned.\n• None secsleft: a rough approximation of how many seconds are left before the battery runs out of power. If the AC power cable is connected this is set to . If it can't be determined it is set to .\n• None power_plugged: if the AC power cable is connected, if not or if it can't be determined. See also battery.py and sensors.py for an example application. Return the system boot time expressed in seconds since the epoch. Example: on Windows this function may return a time which is off by 1 second if it's used across different processes (see issue #1007). Return users currently connected on the system as a list of named tuples including the following fields:\n• None name: the name of the user.\n• None terminal: the tty or pseudo-tty associated with the user, if any, else .\n• None host: the host name associated with the entry, if any.\n• None started: the creation time as a floating point number expressed in seconds since the epoch.\n• None pid: the PID of the login process (like sshd, tmux, gdm-session-worker, ...). On Windows and OpenBSD this is always set to .\n\nconstants which define what platform you're on. E.g. if on Windows, constant will be , all others will be . deprecated in version 5.4.7; use instead. The path of the /proc filesystem on Linux, Solaris and AIX (defaults to ). You may want to re-set this constant right after importing psutil in case your /proc filesystem is mounted elsewhere or if you want to retrieve information about Linux containers such as Docker, Heroku or LXC (see here for more info). It must be noted that this trick works only for APIs which rely on /proc filesystem (e.g. memory APIs and most class methods). Changed in version 3.4.2: also available on Solaris. Changed in version 5.4.0: also available on AIX. Represent the priority of a process on Windows (see SetPriorityClass). They can be used in conjunction with to get or set process priority. A set of integers representing the I/O priority of a process on Linux. They can be used in conjunction with to get or set process I/O priority. IOPRIO_CLASS_NONE and IOPRIO_CLASS_BE (best effort) is the default for any process that hasn't set a specific I/O priority. IOPRIO_CLASS_RT (real time) means the process is given first access to the disk, regardless of what else is going on in the system. IOPRIO_CLASS_IDLE means the process will get I/O time when no-one else needs the disk. For further information refer to manuals of ionice command line utility or ioprio_get system call. A set of integers representing the I/O priority of a process on Windows. They can be used in conjunction with to get or set process I/O priority. Constants used for getting and setting process resource limits to be used in conjunction with . See resource.getrlimit for further information. A set of strings representing the status of a TCP connection. Returned by and ( field). Constant which identifies a MAC address associated with a network interface. To be used in conjunction with . Constants which identifies whether a NIC (network interface card) has full or half mode speed. NIC_DUPLEX_FULL means the NIC is able to send and receive data (files) simultaneously, NIC_DUPLEX_FULL means the NIC can either send or receive data at a time. To be used in conjunction with . Whether the remaining time of the battery cannot be determined or is unlimited. May be assigned to 's secsleft field."
    },
    {
        "link": "https://github.com/giampaolo/psutil/blob/master/docs/index.rst",
        "document": "psutil (python system and process utilities) is a cross-platform library for retrieving information on running processes and system utilization (CPU, memory, disks, network, sensors) in Python. It is useful mainly for system monitoring, profiling, limiting process resources and the management of running processes. It implements many functionalities offered by UNIX command line tools such as: ps, top, lsof, netstat, ifconfig, who, df, kill, free, nice, ionice, iostat, iotop, uptime, pidof, tty, taskset, pmap. psutil currently supports the following platforms:\n\nSupported Python versions are 2.7 and 3.6+. PyPy is also known to work.\n\nThe psutil documentation you're reading is distributed as a single HTML page.\n\nWhile psutil is free software and will always be, the project would benefit immensely from some funding. Keeping up with bug reports and maintenance has become hardly sustainable for me alone in terms of time. If you're a company that's making significant use of psutil you can consider becoming a sponsor via GitHub, Open Collective or PayPal and have your logo displayed in here and psutil doc.\n\nFor other platforms see more detailed install instructions.\n\nBase exception class. All other exceptions inherit from this one.\n\nRaised by :class:`Process` class methods when no process with the given pid is found in the current process list, or when a process no longer exists. name is the name the process had before disappearing and gets set only if :meth:`Process.name()` was previously called.\n\nThis may be raised by :class:`Process` class methods when querying a zombie process on UNIX (Windows doesn't have zombie processes). name and ppid attributes are available if :meth:`Process.name()` or :meth:`Process.ppid()` methods were called before the process turned into a zombie.\n\nRaised by :class:`Process` class methods when permission to perform an action is denied due to insufficient privileges. name attribute is available if :meth:`Process.name()` was previously called.\n\nRaised by :meth:`Process.wait` method if timeout expires and the process is still alive. name attribute is available if :meth:`Process.name()` was previously called.\n\nRepresents an OS process with the given pid. If pid is omitted current process pid (os.getpid) is used. Raise :class:`NoSuchProcess` if pid does not exist. On Linux pid can also refer to a thread ID (the id field returned by :meth:`threads` method). When accessing methods of this class always be prepared to catch :class:`NoSuchProcess` and :class:`AccessDenied` exceptions. hash builtin can be used against instances of this class in order to identify a process univocally over time (the hash is determined by mixing process PID + creation time). As such it can also be used with set.\n\nSame as subprocess.Popen but in addition it provides all :class:`psutil.Process` methods in a single class. For the following methods which are common to both classes, psutil implementation takes precedence: :meth:`send_signal() <psutil.Process.send_signal()>`, :meth:`terminate() <psutil.Process.terminate()>`, :meth:`kill() <psutil.Process.kill()>`. This is done in order to avoid killing another process in case its PID has been reused, fixing BPO-6973.\n\nRepresents a Windows service with the given name. This class is returned by :func:`win_service_iter` and :func:`win_service_get` functions and it is not supposed to be instantiated directly.\n\nConstants used for getting and setting process resource limits to be used in conjunction with :meth:`psutil.Process.rlimit()`. See resource.getrlimit for further information.\n\nA bit more advanced, check string against :meth:`Process.name()`, :meth:`Process.exe()` and :meth:`Process.cmdline()`:\n\nA collection of code samples showing how to use :func:`process_iter()` to filter processes and sort them. Setup:\n\nProcesses consuming more than 500M of memory:\n\nTop 3 processes which consumed the most CPU time:\n• Q: Why do I get for certain processes?\n• A: This may happen when you query processes owned by another user, especially on macOS (see issue #883) and Windows. Unfortunately there's not much you can do about this except running the Python process with higher privileges. On Unix you may run the Python process as root or use the SUID bit ( and does this). On Windows you may run the Python process as NT AUTHORITY\\SYSTEM or install the Python script as a Windows service (ProcessHacker does this).\n• A: no, you should Visual Studio (see development guide).\n\nIf you want to debug unusual situations or want to report a bug, it may be useful to enable debug mode via environment variable. In this mode, psutil may (or may not) print additional information to stderr. Usually these are error conditions which are not severe, and hence are ignored (instead of crashing). Unit tests automatically run with debug mode enabled. On UNIX:\n\nLatest version spporting Python 2.7 is psutil 6.1.1. The 6.1.X serie may receive critical bug-fixes but no new features. It will be maintained in the dedicated python2 branch. To install it:\n\nTo report a security vulnerability, please use the Tidelift security contact. Tidelift will coordinate the fix and disclosure.\n\nIf you want to develop psutil take a look at the DEVGUIDE.rst.\n\nSupported Python versions at the time of writing are cPython 2.7, 3.6+ and PyPy3."
    },
    {
        "link": "https://tkdocs.com/tutorial/tree.html",
        "document": "A treeview widget displays a hierarchy of items and allows users to browse through it. One or more attributes of each item can be displayed as columns to the right of the tree. It can be used to build user interfaces similar to the tree display you'd find in file managers like the macOS Finder or Windows Explorer. As with most Tk widgets, it offers incredible flexibility so it can be customized to suit a wide range of situations.\n\nHorizontal and vertical scrollbars can be added in the usual manner if desired.\n\nTo do anything useful with the treeview, we'll need to add one or more items to it. Each item represents a single node in the tree, whether a leaf node or an internal node containing other nodes. Items are referred to by a unique id. You can assign this id when the item is first created, or the widget can automatically generate one.\n\nItems are created by inserting them into the tree, using the treeview's method. To insert an item, we need to know where to insert it. That means specifying the parent item and where within the list of the parent's existing children the new item should be inserted.\n\nThe treeview widget automatically creates a root node (which is not displayed). Its id is the empty string. It serves as the parent of the first level of items that are added. Positions within the list of a node's children are specified by index (0 being the first, and meaning insert after all existing children).\n\nNormally, you'll also specify the name of each item, which is the text displayed in the tree. Other options allow you to add an image beside the name, specify whether the node is open or closed, etc.\n\nA node (and its descendants, if any) can be moved to a different location in the tree. The only restriction is that a node cannot be moved underneath one of its descendants for obvious reasons. As before, the target location is specified via a parent node and a position within its list of children.\n\nItems can be detached from the tree. This removes the item and its descendants from the hierarchy but does not destroy the items. This allows us to later reinsert them with .\n\nItems can also be deleted, which does completely destroy the item and its descendants.\n\nTo traverse the hierarchy, there are methods to find the parent of an item ( ), its next or previous sibling ( and ), and return the list of children of an item ( ).\n\nWe can control whether or not the item is open and shows its children by modifying the item configuration option.\n\nThe treeview can display one or more additional pieces of information about each item. These are shown as columns to the right of the main tree display.\n\nEach column is referenced by a symbolic name that we assign. We can specify the list of columns using the configuration option of the treeview widget, either when first creating the widget or later on.\n\nWe can specify the width of the column, how the display of item information in the column is aligned, and more. We can also provide information about the column's heading, such as the text to display, an optional image, alignment, and a script to invoke when the item is clicked (e.g., to sort the tree).\n\nWhat to display in each column for each item can be specified individually by using the method. You can also provide a list describing what to display in all the columns for the item. This is done using the item configuration option. It takes a list of values and can be provided when first inserting the item or changed later. The order of the list must be the same as the order in the widget configuration option.\n\nLike the text and canvas widgets, the treeview widget uses tags to modify the appearance of items in the tree. We can assign a list of tags to each item using the item configuration option (again, when creating the item or later on).\n\nConfiguration options can then be specified on the tag, applied to all items having that tag. Valid tag options include (text color), , , and (not used if the item specifies its own image).\n\nWe can also create event bindings on tags to capture mouse clicks, keyboard events, etc.\n\nThe treeview will generate virtual events , , and , which allow us to monitor changes to the widget made by users. We can use the method to determine the current selection (the selection can also be changed from your program).\n\nThere are many aspects of how the treeview widget is displayed that we can customize. We've already seen some of them, such as the text of items, fonts and colors, names of column headings, and more. Here are a few additional ones.\n• Specify the desired number of rows to show using the widget configuration option.\n• Control the width of each column using the column's or options. The column holding the tree can be accessed with the symbolic name . The overall requested width for the widget is based on the sum of the column widths.\n• Choose which columns to display and the order to display them in using the widget configuration option.\n• You can optionally hide one or both of the column headings or the tree itself (leaving just the columns) using the widget configuration option (default is \"tree headings\" to show both).\n• You can specify whether a single item or multiple items can be selected by users via the widget configuration option, passing (single item), (multiple items, the default), or .\n\nSpotted a mistake? Couldn't find what you were looking for? Suggestions? Let me know!\n\nIf you've found this tutorial useful, please check out Modern Tkinter."
    },
    {
        "link": "https://docs.python.org/3/library/tkinter.ttk.html",
        "document": "The module provides access to the Tk themed widget set, introduced in Tk 8.5. It provides additional benefits including anti-aliased font rendering under X11 and window transparency (requiring a composition window manager on X11).\n\nThe basic idea for is to separate, to the extent possible, the code implementing a widget’s behavior from the code implementing its appearance.\n\ndefines standard options and methods supported by Tk themed widgets and is not supposed to be directly instantiated. All the Widgets accept the following options: Specifies the window class. The class is used when querying the option database for the window’s other options, to determine the default bindtags for the window, and to select the widget’s default layout and style. This option is read-only, and may only be specified when the window is created. Specifies the mouse cursor to be used for the widget. If set to the empty string (the default), the cursor is inherited for the parent widget. Determines whether the window accepts the focus during keyboard traversal. 0, 1 or an empty string is returned. If 0 is returned, it means that the window should be skipped entirely during keyboard traversal. If 1, it means that the window should receive the input focus as long as it is viewable. And an empty string means that the traversal scripts make the decision about whether or not to focus on the window. May be used to specify a custom widget style. The following options are supported by widgets that are controlled by a scrollbar. Used to communicate with horizontal scrollbars. When the view in the widget’s window change, the widget will generate a Tcl command based on the scrollcommand. Usually this option consists of the method of some scrollbar. This will cause the scrollbar to be updated whenever the view in the window changes. Used to communicate with vertical scrollbars. For some more information, see above. The following options are supported by labels, buttons and other button-like widgets. Specifies a text string to be displayed inside the widget. Specifies a name whose value will be used in place of the text option resource. If set, specifies the index (0-based) of a character to underline in the text string. The underline character is used for mnemonic activation. Specifies an image to display. This is a list of 1 or more elements. The first element is the default image name. The rest of the list if a sequence of statespec/value pairs as defined by , specifying different images to use when the widget is in a particular state or a combination of states. All images in the list should have the same size. Specifies how to display the image relative to the text, in the case both text and images options are present. Valid values are:\n• None top, bottom, left, right: display image above, below, left of, or right of the text, respectively.\n• None none: the default. display the image if present, otherwise the text. If greater than zero, specifies how much space, in character widths, to allocate for the text label, if less than zero, specifies a minimum width. If zero or unspecified, the natural width of the text label is used. May be set to “normal” or “disabled” to control the “disabled” state bit. This is a write-only option: setting it changes the widget state, but the method does not affect this option. The widget state is a bitmap of independent state flags. The mouse cursor is over the widget and pressing a mouse button will cause some action to occur “On”, “true”, or “current” for things like Checkbuttons and radiobuttons Windows and Mac have a notion of an “active” or foreground window. The background state is set for widgets in a background window, and cleared for those in the foreground window Widget should not allow user modification The widget’s value is invalid A state specification is a sequence of state names, optionally prefixed with an exclamation point indicating that the bit is off. Besides the methods described below, the supports the methods and . Returns the name of the element at position x y, or the empty string if the point does not lie within any element. x and y are pixel coordinates relative to the widget. Test the widget’s state. If a callback is not specified, returns if the widget state matches statespec and otherwise. If callback is specified then it is called with args if widget state matches statespec. Modify or inquire widget state. If statespec is specified, sets the widget state according to it and return a new statespec indicating which flags were changed. If statespec is not specified, returns the currently enabled state flags. statespec will usually be a list or a tuple.\n\nThe widget combines a text field with a pop-down list of values. This widget is a subclass of . Besides the methods inherited from : , , , and , and the following inherited from : , , , , , , , it has some other methods, described at . This widget accepts the following specific options: Boolean value. If set, the widget selection is linked to the Window Manager selection (which can be returned by invoking Misc.selection_get, for example). Specifies how the text is aligned within the widget. One of “left”, “center”, or “right”. Specifies the height of the pop-down listbox, in rows. A script (possibly registered with Misc.register) that is called immediately before displaying the values. It may specify which values to display. One of “normal”, “readonly”, or “disabled”. In the “readonly” state, the value may not be edited directly, and the user can only selection of the values from the dropdown list. In the “normal” state, the text field is directly editable. In the “disabled” state, no interaction is possible. Specifies a name whose value is linked to the widget value. Whenever the value associated with that name changes, the widget value is updated, and vice versa. See . Specifies the list of values to display in the drop-down listbox. Specifies an integer value indicating the desired width of the entry window, in average-size characters of the widget’s font. The combobox widgets generates a <<ComboboxSelected>> virtual event when the user selects an element from the list of values. If newindex is specified, sets the combobox value to the element position newindex. Otherwise, returns the index of the current value or -1 if the current value is not in the values list. Returns the current value of the combobox. Sets the value of the combobox to value.\n\nThe widget is a enhanced with increment and decrement arrows. It can be used for numbers or lists of string values. This widget is a subclass of . Besides the methods inherited from : , , , and , and the following inherited from : , , , , , , it has some other methods, described at . This widget accepts the following specific options: Float value. If set, this is the minimum value to which the decrement button will decrement. Must be spelled as when used as an argument, since is a Python keyword. Float value. If set, this is the maximum value to which the increment button will increment. Float value. Specifies the amount which the increment/decrement buttons change the value. Defaults to 1.0. Sequence of string or float values. If specified, the increment/decrement buttons will cycle through the items in this sequence rather than incrementing or decrementing numbers. Boolean value. If , increment and decrement buttons will cycle from the value to the value or the value to the value, respectively. String value. This specifies the format of numbers set by the increment/decrement buttons. It must be in the form “%W.Pf”, where W is the padded width of the value, P is the precision, and ‘%’ and ‘f’ are literal. Python callable. Will be called with no arguments whenever either of the increment or decrement buttons are pressed. The spinbox widget generates an <<Increment>> virtual event when the user presses <Up>, and a <<Decrement>> virtual event when the user presses <Down>. Returns the current value of the spinbox. Sets the value of the spinbox to value.\n\nTtk Notebook widget manages a collection of windows and displays a single one at a time. Each child window is associated with a tab, which the user may select to change the currently displayed window. This widget accepts the following specific options: If present and greater than zero, specifies the desired height of the pane area (not including internal padding or tabs). Otherwise, the maximum height of all panes is used. Specifies the amount of extra space to add around the outside of the notebook. The padding is a list up to four length specifications left top right bottom. If fewer than four elements are specified, bottom defaults to top, right defaults to left, and top defaults to left. If present and greater than zero, specified the desired width of the pane area (not including internal padding). Otherwise, the maximum width of all panes is used. There are also specific options for tabs: Either “normal”, “disabled” or “hidden”. If “disabled”, then the tab is not selectable. If “hidden”, then the tab is not shown. Specifies how the child window is positioned within the pane area. Value is a string containing zero or more of the characters “n”, “s”, “e” or “w”. Each letter refers to a side (north, south, east or west) that the child window will stick to, as per the geometry manager. Specifies the amount of extra space to add between the notebook and this pane. Syntax is the same as for the option padding used by this widget. Specifies a text to be displayed in the tab. Specifies an image to display in the tab. See the option image described in . Specifies how to display the image relative to the text, in the case both options text and image are present. See Label Options for legal values. Specifies the index (0-based) of a character to underline in the text string. The underlined character is used for mnemonic activation if is called. The tab_id present in several methods of may take any of the following forms:\n• None An integer between zero and the number of tabs\n• None The name of a child window\n• None A positional specification of the form “@x,y”, which identifies the tab\n• None The literal string “current”, which identifies the currently selected tab\n• None The literal string “end”, which returns the number of tabs (only valid for ) This widget generates a <<NotebookTabChanged>> virtual event after a new tab is selected. Adds a new tab to the notebook. If window is currently managed by the notebook but hidden, it is restored to its previous position. See Tab Options for the list of available options. Removes the tab specified by tab_id, unmaps and unmanages the associated window. Hides the tab specified by tab_id. The tab will not be displayed, but the associated window remains managed by the notebook and its configuration remembered. Hidden tabs may be restored with the command. Returns the name of the tab element at position x, y, or the empty string if none. Returns the numeric index of the tab specified by tab_id, or the total number of tabs if tab_id is the string “end”. Inserts a pane at the specified position. pos is either the string “end”, an integer index, or the name of a managed child. If child is already managed by the notebook, moves it to the specified position. See Tab Options for the list of available options. The associated child window will be displayed, and the previously selected window (if different) is unmapped. If tab_id is omitted, returns the widget name of the currently selected pane. Query or modify the options of the specific tab_id. If kw is not given, returns a dictionary of the tab option values. If option is specified, returns the value of that option. Otherwise, sets the options to the corresponding values. Returns a list of windows managed by the notebook. Enable keyboard traversal for a toplevel window containing this notebook. This will extend the bindings for the toplevel window containing the notebook as follows:\n• None - : selects the tab following the currently selected one.\n• None - - : selects the tab preceding the currently selected one.\n• None - : where K is the mnemonic (underlined) character of any tab, will select that tab. Multiple notebooks in a single toplevel may be enabled for traversal, including nested notebooks. However, notebook traversal only works properly if all panes have the notebook they are in as master.\n\nThe widget displays a hierarchical collection of items. Each item has a textual label, an optional image, and an optional list of data values. The data values are displayed in successive columns after the tree label. The order in which data values are displayed may be controlled by setting the widget option . The tree widget can also display column headings. Columns may be accessed by number or symbolic names listed in the widget option columns. See Column Identifiers. Each item is identified by a unique name. The widget will generate item IDs if they are not supplied by the caller. There is a distinguished root item, named . The root item itself is not displayed; its children appear at the top level of the hierarchy. Each item also has a list of tags, which can be used to associate event bindings with individual items and control the appearance of the item. The Treeview widget supports horizontal and vertical scrolling, according to the options described in Scrollable Widget Options and the methods and . This widget accepts the following specific options: A list of column identifiers, specifying the number of columns and their names. A list of column identifiers (either symbolic or integer indices) specifying which data columns are displayed and the order in which they appear, or the string “#all”. Specifies the number of rows which should be visible. Note: the requested width is determined from the sum of the column widths. Specifies the internal padding for the widget. The padding is a list of up to four length specifications. Controls how the built-in class bindings manage the selection. One of “extended”, “browse” or “none”. If set to “extended” (the default), multiple items may be selected. If “browse”, only a single item will be selected at a time. If “none”, the selection will not be changed. Note that the application code and tag bindings can set the selection however they wish, regardless of the value of this option. A list containing zero or more of the following values, specifying which elements of the tree to display. The default is “tree headings”, i.e., show all elements. Note: Column #0 always refers to the tree column, even if show=”tree” is not specified. The following item options may be specified for items in the insert and item widget commands. The textual label to display for the item. A Tk Image, displayed to the left of the label. The list of values associated with the item. Each item should have the same number of values as the widget option columns. If there are fewer values than columns, the remaining values are assumed empty. If there are more values than columns, the extra values are ignored. / value indicating whether the item’s children should be displayed or hidden. A list of tags associated with this item. The following options may be specified on tags: Specifies the font to use when drawing text. Specifies the item image, in case the item’s image option is empty. Column identifiers take any of the following forms:\n• None A symbolic name from the list of columns option.\n• None An integer n, specifying the nth data column.\n• None A string of the form #n, where n is an integer, specifying the nth display column.\n• None Item’s option values may be displayed in a different order than the order in which they are stored.\n• None Column #0 always refers to the tree column, even if show=”tree” is not specified. A data column number is an index into an item’s option values list; a display column number is the column number in the tree where the values are displayed. Tree labels are displayed in column #0. If option displaycolumns is not set, then data column n is displayed in column #n+1. Again, column #0 always refers to the tree column. The Treeview widget generates the following virtual events. Generated whenever the selection changes. Generated just before settings the focus item to open=True. Generated just after setting the focus item to open=False. The and methods can be used to determine the affected item or items. Returns the bounding box (relative to the treeview widget’s window) of the specified item in the form (x, y, width, height). If column is specified, returns the bounding box of that cell. If the item is not visible (i.e., if it is a descendant of a closed item or is scrolled offscreen), returns an empty string. Returns the list of children belonging to item. If item is not specified, returns root children. Children present in item that are not present in newchildren are detached from the tree. No items in newchildren may be an ancestor of item. Note that not specifying newchildren results in detaching item’s children. Query or modify the options for the specified column. If kw is not given, returns a dict of the column option values. If option is specified then the value for that option is returned. Otherwise, sets the options to the corresponding values. Returns the column name. This is a read-only option. anchor: One of the standard Tk anchor values. Specifies how the text in this column should be aligned with respect to the cell. The minimum width of the column in pixels. The treeview widget will not make the column any smaller than specified by this option when the widget is resized or the user drags a column. Specifies whether the column’s width should be adjusted when the widget is resized. The width of the column in pixels. To configure the tree column, call this with column = “#0” Delete all specified items and all their descendants. The root item may not be deleted. Unlinks all of the specified items from the tree. The items and all of their descendants are still present, and may be reinserted at another point in the tree, but will not be displayed. The root item may not be detached. Returns if the specified item is present in the tree. If item is specified, sets the focus item to item. Otherwise, returns the current focus item, or ‘’ if there is none. Query or modify the heading options for the specified column. If kw is not given, returns a dict of the heading option values. If option is specified then the value for that option is returned. Otherwise, sets the options to the corresponding values. The text to display in the column heading. Specifies an image to display to the right of the column heading. Specifies how the heading text should be aligned. One of the standard Tk anchor values. A callback to be invoked when the heading label is pressed. To configure the tree column heading, call this with column = “#0”. Returns a description of the specified component under the point given by x and y, or the empty string if no such component is present at that position. Returns the item ID of the item at position y. Returns the data column identifier of the cell at position x. Returns the integer index of item within its parent’s list of children. Creates a new item and returns the item identifier of the newly created item. parent is the item ID of the parent item, or the empty string to create a new top-level item. index is an integer, or the value “end”, specifying where in the list of parent’s children to insert the new item. If index is less than or equal to zero, the new node is inserted at the beginning; if index is greater than or equal to the current number of children, it is inserted at the end. If iid is specified, it is used as the item identifier; iid must not already exist in the tree. Otherwise, a new unique identifier is generated. See Item Options for the list of available options. Query or modify the options for the specified item. If no options are given, a dict with options/values for the item is returned. If option is specified then the value for that option is returned. Otherwise, sets the options to the corresponding values as given by kw. Moves item to position index in parent’s list of children. It is illegal to move an item under one of its descendants. If index is less than or equal to zero, item is moved to the beginning; if greater than or equal to the number of children, it is moved to the end. If item was detached it is reattached. Returns the identifier of item’s next sibling, or ‘’ if item is the last child of its parent. Returns the ID of the parent of item, or ‘’ if item is at the top level of the hierarchy. Returns the identifier of item’s previous sibling, or ‘’ if item is the first child of its parent. Sets all of item’s ancestors open option to , and scrolls the widget if necessary so that item is within the visible portion of the tree. Changed in version 3.8: no longer takes arguments. For changing the selection state use the following selection methods. items becomes the new selection. Changed in version 3.6: items can be passed as separate arguments, not just as a single tuple. Changed in version 3.6: items can be passed as separate arguments, not just as a single tuple. Changed in version 3.6: items can be passed as separate arguments, not just as a single tuple. Toggle the selection state of each item in items. Changed in version 3.6: items can be passed as separate arguments, not just as a single tuple. With one argument, returns a dictionary of column/value pairs for the specified item. With two arguments, returns the current value of the specified column. With three arguments, sets the value of given column in given item to the specified value. Bind a callback for the given event sequence to the tag tagname. When an event is delivered to an item, the callbacks for each of the item’s tags option are called. Query or modify the options for the specified tagname. If kw is not given, returns a dict of the option settings for tagname. If option is specified, returns the value for that option for the specified tagname. Otherwise, sets the options to the corresponding values for the given tagname. If item is specified, returns 1 or 0 depending on whether the specified item has the given tagname. Otherwise, returns a list of all items that have the specified tag. Query or modify horizontal position of the treeview. Query or modify vertical position of the treeview.\n\nEach widget in is assigned a style, which specifies the set of elements making up the widget and how they are arranged, along with dynamic and default settings for element options. By default the style name is the same as the widget’s class name, but it may be overridden by the widget’s style option. If you don’t know the class name of a widget, use the method (somewidget.winfo_class()). This document explains how the theme engine works This class is used to manipulate the style database. Query or set the default value of the specified option(s) in style. Each key in kw is an option and each value is a string identifying the value for that option. For example, to change every default button to be a flat button with some padding and a different background color: Query or sets dynamic values of the specified option(s) in style. Each key in kw is an option and each value should be a list or a tuple (usually) containing statespecs grouped in tuples, lists, or some other preference. A statespec is a compound of one or more states and then a value. An example may make it more understandable: Note that the order of the (states, value) sequences for an option does matter, if the order is changed to in the foreground option, for example, the result would be a blue foreground when the widget were in active or pressed states. Returns the value specified for option in style. If state is specified, it is expected to be a sequence of one or more states. If the default argument is set, it is used as a fallback value in case no specification for option is found. To check what font a Button uses by default: Define the widget layout for given style. If layoutspec is omitted, return the layout specification for given style. layoutspec, if specified, is expected to be a list or some other sequence type (excluding strings), where each item should be a tuple and the first item is the layout name and the second item should have the format described in Layouts. To understand the format, see the following example (it is not intended to do anything useful): Create a new element in the current theme, of the given etype which is expected to be either “image”, “from” or “vsapi”. The latter is only available in Tk 8.6 on Windows. If “image” is used, args should contain the default image name followed by statespec/value pairs (this is the imagespec), and kw may have the following options: padding is a list of up to four integers, specifying the left, top, right, and bottom borders, respectively. Specifies a minimum height for the element. If less than zero, the base image’s height is used as a default. Specifies the element’s interior padding. Defaults to border’s value if not specified. Specifies how the image is placed within the final parcel. spec contains zero or more characters “n”, “s”, “w”, or “e”. Specifies a minimum width for the element. If less than zero, the base image’s width is used as a default. If “from” is used as the value of etype, will clone an existing element. args is expected to contain a themename, from which the element will be cloned, and optionally an element to clone from. If this element to clone from is not specified, an empty element will be used. kw is discarded. If “vsapi” is used as the value of etype, will create a new element in the current theme whose visual appearance is drawn using the Microsoft Visual Styles API which is responsible for the themed styles on Windows XP and Vista. args is expected to contain the Visual Styles class and part as given in the Microsoft documentation followed by an optional sequence of tuples of ttk states and the corresponding Visual Styles API state value. kw may have the following options: Specify the element’s interior padding. padding is a list of up to four integers specifying the left, top, right and bottom padding quantities respectively. If fewer than four elements are specified, bottom defaults to top, right defaults to left, and top defaults to left. In other words, a list of three numbers specify the left, vertical, and right padding; a list of two numbers specify the horizontal and the vertical padding; a single number specifies the same padding all the way around the widget. This option may not be mixed with any other options. Specifies the elements exterior padding. padding is a list of up to four integers specifying the left, top, right and bottom padding quantities respectively. This option may not be mixed with any other options. Specifies the width for the element. If this option is set then the Visual Styles API will not be queried for the recommended size or the part. If this option is set then height should also be set. The width and height options cannot be mixed with the padding or margins options. Specifies the height of the element. See the comments for width. Changed in version 3.13: Added support of the “vsapi” element factory. Returns the list of elements defined in the current theme. It is an error if themename already exists. If parent is specified, the new theme will inherit styles, elements and layouts from the parent theme. If settings are present they are expected to have the same syntax used for . Temporarily sets the current theme to themename, apply specified settings and then restore the previous theme. Each key in settings is a style and each value may contain the keys ‘configure’, ‘map’, ‘layout’ and ‘element create’ and they are expected to have the same format as specified by the methods , , and respectively. As an example, let’s change the Combobox for the default theme a bit: Returns a list of all known themes. If themename is not given, returns the theme in use. Otherwise, sets the current theme to themename, refreshes all widgets and emits a <<ThemeChanged>> event. A layout can be just , if it takes no options, or a dict of options specifying how to arrange the element. The layout mechanism uses a simplified version of the pack geometry manager: given an initial cavity, each element is allocated a parcel. Specifies which side of the cavity to place the element; one of top, right, bottom or left. If omitted, the element occupies the entire cavity. Specifies where the element is placed inside its allocated parcel. If set to 1, causes the element and all of its descendants to be treated as a single element for the purposes of et al. It’s used for things like scrollbar thumbs with grips. Specifies a list of elements to place inside the element. Each element is a tuple (or other sequence type) where the first item is the layout name, and the other is a Layout."
    },
    {
        "link": "https://geeksforgeeks.org/python-gui-tkinter",
        "document": "Python Tkinter is a standard GUI (Graphical User Interface) library for Python which provides a fast and easy way to create desktop applications. Tkinter provides a variety of widgets like buttons, labels, text boxes, menus and more that can be used to create interactive user interfaces. Tkinter supports event-driven programming, where actions are taken in response to user events like clicks or keypresses.\n• Import the tkinter module : Import the tkinter module, which is necessary for creating the GUI components.\n• Create the main window (container) : Initialize the main application window using the Tk() class.\n• Set Window Properties : We can set properties like the title and size of the window.\n• Add widgets to the main window : We can add any number of widgets like buttons, labels, entry fields, etc., to the main window to design the interface.\n• Pack Widgets: Use geometry managers like pack(), grid() or place() to arrange the widgets within the window.\n• Apply event triggers to the widgets : We can attach event triggers to the widgets to define how they respond to user interactions.\n\nThere are two main methods used which the user needs to remember while creating the Python application with GUI.\n\nTo create a main window in Tkinter, we use the Tk() class. The syntax for creating a main window is as follows:\n• screenName: This parameter is used to specify the display name.\n• baseName: This parameter can be used to set the base name of the application.\n• className: We can change the name of the window by setting this parameter to the desired name.\n• useTk: This parameter indicates whether to use Tk or not.\n\nThe mainloop() method is used to run application once it is ready. It is an infinite loop that keeps the application running, waits for events to occur (such as button clicks) and processes these events as long as the window is not closed.\n\nThere are a number of tkinter widgets which we can put in our tkinter application. Some of the major widgets are explained below:\n\nIt refers to the display box where we display text or image. It can have various options like font, background, foreground, etc. The general syntax is:\n• master is the parameter used to represent the parent window.\n\nNote: We have a number of options and parameters that we can pass to widgets, only some them are used in the examples given in this article.\n\nA clickable button that can trigger an action. The general syntax is:\n\nIt is used to input the single line text entry from the user. For multi-line text input, Text widget is used. The general syntax is:\n\nA checkbox can be toggled on or off. It can be linked to a variable to store its state. The general syntax is:\n\nIt allows the user to select one option from a set of choices. They are grouped by sharing the same variable. The general syntax is:\n\nIt displays a list of items from which a user can select one or more. The general syntax is:\n\nIt refers to the slide controller which will be used to implement listed widgets. The general syntax is:\n\nIt is used to create all kinds of menus used by the application. The general syntax is:\n\nCombobox widget is created using the ttk.Combobox class from the tkinter.ttk module. The values for the Combobox are specified using the values parameter. The default value is set using the set method. An event handler function on_select is bound to the Combobox using the bind method, which updates a label with the selected item whenever an item is selected.\n\nIt is used to provide a graphical slider that allows to select any value from that scale. The general syntax is:\n\nThis widget is directly controlled by the window manager. It don’t need any parent window to work on.The general syntax is:\n\nIt is a widget to display text messages with word wrapping. The general syntax is:\n\nIt is a part of top-down menu which stays on the window all the time. Every menubutton has its own functionality. The general syntax is:\n\nprogressbar indicates the progress of a long-running task. When the button is clicked, the progressbar fills up to 100% over a short period, simulating a task that takes time to complete.\n\nIt is an entry of ‘Entry’ widget. Here, value can be input by selecting a fixed value of numbers. The general syntax is:\n\nTo edit a multi-line text and format the way it has to be displayed. The general syntax is:\n\nIt is used to draw pictures and other complex layout like graphics, text and widgets. The general syntax is:\n\nIt is a container widget which is used to handle number of panes arranged in it. The general syntax is:\n\nThis example demonstrates the usage of various color options in Tkinter widgets, including active background and foreground colors, background and foreground colors, disabled state colors, and selection colors. Each widget in the example showcases a different color option, providing a visual representation of how these options affect the appearance of the widgets.\n\nTkinter also offers access to the geometric configuration of the widgets which can organize the widgets in the parent windows. There are mainly three geometry manager classes class.\n\nIt organizes the widgets in blocks before placing in the parent widget. Widgets can be packed from the top, bottom, left or right. It can expand widgets to fill the available space or place them in a fixed size.\n\nIt organizes the widgets in grid (table-like structure) before placing in the parent widget. Each widget is assigned a row and column. Widgets can span multiple rows or columns using rowspan and columnspan.\n\nIt organizes the widgets by placing them on specific positions directed by the programmer. Widgets are placed at specific x and y coordinates. Sizes and positions can be specified in absolute or relative terms.\n\nIn Tkinter, events are actions that occur when a user interacts with the GUI, such as pressing a key, clicking a mouse button or resizing a window. Event handling allows us to define how our application should respond to these interactions.\n\nEvents in Tkinter are captured and managed using a mechanism called bindings. A binding links an event to a callback function (also known as an event handler) that is called when the event occurs.\n• widget: The Tkinter widget you want to bind the event to.\n• event: A string that specifies the type of event (e.g., <Button-1> for a left mouse click).\n• handler: The callback function that will be executed when the event occurs.\n\nKey events are triggered when a user presses a key on the keyboard. Mouse events are triggered by mouse actions, such as clicking or moving the mouse.\n\nIn this advanced example, multiple event types are handled simultaneously. The on_mouse_motion function is called whenever the mouse is moved within the window, demonstrating how we can track and respond to continuous events.\n\nThe event object is passed to the callback function when an event occurs. It contains useful information about the event, such as:\n• event.x and event.y: The x and y coordinates of the mouse event.\n• event.widget: The widget that triggered the event.\n\nWhat is Tkinter in Python used for?\n\nWhat does TK() mean in Python?\n\nIs Tkinter the only GUI for Python?\n\nWhat is a Tkinter window in Python?\n\nWhich GUI is best for Python?"
    },
    {
        "link": "https://pythontutorial.net/tkinter/tkinter-treeview",
        "document": "Summary: in this tutorial, you’ll learn about the Tkinter Treeview widget and how to use it to display both tabular and hierarchical data.\n\nA Treeview widget allows you to display data in both tabular and hierarchical structures. To create a Treeview widget, you use the class:\n\nA Treeview widget holds a list of items. Each item has one or more columns.\n\nThe first column may contain text and an icon that indicates whether it can be expansible or not. The remaining columns contain values of each row.\n\nThe first row of the Treeview consists of headings that identify each column by a name.\n\nThe following program shows how to use the Treeview widget to display tabular data:\n\nFirst, import module, submodule, and the from :\n\nSecond, create the root window, set its title and size:\n\nIn this code, we passed the columns to the option. The hides the first column (column ) of the Treeview.\n\nThe option accepts one of the following values:\n• – shows both column and the header row. This is the default value.\n• – doesn’t show the column or the header row.\n\nFifth, specify the headings for the columns:\n\nSixth, generate a list of tuples for displaying on the Treeview:\n\nSeventh, create new items, one by one, by using the method of the Treeview widget:\n\nEight, define a function to handle the event. When you select one or more items, the program will show a message box:\n\nNinth, place the Treeview widget on the root window:\n\nThe following program also uses the Treeview widget in the object-oriented programming approach:\n\nAdding an item to the Treeview widget\n\nTo add an item (or a row) to a Treeview widget, you use the method of the widget object. The following example adds an item at the end of the item list:\n\nTo add an item at the beginning of the list, you use zero ( ) instead of constant:\n\nThe following program illustrates how to add items to the Treeview:\n\nTo delete an item from Treeview, you use the delete() method of the Treeview object. The following program shows a Treeview with some items. Clicking an item will delete it from the tree:\n\nSecond, delete the selected item from the tree. To get the selected item, you use the method of the object:\n\nTo change the size of a column and anchor of the item, you can use the column() method of the Treeview object:\n\nThe following example sets the width for the first name and last name column to 100 and the email to 200. It also set the anchor for the item in each column accordingly:\n\nThe following program illustrates how to use the TreeView widget to display hierarchical data:\n\nFirst, create a Treeview widget and set its heading.\n\nThis Treeview widget has only one column.\n\nSecond, add items to the TreeView widget:\n\nEach item is identified by an . If you skip the , the insert method will generate one automatically. In this case, you need to have explicit for adding child items.\n\nThird, add two child items to the item with iid 0 by using the insert() and move() methods:\n\nFinally, place the Treeview widget on the root window and display it.\n• Use a Tkinter Treeview widget to display both tabular and hierarchical data."
    },
    {
        "link": "https://pythonassets.com/posts/treeview-in-tk-tkinter",
        "document": "The tree view (or hierarchical list) is a UI widget that presents data in hierarchical form, although non-hierarchical data is also supported. It can be used as a table widget too. It was introduced in Tk 8.5 and in Python it is provided by the standard module.\n\nTo include a tree view widget in your Tk application, create a an instance of the class.\n\nOnce the object is created, add rows or items via the method: Since the tree view presents hierarchical data, the first argument passed to is either a parent item or an empty string ( ), meaning that the new item has no predecessor. The second argument is the position (index) which you want to insert the item in, or to place it at the end of the tree. So places the item at the beginning. The method returns the ID of the created item, usually abbreviated as . To create a child item within Item 1, use: Even Subitem 1 might have other items within it, and so on. Tk automatically creates an ID for each item, which is just a string in the form , , etc. You will rarely want to create an ID for a new item yourself; but if necessary, you can do it by specifying the parameter. This might be useful to get or modify the item's data later. For example, the following code displays the text of the item in a message box when the user presses a button: # Get the text of the item whose Id is stored in `my_iid`. The methods lets you both read and modify item's data. The previous code displays in message box the property of the item with ID . If no option is specified, the function returns a dictionary with the item's data. # Get the whole info of the item whose ID is stored in `my_iid`. The dictionary will be something like: To change any of these values, simply pass it as an argument: # Change the text of an item. Items within the tree or contained in another item can be obtained via the method, which returns a tuple of IDs. # Get the whole list of items and subitems. is a tuple containing the IDs (strings) of every root item (i.e., does not includes subitems) within the tree. The tuple contains every subitem within Item 1 (whose ID is stored in ).\n\nIt is possible to move an item from one place to another using . For example, if you have inserted these items: You can move Item 1 into Item 2 this way: The method receives the item to be moved as the first argument. The second argument must be either another item into which you want to place the original item, or in order to place it at the root of the tree view. The third argument is the position or row index where the new item is moved. Tk provides two functions to remove one or more items: and . The difference is that the former removes the passed items both from the widget and from memory. The later just unlinks them from the tree, and they might be re-linked later using . # Unlinks item 1 (might be re-linked later). After these calls, the method, which lets you know whether an items exists within the tree, returns for but for . To remove all items from the tree view use:\n\nThe returns the ID of the item that has focus (which may differ from the selected item) or an empty string if there is no focus. To put the focus on a certain item, pass the item ID: # Retrieve the id of the item that has focus. The method returns the position of the specified item. Note that this position is relative to the parent item. For this reason, two subitems might have the same position if they have different parents.\n\nA tree view can have multiple columns. Thus it is often used as a table widget. For example, if you need to display a hierarchical list of files and folders, the text of each item could be used to show the file name while adding two extra columns to display its size and last modification. You will first need to configure the instance with the required columns: Then you will be able to add a new row to represent a file like this: Thus, you specify that the item text is via the parameter (which you might think of as the first column), while the values ( and ) of the extra columns ( and ) are passed via the parameter. It is also possible to customize the title of each column. Internally, Tk uses the name to refer to the first column that is created by default and where the item's text is displayed, while and are arbitrary names that you choose during the creation of to refer to the extra columns. To get the value of the columns of a given item, call the method (yes, the name is a little confusing). To query the value of a specific column, add a second argument with the column identifier. And to change its value, pass a new value as the third argument:\n\nTk lets you include an icon image for an item via the parameter. The file (which you can download from the ZIP file at the bottom) must be located in the current working directory. If it is stored elsewhere in the file system, pass its full path instead. Note that due to a Tcl/Tk limitation, a reference to the image ( ) must be maintained. The following code runs fine, but the image is not displayed because the object gets garbage-collected: # Error: a reference to the image is not kept in memory. You might pass the content of an image instead of a file path to . This is useful when you need to load an image from memory: # image_content must be a string or a bytes instance.\n\nThe method returns a tuple containing the IDs of the selected items, or an empty tuple if there is no selection. For example, the following code set ups a button that displays a message box with the text of the selected item: # Get the Id of the first selected item. # If the tuple is empty, there is no selected item. # Get and display the text of the selected item. By default, a tree view allows multiple items to be selected. To allow only one selection, the value must be passed to the parameter. Toggles the selection of an item. For example, the following code selects Items 1 and 2 after adding them to the table:"
    }
]