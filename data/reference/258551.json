[
    {
        "link": "https://p5js.org/reference/p5/preload",
        "document": "A function that's called once to load assets before the sketch runs.\n\nDeclaring the function sets a code block to run once automatically before setup() or draw(). It's used to load assets including multimedia files, fonts, data, and 3D models:\n\nFunctions such as loadImage(), loadFont(), loadJSON(), and loadModel() are guaranteed to either finish loading or raise an error if they're called within . Doing so ensures that assets are available when the sketch begins running."
    },
    {
        "link": "https://p5js.org/contribute/documentation_style_guide",
        "document": "Hello! Welcome to the guidelines for writing p5.js documentation. This document is a remix of the following resources:\n\nOur community is large and diverse. Many people learn to code using p5.js, and a large subset of those people are students in K–12 classes. After reading this guide, you will know:\n• How to write effective, inclusive, and accessible prose for documentation purposes.\n• How to write simple code samples for documentation purposes.\n\nWe use YUIDoc to generate the p5.js API documentation. To generate the docs, navigate to the p5.js root directory, run , and execute:\n\nThe output will appear in docs/reference. Refer to the inline documentation guide for more information.\n\nPlease use American English (color, center, modularize, etc). See a list of American and British English spelling differences here.\n\nPlease use the Oxford comma (“red, white, and blue”, instead of “red, white and blue”).\n\nWrite simple, declarative sentences. Brevity is a plus: get to the point.\n\nWrite in the present tense: “Returns an object that…”, rather than “Returned an object that…” or “Will return an object that…“.\n\nCommunicate the current way of doing things, both explicitly and implicitly. Use the idioms recommended in this guide. Reorder sections to emphasize favored approaches if needed. The documentation should be a model for best practices and approachable for beginners.\n\nDocumentation has to be brief but comprehensive. Explore and document edge cases. What happens for each combination of arguments? What bugs are most likely to appear in a beginner’s code?\n\nSpell names correctly: p5.js, CSS, HTML, JavaScript, WebGL. When in doubt, refer to an authoritative source like their official documentation.\n\nWrite documentation without bias towards any kind of person. While documenting particularly demanding/sensitive topics, take the time to educate yourself. Ensure that your writing doesn’t hurt or offend someone unintentionally.\n• Be inclusive of every gender identity and expression, sexual orientation, race, ethnicity, language, neuro-type, size, disability, class, religion, culture, subculture, political opinion, age, skill level, occupation, and background. Make examples as diverse as our community.\n• Avoid politicized content. If political content is necessary, remain neutral.\n• Avoid content that would insult or cause harm to people.\n• Don’t make any generalizations about people, countries, and cultures. That includes positive or neutral generalizations.\n\nPrefer wordings that avoid “you”s and “your”s. For example, instead of:\n• Emphasize the reader rather than underlining their inconveniences.\n• Don’t refer to a person with a disability as a disabled person. Use approved terminology for people with specific disabilities.\n• Maintain a uniform structure throughout the p5.js documentation. Emphasize important points both stylistically and visually.\n• Use a screen reader to test documentation. To test a screen reader, see List of screen readers.\n• Consider multi-platform accessibility for all types of devices and operating systems.\n• Create examples with all types of input devices such as voice and gesture based devices, controllers, mice, and keyboards.\n• Don’t use ableist language. Be inclusive and unbiased while writing about accessibility and disability.\n• Take a pragmatic approach to HTML semantics. Don’t add semantics purely for the sake of semantics. If there is an HTML structure that clearly matches the content, use that element. For example, a group of links should most likely use a list element.\n• Use simple tables and tabular formats. Avoid span tags (such as rowspan and colspan). Tables prove to be difficult for screen readers.\n\nThe following terminiology is adapted from the WordPress documentation guidelines for Writing inclusive documentation. For more background on people-first language, see the CDC’s guide on Communicating With and About People with Disabilities.\n\nChoose meaningful code samples that cover the basics as well as gotchas. Only use advanced syntax if it is necessary to explain how a feature works. Don’t draw five circles to explain something when one circle will convey the idea. The code samples themselves should follow the guidelines below.\n• Use for single line comments. Place single line comments on a newline above the subject of the comment. Put an empty line before the comment unless it’s on the first line of a block.\n• Start all comments with a space to make it easier to read.\n• Place 1 space before the opening parenthesis in control statements such as and . Place no space between the argument list and the function name.\n• Name objects, functions, and instances using camelCase.\n• Always use to declare variables. Avoid using .\n• Use one declaration per variable or assignment.\n• Assign variables where needed and place them in a reasonable place.\n• Don’t concatenate strings that cause the line to go over 80 characters.\n• Use template strings instead of concatenation when needed.\n• Do not unnecessarily escape characters in strings.\n• None Use and over and .\n• None Don’t use statements unless it’s necessary.\n• None Use parentheses when mixing operators. The only exceptions are the arithmetic operators , , and .\n• Use braces with all multiline blocks.\n• Put on the same line as the preceding block’s closing brace.\n• Don’t use an block after an block that always executes a statement.\n• If a condition gets too long, place each (grouped) condition on a new line. The logical operator should begin the line.\n• None Don’t use selection operators in place of conditionals.\n• Don’t use a or loops unless it’s necessary. Use loops to iterate a fixed number of times.\n• Don’t use loops to iterate over arrays.\n• Use the literal syntax for object creation.\n• Only quote properties that are invalid identifiers.\n• Use bracket notation to access properties with a variable.\n• Use the literal syntax for array creation.\n• Use Array#push instead of direct assignment to add items to an array.\n• Use the method to copy arrays.\n• Write arrays on multiple lines when it improves readibility. Use line breaks after the opening bracket and before the closing bracket. Add a trailing comma.\n• Use function declarations instead of named function expressions.\n• Use arrow function notation for anonymous functions. Callbacks are a common case for this syntax.\n• Use the implicit return when possible. Omit braces if the function body returns a single statement without side effects. Otherwise, keep the braces and use a statement.\n• Use individual function calls instead of function chaining.\n• Always use . Avoid manipulating directly. The only exception is explaining how to create libraries.\n• Make sure that custom methods don’t cause side effects.\n• Don’t write an empty constructor or one that only delegates to a parent class."
    },
    {
        "link": "https://geeksforgeeks.org/p5-js-preload-function",
        "document": "The preload() function in p5.js is used to asynchronously load files before the setup() function. It runs exactly once in when the sketch is loaded.\n\nMost users do not use the preload() function as the same task can be done in setup() function. However, it is nice to separate similar code in our program to improve its scalability and modularity. Generally preload() function is used to load things like, images, 3D models, fonts, etc. in the sketch. The “loading…” text is displayed during the loading of the resources.\n\nParameters: This function does not accept any parameters.\n\nBelow example illustrates the preload() function in p5.js:"
    },
    {
        "link": "https://archive.p5js.org/learn/program-flow.html",
        "document": "This tutorial outlines some various techniques for controlling the sequence and timing of events in your code, which is known as program flow.\n\nWe can use conditional statements to control the program flow. Conditional statements perform different actions based on tests for different conditions. JavaScript has the following conditional statements:\n• Use if to specify a block of code to be executed, if a specified condition is true\n• Use else to specify a block of code to be executed, if the same condition is false\n• Use else if to specify a new condition to test, if the first condition is false\n\nIn the following example, change the value for variable i to change the color of the rectangle. If i equals to 0, the condition for the if statement is satisfied, and the filling color is red. In this case, the program continues to draw the rectangle skipping the else if and else statements. If i equals to 1, the condition for the if statement is not satisfied, and the program moves on to check the condition for the else if statement. Since else if condition is satisfied, the filling color is green. If neither the if nor the else if conditions are satisfied, the program runs the else statement, and the filling color is blue.\n\nLoops can execute a block of code repeatedly. p5 supports several different kinds of loops in JavaScript:\n• for - loops through a block of code a specified number of times\n• for/in - loops through the properties of an object\n• while - loops through a block of code while a specified condition is true\n• do/while - also loops through a block of code while a specified condition is true\n\nThe for loop sets up a variable (usually i or x) that is then incrementally changed for each loop. It has the following structure:\n• Statement 1 is executed (one time) before the execution of the code block. It sets the starting value for the variable\n• Statement 2 defines the condition that must be true for the code block to be executed.\n• Statement 3 is executed every time after the code block has finished running if statement 2 evaluated to be true.\n\nIn this example, variable i is initially set to 0. Every time the for loop runs, i is displayed on the screen and 1 is added to i. Note the for loop will only run until i equals to 4 because after this the condition that i be less than 5 will be false.\n\nThe for/in statement loops through the properties of an object:\n\nIn this example, as the for loop cycles through each property of the person object, the property value is added to myText string.\n\nThe while loop cycles through a block of code as long as its specified condition is true.\n\nThis example gives the same result as the for loop example above. Sometimes while loops and for loops can be used interchangeably.\n\nThe do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, it will then repeat the loop as long as the condition is true.\n\nThe draw() function in p5 runs as a loop. The code inside the draw() function runs continuously from top to bottom until the program is stopped. The draw() loop may be stopped by calling noLoop(), and can then be resumed with loop(). If using noLoop() in setup(), it should be the last line inside the block.\n\nIn this example, noLoop() is called in setup(), so the code within draw() will only run once at the start of the program. Since loop() is placed in mousePressed(), the draw() block will resume looping when mouse is pressed. When mouse is released, noLoop() is called again and hence the draw() loop stops.\n\nThe function redraw() executes the code within draw() one time. This functions allows the program to update the display window only when necessary, such as when an event registered by mousePressed() or keyPressed() occurs. In structuring a program, it only makes sense to call redraw() within events such as mousePressed() outside of the draw() loop. The redraw() function does not work properly when called inside draw(). In addition, you can set the number of loops through draw by adding a single argument (an integer) to the redraw() function.\n\nThis example is similar to the previous one, where noLoop() is called in setup() and the code within draw() will only run once at the start of the program. However, when mouse is pressed, redraw() is called and draw() will only loop once. To make smooth animations, it is easier to work with noLoop() and loop().\n\nIn JavaScript, events may occur concurrently with the main program flow. This is considered as asynchronicity in programming. In p5, for example, when we use loadImage() in setup(), the browser begins the process of loading the image but skip onto the next line before it is finised loading. The following example demonstrates such asynchronicity.\n\nWhen you run this program, you'll notice that the drawing canvas is grey with no image displayed. This is because loadImage() begins to load the image, but does not have time to finish this task before the program continues on through the rest of setup() and on to draw(). Even with the noLoop() function that stops p5.js from continuously executing the code within draw(). The image() function is unable to display the image as it is not properly loaded.\n\nTo help with this issue of asynchronicity, p5.js has the preload() function. Unlike setup(), preload() forces the program to wait until everything has loaded before moving on. It is best to only make load calls in preload(), and do all other setup in setup().\n\npreload() ensures that the image has been loaded before running the other code.\n\nAn alternative to preload() is to use a callback function. A callback function is a function that is passed as an argument to a second function, and that runs after the second function has completed. The following example illustrates this technique.\n\nIn this example, the second argument in loadImage() is the function we want to run after the load is complete. Once the image has loaded, this callback function, drawImage(), is automatically called. It has one argument which contains the image that was just loaded. There is no need to create a global variable to hold the image. The image is passed directly into the callback function, as the parameter name chosen in the function definition.\n\nThe JSON (JavaScript Object Notation) format is a common system for storing data. Like HTML and XML formats, the elements have labels associated with them. One way to load JSON file is to use loadJSON() function in preload().\n\nThe following request at https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_hour.geojson returns data of recent earthquakes in the world from USGS.\n\nAlternatively, loadJSON() can also take a callback. To use data from an API, you may need a callback function as, like with an image, the data takes time to load. API (Application Programming Interface) requests are commands that request data from a service. A lot of APIs will return data in JSON format. Some need you to authenticate with the API to use it (e.g. register as a developer and get keys). You can’t always use preload() when getting data from APIs because the data might change while you sketch is running and you will want your program to respond accordingly.\n\nloadJSON() can be used in a few ways:\n• path - String: name of the file or url to load\n• callback - Function: function to be executed after loadJSON() completes, data is passed in as first argument\n• errorCallback - Function: function to be executed if there is an error, response is passed in as first argument\n\nIn this example, the loadJSON() function is placed in setup() and takes a custom callback function showEarthquake(). This means when the program finishes loading the JSON file from the USGS earthquakes API, the function showEarthQuake() is called. The place and magnitude of the most recent earthquake listed by the API is stored in local variables within showEarthquake and are then displayed on the screen.\n\nSometimes we use setInterval() to control the frequency of requests made to the API. setInterval() can also take a callback function. If you call setInterval() in setup(), it will run repeatedly for the duration of the program at the interval set.\n\nIn this example, the earthquake data is grabbed from the API every 5 seconds and is displayed on the screen.\n\nIn addition to the loadImage(), loadJSON() and setInterval(), there are other functions in p5 that accept callbacks. Typically, functions that involve loading data of some kind accept callbacks, or should be put in preload(). For example:\n\nDOM functionality makes it easy to interact with other HTML5 objects, including text, hyperlink, image, input, video, audio, and webcam. Some DOM creation methods also accept callbacks:\n\nCallback functions are functions that can be passed as an argument into another function and be executed after the first function is complete. An event listener or handler is a type of callback. It is called whenever an event occurs such as when the mouse is pressed, or a key is pressed etc.\n\nMouse functions like mousePressed(), mouseClicked(), mouseReleased(), mouseMoved(), etc. can be used as event listeners. They can be attached to certain elements in a sketch.\n• mousePressed() - Code inside this block is run one time when a mouse button is pressed\n• mouseReleased() - Code inside this block is run one time when a mouse button is released\n• mouseClicked() - Code inside this block is run once after a mouse button is pressed and released over the element\n• doubleClicked() - Code inside this block is run once after a mouse button is pressed and released over the element twice\n• mouseWheel() - Code inside this block is run once when mouse wheel is scrolled over the element\n• mouseMoved() - Code inside this block is run one time when the mouse is moved\n• mouseOver() - Code inside this block is run once after every time a mouse moves onto the element.\n• mouseOut() - Code inside this block is run once after every time a mouse moves off the element\n\nIn this example, a canvas element is created and an event listener mousePressed() is attached. Function changeGrey() will only run when the mouse is pressed over the canvas, and will will change the background color to a random grey. If the mouse is pressed anywhere, even outside of the canvas, the diameter of the ellipse will increase by 10 pixels. The custom function changeGray(), in this instance, is placed within the mousePressed() function and is to be triggered when mouse is pressed over the canvas element. If the mouse is not pressed, false is passed and changeGrey() will not run.\n\nThe above mouse functions can be attached to an element like the canvas or can be used without specifying an element. The keyboard functions keyPressed(), keyReleased(), keyTyped(), and mouse function mouseDragged() cannot be attached to a specific element.\n• mouseDragged() - Code inside this block runs once when the mouse is moved and the mouse button is pressed\n• keyPressed() - Code inside this block runs once when any key is pressed\n• keyTyped() - Code inside this block is runs once when a key is pressed, but action keys such as Ctrl, Shift, and Alt are ignored. The most recent key pressed will be stored in the key variable.\n• keyReleased() - Code inside this block is runs once when any key is released"
    },
    {
        "link": "https://stackoverflow.com/questions/48751773/using-p5-js-is-it-possible-to-preload-some-json-files-that-are-defined-in-a-j",
        "document": "I am working on a p5.js project that loads some configuration options from a JSON file. I am preloading the config file in p5.js's function, like so:\n\nPart of the config JSON file contains some objects that each have a property that is another JSON file I would like to preload:\n\nI cannot access the config file data before p5.js's function (as I cannot guarantee the config file has been completely read until then), by which time I can no longer preload the song JSON files.\n\nI'm trying to figure out if there's any way around this.\n\nEDIT: Thanks to George's answer below, I have it working as below. The following all runs before entering p5.js's function, which is exaclty what I was after:"
    },
    {
        "link": "https://p5js.org/reference/p5.sound/p5.AudioIn",
        "document": "Get sound from an input source, typically a computer microphone.\n\nenabled Client must allow browser to access their microphone / audioin source. Default: false. Will become true when the client enables access. amplitude Input amplitude, connect to it by default but not to master out\n\nconnect Connect to an audio unit. If no parameter is provided, will connect to the main output (i.e. your speakers).\n\n disconnect Disconnect the AudioIn from all audio units. For example, if connect() had been called, disconnect() will stop sending signal to your speakers.\n\n getLevel Read the Amplitude (volume level) of an AudioIn. The AudioIn class contains its own instance of the Amplitude class to help make it easy to get a microphone's volume level. Accepts an optional smoothing value (0.0 < 1.0). NOTE: AudioIn must .start() before using .getLevel().\n\n amp Set amplitude (volume) of a mic input between 0 and 1.0. getSources Returns a list of available input sources. This is a wrapper for MediaDevices.enumerateDevices() - Web APIs | MDN and it returns a Promise. setSource Set the input source. Accepts a number representing a position in the array returned by getSources(). This is only available in browsers that support navigator.mediaDevices.enumerateDevices()\n\nNotice any errors or typos? Please let us know . Please feel free to edit src/AudioIn.js and open a pull request!"
    },
    {
        "link": "https://p5js.org/reference/p5.sound",
        "document": ""
    },
    {
        "link": "https://medium.spatialpixel.com/sounds-bd05429aba38",
        "document": "Ok great, so we have a sound, and we’ve loaded it. But now we want to hear it. So we need to write code that tells P5 to play the sound.\n• In the setup() function, play the sound when the sketch starts:\n• Click the “Play” button at the top of the code editor to run your p5.js sketch.\n• You’ll hear the “goat.wav” sound file play automatically when the sketch starts. If you don’t hear it but don’t see any errors it may be too quiet. Let’s play with making it louder.\n• You can change the volume by using before the . In p5.js and many other programming languages, the dot (.) notation is used to access and manipulate properties and methods of objects. So when we have created this variable goatSound that represents our sound file, we can use the dot notation to manipulate the properties of this file. Here represents the volume level. Try changing this to or to see it change.\n\nYour full sketch should look like this:\n\nThat’s it! You’ve created a simplified p5.js sketch that plays the sound. Remember to save your project in the web editor so you can access it later.\n• How might you create a button to play the sound?\n• We can then do fun things like change the pitch based on the position of our mouse. Here’s an example!\n\nSince you probably aren’t interested in making a contraption that sounds like a goat…you’re probably wondering “How can I load a larger sound file and one of my own files.” To which I respond, “Great question!”\n\nIn order to do this, you’ll need to run P5.js locally on your machine and run a local web server. This is quite common in software development and used during the development phase before hosting code projects on the cloud. We’ll do this in a future tutorial. For now just be satisfied with with “goat.wav” and the varieties of projects that can be done with “goat.wav.”\n\nIf you’re adament about using other sounds, you can find your own sounds but they’ll need to be smaller than 5mb in order to be hosted on the P5.js web editor. You can find many sounds online here: https://freesound.org/ You’ll need to create an account and most files will need to be downsized."
    },
    {
        "link": "https://p5js.org/reference",
        "document": ""
    },
    {
        "link": "https://github.com/processing/p5.js-sound/blob/master/docs/reference/data.json",
        "document": ": <p>Generate an audio source from an input such as your computer's microphone.</p> <p>Some browsers let the client choose their input source, while others leave this to the application designer, and for this we have the methods getSources() and setSoure().</p> <p>Turn the mic on/off with the on() and off() methods. When the mic is on, its volume can be measured with getLevel or by connecting an FFT object.</p> <p>If you want to hear the AudioIn, use the .connect() method. (AudioIn does not connect to p5.sound output by default to prevent feedback).</p> ,\n\n: <p>Create a SoundFile object with a path to a file.</p> <p>The SoundFile may not be available immediately because it loads the file information asynchronously.</p> <p>To do something with the sound as soon as it loads pass the name of a function as the second parameter.</p> <p>Only one file path is required. However, audio file formats (i.e. mp3, ogg, wav and m4a/aac) are not supported by all web browsers. If you want to ensure compatability, instead of a single file path, you may include an Array of filepaths, and the browser will choose a format that works.</p> ,"
    }
]