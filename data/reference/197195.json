[
    {
        "link": "https://forum.qt.io/topic/114664/how-to-set-environment-variables-properly",
        "document": "\n• I would like to know how to initialize environement variables inside my Qt application and then retrieve them to use in different classes.\n\n For example I would like to set a environment variable for an API URL (the world famous \"http://localhost:8080/\") to use it in different services. I've saw the documentation on the QProcessEnvironment class but I have to say that with my beginner level it is a bit confusing. Also I've saw on many formum posts, environment variable initialized like this: But some where posted many years ago. So is it still as good way initialize environment variables ? Can it be done in other class than the main ? And finally how to retrieve the variable ?\n• As others have noted, changes you make to the Qt program environment will be available only to child processes of your Qt App: ie QProcess spawned programs. Your comment about making the vars available to other classes is poor design methodology, if in fact that is your reason for stuffing the environment. Making data available among classes is done thru a variety of internal mechanisms, such as signal/slots, or a global data store object accessible to the classes of your program.\n• Hi,\n\n Thank you all for your replies. Given your replies it seems that I've made a mistake about what QProcess and QProcessEnvironement are made for.\n\n So my question would be:\n\n How to set variables which could be use in mutiple class inside the application ? Those kind of variables that would be put in an application.properties file in a Java/Spring Boot app (like API URL, database connexion info etc...).\n• To explain quickly, my Qt application is a desktop client which consumes a very basic REST API to do CRUD operation. To communicate with my API I've created an http service class to handle all the http request/response logic. And as the API gets more complex (with more entities for example) I might would like to have mutiple http services to avoid to have one giant unmaintainable class.\n\n But for all those service the base of the API url will remain the same (http://localhost:8080/).\n\n So I woul like to be able to declare once and use it in different classes/services. Moreover in a production application this kind of variable is expected to change depending on the different environment where the application is use and/or with which api etc... So what would be the best way to achieve this?"
    },
    {
        "link": "https://stackoverflow.com/questions/54014957/how-to-create-an-environment-variable-in-qt-installer-framework-regardless-of-os",
        "document": "How can I add a new Environment Variable to the Qt installer. I know that it should go in the .qs script something like the following:\n\nI'm trying the above on Linux, but it's complaining about not existing when I install my program."
    },
    {
        "link": "https://stackoverflow.com/questions/45348571/set-system-environment-variable-before-qt-application-start",
        "document": "I have developed one sample Qt application. My application runs only when we execute below command in terminal first.\n\nIf we don't export above variable and start application ( \"./test\") then it open the window but it has some paint rendering issue.\n\nCan anyone suggest, how can we set this variable from application itself rather then externally set from terminal ?"
    },
    {
        "link": "https://courses.cs.washington.edu/courses/cse576/15sp/Getting_started_with_Qt.pdf",
        "document": ""
    },
    {
        "link": "https://qtcentre.org/threads/70831-Qt-Installer-Framework-Environment-Variable",
        "document": "By adutzu89 in forum Installation and Deployment"
    },
    {
        "link": "https://forum.qt.io/topic/142349/problems-running-lupdate-from-within-qt-creator",
        "document": "The tool apparently does not honor the command-line option when I try to separate the strings into two different files when running the tool from within Qt Creator. I am using Qt 5.15.5 with Qt Creator 5.0.3.\n\nBackground: in the application I am creating, most of the strings marked for translation are kept in one file and compiled into an external file which is loaded at runtime. This is working OK, except that there are some (just a few) strings which need to be translated (error messages displayed in the function before any settings file is loaded), and this stub file should be embedded into the application resources.\n\nIn previous versions of Qt, I was able to place the smaller embedded strings into two files which have the extension . All of the other strings are in files. In my file, there is a section; in the , I have entered this string under :\n\nHowever, when running from within Qt Creator, it seems to ignore the fact that is removed from the extensions list, and all strings are dumped into the same file. If I run outside of Qt Creator, I can make it work as desired. Somehow, I suspect that Qt Creator is ignoring the argument?\n\nHere is the *.pro file of a small test project:\n\nAttached is a screenshot of the resulting file open in :"
    },
    {
        "link": "https://forum.qt.io/topic/119946/can-t-get-lupdate-to-work",
        "document": "\n• I run the following command (as shown in the documentation) in my cmd program:\n\n D:\\QTLinguist>lupdate counterpoint.qml -ts counterpoint_en.ts When it runs I get the following message\n\n Updating 'counterpoint_en.ts'...\n\n Found 0 source text(s) (0 new and 0 already existing). It creates the ts file, but when I try to open it with \"linguist.exe\" I get an error message telling me the ts file is blank and program ends.\n• @Christian-Ehrlicher Thank you for your response. The documentation I saw was very light on specifics about exactly how the command should be run. However, FYI, the qml file is in the same directory as the lupdate program. Windows will look in the current directory when a directory is not given. But just to be sure, I also ran the command by specifically indicating the exact location of the qml file in the command line. I also made sure the qml file is encoded in UTF-8 format. Still didn't work.\n• @Christian-Ehrlicher You just made my point. You said, \"I don't see where in the documentation this was stated. \" It is not stated in the documentation that you need to put the path, so I didn't (at first) but just to be sure, I ran it again with the path but it didn't make any difference. I wish I can send you the qml file so you can do it for me. As the song says, \"I don't care\". The qml file is a public file on Github so there is no copyright issue. I am just using it to learn how to do translations.\n\n You can go to: https://github.com/rogerioConstante/Contraponto\n\n If you get it to work, let me know and tell me specifically what you did to get it to work.\n\n BTW: I only have the lupdate, lconvert, lrelease and linguist programs on my computer. I don't need any other programs, dlls, cpps, py, or anything else on my computer to get it to work, do I?"
    },
    {
        "link": "https://stackoverflow.com/questions/2207416/qt-translation-lupdate-and-namespaces",
        "document": "While developing a Qt Application, I ran into a problem in using QTranslator. After a little research, I found out that the problem was with lupdate from Qt having problem with the\n\ndirective. Following the instructions found in here, I discovered that I have to use special comments in my code, to help lupdate understand that the classes are inside a namespace. The special comment is something like this:\n\nSo, I added this comments in all my sources that had QStrings being managed by tr. But, still, the applications is not being translated. The installTranslator method of QTranslator is returning true. The actual code I'm using to install the Translator is\n\nHave anyone ran into the same problem? What am I doing wrong?\n\nCorrected one little mistake in the code above, but still no results."
    },
    {
        "link": "https://qtcentre.org/threads/56716-lupdate-could-not-be-found",
        "document": "Is it in the PATH of your shell?"
    },
    {
        "link": "https://stackoverflow.com/questions/63225317/run-lupdate-and-lrelease-command-from-qt-creator-in-linux",
        "document": "Assuming you're using qmake, you should use the variable:\n\nThis page has some examples:\n\nThe Hello tr() Example explains the process in more detail:\n\nNote that the file extension is .ts, not .qm. The .ts translation source format is designed for use during the application's development. Programmers or release managers run the lupdate program to generate and update TS files with the source text that is extracted from the source code. Translators read and update the TS files using Qt Linguist adding and editing their translations.\n\nOnce the translations are complete the lrelease program is used to convert the TS files into the QM Qt message file format. The QM format is a compact binary format designed to deliver very fast lookup performance. Both lupdate and lrelease read all the project's source and header files (as specified in the HEADERS and SOURCES lines of the project file) and extract the strings that appear in tr() function calls.\n\nlupdate is used to create and update the message files (hellotr_la.ts in this case) to keep them in sync with the source code. It is safe to run lupdate at any time, as lupdate does not remove any information. For example, you can put it in the makefile, so the TS files are updated whenever the source changes."
    }
]