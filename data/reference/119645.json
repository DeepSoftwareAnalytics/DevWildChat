[
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat",
        "document": "The method creates a new array. The array will first be populated by the elements in the object on which it is called. Then, for each argument, its value will be concatenated into the array — for normal objects or primitives, the argument itself will become an element of the final array; for arrays or array-like objects with the property set to a truthy value, each element of the argument will be independently added to the final array. The method does not recurse into nested array arguments.\n\nThe method is a copying method. It does not alter or any of the arrays provided as arguments but instead returns a shallow copy that contains the same elements as the ones from the original arrays.\n\nThe method preserves empty slots if any of the source arrays is sparse.\n\nThe method is generic. The value is treated in the same way as the other arguments (except it will be converted to an object first), which means plain objects will be directly prepended to the resulting array, while array-like objects with truthy will be spread into the resulting array."
    },
    {
        "link": "https://w3schools.com/jsref/jsref_concat_array.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
        "document": "objects cannot use arbitrary strings as element indexes (as in an associative array) but must use nonnegative integers (or their respective string form). Setting or accessing via non-integers will not set or retrieve an element from the array list itself, but will set or access a variable associated with that array's object property collection. The array's object properties and list of array elements are separate, and the array's traversal and mutation operations cannot be applied to these named properties. Array elements are object properties in the same way that is a property (to be specific, however, is a method). Nevertheless, trying to access an element of an array as follows throws a syntax error because the property name is not valid: JavaScript syntax requires properties beginning with a digit to be accessed using bracket notation instead of dot notation. It's also possible to quote the array indices (e.g., instead of ), although usually not necessary. The in is coerced into a string by the JavaScript engine through an implicit conversion. As a result, and would refer to two different slots on the object, and the following example could be : Only is an actual array index. is an arbitrary string property that will not be visited in array iteration.\n\nMany array methods take a callback function as an argument. The callback function is called sequentially and at most once for each element in the array, and the return value of the callback function is used to determine the return value of the method. They all share the same signature: The current element being processed in the array. The index of the current element being processed in the array. The array that the method was called upon. What is expected to return depends on the array method that was called. The argument (defaults to ) will be used as the value when calling . The value ultimately observable by is determined according to the usual rules: if is non-strict, primitive values are wrapped into objects, and / is substituted with . The argument is irrelevant for any defined with an arrow function, as arrow functions don't have their own binding. The argument passed to is most useful if you want to read another index during iteration, because you may not always have an existing variable that refers to the current array. You should generally not mutate the array during iteration (see mutating initial array in iterative methods), but you can also use this argument to do so. The argument is not the array that is being built, in the case of methods like , , and — there is no way to access the array being built from the callback function. All iterative methods are copying and generic, although they behave differently with empty slots. The following methods are iterative: , , , , , , , , , and . In particular, , , , , , and do not always invoke on every element — they stop iteration as soon as the return value is determined. The and methods also take a callback function and run it at most once for each element in the array, but they have slightly different signatures from typical iterative methods (for example, they don't accept ). The method also takes a callback function, but it is not an iterative method. It mutates the array in-place, doesn't accept , and may invoke the callback multiple times on an index. Iterative methods iterate the array like the following (with a lot of technical details omitted): function method(callbackFn, thisArg) { const length = this.length; for (let i = 0; i < length; i++) { if (i in this) { const result = callbackFn.call(thisArg, this[i], i, this); // Do something with result; maybe return early } } }\n• Not all methods do the test. The , , , and methods do not, but other methods do.\n• The is memorized before the loop starts. This affects how insertions and deletions during iteration are handled (see mutating initial array in iterative methods).\n• The method doesn't memorize the array contents, so if any index is modified during iteration, the new value might be observed.\n• The code above iterates the array in ascending order of index. Some methods iterate in descending order of index ( ): , , and .\n• and have slightly different signatures and do not always start at the first/last element.\n\nArray methods are always generic — they don't access any internal data of the array object. They only access the array elements through the property and the indexed elements. This means that they can be called on array-like objects as well. The property is converted to an integer and then clamped to the range between 0 and 253 - 1. becomes , so even when is not present or is , it behaves as if it has value . The language avoids setting to an unsafe integer. All built-in methods will throw a if will be set to a number greater than 253 - 1. However, because the property of arrays throws an error if it's set to greater than 232 - 1, the safe integer threshold is usually not reached unless the method is called on a non-array object. Some array methods set the property of the array object. They always set the value after normalization, so always ends as an integer. The term array-like object refers to any object that doesn't throw during the conversion process described above. In practice, such object is expected to actually have a property and to have indexed elements in the range to . (If it doesn't have all indices, it will be functionally equivalent to a sparse array.) Any integer index less than zero or greater than is ignored when an array method operates on an array-like object. Many DOM objects are array-like — for example, and . The object is also array-like. You can call array methods on them even if they don't have these methods themselves.\n\nReturns the array item at the given index. Accepts negative integers, which count back from the last item. Returns a new array that is the calling array joined with other array(s) and/or value(s). Copies a sequence of array elements within an array. Returns a new array iterator object that contains the key/value pairs for each index in an array. Returns if every element in the calling array satisfies the testing function. Fills all the elements of an array from a start index to an end index with a static value. Returns a new array containing all elements of the calling array for which the provided filtering function returns . Returns the value of the first element in the array that satisfies the provided testing function, or if no appropriate element is found. Returns the index of the first element in the array that satisfies the provided testing function, or if no appropriate element was found. Returns the value of the last element in the array that satisfies the provided testing function, or if no appropriate element is found. Returns the index of the last element in the array that satisfies the provided testing function, or if no appropriate element was found. Returns a new array with all sub-array elements concatenated into it recursively up to the specified depth. Returns a new array formed by applying a given callback function to each element of the calling array, and then flattening the result by one level. Calls a function for each element in the calling array. Determines whether the calling array contains a value, returning or as appropriate. Returns the first (least) index at which a given element can be found in the calling array. Joins all elements of an array into a string. Returns a new array iterator that contains the keys for each index in the calling array. Returns the last (greatest) index at which a given element can be found in the calling array, or if none is found. Returns a new array containing the results of invoking a function on every element in the calling array. Removes the last element from an array and returns that element. Adds one or more elements to the end of an array, and returns the new of the array. Executes a user-supplied \"reducer\" callback function on each element of the array (from left to right), to reduce it to a single value. Executes a user-supplied \"reducer\" callback function on each element of the array (from right to left), to reduce it to a single value. Reverses the order of the elements of an array in place. (First becomes the last, last becomes first.) Removes the first element from an array and returns that element. Extracts a section of the calling array and returns a new array. Returns if at least one element in the calling array satisfies the provided testing function. Sorts the elements of an array in place and returns the array. Returns a localized string representing the calling array and its elements. Overrides the method. Returns a new array with the elements in reversed order, without modifying the original array. Returns a new array with the elements sorted in ascending order, without modifying the original array. Returns a new array with some elements removed and/or replaced at a given index, without modifying the original array. Returns a string representing the calling array and its elements. Overrides the method. Adds one or more elements to the front of an array, and returns the new of the array. Returns a new array iterator object that contains the values for each index in the array. Returns a new array with the element at the given index replaced with the given value, without modifying the original array. An alias for the method by default.\n\nIterative methods do not mutate the array on which it is called, but the function provided as can. The key principle to remember is that only indexes between 0 and are visited, where is the length of the array at the time the array method was first called, but the element passed to the callback is the value at the time the index is visited. Therefore:\n• will not visit any elements added beyond the array's initial length when the call to the iterative method began.\n• Changes to already-visited indexes do not cause to be invoked on them again.\n• If an existing, yet-unvisited element of the array is changed by , its value passed to the will be the value at the time that element gets visited. Removed elements are not visited. Warning: Concurrent modifications of the kind described above frequently lead to hard-to-understand code and are generally to be avoided (except in special cases). The following examples use the method as an example, but other methods that visit indexes in ascending order work in the same way. We will first define a helper function: Modification to indexes not visited yet will be visible once the index is reached: Modification to already visited indexes does not change iteration behavior, although the array will be different afterwards: Inserting n elements at unvisited indexes that are less than the initial array length will make them be visited. The last n elements in the original array that now have index greater than the initial array length will not be visited: testSideEffect((arr, index) => { if (index === 1) arr.splice(2, 0, \"new\"); }); // array: [e1, e2, e3, e4], index: 0, elem: e1 // array: [e1, e2, e3, e4], index: 1, elem: e2 // array: [e1, e2, new, e3, e4], index: 2, elem: new // array: [e1, e2, new, e3, e4], index: 3, elem: e3 // Final array: [e1, e2, new, e3, e4] // e4 is not visited because it now has index 4 Inserting n elements with index greater than the initial array length will not make them be visited: testSideEffect((arr) => arr.push(\"new\")); // array: [e1, e2, e3, e4], index: 0, elem: e1 // array: [e1, e2, e3, e4, new], index: 1, elem: e2 // array: [e1, e2, e3, e4, new, new], index: 2, elem: e3 // array: [e1, e2, e3, e4, new, new, new], index: 3, elem: e4 // Final array: [e1, e2, e3, e4, new, new, new, new] Inserting n elements at already visited indexes will not make them be visited, but it shifts remaining elements back by n, so the current index and the n - 1 elements before it are visited again: testSideEffect((arr, index) => arr.splice(index, 0, \"new\")); // array: [e1, e2, e3, e4], index: 0, elem: e1 // array: [new, e1, e2, e3, e4], index: 1, elem: e1 // array: [new, new, e1, e2, e3, e4], index: 2, elem: e1 // array: [new, new, new, e1, e2, e3, e4], index: 3, elem: e1 // Final array: [new, new, new, new, e1, e2, e3, e4] // e1 keeps getting visited because it keeps getting shifted back Deleting n elements at unvisited indexes will make them not be visited anymore. Because the array has shrunk, the last n iterations will visit out-of-bounds indexes. If the method ignores non-existent indexes (see array methods and empty slots), the last n iterations will be skipped; otherwise, they will receive : testSideEffect((arr, index) => { if (index === 1) arr.splice(2, 1); }); // array: [e1, e2, e3, e4], index: 0, elem: e1 // array: [e1, e2, e3, e4], index: 1, elem: e2 // array: [e1, e2, e4], index: 2, elem: e4 // Final array: [e1, e2, e4] // Does not visit index 3 because it's out-of-bounds // Compare this with find(), which treats nonexistent indexes as undefined: const arr2 = [\"e1\", \"e2\", \"e3\", \"e4\"]; arr2.find((elem, index, arr) => { console.log(`array: [${arr.join(\", \")}], index: ${index}, elem: ${elem}`); if (index === 1) arr.splice(2, 1); return false; }); // array: [e1, e2, e3, e4], index: 0, elem: e1 // array: [e1, e2, e3, e4], index: 1, elem: e2 // array: [e1, e2, e4], index: 2, elem: e4 // array: [e1, e2, e4], index: 3, elem: undefined Deleting n elements at already visited indexes does not change the fact that they were visited before they get deleted. Because the array has shrunk, the next n elements after the current index are skipped. If the method ignores non-existent indexes, the last n iterations will be skipped; otherwise, they will receive : testSideEffect((arr, index) => arr.splice(index, 1)); // array: [e1, e2, e3, e4], index: 0, elem: e1 // Does not visit e2 because e2 now has index 0, which has already been visited // array: [e2, e3, e4], index: 1, elem: e3 // Does not visit e4 because e4 now has index 1, which has already been visited // Final array: [e2, e4] // Index 2 is out-of-bounds, so it's not visited // Compare this with find(), which treats nonexistent indexes as undefined: const arr2 = [\"e1\", \"e2\", \"e3\", \"e4\"]; arr2.find((elem, index, arr) => { console.log(`array: [${arr.join(\", \")}], index: ${index}, elem: ${elem}`); arr.splice(index, 1); return false; }); // array: [e1, e2, e3, e4], index: 0, elem: e1 // array: [e2, e3, e4], index: 1, elem: e3 // array: [e2, e4], index: 2, elem: undefined // array: [e2, e4], index: 3, elem: undefined For methods that iterate in descending order of index, insertion causes elements to be skipped, and deletion causes elements to be visited multiple times. Adjust the code above yourself to see the effects."
    },
    {
        "link": "https://codedamn.com/news/javascript/merge-concat-array-explained",
        "document": "JavaScript is a versatile language that offers multiple ways to perform various tasks, including array manipulation. One common operation in JavaScript is merging or concatenating arrays. In this blog post, we will dive into the JavaScript method, explaining how it works and providing examples to help you understand how to merge arrays using JavaScript efficiently. This post is intended for beginner to intermediate developers who want to enhance their JavaScript skills.\n\nBefore we discuss the method, it's essential to understand what arrays are in JavaScript. Arrays are data structures that store multiple values in a single variable. They can store different types of data, such as numbers, strings, and objects. Arrays are ordered, meaning that each element has an index, starting from 0.\n\nHere's an example of a simple array in JavaScript:\n\nIn this example, contains three numbers, while contains three strings.\n\nThe JavaScript method is used to merge two or more arrays into a single array. It does not modify the original arrays but creates a new array containing the elements of the input arrays in the order they were passed to the method.\n\nHere's the syntax for the method:\n\nLet's dive into some examples to understand the method better.\n\nConsider the following arrays:\n\nTo merge these arrays using the method, you can do the following:\n\nIn this example, is a new array containing the elements of and in the order they were passed to the method.\n\nThe method allows you to merge multiple arrays at once. Consider the following example:\n\nIn this example, we merged three arrays into a single array using the method.\n\nThe method can also merge arrays containing nested arrays. However, it will not flatten the nested arrays. Here's an example:\n\nAs you can see, the nested array remains unchanged in the merged array.\n\nIn addition to the method, there are other ways to merge arrays in JavaScript:\n\nThe spread operator ( ) allows you to expand the elements of an array or other iterable objects. You can use the spread operator to merge arrays as follows:\n\nThe method can be used to add elements to the end of an array. By using , you can merge arrays as follows:\n\nNote that this method modifies the original array (in this case, ).\n\n1. Does the concat() method modify the original arrays?\n\nNo, the method does not modify the original arrays. It creates a new array containing the elements of the input arrays.\n\n2. Can I merge arrays with different data types?\n\nYes, you can merge arrays containing different data types using the method, as shown in the examples above.\n\n3. Can I merge more than two arrays using the concat() method?\n\nYes, you can merge multiple arrays using the method by passing them as arguments.\n\n4. How can I merge nested arrays and flatten them?\n\nThe method does not flatten nested arrays. To merge nested arrays and flatten them, you can use the method or the spread operator with the method. For example:\n\nIn conclusion, the method is a powerful tool for merging arrays in JavaScript. This blog post has provided an overview of its usage and alternative methods for merging arrays. By understanding how to manipulate arrays, you can improve your JavaScript programming skills and create more efficient, cleaner code. For more information on JavaScript arrays and their methods, visit the official Mozilla Developer Network (MDN) documentation."
    },
    {
        "link": "https://forum.freecodecamp.org/t/how-to-use-javascript-array-prototype-concat-concat-explained-with-examples/14286",
        "document": "The ‘concat’ method returns a new array consisting of the elements of the array on which you call it, followed by the elements of the arguments in the order they are passed.\n\nYou can pass multiple arguments to the ‘concat’ method. The arguments can be arrays, or data types like booleans, strings, and numbers.\n\nConcatenating value to an array"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce",
        "document": "The method of instances executes a user-supplied \"reducer\" callback function on each element of the array, in order, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements of the array is a single value. The first time that the callback is run there is no \"return value of the previous calculation\". If supplied, an initial value may be used in its place. Otherwise the array element at index 0 is used as the initial value and iteration starts from the next element (index 1 instead of index 0).\n\nA function to execute for each element in the array. Its return value becomes the value of the parameter on the next invocation of . For the last invocation, the return value becomes the return value of . The function is called with the following arguments: The value resulting from the previous call to . On the first call, its value is if the latter is specified; otherwise its value is . The value of the current element. On the first call, its value is if is specified; otherwise its value is . The index position of in the array. On the first call, its value is if is specified, otherwise . The array was called upon. A value to which is initialized the first time the callback is called. If is specified, starts executing with the first value in the array as . If is not specified, is initialized to the first value in the array, and starts executing with the second value in the array as . In this case, if the array is empty (so that there's no first value to return as ), an error is thrown.\n\nThe method is an iterative method. It runs a \"reducer\" callback function over all elements in the array, in ascending-index order, and accumulates them into a single value. Every time, the return value of is passed into again on next invocation as . The final value of (which is the value returned from on the final iteration of the array) becomes the return value of . Read the iterative methods section for more information about how these methods work in general. is invoked only for array indexes which have assigned values. It is not invoked for empty slots in sparse arrays. Unlike other iterative methods, does not accept a argument. is always called with as , which gets substituted with if is non-strict. is a central concept in functional programming, where it's not possible to mutate any value, so in order to accumulate all values in an array, one must return a new accumulator value on every iteration. This convention propagates to JavaScript's : you should use spreading or other copying methods where possible to create new arrays and objects as the accumulator, rather than mutating the existing one. If you decided to mutate the accumulator instead of copying it, remember to still return the modified object in the callback, or the next iteration will receive undefined. However, note that copying the accumulator may in turn lead to increased memory usage and degraded performance — see When to not use reduce() for more details. In such cases, to avoid bad performance and unreadable code, it's better to use a loop instead. The method is generic. It only expects the value to have a property and integer-keyed properties.\n\nIf the array only has one element (regardless of position) and no is provided, or if is provided but the array is empty, the solo value will be returned without calling . If is provided and the array is not empty, then the reduce method will always invoke the callback function starting at index 0. If is not provided then the reduce method will act differently for arrays with length larger than 1, equal to 1 and 0, as shown in the following example: const getMax = (a, b) => Math.max(a, b); // callback is invoked for each element in the array starting at index 0 [1, 100].reduce(getMax, 50); // 100 [50].reduce(getMax, 10); // 50 // callback is invoked once for element at index 1 [1, 100].reduce(getMax); // 100 // callback is not invoked [50].reduce(getMax); // 50 [].reduce(getMax, 1); // 1 [].reduce(getMax); // TypeError\n\nWhen to not use reduce() Multipurpose higher-order functions like can be powerful but sometimes difficult to understand, especially for less-experienced JavaScript developers. If code becomes clearer when using other array methods, developers must weigh the readability tradeoff against the other benefits of using . Note that is always equivalent to a loop, except that instead of mutating a variable in the upper scope, we now return the new value for each iteration: const val = array.reduce((acc, cur) => update(acc, cur), initialValue); // Is equivalent to: let val = initialValue; for (const cur of array) { val = update(val, cur); } As previously stated, the reason why people may want to use is to mimic functional programming practices of immutable data. Therefore, developers who uphold the immutability of the accumulator often copy the entire accumulator for each iteration, like this: const names = [\"Alice\", \"Bob\", \"Tiff\", \"Bruce\", \"Alice\"]; const countedNames = names.reduce((allNames, name) => { const currCount = Object.hasOwn(allNames, name) ? allNames[name] : 0; return { ...allNames, [name]: currCount + 1, }; }, {}); This code is ill-performing, because each iteration has to copy the entire object, which could be big, depending how many unique names there are. This code has worst-case performance, where is the length of . A better alternative is to mutate the object on each iteration. However, if gets mutated anyway, you may want to convert the to a loop instead, which is much clearer: const names = [\"Alice\", \"Bob\", \"Tiff\", \"Bruce\", \"Alice\"]; const countedNames = names.reduce((allNames, name) => { const currCount = allNames[name] ?? 0; allNames[name] = currCount + 1; // return allNames, otherwise the next iteration receives undefined return allNames; }, Object.create(null)); const names = [\"Alice\", \"Bob\", \"Tiff\", \"Bruce\", \"Alice\"]; const countedNames = Object.create(null); for (const name of names) { const currCount = countedNames[name] ?? 0; countedNames[name] = currCount + 1; } Therefore, if your accumulator is an array or an object and you are copying the array or object on each iteration, you may accidentally introduce quadratic complexity into your code, causing performance to quickly degrade on large data. This has happened in real-world code — see for example Making Tanstack Table 1000x faster with a 1 line change. Some of the acceptable use cases of are given above (most notably, summing an array, promise sequencing, and function piping). There are other cases where better alternatives than exist.\n• Flattening an array of arrays. Use instead.\n• Grouping objects by a property. Use instead.\n• Concatenating arrays contained in an array of objects. Use instead. const friends = [ { name: \"Anna\", books: [\"Bible\", \"Harry Potter\"] }, { name: \"Bob\", books: [\"War and peace\", \"Romeo and Juliet\"] }, { name: \"Alice\", books: [\"The Lord of the Rings\", \"The Shining\"] }, ]; const allBooks = friends.reduce((acc, cur) => [...acc, ...cur.books], []);\n• Removing duplicate items in an array. Use and instead.\n• Eliminating or adding elements in an array. Use instead. // Takes an array of numbers and splits perfect squares into its square roots const roots = array.reduce((acc, cur) => { if (cur < 0) return acc; const root = Math.sqrt(cur); if (Number.isInteger(root)) return [...acc, root, root]; return [...acc, cur]; }, []); If you are only eliminating elements from an array, you also can use .\n• Searching for elements or testing if elements satisfy a condition. Use and , or and instead. These methods have the additional benefit that they return as soon as the result is certain, without iterating the entire array. In cases where is the best choice, documentation and semantic variable naming can help mitigate readability drawbacks."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat",
        "document": "The method is a copying method. It does not alter but instead returns a shallow copy that contains the same elements as the ones from the original array.\n\nThe method removes empty slots if the array being flattened is sparse. For example, if is 1, both empty slots in the root array and in the first level of nested arrays are ignored, but empty slots in further nested arrays are preserved with the arrays themselves.\n\nThe method is generic. It only expects the value to have a property and integer-keyed properties. However, its elements must be arrays if they are to be flattened."
    },
    {
        "link": "https://medium.com/@gooddb67/flatten-an-array-using-reduce-explained-39cc8a1f7bf2",
        "document": "So, just like last week, I’d like to explore line-by-line what is happening with one of the provided examples on Reduce in the MDN documentation. Let’s go!\n\nOkay, so this week we’re gonna use Reduce to flatten an array. Flattening an array is when you have an array of arrays (AKA a multi-dimensional array), and perform some kind of operation on it so that all of the elements in the arrays are on the same level. The last line of the above snippet is what we’re shooting for.\n\nSo we call Reduce on the array we want to flatten, and then pass in ‘a’ and ‘b’ to our callback function. ‘a’ is our accumulator, and ‘b’ is the current element, or in this case, the current array. We’re also passing an empty array as our second argument, so ‘a’ in this case is an empty array, and will be our accumulator.\n\nNow the Concat method combines two arrays into one, which is perfect. Let’s look at pretty much the only significant line in the function:\n• In the first iteration, ‘a’ is an empty array that is now concatenating ‘b’ ([0, 1]).\n• At the end of the first iteration, ‘a’ is equal to [0,1].\n• Cool, now at the start of the second iteration , ‘a’ is equal to [0,1], and ‘b’ is equal to [2,3].\n• This process will continue until all elements in the original array have been iterated over, and our accumulator-array is finally returned as a one-dimensional array.\n\nThere you have it, folks. Be sure to check out the documentation on Reduce and leave any questions in the comments!"
    },
    {
        "link": "https://stackoverflow.com/questions/38545093/how-would-you-use-reduce-on-arguments-instead-of-a-specific-array-or-object",
        "document": "I want to define a function .flatten that flattens several elements into one single array. I know that the following is not possible, but essentially I would like to do this:\n\nI get the following error:\n\nI understand that the above error is because arguments is only array-like, so it does not have the full capabilities of a true array. So there is the following, but I'm wondering if there is something even cleaner:\n\nAny good way to rewrite .flatten using .reduce()?\n\nNOTE: I know there are many other ways that you can flatten arrays in javascript, but what I was wondering about here is how to do so with specifically arguments."
    },
    {
        "link": "https://w3schools.com/jsref/jsref_reduce.asp",
        "document": "Round all the numbers and display the sum:\n\nSubtract all numbers in an array:\n\nThe method returns a single value: the function's accumulated result.\n\nThe method does not execute the function for empty array elements.\n\nThe method does not change the original array.\n\nAt the first callback, there is no return value from the previous callback.\n\nNormally, array element 0 is used as initial value, and the iteration starts from array element 1.\n\nIf an initial value is supplied, this is used, and the iteration starts from array element 0."
    }
]