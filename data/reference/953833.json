[
    {
        "link": "https://servicenow.com/docs/bundle/yokohama-api-reference/page/app-store/dev_portal/API_reference/GlideRecord/concept/c_GlideRecordAPI.html",
        "document": ""
    },
    {
        "link": "https://servicenow.com/docs/bundle/vancouver-api-reference/page/app-store/dev_portal/API_reference/GlideRecord/concept/c_GlideRecordAPI.html",
        "document": ""
    },
    {
        "link": "https://servicenow.com/docs/bundle/yokohama-application-development/page/script/server-scripting/concept/c_UsingGlideRecordToQueryTables.html",
        "document": ""
    },
    {
        "link": "https://servicenow.com/docs/bundle/xanadu-application-development/page/script/server-scripting/concept/c_UsingGlideRecordToQueryTables.html",
        "document": ""
    },
    {
        "link": "https://servicenow.com/docs/bundle/xanadu-api-reference/page/script/server-scripting/concept/c_UsingGlideRecordToQueryTables.html",
        "document": ""
    },
    {
        "link": "https://servicenow.com/community/it-service-management-forum/how-to-use-asynchronous-glideajax-call/m-p/806158",
        "document": "i used below code for avoiding duplicate asset tab with state is in-use, here instead of using gliderecord how can i user asynchronous glide ajax call, can anyone plerase rspond how can i user asynchronous glideajax call for below code\n\nfunction onSubmit() {\n\n //no duplicate asset in state \"in use\" is allowed\n\n var sysid = g_form.getUniqueValue();\n\n var asset = g_form.getValue('asset_tag');\n\n var state = g_form.getValue('install_status');\n\n g_form.hideFieldMsg('asset_tag');\n\n if ( doesAssetExist(asset, sysid) > 0 && state == '1' ) {\n\n g_form.showFieldMsg('asset_tag','Only one asset can be in state \"In Use\"!','error');\n\n return false;\n\n }\n\n return true;\n\n}\n\nfunction doesAssetExist(asset, sysid) {\n\n var i=0;\n\n var rec = new GlideRecord('alm_asset');\n\n rec.addQuery('asset_tag',asset);\n\n rec.addQuery('install_status', '1');\n\n rec.query();\n\n while (rec.next()) {\n\n if ( rec.sys_id != sysid ) {\n\n i++;\n\n }\n\n }\n\n return i;\n\n}"
    },
    {
        "link": "https://servicenow.com/community/developer-forum/in-a-client-script-how-to-async-await-a-return-from-a-glideajax/m-p/2797106",
        "document": "As a follow to my previous topic: \"Script Includes but for Client-side code?\"\n\nI've started trying to implement my use case:\n\nOn a Catalog Item with three variables:\n\n- Brutto - read-only, to be written to by g_form.setValue/else\n\nI want to have the value for Brutto Var. be calculated by a GlideAjax script whenever either VAT or Netto change their values.\n\nI can use two onChange Client Scripts to do that, but I like the \"Don't Repeat Yourself\" rule. So I thought I could try a challenge: how to not repeat the same GlideAjax call twice?\n\nSo thanks to @Sandeep Rajput 's suggestion, I have found that I can use a UI script for this purpose.\n\nMy plan would be to do the following:\n• This Client Script would call the UI Script,\n• The UI Script would in turn make a GlideAjax call to a Client-callable Script Include,\n• The Script Include function returns the value to the UI Script via .getXMLAnswer,\n• The UI Script would return the value to the Catalog Client Script, which would use g_form.setValue to set the value of the Brutto variable\n• alternatively, the UI Script sets the value for Brutto on the Service Portal/backend Catalog Item request form\n\nMy current setup is approximately the following:\n\n1a. The Client Script checks whether both the fields have a valid value\n\n2. The CS makes a call to the GlideUIScripts API:\n\n3. The VatCalcUtil UI Script checks whether the provided arguments are correct, and makes a GlideAjax call:\n\nBut soon I encounter a perhaps obvious issue... The GlideAjax.getXMLAnswer call in the UI Script is run in a separate thread to the Client Script...\n\nAnd so, the next line in the Client Script fires before the UI Script is done running:\n\nI can't figure out if/how I could make a Promise call from the Client Script to a UI Script function. I also would prefer not to block the UI until I receive the GlideAjax return, so I don't want to switch away from .getXMLAnswer to something like getXMLWait.\n\nIt also seems that the UI script is ran in a different JS context - the g_form API is not available there.\n\nWhat solutions can you think of? Perhaps I can approach this from an entirely another angle?"
    },
    {
        "link": "https://servicenow.com/community/developer-articles/glideajax-example-cheat-sheet/ta-p/2312430",
        "document": "Click here for an updated version of the GlideAJAX Example Cheat Sheet\n\nIt can be hard to remember all of the Client and Server elements of a GlideAjax call. I created a simple example with color coding to help make sure I don't miss any of the details when I'm making a new call from scratch. I hope this helps. I attached a Word doc as well as the image and text below for convenience.\n\nNote: Client callable must be checked in the Script Include for this to work\n\nThis is the name of the class you create. This is usually the same as the name of the Script Include.\n\nThis is the name of the function to use in the script include. You can have a single script include with multiple functions that accept and return different parameters. For example, you could create a single Script Include for getting data related to users and keep adding functions to it as needed.\n\nThis is a parameter that is passed through the URL of the AJAX call. You can add more than one parameter. usually this is information you will use to make a GlideRecord call in the Script Include.\n\nThis is the function that asynchronously waits for a response. Any code that you need to wait for a response needs to go in the function referred to in the getXML(). Code that doesn't need to wait goes directly after the getXML() call inside the main Client Script function and won't wait for a response before executing.\n\nThese are the pieces of data you need from the Server. They are added to an object in the Script Include and passed back to the Client Script. You can do anything with these when they are returned. In this example they are used to set a value on the form."
    },
    {
        "link": "https://servicenow.com/community/developer-articles/glideajax-example-cheat-sheet-updated/ta-p/2323817",
        "document": "It can be hard to remember all of the Client and Server elements of a GlideAjax call. I created a simple example with color coding to help make sure I don't miss any of the details when I'm making a new call from scratch. I hope this helps. I attached a Word doc as well as the image and text below for convenience.\n\nNote: Client callable must be checked in the Script Include for this to work\n\nThis is the name of the class you create. This is usually the same as the name of the Script Include.\n\nThis is the name of the function to use in the script include. You can have a single script include with multiple functions that accept and return different parameters. For example, you could create a single Script Include for getting data related to users and keep adding functions to it as needed.\n\nThis is a parameter that is passed through the URL of the AJAX call. You can add more than one parameter. usually this is information you will use to make a GlideRecord call in the Script Include.\n\nThis is the function that asynchronously waits for a response. Any code that you need to wait for a response needs to go in the function referred to in the getXMLAnswer(). Code that doesn't need to wait goes directly after the getXMLAnswer() call inside the main Client Script function and won't wait for a response before executing.\n\nThese are the pieces of data you need from the Server. They are added to an object in the Script Include and passed back to the Client Script. You can do anything with these when they are returned. In this example they are used to set a value on the form."
    },
    {
        "link": "https://servicenow.com/community/developer-forum/how-to-use-asynchronous-glideajax-in-on-submit-client-script-for/m-p/1530457",
        "document": "We have a on submit client script which uses synchronous GlideAjax. As per ServiceNow's recommendations, we are making it asynchronous. The concern is that as below, we are waiting at line 4 for a response from the server and based on it we are either allowing the form to submit or not.\n\nIf we replace the synchronous logic with asynchronous, there will not be any waiting at line 4 and the form will be submitted without the validation taking place."
    },
    {
        "link": "https://servicenow.com/docs/bundle/yokohama-application-development/page/script/server-scripting/concept/c_ScriptIncludes.html",
        "document": ""
    },
    {
        "link": "https://developer.servicenow.com/dev.do#!/learn/learning-plans/xanadu/new_to_servicenow/app_store_learnv2_scripting_xanadu_script_includes",
        "document": "Script Includes are reusable server-side script logic that define a function or class. Script Includes execute their script logic only when explicitly called by other scripts. There are different types of Script Includes:\n\nScript Includes do not have many configuration options because they are called rather than triggered.\n• Name: Name of Script Include.\n• API Name: The internal name of the Script Include. Used to call the Script Include from out-of-scope applications.\n• Client callable: Select this option if client-side scripts can call the Script Include using GlideAjax.\n• Application: The application the Script Include is part of.\n• Caller Access: When the Scoped Application Restricted Caller Access (com.glide.scope.access.restricted_caller) plugin is installed, allow scoped applications to restrict access to public tables and script includes.\n• --None--: No restrictions on access.\n• Caller Restriction: Do not allow access unless an admin approves access by the scope.\n• Caller Tracking: Allow access but track which scopes access the Script Include.\n• Accessible from: Choose This application scope only or All application scopes. Specifies the scope(s) that can use the Script Include.\n• Active: Select if the Script Include is executable. If this option is not selected the Script Include will not run even if called from another script.\n• Description: (optional but highly recommended) Documentation explaining the purpose and function of the Script Include.\n• Protection policy: If set to Read-only, instances on which the application is installed from the ServiceNow Store can read but not edit the Script Include. If set to Protected, the Script Include is encrypted on instances on which the application is installed from the ServiceNow Store. Protection policies are never applied to the instance on which an application is developed."
    },
    {
        "link": "https://servicenow.com/community/developer-forum/create-run-server-side-script-to-test-script-include/m-p/1976667",
        "document": "it seems that you are validating the age and email field at client side..something like that..\n\nin this case you need to write client script,\n\nand call Script includes ... by using GlideAjax api.\n\nfollowing link will help you to call script include with different ways\n\nif you wan call one script include from another script include then following thread is useful\n\nstill if you face any kind of issue ..reply for same.\n\nif useful mark it correct or helpful."
    },
    {
        "link": "https://servicenow.com/community/developer-forum/how-to-call-script-include-from-server-script/m-p/1351105",
        "document": "Hello\n\nplease tell me.\n\nI want to call a script include in the widget server script.\n\nI can now call the script include, but the contents of the script include are not running.\n\nThere are two points I want to call.\n\n(1) If the conditions are met, turn the flag ON."
    },
    {
        "link": "https://servicenow.com/community/developer-forum/how-to-use-script-includes-in-ui-builder/m-p/2510525",
        "document": "Recently I wanted to use a script include in UIB. To my surprise, I was not able to find any instruction of how to do it. After some time, I have figured it out but it was not a trivial thing. Hence, I decided to share a basic guide for those who, similarly to me, struggle with the lack of information on this topic.\n\nMy post will have three parts:\n• Backend part: How to create a definition of a new script include\n• Frontend part: How to call the script include in a UIB script\n\nIn the post, I will be using these shortcuts:\n\nThe UIB SIs are different from the standard SIs:\n• the latter ones run server side, whereas the former ones only run client side.\n• UIB SIs are stored in their own, separate table: [sys_ux_client_script_include]\n• you are not able to call server side APIs in UIB SIs (such as GlideRecord etc.)\n• on the other hand, since the UIB SIs run in your browser, you are not restricted to ES5 in them (in other words, you are free use the arrow functions, \"let\" and \"const\" keywords etc.)\n\n2) Backend part: How to create a new SI definition\n\nIn the UX Client Script Includes table [sys_ux_client_script_include], create a new record.\n\nThe form will be looking like this:\n\nYou might wonder what is the difference between Name and API Name fields:\n• Name = the \"display name\" of your script\n• on the FE side, you will use it to add the SI into a UIB script\n• API Name = the \"system name\" of your script\n• on the FE side, you will use it to call the SI in the UIB script\n• API Name is read-only field and will auto-populate\n• the value consists of two dot-separated parts:\n• the first one = your current application scope\n• the second one = the value you have put into the Name field\n• so, if you are in the global scope and the Name is \"exampleSI\", the API Name would be: global.exampleSI\n\nHowever, the most important field is the Script field. You can see a prefilled include function there, looking like this: function include({imports}){}. Here is where all the magic happens. Whatever you put in the empty curly brackets will be executed in your browser after you call the SI.\n\nFor example, let´s say you have a SI like this:\n\nAfter calling it, this SI will log \"Hello world\" to your browser console, while returning another string (\"The script was called\") that can be further used in the script in which the SI is called.\n\nOf course, usually we do not want the SIs just to return some hard-coded value. Usually, we want the SI to return a value based on an input. So how can we do THAT?\n\nWell, this is the tricky part. In order to be able to pass any input values to the SI, we need to define a function WITHIN the include function and return that inner function.\n\nI will explain it on an example. For the sake of simplicity, let´s assume we want a SI that will work like this: it will take two numbers as arguments and it will return their sum.\n\nSuch a SI could look like this:\n\nAs you can see, the core of the SI is still the include function as it was in the previous example. Only now the include function is somewhat more complex: it returns the addTwoNumbers function which, on its part, returns the sum of its two arguments.\n\nThe complete definition of our SI could look something like this:\n\nFor our purposes, we have allowed this script to be called from any application scope, but you can restrict it to your scope only (using Accessible from field).\n\nNow we have our SI defined and we can call it from the FE.\n\n3) Frontend part: How to call the SI in a UIB script\n\nLet´s assume that in the UIB we have already created a page and on that page we have a script called exampleFrontendScript (which is triggered, for example, by clicking a button).\n\nNow, inside this exampleFrontendScript we want to call our exampleSI, so we would pass it two numbers and receive their sum.\n\nIn order to achieve that, you need to do two things:\n• add the SI to your script\n• call the SI in your script\n• click on Add a script include field and choose the SI you want to use\n• the scripts are displayed by their names\n• i.e. by the value of the Name field in the SI definition\n• after choosing the SI, click on Add button (don´t forget this, otherwise the SI won´t work!)\n• now the SI should have been added and the Details section should look like this:\n• to call the SI in your script, use this formula:\n• imports['<API Name of the SI>']()(args)\n• we call the SI by using its API Name\n• i.e. the value from the API Name field in the SI definition\n• the API Name is a string and it is inside square brackets\n• the square brackets are followed by round brackets in order to call the include function\n• the round brackets are followed by another round brackets in order to call the addTwoNumbers function and pass it the arguments\n• in our example, the logic behind the formula works like this:\n• this would return the include function (without calling it)\n• as a result, we would receive the object of the include function\n• this would return include function AND call it\n• since the include function itself returns the addTwoNumbers function, this would return the addTwoNumbers function (without calling it)\n• as a result, we would receive the object of the addTwoNumbers function\n• this calls the addTwoNumbers function, passing it two arguments (1, 2)\n• as a result, we receive the sum of the arguments => 3\n\nSo, the whole exampleFrontendScript can look something like this:\n\nI hope this post was useful. Any remarks, suggestions or further thoughts would be appreciated as I am by no means any expert on this topic."
    }
]